//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package annotator provides an interface for creating annotations with appearance
// streams.  It goes beyond the models package which includes definitions of basic annotation models, in that it
// can create the appearance streams which specify the exact appearance as needed by many pdf viewers for consistent
// appearance of the annotations.
// It also contains methods for generating appearance streams for fields via widget annotations.
package annotator ;import (_ba "bytes";_cg "errors";_gd "fmt";_d "github.com/unidoc/unipdf/v4/common";_cf "github.com/unidoc/unipdf/v4/contentstream";_gdd "github.com/unidoc/unipdf/v4/contentstream/draw";_bb "github.com/unidoc/unipdf/v4/core";_c "github.com/unidoc/unipdf/v4/creator";
_eb "github.com/unidoc/unipdf/v4/internal/precision";_e "github.com/unidoc/unipdf/v4/internal/textencoding";_be "github.com/unidoc/unipdf/v4/model";_cc "image";_f "math";_g "strings";_da "time";_ee "unicode";);

// SetStyle applies appearance `style` to `fa`.
func (_bge *FieldAppearance )SetStyle (style AppearanceStyle ){_bge ._ebf =&style };

// CreateRectangleAnnotation creates a rectangle annotation object that can be added to page PDF annotations.
func CreateRectangleAnnotation (rectDef RectangleAnnotationDef )(*_be .PdfAnnotation ,error ){_cgce :=_be .NewPdfAnnotationSquare ();if rectDef .BorderEnabled {_aadce ,_bbfg ,_babab :=rectDef .BorderColor .R (),rectDef .BorderColor .G (),rectDef .BorderColor .B ();
_cgce .C =_bb .MakeArrayFromFloats ([]float64 {_aadce ,_bbfg ,_babab });_affe :=_be .NewBorderStyle ();_affe .SetBorderWidth (rectDef .BorderWidth );_cgce .BS =_affe .ToPdfObject ();};if rectDef .FillEnabled {_bgbd ,_bcbf ,_adgbd :=rectDef .FillColor .R (),rectDef .FillColor .G (),rectDef .FillColor .B ();
_cgce .IC =_bb .MakeArrayFromFloats ([]float64 {_bgbd ,_bcbf ,_adgbd });}else {_cgce .IC =_bb .MakeArrayFromIntegers ([]int {});};if rectDef .Opacity < 1.0{_cgce .CA =_bb .MakeFloat (rectDef .Opacity );};_gffeg ,_bced ,_accb :=_ada (rectDef );if _accb !=nil {return nil ,_accb ;
};_cgce .AP =_gffeg ;_cgce .Rect =_bb .MakeArrayFromFloats ([]float64 {_bced .Llx ,_bced .Lly ,_bced .Urx ,_bced .Ury });return _cgce .PdfAnnotation ,nil ;};

// AppearanceStyle defines style parameters for appearance stream generation.
type AppearanceStyle struct{

// How much of Rect height to fill when autosizing text.
AutoFontSizeFraction float64 ;

// CheckmarkRune is a rune used for check mark in checkboxes (for ZapfDingbats font).
CheckmarkRune rune ;BorderSize float64 ;BorderColor _be .PdfColor ;FillColor _be .PdfColor ;

// Multiplier for lineheight for multi line text.
MultilineLineHeight float64 ;MultilineVAlignMiddle bool ;

// Visual guide checking alignment of field contents (debugging).
DrawAlignmentReticle bool ;

// Allow field MK appearance characteristics to override style settings.
AllowMK bool ;

// Fonts holds appearance styles for fonts.
Fonts *AppearanceFontStyle ;

// MarginLeft represents the amount of space to leave on the left side of
// the form field bounding box when generating appearances (default: 2.0).
MarginLeft *float64 ;TextColor _be .PdfColor ;

// FieldColors holds separate set of appearance styles for fields.
FieldColors map[string ]_be .PdfColor ;};func _dae (_dee *_be .PdfAnnotationWidget ,_eegg *_be .PdfFieldText ,_bgb *_be .PdfPageResources ,_fdg AppearanceStyle )(*_bb .PdfObjectDictionary ,error ){_bda :=_be .NewPdfPageResources ();_ceaa ,_efa :=_bb .GetArray (_dee .Rect );
if !_efa {return nil ,_cg .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0052\u0065\u0063\u0074");};_fdf ,_dedf :=_be .NewPdfRectangle (*_ceaa );if _dedf !=nil {return nil ,_dedf ;};_fbfg ,_ebac :=_fdf .Width (),_fdf .Height ();_gedf ,_geb :=_fbfg ,_ebac ;
_fccb ,_gagb :=_bb .GetDict (_dee .MK );if _gagb {_ebgc ,_ :=_bb .GetDict (_dee .BS );_bbfe :=_fdg .applyAppearanceCharacteristics (_fccb ,_ebgc ,nil );if _bbfe !=nil {return nil ,_bbfe ;};};_eag ,_gagb :=_bb .GetIntVal (_eegg .MaxLen );if !_gagb {return nil ,_cg .New ("\u006d\u0061\u0078\u006c\u0065\u006e\u0020\u006e\u006ft\u0020\u0073\u0065\u0074");
};if _eag <=0{return nil ,_cg .New ("\u006d\u0061\u0078\u004c\u0065\u006e\u0020\u0069\u006ev\u0061\u006c\u0069\u0064");};_ggb :=_fbfg /float64 (_eag );_bbb ,_dedf :=_cf .NewContentStreamParser (_fbb (_eegg .PdfField )).Parse ();if _dedf !=nil {return nil ,_dedf ;
};_eeb :=_cf .NewContentCreator ();if _fdg .BorderSize > 0{_befb (_eeb ,_fdg ,_fbfg ,_ebac );};if _fdg .DrawAlignmentReticle {_bfd :=_fdg ;_bfd .BorderSize =0.2;_cgcb (_eeb ,_bfd ,_fbfg ,_ebac );};_eeb .Add_BMC ("\u0054\u0078");_eeb .Add_q ();_ ,_ebac =_fdg .applyRotation (_fccb ,_fbfg ,_ebac ,_eeb );
_eeb .Add_BT ();_afb ,_dfb ,_dedf :=_fdg .processDA (_eegg .PdfField ,_bbb ,_bgb ,_bda ,_eeb );if _dedf !=nil {return nil ,_dedf ;};_gbg :=_afb .Font ;_aede :=_bb .MakeName (_afb .Name );_dccf :=_afb .Size ;_dacb :=_dccf ==0;if _dacb &&_dfb {_dccf =_ebac *_fdg .AutoFontSizeFraction ;
};_eea :=_gbg .Encoder ();if _eea ==nil {_d .Log .Debug ("\u0057\u0041RN\u003a\u0020\u0066\u006f\u006e\u0074\u0020\u0065\u006e\u0063\u006f\u0064\u0065\u0072\u0020\u0069\u0073\u0020\u006e\u0069l\u002e\u0020\u0041\u0073s\u0075\u006d\u0069\u006eg \u0069\u0064e\u006et\u0069\u0074\u0079\u0020\u0065\u006ec\u006f\u0064\u0065r\u002e\u0020O\u0075\u0074\u0070\u0075\u0074\u0020\u006d\u0061\u0079\u0020\u0062\u0065\u0020\u0069n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u002e");
_eea =_e .NewIdentityTextEncoder ("\u0049\u0064\u0065\u006e\u0074\u0069\u0074\u0079\u002d\u0048");};var _bada string ;if _ageb ,_baa :=_bb .GetString (_eegg .V );_baa {_bada =_ageb .Decoded ();};_eeb .Add_Tf (*_aede ,_dccf );var _dacf float64 ;for _ ,_edfg :=range _bada {_gabd ,_ccfb :=_gbg .GetRuneMetrics (_edfg );
if !_ccfb {_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0052\u0075\u006e\u0065\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064\u0020\u0069\u006e\u0020\u0066\u006fn\u0074\u003a\u0020\u0025\u0076\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067 \u006f\u0076\u0065\u0072",_edfg );
continue ;};_afa :=_gabd .Wy ;if int (_afa )<=0{_afa =_gabd .Wx ;};if _afa > _dacf {_dacf =_afa ;};};if int (_dacf )==0{_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0055\u006e\u0061\u0062\u006c\u0065\u0020\u0074o\u0020\u0064\u0065\u0074\u0065\u0072\u006d\u0069\u006e\u0065\u0020\u006d\u0061x\u0020\u0067\u006c\u0079\u0070\u0068\u0020\u0073\u0069\u007a\u0065\u0020- \u0075\u0073\u0069\u006e\u0067\u0020\u0031\u0030\u0030\u0030");
_dacf =1000;};_gfd ,_dedf :=_gbg .GetFontDescriptor ();if _dedf !=nil {_d .Log .Debug ("\u0045\u0072ro\u0072\u003a\u0020U\u006e\u0061\u0062\u006ce t\u006f g\u0065\u0074\u0020\u0066\u006f\u006e\u0074 d\u0065\u0073\u0063\u0072\u0069\u0070\u0074o\u0072");
};var _aaef float64 ;if _gfd !=nil {_aaef ,_dedf =_gfd .GetCapHeight ();if _dedf !=nil {_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0055\u006e\u0061\u0062\u006c\u0065 \u0074\u006f\u0020\u0067\u0065\u0074 \u0066\u006f\u006e\u0074\u0020\u0043\u0061\u0070\u0048\u0065\u0069\u0067\u0068t\u003a\u0020\u0025\u0076",_dedf );
};};if int (_aaef )<=0{_d .Log .Debug ("W\u0041\u0052\u004e\u003a\u0020\u0043\u0061\u0070\u0048e\u0069\u0067\u0068\u0074\u0020\u006e\u006ft \u0061\u0076\u0061\u0069l\u0061\u0062\u006c\u0065\u0020\u002d\u0020\u0073\u0065tt\u0069\u006eg\u0020\u0074\u006f\u0020\u0031\u0030\u0030\u0030");
_aaef =1000.0;};_ecfc :=_aaef /1000.0*_dccf ;_acbf :=0.0;_ega :=1.0*_dccf *(_dacf /1000.0);{_gae :=_ega ;if _dacb &&_acbf +_gae > _ebac {_dccf =0.95*(_ebac -_acbf );_ecfc =_aaef /1000.0*_dccf ;};if _ebac > _ecfc {_acbf =(_ebac -_ecfc )/2.0;};};_eeb .Add_Td (0,_acbf );
if _ece ,_ccff :=_bb .GetIntVal (_eegg .Q );_ccff {switch _ece {case 2:if len (_bada )< _eag {_egf :=float64 (_eag -len (_bada ))*_ggb ;_eeb .Add_Td (_egf ,0);};};};for _afaf ,_aedf :=range _bada {_dbf :=_dab ;if _fdg .MarginLeft !=nil {_dbf =*_fdg .MarginLeft ;
};_bae :=string (_aedf );if _eea !=nil {_ebae ,_cdc :=_gbg .GetRuneMetrics (_aedf );if !_cdc {_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0052\u0075\u006e\u0065\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064\u0020\u0069\u006e\u0020\u0066\u006fn\u0074\u003a\u0020\u0025\u0076\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067 \u006f\u0076\u0065\u0072",_aedf );
continue ;};_bae =string (_eea .Encode (_bae ));_daf :=_dccf *_ebae .Wx /1000.0;_agd :=(_ggb -_daf )/2;_dbf =_agd ;};_eeb .Add_Td (_dbf ,0);_eeb .Add_Tj (*_bb .MakeString (_bae ));if _afaf !=len (_bada )-1{_eeb .Add_Td (_ggb -_dbf ,0);};};_eeb .Add_ET ();
_eeb .Add_Q ();_eeb .Add_EMC ();_aedff :=_be .NewXObjectForm ();_aedff .Resources =_bda ;_aedff .BBox =_bb .MakeArrayFromFloats ([]float64 {0,0,_gedf ,_geb });_aedff .SetContentStream (_eeb .Bytes (),_adcf ());_abb :=_bb .MakeDict ();_abb .Set ("\u004e",_aedff .ToPdfObject ());
return _abb ,nil ;};

// SignatureLine represents a line of information in the signature field appearance.
type SignatureLine struct{Desc string ;Text string ;};func _db (_ce CircleAnnotationDef )(*_bb .PdfObjectDictionary ,*_be .PdfRectangle ,error ){_de :=_be .NewXObjectForm ();_de .Resources =_be .NewPdfPageResources ();_ec :="";if _ce .Opacity < 1.0{_bec :=_bb .MakeDict ();
_bec .Set ("\u0063\u0061",_bb .MakeFloat (_ce .Opacity ));_bec .Set ("\u0043\u0041",_bb .MakeFloat (_ce .Opacity ));_fb :=_de .Resources .AddExtGState ("\u0067\u0073\u0031",_bec );if _fb !=nil {_d .Log .Debug ("U\u006e\u0061\u0062\u006c\u0065\u0020t\u006f\u0020\u0061\u0064\u0064\u0020\u0065\u0078\u0074g\u0073\u0074\u0061t\u0065 \u0067\u0073\u0031");
return nil ,nil ,_fb ;};_ec ="\u0067\u0073\u0031";};_aa ,_gcd ,_aac ,_cge :=_af (_ce ,_ec );if _cge !=nil {return nil ,nil ,_cge ;};_cge =_de .SetContentStream (_aa ,nil );if _cge !=nil {return nil ,nil ,_cge ;};_de .BBox =_gcd .ToPdfObject ();_ecd :=_bb .MakeDict ();
_ecd .Set ("\u004e",_de .ToPdfObject ());return _ecd ,_aac ,nil ;};

// NewImageField generates a new image field with partial name `name` at location `rect`
// on specified `page` and with field specific options `opt`.
func NewImageField (page *_be .PdfPage ,name string ,rect []float64 ,opt ImageFieldOptions )(*_be .PdfFieldButton ,error ){if page ==nil {return nil ,_cg .New ("\u0070a\u0067e\u0020\u006e\u006f\u0074\u0020s\u0070\u0065c\u0069\u0066\u0069\u0065\u0064");
};if len (name )<=0{return nil ,_cg .New ("\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0064\u0020\u0061\u0074\u0074\u0072\u0069\u0062u\u0074e\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065\u0064");};if len (rect )!=4{return nil ,_cg .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072\u0061\u006e\u0067\u0065");
};_dedd :=_be .NewPdfField ();_gffe :=&_be .PdfFieldButton {};_gffe .PdfField =_dedd ;_dedd .SetContext (_gffe );_gffe .SetType (_be .ButtonTypePush );_gffe .T =_bb .MakeString (name );_gaba :=_be .NewPdfAnnotationWidget ();_gaba .Rect =_bb .MakeArrayFromFloats (rect );
_gaba .P =page .ToPdfObject ();_gaba .F =_bb .MakeInteger (4);_gaba .Parent =_gffe .ToPdfObject ();_bcae :=rect [2]-rect [0];_ffdg :=rect [3]-rect [1];_fbac :=opt ._adgb ;_ecce :=_cf .NewContentCreator ();if _fbac .BorderSize > 0{_befb (_ecce ,_fbac ,_bcae ,_ffdg );
};if _fbac .DrawAlignmentReticle {_aaebff :=_fbac ;_aaebff .BorderSize =0.2;_cgcb (_ecce ,_aaebff ,_bcae ,_ffdg );};_bcb ,_beb :=_gbdd (_bcae ,_ffdg ,opt .Image ,_fbac );if _beb !=nil {return nil ,_beb ;};_edb ,_fggbe :=_bb .GetDict (_gaba .MK );if _fggbe {_edb .Set ("\u006c",_bcb .ToPdfObject ());
};_fcce :=_bb .MakeDict ();_fcce .Set ("\u0046\u0052\u004d",_bcb .ToPdfObject ());_aabfb :=_be .NewPdfPageResources ();_aabfb .ProcSet =_bb .MakeArray (_bb .MakeName ("\u0050\u0044\u0046"));_aabfb .XObject =_fcce ;_bfc :=_bcae -2;_bba :=_ffdg -2;_ecce .Add_q ();
_ecce .Add_re (1,1,_bfc ,_bba );_ecce .Add_W ();_ecce .Add_n ();_bfc -=2;_bba -=2;_ecce .Add_q ();_ecce .Add_re (2,2,_bfc ,_bba );_ecce .Add_W ();_ecce .Add_n ();_ddfe :=_f .Min (_bfc /float64 (opt .Image .Width ),_bba /float64 (opt .Image .Height ));_ecce .Add_cm (_ddfe ,0,0,_ddfe ,(_bcae /2)-(float64 (opt .Image .Width )*_ddfe /2)+2,2);
_ecce .Add_Do ("\u0046\u0052\u004d");_ecce .Add_Q ();_ecce .Add_Q ();_bbfb :=_be .NewXObjectForm ();_bbfb .FormType =_bb .MakeInteger (1);_bbfb .Resources =_aabfb ;_bbfb .BBox =_bb .MakeArrayFromFloats ([]float64 {0,0,_bcae ,_ffdg });_bbfb .Matrix =_bb .MakeArrayFromFloats ([]float64 {1.0,0.0,0.0,1.0,0.0,0.0});
_bbfb .SetContentStream (_ecce .Bytes (),_adcf ());_dgg :=_bb .MakeDict ();_dgg .Set ("\u004e",_bbfb .ToPdfObject ());_gaba .AP =_dgg ;_gffe .Annotations =append (_gffe .Annotations ,_gaba );return _gffe ,nil ;};

// SetStyle applies appearance `style` to `fa`.
func (_bff *ImageFieldAppearance )SetStyle (style AppearanceStyle ){_bff ._acfa =&style };type quadding int ;

// ComboboxFieldOptions defines optional parameters for a combobox form field.
type ComboboxFieldOptions struct{

// Choices is the list of string values that can be selected.
Choices []string ;};

// NewCheckboxField generates a new checkbox field with partial name `name` at location `rect`
// on specified `page` and with field specific options `opt`.
func NewCheckboxField (page *_be .PdfPage ,name string ,rect []float64 ,opt CheckboxFieldOptions )(*_be .PdfFieldButton ,error ){if page ==nil {return nil ,_cg .New ("\u0070a\u0067e\u0020\u006e\u006f\u0074\u0020s\u0070\u0065c\u0069\u0066\u0069\u0065\u0064");
};if len (name )<=0{return nil ,_cg .New ("\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0064\u0020\u0061\u0074\u0074\u0072\u0069\u0062u\u0074e\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065\u0064");};if len (rect )!=4{return nil ,_cg .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072\u0061\u006e\u0067\u0065");
};_dafg ,_bbg :=_be .NewStandard14Font (_be .ZapfDingbatsName );if _bbg !=nil {return nil ,_bbg ;};_gcef :=_be .NewPdfField ();_ccde :=&_be .PdfFieldButton {};_gcef .SetContext (_ccde );_ccde .PdfField =_gcef ;_ccde .T =_bb .MakeString (name );_ccde .SetType (_be .ButtonTypeCheckbox );
_dadb :="\u004f\u0066\u0066";if opt .Checked {_dadb ="\u0059\u0065\u0073";};_ccde .V =_bb .MakeName (_dadb );_caf :=_be .NewPdfAnnotationWidget ();_caf .Rect =_bb .MakeArrayFromFloats (rect );_caf .P =page .ToPdfObject ();_caf .F =_bb .MakeInteger (4);
_caf .Parent =_ccde .ToPdfObject ();_gbeb :=rect [2]-rect [0];_ebcd :=rect [3]-rect [1];var _gfdc _ba .Buffer ;_gfdc .WriteString ("\u0071\u000a");_gfdc .WriteString ("\u0030 \u0030\u0020\u0031\u0020\u0072\u0067\n");_gfdc .WriteString ("\u0042\u0054\u000a");
_gfdc .WriteString ("\u002f\u005a\u0061D\u0062\u0020\u0031\u0032\u0020\u0054\u0066\u000a");_gfdc .WriteString ("\u0045\u0054\u000a");_gfdc .WriteString ("\u0051\u000a");_bgea :=_cf .NewContentCreator ();_bgea .Add_q ();_bgea .Add_rg (0,0,1);_bgea .Add_BT ();
_bgea .Add_Tf (*_bb .MakeName ("\u005a\u0061\u0044\u0062"),12);_bgea .Add_Td (0,0);_bgea .Add_ET ();_bgea .Add_Q ();_afgg :=_be .NewXObjectForm ();_afgg .SetContentStream (_bgea .Bytes (),_bb .NewRawEncoder ());_afgg .BBox =_bb .MakeArrayFromFloats ([]float64 {0,0,_gbeb ,_ebcd });
_afgg .Resources =_be .NewPdfPageResources ();_afgg .Resources .SetFontByName ("\u005a\u0061\u0044\u0062",_dafg .ToPdfObject ());_bgea =_cf .NewContentCreator ();_bgea .Add_q ();_bgea .Add_re (0,0,_gbeb ,_ebcd );_bgea .Add_W ().Add_n ();_bgea .Add_rg (0,0,1);
_bgea .Translate (0,3.0);_bgea .Add_BT ();_bgea .Add_Tf (*_bb .MakeName ("\u005a\u0061\u0044\u0062"),12);_bgea .Add_Td (0,0);_bgea .Add_Tj (*_bb .MakeString ("\u0034"));_bgea .Add_ET ();_bgea .Add_Q ();_egcf :=_be .NewXObjectForm ();_egcf .SetContentStream (_bgea .Bytes (),_bb .NewRawEncoder ());
_egcf .BBox =_bb .MakeArrayFromFloats ([]float64 {0,0,_gbeb ,_ebcd });_egcf .Resources =_be .NewPdfPageResources ();_egcf .Resources .SetFontByName ("\u005a\u0061\u0044\u0062",_dafg .ToPdfObject ());_adcfc :=_bb .MakeDict ();_adcfc .Set ("\u004f\u0066\u0066",_afgg .ToPdfObject ());
_adcfc .Set ("\u0059\u0065\u0073",_egcf .ToPdfObject ());_caad :=_bb .MakeDict ();_caad .Set ("\u004e",_adcfc );_caf .AP =_caad ;_caf .AS =_bb .MakeName (_dadb );_ccde .Annotations =append (_ccde .Annotations ,_caf );return _ccde ,nil ;};func _bcf (_gebcf _bb .PdfObject ,_gfda *_be .PdfPageResources )(*_bb .PdfObjectName ,float64 ,bool ){var (_fbaa *_bb .PdfObjectName ;
_ffbe float64 ;_dfge bool ;);if _adeag ,_dca :=_bb .GetDict (_gebcf );_dca &&_adeag !=nil {_gdeg :=_bb .TraceToDirectObject (_adeag .Get ("\u004e"));switch _affb :=_gdeg .(type ){case *_bb .PdfObjectStream :_eebbf ,_ecb :=_bb .DecodeStream (_affb );if _ecb !=nil {_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0064\u0065\u0063\u006f\u0064\u0065\u0020\u0063\u006f\u006e\u0074e\u006e\u0074\u0020\u0073\u0074r\u0065\u0061m\u003a\u0020\u0025\u0076",_ecb .Error ());
return nil ,0,false ;};_bdbgc ,_ecb :=_cf .NewContentStreamParser (string (_eebbf )).Parse ();if _ecb !=nil {_d .Log .Debug ("\u0045\u0052R\u004f\u0052\u0020\u0075n\u0061\u0062l\u0065\u0020\u0070\u0061\u0072\u0073\u0065\u0020c\u006f\u006e\u0074\u0065\u006e\u0074\u0020\u0073\u0074\u0072\u0065\u0061m\u003a\u0020\u0025\u0076",_ecb .Error ());
return nil ,0,false ;};_dga :=_cf .NewContentStreamProcessor (*_bdbgc );_dga .AddHandler (_cf .HandlerConditionEnumOperand ,"\u0054\u0066",func (_aga *_cf .ContentStreamOperation ,_dbgc _cf .GraphicsState ,_cgbe *_be .PdfPageResources )error {if len (_aga .Params )==2{if _bdc ,_eee :=_bb .GetName (_aga .Params [0]);
_eee {_fbaa =_bdc ;};if _cdd ,_bfgg :=_bb .GetNumberAsFloat (_aga .Params [1]);_bfgg ==nil {_ffbe =_cdd ;};_dfge =true ;return _cf .ErrEarlyExit ;};return nil ;});_dga .Process (_gfda );return _fbaa ,_ffbe ,_dfge ;};};return nil ,0,false ;};func _fg (_dcg *_be .PdfFieldText ,_fgg _be .PdfColor )(*_bb .PdfObjectString ,error ){_fed :=_cf .ContentStreamOperations {};
_ag :=_fbb (_dcg .PdfField );_gag ,_gagc :=_cf .NewContentStreamParser (_ag ).Parse ();if _gagc !=nil {return nil ,_gagc ;};for _ ,_gf :=range *_gag {if _gf .Operand =="\u0067"||_gf .Operand =="\u0072\u0067"{continue ;};_fed =append (_fed ,_gf );};_eae ,_bab :=_fgg .(*_be .PdfColorDeviceRGB );
if !_bab {return nil ,_gagc ;};_gab ,_ffe ,_ac :=_bb .MakeFloat (_eae [0]),_bb .MakeFloat (_eae [1]),_bb .MakeFloat (_eae [2]);_fff :=&_cf .ContentStreamOperation {Params :[]_bb .PdfObject {_gab ,_ffe ,_ac },Operand :"\u0072\u0067"};_fed =append (_fed ,_fff );
_ffc :=_fed .String ();_ffc =_g .Replace (_ffc ,"\u000a","\u0020",-1);_ffc =_g .Trim (_ffc ,"\u0020");return _bb .MakeHexString (_ffc ),nil ;};

// FormResetActionOptions holds options for creating a form reset button.
type FormResetActionOptions struct{

// Rectangle holds the button position, size, and color.
Rectangle _gdd .Rectangle ;

// Label specifies the text that would be displayed on the button.
Label string ;

// LabelColor specifies the button label color.
LabelColor _be .PdfColor ;

// Font specifies a font used for rendering the button label.
// When omitted it will fallback to use a Helvetica font.
Font *_be .PdfFont ;

// FontSize specifies the font size used in rendering the button label.
// The default font size is 12pt.
FontSize *float64 ;

// Fields specifies list of fields that could be resetted.
// This list may contain indirect object to fields or field names.
Fields *_bb .PdfObjectArray ;

// IsExclusionList specifies that the fields in the `Fields` array would be excluded form reset process.
IsExclusionList bool ;};

// CircleAnnotationDef defines a circle annotation or ellipse at position (X, Y) and Width and Height.
// The annotation has various style parameters including Fill and Border options and Opacity.
type CircleAnnotationDef struct{X float64 ;Y float64 ;Width float64 ;Height float64 ;FillEnabled bool ;FillColor *_be .PdfColorDeviceRGB ;BorderEnabled bool ;BorderWidth float64 ;BorderColor *_be .PdfColorDeviceRGB ;Opacity float64 ;};func _fbb (_acbfc *_be .PdfField )string {if _acbfc ==nil {return "";
};_ecc ,_eebb :=_acbfc .GetContext ().(*_be .PdfFieldText );if !_eebb {return _fbb (_acbfc .Parent );};if _ecc .DA !=nil {return _ecc .DA .Str ();};return _fbb (_ecc .Parent );};func _fbcfb (_aabfa _cc .Image ,_eaacf string ,_eaeg *SignatureFieldOpts ,_egbb []float64 ,_dbff *_cf .ContentCreator )(*_bb .PdfObjectName ,*_be .XObjectImage ,error ){_dagd ,_aeef :=_be .DefaultImageHandler {}.NewImageFromGoImage (_aabfa );
if _aeef !=nil {return nil ,nil ,_aeef ;};_adfa ,_aeef :=_be .NewXObjectImageFromImage (_dagd ,nil ,_eaeg .Encoder );if _aeef !=nil {return nil ,nil ,_aeef ;};_egba ,_agba :=float64 (*_adfa .Width ),float64 (*_adfa .Height );_gcb :=_egbb [2]-_egbb [0];
_gddc :=_egbb [3]-_egbb [1];if _eaeg .AutoSize {_adgf :=_f .Min (_gcb /_egba ,_gddc /_agba );_egba *=_adgf ;_agba *=_adgf ;_egbb [0]=_egbb [0]+(_gcb /2)-(_egba /2);_egbb [1]=_egbb [1]+(_gddc /2)-(_agba /2);};var _dedc *_bb .PdfObjectName ;if _dcf ,_gdgd :=_bb .GetName (_adfa .Name );
_gdgd {_dedc =_dcf ;}else {_dedc =_bb .MakeName (_eaacf );};if _dbff !=nil {_dbff .Add_q ().Translate (_egbb [0],_egbb [1]).Scale (_egba ,_agba ).Add_Do (*_dedc ).Add_Q ();}else {return nil ,nil ,_cg .New ("\u0043\u006f\u006e\u0074en\u0074\u0043\u0072\u0065\u0061\u0074\u006f\u0072\u0020\u0069\u0073\u0020\u006e\u0075l\u006c");
};return _dedc ,_adfa ,nil ;};

// LineAnnotationDef defines a line between point 1 (X1,Y1) and point 2 (X2,Y2).  The line ending styles can be none
// (regular line), or arrows at either end.  The line also has a specified width, color and opacity.
type LineAnnotationDef struct{X1 float64 ;Y1 float64 ;X2 float64 ;Y2 float64 ;LineColor *_be .PdfColorDeviceRGB ;Opacity float64 ;LineWidth float64 ;LineEndingStyle1 _gdd .LineEndingStyle ;LineEndingStyle2 _gdd .LineEndingStyle ;};

// NewFormSubmitButtonField would create a submit button in specified page according to the parameter in `FormSubmitActionOptions`.
func NewFormSubmitButtonField (page *_be .PdfPage ,opt FormSubmitActionOptions )(*_be .PdfFieldButton ,error ){_abd :=int64 (_efeca );if opt .IsExclusionList {_abd |=_cde ;};if opt .IncludeEmptyFields {_abd |=_eegbe ;};if opt .SubmitAsPDF {_abd |=_baeg ;
};_eebd :=_be .NewPdfActionSubmitForm ();_eebd .Flags =_bb .MakeInteger (_abd );_eebd .F =_be .NewPdfFilespec ();if opt .Fields !=nil {_eebd .Fields =opt .Fields ;};_eebd .F .F =_bb .MakeString (opt .Url );_eebd .F .FS =_bb .MakeName ("\u0055\u0052\u004c");
_fgd ,_adfe :=_cdfce (page ,opt .Rectangle ,"\u0062t\u006e\u0053\u0075\u0062\u006d\u0069t",opt .Label ,opt .LabelColor ,opt .Font ,opt .FontSize ,_eebd .ToPdfObject ());if _adfe !=nil {return nil ,_adfe ;};return _fgd ,nil ;};func _edcaa (_dacfe []float64 )[]float64 {var (_fafg =len (_dacfe );
_aeecd =make ([]float64 ,_fafg );_dfbd =make ([]float64 ,_fafg ););_cbdf :=2.0;_aeecd [0]=_dacfe [0]/_cbdf ;for _fdcf :=1;_fdcf < _fafg ;_fdcf ++{_dfbd [_fdcf ]=1/_cbdf ;if _fdcf < _fafg -1{_cbdf =4.0;}else {_cbdf =3.5;};_cbdf -=_dfbd [_fdcf ];_aeecd [_fdcf ]=(_dacfe [_fdcf ]-_aeecd [_fdcf -1])/_cbdf ;
};for _ecec :=1;_ecec < _fafg ;_ecec ++{_aeecd [_fafg -_ecec -1]-=_dfbd [_fafg -_ecec ]*_aeecd [_fafg -_ecec ];};return _aeecd ;};

// TextFieldOptions defines optional parameter for a text field in a form.
type TextFieldOptions struct{MaxLen int ;Value string ;

// TextColor defines the color of the text in hex format. e.g #43fd23.
// If it has an invalid value a #000000 (black) color is taken as default
TextColor string ;

// FontName defines the font of the text. Helvetica font is the default one.
// It is recommended to use one of 14 standard PDF fonts.
FontName string ;

// FontSize defines the font size of the text, 12 is used by default.
FontSize int ;};

// NewTextField generates a new text field with partial name `name` at location
// specified by `rect` on given `page` and with field specific options `opt`.
func NewTextField (page *_be .PdfPage ,name string ,rect []float64 ,opt TextFieldOptions )(*_be .PdfFieldText ,error ){if page ==nil {return nil ,_cg .New ("\u0070a\u0067e\u0020\u006e\u006f\u0074\u0020s\u0070\u0065c\u0069\u0066\u0069\u0065\u0064");};if len (name )<=0{return nil ,_cg .New ("\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0064\u0020\u0061\u0074\u0074\u0072\u0069\u0062u\u0074e\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065\u0064");
};if len (rect )!=4{return nil ,_cg .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072\u0061\u006e\u0067\u0065");};_daa :=_be .NewPdfField ();_baf :=&_be .PdfFieldText {};_daa .SetContext (_baf );_baf .PdfField =_daa ;_baf .T =_bb .MakeString (name );
if opt .MaxLen > 0{_baf .MaxLen =_bb .MakeInteger (int64 (opt .MaxLen ));};if len (opt .Value )> 0{_baf .V =_bb .MakeString (opt .Value );};if opt .TextColor !=""{_fgcc :=_c .ColorRGBFromHex (opt .TextColor );_eef ,_gdf ,_dgdg :=_fgcc .ToRGB ();_dcfg :=12;
if opt .FontSize > 0{_dcfg =opt .FontSize ;};_efda :="\u0048e\u006c\u0076\u0065\u0074\u0069\u0063a";if opt .FontName !=""{_efda =opt .FontName ;};_aeebe :=_gd .Sprintf ("/\u0025\u0073\u0020\u0025\u0064\u0020T\u0066\u0020\u0025\u002e\u0033\u0066\u0020\u0025\u002e3\u0066\u0020\u0025.\u0033f\u0020\u0072\u0067",_efda ,_dcfg ,_eef ,_gdf ,_dgdg );
_baf .DA =_bb .MakeString (_aeebe );};_daa .SetContext (_baf );_ggcf :=_be .NewPdfAnnotationWidget ();_ggcf .Rect =_bb .MakeArrayFromFloats (rect );_ggcf .P =page .ToPdfObject ();_ggcf .F =_bb .MakeInteger (4);_ggcf .Parent =_baf .ToPdfObject ();_baf .Annotations =append (_baf .Annotations ,_ggcf );
return _baf ,nil ;};

// FileAnnotationDef holds base information for constructing an file attachment annotation.
type FileAnnotationDef struct{

// Bounding box of the annotation.
X float64 ;Y float64 ;Width float64 ;Height float64 ;

// EmbeddedFile is the file information to be attached.
EmbeddedFile *_be .EmbeddedFile ;

// Author is the author of the attachment file.
Author string ;

// Subject is the subject of the attachment file.
Subject string ;

// Description of the file attachment that will be displayed as a comment on the PDF reader.
Description string ;

// IconName is The name of an icon that shall be used in displaying the annotation.
// Conforming readers shall provide predefined icon appearances for at least the following standard names:
//
// - Graph
// - PushPin
// - Paperclip
// - Tag
//
// Additional names may be supported as well. Default value: "PushPin".
IconName string ;

// Color is the color of the annotation.
Color *_be .PdfColorDeviceRGB ;

// CreationDate is the date and time when the file attachment was created.
// If not set, the current time is used.
CreationDate *_da .Time ;};func _bagd (_fec *_be .PdfAnnotationWidget ,_adf *_be .PdfFieldButton ,_ebc *_be .PdfPageResources ,_agb AppearanceStyle )(*_bb .PdfObjectDictionary ,error ){_adbc ,_ecdg :=_bb .GetArray (_fec .Rect );if !_ecdg {return nil ,_cg .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0052\u0065\u0063\u0074");
};_fffd ,_fef :=_be .NewPdfRectangle (*_adbc );if _fef !=nil {return nil ,_fef ;};_fefe ,_ceg :=_fffd .Width (),_fffd .Height ();_dbc ,_gcdd :=_fefe ,_ceg ;_d .Log .Debug ("\u0043\u0068\u0065\u0063kb\u006f\u0078\u002c\u0020\u0077\u0061\u0020\u0042\u0053\u003a\u0020\u0025\u0076",_fec .BS );
_adg ,_fef :=_be .NewStandard14Font ("\u005a\u0061\u0070f\u0044\u0069\u006e\u0067\u0062\u0061\u0074\u0073");if _fef !=nil {return nil ,_fef ;};_dec ,_fca :=_bb .GetDict (_fec .MK );if _fca {_aec ,_ :=_bb .GetDict (_fec .BS );_bca :=_agb .applyAppearanceCharacteristics (_dec ,_aec ,_adg );
if _bca !=nil {return nil ,_bca ;};};_aagf :=_be .NewXObjectForm ();{_fag :=_cf .NewContentCreator ();if _agb .BorderSize > 0{_befb (_fag ,_agb ,_fefe ,_ceg );};if _agb .DrawAlignmentReticle {_dbdf :=_agb ;_dbdf .BorderSize =0.2;_cgcb (_fag ,_dbdf ,_fefe ,_ceg );
};_fefe ,_ceg =_agb .applyRotation (_dec ,_fefe ,_ceg ,_fag );_efeb :=_agb .AutoFontSizeFraction *_ceg ;_bede ,_beg :=_adg .GetRuneMetrics (_agb .CheckmarkRune );if !_beg {return nil ,_cg .New ("\u0067l\u0079p\u0068\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064");
};_cbd :=_adg .Encoder ();_dfa :=_cbd .Encode (string (_agb .CheckmarkRune ));_ebge :=_bede .Wx *_efeb /1000.0;_ffee :=705.0;_fba :=_ffee /1000.0*_efeb ;_begd :=_dab ;if _agb .MarginLeft !=nil {_begd =*_agb .MarginLeft ;};_dda :=1.0;if _ebge < _fefe {_begd =(_fefe -_ebge )/2.0;
};if _fba < _ceg {_dda =(_ceg -_fba )/2.0;};_fag .Add_q ().Add_g (0).Add_BT ().Add_Tf ("\u005a\u0061\u0044\u0062",_efeb ).Add_Td (_begd ,_dda ).Add_Tj (*_bb .MakeStringFromBytes (_dfa )).Add_ET ().Add_Q ();_aagf .Resources =_be .NewPdfPageResources ();
_aagf .Resources .SetFontByName ("\u005a\u0061\u0044\u0062",_adg .ToPdfObject ());_aagf .BBox =_bb .MakeArrayFromFloats ([]float64 {0,0,_dbc ,_gcdd });_aagf .SetContentStream (_fag .Bytes (),_adcf ());};_degb :=_be .NewXObjectForm ();{_bcg :=_cf .NewContentCreator ();
if _agb .BorderSize > 0{_befb (_bcg ,_agb ,_fefe ,_ceg );};_degb .BBox =_bb .MakeArrayFromFloats ([]float64 {0,0,_dbc ,_gcdd });_degb .SetContentStream (_bcg .Bytes (),_adcf ());};_dce :=_bb .PdfObjectName ("\u0059\u0065\u0073");_bdfe ,_fca :=_bb .GetDict (_fec .PdfAnnotation .AP );
if _fca &&_bdfe !=nil {_fea :=_bb .TraceToDirectObject (_bdfe .Get ("\u004e"));switch _fdd :=_fea .(type ){case *_bb .PdfObjectDictionary :_agg :=_fdd .Keys ();for _ ,_ccdc :=range _agg {if _ccdc !="\u004f\u0066\u0066"{_dce =_ccdc ;};};};};_cagf :=_bb .MakeDict ();
_cagf .Set ("\u004f\u0066\u0066",_degb .ToPdfObject ());_cagf .Set (_dce ,_aagf .ToPdfObject ());_fcb :=_bb .MakeDict ();_fcb .Set ("\u004e",_cagf );return _fcb ,nil ;};

// CreateLineAnnotation creates a line annotation object that can be added to page PDF annotations.
func CreateLineAnnotation (lineDef LineAnnotationDef )(*_be .PdfAnnotation ,error ){_fcac :=_be .NewPdfAnnotationLine ();_fcac .L =_bb .MakeArrayFromFloats ([]float64 {lineDef .X1 ,lineDef .Y1 ,lineDef .X2 ,lineDef .Y2 });_cbc :=_bb .MakeName ("\u004e\u006f\u006e\u0065");
if lineDef .LineEndingStyle1 ==_gdd .LineEndingStyleArrow {_cbc =_bb .MakeName ("C\u006c\u006f\u0073\u0065\u0064\u0041\u0072\u0072\u006f\u0077");};_bcdc :=_bb .MakeName ("\u004e\u006f\u006e\u0065");if lineDef .LineEndingStyle2 ==_gdd .LineEndingStyleArrow {_bcdc =_bb .MakeName ("C\u006c\u006f\u0073\u0065\u0064\u0041\u0072\u0072\u006f\u0077");
};_fcac .LE =_bb .MakeArray (_cbc ,_bcdc );if lineDef .Opacity < 1.0{_fcac .CA =_bb .MakeFloat (lineDef .Opacity );};_gcbb ,_fde ,_def :=lineDef .LineColor .R (),lineDef .LineColor .G (),lineDef .LineColor .B ();_fcac .IC =_bb .MakeArrayFromFloats ([]float64 {_gcbb ,_fde ,_def });
_fcac .C =_bb .MakeArrayFromFloats ([]float64 {_gcbb ,_fde ,_def });_dgca :=_be .NewBorderStyle ();_dgca .SetBorderWidth (lineDef .LineWidth );_fcac .BS =_dgca .ToPdfObject ();_gdbb ,_dfbf ,_cagb :=_fbcg (lineDef );if _cagb !=nil {return nil ,_cagb ;};
_fcac .AP =_gdbb ;_fcac .Rect =_bb .MakeArrayFromFloats ([]float64 {_dfbf .Llx ,_dfbf .Lly ,_dfbf .Urx ,_dfbf .Ury });return _fcac .PdfAnnotation ,nil ;};

// NewFormResetButtonField would create a reset button in specified page according to the parameter in `FormResetActionOptions`.
func NewFormResetButtonField (page *_be .PdfPage ,opt FormResetActionOptions )(*_be .PdfFieldButton ,error ){_fgf :=_be .NewPdfActionResetForm ();_fgf .Fields =opt .Fields ;_fgf .Flags =_bb .MakeInteger (0);if opt .IsExclusionList {_fgf .Flags =_bb .MakeInteger (1);
};_egge ,_cfga :=_cdfce (page ,opt .Rectangle ,"\u0062\u0074\u006e\u0052\u0065\u0073\u0065\u0074",opt .Label ,opt .LabelColor ,opt .Font ,opt .FontSize ,_fgf .ToPdfObject ());if _cfga !=nil {return nil ,_cfga ;};return _egge ,nil ;};func _fge (_fdc *_be .PdfAnnotationWidget ,_cfd *_be .PdfFieldText ,_gage *_be .PdfPageResources ,_gdg AppearanceStyle )(*_bb .PdfObjectDictionary ,error ){_bde :=_be .NewPdfPageResources ();
_ggf ,_ged :=_bb .GetArray (_fdc .Rect );if !_ged {return nil ,_cg .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0052\u0065\u0063\u0074");};_acf ,_age :=_be .NewPdfRectangle (*_ggf );if _age !=nil {return nil ,_age ;};_efd ,_ecf :=_acf .Width (),_acf .Height ();
_bac ,_gea :=_efd ,_ecf ;_cd :=true ;_bbf :=_be .NewXObjectForm ();_bbf .BBox =_bb .MakeArrayFromFloats ([]float64 {0,0,_bac ,_gea });if _fdc .AP !=nil {if _ddbd ,_eaa :=_bb .GetDict (_fdc .AP );_eaa &&_ddbd !=nil {_fbf :=_bb .TraceToDirectObject (_ddbd .Get ("\u004e"));
switch _ead :=_fbf .(type ){case *_bb .PdfObjectStream :_ad ,_cgef :=_bb .DecodeStream (_ead );if _cgef !=nil {_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0064\u0065\u0063\u006f\u0064\u0065\u0020\u0063\u006f\u006e\u0074e\u006e\u0074\u0020\u0073\u0074r\u0065\u0061m\u003a\u0020\u0025\u0076",_cgef .Error ());
break ;};_gb ,_cgef :=_cf .NewContentStreamParser (string (_ad )).Parse ();if _cgef !=nil {_d .Log .Debug ("\u0045\u0052R\u004f\u0052\u0020\u0075n\u0061\u0062l\u0065\u0020\u0070\u0061\u0072\u0073\u0065\u0020c\u006f\u006e\u0074\u0065\u006e\u0074\u0020\u0073\u0074\u0072\u0065\u0061m\u003a\u0020\u0025\u0076",_cgef .Error ());
break ;};_bacg :=_cf .NewContentStreamProcessor (*_gb );_bacg .AddHandler (_cf .HandlerConditionEnumAllOperands ,"",func (_eegb *_cf .ContentStreamOperation ,_eaac _cf .GraphicsState ,_bc *_be .PdfPageResources )error {if _eegb .Operand =="\u0054\u006a"||_eegb .Operand =="\u0054\u004a"{if len (_eegb .Params )==1{if _gded ,_cag :=_bb .GetString (_eegb .Params [0]);
_cag {_cd =_g .TrimSpace (_gded .Str ())=="";};return _cf .ErrEarlyExit ;};return nil ;};return nil ;});_bacg .Process (_bde );if !_cd {if _bdf ,_bdd :=_bb .GetDict (_ead .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"));_bdd {_bde ,_cgef =_be .NewPdfPageResourcesFromDict (_bdf );
if _cgef !=nil {return nil ,_cgef ;};};if _afg ,_gdee :=_bb .GetArray (_ead .Get ("\u004d\u0061\u0074\u0072\u0069\u0078"));_gdee {_bbf .Matrix =_afg ;};_bbf .SetContentStream (_ad ,_adcf ());};};};};if _cd {_aad ,_aaf :=_bb .GetDict (_fdc .MK );if _aaf {_aadc ,_ :=_bb .GetDict (_fdc .BS );
_dag :=_gdg .applyAppearanceCharacteristics (_aad ,_aadc ,nil );if _dag !=nil {return nil ,_dag ;};};_fgc ,_fgb :=_cf .NewContentStreamParser (_fbb (_cfd .PdfField )).Parse ();if _fgb !=nil {return nil ,_fgb ;};_eg :=_cf .NewContentCreator ();if _gdg .BorderSize > 0{_befb (_eg ,_gdg ,_efd ,_ecf );
};if _gdg .DrawAlignmentReticle {_dff :=_gdg ;_dff .BorderSize =0.2;_cgcb (_eg ,_dff ,_efd ,_ecf );};_eg .Add_BMC ("\u0054\u0078");_eg .Add_q ();_efd ,_ecf =_gdg .applyRotation (_aad ,_efd ,_ecf ,_eg );_eg .Add_BT ();_adb ,_gfe ,_fgb :=_gdg .processDA (_cfd .PdfField ,_fgc ,_gage ,_bde ,_eg );
if _fgb !=nil {return nil ,_fgb ;};_cgf :=_adb .Font ;_aacb :=_adb .Size ;_cgb :=_bb .MakeName (_adb .Name );if _cfd .Flags ().Has (_be .FieldFlagMultiline )&&_cfd .MaxLen !=nil {_d .Log .Debug ("\u004c\u006f\u006f\u006b\u0020\u0066\u006f\u0072\u0020\u0041\u0050\u0020\u0064\u0069\u0063\u0074\u0069\u006fn\u0061\u0072\u0079\u0020\u0066\u006f\u0072 \u004e\u0020\u006f\u0062\u006a\u0065\u0063\u0074\u0020\u0063\u006fn\u0074\u0065\u006e\u0074\u0020\u0073\u0074\u0072\u0065\u0061\u006d");
if _efb ,_fffa ,_aab :=_bcf (_fdc .PdfAnnotation .AP ,_gage );_aab {_cgb =_efb ;_aacb =_fffa ;_gfe =true ;};};_acb :=_aacb ==0;if _acb &&_gfe {_aacb =_ecf *_gdg .AutoFontSizeFraction ;};_efc :=_cgf .Encoder ();if _efc ==nil {_d .Log .Debug ("\u0057\u0041RN\u003a\u0020\u0066\u006f\u006e\u0074\u0020\u0065\u006e\u0063\u006f\u0064\u0065\u0072\u0020\u0069\u0073\u0020\u006e\u0069l\u002e\u0020\u0041\u0073s\u0075\u006d\u0069\u006eg \u0069\u0064e\u006et\u0069\u0074\u0079\u0020\u0065\u006ec\u006f\u0064\u0065r\u002e\u0020O\u0075\u0074\u0070\u0075\u0074\u0020\u006d\u0061\u0079\u0020\u0062\u0065\u0020\u0069n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u002e");
_efc =_e .NewIdentityTextEncoder ("\u0049\u0064\u0065\u006e\u0074\u0069\u0074\u0079\u002d\u0048");};_aae ,_fgb :=_cgf .GetFontDescriptor ();if _fgb !=nil {_d .Log .Debug ("\u0045\u0072ro\u0072\u003a\u0020U\u006e\u0061\u0062\u006ce t\u006f g\u0065\u0074\u0020\u0066\u006f\u006e\u0074 d\u0065\u0073\u0063\u0072\u0069\u0070\u0074o\u0072");
};var _bbd string ;if _dgf ,_ccb :=_bb .GetString (_cfd .V );_ccb {_bbd =_dgf .Decoded ();};if len (_bbd )==0{return nil ,nil ;};_ceb :=[]string {_bbd };_aed :=false ;if _cfd .Flags ().Has (_be .FieldFlagMultiline ){_aed =true ;_bbd =_g .Replace (_bbd ,"\u000d\u000a","\u000a",-1);
_bbd =_g .Replace (_bbd ,"\u000d","\u000a",-1);_ceb =_g .Split (_bbd ,"\u000a");};_ffb :=make ([]string ,len (_ceb ));copy (_ffb ,_ceb );_cae :=_gdg .MultilineLineHeight ;_bbdg :=0.0;_bf :=0;if _efc !=nil {for _aacb >=0{_fdcc :=make ([]string ,len (_ceb ));
copy (_fdcc ,_ceb );_edf :=make ([]string ,len (_ffb ));copy (_edf ,_ffb );_bbdg =0.0;_bf =0;_dac :=len (_fdcc );_gee :=0;for _gee < _dac {var _cdf float64 ;_dde :=-1;_fee :=_dab ;if _gdg .MarginLeft !=nil {_fee =*_gdg .MarginLeft ;};for _deg ,_aafb :=range _fdcc [_gee ]{if _aafb ==' '{_dde =_deg ;
};_ebd ,_bed :=_cgf .GetRuneMetrics (_aafb );if !_bed {_d .Log .Debug ("\u0046\u006f\u006e\u0074\u0020\u0064o\u0065\u0073\u0020\u006e\u006f\u0074\u0020\u0068\u0061\u0076\u0065\u0020\u0072\u0075\u006e\u0065\u0020\u006d\u0065\u0074r\u0069\u0063\u0073\u0020\u0066\u006f\u0072\u0020\u0025\u0076\u0020\u002d\u0020\u0073k\u0069p\u0070\u0069\u006e\u0067",_aafb );
continue ;};_cdf =_fee ;_fee +=_ebd .Wx ;if _aed &&!_acb &&_aacb *_fee /1000.0> _efd {_aabf :=_deg ;_eaab :=_deg ;if _dde > 0{_aabf =_dde +1;_eaab =_dde ;};_dfd :=_fdcc [_gee ][_aabf :];_egc :=_edf [_gee ][_aabf :];if _gee < len (_fdcc )-1{_fdcc =append (_fdcc [:_gee +1],_fdcc [_gee :]...);
_fdcc [_gee +1]=_dfd ;_edf =append (_edf [:_gee +1],_edf [_gee :]...);_edf [_gee +1]=_egc ;}else {_fdcc =append (_fdcc ,_dfd );_edf =append (_edf ,_egc );};_fdcc [_gee ]=_fdcc [_gee ][0:_eaab ];_edf [_gee ]=_edf [_gee ][0:_eaab ];_dac ++;_fee =_cdf ;break ;
};};if _fee > _bbdg {_bbdg =_fee ;};_fdcc [_gee ]=string (_efc .Encode (_fdcc [_gee ]));if len (_fdcc [_gee ])> 0{_bf ++;};_gee ++;};_acc :=_aacb ;if _bf > 1{_acc *=_cae ;};_cdfa :=float64 (_bf )*_acc ;if _acb ||_cdfa <=_ecf {_ceb =_fdcc ;_ffb =_edf ;break ;
};_aacb --;};};_ccf :=_dab ;if _gdg .MarginLeft !=nil {_ccf =*_gdg .MarginLeft ;};if _aacb ==0||_acb &&_bbdg > 0&&_ccf +_bbdg *_aacb /1000.0> _efd {_aacb =0.95*1000.0*(_efd -_ccf )/_bbdg ;};_gcdc :=_bg ;{if _bbda ,_gac :=_bb .GetIntVal (_cfd .Q );_gac {switch _bbda {case 0:_gcdc =_bg ;
case 1:_gcdc =_ge ;case 2:_gcdc =_dbe ;default:_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0055\u006e\u0073\u0075\u0070\u0070\u006f\u0072t\u0065\u0064\u0020\u0071\u0075\u0061\u0064\u0064\u0069\u006e\u0067\u003a\u0020%\u0064\u0020\u002d\u0020\u0075\u0073\u0069\u006e\u0067\u0020\u006c\u0065ft\u0020\u0061\u006c\u0069\u0067\u006e\u006d\u0065\u006e\u0074",_bbda );
};};};_dba :=_aacb ;if _aed &&_bf > 1{_dba =_cae *_aacb ;};var _cbb float64 ;if _aae !=nil {_cbb ,_fgb =_aae .GetCapHeight ();if _fgb !=nil {_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0055\u006e\u0061\u0062\u006c\u0065 \u0074\u006f\u0020\u0067\u0065\u0074 \u0066\u006f\u006e\u0074\u0020\u0043\u0061\u0070\u0048\u0065\u0069\u0067\u0068t\u003a\u0020\u0025\u0076",_fgb );
};};if int (_cbb )<=0{_d .Log .Debug ("W\u0041\u0052\u004e\u003a\u0020\u0043\u0061\u0070\u0048e\u0069\u0067\u0068\u0074\u0020\u006e\u006ft \u0061\u0076\u0061\u0069l\u0061\u0062\u006c\u0065\u0020\u002d\u0020\u0073\u0065tt\u0069\u006eg\u0020\u0074\u006f\u0020\u0031\u0030\u0030\u0030");
_cbb =1000;};_bee :=_cbb /1000.0*_aacb ;_caa :=0.0;{_baga :=float64 (_bf )*_dba ;if _acb &&_caa +_baga > _ecf {_aacb =0.95*(_ecf -_caa )/float64 (_bf );_dba =_aacb ;if _aed &&_bf > 1{_dba =_cae *_aacb ;};_bee =_cbb /1000.0*_aacb ;_baga =float64 (_bf )*_dba ;
};if _ecf > _baga {if _aed {if _gdg .MultilineVAlignMiddle {_ccbg :=(_ecf -(_baga +_bee ))/2.0;_gfg :=_ccbg +_baga +_bee -_dba ;_caa =_gfg ;if _bf > 1{_caa =_caa +(_baga /_aacb *float64 (_bf ))-_dba -_bee ;};if _caa < _baga {_caa =(_ecf -_bee )/2.0;};}else {_caa =_ecf -_dba ;
if _caa > _aacb {_gagd :=0.0;if _aed &&_gdg .MultilineLineHeight > 1&&_bf > 1{_gagd =_gdg .MultilineLineHeight -1;};_caa -=_aacb *(0.5-_gagd );};};}else {_caa =(_ecf -_bee )/2.0;};};};if _gdg .TextColor !=nil {_ebg :=_gdg .TextColor ;_cad ,_dcc :=_ebg .(*_be .PdfColorDeviceRGB );
if !_dcc {_cad =_be .NewPdfColorDeviceRGB (0,0,0);};_eg .Add_rg (_cad .R (),_cad .G (),_cad .B ());}else {for _ ,_bef :=range *_fgc {if _bef .Operand =="\u0072\u0067"||_bef .Operand =="\u0067"{_eg .AddOperand (*_bef );};};};_eg .Add_Tf (*_cgb ,_aacb );
_eg .Add_Td (_ccf ,_caa );_cfbg :=_ccf ;_edc :=_ccf ;for _afc ,_deb :=range _ceb {_edca :=0.0;for _ ,_ded :=range _ffb [_afc ]{_cbf ,_aag :=_cgf .GetRuneMetrics (_ded );if !_aag {continue ;};_edca +=_cbf .Wx ;};_bgee :=_edca /1000.0*_aacb ;_dcgb :=_efd -_bgee ;
var _beeb float64 ;switch _gcdc {case _bg :_beeb =_cfbg ;case _ge :_beeb =_dcgb /2;case _dbe :_beeb =_dcgb ;};_ccf =_beeb -_edc ;if _ccf > 0.0{_eg .Add_Td (_ccf ,0);};_edc =_beeb ;_eg .Add_Tj (*_bb .MakeString (_deb ));if _afc < len (_ceb )-1{_eg .Add_Td (0,-_aacb *_cae );
};};_eg .Add_ET ();_eg .Add_Q ();_eg .Add_EMC ();_bbf .SetContentStream (_eg .Bytes (),_adcf ());};_bbf .Resources =_bde ;_bfb :=_bb .MakeDict ();_bfb .Set ("\u004e",_bbf .ToPdfObject ());return _bfb ,nil ;};

// FieldAppearance implements interface model.FieldAppearanceGenerator and generates appearance streams
// for fields taking into account what value is in the field. A common use case is for generating the
// appearance stream prior to flattening fields.
//
// If `OnlyIfMissing` is true, the field appearance is generated only for fields that do not have an
// appearance stream specified.
// If `RegenerateTextFields` is true, all text fields are regenerated (even if OnlyIfMissing is true).
type FieldAppearance struct{OnlyIfMissing bool ;RegenerateTextFields bool ;_ebf *AppearanceStyle ;};

// GenerateAppearanceDict generates an appearance dictionary for widget annotation `wa` for the `field` in `form`.
// Implements interface model.FieldAppearanceGenerator.
func (_cfb FieldAppearance )GenerateAppearanceDict (form *_be .PdfAcroForm ,field *_be .PdfField ,wa *_be .PdfAnnotationWidget )(*_bb .PdfObjectDictionary ,error ){_d .Log .Trace ("\u0047\u0065n\u0065\u0072\u0061\u0074e\u0041\u0070p\u0065\u0061\u0072\u0061\u006e\u0063\u0065\u0044i\u0063\u0074\u0020\u0066\u006f\u0072\u0020\u0025\u0076\u0020\u0020\u0056:\u0020\u0025\u002b\u0076",field .PartialName (),field .V );
_ ,_cgg :=field .GetContext ().(*_be .PdfFieldText );_gde ,_dbd :=_bb .GetDict (wa .AP );if _dbd &&_cfb .OnlyIfMissing &&(!_cgg ||!_cfb .RegenerateTextFields ){_d .Log .Trace ("\u0041\u006c\u0072\u0065a\u0064\u0079\u0020\u0070\u006f\u0070\u0075\u006c\u0061\u0074e\u0064 \u002d\u0020\u0069\u0067\u006e\u006f\u0072i\u006e\u0067");
return _gde ,nil ;};if form .DR ==nil {form .DR =_be .NewPdfPageResources ();};switch _dc :=field .GetContext ().(type ){case *_be .PdfFieldText :_gcda :=_dc ;if _bag :=_fbb (_gcda .PdfField );_bag ==""{_gcda .DA =form .DA ;};if _cfb ._ebf !=nil {if _cfb ._ebf .FieldColors !=nil &&_cfb ._ebf .FieldColors [field .PartialName ()]!=nil {_dcb :=_cfb ._ebf .FieldColors [field .PartialName ()];
_eba ,_dd :=_fg (_gcda ,_dcb );if _dd !=nil {return nil ,_dd ;};_gcda .DA =_eba ;}else if _cfb ._ebf .TextColor !=nil {_fa ,_ea :=_fg (_gcda ,_cfb ._ebf .TextColor );if _ea !=nil {return nil ,_ea ;};_gcda .DA =_fa ;};};switch {case _gcda .Flags ().Has (_be .FieldFlagPassword ):return nil ,nil ;
case _gcda .Flags ().Has (_be .FieldFlagFileSelect ):return nil ,nil ;case _gcda .Flags ().Has (_be .FieldFlagComb ):if _gcda .MaxLen !=nil {_ddb ,_ab :=_dae (wa ,_gcda ,form .DR ,_cfb .Style ());if _ab !=nil {return nil ,_ab ;};return _ddb ,nil ;};};_abc ,_fcc :=_fge (wa ,_gcda ,form .DR ,_cfb .Style ());
if _fcc !=nil {return nil ,_fcc ;};return _abc ,nil ;case *_be .PdfFieldButton :_cgc :=_dc ;if _cgc .IsCheckbox (){_cgd ,_ddf :=_bagd (wa ,_cgc ,form .DR ,_cfb .Style ());if _ddf !=nil {return nil ,_ddf ;};return _cgd ,nil ;};_d .Log .Debug ("\u0054\u004f\u0044\u004f\u003a\u0020\u0055\u004e\u0048\u0041\u004e\u0044\u004c\u0045\u0044 \u0062u\u0074\u0074\u006f\u006e\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u002b\u0076",_cgc .GetType ());
case *_be .PdfFieldChoice :_ed :=_dc ;switch {case _ed .Flags ().Has (_be .FieldFlagCombo ):_ccg ,_cac :=_efcd (form ,wa ,_ed ,_cfb .Style ());if _cac !=nil {return nil ,_cac ;};return _ccg ,nil ;default:_d .Log .Debug ("\u0054\u004f\u0044\u004f\u003a\u0020\u0055N\u0048\u0041\u004eD\u004c\u0045\u0044\u0020c\u0068\u006f\u0069\u0063\u0065\u0020\u0066\u0069\u0065\u006c\u0064\u0020\u0077\u0069\u0074\u0068\u0020\u0066\u006c\u0061\u0067\u0073\u003a\u0020\u0025\u0073",_ed .Flags ().String ());
};default:_d .Log .Debug ("\u0054\u004f\u0044\u004f\u003a\u0020\u0055\u004e\u0048\u0041N\u0044\u004c\u0045\u0044\u0020\u0066\u0069e\u006c\u0064\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0054",_dc );};return nil ,nil ;};

// NewSignatureField returns a new signature field with a visible appearance
// containing the specified signature lines and styled according to the
// specified options.
func NewSignatureField (signature *_be .PdfSignature ,lines []*SignatureLine ,opts *SignatureFieldOpts )(*_be .PdfFieldSignature ,error ){if signature ==nil {return nil ,_cg .New ("\u0073\u0069\u0067na\u0074\u0075\u0072\u0065\u0020\u0063\u0061\u006e\u006e\u006f\u0074\u0020\u0062\u0065\u0020\u006e\u0069\u006c");
};_gaac ,_bbfc :=_fga (lines ,opts );if _bbfc !=nil {return nil ,_bbfc ;};_febe :=_be .NewPdfFieldSignature (signature );_febe .Rect =_bb .MakeArrayFromFloats (opts .Rect );_febe .AP =_gaac ;return _febe ,nil ;};

// FormSubmitActionOptions holds options for creating a form submit button.
type FormSubmitActionOptions struct{

// Rectangle holds the button position, size, and color.
Rectangle _gdd .Rectangle ;

// Url specifies the URL where the fieds will be submitted.
Url string ;

// Label specifies the text that would be displayed on the button.
Label string ;

// LabelColor specifies the button label color.
LabelColor _be .PdfColor ;

// Font specifies a font used for rendering the button label.
// When omitted it will fallback to use a Helvetica font.
Font *_be .PdfFont ;

// FontSize specifies the font size used in rendering the button label.
// The default font size is 12pt.
FontSize *float64 ;

// Fields specifies list of fields that could be submitted.
// This list may contain indirect object to fields or field names.
Fields *_bb .PdfObjectArray ;

// IsExclusionList specifies that the fields contain in `Fields` array would not be submitted.
IsExclusionList bool ;

// IncludeEmptyFields specifies if all fields would be submitted even though it's value is empty.
IncludeEmptyFields bool ;

// SubmitAsPDF specifies that the document shall be submitted as PDF.
// If set then all the other flags shall be ignored.
SubmitAsPDF bool ;};

// ImageFieldAppearance implements interface model.FieldAppearanceGenerator and generates appearance streams
// for attaching an image to a button field.
type ImageFieldAppearance struct{OnlyIfMissing bool ;_acfa *AppearanceStyle ;};

// InkAnnotationDef holds base information for constructing an ink annotation.
type InkAnnotationDef struct{

// Paths is the array of stroked paths which compose the annotation.
Paths []_gdd .Path ;

// Color is the color of the line. Default to black.
Color *_be .PdfColorDeviceRGB ;

// LineWidth is the width of the line.
LineWidth float64 ;};func _cbeb (_gegc *InkAnnotationDef )(*_bb .PdfObjectDictionary ,*_be .PdfRectangle ,error ){_accd :=_be .NewXObjectForm ();_dfe ,_bbbe ,_dbcg :=_gcc (_gegc );if _dbcg !=nil {return nil ,nil ,_dbcg ;};_dbcg =_accd .SetContentStream (_dfe ,nil );
if _dbcg !=nil {return nil ,nil ,_dbcg ;};_accd .BBox =_bbbe .ToPdfObject ();_accd .Resources =_be .NewPdfPageResources ();_accd .Resources .ProcSet =_bb .MakeArray (_bb .MakeName ("\u0050\u0044\u0046"));_geag :=_bb .MakeDict ();_geag .Set ("\u004e",_accd .ToPdfObject ());
return _geag ,_bbbe ,nil ;};func _gead (_bacgd LineAnnotationDef ,_ddgb string )([]byte ,*_be .PdfRectangle ,*_be .PdfRectangle ,error ){_cfca :=_gdd .Line {X1 :0,Y1 :0,X2 :_bacgd .X2 -_bacgd .X1 ,Y2 :_bacgd .Y2 -_bacgd .Y1 ,LineColor :_bacgd .LineColor ,Opacity :_bacgd .Opacity ,LineWidth :_bacgd .LineWidth ,LineEndingStyle1 :_bacgd .LineEndingStyle1 ,LineEndingStyle2 :_bacgd .LineEndingStyle2 };
_fdgf ,_fadbc ,_cgea :=_cfca .Draw (_ddgb );if _cgea !=nil {return nil ,nil ,nil ,_cgea ;};_gged :=&_be .PdfRectangle {};_gged .Llx =_bacgd .X1 +_fadbc .Llx ;_gged .Lly =_bacgd .Y1 +_fadbc .Lly ;_gged .Urx =_bacgd .X1 +_fadbc .Urx ;_gged .Ury =_bacgd .Y1 +_fadbc .Ury ;
return _fdgf ,_fadbc ,_gged ,nil ;};const (_cde =1;_eegbe =2;_efeca =4;_gfee =8;_cdfca =16;_aca =32;_gfdf =64;_bcca =128;_baeg =256;_geaa =512;_ffdb =1024;_fcab =2048;_gdda =4096;);

// SignatureFieldOpts represents a set of options used to configure
// an appearance widget dictionary.
type SignatureFieldOpts struct{

// Rect represents the area the signature annotation is displayed on.
Rect []float64 ;

// AutoSize specifies if the content of the appearance should be
// scaled to fit in the annotation rectangle.
AutoSize bool ;

// Font specifies the font of the text content.
Font *_be .PdfFont ;

// FontSize specifies the size of the text content.
FontSize float64 ;

// LineHeight specifies the height of a line of text in the appearance annotation.
LineHeight float64 ;

// TextColor represents the color of the text content displayed.
TextColor _be .PdfColor ;

// FillColor represents the background color of the appearance annotation area.
FillColor _be .PdfColor ;

// FillOpacity sets the opacity of the background of the appearance annotation area.
// Range is 0.0 - 1.0. Default is 1.0, opaque.
FillOpacity float64 ;

// BorderSize represents border size of the appearance annotation area.
BorderSize float64 ;

// BorderColor represents the border color of the appearance annotation area.
BorderColor _be .PdfColor ;

// WatermarkImage specifies the image used as a watermark that will be rendered
// behind the signature.
WatermarkImage _cc .Image ;

// Image represents the image used for the signature appearance.
Image _cc .Image ;

// Encoder specifies the image encoder used for image signature. Defaults to flate encoder.
Encoder _bb .StreamEncoder ;

// ImagePosition specifies the image location relative to the text signature.
ImagePosition SignatureImagePosition ;};func _cdfce (_bdef *_be .PdfPage ,_dbfe _gdd .Rectangle ,_edbe string ,_aagfb string ,_fbe _be .PdfColor ,_aebd *_be .PdfFont ,_gffb *float64 ,_adeb _bb .PdfObject )(*_be .PdfFieldButton ,error ){_dcd ,_aggf :=_dbfe .X ,_dbfe .Y ;
_adec :=_dbfe .Width ;_afgcb :=_dbfe .Height ;if _dbfe .FillColor ==nil {_dbfe .FillColor =_be .NewPdfColorDeviceGray (0.7);};if _fbe ==nil {_fbe =_be .NewPdfColorDeviceGray (0);};if _aebd ==nil {_gbca ,_gcbc :=_be .NewStandard14Font ("\u0048e\u006c\u0076\u0065\u0074\u0069\u0063a");
if _gcbc !=nil {return nil ,_gcbc ;};_aebd =_gbca ;};_cgbg :=_be .NewPdfField ();_fefea :=&_be .PdfFieldButton {};_cgbg .SetContext (_fefea );_fefea .PdfField =_cgbg ;_fefea .T =_bb .MakeString (_edbe );_fefea .SetType (_be .ButtonTypePush );_fefea .V =_bb .MakeName ("\u004f\u0066\u0066");
_fefea .Ff =_bb .MakeInteger (4);_bfda :=_bb .MakeDict ();_bfda .Set (*_bb .MakeName ("\u0043\u0041"),_bb .MakeString (_aagfb ));_dbac ,_fgda :=_aebd .GetFontDescriptor ();if _fgda !=nil {return nil ,_fgda ;};_cgcg :=_bb .MakeName ("\u0048e\u006c\u0076\u0065\u0074\u0069\u0063a");
_cegb :=12.0;if _dbac !=nil &&_dbac .FontName !=nil {_cgcg ,_ =_bb .GetName (_dbac .FontName );};if _gffb !=nil {_cegb =*_gffb ;};_gfdcg :=_cf .NewContentCreator ();_gfdcg .Add_q ();_gfdcg .SetNonStrokingColor (_dbfe .FillColor );_gfdcg .Add_re (0,0,_adec ,_afgcb );
_gfdcg .Add_f ();_gfdcg .Add_Q ();_gfdcg .Add_q ();_gfdcg .Add_BT ();_eeef :=0.0;for _ ,_fedec :=range _aagfb {_fadb ,_cbac :=_aebd .GetRuneMetrics (_fedec );if !_cbac {_d .Log .Debug ("\u0046\u006f\u006e\u0074\u0020\u0064o\u0065\u0073\u0020\u006e\u006f\u0074\u0020\u0068\u0061\u0076\u0065\u0020\u0072\u0075\u006e\u0065\u0020\u006d\u0065\u0074r\u0069\u0063\u0073\u0020\u0066\u006f\u0072\u0020\u0025\u0076\u0020\u002d\u0020\u0073k\u0069p\u0070\u0069\u006e\u0067",_fedec );
continue ;};_eeef +=_fadb .Wx ;};_eeef =_eeef /1000.0*_cegb ;var _abcg float64 ;if _dbac !=nil {_abcg ,_fgda =_dbac .GetCapHeight ();if _fgda !=nil {_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0055\u006e\u0061\u0062\u006c\u0065 \u0074\u006f\u0020\u0067\u0065\u0074 \u0066\u006f\u006e\u0074\u0020\u0043\u0061\u0070\u0048\u0065\u0069\u0067\u0068t\u003a\u0020\u0025\u0076",_fgda );
};};if int (_abcg )<=0{_d .Log .Debug ("W\u0041\u0052\u004e\u003a\u0020\u0043\u0061\u0070\u0048e\u0069\u0067\u0068\u0074\u0020\u006e\u006ft \u0061\u0076\u0061\u0069l\u0061\u0062\u006c\u0065\u0020\u002d\u0020\u0073\u0065tt\u0069\u006eg\u0020\u0074\u006f\u0020\u0031\u0030\u0030\u0030");
_abcg =1000;};_gad :=_abcg /1000.0*_cegb ;_cdg :=(_afgcb -_gad )/2.0;_eagb :=(_adec -_eeef )/2.0;_gfdcg .Add_Tf (*_cgcg ,_cegb );_gfdcg .SetNonStrokingColor (_fbe );_gfdcg .Add_Td (_eagb ,_cdg );_gfdcg .Add_Tj (*_bb .MakeString (_aagfb ));_gfdcg .Add_ET ();
_gfdcg .Add_Q ();_ggee :=_be .NewXObjectForm ();_ggee .SetContentStream (_gfdcg .Bytes (),_bb .NewRawEncoder ());_ggee .BBox =_bb .MakeArrayFromFloats ([]float64 {0,0,_adec ,_afgcb });_ggee .Resources =_be .NewPdfPageResources ();_ggee .Resources .SetFontByName (*_cgcg ,_aebd .ToPdfObject ());
_cfbgb :=_bb .MakeDict ();_cfbgb .Set ("\u004e",_ggee .ToPdfObject ());_bacc :=_be .NewPdfAnnotationWidget ();_bacc .Rect =_bb .MakeArrayFromFloats ([]float64 {_dcd ,_aggf ,_dcd +_adec ,_aggf +_afgcb });_bacc .P =_bdef .ToPdfObject ();_bacc .F =_bb .MakeInteger (4);
_bacc .Parent =_fefea .ToPdfObject ();_bacc .A =_adeb ;_bacc .MK =_bfda ;_bacc .AP =_cfbgb ;_fefea .Annotations =append (_fefea .Annotations ,_bacc );return _fefea ,nil ;};func _gcc (_cgbec *InkAnnotationDef )([]byte ,*_be .PdfRectangle ,error ){_cacd :=[][]_gdd .CubicBezierCurve {};
for _ ,_dcbc :=range _cgbec .Paths {if _dcbc .Length ()==0{continue ;};_aedb :=_dcbc .Points ;_gbeg ,_fccd ,_eega :=_cdgb (_aedb );if _eega !=nil {return nil ,nil ,_eega ;};if len (_gbeg )!=len (_fccd ){return nil ,nil ,_cg .New ("\u0049\u006e\u0065\u0071\u0075\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0063\u0061l\u0063\u0075\u006c\u0061\u0074\u0065\u0064\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u006e\u0064\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0063\u006f\u006e\u0074\u0072o\u006c\u0020\u0070\u006f\u0069n\u0074");
};_bedb :=[]_gdd .CubicBezierCurve {};for _dfgc :=0;_dfgc < len (_gbeg );_dfgc ++{_bedb =append (_bedb ,_gdd .CubicBezierCurve {P0 :_aedb [_dfgc ],P1 :_gbeg [_dfgc ],P2 :_fccd [_dfgc ],P3 :_aedb [_dfgc +1]});};if len (_bedb )> 0{_cacd =append (_cacd ,_bedb );
};};_eab ,_cgdgb ,_gcdgg :=_cgge (_cacd ,_cgbec .Color ,_cgbec .LineWidth );if _gcdgg !=nil {return nil ,nil ,_gcdgg ;};return _eab ,_cgdgb ,nil ;};

// CreateInkAnnotation creates an ink annotation object that can be added to the annotation list of a PDF page.
func CreateInkAnnotation (inkDef InkAnnotationDef )(*_be .PdfAnnotation ,error ){_bafc :=_be .NewPdfAnnotationInk ();_fbba :=_bb .MakeArray ();for _ ,_afdd :=range inkDef .Paths {if _afdd .Length ()==0{continue ;};_egd :=[]float64 {};for _ ,_eafc :=range _afdd .Points {_gdfc :=_eb .RoundDefault (_eafc .X );
_dcab :=_eb .RoundDefault (_eafc .Y );_egd =append (_egd ,_gdfc ,_dcab );};_fbba .Append (_bb .MakeArrayFromFloats (_egd ));};_bafc .InkList =_fbba ;if inkDef .Color ==nil {inkDef .Color =_be .NewPdfColorDeviceRGB (0.0,0.0,0.0);};_bafc .C =_bb .MakeArrayFromFloats ([]float64 {inkDef .Color .R (),inkDef .Color .G (),inkDef .Color .B ()});
_gadd ,_edg ,_fabae :=_cbeb (&inkDef );if _fabae !=nil {return nil ,_fabae ;};_bafc .AP =_gadd ;_bafc .Rect =_bb .MakeArrayFromFloats ([]float64 {_edg .Llx ,_edg .Lly ,_edg .Urx ,_edg .Ury });return _bafc .PdfAnnotation ,nil ;};func _fbcg (_gba LineAnnotationDef )(*_bb .PdfObjectDictionary ,*_be .PdfRectangle ,error ){_ggeg :=_be .NewXObjectForm ();
_ggeg .Resources =_be .NewPdfPageResources ();_gdc :="";if _gba .Opacity < 1.0{_ggg :=_bb .MakeDict ();_ggg .Set ("\u0063\u0061",_bb .MakeFloat (_gba .Opacity ));_cbdd :=_ggeg .Resources .AddExtGState ("\u0067\u0073\u0031",_ggg );if _cbdd !=nil {_d .Log .Debug ("U\u006e\u0061\u0062\u006c\u0065\u0020t\u006f\u0020\u0061\u0064\u0064\u0020\u0065\u0078\u0074g\u0073\u0074\u0061t\u0065 \u0067\u0073\u0031");
return nil ,nil ,_cbdd ;};_gdc ="\u0067\u0073\u0031";};_aeac ,_fbfd ,_fgdg ,_afee :=_gead (_gba ,_gdc );if _afee !=nil {return nil ,nil ,_afee ;};_afee =_ggeg .SetContentStream (_aeac ,nil );if _afee !=nil {return nil ,nil ,_afee ;};_ggeg .BBox =_fbfd .ToPdfObject ();
_gfgf :=_bb .MakeDict ();_gfgf .Set ("\u004e",_ggeg .ToPdfObject ());return _gfgf ,_fgdg ,nil ;};

// ImageFieldOptions defines optional parameters for a push button with image attach capability form field.
type ImageFieldOptions struct{Image *_be .Image ;_adgb AppearanceStyle ;};func _ebde (_afd *_be .PdfField ,_bgd ,_adba float64 ,_ege string ,_dfab AppearanceStyle ,_fbc *_cf .ContentStreamOperations ,_ebab *_be .PdfPageResources ,_bdac *_bb .PdfObjectDictionary )(*_be .XObjectForm ,error ){_dedfc :=_be .NewPdfPageResources ();
_ccffd ,_ddd :=_bgd ,_adba ;_gebc :=_cf .NewContentCreator ();if _dfab .BorderSize > 0{_befb (_gebc ,_dfab ,_bgd ,_adba );};if _dfab .DrawAlignmentReticle {_fbfe :=_dfab ;_fbfe .BorderSize =0.2;_cgcb (_gebc ,_fbfe ,_bgd ,_adba );};_gebc .Add_BMC ("\u0054\u0078");
_gebc .Add_q ();_gebc .Add_BT ();_bgd ,_adba =_dfab .applyRotation (_bdac ,_bgd ,_adba ,_gebc );_ffcf ,_dbdg ,_aef :=_dfab .processDA (_afd ,_fbc ,_ebab ,_dedfc ,_gebc );if _aef !=nil {return nil ,_aef ;};_bcc :=_ffcf .Font ;_bfa :=_ffcf .Size ;_gda :=_bb .MakeName (_ffcf .Name );
_gec :=_bfa ==0;if _gec &&_dbdg {_bfa =_adba *_dfab .AutoFontSizeFraction ;};_dgd :=_bcc .Encoder ();if _dgd ==nil {_d .Log .Debug ("\u0057\u0041RN\u003a\u0020\u0066\u006f\u006e\u0074\u0020\u0065\u006e\u0063\u006f\u0064\u0065\u0072\u0020\u0069\u0073\u0020\u006e\u0069l\u002e\u0020\u0041\u0073s\u0075\u006d\u0069\u006eg \u0069\u0064e\u006et\u0069\u0074\u0079\u0020\u0065\u006ec\u006f\u0064\u0065r\u002e\u0020O\u0075\u0074\u0070\u0075\u0074\u0020\u006d\u0061\u0079\u0020\u0062\u0065\u0020\u0069n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u002e");
_dgd =_e .NewIdentityTextEncoder ("\u0049\u0064\u0065\u006e\u0074\u0069\u0074\u0079\u002d\u0048");};if len (_ege )==0{return nil ,nil ;};_bbe :=_dab ;if _dfab .MarginLeft !=nil {_bbe =*_dfab .MarginLeft ;};_fgea :=0.0;if _dgd !=nil {for _ ,_gce :=range _ege {_gef ,_badf :=_bcc .GetRuneMetrics (_gce );
if !_badf {_d .Log .Debug ("\u0046\u006f\u006e\u0074\u0020\u0064o\u0065\u0073\u0020\u006e\u006f\u0074\u0020\u0068\u0061\u0076\u0065\u0020\u0072\u0075\u006e\u0065\u0020\u006d\u0065\u0074r\u0069\u0063\u0073\u0020\u0066\u006f\u0072\u0020\u0025\u0076\u0020\u002d\u0020\u0073k\u0069p\u0070\u0069\u006e\u0067",_gce );
continue ;};_fgea +=_gef .Wx ;};_ege =string (_dgd .Encode (_ege ));};if _bfa ==0||_gec &&_fgea > 0&&_bbe +_fgea *_bfa /1000.0> _bgd {_bfa =0.95*1000.0*(_bgd -_bbe )/_fgea ;};_bbc :=1.0*_bfa ;_bagg :=2.0;{_gge :=_bbc ;if _gec &&_bagg +_gge > _adba {_bfa =0.95*(_adba -_bagg );
_bbc =1.0*_bfa ;_gge =_bbc ;};if _adba > _gge {_bagg =(_adba -_gge )/2.0;_bagg +=1.50;};};_gebc .Add_Tf (*_gda ,_bfa );_gebc .Add_Td (_bbe ,_bagg );_gebc .Add_Tj (*_bb .MakeString (_ege ));_gebc .Add_ET ();_gebc .Add_Q ();_gebc .Add_EMC ();_gecb :=_be .NewXObjectForm ();
_gecb .Resources =_dedfc ;_gecb .BBox =_bb .MakeArrayFromFloats ([]float64 {0,0,_ccffd ,_ddd });_gecb .SetContentStream (_gebc .Bytes (),_adcf ());return _gecb ,nil ;};

// CreateCircleAnnotation creates a circle/ellipse annotation object with appearance stream that can be added to
// page PDF annotations.
func CreateCircleAnnotation (circDef CircleAnnotationDef )(*_be .PdfAnnotation ,error ){_ccd :=_be .NewPdfAnnotationCircle ();if circDef .BorderEnabled {_a ,_cb ,_gg :=circDef .BorderColor .R (),circDef .BorderColor .G (),circDef .BorderColor .B ();_ccd .C =_bb .MakeArrayFromFloats ([]float64 {_a ,_cb ,_gg });
_gc :=_be .NewBorderStyle ();_gc .SetBorderWidth (circDef .BorderWidth );_ccd .BS =_gc .ToPdfObject ();};if circDef .FillEnabled {_ca ,_fe ,_cfg :=circDef .FillColor .R (),circDef .FillColor .G (),circDef .FillColor .B ();_ccd .IC =_bb .MakeArrayFromFloats ([]float64 {_ca ,_fe ,_cfg });
}else {_ccd .IC =_bb .MakeArrayFromIntegers ([]int {});};if circDef .Opacity < 1.0{_ccd .CA =_bb .MakeFloat (circDef .Opacity );};_ae ,_fc ,_eeg :=_db (circDef );if _eeg !=nil {return nil ,_eeg ;};_ccd .AP =_ae ;_ccd .Rect =_bb .MakeArrayFromFloats ([]float64 {_fc .Llx ,_fc .Lly ,_fc .Urx ,_fc .Ury });
return _ccd .PdfAnnotation ,nil ;};

// NewSignatureLine returns a new signature line displayed as a part of the
// signature field appearance.
func NewSignatureLine (desc ,text string )*SignatureLine {return &SignatureLine {Desc :desc ,Text :text };};

// RectangleAnnotationDef is a rectangle defined with a specified Width and Height and a lower left corner at (X,Y).
// The rectangle can optionally have a border and a filling color.
// The Width/Height includes the border (if any specified).
type RectangleAnnotationDef struct{X float64 ;Y float64 ;Width float64 ;Height float64 ;FillEnabled bool ;FillColor *_be .PdfColorDeviceRGB ;BorderEnabled bool ;BorderWidth float64 ;BorderColor *_be .PdfColorDeviceRGB ;Opacity float64 ;};func _bgegb (_fbed *_be .PdfFieldButton ,_baaa *_be .PdfAnnotationWidget ,_bafb AppearanceStyle )(*_bb .PdfObjectDictionary ,error ){_bgac ,_eec :=_bb .GetArray (_baaa .Rect );
if !_eec {return nil ,_cg .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0052\u0065\u0063\u0074");};_bfdd ,_ggce :=_be .NewPdfRectangle (*_bgac );if _ggce !=nil {return nil ,_ggce ;};_agac ,_cdbb :=_bfdd .Width (),_bfdd .Height ();_fggc :=_cf .NewContentCreator ();
if _bafb .BorderSize > 0{_befb (_fggc ,_bafb ,_agac ,_cdbb );};if _bafb .DrawAlignmentReticle {_dgb :=_bafb ;_dgb .BorderSize =0.2;_cgcb (_fggc ,_dgb ,_agac ,_cdbb );};_dcfa :=_fbed .GetFillImage ();_gbb ,_ggce :=_gbdd (_agac ,_cdbb ,_dcfa ,_bafb );if _ggce !=nil {return nil ,_ggce ;
};_badb ,_ddfa :=_bb .GetDict (_baaa .MK );if _ddfa {_badb .Set ("\u006c",_gbb .ToPdfObject ());};_caff :=_bb .MakeDict ();_caff .Set ("\u0046\u0052\u004d",_gbb .ToPdfObject ());_cdgg :=_be .NewPdfPageResources ();_cdgg .ProcSet =_bb .MakeArray (_bb .MakeName ("\u0050\u0044\u0046"));
_cdgg .XObject =_caff ;_eeag :=_agac -2;_becd :=_cdbb -2;_fggc .Add_q ();_fggc .Add_re (1,1,_eeag ,_becd );_fggc .Add_W ();_fggc .Add_n ();_eeag -=2;_becd -=2;_fggc .Add_q ();_fggc .Add_re (2,2,_eeag ,_becd );_fggc .Add_W ();_fggc .Add_n ();_dbda :=_f .Min (_eeag /float64 (_dcfa .Width ),_becd /float64 (_dcfa .Height ));
_fggc .Add_cm (_dbda ,0,0,_dbda ,(_agac /2)-(float64 (_dcfa .Width )*_dbda /2)+2,2);_fggc .Add_Do ("\u0046\u0052\u004d");_fggc .Add_Q ();_fggc .Add_Q ();_bgfa :=_be .NewXObjectForm ();_bgfa .FormType =_bb .MakeInteger (1);_bgfa .Resources =_cdgg ;_bgfa .BBox =_bb .MakeArrayFromFloats ([]float64 {0,0,_agac ,_cdbb });
_bgfa .Matrix =_bb .MakeArrayFromFloats ([]float64 {1.0,0.0,0.0,1.0,0.0,0.0});_bgfa .SetContentStream (_fggc .Bytes (),_adcf ());_adbf :=_bb .MakeDict ();_adbf .Set ("\u004e",_bgfa .ToPdfObject ());return _adbf ,nil ;};

// AppearanceFontStyle defines font style characteristics for form fields,
// used in the filling/flattening process.
type AppearanceFontStyle struct{

// Fallback represents a global font fallback, used for fields which do
// not specify a font in their default appearance (DA). The fallback is
// also used if there is a font specified in the DA, but it is not
// found in the AcroForm resources (DR).
Fallback *AppearanceFont ;

// FallbackSize represents a global font size fallback used for fields
// which do not specify a font size in their default appearance (DA).
// The fallback size is applied only if its value is larger than zero.
FallbackSize float64 ;

// FieldFallbacks defines font fallbacks for specific fields. The map keys
// represent the names of the fields (which can be specified by their
// partial or full names). Specific field fallback fonts take precedence
// over the global font fallback.
FieldFallbacks map[string ]*AppearanceFont ;

// ForceReplace forces the replacement of fonts in the filling/flattening
// process, even if the default appearance (DA) specifies a valid font.
// If no fallback font is provided, setting this field has no effect.
ForceReplace bool ;};

// NewSignatureFieldOpts returns a new initialized instance of options
// used to generate a signature appearance.
func NewSignatureFieldOpts ()*SignatureFieldOpts {return &SignatureFieldOpts {Font :_be .DefaultFont (),FontSize :10,LineHeight :1,AutoSize :true ,TextColor :_be .NewPdfColorDeviceGray (0),BorderColor :_be .NewPdfColorDeviceGray (0),FillColor :_be .NewPdfColorDeviceGray (1),FillOpacity :1.0,Encoder :_bb .NewFlateEncoder (),ImagePosition :SignatureImageLeft };
};func _befb (_gabg *_cf .ContentCreator ,_cdbf AppearanceStyle ,_afe ,_cbg float64 ){_gabg .Add_q ().Add_re (0,0,_afe ,_cbg ).Add_w (_cdbf .BorderSize ).SetStrokingColor (_cdbf .BorderColor ).SetNonStrokingColor (_cdbf .FillColor ).Add_B ().Add_Q ();};


// CreateFileAttachmentAnnotation creates a file attachment annotation object that can be added to the annotation list of a PDF page.
func CreateFileAttachmentAnnotation (fileDef FileAnnotationDef )(*_be .PdfAnnotation ,error ){_aabc :=_be .NewPdfFileSpecFromEmbeddedFile (fileDef .EmbeddedFile );if fileDef .Color ==nil {fileDef .Color =_be .NewPdfColorDeviceRGB (0.0,0.0,0.0);};if fileDef .Description ==""{fileDef .Description =fileDef .EmbeddedFile .Name ;
};if fileDef .CreationDate ==nil {_afgc :=_da .Now ();fileDef .CreationDate =&_afgc ;};if fileDef .IconName ==""{fileDef .IconName ="\u0050u\u0073\u0068\u0050\u0069\u006e";};_gbda ,_baba :=_be .NewPdfDateFromTime (*fileDef .CreationDate );if _baba !=nil {return nil ,_baba ;
};_caef :=_be .NewPdfAnnotationFileAttachment ();_caef .FS =_aabc .ToPdfObject ();_caef .C =_bb .MakeArrayFromFloats ([]float64 {fileDef .Color .R (),fileDef .Color .G (),fileDef .Color .B ()});_caef .Contents =_bb .MakeString (fileDef .Description );_caef .CreationDate =_gbda .ToPdfObject ();
_caef .M =_gbda .ToPdfObject ();_caef .Name =_bb .MakeName (fileDef .IconName );_caef .Rect =_bb .MakeArrayFromFloats ([]float64 {fileDef .X ,fileDef .Y ,fileDef .X +fileDef .Width ,fileDef .Y +fileDef .Height });_caef .T =_bb .MakeString (fileDef .Author );
_caef .Subj =_bb .MakeString (fileDef .Subject );return _caef .PdfAnnotation ,nil ;};const (_bg quadding =0;_ge quadding =1;_dbe quadding =2;_dab float64 =2.0;);func _af (_gcf CircleAnnotationDef ,_df string )([]byte ,*_be .PdfRectangle ,*_be .PdfRectangle ,error ){_cgeg :=_gdd .Circle {X :_gcf .X ,Y :_gcf .Y ,Width :_gcf .Width ,Height :_gcf .Height ,FillEnabled :_gcf .FillEnabled ,FillColor :_gcf .FillColor ,BorderEnabled :_gcf .BorderEnabled ,BorderWidth :_gcf .BorderWidth ,BorderColor :_gcf .BorderColor ,Opacity :_gcf .Opacity };
_ef ,_dg ,_fcd :=_cgeg .Draw (_df );if _fcd !=nil {return nil ,nil ,nil ,_fcd ;};_bad :=&_be .PdfRectangle {};_bad .Llx =_gcf .X +_dg .Llx ;_bad .Lly =_gcf .Y +_dg .Lly ;_bad .Urx =_gcf .X +_dg .Urx ;_bad .Ury =_gcf .Y +_dg .Ury ;return _ef ,_dg ,_bad ,nil ;
};func _adcf ()_bb .StreamEncoder {return _bb .NewFlateEncoder ()};func (_ccge *AppearanceStyle )processDA (_abgd *_be .PdfField ,_ecdd *_cf .ContentStreamOperations ,_gaa ,_eceg *_be .PdfPageResources ,_gcdg *_cf .ContentCreator )(*AppearanceFont ,bool ,error ){var _ade *AppearanceFont ;
var _ggfb bool ;if _ccge .Fonts !=nil {if _ccge .Fonts .Fallback !=nil {_ade =_ccge .Fonts .Fallback ;};if _baad :=_ccge .Fonts .FieldFallbacks ;_baad !=nil {if _fgce ,_fbg :=_baad [_abgd .PartialName ()];_fbg {_ade =_fgce ;}else if _dad ,_cfa :=_abgd .FullName ();
_cfa ==nil {if _caag ,_afcb :=_baad [_dad ];_afcb {_ade =_caag ;};};};if _ade !=nil {_ade .fillName ();};_ggfb =_ccge .Fonts .ForceReplace ;};var _fab string ;var _cgda float64 ;var _ebabb bool ;if _ecdd !=nil {for _ ,_adea :=range *_ecdd {if _adea .Operand =="\u0054\u0066"&&len (_adea .Params )==2{if _bcag ,_aeea :=_bb .GetNameVal (_adea .Params [0]);
_aeea {_fab =_bcag ;};if _abgf ,_cef :=_bb .GetNumberAsFloat (_adea .Params [1]);_cef ==nil {_cgda =_abgf ;};_ebabb =true ;continue ;};_gcdg .AddOperand (*_adea );};};var _gca *AppearanceFont ;var _faac _bb .PdfObject ;if _ggfb &&_ade !=nil {_gca =_ade ;
}else {if _gaa !=nil &&_fab !=""{if _fbcf ,_fcae :=_gaa .GetFontByName (*_bb .MakeName (_fab ));_fcae {if _cbbe ,_baac :=_be .NewPdfFontFromPdfObject (_fbcf );_baac ==nil {_faac =_fbcf ;_gca =&AppearanceFont {Name :_fab ,Font :_cbbe ,Size :_cgda };}else {_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052:\u0020\u0063\u006f\u0075\u006c\u0064\u0020\u006e\u006f\u0074\u0020\u006c\u006fa\u0064\u0020\u0061\u0070\u0070\u0065\u0061\u0072\u0061\u006e\u0063\u0065\u0020\u0066\u006f\u006e\u0074\u003a\u0020\u0025\u0076",_baac );
};};};if _gca ==nil &&_ade !=nil {_gca =_ade ;};if _gca ==nil {_eeaf ,_ebb :=_be .NewStandard14Font ("\u0048e\u006c\u0076\u0065\u0074\u0069\u0063a");if _ebb !=nil {return nil ,false ,_ebb ;};_gca =&AppearanceFont {Name :"\u0048\u0065\u006c\u0076",Font :_eeaf ,Size :_cgda };
};};if _gca .Size <=0&&_ccge .Fonts !=nil &&_ccge .Fonts .FallbackSize > 0{_gca .Size =_ccge .Fonts .FallbackSize ;};_afcf :=*_bb .MakeName (_gca .Name );if _faac ==nil {_faac =_gca .Font .ToPdfObject ();};if _gaa !=nil &&!_gaa .HasFontByName (_afcf ){_gaa .SetFontByName (_afcf ,_faac );
};if _eceg !=nil &&!_eceg .HasFontByName (_afcf ){_eceg .SetFontByName (_afcf ,_faac );};return _gca ,_ebabb ,nil ;};func _fdb (_gfgc RectangleAnnotationDef ,_cdbg string )([]byte ,*_be .PdfRectangle ,*_be .PdfRectangle ,error ){_bcbc :=_gdd .Rectangle {X :0,Y :0,Width :_gfgc .Width ,Height :_gfgc .Height ,FillEnabled :_gfgc .FillEnabled ,FillColor :_gfgc .FillColor ,BorderEnabled :_gfgc .BorderEnabled ,BorderWidth :2*_gfgc .BorderWidth ,BorderColor :_gfgc .BorderColor ,Opacity :_gfgc .Opacity };
_geea ,_cddc ,_fgbd :=_bcbc .Draw (_cdbg );if _fgbd !=nil {return nil ,nil ,nil ,_fgbd ;};_cee :=&_be .PdfRectangle {};_cee .Llx =_gfgc .X +_cddc .Llx ;_cee .Lly =_gfgc .Y +_cddc .Lly ;_cee .Urx =_gfgc .X +_cddc .Urx ;_cee .Ury =_gfgc .Y +_cddc .Ury ;return _geea ,_cddc ,_cee ,nil ;
};

// WrapContentStream ensures that the entire content stream for a `page` is wrapped within q ... Q operands.
// Ensures that following operands that are added are not affected by additional operands that are added.
// Implements interface model.ContentStreamWrapper.
func (_bcdb ImageFieldAppearance )WrapContentStream (page *_be .PdfPage )error {_bebf ,_gebd :=page .GetAllContentStreams ();if _gebd !=nil {return _gebd ;};_gfdcb :=_cf .NewContentStreamParser (_bebf );_dacg ,_gebd :=_gfdcb .Parse ();if _gebd !=nil {return _gebd ;
};_dacg .WrapIfNeeded ();_faba :=[]string {_dacg .String ()};return page .SetContentStreams (_faba ,_adcf ());};func _efcd (_ebgb *_be .PdfAcroForm ,_ecdga *_be .PdfAnnotationWidget ,_gedb *_be .PdfFieldChoice ,_fce AppearanceStyle )(*_bb .PdfObjectDictionary ,error ){_gff ,_cfc :=_bb .GetArray (_ecdga .Rect );
if !_cfc {return nil ,_cg .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0052\u0065\u0063\u0074");};_feab ,_fede :=_be .NewPdfRectangle (*_gff );if _fede !=nil {return nil ,_fede ;};_agf ,_bfgd :=_feab .Width (),_feab .Height ();_d .Log .Debug ("\u0043\u0068\u006f\u0069\u0063\u0065\u002c\u0020\u0077\u0061\u0020\u0042S\u003a\u0020\u0025\u0076",_ecdga .BS );
_cdb ,_fede :=_cf .NewContentStreamParser (_fbb (_gedb .PdfField )).Parse ();if _fede !=nil {return nil ,_fede ;};_ede ,_fagg :=_bb .GetDict (_ecdga .MK );if _fagg {_cgdg ,_ :=_bb .GetDict (_ecdga .BS );_adbe :=_fce .applyAppearanceCharacteristics (_ede ,_cgdg ,nil );
if _adbe !=nil {return nil ,_adbe ;};};_bcd :=_bb .MakeDict ();for _ ,_aeec :=range _gedb .Opt .Elements (){if _eadg ,_aba :=_bb .GetArray (_aeec );_aba &&_eadg .Len ()==2{_aeec =_eadg .Get (1);};var _fffe string ;if _bga ,_aaeb :=_bb .GetString (_aeec );
_aaeb {_fffe =_bga .Decoded ();}else if _gbc ,_ffd :=_bb .GetName (_aeec );_ffd {_fffe =_gbc .String ();}else {_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u004f\u0070\u0074\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u006e\u0061\u006de\u002f\u0073\u0074\u0072\u0069\u006e\u0067 \u002d\u0020\u0025\u0054",_aeec );
return nil ,_cg .New ("\u006e\u006f\u0074\u0020\u0061\u0020\u006e\u0061\u006d\u0065\u002f\u0073t\u0072\u0069\u006e\u0067");};if len (_fffe )> 0{_dfbg ,_faa :=_ebde (_gedb .PdfField ,_agf ,_bfgd ,_fffe ,_fce ,_cdb ,_ebgb .DR ,_ede );if _faa !=nil {return nil ,_faa ;
};_bcd .Set (*_bb .MakeName (_fffe ),_dfbg .ToPdfObject ());};};_bdaa :=_bb .MakeDict ();_bdaa .Set ("\u004e",_bcd );return _bdaa ,nil ;};func (_ccfc *AppearanceStyle )applyAppearanceCharacteristics (_fbae *_bb .PdfObjectDictionary ,_ccdg *_bb .PdfObjectDictionary ,_ddfd *_be .PdfFont )error {if !_ccfc .AllowMK {return nil ;
};if CA ,_gbd :=_bb .GetString (_fbae .Get ("\u0043\u0041"));_gbd &&_ddfd !=nil {_cegc :=CA .Bytes ();if len (_cegc )!=0{_adbg :=[]rune (_ddfd .Encoder ().Decode (_cegc ));if len (_adbg )==1{_ccfc .CheckmarkRune =_adbg [0];};};};if BC ,_cfgc :=_bb .GetArray (_fbae .Get ("\u0042\u0043"));
_cfgc {_ggbc ,_ggbd :=BC .ToFloat64Array ();if _ggbd !=nil {return _ggbd ;};switch len (_ggbc ){case 1:_ccfc .BorderColor =_be .NewPdfColorDeviceGray (_ggbc [0]);case 3:_ccfc .BorderColor =_be .NewPdfColorDeviceRGB (_ggbc [0],_ggbc [1],_ggbc [2]);case 4:_ccfc .BorderColor =_be .NewPdfColorDeviceCMYK (_ggbc [0],_ggbc [1],_ggbc [2],_ggbc [3]);
default:_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052:\u0020\u0042\u0043\u0020\u002d\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0020\u0028\u0025\u0064)",len (_ggbc ));
};if _ccdg !=nil {if _ecfb ,_dbdc :=_bb .GetNumberAsFloat (_ccdg .Get ("\u0057"));_dbdc ==nil {_ccfc .BorderSize =_ecfb ;};};};if BG ,_abg :=_bb .GetArray (_fbae .Get ("\u0042\u0047"));_abg {_gfc ,_bea :=BG .ToFloat64Array ();if _bea !=nil {return _bea ;
};switch len (_gfc ){case 1:_ccfc .FillColor =_be .NewPdfColorDeviceGray (_gfc [0]);case 3:_ccfc .FillColor =_be .NewPdfColorDeviceRGB (_gfc [0],_gfc [1],_gfc [2]);case 4:_ccfc .FillColor =_be .NewPdfColorDeviceCMYK (_gfc [0],_gfc [1],_gfc [2],_gfc [3]);
default:_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052:\u0020\u0042\u0047\u0020\u002d\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0020\u0028\u0025\u0064)",len (_gfc ));
};};return nil ;};

// CheckboxFieldOptions defines optional parameters for a checkbox field a form.
type CheckboxFieldOptions struct{Checked bool ;};

// GenerateAppearanceDict generates an appearance dictionary for widget annotation `wa` for the `field` in `form`.
// Implements interface model.FieldAppearanceGenerator.
func (_acd ImageFieldAppearance )GenerateAppearanceDict (form *_be .PdfAcroForm ,field *_be .PdfField ,wa *_be .PdfAnnotationWidget )(*_bb .PdfObjectDictionary ,error ){_ ,_acae :=field .GetContext ().(*_be .PdfFieldButton );if !_acae {_d .Log .Trace ("C\u006f\u0075\u006c\u0064\u0020\u006fn\u006c\u0079\u0020\u0068\u0061\u006ed\u006c\u0065\u0020\u0062\u0075\u0074\u0074o\u006e\u0020\u002d\u0020\u0069\u0067\u006e\u006f\u0072\u0069n\u0067");
return nil ,nil ;};_acca ,_afea :=_bb .GetDict (wa .AP );if _afea &&_acd .OnlyIfMissing {_d .Log .Trace ("\u0041\u006c\u0072\u0065a\u0064\u0079\u0020\u0070\u006f\u0070\u0075\u006c\u0061\u0074e\u0064 \u002d\u0020\u0069\u0067\u006e\u006f\u0072i\u006e\u0067");
return _acca ,nil ;};if form .DR ==nil {form .DR =_be .NewPdfPageResources ();};switch _aea :=field .GetContext ().(type ){case *_be .PdfFieldButton :if _aea .IsPush (){_befc ,_ddg :=_bgegb (_aea ,wa ,_acd .Style ());if _ddg !=nil {return nil ,_ddg ;};
return _befc ,nil ;};};return nil ,nil ;};

// AppearanceFont represents a font used for generating the appearance of a
// field in the filling/flattening process.
type AppearanceFont struct{

// Name represents the name of the font which will be added to the
// AcroForm resources (DR).
Name string ;

// Font represents the actual font used for the field appearance.
Font *_be .PdfFont ;

// Size represents the size of the font used for the field appearance.
// If the font size is 0, the value of the FallbackSize field of the
// AppearanceFontStyle is used, if set. Otherwise, the font size is
// calculated based on the available annotation height and on the
// AutoFontSizeFraction field of the AppearanceStyle.
Size float64 ;};

// Style returns the appearance style of `fa`. If not specified, returns default style.
func (_ebcdb ImageFieldAppearance )Style ()AppearanceStyle {if _ebcdb ._acfa !=nil {return *_ebcdb ._acfa ;};return AppearanceStyle {BorderSize :0.0,BorderColor :_be .NewPdfColorDeviceGray (0),FillColor :_be .NewPdfColorDeviceGray (1),DrawAlignmentReticle :false };
};const (SignatureImageLeft SignatureImagePosition =iota ;SignatureImageRight ;SignatureImageTop ;SignatureImageBottom ;);func _cgge (_acea [][]_gdd .CubicBezierCurve ,_ccdcf *_be .PdfColorDeviceRGB ,_ecg float64 )([]byte ,*_be .PdfRectangle ,error ){_gaee :=_cf .NewContentCreator ();
_gaee .Add_q ().SetStrokingColor (_ccdcf ).Add_w (_ecg );_fgff :=_gdd .NewCubicBezierPath ();for _ ,_acde :=range _acea {_fgff .Curves =append (_fgff .Curves ,_acde ...);for _dcabb ,_bgfe :=range _acde {if _dcabb ==0{_gaee .Add_m (_bgfe .P0 .X ,_bgfe .P0 .Y );
}else {_gaee .Add_l (_bgfe .P0 .X ,_bgfe .P0 .Y );};_gaee .Add_c (_bgfe .P1 .X ,_bgfe .P1 .Y ,_bgfe .P2 .X ,_bgfe .P2 .Y ,_bgfe .P3 .X ,_bgfe .P3 .Y );};};_gaee .Add_S ().Add_Q ();return _gaee .Bytes (),_fgff .GetBoundingBox ().ToPdfRectangle (),nil ;};


// SignatureImagePosition specifies the image signature location relative to the text signature.
// If text signature is not defined, this position will be ignored.
type SignatureImagePosition int ;func _cdgb (_eggc []_gdd .Point )(_adff []_gdd .Point ,_bcda []_gdd .Point ,_acg error ){_efcb :=len (_eggc )-1;if len (_eggc )< 1{return nil ,nil ,_cg .New ("\u0041\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0074\u0077\u006f\u0020\u0070\u006f\u0069\u006e\u0074s \u0072e\u0071\u0075\u0069\u0072\u0065\u0064\u0020\u0074\u006f\u0020\u0063\u0061l\u0063\u0075\u006c\u0061\u0074\u0065\u0020\u0063\u0075\u0072\u0076\u0065\u0020\u0063\u006f\u006e\u0074r\u006f\u006c\u0020\u0070\u006f\u0069\u006e\u0074\u0073");
};if _efcb ==1{_aaa :=_gdd .Point {X :(2*_eggc [0].X +_eggc [1].X )/3,Y :(2*_eggc [0].Y +_eggc [1].Y )/3};_adff =append (_adff ,_aaa );_bcda =append (_bcda ,_gdd .Point {X :2*_aaa .X -_eggc [0].X ,Y :2*_aaa .Y -_eggc [0].Y });return _adff ,_bcda ,nil ;
};_edgf :=make ([]float64 ,_efcb );for _ddcd :=1;_ddcd < _efcb -1;_ddcd ++{_edgf [_ddcd ]=4*_eggc [_ddcd ].X +2*_eggc [_ddcd +1].X ;};_edgf [0]=_eggc [0].X +2*_eggc [1].X ;_edgf [_efcb -1]=(8*_eggc [_efcb -1].X +_eggc [_efcb ].X )/2.0;_gbde :=_edcaa (_edgf );
for _ecag :=1;_ecag < _efcb -1;_ecag ++{_edgf [_ecag ]=4*_eggc [_ecag ].Y +2*_eggc [_ecag +1].Y ;};_edgf [0]=_eggc [0].Y +2*_eggc [1].Y ;_edgf [_efcb -1]=(8*_eggc [_efcb -1].Y +_eggc [_efcb ].Y )/2.0;_bebc :=_edcaa (_edgf );_adff =make ([]_gdd .Point ,_efcb );
_bcda =make ([]_gdd .Point ,_efcb );for _gbf :=0;_gbf < _efcb ;_gbf ++{_adff [_gbf ]=_gdd .Point {X :_eb .RoundDefault (_gbde [_gbf ]),Y :_eb .RoundDefault (_bebc [_gbf ])};if _gbf < _efcb -1{_bcda [_gbf ]=_gdd .Point {X :_eb .RoundDefault (2*_eggc [_gbf +1].X -_gbde [_gbf +1]),Y :_eb .RoundDefault (2*_eggc [_gbf +1].Y -_bebc [_gbf +1])};
}else {_bcda [_gbf ]=_gdd .Point {X :_eb .RoundDefault ((_eggc [_efcb ].X +_gbde [_efcb -1])/2),Y :_eb .RoundDefault ((_eggc [_efcb ].Y +_bebc [_efcb -1])/2)};};};return _adff ,_bcda ,nil ;};func _gbdd (_aafc ,_cddd float64 ,_dbfa *_be .Image ,_degf AppearanceStyle )(*_be .XObjectForm ,error ){_acdc ,_ffa :=_be .NewXObjectImageFromImage (_dbfa ,nil ,_bb .NewFlateEncoder ());
if _ffa !=nil {return nil ,_ffa ;};_acdc .Decode =_bb .MakeArrayFromFloats ([]float64 {0.0,1.0,0.0,1.0,0.0,1.0});_faff :=_be .NewPdfPageResources ();_faff .ProcSet =_bb .MakeArray (_bb .MakeName ("\u0050\u0044\u0046"),_bb .MakeName ("\u0049\u006d\u0061\u0067\u0065\u0043"));
_faff .SetXObjectImageByName (_bb .PdfObjectName ("\u0049\u006d\u0030"),_acdc );_cgfa :=_cf .NewContentCreator ();_cgfa .Add_q ();_cgfa .Add_cm (float64 (_dbfa .Width ),0,0,float64 (_dbfa .Height ),0,0);_cgfa .Add_Do ("\u0049\u006d\u0030");_cgfa .Add_Q ();
_ebcb :=_be .NewXObjectForm ();_ebcb .FormType =_bb .MakeInteger (1);_ebcb .BBox =_bb .MakeArrayFromFloats ([]float64 {0,0,float64 (_dbfa .Width ),float64 (_dbfa .Height )});_ebcb .Resources =_faff ;_ebcb .SetContentStream (_cgfa .Bytes (),_adcf ());return _ebcb ,nil ;
};func _ada (_ebabg RectangleAnnotationDef )(*_bb .PdfObjectDictionary ,*_be .PdfRectangle ,error ){_dage :=_be .NewXObjectForm ();_dage .Resources =_be .NewPdfPageResources ();_cda :="";if _ebabg .Opacity < 1.0{_gdca :=_bb .MakeDict ();_gdca .Set ("\u0063\u0061",_bb .MakeFloat (_ebabg .Opacity ));
_gdca .Set ("\u0043\u0041",_bb .MakeFloat (_ebabg .Opacity ));_deca :=_dage .Resources .AddExtGState ("\u0067\u0073\u0031",_gdca );if _deca !=nil {_d .Log .Debug ("U\u006e\u0061\u0062\u006c\u0065\u0020t\u006f\u0020\u0061\u0064\u0064\u0020\u0065\u0078\u0074g\u0073\u0074\u0061t\u0065 \u0067\u0073\u0031");
return nil ,nil ,_deca ;};_cda ="\u0067\u0073\u0031";};_aagff ,_cace ,_aaaa ,_abbb :=_fdb (_ebabg ,_cda );if _abbb !=nil {return nil ,nil ,_abbb ;};_abbb =_dage .SetContentStream (_aagff ,nil );if _abbb !=nil {return nil ,nil ,_abbb ;};_dage .BBox =_cace .ToPdfObject ();
_edge :=_bb .MakeDict ();_edge .Set ("\u004e",_dage .ToPdfObject ());return _edge ,_aaaa ,nil ;};func _cgcb (_ebdf *_cf .ContentCreator ,_cdcd AppearanceStyle ,_fcf ,_fac float64 ){_ebdf .Add_q ().Add_re (0,0,_fcf ,_fac ).Add_re (0,_fac /2,_fcf ,_fac /2).Add_re (0,0,_fcf ,_fac ).Add_re (_fcf /2,0,_fcf /2,_fac ).Add_w (_cdcd .BorderSize ).SetStrokingColor (_cdcd .BorderColor ).SetNonStrokingColor (_cdcd .FillColor ).Add_B ().Add_Q ();
};

// Style returns the appearance style of `fa`. If not specified, returns default style.
func (_bd FieldAppearance )Style ()AppearanceStyle {if _bd ._ebf !=nil {return *_bd ._ebf ;};_fd :=_dab ;return AppearanceStyle {AutoFontSizeFraction :0.65,CheckmarkRune :'✔',BorderSize :0.0,BorderColor :_be .NewPdfColorDeviceGray (0),FillColor :_be .NewPdfColorDeviceGray (1),MultilineLineHeight :1.2,MultilineVAlignMiddle :false ,DrawAlignmentReticle :false ,AllowMK :true ,MarginLeft :&_fd };
};func (_abe *AppearanceStyle )applyRotation (_aeeb *_bb .PdfObjectDictionary ,_geae ,_dfg float64 ,_ggc *_cf .ContentCreator )(float64 ,float64 ){if !_abe .AllowMK {return _geae ,_dfg ;};if _aeeb ==nil {return _geae ,_dfg ;};_bdb ,_ :=_bb .GetNumberAsFloat (_aeeb .Get ("\u0052"));
if _bdb ==0{return _geae ,_dfg ;};_cdfc :=-_bdb ;_bdbg :=_gdd .Path {Points :[]_gdd .Point {_gdd .NewPoint (0,0).Rotate (_cdfc ),_gdd .NewPoint (_geae ,0).Rotate (_cdfc ),_gdd .NewPoint (0,_dfg ).Rotate (_cdfc ),_gdd .NewPoint (_geae ,_dfg ).Rotate (_cdfc )}}.GetBoundingBox ();
_ggc .RotateDeg (_bdb );_ggc .Translate (_bdbg .X ,_bdbg .Y );return _bdbg .Width ,_bdbg .Height ;};func (_ga *AppearanceFont )fillName (){if _ga .Font ==nil ||_ga .Name !=""{return ;};_ff :=_ga .Font .FontDescriptor ();if _ff ==nil ||_ff .FontName ==nil {return ;
};_ga .Name =_ff .FontName .String ();};func _fga (_fcfc []*SignatureLine ,_bcdg *SignatureFieldOpts )(*_bb .PdfObjectDictionary ,error ){if _bcdg ==nil {_bcdg =NewSignatureFieldOpts ();};var _ecaf error ;var _bbef *_bb .PdfObjectName ;_cbbf :=_bcdg .Font ;
if _cbbf !=nil {_dgcf ,_ :=_cbbf .GetFontDescriptor ();if _dgcf !=nil {if _agc ,_caeb :=_dgcf .FontName .(*_bb .PdfObjectName );_caeb {_bbef =_agc ;};};if _bbef ==nil {_bbef =_bb .MakeName ("\u0046\u006f\u006et\u0031");};}else {if _cbbf ,_ecaf =_be .NewStandard14Font ("\u0048e\u006c\u0076\u0065\u0074\u0069\u0063a");
_ecaf !=nil {return nil ,_ecaf ;};_bbef =_bb .MakeName ("\u0048\u0065\u006c\u0076");};_faf :=_bcdg .FontSize ;if _faf <=0{_faf =10;};if _bcdg .LineHeight <=0{_bcdg .LineHeight =1;};_cfbb :=_bcdg .LineHeight *_faf ;_egg ,_fgaa :=_cbbf .GetRuneMetrics (' ');
if !_fgaa {return nil ,_cg .New ("\u0074\u0068e \u0066\u006f\u006et\u0020\u0064\u006f\u0065s n\u006ft \u0068\u0061\u0076\u0065\u0020\u0061\u0020sp\u0061\u0063\u0065\u0020\u0067\u006c\u0079p\u0068");};_bgae :=_egg .Wx ;var _aeb float64 ;var _feed []string ;
for _ ,_ffcd :=range _fcfc {if _ffcd .Text ==""{continue ;};_fgcef :=_ffcd .Text ;if _ffcd .Desc !=""{_fgcef =_ffcd .Desc +"\u003a\u0020"+_fgcef ;};_feed =append (_feed ,_fgcef );var _bgf float64 ;for _ ,_ggfa :=range _fgcef {_dbec ,_faga :=_cbbf .GetRuneMetrics (_ggfa );
if !_faga {continue ;};_bgf +=_dbec .Wx ;};if _bgf > _aeb {_aeb =_bgf ;};};_aeb =_aeb *_faf /1000.0;_bgaee :=float64 (len (_feed ))*_cfbb ;_eac :=_bcdg .Image !=nil ;_adcfd :=_bcdg .Rect ;if _adcfd ==nil {_adcfd =[]float64 {0,0,_aeb ,_bgaee };if _eac {_adcfd [2]=_aeb *2;
_adcfd [3]=_bgaee *2;};_bcdg .Rect =_adcfd ;};_gdb :=_adcfd [2]-_adcfd [0];_dfc :=_adcfd [3]-_adcfd [1];_cdbfc ,_geg :=_adcfd ,_adcfd ;var _ecda ,_bcga float64 ;if _eac &&len (_feed )> 0{if _bcdg .ImagePosition <=SignatureImageRight {_eegd :=[]float64 {_adcfd [0],_adcfd [1],_adcfd [0]+(_gdb /2),_adcfd [3]};
_agff :=[]float64 {_adcfd [0]+(_gdb /2),_adcfd [1],_adcfd [2],_adcfd [3]};if _bcdg .ImagePosition ==SignatureImageLeft {_cdbfc ,_geg =_eegd ,_agff ;}else {_cdbfc ,_geg =_agff ,_eegd ;};}else {_aff :=[]float64 {_adcfd [0],_adcfd [1],_adcfd [2],_adcfd [1]+(_dfc /2)};
_bgeg :=[]float64 {_adcfd [0],_adcfd [1]+(_dfc /2),_adcfd [2],_adcfd [3]};if _bcdg .ImagePosition ==SignatureImageTop {_cdbfc ,_geg =_bgeg ,_aff ;}else {_cdbfc ,_geg =_aff ,_bgeg ;};};};_ecda =_geg [2]-_geg [0];_bcga =_geg [3]-_geg [1];var _affc float64 ;
if _bcdg .AutoSize {if _aeb > _ecda ||_bgaee > _bcga {_dbeg :=_f .Min (_ecda /_aeb ,_bcga /_bgaee );_faf *=_dbeg ;};_cfbb =_bcdg .LineHeight *_faf ;_affc +=(_bcga -float64 (len (_feed ))*_cfbb )/2;};_aadb :=_cf .NewContentCreator ();_cbfg :=_be .NewPdfPageResources ();
_cbfg .SetFontByName (*_bbef ,_cbbf .ToPdfObject ());if _bcdg .BorderSize <=0{_bcdg .BorderSize =0;_bcdg .BorderColor =_be .NewPdfColorDeviceGray (1);};_aadb .Add_q ();if _bcdg .FillColor !=nil {_aadb .SetNonStrokingColor (_bcdg .FillColor );};if _bcdg .BorderColor !=nil {_aadb .SetStrokingColor (_bcdg .BorderColor );
};_efecc :="";if _bcdg .FillOpacity < 1.0{_cdcdc :=0;_efecc =_gd .Sprintf ("\u0047\u0053\u0025\u0064",_cdcdc );for {_ ,_ffcc :=_cbfg .GetExtGState (_bb .PdfObjectName (_efecc ));if !_ffcc {break ;};_cdcdc ++;_efecc =_gd .Sprintf ("\u0047\u0053\u0025\u0064",_cdcdc );
};_dege :=_bb .MakeDict ();_dege .Set ("\u0063\u0061",_bb .MakeFloat (_bcdg .FillOpacity ));_gaf :=_cbfg .AddExtGState (_bb .PdfObjectName (_efecc ),_bb .MakeIndirectObject (_dege ));if _gaf !=nil {_d .Log .Debug (_gaf .Error ());}else {_aadb .Add_gs (_bb .PdfObjectName (_efecc ));
};};_aadb .Add_w (_bcdg .BorderSize ).Add_re (_adcfd [0],_adcfd [1],_gdb ,_dfc );if _bcdg .FillColor !=nil &&_bcdg .BorderColor !=nil {_aadb .Add_B ();}else if _bcdg .FillColor !=nil {_aadb .Add_f ();}else if _bcdg .BorderColor !=nil {_aadb .Add_S ();};
_aadb .Add_Q ();if _bcdg .WatermarkImage !=nil {_cadc :=[]float64 {_adcfd [0],_adcfd [1],_adcfd [2],_adcfd [3]};_bddg ,_eaf ,_faad :=_fbcfb (_bcdg .WatermarkImage ,"\u0049\u006d\u0061\u0067\u0065\u0057\u0061\u0074\u0065r\u006d\u0061\u0072\u006b",_bcdg ,_cadc ,_aadb );
if _faad !=nil {return nil ,_faad ;};_cbfg .SetXObjectImageByName (*_bddg ,_eaf );};_aadb .Add_q ();_aadb .Translate (_geg [0],_geg [3]-_cfbb -_affc );_aadb .Add_BT ();_gbe :=_cbbf .Encoder ();for _ ,_bcad :=range _feed {var _bbdaa []byte ;for _ ,_egag :=range _bcad {if _ee .IsSpace (_egag ){if len (_bbdaa )> 0{_aadb .SetNonStrokingColor (_bcdg .TextColor ).Add_Tf (*_bbef ,_faf ).Add_TL (_cfbb ).Add_TJ ([]_bb .PdfObject {_bb .MakeStringFromBytes (_bbdaa )}...);
_bbdaa =nil ;};_aadb .Add_Tf (*_bbef ,_faf ).Add_TL (_cfbb ).Add_TJ ([]_bb .PdfObject {_bb .MakeFloat (-_bgae )}...);}else {_bbdaa =append (_bbdaa ,_gbe .Encode (string (_egag ))...);};};if len (_bbdaa )> 0{_aadb .SetNonStrokingColor (_bcdg .TextColor ).Add_Tf (*_bbef ,_faf ).Add_TL (_cfbb ).Add_TJ ([]_bb .PdfObject {_bb .MakeStringFromBytes (_bbdaa )}...);
};_aadb .Add_Td (0,-_cfbb );};_aadb .Add_ET ();_aadb .Add_Q ();if _eac {_fggb ,_cdcc ,_aaebf :=_fbcfb (_bcdg .Image ,"\u0049\u006d\u0061\u0067\u0065\u0053\u0069\u0067\u006ea\u0074\u0075\u0072\u0065",_bcdg ,_cdbfc ,_aadb );if _aaebf !=nil {return nil ,_aaebf ;
};_cbfg .SetXObjectImageByName (*_fggb ,_cdcc );};_cba :=_be .NewXObjectForm ();_cba .Resources =_cbfg ;_cba .BBox =_bb .MakeArrayFromFloats (_adcfd );_cba .SetContentStream (_aadb .Bytes (),_adcf ());_caaa :=_bb .MakeDict ();_caaa .Set ("\u004e",_cba .ToPdfObject ());
return _caaa ,nil ;};

// WrapContentStream ensures that the entire content stream for a `page` is wrapped within q ... Q operands.
// Ensures that following operands that are added are not affected by additional operands that are added.
// Implements interface model.ContentStreamWrapper.
func (_ecff FieldAppearance )WrapContentStream (page *_be .PdfPage )error {_ecca ,_cbbd :=page .GetAllContentStreams ();if _cbbd !=nil {return _cbbd ;};_cfcc :=_cf .NewContentStreamParser (_ecca );_ccgf ,_cbbd :=_cfcc .Parse ();if _cbbd !=nil {return _cbbd ;
};_ccgf .WrapIfNeeded ();_bce :=[]string {_ccgf .String ()};return page .SetContentStreams (_bce ,_adcf ());};

// NewComboboxField generates a new combobox form field with partial name `name` at location `rect`
// on specified `page` and with field specific options `opt`.
func NewComboboxField (page *_be .PdfPage ,name string ,rect []float64 ,opt ComboboxFieldOptions )(*_be .PdfFieldChoice ,error ){if page ==nil {return nil ,_cg .New ("\u0070a\u0067e\u0020\u006e\u006f\u0074\u0020s\u0070\u0065c\u0069\u0066\u0069\u0065\u0064");
};if len (name )<=0{return nil ,_cg .New ("\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0064\u0020\u0061\u0074\u0074\u0072\u0069\u0062u\u0074e\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065\u0064");};if len (rect )!=4{return nil ,_cg .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072\u0061\u006e\u0067\u0065");
};_bfdg :=_be .NewPdfField ();_ddc :=&_be .PdfFieldChoice {};_bfdg .SetContext (_ddc );_ddc .PdfField =_bfdg ;_ddc .T =_bb .MakeString (name );_ddc .Opt =_bb .MakeArray ();for _ ,_afbc :=range opt .Choices {_ddc .Opt .Append (_bb .MakeString (_afbc ));
};_ddc .SetFlag (_be .FieldFlagCombo );_efab :=_be .NewPdfAnnotationWidget ();_efab .Rect =_bb .MakeArrayFromFloats (rect );_efab .P =page .ToPdfObject ();_efab .F =_bb .MakeInteger (4);_efab .Parent =_ddc .ToPdfObject ();_ddc .Annotations =append (_ddc .Annotations ,_efab );
return _ddc ,nil ;};