//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package sighandler implements digital signature handlers for PDF signature validation and signing.
package sighandler ;import (_eea "bytes";_fa "crypto";_ge "crypto/rand";_ac "crypto/rsa";_gg "crypto/x509";_ee "crypto/x509/pkix";_g "encoding/asn1";_ed "encoding/hex";_c "errors";_aa "fmt";_aed "github.com/unidoc/pkcs7";_gdg "github.com/unidoc/timestamp";
_ae "github.com/unidoc/unipdf/v3/common";_gd "github.com/unidoc/unipdf/v3/core";_bg "github.com/unidoc/unipdf/v3/model";_bfa "github.com/unidoc/unipdf/v3/model/mdp";_cf "github.com/unidoc/unipdf/v3/model/sigutil";_bf "hash";_b "math/big";_e "strings";_f "time";
);type adobeX509RSASHA1 struct{_gcbf *_ac .PrivateKey ;_egc *_gg .Certificate ;_edcb SignFunc ;_dbf bool ;_ceb _fa .Hash ;};type adobePKCS7Detached struct{_cab *_ac .PrivateKey ;_gac *_gg .Certificate ;_cga bool ;_geca int ;};func (_cbde *adobePKCS7Detached )getCertificate (_caae *_bg .PdfSignature )(*_gg .Certificate ,error ){if _cbde ._gac !=nil {return _cbde ._gac ,nil ;
};_dba ,_cdb :=_caae .GetCerts ();if _cdb !=nil {return nil ,_cdb ;};return _dba [0],nil ;};

// NewEtsiPAdESLevelT creates a new Adobe.PPKLite ETSI.CAdES.detached Level T signature handler.
func NewEtsiPAdESLevelT (privateKey *_ac .PrivateKey ,certificate *_gg .Certificate ,caCert *_gg .Certificate ,certificateTimestampServerURL string )(_bg .SignatureHandler ,error ){return &etsiPAdES {_bb :certificate ,_ecg :privateKey ,_eec :caCert ,_fd :certificateTimestampServerURL },nil ;
};

// AdobeX509RSASHA1Opts defines options for configuring the adbe.x509.rsa_sha1
// signature handler.
type AdobeX509RSASHA1Opts struct{

// EstimateSize specifies whether the size of the signature contents
// should be estimated based on the modulus size of the public key
// extracted from the signing certificate. If set to false, a mock Sign
// call is made in order to estimate the size of the signature contents.
EstimateSize bool ;

// Algorithm specifies the algorithm used for performing signing.
// If not specified, defaults to SHA1.
Algorithm _fa .Hash ;};

// IsApplicable returns true if the signature handler is applicable for the PdfSignature.
func (_ebf *etsiPAdES )IsApplicable (sig *_bg .PdfSignature )bool {if sig ==nil ||sig .Filter ==nil ||sig .SubFilter ==nil {return false ;};return (*sig .Filter =="\u0041\u0064\u006f\u0062\u0065\u002e\u0050\u0050\u004b\u004c\u0069\u0074\u0065")&&*sig .SubFilter =="\u0045\u0054\u0053\u0049.C\u0041\u0064\u0045\u0053\u002e\u0064\u0065\u0074\u0061\u0063\u0068\u0065\u0064";
};

// Sign sets the Contents fields for the PdfSignature.
func (_feaf *adobeX509RSASHA1 )Sign (sig *_bg .PdfSignature ,digest _bg .Hasher )error {var _gbdd []byte ;var _bfde error ;if _feaf ._edcb !=nil {_gbdd ,_bfde =_feaf ._edcb (sig ,digest );if _bfde !=nil {return _bfde ;};}else {_fcc ,_afg :=digest .(_bf .Hash );
if !_afg {return _c .New ("\u0068a\u0073h\u0020\u0074\u0079\u0070\u0065\u0020\u0065\u0072\u0072\u006f\u0072");};_dec :=_cbea ;if _feaf ._ceb !=0{_dec =_feaf ._ceb ;};_gbdd ,_bfde =_ac .SignPKCS1v15 (_ge .Reader ,_feaf ._gcbf ,_dec ,_fcc .Sum (nil ));if _bfde !=nil {return _bfde ;
};};_gbdd ,_bfde =_g .Marshal (_gbdd );if _bfde !=nil {return _bfde ;};sig .Contents =_gd .MakeHexString (string (_gbdd ));return nil ;};func (_adec *etsiPAdES )getCerts (_gbc []*_gg .Certificate )([][]byte ,error ){_abg :=make ([][]byte ,0,len (_gbc ));
for _ ,_gcc :=range _gbc {_abg =append (_abg ,_gcc .Raw );};return _abg ,nil ;};func (_bff *adobeX509RSASHA1 )getCertificate (_bgdg *_bg .PdfSignature )(*_gg .Certificate ,error ){if _bff ._egc !=nil {return _bff ._egc ,nil ;};_cgc ,_cgaa :=_bgdg .GetCerts ();
if _cgaa !=nil {return nil ,_cgaa ;};return _cgc [0],nil ;};

// NewAdobeX509RSASHA1 creates a new Adobe.PPKMS/Adobe.PPKLite
// adbe.x509.rsa_sha1 signature handler. Both the private key and the
// certificate can be nil for the signature validation.
func NewAdobeX509RSASHA1 (privateKey *_ac .PrivateKey ,certificate *_gg .Certificate )(_bg .SignatureHandler ,error ){return &adobeX509RSASHA1 {_egc :certificate ,_gcbf :privateKey },nil ;};type etsiPAdES struct{_ecg *_ac .PrivateKey ;_bb *_gg .Certificate ;
_add bool ;_eb bool ;_eec *_gg .Certificate ;_fd string ;

// CertClient is the client used to retrieve certificates.
CertClient *_cf .CertClient ;

// OCSPClient is the client used to retrieve OCSP validation information.
OCSPClient *_cf .OCSPClient ;

// CRLClient is the client used to retrieve CRL validation information.
CRLClient *_cf .CRLClient ;_aedd *_bg .PdfAppender ;_ebg *_bg .DSS ;};

// InitSignature initialises the PdfSignature.
func (_gab *adobePKCS7Detached )InitSignature (sig *_bg .PdfSignature )error {if !_gab ._cga {if _gab ._gac ==nil {return _c .New ("c\u0065\u0072\u0074\u0069\u0066\u0069c\u0061\u0074\u0065\u0020\u006d\u0075\u0073\u0074\u0020n\u006f\u0074\u0020b\u0065 \u006e\u0069\u006c");
};if _gab ._cab ==nil {return _c .New ("\u0070\u0072\u0069\u0076\u0061\u0074\u0065\u004b\u0065\u0079\u0020m\u0075\u0073\u0074\u0020\u006e\u006f\u0074\u0020\u0062\u0065 \u006e\u0069\u006c");};};_fbe :=*_gab ;sig .Handler =&_fbe ;sig .Filter =_gd .MakeName ("\u0041\u0064\u006f\u0062\u0065\u002e\u0050\u0050\u004b\u004c\u0069\u0074\u0065");
sig .SubFilter =_gd .MakeName ("\u0061\u0064\u0062\u0065.p\u006b\u0063\u0073\u0037\u002e\u0064\u0065\u0074\u0061\u0063\u0068\u0065\u0064");sig .Reference =nil ;_aea ,_dag :=_fbe .NewDigest (sig );if _dag !=nil {return _dag ;};_aea .Write ([]byte ("\u0063\u0061\u006c\u0063\u0075\u006ca\u0074\u0065\u0020\u0074\u0068\u0065\u0020\u0043\u006f\u006e\u0074\u0065\u006et\u0073\u0020\u0066\u0069\u0065\u006c\u0064 \u0073\u0069\u007a\u0065"));
return _fbe .Sign (sig ,_aea );};

// InitSignature initialization of the DocMDP signature.
func (_ddc *DocMDPHandler )InitSignature (sig *_bg .PdfSignature )error {_be :=_ddc ._gc .InitSignature (sig );if _be !=nil {return _be ;};sig .Handler =_ddc ;if sig .Reference ==nil {sig .Reference =_gd .MakeArray ();};sig .Reference .Append (_bg .NewPdfSignatureReferenceDocMDP (_bg .NewPdfTransformParamsDocMDP (_ddc .Permission )).ToPdfObject ());
return nil ;};

// Sign sets the Contents fields for the PdfSignature.
func (_gbe *etsiPAdES )Sign (sig *_bg .PdfSignature ,digest _bg .Hasher )error {_ffe ,_bag :=digest .(*_eea .Buffer );if !_bag {return _aa .Errorf ("c\u0061s\u0074\u0020\u0074\u006f\u0020\u0062\u0075\u0066f\u0065\u0072\u0020\u0066ai\u006c\u0073");};_dg ,_ga :=_aed .NewSignedData (_ffe .Bytes ());
if _ga !=nil {return _ga ;};_dg .SetDigestAlgorithm (_aed .OIDDigestAlgorithmSHA256 );_bgd :=_aed .SignerInfoConfig {};_fdcb :=_fa .SHA256 .New ();_fdcb .Write (_gbe ._bb .Raw );var _beg struct{Seq struct{Seq struct{Value []byte ;};};};_beg .Seq .Seq .Value =_fdcb .Sum (nil );
var _aee []*_gg .Certificate ;var _bgeb []*_gg .Certificate ;if _gbe ._eec !=nil {_bgeb =[]*_gg .Certificate {_gbe ._eec };};_dfe :=RevocationInfoArchival {Crl :[]_g .RawValue {},Ocsp :[]_g .RawValue {},OtherRevInfo :[]_g .RawValue {}};_ggb :=0;if _gbe ._aedd !=nil &&len (_gbe ._fd )> 0{_gff ,_bbab :=_gbe .makeTimestampRequest (_gbe ._fd ,([]byte )(""));
if _bbab !=nil {return _bbab ;};_bfee ,_bbab :=_gdg .Parse (_gff .FullBytes );if _bbab !=nil {return _bbab ;};_aee =append (_aee ,_bfee .Certificates ...);};if _gbe ._aedd !=nil {_gfbd ,_fb :=_gbe .addDss ([]*_gg .Certificate {_gbe ._bb },_bgeb ,&_dfe );
if _fb !=nil {return _fb ;};_ggb +=_gfbd ;if len (_aee )> 0{_gfbd ,_fb =_gbe .addDss (_aee ,nil ,&_dfe );if _fb !=nil {return _fb ;};_ggb +=_gfbd ;};if !_gbe ._eb {_gbe ._aedd .SetDSS (_gbe ._ebg );};};_bgd .ExtraSignedAttributes =append (_bgd .ExtraSignedAttributes ,_aed .Attribute {Type :_aed .OIDAttributeSigningCertificateV2 ,Value :_beg },_aed .Attribute {Type :_aed .OIDAttributeAdobeRevocation ,Value :_dfe });
if _bbad :=_dg .AddSignerChainPAdES (_gbe ._bb ,_gbe ._ecg ,_bgeb ,_bgd );_bbad !=nil {return _bbad ;};_dg .Detach ();if len (_gbe ._fd )> 0{_cbdb :=_dg .GetSignedData ().SignerInfos [0].EncryptedDigest ;_ecgb ,_bcb :=_gbe .makeTimestampRequest (_gbe ._fd ,_cbdb );
if _bcb !=nil {return _bcb ;};_bcb =_dg .AddTimestampTokenToSigner (0,_ecgb .FullBytes );if _bcb !=nil {return _bcb ;};};_ddb ,_ga :=_dg .Finish ();if _ga !=nil {return _ga ;};_fca :=make ([]byte ,len (_ddb )+1024*2+_ggb );copy (_fca ,_ddb );sig .Contents =_gd .MakeHexString (string (_fca ));
if !_gbe ._eb &&_gbe ._ebg !=nil {_fdcb =_fa .SHA1 .New ();_fdcb .Write (_fca );_dcc :=_e .ToUpper (_ed .EncodeToString (_fdcb .Sum (nil )));if _dcc !=""{_gbe ._ebg .VRI [_dcc ]=&_bg .VRI {Cert :_gbe ._ebg .Certs ,OCSP :_gbe ._ebg .OCSPs ,CRL :_gbe ._ebg .CRLs };
};_gbe ._aedd .SetDSS (_gbe ._ebg );};return nil ;};func (_bc *etsiPAdES )getOCSPs (_gef []*_gg .Certificate ,_bfc map[string ]*_gg .Certificate )([][]byte ,error ){_edccg :=make ([][]byte ,0,len (_gef ));for _ ,_aebb :=range _gef {for _ ,_bfd :=range _aebb .OCSPServer {if _bc .CertClient .IsCA (_aebb ){continue ;
};_cd ,_cfd :=_bfc [_aebb .Issuer .CommonName ];if !_cfd {_ae .Log .Debug ("\u0057\u0041\u0052\u004e:\u0020\u0053\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u004f\u0043\u0053\u0050\u0020\u0072\u0065\u0071\u0075\u0065\u0073\u0074\u003a\u0020\u0069\u0073\u0073\u0075e\u0072\u0020\u0063\u0065\u0072t\u0069\u0066\u0069\u0063\u0061\u0074\u0065\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064");
continue ;};_ ,_bge ,_age :=_bc .OCSPClient .MakeRequest (_bfd ,_aebb ,_cd );if _age !=nil {_ae .Log .Debug ("\u0057\u0041\u0052\u004e:\u0020\u004f\u0043\u0053\u0050\u0020\u0072\u0065\u0071\u0075e\u0073t\u0020\u0065\u0072\u0072\u006f\u0072\u003a \u0025\u0076",_age );
continue ;};_edccg =append (_edccg ,_bge );};};return _edccg ,nil ;};

// NewEmptyAdobePKCS7Detached creates a new Adobe.PPKMS/Adobe.PPKLite adbe.pkcs7.detached
// signature handler. The generated signature is empty and of size signatureLen.
// The signatureLen parameter can be 0 for the signature validation.
func NewEmptyAdobePKCS7Detached (signatureLen int )(_bg .SignatureHandler ,error ){return &adobePKCS7Detached {_cga :true ,_geca :signatureLen },nil ;};

// InitSignature initialises the PdfSignature.
func (_gddb *docTimeStamp )InitSignature (sig *_bg .PdfSignature )error {_cdag :=*_gddb ;sig .Type =_gd .MakeName ("\u0044\u006f\u0063T\u0069\u006d\u0065\u0053\u0074\u0061\u006d\u0070");sig .Handler =&_cdag ;sig .Filter =_gd .MakeName ("\u0041\u0064\u006f\u0062\u0065\u002e\u0050\u0050\u004b\u004c\u0069\u0074\u0065");
sig .SubFilter =_gd .MakeName ("\u0045\u0054\u0053I\u002e\u0052\u0046\u0043\u0033\u0031\u0036\u0031");sig .Reference =nil ;if _gddb ._ebfg > 0{sig .Contents =_gd .MakeHexString (string (make ([]byte ,_gddb ._ebfg )));}else {_bbag ,_cea :=_gddb .NewDigest (sig );
if _cea !=nil {return _cea ;};_bbag .Write ([]byte ("\u0063\u0061\u006c\u0063\u0075\u006ca\u0074\u0065\u0020\u0074\u0068\u0065\u0020\u0043\u006f\u006e\u0074\u0065\u006et\u0073\u0020\u0066\u0069\u0065\u006c\u0064 \u0073\u0069\u007a\u0065"));if _cea =_cdag .Sign (sig ,_bbag );
_cea !=nil {return _cea ;};_gddb ._ebfg =_cdag ._ebfg ;};return nil ;};func (_ffad *adobeX509RSASHA1 )sign (_dgg *_bg .PdfSignature ,_edfd _bg .Hasher ,_cec bool )error {if !_cec {return _ffad .Sign (_dgg ,_edfd );};_cgd ,_egf :=_ffad ._egc .PublicKey .(*_ac .PublicKey );
if !_egf {return _aa .Errorf ("i\u006e\u0076\u0061\u006c\u0069\u0064 \u0070\u0075\u0062\u006c\u0069\u0063\u0020\u006b\u0065y\u0020\u0074\u0079p\u0065:\u0020\u0025\u0054",_cgd );};_eaf ,_fcaf :=_g .Marshal (make ([]byte ,_cgd .Size ()));if _fcaf !=nil {return _fcaf ;
};_dgg .Contents =_gd .MakeHexString (string (_eaf ));return nil ;};func _ebfe (_acab _g .ObjectIdentifier )(_fa .Hash ,error ){switch {case _acab .Equal (_aed .OIDDigestAlgorithmSHA1 ),_acab .Equal (_aed .OIDDigestAlgorithmECDSASHA1 ),_acab .Equal (_aed .OIDDigestAlgorithmDSA ),_acab .Equal (_aed .OIDDigestAlgorithmDSASHA1 ),_acab .Equal (_aed .OIDEncryptionAlgorithmRSA ):return _fa .SHA1 ,nil ;
case _acab .Equal (_aed .OIDDigestAlgorithmSHA256 ),_acab .Equal (_aed .OIDDigestAlgorithmECDSASHA256 ):return _fa .SHA256 ,nil ;case _acab .Equal (_aed .OIDDigestAlgorithmSHA384 ),_acab .Equal (_aed .OIDDigestAlgorithmECDSASHA384 ):return _fa .SHA384 ,nil ;
case _acab .Equal (_aed .OIDDigestAlgorithmSHA512 ),_acab .Equal (_aed .OIDDigestAlgorithmECDSASHA512 ):return _fa .SHA512 ,nil ;};return _fa .Hash (0),_aed .ErrUnsupportedAlgorithm ;};func (_fef *etsiPAdES )buildCertChain (_db ,_cfa []*_gg .Certificate )([]*_gg .Certificate ,map[string ]*_gg .Certificate ,error ){_df :=map[string ]*_gg .Certificate {};
for _ ,_ca :=range _db {_df [_ca .Subject .CommonName ]=_ca ;};_gdd :=_db ;for _ ,_bfe :=range _cfa {_caa :=_bfe .Subject .CommonName ;if _ ,_ged :=_df [_caa ];_ged {continue ;};_df [_caa ]=_bfe ;_gdd =append (_gdd ,_bfe );};if len (_gdd )==0{return nil ,nil ,_bg .ErrSignNoCertificates ;
};var _cac error ;for _bbd :=_gdd [0];_bbd !=nil &&!_fef .CertClient .IsCA (_bbd );{var _bdd *_gg .Certificate ;_ ,_dcg :=_df [_bbd .Issuer .CommonName ];if !_dcg {if _bdd ,_cac =_fef .CertClient .GetIssuer (_bbd );_cac !=nil {_ae .Log .Debug ("W\u0041\u0052\u004e\u003a\u0020\u0043\u006f\u0075\u006cd\u0020\u006e\u006f\u0074\u0020\u0072\u0065tr\u0069\u0065\u0076\u0065 \u0063\u0065\u0072\u0074\u0069\u0066\u0069\u0063\u0061te\u0020\u0069s\u0073\u0075\u0065\u0072\u003a\u0020\u0025\u0076",_cac );
break ;};_df [_bbd .Issuer .CommonName ]=_bdd ;_gdd =append (_gdd ,_bdd );}else {break ;};_bbd =_bdd ;};return _gdd ,_df ,nil ;};func (_cbbe *docTimeStamp )getCertificate (_facd *_bg .PdfSignature )(*_gg .Certificate ,error ){_abcc ,_gcfd :=_facd .GetCerts ();
if _gcfd !=nil {return nil ,_gcfd ;};return _abcc [0],nil ;};

// SignFunc represents a custom signing function. The function should return
// the computed signature.
type SignFunc func (_bgc *_bg .PdfSignature ,_gga _bg .Hasher )([]byte ,error );

// NewAdobeX509RSASHA1Custom creates a new Adobe.PPKMS/Adobe.PPKLite
// adbe.x509.rsa_sha1 signature handler with a custom signing function. Both the
// certificate and the sign function can be nil for the signature validation.
// NOTE: the handler will do a mock Sign when initializing the signature in
// order to estimate the signature size. Use NewAdobeX509RSASHA1CustomWithOpts
// for configuring the handler to estimate the signature size.
func NewAdobeX509RSASHA1Custom (certificate *_gg .Certificate ,signFunc SignFunc )(_bg .SignatureHandler ,error ){return &adobeX509RSASHA1 {_egc :certificate ,_edcb :signFunc },nil ;};

// Validate validates PdfSignature.
func (_cbf *adobePKCS7Detached )Validate (sig *_bg .PdfSignature ,digest _bg .Hasher )(_bg .SignatureValidationResult ,error ){_dda :=sig .Contents .Bytes ();_abb ,_bcf :=_aed .Parse (_dda );if _bcf !=nil {return _bg .SignatureValidationResult {},_bcf ;
};_ggd ,_ddae :=digest .(*_eea .Buffer );if !_ddae {return _bg .SignatureValidationResult {},_aa .Errorf ("c\u0061s\u0074\u0020\u0074\u006f\u0020\u0062\u0075\u0066f\u0065\u0072\u0020\u0066ai\u006c\u0073");};_abb .Content =_ggd .Bytes ();if _bcf =_abb .Verify ();
_bcf !=nil {return _bg .SignatureValidationResult {},_bcf ;};return _bg .SignatureValidationResult {IsSigned :true ,IsVerified :true },nil ;};

// NewDigest creates a new digest.
func (_bad *adobePKCS7Detached )NewDigest (sig *_bg .PdfSignature )(_bg .Hasher ,error ){return _eea .NewBuffer (nil ),nil ;};

// NewDocMDPHandler returns the new DocMDP handler with the specific DocMDP restriction level.
func NewDocMDPHandler (handler _bg .SignatureHandler ,permission _bfa .DocMDPPermission )(_bg .SignatureHandler ,error ){return &DocMDPHandler {_gc :handler ,Permission :permission },nil ;};

// Validate validates PdfSignature.
func (_baed *docTimeStamp )Validate (sig *_bg .PdfSignature ,digest _bg .Hasher )(_bg .SignatureValidationResult ,error ){_bgdf :=sig .Contents .Bytes ();_fba ,_babb :=_aed .Parse (_bgdf );if _babb !=nil {return _bg .SignatureValidationResult {},_babb ;
};if _babb =_fba .Verify ();_babb !=nil {return _bg .SignatureValidationResult {},_babb ;};var _aef timestampInfo ;_ ,_babb =_g .Unmarshal (_fba .Content ,&_aef );if _babb !=nil {return _bg .SignatureValidationResult {},_babb ;};_bgec ,_babb :=_ebfe (_aef .MessageImprint .HashAlgorithm .Algorithm );
if _babb !=nil {return _bg .SignatureValidationResult {},_babb ;};_dbg :=_bgec .New ();_afab ,_bgdb :=digest .(*_eea .Buffer );if !_bgdb {return _bg .SignatureValidationResult {},_aa .Errorf ("c\u0061s\u0074\u0020\u0074\u006f\u0020\u0062\u0075\u0066f\u0065\u0072\u0020\u0066ai\u006c\u0073");
};_dbg .Write (_afab .Bytes ());_fccf :=_dbg .Sum (nil );_ddaa :=_bg .SignatureValidationResult {IsSigned :true ,IsVerified :_eea .Equal (_fccf ,_aef .MessageImprint .HashedMessage ),GeneralizedTime :_aef .GeneralizedTime };return _ddaa ,nil ;};

// DocMDPHandler describes handler for the DocMDP realization.
type DocMDPHandler struct{_gc _bg .SignatureHandler ;Permission _bfa .DocMDPPermission ;};

// IsApplicable returns true if the signature handler is applicable for the PdfSignature
func (_efa *adobePKCS7Detached )IsApplicable (sig *_bg .PdfSignature )bool {if sig ==nil ||sig .Filter ==nil ||sig .SubFilter ==nil {return false ;};return (*sig .Filter =="A\u0064\u006f\u0062\u0065\u002e\u0050\u0050\u004b\u004d\u0053"||*sig .Filter =="\u0041\u0064\u006f\u0062\u0065\u002e\u0050\u0050\u004b\u004c\u0069\u0074\u0065")&&*sig .SubFilter =="\u0061\u0064\u0062\u0065.p\u006b\u0063\u0073\u0037\u002e\u0064\u0065\u0074\u0061\u0063\u0068\u0065\u0064";
};func _cca (_fad *_ac .PublicKey ,_fcf []byte )_fa .Hash {_fgfb :=_fad .Size ();if _fgfb !=len (_fcf ){return 0;};_bgfc :=func (_ffd *_b .Int ,_eeb *_ac .PublicKey ,_egcg *_b .Int )*_b .Int {_aag :=_b .NewInt (int64 (_eeb .E ));_ffd .Exp (_egcg ,_aag ,_eeb .N );
return _ffd ;};_cag :=new (_b .Int ).SetBytes (_fcf );_ccaa :=_bgfc (new (_b .Int ),_fad ,_cag );_gcbb :=_dge (_ccaa .Bytes (),_fgfb );if _gcbb [0]!=0||_gcbb [1]!=1{return 0;};_bcd :=[]struct{Hash _fa .Hash ;Prefix []byte ;}{{Hash :_fa .SHA1 ,Prefix :[]byte {0x30,0x21,0x30,0x09,0x06,0x05,0x2b,0x0e,0x03,0x02,0x1a,0x05,0x00,0x04,0x14}},{Hash :_fa .SHA256 ,Prefix :[]byte {0x30,0x31,0x30,0x0d,0x06,0x09,0x60,0x86,0x48,0x01,0x65,0x03,0x04,0x02,0x01,0x05,0x00,0x04,0x20}},{Hash :_fa .SHA384 ,Prefix :[]byte {0x30,0x41,0x30,0x0d,0x06,0x09,0x60,0x86,0x48,0x01,0x65,0x03,0x04,0x02,0x02,0x05,0x00,0x04,0x30}},{Hash :_fa .SHA512 ,Prefix :[]byte {0x30,0x51,0x30,0x0d,0x06,0x09,0x60,0x86,0x48,0x01,0x65,0x03,0x04,0x02,0x03,0x05,0x00,0x04,0x40}},{Hash :_fa .RIPEMD160 ,Prefix :[]byte {0x30,0x20,0x30,0x08,0x06,0x06,0x28,0xcf,0x06,0x03,0x00,0x31,0x04,0x14}}};
for _ ,_cdd :=range _bcd {_gfa :=_cdd .Hash .Size ();_aedc :=len (_cdd .Prefix )+_gfa ;if _eea .Equal (_gcbb [_fgfb -_aedc :_fgfb -_gfa ],_cdd .Prefix ){return _cdd .Hash ;};};return 0;};

// IsApplicable returns true if the signature handler is applicable for the PdfSignature.
func (_dggc *adobeX509RSASHA1 )IsApplicable (sig *_bg .PdfSignature )bool {if sig ==nil ||sig .Filter ==nil ||sig .SubFilter ==nil {return false ;};return (*sig .Filter =="A\u0064\u006f\u0062\u0065\u002e\u0050\u0050\u004b\u004d\u0053"||*sig .Filter =="\u0041\u0064\u006f\u0062\u0065\u002e\u0050\u0050\u004b\u004c\u0069\u0074\u0065")&&*sig .SubFilter =="\u0061d\u0062e\u002e\u0078\u0035\u0030\u0039.\u0072\u0073a\u005f\u0073\u0068\u0061\u0031";
};

// NewDigest creates a new digest.
func (_bgea *etsiPAdES )NewDigest (_ *_bg .PdfSignature )(_bg .Hasher ,error ){return _eea .NewBuffer (nil ),nil ;};type timestampInfo struct{Version int ;Policy _g .RawValue ;MessageImprint struct{HashAlgorithm _ee .AlgorithmIdentifier ;HashedMessage []byte ;
};SerialNumber _g .RawValue ;GeneralizedTime _f .Time ;};

// NewDigest creates a new digest.
func (_bdf *adobeX509RSASHA1 )NewDigest (sig *_bg .PdfSignature )(_bg .Hasher ,error ){if _fcgg ,_bab :=_bdf .getHashAlgorithm (sig );_fcgg !=0&&_bab ==nil {return _fcgg .New (),nil ;};return _cbea .New (),nil ;};

// NewAdobePKCS7Detached creates a new Adobe.PPKMS/Adobe.PPKLite adbe.pkcs7.detached signature handler.
// Both parameters may be nil for the signature validation.
func NewAdobePKCS7Detached (privateKey *_ac .PrivateKey ,certificate *_gg .Certificate )(_bg .SignatureHandler ,error ){return &adobePKCS7Detached {_gac :certificate ,_cab :privateKey },nil ;};func (_bba *etsiPAdES )getCRLs (_gdgg []*_gg .Certificate )([][]byte ,error ){_cbd :=make ([][]byte ,0,len (_gdgg ));
for _ ,_cbe :=range _gdgg {for _ ,_fcg :=range _cbe .CRLDistributionPoints {if _bba .CertClient .IsCA (_cbe ){continue ;};_edcd ,_gfb :=_bba .CRLClient .MakeRequest (_fcg ,_cbe );if _gfb !=nil {_ae .Log .Debug ("W\u0041\u0052\u004e\u003a\u0020\u0043R\u004c\u0020\u0072\u0065\u0071\u0075\u0065\u0073\u0074 \u0065\u0072\u0072o\u0072:\u0020\u0025\u0076",_gfb );
continue ;};_cbd =append (_cbd ,_edcd );};};return _cbd ,nil ;};

// Sign adds a new reference to signature's references array.
func (_fg *DocMDPHandler )Sign (sig *_bg .PdfSignature ,digest _bg .Hasher )error {return _fg ._gc .Sign (sig ,digest );};func _dge (_ecgg []byte ,_bae int )(_aeddf []byte ){_cagd :=len (_ecgg );if _cagd > _bae {_cagd =_bae ;};_aeddf =make ([]byte ,_bae );
copy (_aeddf [len (_aeddf )-_cagd :],_ecgg );return ;};

// IsApplicable returns true if the signature handler is applicable for the PdfSignature.
func (_dcgc *docTimeStamp )IsApplicable (sig *_bg .PdfSignature )bool {if sig ==nil ||sig .Filter ==nil ||sig .SubFilter ==nil {return false ;};return (*sig .Filter =="A\u0064\u006f\u0062\u0065\u002e\u0050\u0050\u004b\u004d\u0053"||*sig .Filter =="\u0041\u0064\u006f\u0062\u0065\u002e\u0050\u0050\u004b\u004c\u0069\u0074\u0065")&&*sig .SubFilter =="\u0045\u0054\u0053I\u002e\u0052\u0046\u0043\u0033\u0031\u0036\u0031";
};

// Validate validates PdfSignature.
func (_abeg *adobeX509RSASHA1 )Validate (sig *_bg .PdfSignature ,digest _bg .Hasher )(_bg .SignatureValidationResult ,error ){_eca ,_dea :=_abeg .getCertificate (sig );if _dea !=nil {return _bg .SignatureValidationResult {},_dea ;};_babd :=sig .Contents .Bytes ();
var _dgf []byte ;if _ ,_acf :=_g .Unmarshal (_babd ,&_dgf );_acf !=nil {return _bg .SignatureValidationResult {},_acf ;};_cgcg ,_ffa :=digest .(_bf .Hash );if !_ffa {return _bg .SignatureValidationResult {},_c .New ("\u0068a\u0073h\u0020\u0074\u0079\u0070\u0065\u0020\u0065\u0072\u0072\u006f\u0072");
};_gce ,_ :=_abeg .getHashAlgorithm (sig );if _gce ==0{_gce =_cbea ;};if _affg :=_ac .VerifyPKCS1v15 (_eca .PublicKey .(*_ac .PublicKey ),_gce ,_cgcg .Sum (nil ),_dgf );_affg !=nil {return _bg .SignatureValidationResult {},_affg ;};return _bg .SignatureValidationResult {IsSigned :true ,IsVerified :true },nil ;
};

// NewDocTimeStamp creates a new DocTimeStamp signature handler.
// Both the timestamp server URL and the hash algorithm can be empty for the
// signature validation.
// The following hash algorithms are supported:
// crypto.SHA1, crypto.SHA256, crypto.SHA384, crypto.SHA512.
// NOTE: the handler will do a mock Sign when initializing the signature
// in order to estimate the signature size. Use NewDocTimeStampWithOpts
// for providing the signature size.
func NewDocTimeStamp (timestampServerURL string ,hashAlgorithm _fa .Hash )(_bg .SignatureHandler ,error ){return &docTimeStamp {_cbbd :timestampServerURL ,_caf :hashAlgorithm },nil ;};

// NewEtsiPAdESLevelB creates a new Adobe.PPKLite ETSI.CAdES.detached Level B signature handler.
func NewEtsiPAdESLevelB (privateKey *_ac .PrivateKey ,certificate *_gg .Certificate ,caCert *_gg .Certificate )(_bg .SignatureHandler ,error ){return &etsiPAdES {_bb :certificate ,_ecg :privateKey ,_eec :caCert },nil ;};

// Sign sets the Contents fields.
func (_aaa *adobePKCS7Detached )Sign (sig *_bg .PdfSignature ,digest _bg .Hasher )error {if _aaa ._cga {_dad :=_aaa ._geca ;if _dad <=0{_dad =8192;};sig .Contents =_gd .MakeHexString (string (make ([]byte ,_dad )));return nil ;};_gfd ,_eae :=digest .(*_eea .Buffer );
if !_eae {return _aa .Errorf ("c\u0061s\u0074\u0020\u0074\u006f\u0020\u0062\u0075\u0066f\u0065\u0072\u0020\u0066ai\u006c\u0073");};_ggdf ,_gcbe :=_aed .NewSignedData (_gfd .Bytes ());if _gcbe !=nil {return _gcbe ;};if _eef :=_ggdf .AddSigner (_aaa ._gac ,_aaa ._cab ,_aed .SignerInfoConfig {});
_eef !=nil {return _eef ;};_ggdf .Detach ();_fgd ,_gcbe :=_ggdf .Finish ();if _gcbe !=nil {return _gcbe ;};_ggdb :=make ([]byte ,8192);copy (_ggdb ,_fgd );sig .Contents =_gd .MakeHexString (string (_ggdb ));return nil ;};func (_fdc *etsiPAdES )makeTimestampRequest (_daa string ,_edcf []byte )(_g .RawValue ,error ){_fdf :=_fa .SHA512 .New ();
_fdf .Write (_edcf );_dc :=_fdf .Sum (nil );_cbb :=_gdg .Request {HashAlgorithm :_fa .SHA512 ,HashedMessage :_dc ,Certificates :true ,Extensions :nil ,ExtraExtensions :nil };_edcc :=_cf .NewTimestampClient ();_dac ,_dcf :=_edcc .GetEncodedToken (_daa ,&_cbb );
if _dcf !=nil {return _g .NullRawValue ,_dcf ;};return _g .RawValue {FullBytes :_dac },nil ;};

// NewEtsiPAdESLevelLT creates a new Adobe.PPKLite ETSI.CAdES.detached Level LT signature handler.
func NewEtsiPAdESLevelLT (privateKey *_ac .PrivateKey ,certificate *_gg .Certificate ,caCert *_gg .Certificate ,certificateTimestampServerURL string ,appender *_bg .PdfAppender )(_bg .SignatureHandler ,error ){_gcb :=appender .Reader .DSS ;if _gcb ==nil {_gcb =_bg .NewDSS ();
};if _fac :=_gcb .GenerateHashMaps ();_fac !=nil {return nil ,_fac ;};return &etsiPAdES {_bb :certificate ,_ecg :privateKey ,_eec :caCert ,_fd :certificateTimestampServerURL ,CertClient :_cf .NewCertClient (),OCSPClient :_cf .NewOCSPClient (),CRLClient :_cf .NewCRLClient (),_aedd :appender ,_ebg :_gcb },nil ;
};

// NewDocTimeStampWithOpts returns a new DocTimeStamp configured using the
// specified options. If no options are provided, default options will be used.
// Both the timestamp server URL and the hash algorithm can be empty for the
// signature validation.
// The following hash algorithms are supported:
// crypto.SHA1, crypto.SHA256, crypto.SHA384, crypto.SHA512.
func NewDocTimeStampWithOpts (timestampServerURL string ,hashAlgorithm _fa .Hash ,opts *DocTimeStampOpts )(_bg .SignatureHandler ,error ){if opts ==nil {opts =&DocTimeStampOpts {};};if opts .SignatureSize <=0{opts .SignatureSize =4192;};return &docTimeStamp {_cbbd :timestampServerURL ,_caf :hashAlgorithm ,_ebfg :opts .SignatureSize ,_ccc :opts .Client },nil ;
};

// ValidateWithOpts validates a PDF signature by checking PdfReader or PdfParser by the DiffPolicy
// params describes parameters for the DocMDP checks.
func (_gfc *DocMDPHandler )ValidateWithOpts (sig *_bg .PdfSignature ,digest _bg .Hasher ,params _bg .SignatureHandlerDocMDPParams )(_bg .SignatureValidationResult ,error ){_d ,_ff :=_gfc ._gc .Validate (sig ,digest );if _ff !=nil {return _d ,_ff ;};_aeb :=params .Parser ;
if _aeb ==nil {return _bg .SignatureValidationResult {},_c .New ("p\u0061r\u0073\u0065\u0072\u0020\u0063\u0061\u006e\u0027t\u0020\u0062\u0065\u0020nu\u006c\u006c");};if !_d .IsVerified {return _d ,nil ;};_aca :=params .DiffPolicy ;if _aca ==nil {_aca =_bfa .NewDefaultDiffPolicy ();
};for _da :=0;_da <=_aeb .GetRevisionNumber ();_da ++{_gb ,_ea :=_aeb .GetRevision (_da );if _ea !=nil {return _bg .SignatureValidationResult {},_ea ;};_ead :=_gb .GetTrailer ();if _ead ==nil {return _bg .SignatureValidationResult {},_c .New ("\u0075\u006e\u0064\u0065f\u0069\u006e\u0065\u0064\u0020\u0074\u0068\u0065\u0020\u0074r\u0061i\u006c\u0065\u0072\u0020\u006f\u0062\u006ae\u0063\u0074");
};_fe ,_edc :=_gd .GetDict (_ead .Get ("\u0052\u006f\u006f\u0074"));if !_edc {return _bg .SignatureValidationResult {},_c .New ("\u0075n\u0064\u0065\u0066\u0069n\u0065\u0064\u0020\u0074\u0068e\u0020r\u006fo\u0074\u0020\u006f\u0062\u006a\u0065\u0063t");
};_dd ,_edc :=_gd .GetDict (_fe .Get ("\u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d"));if !_edc {continue ;};_bd ,_edc :=_gd .GetArray (_dd .Get ("\u0046\u0069\u0065\u006c\u0064\u0073"));if !_edc {continue ;};for _ ,_gda :=range _bd .Elements (){_ec ,_af :=_gd .GetDict (_gda );
if !_af {continue ;};_ade ,_af :=_gd .GetDict (_ec .Get ("\u0056"));if !_af {continue ;};if _gd .EqualObjects (_ade .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"),sig .Contents ){_d .DiffResults ,_ea =_aca .ReviewFile (_gb ,_aeb ,&_bfa .MDPParameters {DocMDPLevel :_gfc .Permission });
if _ea !=nil {return _bg .SignatureValidationResult {},_ea ;};_d .IsVerified =_d .DiffResults .IsPermitted ();return _d ,nil ;};};};return _bg .SignatureValidationResult {},_c .New ("\u0064\u006f\u006e\u0027\u0074\u0020\u0066o\u0075\u006e\u0064 \u0074\u0068\u0069\u0073 \u0073\u0069\u0067\u006e\u0061\u0074\u0075\u0072\u0065\u0020\u0069\u006e\u0020\u0074\u0068\u0065\u0020\u0072\u0065\u0076\u0069\u0073\u0069\u006f\u006e\u0073");
};

// InitSignature initialises the PdfSignature.
func (_gbd *adobeX509RSASHA1 )InitSignature (sig *_bg .PdfSignature )error {if _gbd ._egc ==nil {return _c .New ("c\u0065\u0072\u0074\u0069\u0066\u0069c\u0061\u0074\u0065\u0020\u006d\u0075\u0073\u0074\u0020n\u006f\u0074\u0020b\u0065 \u006e\u0069\u006c");
};if _gbd ._gcbf ==nil &&_gbd ._edcb ==nil {return _c .New ("\u006d\u0075\u0073\u0074\u0020\u0070\u0072o\u0076\u0069\u0064e\u0020\u0065\u0069t\u0068\u0065r\u0020\u0061\u0020\u0070\u0072\u0069v\u0061te\u0020\u006b\u0065\u0079\u0020\u006f\u0072\u0020\u0061\u0020\u0073\u0069\u0067\u006e\u0069\u006e\u0067\u0020\u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e");
};_gdad :=*_gbd ;sig .Handler =&_gdad ;sig .Filter =_gd .MakeName ("\u0041\u0064\u006f\u0062\u0065\u002e\u0050\u0050\u004b\u004c\u0069\u0074\u0065");sig .SubFilter =_gd .MakeName ("\u0061d\u0062e\u002e\u0078\u0035\u0030\u0039.\u0072\u0073a\u005f\u0073\u0068\u0061\u0031");
sig .Cert =_gd .MakeString (string (_gdad ._egc .Raw ));sig .Reference =nil ;_fgf ,_cdg :=_gdad .NewDigest (sig );if _cdg !=nil {return _cdg ;};_fgf .Write ([]byte ("\u0063\u0061\u006c\u0063\u0075\u006ca\u0074\u0065\u0020\u0074\u0068\u0065\u0020\u0043\u006f\u006e\u0074\u0065\u006et\u0073\u0020\u0066\u0069\u0065\u006c\u0064 \u0073\u0069\u007a\u0065"));
return _gdad .sign (sig ,_fgf ,_gbd ._dbf );};

// NewDigest creates a new digest.
func (_dbfc *docTimeStamp )NewDigest (sig *_bg .PdfSignature )(_bg .Hasher ,error ){return _eea .NewBuffer (nil ),nil ;};

// InitSignature initialises the PdfSignature.
func (_eba *etsiPAdES )InitSignature (sig *_bg .PdfSignature )error {if !_eba ._add {if _eba ._bb ==nil {return _c .New ("c\u0065\u0072\u0074\u0069\u0066\u0069c\u0061\u0074\u0065\u0020\u006d\u0075\u0073\u0074\u0020n\u006f\u0074\u0020b\u0065 \u006e\u0069\u006c");
};if _eba ._ecg ==nil {return _c .New ("\u0070\u0072\u0069\u0076\u0061\u0074\u0065\u004b\u0065\u0079\u0020m\u0075\u0073\u0074\u0020\u006e\u006f\u0074\u0020\u0062\u0065 \u006e\u0069\u006c");};};_ag :=*_eba ;sig .Handler =&_ag ;sig .Filter =_gd .MakeName ("\u0041\u0064\u006f\u0062\u0065\u002e\u0050\u0050\u004b\u004c\u0069\u0074\u0065");
sig .SubFilter =_gd .MakeName ("\u0045\u0054\u0053\u0049.C\u0041\u0064\u0045\u0053\u002e\u0064\u0065\u0074\u0061\u0063\u0068\u0065\u0064");sig .Reference =nil ;_ffb ,_cba :=_ag .NewDigest (sig );if _cba !=nil {return _cba ;};_ ,_cba =_ffb .Write ([]byte ("\u0063\u0061\u006c\u0063\u0075\u006ca\u0074\u0065\u0020\u0074\u0068\u0065\u0020\u0043\u006f\u006e\u0074\u0065\u006et\u0073\u0020\u0066\u0069\u0065\u006c\u0064 \u0073\u0069\u007a\u0065"));
if _cba !=nil {return _cba ;};_ag ._eb =true ;_cba =_ag .Sign (sig ,_ffb );_ag ._eb =false ;return _cba ;};type docTimeStamp struct{_cbbd string ;_caf _fa .Hash ;_ebfg int ;_ccc *_cf .TimestampClient ;};

// RevocationInfoArchival is OIDAttributeAdobeRevocation attribute.
type RevocationInfoArchival struct{Crl []_g .RawValue `asn1:"explicit,tag:0,optional"`;Ocsp []_g .RawValue `asn1:"explicit,tag:1,optional"`;OtherRevInfo []_g .RawValue `asn1:"explicit,tag:2,optional"`;};

// DocTimeStampOpts defines options for configuring the timestamp handler.
type DocTimeStampOpts struct{

// SignatureSize is the estimated size of the signature contents in bytes.
// If not provided, a default signature size of 4192 is used.
// The signing process will report the model.ErrSignNotEnoughSpace error
// if the estimated signature size is smaller than the actual size of the
// signature.
SignatureSize int ;

// Client is the timestamp client used to make the signature request.
// If no client is provided, a default one is used.
Client *_cf .TimestampClient ;};

// Sign sets the Contents fields for the PdfSignature.
func (_aab *docTimeStamp )Sign (sig *_bg .PdfSignature ,digest _bg .Hasher )error {_ddd ,_gecc :=_cf .NewTimestampRequest (digest .(*_eea .Buffer ),&_gdg .RequestOptions {Hash :_aab ._caf ,Certificates :true });if _gecc !=nil {return _gecc ;};_dcca :=_aab ._ccc ;
if _dcca ==nil {_dcca =_cf .NewTimestampClient ();};_dee ,_gecc :=_dcca .GetEncodedToken (_aab ._cbbd ,_ddd );if _gecc !=nil {return _gecc ;};_efc :=len (_dee );if _aab ._ebfg > 0&&_efc > _aab ._ebfg {return _bg .ErrSignNotEnoughSpace ;};if _efc > 0{_aab ._ebfg =_efc +128;
};if sig .Contents !=nil {_bbc :=sig .Contents .Bytes ();copy (_bbc ,_dee );_dee =_bbc ;};sig .Contents =_gd .MakeHexString (string (_dee ));return nil ;};

// Validate implementation of the SignatureHandler interface
// This check is impossible without checking the document's content.
// Please, use ValidateWithOpts with the PdfParser.
func (_ecf *DocMDPHandler )Validate (sig *_bg .PdfSignature ,digest _bg .Hasher )(_bg .SignatureValidationResult ,error ){return _bg .SignatureValidationResult {},_c .New ("i\u006d\u0070\u006f\u0073\u0073\u0069b\u006c\u0065\u0020\u0076\u0061\u006ci\u0064\u0061\u0074\u0069\u006f\u006e\u0020w\u0069\u0074\u0068\u006f\u0075\u0074\u0020\u0070\u0061\u0072s\u0065");
};func (_eaa *adobeX509RSASHA1 )getHashAlgorithm (_bdb *_bg .PdfSignature )(_fa .Hash ,error ){_cdgd ,_eed :=_eaa .getCertificate (_bdb );if _eed !=nil {if _eaa ._ceb !=0{return _eaa ._ceb ,nil ;};return _cbea ,_eed ;};if _bdb .Contents !=nil {_de :=_bdb .Contents .Bytes ();
var _cfe []byte ;if _ ,_ebb :=_g .Unmarshal (_de ,&_cfe );_ebb ==nil {_bgfg :=_cca (_cdgd .PublicKey .(*_ac .PublicKey ),_cfe );if _bgfg > 0{return _bgfg ,nil ;};};};if _eaa ._ceb !=0{return _eaa ._ceb ,nil ;};return _cbea ,nil ;};func (_dde *etsiPAdES )addDss (_ede ,_gaf []*_gg .Certificate ,_dcce *RevocationInfoArchival )(int ,error ){_gccb ,_aeba ,_bgb :=_dde .buildCertChain (_ede ,_gaf );
if _bgb !=nil {return 0,_bgb ;};_fff ,_bgb :=_dde .getCerts (_gccb );if _bgb !=nil {return 0,_bgb ;};var _fde ,_beb [][]byte ;if _dde .OCSPClient !=nil {_fde ,_bgb =_dde .getOCSPs (_gccb ,_aeba );if _bgb !=nil {return 0,_bgb ;};};if _dde .CRLClient !=nil {_beb ,_bgb =_dde .getCRLs (_gccb );
if _bgb !=nil {return 0,_bgb ;};};if !_dde ._eb {_ ,_bgb =_dde ._ebg .AddCerts (_fff );if _bgb !=nil {return 0,_bgb ;};_ ,_bgb =_dde ._ebg .AddOCSPs (_fde );if _bgb !=nil {return 0,_bgb ;};_ ,_bgb =_dde ._ebg .AddCRLs (_beb );if _bgb !=nil {return 0,_bgb ;
};};_bgf :=0;for _ ,_abe :=range _beb {_bgf +=len (_abe );_dcce .Crl =append (_dcce .Crl ,_g .RawValue {FullBytes :_abe });};for _ ,_bdg :=range _fde {_bgf +=len (_bdg );_dcce .Ocsp =append (_dcce .Ocsp ,_g .RawValue {FullBytes :_bdg });};return _bgf ,nil ;
};const _cbea =_fa .SHA1 ;

// Validate validates PdfSignature.
func (_efg *etsiPAdES )Validate (sig *_bg .PdfSignature ,digest _bg .Hasher )(_bg .SignatureValidationResult ,error ){_abc :=sig .Contents .Bytes ();_bdgg ,_aeg :=_aed .Parse (_abc );if _aeg !=nil {return _bg .SignatureValidationResult {},_aeg ;};_abed ,_dcd :=digest .(*_eea .Buffer );
if !_dcd {return _bg .SignatureValidationResult {},_aa .Errorf ("c\u0061s\u0074\u0020\u0074\u006f\u0020\u0062\u0075\u0066f\u0065\u0072\u0020\u0066ai\u006c\u0073");};_bdgg .Content =_abed .Bytes ();if _aeg =_bdgg .Verify ();_aeg !=nil {return _bg .SignatureValidationResult {},_aeg ;
};_eee :=false ;_gcf :=false ;var _gefb _f .Time ;for _ ,_fbc :=range _bdgg .Signers {_gcbd :=_fbc .EncryptedDigest ;var _ced RevocationInfoArchival ;_aeg =_bdgg .UnmarshalSignedAttribute (_aed .OIDAttributeAdobeRevocation ,&_ced );if _aeg ==nil {if len (_ced .Crl )> 0{_gcf =true ;
};if len (_ced .Ocsp )> 0{_eee =true ;};};for _ ,_cda :=range _fbc .UnauthenticatedAttributes {if _cda .Type .Equal (_aed .OIDAttributeTimeStampToken ){_aec ,_aff :=_gdg .Parse (_cda .Value .Bytes );if _aff !=nil {return _bg .SignatureValidationResult {},_aff ;
};_gefb =_aec .Time ;_afac :=_aec .HashAlgorithm .New ();_afac .Write (_gcbd );if !_eea .Equal (_afac .Sum (nil ),_aec .HashedMessage ){return _bg .SignatureValidationResult {},_aa .Errorf ("\u0048\u0061\u0073\u0068\u0020i\u006e\u0020\u0074\u0069\u006d\u0065\u0073\u0074\u0061\u006d\u0070\u0020\u0069s\u0020\u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006e\u0074\u0020\u0066\u0072\u006f\u006d\u0020\u0070\u006b\u0063\u0073\u0037");
};break ;};};};_bdc :=_bg .SignatureValidationResult {IsSigned :true ,IsVerified :true ,IsCrlFound :_gcf ,IsOcspFound :_eee ,GeneralizedTime :_gefb };return _bdc ,nil ;};

// IsApplicable returns true if the signature handler is applicable for the PdfSignature.
func (_edf *DocMDPHandler )IsApplicable (sig *_bg .PdfSignature )bool {_edd :=false ;for _ ,_gf :=range sig .Reference .Elements (){if _gde ,_ce :=_gd .GetDict (_gf );_ce {if _ad ,_aae :=_gd .GetNameVal (_gde .Get ("\u0054r\u0061n\u0073\u0066\u006f\u0072\u006d\u004d\u0065\u0074\u0068\u006f\u0064"));
_aae {if _ad !="\u0044\u006f\u0063\u004d\u0044\u0050"{return false ;};if _cb ,_faa :=_gd .GetDict (_gde .Get ("\u0054r\u0061n\u0073\u0066\u006f\u0072\u006d\u0050\u0061\u0072\u0061\u006d\u0073"));_faa {_ ,_bfg :=_gd .GetNumberAsInt64 (_cb .Get ("\u0050"));
if _bfg !=nil {return false ;};_edd =true ;break ;};};};};return _edd &&_edf ._gc .IsApplicable (sig );};

// NewAdobeX509RSASHA1CustomWithOpts creates a new Adobe.PPKMS/Adobe.PPKLite
// adbe.x509.rsa_sha1 signature handler with a custom signing function. The
// handler is configured based on the provided options. If no options are
// provided, default options will be used. Both the certificate and the sign
// function can be nil for the signature validation.
func NewAdobeX509RSASHA1CustomWithOpts (certificate *_gg .Certificate ,signFunc SignFunc ,opts *AdobeX509RSASHA1Opts )(_bg .SignatureHandler ,error ){if opts ==nil {opts =&AdobeX509RSASHA1Opts {};};return &adobeX509RSASHA1 {_egc :certificate ,_edcb :signFunc ,_dbf :opts .EstimateSize ,_ceb :opts .Algorithm },nil ;
};

// NewDigest creates a new digest.
func (_adeg *DocMDPHandler )NewDigest (sig *_bg .PdfSignature )(_bg .Hasher ,error ){return _adeg ._gc .NewDigest (sig );};