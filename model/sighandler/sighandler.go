//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package sighandler implements digital signature handlers for PDF signature validation and signing.
package sighandler ;import (_cc "bytes";_bd "crypto";_gg "crypto/rand";_ga "crypto/rsa";_ag "crypto/x509";_ee "crypto/x509/pkix";_da "encoding/asn1";_c "encoding/hex";_e "errors";_gc "fmt";_f "github.com/unidoc/pkcs7";_agc "github.com/unidoc/timestamp";
_cb "github.com/unidoc/unipdf/v3/common";_ca "github.com/unidoc/unipdf/v3/core";_df "github.com/unidoc/unipdf/v3/model";_fa "github.com/unidoc/unipdf/v3/model/mdp";_bc "github.com/unidoc/unipdf/v3/model/sigutil";_d "hash";_a "math/big";_ec "strings";_g "time";
);func (_cgd *adobePKCS7Detached )getCertificate (_agca *_df .PdfSignature )(*_ag .Certificate ,error ){if _cgd ._fgeb !=nil {return _cgd ._fgeb ,nil ;};_edbf ,_fec :=_agca .GetCerts ();if _fec !=nil {return nil ,_fec ;};return _edbf [0],nil ;};func (_ebe *etsiPAdES )addDss (_ceb ,_dae []*_ag .Certificate ,_edd *RevocationInfoArchival )(int ,error ){_cdfb ,_gga ,_ggaa :=_ebe .buildCertChain (_ceb ,_dae );
if _ggaa !=nil {return 0,_ggaa ;};_addg ,_ggaa :=_ebe .getCerts (_cdfb );if _ggaa !=nil {return 0,_ggaa ;};var _fffc ,_adb [][]byte ;if _ebe .OCSPClient !=nil {_fffc ,_ggaa =_ebe .getOCSPs (_cdfb ,_gga );if _ggaa !=nil {return 0,_ggaa ;};};if _ebe .CRLClient !=nil {_adb ,_ggaa =_ebe .getCRLs (_cdfb );
if _ggaa !=nil {return 0,_ggaa ;};};if !_ebe ._aa {_ ,_ggaa =_ebe ._fff .AddCerts (_addg );if _ggaa !=nil {return 0,_ggaa ;};_ ,_ggaa =_ebe ._fff .AddOCSPs (_fffc );if _ggaa !=nil {return 0,_ggaa ;};_ ,_ggaa =_ebe ._fff .AddCRLs (_adb );if _ggaa !=nil {return 0,_ggaa ;
};};_gfb :=0;for _ ,_cdd :=range _adb {_gfb +=len (_cdd );_edd .Crl =append (_edd .Crl ,_da .RawValue {FullBytes :_cdd });};for _ ,_ggc :=range _fffc {_gfb +=len (_ggc );_edd .Ocsp =append (_edd .Ocsp ,_da .RawValue {FullBytes :_ggc });};return _gfb ,nil ;
};func (_eab *adobeX509RSASHA1 )getCertificate (_eaaef *_df .PdfSignature )(*_ag .Certificate ,error ){if _eab ._aaf !=nil {return _eab ._aaf ,nil ;};_aeag ,_fabe :=_eaaef .GetCerts ();if _fabe !=nil {return nil ,_fabe ;};return _aeag [0],nil ;};

// Sign sets the Contents fields for the PdfSignature.
func (_gabc *adobeX509RSASHA1 )Sign (sig *_df .PdfSignature ,digest _df .Hasher )error {var _aad []byte ;var _acc error ;if _gabc ._eea !=nil {_aad ,_acc =_gabc ._eea (sig ,digest );if _acc !=nil {return _acc ;};}else {_bdd ,_eef :=digest .(_d .Hash );
if !_eef {return _e .New ("\u0068a\u0073h\u0020\u0074\u0079\u0070\u0065\u0020\u0065\u0072\u0072\u006f\u0072");};_faag :=_fegb ;if _gabc ._adbe !=0{_faag =_gabc ._adbe ;};_aad ,_acc =_ga .SignPKCS1v15 (_gg .Reader ,_gabc ._efe ,_faag ,_bdd .Sum (nil ));
if _acc !=nil {return _acc ;};};_aad ,_acc =_da .Marshal (_aad );if _acc !=nil {return _acc ;};sig .Contents =_ca .MakeHexString (string (_aad ));return nil ;};func (_cda *etsiPAdES )makeTimestampRequest (_faa string ,_aba []byte )(_da .RawValue ,error ){_abd :=_bd .SHA512 .New ();
_abd .Write (_aba );_de :=_abd .Sum (nil );_efa :=_agc .Request {HashAlgorithm :_bd .SHA512 ,HashedMessage :_de ,Certificates :true ,Extensions :nil ,ExtraExtensions :nil };_dec :=_bc .NewTimestampClient ();_agd ,_ae :=_dec .GetEncodedToken (_faa ,&_efa );
if _ae !=nil {return _da .NullRawValue ,_ae ;};return _da .RawValue {FullBytes :_agd },nil ;};

// AdobeX509RSASHA1Opts defines options for configuring the adbe.x509.rsa_sha1
// signature handler.
type AdobeX509RSASHA1Opts struct{

// EstimateSize specifies whether the size of the signature contents
// should be estimated based on the modulus size of the public key
// extracted from the signing certificate. If set to false, a mock Sign
// call is made in order to estimate the size of the signature contents.
EstimateSize bool ;

// Algorithm specifies the algorithm used for performing signing.
// If not specified, defaults to SHA1.
Algorithm _bd .Hash ;};

// NewEtsiPAdESLevelT creates a new Adobe.PPKLite ETSI.CAdES.detached Level T signature handler.
func NewEtsiPAdESLevelT (privateKey *_ga .PrivateKey ,certificate *_ag .Certificate ,caCert *_ag .Certificate ,certificateTimestampServerURL string )(_df .SignatureHandler ,error ){return &etsiPAdES {_ff :certificate ,_bbd :privateKey ,_ccf :caCert ,_fd :certificateTimestampServerURL },nil ;
};

// InitSignature initialises the PdfSignature.
func (_gb *adobeX509RSASHA1 )InitSignature (sig *_df .PdfSignature )error {if _gb ._aaf ==nil {return _e .New ("c\u0065\u0072\u0074\u0069\u0066\u0069c\u0061\u0074\u0065\u0020\u006d\u0075\u0073\u0074\u0020n\u006f\u0074\u0020b\u0065 \u006e\u0069\u006c");
};if _gb ._efe ==nil &&_gb ._eea ==nil {return _e .New ("\u006d\u0075\u0073\u0074\u0020\u0070\u0072o\u0076\u0069\u0064e\u0020\u0065\u0069t\u0068\u0065r\u0020\u0061\u0020\u0070\u0072\u0069v\u0061te\u0020\u006b\u0065\u0079\u0020\u006f\u0072\u0020\u0061\u0020\u0073\u0069\u0067\u006e\u0069\u006e\u0067\u0020\u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e");
};_gce :=*_gb ;sig .Handler =&_gce ;sig .Filter =_ca .MakeName ("\u0041\u0064\u006f\u0062\u0065\u002e\u0050\u0050\u004b\u004c\u0069\u0074\u0065");sig .SubFilter =_ca .MakeName ("\u0061d\u0062e\u002e\u0078\u0035\u0030\u0039.\u0072\u0073a\u005f\u0073\u0068\u0061\u0031");
sig .Cert =_ca .MakeString (string (_gce ._aaf .Raw ));sig .Reference =nil ;_cddd ,_aae :=_gce .NewDigest (sig );if _aae !=nil {return _aae ;};_cddd .Write ([]byte ("\u0063\u0061\u006c\u0063\u0075\u006ca\u0074\u0065\u0020\u0074\u0068\u0065\u0020\u0043\u006f\u006e\u0074\u0065\u006et\u0073\u0020\u0066\u0069\u0065\u006c\u0064 \u0073\u0069\u007a\u0065"));
return _gce .sign (sig ,_cddd ,_gb ._afd );};

// Sign sets the Contents fields for the PdfSignature.
func (_abb *etsiPAdES )Sign (sig *_df .PdfSignature ,digest _df .Hasher )error {_cgf ,_cdf :=digest .(*_cc .Buffer );if !_cdf {return _gc .Errorf ("c\u0061s\u0074\u0020\u0074\u006f\u0020\u0062\u0075\u0066f\u0065\u0072\u0020\u0066ai\u006c\u0073");};_acd ,_ecb :=_f .NewSignedData (_cgf .Bytes ());
if _ecb !=nil {return _ecb ;};_acd .SetDigestAlgorithm (_f .OIDDigestAlgorithmSHA256 );_bdc :=_f .SignerInfoConfig {};_cae :=_bd .SHA256 .New ();_cae .Write (_abb ._ff .Raw );var _dece struct{Seq struct{Seq struct{Value []byte ;};};};_dece .Seq .Seq .Value =_cae .Sum (nil );
var _dge []*_ag .Certificate ;var _cfc []*_ag .Certificate ;if _abb ._ccf !=nil {_cfc =[]*_ag .Certificate {_abb ._ccf };};_cgfa :=RevocationInfoArchival {Crl :[]_da .RawValue {},Ocsp :[]_da .RawValue {},OtherRevInfo :[]_da .RawValue {}};_eg :=0;if _abb ._dab !=nil &&len (_abb ._fd )> 0{_abfe ,_cab :=_abb .makeTimestampRequest (_abb ._fd ,([]byte )(""));
if _cab !=nil {return _cab ;};_bff ,_cab :=_agc .Parse (_abfe .FullBytes );if _cab !=nil {return _cab ;};_dge =append (_dge ,_bff .Certificates ...);};if _abb ._dab !=nil {_aeaa ,_gd :=_abb .addDss ([]*_ag .Certificate {_abb ._ff },_cfc ,&_cgfa );if _gd !=nil {return _gd ;
};_eg +=_aeaa ;if len (_dge )> 0{_aeaa ,_gd =_abb .addDss (_dge ,nil ,&_cgfa );if _gd !=nil {return _gd ;};_eg +=_aeaa ;};if !_abb ._aa {_abb ._dab .SetDSS (_abb ._fff );};};_bdc .ExtraSignedAttributes =append (_bdc .ExtraSignedAttributes ,_f .Attribute {Type :_f .OIDAttributeSigningCertificateV2 ,Value :_dece },_f .Attribute {Type :_f .OIDAttributeAdobeRevocation ,Value :_cgfa });
if _bef :=_acd .AddSignerChainPAdES (_abb ._ff ,_abb ._bbd ,_cfc ,_bdc );_bef !=nil {return _bef ;};_acd .Detach ();if len (_abb ._fd )> 0{_cfg :=_acd .GetSignedData ().SignerInfos [0].EncryptedDigest ;_cef ,_ead :=_abb .makeTimestampRequest (_abb ._fd ,_cfg );
if _ead !=nil {return _ead ;};_ead =_acd .AddTimestampTokenToSigner (0,_cef .FullBytes );if _ead !=nil {return _ead ;};};_gfc ,_ecb :=_acd .Finish ();if _ecb !=nil {return _ecb ;};_bggd :=make ([]byte ,len (_gfc )+1024*2+_eg );copy (_bggd ,_gfc );sig .Contents =_ca .MakeHexString (string (_bggd ));
if !_abb ._aa &&_abb ._fff !=nil {_cae =_bd .SHA1 .New ();_cae .Write (_bggd );_eb :=_ec .ToUpper (_c .EncodeToString (_cae .Sum (nil )));if _eb !=""{_abb ._fff .VRI [_eb ]=&_df .VRI {Cert :_abb ._fff .Certs ,OCSP :_abb ._fff .OCSPs ,CRL :_abb ._fff .CRLs };
};_abb ._dab .SetDSS (_abb ._fff );};return nil ;};

// NewDigest creates a new digest.
func (_bed *DocMDPHandler )NewDigest (sig *_df .PdfSignature )(_df .Hasher ,error ){return _bed ._bg .NewDigest (sig );};type adobeX509RSASHA1 struct{_efe *_ga .PrivateKey ;_aaf *_ag .Certificate ;_eea SignFunc ;_afd bool ;_adbe _bd .Hash ;};

// Sign sets the Contents fields for the PdfSignature.
func (_bba *docTimeStamp )Sign (sig *_df .PdfSignature ,digest _df .Hasher )error {_cabg ,_ebd :=_bc .NewTimestampRequest (digest .(*_cc .Buffer ),&_agc .RequestOptions {Hash :_bba ._cbfc ,Certificates :true });if _ebd !=nil {return _ebd ;};_cgg :=_bba ._daef ;
if _cgg ==nil {_cgg =_bc .NewTimestampClient ();};_faab ,_ebd :=_cgg .GetEncodedToken (_bba ._cfcg ,_cabg );if _ebd !=nil {return _ebd ;};_bde :=len (_faab );if _bba ._eabd > 0&&_bde > _bba ._eabd {return _df .ErrSignNotEnoughSpace ;};if _bde > 0{_bba ._eabd =_bde +128;
};if sig .Contents !=nil {_bbdb :=sig .Contents .Bytes ();copy (_bbdb ,_faab );_faab =_bbdb ;};sig .Contents =_ca .MakeHexString (string (_faab ));return nil ;};

// NewAdobePKCS7Detached creates a new Adobe.PPKMS/Adobe.PPKLite adbe.pkcs7.detached signature handler.
// Both parameters may be nil for the signature validation.
func NewAdobePKCS7Detached (privateKey *_ga .PrivateKey ,certificate *_ag .Certificate )(_df .SignatureHandler ,error ){return &adobePKCS7Detached {_fgeb :certificate ,_cgc :privateKey },nil ;};

// Sign adds a new reference to signature's references array.
func (_ef *DocMDPHandler )Sign (sig *_df .PdfSignature ,digest _df .Hasher )error {return _ef ._bg .Sign (sig ,digest );};func (_ccef *etsiPAdES )getCRLs (_ecgc []*_ag .Certificate )([][]byte ,error ){_feg :=make ([][]byte ,0,len (_ecgc ));for _ ,_fdc :=range _ecgc {for _ ,_fabf :=range _fdc .CRLDistributionPoints {if _ccef .CertClient .IsCA (_fdc ){continue ;
};_fb ,_dfe :=_ccef .CRLClient .MakeRequest (_fabf ,_fdc );if _dfe !=nil {_cb .Log .Debug ("W\u0041\u0052\u004e\u003a\u0020\u0043R\u004c\u0020\u0072\u0065\u0071\u0075\u0065\u0073\u0074 \u0065\u0072\u0072o\u0072:\u0020\u0025\u0076",_dfe );continue ;};_feg =append (_feg ,_fb );
};};return _feg ,nil ;};func (_dbacb *etsiPAdES )getCerts (_beg []*_ag .Certificate )([][]byte ,error ){_abf :=make ([][]byte ,0,len (_beg ));for _ ,_edb :=range _beg {_abf =append (_abf ,_edb .Raw );};return _abf ,nil ;};

// IsApplicable returns true if the signature handler is applicable for the PdfSignature.
func (_eaaf *docTimeStamp )IsApplicable (sig *_df .PdfSignature )bool {if sig ==nil ||sig .Filter ==nil ||sig .SubFilter ==nil {return false ;};return (*sig .Filter =="A\u0064\u006f\u0062\u0065\u002e\u0050\u0050\u004b\u004d\u0053"||*sig .Filter =="\u0041\u0064\u006f\u0062\u0065\u002e\u0050\u0050\u004b\u004c\u0069\u0074\u0065")&&*sig .SubFilter =="\u0045\u0054\u0053I\u002e\u0052\u0046\u0043\u0033\u0031\u0036\u0031";
};

// RevocationInfoArchival is OIDAttributeAdobeRevocation attribute.
type RevocationInfoArchival struct{Crl []_da .RawValue `asn1:"explicit,tag:0,optional"`;Ocsp []_da .RawValue `asn1:"explicit,tag:1,optional"`;OtherRevInfo []_da .RawValue `asn1:"explicit,tag:2,optional"`;};

// Sign sets the Contents fields.
func (_ecgga *adobePKCS7Detached )Sign (sig *_df .PdfSignature ,digest _df .Hasher )error {if _ecgga ._gcg {_begb :=_ecgga ._dega ;if _begb <=0{_begb =8192;};sig .Contents =_ca .MakeHexString (string (make ([]byte ,_begb )));return nil ;};_fbb ,_fgb :=digest .(*_cc .Buffer );
if !_fgb {return _gc .Errorf ("c\u0061s\u0074\u0020\u0074\u006f\u0020\u0062\u0075\u0066f\u0065\u0072\u0020\u0066ai\u006c\u0073");};_agaa ,_fad :=_f .NewSignedData (_fbb .Bytes ());if _fad !=nil {return _fad ;};if _faaf :=_agaa .AddSigner (_ecgga ._fgeb ,_ecgga ._cgc ,_f .SignerInfoConfig {});
_faaf !=nil {return _faaf ;};_agaa .Detach ();_agf ,_fad :=_agaa .Finish ();if _fad !=nil {return _fad ;};_cag :=make ([]byte ,8192);copy (_cag ,_agf );sig .Contents =_ca .MakeHexString (string (_cag ));return nil ;};

// DocMDPHandler describes handler for the DocMDP realization.
type DocMDPHandler struct{_bg _df .SignatureHandler ;Permission _fa .DocMDPPermission ;};

// Validate validates PdfSignature.
func (_fae *etsiPAdES )Validate (sig *_df .PdfSignature ,digest _df .Hasher )(_df .SignatureValidationResult ,error ){_ccab :=sig .Contents .Bytes ();_dca ,_dac :=_f .Parse (_ccab );if _dac !=nil {return _df .SignatureValidationResult {},_dac ;};_adf ,_edbb :=digest .(*_cc .Buffer );
if !_edbb {return _df .SignatureValidationResult {},_gc .Errorf ("c\u0061s\u0074\u0020\u0074\u006f\u0020\u0062\u0075\u0066f\u0065\u0072\u0020\u0066ai\u006c\u0073");};_dca .Content =_adf .Bytes ();if _dac =_dca .Verify ();_dac !=nil {return _df .SignatureValidationResult {},_dac ;
};_bgbe :=false ;_ada :=false ;var _dgeg _g .Time ;for _ ,_eac :=range _dca .Signers {_fbe :=_eac .EncryptedDigest ;var _ecgg RevocationInfoArchival ;_dac =_dca .UnmarshalSignedAttribute (_f .OIDAttributeAdobeRevocation ,&_ecgg );if _dac ==nil {if len (_ecgg .Crl )> 0{_ada =true ;
};if len (_ecgg .Ocsp )> 0{_bgbe =true ;};};for _ ,_agb :=range _eac .UnauthenticatedAttributes {if _agb .Type .Equal (_f .OIDAttributeTimeStampToken ){_dfb ,_bdb :=_agc .Parse (_agb .Value .Bytes );if _bdb !=nil {return _df .SignatureValidationResult {},_bdb ;
};_dgeg =_dfb .Time ;_dgd :=_dfb .HashAlgorithm .New ();_dgd .Write (_fbe );if !_cc .Equal (_dgd .Sum (nil ),_dfb .HashedMessage ){return _df .SignatureValidationResult {},_gc .Errorf ("\u0048\u0061\u0073\u0068\u0020i\u006e\u0020\u0074\u0069\u006d\u0065\u0073\u0074\u0061\u006d\u0070\u0020\u0069s\u0020\u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006e\u0074\u0020\u0066\u0072\u006f\u006d\u0020\u0070\u006b\u0063\u0073\u0037");
};break ;};};};_cdg :=_df .SignatureValidationResult {IsSigned :true ,IsVerified :true ,IsCrlFound :_ada ,IsOcspFound :_bgbe ,GeneralizedTime :_dgeg };return _cdg ,nil ;};

// IsApplicable returns true if the signature handler is applicable for the PdfSignature.
func (_cacb *etsiPAdES )IsApplicable (sig *_df .PdfSignature )bool {if sig ==nil ||sig .Filter ==nil ||sig .SubFilter ==nil {return false ;};return (*sig .Filter =="\u0041\u0064\u006f\u0062\u0065\u002e\u0050\u0050\u004b\u004c\u0069\u0074\u0065")&&*sig .SubFilter =="\u0045\u0054\u0053\u0049.C\u0041\u0064\u0045\u0053\u002e\u0064\u0065\u0074\u0061\u0063\u0068\u0065\u0064";
};func (_aafb *adobeX509RSASHA1 )sign (_edbg *_df .PdfSignature ,_eee _df .Hasher ,_abdc bool )error {if !_abdc {return _aafb .Sign (_edbg ,_eee );};_aeg ,_bac :=_aafb ._aaf .PublicKey .(*_ga .PublicKey );if !_bac {return _gc .Errorf ("i\u006e\u0076\u0061\u006c\u0069\u0064 \u0070\u0075\u0062\u006c\u0069\u0063\u0020\u006b\u0065y\u0020\u0074\u0079p\u0065:\u0020\u0025\u0054",_aeg );
};_ebfe ,_efg :=_da .Marshal (make ([]byte ,_aeg .Size ()));if _efg !=nil {return _efg ;};_edbg .Contents =_ca .MakeHexString (string (_ebfe ));return nil ;};func (_cbb *etsiPAdES )getOCSPs (_cbfa []*_ag .Certificate ,_acg map[string ]*_ag .Certificate )([][]byte ,error ){_gede :=make ([][]byte ,0,len (_cbfa ));
for _ ,_aea :=range _cbfa {for _ ,_dfa :=range _aea .OCSPServer {if _cbb .CertClient .IsCA (_aea ){continue ;};_ffe ,_effc :=_acg [_aea .Issuer .CommonName ];if !_effc {_cb .Log .Debug ("\u0057\u0041\u0052\u004e:\u0020\u0053\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u004f\u0043\u0053\u0050\u0020\u0072\u0065\u0071\u0075\u0065\u0073\u0074\u003a\u0020\u0069\u0073\u0073\u0075e\u0072\u0020\u0063\u0065\u0072t\u0069\u0066\u0069\u0063\u0061\u0074\u0065\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064");
continue ;};_ ,_dbad ,_afb :=_cbb .OCSPClient .MakeRequest (_dfa ,_aea ,_ffe );if _afb !=nil {_cb .Log .Debug ("\u0057\u0041\u0052\u004e:\u0020\u004f\u0043\u0053\u0050\u0020\u0072\u0065\u0071\u0075e\u0073t\u0020\u0065\u0072\u0072\u006f\u0072\u003a \u0025\u0076",_afb );
continue ;};_gede =append (_gede ,_dbad );};};return _gede ,nil ;};

// Validate validates PdfSignature.
func (_ddg *adobeX509RSASHA1 )Validate (sig *_df .PdfSignature ,digest _df .Hasher )(_df .SignatureValidationResult ,error ){_fgf ,_ega :=_ddg .getCertificate (sig );if _ega !=nil {return _df .SignatureValidationResult {},_ega ;};_ddd :=sig .Contents .Bytes ();
var _aac []byte ;if _ ,_gba :=_da .Unmarshal (_ddd ,&_aac );_gba !=nil {return _df .SignatureValidationResult {},_gba ;};_fbc ,_aed :=digest .(_d .Hash );if !_aed {return _df .SignatureValidationResult {},_e .New ("\u0068a\u0073h\u0020\u0074\u0079\u0070\u0065\u0020\u0065\u0072\u0072\u006f\u0072");
};_baf ,_ :=_ddg .getHashAlgorithm (sig );if _baf ==0{_baf =_fegb ;};if _cff :=_ga .VerifyPKCS1v15 (_fgf .PublicKey .(*_ga .PublicKey ),_baf ,_fbc .Sum (nil ),_aac );_cff !=nil {return _df .SignatureValidationResult {},_cff ;};return _df .SignatureValidationResult {IsSigned :true ,IsVerified :true },nil ;
};func (_fcfb *docTimeStamp )getCertificate (_aff *_df .PdfSignature )(*_ag .Certificate ,error ){_cde ,_eeeg :=_aff .GetCerts ();if _eeeg !=nil {return nil ,_eeeg ;};return _cde [0],nil ;};

// ValidateWithOpts validates a PDF signature by checking PdfReader or PdfParser by the DiffPolicy
// params describes parameters for the DocMDP checks.
func (_cbf *DocMDPHandler )ValidateWithOpts (sig *_df .PdfSignature ,digest _df .Hasher ,params _df .SignatureHandlerDocMDPParams )(_df .SignatureValidationResult ,error ){_bb ,_bf :=_cbf ._bg .Validate (sig ,digest );if _bf !=nil {return _bb ,_bf ;};_ea :=params .Parser ;
if _ea ==nil {return _df .SignatureValidationResult {},_e .New ("p\u0061r\u0073\u0065\u0072\u0020\u0063\u0061\u006e\u0027t\u0020\u0062\u0065\u0020nu\u006c\u006c");};if !_bb .IsVerified {return _bb ,nil ;};_bgb :=params .DiffPolicy ;if _bgb ==nil {_bgb =_fa .NewDefaultDiffPolicy ();
};for _fab :=0;_fab <=_ea .GetRevisionNumber ();_fab ++{_ba ,_daa :=_ea .GetRevision (_fab );if _daa !=nil {return _df .SignatureValidationResult {},_daa ;};_ac :=_ba .GetTrailer ();if _ac ==nil {return _df .SignatureValidationResult {},_e .New ("\u0075\u006e\u0064\u0065f\u0069\u006e\u0065\u0064\u0020\u0074\u0068\u0065\u0020\u0074r\u0061i\u006c\u0065\u0072\u0020\u006f\u0062\u006ae\u0063\u0074");
};_cf ,_be :=_ca .GetDict (_ac .Get ("\u0052\u006f\u006f\u0074"));if !_be {return _df .SignatureValidationResult {},_e .New ("\u0075n\u0064\u0065\u0066\u0069n\u0065\u0064\u0020\u0074\u0068e\u0020r\u006fo\u0074\u0020\u006f\u0062\u006a\u0065\u0063t");};_bbf ,_be :=_ca .GetDict (_cf .Get ("\u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d"));
if !_be {continue ;};_aca ,_be :=_ca .GetArray (_bbf .Get ("\u0046\u0069\u0065\u006c\u0064\u0073"));if !_be {continue ;};for _ ,_cce :=range _aca .Elements (){_add ,_bbb :=_ca .GetDict (_cce );if !_bbb {continue ;};_ccg ,_bbb :=_ca .GetDict (_add .Get ("\u0056"));
if !_bbb {continue ;};if _ca .EqualObjects (_ccg .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"),sig .Contents ){_bb .DiffResults ,_daa =_bgb .ReviewFile (_ba ,_ea ,&_fa .MDPParameters {DocMDPLevel :_cbf .Permission });if _daa !=nil {return _df .SignatureValidationResult {},_daa ;
};_bb .IsVerified =_bb .DiffResults .IsPermitted ();return _bb ,nil ;};};};return _df .SignatureValidationResult {},_e .New ("\u0064\u006f\u006e\u0027\u0074\u0020\u0066o\u0075\u006e\u0064 \u0074\u0068\u0069\u0073 \u0073\u0069\u0067\u006e\u0061\u0074\u0075\u0072\u0065\u0020\u0069\u006e\u0020\u0074\u0068\u0065\u0020\u0072\u0065\u0076\u0069\u0073\u0069\u006f\u006e\u0073");
};type timestampInfo struct{Version int ;Policy _da .RawValue ;MessageImprint struct{HashAlgorithm _ee .AlgorithmIdentifier ;HashedMessage []byte ;};SerialNumber _da .RawValue ;GeneralizedTime _g .Time ;};

// DocTimeStampOpts defines options for configuring the timestamp handler.
type DocTimeStampOpts struct{

// SignatureSize is the estimated size of the signature contents in bytes.
// If not provided, a default signature size of 4192 is used.
// The signing process will report the model.ErrSignNotEnoughSpace error
// if the estimated signature size is smaller than the actual size of the
// signature.
SignatureSize int ;

// Client is the timestamp client used to make the signature request.
// If no client is provided, a default one is used.
Client *_bc .TimestampClient ;};

// NewDigest creates a new digest.
func (_gdf *adobeX509RSASHA1 )NewDigest (sig *_df .PdfSignature )(_df .Hasher ,error ){if _bgc ,_cbd :=_gdf .getHashAlgorithm (sig );_bgc !=0&&_cbd ==nil {return _bgc .New (),nil ;};return _fegb .New (),nil ;};func _dgea (_eeaa []byte ,_gea int )(_cfe []byte ){_ecbg :=len (_eeaa );
if _ecbg > _gea {_ecbg =_gea ;};_cfe =make ([]byte ,_gea );copy (_cfe [len (_cfe )-_ecbg :],_eeaa );return ;};

// InitSignature initialises the PdfSignature.
func (_fda *etsiPAdES )InitSignature (sig *_df .PdfSignature )error {if !_fda ._bbdc {if _fda ._ff ==nil {return _e .New ("c\u0065\u0072\u0074\u0069\u0066\u0069c\u0061\u0074\u0065\u0020\u006d\u0075\u0073\u0074\u0020n\u006f\u0074\u0020b\u0065 \u006e\u0069\u006c");
};if _fda ._bbd ==nil {return _e .New ("\u0070\u0072\u0069\u0076\u0061\u0074\u0065\u004b\u0065\u0079\u0020m\u0075\u0073\u0074\u0020\u006e\u006f\u0074\u0020\u0062\u0065 \u006e\u0069\u006c");};};_ed :=*_fda ;sig .Handler =&_ed ;sig .Filter =_ca .MakeName ("\u0041\u0064\u006f\u0062\u0065\u002e\u0050\u0050\u004b\u004c\u0069\u0074\u0065");
sig .SubFilter =_ca .MakeName ("\u0045\u0054\u0053\u0049.C\u0041\u0064\u0045\u0053\u002e\u0064\u0065\u0074\u0061\u0063\u0068\u0065\u0064");sig .Reference =nil ;_faf ,_dc :=_ed .NewDigest (sig );if _dc !=nil {return _dc ;};_ ,_dc =_faf .Write ([]byte ("\u0063\u0061\u006c\u0063\u0075\u006ca\u0074\u0065\u0020\u0074\u0068\u0065\u0020\u0043\u006f\u006e\u0074\u0065\u006et\u0073\u0020\u0066\u0069\u0065\u006c\u0064 \u0073\u0069\u007a\u0065"));
if _dc !=nil {return _dc ;};_ed ._aa =true ;_dc =_ed .Sign (sig ,_faf );_ed ._aa =false ;return _dc ;};

// NewDigest creates a new digest.
func (_cba *etsiPAdES )NewDigest (_ *_df .PdfSignature )(_df .Hasher ,error ){return _cc .NewBuffer (nil ),nil ;};

// NewAdobeX509RSASHA1CustomWithOpts creates a new Adobe.PPKMS/Adobe.PPKLite
// adbe.x509.rsa_sha1 signature handler with a custom signing function. The
// handler is configured based on the provided options. If no options are
// provided, default options will be used. Both the certificate and the sign
// function can be nil for the signature validation.
func NewAdobeX509RSASHA1CustomWithOpts (certificate *_ag .Certificate ,signFunc SignFunc ,opts *AdobeX509RSASHA1Opts )(_df .SignatureHandler ,error ){if opts ==nil {opts =&AdobeX509RSASHA1Opts {};};return &adobeX509RSASHA1 {_aaf :certificate ,_eea :signFunc ,_afd :opts .EstimateSize ,_adbe :opts .Algorithm },nil ;
};

// Validate validates PdfSignature.
func (_gcf *docTimeStamp )Validate (sig *_df .PdfSignature ,digest _df .Hasher )(_df .SignatureValidationResult ,error ){_ccb :=sig .Contents .Bytes ();_ccaf ,_eafd :=_f .Parse (_ccb );if _eafd !=nil {return _df .SignatureValidationResult {},_eafd ;};if _eafd =_ccaf .Verify ();
_eafd !=nil {return _df .SignatureValidationResult {},_eafd ;};var _dad timestampInfo ;_ ,_eafd =_da .Unmarshal (_ccaf .Content ,&_dad );if _eafd !=nil {return _df .SignatureValidationResult {},_eafd ;};_ccgd ,_eafd :=_fbbd (_dad .MessageImprint .HashAlgorithm .Algorithm );
if _eafd !=nil {return _df .SignatureValidationResult {},_eafd ;};_bdbf :=_ccgd .New ();_efc ,_cabd :=digest .(*_cc .Buffer );if !_cabd {return _df .SignatureValidationResult {},_gc .Errorf ("c\u0061s\u0074\u0020\u0074\u006f\u0020\u0062\u0075\u0066f\u0065\u0072\u0020\u0066ai\u006c\u0073");
};_bdbf .Write (_efc .Bytes ());_afbd :=_bdbf .Sum (nil );_ddf :=_df .SignatureValidationResult {IsSigned :true ,IsVerified :_cc .Equal (_afbd ,_dad .MessageImprint .HashedMessage ),GeneralizedTime :_dad .GeneralizedTime };return _ddf ,nil ;};

// NewAdobeX509RSASHA1 creates a new Adobe.PPKMS/Adobe.PPKLite
// adbe.x509.rsa_sha1 signature handler. Both the private key and the
// certificate can be nil for the signature validation.
func NewAdobeX509RSASHA1 (privateKey *_ga .PrivateKey ,certificate *_ag .Certificate )(_df .SignatureHandler ,error ){return &adobeX509RSASHA1 {_aaf :certificate ,_efe :privateKey },nil ;};func (_gfce *adobeX509RSASHA1 )getHashAlgorithm (_ebeb *_df .PdfSignature )(_bd .Hash ,error ){_gaec ,_cdc :=_gfce .getCertificate (_ebeb );
if _cdc !=nil {if _gfce ._adbe !=0{return _gfce ._adbe ,nil ;};return _fegb ,_cdc ;};if _ebeb .Contents !=nil {_eadb :=_ebeb .Contents .Bytes ();var _efd []byte ;if _ ,_gdc :=_da .Unmarshal (_eadb ,&_efd );_gdc ==nil {_gcge :=_cbag (_gaec .PublicKey .(*_ga .PublicKey ),_efd );
if _gcge > 0{return _gcge ,nil ;};};};if _gfce ._adbe !=0{return _gfce ._adbe ,nil ;};return _fegb ,nil ;};

// InitSignature initialises the PdfSignature.
func (_gae *adobePKCS7Detached )InitSignature (sig *_df .PdfSignature )error {if !_gae ._gcg {if _gae ._fgeb ==nil {return _e .New ("c\u0065\u0072\u0074\u0069\u0066\u0069c\u0061\u0074\u0065\u0020\u006d\u0075\u0073\u0074\u0020n\u006f\u0074\u0020b\u0065 \u006e\u0069\u006c");
};if _gae ._cgc ==nil {return _e .New ("\u0070\u0072\u0069\u0076\u0061\u0074\u0065\u004b\u0065\u0079\u0020m\u0075\u0073\u0074\u0020\u006e\u006f\u0074\u0020\u0062\u0065 \u006e\u0069\u006c");};};_aga :=*_gae ;sig .Handler =&_aga ;sig .Filter =_ca .MakeName ("\u0041\u0064\u006f\u0062\u0065\u002e\u0050\u0050\u004b\u004c\u0069\u0074\u0065");
sig .SubFilter =_ca .MakeName ("\u0061\u0064\u0062\u0065.p\u006b\u0063\u0073\u0037\u002e\u0064\u0065\u0074\u0061\u0063\u0068\u0065\u0064");sig .Reference =nil ;_ebf ,_edg :=_aga .NewDigest (sig );if _edg !=nil {return _edg ;};_ebf .Write ([]byte ("\u0063\u0061\u006c\u0063\u0075\u006ca\u0074\u0065\u0020\u0074\u0068\u0065\u0020\u0043\u006f\u006e\u0074\u0065\u006et\u0073\u0020\u0066\u0069\u0065\u006c\u0064 \u0073\u0069\u007a\u0065"));
return _aga .Sign (sig ,_ebf );};

// NewDigest creates a new digest.
func (_gad *docTimeStamp )NewDigest (sig *_df .PdfSignature )(_df .Hasher ,error ){return _cc .NewBuffer (nil ),nil ;};func _fbbd (_bgcc _da .ObjectIdentifier )(_bd .Hash ,error ){switch {case _bgcc .Equal (_f .OIDDigestAlgorithmSHA1 ),_bgcc .Equal (_f .OIDDigestAlgorithmECDSASHA1 ),_bgcc .Equal (_f .OIDDigestAlgorithmDSA ),_bgcc .Equal (_f .OIDDigestAlgorithmDSASHA1 ),_bgcc .Equal (_f .OIDEncryptionAlgorithmRSA ):return _bd .SHA1 ,nil ;
case _bgcc .Equal (_f .OIDDigestAlgorithmSHA256 ),_bgcc .Equal (_f .OIDDigestAlgorithmECDSASHA256 ):return _bd .SHA256 ,nil ;case _bgcc .Equal (_f .OIDDigestAlgorithmSHA384 ),_bgcc .Equal (_f .OIDDigestAlgorithmECDSASHA384 ):return _bd .SHA384 ,nil ;case _bgcc .Equal (_f .OIDDigestAlgorithmSHA512 ),_bgcc .Equal (_f .OIDDigestAlgorithmECDSASHA512 ):return _bd .SHA512 ,nil ;
};return _bd .Hash (0),_f .ErrUnsupportedAlgorithm ;};type etsiPAdES struct{_bbd *_ga .PrivateKey ;_ff *_ag .Certificate ;_bbdc bool ;_aa bool ;_ccf *_ag .Certificate ;_fd string ;

// CertClient is the client used to retrieve certificates.
CertClient *_bc .CertClient ;

// OCSPClient is the client used to retrieve OCSP validation information.
OCSPClient *_bc .OCSPClient ;

// CRLClient is the client used to retrieve CRL validation information.
CRLClient *_bc .CRLClient ;_dab *_df .PdfAppender ;_fff *_df .DSS ;};

// NewDocMDPHandler returns the new DocMDP handler with the specific DocMDP restriction level.
func NewDocMDPHandler (handler _df .SignatureHandler ,permission _fa .DocMDPPermission )(_df .SignatureHandler ,error ){return &DocMDPHandler {_bg :handler ,Permission :permission },nil ;};

// NewAdobeX509RSASHA1Custom creates a new Adobe.PPKMS/Adobe.PPKLite
// adbe.x509.rsa_sha1 signature handler with a custom signing function. Both the
// certificate and the sign function can be nil for the signature validation.
// NOTE: the handler will do a mock Sign when initializing the signature in
// order to estimate the signature size. Use NewAdobeX509RSASHA1CustomWithOpts
// for configuring the handler to estimate the signature size.
func NewAdobeX509RSASHA1Custom (certificate *_ag .Certificate ,signFunc SignFunc )(_df .SignatureHandler ,error ){return &adobeX509RSASHA1 {_aaf :certificate ,_eea :signFunc },nil ;};type adobePKCS7Detached struct{_cgc *_ga .PrivateKey ;_fgeb *_ag .Certificate ;
_gcg bool ;_dega int ;};

// Validate validates PdfSignature.
func (_eed *adobePKCS7Detached )Validate (sig *_df .PdfSignature ,digest _df .Hasher )(_df .SignatureValidationResult ,error ){_gac :=sig .Contents .Bytes ();_eaae ,_acaf :=_f .Parse (_gac );if _acaf !=nil {return _df .SignatureValidationResult {},_acaf ;
};_bad ,_fef :=digest .(*_cc .Buffer );if !_fef {return _df .SignatureValidationResult {},_gc .Errorf ("c\u0061s\u0074\u0020\u0074\u006f\u0020\u0062\u0075\u0066f\u0065\u0072\u0020\u0066ai\u006c\u0073");};_eaae .Content =_bad .Bytes ();if _acaf =_eaae .Verify ();
_acaf !=nil {return _df .SignatureValidationResult {},_acaf ;};return _df .SignatureValidationResult {IsSigned :true ,IsVerified :true },nil ;};func _cbag (_eaf *_ga .PublicKey ,_fefb []byte )_bd .Hash {_ebb :=_eaf .Size ();if _ebb !=len (_fefb ){return 0;
};_caea :=func (_ebbc *_a .Int ,_fadf *_ga .PublicKey ,_fbaf *_a .Int )*_a .Int {_dff :=_a .NewInt (int64 (_fadf .E ));_ebbc .Exp (_fbaf ,_dff ,_fadf .N );return _ebbc ;};_cfgb :=new (_a .Int ).SetBytes (_fefb );_aeab :=_caea (new (_a .Int ),_eaf ,_cfgb );
_gbc :=_dgea (_aeab .Bytes (),_ebb );if _gbc [0]!=0||_gbc [1]!=1{return 0;};_ebg :=[]struct{Hash _bd .Hash ;Prefix []byte ;}{{Hash :_bd .SHA1 ,Prefix :[]byte {0x30,0x21,0x30,0x09,0x06,0x05,0x2b,0x0e,0x03,0x02,0x1a,0x05,0x00,0x04,0x14}},{Hash :_bd .SHA256 ,Prefix :[]byte {0x30,0x31,0x30,0x0d,0x06,0x09,0x60,0x86,0x48,0x01,0x65,0x03,0x04,0x02,0x01,0x05,0x00,0x04,0x20}},{Hash :_bd .SHA384 ,Prefix :[]byte {0x30,0x41,0x30,0x0d,0x06,0x09,0x60,0x86,0x48,0x01,0x65,0x03,0x04,0x02,0x02,0x05,0x00,0x04,0x30}},{Hash :_bd .SHA512 ,Prefix :[]byte {0x30,0x51,0x30,0x0d,0x06,0x09,0x60,0x86,0x48,0x01,0x65,0x03,0x04,0x02,0x03,0x05,0x00,0x04,0x40}},{Hash :_bd .RIPEMD160 ,Prefix :[]byte {0x30,0x20,0x30,0x08,0x06,0x06,0x28,0xcf,0x06,0x03,0x00,0x31,0x04,0x14}}};
for _ ,_bcg :=range _ebg {_bgda :=_bcg .Hash .Size ();_gfbb :=len (_bcg .Prefix )+_bgda ;if _cc .Equal (_gbc [_ebb -_gfbb :_ebb -_bgda ],_bcg .Prefix ){return _bcg .Hash ;};};return 0;};

// NewEtsiPAdESLevelB creates a new Adobe.PPKLite ETSI.CAdES.detached Level B signature handler.
func NewEtsiPAdESLevelB (privateKey *_ga .PrivateKey ,certificate *_ag .Certificate ,caCert *_ag .Certificate )(_df .SignatureHandler ,error ){return &etsiPAdES {_ff :certificate ,_bbd :privateKey ,_ccf :caCert },nil ;};func (_dg *etsiPAdES )buildCertChain (_ede ,_ece []*_ag .Certificate )([]*_ag .Certificate ,map[string ]*_ag .Certificate ,error ){_gf :=map[string ]*_ag .Certificate {};
for _ ,_ggg :=range _ede {_gf [_ggg .Subject .CommonName ]=_ggg ;};_efb :=_ede ;for _ ,_dbb :=range _ece {_gee :=_dbb .Subject .CommonName ;if _ ,_eaaa :=_gf [_gee ];_eaaa {continue ;};_gf [_gee ]=_dbb ;_efb =append (_efb ,_dbb );};if len (_efb )==0{return nil ,nil ,_df .ErrSignNoCertificates ;
};var _bggf error ;for _fcf :=_efb [0];_fcf !=nil &&!_dg .CertClient .IsCA (_fcf );{var _def *_ag .Certificate ;_ ,_fge :=_gf [_fcf .Issuer .CommonName ];if !_fge {if _def ,_bggf =_dg .CertClient .GetIssuer (_fcf );_bggf !=nil {_cb .Log .Debug ("W\u0041\u0052\u004e\u003a\u0020\u0043\u006f\u0075\u006cd\u0020\u006e\u006f\u0074\u0020\u0072\u0065tr\u0069\u0065\u0076\u0065 \u0063\u0065\u0072\u0074\u0069\u0066\u0069\u0063\u0061te\u0020\u0069s\u0073\u0075\u0065\u0072\u003a\u0020\u0025\u0076",_bggf );
break ;};_gf [_fcf .Issuer .CommonName ]=_def ;_efb =append (_efb ,_def );}else {break ;};_fcf =_def ;};return _efb ,_gf ,nil ;};

// IsApplicable returns true if the signature handler is applicable for the PdfSignature
func (_dgg *adobePKCS7Detached )IsApplicable (sig *_df .PdfSignature )bool {if sig ==nil ||sig .Filter ==nil ||sig .SubFilter ==nil {return false ;};return (*sig .Filter =="A\u0064\u006f\u0062\u0065\u002e\u0050\u0050\u004b\u004d\u0053"||*sig .Filter =="\u0041\u0064\u006f\u0062\u0065\u002e\u0050\u0050\u004b\u004c\u0069\u0074\u0065")&&*sig .SubFilter =="\u0061\u0064\u0062\u0065.p\u006b\u0063\u0073\u0037\u002e\u0064\u0065\u0074\u0061\u0063\u0068\u0065\u0064";
};

// Validate implementation of the SignatureHandler interface
// This check is impossible without checking the document's content.
// Please, use ValidateWithOpts with the PdfParser.
func (_dba *DocMDPHandler )Validate (sig *_df .PdfSignature ,digest _df .Hasher )(_df .SignatureValidationResult ,error ){return _df .SignatureValidationResult {},_e .New ("i\u006d\u0070\u006f\u0073\u0073\u0069b\u006c\u0065\u0020\u0076\u0061\u006ci\u0064\u0061\u0074\u0069\u006f\u006e\u0020w\u0069\u0074\u0068\u006f\u0075\u0074\u0020\u0070\u0061\u0072s\u0065");
};

// NewDocTimeStampWithOpts returns a new DocTimeStamp configured using the
// specified options. If no options are provided, default options will be used.
// Both the timestamp server URL and the hash algorithm can be empty for the
// signature validation.
// The following hash algorithms are supported:
// crypto.SHA1, crypto.SHA256, crypto.SHA384, crypto.SHA512.
func NewDocTimeStampWithOpts (timestampServerURL string ,hashAlgorithm _bd .Hash ,opts *DocTimeStampOpts )(_df .SignatureHandler ,error ){if opts ==nil {opts =&DocTimeStampOpts {};};if opts .SignatureSize <=0{opts .SignatureSize =4192;};return &docTimeStamp {_cfcg :timestampServerURL ,_cbfc :hashAlgorithm ,_eabd :opts .SignatureSize ,_daef :opts .Client },nil ;
};

// IsApplicable returns true if the signature handler is applicable for the PdfSignature.
func (_cefd *adobeX509RSASHA1 )IsApplicable (sig *_df .PdfSignature )bool {if sig ==nil ||sig .Filter ==nil ||sig .SubFilter ==nil {return false ;};return (*sig .Filter =="A\u0064\u006f\u0062\u0065\u002e\u0050\u0050\u004b\u004d\u0053"||*sig .Filter =="\u0041\u0064\u006f\u0062\u0065\u002e\u0050\u0050\u004b\u004c\u0069\u0074\u0065")&&*sig .SubFilter =="\u0061d\u0062e\u002e\u0078\u0035\u0030\u0039.\u0072\u0073a\u005f\u0073\u0068\u0061\u0031";
};

// InitSignature initialization of the DocMDP signature.
func (_gab *DocMDPHandler )InitSignature (sig *_df .PdfSignature )error {_db :=_gab ._bg .InitSignature (sig );if _db !=nil {return _db ;};sig .Handler =_gab ;if sig .Reference ==nil {sig .Reference =_ca .MakeArray ();};sig .Reference .Append (_df .NewPdfSignatureReferenceDocMDP (_df .NewPdfTransformParamsDocMDP (_gab .Permission )).ToPdfObject ());
return nil ;};

// InitSignature initialises the PdfSignature.
func (_ebfef *docTimeStamp )InitSignature (sig *_df .PdfSignature )error {_adbd :=*_ebfef ;sig .Type =_ca .MakeName ("\u0044\u006f\u0063T\u0069\u006d\u0065\u0053\u0074\u0061\u006d\u0070");sig .Handler =&_adbd ;sig .Filter =_ca .MakeName ("\u0041\u0064\u006f\u0062\u0065\u002e\u0050\u0050\u004b\u004c\u0069\u0074\u0065");
sig .SubFilter =_ca .MakeName ("\u0045\u0054\u0053I\u002e\u0052\u0046\u0043\u0033\u0031\u0036\u0031");sig .Reference =nil ;if _ebfef ._eabd > 0{sig .Contents =_ca .MakeHexString (string (make ([]byte ,_ebfef ._eabd )));}else {_gafg ,_ecf :=_ebfef .NewDigest (sig );
if _ecf !=nil {return _ecf ;};_gafg .Write ([]byte ("\u0063\u0061\u006c\u0063\u0075\u006ca\u0074\u0065\u0020\u0074\u0068\u0065\u0020\u0043\u006f\u006e\u0074\u0065\u006et\u0073\u0020\u0066\u0069\u0065\u006c\u0064 \u0073\u0069\u007a\u0065"));if _ecf =_adbd .Sign (sig ,_gafg );
_ecf !=nil {return _ecf ;};_ebfef ._eabd =_adbd ._eabd ;};return nil ;};

// NewDigest creates a new digest.
func (_edc *adobePKCS7Detached )NewDigest (sig *_df .PdfSignature )(_df .Hasher ,error ){return _cc .NewBuffer (nil ),nil ;};

// SignFunc represents a custom signing function. The function should return
// the computed signature.
type SignFunc func (_ccdg *_df .PdfSignature ,_bbg _df .Hasher )([]byte ,error );

// NewEtsiPAdESLevelLT creates a new Adobe.PPKLite ETSI.CAdES.detached Level LT signature handler.
func NewEtsiPAdESLevelLT (privateKey *_ga .PrivateKey ,certificate *_ag .Certificate ,caCert *_ag .Certificate ,certificateTimestampServerURL string ,appender *_df .PdfAppender )(_df .SignatureHandler ,error ){_cd :=appender .Reader .DSS ;if _cd ==nil {_cd =_df .NewDSS ();
};if _cg :=_cd .GenerateHashMaps ();_cg !=nil {return nil ,_cg ;};return &etsiPAdES {_ff :certificate ,_bbd :privateKey ,_ccf :caCert ,_fd :certificateTimestampServerURL ,CertClient :_bc .NewCertClient (),OCSPClient :_bc .NewOCSPClient (),CRLClient :_bc .NewCRLClient (),_dab :appender ,_fff :_cd },nil ;
};

// NewEmptyAdobePKCS7Detached creates a new Adobe.PPKMS/Adobe.PPKLite adbe.pkcs7.detached
// signature handler. The generated signature is empty and of size signatureLen.
// The signatureLen parameter can be 0 for the signature validation.
func NewEmptyAdobePKCS7Detached (signatureLen int )(_df .SignatureHandler ,error ){return &adobePKCS7Detached {_gcg :true ,_dega :signatureLen },nil ;};const _fegb =_bd .SHA1 ;type docTimeStamp struct{_cfcg string ;_cbfc _bd .Hash ;_eabd int ;_daef *_bc .TimestampClient ;
};

// NewDocTimeStamp creates a new DocTimeStamp signature handler.
// Both the timestamp server URL and the hash algorithm can be empty for the
// signature validation.
// The following hash algorithms are supported:
// crypto.SHA1, crypto.SHA256, crypto.SHA384, crypto.SHA512.
// NOTE: the handler will do a mock Sign when initializing the signature
// in order to estimate the signature size. Use NewDocTimeStampWithOpts
// for providing the signature size.
func NewDocTimeStamp (timestampServerURL string ,hashAlgorithm _bd .Hash )(_df .SignatureHandler ,error ){return &docTimeStamp {_cfcg :timestampServerURL ,_cbfc :hashAlgorithm },nil ;};

// IsApplicable returns true if the signature handler is applicable for the PdfSignature.
func (_ce *DocMDPHandler )IsApplicable (sig *_df .PdfSignature )bool {_bca :=false ;for _ ,_fg :=range sig .Reference .Elements (){if _ge ,_ecg :=_ca .GetDict (_fg );_ecg {if _ged ,_af :=_ca .GetNameVal (_ge .Get ("\u0054r\u0061n\u0073\u0066\u006f\u0072\u006d\u004d\u0065\u0074\u0068\u006f\u0064"));
_af {if _ged !="\u0044\u006f\u0063\u004d\u0044\u0050"{return false ;};if _ccd ,_ab :=_ca .GetDict (_ge .Get ("\u0054r\u0061n\u0073\u0066\u006f\u0072\u006d\u0050\u0061\u0072\u0061\u006d\u0073"));_ab {_ ,_ad :=_ca .GetNumberAsInt64 (_ccd .Get ("\u0050"));
if _ad !=nil {return false ;};_bca =true ;break ;};};};};return _bca &&_ce ._bg .IsApplicable (sig );};