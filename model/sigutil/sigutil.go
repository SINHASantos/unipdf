//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package sigutil ;import (_f "bytes";_fd "crypto";_fg "crypto/x509";_a "encoding/asn1";_b "encoding/pem";_fdc "errors";_ca "fmt";_ge "github.com/unidoc/timestamp";_dg "github.com/unidoc/unipdf/v3/common";_cf "golang.org/x/crypto/ocsp";_g "io";_da "net/http";
_c "time";);

// CertClient represents a X.509 certificate client. Its primary purpose
// is to download certificates.
type CertClient struct{

// HTTPClient is the HTTP client used to make certificate requests.
// By default, an HTTP client with a 5 second timeout per request is used.
HTTPClient *_da .Client ;};

// Get retrieves the certificate at the specified URL.
func (_gg *CertClient )Get (url string )(*_fg .Certificate ,error ){if _gg .HTTPClient ==nil {_gg .HTTPClient =_cg ();};_ac ,_dag :=_gg .HTTPClient .Get (url );if _dag !=nil {return nil ,_dag ;};defer _ac .Body .Close ();_gd ,_dag :=_g .ReadAll (_ac .Body );
if _dag !=nil {return nil ,_dag ;};if _bg ,_ :=_b .Decode (_gd );_bg !=nil {_gd =_bg .Bytes ;};_bc ,_dag :=_fg .ParseCertificate (_gd );if _dag !=nil {return nil ,_dag ;};return _bc ,nil ;};

// NewTimestampClient returns a new timestamp client.
func NewTimestampClient ()*TimestampClient {return &TimestampClient {HTTPClient :_cg ()}};

// GetEncodedToken executes the timestamp request and returns the DER encoded
// timestamp token bytes.
func (_ce *TimestampClient )GetEncodedToken (serverURL string ,req *_ge .Request )([]byte ,error ){if serverURL ==""{return nil ,_ca .Errorf ("\u006d\u0075\u0073\u0074\u0020\u0070r\u006f\u0076\u0069\u0064\u0065\u0020\u0074\u0069\u006d\u0065\u0073\u0074\u0061m\u0070\u0020\u0073\u0065\u0072\u0076\u0065r\u0020\u0055\u0052\u004c");
};if req ==nil {return nil ,_ca .Errorf ("\u0074\u0069\u006de\u0073\u0074\u0061\u006dp\u0020\u0072\u0065\u0071\u0075\u0065\u0073t\u0020\u0063\u0061\u006e\u006e\u006f\u0074\u0020\u0062\u0065\u0020\u006e\u0069\u006c");};_cc ,_fdce :=req .Marshal ();if _fdce !=nil {return nil ,_fdce ;
};_gbd ,_fdce :=_da .NewRequest ("\u0050\u004f\u0053\u0054",serverURL ,_f .NewBuffer (_cc ));if _fdce !=nil {return nil ,_fdce ;};_gbd .Header .Set ("\u0043\u006f\u006et\u0065\u006e\u0074\u002d\u0054\u0079\u0070\u0065","a\u0070\u0070\u006c\u0069\u0063\u0061t\u0069\u006f\u006e\u002f\u0074\u0069\u006d\u0065\u0073t\u0061\u006d\u0070-\u0071u\u0065\u0072\u0079");
if _ce .BeforeHTTPRequest !=nil {if _ec :=_ce .BeforeHTTPRequest (_gbd );_ec !=nil {return nil ,_ec ;};};_dgd :=_ce .HTTPClient ;if _dgd ==nil {_dgd =_cg ();};_gc ,_fdce :=_dgd .Do (_gbd );if _fdce !=nil {return nil ,_fdce ;};defer _gc .Body .Close ();
_bac ,_fdce :=_g .ReadAll (_gc .Body );if _fdce !=nil {return nil ,_fdce ;};if _gc .StatusCode !=_da .StatusOK {return nil ,_ca .Errorf ("\u0075\u006e\u0065x\u0070\u0065\u0063\u0074e\u0064\u0020\u0048\u0054\u0054\u0050\u0020s\u0074\u0061\u0074\u0075\u0073\u0020\u0063\u006f\u0064\u0065\u003a\u0020\u0025\u0064",_gc .StatusCode );
};var _bdc struct{Version _a .RawValue ;Content _a .RawValue ;};if _ ,_fdce =_a .Unmarshal (_bac ,&_bdc );_fdce !=nil {return nil ,_fdce ;};return _bdc .Content .FullBytes ,nil ;};

// CRLClient represents a CRL (Certificate revocation list) client.
// It is used to request revocation data from CRL servers.
type CRLClient struct{

// HTTPClient is the HTTP client used to make CRL requests.
// By default, an HTTP client with a 5 second timeout per request is used.
HTTPClient *_da .Client ;};

// NewCRLClient returns a new CRL client.
func NewCRLClient ()*CRLClient {return &CRLClient {HTTPClient :_cg ()}};

// GetIssuer retrieves the issuer of the provided certificate.
func (_ff *CertClient )GetIssuer (cert *_fg .Certificate )(*_fg .Certificate ,error ){for _ ,_ab :=range cert .IssuingCertificateURL {_dd ,_e :=_ff .Get (_ab );if _e !=nil {_dg .Log .Debug ("\u0057\u0041\u0052\u004e\u003a\u0020\u0063\u006f\u0075\u006c\u0064\u0020\u006e\u006f\u0074 \u0064\u006f\u0077\u006e\u006c\u006f\u0061\u0064\u0020\u0069\u0073\u0073\u0075e\u0072\u0020\u0066\u006f\u0072\u0020\u0063\u0065\u0072\u0074\u0069\u0066ic\u0061\u0074\u0065\u0020\u0025\u0076\u003a\u0020\u0025\u0076",cert .Subject .CommonName ,_e );
continue ;};return _dd ,nil ;};return nil ,_ca .Errorf ("\u0069\u0073\u0073\u0075e\u0072\u0020\u0063\u0065\u0072\u0074\u0069\u0066\u0069\u0063a\u0074e\u0020\u006e\u006f\u0074\u0020\u0066\u006fu\u006e\u0064");};

// NewOCSPClient returns a new OCSP client.
func NewOCSPClient ()*OCSPClient {return &OCSPClient {HTTPClient :_cg (),Hash :_fd .SHA1 }};func _cg ()*_da .Client {return &_da .Client {Timeout :5*_c .Second }};

// OCSPClient represents a OCSP (Online Certificate Status Protocol) client.
// It is used to request revocation data from OCSP servers.
type OCSPClient struct{

// HTTPClient is the HTTP client used to make OCSP requests.
// By default, an HTTP client with a 5 second timeout per request is used.
HTTPClient *_da .Client ;

// Hash is the hash function  used when constructing the OCSP
// requests. If zero, SHA-1 will be used.
Hash _fd .Hash ;};

// MakeRequest makes a CRL request to the specified server and returns the
// response. If a server URL is not provided, it is extracted from the certificate.
func (_dgg *CRLClient )MakeRequest (serverURL string ,cert *_fg .Certificate )([]byte ,error ){if _dgg .HTTPClient ==nil {_dgg .HTTPClient =_cg ();};if serverURL ==""{if len (cert .CRLDistributionPoints )==0{return nil ,_fdc .New ("\u0063e\u0072\u0074i\u0066\u0069\u0063\u0061t\u0065\u0020\u0064o\u0065\u0073\u0020\u006e\u006f\u0074\u0020\u0073\u0070ec\u0069\u0066\u0079 \u0061\u006ey\u0020\u0043\u0052\u004c\u0020\u0073e\u0072\u0076e\u0072\u0073");
};serverURL =cert .CRLDistributionPoints [0];};_bce ,_abb :=_dgg .HTTPClient .Get (serverURL );if _abb !=nil {return nil ,_abb ;};defer _bce .Body .Close ();_bd ,_abb :=_g .ReadAll (_bce .Body );if _abb !=nil {return nil ,_abb ;};if _bde ,_ :=_b .Decode (_bd );
_bde !=nil {_bd =_bde .Bytes ;};return _bd ,nil ;};

// NewTimestampRequest returns a new timestamp request based
// on the specified options.
func NewTimestampRequest (body _g .Reader ,opts *_ge .RequestOptions )(*_ge .Request ,error ){if opts ==nil {opts =&_ge .RequestOptions {};};if opts .Hash ==0{opts .Hash =_fd .SHA256 ;};if !opts .Hash .Available (){return nil ,_fg .ErrUnsupportedAlgorithm ;
};_fc :=opts .Hash .New ();if _ ,_ef :=_g .Copy (_fc ,body );_ef !=nil {return nil ,_ef ;};return &_ge .Request {HashAlgorithm :opts .Hash ,HashedMessage :_fc .Sum (nil ),Certificates :opts .Certificates ,TSAPolicyOID :opts .TSAPolicyOID ,Nonce :opts .Nonce },nil ;
};

// MakeRequest makes a OCSP request to the specified server and returns
// the parsed and raw responses. If a server URL is not provided, it is
// extracted from the certificate.
func (_dggc *OCSPClient )MakeRequest (serverURL string ,cert ,issuer *_fg .Certificate )(*_cf .Response ,[]byte ,error ){if _dggc .HTTPClient ==nil {_dggc .HTTPClient =_cg ();};if serverURL ==""{if len (cert .OCSPServer )==0{return nil ,nil ,_fdc .New ("\u0063e\u0072\u0074i\u0066\u0069\u0063a\u0074\u0065\u0020\u0064\u006f\u0065\u0073 \u006e\u006f\u0074\u0020\u0073\u0070e\u0063\u0069\u0066\u0079\u0020\u0061\u006e\u0079\u0020\u004f\u0043S\u0050\u0020\u0073\u0065\u0072\u0076\u0065\u0072\u0073");
};serverURL =cert .OCSPServer [0];};_gb ,_bga :=_cf .CreateRequest (cert ,issuer ,&_cf .RequestOptions {Hash :_dggc .Hash });if _bga !=nil {return nil ,nil ,_bga ;};_eg ,_bga :=_dggc .HTTPClient .Post (serverURL ,"\u0061p\u0070\u006c\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u006fc\u0073\u0070\u002d\u0072\u0065\u0071\u0075\u0065\u0073\u0074",_f .NewReader (_gb ));
if _bga !=nil {return nil ,nil ,_bga ;};defer _eg .Body .Close ();_cb ,_bga :=_g .ReadAll (_eg .Body );if _bga !=nil {return nil ,nil ,_bga ;};if _fad ,_ :=_b .Decode (_cb );_fad !=nil {_cb =_fad .Bytes ;};_ba ,_bga :=_cf .ParseResponseForCert (_cb ,cert ,issuer );
if _bga !=nil {return nil ,nil ,_bga ;};return _ba ,_cb ,nil ;};

// IsCA returns true if the provided certificate appears to be a CA certificate.
func (_df *CertClient )IsCA (cert *_fg .Certificate )bool {return cert .IsCA &&_f .Equal (cert .RawIssuer ,cert .RawSubject );};

// TimestampClient represents a RFC 3161 timestamp client.
// It is used to obtain signed tokens from timestamp authority servers.
type TimestampClient struct{

// HTTPClient is the HTTP client used to make timestamp requests.
// By default, an HTTP client with a 5 second timeout per request is used.
HTTPClient *_da .Client ;

// Callbacks.
BeforeHTTPRequest func (_bb *_da .Request )error ;};

// NewCertClient returns a new certificate client.
func NewCertClient ()*CertClient {return &CertClient {HTTPClient :_cg ()}};