//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package sigutil ;import (_b "bytes";_fg "crypto";_fgc "crypto/x509";_df "encoding/asn1";_da "encoding/pem";_a "errors";_g "fmt";_ce "github.com/unidoc/timestamp";_gf "github.com/unidoc/unipdf/v3/common";_e "golang.org/x/crypto/ocsp";_fc "io";_c "io/ioutil";
_bb "net/http";_d "time";);

// NewOCSPClient returns a new OCSP client.
func NewOCSPClient ()*OCSPClient {return &OCSPClient {HTTPClient :_afg (),Hash :_fg .SHA1 }};

// Get retrieves the certificate at the specified URL.
func (_ea *CertClient )Get (url string )(*_fgc .Certificate ,error ){if _ea .HTTPClient ==nil {_ea .HTTPClient =_afg ();};_fb ,_fcc :=_ea .HTTPClient .Get (url );if _fcc !=nil {return nil ,_fcc ;};defer _fb .Body .Close ();_bd ,_fcc :=_c .ReadAll (_fb .Body );
if _fcc !=nil {return nil ,_fcc ;};if _be ,_ :=_da .Decode (_bd );_be !=nil {_bd =_be .Bytes ;};_ff ,_fcc :=_fgc .ParseCertificate (_bd );if _fcc !=nil {return nil ,_fcc ;};return _ff ,nil ;};

// CertClient represents a X.509 certificate client. Its primary purpose
// is to download certificates.
type CertClient struct{

// HTTPClient is the HTTP client used to make certificate requests.
// By default, an HTTP client with a 5 second timeout per request is used.
HTTPClient *_bb .Client ;};

// TimestampClient represents a RFC 3161 timestamp client.
// It is used to obtain signed tokens from timestamp authority servers.
type TimestampClient struct{

// HTTPClient is the HTTP client used to make timestamp requests.
// By default, an HTTP client with a 5 second timeout per request is used.
HTTPClient *_bb .Client ;

// Callbacks.
BeforeHTTPRequest func (_dgd *_bb .Request )error ;};

// NewCertClient returns a new certificate client.
func NewCertClient ()*CertClient {return &CertClient {HTTPClient :_afg ()}};

// MakeRequest makes a OCSP request to the specified server and returns
// the parsed and raw responses. If a server URL is not provided, it is
// extracted from the certificate.
func (_eg *OCSPClient )MakeRequest (serverURL string ,cert ,issuer *_fgc .Certificate )(*_e .Response ,[]byte ,error ){if _eg .HTTPClient ==nil {_eg .HTTPClient =_afg ();};if serverURL ==""{if len (cert .OCSPServer )==0{return nil ,nil ,_a .New ("\u0063e\u0072\u0074i\u0066\u0069\u0063a\u0074\u0065\u0020\u0064\u006f\u0065\u0073 \u006e\u006f\u0074\u0020\u0073\u0070e\u0063\u0069\u0066\u0079\u0020\u0061\u006e\u0079\u0020\u004f\u0043S\u0050\u0020\u0073\u0065\u0072\u0076\u0065\u0072\u0073");
};serverURL =cert .OCSPServer [0];};_egc ,_af :=_e .CreateRequest (cert ,issuer ,&_e .RequestOptions {Hash :_eg .Hash });if _af !=nil {return nil ,nil ,_af ;};_db ,_af :=_eg .HTTPClient .Post (serverURL ,"\u0061p\u0070\u006c\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u006fc\u0073\u0070\u002d\u0072\u0065\u0071\u0075\u0065\u0073\u0074",_b .NewReader (_egc ));
if _af !=nil {return nil ,nil ,_af ;};defer _db .Body .Close ();_bc ,_af :=_c .ReadAll (_db .Body );if _af !=nil {return nil ,nil ,_af ;};if _ba ,_ :=_da .Decode (_bc );_ba !=nil {_bc =_ba .Bytes ;};_bg ,_af :=_e .ParseResponseForCert (_bc ,cert ,issuer );
if _af !=nil {return nil ,nil ,_af ;};return _bg ,_bc ,nil ;};

// GetEncodedToken executes the timestamp request and returns the DER encoded
// timestamp token bytes.
func (_ed *TimestampClient )GetEncodedToken (serverURL string ,req *_ce .Request )([]byte ,error ){if serverURL ==""{return nil ,_g .Errorf ("\u006d\u0075\u0073\u0074\u0020\u0070r\u006f\u0076\u0069\u0064\u0065\u0020\u0074\u0069\u006d\u0065\u0073\u0074\u0061m\u0070\u0020\u0073\u0065\u0072\u0076\u0065r\u0020\u0055\u0052\u004c");
};if req ==nil {return nil ,_g .Errorf ("\u0074\u0069\u006de\u0073\u0074\u0061\u006dp\u0020\u0072\u0065\u0071\u0075\u0065\u0073t\u0020\u0063\u0061\u006e\u006e\u006f\u0074\u0020\u0062\u0065\u0020\u006e\u0069\u006c");};_gb ,_edg :=req .Marshal ();if _edg !=nil {return nil ,_edg ;
};_bag ,_edg :=_bb .NewRequest ("\u0050\u004f\u0053\u0054",serverURL ,_b .NewBuffer (_gb ));if _edg !=nil {return nil ,_edg ;};_bag .Header .Set ("\u0043\u006f\u006et\u0065\u006e\u0074\u002d\u0054\u0079\u0070\u0065","a\u0070\u0070\u006c\u0069\u0063\u0061t\u0069\u006f\u006e\u002f\u0074\u0069\u006d\u0065\u0073t\u0061\u006d\u0070-\u0071u\u0065\u0072\u0079");
if _ed .BeforeHTTPRequest !=nil {if _cb :=_ed .BeforeHTTPRequest (_bag );_cb !=nil {return nil ,_cb ;};};_fd :=_ed .HTTPClient ;if _fd ==nil {_fd =_afg ();};_bfd ,_edg :=_fd .Do (_bag );if _edg !=nil {return nil ,_edg ;};defer _bfd .Body .Close ();_gc ,_edg :=_c .ReadAll (_bfd .Body );
if _edg !=nil {return nil ,_edg ;};if _bfd .StatusCode !=_bb .StatusOK {return nil ,_g .Errorf ("\u0075\u006e\u0065x\u0070\u0065\u0063\u0074e\u0064\u0020\u0048\u0054\u0054\u0050\u0020s\u0074\u0061\u0074\u0075\u0073\u0020\u0063\u006f\u0064\u0065\u003a\u0020\u0025\u0064",_bfd .StatusCode );
};var _cf struct{Version _df .RawValue ;Content _df .RawValue ;};if _ ,_edg =_df .Unmarshal (_gc ,&_cf );_edg !=nil {return nil ,_edg ;};return _cf .Content .FullBytes ,nil ;};

// NewTimestampClient returns a new timestamp client.
func NewTimestampClient ()*TimestampClient {return &TimestampClient {HTTPClient :_afg ()}};

// NewCRLClient returns a new CRL client.
func NewCRLClient ()*CRLClient {return &CRLClient {HTTPClient :_afg ()}};

// NewTimestampRequest returns a new timestamp request based
// on the specified options.
func NewTimestampRequest (body _fc .Reader ,opts *_ce .RequestOptions )(*_ce .Request ,error ){if opts ==nil {opts =&_ce .RequestOptions {};};if opts .Hash ==0{opts .Hash =_fg .SHA256 ;};if !opts .Hash .Available (){return nil ,_fgc .ErrUnsupportedAlgorithm ;
};_bf :=opts .Hash .New ();if _ ,_dgb :=_fc .Copy (_bf ,body );_dgb !=nil {return nil ,_dgb ;};return &_ce .Request {HashAlgorithm :opts .Hash ,HashedMessage :_bf .Sum (nil ),Certificates :opts .Certificates ,TSAPolicyOID :opts .TSAPolicyOID ,Nonce :opts .Nonce },nil ;
};func _afg ()*_bb .Client {return &_bb .Client {Timeout :5*_d .Second }};

// GetIssuer retrieves the issuer of the provided certificate.
func (_cee *CertClient )GetIssuer (cert *_fgc .Certificate )(*_fgc .Certificate ,error ){for _ ,_dg :=range cert .IssuingCertificateURL {_de ,_ffa :=_cee .Get (_dg );if _ffa !=nil {_gf .Log .Debug ("\u0057\u0041\u0052\u004e\u003a\u0020\u0063\u006f\u0075\u006c\u0064\u0020\u006e\u006f\u0074 \u0064\u006f\u0077\u006e\u006c\u006f\u0061\u0064\u0020\u0069\u0073\u0073\u0075e\u0072\u0020\u0066\u006f\u0072\u0020\u0063\u0065\u0072\u0074\u0069\u0066ic\u0061\u0074\u0065\u0020\u0025\u0076\u003a\u0020\u0025\u0076",cert .Subject .CommonName ,_ffa );
continue ;};return _de ,nil ;};return nil ,_g .Errorf ("\u0069\u0073\u0073\u0075e\u0072\u0020\u0063\u0065\u0072\u0074\u0069\u0066\u0069\u0063a\u0074e\u0020\u006e\u006f\u0074\u0020\u0066\u006fu\u006e\u0064");};

// OCSPClient represents a OCSP (Online Certificate Status Protocol) client.
// It is used to request revocation data from OCSP servers.
type OCSPClient struct{

// HTTPClient is the HTTP client used to make OCSP requests.
// By default, an HTTP client with a 5 second timeout per request is used.
HTTPClient *_bb .Client ;

// Hash is the hash function  used when constructing the OCSP
// requests. If zero, SHA-1 will be used.
Hash _fg .Hash ;};

// IsCA returns true if the provided certificate appears to be a CA certificate.
func (_fe *CertClient )IsCA (cert *_fgc .Certificate )bool {return cert .IsCA &&_b .Equal (cert .RawIssuer ,cert .RawSubject );};

// MakeRequest makes a CRL request to the specified server and returns the
// response. If a server URL is not provided, it is extracted from the certificate.
func (_beb *CRLClient )MakeRequest (serverURL string ,cert *_fgc .Certificate )([]byte ,error ){if _beb .HTTPClient ==nil {_beb .HTTPClient =_afg ();};if serverURL ==""{if len (cert .CRLDistributionPoints )==0{return nil ,_a .New ("\u0063e\u0072\u0074i\u0066\u0069\u0063\u0061t\u0065\u0020\u0064o\u0065\u0073\u0020\u006e\u006f\u0074\u0020\u0073\u0070ec\u0069\u0066\u0079 \u0061\u006ey\u0020\u0043\u0052\u004c\u0020\u0073e\u0072\u0076e\u0072\u0073");
};serverURL =cert .CRLDistributionPoints [0];};_caa ,_ab :=_beb .HTTPClient .Get (serverURL );if _ab !=nil {return nil ,_ab ;};defer _caa .Body .Close ();_ef ,_ab :=_c .ReadAll (_caa .Body );if _ab !=nil {return nil ,_ab ;};if _fca ,_ :=_da .Decode (_ef );
_fca !=nil {_ef =_fca .Bytes ;};return _ef ,nil ;};

// CRLClient represents a CRL (Certificate revocation list) client.
// It is used to request revocation data from CRL servers.
type CRLClient struct{

// HTTPClient is the HTTP client used to make CRL requests.
// By default, an HTTP client with a 5 second timeout per request is used.
HTTPClient *_bb .Client ;};