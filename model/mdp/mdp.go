//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package mdp ;import (_ga "errors";_d "fmt";_dg "github.com/unidoc/unipdf/v3/core";);

// MDPParameters describes parameters for the MDP checks (now only DocMDP).
type MDPParameters struct{DocMDPLevel DocMDPPermission ;};

// DiffPolicy interface for comparing two revisions of the Pdf document.
type DiffPolicy interface{

// ReviewFile should check the revisions of the old and new parsers
// and evaluate the differences between the revisions.
// Each implementation of this interface must decide
// how to handle cases where there are multiple revisions between the old and new revisions.
ReviewFile (_cb *_dg .PdfParser ,_bga *_dg .PdfParser ,_ggd *MDPParameters )(*DiffResults ,error );};func NewDefaultDiffPolicy ()DiffPolicy {return &defaultDiffPolicy {_e :nil ,_a :&DiffResults {},_da :0};};func (_bde *defaultDiffPolicy )compareFields (_gc int ,_cef ,_gb []_dg .PdfObject )error {_db :=make (map[int64 ]*_dg .PdfObjectDictionary );
for _ ,_ad :=range _cef {_ge ,_gcg :=_dg .GetIndirect (_ad );if !_gcg {return _ga .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0066\u0069\u0065\u006cd\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_fd ,_gcg :=_dg .GetDict (_ge .PdfObject );
if !_gcg {return _ga .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_db [_ge .ObjectNumber ]=_fd ;};for _ ,_fae :=range _gb {_ega ,_dge :=_dg .GetIndirect (_fae );
if !_dge {return _ga .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0066\u0069\u0065\u006cd\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_cf ,_dge :=_dg .GetDict (_ega .PdfObject );if !_dge {return _ga .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0066\u0069\u0065\u006cd\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");
};T :=_cf .Get ("\u0054");if _ ,_cab :=_bde ._e [_ega .ObjectNumber ];_cab {switch _bde ._da {case NoRestrictions ,FillForms ,FillFormsAndAnnots :_bde ._a .addWarningWithDescription (_gc ,_d .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0063\u0068\u0061ng\u0065\u0064",T ));
default:_bde ._a .addErrorWithDescription (_gc ,_d .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0063\u0068\u0061ng\u0065\u0064",T ));};};if _ ,_ag :=_db [_ega .ObjectNumber ];!_ag {switch _bde ._da {case NoRestrictions ,FillForms ,FillFormsAndAnnots :_bde ._a .addWarningWithDescription (_gc ,_d .Sprintf ("\u0046i\u0065l\u0064\u0020\u0025\u0073\u0020w\u0061\u0073 \u0061\u0064\u0064\u0065\u0064",_cf .Get ("\u0054")));
default:_bde ._a .addErrorWithDescription (_gc ,_d .Sprintf ("\u0046i\u0065l\u0064\u0020\u0025\u0073\u0020w\u0061\u0073 \u0061\u0064\u0064\u0065\u0064",_cf .Get ("\u0054")));};}else {delete (_db ,_ega .ObjectNumber );if _ ,_bae :=_bde ._e [_ega .ObjectNumber ];
_bae {switch _bde ._da {case NoRestrictions ,FillForms ,FillFormsAndAnnots :_bde ._a .addWarningWithDescription (_gc ,_d .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0063\u0068\u0061ng\u0065\u0064",_cf .Get ("\u0054")));default:_bde ._a .addErrorWithDescription (_gc ,_d .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0063\u0068\u0061ng\u0065\u0064",_cf .Get ("\u0054")));
};};};if FT ,_bag :=_dg .GetNameVal (_cf .Get ("\u0046\u0054"));_bag {if FT =="\u0053\u0069\u0067"{if _ff ,_ec :=_dg .GetIndirect (_cf .Get ("\u0056"));_ec {if _ ,_ee :=_bde ._e [_ff .ObjectNumber ];_ee {switch _bde ._da {case NoRestrictions ,FillForms ,FillFormsAndAnnots :_bde ._a .addWarningWithDescription (_gc ,_d .Sprintf ("\u0053\u0069\u0067na\u0074\u0075\u0072\u0065\u0020\u0066\u006f\u0072\u0020%\u0073 \u0066i\u0065l\u0064\u0020\u0077\u0061\u0073\u0020\u0063\u0068\u0061\u006e\u0067\u0065\u0064",T ));
default:_bde ._a .addErrorWithDescription (_gc ,_d .Sprintf ("\u0053\u0069\u0067na\u0074\u0075\u0072\u0065\u0020\u0066\u006f\u0072\u0020%\u0073 \u0066i\u0065l\u0064\u0020\u0077\u0061\u0073\u0020\u0063\u0068\u0061\u006e\u0067\u0065\u0064",T ));};};};};};
};for _ ,_dbg :=range _db {switch _bde ._da {case NoRestrictions :_bde ._a .addWarningWithDescription (_gc ,_d .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0072\u0065\u006dov\u0065\u0064",_dbg .Get ("\u0054")));default:_bde ._a .addErrorWithDescription (_gc ,_d .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0072\u0065\u006dov\u0065\u0064",_dbg .Get ("\u0054")));
};};return nil ;};func _ccc (_bg _dg .PdfObject )([]_dg .PdfObject ,error ){_acg :=make ([]_dg .PdfObject ,0);if _bg !=nil {_egee :=_bg ;if _cdf ,_gbe :=_dg .GetIndirect (_bg );_gbe {_egee =_cdf .PdfObject ;};if _gbgc ,_egf :=_dg .GetArray (_egee );_egf {_acg =_gbgc .Elements ();
}else {return nil ,_ga .New ("\u0075n\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0061n\u006eo\u0074s\u0027\u0020\u006f\u0062\u006a\u0065\u0063t");};};return _acg ,nil ;};func (_aebf *DiffResults )addWarningWithDescription (_dae int ,_aba string ){if _aebf .Warnings ==nil {_aebf .Warnings =make ([]*DiffResult ,0);
};_aebf .Warnings =append (_aebf .Warnings ,&DiffResult {Revision :_dae ,Description :_aba });};

// String returns the state of the warning.
func (_ffb *DiffResult )String ()string {return _d .Sprintf ("\u0025\u0073\u0020\u0069n \u0072\u0065\u0076\u0069\u0073\u0069\u006f\u006e\u0073\u0020\u0023\u0025\u0064",_ffb .Description ,_ffb .Revision );};func (_aac *defaultDiffPolicy )comparePages (_dgdb int ,_efga ,_ged *_dg .PdfIndirectObject )error {if _ ,_gcgf :=_aac ._e [_ged .ObjectNumber ];
_gcgf {_aac ._a .addErrorWithDescription (_dgdb ,"\u0050a\u0067e\u0073\u0020\u0077\u0065\u0072e\u0020\u0063h\u0061\u006e\u0067\u0065\u0064");};_cg ,_ffe :=_dg .GetDict (_ged .PdfObject );_dc ,_fc :=_dg .GetDict (_efga .PdfObject );if !_ffe ||!_fc {return _ga .New ("\u0075n\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0050\u0061g\u0065\u0073\u0027\u0020\u006f\u0062\u006a\u0065\u0063\u0074");
};_de ,_ffe :=_dg .GetArray (_cg .Get ("\u004b\u0069\u0064\u0073"));_efc ,_fc :=_dg .GetArray (_dc .Get ("\u004b\u0069\u0064\u0073"));if !_ffe ||!_fc {return _ga .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0050\u0061\u0067\u0065s\u0027 \u0064\u0069\u0063\u0074\u0069\u006f\u006ea\u0072\u0079");
};_fdc :=_de .Len ();if _fdc > _efc .Len (){_fdc =_efc .Len ();};for _ab :=0;_ab < _fdc ;_ab ++{_fdb ,_daf :=_dg .GetIndirect (_dg .ResolveReference (_efc .Get (_ab )));_cfd ,_cec :=_dg .GetIndirect (_dg .ResolveReference (_de .Get (_ab )));if !_daf ||!_cec {return _ga .New ("\u0075\u006e\u0065\u0078pe\u0063\u0074\u0065\u0064\u0020\u0070\u0061\u0067\u0065\u0020\u006f\u0062\u006a\u0065c\u0074");
};if _fdb .ObjectNumber !=_cfd .ObjectNumber {_aac ._a .addErrorWithDescription (_dgdb ,_d .Sprintf ("p\u0061\u0067\u0065\u0020#%\u0064 \u0077\u0061\u0073\u0020\u0072e\u0070\u006c\u0061\u0063\u0065\u0064",_ab ));};_daa ,_daf :=_dg .GetDict (_cfd );_efa ,_cec :=_dg .GetDict (_fdb );
if !_daf ||!_cec {return _ga .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0070\u0061\u0067\u0065'\u0073 \u0064\u0069\u0063\u0074\u0069\u006f\u006ea\u0072\u0079");};_bbe ,_dgdg :=_ccc (_daa .Get ("\u0041\u006e\u006e\u006f\u0074\u0073"));
if _dgdg !=nil {return _dgdg ;};_gbg ,_dgdg :=_ccc (_efa .Get ("\u0041\u006e\u006e\u006f\u0074\u0073"));if _dgdg !=nil {return _dgdg ;};if _ddb :=_aac .compareAnnots (_dgdb ,_gbg ,_bbe );_ddb !=nil {return _ddb ;};};for _aae :=_fdc +1;_aae <=_de .Len ();
_aae ++{_aac ._a .addErrorWithDescription (_dgdb ,_d .Sprintf ("\u0070a\u0067e\u0020\u0023\u0025\u0064\u0020w\u0061\u0073 \u0061\u0064\u0064\u0065\u0064",_aae ));};for _gg :=_fdc +1;_gg <=_efc .Len ();_gg ++{_aac ._a .addErrorWithDescription (_dgdb ,_d .Sprintf ("p\u0061g\u0065\u0020\u0023\u0025\u0064\u0020\u0077\u0061s\u0020\u0072\u0065\u006dov\u0065\u0064",_gg ));
};return nil ;};

// DocMDPPermission is values for set up access permissions for DocMDP.
// (Section 12.8.2.2, Table 254 - Entries in a signature dictionary p. 471 in PDF32000_2008).
type DocMDPPermission int64 ;

// DiffResult describes the warning or the error for the DiffPolicy results.
type DiffResult struct{Revision int ;Description string ;};func (_cac *defaultDiffPolicy )compareRevisions (_f *_dg .PdfParser ,_cce *_dg .PdfParser )(*DiffResults ,error ){var _ae error ;_cac ._e ,_ae =_cce .GetUpdatedObjects (_f );if _ae !=nil {return &DiffResults {},_ae ;
};if len (_cac ._e )==0{return &DiffResults {},nil ;};_fa :=_cce .GetRevisionNumber ();_ce ,_bce :=_dg .GetIndirect (_dg .ResolveReference (_f .GetTrailer ().Get ("\u0052\u006f\u006f\u0074")));_dd ,_fg :=_dg .GetIndirect (_dg .ResolveReference (_cce .GetTrailer ().Get ("\u0052\u006f\u006f\u0074")));
if !_bce ||!_fg {return &DiffResults {},_ga .New ("\u0065\u0072\u0072o\u0072\u0020\u0077\u0068i\u006c\u0065\u0020\u0067\u0065\u0074\u0074i\u006e\u0067\u0020\u0072\u006f\u006f\u0074\u0020\u006f\u0062\u006a\u0065\u0063\u0074");};_aed ,_bce :=_dg .GetDict (_dg .ResolveReference (_ce .PdfObject ));
_aa ,_fg :=_dg .GetDict (_dg .ResolveReference (_dd .PdfObject ));if !_bce ||!_fg {return &DiffResults {},_ga .New ("\u0065\u0072\u0072\u006f\u0072\u0020\u0077\u0068\u0069\u006c\u0065\u0020\u0067e\u0074\u0074\u0069\u006e\u0067\u0020a\u0020\u0072\u006f\u006f\u0074\u0027\u0073\u0020\u0064\u0069\u0063\u0074\u0069o\u006e\u0061\u0072\u0079");
};if _df ,_eg :=_dg .GetIndirect (_aa .Get ("\u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d"));_eg {_gf ,_bb :=_dg .GetDict (_df );if !_bb {return &DiffResults {},_ga .New ("\u0065\u0072\u0072\u006f\u0072 \u0077\u0068\u0069\u006c\u0065\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067 \u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d\u0027\u0073\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079");
};_ba :=make ([]_dg .PdfObject ,0);if _fb ,_ea :=_dg .GetIndirect (_aed .Get ("\u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d"));_ea {if _dgd ,_egg :=_dg .GetDict (_fb );_egg {if _ccd ,_be :=_dg .GetArray (_dgd .Get ("\u0046\u0069\u0065\u006c\u0064\u0073"));
_be {_ba =_ccd .Elements ();};};};_aeb ,_bb :=_dg .GetArray (_gf .Get ("\u0046\u0069\u0065\u006c\u0064\u0073"));if !_bb {return &DiffResults {},_ga .New ("\u0065\u0072r\u006f\u0072\u0020\u0077h\u0069\u006ce\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067 \u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d\u0027\u0073\u0020\u0066i\u0065\u006c\u0064\u0073");
};if _bd :=_cac .compareFields (_fa ,_ba ,_aeb .Elements ());_bd !=nil {return &DiffResults {},_bd ;};};_eb ,_ef :=_dg .GetIndirect (_aa .Get ("\u0050\u0061\u0067e\u0073"));if !_ef {return &DiffResults {},_ga .New ("\u0065\u0072\u0072\u006f\u0072\u0020w\u0068\u0069\u006c\u0065\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020p\u0061\u0067\u0065\u0073\u0027\u0020\u006fb\u006a\u0065\u0063\u0074");
};_cd ,_ef :=_dg .GetIndirect (_aed .Get ("\u0050\u0061\u0067e\u0073"));if !_ef {return &DiffResults {},_ga .New ("\u0065\u0072\u0072\u006f\u0072\u0020w\u0068\u0069\u006c\u0065\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020p\u0061\u0067\u0065\u0073\u0027\u0020\u006fb\u006a\u0065\u0063\u0074");
};if _aag :=_cac .comparePages (_fa ,_cd ,_eb );_aag !=nil {return &DiffResults {},_aag ;};return _cac ._a ,nil ;};const (NoRestrictions DocMDPPermission =0;NoChanges DocMDPPermission =1;FillForms DocMDPPermission =2;FillFormsAndAnnots DocMDPPermission =3;
);type defaultDiffPolicy struct{_e map[int64 ]_dg .PdfObject ;_a *DiffResults ;_da DocMDPPermission ;};func (_cceg *DiffResults )addErrorWithDescription (_fe int ,_bee string ){if _cceg .Errors ==nil {_cceg .Errors =make ([]*DiffResult ,0);};_cceg .Errors =append (_cceg .Errors ,&DiffResult {Revision :_fe ,Description :_bee });
};func (_fgb *defaultDiffPolicy )compareAnnots (_gdg int ,_caca ,_dba []_dg .PdfObject )error {_gac :=make (map[int64 ]*_dg .PdfObjectDictionary );for _ ,_baed :=range _caca {_cgf ,_ege :=_dg .GetIndirect (_baed );if !_ege {return _ga .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");
};_ffd ,_ege :=_dg .GetDict (_cgf .PdfObject );if !_ege {return _ga .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_gac [_cgf .ObjectNumber ]=_ffd ;
};for _ ,_abb :=range _dba {_ecg ,_dda :=_dg .GetIndirect (_abb );if !_dda {return _ga .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_bbb ,_dda :=_dg .GetDict (_ecg .PdfObject );
if !_dda {return _ga .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_gce ,_ :=_dg .GetStringVal (_bbb .Get ("\u0054"));_gaf ,_ :=_dg .GetNameVal (_bbb .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));
if _ ,_gcf :=_gac [_ecg .ObjectNumber ];!_gcf {switch _fgb ._da {case NoRestrictions ,FillFormsAndAnnots :_fgb ._a .addWarningWithDescription (_gdg ,_d .Sprintf ("\u0025\u0073\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0020\u0025\u0073\u0020\u0077\u0061\u0073\u0020\u0061d\u0064\u0065\u0064",_gaf ,_gce ));
default:_efad ,_ffc :=_dg .GetDict (_ecg .PdfObject );if !_ffc {return _ga .New ("u\u006ed\u0065\u0066\u0069\u006e\u0065\u0064\u0020\u0061n\u006e\u006f\u0074\u0061ti\u006f\u006e");};_eec ,_ffc :=_dg .GetNameVal (_efad .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));
if !_ffc {return _ga .New ("\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064\u0020a\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0027\u0073\u0020\u0073\u0075\u0062\u0074\u0079\u0070\u0065");};if _eec =="\u0057\u0069\u0064\u0067\u0065\u0074"{switch _fgb ._da {case NoRestrictions ,FillFormsAndAnnots ,FillForms :_fgb ._a .addWarningWithDescription (_gdg ,_d .Sprintf ("\u0025\u0073\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0020\u0025\u0073\u0020\u0077\u0061\u0073\u0020\u0061d\u0064\u0065\u0064",_gaf ,_gce ));
default:_fgb ._a .addErrorWithDescription (_gdg ,_d .Sprintf ("\u0025\u0073\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0020\u0025\u0073\u0020\u0077\u0061\u0073\u0020\u0061d\u0064\u0065\u0064",_gaf ,_gce ));};}else {_fgb ._a .addErrorWithDescription (_gdg ,_d .Sprintf ("\u0025\u0073\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0020\u0025\u0073\u0020\u0077\u0061\u0073\u0020\u0061d\u0064\u0065\u0064",_gaf ,_gce ));
};};}else {delete (_gac ,_ecg .ObjectNumber );if _aedb ,_af :=_fgb ._e [_ecg .ObjectNumber ];_af {switch _fgb ._da {case NoRestrictions ,FillFormsAndAnnots :_fgb ._a .addWarningWithDescription (_gdg ,_d .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0063\u0068\u0061\u006eg\u0065\u0064",_gaf ,_gce ));
default:_eea ,_bcd :=_dg .GetIndirect (_aedb );if !_bcd {return _ga .New ("u\u006ed\u0065\u0066\u0069\u006e\u0065\u0064\u0020\u0061n\u006e\u006f\u0074\u0061ti\u006f\u006e");};_dde ,_bcd :=_dg .GetDict (_eea .PdfObject );if !_bcd {return _ga .New ("u\u006ed\u0065\u0066\u0069\u006e\u0065\u0064\u0020\u0061n\u006e\u006f\u0074\u0061ti\u006f\u006e");
};_ccg ,_bcd :=_dg .GetNameVal (_dde .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));if !_bcd {return _ga .New ("\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064\u0020a\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0027\u0073\u0020\u0073\u0075\u0062\u0074\u0079\u0070\u0065");
};if _ccg =="\u0057\u0069\u0064\u0067\u0065\u0074"{switch _fgb ._da {case NoRestrictions ,FillFormsAndAnnots ,FillForms :_fgb ._a .addWarningWithDescription (_gdg ,_d .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0063\u0068\u0061\u006eg\u0065\u0064",_gaf ,_gce ));
default:_fgb ._a .addErrorWithDescription (_gdg ,_d .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0063\u0068\u0061\u006eg\u0065\u0064",_gaf ,_gce ));};}else {_fgb ._a .addErrorWithDescription (_gdg ,_d .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0063\u0068\u0061\u006eg\u0065\u0064",_gaf ,_gce ));
};};};};};for _ ,_ace :=range _gac {_cfc ,_ :=_dg .GetStringVal (_ace .Get ("\u0054"));_abca ,_ :=_dg .GetNameVal (_ace .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));switch _fgb ._da {case NoRestrictions ,FillFormsAndAnnots :_fgb ._a .addWarningWithDescription (_gdg ,_d .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0072\u0065\u006d\u006fv\u0065\u0064",_abca ,_cfc ));
default:_fgb ._a .addErrorWithDescription (_gdg ,_d .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0072\u0065\u006d\u006fv\u0065\u0064",_abca ,_cfc ));};};return nil ;};

// IsPermitted returns true if changes permitted.
func (_abd *DiffResults )IsPermitted ()bool {return len (_abd .Errors )==0};func (_cgd *DiffResults )addWarning (_bdc *DiffResult ){if _cgd .Warnings ==nil {_cgd .Warnings =make ([]*DiffResult ,0);};_cgd .Warnings =append (_cgd .Warnings ,_bdc );};func (_dcb *DiffResults )addError (_gcc *DiffResult ){if _dcb .Errors ==nil {_dcb .Errors =make ([]*DiffResult ,0);
};_dcb .Errors =append (_dcb .Errors ,_gcc );};

// ReviewFile implementation of DiffPolicy interface
// The default policy only checks the next types of objects:
// Page, Pages (container for page objects), Annot, Annots (container for annotation objects), Field.
// It checks adding, removing and modifying objects of these types.
func (_c *defaultDiffPolicy )ReviewFile (oldParser *_dg .PdfParser ,newParser *_dg .PdfParser ,params *MDPParameters )(*DiffResults ,error ){if oldParser .GetRevisionNumber ()> newParser .GetRevisionNumber (){return nil ,_ga .New ("\u006f\u006c\u0064\u0020\u0072\u0065\u0076\u0069\u0073\u0069\u006f\u006e\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u006e\u0065\u0077\u0020r\u0065\u0076i\u0073\u0069\u006f\u006e");
};if oldParser .GetRevisionNumber ()==newParser .GetRevisionNumber (){if oldParser !=newParser {return nil ,_ga .New ("\u0073\u0061m\u0065\u0020\u0072\u0065v\u0069\u0073i\u006f\u006e\u0073\u002c\u0020\u0062\u0075\u0074 \u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006e\u0074\u0020\u0070\u0061r\u0073\u0065\u0072\u0073");
};return &DiffResults {},nil ;};if params ==nil {_c ._da =NoRestrictions ;}else {_c ._da =params .DocMDPLevel ;};_b :=&DiffResults {};for _bc :=oldParser .GetRevisionNumber ()+1;_bc <=newParser .GetRevisionNumber ();_bc ++{_cc ,_ac :=newParser .GetRevision (_bc -1);
if _ac !=nil {return nil ,_ac ;};_ca ,_ac :=newParser .GetRevision (_bc );if _ac !=nil {return nil ,_ac ;};_ed ,_ac :=_c .compareRevisions (_cc ,_ca );if _ac !=nil {return nil ,_ac ;};_b .Warnings =append (_b .Warnings ,_ed .Warnings ...);_b .Errors =append (_b .Errors ,_ed .Errors ...);
};return _b ,nil ;};

// DiffResults describes the results of the DiffPolicy.
type DiffResults struct{Warnings []*DiffResult ;Errors []*DiffResult ;};