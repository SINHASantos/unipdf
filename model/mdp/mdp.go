//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package mdp ;import (_b "errors";_c "fmt";_e "github.com/unidoc/unipdf/v3/core";);func (_ccc *DiffResults )addError (_gaag *DiffResult ){if _ccc .Errors ==nil {_ccc .Errors =make ([]*DiffResult ,0);};_ccc .Errors =append (_ccc .Errors ,_gaag );};func _cgfe (_cddd _e .PdfObject )([]_e .PdfObject ,error ){_fgc :=make ([]_e .PdfObject ,0);
if _cddd !=nil {_ggc :=_cddd ;if _bbd ,_deb :=_e .GetIndirect (_cddd );_deb {_ggc =_bbd .PdfObject ;};if _fgf ,_bcb :=_e .GetArray (_ggc );_bcb {_fgc =_fgf .Elements ();}else {return nil ,_b .New ("\u0075n\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0061n\u006eo\u0074s\u0027\u0020\u006f\u0062\u006a\u0065\u0063t");
};};return _fgc ,nil ;};func (_ad *defaultDiffPolicy )compareRevisions (_ec *_e .PdfParser ,_cb *_e .PdfParser )(*DiffResults ,error ){var _gb error ;_ad ._a ,_gb =_cb .GetUpdatedObjects (_ec );if _gb !=nil {return &DiffResults {},_gb ;};if len (_ad ._a )==0{return &DiffResults {},nil ;
};_fd :=_cb .GetRevisionNumber ();_gc ,_eb :=_e .GetIndirect (_e .ResolveReference (_ec .GetTrailer ().Get ("\u0052\u006f\u006f\u0074")));_ca ,_aaa :=_e .GetIndirect (_e .ResolveReference (_cb .GetTrailer ().Get ("\u0052\u006f\u006f\u0074")));if !_eb ||!_aaa {return &DiffResults {},_b .New ("\u0065\u0072\u0072o\u0072\u0020\u0077\u0068i\u006c\u0065\u0020\u0067\u0065\u0074\u0074i\u006e\u0067\u0020\u0072\u006f\u006f\u0074\u0020\u006f\u0062\u006a\u0065\u0063\u0074");
};_gg ,_eb :=_e .GetDict (_e .ResolveReference (_gc .PdfObject ));_bfb ,_aaa :=_e .GetDict (_e .ResolveReference (_ca .PdfObject ));if !_eb ||!_aaa {return &DiffResults {},_b .New ("\u0065\u0072\u0072\u006f\u0072\u0020\u0077\u0068\u0069\u006c\u0065\u0020\u0067e\u0074\u0074\u0069\u006e\u0067\u0020a\u0020\u0072\u006f\u006f\u0074\u0027\u0073\u0020\u0064\u0069\u0063\u0074\u0069o\u006e\u0061\u0072\u0079");
};if _gf ,_gd :=_e .GetIndirect (_bfb .Get ("\u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d"));_gd {_cca ,_d :=_e .GetDict (_gf );if !_d {return &DiffResults {},_b .New ("\u0065\u0072\u0072\u006f\u0072 \u0077\u0068\u0069\u006c\u0065\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067 \u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d\u0027\u0073\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079");
};_fe :=make ([]_e .PdfObject ,0);if _ea ,_gaa :=_e .GetIndirect (_gg .Get ("\u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d"));_gaa {if _dg ,_ebc :=_e .GetDict (_ea );_ebc {if _gde ,_dc :=_e .GetArray (_dg .Get ("\u0046\u0069\u0065\u006c\u0064\u0073"));
_dc {_fe =_gde .Elements ();};};};_df ,_d :=_e .GetArray (_cca .Get ("\u0046\u0069\u0065\u006c\u0064\u0073"));if !_d {return &DiffResults {},_b .New ("\u0065\u0072r\u006f\u0072\u0020\u0077h\u0069\u006ce\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067 \u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d\u0027\u0073\u0020\u0066i\u0065\u006c\u0064\u0073");
};if _ebd :=_ad .compareFields (_fd ,_fe ,_df .Elements ());_ebd !=nil {return &DiffResults {},_ebd ;};};_ecb ,_feg :=_e .GetIndirect (_bfb .Get ("\u0050\u0061\u0067e\u0073"));if !_feg {return &DiffResults {},_b .New ("\u0065\u0072\u0072\u006f\u0072\u0020w\u0068\u0069\u006c\u0065\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020p\u0061\u0067\u0065\u0073\u0027\u0020\u006fb\u006a\u0065\u0063\u0074");
};_eaf ,_feg :=_e .GetIndirect (_gg .Get ("\u0050\u0061\u0067e\u0073"));if !_feg {return &DiffResults {},_b .New ("\u0065\u0072\u0072\u006f\u0072\u0020w\u0068\u0069\u006c\u0065\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020p\u0061\u0067\u0065\u0073\u0027\u0020\u006fb\u006a\u0065\u0063\u0074");
};if _aae :=_ad .comparePages (_fd ,_eaf ,_ecb );_aae !=nil {return &DiffResults {},_aae ;};return _ad ._g ,nil ;};

// IsPermitted returns true if changes permitted.
func (_dfe *DiffResults )IsPermitted ()bool {return len (_dfe .Errors )==0};

// String returns the state of the warning.
func (_gea *DiffResult )String ()string {return _c .Sprintf ("\u0025\u0073\u0020\u0069n \u0072\u0065\u0076\u0069\u0073\u0069\u006f\u006e\u0073\u0020\u0023\u0025\u0064",_gea .Description ,_gea .Revision );};func (_cg *defaultDiffPolicy )compareFields (_db int ,_ccb ,_fg []_e .PdfObject )error {_ce :=make (map[int64 ]*_e .PdfObjectDictionary );
for _ ,_gag :=range _ccb {_aaef ,_af :=_e .GetIndirect (_gag );if !_af {return _b .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0066\u0069\u0065\u006cd\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_dfa ,_af :=_e .GetDict (_aaef .PdfObject );
if !_af {return _b .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_ce [_aaef .ObjectNumber ]=_dfa ;};for _ ,_cd :=range _fg {_bd ,_gfg :=_e .GetIndirect (_cd );
if !_gfg {return _b .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0066\u0069\u0065\u006cd\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_bfg ,_gfg :=_e .GetDict (_bd .PdfObject );if !_gfg {return _b .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0066\u0069\u0065\u006cd\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");
};T :=_bfg .Get ("\u0054");if _ ,_ecg :=_cg ._a [_bd .ObjectNumber ];_ecg {switch _cg ._cc {case NoRestrictions ,FillForms ,FillFormsAndAnnots :_cg ._g .addWarningWithDescription (_db ,_c .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0063\u0068\u0061ng\u0065\u0064",T ));
default:_cg ._g .addErrorWithDescription (_db ,_c .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0063\u0068\u0061ng\u0065\u0064",T ));};};if _ ,_ebce :=_ce [_bd .ObjectNumber ];!_ebce {switch _cg ._cc {case NoRestrictions ,FillForms ,FillFormsAndAnnots :_cg ._g .addWarningWithDescription (_db ,_c .Sprintf ("\u0046i\u0065l\u0064\u0020\u0025\u0073\u0020w\u0061\u0073 \u0061\u0064\u0064\u0065\u0064",_bfg .Get ("\u0054")));
default:_cg ._g .addErrorWithDescription (_db ,_c .Sprintf ("\u0046i\u0065l\u0064\u0020\u0025\u0073\u0020w\u0061\u0073 \u0061\u0064\u0064\u0065\u0064",_bfg .Get ("\u0054")));};}else {delete (_ce ,_bd .ObjectNumber );if _ ,_ccag :=_cg ._a [_bd .ObjectNumber ];
_ccag {switch _cg ._cc {case NoRestrictions ,FillForms ,FillFormsAndAnnots :_cg ._g .addWarningWithDescription (_db ,_c .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0063\u0068\u0061ng\u0065\u0064",_bfg .Get ("\u0054")));default:_cg ._g .addErrorWithDescription (_db ,_c .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0063\u0068\u0061ng\u0065\u0064",_bfg .Get ("\u0054")));
};};};if FT ,_fec :=_e .GetNameVal (_bfg .Get ("\u0046\u0054"));_fec {if FT =="\u0053\u0069\u0067"{if _aaf ,_add :=_e .GetIndirect (_bfg .Get ("\u0056"));_add {if _ ,_gagf :=_cg ._a [_aaf .ObjectNumber ];_gagf {switch _cg ._cc {case NoRestrictions ,FillForms ,FillFormsAndAnnots :_cg ._g .addWarningWithDescription (_db ,_c .Sprintf ("\u0053\u0069\u0067na\u0074\u0075\u0072\u0065\u0020\u0066\u006f\u0072\u0020%\u0073 \u0066i\u0065l\u0064\u0020\u0077\u0061\u0073\u0020\u0063\u0068\u0061\u006e\u0067\u0065\u0064",T ));
default:_cg ._g .addErrorWithDescription (_db ,_c .Sprintf ("\u0053\u0069\u0067na\u0074\u0075\u0072\u0065\u0020\u0066\u006f\u0072\u0020%\u0073 \u0066i\u0065l\u0064\u0020\u0077\u0061\u0073\u0020\u0063\u0068\u0061\u006e\u0067\u0065\u0064",T ));};};};};};
};for _ ,_caa :=range _ce {switch _cg ._cc {case NoRestrictions :_cg ._g .addWarningWithDescription (_db ,_c .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0072\u0065\u006dov\u0065\u0064",_caa .Get ("\u0054")));default:_cg ._g .addErrorWithDescription (_db ,_c .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0072\u0065\u006dov\u0065\u0064",_caa .Get ("\u0054")));
};};return nil ;};const (NoRestrictions DocMDPPermission =0;NoChanges DocMDPPermission =1;FillForms DocMDPPermission =2;FillFormsAndAnnots DocMDPPermission =3;);

// DiffPolicy interface for comparing two revisions of the Pdf document.
type DiffPolicy interface{

// ReviewFile should check the revisions of the old and new parsers
// and evaluate the differences between the revisions.
// Each implementation of this interface must decide
// how to handle cases where there are multiple revisions between the old and new revisions.
ReviewFile (_dae *_e .PdfParser ,_aag *_e .PdfParser ,_abc *MDPParameters )(*DiffResults ,error );};func (_abg *DiffResults )addWarningWithDescription (_gcf int ,_fbg string ){if _abg .Warnings ==nil {_abg .Warnings =make ([]*DiffResult ,0);};_abg .Warnings =append (_abg .Warnings ,&DiffResult {Revision :_gcf ,Description :_fbg });
};func (_bcd *DiffResults )addErrorWithDescription (_bag int ,_ecgb string ){if _bcd .Errors ==nil {_bcd .Errors =make ([]*DiffResult ,0);};_bcd .Errors =append (_bcd .Errors ,&DiffResult {Revision :_bag ,Description :_ecgb });};

// DiffResult describes the warning or the error for the DiffPolicy results.
type DiffResult struct{Revision int ;Description string ;};

// ReviewFile implementation of DiffPolicy interface
// The default policy only checks the next types of objects:
// Page, Pages (container for page objects), Annot, Annots (container for annotation objects), Field.
// It checks adding, removing and modifying objects of these types.
func (_ed *defaultDiffPolicy )ReviewFile (oldParser *_e .PdfParser ,newParser *_e .PdfParser ,params *MDPParameters )(*DiffResults ,error ){if oldParser .GetRevisionNumber ()> newParser .GetRevisionNumber (){return nil ,_b .New ("\u006f\u006c\u0064\u0020\u0072\u0065\u0076\u0069\u0073\u0069\u006f\u006e\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u006e\u0065\u0077\u0020r\u0065\u0076i\u0073\u0069\u006f\u006e");
};if oldParser .GetRevisionNumber ()==newParser .GetRevisionNumber (){if oldParser !=newParser {return nil ,_b .New ("\u0073\u0061m\u0065\u0020\u0072\u0065v\u0069\u0073i\u006f\u006e\u0073\u002c\u0020\u0062\u0075\u0074 \u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006e\u0074\u0020\u0070\u0061r\u0073\u0065\u0072\u0073");
};return &DiffResults {},nil ;};if params ==nil {_ed ._cc =NoRestrictions ;}else {_ed ._cc =params .DocMDPLevel ;};_bf :=&DiffResults {};for _ga :=oldParser .GetRevisionNumber ()+1;_ga <=newParser .GetRevisionNumber ();_ga ++{_ff ,_eg :=newParser .GetRevision (_ga -1);
if _eg !=nil {return nil ,_eg ;};_aa ,_eg :=newParser .GetRevision (_ga );if _eg !=nil {return nil ,_eg ;};_fc ,_eg :=_ed .compareRevisions (_ff ,_aa );if _eg !=nil {return nil ,_eg ;};_bf .Warnings =append (_bf .Warnings ,_fc .Warnings ...);_bf .Errors =append (_bf .Errors ,_fc .Errors ...);
};return _bf ,nil ;};type defaultDiffPolicy struct{_a map[int64 ]_e .PdfObject ;_g *DiffResults ;_cc DocMDPPermission ;};func NewDefaultDiffPolicy ()DiffPolicy {return &defaultDiffPolicy {_a :nil ,_g :&DiffResults {},_cc :0};};func (_bbde *DiffResults )addWarning (_ceg *DiffResult ){if _bbde .Warnings ==nil {_bbde .Warnings =make ([]*DiffResult ,0);
};_bbde .Warnings =append (_bbde .Warnings ,_ceg );};func (_dcbd *defaultDiffPolicy )compareAnnots (_be int ,_bgd ,_dcc []_e .PdfObject )error {_cfe :=make (map[int64 ]*_e .PdfObjectDictionary );for _ ,_fa :=range _bgd {_dgac ,_ccd :=_e .GetIndirect (_fa );
if !_ccd {return _b .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_eag ,_ccd :=_e .GetDict (_dgac .PdfObject );if !_ccd {return _b .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");
};_cfe [_dgac .ObjectNumber ]=_eag ;};for _ ,_ge :=range _dcc {_ade ,_dgd :=_e .GetIndirect (_ge );if !_dgd {return _b .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");
};_ffg ,_dgd :=_e .GetDict (_ade .PdfObject );if !_dgd {return _b .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_gaaf ,_ :=_e .GetStringVal (_ffg .Get ("\u0054"));
_bdg ,_ :=_e .GetNameVal (_ffg .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));if _ ,_gee :=_cfe [_ade .ObjectNumber ];!_gee {switch _dcbd ._cc {case NoRestrictions ,FillFormsAndAnnots :_dcbd ._g .addWarningWithDescription (_be ,_c .Sprintf ("\u0025\u0073\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0020\u0025\u0073\u0020\u0077\u0061\u0073\u0020\u0061d\u0064\u0065\u0064",_bdg ,_gaaf ));
default:_beb ,_agf :=_e .GetDict (_ade .PdfObject );if !_agf {return _b .New ("u\u006ed\u0065\u0066\u0069\u006e\u0065\u0064\u0020\u0061n\u006e\u006f\u0074\u0061ti\u006f\u006e");};_bfbe ,_agf :=_e .GetNameVal (_beb .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));
if !_agf {return _b .New ("\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064\u0020a\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0027\u0073\u0020\u0073\u0075\u0062\u0074\u0079\u0070\u0065");};if _bfbe =="\u0057\u0069\u0064\u0067\u0065\u0074"{switch _dcbd ._cc {case NoRestrictions ,FillFormsAndAnnots ,FillForms :_dcbd ._g .addWarningWithDescription (_be ,_c .Sprintf ("\u0025\u0073\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0020\u0025\u0073\u0020\u0077\u0061\u0073\u0020\u0061d\u0064\u0065\u0064",_bdg ,_gaaf ));
default:_dcbd ._g .addErrorWithDescription (_be ,_c .Sprintf ("\u0025\u0073\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0020\u0025\u0073\u0020\u0077\u0061\u0073\u0020\u0061d\u0064\u0065\u0064",_bdg ,_gaaf ));};}else {_dcbd ._g .addErrorWithDescription (_be ,_c .Sprintf ("\u0025\u0073\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0020\u0025\u0073\u0020\u0077\u0061\u0073\u0020\u0061d\u0064\u0065\u0064",_bdg ,_gaaf ));
};};}else {delete (_cfe ,_ade .ObjectNumber );if _fac ,_cddb :=_dcbd ._a [_ade .ObjectNumber ];_cddb {switch _dcbd ._cc {case NoRestrictions ,FillFormsAndAnnots :_dcbd ._g .addWarningWithDescription (_be ,_c .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0063\u0068\u0061\u006eg\u0065\u0064",_bdg ,_gaaf ));
default:_ebf ,_efa :=_e .GetIndirect (_fac );if !_efa {return _b .New ("u\u006ed\u0065\u0066\u0069\u006e\u0065\u0064\u0020\u0061n\u006e\u006f\u0074\u0061ti\u006f\u006e");};_ebdf ,_efa :=_e .GetDict (_ebf .PdfObject );if !_efa {return _b .New ("u\u006ed\u0065\u0066\u0069\u006e\u0065\u0064\u0020\u0061n\u006e\u006f\u0074\u0061ti\u006f\u006e");
};_ba ,_efa :=_e .GetNameVal (_ebdf .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));if !_efa {return _b .New ("\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064\u0020a\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0027\u0073\u0020\u0073\u0075\u0062\u0074\u0079\u0070\u0065");
};if _ba =="\u0057\u0069\u0064\u0067\u0065\u0074"{switch _dcbd ._cc {case NoRestrictions ,FillFormsAndAnnots ,FillForms :_dcbd ._g .addWarningWithDescription (_be ,_c .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0063\u0068\u0061\u006eg\u0065\u0064",_bdg ,_gaaf ));
default:_dcbd ._g .addErrorWithDescription (_be ,_c .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0063\u0068\u0061\u006eg\u0065\u0064",_bdg ,_gaaf ));};}else {_dcbd ._g .addErrorWithDescription (_be ,_c .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0063\u0068\u0061\u006eg\u0065\u0064",_bdg ,_gaaf ));
};};};};};for _ ,_dgb :=range _cfe {_fb ,_ :=_e .GetStringVal (_dgb .Get ("\u0054"));_cgf ,_ :=_e .GetNameVal (_dgb .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));switch _dcbd ._cc {case NoRestrictions ,FillFormsAndAnnots :_dcbd ._g .addWarningWithDescription (_be ,_c .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0072\u0065\u006d\u006fv\u0065\u0064",_cgf ,_fb ));
default:_dcbd ._g .addErrorWithDescription (_be ,_c .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0072\u0065\u006d\u006fv\u0065\u0064",_cgf ,_fb ));};};return nil ;};

// DiffResults describes the results of the DiffPolicy.
type DiffResults struct{Warnings []*DiffResult ;Errors []*DiffResult ;};

// DocMDPPermission is values for set up access permissions for DocMDP.
// (Section 12.8.2.2, Table 254 - Entries in a signature dictionary p. 471 in PDF32000_2008).
type DocMDPPermission int64 ;func (_fee *defaultDiffPolicy )comparePages (_gca int ,_fce ,_bc *_e .PdfIndirectObject )error {if _ ,_cdd :=_fee ._a [_bc .ObjectNumber ];_cdd {_fee ._g .addErrorWithDescription (_gca ,"\u0050a\u0067e\u0073\u0020\u0077\u0065\u0072e\u0020\u0063h\u0061\u006e\u0067\u0065\u0064");
};_afca ,_edg :=_e .GetDict (_bc .PdfObject );_dca ,_cdb :=_e .GetDict (_fce .PdfObject );if !_edg ||!_cdb {return _b .New ("\u0075n\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0050\u0061g\u0065\u0073\u0027\u0020\u006f\u0062\u006a\u0065\u0063\u0074");
};_adc ,_edg :=_e .GetArray (_afca .Get ("\u004b\u0069\u0064\u0073"));_gad ,_cdb :=_e .GetArray (_dca .Get ("\u004b\u0069\u0064\u0073"));if !_edg ||!_cdb {return _b .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0050\u0061\u0067\u0065s\u0027 \u0064\u0069\u0063\u0074\u0069\u006f\u006ea\u0072\u0079");
};_dd :=_adc .Len ();if _dd > _gad .Len (){_dd =_gad .Len ();};for _dcb :=0;_dcb < _dd ;_dcb ++{_cf ,_dgg :=_e .GetIndirect (_e .ResolveReference (_gad .Get (_dcb )));_cfd ,_edgf :=_e .GetIndirect (_e .ResolveReference (_adc .Get (_dcb )));if !_dgg ||!_edgf {return _b .New ("\u0075\u006e\u0065\u0078pe\u0063\u0074\u0065\u0064\u0020\u0070\u0061\u0067\u0065\u0020\u006f\u0062\u006a\u0065c\u0074");
};if _cf .ObjectNumber !=_cfd .ObjectNumber {_fee ._g .addErrorWithDescription (_gca ,_c .Sprintf ("p\u0061\u0067\u0065\u0020#%\u0064 \u0077\u0061\u0073\u0020\u0072e\u0070\u006c\u0061\u0063\u0065\u0064",_dcb ));};_fcee ,_dgg :=_e .GetDict (_cfd );_bgg ,_edgf :=_e .GetDict (_cf );
if !_dgg ||!_edgf {return _b .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0070\u0061\u0067\u0065'\u0073 \u0064\u0069\u0063\u0074\u0069\u006f\u006ea\u0072\u0079");};_efg ,_ffd :=_cgfe (_fcee .Get ("\u0041\u006e\u006e\u006f\u0074\u0073"));
if _ffd !=nil {return _ffd ;};_bdf ,_ffd :=_cgfe (_bgg .Get ("\u0041\u006e\u006e\u006f\u0074\u0073"));if _ffd !=nil {return _ffd ;};if _dga :=_fee .compareAnnots (_gca ,_bdf ,_efg );_dga !=nil {return _dga ;};};for _cbc :=_dd +1;_cbc <=_adc .Len ();_cbc ++{_fee ._g .addErrorWithDescription (_gca ,_c .Sprintf ("\u0070a\u0067e\u0020\u0023\u0025\u0064\u0020w\u0061\u0073 \u0061\u0064\u0064\u0065\u0064",_cbc ));
};for _de :=_dd +1;_de <=_gad .Len ();_de ++{_fee ._g .addErrorWithDescription (_gca ,_c .Sprintf ("p\u0061g\u0065\u0020\u0023\u0025\u0064\u0020\u0077\u0061s\u0020\u0072\u0065\u006dov\u0065\u0064",_de ));};return nil ;};

// MDPParameters describes parameters for the MDP checks (now only DocMDP).
type MDPParameters struct{DocMDPLevel DocMDPPermission ;};