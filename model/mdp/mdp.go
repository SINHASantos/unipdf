//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package mdp ;import (_ac "errors";_d "fmt";_b "github.com/unidoc/unipdf/v3/core";);func NewDefaultDiffPolicy ()DiffPolicy {return &defaultDiffPolicy {_df :nil ,_f :&DiffResults {},_c :0};};

// DiffPolicy interface for comparing two revisions of the Pdf document.
type DiffPolicy interface{

// ReviewFile should check the revisions of the old and new parsers
// and evaluate the differences between the revisions.
// Each implementation of this interface must decide
// how to handle cases where there are multiple revisions between the old and new revisions.
ReviewFile (_ada *_b .PdfParser ,_eac *_b .PdfParser ,_fce *MDPParameters )(*DiffResults ,error );};func (_age *DiffResults )addErrorWithDescription (_fab int ,_fbd string ){if _age .Errors ==nil {_age .Errors =make ([]*DiffResult ,0);};_age .Errors =append (_age .Errors ,&DiffResult {Revision :_fab ,Description :_fbd });
};type defaultDiffPolicy struct{_df map[int64 ]_b .PdfObject ;_f *DiffResults ;_c DocMDPPermission ;};func (_ead *DiffResults )addError (_ffb *DiffResult ){if _ead .Errors ==nil {_ead .Errors =make ([]*DiffResult ,0);};_ead .Errors =append (_ead .Errors ,_ffb );
};func (_ee *defaultDiffPolicy )compareFields (_gfc int ,_fdd ,_gdf []_b .PdfObject )error {_bga :=make (map[int64 ]*_b .PdfObjectDictionary );for _ ,_dba :=range _fdd {_ab ,_feg :=_b .GetIndirect (_dba );if !_feg {return _ac .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0066\u0069\u0065\u006cd\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");
};_da ,_feg :=_b .GetDict (_ab .PdfObject );if !_feg {return _ac .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_bga [_ab .ObjectNumber ]=_da ;
};for _ ,_fa :=range _gdf {_eg ,_cae :=_b .GetIndirect (_fa );if !_cae {return _ac .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0066\u0069\u0065\u006cd\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_cgg ,_cae :=_b .GetDict (_eg .PdfObject );
if !_cae {return _ac .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0066\u0069\u0065\u006cd\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};T :=_cgg .Get ("\u0054");if _ ,_cagf :=_ee ._df [_eg .ObjectNumber ];_cagf {switch _ee ._c {case NoRestrictions ,FillForms ,FillFormsAndAnnots :_ee ._f .addWarningWithDescription (_gfc ,_d .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0063\u0068\u0061ng\u0065\u0064",T ));
default:_ee ._f .addErrorWithDescription (_gfc ,_d .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0063\u0068\u0061ng\u0065\u0064",T ));};};if _ ,_dga :=_bga [_eg .ObjectNumber ];!_dga {switch _ee ._c {case NoRestrictions ,FillForms ,FillFormsAndAnnots :_ee ._f .addWarningWithDescription (_gfc ,_d .Sprintf ("\u0046i\u0065l\u0064\u0020\u0025\u0073\u0020w\u0061\u0073 \u0061\u0064\u0064\u0065\u0064",_cgg .Get ("\u0054")));
default:_ee ._f .addErrorWithDescription (_gfc ,_d .Sprintf ("\u0046i\u0065l\u0064\u0020\u0025\u0073\u0020w\u0061\u0073 \u0061\u0064\u0064\u0065\u0064",_cgg .Get ("\u0054")));};}else {delete (_bga ,_eg .ObjectNumber );if _ ,_fg :=_ee ._df [_eg .ObjectNumber ];
_fg {switch _ee ._c {case NoRestrictions ,FillForms ,FillFormsAndAnnots :_ee ._f .addWarningWithDescription (_gfc ,_d .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0063\u0068\u0061ng\u0065\u0064",_cgg .Get ("\u0054")));default:_ee ._f .addErrorWithDescription (_gfc ,_d .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0063\u0068\u0061ng\u0065\u0064",_cgg .Get ("\u0054")));
};};};if FT ,_fb :=_b .GetNameVal (_cgg .Get ("\u0046\u0054"));_fb {if FT =="\u0053\u0069\u0067"{if _fgb ,_aab :=_b .GetIndirect (_cgg .Get ("\u0056"));_aab {if _ ,_gda :=_ee ._df [_fgb .ObjectNumber ];_gda {switch _ee ._c {case NoRestrictions ,FillForms ,FillFormsAndAnnots :_ee ._f .addWarningWithDescription (_gfc ,_d .Sprintf ("\u0053\u0069\u0067na\u0074\u0075\u0072\u0065\u0020\u0066\u006f\u0072\u0020%\u0073 \u0066i\u0065l\u0064\u0020\u0077\u0061\u0073\u0020\u0063\u0068\u0061\u006e\u0067\u0065\u0064",T ));
default:_ee ._f .addErrorWithDescription (_gfc ,_d .Sprintf ("\u0053\u0069\u0067na\u0074\u0075\u0072\u0065\u0020\u0066\u006f\u0072\u0020%\u0073 \u0066i\u0065l\u0064\u0020\u0077\u0061\u0073\u0020\u0063\u0068\u0061\u006e\u0067\u0065\u0064",T ));};};};};};
};for _ ,_dgae :=range _bga {switch _ee ._c {case NoRestrictions :_ee ._f .addWarningWithDescription (_gfc ,_d .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0072\u0065\u006dov\u0065\u0064",_dgae .Get ("\u0054")));default:_ee ._f .addErrorWithDescription (_gfc ,_d .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0072\u0065\u006dov\u0065\u0064",_dgae .Get ("\u0054")));
};};return nil ;};

// DiffResult describes the warning or the error for the DiffPolicy results.
type DiffResult struct{Revision int ;Description string ;};

// String returns the state of the warning.
func (_abge *DiffResult )String ()string {return _d .Sprintf ("\u0025\u0073\u0020\u0069n \u0072\u0065\u0076\u0069\u0073\u0069\u006f\u006e\u0073\u0020\u0023\u0025\u0064",_abge .Description ,_abge .Revision );};

// DocMDPPermission is values for set up access permissions for DocMDP.
// (Section 12.8.2.2, Table 254 - Entries in a signature dictionary p. 471 in PDF32000_2008).
type DocMDPPermission int64 ;func _fef (_gdfc _b .PdfObject )([]_b .PdfObject ,error ){_dff :=make ([]_b .PdfObject ,0);if _gdfc !=nil {_bbe :=_gdfc ;if _def ,_efc :=_b .GetIndirect (_gdfc );_efc {_bbe =_def .PdfObject ;};if _ea ,_gfd :=_b .GetArray (_bbe );
_gfd {_dff =_ea .Elements ();}else {return nil ,_ac .New ("\u0075n\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0061n\u006eo\u0074s\u0027\u0020\u006f\u0062\u006a\u0065\u0063t");};};return _dff ,nil ;};const (NoRestrictions DocMDPPermission =0;NoChanges DocMDPPermission =1;
FillForms DocMDPPermission =2;FillFormsAndAnnots DocMDPPermission =3;);func (_ec *defaultDiffPolicy )comparePages (_cagg int ,_cef ,_gfcf *_b .PdfIndirectObject )error {if _ ,_ef :=_ec ._df [_gfcf .ObjectNumber ];_ef {_ec ._f .addErrorWithDescription (_cagg ,"\u0050a\u0067e\u0073\u0020\u0077\u0065\u0072e\u0020\u0063h\u0061\u006e\u0067\u0065\u0064");
};_dc ,_ecg :=_b .GetDict (_gfcf .PdfObject );_daa ,_abg :=_b .GetDict (_cef .PdfObject );if !_ecg ||!_abg {return _ac .New ("\u0075n\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0050\u0061g\u0065\u0073\u0027\u0020\u006f\u0062\u006a\u0065\u0063\u0074");
};_bgc ,_ecg :=_b .GetArray (_dc .Get ("\u004b\u0069\u0064\u0073"));_dea ,_abg :=_b .GetArray (_daa .Get ("\u004b\u0069\u0064\u0073"));if !_ecg ||!_abg {return _ac .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0050\u0061\u0067\u0065s\u0027 \u0064\u0069\u0063\u0074\u0069\u006f\u006ea\u0072\u0079");
};_efb :=_bgc .Len ();if _efb > _dea .Len (){_efb =_dea .Len ();};for _ff :=0;_ff < _efb ;_ff ++{_ebg ,_gfcb :=_b .GetIndirect (_b .ResolveReference (_dea .Get (_ff )));_dag ,_gdg :=_b .GetIndirect (_b .ResolveReference (_bgc .Get (_ff )));if !_gfcb ||!_gdg {return _ac .New ("\u0075\u006e\u0065\u0078pe\u0063\u0074\u0065\u0064\u0020\u0070\u0061\u0067\u0065\u0020\u006f\u0062\u006a\u0065c\u0074");
};if _ebg .ObjectNumber !=_dag .ObjectNumber {_ec ._f .addErrorWithDescription (_cagg ,_d .Sprintf ("p\u0061\u0067\u0065\u0020#%\u0064 \u0077\u0061\u0073\u0020\u0072e\u0070\u006c\u0061\u0063\u0065\u0064",_ff ));};_bbd ,_gfcb :=_b .GetDict (_dag );_fga ,_gdg :=_b .GetDict (_ebg );
if !_gfcb ||!_gdg {return _ac .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0070\u0061\u0067\u0065'\u0073 \u0064\u0069\u0063\u0074\u0069\u006f\u006ea\u0072\u0079");};_gega ,_dbe :=_fef (_bbd .Get ("\u0041\u006e\u006e\u006f\u0074\u0073"));
if _dbe !=nil {return _dbe ;};_gc ,_dbe :=_fef (_fga .Get ("\u0041\u006e\u006e\u006f\u0074\u0073"));if _dbe !=nil {return _dbe ;};if _egf :=_ec .compareAnnots (_cagg ,_gc ,_gega );_egf !=nil {return _egf ;};};for _bgaa :=_efb +1;_bgaa <=_bgc .Len ();_bgaa ++{_ec ._f .addErrorWithDescription (_cagg ,_d .Sprintf ("\u0070a\u0067e\u0020\u0023\u0025\u0064\u0020w\u0061\u0073 \u0061\u0064\u0064\u0065\u0064",_bgaa ));
};for _ddf :=_efb +1;_ddf <=_dea .Len ();_ddf ++{_ec ._f .addErrorWithDescription (_cagg ,_d .Sprintf ("p\u0061g\u0065\u0020\u0023\u0025\u0064\u0020\u0077\u0061s\u0020\u0072\u0065\u006dov\u0065\u0064",_ddf ));};return nil ;};func (_ffc *defaultDiffPolicy )compareAnnots (_edg int ,_eed ,_ecd []_b .PdfObject )error {_gg :=make (map[int64 ]*_b .PdfObjectDictionary );
for _ ,_gag :=range _eed {_ae ,_fac :=_b .GetIndirect (_gag );if !_fac {return _ac .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_fc ,_fac :=_b .GetDict (_ae .PdfObject );
if !_fac {return _ac .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_gg [_ae .ObjectNumber ]=_fc ;};for _ ,_dgf :=range _ecd {_gegd ,_dgaf :=_b .GetIndirect (_dgf );
if !_dgaf {return _ac .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_bbc ,_dgaf :=_b .GetDict (_gegd .PdfObject );if !_dgaf {return _ac .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");
};_faa ,_ :=_b .GetStringVal (_bbc .Get ("\u0054"));_aee ,_ :=_b .GetNameVal (_bbc .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));if _ ,_cac :=_gg [_gegd .ObjectNumber ];!_cac {switch _ffc ._c {case NoRestrictions ,FillFormsAndAnnots :_ffc ._f .addWarningWithDescription (_edg ,_d .Sprintf ("\u0025\u0073\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0020\u0025\u0073\u0020\u0077\u0061\u0073\u0020\u0061d\u0064\u0065\u0064",_aee ,_faa ));
default:_ege ,_ba :=_b .GetDict (_gegd .PdfObject );if !_ba {return _ac .New ("u\u006ed\u0065\u0066\u0069\u006e\u0065\u0064\u0020\u0061n\u006e\u006f\u0074\u0061ti\u006f\u006e");};_edea ,_ba :=_b .GetNameVal (_ege .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));
if !_ba {return _ac .New ("\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064\u0020a\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0027\u0073\u0020\u0073\u0075\u0062\u0074\u0079\u0070\u0065");};if _edea =="\u0057\u0069\u0064\u0067\u0065\u0074"{switch _ffc ._c {case NoRestrictions ,FillFormsAndAnnots ,FillForms :_ffc ._f .addWarningWithDescription (_edg ,_d .Sprintf ("\u0025\u0073\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0020\u0025\u0073\u0020\u0077\u0061\u0073\u0020\u0061d\u0064\u0065\u0064",_aee ,_faa ));
default:_ffc ._f .addErrorWithDescription (_edg ,_d .Sprintf ("\u0025\u0073\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0020\u0025\u0073\u0020\u0077\u0061\u0073\u0020\u0061d\u0064\u0065\u0064",_aee ,_faa ));};}else {_ffc ._f .addErrorWithDescription (_edg ,_d .Sprintf ("\u0025\u0073\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0020\u0025\u0073\u0020\u0077\u0061\u0073\u0020\u0061d\u0064\u0065\u0064",_aee ,_faa ));
};};}else {delete (_gg ,_gegd .ObjectNumber );if _cb ,_bf :=_ffc ._df [_gegd .ObjectNumber ];_bf {switch _ffc ._c {case NoRestrictions ,FillFormsAndAnnots :_ffc ._f .addWarningWithDescription (_edg ,_d .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0063\u0068\u0061\u006eg\u0065\u0064",_aee ,_faa ));
default:_ceb ,_efg :=_b .GetIndirect (_cb );if !_efg {return _ac .New ("u\u006ed\u0065\u0066\u0069\u006e\u0065\u0064\u0020\u0061n\u006e\u006f\u0074\u0061ti\u006f\u006e");};_ecga ,_efg :=_b .GetDict (_ceb .PdfObject );if !_efg {return _ac .New ("u\u006ed\u0065\u0066\u0069\u006e\u0065\u0064\u0020\u0061n\u006e\u006f\u0074\u0061ti\u006f\u006e");
};_afa ,_efg :=_b .GetNameVal (_ecga .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));if !_efg {return _ac .New ("\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064\u0020a\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0027\u0073\u0020\u0073\u0075\u0062\u0074\u0079\u0070\u0065");
};if _afa =="\u0057\u0069\u0064\u0067\u0065\u0074"{switch _ffc ._c {case NoRestrictions ,FillFormsAndAnnots ,FillForms :_ffc ._f .addWarningWithDescription (_edg ,_d .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0063\u0068\u0061\u006eg\u0065\u0064",_aee ,_faa ));
default:_ffc ._f .addErrorWithDescription (_edg ,_d .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0063\u0068\u0061\u006eg\u0065\u0064",_aee ,_faa ));};}else {_ffc ._f .addErrorWithDescription (_edg ,_d .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0063\u0068\u0061\u006eg\u0065\u0064",_aee ,_faa ));
};};};};};for _ ,_fdf :=range _gg {_bgaaa ,_ :=_b .GetStringVal (_fdf .Get ("\u0054"));_ddfg ,_ :=_b .GetNameVal (_fdf .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));switch _ffc ._c {case NoRestrictions ,FillFormsAndAnnots :_ffc ._f .addWarningWithDescription (_edg ,_d .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0072\u0065\u006d\u006fv\u0065\u0064",_ddfg ,_bgaaa ));
default:_ffc ._f .addErrorWithDescription (_edg ,_d .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0072\u0065\u006d\u006fv\u0065\u0064",_ddfg ,_bgaaa ));};};return nil ;};func (_e *defaultDiffPolicy )compareRevisions (_db *_b .PdfParser ,_gb *_b .PdfParser )(*DiffResults ,error ){var _ge error ;
_e ._df ,_ge =_gb .GetUpdatedObjects (_db );if _ge !=nil {return &DiffResults {},_ge ;};if len (_e ._df )==0{return &DiffResults {},nil ;};_cg :=_gb .GetRevisionNumber ();_geg ,_dg :=_b .GetIndirect (_b .ResolveReference (_db .GetTrailer ().Get ("\u0052\u006f\u006f\u0074")));
_cf ,_gbc :=_b .GetIndirect (_b .ResolveReference (_gb .GetTrailer ().Get ("\u0052\u006f\u006f\u0074")));if !_dg ||!_gbc {return &DiffResults {},_ac .New ("\u0065\u0072\u0072o\u0072\u0020\u0077\u0068i\u006c\u0065\u0020\u0067\u0065\u0074\u0074i\u006e\u0067\u0020\u0072\u006f\u006f\u0074\u0020\u006f\u0062\u006a\u0065\u0063\u0074");
};_geb ,_dg :=_b .GetDict (_b .ResolveReference (_geg .PdfObject ));_ga ,_gbc :=_b .GetDict (_b .ResolveReference (_cf .PdfObject ));if !_dg ||!_gbc {return &DiffResults {},_ac .New ("\u0065\u0072\u0072\u006f\u0072\u0020\u0077\u0068\u0069\u006c\u0065\u0020\u0067e\u0074\u0074\u0069\u006e\u0067\u0020a\u0020\u0072\u006f\u006f\u0074\u0027\u0073\u0020\u0064\u0069\u0063\u0074\u0069o\u006e\u0061\u0072\u0079");
};if _de ,_cc :=_b .GetIndirect (_ga .Get ("\u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d"));_cc {_ed ,_bgd :=_b .GetDict (_de );if !_bgd {return &DiffResults {},_ac .New ("\u0065\u0072\u0072\u006f\u0072 \u0077\u0068\u0069\u006c\u0065\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067 \u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d\u0027\u0073\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079");
};_fe :=make ([]_b .PdfObject ,0);if _ccg ,_dd :=_b .GetIndirect (_geb .Get ("\u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d"));_dd {if _gd ,_ca :=_b .GetDict (_ccg );_ca {if _edd ,_dbd :=_b .GetArray (_gd .Get ("\u0046\u0069\u0065\u006c\u0064\u0073"));
_dbd {_fe =_edd .Elements ();};};};_dfa ,_bgd :=_b .GetArray (_ed .Get ("\u0046\u0069\u0065\u006c\u0064\u0073"));if !_bgd {return &DiffResults {},_ac .New ("\u0065\u0072r\u006f\u0072\u0020\u0077h\u0069\u006ce\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067 \u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d\u0027\u0073\u0020\u0066i\u0065\u006c\u0064\u0073");
};if _be :=_e .compareFields (_cg ,_fe ,_dfa .Elements ());_be !=nil {return &DiffResults {},_be ;};};_cag ,_gf :=_b .GetIndirect (_ga .Get ("\u0050\u0061\u0067e\u0073"));if !_gf {return &DiffResults {},_ac .New ("\u0065\u0072\u0072\u006f\u0072\u0020w\u0068\u0069\u006c\u0065\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020p\u0061\u0067\u0065\u0073\u0027\u0020\u006fb\u006a\u0065\u0063\u0074");
};_eb ,_gf :=_b .GetIndirect (_geb .Get ("\u0050\u0061\u0067e\u0073"));if !_gf {return &DiffResults {},_ac .New ("\u0065\u0072\u0072\u006f\u0072\u0020w\u0068\u0069\u006c\u0065\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020p\u0061\u0067\u0065\u0073\u0027\u0020\u006fb\u006a\u0065\u0063\u0074");
};if _ccf :=_e .comparePages (_cg ,_eb ,_cag );_ccf !=nil {return &DiffResults {},_ccf ;};return _e ._f ,nil ;};func (_bbf *DiffResults )addWarningWithDescription (_ad int ,_gdd string ){if _bbf .Warnings ==nil {_bbf .Warnings =make ([]*DiffResult ,0);
};_bbf .Warnings =append (_bbf .Warnings ,&DiffResult {Revision :_ad ,Description :_gdd });};

// MDPParameters describes parameters for the MDP checks (now only DocMDP).
type MDPParameters struct{DocMDPLevel DocMDPPermission ;};

// ReviewFile implementation of DiffPolicy interface
// The default policy only checks the next types of objects:
// Page, Pages (container for page objects), Annot, Annots (container for annotation objects), Field.
// It checks adding, removing and modifying objects of these types.
func (_dfg *defaultDiffPolicy )ReviewFile (oldParser *_b .PdfParser ,newParser *_b .PdfParser ,params *MDPParameters )(*DiffResults ,error ){if oldParser .GetRevisionNumber ()> newParser .GetRevisionNumber (){return nil ,_ac .New ("\u006f\u006c\u0064\u0020\u0072\u0065\u0076\u0069\u0073\u0069\u006f\u006e\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u006e\u0065\u0077\u0020r\u0065\u0076i\u0073\u0069\u006f\u006e");
};if oldParser .GetRevisionNumber ()==newParser .GetRevisionNumber (){if oldParser !=newParser {return nil ,_ac .New ("\u0073\u0061m\u0065\u0020\u0072\u0065v\u0069\u0073i\u006f\u006e\u0073\u002c\u0020\u0062\u0075\u0074 \u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006e\u0074\u0020\u0070\u0061r\u0073\u0065\u0072\u0073");
};return &DiffResults {},nil ;};if params ==nil {_dfg ._c =NoRestrictions ;}else {_dfg ._c =params .DocMDPLevel ;};_bb :=&DiffResults {};for _ce :=oldParser .GetRevisionNumber ()+1;_ce <=newParser .GetRevisionNumber ();_ce ++{_fd ,_aa :=newParser .GetRevision (_ce -1);
if _aa !=nil {return nil ,_aa ;};_g ,_aa :=newParser .GetRevision (_ce );if _aa !=nil {return nil ,_aa ;};_bg ,_aa :=_dfg .compareRevisions (_fd ,_g );if _aa !=nil {return nil ,_aa ;};_bb .Warnings =append (_bb .Warnings ,_bg .Warnings ...);_bb .Errors =append (_bb .Errors ,_bg .Errors ...);
};return _bb ,nil ;};func (_gee *DiffResults )addWarning (_fba *DiffResult ){if _gee .Warnings ==nil {_gee .Warnings =make ([]*DiffResult ,0);};_gee .Warnings =append (_gee .Warnings ,_fba );};

// DiffResults describes the results of the DiffPolicy.
type DiffResults struct{Warnings []*DiffResult ;Errors []*DiffResult ;};

// IsPermitted returns true if changes permitted.
func (_gdfce *DiffResults )IsPermitted ()bool {return len (_gdfce .Errors )==0};