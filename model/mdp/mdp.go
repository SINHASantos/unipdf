//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package mdp ;import (_dg "errors";_f "fmt";_e "github.com/unidoc/unipdf/v4/core";);func (_cdc *defaultDiffPolicy )compareAnnots (_ccf int ,_ebb ,_ff []_e .PdfObject )error {_ac :=make (map[int64 ]*_e .PdfObjectDictionary );for _ ,_gad :=range _ebb {_dgd ,_fcef :=_e .GetIndirect (_gad );
if !_fcef {return _dg .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_faf ,_fcef :=_e .GetDict (_dgd .PdfObject );if !_fcef {return _dg .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");
};_ac [_dgd .ObjectNumber ]=_faf ;};for _ ,_fgd :=range _ff {_aef ,_cea :=_e .GetIndirect (_fgd );if !_cea {return _dg .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");
};_egc ,_cea :=_e .GetDict (_aef .PdfObject );if !_cea {return _dg .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_aeb ,_ :=_e .GetStringVal (_egc .Get ("\u0054"));
_ccd ,_ :=_e .GetNameVal (_egc .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));if _ ,_cbb :=_ac [_aef .ObjectNumber ];!_cbb {switch _cdc ._gb {case NoRestrictions ,FillFormsAndAnnots :_cdc ._gd .addWarningWithDescription (_ccf ,_f .Sprintf ("\u0025\u0073\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0020\u0025\u0073\u0020\u0077\u0061\u0073\u0020\u0061d\u0064\u0065\u0064",_ccd ,_aeb ));
default:_cbf ,_dcb :=_e .GetDict (_aef .PdfObject );if !_dcb {return _dg .New ("u\u006ed\u0065\u0066\u0069\u006e\u0065\u0064\u0020\u0061n\u006e\u006f\u0074\u0061ti\u006f\u006e");};_efa ,_dcb :=_e .GetNameVal (_cbf .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));
if !_dcb {return _dg .New ("\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064\u0020a\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0027\u0073\u0020\u0073\u0075\u0062\u0074\u0079\u0070\u0065");};if _efa =="\u0057\u0069\u0064\u0067\u0065\u0074"{switch _cdc ._gb {case NoRestrictions ,FillFormsAndAnnots ,FillForms :_cdc ._gd .addWarningWithDescription (_ccf ,_f .Sprintf ("\u0025\u0073\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0020\u0025\u0073\u0020\u0077\u0061\u0073\u0020\u0061d\u0064\u0065\u0064",_ccd ,_aeb ));
default:_cdc ._gd .addErrorWithDescription (_ccf ,_f .Sprintf ("\u0025\u0073\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0020\u0025\u0073\u0020\u0077\u0061\u0073\u0020\u0061d\u0064\u0065\u0064",_ccd ,_aeb ));};}else {_cdc ._gd .addErrorWithDescription (_ccf ,_f .Sprintf ("\u0025\u0073\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0020\u0025\u0073\u0020\u0077\u0061\u0073\u0020\u0061d\u0064\u0065\u0064",_ccd ,_aeb ));
};};}else {delete (_ac ,_aef .ObjectNumber );if _dge ,_bbc :=_cdc ._g [_aef .ObjectNumber ];_bbc {switch _cdc ._gb {case NoRestrictions ,FillFormsAndAnnots :_cdc ._gd .addWarningWithDescription (_ccf ,_f .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0063\u0068\u0061\u006eg\u0065\u0064",_ccd ,_aeb ));
default:_fbc ,_dab :=_e .GetIndirect (_dge );if !_dab {return _dg .New ("u\u006ed\u0065\u0066\u0069\u006e\u0065\u0064\u0020\u0061n\u006e\u006f\u0074\u0061ti\u006f\u006e");};_afg ,_dab :=_e .GetDict (_fbc .PdfObject );if !_dab {return _dg .New ("u\u006ed\u0065\u0066\u0069\u006e\u0065\u0064\u0020\u0061n\u006e\u006f\u0074\u0061ti\u006f\u006e");
};_fdf ,_dab :=_e .GetNameVal (_afg .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));if !_dab {return _dg .New ("\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064\u0020a\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0027\u0073\u0020\u0073\u0075\u0062\u0074\u0079\u0070\u0065");
};if _fdf =="\u0057\u0069\u0064\u0067\u0065\u0074"{switch _cdc ._gb {case NoRestrictions ,FillFormsAndAnnots ,FillForms :_cdc ._gd .addWarningWithDescription (_ccf ,_f .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0063\u0068\u0061\u006eg\u0065\u0064",_ccd ,_aeb ));
default:_cdc ._gd .addErrorWithDescription (_ccf ,_f .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0063\u0068\u0061\u006eg\u0065\u0064",_ccd ,_aeb ));};}else {_cdc ._gd .addErrorWithDescription (_ccf ,_f .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0063\u0068\u0061\u006eg\u0065\u0064",_ccd ,_aeb ));
};};};};};for _ ,_bdc :=range _ac {_cgb ,_ :=_e .GetStringVal (_bdc .Get ("\u0054"));_ea ,_ :=_e .GetNameVal (_bdc .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));switch _cdc ._gb {case NoRestrictions ,FillFormsAndAnnots :_cdc ._gd .addWarningWithDescription (_ccf ,_f .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0072\u0065\u006d\u006fv\u0065\u0064",_ea ,_cgb ));
default:_cdc ._gd .addErrorWithDescription (_ccf ,_f .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0072\u0065\u006d\u006fv\u0065\u0064",_ea ,_cgb ));};};return nil ;};func (_fdc *DiffResults )addWarning (_bee *DiffResult ){if _fdc .Warnings ==nil {_fdc .Warnings =make ([]*DiffResult ,0);
};_fdc .Warnings =append (_fdc .Warnings ,_bee );};

// DiffResult describes the warning or the error for the DiffPolicy results.
type DiffResult struct{Revision int ;Description string ;};func (_ccg *DiffResults )addWarningWithDescription (_acg int ,_daf string ){if _ccg .Warnings ==nil {_ccg .Warnings =make ([]*DiffResult ,0);};_ccg .Warnings =append (_ccg .Warnings ,&DiffResult {Revision :_acg ,Description :_daf });
};func _bf (_aea _e .PdfObject )([]_e .PdfObject ,error ){_gg :=make ([]_e .PdfObject ,0);if _aea !=nil {_df :=_aea ;if _efgad ,_gcdf :=_e .GetIndirect (_aea );_gcdf {_df =_efgad .PdfObject ;};if _dae ,_ede :=_e .GetArray (_df );_ede {_gg =_dae .Elements ();
}else {return nil ,_dg .New ("\u0075n\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0061n\u006eo\u0074s\u0027\u0020\u006f\u0062\u006a\u0065\u0063t");};};return _gg ,nil ;};func (_ecgc *DiffResults )addError (_fbg *DiffResult ){if _ecgc .Errors ==nil {_ecgc .Errors =make ([]*DiffResult ,0);
};_ecgc .Errors =append (_ecgc .Errors ,_fbg );};func (_dcbf *DiffResults )addErrorWithDescription (_bcef int ,_acf string ){if _dcbf .Errors ==nil {_dcbf .Errors =make ([]*DiffResult ,0);};_dcbf .Errors =append (_dcbf .Errors ,&DiffResult {Revision :_bcef ,Description :_acf });
};

// IsPermitted returns true if changes permitted.
func (_cbfg *DiffResults )IsPermitted ()bool {return len (_cbfg .Errors )==0};type defaultDiffPolicy struct{_g map[int64 ]_e .PdfObject ;_gd *DiffResults ;_gb DocMDPPermission ;};

// ReviewFile implementation of DiffPolicy interface
// The default policy only checks the next types of objects:
// Page, Pages (container for page objects), Annot, Annots (container for annotation objects), Field.
// It checks adding, removing and modifying objects of these types.
func (_fa *defaultDiffPolicy )ReviewFile (oldParser *_e .PdfParser ,newParser *_e .PdfParser ,params *MDPParameters )(*DiffResults ,error ){if oldParser .GetRevisionNumber ()> newParser .GetRevisionNumber (){return nil ,_dg .New ("\u006f\u006c\u0064\u0020\u0072\u0065\u0076\u0069\u0073\u0069\u006f\u006e\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u006e\u0065\u0077\u0020r\u0065\u0076i\u0073\u0069\u006f\u006e");
};if oldParser .GetRevisionNumber ()==newParser .GetRevisionNumber (){if oldParser !=newParser {return nil ,_dg .New ("\u0073\u0061m\u0065\u0020\u0072\u0065v\u0069\u0073i\u006f\u006e\u0073\u002c\u0020\u0062\u0075\u0074 \u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006e\u0074\u0020\u0070\u0061r\u0073\u0065\u0072\u0073");
};return &DiffResults {},nil ;};if params ==nil {_fa ._gb =NoRestrictions ;}else {_fa ._gb =params .DocMDPLevel ;};_eb :=&DiffResults {};for _a :=oldParser .GetRevisionNumber ()+1;_a <=newParser .GetRevisionNumber ();_a ++{_ec ,_c :=newParser .GetRevision (_a -1);
if _c !=nil {return nil ,_c ;};_ge ,_c :=newParser .GetRevision (_a );if _c !=nil {return nil ,_c ;};_ca ,_c :=_fa .compareRevisions (_ec ,_ge );if _c !=nil {return nil ,_c ;};_eb .Warnings =append (_eb .Warnings ,_ca .Warnings ...);_eb .Errors =append (_eb .Errors ,_ca .Errors ...);
};return _eb ,nil ;};func (_abb *defaultDiffPolicy )compareFields (_fac int ,_bc ,_cc []_e .PdfObject )error {_afb :=make (map[int64 ]*_e .PdfObjectDictionary );for _ ,_bb :=range _bc {_bec ,_cbg :=_e .GetIndirect (_bb );if !_cbg {return _dg .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0066\u0069\u0065\u006cd\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");
};_fd ,_cbg :=_e .GetDict (_bec .PdfObject );if !_cbg {return _dg .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_afb [_bec .ObjectNumber ]=_fd ;
};for _ ,_gc :=range _cc {_fae ,_cca :=_e .GetIndirect (_gc );if !_cca {return _dg .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0066\u0069\u0065\u006cd\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_ba ,_cca :=_e .GetDict (_fae .PdfObject );
if !_cca {return _dg .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0066\u0069\u0065\u006cd\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};T :=_ba .Get ("\u0054");if _ ,_gdg :=_abb ._g [_fae .ObjectNumber ];_gdg {switch _abb ._gb {case NoRestrictions ,FillForms ,FillFormsAndAnnots :_abb ._gd .addWarningWithDescription (_fac ,_f .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0063\u0068\u0061ng\u0065\u0064",T ));
default:_abb ._gd .addErrorWithDescription (_fac ,_f .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0063\u0068\u0061ng\u0065\u0064",T ));};};if _ ,_fg :=_afb [_fae .ObjectNumber ];!_fg {switch _abb ._gb {case NoRestrictions ,FillForms ,FillFormsAndAnnots :_abb ._gd .addWarningWithDescription (_fac ,_f .Sprintf ("\u0046i\u0065l\u0064\u0020\u0025\u0073\u0020w\u0061\u0073 \u0061\u0064\u0064\u0065\u0064",_ba .Get ("\u0054")));
default:_abb ._gd .addErrorWithDescription (_fac ,_f .Sprintf ("\u0046i\u0065l\u0064\u0020\u0025\u0073\u0020w\u0061\u0073 \u0061\u0064\u0064\u0065\u0064",_ba .Get ("\u0054")));};}else {delete (_afb ,_fae .ObjectNumber );if _ ,_gae :=_abb ._g [_fae .ObjectNumber ];
_gae {switch _abb ._gb {case NoRestrictions ,FillForms ,FillFormsAndAnnots :_abb ._gd .addWarningWithDescription (_fac ,_f .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0063\u0068\u0061ng\u0065\u0064",_ba .Get ("\u0054")));
default:_abb ._gd .addErrorWithDescription (_fac ,_f .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0063\u0068\u0061ng\u0065\u0064",_ba .Get ("\u0054")));};};};if FT ,_add :=_e .GetNameVal (_ba .Get ("\u0046\u0054"));_add {if FT =="\u0053\u0069\u0067"{if _bce ,_eeg :=_e .GetIndirect (_ba .Get ("\u0056"));
_eeg {if _ ,_bgg :=_abb ._g [_bce .ObjectNumber ];_bgg {switch _abb ._gb {case NoRestrictions ,FillForms ,FillFormsAndAnnots :_abb ._gd .addWarningWithDescription (_fac ,_f .Sprintf ("\u0053\u0069\u0067na\u0074\u0075\u0072\u0065\u0020\u0066\u006f\u0072\u0020%\u0073 \u0066i\u0065l\u0064\u0020\u0077\u0061\u0073\u0020\u0063\u0068\u0061\u006e\u0067\u0065\u0064",T ));
default:_abb ._gd .addErrorWithDescription (_fac ,_f .Sprintf ("\u0053\u0069\u0067na\u0074\u0075\u0072\u0065\u0020\u0066\u006f\u0072\u0020%\u0073 \u0066i\u0065l\u0064\u0020\u0077\u0061\u0073\u0020\u0063\u0068\u0061\u006e\u0067\u0065\u0064",T ));};};};};
};};for _ ,_dbf :=range _afb {switch _abb ._gb {case NoRestrictions :_abb ._gd .addWarningWithDescription (_fac ,_f .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0072\u0065\u006dov\u0065\u0064",_dbf .Get ("\u0054")));default:_abb ._gd .addErrorWithDescription (_fac ,_f .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0072\u0065\u006dov\u0065\u0064",_dbf .Get ("\u0054")));
};};return nil ;};

// DiffResults describes the results of the DiffPolicy.
type DiffResults struct{Warnings []*DiffResult ;Errors []*DiffResult ;};const (NoRestrictions DocMDPPermission =0;NoChanges DocMDPPermission =1;FillForms DocMDPPermission =2;FillFormsAndAnnots DocMDPPermission =3;);

// DocMDPPermission is values for set up access permissions for DocMDP.
// (Section 12.8.2.2, Table 254 - Entries in a signature dictionary p. 471 in PDF32000_2008).
type DocMDPPermission int64 ;

// MDPParameters describes parameters for the MDP checks (now only DocMDP).
type MDPParameters struct{DocMDPLevel DocMDPPermission ;};func (_ef *defaultDiffPolicy )comparePages (_abff int ,_bge ,_fce *_e .PdfIndirectObject )error {if _ ,_gag :=_ef ._g [_fce .ObjectNumber ];_gag {_ef ._gd .addErrorWithDescription (_abff ,"\u0050a\u0067e\u0073\u0020\u0077\u0065\u0072e\u0020\u0063h\u0061\u006e\u0067\u0065\u0064");
};_gbf ,_cdfd :=_e .GetDict (_fce .PdfObject );_fde ,_abc :=_e .GetDict (_bge .PdfObject );if !_cdfd ||!_abc {return _dg .New ("\u0075n\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0050\u0061g\u0065\u0073\u0027\u0020\u006f\u0062\u006a\u0065\u0063\u0074");
};_fdg ,_cdfd :=_e .GetArray (_gbf .Get ("\u004b\u0069\u0064\u0073"));_ebc ,_abc :=_e .GetArray (_fde .Get ("\u004b\u0069\u0064\u0073"));if !_cdfd ||!_abc {return _dg .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0050\u0061\u0067\u0065s\u0027 \u0064\u0069\u0063\u0074\u0069\u006f\u006ea\u0072\u0079");
};_efg :=_fdg .Len ();if _efg > _ebc .Len (){_efg =_ebc .Len ();};for _geb :=0;_geb < _efg ;_geb ++{_efga ,_fcf :=_e .GetIndirect (_e .ResolveReference (_ebc .Get (_geb )));_ce ,_gdc :=_e .GetIndirect (_e .ResolveReference (_fdg .Get (_geb )));if !_fcf ||!_gdc {return _dg .New ("\u0075\u006e\u0065\u0078pe\u0063\u0074\u0065\u0064\u0020\u0070\u0061\u0067\u0065\u0020\u006f\u0062\u006a\u0065c\u0074");
};if _efga .ObjectNumber !=_ce .ObjectNumber {_ef ._gd .addErrorWithDescription (_abff ,_f .Sprintf ("p\u0061\u0067\u0065\u0020#%\u0064 \u0077\u0061\u0073\u0020\u0072e\u0070\u006c\u0061\u0063\u0065\u0064",_geb ));};_gbc ,_fcf :=_e .GetDict (_ce );_bba ,_gdc :=_e .GetDict (_efga );
if !_fcf ||!_gdc {return _dg .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0070\u0061\u0067\u0065'\u0073 \u0064\u0069\u0063\u0074\u0069\u006f\u006ea\u0072\u0079");};_gab ,_fbd :=_bf (_gbc .Get ("\u0041\u006e\u006e\u006f\u0074\u0073"));
if _fbd !=nil {return _fbd ;};_de ,_fbd :=_bf (_bba .Get ("\u0041\u006e\u006e\u006f\u0074\u0073"));if _fbd !=nil {return _fbd ;};if _cab :=_ef .compareAnnots (_abff ,_de ,_gab );_cab !=nil {return _cab ;};};for _gce :=_efg +1;_gce <=_fdg .Len ();_gce ++{_ef ._gd .addErrorWithDescription (_abff ,_f .Sprintf ("\u0070a\u0067e\u0020\u0023\u0025\u0064\u0020w\u0061\u0073 \u0061\u0064\u0064\u0065\u0064",_gce ));
};for _dc :=_efg +1;_dc <=_ebc .Len ();_dc ++{_ef ._gd .addErrorWithDescription (_abff ,_f .Sprintf ("p\u0061g\u0065\u0020\u0023\u0025\u0064\u0020\u0077\u0061s\u0020\u0072\u0065\u006dov\u0065\u0064",_dc ));};return nil ;};

// String returns the state of the warning.
func (_fdfc *DiffResult )String ()string {return _f .Sprintf ("\u0025\u0073\u0020\u0069n \u0072\u0065\u0076\u0069\u0073\u0069\u006f\u006e\u0073\u0020\u0023\u0025\u0064",_fdfc .Description ,_fdfc .Revision );};func (_cd *defaultDiffPolicy )compareRevisions (_af *_e .PdfParser ,_ga *_e .PdfParser )(*DiffResults ,error ){var _ed error ;
_cd ._g ,_ed =_ga .GetUpdatedObjects (_af );if _ed !=nil {return &DiffResults {},_ed ;};if len (_cd ._g )==0{return &DiffResults {},nil ;};_b :=_ga .GetRevisionNumber ();_ag ,_ab :=_e .GetIndirect (_e .ResolveReference (_af .GetTrailer ().Get ("\u0052\u006f\u006f\u0074")));
_db ,_gbb :=_e .GetIndirect (_e .ResolveReference (_ga .GetTrailer ().Get ("\u0052\u006f\u006f\u0074")));if !_ab ||!_gbb {return &DiffResults {},_dg .New ("\u0065\u0072\u0072o\u0072\u0020\u0077\u0068i\u006c\u0065\u0020\u0067\u0065\u0074\u0074i\u006e\u0067\u0020\u0072\u006f\u006f\u0074\u0020\u006f\u0062\u006a\u0065\u0063\u0074");
};_cf ,_ab :=_e .GetDict (_e .ResolveReference (_ag .PdfObject ));_dbc ,_gbb :=_e .GetDict (_e .ResolveReference (_db .PdfObject ));if !_ab ||!_gbb {return &DiffResults {},_dg .New ("\u0065\u0072\u0072\u006f\u0072\u0020\u0077\u0068\u0069\u006c\u0065\u0020\u0067e\u0074\u0074\u0069\u006e\u0067\u0020a\u0020\u0072\u006f\u006f\u0074\u0027\u0073\u0020\u0064\u0069\u0063\u0074\u0069o\u006e\u0061\u0072\u0079");
};if _bg ,_fc :=_e .GetIndirect (_dbc .Get ("\u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d"));_fc {_cdf ,_eg :=_e .GetDict (_bg );if !_eg {return &DiffResults {},_dg .New ("\u0065\u0072\u0072\u006f\u0072 \u0077\u0068\u0069\u006c\u0065\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067 \u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d\u0027\u0073\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079");
};_bgb :=make ([]_e .PdfObject ,0);if _be ,_ae :=_e .GetIndirect (_cf .Get ("\u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d"));_ae {if _cb ,_agd :=_e .GetDict (_be );_agd {if _ad ,_ecg :=_e .GetArray (_cb .Get ("\u0046\u0069\u0065\u006c\u0064\u0073"));
_ecg {_bgb =_ad .Elements ();};};};_abf ,_eg :=_e .GetArray (_cdf .Get ("\u0046\u0069\u0065\u006c\u0064\u0073"));if !_eg {return &DiffResults {},_dg .New ("\u0065\u0072r\u006f\u0072\u0020\u0077h\u0069\u006ce\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067 \u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d\u0027\u0073\u0020\u0066i\u0065\u006c\u0064\u0073");
};if _dd :=_cd .compareFields (_b ,_bgb ,_abf .Elements ());_dd !=nil {return &DiffResults {},_dd ;};};_da ,_ddg :=_e .GetIndirect (_dbc .Get ("\u0050\u0061\u0067e\u0073"));if !_ddg {return &DiffResults {},_dg .New ("\u0065\u0072\u0072\u006f\u0072\u0020w\u0068\u0069\u006c\u0065\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020p\u0061\u0067\u0065\u0073\u0027\u0020\u006fb\u006a\u0065\u0063\u0074");
};_cg ,_ddg :=_e .GetIndirect (_cf .Get ("\u0050\u0061\u0067e\u0073"));if !_ddg {return &DiffResults {},_dg .New ("\u0065\u0072\u0072\u006f\u0072\u0020w\u0068\u0069\u006c\u0065\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020p\u0061\u0067\u0065\u0073\u0027\u0020\u006fb\u006a\u0065\u0063\u0074");
};if _ee :=_cd .comparePages (_b ,_cg ,_da );_ee !=nil {return &DiffResults {},_ee ;};return _cd ._gd ,nil ;};

// DiffPolicy interface for comparing two revisions of the Pdf document.
type DiffPolicy interface{

// ReviewFile should check the revisions of the old and new parsers
// and evaluate the differences between the revisions.
// Each implementation of this interface must decide
// how to handle cases where there are multiple revisions between the old and new revisions.
ReviewFile (_aeg *_e .PdfParser ,_fgc *_e .PdfParser ,_gf *MDPParameters )(*DiffResults ,error );};func NewDefaultDiffPolicy ()DiffPolicy {return &defaultDiffPolicy {_g :nil ,_gd :&DiffResults {},_gb :0};};