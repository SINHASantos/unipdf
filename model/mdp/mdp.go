//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package mdp ;import (_d "errors";_ea "fmt";_c "github.com/unidoc/unipdf/v3/core";);func (_gae *DiffResults )addErrorWithDescription (_fd int ,_dge string ){if _gae .Errors ==nil {_gae .Errors =make ([]*DiffResult ,0);};_gae .Errors =append (_gae .Errors ,&DiffResult {Revision :_fd ,Description :_dge });
};func (_abge *defaultDiffPolicy )compareAnnots (_dad int ,_ba ,_abef []_c .PdfObject )error {_fefe :=make (map[int64 ]*_c .PdfObjectDictionary );for _ ,_egg :=range _ba {_geb ,_ffe :=_c .GetIndirect (_egg );if !_ffe {return _d .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");
};_dcb ,_ffe :=_c .GetDict (_geb .PdfObject );if !_ffe {return _d .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_fefe [_geb .ObjectNumber ]=_dcb ;
};for _ ,_adg :=range _abef {_dba ,_bbfb :=_c .GetIndirect (_adg );if !_bbfb {return _d .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_aca ,_bbfb :=_c .GetDict (_dba .PdfObject );
if !_bbfb {return _d .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_fc ,_ :=_c .GetStringVal (_aca .Get ("\u0054"));_faeg ,_ :=_c .GetNameVal (_aca .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));
if _ ,_aag :=_fefe [_dba .ObjectNumber ];!_aag {switch _abge ._ef {case NoRestrictions ,FillFormsAndAnnots :_abge ._fa .addWarningWithDescription (_dad ,_ea .Sprintf ("\u0025\u0073\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0020\u0025\u0073\u0020\u0077\u0061\u0073\u0020\u0061d\u0064\u0065\u0064",_faeg ,_fc ));
default:_gec ,_dec :=_c .GetDict (_dba .PdfObject );if !_dec {return _d .New ("u\u006ed\u0065\u0066\u0069\u006e\u0065\u0064\u0020\u0061n\u006e\u006f\u0074\u0061ti\u006f\u006e");};_cec ,_dec :=_c .GetNameVal (_gec .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));
if !_dec {return _d .New ("\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064\u0020a\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0027\u0073\u0020\u0073\u0075\u0062\u0074\u0079\u0070\u0065");};if _cec =="\u0057\u0069\u0064\u0067\u0065\u0074"{switch _abge ._ef {case NoRestrictions ,FillFormsAndAnnots ,FillForms :_abge ._fa .addWarningWithDescription (_dad ,_ea .Sprintf ("\u0025\u0073\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0020\u0025\u0073\u0020\u0077\u0061\u0073\u0020\u0061d\u0064\u0065\u0064",_faeg ,_fc ));
default:_abge ._fa .addErrorWithDescription (_dad ,_ea .Sprintf ("\u0025\u0073\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0020\u0025\u0073\u0020\u0077\u0061\u0073\u0020\u0061d\u0064\u0065\u0064",_faeg ,_fc ));};}else {_abge ._fa .addErrorWithDescription (_dad ,_ea .Sprintf ("\u0025\u0073\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0020\u0025\u0073\u0020\u0077\u0061\u0073\u0020\u0061d\u0064\u0065\u0064",_faeg ,_fc ));
};};}else {delete (_fefe ,_dba .ObjectNumber );if _ffcbe ,_ffba :=_abge ._f [_dba .ObjectNumber ];_ffba {switch _abge ._ef {case NoRestrictions ,FillFormsAndAnnots :_abge ._fa .addWarningWithDescription (_dad ,_ea .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0063\u0068\u0061\u006eg\u0065\u0064",_faeg ,_fc ));
default:_gg ,_ebge :=_c .GetIndirect (_ffcbe );if !_ebge {return _d .New ("u\u006ed\u0065\u0066\u0069\u006e\u0065\u0064\u0020\u0061n\u006e\u006f\u0074\u0061ti\u006f\u006e");};_def ,_ebge :=_c .GetDict (_gg .PdfObject );if !_ebge {return _d .New ("u\u006ed\u0065\u0066\u0069\u006e\u0065\u0064\u0020\u0061n\u006e\u006f\u0074\u0061ti\u006f\u006e");
};_cgb ,_ebge :=_c .GetNameVal (_def .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));if !_ebge {return _d .New ("\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064\u0020a\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0027\u0073\u0020\u0073\u0075\u0062\u0074\u0079\u0070\u0065");
};if _cgb =="\u0057\u0069\u0064\u0067\u0065\u0074"{switch _abge ._ef {case NoRestrictions ,FillFormsAndAnnots ,FillForms :_abge ._fa .addWarningWithDescription (_dad ,_ea .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0063\u0068\u0061\u006eg\u0065\u0064",_faeg ,_fc ));
default:_abge ._fa .addErrorWithDescription (_dad ,_ea .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0063\u0068\u0061\u006eg\u0065\u0064",_faeg ,_fc ));};}else {_abge ._fa .addErrorWithDescription (_dad ,_ea .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0063\u0068\u0061\u006eg\u0065\u0064",_faeg ,_fc ));
};};};};};for _ ,_ddbg :=range _fefe {_abcg ,_ :=_c .GetStringVal (_ddbg .Get ("\u0054"));_gfe ,_ :=_c .GetNameVal (_ddbg .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));switch _abge ._ef {case NoRestrictions ,FillFormsAndAnnots :_abge ._fa .addWarningWithDescription (_dad ,_ea .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0072\u0065\u006d\u006fv\u0065\u0064",_gfe ,_abcg ));
default:_abge ._fa .addErrorWithDescription (_dad ,_ea .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0072\u0065\u006d\u006fv\u0065\u0064",_gfe ,_abcg ));};};return nil ;};func (_gag *DiffResults )addWarning (_accd *DiffResult ){if _gag .Warnings ==nil {_gag .Warnings =make ([]*DiffResult ,0);
};_gag .Warnings =append (_gag .Warnings ,_accd );};

// MDPParameters describes parameters for the MDP checks (now only DocMDP).
type MDPParameters struct{DocMDPLevel DocMDPPermission ;};

// String returns the state of the warning.
func (_abba *DiffResult )String ()string {return _ea .Sprintf ("\u0025\u0073\u0020\u0069n \u0072\u0065\u0076\u0069\u0073\u0069\u006f\u006e\u0073\u0020\u0023\u0025\u0064",_abba .Description ,_abba .Revision );};func (_cdf *DiffResults )addError (_cda *DiffResult ){if _cdf .Errors ==nil {_cdf .Errors =make ([]*DiffResult ,0);
};_cdf .Errors =append (_cdf .Errors ,_cda );};

// ReviewFile implementation of DiffPolicy interface
// The default policy only checks the next types of objects:
// Page, Pages (container for page objects), Annot, Annots (container for annotation objects), Field.
// It checks adding, removing and modifying objects of these types.
func (_eb *defaultDiffPolicy )ReviewFile (oldParser *_c .PdfParser ,newParser *_c .PdfParser ,params *MDPParameters )(*DiffResults ,error ){if oldParser .GetRevisionNumber ()> newParser .GetRevisionNumber (){return nil ,_d .New ("\u006f\u006c\u0064\u0020\u0072\u0065\u0076\u0069\u0073\u0069\u006f\u006e\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u006e\u0065\u0077\u0020r\u0065\u0076i\u0073\u0069\u006f\u006e");
};if oldParser .GetRevisionNumber ()==newParser .GetRevisionNumber (){if oldParser !=newParser {return nil ,_d .New ("\u0073\u0061m\u0065\u0020\u0072\u0065v\u0069\u0073i\u006f\u006e\u0073\u002c\u0020\u0062\u0075\u0074 \u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006e\u0074\u0020\u0070\u0061r\u0073\u0065\u0072\u0073");
};return &DiffResults {},nil ;};if params ==nil {_eb ._ef =NoRestrictions ;}else {_eb ._ef =params .DocMDPLevel ;};_fg :=&DiffResults {};for _g :=oldParser .GetRevisionNumber ()+1;_g <=newParser .GetRevisionNumber ();_g ++{_da ,_ca :=newParser .GetRevision (_g -1);
if _ca !=nil {return nil ,_ca ;};_a ,_ca :=newParser .GetRevision (_g );if _ca !=nil {return nil ,_ca ;};_dc ,_ca :=_eb .compareRevisions (_da ,_a );if _ca !=nil {return nil ,_ca ;};_fg .Warnings =append (_fg .Warnings ,_dc .Warnings ...);_fg .Errors =append (_fg .Errors ,_dc .Errors ...);
};return _fg ,nil ;};func (_aad *DiffResults )addWarningWithDescription (_fdd int ,_fbc string ){if _aad .Warnings ==nil {_aad .Warnings =make ([]*DiffResult ,0);};_aad .Warnings =append (_aad .Warnings ,&DiffResult {Revision :_fdd ,Description :_fbc });
};

// DiffResult describes the warning or the error for the DiffPolicy results.
type DiffResult struct{Revision int ;Description string ;};func (_ge *defaultDiffPolicy )compareRevisions (_cc *_c .PdfParser ,_ff *_c .PdfParser )(*DiffResults ,error ){var _ccb error ;_ge ._f ,_ccb =_ff .GetUpdatedObjects (_cc );if _ccb !=nil {return &DiffResults {},_ccb ;
};if len (_ge ._f )==0{return &DiffResults {},nil ;};_ebg :=_ff .GetRevisionNumber ();_dab ,_cf :=_c .GetIndirect (_c .ResolveReference (_cc .GetTrailer ().Get ("\u0052\u006f\u006f\u0074")));_ad ,_fb :=_c .GetIndirect (_c .ResolveReference (_ff .GetTrailer ().Get ("\u0052\u006f\u006f\u0074")));
if !_cf ||!_fb {return &DiffResults {},_d .New ("\u0065\u0072\u0072o\u0072\u0020\u0077\u0068i\u006c\u0065\u0020\u0067\u0065\u0074\u0074i\u006e\u0067\u0020\u0072\u006f\u006f\u0074\u0020\u006f\u0062\u006a\u0065\u0063\u0074");};_gb ,_cf :=_c .GetDict (_c .ResolveReference (_dab .PdfObject ));
_dd ,_fb :=_c .GetDict (_c .ResolveReference (_ad .PdfObject ));if !_cf ||!_fb {return &DiffResults {},_d .New ("\u0065\u0072\u0072\u006f\u0072\u0020\u0077\u0068\u0069\u006c\u0065\u0020\u0067e\u0074\u0074\u0069\u006e\u0067\u0020a\u0020\u0072\u006f\u006f\u0074\u0027\u0073\u0020\u0064\u0069\u0063\u0074\u0069o\u006e\u0061\u0072\u0079");
};if _ab ,_abd :=_c .GetIndirect (_dd .Get ("\u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d"));_abd {_abb ,_ffc :=_c .GetDict (_ab );if !_ffc {return &DiffResults {},_d .New ("\u0065\u0072\u0072\u006f\u0072 \u0077\u0068\u0069\u006c\u0065\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067 \u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d\u0027\u0073\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079");
};_gbf :=make ([]_c .PdfObject ,0);if _cg ,_ddb :=_c .GetIndirect (_gb .Get ("\u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d"));_ddb {if _dca ,_b :=_c .GetDict (_cg );_b {if _cge ,_faa :=_c .GetArray (_dca .Get ("\u0046\u0069\u0065\u006c\u0064\u0073"));
_faa {_gbf =_cge .Elements ();};};};_abg ,_ffc :=_c .GetArray (_abb .Get ("\u0046\u0069\u0065\u006c\u0064\u0073"));if !_ffc {return &DiffResults {},_d .New ("\u0065\u0072r\u006f\u0072\u0020\u0077h\u0069\u006ce\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067 \u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d\u0027\u0073\u0020\u0066i\u0065\u006c\u0064\u0073");
};if _bc :=_ge .compareFields (_ebg ,_gbf ,_abg .Elements ());_bc !=nil {return &DiffResults {},_bc ;};};_bg ,_fae :=_c .GetIndirect (_dd .Get ("\u0050\u0061\u0067e\u0073"));if !_fae {return &DiffResults {},_d .New ("\u0065\u0072\u0072\u006f\u0072\u0020w\u0068\u0069\u006c\u0065\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020p\u0061\u0067\u0065\u0073\u0027\u0020\u006fb\u006a\u0065\u0063\u0074");
};_ffcb ,_fae :=_c .GetIndirect (_gb .Get ("\u0050\u0061\u0067e\u0073"));if !_fae {return &DiffResults {},_d .New ("\u0065\u0072\u0072\u006f\u0072\u0020w\u0068\u0069\u006c\u0065\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020p\u0061\u0067\u0065\u0073\u0027\u0020\u006fb\u006a\u0065\u0063\u0074");
};if _db :=_ge .comparePages (_ebg ,_ffcb ,_bg );_db !=nil {return &DiffResults {},_db ;};return _ge ._fa ,nil ;};

// DocMDPPermission is values for set up access permissions for DocMDP.
// (Section 12.8.2.2, Table 254 - Entries in a signature dictionary p. 471 in PDF32000_2008).
type DocMDPPermission int64 ;const (NoRestrictions DocMDPPermission =0;NoChanges DocMDPPermission =1;FillForms DocMDPPermission =2;FillFormsAndAnnots DocMDPPermission =3;);type defaultDiffPolicy struct{_f map[int64 ]_c .PdfObject ;_fa *DiffResults ;_ef DocMDPPermission ;
};func (_bcc *defaultDiffPolicy )comparePages (_ce int ,_fed ,_ac *_c .PdfIndirectObject )error {if _ ,_abbf :=_bcc ._f [_ac .ObjectNumber ];_abbf {_bcc ._fa .addErrorWithDescription (_ce ,"\u0050a\u0067e\u0073\u0020\u0077\u0065\u0072e\u0020\u0063h\u0061\u006e\u0067\u0065\u0064");
};_ec ,_acg :=_c .GetDict (_ac .PdfObject );_gbab ,_cbc :=_c .GetDict (_fed .PdfObject );if !_acg ||!_cbc {return _d .New ("\u0075n\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0050\u0061g\u0065\u0073\u0027\u0020\u006f\u0062\u006a\u0065\u0063\u0074");
};_edg ,_acg :=_c .GetArray (_ec .Get ("\u004b\u0069\u0064\u0073"));_ccbe ,_cbc :=_c .GetArray (_gbab .Get ("\u004b\u0069\u0064\u0073"));if !_acg ||!_cbc {return _d .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0050\u0061\u0067\u0065s\u0027 \u0064\u0069\u0063\u0074\u0069\u006f\u006ea\u0072\u0079");
};_abe :=_edg .Len ();if _abe > _ccbe .Len (){_abe =_ccbe .Len ();};for _cfd :=0;_cfd < _abe ;_cfd ++{_egda ,_eae :=_c .GetIndirect (_c .ResolveReference (_ccbe .Get (_cfd )));_ag ,_af :=_c .GetIndirect (_c .ResolveReference (_edg .Get (_cfd )));if !_eae ||!_af {return _d .New ("\u0075\u006e\u0065\u0078pe\u0063\u0074\u0065\u0064\u0020\u0070\u0061\u0067\u0065\u0020\u006f\u0062\u006a\u0065c\u0074");
};if _egda .ObjectNumber !=_ag .ObjectNumber {_bcc ._fa .addErrorWithDescription (_ce ,_ea .Sprintf ("p\u0061\u0067\u0065\u0020#%\u0064 \u0077\u0061\u0073\u0020\u0072e\u0070\u006c\u0061\u0063\u0065\u0064",_cfd ));};_ddg ,_eae :=_c .GetDict (_ag );_abc ,_af :=_c .GetDict (_egda );
if !_eae ||!_af {return _d .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0070\u0061\u0067\u0065'\u0073 \u0064\u0069\u0063\u0074\u0069\u006f\u006ea\u0072\u0079");};_ada ,_gd :=_df (_ddg .Get ("\u0041\u006e\u006e\u006f\u0074\u0073"));
if _gd !=nil {return _gd ;};_ffb ,_gd :=_df (_abc .Get ("\u0041\u006e\u006e\u006f\u0074\u0073"));if _gd !=nil {return _gd ;};if _ecf :=_bcc .compareAnnots (_ce ,_ffb ,_ada );_ecf !=nil {return _ecf ;};};for _fec :=_abe +1;_fec <=_edg .Len ();_fec ++{_bcc ._fa .addErrorWithDescription (_ce ,_ea .Sprintf ("\u0070a\u0067e\u0020\u0023\u0025\u0064\u0020w\u0061\u0073 \u0061\u0064\u0064\u0065\u0064",_fec ));
};for _be :=_abe +1;_be <=_ccbe .Len ();_be ++{_bcc ._fa .addErrorWithDescription (_ce ,_ea .Sprintf ("p\u0061g\u0065\u0020\u0023\u0025\u0064\u0020\u0077\u0061s\u0020\u0072\u0065\u006dov\u0065\u0064",_be ));};return nil ;};func _df (_efg _c .PdfObject )([]_c .PdfObject ,error ){_dbg :=make ([]_c .PdfObject ,0);
if _efg !=nil {_bga :=_efg ;if _eca ,_dgd :=_c .GetIndirect (_efg );_dgd {_bga =_eca .PdfObject ;};if _bgd ,_bag :=_c .GetArray (_bga );_bag {_dbg =_bgd .Elements ();}else {return nil ,_d .New ("\u0075n\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0061n\u006eo\u0074s\u0027\u0020\u006f\u0062\u006a\u0065\u0063t");
};};return _dbg ,nil ;};

// DiffPolicy interface for comparing two revisions of the Pdf document.
type DiffPolicy interface{

// ReviewFile should check the revisions of the old and new parsers
// and evaluate the differences between the revisions.
// Each implementation of this interface must decide
// how to handle cases where there are multiple revisions between the old and new revisions.
ReviewFile (_cef *_c .PdfParser ,_bba *_c .PdfParser ,_bgb *MDPParameters )(*DiffResults ,error );};

// IsPermitted returns true if changes permitted.
func (_ecc *DiffResults )IsPermitted ()bool {return len (_ecc .Errors )==0};func NewDefaultDiffPolicy ()DiffPolicy {return &defaultDiffPolicy {_f :nil ,_fa :&DiffResults {},_ef :0};};func (_fgb *defaultDiffPolicy )compareFields (_de int ,_eg ,_ga []_c .PdfObject )error {_dg :=make (map[int64 ]*_c .PdfObjectDictionary );
for _ ,_ccg :=range _eg {_aa ,_cbb :=_c .GetIndirect (_ccg );if !_cbb {return _d .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0066\u0069\u0065\u006cd\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_egd ,_cbb :=_c .GetDict (_aa .PdfObject );
if !_cbb {return _d .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_dg [_aa .ObjectNumber ]=_egd ;};for _ ,_cbd :=range _ga {_fef ,_gad :=_c .GetIndirect (_cbd );
if !_gad {return _d .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0066\u0069\u0065\u006cd\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_efb ,_gad :=_c .GetDict (_fef .PdfObject );if !_gad {return _d .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0066\u0069\u0065\u006cd\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");
};T :=_efb .Get ("\u0054");if _ ,_aaa :=_fgb ._f [_fef .ObjectNumber ];_aaa {switch _fgb ._ef {case NoRestrictions ,FillForms ,FillFormsAndAnnots :_fgb ._fa .addWarningWithDescription (_de ,_ea .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0063\u0068\u0061ng\u0065\u0064",T ));
default:_fgb ._fa .addErrorWithDescription (_de ,_ea .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0063\u0068\u0061ng\u0065\u0064",T ));};};if _ ,_cbdf :=_dg [_fef .ObjectNumber ];!_cbdf {switch _fgb ._ef {case NoRestrictions ,FillForms ,FillFormsAndAnnots :_fgb ._fa .addWarningWithDescription (_de ,_ea .Sprintf ("\u0046i\u0065l\u0064\u0020\u0025\u0073\u0020w\u0061\u0073 \u0061\u0064\u0064\u0065\u0064",_efb .Get ("\u0054")));
default:_fgb ._fa .addErrorWithDescription (_de ,_ea .Sprintf ("\u0046i\u0065l\u0064\u0020\u0025\u0073\u0020w\u0061\u0073 \u0061\u0064\u0064\u0065\u0064",_efb .Get ("\u0054")));};}else {delete (_dg ,_fef .ObjectNumber );if _ ,_bb :=_fgb ._f [_fef .ObjectNumber ];
_bb {switch _fgb ._ef {case NoRestrictions ,FillForms ,FillFormsAndAnnots :_fgb ._fa .addWarningWithDescription (_de ,_ea .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0063\u0068\u0061ng\u0065\u0064",_efb .Get ("\u0054")));
default:_fgb ._fa .addErrorWithDescription (_de ,_ea .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0063\u0068\u0061ng\u0065\u0064",_efb .Get ("\u0054")));};};};if FT ,_ae :=_c .GetNameVal (_efb .Get ("\u0046\u0054"));_ae {if FT =="\u0053\u0069\u0067"{if _bbe ,_adb :=_c .GetIndirect (_efb .Get ("\u0056"));
_adb {if _ ,_fbf :=_fgb ._f [_bbe .ObjectNumber ];_fbf {switch _fgb ._ef {case NoRestrictions ,FillForms ,FillFormsAndAnnots :_fgb ._fa .addWarningWithDescription (_de ,_ea .Sprintf ("\u0053\u0069\u0067na\u0074\u0075\u0072\u0065\u0020\u0066\u006f\u0072\u0020%\u0073 \u0066i\u0065l\u0064\u0020\u0077\u0061\u0073\u0020\u0063\u0068\u0061\u006e\u0067\u0065\u0064",T ));
default:_fgb ._fa .addErrorWithDescription (_de ,_ea .Sprintf ("\u0053\u0069\u0067na\u0074\u0075\u0072\u0065\u0020\u0066\u006f\u0072\u0020%\u0073 \u0066i\u0065l\u0064\u0020\u0077\u0061\u0073\u0020\u0063\u0068\u0061\u006e\u0067\u0065\u0064",T ));};};};};
};};for _ ,_dee :=range _dg {switch _fgb ._ef {case NoRestrictions :_fgb ._fa .addWarningWithDescription (_de ,_ea .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0072\u0065\u006dov\u0065\u0064",_dee .Get ("\u0054")));default:_fgb ._fa .addErrorWithDescription (_de ,_ea .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0072\u0065\u006dov\u0065\u0064",_dee .Get ("\u0054")));
};};return nil ;};

// DiffResults describes the results of the DiffPolicy.
type DiffResults struct{Warnings []*DiffResult ;Errors []*DiffResult ;};