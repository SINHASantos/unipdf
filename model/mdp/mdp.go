//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package mdp ;import (_a "errors";_d "fmt";_cc "github.com/unidoc/unipdf/v3/core";);func (_ffb *defaultDiffPolicy )comparePages (_gdd int ,_fc ,_fag *_cc .PdfIndirectObject )error {if _ ,_ede :=_ffb ._g [_fag .ObjectNumber ];_ede {_ffb ._df .addErrorWithDescription (_gdd ,"\u0050a\u0067e\u0073\u0020\u0077\u0065\u0072e\u0020\u0063h\u0061\u006e\u0067\u0065\u0064");
};_dc ,_fg :=_cc .GetDict (_fag .PdfObject );_gg ,_ea :=_cc .GetDict (_fc .PdfObject );if !_fg ||!_ea {return _a .New ("\u0075n\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0050\u0061g\u0065\u0073\u0027\u0020\u006f\u0062\u006a\u0065\u0063\u0074");
};_cee ,_fg :=_cc .GetArray (_dc .Get ("\u004b\u0069\u0064\u0073"));_gcf ,_ea :=_cc .GetArray (_gg .Get ("\u004b\u0069\u0064\u0073"));if !_fg ||!_ea {return _a .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0050\u0061\u0067\u0065s\u0027 \u0064\u0069\u0063\u0074\u0069\u006f\u006ea\u0072\u0079");
};_dab :=_cee .Len ();if _dab > _gcf .Len (){_dab =_gcf .Len ();};for _gfg :=0;_gfg < _dab ;_gfg ++{_eeb ,_eba :=_cc .GetIndirect (_cc .ResolveReference (_gcf .Get (_gfg )));_fce ,_ggd :=_cc .GetIndirect (_cc .ResolveReference (_cee .Get (_gfg )));if !_eba ||!_ggd {return _a .New ("\u0075\u006e\u0065\u0078pe\u0063\u0074\u0065\u0064\u0020\u0070\u0061\u0067\u0065\u0020\u006f\u0062\u006a\u0065c\u0074");
};if _eeb .ObjectNumber !=_fce .ObjectNumber {_ffb ._df .addErrorWithDescription (_gdd ,_d .Sprintf ("p\u0061\u0067\u0065\u0020#%\u0064 \u0077\u0061\u0073\u0020\u0072e\u0070\u006c\u0061\u0063\u0065\u0064",_gfg ));};_gdg ,_eba :=_cc .GetDict (_fce );_ded ,_ggd :=_cc .GetDict (_eeb );
if !_eba ||!_ggd {return _a .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0070\u0061\u0067\u0065'\u0073 \u0064\u0069\u0063\u0074\u0069\u006f\u006ea\u0072\u0079");};_dce ,_eff :=_afa (_gdg .Get ("\u0041\u006e\u006e\u006f\u0074\u0073"));
if _eff !=nil {return _eff ;};_bce ,_eff :=_afa (_ded .Get ("\u0041\u006e\u006e\u006f\u0074\u0073"));if _eff !=nil {return _eff ;};if _bdd :=_ffb .compareAnnots (_gdd ,_bce ,_dce );_bdd !=nil {return _bdd ;};};for _dba :=_dab +1;_dba <=_cee .Len ();_dba ++{_ffb ._df .addErrorWithDescription (_gdd ,_d .Sprintf ("\u0070a\u0067e\u0020\u0023\u0025\u0064\u0020w\u0061\u0073 \u0061\u0064\u0064\u0065\u0064",_dba ));
};for _daa :=_dab +1;_daa <=_gcf .Len ();_daa ++{_ffb ._df .addErrorWithDescription (_gdd ,_d .Sprintf ("p\u0061g\u0065\u0020\u0023\u0025\u0064\u0020\u0077\u0061s\u0020\u0072\u0065\u006dov\u0065\u0064",_daa ));};return nil ;};type defaultDiffPolicy struct{_g map[int64 ]_cc .PdfObject ;
_df *DiffResults ;_b DocMDPPermission ;};

// DiffResults describes the results of the DiffPolicy.
type DiffResults struct{Warnings []*DiffResult ;Errors []*DiffResult ;};func NewDefaultDiffPolicy ()DiffPolicy {return &defaultDiffPolicy {_g :nil ,_df :&DiffResults {},_b :0};};

// DocMDPPermission is values for set up access permissions for DocMDP.
// (Section 12.8.2.2, Table 254 - Entries in a signature dictionary p. 471 in PDF32000_2008).
type DocMDPPermission int64 ;func (_cd *defaultDiffPolicy )compareRevisions (_eb *_cc .PdfParser ,_acf *_cc .PdfParser )(*DiffResults ,error ){var _fd error ;_cd ._g ,_fd =_acf .GetUpdatedObjects (_eb );if _fd !=nil {return &DiffResults {},_fd ;};if len (_cd ._g )==0{return &DiffResults {},nil ;
};_dfa :=_acf .GetRevisionNumber ();_ga ,_ee :=_cc .GetIndirect (_cc .ResolveReference (_eb .GetTrailer ().Get ("\u0052\u006f\u006f\u0074")));_ebg ,_ag :=_cc .GetIndirect (_cc .ResolveReference (_acf .GetTrailer ().Get ("\u0052\u006f\u006f\u0074")));if !_ee ||!_ag {return &DiffResults {},_a .New ("\u0065\u0072\u0072o\u0072\u0020\u0077\u0068i\u006c\u0065\u0020\u0067\u0065\u0074\u0074i\u006e\u0067\u0020\u0072\u006f\u006f\u0074\u0020\u006f\u0062\u006a\u0065\u0063\u0074");
};_bd ,_ee :=_cc .GetDict (_cc .ResolveReference (_ga .PdfObject ));_ef ,_ag :=_cc .GetDict (_cc .ResolveReference (_ebg .PdfObject ));if !_ee ||!_ag {return &DiffResults {},_a .New ("\u0065\u0072\u0072\u006f\u0072\u0020\u0077\u0068\u0069\u006c\u0065\u0020\u0067e\u0074\u0074\u0069\u006e\u0067\u0020a\u0020\u0072\u006f\u006f\u0074\u0027\u0073\u0020\u0064\u0069\u0063\u0074\u0069o\u006e\u0061\u0072\u0079");
};if _ed ,_ae :=_cc .GetIndirect (_ef .Get ("\u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d"));_ae {_bc ,_ge :=_cc .GetDict (_ed );if !_ge {return &DiffResults {},_a .New ("\u0065\u0072\u0072\u006f\u0072 \u0077\u0068\u0069\u006c\u0065\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067 \u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d\u0027\u0073\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079");
};_ff :=make ([]_cc .PdfObject ,0);if _gc ,_bdb :=_cc .GetIndirect (_bd .Get ("\u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d"));_bdb {if _aga ,_dd :=_cc .GetDict (_gc );_dd {if _fb ,_af :=_cc .GetArray (_aga .Get ("\u0046\u0069\u0065\u006c\u0064\u0073"));
_af {_ff =_fb .Elements ();};};};_dfg ,_ge :=_cc .GetArray (_bc .Get ("\u0046\u0069\u0065\u006c\u0064\u0073"));if !_ge {return &DiffResults {},_a .New ("\u0065\u0072r\u006f\u0072\u0020\u0077h\u0069\u006ce\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067 \u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d\u0027\u0073\u0020\u0066i\u0065\u006c\u0064\u0073");
};if _eg :=_cd .compareFields (_dfa ,_ff ,_dfg .Elements ());_eg !=nil {return &DiffResults {},_eg ;};};_fbg ,_gcc :=_cc .GetIndirect (_ef .Get ("\u0050\u0061\u0067e\u0073"));if !_gcc {return &DiffResults {},_a .New ("\u0065\u0072\u0072\u006f\u0072\u0020w\u0068\u0069\u006c\u0065\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020p\u0061\u0067\u0065\u0073\u0027\u0020\u006fb\u006a\u0065\u0063\u0074");
};_be ,_gcc :=_cc .GetIndirect (_bd .Get ("\u0050\u0061\u0067e\u0073"));if !_gcc {return &DiffResults {},_a .New ("\u0065\u0072\u0072\u006f\u0072\u0020w\u0068\u0069\u006c\u0065\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020p\u0061\u0067\u0065\u0073\u0027\u0020\u006fb\u006a\u0065\u0063\u0074");
};if _ebga :=_cd .comparePages (_dfa ,_be ,_fbg );_ebga !=nil {return &DiffResults {},_ebga ;};return _cd ._df ,nil ;};func (_faf *DiffResults )addWarning (_dbac *DiffResult ){if _faf .Warnings ==nil {_faf .Warnings =make ([]*DiffResult ,0);};_faf .Warnings =append (_faf .Warnings ,_dbac );
};func (_db *defaultDiffPolicy )compareFields (_cda int ,_agg ,_bb []_cc .PdfObject )error {_gf :=make (map[int64 ]*_cc .PdfObjectDictionary );for _ ,_eef :=range _agg {_acg ,_bed :=_cc .GetIndirect (_eef );if !_bed {return _a .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0066\u0069\u0065\u006cd\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");
};_ca ,_bed :=_cc .GetDict (_acg .PdfObject );if !_bed {return _a .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_gf [_acg .ObjectNumber ]=_ca ;
};for _ ,_ce :=range _bb {_gd ,_de :=_cc .GetIndirect (_ce );if !_de {return _a .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0066\u0069\u0065\u006cd\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_egb ,_de :=_cc .GetDict (_gd .PdfObject );
if !_de {return _a .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0066\u0069\u0065\u006cd\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};T :=_egb .Get ("\u0054");if _ ,_bga :=_db ._g [_gd .ObjectNumber ];_bga {switch _db ._b {case NoRestrictions ,FillForms ,FillFormsAndAnnots :_db ._df .addWarningWithDescription (_cda ,_d .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0063\u0068\u0061ng\u0065\u0064",T ));
default:_db ._df .addErrorWithDescription (_cda ,_d .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0063\u0068\u0061ng\u0065\u0064",T ));};};if _ ,_gee :=_gf [_gd .ObjectNumber ];!_gee {switch _db ._b {case NoRestrictions ,FillForms ,FillFormsAndAnnots :_db ._df .addWarningWithDescription (_cda ,_d .Sprintf ("\u0046i\u0065l\u0064\u0020\u0025\u0073\u0020w\u0061\u0073 \u0061\u0064\u0064\u0065\u0064",_egb .Get ("\u0054")));
default:_db ._df .addErrorWithDescription (_cda ,_d .Sprintf ("\u0046i\u0065l\u0064\u0020\u0025\u0073\u0020w\u0061\u0073 \u0061\u0064\u0064\u0065\u0064",_egb .Get ("\u0054")));};}else {delete (_gf ,_gd .ObjectNumber );if _ ,_acc :=_db ._g [_gd .ObjectNumber ];
_acc {switch _db ._b {case NoRestrictions ,FillForms ,FillFormsAndAnnots :_db ._df .addWarningWithDescription (_cda ,_d .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0063\u0068\u0061ng\u0065\u0064",_egb .Get ("\u0054")));default:_db ._df .addErrorWithDescription (_cda ,_d .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0063\u0068\u0061ng\u0065\u0064",_egb .Get ("\u0054")));
};};};if FT ,_eeg :=_cc .GetNameVal (_egb .Get ("\u0046\u0054"));_eeg {if FT =="\u0053\u0069\u0067"{if _fa ,_cg :=_cc .GetIndirect (_egb .Get ("\u0056"));_cg {if _ ,_dbg :=_db ._g [_fa .ObjectNumber ];_dbg {switch _db ._b {case NoRestrictions ,FillForms ,FillFormsAndAnnots :_db ._df .addWarningWithDescription (_cda ,_d .Sprintf ("\u0053\u0069\u0067na\u0074\u0075\u0072\u0065\u0020\u0066\u006f\u0072\u0020%\u0073 \u0066i\u0065l\u0064\u0020\u0077\u0061\u0073\u0020\u0063\u0068\u0061\u006e\u0067\u0065\u0064",T ));
default:_db ._df .addErrorWithDescription (_cda ,_d .Sprintf ("\u0053\u0069\u0067na\u0074\u0075\u0072\u0065\u0020\u0066\u006f\u0072\u0020%\u0073 \u0066i\u0065l\u0064\u0020\u0077\u0061\u0073\u0020\u0063\u0068\u0061\u006e\u0067\u0065\u0064",T ));};};};};
};};for _ ,_aggg :=range _gf {switch _db ._b {case NoRestrictions :_db ._df .addWarningWithDescription (_cda ,_d .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0072\u0065\u006dov\u0065\u0064",_aggg .Get ("\u0054")));default:_db ._df .addErrorWithDescription (_cda ,_d .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0072\u0065\u006dov\u0065\u0064",_aggg .Get ("\u0054")));
};};return nil ;};

// DiffPolicy interface for comparing two revisions of the Pdf document.
type DiffPolicy interface{

// ReviewFile should check the revisions of the old and new parsers
// and evaluate the differences between the revisions.
// Each implementation of this interface must decide
// how to handle cases where there are multiple revisions between the old and new revisions.
ReviewFile (_ace *_cc .PdfParser ,_dfd *_cc .PdfParser ,_gddc *MDPParameters )(*DiffResults ,error );};func (_edd *DiffResults )addError (_bgf *DiffResult ){if _edd .Errors ==nil {_edd .Errors =make ([]*DiffResult ,0);};_edd .Errors =append (_edd .Errors ,_bgf );
};

// String returns the state of the warning.
func (_eadf *DiffResult )String ()string {return _d .Sprintf ("\u0025\u0073\u0020\u0069n \u0072\u0065\u0076\u0069\u0073\u0069\u006f\u006e\u0073\u0020\u0023\u0025\u0064",_eadf .Description ,_eadf .Revision );};const (NoRestrictions DocMDPPermission =0;NoChanges DocMDPPermission =1;
FillForms DocMDPPermission =2;FillFormsAndAnnots DocMDPPermission =3;);func (_gda *DiffResults )addWarningWithDescription (_dfc int ,_fdg string ){if _gda .Warnings ==nil {_gda .Warnings =make ([]*DiffResult ,0);};_gda .Warnings =append (_gda .Warnings ,&DiffResult {Revision :_dfc ,Description :_fdg });
};func (_ebb *defaultDiffPolicy )compareAnnots (_agb int ,_ead ,_cad []_cc .PdfObject )error {_fde :=make (map[int64 ]*_cc .PdfObjectDictionary );for _ ,_ec :=range _ead {_eee ,_cdf :=_cc .GetIndirect (_ec );if !_cdf {return _a .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");
};_gdf ,_cdf :=_cc .GetDict (_eee .PdfObject );if !_cdf {return _a .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_fde [_eee .ObjectNumber ]=_gdf ;
};for _ ,_cfg :=range _cad {_fcd ,_cae :=_cc .GetIndirect (_cfg );if !_cae {return _a .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_gdfd ,_cae :=_cc .GetDict (_fcd .PdfObject );
if !_cae {return _a .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_fbd ,_ :=_cc .GetStringVal (_gdfd .Get ("\u0054"));_cfd ,_ :=_cc .GetNameVal (_gdfd .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));
if _ ,_gb :=_fde [_fcd .ObjectNumber ];!_gb {switch _ebb ._b {case NoRestrictions ,FillFormsAndAnnots :_ebb ._df .addWarningWithDescription (_agb ,_d .Sprintf ("\u0025\u0073\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0020\u0025\u0073\u0020\u0077\u0061\u0073\u0020\u0061d\u0064\u0065\u0064",_cfd ,_fbd ));
default:_gcb ,_ad :=_cc .GetDict (_fcd .PdfObject );if !_ad {return _a .New ("u\u006ed\u0065\u0066\u0069\u006e\u0065\u0064\u0020\u0061n\u006e\u006f\u0074\u0061ti\u006f\u006e");};_abg ,_ad :=_cc .GetNameVal (_gcb .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));
if !_ad {return _a .New ("\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064\u0020a\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0027\u0073\u0020\u0073\u0075\u0062\u0074\u0079\u0070\u0065");};if _abg =="\u0057\u0069\u0064\u0067\u0065\u0074"{switch _ebb ._b {case NoRestrictions ,FillFormsAndAnnots ,FillForms :_ebb ._df .addWarningWithDescription (_agb ,_d .Sprintf ("\u0025\u0073\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0020\u0025\u0073\u0020\u0077\u0061\u0073\u0020\u0061d\u0064\u0065\u0064",_cfd ,_fbd ));
default:_ebb ._df .addErrorWithDescription (_agb ,_d .Sprintf ("\u0025\u0073\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0020\u0025\u0073\u0020\u0077\u0061\u0073\u0020\u0061d\u0064\u0065\u0064",_cfd ,_fbd ));};}else {_ebb ._df .addErrorWithDescription (_agb ,_d .Sprintf ("\u0025\u0073\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0020\u0025\u0073\u0020\u0077\u0061\u0073\u0020\u0061d\u0064\u0065\u0064",_cfd ,_fbd ));
};};}else {delete (_fde ,_fcd .ObjectNumber );if _cge ,_gge :=_ebb ._g [_fcd .ObjectNumber ];_gge {switch _ebb ._b {case NoRestrictions ,FillFormsAndAnnots :_ebb ._df .addWarningWithDescription (_agb ,_d .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0063\u0068\u0061\u006eg\u0065\u0064",_cfd ,_fbd ));
default:_fgd ,_geb :=_cc .GetIndirect (_cge );if !_geb {return _a .New ("u\u006ed\u0065\u0066\u0069\u006e\u0065\u0064\u0020\u0061n\u006e\u006f\u0074\u0061ti\u006f\u006e");};_dec ,_geb :=_cc .GetDict (_fgd .PdfObject );if !_geb {return _a .New ("u\u006ed\u0065\u0066\u0069\u006e\u0065\u0064\u0020\u0061n\u006e\u006f\u0074\u0061ti\u006f\u006e");
};_cac ,_geb :=_cc .GetNameVal (_dec .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));if !_geb {return _a .New ("\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064\u0020a\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0027\u0073\u0020\u0073\u0075\u0062\u0074\u0079\u0070\u0065");
};if _cac =="\u0057\u0069\u0064\u0067\u0065\u0074"{switch _ebb ._b {case NoRestrictions ,FillFormsAndAnnots ,FillForms :_ebb ._df .addWarningWithDescription (_agb ,_d .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0063\u0068\u0061\u006eg\u0065\u0064",_cfd ,_fbd ));
default:_ebb ._df .addErrorWithDescription (_agb ,_d .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0063\u0068\u0061\u006eg\u0065\u0064",_cfd ,_fbd ));};}else {_ebb ._df .addErrorWithDescription (_agb ,_d .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0063\u0068\u0061\u006eg\u0065\u0064",_cfd ,_fbd ));
};};};};};for _ ,_cab :=range _fde {_afg ,_ :=_cc .GetStringVal (_cab .Get ("\u0054"));_dac ,_ :=_cc .GetNameVal (_cab .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));switch _ebb ._b {case NoRestrictions ,FillFormsAndAnnots :_ebb ._df .addWarningWithDescription (_agb ,_d .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0072\u0065\u006d\u006fv\u0065\u0064",_dac ,_afg ));
default:_ebb ._df .addErrorWithDescription (_agb ,_d .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0072\u0065\u006d\u006fv\u0065\u0064",_dac ,_afg ));};};return nil ;};

// ReviewFile implementation of DiffPolicy interface
// The default policy only checks the next types of objects:
// Page, Pages (container for page objects), Annot, Annots (container for annotation objects), Field.
// It checks adding, removing and modifying objects of these types.
func (_da *defaultDiffPolicy )ReviewFile (oldParser *_cc .PdfParser ,newParser *_cc .PdfParser ,params *MDPParameters )(*DiffResults ,error ){if oldParser .GetRevisionNumber ()> newParser .GetRevisionNumber (){return nil ,_a .New ("\u006f\u006c\u0064\u0020\u0072\u0065\u0076\u0069\u0073\u0069\u006f\u006e\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u006e\u0065\u0077\u0020r\u0065\u0076i\u0073\u0069\u006f\u006e");
};if oldParser .GetRevisionNumber ()==newParser .GetRevisionNumber (){if oldParser !=newParser {return nil ,_a .New ("\u0073\u0061m\u0065\u0020\u0072\u0065v\u0069\u0073i\u006f\u006e\u0073\u002c\u0020\u0062\u0075\u0074 \u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006e\u0074\u0020\u0070\u0061r\u0073\u0065\u0072\u0073");
};return &DiffResults {},nil ;};if params ==nil {_da ._b =NoRestrictions ;}else {_da ._b =params .DocMDPLevel ;};_ccd :=&DiffResults {};for _f :=oldParser .GetRevisionNumber ()+1;_f <=newParser .GetRevisionNumber ();_f ++{_ac ,_dfb :=newParser .GetRevision (_f -1);
if _dfb !=nil {return nil ,_dfb ;};_bg ,_dfb :=newParser .GetRevision (_f );if _dfb !=nil {return nil ,_dfb ;};_e ,_dfb :=_da .compareRevisions (_ac ,_bg );if _dfb !=nil {return nil ,_dfb ;};_ccd .Warnings =append (_ccd .Warnings ,_e .Warnings ...);_ccd .Errors =append (_ccd .Errors ,_e .Errors ...);
};return _ccd ,nil ;};

// MDPParameters describes parameters for the MDP checks (now only DocMDP).
type MDPParameters struct{DocMDPLevel DocMDPPermission ;};

// DiffResult describes the warning or the error for the DiffPolicy results.
type DiffResult struct{Revision int ;Description string ;};func (_fff *DiffResults )addErrorWithDescription (_ffbfb int ,_bcg string ){if _fff .Errors ==nil {_fff .Errors =make ([]*DiffResult ,0);};_fff .Errors =append (_fff .Errors ,&DiffResult {Revision :_ffbfb ,Description :_bcg });
};func _afa (_ddg _cc .PdfObject )([]_cc .PdfObject ,error ){_eca :=make ([]_cc .PdfObject ,0);if _ddg !=nil {_gdgf :=_ddg ;if _ecd ,_ecb :=_cc .GetIndirect (_ddg );_ecb {_gdgf =_ecd .PdfObject ;};if _ggc ,_ffbf :=_cc .GetArray (_gdgf );_ffbf {_eca =_ggc .Elements ();
}else {return nil ,_a .New ("\u0075n\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0061n\u006eo\u0074s\u0027\u0020\u006f\u0062\u006a\u0065\u0063t");};};return _eca ,nil ;};

// IsPermitted returns true if changes permitted.
func (_ecg *DiffResults )IsPermitted ()bool {return len (_ecg .Errors )==0};