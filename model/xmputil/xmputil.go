//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package xmputil provides abstraction used by the pdf document XMP Metadata.
package xmputil ;import (_g "errors";_dd "fmt";_a "github.com/trimmer-io/go-xmp/models/pdf";_cc "github.com/trimmer-io/go-xmp/models/xmp_base";_b "github.com/trimmer-io/go-xmp/models/xmp_mm";_c "github.com/trimmer-io/go-xmp/xmp";_ae "github.com/unidoc/unipdf/v3/core";
_d "github.com/unidoc/unipdf/v3/internal/timeutils";_gg "github.com/unidoc/unipdf/v3/internal/uuid";_ge "github.com/unidoc/unipdf/v3/model/xmputil/pdfaextension";_ee "github.com/unidoc/unipdf/v3/model/xmputil/pdfaid";_cf "strconv";_ea "time";);

// PdfInfoOptions are the options used for setting pdf info.
type PdfInfoOptions struct{InfoDict _ae .PdfObject ;PdfVersion string ;Copyright string ;Marked bool ;

// Overwrite if set to true, overwrites all values found in the current pdf info xmp model to the ones provided.
Overwrite bool ;};

// LoadDocument loads up the xmp document from provided input stream.
func LoadDocument (stream []byte )(*Document ,error ){_dg :=_c .NewDocument ();if _ag :=_c .Unmarshal (stream ,_dg );_ag !=nil {return nil ,_ag ;};return &Document {_eeg :_dg },nil ;};

// MarshalIndent the document into xml byte stream with predefined prefix and indent.
func (_cb *Document )MarshalIndent (prefix ,indent string )([]byte ,error ){if _cb ._eeg .IsDirty (){if _de :=_cb ._eeg .SyncModels ();_de !=nil {return nil ,_de ;};};return _c .MarshalIndent (_cb ._eeg ,prefix ,indent );};

// GetPdfInfo gets the document pdf info.
func (_fg *Document )GetPdfInfo ()(*PdfInfo ,bool ){_da :=PdfInfo {};var _dda *_ae .PdfObjectDictionary ;_aeg :=func (_cdd string ,_bb _ae .PdfObject ){if _dda ==nil {_dda =_ae .MakeDict ();};_dda .Set (_ae .PdfObjectName (_cdd ),_bb );};_deg ,_dfa :=_fg ._eeg .FindModel (_a .NsPDF ).(*_a .PDFInfo );
if !_dfa {_ec ,_gb :=_fg ._eeg .FindModel (_cc .NsXmp ).(*_cc .XmpBase );if !_gb {return nil ,false ;};if _ec .CreatorTool !=""{_aeg ("\u0043r\u0065\u0061\u0074\u006f\u0072",_ae .MakeString (string (_ec .CreatorTool )));};if !_ec .CreateDate .IsZero (){_aeg ("\u0043\u0072\u0065a\u0074\u0069\u006f\u006e\u0044\u0061\u0074\u0065",_ae .MakeString (_d .FormatPdfTime (_ec .CreateDate .Value ())));
};if !_ec .ModifyDate .IsZero (){_aeg ("\u004do\u0064\u0044\u0061\u0074\u0065",_ae .MakeString (_d .FormatPdfTime (_ec .ModifyDate .Value ())));};_da .InfoDict =_dda ;return &_da ,true ;};_da .Copyright =_deg .Copyright ;_da .PdfVersion =_deg .PDFVersion ;
_da .Marked =bool (_deg .Marked );if len (_deg .Title )> 0{_aeg ("\u0054\u0069\u0074l\u0065",_ae .MakeString (_deg .Title .Default ()));};if len (_deg .Author )> 0{_aeg ("\u0041\u0075\u0074\u0068\u006f\u0072",_ae .MakeString (_deg .Author [0]));};if _deg .Keywords !=""{_aeg ("\u004b\u0065\u0079\u0077\u006f\u0072\u0064\u0073",_ae .MakeString (_deg .Keywords ));
};if len (_deg .Subject )> 0{_aeg ("\u0053u\u0062\u006a\u0065\u0063\u0074",_ae .MakeString (_deg .Subject .Default ()));};if _deg .Creator !=""{_aeg ("\u0043r\u0065\u0061\u0074\u006f\u0072",_ae .MakeString (string (_deg .Creator )));};if _deg .Producer !=""{_aeg ("\u0050\u0072\u006f\u0064\u0075\u0063\u0065\u0072",_ae .MakeString (string (_deg .Producer )));
};if _deg .Trapped {_aeg ("\u0054r\u0061\u0070\u0070\u0065\u0064",_ae .MakeName ("\u0054\u0072\u0075\u0065"));};if !_deg .CreationDate .IsZero (){_aeg ("\u0043\u0072\u0065a\u0074\u0069\u006f\u006e\u0044\u0061\u0074\u0065",_ae .MakeString (_d .FormatPdfTime (_deg .CreationDate .Value ())));
};if !_deg .ModifyDate .IsZero (){_aeg ("\u004do\u0064\u0044\u0061\u0074\u0065",_ae .MakeString (_d .FormatPdfTime (_deg .ModifyDate .Value ())));};_da .InfoDict =_dda ;return &_da ,true ;};

// GetGoXmpDocument gets direct access to the go-xmp.Document.
// All changes done to specified document would result in change of this document 'd'.
func (_fb *Document )GetGoXmpDocument ()*_c .Document {return _fb ._eeg };

// SetMediaManagement sets up XMP media management metadata: namespace xmpMM.
func (_ba *Document )SetMediaManagement (options *MediaManagementOptions )error {_dgb ,_egd :=_b .MakeModel (_ba ._eeg );if _egd !=nil {return _egd ;};if options ==nil {options =new (MediaManagementOptions );};_db :=_b .ResourceRef {};switch {case options .DocumentID !="":_dgb .DocumentID =_c .GUID (options .DocumentID );
case options .NewDocumentID ||_dgb .DocumentID .IsZero ():if !_dgb .DocumentID .IsZero (){_db .DocumentID =_dgb .DocumentID ;};_fd ,_ggg :=_gg .NewUUID ();if _ggg !=nil {return _ggg ;};_dgb .DocumentID =_c .GUID (_fd .String ());};if !_dgb .InstanceID .IsZero (){_db .InstanceID =_dgb .InstanceID ;
};_dgb .InstanceID =_c .GUID (options .InstanceID );if _dgb .InstanceID ==""{_ca ,_ga :=_gg .NewUUID ();if _ga !=nil {return _ga ;};_dgb .InstanceID =_c .GUID (_ca .String ());};if !_db .IsZero (){_dgb .DerivedFrom =&_db ;};_cbd :=options .VersionID ;if _dgb .VersionID !=""{_eeb ,_efb :=_cf .Atoi (_dgb .VersionID );
if _efb !=nil {_cbd =_cf .Itoa (len (_dgb .Versions )+1);}else {_cbd =_cf .Itoa (_eeb +1);};};if _cbd ==""{_cbd ="\u0031";};_dgb .VersionID =_cbd ;if _egd =_dgb .SyncToXMP (_ba ._eeg );_egd !=nil {return _egd ;};return nil ;};

// NewDocument creates a new document without any previous xmp information.
func NewDocument ()*Document {_f :=_c .NewDocument ();return &Document {_eeg :_f }};

// MediaManagementVersion is the version of the media management xmp metadata.
type MediaManagementVersion struct{VersionID string ;ModifyDate _ea .Time ;Comments string ;Modifier string ;};

// SetPdfAExtension sets the pdfaExtension XMP metadata.
func (_eg *Document )SetPdfAExtension ()error {_ed ,_ff :=_ge .MakeModel (_eg ._eeg );if _ff !=nil {return _ff ;};if _ff =_ge .FillModel (_eg ._eeg ,_ed );_ff !=nil {return _ff ;};if _ff =_ed .SyncToXMP (_eg ._eeg );_ff !=nil {return _ff ;};return nil ;
};

// Marshal the document into xml byte stream.
func (_dc *Document )Marshal ()([]byte ,error ){if _dc ._eeg .IsDirty (){if _eb :=_dc ._eeg .SyncModels ();_eb !=nil {return nil ,_eb ;};};return _c .Marshal (_dc ._eeg );};

// GUID is a string representing a globally unique identifier.
type GUID string ;

// MediaManagement are the values from the document media management metadata.
type MediaManagement struct{

// OriginalDocumentID  as media is imported and projects is started, an original-document ID
// must be created to identify a new document. This identifies a document as a conceptual entity.
OriginalDocumentID GUID ;

// DocumentID when a document is copied to a new file path or converted to a new format with
// Save As, another new document ID should usually be assigned. This identifies a general version or
// branch of a document. You can use it to track different versions or extracted portions of a document
// with the same original-document ID.
DocumentID GUID ;

// InstanceID to track a documentâ€™s editing history, you must assign a new instance ID
// whenever a document is saved after any changes. This uniquely identifies an exact version of a
// document. It is used in resource references (to identify both the document or part itself and the
// referenced or referencing documents), and in document-history resource events (to identify the
// document instance that resulted from the change).
InstanceID GUID ;

// DerivedFrom references the source document from which this one is derived,
// typically through a Save As operation that changes the file name or format. It is a minimal reference;
// missing components can be assumed to be unchanged. For example, a new version might only need
// to specify the instance ID and version number of the previous version, or a rendition might only need
// to specify the instance ID and rendition class of the original.
DerivedFrom *MediaManagementDerivedFrom ;

// VersionID are meant to associate the document with a product version that is part of a release process. They can be useful in tracking the
// document history, but should not be used to identify a document uniquely in any context.
// Usually it simply works by incrementing integers 1,2,3...
VersionID string ;

// Versions is the history of the document versions along with the comments, timestamps and issuers.
Versions []MediaManagementVersion ;};

// GetPdfaExtensionSchemas gets a pdfa extension schemas.
func (_bg *Document )GetPdfaExtensionSchemas ()([]_ge .Schema ,error ){_dcf :=_bg ._eeg .FindModel (_ge .Namespace );if _dcf ==nil {return nil ,nil ;};_be ,_df :=_dcf .(*_ge .Model );if !_df {return nil ,_dd .Errorf ("\u0069\u006eva\u006c\u0069\u0064 \u006d\u006f\u0064\u0065l f\u006fr \u0070\u0064\u0066\u0061\u0045\u0078\u0074en\u0073\u0069\u006f\u006e\u0073\u003a\u0020%\u0054",_dcf );
};return _be .Schemas ,nil ;};

// PdfAID is the result of the XMP pdfaid metadata.
type PdfAID struct{Part int ;Conformance string ;};

// PdfInfo is the xmp document pdf info.
type PdfInfo struct{InfoDict _ae .PdfObject ;PdfVersion string ;Copyright string ;Marked bool ;};

// MediaManagementDerivedFrom is a structure that contains references of identifiers and versions
// from which given document was derived.
type MediaManagementDerivedFrom struct{OriginalDocumentID GUID ;DocumentID GUID ;InstanceID GUID ;VersionID string ;};

// SetPdfAID sets up pdfaid xmp metadata.
// In example: Part: '1' Conformance: 'B' states for PDF/A 1B.
func (_efg *Document )SetPdfAID (part int ,conformance string )error {_deb ,_feb :=_ee .MakeModel (_efg ._eeg );if _feb !=nil {return _feb ;};_deb .Part =part ;_deb .Conformance =conformance ;if _aa :=_deb .SyncToXMP (_efg ._eeg );_aa !=nil {return _aa ;
};return nil ;};

// SetPdfInfo sets the pdf info into selected document.
func (_cd *Document )SetPdfInfo (options *PdfInfoOptions )error {if options ==nil {return _g .New ("\u006ei\u006c\u0020\u0070\u0064\u0066\u0020\u006f\u0070\u0074\u0069\u006fn\u0073\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064");};_gec ,_gea :=_a .MakeModel (_cd ._eeg );
if _gea !=nil {return _gea ;};if options .Overwrite {*_gec =_a .PDFInfo {};};if options .InfoDict !=nil {_dfb ,_gf :=_ae .GetDict (options .InfoDict );if !_gf {return _dd .Errorf ("i\u006e\u0076\u0061\u006c\u0069\u0064 \u0070\u0064\u0066\u0020\u006f\u0062\u006a\u0065\u0063t\u0020\u0074\u0079p\u0065:\u0020\u0025\u0054",options .InfoDict );
};var _fe *_ae .PdfObjectString ;for _ ,_fba :=range _dfb .Keys (){switch _fba {case "\u0054\u0069\u0074l\u0065":_fe ,_gf =_ae .GetString (_dfb .Get ("\u0054\u0069\u0074l\u0065"));if _gf {_gec .Title =_c .NewAltString (_fe );};case "\u0041\u0075\u0074\u0068\u006f\u0072":_fe ,_gf =_ae .GetString (_dfb .Get ("\u0041\u0075\u0074\u0068\u006f\u0072"));
if _gf {_gec .Author =_c .NewStringList (_fe .String ());};case "\u004b\u0065\u0079\u0077\u006f\u0072\u0064\u0073":_fe ,_gf =_ae .GetString (_dfb .Get ("\u004b\u0065\u0079\u0077\u006f\u0072\u0064\u0073"));if _gf {_gec .Keywords =_fe .String ();};case "\u0043r\u0065\u0061\u0074\u006f\u0072":_fe ,_gf =_ae .GetString (_dfb .Get ("\u0043r\u0065\u0061\u0074\u006f\u0072"));
if _gf {_gec .Creator =_c .AgentName (_fe .String ());};case "\u0053u\u0062\u006a\u0065\u0063\u0074":_fe ,_gf =_ae .GetString (_dfb .Get ("\u0053u\u0062\u006a\u0065\u0063\u0074"));if _gf {_gec .Subject =_c .NewAltString (_fe .String ());};case "\u0050\u0072\u006f\u0064\u0075\u0063\u0065\u0072":_fe ,_gf =_ae .GetString (_dfb .Get ("\u0050\u0072\u006f\u0064\u0075\u0063\u0065\u0072"));
if _gf {_gec .Producer =_c .AgentName (_fe .String ());};case "\u0054r\u0061\u0070\u0070\u0065\u0064":_dfe ,_eda :=_ae .GetName (_dfb .Get ("\u0054r\u0061\u0070\u0070\u0065\u0064"));if _eda {switch _dfe .String (){case "\u0054\u0072\u0075\u0065":_gec .Trapped =true ;
case "\u0046\u0061\u006cs\u0065":_gec .Trapped =false ;default:_gec .Trapped =true ;};};case "\u0043\u0072\u0065a\u0074\u0069\u006f\u006e\u0044\u0061\u0074\u0065":if _bgb ,_fc :=_ae .GetString (_dfb .Get ("\u0043\u0072\u0065a\u0074\u0069\u006f\u006e\u0044\u0061\u0074\u0065"));
_fc &&_bgb .String ()!=""{_bf ,_ef :=_d .ParsePdfTime (_bgb .String ());if _ef !=nil {return _dd .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0043\u0072e\u0061\u0074\u0069\u006f\u006e\u0044\u0061t\u0065\u0020\u0066\u0069\u0065\u006c\u0064\u003a\u0020\u0025\u0077",_ef );
};_gec .CreationDate =_c .NewDate (_bf );};case "\u004do\u0064\u0044\u0061\u0074\u0065":if _bd ,_ccd :=_ae .GetString (_dfb .Get ("\u004do\u0064\u0044\u0061\u0074\u0065"));_ccd &&_bd .String ()!=""{_ad ,_add :=_d .ParsePdfTime (_bd .String ());if _add !=nil {return _dd .Errorf ("\u0069n\u0076\u0061\u006c\u0069d\u0020\u004d\u006f\u0064\u0044a\u0074e\u0020f\u0069\u0065\u006c\u0064\u003a\u0020\u0025w",_add );
};_gec .ModifyDate =_c .NewDate (_ad );};};};};if options .PdfVersion !=""{_gec .PDFVersion =options .PdfVersion ;};if options .Marked {_gec .Marked =_c .Bool (options .Marked );};if options .Copyright !=""{_gec .Copyright =options .Copyright ;};if _gea =_gec .SyncToXMP (_cd ._eeg );
_gea !=nil {return _gea ;};return nil ;};

// GetPdfAID gets the pdfaid xmp metadata model.
func (_cac *Document )GetPdfAID ()(*PdfAID ,bool ){_af ,_eee :=_cac ._eeg .FindModel (_ee .Namespace ).(*_ee .Model );if !_eee {return nil ,false ;};return &PdfAID {Part :_af .Part ,Conformance :_af .Conformance },true ;};

// GetMediaManagement gets the media management metadata from provided xmp document.
func (_fge *Document )GetMediaManagement ()(*MediaManagement ,bool ){_bbe :=_b .FindModel (_fge ._eeg );if _bbe ==nil {return nil ,false ;};_aed :=make ([]MediaManagementVersion ,len (_bbe .Versions ));for _fa ,_ab :=range _bbe .Versions {_aed [_fa ]=MediaManagementVersion {VersionID :_ab .Version ,ModifyDate :_ab .ModifyDate .Value (),Comments :_ab .Comments ,Modifier :_ab .Modifier };
};_dbf :=&MediaManagement {OriginalDocumentID :GUID (_bbe .OriginalDocumentID .Value ()),DocumentID :GUID (_bbe .DocumentID .Value ()),InstanceID :GUID (_bbe .InstanceID .Value ()),VersionID :_bbe .VersionID ,Versions :_aed };if _bbe .DerivedFrom !=nil {_dbf .DerivedFrom =&MediaManagementDerivedFrom {OriginalDocumentID :GUID (_bbe .DerivedFrom .OriginalDocumentID ),DocumentID :GUID (_bbe .DerivedFrom .DocumentID ),InstanceID :GUID (_bbe .DerivedFrom .InstanceID ),VersionID :_bbe .DerivedFrom .VersionID };
};return _dbf ,true ;};

// MediaManagementOptions are the options for the Media management xmp metadata.
type MediaManagementOptions struct{

// OriginalDocumentID  as media is imported and projects is started, an original-document ID
// must be created to identify a new document. This identifies a document as a conceptual entity.
// By default, this value is generated.
OriginalDocumentID string ;

// NewDocumentID is a flag which generates a new Document identifier while setting media management.
// This value should be set to true only if the document is stored and saved as new document.
// Otherwise, if the document is modified and overwrites previous file, it should be set to false.
NewDocumentID bool ;

// DocumentID when a document is copied to a new file path or converted to a new format with
// Save As, another new document ID should usually be assigned. This identifies a general version or
// branch of a document. You can use it to track different versions or extracted portions of a document
// with the same original-document ID.
// By default, this value is generated if NewDocumentID is true or previous doesn't exist.
DocumentID string ;

// InstanceID to track a documentâ€™s editing history, you must assign a new instance ID
// whenever a document is saved after any changes. This uniquely identifies an exact version of a
// document. It is used in resource references (to identify both the document or part itself and the
// referenced or referencing documents), and in document-history resource events (to identify the
// document instance that resulted from the change).
// By default, this value is generated.
InstanceID string ;

// DerivedFrom references the source document from which this one is derived,
// typically through a Save As operation that changes the file name or format. It is a minimal reference;
// missing components can be assumed to be unchanged. For example, a new version might only need
// to specify the instance ID and version number of the previous version, or a rendition might only need
// to specify the instance ID and rendition class of the original.
// By default, the derived from structure is filled from previous XMP metadata (if exists).
DerivedFrom string ;

// VersionID are meant to associate the document with a product version that is part of a release process. They can be useful in tracking the
// document history, but should not be used to identify a document uniquely in any context.
// Usually it simply works by incrementing integers 1,2,3...
// By default, this values is incremented or set to the next version number.
VersionID string ;

// ModifyComment is a comment to given modification
ModifyComment string ;

// ModifyDate is a custom modification date for the versions.
// By default, this would be set to time.Now().
ModifyDate _ea .Time ;

// Modifier is a person who did the modification.
Modifier string ;};

// Document is an implementation of the xmp document.
// It is a wrapper over go-xmp/xmp.Document that provides some Pdf predefined functionality.
type Document struct{_eeg *_c .Document };