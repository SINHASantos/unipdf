//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package fonts ;import (_ag "bytes";_cg "encoding/binary";_dd "errors";_d "fmt";_cd "github.com/unidoc/unipdf/v4/common";_ed "github.com/unidoc/unipdf/v4/core";_f "github.com/unidoc/unipdf/v4/internal/cmap";_age "github.com/unidoc/unipdf/v4/internal/textencoding";
_gd "io";_af "os";_a "regexp";_g "sort";_df "strings";_e "sync";);func (_bfgb *ttfParser )ParseComponents ()error {if _degf :=_bfgb .ParseHead ();_degf !=nil {return _degf ;};if _bfgg :=_bfgb .ParseHhea ();_bfgg !=nil {return _bfgg ;};if _ccd :=_bfgb .ParseMaxp ();
_ccd !=nil {return _ccd ;};if _gfb :=_bfgb .ParseHmtx ();_gfb !=nil {return _gfb ;};if _ ,_dbc :=_bfgb ._cgg ["\u006e\u0061\u006d\u0065"];_dbc {if _fcg :=_bfgb .ParseName ();_fcg !=nil {return _fcg ;};};if _ ,_baf :=_bfgb ._cgg ["\u004f\u0053\u002f\u0032"];
_baf {if _efa :=_bfgb .ParseOS2 ();_efa !=nil {return _efa ;};};if _ ,_abce :=_bfgb ._cgg ["\u0070\u006f\u0073\u0074"];_abce {if _cba :=_bfgb .ParsePost ();_cba !=nil {return _cba ;};};if _ ,_beea :=_bfgb ._cgg ["\u0063\u006d\u0061\u0070"];_beea {if _gab :=_bfgb .ParseCmap ();
_gab !=nil {return _gab ;};};return nil ;};var _gadc *RuneCharSafeMap ;var _bad =[]rune {'A','Æ','Á','Ă','Â','Ä','À','Ā','Ą','Å','Ã','B','C','Ć','Č','Ç','D','Ď','Đ','∆','E','É','Ě','Ê','Ë','Ė','È','Ē','Ę','Ð','€','F','G','Ğ','Ģ','H','I','Í','Î','Ï','İ','Ì','Ī','Į','J','K','Ķ','L','Ĺ','Ľ','Ļ','Ł','M','N','Ń','Ň','Ņ','Ñ','O','Œ','Ó','Ô','Ö','Ò','Ő','Ō','Ø','Õ','P','Q','R','Ŕ','Ř','Ŗ','S','Ś','Š','Ş','Ș','T','Ť','Ţ','Þ','U','Ú','Û','Ü','Ù','Ű','Ū','Ų','Ů','V','W','X','Y','Ý','Ÿ','Z','Ź','Ž','Ż','a','á','ă','â','´','ä','æ','à','ā','&','ą','å','^','~','*','@','ã','b','\\','|','{','}','[',']','˘','¦','•','c','ć','ˇ','č','ç','¸','¢','ˆ',':',',','\uf6c3','©','¤','d','†','‡','ď','đ','°','¨','÷','$','˙','ı','e','é','ě','ê','ë','ė','è','8','…','ē','—','–','ę','=','ð','!','¡','f','ﬁ','5','ﬂ','ƒ','4','⁄','g','ğ','ģ','ß','`','>','≥','«','»','‹','›','h','˝','-','i','í','î','ï','ì','ī','į','j','k','ķ','l','ĺ','ľ','ļ','<','≤','¬','◊','ł','m','¯','−','µ','×','n','ń','ň','ņ','9','≠','ñ','#','o','ó','ô','ö','œ','˛','ò','ő','ō','1','½','¼','¹','ª','º','ø','õ','p','¶','(',')','∂','%','.','·','‰','+','±','q','?','¿','"','„','“','”','‘','’','‚','\'','r','ŕ','√','ř','ŗ','®','˚','s','ś','š','ş','ș','§',';','7','6','/',' ','£','∑','t','ť','ţ','þ','3','¾','³','˜','™','2','²','u','ú','û','ü','ù','ű','ū','_','ų','ů','v','w','x','y','ý','ÿ','¥','z','ź','ž','ż','0'};
var _gdc =&RuneCharSafeMap {_b :map[rune ]CharMetrics {' ':{Wx :278},'→':{Wx :838},'↔':{Wx :1016},'↕':{Wx :458},'①':{Wx :788},'②':{Wx :788},'③':{Wx :788},'④':{Wx :788},'⑤':{Wx :788},'⑥':{Wx :788},'⑦':{Wx :788},'⑧':{Wx :788},'⑨':{Wx :788},'⑩':{Wx :788},'■':{Wx :761},'▲':{Wx :892},'▼':{Wx :892},'◆':{Wx :788},'●':{Wx :791},'◗':{Wx :438},'★':{Wx :816},'☎':{Wx :719},'☛':{Wx :960},'☞':{Wx :939},'♠':{Wx :626},'♣':{Wx :776},'♥':{Wx :694},'♦':{Wx :595},'✁':{Wx :974},'✂':{Wx :961},'✃':{Wx :974},'✄':{Wx :980},'✆':{Wx :789},'✇':{Wx :790},'✈':{Wx :791},'✉':{Wx :690},'✌':{Wx :549},'✍':{Wx :855},'✎':{Wx :911},'✏':{Wx :933},'✐':{Wx :911},'✑':{Wx :945},'✒':{Wx :974},'✓':{Wx :755},'✔':{Wx :846},'✕':{Wx :762},'✖':{Wx :761},'✗':{Wx :571},'✘':{Wx :677},'✙':{Wx :763},'✚':{Wx :760},'✛':{Wx :759},'✜':{Wx :754},'✝':{Wx :494},'✞':{Wx :552},'✟':{Wx :537},'✠':{Wx :577},'✡':{Wx :692},'✢':{Wx :786},'✣':{Wx :788},'✤':{Wx :788},'✥':{Wx :790},'✦':{Wx :793},'✧':{Wx :794},'✩':{Wx :823},'✪':{Wx :789},'✫':{Wx :841},'✬':{Wx :823},'✭':{Wx :833},'✮':{Wx :816},'✯':{Wx :831},'✰':{Wx :923},'✱':{Wx :744},'✲':{Wx :723},'✳':{Wx :749},'✴':{Wx :790},'✵':{Wx :792},'✶':{Wx :695},'✷':{Wx :776},'✸':{Wx :768},'✹':{Wx :792},'✺':{Wx :759},'✻':{Wx :707},'✼':{Wx :708},'✽':{Wx :682},'✾':{Wx :701},'✿':{Wx :826},'❀':{Wx :815},'❁':{Wx :789},'❂':{Wx :789},'❃':{Wx :707},'❄':{Wx :687},'❅':{Wx :696},'❆':{Wx :689},'❇':{Wx :786},'❈':{Wx :787},'❉':{Wx :713},'❊':{Wx :791},'❋':{Wx :785},'❍':{Wx :873},'❏':{Wx :762},'❐':{Wx :762},'❑':{Wx :759},'❒':{Wx :759},'❖':{Wx :784},'❘':{Wx :138},'❙':{Wx :277},'❚':{Wx :415},'❛':{Wx :392},'❜':{Wx :392},'❝':{Wx :668},'❞':{Wx :668},'❡':{Wx :732},'❢':{Wx :544},'❣':{Wx :544},'❤':{Wx :910},'❥':{Wx :667},'❦':{Wx :760},'❧':{Wx :760},'❶':{Wx :788},'❷':{Wx :788},'❸':{Wx :788},'❹':{Wx :788},'❺':{Wx :788},'❻':{Wx :788},'❼':{Wx :788},'❽':{Wx :788},'❾':{Wx :788},'❿':{Wx :788},'➀':{Wx :788},'➁':{Wx :788},'➂':{Wx :788},'➃':{Wx :788},'➄':{Wx :788},'➅':{Wx :788},'➆':{Wx :788},'➇':{Wx :788},'➈':{Wx :788},'➉':{Wx :788},'➊':{Wx :788},'➋':{Wx :788},'➌':{Wx :788},'➍':{Wx :788},'➎':{Wx :788},'➏':{Wx :788},'➐':{Wx :788},'➑':{Wx :788},'➒':{Wx :788},'➓':{Wx :788},'➔':{Wx :894},'➘':{Wx :748},'➙':{Wx :924},'➚':{Wx :748},'➛':{Wx :918},'➜':{Wx :927},'➝':{Wx :928},'➞':{Wx :928},'➟':{Wx :834},'➠':{Wx :873},'➡':{Wx :828},'➢':{Wx :924},'➣':{Wx :924},'➤':{Wx :917},'➥':{Wx :930},'➦':{Wx :931},'➧':{Wx :463},'➨':{Wx :883},'➩':{Wx :836},'➪':{Wx :836},'➫':{Wx :867},'➬':{Wx :867},'➭':{Wx :696},'➮':{Wx :696},'➯':{Wx :874},'➱':{Wx :874},'➲':{Wx :760},'➳':{Wx :946},'➴':{Wx :771},'➵':{Wx :865},'➶':{Wx :771},'➷':{Wx :888},'➸':{Wx :967},'➹':{Wx :888},'➺':{Wx :831},'➻':{Wx :873},'➼':{Wx :927},'➽':{Wx :970},'➾':{Wx :918},'\uf8d7':{Wx :390},'\uf8d8':{Wx :390},'\uf8d9':{Wx :317},'\uf8da':{Wx :317},'\uf8db':{Wx :276},'\uf8dc':{Wx :276},'\uf8dd':{Wx :509},'\uf8de':{Wx :509},'\uf8df':{Wx :410},'\uf8e0':{Wx :410},'\uf8e1':{Wx :234},'\uf8e2':{Wx :234},'\uf8e3':{Wx :334},'\uf8e4':{Wx :334}}};
var _gbe _e .Once ;func _gg ()StdFont {_ccb :=_age .NewZapfDingbatsEncoder ();_eae :=Descriptor {Name :ZapfDingbatsName ,Family :string (ZapfDingbatsName ),Weight :FontWeightMedium ,Flags :0x0004,BBox :[4]float64 {-1,-143,981,820},ItalicAngle :0,Ascent :0,Descent :0,CapHeight :0,XHeight :0,StemV :90,StemH :28};
return NewStdFontWithEncoding (_eae ,_gdc ,_ccb );};type fontMap struct{_e .Mutex ;_da map[StdFontName ]func ()StdFont ;};var _aaga =[]GlyphName {"\u002en\u006f\u0074\u0064\u0065\u0066","\u002e\u006e\u0075l\u006c","\u006e\u006fn\u006d\u0061\u0072k\u0069\u006e\u0067\u0072\u0065\u0074\u0075\u0072\u006e","\u0073\u0070\u0061c\u0065","\u0065\u0078\u0063\u006c\u0061\u006d","\u0071\u0075\u006f\u0074\u0065\u0064\u0062\u006c","\u006e\u0075\u006d\u0062\u0065\u0072\u0073\u0069\u0067\u006e","\u0064\u006f\u006c\u006c\u0061\u0072","\u0070e\u0072\u0063\u0065\u006e\u0074","\u0061m\u0070\u0065\u0072\u0073\u0061\u006ed","q\u0075\u006f\u0074\u0065\u0073\u0069\u006e\u0067\u006c\u0065","\u0070a\u0072\u0065\u006e\u006c\u0065\u0066t","\u0070\u0061\u0072\u0065\u006e\u0072\u0069\u0067\u0068\u0074","\u0061\u0073\u0074\u0065\u0072\u0069\u0073\u006b","\u0070\u006c\u0075\u0073","\u0063\u006f\u006dm\u0061","\u0068\u0079\u0070\u0068\u0065\u006e","\u0070\u0065\u0072\u0069\u006f\u0064","\u0073\u006c\u0061s\u0068","\u007a\u0065\u0072\u006f","\u006f\u006e\u0065","\u0074\u0077\u006f","\u0074\u0068\u0072e\u0065","\u0066\u006f\u0075\u0072","\u0066\u0069\u0076\u0065","\u0073\u0069\u0078","\u0073\u0065\u0076e\u006e","\u0065\u0069\u0067h\u0074","\u006e\u0069\u006e\u0065","\u0063\u006f\u006co\u006e","\u0073e\u006d\u0069\u0063\u006f\u006c\u006fn","\u006c\u0065\u0073\u0073","\u0065\u0071\u0075a\u006c","\u0067r\u0065\u0061\u0074\u0065\u0072","\u0071\u0075\u0065\u0073\u0074\u0069\u006f\u006e","\u0061\u0074","\u0041","\u0042","\u0043","\u0044","\u0045","\u0046","\u0047","\u0048","\u0049","\u004a","\u004b","\u004c","\u004d","\u004e","\u004f","\u0050","\u0051","\u0052","\u0053","\u0054","\u0055","\u0056","\u0057","\u0058","\u0059","\u005a","b\u0072\u0061\u0063\u006b\u0065\u0074\u006c\u0065\u0066\u0074","\u0062a\u0063\u006b\u0073\u006c\u0061\u0073h","\u0062\u0072\u0061c\u006b\u0065\u0074\u0072\u0069\u0067\u0068\u0074","a\u0073\u0063\u0069\u0069\u0063\u0069\u0072\u0063\u0075\u006d","\u0075\u006e\u0064\u0065\u0072\u0073\u0063\u006f\u0072\u0065","\u0067\u0072\u0061v\u0065","\u0061","\u0062","\u0063","\u0064","\u0065","\u0066","\u0067","\u0068","\u0069","\u006a","\u006b","\u006c","\u006d","\u006e","\u006f","\u0070","\u0071","\u0072","\u0073","\u0074","\u0075","\u0076","\u0077","\u0078","\u0079","\u007a","\u0062r\u0061\u0063\u0065\u006c\u0065\u0066t","\u0062\u0061\u0072","\u0062\u0072\u0061\u0063\u0065\u0072\u0069\u0067\u0068\u0074","\u0061\u0073\u0063\u0069\u0069\u0074\u0069\u006c\u0064\u0065","\u0041d\u0069\u0065\u0072\u0065\u0073\u0069s","\u0041\u0072\u0069n\u0067","\u0043\u0063\u0065\u0064\u0069\u006c\u006c\u0061","\u0045\u0061\u0063\u0075\u0074\u0065","\u004e\u0074\u0069\u006c\u0064\u0065","\u004fd\u0069\u0065\u0072\u0065\u0073\u0069s","\u0055d\u0069\u0065\u0072\u0065\u0073\u0069s","\u0061\u0061\u0063\u0075\u0074\u0065","\u0061\u0067\u0072\u0061\u0076\u0065","a\u0063\u0069\u0072\u0063\u0075\u006d\u0066\u006c\u0065\u0078","\u0061d\u0069\u0065\u0072\u0065\u0073\u0069s","\u0061\u0074\u0069\u006c\u0064\u0065","\u0061\u0072\u0069n\u0067","\u0063\u0063\u0065\u0064\u0069\u006c\u006c\u0061","\u0065\u0061\u0063\u0075\u0074\u0065","\u0065\u0067\u0072\u0061\u0076\u0065","e\u0063\u0069\u0072\u0063\u0075\u006d\u0066\u006c\u0065\u0078","\u0065d\u0069\u0065\u0072\u0065\u0073\u0069s","\u0069\u0061\u0063\u0075\u0074\u0065","\u0069\u0067\u0072\u0061\u0076\u0065","i\u0063\u0069\u0072\u0063\u0075\u006d\u0066\u006c\u0065\u0078","\u0069d\u0069\u0065\u0072\u0065\u0073\u0069s","\u006e\u0074\u0069\u006c\u0064\u0065","\u006f\u0061\u0063\u0075\u0074\u0065","\u006f\u0067\u0072\u0061\u0076\u0065","o\u0063\u0069\u0072\u0063\u0075\u006d\u0066\u006c\u0065\u0078","\u006fd\u0069\u0065\u0072\u0065\u0073\u0069s","\u006f\u0074\u0069\u006c\u0064\u0065","\u0075\u0061\u0063\u0075\u0074\u0065","\u0075\u0067\u0072\u0061\u0076\u0065","u\u0063\u0069\u0072\u0063\u0075\u006d\u0066\u006c\u0065\u0078","\u0075d\u0069\u0065\u0072\u0065\u0073\u0069s","\u0064\u0061\u0067\u0067\u0065\u0072","\u0064\u0065\u0067\u0072\u0065\u0065","\u0063\u0065\u006e\u0074","\u0073\u0074\u0065\u0072\u006c\u0069\u006e\u0067","\u0073e\u0063\u0074\u0069\u006f\u006e","\u0062\u0075\u006c\u006c\u0065\u0074","\u0070a\u0072\u0061\u0067\u0072\u0061\u0070h","\u0067\u0065\u0072\u006d\u0061\u006e\u0064\u0062\u006c\u0073","\u0072\u0065\u0067\u0069\u0073\u0074\u0065\u0072\u0065\u0064","\u0063o\u0070\u0079\u0072\u0069\u0067\u0068t","\u0074r\u0061\u0064\u0065\u006d\u0061\u0072k","\u0061\u0063\u0075t\u0065","\u0064\u0069\u0065\u0072\u0065\u0073\u0069\u0073","\u006e\u006f\u0074\u0065\u0071\u0075\u0061\u006c","\u0041\u0045","\u004f\u0073\u006c\u0061\u0073\u0068","\u0069\u006e\u0066\u0069\u006e\u0069\u0074\u0079","\u0070l\u0075\u0073\u006d\u0069\u006e\u0075s","\u006ce\u0073\u0073\u0065\u0071\u0075\u0061l","\u0067\u0072\u0065a\u0074\u0065\u0072\u0065\u0071\u0075\u0061\u006c","\u0079\u0065\u006e","\u006d\u0075","p\u0061\u0072\u0074\u0069\u0061\u006c\u0064\u0069\u0066\u0066","\u0073u\u006d\u006d\u0061\u0074\u0069\u006fn","\u0070r\u006f\u0064\u0075\u0063\u0074","\u0070\u0069","\u0069\u006e\u0074\u0065\u0067\u0072\u0061\u006c","o\u0072\u0064\u0066\u0065\u006d\u0069\u006e\u0069\u006e\u0065","\u006f\u0072\u0064m\u0061\u0073\u0063\u0075\u006c\u0069\u006e\u0065","\u004f\u006d\u0065g\u0061","\u0061\u0065","\u006f\u0073\u006c\u0061\u0073\u0068","\u0071\u0075\u0065s\u0074\u0069\u006f\u006e\u0064\u006f\u0077\u006e","\u0065\u0078\u0063\u006c\u0061\u006d\u0064\u006f\u0077\u006e","\u006c\u006f\u0067\u0069\u0063\u0061\u006c\u006e\u006f\u0074","\u0072a\u0064\u0069\u0063\u0061\u006c","\u0066\u006c\u006f\u0072\u0069\u006e","a\u0070\u0070\u0072\u006f\u0078\u0065\u0071\u0075\u0061\u006c","\u0044\u0065\u006ct\u0061","\u0067\u0075\u0069\u006c\u006c\u0065\u006d\u006f\u0074\u006c\u0065\u0066\u0074","\u0067\u0075\u0069\u006c\u006c\u0065\u006d\u006f\u0074r\u0069\u0067\u0068\u0074","\u0065\u006c\u006c\u0069\u0070\u0073\u0069\u0073","\u006e\u006fn\u0062\u0072\u0065a\u006b\u0069\u006e\u0067\u0073\u0070\u0061\u0063\u0065","\u0041\u0067\u0072\u0061\u0076\u0065","\u0041\u0074\u0069\u006c\u0064\u0065","\u004f\u0074\u0069\u006c\u0064\u0065","\u004f\u0045","\u006f\u0065","\u0065\u006e\u0064\u0061\u0073\u0068","\u0065\u006d\u0064\u0061\u0073\u0068","\u0071\u0075\u006ft\u0065\u0064\u0062\u006c\u006c\u0065\u0066\u0074","\u0071\u0075\u006f\u0074\u0065\u0064\u0062\u006c\u0072\u0069\u0067\u0068\u0074","\u0071u\u006f\u0074\u0065\u006c\u0065\u0066t","\u0071\u0075\u006f\u0074\u0065\u0072\u0069\u0067\u0068\u0074","\u0064\u0069\u0076\u0069\u0064\u0065","\u006co\u007a\u0065\u006e\u0067\u0065","\u0079d\u0069\u0065\u0072\u0065\u0073\u0069s","\u0059d\u0069\u0065\u0072\u0065\u0073\u0069s","\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e","\u0063\u0075\u0072\u0072\u0065\u006e\u0063\u0079","\u0067\u0075\u0069\u006c\u0073\u0069\u006e\u0067\u006c\u006c\u0065\u0066\u0074","\u0067\u0075\u0069\u006c\u0073\u0069\u006e\u0067\u006cr\u0069\u0067\u0068\u0074","\u0066\u0069","\u0066\u006c","\u0064a\u0067\u0067\u0065\u0072\u0064\u0062l","\u0070\u0065\u0072\u0069\u006f\u0064\u0063\u0065\u006et\u0065\u0072\u0065\u0064","\u0071\u0075\u006f\u0074\u0065\u0073\u0069\u006e\u0067l\u0062\u0061\u0073\u0065","\u0071\u0075\u006ft\u0065\u0064\u0062\u006c\u0062\u0061\u0073\u0065","p\u0065\u0072\u0074\u0068\u006f\u0075\u0073\u0061\u006e\u0064","A\u0063\u0069\u0072\u0063\u0075\u006d\u0066\u006c\u0065\u0078","E\u0063\u0069\u0072\u0063\u0075\u006d\u0066\u006c\u0065\u0078","\u0041\u0061\u0063\u0075\u0074\u0065","\u0045d\u0069\u0065\u0072\u0065\u0073\u0069s","\u0045\u0067\u0072\u0061\u0076\u0065","\u0049\u0061\u0063\u0075\u0074\u0065","I\u0063\u0069\u0072\u0063\u0075\u006d\u0066\u006c\u0065\u0078","\u0049d\u0069\u0065\u0072\u0065\u0073\u0069s","\u0049\u0067\u0072\u0061\u0076\u0065","\u004f\u0061\u0063\u0075\u0074\u0065","O\u0063\u0069\u0072\u0063\u0075\u006d\u0066\u006c\u0065\u0078","\u0061\u0070\u0070l\u0065","\u004f\u0067\u0072\u0061\u0076\u0065","\u0055\u0061\u0063\u0075\u0074\u0065","U\u0063\u0069\u0072\u0063\u0075\u006d\u0066\u006c\u0065\u0078","\u0055\u0067\u0072\u0061\u0076\u0065","\u0064\u006f\u0074\u006c\u0065\u0073\u0073\u0069","\u0063\u0069\u0072\u0063\u0075\u006d\u0066\u006c\u0065\u0078","\u0074\u0069\u006cd\u0065","\u006d\u0061\u0063\u0072\u006f\u006e","\u0062\u0072\u0065v\u0065","\u0064o\u0074\u0061\u0063\u0063\u0065\u006et","\u0072\u0069\u006e\u0067","\u0063e\u0064\u0069\u006c\u006c\u0061","\u0068\u0075\u006eg\u0061\u0072\u0075\u006d\u006c\u0061\u0075\u0074","\u006f\u0067\u006f\u006e\u0065\u006b","\u0063\u0061\u0072o\u006e","\u004c\u0073\u006c\u0061\u0073\u0068","\u006c\u0073\u006c\u0061\u0073\u0068","\u0053\u0063\u0061\u0072\u006f\u006e","\u0073\u0063\u0061\u0072\u006f\u006e","\u005a\u0063\u0061\u0072\u006f\u006e","\u007a\u0063\u0061\u0072\u006f\u006e","\u0062r\u006f\u006b\u0065\u006e\u0062\u0061r","\u0045\u0074\u0068","\u0065\u0074\u0068","\u0059\u0061\u0063\u0075\u0074\u0065","\u0079\u0061\u0063\u0075\u0074\u0065","\u0054\u0068\u006fr\u006e","\u0074\u0068\u006fr\u006e","\u006d\u0069\u006eu\u0073","\u006d\u0075\u006c\u0074\u0069\u0070\u006c\u0079","o\u006e\u0065\u0073\u0075\u0070\u0065\u0072\u0069\u006f\u0072","t\u0077\u006f\u0073\u0075\u0070\u0065\u0072\u0069\u006f\u0072","\u0074\u0068\u0072\u0065\u0065\u0073\u0075\u0070\u0065\u0072\u0069\u006f\u0072","\u006fn\u0065\u0068\u0061\u006c\u0066","\u006f\u006e\u0065\u0071\u0075\u0061\u0072\u0074\u0065\u0072","\u0074\u0068\u0072\u0065\u0065\u0071\u0075\u0061\u0072\u0074\u0065\u0072\u0073","\u0066\u0072\u0061n\u0063","\u0047\u0062\u0072\u0065\u0076\u0065","\u0067\u0062\u0072\u0065\u0076\u0065","\u0049\u0064\u006f\u0074\u0061\u0063\u0063\u0065\u006e\u0074","\u0053\u0063\u0065\u0064\u0069\u006c\u006c\u0061","\u0073\u0063\u0065\u0064\u0069\u006c\u006c\u0061","\u0043\u0061\u0063\u0075\u0074\u0065","\u0063\u0061\u0063\u0075\u0074\u0065","\u0043\u0063\u0061\u0072\u006f\u006e","\u0063\u0063\u0061\u0072\u006f\u006e","\u0064\u0063\u0072\u006f\u0061\u0074"};
var _cae =[]int16 {667,944,667,667,667,667,667,667,667,667,667,667,667,667,667,667,722,722,722,612,667,667,667,667,667,667,667,667,667,722,500,667,722,722,722,778,389,389,389,389,389,389,389,389,500,667,667,611,611,611,611,611,889,722,722,722,722,722,722,944,722,722,722,722,722,722,722,722,611,722,667,667,667,667,556,556,556,556,556,611,611,611,611,722,722,722,722,722,722,722,722,722,667,889,667,611,611,611,611,611,611,611,500,500,500,500,333,500,722,500,500,778,500,500,570,570,500,832,500,500,278,220,348,348,333,333,333,220,350,444,444,333,444,444,333,500,333,333,250,250,747,500,500,500,500,608,500,400,333,570,500,333,278,444,444,444,444,444,444,444,500,1000,444,1000,500,444,570,500,389,389,333,556,500,556,500,500,167,500,500,500,500,333,570,549,500,500,333,333,556,333,333,278,278,278,278,278,278,278,278,500,500,278,278,382,278,570,549,606,494,278,778,333,606,576,570,556,556,556,556,500,549,556,500,500,500,500,500,722,333,500,500,500,500,750,750,300,266,300,500,500,500,500,333,333,494,833,250,250,1000,570,570,500,500,500,555,500,500,500,333,333,333,278,389,389,549,389,389,747,333,389,389,389,389,389,500,333,500,500,278,250,500,600,278,366,278,500,500,750,300,333,1000,500,300,556,556,556,556,556,556,556,500,556,556,444,667,500,444,444,444,500,389,389,389,389,500};
func (_gf CharMetrics )String ()string {return _d .Sprintf ("<\u0025\u002e\u0031\u0066\u002c\u0025\u002e\u0031\u0066\u003e",_gf .Wx ,_gf .Wy );};func (_fcda *ttfParser )ReadShort ()(_aab int16 ){_cg .Read (_fcda ._gfgf ,_cg .BigEndian ,&_aab );return _aab ;
};var _agg *RuneCharSafeMap ;func (_gea *ttfParser )ParseCmap ()error {var _faa int64 ;if _cbad :=_gea .Seek ("\u0063\u006d\u0061\u0070");_cbad !=nil {return _cbad ;};_gea .ReadUShort ();_ggb :=int (_gea .ReadUShort ());_gecc :=int64 (0);_ggc :=int64 (0);
_acf :=int64 (0);for _dfcc :=0;_dfcc < _ggb ;_dfcc ++{_dafcg :=_gea .ReadUShort ();_dgdb :=_gea .ReadUShort ();_faa =int64 (_gea .ReadULong ());if _dafcg ==3&&_dgdb ==1{_ggc =_faa ;}else if _dafcg ==3&&_dgdb ==10{_acf =_faa ;}else if _dafcg ==1&&_dgdb ==0{_gecc =_faa ;
};};if _gecc !=0{if _gebd :=_gea .parseCmapVersion (_gecc );_gebd !=nil {return _gebd ;};};if _ggc !=0{if _afd :=_gea .parseCmapSubtable31 (_ggc );_afd !=nil {return _afd ;};};if _acf !=0{if _eccd :=_gea .parseCmapVersion (_acf );_eccd !=nil {return _eccd ;
};};if _ggc ==0&&_gecc ==0&&_acf ==0{_cd .Log .Debug ("\u0074\u0074\u0066P\u0061\u0072\u0073\u0065\u0072\u002e\u0050\u0061\u0072\u0073\u0065\u0043\u006d\u0061\u0070\u002e\u0020\u004e\u006f\u0020\u0033\u0031\u002c\u0020\u0031\u0030\u002c\u0020\u00331\u0030\u0020\u0074\u0061\u0062\u006c\u0065\u002e");
};return nil ;};func (_gc *fontMap )read (_cc StdFontName )(func ()StdFont ,bool ){_gc .Lock ();defer _gc .Unlock ();_bba ,_gec :=_gc ._da [_cc ];return _bba ,_gec ;};func _aea ()StdFont {_ebd :=_age .NewSymbolEncoder ();_fbfc :=Descriptor {Name :SymbolName ,Family :string (SymbolName ),Weight :FontWeightMedium ,Flags :0x0004,BBox :[4]float64 {-180,-293,1090,1010},ItalicAngle :0,Ascent :0,Descent :0,CapHeight :0,XHeight :0,StemV :85,StemH :92};
return NewStdFontWithEncoding (_fbfc ,_ccgc ,_ebd );};func (_aaed *TtfType )String ()string {return _d .Sprintf ("\u0046\u004fN\u0054\u005f\u0046\u0049\u004cE\u0032\u007b\u0025\u0023\u0071 \u0055\u006e\u0069\u0074\u0073\u0050\u0065\u0072\u0045\u006d\u003d\u0025\u0064\u0020\u0042\u006f\u006c\u0064\u003d\u0025\u0074\u0020\u0049\u0074\u0061\u006c\u0069\u0063\u0041\u006e\u0067\u006c\u0065\u003d\u0025\u0066\u0020"+"\u0043\u0061pH\u0065\u0069\u0067h\u0074\u003d\u0025\u0064 Ch\u0061rs\u003d\u0025\u0064\u0020\u0047\u006c\u0079ph\u004e\u0061\u006d\u0065\u0073\u003d\u0025d\u007d",_aaed .PostScriptName ,_aaed .UnitsPerEm ,_aaed .Bold ,_aaed .ItalicAngle ,_aaed .CapHeight ,len (_aaed .Chars ),len (_aaed .GlyphNames ));
};func _aa ()StdFont {_ad .Do (_ecf );_fg :=Descriptor {Name :CourierObliqueName ,Family :string (CourierName ),Weight :FontWeightMedium ,Flags :0x0061,BBox :[4]float64 {-27,-250,849,805},ItalicAngle :-12,Ascent :629,Descent :-157,CapHeight :562,XHeight :426,StemV :51,StemH :51};
return NewStdFont (_fg ,_cdf );};func _abc ()StdFont {_cb .Do (_daf );_ceg :=Descriptor {Name :TimesBoldName ,Family :_gad ,Weight :FontWeightBold ,Flags :0x0020,BBox :[4]float64 {-168,-218,1000,935},ItalicAngle :0,Ascent :683,Descent :-217,CapHeight :676,XHeight :461,StemV :139,StemH :44};
return NewStdFont (_ceg ,_ggg );};func (_gdbd *ttfParser )ReadUShort ()(_eabb uint16 ){_cg .Read (_gdbd ._gfgf ,_cg .BigEndian ,&_eabb );return _eabb ;};func (_dge *ttfParser )parseCmapSubtable10 (_dddg int64 )error {if _dge ._fba .Chars ==nil {_dge ._fba .Chars =make (map[rune ]GID );
};_dge ._gfgf .Seek (int64 (_dge ._cgg ["\u0063\u006d\u0061\u0070"])+_dddg ,_gd .SeekStart );var _bbac ,_gadca uint32 ;_bgb :=_dge .ReadUShort ();if _bgb < 8{_bbac =uint32 (_dge .ReadUShort ());_gadca =uint32 (_dge .ReadUShort ());}else {_dge .ReadUShort ();
_bbac =_dge .ReadULong ();_gadca =_dge .ReadULong ();};_cd .Log .Trace ("\u0070\u0061r\u0073\u0065\u0043\u006d\u0061p\u0053\u0075\u0062\u0074\u0061b\u006c\u0065\u0031\u0030\u003a\u0020\u0066\u006f\u0072\u006d\u0061\u0074\u003d\u0025\u0064\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u003d\u0025\u0064\u0020\u006c\u0061\u006e\u0067\u0075\u0061\u0067\u0065\u003d\u0025\u0064",_bgb ,_bbac ,_gadca );
if _bgb !=0{return _dd .New ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0063\u006d\u0061p\u0020s\u0075\u0062\u0074\u0061\u0062\u006c\u0065\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};_ega ,_fgb :=_dge .ReadStr (256);if _fgb !=nil {return _fgb ;
};_dab :=[]byte (_ega );for _ffg ,_geca :=range _dab {_dge ._fba .Chars [rune (_ffg )]=GID (_geca );if _geca !=0{_d .Printf ("\u0009\u0030\u0078\u002502\u0078\u0020\u279e\u0020\u0030\u0078\u0025\u0030\u0032\u0078\u003d\u0025\u0063\u000a",_ffg ,_geca ,rune (_geca ));
};};return nil ;};func (_dafc *ttfParser )ParseMaxp ()error {if _dagg :=_dafc .Seek ("\u006d\u0061\u0078\u0070");_dagg !=nil {return _dagg ;};_dafc .Skip (4);_dafc ._ddd =_dafc .ReadUShort ();return nil ;};func (_bggf *ttfParser )Read32Fixed ()float64 {_ebg :=float64 (_bggf .ReadShort ());
_dfec :=float64 (_bggf .ReadUShort ())/65536.0;return _ebg +_dfec ;};var _eba =[]int16 {722,1000,722,722,722,722,722,722,722,722,722,722,722,722,722,722,722,722,722,612,667,667,667,667,667,667,667,667,667,722,556,611,778,778,778,722,278,278,278,278,278,278,278,278,556,722,722,611,611,611,611,611,833,722,722,722,722,722,778,1000,778,778,778,778,778,778,778,778,667,778,722,722,722,722,667,667,667,667,667,611,611,611,667,722,722,722,722,722,722,722,722,722,667,944,667,667,667,667,611,611,611,611,556,556,556,556,333,556,889,556,556,722,556,556,584,584,389,975,556,611,278,280,389,389,333,333,333,280,350,556,556,333,556,556,333,556,333,333,278,250,737,556,611,556,556,743,611,400,333,584,556,333,278,556,556,556,556,556,556,556,556,1000,556,1000,556,556,584,611,333,333,333,611,556,611,556,556,167,611,611,611,611,333,584,549,556,556,333,333,611,333,333,278,278,278,278,278,278,278,278,556,556,278,278,400,278,584,549,584,494,278,889,333,584,611,584,611,611,611,611,556,549,611,556,611,611,611,611,944,333,611,611,611,556,834,834,333,370,365,611,611,611,556,333,333,494,889,278,278,1000,584,584,611,611,611,474,500,500,500,278,278,278,238,389,389,549,389,389,737,333,556,556,556,556,556,556,333,556,556,278,278,556,600,333,389,333,611,556,834,333,333,1000,556,333,611,611,611,611,611,611,611,556,611,611,556,778,556,556,556,556,556,500,500,500,500,556};
func RegisterStdFont (name StdFontName ,fnc func ()StdFont ,aliases ...StdFontName ){if _ ,_fc :=_ab .read (name );_fc {panic ("\u0066o\u006e\u0074\u0020\u0061l\u0072\u0065\u0061\u0064\u0079 \u0072e\u0067i\u0073\u0074\u0065\u0072\u0065\u0064\u003a "+string (name ));
};_ab .write (name ,fnc );for _ ,_eg :=range aliases {RegisterStdFont (_eg ,fnc );};};type Font interface{Encoder ()_age .TextEncoder ;GetRuneMetrics (_de rune )(CharMetrics ,bool );};func (_ac *RuneCharSafeMap )Write (b rune ,r CharMetrics ){_ac ._ge .Lock ();
defer _ac ._ge .Unlock ();_ac ._b [b ]=r ;};var _deba *RuneCharSafeMap ;func _daf (){_gadc =MakeRuneCharSafeMap (len (_bad ));_ggg =MakeRuneCharSafeMap (len (_bad ));_fbd =MakeRuneCharSafeMap (len (_bad ));_efg =MakeRuneCharSafeMap (len (_bad ));for _ege ,_cff :=range _bad {_gadc .Write (_cff ,CharMetrics {Wx :float64 (_cga [_ege ])});
_ggg .Write (_cff ,CharMetrics {Wx :float64 (_dda [_ege ])});_fbd .Write (_cff ,CharMetrics {Wx :float64 (_cae [_ege ])});_efg .Write (_cff ,CharMetrics {Wx :float64 (_caf [_ege ])});};};func (_bbf StdFont )GetRuneMetrics (r rune )(CharMetrics ,bool ){_dde ,_cca :=_bbf ._geb .Read (r );
return _dde ,_cca ;};func (_egg *ttfParser )Skip (n int ){_egg ._gfgf .Seek (int64 (n ),_gd .SeekCurrent )};func (_beb *TtfType )MakeToUnicode ()*_f .CMap {_cffc :=make (map[_f .CharCode ]rune );if len (_beb .GlyphNames )==0{for _dae :=range _beb .Chars {_cffc [_f .CharCode (_dae )]=_dae ;
};return _f .NewToUnicodeCMap (_cffc );};for _dfg ,_fgge :=range _beb .Chars {_beg :=_f .CharCode (_dfg );_cffb :=_beb .GlyphNames [_fgge ];_aae ,_bccd :=_age .GlyphToRune (_cffb );if !_bccd {_cd .Log .Debug ("\u004e\u006f \u0072\u0075\u006e\u0065\u002e\u0020\u0063\u006f\u0064\u0065\u003d\u0030\u0078\u0025\u0030\u0034\u0078\u0020\u0067\u006c\u0079\u0070h=\u0025\u0071",_dfg ,_cffb );
_aae =_age .MissingCodeRune ;};_cffc [_beg ]=_aae ;};return _f .NewToUnicodeCMap (_cffc );};func NewStdFont (desc Descriptor ,metrics *RuneCharSafeMap )StdFont {return NewStdFontWithEncoding (desc ,metrics ,_age .NewStandardEncoder ());};func init (){RegisterStdFont (CourierName ,_bfb ,"\u0043\u006f\u0075\u0072\u0069\u0065\u0072\u0043\u006f\u0075\u0072\u0069e\u0072\u004e\u0065\u0077","\u0043\u006f\u0075\u0072\u0069\u0065\u0072\u004e\u0065\u0077");
RegisterStdFont (CourierBoldName ,_deb ,"\u0043o\u0075r\u0069\u0065\u0072\u004e\u0065\u0077\u002c\u0042\u006f\u006c\u0064");RegisterStdFont (CourierObliqueName ,_aa ,"\u0043\u006f\u0075\u0072\u0069\u0065\u0072\u004e\u0065\u0077\u002c\u0049t\u0061\u006c\u0069\u0063");
RegisterStdFont (CourierBoldObliqueName ,_ffa ,"C\u006f\u0075\u0072\u0069er\u004ee\u0077\u002c\u0042\u006f\u006cd\u0049\u0074\u0061\u006c\u0069\u0063");};func (_db StdFont )Descriptor ()Descriptor {return _db ._bef };func _bfb ()StdFont {_ad .Do (_ecf );
_fab :=Descriptor {Name :CourierName ,Family :string (CourierName ),Weight :FontWeightMedium ,Flags :0x0021,BBox :[4]float64 {-23,-250,715,805},ItalicAngle :0,Ascent :629,Descent :-157,CapHeight :562,XHeight :426,StemV :51,StemH :51};return NewStdFont (_fab ,_dgc );
};const (SymbolName =StdFontName ("\u0053\u0079\u006d\u0062\u006f\u006c");ZapfDingbatsName =StdFontName ("\u005a\u0061\u0070f\u0044\u0069\u006e\u0067\u0062\u0061\u0074\u0073"););type TtfType struct{UnitsPerEm uint16 ;PostScriptName string ;Bold bool ;ItalicAngle float64 ;
IsFixedPitch bool ;TypoAscender int16 ;TypoDescender int16 ;UnderlinePosition int16 ;UnderlineThickness int16 ;Xmin ,Ymin ,Xmax ,Ymax int16 ;CapHeight int16 ;Widths []uint16 ;Chars map[rune ]GID ;GlyphNames []GlyphName ;};type GID =_age .GID ;const (_gad ="\u0054\u0069\u006de\u0073";
TimesRomanName =StdFontName ("T\u0069\u006d\u0065\u0073\u002d\u0052\u006f\u006d\u0061\u006e");TimesBoldName =StdFontName ("\u0054\u0069\u006d\u0065\u0073\u002d\u0042\u006f\u006c\u0064");TimesItalicName =StdFontName ("\u0054\u0069\u006de\u0073\u002d\u0049\u0074\u0061\u006c\u0069\u0063");
TimesBoldItalicName =StdFontName ("\u0054\u0069m\u0065\u0073\u002dB\u006f\u006c\u0064\u0049\u0074\u0061\u006c\u0069\u0063"););type FontWeight int ;func (_cgc *RuneCharSafeMap )Range (f func (_bb rune ,_ae CharMetrics )(_cdb bool )){_cgc ._ge .RLock ();
defer _cgc ._ge .RUnlock ();for _bc ,_gb :=range _cgc ._b {if f (_bc ,_gb ){break ;};};};var _bca *RuneCharSafeMap ;func (_fd *RuneCharSafeMap )Copy ()*RuneCharSafeMap {_ddf :=MakeRuneCharSafeMap (_fd .Length ());_fd .Range (func (_bf rune ,_ff CharMetrics )(_fb bool ){_ddf ._b [_bf ]=_ff ;
return false });return _ddf ;};var _cb _e .Once ;func init (){RegisterStdFont (HelveticaName ,_dded ,"\u0041\u0072\u0069a\u006c");RegisterStdFont (HelveticaBoldName ,_aac ,"\u0041\u0072\u0069\u0061\u006c\u002c\u0042\u006f\u006c\u0064");RegisterStdFont (HelveticaObliqueName ,_fcb ,"\u0041\u0072\u0069a\u006c\u002c\u0049\u0074\u0061\u006c\u0069\u0063");
RegisterStdFont (HelveticaBoldObliqueName ,_bd ,"\u0041\u0072i\u0061\u006c\u002cB\u006f\u006c\u0064\u0049\u0074\u0061\u006c\u0069\u0063");};func (_bgba *ttfParser )readByte ()(_eebd uint8 ){_cg .Read (_bgba ._gfgf ,_cg .BigEndian ,&_eebd );return _eebd ;
};func _cdfe (_fff map[string ]uint32 )string {var _cgd []string ;for _aff :=range _fff {_cgd =append (_cgd ,_aff );};_g .Slice (_cgd ,func (_bbbc ,_agdb int )bool {return _fff [_cgd [_bbbc ]]< _fff [_cgd [_agdb ]]});_aed :=[]string {_d .Sprintf ("\u0054\u0072\u0075\u0065Ty\u0070\u0065\u0020\u0074\u0061\u0062\u006c\u0065\u0073\u003a\u0020\u0025\u0064",len (_fff ))};
for _ ,_adc :=range _cgd {_aed =append (_aed ,_d .Sprintf ("\u0009%\u0071\u0020\u0025\u0035\u0064",_adc ,_fff [_adc ]));};return _df .Join (_aed ,"\u000a");};func _ecf (){const _cfe =600;_dgc =MakeRuneCharSafeMap (len (_bad ));for _ ,_dfe :=range _bad {_dgc .Write (_dfe ,CharMetrics {Wx :_cfe });
};_deba =_dgc .Copy ();_agg =_dgc .Copy ();_cdf =_dgc .Copy ();};func (_gdb *ttfParser )ParseHhea ()error {if _dc :=_gdb .Seek ("\u0068\u0068\u0065\u0061");_dc !=nil {return _dc ;};_gdb .Skip (4+15*2);_gdb ._dfc =_gdb .ReadUShort ();return nil ;};var _adb *RuneCharSafeMap ;
func _deb ()StdFont {_ad .Do (_ecf );_gfg :=Descriptor {Name :CourierBoldName ,Family :string (CourierName ),Weight :FontWeightBold ,Flags :0x0021,BBox :[4]float64 {-113,-250,749,801},ItalicAngle :0,Ascent :629,Descent :-157,CapHeight :562,XHeight :439,StemV :106,StemH :84};
return NewStdFont (_gfg ,_deba );};func (_dgd *ttfParser )parseCmapSubtable31 (_faf int64 )error {_acc :=make ([]rune ,0,8);_dbe :=make ([]rune ,0,8);_cdaf :=make ([]int16 ,0,8);_gbga :=make ([]uint16 ,0,8);_dgd ._fba .Chars =make (map[rune ]GID );_dgd ._gfgf .Seek (int64 (_dgd ._cgg ["\u0063\u006d\u0061\u0070"])+_faf ,_gd .SeekStart );
_bea :=_dgd .ReadUShort ();if _bea !=4{_cd .Log .Debug ("u\u006e\u0065\u0078\u0070\u0065\u0063t\u0065\u0064\u0020\u0073\u0075\u0062t\u0061\u0062\u006c\u0065\u0020\u0066\u006fr\u006d\u0061\u0074\u003a\u0020\u0025\u0064\u0020\u0028\u0025w\u0029",_bea );return nil ;
};_dgd .Skip (2*2);_gfgc :=int (_dgd .ReadUShort ()/2);_dgd .Skip (3*2);for _agca :=0;_agca < _gfgc ;_agca ++{_dbe =append (_dbe ,rune (_dgd .ReadUShort ()));};_dgd .Skip (2);for _cgbe :=0;_cgbe < _gfgc ;_cgbe ++{_acc =append (_acc ,rune (_dgd .ReadUShort ()));
};for _dfde :=0;_dfde < _gfgc ;_dfde ++{_cdaf =append (_cdaf ,_dgd .ReadShort ());};_ece ,_ :=_dgd ._gfgf .Seek (int64 (0),_gd .SeekCurrent );for _egeg :=0;_egeg < _gfgc ;_egeg ++{_gbga =append (_gbga ,_dgd .ReadUShort ());};for _efb :=0;_efb < _gfgc ;
_efb ++{_ddaf :=_acc [_efb ];_baa :=_dbe [_efb ];_caa :=_cdaf [_efb ];_bec :=_gbga [_efb ];if _bec > 0{_dgd ._gfgf .Seek (_ece +2*int64 (_efb )+int64 (_bec ),_gd .SeekStart );};for _ccc :=_ddaf ;_ccc <=_baa ;_ccc ++{if _ccc ==0xFFFF{break ;};var _bbae int32 ;
if _bec > 0{_bbae =int32 (_dgd .ReadUShort ());if _bbae > 0{_bbae +=int32 (_caa );};}else {_bbae =_ccc +int32 (_caa );};if _bbae >=65536{_bbae -=65536;};if _bbae > 0{_dgd ._fba .Chars [_ccc ]=GID (_bbae );};};};return nil ;};func _dded ()StdFont {_gbe .Do (_ca );
_ef :=Descriptor {Name :HelveticaName ,Family :string (HelveticaName ),Weight :FontWeightMedium ,Flags :0x0020,BBox :[4]float64 {-166,-225,1000,931},ItalicAngle :0,Ascent :718,Descent :-207,CapHeight :718,XHeight :523,StemV :88,StemH :76};return NewStdFont (_ef ,_ebc );
};type GlyphName =_age .GlyphName ;const (HelveticaName =StdFontName ("\u0048e\u006c\u0076\u0065\u0074\u0069\u0063a");HelveticaBoldName =StdFontName ("\u0048\u0065\u006c\u0076\u0065\u0074\u0069\u0063\u0061-\u0042\u006f\u006c\u0064");HelveticaObliqueName =StdFontName ("\u0048\u0065\u006c\u0076\u0065\u0074\u0069\u0063\u0061\u002d\u004f\u0062l\u0069\u0071\u0075\u0065");
HelveticaBoldObliqueName =StdFontName ("H\u0065\u006c\u0076\u0065ti\u0063a\u002d\u0042\u006f\u006c\u0064O\u0062\u006c\u0069\u0071\u0075\u0065"););func (_egd *ttfParser )ReadULong ()(_caeg uint32 ){_cg .Read (_egd ._gfgf ,_cg .BigEndian ,&_caeg );return _caeg ;
};func NewStdFontWithEncoding (desc Descriptor ,metrics *RuneCharSafeMap ,encoder _age .TextEncoder )StdFont {var _acd rune =0xA0;if _ ,_gbc :=metrics .Read (_acd );!_gbc {_ec ,_ :=metrics .Read (0x20);metrics .Write (_acd ,_ec );};return StdFont {_bef :desc ,_geb :metrics ,_bg :encoder };
};var _ebc *RuneCharSafeMap ;func init (){RegisterStdFont (SymbolName ,_aea ,"\u0053\u0079\u006d\u0062\u006f\u006c\u002c\u0049\u0074\u0061\u006c\u0069\u0063","S\u0079\u006d\u0062\u006f\u006c\u002c\u0042\u006f\u006c\u0064","\u0053\u0079\u006d\u0062\u006f\u006c\u002c\u0042\u006f\u006c\u0064\u0049t\u0061\u006c\u0069\u0063");
RegisterStdFont (ZapfDingbatsName ,_gg );};func (_fda *ttfParser )ParseName ()error {if _cfg :=_fda .Seek ("\u006e\u0061\u006d\u0065");_cfg !=nil {return _cfg ;};_cgce ,_ :=_fda ._gfgf .Seek (0,_gd .SeekCurrent );_fda ._fba .PostScriptName ="";_fda .Skip (2);
_bga :=_fda .ReadUShort ();_bfgc :=_fda .ReadUShort ();for _ddad :=uint16 (0);_ddad < _bga &&_fda ._fba .PostScriptName =="";_ddad ++{_fda .Skip (3*2);_cfc :=_fda .ReadUShort ();_fde :=_fda .ReadUShort ();_agbc :=_fda .ReadUShort ();if _cfc ==6{_fda ._gfgf .Seek (_cgce +int64 (_bfgc )+int64 (_agbc ),_gd .SeekStart );
_gfbg ,_efgc :=_fda .ReadStr (int (_fde ));if _efgc !=nil {return _efgc ;};_gfbg =_df .Replace (_gfbg ,"\u0000","",-1);_aacg ,_efgc :=_a .Compile ("\u005b\u0028\u0029\u007b\u007d\u003c\u003e\u0020\u002f%\u005b\u005c\u005d\u005d");if _efgc !=nil {return _efgc ;
};_fda ._fba .PostScriptName =_aacg .ReplaceAllString (_gfbg ,"");};};if _fda ._fba .PostScriptName ==""{_cd .Log .Debug ("\u0050a\u0072\u0073e\u004e\u0061\u006de\u003a\u0020\u0054\u0068\u0065\u0020\u006ea\u006d\u0065\u0020\u0050\u006f\u0073t\u0053\u0063\u0072\u0069\u0070\u0074\u0020\u0077\u0061\u0073\u0020n\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064\u002e");
};return nil ;};type StdFontName string ;var _ Font =StdFont {};var _efg *RuneCharSafeMap ;var _ede *RuneCharSafeMap ;func init (){RegisterStdFont (TimesRomanName ,_gcf ,"\u0054\u0069\u006d\u0065\u0073\u004e\u0065\u0077\u0052\u006f\u006d\u0061\u006e","\u0054\u0069\u006de\u0073");
RegisterStdFont (TimesBoldName ,_abc ,"\u0054i\u006de\u0073\u004e\u0065\u0077\u0052o\u006d\u0061n\u002c\u0042\u006f\u006c\u0064","\u0054\u0069\u006d\u0065\u0073\u002c\u0042\u006f\u006c\u0064");RegisterStdFont (TimesItalicName ,_add ,"T\u0069m\u0065\u0073\u004e\u0065\u0077\u0052\u006f\u006da\u006e\u002c\u0049\u0074al\u0069\u0063","\u0054\u0069\u006de\u0073\u002c\u0049\u0074\u0061\u006c\u0069\u0063");
RegisterStdFont (TimesBoldItalicName ,_bfg ,"\u0054i\u006d\u0065\u0073\u004e\u0065\u0077\u0052\u006f\u006d\u0061\u006e,\u0042\u006f\u006c\u0064\u0049\u0074\u0061\u006c\u0069\u0063","\u0054\u0069m\u0065\u0073\u002cB\u006f\u006c\u0064\u0049\u0074\u0061\u006c\u0069\u0063");
};func NewStdFontByName (name StdFontName )(StdFont ,bool ){_ddb ,_agb :=_ab .read (name );if !_agb {return StdFont {},false ;};return _ddb (),true ;};var _ccg =[]int16 {667,1000,667,667,667,667,667,667,667,667,667,667,722,722,722,722,722,722,722,612,667,667,667,667,667,667,667,667,667,722,556,611,778,778,778,722,278,278,278,278,278,278,278,278,500,667,667,556,556,556,556,556,833,722,722,722,722,722,778,1000,778,778,778,778,778,778,778,778,667,778,722,722,722,722,667,667,667,667,667,611,611,611,667,722,722,722,722,722,722,722,722,722,667,944,667,667,667,667,611,611,611,611,556,556,556,556,333,556,889,556,556,667,556,556,469,584,389,1015,556,556,278,260,334,334,278,278,333,260,350,500,500,333,500,500,333,556,333,278,278,250,737,556,556,556,556,643,556,400,333,584,556,333,278,556,556,556,556,556,556,556,556,1000,556,1000,556,556,584,556,278,333,278,500,556,500,556,556,167,556,556,556,611,333,584,549,556,556,333,333,556,333,333,222,278,278,278,278,278,222,222,500,500,222,222,299,222,584,549,584,471,222,833,333,584,556,584,556,556,556,556,556,549,556,556,556,556,556,556,944,333,556,556,556,556,834,834,333,370,365,611,556,556,537,333,333,476,889,278,278,1000,584,584,556,556,611,355,333,333,333,222,222,222,191,333,333,453,333,333,737,333,500,500,500,500,500,556,278,556,556,278,278,556,600,278,317,278,556,556,834,333,333,1000,556,333,556,556,556,556,556,556,556,556,556,556,500,722,500,500,500,500,556,500,500,500,500,556};
func NewFontFile2FromPdfObject (obj _ed .PdfObject )(TtfType ,error ){obj =_ed .TraceToDirectObject (obj );_bfd ,_fbdb :=obj .(*_ed .PdfObjectStream );if !_fbdb {_cd .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0046\u006f\u006e\u0074\u0046\u0069\u006c\u0065\u0032\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0073\u0074\u0072e\u0061\u006d \u0028\u0025\u0054\u0029",obj );
return TtfType {},_ed .ErrTypeError ;};_eab ,_cdd :=_ed .DecodeStream (_bfd );if _cdd !=nil {return TtfType {},_cdd ;};_eddc :=ttfParser {_gfgf :_ag .NewReader (_eab )};return _eddc .Parse ();};func (_egf *ttfParser )parseCmapFormat12 ()error {_eafd :=_egf .ReadULong ();
_cd .Log .Trace ("\u0070\u0061\u0072se\u0043\u006d\u0061\u0070\u0046\u006f\u0072\u006d\u0061t\u00312\u003a \u0025s\u0020\u006e\u0075\u006d\u0047\u0072\u006f\u0075\u0070\u0073\u003d\u0025\u0064",_egf ._fba .String (),_eafd );for _ffab :=uint32 (0);_ffab < _eafd ;
_ffab ++{_dca :=_egf .ReadULong ();_befb :=_egf .ReadULong ();_dgb :=_egf .ReadULong ();if _dca > 0x0010FFFF||(0xD800<=_dca &&_dca <=0xDFFF){return _dd .New ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0068\u0061\u0072\u0061c\u0074\u0065\u0072\u0073\u0020\u0063\u006f\u0064\u0065\u0073");
};if _befb < _dca ||_befb > 0x0010FFFF||(0xD800<=_befb &&_befb <=0xDFFF){return _dd .New ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0068\u0061\u0072\u0061c\u0074\u0065\u0072\u0073\u0020\u0063\u006f\u0064\u0065\u0073");};for _ggde :=_dca ;_ggde <=_befb ;
_ggde ++{if _ggde > 0x10FFFF{_cd .Log .Debug ("\u0046\u006fr\u006d\u0061\u0074\u0020\u0031\u0032\u0020\u0063\u006d\u0061\u0070\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0073\u0020\u0063\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0020\u0062\u0065\u0079\u006f\u006e\u0064\u0020\u0055\u0043\u0053\u002d\u0034");
};_egf ._fba .Chars [rune (_ggde )]=GID (_dgb );_dgb ++;};};return nil ;};func _bfg ()StdFont {_cb .Do (_daf );_fae :=Descriptor {Name :TimesBoldItalicName ,Family :_gad ,Weight :FontWeightBold ,Flags :0x0060,BBox :[4]float64 {-200,-218,996,921},ItalicAngle :-15,Ascent :683,Descent :-217,CapHeight :669,XHeight :462,StemV :121,StemH :42};
return NewStdFont (_fae ,_fbd );};func _aac ()StdFont {_gbe .Do (_ca );_ecc :=Descriptor {Name :HelveticaBoldName ,Family :string (HelveticaName ),Weight :FontWeightBold ,Flags :0x0020,BBox :[4]float64 {-170,-228,1003,962},ItalicAngle :0,Ascent :718,Descent :-207,CapHeight :718,XHeight :532,StemV :140,StemH :118};
return NewStdFont (_ecc ,_ede );};func _fcb ()StdFont {_gbe .Do (_ca );_aag :=Descriptor {Name :HelveticaObliqueName ,Family :string (HelveticaName ),Weight :FontWeightMedium ,Flags :0x0060,BBox :[4]float64 {-170,-225,1116,931},ItalicAngle :-12,Ascent :718,Descent :-207,CapHeight :718,XHeight :523,StemV :88,StemH :76};
return NewStdFont (_aag ,_bca );};func (_ddg *ttfParser )parseCmapFormat6 ()error {_beca :=int (_ddg .ReadUShort ());_gae :=int (_ddg .ReadUShort ());_cd .Log .Trace ("p\u0061\u0072\u0073\u0065\u0043\u006d\u0061\u0070\u0046o\u0072\u006d\u0061\u0074\u0036\u003a\u0020%s\u0020\u0066\u0069\u0072s\u0074\u0043\u006f\u0064\u0065\u003d\u0025\u0064\u0020en\u0074\u0072y\u0043\u006f\u0075\u006e\u0074\u003d\u0025\u0064",_ddg ._fba .String (),_beca ,_gae );
for _dfdg :=0;_dfdg < _gae ;_dfdg ++{_bfbd :=GID (_ddg .ReadUShort ());_ddg ._fba .Chars [rune (_dfdg +_beca )]=_bfbd ;};return nil ;};func TtfParse (r _gd .ReadSeeker )(TtfType ,error ){_deg :=&ttfParser {_gfgf :r };return _deg .Parse ()};var _ccgc =&RuneCharSafeMap {_b :map[rune ]CharMetrics {' ':{Wx :250},'!':{Wx :333},'#':{Wx :500},'%':{Wx :833},'&':{Wx :778},'(':{Wx :333},')':{Wx :333},'+':{Wx :549},',':{Wx :250},'.':{Wx :250},'/':{Wx :278},'0':{Wx :500},'1':{Wx :500},'2':{Wx :500},'3':{Wx :500},'4':{Wx :500},'5':{Wx :500},'6':{Wx :500},'7':{Wx :500},'8':{Wx :500},'9':{Wx :500},':':{Wx :278},';':{Wx :278},'<':{Wx :549},'=':{Wx :549},'>':{Wx :549},'?':{Wx :444},'[':{Wx :333},']':{Wx :333},'_':{Wx :500},'{':{Wx :480},'|':{Wx :200},'}':{Wx :480},'¬':{Wx :713},'°':{Wx :400},'±':{Wx :549},'µ':{Wx :576},'×':{Wx :549},'÷':{Wx :549},'ƒ':{Wx :500},'Α':{Wx :722},'Β':{Wx :667},'Γ':{Wx :603},'Ε':{Wx :611},'Ζ':{Wx :611},'Η':{Wx :722},'Θ':{Wx :741},'Ι':{Wx :333},'Κ':{Wx :722},'Λ':{Wx :686},'Μ':{Wx :889},'Ν':{Wx :722},'Ξ':{Wx :645},'Ο':{Wx :722},'Π':{Wx :768},'Ρ':{Wx :556},'Σ':{Wx :592},'Τ':{Wx :611},'Υ':{Wx :690},'Φ':{Wx :763},'Χ':{Wx :722},'Ψ':{Wx :795},'α':{Wx :631},'β':{Wx :549},'γ':{Wx :411},'δ':{Wx :494},'ε':{Wx :439},'ζ':{Wx :494},'η':{Wx :603},'θ':{Wx :521},'ι':{Wx :329},'κ':{Wx :549},'λ':{Wx :549},'ν':{Wx :521},'ξ':{Wx :493},'ο':{Wx :549},'π':{Wx :549},'ρ':{Wx :549},'ς':{Wx :439},'σ':{Wx :603},'τ':{Wx :439},'υ':{Wx :576},'φ':{Wx :521},'χ':{Wx :549},'ψ':{Wx :686},'ω':{Wx :686},'ϑ':{Wx :631},'ϒ':{Wx :620},'ϕ':{Wx :603},'ϖ':{Wx :713},'•':{Wx :460},'…':{Wx :1000},'′':{Wx :247},'″':{Wx :411},'⁄':{Wx :167},'€':{Wx :750},'ℑ':{Wx :686},'℘':{Wx :987},'ℜ':{Wx :795},'Ω':{Wx :768},'ℵ':{Wx :823},'←':{Wx :987},'↑':{Wx :603},'→':{Wx :987},'↓':{Wx :603},'↔':{Wx :1042},'↵':{Wx :658},'⇐':{Wx :987},'⇑':{Wx :603},'⇒':{Wx :987},'⇓':{Wx :603},'⇔':{Wx :1042},'∀':{Wx :713},'∂':{Wx :494},'∃':{Wx :549},'∅':{Wx :823},'∆':{Wx :612},'∇':{Wx :713},'∈':{Wx :713},'∉':{Wx :713},'∋':{Wx :439},'∏':{Wx :823},'∑':{Wx :713},'−':{Wx :549},'∗':{Wx :500},'√':{Wx :549},'∝':{Wx :713},'∞':{Wx :713},'∠':{Wx :768},'∧':{Wx :603},'∨':{Wx :603},'∩':{Wx :768},'∪':{Wx :768},'∫':{Wx :274},'∴':{Wx :863},'∼':{Wx :549},'≅':{Wx :549},'≈':{Wx :549},'≠':{Wx :549},'≡':{Wx :549},'≤':{Wx :549},'≥':{Wx :549},'⊂':{Wx :713},'⊃':{Wx :713},'⊄':{Wx :713},'⊆':{Wx :713},'⊇':{Wx :713},'⊕':{Wx :768},'⊗':{Wx :768},'⊥':{Wx :658},'⋅':{Wx :250},'⌠':{Wx :686},'⌡':{Wx :686},'〈':{Wx :329},'〉':{Wx :329},'◊':{Wx :494},'♠':{Wx :753},'♣':{Wx :753},'♥':{Wx :753},'♦':{Wx :753},'\uf6d9':{Wx :790},'\uf6da':{Wx :790},'\uf6db':{Wx :890},'\uf8e5':{Wx :500},'\uf8e6':{Wx :603},'\uf8e7':{Wx :1000},'\uf8e8':{Wx :790},'\uf8e9':{Wx :790},'\uf8ea':{Wx :786},'\uf8eb':{Wx :384},'\uf8ec':{Wx :384},'\uf8ed':{Wx :384},'\uf8ee':{Wx :384},'\uf8ef':{Wx :384},'\uf8f0':{Wx :384},'\uf8f1':{Wx :494},'\uf8f2':{Wx :494},'\uf8f3':{Wx :494},'\uf8f4':{Wx :494},'\uf8f5':{Wx :686},'\uf8f6':{Wx :384},'\uf8f7':{Wx :384},'\uf8f8':{Wx :384},'\uf8f9':{Wx :384},'\uf8fa':{Wx :384},'\uf8fb':{Wx :384},'\uf8fc':{Wx :494},'\uf8fd':{Wx :494},'\uf8fe':{Wx :494},'\uf8ff':{Wx :790}}};
var _dgc *RuneCharSafeMap ;func (_dad *ttfParser )Seek (tag string )error {_eged ,_faba :=_dad ._cgg [tag ];if !_faba {return _d .Errorf ("\u0074\u0061\u0062\u006ce \u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064\u003a\u0020\u0025\u0073",tag );};
_dad ._gfgf .Seek (int64 (_eged ),_gd .SeekStart );return nil ;};func (_cef StdFont )Encoder ()_age .TextEncoder {return _cef ._bg };func (_cf *RuneCharSafeMap )Length ()int {_cf ._ge .RLock ();defer _cf ._ge .RUnlock ();return len (_cf ._b );};var _caf =[]int16 {611,889,611,611,611,611,611,611,611,611,611,611,667,667,667,667,722,722,722,612,611,611,611,611,611,611,611,611,611,722,500,611,722,722,722,722,333,333,333,333,333,333,333,333,444,667,667,556,556,611,556,556,833,667,667,667,667,667,722,944,722,722,722,722,722,722,722,722,611,722,611,611,611,611,500,500,500,500,500,556,556,556,611,722,722,722,722,722,722,722,722,722,611,833,611,556,556,556,556,556,556,556,500,500,500,500,333,500,667,500,500,778,500,500,422,541,500,920,500,500,278,275,400,400,389,389,333,275,350,444,444,333,444,444,333,500,333,333,250,250,760,500,500,500,500,544,500,400,333,675,500,333,278,444,444,444,444,444,444,444,500,889,444,889,500,444,675,500,333,389,278,500,500,500,500,500,167,500,500,500,500,333,675,549,500,500,333,333,500,333,333,278,278,278,278,278,278,278,278,444,444,278,278,300,278,675,549,675,471,278,722,333,675,500,675,500,500,500,500,500,549,500,500,500,500,500,500,667,333,500,500,500,500,750,750,300,276,310,500,500,500,523,333,333,476,833,250,250,1000,675,675,500,500,500,420,556,556,556,333,333,333,214,389,389,453,389,389,760,333,389,389,389,389,389,500,333,500,500,278,250,500,600,278,300,278,500,500,750,300,333,980,500,300,500,500,500,500,500,500,500,500,500,500,444,667,444,444,444,444,500,389,389,389,389,500};
func (_bbb StdFont )ToPdfObject ()_ed .PdfObject {_fbf :=_ed .MakeDict ();_fbf .Set ("\u0054\u0079\u0070\u0065",_ed .MakeName ("\u0046\u006f\u006e\u0074"));_fbf .Set ("\u0053u\u0062\u0074\u0079\u0070\u0065",_ed .MakeName ("\u0054\u0079\u0070e\u0031"));
_fbf .Set ("\u0042\u0061\u0073\u0065\u0046\u006f\u006e\u0074",_ed .MakeName (_bbb .Name ()));_fbf .Set ("\u0045\u006e\u0063\u006f\u0064\u0069\u006e\u0067",_bbb ._bg .ToPdfObject ());return _ed .MakeIndirectObject (_fbf );};func (_ga *RuneCharSafeMap )Read (b rune )(CharMetrics ,bool ){_ga ._ge .RLock ();
defer _ga ._ge .RUnlock ();_be ,_dg :=_ga ._b [b ];return _be ,_dg ;};const (FontWeightMedium FontWeight =iota ;FontWeightBold ;FontWeightRoman ;);func (_eca *TtfType )MakeEncoder ()(_age .SimpleEncoder ,error ){_edf :=make (map[_age .CharCode ]GlyphName );
for _egc :=_age .CharCode (0);_egc <=256;_egc ++{_dgfe :=rune (_egc );_befd ,_fdf :=_eca .Chars [_dgfe ];if !_fdf {continue ;};var _cbg GlyphName ;if int (_befd )>=0&&int (_befd )< len (_eca .GlyphNames ){_cbg =_eca .GlyphNames [_befd ];}else {_ggd :=rune (_befd );
if _agd ,_eag :=_age .RuneToGlyph (_ggd );_eag {_cbg =_agd ;};};if _cbg !=""{_edf [_egc ]=_cbg ;};};if len (_edf )==0{_cd .Log .Debug ("WA\u0052\u004eI\u004e\u0047\u003a\u0020\u005a\u0065\u0072\u006f\u0020l\u0065\u006e\u0067\u0074\u0068\u0020\u0054\u0072\u0075\u0065\u0054\u0079\u0070\u0065\u0020\u0065\u006e\u0063\u006f\u0064\u0069\u006e\u0067\u002e\u0020\u0074\u0074\u0066=\u0025s\u0020\u0043\u0068\u0061\u0072\u0073\u003d\u005b%\u00200\u0032\u0078]",_eca ,_eca .Chars );
};return _age .NewCustomSimpleTextEncoder (_edf ,nil );};var _ad _e .Once ;type Descriptor struct{Name StdFontName ;Family string ;Weight FontWeight ;Flags uint ;BBox [4]float64 ;ItalicAngle float64 ;Ascent float64 ;Descent float64 ;CapHeight float64 ;
XHeight float64 ;StemV float64 ;StemH float64 ;};func _gcf ()StdFont {_cb .Do (_daf );_fcd :=Descriptor {Name :TimesRomanName ,Family :_gad ,Weight :FontWeightRoman ,Flags :0x0020,BBox :[4]float64 {-168,-218,1000,898},ItalicAngle :0,Ascent :683,Descent :-217,CapHeight :662,XHeight :450,StemV :84,StemH :28};
return NewStdFont (_fcd ,_gadc );};func TtfParseFile (fileStr string )(TtfType ,error ){_caee ,_cda :=_af .Open (fileStr );if _cda !=nil {return TtfType {},_cda ;};defer _caee .Close ();return TtfParse (_caee );};type CharMetrics struct{Wx float64 ;Wy float64 ;
};func (_dee *ttfParser )ReadSByte ()(_afdd int8 ){_cg .Read (_dee ._gfgf ,_cg .BigEndian ,&_afdd );return _afdd ;};var _ab =&fontMap {_da :make (map[StdFontName ]func ()StdFont )};func (_baff *ttfParser )parseCmapFormat0 ()error {_gff ,_cccf :=_baff .ReadStr (256);
if _cccf !=nil {return _cccf ;};_adbd :=[]byte (_gff );_cd .Log .Trace ("\u0070a\u0072\u0073e\u0043\u006d\u0061p\u0046\u006f\u0072\u006d\u0061\u0074\u0030:\u0020\u0025\u0073\u000a\u0064\u0061t\u0061\u0053\u0074\u0072\u003d\u0025\u002b\u0071\u000a\u0064\u0061t\u0061\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d",_baff ._fba .String (),_gff ,_adbd );
for _dgac ,_fga :=range _adbd {_baff ._fba .Chars [rune (_dgac )]=GID (_fga );};return nil ;};func (_fgf *ttfParser )ParseOS2 ()error {if _gfc :=_fgf .Seek ("\u004f\u0053\u002f\u0032");_gfc !=nil {return _gfc ;};_beag :=_fgf .ReadUShort ();_fgf .Skip (4*2);
_fgf .Skip (11*2+10+4*4+4);_fdfb :=_fgf .ReadUShort ();_fgf ._fba .Bold =(_fdfb &32)!=0;_fgf .Skip (2*2);_fgf ._fba .TypoAscender =_fgf .ReadShort ();_fgf ._fba .TypoDescender =_fgf .ReadShort ();if _beag >=2{_fgf .Skip (3*2+2*4+2);_fgf ._fba .CapHeight =_fgf .ReadShort ();
}else {_fgf ._fba .CapHeight =0;};return nil ;};func (_aaa *ttfParser )ParseHead ()error {if _bgg :=_aaa .Seek ("\u0068\u0065\u0061\u0064");_bgg !=nil {return _bgg ;};_aaa .Skip (3*4);_ee :=_aaa .ReadULong ();if _ee !=0x5F0F3CF5{_cd .Log .Debug ("\u0045\u0052\u0052\u004f\u0052:\u0020\u0049\u006e\u0063\u006fr\u0072e\u0063\u0074\u0020\u006d\u0061\u0067\u0069\u0063\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u002e\u0020\u0046\u006fn\u0074\u0020\u006d\u0061\u0079\u0020\u006e\u006f\u0074\u0020\u0064\u0069\u0073\u0070\u006c\u0061\u0079\u0020\u0063\u006f\u0072\u0072\u0065\u0063t\u006c\u0079\u002e\u0020\u0025\u0073",_aaa );
};_aaa .Skip (2);_aaa ._fba .UnitsPerEm =_aaa .ReadUShort ();_aaa .Skip (2*8);_aaa ._fba .Xmin =_aaa .ReadShort ();_aaa ._fba .Ymin =_aaa .ReadShort ();_aaa ._fba .Xmax =_aaa .ReadShort ();_aaa ._fba .Ymax =_aaa .ReadShort ();return nil ;};func MakeRuneCharSafeMap (length int )*RuneCharSafeMap {return &RuneCharSafeMap {_b :make (map[rune ]CharMetrics ,length )};
};func (_edg *ttfParser )parseCmapVersion (_dec int64 )error {_cd .Log .Trace ("p\u0061\u0072\u0073\u0065\u0043\u006da\u0070\u0056\u0065\u0072\u0073\u0069\u006f\u006e\u003a \u006f\u0066\u0066s\u0065t\u003d\u0025\u0064",_dec );if _edg ._fba .Chars ==nil {_edg ._fba .Chars =make (map[rune ]GID );
};_edg ._gfgf .Seek (int64 (_edg ._cgg ["\u0063\u006d\u0061\u0070"])+_dec ,_gd .SeekStart );var _eeb ,_fad uint32 ;_bbcc :=_edg .ReadUShort ();if _bbcc < 8{_eeb =uint32 (_edg .ReadUShort ());_fad =uint32 (_edg .ReadUShort ());}else {_edg .ReadUShort ();
_eeb =_edg .ReadULong ();_fad =_edg .ReadULong ();};_cd .Log .Debug ("\u0070\u0061\u0072\u0073\u0065\u0043m\u0061\u0070\u0056\u0065\u0072\u0073\u0069\u006f\u006e\u003a\u0020\u0066\u006f\u0072\u006d\u0061\u0074\u003d\u0025\u0064 \u006c\u0065\u006e\u0067\u0074\u0068\u003d\u0025\u0064\u0020\u006c\u0061\u006e\u0067u\u0061g\u0065\u003d\u0025\u0064",_bbcc ,_eeb ,_fad );
switch _bbcc {case 0:return _edg .parseCmapFormat0 ();case 6:return _edg .parseCmapFormat6 ();case 12:return _edg .parseCmapFormat12 ();default:_cd .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0055\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0063m\u0061\u0070\u0020\u0066\u006f\u0072\u006da\u0074\u003d\u0025\u0064",_bbcc );
return nil ;};};var _ggg *RuneCharSafeMap ;var _cdf *RuneCharSafeMap ;type ttfParser struct{_fba TtfType ;_gfgf _gd .ReadSeeker ;_cgg map[string ]uint32 ;_dfc uint16 ;_ddd uint16 ;};var _dda =[]int16 {722,1000,722,722,722,722,722,722,722,722,722,667,722,722,722,722,722,722,722,612,667,667,667,667,667,667,667,667,667,722,500,611,778,778,778,778,389,389,389,389,389,389,389,389,500,778,778,667,667,667,667,667,944,722,722,722,722,722,778,1000,778,778,778,778,778,778,778,778,611,778,722,722,722,722,556,556,556,556,556,667,667,667,611,722,722,722,722,722,722,722,722,722,722,1000,722,722,722,722,667,667,667,667,500,500,500,500,333,500,722,500,500,833,500,500,581,520,500,930,500,556,278,220,394,394,333,333,333,220,350,444,444,333,444,444,333,500,333,333,250,250,747,500,556,500,500,672,556,400,333,570,500,333,278,444,444,444,444,444,444,444,500,1000,444,1000,500,444,570,500,333,333,333,556,500,556,500,500,167,500,500,500,556,333,570,549,500,500,333,333,556,333,333,278,278,278,278,278,278,278,333,556,556,278,278,394,278,570,549,570,494,278,833,333,570,556,570,556,556,556,556,500,549,556,500,500,500,500,500,722,333,500,500,500,500,750,750,300,300,330,500,500,556,540,333,333,494,1000,250,250,1000,570,570,556,500,500,555,500,500,500,333,333,333,278,444,444,549,444,444,747,333,389,389,389,389,389,500,333,500,500,278,250,500,600,333,416,333,556,500,750,300,333,1000,500,300,556,556,556,556,556,556,556,500,556,556,500,722,500,500,500,500,500,444,444,444,444,500};
var _cga =[]int16 {722,889,722,722,722,722,722,722,722,722,722,667,667,667,667,667,722,722,722,612,611,611,611,611,611,611,611,611,611,722,500,556,722,722,722,722,333,333,333,333,333,333,333,333,389,722,722,611,611,611,611,611,889,722,722,722,722,722,722,889,722,722,722,722,722,722,722,722,556,722,667,667,667,667,556,556,556,556,556,611,611,611,556,722,722,722,722,722,722,722,722,722,722,944,722,722,722,722,611,611,611,611,444,444,444,444,333,444,667,444,444,778,444,444,469,541,500,921,444,500,278,200,480,480,333,333,333,200,350,444,444,333,444,444,333,500,333,278,250,250,760,500,500,500,500,588,500,400,333,564,500,333,278,444,444,444,444,444,444,444,500,1000,444,1000,500,444,564,500,333,333,333,556,500,556,500,500,167,500,500,500,500,333,564,549,500,500,333,333,500,333,333,278,278,278,278,278,278,278,278,500,500,278,278,344,278,564,549,564,471,278,778,333,564,500,564,500,500,500,500,500,549,500,500,500,500,500,500,722,333,500,500,500,500,750,750,300,276,310,500,500,500,453,333,333,476,833,250,250,1000,564,564,500,444,444,408,444,444,444,333,333,333,180,333,333,453,333,333,760,333,389,389,389,389,389,500,278,500,500,278,250,500,600,278,326,278,500,500,750,300,333,980,500,300,500,500,500,500,500,500,500,500,500,500,500,722,500,500,500,500,500,444,444,444,444,500};
type StdFont struct{_bef Descriptor ;_geb *RuneCharSafeMap ;_bg _age .TextEncoder ;};func (_afdc *ttfParser )ReadStr (length int )(string ,error ){_fbg :=make ([]byte ,length );_ffdc ,_edec :=_afdc ._gfgf .Read (_fbg );if _edec !=nil {return "",_edec ;
}else if _ffdc !=length {return "",_d .Errorf ("\u0075\u006e\u0061bl\u0065\u0020\u0074\u006f\u0020\u0072\u0065\u0061\u0064\u0020\u0025\u0064\u0020\u0062\u0079\u0074\u0065\u0073",length );};return string (_fbg ),nil ;};func (_eaf *ttfParser )Parse ()(TtfType ,error ){_cag ,_cad :=_eaf .ReadStr (4);
if _cad !=nil {return TtfType {},_cad ;};if _cag =="\u0074\u0074\u0063\u0066"{return _eaf .parseTTC ();}else if _cag !="\u0000\u0001\u0000\u0000"&&_cag !="\u0074\u0072\u0075\u0065"{_cd .Log .Debug ("\u0055n\u0072\u0065c\u006f\u0067\u006ei\u007a\u0065\u0064\u0020\u0054\u0072\u0075e\u0054\u0079\u0070\u0065\u0020\u0066i\u006c\u0065\u0020\u0066\u006f\u0072\u006d\u0061\u0074\u002e\u0020v\u0065\u0072\u0073\u0069\u006f\u006e\u003d\u0025\u0071",_cag );
};_daa :=int (_eaf .ReadUShort ());_eaf .Skip (3*2);_eaf ._cgg =make (map[string ]uint32 );var _abd string ;for _fabc :=0;_fabc < _daa ;_fabc ++{_abd ,_cad =_eaf .ReadStr (4);if _cad !=nil {return TtfType {},_cad ;};_eaf .Skip (4);_gba :=_eaf .ReadULong ();
_eaf .Skip (4);_eaf ._cgg [_abd ]=_gba ;};_cd .Log .Trace (_cdfe (_eaf ._cgg ));if _cad =_eaf .ParseComponents ();_cad !=nil {return TtfType {},_cad ;};return _eaf ._fba ,nil ;};func _ffa ()StdFont {_ad .Do (_ecf );_dag :=Descriptor {Name :CourierBoldObliqueName ,Family :string (CourierName ),Weight :FontWeightBold ,Flags :0x0061,BBox :[4]float64 {-57,-250,869,801},ItalicAngle :-12,Ascent :629,Descent :-157,CapHeight :562,XHeight :439,StemV :106,StemH :84};
return NewStdFont (_dag ,_agg );};func IsStdFont (name StdFontName )bool {_ ,_dfa :=_ab .read (name );return _dfa };func (_agc StdFont )GetMetricsTable ()*RuneCharSafeMap {return _agc ._geb };var _fbd *RuneCharSafeMap ;func (_cgb *TtfType )NewEncoder ()_age .TextEncoder {return _age .NewTrueTypeFontEncoder (_cgb .Chars )};
const (CourierName =StdFontName ("\u0043o\u0075\u0072\u0069\u0065\u0072");CourierBoldName =StdFontName ("\u0043\u006f\u0075r\u0069\u0065\u0072\u002d\u0042\u006f\u006c\u0064");CourierObliqueName =StdFontName ("\u0043o\u0075r\u0069\u0065\u0072\u002d\u004f\u0062\u006c\u0069\u0071\u0075\u0065");
CourierBoldObliqueName =StdFontName ("\u0043\u006f\u0075\u0072ie\u0072\u002d\u0042\u006f\u006c\u0064\u004f\u0062\u006c\u0069\u0071\u0075\u0065"););func (_gecb *ttfParser )parseTTC ()(TtfType ,error ){_gecb .Skip (2*2);_bbc :=_gecb .ReadULong ();if _bbc < 1{return TtfType {},_dd .New ("N\u006f \u0066\u006f\u006e\u0074\u0073\u0020\u0069\u006e \u0054\u0054\u0043\u0020fi\u006c\u0065");
};_gfa :=_gecb .ReadULong ();_ ,_ggf :=_gecb ._gfgf .Seek (int64 (_gfa ),_gd .SeekStart );if _ggf !=nil {return TtfType {},_ggf ;};return _gecb .Parse ();};func (_eb *fontMap )write (_ageb StdFontName ,_ce func ()StdFont ){_eb .Lock ();defer _eb .Unlock ();
_eb ._da [_ageb ]=_ce ;};func (_ace *ttfParser )ParsePost ()error {if _cdg :=_ace .Seek ("\u0070\u006f\u0073\u0074");_cdg !=nil {return _cdg ;};_ada :=_ace .Read32Fixed ();_ace ._fba .ItalicAngle =_ace .Read32Fixed ();_ace ._fba .UnderlinePosition =_ace .ReadShort ();
_ace ._fba .UnderlineThickness =_ace .ReadShort ();_ace ._fba .IsFixedPitch =_ace .ReadULong ()!=0;_ace .ReadULong ();_ace .ReadULong ();_ace .ReadULong ();_ace .ReadULong ();_cd .Log .Trace ("\u0050a\u0072\u0073\u0065\u0050\u006f\u0073\u0074\u003a\u0020\u0066\u006fr\u006d\u0061\u0074\u0054\u0079\u0070\u0065\u003d\u0025\u0066",_ada );
switch _ada {case 1.0:_ace ._fba .GlyphNames =_aaga ;case 2.0:_edgd :=int (_ace .ReadUShort ());_fdd :=make ([]int ,_edgd );_ace ._fba .GlyphNames =make ([]GlyphName ,_edgd );_gfgb :=-1;for _fcc :=0;_fcc < _edgd ;_fcc ++{_ecgg :=int (_ace .ReadUShort ());
_fdd [_fcc ]=_ecgg ;if _ecgg <=0x7fff&&_ecgg > _gfgb {_gfgb =_ecgg ;};};var _gdf []GlyphName ;if _gfgb >=len (_aaga ){_gdf =make ([]GlyphName ,_gfgb -len (_aaga )+1);for _fdfd :=0;_fdfd < _gfgb -len (_aaga )+1;_fdfd ++{_cbf :=int (_ace .readByte ());_eff ,_bfdb :=_ace .ReadStr (_cbf );
if _bfdb !=nil {return _bfdb ;};_gdf [_fdfd ]=GlyphName (_eff );};};for _bade :=0;_bade < _edgd ;_bade ++{_gfac :=_fdd [_bade ];if _gfac < len (_aaga ){_ace ._fba .GlyphNames [_bade ]=_aaga [_gfac ];}else if _gfac >=len (_aaga )&&_gfac <=32767{_ace ._fba .GlyphNames [_bade ]=_gdf [_gfac -len (_aaga )];
}else {_ace ._fba .GlyphNames [_bade ]="\u002e\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064";};};case 2.5:_dgdc :=make ([]int ,_ace ._ddd );for _ebcb :=0;_ebcb < len (_dgdc );_ebcb ++{_aacc :=int (_ace .ReadSByte ());_dgdc [_ebcb ]=_ebcb +1+_aacc ;
};_ace ._fba .GlyphNames =make ([]GlyphName ,len (_dgdc ));for _bcd :=0;_bcd < len (_ace ._fba .GlyphNames );_bcd ++{_bbacc :=_aaga [_dgdc [_bcd ]];_ace ._fba .GlyphNames [_bcd ]=_bbacc ;};case 3.0:_cd .Log .Debug ("\u004e\u006f\u0020\u0050\u006f\u0073t\u0053\u0063\u0072i\u0070\u0074\u0020n\u0061\u006d\u0065\u0020\u0069\u006e\u0066\u006f\u0072\u006da\u0074\u0069\u006f\u006e\u0020is\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0066\u006f\u0072\u0020\u0074\u0068\u0065\u0020\u0066\u006f\u006e\u0074\u002e");
default:_cd .Log .Debug ("\u0045\u0052\u0052\u004fR\u003a\u0020\u0055\u006e\u006b\u006e\u006f\u0077\u006e\u0020f\u006fr\u006d\u0061\u0074\u0054\u0079\u0070\u0065=\u0025\u0066",_ada );};return nil ;};func (_gdcg *ttfParser )ParseHmtx ()error {if _gdd :=_gdcg .Seek ("\u0068\u006d\u0074\u0078");
_gdd !=nil {return _gdd ;};_gdcg ._fba .Widths =make ([]uint16 ,0,8);for _cdac :=uint16 (0);_cdac < _gdcg ._dfc ;_cdac ++{_gdcg ._fba .Widths =append (_gdcg ._fba .Widths ,_gdcg .ReadUShort ());_gdcg .Skip (2);};if _gdcg ._dfc < _gdcg ._ddd &&_gdcg ._dfc > 0{_ecg :=_gdcg ._fba .Widths [_gdcg ._dfc -1];
for _dga :=_gdcg ._dfc ;_dga < _gdcg ._ddd ;_dga ++{_gdcg ._fba .Widths =append (_gdcg ._fba .Widths ,_ecg );};};return nil ;};type RuneCharSafeMap struct{_b map[rune ]CharMetrics ;_ge _e .RWMutex ;};func _add ()StdFont {_cb .Do (_daf );_eded :=Descriptor {Name :TimesItalicName ,Family :_gad ,Weight :FontWeightMedium ,Flags :0x0060,BBox :[4]float64 {-169,-217,1010,883},ItalicAngle :-15.5,Ascent :683,Descent :-217,CapHeight :653,XHeight :441,StemV :76,StemH :32};
return NewStdFont (_eded ,_efg );};func (_dgf StdFont )Name ()string {return string (_dgf ._bef .Name )};func _bd ()StdFont {_gbe .Do (_ca );_bdd :=Descriptor {Name :HelveticaBoldObliqueName ,Family :string (HelveticaName ),Weight :FontWeightBold ,Flags :0x0060,BBox :[4]float64 {-174,-228,1114,962},ItalicAngle :-12,Ascent :718,Descent :-207,CapHeight :718,XHeight :532,StemV :140,StemH :118};
return NewStdFont (_bdd ,_adb );};func _ca (){_ebc =MakeRuneCharSafeMap (len (_bad ));_ede =MakeRuneCharSafeMap (len (_bad ));for _fgg ,_adf :=range _bad {_ebc .Write (_adf ,CharMetrics {Wx :float64 (_ccg [_fgg ])});_ede .Write (_adf ,CharMetrics {Wx :float64 (_eba [_fgg ])});
};_bca =_ebc .Copy ();_adb =_ede .Copy ();};