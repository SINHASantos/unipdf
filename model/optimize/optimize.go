//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package optimize ;import (_bb "bytes";_a "crypto/md5";_gc "errors";_ac "fmt";_c "github.com/unidoc/unipdf/v3/common";_fe "github.com/unidoc/unipdf/v3/contentstream";_e "github.com/unidoc/unipdf/v3/core";_fg "github.com/unidoc/unipdf/v3/extractor";_be "github.com/unidoc/unipdf/v3/internal/imageutil";
_b "github.com/unidoc/unipdf/v3/internal/textencoding";_ae "github.com/unidoc/unipdf/v3/model";_d "github.com/unidoc/unitype";_gf "golang.org/x/image/draw";_ca "math";_f "strings";);

// CombineDuplicateStreams combines duplicated streams by its data hash.
// It implements interface model.Optimizer.
type CombineDuplicateStreams struct{};func _ebe (_cfe []_e .PdfObject )(_bge map[*_e .PdfObjectStream ]struct{},_ega error ){_bge =map[*_e .PdfObjectStream ]struct{}{};_fbea :=map[*_ae .PdfFont ]struct{}{};_fcg :=_badc (_cfe );for _ ,_dce :=range _fcg ._fcdd {_fgfb ,_ccg :=_e .GetDict (_dce .PdfObject );
if !_ccg {continue ;};_bac ,_ccg :=_e .GetDict (_fgfb .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"));if !_ccg {continue ;};_adf ,_ :=_eaee (_fgfb .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));_daef ,_adfc :=_ae .NewPdfPageResourcesFromDict (_bac );
if _adfc !=nil {return nil ,_adfc ;};_fce :=[]content {{_cec :_adf ,_aacb :_daef }};_addd :=_gaa (_fgfb .Get ("\u0041\u006e\u006e\u006f\u0074\u0073"));if _addd !=nil {_fce =append (_fce ,_addd ...);};for _ ,_ee :=range _fce {_ag ,_ade :=_fg .NewFromContents (_ee ._cec ,_ee ._aacb );
if _ade !=nil {return nil ,_ade ;};_cge ,_ ,_ ,_ade :=_ag .ExtractPageText ();if _ade !=nil {return nil ,_ade ;};for _ ,_ddb :=range _cge .Marks ().Elements (){if _ddb .Font ==nil {continue ;};if _ ,_fbc :=_fbea [_ddb .Font ];!_fbc {_fbea [_ddb .Font ]=struct{}{};
};};};};_aeca :=map[*_e .PdfObjectStream ][]*_ae .PdfFont {};for _de :=range _fbea {_abe :=_de .FontDescriptor ();if _abe ==nil ||_abe .FontFile2 ==nil {continue ;};_dab ,_eee :=_e .GetStream (_abe .FontFile2 );if !_eee {continue ;};_aeca [_dab ]=append (_aeca [_dab ],_de );
};for _cfeb :=range _aeca {var _ce []rune ;var _cbe []_d .GlyphIndex ;for _ ,_bfc :=range _aeca [_cfeb ]{switch _fgd :=_bfc .Encoder ().(type ){case *_b .IdentityEncoder :_fed :=_fgd .RegisteredRunes ();_fbg :=make ([]_d .GlyphIndex ,len (_fed ));for _cea ,_aece :=range _fed {_fbg [_cea ]=_d .GlyphIndex (_aece );
};_cbe =append (_cbe ,_fbg ...);case *_b .TrueTypeFontEncoder :_fd :=_fgd .RegisteredRunes ();_ce =append (_ce ,_fd ...);case _b .SimpleEncoder :_fcc :=_fgd .Charcodes ();for _ ,_ga :=range _fcc {_gb ,_fdc :=_fgd .CharcodeToRune (_ga );if !_fdc {_c .Log .Debug ("\u0043\u0068a\u0072\u0063\u006f\u0064\u0065\u003c\u002d\u003e\u0072\u0075\u006e\u0065\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064: \u0025\u0064",_ga );
continue ;};_ce =append (_ce ,_gb );};};};_ega =_fa (_cfeb ,_ce ,_cbe );if _ega !=nil {_c .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020\u0073\u0075\u0062\u0073\u0065\u0074\u0074\u0069\u006eg\u0020f\u006f\u006e\u0074\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u003a\u0020\u0025\u0076",_ega );
return nil ,_ega ;};_bge [_cfeb ]=struct{}{};};return _bge ,nil ;};func _gd (_fbf *_e .PdfObjectStream )error {_gfa ,_bf :=_e .DecodeStream (_fbf );if _bf !=nil {return _bf ;};_fgf :=_fe .NewContentStreamParser (string (_gfa ));_cde ,_bf :=_fgf .Parse ();
if _bf !=nil {return _bf ;};_cde =_dbe (_cde );_fge :=_cde .Bytes ();if len (_fge )>=len (_gfa ){return nil ;};_accc ,_bf :=_e .MakeStream (_cde .Bytes (),_e .NewFlateEncoder ());if _bf !=nil {return _bf ;};_fbf .Stream =_accc .Stream ;_fbf .Merge (_accc .PdfObjectDictionary );
return nil ;};func _agca (_bacd _e .PdfObject ,_gaef map[_e .PdfObject ]struct{})error {if _fedf ,_gfe :=_bacd .(*_e .PdfIndirectObject );_gfe {_gaef [_bacd ]=struct{}{};_cdc :=_agca (_fedf .PdfObject ,_gaef );if _cdc !=nil {return _cdc ;};return nil ;
};if _fddg ,_ebd :=_bacd .(*_e .PdfObjectStream );_ebd {_gaef [_fddg ]=struct{}{};_fde :=_agca (_fddg .PdfObjectDictionary ,_gaef );if _fde !=nil {return _fde ;};return nil ;};if _eced ,_fefc :=_bacd .(*_e .PdfObjectDictionary );_fefc {for _ ,_bab :=range _eced .Keys (){_egga :=_eced .Get (_bab );
_ =_egga ;if _egc ,_gfcba :=_egga .(*_e .PdfObjectReference );_gfcba {_egga =_egc .Resolve ();_eced .Set (_bab ,_egga );};if _bab !="\u0050\u0061\u0072\u0065\u006e\u0074"{if _dfde :=_agca (_egga ,_gaef );_dfde !=nil {return _dfde ;};};};return nil ;};if _ecbb ,_cga :=_bacd .(*_e .PdfObjectArray );
_cga {if _ecbb ==nil {return _gc .New ("\u0061\u0072\u0072a\u0079\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};for _gcbf ,_gbb :=range _ecbb .Elements (){if _edb ,_gfdg :=_gbb .(*_e .PdfObjectReference );_gfdg {_gbb =_edb .Resolve ();_ecbb .Set (_gcbf ,_gbb );
};if _fagd :=_agca (_gbb ,_gaef );_fagd !=nil {return _fagd ;};};return nil ;};return nil ;};

// CombineIdenticalIndirectObjects combines identical indirect objects.
// It implements interface model.Optimizer.
type CombineIdenticalIndirectObjects struct{};

// Optimize optimizes PDF objects to decrease PDF size.
func (_aaaa *ObjectStreams )Optimize (objects []_e .PdfObject )(_afeb []_e .PdfObject ,_fbcc error ){_ccf :=&_e .PdfObjectStreams {};_fcdf :=make ([]_e .PdfObject ,0,len (objects ));for _ ,_abed :=range objects {if _dcba ,_ebaa :=_abed .(*_e .PdfIndirectObject );
_ebaa &&_dcba .GenerationNumber ==0{_ccf .Append (_abed );}else {_fcdf =append (_fcdf ,_abed );};};if _ccf .Len ()==0{return _fcdf ,nil ;};_afeb =make ([]_e .PdfObject ,0,len (_fcdf )+_ccf .Len ()+1);if _ccf .Len ()> 1{_afeb =append (_afeb ,_ccf );};_afeb =append (_afeb ,_ccf .Elements ()...);
_afeb =append (_afeb ,_fcdf ...);return _afeb ,nil ;};func _fggg (_egcb []_e .PdfObject )[]*imageInfo {_afae :=_e .PdfObjectName ("\u0053u\u0062\u0074\u0079\u0070\u0065");_ggb :=make (map[*_e .PdfObjectStream ]struct{});var _cabd []*imageInfo ;for _ ,_fdg :=range _egcb {_edca ,_ccdd :=_e .GetStream (_fdg );
if !_ccdd {continue ;};if _ ,_bfe :=_ggb [_edca ];_bfe {continue ;};_ggb [_edca ]=struct{}{};_bffb :=_edca .PdfObjectDictionary .Get (_afae );_babg ,_ccdd :=_e .GetName (_bffb );if !_ccdd ||string (*_babg )!="\u0049\u006d\u0061g\u0065"{continue ;};_cccc :=&imageInfo {Stream :_edca ,BitsPerComponent :8};
if _fbb ,_fcdc :=_e .GetIntVal (_edca .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074"));_fcdc {_cccc .BitsPerComponent =_fbb ;};if _eda ,_eegg :=_e .GetIntVal (_edca .Get ("\u0057\u0069\u0064t\u0068"));_eegg {_cccc .Width =_eda ;
};if _gee ,_faec :=_e .GetIntVal (_edca .Get ("\u0048\u0065\u0069\u0067\u0068\u0074"));_faec {_cccc .Height =_gee ;};_gfbb ,_gbd :=_ae .NewPdfColorspaceFromPdfObject (_edca .Get ("\u0043\u006f\u006c\u006f\u0072\u0053\u0070\u0061\u0063\u0065"));if _gbd !=nil {_c .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_gbd );
continue ;};if _gfbb ==nil {_bdd ,_gcgb :=_e .GetName (_edca .Get ("\u0046\u0069\u006c\u0074\u0065\u0072"));if _gcgb {switch _bdd .String (){case "\u0043\u0043\u0049\u0054\u0054\u0046\u0061\u0078\u0044e\u0063\u006f\u0064\u0065","J\u0042\u0049\u0047\u0032\u0044\u0065\u0063\u006f\u0064\u0065":_gfbb =_ae .NewPdfColorspaceDeviceGray ();
_cccc .BitsPerComponent =1;};};};switch _gcgbf :=_gfbb .(type ){case *_ae .PdfColorspaceDeviceRGB :_cccc .ColorComponents =3;case *_ae .PdfColorspaceDeviceGray :_cccc .ColorComponents =1;default:_c .Log .Debug ("\u004f\u0070\u0074\u0069\u006d\u0069\u007aa\u0074\u0069\u006fn\u0020\u0069\u0073 \u006e\u006ft\u0020\u0073\u0075\u0070\u0070\u006fr\u0074ed\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u0025\u0054\u0020\u002d\u0020\u0073\u006b\u0069\u0070",_gcgbf );
continue ;};_cabd =append (_cabd ,_cccc );};return _cabd ;};

// Append appends optimizers to the chain.
func (_db *Chain )Append (optimizers ..._ae .Optimizer ){_db ._cf =append (_db ._cf ,optimizers ...)};

// Optimize optimizes PDF objects to decrease PDF size.
func (_ceb *ImagePPI )Optimize (objects []_e .PdfObject )(_ggdg []_e .PdfObject ,_fgde error ){if _ceb .ImageUpperPPI <=0{return objects ,nil ;};_fage :=_fggg (objects );if len (_fage )==0{return objects ,nil ;};_ebg :=make (map[_e .PdfObject ]struct{});
for _ ,_dbdb :=range _fage {_dcgg :=_dbdb .Stream .PdfObjectDictionary .Get ("\u0053\u004d\u0061s\u006b");_ebg [_dcgg ]=struct{}{};};_edfa :=make (map[*_e .PdfObjectStream ]*imageInfo );for _ ,_fbge :=range _fage {_edfa [_fbge .Stream ]=_fbge ;};var _bee *_e .PdfObjectDictionary ;
for _ ,_cfg :=range objects {if _gdg ,_abee :=_e .GetDict (_cfg );_bee ==nil &&_abee {if _babge ,_eab :=_e .GetName (_gdg .Get ("\u0054\u0079\u0070\u0065"));_eab &&*_babge =="\u0043a\u0074\u0061\u006c\u006f\u0067"{_bee =_gdg ;};};};if _bee ==nil {return objects ,nil ;
};_bcf ,_eba :=_e .GetDict (_bee .Get ("\u0050\u0061\u0067e\u0073"));if !_eba {return objects ,nil ;};_bffa ,_fdef :=_e .GetArray (_bcf .Get ("\u004b\u0069\u0064\u0073"));if !_fdef {return objects ,nil ;};for _ ,_egad :=range _bffa .Elements (){_dbca :=make (map[string ]*imageInfo );
_fbfg ,_ecbbc :=_e .GetDict (_egad );if !_ecbbc {continue ;};_bcg ,_ :=_eaee (_fbfg .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));if len (_bcg )==0{continue ;};_fdb ,_cdf :=_e .GetDict (_fbfg .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"));
if !_cdf {continue ;};_acbb ,_deab :=_ae .NewPdfPageResourcesFromDict (_fdb );if _deab !=nil {_c .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0072\u0065\u0073\u006f\u0075\u0072\u0063\u0065\u0073\u0020-\u0020\u0069\u0067\u006e\u006fr\u0069\u006eg\u003a\u0020\u0025\u0076",_deab );
continue ;};_fdab ,_bce :=_e .GetDict (_fdb .Get ("\u0058O\u0062\u006a\u0065\u0063\u0074"));if !_bce {continue ;};_afga :=_fdab .Keys ();for _ ,_gccb :=range _afga {if _agcd ,_fgda :=_e .GetStream (_fdab .Get (_gccb ));_fgda {if _fafb ,_fbfb :=_edfa [_agcd ];
_fbfb {_dbca [string (_gccb )]=_fafb ;};};};_edfe :=_fe .NewContentStreamParser (_bcg );_eeda ,_deab :=_edfe .Parse ();if _deab !=nil {_c .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_deab );continue ;};_gec :=_fe .NewContentStreamProcessor (*_eeda );
_gec .AddHandler (_fe .HandlerConditionEnumAllOperands ,"",func (_aedg *_fe .ContentStreamOperation ,_fbbd _fe .GraphicsState ,_ebbd *_ae .PdfPageResources )error {switch _aedg .Operand {case "\u0044\u006f":if len (_aedg .Params )!=1{_c .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020\u0049\u0067\u006e\u006f\u0072\u0069\u006e\u0067\u0020\u0044\u006f\u0020w\u0069\u0074\u0068\u0020\u006c\u0065\u006e\u0028\u0070\u0061ra\u006d\u0073\u0029 \u0021=\u0020\u0031");
return nil ;};_bffd ,_fgff :=_e .GetName (_aedg .Params [0]);if !_fgff {_c .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0049\u0067\u006e\u006f\u0072\u0069\u006e\u0067\u0020\u0044\u006f\u0020\u0077\u0069\u0074\u0068\u0020\u006e\u006f\u006e\u0020\u004e\u0061\u006d\u0065\u0020p\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072");
return nil ;};if _cbaa ,_bgef :=_dbca [string (*_bffd )];_bgef {_abcc :=_fbbd .CTM .ScalingFactorX ();_afd :=_fbbd .CTM .ScalingFactorY ();_bbgd ,_fedfb :=_abcc /72.0,_afd /72.0;_cbge ,_bgefb :=float64 (_cbaa .Width )/_bbgd ,float64 (_cbaa .Height )/_fedfb ;
if _bbgd ==0||_fedfb ==0{_cbge =72.0;_bgefb =72.0;};_cbaa .PPI =_ca .Max (_cbaa .PPI ,_cbge );_cbaa .PPI =_ca .Max (_cbaa .PPI ,_bgefb );};};return nil ;});_deab =_gec .Process (_acbb );if _deab !=nil {_c .Log .Debug ("E\u0052\u0052\u004f\u0052 p\u0072o\u0063\u0065\u0073\u0073\u0069n\u0067\u003a\u0020\u0025\u002b\u0076",_deab );
continue ;};};for _ ,_acaaf :=range _fage {if _ ,_bdf :=_ebg [_acaaf .Stream ];_bdf {continue ;};if _acaaf .PPI <=_ceb .ImageUpperPPI {continue ;};_cad ,_dgebc :=_ae .NewXObjectImageFromStream (_acaaf .Stream );if _dgebc !=nil {_c .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_dgebc );
continue ;};var _cced imageModifications ;_cced .Scale =_ceb .ImageUpperPPI /_acaaf .PPI ;if _acaaf .BitsPerComponent ==1&&_acaaf .ColorComponents ==1{_gbae :=_ca .Round (_acaaf .PPI /_ceb .ImageUpperPPI );_ffdc :=_be .NextPowerOf2 (uint (_gbae ));if _be .InDelta (float64 (_ffdc ),1/_cced .Scale ,0.3){_cced .Scale =float64 (1)/float64 (_ffdc );
};if _ ,_cdg :=_cad .Filter .(*_e .JBIG2Encoder );!_cdg {_cced .Encoding =_e .NewJBIG2Encoder ();};};if _dgebc =_dcge (_cad ,_cced );_dgebc !=nil {_c .Log .Debug ("\u0045\u0072\u0072\u006f\u0072 \u0073\u0063\u0061\u006c\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u006be\u0065\u0070\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0073",_dgebc );
continue ;};_cced .Encoding =nil ;if _edfd ,_dafc :=_e .GetStream (_acaaf .Stream .PdfObjectDictionary .Get ("\u0053\u004d\u0061s\u006b"));_dafc {_bdag ,_ceab :=_ae .NewXObjectImageFromStream (_edfd );if _ceab !=nil {_c .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_ceab );
continue ;};if _ceab =_dcge (_bdag ,_cced );_ceab !=nil {_c .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_ceab );continue ;};};};return objects ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_fbfe *CombineDuplicateStreams )Optimize (objects []_e .PdfObject )(_ebee []_e .PdfObject ,_gcd error ){_gcff :=make (map[_e .PdfObject ]_e .PdfObject );_agcc :=make (map[_e .PdfObject ]struct{});_dfaa :=make (map[string ][]*_e .PdfObjectStream );
for _ ,_bagb :=range objects {if _dgfd ,_bacdf :=_bagb .(*_e .PdfObjectStream );_bacdf {_feff :=_a .New ();_feff .Write (_dgfd .Stream );_feff .Write ([]byte (_dgfd .PdfObjectDictionary .WriteString ()));_faf :=string (_feff .Sum (nil ));_dfaa [_faf ]=append (_dfaa [_faf ],_dgfd );
};};for _ ,_cbgg :=range _dfaa {if len (_cbgg )< 2{continue ;};_gaab :=_cbgg [0];for _aad :=1;_aad < len (_cbgg );_aad ++{_aegf :=_cbgg [_aad ];_gcff [_aegf ]=_gaab ;_agcc [_aegf ]=struct{}{};};};_ebee =make ([]_e .PdfObject ,0,len (objects )-len (_agcc ));
for _ ,_feb :=range objects {if _ ,_efdg :=_agcc [_feb ];_efdg {continue ;};_ebee =append (_ebee ,_feb );};_fea (_ebee ,_gcff );return _ebee ,nil ;};func _dcg (_ffeg _e .PdfObject )(string ,error ){_dbff :=_e .TraceToDirectObject (_ffeg );switch _ffb :=_dbff .(type ){case *_e .PdfObjectString :return _ffb .Str (),nil ;
case *_e .PdfObjectStream :_dbfa ,_bcc :=_e .DecodeStream (_ffb );if _bcc !=nil {return "",_bcc ;};return string (_dbfa ),nil ;};return "",_ac .Errorf ("\u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u0063\u006f\u006e\u0074\u0065\u006e\u0074\u0020\u0073\u0074\u0072e\u0061\u006d\u0020\u006f\u0062\u006a\u0065\u0063\u0074\u0020\u0068\u006f\u006c\u0064\u0065\u0072\u0020\u0028\u0025\u0054\u0029",_dbff );
};

// Chain allows to use sequence of optimizers.
// It implements interface model.Optimizer.
type Chain struct{_cf []_ae .Optimizer };type imageInfo struct{BitsPerComponent int ;ColorComponents int ;Width int ;Height int ;Stream *_e .PdfObjectStream ;PPI float64 ;};func _eeb (_edd *_ae .Image ,_eaaf float64 )(*_ae .Image ,error ){_cddaf ,_aeb :=_edd .ToGoImage ();
if _aeb !=nil {return nil ,_aeb ;};var _ffbe _be .Image ;_egfa ,_abc :=_cddaf .(*_be .Monochrome );if _abc {if _aeb =_egfa .ResolveDecode ();_aeb !=nil {return nil ,_aeb ;};_ffbe ,_aeb =_egfa .Scale (_eaaf );if _aeb !=nil {return nil ,_aeb ;};}else {_ecge :=int (_ca .RoundToEven (float64 (_edd .Width )*_eaaf ));
_efdc :=int (_ca .RoundToEven (float64 (_edd .Height )*_eaaf ));_ffbe ,_aeb =_be .NewImage (_ecge ,_efdc ,int (_edd .BitsPerComponent ),_edd .ColorComponents ,nil ,nil ,nil );if _aeb !=nil {return nil ,_aeb ;};_gf .CatmullRom .Scale (_ffbe ,_ffbe .Bounds (),_cddaf ,_cddaf .Bounds (),_gf .Over ,&_gf .Options {});
};_ceg :=_ffbe .Base ();_badf :=&_ae .Image {Width :int64 (_ceg .Width ),Height :int64 (_ceg .Height ),BitsPerComponent :int64 (_ceg .BitsPerComponent ),ColorComponents :_ceg .ColorComponents ,Data :_ceg .Data };_badf .SetDecode (_ceg .Decode );_badf .SetAlpha (_ceg .Alpha );
return _badf ,nil ;};type objectStructure struct{_fad *_e .PdfObjectDictionary ;_bfaf *_e .PdfObjectDictionary ;_fcdd []*_e .PdfIndirectObject ;};type content struct{_cec string ;_aacb *_ae .PdfPageResources ;};

// ObjectStreams groups PDF objects to object streams.
// It implements interface model.Optimizer.
type ObjectStreams struct{};

// CleanContentstream cleans up redundant operands in content streams, including Page and XObject Form
// contents. This process includes:
// 1. Marked content operators are removed.
// 2. Some operands are simplified (shorter form).
// TODO: Add more reduction methods and improving the methods for identifying unnecessary operands.
type CleanContentstream struct{};func _agaf (_bdaa []_e .PdfObject ){for _gdgb ,_dcbc :=range _bdaa {switch _adbc :=_dcbc .(type ){case *_e .PdfIndirectObject :_adbc .ObjectNumber =int64 (_gdgb +1);_adbc .GenerationNumber =0;case *_e .PdfObjectStream :_adbc .ObjectNumber =int64 (_gdgb +1);
_adbc .GenerationNumber =0;case *_e .PdfObjectStreams :_adbc .ObjectNumber =int64 (_gdgb +1);_adbc .GenerationNumber =0;};};};

// CleanUnusedResources represents an optimizer used to clean unused resources.
type CleanUnusedResources struct{};type imageModifications struct{Scale float64 ;Encoding _e .StreamEncoder ;};

// CombineDuplicateDirectObjects combines duplicated direct objects by its data hash.
// It implements interface model.Optimizer.
type CombineDuplicateDirectObjects struct{};func _dbe (_gce *_fe .ContentStreamOperations )*_fe .ContentStreamOperations {if _gce ==nil {return nil ;};_cb :=_fe .ContentStreamOperations {};for _ ,_fb :=range *_gce {switch _fb .Operand {case "\u0042\u0044\u0043","\u0042\u004d\u0043","\u0045\u004d\u0043":continue ;
case "\u0054\u006d":if len (_fb .Params )==6{if _ffd ,_dbf :=_e .GetNumbersAsFloat (_fb .Params );_dbf ==nil {if _ffd [0]==1&&_ffd [1]==0&&_ffd [2]==0&&_ffd [3]==1{_fb =&_fe .ContentStreamOperation {Params :[]_e .PdfObject {_fb .Params [4],_fb .Params [5]},Operand :"\u0054\u0064"};
};};};};_cb =append (_cb ,_fb );};return &_cb ;};

// CompressStreams compresses uncompressed streams.
// It implements interface model.Optimizer.
type CompressStreams struct{};func _badc (_gef []_e .PdfObject )objectStructure {_ege :=objectStructure {};_gcfg :=false ;for _ ,_fgaag :=range _gef {switch _fagf :=_fgaag .(type ){case *_e .PdfIndirectObject :_cffa ,_gacd :=_e .GetDict (_fagf );if !_gacd {continue ;
};_bbfa ,_gacd :=_e .GetName (_cffa .Get ("\u0054\u0079\u0070\u0065"));if !_gacd {continue ;};switch _bbfa .String (){case "\u0043a\u0074\u0061\u006c\u006f\u0067":_ege ._fad =_cffa ;_gcfg =true ;};};if _gcfg {break ;};};if !_gcfg {return _ege ;};_bgcc ,_aagc :=_e .GetDict (_ege ._fad .Get ("\u0050\u0061\u0067e\u0073"));
if !_aagc {return _ege ;};_ege ._bfaf =_bgcc ;_egag ,_aagc :=_e .GetArray (_bgcc .Get ("\u004b\u0069\u0064\u0073"));if !_aagc {return _ege ;};for _ ,_dcab :=range _egag .Elements (){_dfaf ,_dcf :=_e .GetIndirect (_dcab );if !_dcf {break ;};_ege ._fcdd =append (_ege ._fcdd ,_dfaf );
};return _ege ;};func _fcgg (_cbcg []*_e .PdfIndirectObject )map[string ][]string {_bec :=map[string ][]string {};for _ ,_eae :=range _cbcg {_ecdd ,_bbc :=_e .GetDict (_eae .PdfObject );if !_bbc {continue ;};_feg :=_ecdd .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073");
_cab :=_e .TraceToDirectObject (_feg );_ef :="";if _bbb ,_ggd :=_cab .(*_e .PdfObjectArray );_ggd {var _dgg []string ;for _ ,_gcf :=range _bbb .Elements (){_agc ,_fagg :=_dcg (_gcf );if _fagg !=nil {continue ;};_dgg =append (_dgg ,_agc );};_ef =_f .Join (_dgg ,"\u0020");
};if _bgf ,_affg :=_cab .(*_e .PdfObjectStream );_affg {_ggc ,_afg :=_e .DecodeStream (_bgf );if _afg !=nil {continue ;};_ef =string (_ggc );};_ggf :=_fe .NewContentStreamParser (_ef );_age ,_adeb :=_ggf .Parse ();if _adeb !=nil {continue ;};for _ ,_cca :=range *_age {_bbcd :=_cca .Operand ;
_edf :=_cca .Params ;switch _bbcd {case "\u0044\u006f":_gea :=_edf [0].String ();if _ ,_efc :=_bec ["\u0058O\u0062\u006a\u0065\u0063\u0074"];!_efc {_bec ["\u0058O\u0062\u006a\u0065\u0063\u0074"]=[]string {_gea };}else {_bec ["\u0058O\u0062\u006a\u0065\u0063\u0074"]=append (_bec ["\u0058O\u0062\u006a\u0065\u0063\u0074"],_gea );
};case "\u0054\u0066":_agcb :=_edf [0].String ();if _ ,_cgd :=_bec ["\u0046\u006f\u006e\u0074"];!_cgd {_bec ["\u0046\u006f\u006e\u0074"]=[]string {_agcb };}else {_bec ["\u0046\u006f\u006e\u0074"]=append (_bec ["\u0046\u006f\u006e\u0074"],_agcb );};case "\u0067\u0073":_bdbg :=_edf [0].String ();
if _ ,_gac :=_bec ["\u0045x\u0074\u0047\u0053\u0074\u0061\u0074e"];!_gac {_bec ["\u0045x\u0074\u0047\u0053\u0074\u0061\u0074e"]=[]string {_bdbg };}else {_bec ["\u0045x\u0074\u0047\u0053\u0074\u0061\u0074e"]=append (_bec ["\u0045x\u0074\u0047\u0053\u0074\u0061\u0074e"],_bdbg );
};};};};return _bec ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_ba *CleanContentstream )Optimize (objects []_e .PdfObject )(_bbd []_e .PdfObject ,_cdd error ){_aeg :=map[*_e .PdfObjectStream ]struct{}{};var _gfc []*_e .PdfObjectStream ;_ea :=func (_eb *_e .PdfObjectStream ){if _ ,_da :=_aeg [_eb ];!_da {_aeg [_eb ]=struct{}{};
_gfc =append (_gfc ,_eb );};};_aea :=map[_e .PdfObject ]bool {};_daf :=map[_e .PdfObject ]bool {};for _ ,_fbe :=range objects {switch _dfd :=_fbe .(type ){case *_e .PdfIndirectObject :switch _cc :=_dfd .PdfObject .(type ){case *_e .PdfObjectDictionary :if _gfd ,_fff :=_e .GetName (_cc .Get ("\u0054\u0079\u0070\u0065"));
!_fff ||_gfd .String ()!="\u0050\u0061\u0067\u0065"{continue ;};if _fc ,_cg :=_e .GetStream (_cc .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));_cg {_ea (_fc );}else if _eg ,_cae :=_e .GetArray (_cc .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));
_cae {var _ccc []*_e .PdfObjectStream ;for _ ,_bc :=range _eg .Elements (){if _fgef ,_aec :=_e .GetStream (_bc );_aec {_ccc =append (_ccc ,_fgef );};};if len (_ccc )> 0{var _dd _bb .Buffer ;for _ ,_dae :=range _ccc {if _gddf ,_aega :=_e .DecodeStream (_dae );
_aega ==nil {_dd .Write (_gddf );};_aea [_dae ]=true ;};_eaa ,_aa :=_e .MakeStream (_dd .Bytes (),_e .NewFlateEncoder ());if _aa !=nil {return nil ,_aa ;};_daf [_eaa ]=true ;_cc .Set ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073",_eaa );_ea (_eaa );
};};};case *_e .PdfObjectStream :if _cgc ,_aae :=_e .GetName (_dfd .Get ("\u0054\u0079\u0070\u0065"));!_aae ||_cgc .String ()!="\u0058O\u0062\u006a\u0065\u0063\u0074"{continue ;};if _dc ,_gfcc :=_e .GetName (_dfd .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));
!_gfcc ||_dc .String ()!="\u0046\u006f\u0072\u006d"{continue ;};_ea (_dfd );};};for _ ,_aac :=range _gfc {_cdd =_gd (_aac );if _cdd !=nil {return nil ,_cdd ;};};_bbd =nil ;for _ ,_bbf :=range objects {if _aea [_bbf ]{continue ;};_bbd =append (_bbd ,_bbf );
};for _egf :=range _daf {_bbd =append (_bbd ,_egf );};return _bbd ,nil ;};

// ImagePPI optimizes images by scaling images such that the PPI (pixels per inch) is never higher than ImageUpperPPI.
// TODO(a5i): Add support for inline images.
// It implements interface model.Optimizer.
type ImagePPI struct{ImageUpperPPI float64 ;};

// Options describes PDF optimization parameters.
type Options struct{CombineDuplicateStreams bool ;CombineDuplicateDirectObjects bool ;ImageUpperPPI float64 ;ImageQuality int ;UseObjectStreams bool ;CombineIdenticalIndirectObjects bool ;CompressStreams bool ;CleanFonts bool ;SubsetFonts bool ;CleanContentstream bool ;
CleanUnusedResources bool ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_ec *Chain )Optimize (objects []_e .PdfObject )(_df []_e .PdfObject ,_ff error ){_ab :=objects ;for _ ,_cfc :=range _ec ._cf {_cd ,_bg :=_cfc .Optimize (_ab );if _bg !=nil {_c .Log .Debug ("\u0045\u0052\u0052OR\u0020\u004f\u0070\u0074\u0069\u006d\u0069\u007a\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u002b\u0076",_bg );
continue ;};_ab =_cd ;};return _ab ,nil ;};func _eaee (_adce _e .PdfObject )(_afcg string ,_dfe []_e .PdfObject ){var _dcbe _bb .Buffer ;switch _egfd :=_adce .(type ){case *_e .PdfIndirectObject :_dfe =append (_dfe ,_egfd );_adce =_egfd .PdfObject ;};switch _fcbb :=_adce .(type ){case *_e .PdfObjectStream :if _dbb ,_cac :=_e .DecodeStream (_fcbb );
_cac ==nil {_dcbe .Write (_dbb );_dfe =append (_dfe ,_fcbb );};case *_e .PdfObjectArray :for _ ,_eddg :=range _fcbb .Elements (){switch _fgbf :=_eddg .(type ){case *_e .PdfObjectStream :if _bdaad ,_baa :=_e .DecodeStream (_fgbf );_baa ==nil {_dcbe .Write (_bdaad );
_dfe =append (_dfe ,_fgbf );};};};};return _dcbe .String (),_dfe ;};

// New creates a optimizers chain from options.
func New (options Options )*Chain {_gcdg :=new (Chain );if options .CleanFonts ||options .SubsetFonts {_gcdg .Append (&CleanFonts {Subset :options .SubsetFonts });};if options .CleanContentstream {_gcdg .Append (new (CleanContentstream ));};if options .ImageUpperPPI > 0{_ddcc :=new (ImagePPI );
_ddcc .ImageUpperPPI =options .ImageUpperPPI ;_gcdg .Append (_ddcc );};if options .ImageQuality > 0{_ddfe :=new (Image );_ddfe .ImageQuality =options .ImageQuality ;_gcdg .Append (_ddfe );};if options .CombineDuplicateDirectObjects {_gcdg .Append (new (CombineDuplicateDirectObjects ));
};if options .CombineDuplicateStreams {_gcdg .Append (new (CombineDuplicateStreams ));};if options .CombineIdenticalIndirectObjects {_gcdg .Append (new (CombineIdenticalIndirectObjects ));};if options .UseObjectStreams {_gcdg .Append (new (ObjectStreams ));
};if options .CompressStreams {_gcdg .Append (new (CompressStreams ));};if options .CleanUnusedResources {_gcdg .Append (new (CleanUnusedResources ));};return _gcdg ;};

// CleanFonts cleans up embedded fonts, reducing font sizes.
type CleanFonts struct{

// Subset embedded fonts if encountered (if true).
// Otherwise attempts to reduce the font program.
Subset bool ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_dcb *CombineDuplicateDirectObjects )Optimize (objects []_e .PdfObject )(_babd []_e .PdfObject ,_ffff error ){_agaf (objects );_bae :=make (map[string ][]*_e .PdfObjectDictionary );var _eeg func (_baf *_e .PdfObjectDictionary );_eeg =func (_fdcd *_e .PdfObjectDictionary ){for _ ,_gcg :=range _fdcd .Keys (){_adc :=_fdcd .Get (_gcg );
if _bgfc ,_ccde :=_adc .(*_e .PdfObjectDictionary );_ccde {if _ebeg :=_bgfc .Keys ();len (_ebeg )==0{continue ;};_ecddd :=_a .New ();_ecddd .Write ([]byte (_bgfc .WriteString ()));_fffa :=string (_ecddd .Sum (nil ));_bae [_fffa ]=append (_bae [_fffa ],_bgfc );
_eeg (_bgfc );};};};for _ ,_efd :=range objects {_ddf ,_fgb :=_efd .(*_e .PdfIndirectObject );if !_fgb {continue ;};if _bdg ,_gcac :=_ddf .PdfObject .(*_e .PdfObjectDictionary );_gcac {_eeg (_bdg );};};_gbf :=make ([]_e .PdfObject ,0,len (_bae ));_ffc :=make (map[_e .PdfObject ]_e .PdfObject );
for _ ,_bff :=range _bae {if len (_bff )< 2{continue ;};_dgeb :=_e .MakeDict ();_dgeb .Merge (_bff [0]);_aaeb :=_e .MakeIndirectObject (_dgeb );_gbf =append (_gbf ,_aaeb );for _cagg :=0;_cagg < len (_bff );_cagg ++{_edbf :=_bff [_cagg ];_ffc [_edbf ]=_aaeb ;
};};_babd =make ([]_e .PdfObject ,len (objects ));copy (_babd ,objects );_babd =append (_gbf ,_babd ...);_fea (_babd ,_ffc );return _babd ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_cdda *CleanFonts )Optimize (objects []_e .PdfObject )(_aed []_e .PdfObject ,_dda error ){var _aaa map[*_e .PdfObjectStream ]struct{};if _cdda .Subset {var _gca error ;_aaa ,_gca =_ebe (objects );if _gca !=nil {_c .Log .Debug ("\u0045\u0052\u0052\u004fR\u003a\u0020\u0046\u0061\u0069\u006c\u0065\u0064\u0020\u0073u\u0062s\u0065\u0074\u0074\u0069\u006e\u0067\u003a \u0025\u0076",_gca );
return nil ,_gca ;};};for _ ,_gfb :=range objects {_acg ,_afa :=_e .GetStream (_gfb );if !_afa {continue ;};if _ ,_dfa :=_aaa [_acg ];_dfa {continue ;};_eed ,_cba :=_e .NewEncoderFromStream (_acg );if _cba !=nil {_c .Log .Debug ("\u0045\u0052RO\u0052\u0020\u0067e\u0074\u0074\u0069\u006eg e\u006eco\u0064\u0065\u0072\u003a\u0020\u0025\u0076 -\u0020\u0069\u0067\u006e\u006f\u0072\u0069n\u0067",_cba );
continue ;};_ebb ,_cba :=_eed .DecodeStream (_acg );if _cba !=nil {_c .Log .Debug ("\u0044\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0065r\u0072\u006f\u0072\u0020\u003a\u0020\u0025v\u0020\u002d\u0020\u0069\u0067\u006e\u006f\u0072\u0069\u006e\u0067",_cba );
continue ;};if len (_ebb )< 4{continue ;};_bed :=string (_ebb [:4]);if _bed =="\u004f\u0054\u0054\u004f"{continue ;};if _bed !="\u0000\u0001\u0000\u0000"&&_bed !="\u0074\u0072\u0075\u0065"{continue ;};_cag ,_cba :=_d .Parse (_bb .NewReader (_ebb ));if _cba !=nil {_c .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020P\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_cba );
continue ;};_cba =_cag .Optimize ();if _cba !=nil {_c .Log .Debug ("\u0045\u0052RO\u0052\u0020\u004fp\u0074\u0069\u006d\u0069zin\u0067 f\u006f\u006e\u0074\u003a\u0020\u0025\u0076 -\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067",_cba );continue ;};var _gfcb _bb .Buffer ;
_cba =_cag .Write (&_gfcb );if _cba !=nil {_c .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020W\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_cba );
continue ;};if _gfcb .Len ()> len (_ebb ){_c .Log .Debug ("\u0052\u0065-\u0077\u0072\u0069\u0074\u0074\u0065\u006e\u0020\u0066\u006f\u006e\u0074\u0020\u0069\u0073\u0020\u006c\u0061\u0072\u0067\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u002d\u0020\u0073\u006b\u0069\u0070");
continue ;};_bag ,_cba :=_e .MakeStream (_gfcb .Bytes (),_e .NewFlateEncoder ());if _cba !=nil {continue ;};*_acg =*_bag ;_acg .Set ("\u004ce\u006e\u0067\u0074\u0068\u0031",_e .MakeInteger (int64 (_gfcb .Len ())));};return objects ,nil ;};func _gaa (_cbd _e .PdfObject )[]content {if _cbd ==nil {return nil ;
};_fef ,_beb :=_e .GetArray (_cbd );if !_beb {_c .Log .Debug ("\u0041\u006e\u006e\u006fts\u0020\u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0061\u0072\u0072\u0061\u0079");return nil ;};var _ebf []content ;for _ ,_ddab :=range _fef .Elements (){_eeee ,_ccd :=_e .GetDict (_ddab );
if !_ccd {_c .Log .Debug ("I\u0067\u006e\u006f\u0072\u0069\u006eg\u0020\u006e\u006f\u006e\u002d\u0064i\u0063\u0074\u0020\u0065\u006c\u0065\u006de\u006e\u0074\u0020\u0069\u006e\u0020\u0041\u006e\u006e\u006ft\u0073");continue ;};_cgf ,_ccd :=_e .GetDict (_eeee .Get ("\u0041\u0050"));
if !_ccd {_c .Log .Debug ("\u004e\u006f\u0020\u0041P \u0065\u006e\u0074\u0072\u0079\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067");continue ;};_fab :=_e .TraceToDirectObject (_cgf .Get ("\u004e"));if _fab ==nil {_c .Log .Debug ("N\u006f\u0020\u004e\u0020en\u0074r\u0079\u0020\u002d\u0020\u0073k\u0069\u0070\u0070\u0069\u006e\u0067");
continue ;};var _gcc *_e .PdfObjectStream ;switch _bde :=_fab .(type ){case *_e .PdfObjectDictionary :_gfab ,_aff :=_e .GetName (_eeee .Get ("\u0041\u0053"));if !_aff {_c .Log .Debug ("\u004e\u006f\u0020\u0041S \u0065\u006e\u0074\u0072\u0079\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067");
continue ;};_gcc ,_aff =_e .GetStream (_bde .Get (*_gfab ));if !_aff {_c .Log .Debug ("\u0046o\u0072\u006d\u0020\u006eo\u0074\u0020\u0066\u006f\u0075n\u0064 \u002d \u0073\u006b\u0069\u0070\u0070\u0069\u006eg");continue ;};case *_e .PdfObjectStream :_gcc =_bde ;
};if _gcc ==nil {_c .Log .Debug ("\u0046\u006f\u0072m\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0028n\u0069\u006c\u0029\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067");continue ;};_ecd ,_abb :=_ae .NewXObjectFormFromStream (_gcc );
if _abb !=nil {_c .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020l\u006f\u0061\u0064\u0069\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_abb );continue ;};_eac ,_abb :=_ecd .GetContentStream ();
if _abb !=nil {_c .Log .Debug ("E\u0072\u0072\u006f\u0072\u0020\u0064e\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0063\u006fn\u0074\u0065\u006et\u0073:\u0020\u0025\u0076",_abb );continue ;};_ebf =append (_ebf ,content {_cec :string (_eac ),_aacb :_ecd .Resources });
};return _ebf ;};func _fea (_cgbd []_e .PdfObject ,_edef map[_e .PdfObject ]_e .PdfObject ){if len (_edef )==0{return ;};for _egcbc ,_geef :=range _cgbd {if _feaf ,_ebde :=_edef [_geef ];_ebde {_cgbd [_egcbc ]=_feaf ;continue ;};_edef [_geef ]=_geef ;switch _fac :=_geef .(type ){case *_e .PdfObjectArray :_fcga :=make ([]_e .PdfObject ,_fac .Len ());
copy (_fcga ,_fac .Elements ());_fea (_fcga ,_edef );for _cbaf ,_adae :=range _fcga {_fac .Set (_cbaf ,_adae );};case *_e .PdfObjectStreams :_fea (_fac .Elements (),_edef );case *_e .PdfObjectStream :_bdad :=[]_e .PdfObject {_fac .PdfObjectDictionary };
_fea (_bdad ,_edef );_fac .PdfObjectDictionary =_bdad [0].(*_e .PdfObjectDictionary );case *_e .PdfObjectDictionary :_ccb :=_fac .Keys ();_fgaa :=make ([]_e .PdfObject ,len (_ccb ));for _efb ,_cdfd :=range _ccb {_fgaa [_efb ]=_fac .Get (_cdfd );};_fea (_fgaa ,_edef );
for _ddd ,_fdba :=range _ccb {_fac .Set (_fdba ,_fgaa [_ddd ]);};case *_e .PdfIndirectObject :_dad :=[]_e .PdfObject {_fac .PdfObject };_fea (_dad ,_edef );_fac .PdfObject =_dad [0];};};};func _fa (_dcd *_e .PdfObjectStream ,_ed []rune ,_acb []_d .GlyphIndex )error {_dcd ,_gbg :=_e .GetStream (_dcd );
if !_gbg {_c .Log .Debug ("\u0045\u006d\u0062\u0065\u0064\u0064\u0065\u0064\u0020\u0066\u006f\u006e\u0074\u0020\u006f\u0062\u006a\u0065c\u0074\u0020\u006e\u006f\u0074\u0020\u0066o\u0075\u006e\u0064\u0020\u002d\u002d\u0020\u0041\u0042\u004f\u0052T\u0020\u0073\u0075\u0062\u0073\u0065\u0074\u0074\u0069\u006e\u0067");
return _gc .New ("\u0066\u006f\u006e\u0074fi\u006c\u0065\u0032\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_acd ,_aca :=_e .DecodeStream (_dcd );if _aca !=nil {_c .Log .Debug ("\u0044\u0065c\u006f\u0064\u0065 \u0065\u0072\u0072\u006f\u0072\u003a\u0020\u0025\u0076",_aca );
return _aca ;};_af ,_aca :=_d .Parse (_bb .NewReader (_acd ));if _aca !=nil {_c .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0070\u0061\u0072\u0073\u0069n\u0067\u0020\u0025\u0064\u0020\u0062\u0079\u0074\u0065\u0020f\u006f\u006e\u0074",len (_dcd .Stream ));
return _aca ;};_fag :=_acb ;if len (_ed )> 0{_agg :=_af .LookupRunes (_ed );_fag =append (_fag ,_agg ...);};_af ,_aca =_af .SubsetKeepIndices (_fag );if _aca !=nil {_c .Log .Debug ("\u0045R\u0052\u004f\u0052\u0020s\u0075\u0062\u0073\u0065\u0074t\u0069n\u0067 \u0066\u006f\u006e\u0074\u003a\u0020\u0025v",_aca );
return _aca ;};var _gcb _bb .Buffer ;_aca =_af .Write (&_gcb );if _aca !=nil {_c .Log .Debug ("\u0045\u0052\u0052\u004fR \u0057\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076",_aca );return _aca ;};if _gcb .Len ()> len (_acd ){_c .Log .Debug ("\u0052\u0065-\u0077\u0072\u0069\u0074\u0074\u0065\u006e\u0020\u0066\u006f\u006e\u0074\u0020\u0069\u0073\u0020\u006c\u0061\u0072\u0067\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u002d\u0020\u0073\u006b\u0069\u0070");
return nil ;};_gg ,_aca :=_e .MakeStream (_gcb .Bytes (),_e .NewFlateEncoder ());if _aca !=nil {_c .Log .Debug ("\u0045\u0052\u0052\u004fR \u0057\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076",_aca );return _aca ;
};*_dcd =*_gg ;_dcd .Set ("\u004ce\u006e\u0067\u0074\u0068\u0031",_e .MakeInteger (int64 (_gcb .Len ())));return nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_cgac *Image )Optimize (objects []_e .PdfObject )(_fec []_e .PdfObject ,_cecc error ){if _cgac .ImageQuality <=0{return objects ,nil ;};_eacd :=_fggg (objects );if len (_eacd )==0{return objects ,nil ;};_agd :=make (map[_e .PdfObject ]_e .PdfObject );
_dgb :=make (map[_e .PdfObject ]struct{});for _ ,_gcge :=range _eacd {_gfca :=_gcge .Stream .Get ("\u0053\u004d\u0061s\u006b");_dgb [_gfca ]=struct{}{};};for _ged ,_ecg :=range _eacd {_cgb :=_ecg .Stream ;if _ ,_aagg :=_dgb [_cgb ];_aagg {continue ;};_abf ,_bbba :=_ae .NewXObjectImageFromStream (_cgb );
if _bbba !=nil {_c .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_bbba );continue ;};switch _abf .Filter .(type ){case *_e .JBIG2Encoder :continue ;case *_e .CCITTFaxEncoder :continue ;};_gdca ,_bbba :=_abf .ToImage ();if _bbba !=nil {_c .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_bbba );
continue ;};_adcb :=_e .NewDCTEncoder ();_adcb .ColorComponents =_gdca .ColorComponents ;_adcb .Quality =_cgac .ImageQuality ;_adcb .BitsPerComponent =_ecg .BitsPerComponent ;_adcb .Width =_ecg .Width ;_adcb .Height =_ecg .Height ;_gab ,_bbba :=_adcb .EncodeBytes (_gdca .Data );
if _bbba !=nil {_c .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_bbba );continue ;};var _fga _e .StreamEncoder ;_fga =_adcb ;{_daeg :=_e .NewFlateEncoder ();_bcd :=_e .NewMultiEncoder ();_bcd .AddEncoder (_daeg );_bcd .AddEncoder (_adcb );
_bad ,_acfd :=_bcd .EncodeBytes (_gdca .Data );if _acfd !=nil {_c .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_acfd );continue ;};if len (_bad )< len (_gab ){_c .Log .Trace ("\u004d\u0075\u006c\u0074\u0069\u0020\u0065\u006e\u0063\u0020\u0069\u006d\u0070\u0072\u006f\u0076\u0065\u0073\u003a\u0020\u0025\u0064\u0020\u0074o\u0020\u0025\u0064\u0020\u0028o\u0072\u0069g\u0020\u0025\u0064\u0029",len (_gab ),len (_bad ),len (_cgb .Stream ));
_gab =_bad ;_fga =_bcd ;};};_aga :=len (_cgb .Stream );if _aga < len (_gab ){continue ;};_ffee :=&_e .PdfObjectStream {Stream :_gab };_ffee .PdfObjectReference =_cgb .PdfObjectReference ;_ffee .PdfObjectDictionary =_e .MakeDict ();_ffee .Merge (_cgb .PdfObjectDictionary );
_ffee .Merge (_fga .MakeStreamDict ());_ffee .Set ("\u004c\u0065\u006e\u0067\u0074\u0068",_e .MakeInteger (int64 (len (_gab ))));_agd [_cgb ]=_ffee ;_eacd [_ged ].Stream =_ffee ;};_fec =make ([]_e .PdfObject ,len (objects ));copy (_fec ,objects );_fea (_fec ,_agd );
return _fec ,nil ;};

// Optimize implements Optimizer interface.
func (_ddc *CleanUnusedResources )Optimize (objects []_e .PdfObject )(_bda []_e .PdfObject ,_caec error ){_bagd ,_caec :=_acaa (objects );if _caec !=nil {return nil ,_caec ;};_egg :=[]_e .PdfObject {};for _ ,_addde :=range objects {_ ,_ddbb :=_bagd [_addde ];
if _ddbb {continue ;};_egg =append (_egg ,_addde );};return _egg ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_fcgd *CompressStreams )Optimize (objects []_e .PdfObject )(_cfea []_e .PdfObject ,_dba error ){_cfea =make ([]_e .PdfObject ,len (objects ));copy (_cfea ,objects );for _ ,_ddgb :=range objects {_ace ,_afea :=_e .GetStream (_ddgb );if !_afea {continue ;
};if _gdcd :=_ace .Get ("\u0046\u0069\u006c\u0074\u0065\u0072");_gdcd !=nil {if _ ,_gdcf :=_e .GetName (_gdcd );_gdcf {continue ;};if _dbga ,_afag :=_e .GetArray (_gdcd );_afag &&_dbga .Len ()> 0{continue ;};};_acfg :=_e .NewFlateEncoder ();var _aaf []byte ;
_aaf ,_dba =_acfg .EncodeBytes (_ace .Stream );if _dba !=nil {return _cfea ,_dba ;};_fgca :=_acfg .MakeStreamDict ();if len (_aaf )+len (_fgca .WriteString ())< len (_ace .Stream ){_ace .Stream =_aaf ;_ace .PdfObjectDictionary .Merge (_fgca );_ace .PdfObjectDictionary .Set ("\u004c\u0065\u006e\u0067\u0074\u0068",_e .MakeInteger (int64 (len (_ace .Stream ))));
};};return _cfea ,nil ;};

// GetOptimizers gets the list of optimizers in chain `c`.
func (_dg *Chain )GetOptimizers ()[]_ae .Optimizer {return _dg ._cf };func _afe (_gdc *_e .PdfObjectDictionary )[]string {_edg :=[]string {};for _ ,_gaaa :=range _gdc .Keys (){_edg =append (_edg ,_gaaa .String ());};return _edg ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_cee *CombineIdenticalIndirectObjects )Optimize (objects []_e .PdfObject )(_dcgb []_e .PdfObject ,_deg error ){_agaf (objects );_fgec :=make (map[_e .PdfObject ]_e .PdfObject );_adb :=make (map[_e .PdfObject ]struct{});_acbf :=make (map[string ][]*_e .PdfIndirectObject );
for _ ,_dca :=range objects {_ffeb ,_bbcf :=_dca .(*_e .PdfIndirectObject );if !_bbcf {continue ;};if _fbfd ,_bga :=_ffeb .PdfObject .(*_e .PdfObjectDictionary );_bga {if _dea ,_affd :=_fbfd .Get ("\u0054\u0079\u0070\u0065").(*_e .PdfObjectName );_affd &&*_dea =="\u0050\u0061\u0067\u0065"{continue ;
};if _ddg :=_fbfd .Keys ();len (_ddg )==0{continue ;};_cfebg :=_a .New ();_cfebg .Write ([]byte (_fbfd .WriteString ()));_edbb :=string (_cfebg .Sum (nil ));_acbf [_edbb ]=append (_acbf [_edbb ],_ffeb );};};for _ ,_eeec :=range _acbf {if len (_eeec )< 2{continue ;
};_acf :=_eeec [0];for _dbdgf :=1;_dbdgf < len (_eeec );_dbdgf ++{_cdec :=_eeec [_dbdgf ];_fgec [_cdec ]=_acf ;_adb [_cdec ]=struct{}{};};};_dcgb =make ([]_e .PdfObject ,0,len (objects )-len (_adb ));for _ ,_fgcd :=range objects {if _ ,_afc :=_adb [_fgcd ];
_afc {continue ;};_dcgb =append (_dcgb ,_fgcd );};_fea (_dcgb ,_fgec );return _dcgb ,nil ;};func _acaa (_adfg []_e .PdfObject )(map[_e .PdfObject ]struct{},error ){_egae :=_badc (_adfg );_ggg :=_egae ._fcdd ;_dfdc :=make (map[_e .PdfObject ]struct{});_bdc :=_fcgg (_ggg );
for _ ,_gbc :=range _ggg {_fae ,_edc :=_e .GetDict (_gbc .PdfObject );if !_edc {continue ;};_fbd ,_edc :=_e .GetDict (_fae .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"));if !_edc {continue ;};_dbdg :=_bdc ["\u0058O\u0062\u006a\u0065\u0063\u0074"];
_ffe ,_edc :=_e .GetDict (_fbd .Get ("\u0058O\u0062\u006a\u0065\u0063\u0074"));if _edc {_fdd :=_afe (_ffe );for _ ,_dge :=range _fdd {if _dbc (_dge ,_dbdg ){continue ;};_bdb :=*_e .MakeName (_dge );_geg :=_ffe .Get (_bdb );_dfdc [_geg ]=struct{}{};_ffe .Remove (_bdb );
_gbce :=_agca (_geg ,_dfdc );if _gbce !=nil {_c .Log .Debug ("\u0066\u0061\u0069\u006ce\u0064\u0020\u0074\u006f\u0020\u0074\u0072\u0061\u0076\u0065r\u0073e\u0020\u006f\u0062\u006a\u0065\u0063\u0074 \u0025\u0076",_geg );};};};_cce ,_edc :=_e .GetDict (_fbd .Get ("\u0046\u006f\u006e\u0074"));
_ffed :=_bdc ["\u0046\u006f\u006e\u0074"];if _edc {_fcb :=_afe (_cce );for _ ,_bgg :=range _fcb {if _dbc (_bgg ,_ffed ){continue ;};_bfa :=*_e .MakeName (_bgg );_gcec :=_cce .Get (_bfa );_dfdc [_gcec ]=struct{}{};_cce .Remove (_bfa );_ffg :=_agca (_gcec ,_dfdc );
if _ffg !=nil {_c .Log .Debug ("\u0046\u0061i\u006c\u0065\u0064\u0020\u0074\u006f\u0020\u0074\u0072\u0061\u0076\u0065\u0072\u0073\u0065\u0020\u006f\u0062\u006a\u0065\u0063\u0074 %\u0076\u000a",_gcec );};};};_dbg ,_edc :=_e .GetDict (_fbd .Get ("\u0045x\u0074\u0047\u0053\u0074\u0061\u0074e"));
if _edc {_fffd :=_afe (_dbg );_fgeb :=_bdc ["\u0045x\u0074\u0047\u0053\u0074\u0061\u0074e"];for _ ,_cbg :=range _fffd {if _dbc (_cbg ,_fgeb ){continue ;};_faba :=*_e .MakeName (_cbg );_ece :=_dbg .Get (_faba );_dfdc [_ece ]=struct{}{};_dbg .Remove (_faba );
_beg :=_agca (_ece ,_dfdc );if _beg !=nil {_c .Log .Debug ("\u0066\u0061i\u006c\u0065\u0064\u0020\u0074\u006f\u0020\u0074\u0072\u0061\u0076\u0065\u0072\u0073\u0065\u0020\u006f\u0062\u006a\u0065\u0063\u0074 %\u0076\u000a",_ece );};};};};return _dfdc ,nil ;
};func _dbc (_dgf string ,_caa []string )bool {for _ ,_fced :=range _caa {if _dgf ==_fced {return true ;};};return false ;};func _dcge (_acae *_ae .XObjectImage ,_gba imageModifications )error {_adfb ,_fbfa :=_acae .ToImage ();if _fbfa !=nil {return _fbfa ;
};if _gba .Scale !=0{_adfb ,_fbfa =_eeb (_adfb ,_gba .Scale );if _fbfa !=nil {return _fbfa ;};};if _gba .Encoding !=nil {_acae .Filter =_gba .Encoding ;};_acae .Decode =nil ;switch _aef :=_acae .Filter .(type ){case *_e .FlateEncoder :if _aef .Predictor !=1&&_aef .Predictor !=11{_aef .Predictor =1;
};};if _fbfa =_acae .SetImage (_adfb ,nil );_fbfa !=nil {_c .Log .Debug ("\u0045\u0072\u0072or\u0020\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0076",_fbfa );return _fbfa ;};_acae .ToPdfObject ();return nil ;
};

// Image optimizes images by rewrite images into JPEG format with quality equals to ImageQuality.
// TODO(a5i): Add support for inline images.
// It implements interface model.Optimizer.
type Image struct{ImageQuality int ;};