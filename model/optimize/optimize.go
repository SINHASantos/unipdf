//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package optimize ;import (_b "bytes";_c "crypto/md5";_aeg "errors";_ae "fmt";_d "github.com/unidoc/unipdf/v3/common";_ad "github.com/unidoc/unipdf/v3/contentstream";_bb "github.com/unidoc/unipdf/v3/core";_cg "github.com/unidoc/unipdf/v3/extractor";_fd "github.com/unidoc/unipdf/v3/internal/imageutil";
_f "github.com/unidoc/unipdf/v3/internal/textencoding";_ca "github.com/unidoc/unipdf/v3/model";_fdd "github.com/unidoc/unitype";_g "golang.org/x/image/draw";_e "math";_ge "strings";);func _ecaf (_eda []*_bb .PdfIndirectObject )map[string ][]string {_fdbc :=map[string ][]string {};
for _ ,_bfe :=range _eda {_gba ,_dfga :=_bb .GetDict (_bfe .PdfObject );if !_dfga {continue ;};_adc :=_gba .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073");_gde :=_bb .TraceToDirectObject (_adc );_gffe :="";if _dfbd ,_cefc :=_gde .(*_bb .PdfObjectArray );
_cefc {var _bba []string ;for _ ,_baf :=range _dfbd .Elements (){_bbg ,_dcd :=_gbdf (_baf );if _dcd !=nil {continue ;};_bba =append (_bba ,_bbg );};_gffe =_ge .Join (_bba ,"\u0020");};if _dbb ,_aefe :=_gde .(*_bb .PdfObjectStream );_aefe {_gfa ,_afcg :=_bb .DecodeStream (_dbb );
if _afcg !=nil {continue ;};_gffe =string (_gfa );};_gfdc :=_ad .NewContentStreamParser (_gffe );_cdf ,_bdf :=_gfdc .Parse ();if _bdf !=nil {continue ;};for _ ,_aaff :=range *_cdf {_cad :=_aaff .Operand ;_fed :=_aaff .Params ;switch _cad {case "\u0044\u006f":_ecgb :=_fed [0].String ();
if _ ,_ceg :=_fdbc ["\u0058O\u0062\u006a\u0065\u0063\u0074"];!_ceg {_fdbc ["\u0058O\u0062\u006a\u0065\u0063\u0074"]=[]string {_ecgb };}else {_fdbc ["\u0058O\u0062\u006a\u0065\u0063\u0074"]=append (_fdbc ["\u0058O\u0062\u006a\u0065\u0063\u0074"],_ecgb );
};case "\u0054\u0066":_agde :=_fed [0].String ();if _ ,_dga :=_fdbc ["\u0046\u006f\u006e\u0074"];!_dga {_fdbc ["\u0046\u006f\u006e\u0074"]=[]string {_agde };}else {_fdbc ["\u0046\u006f\u006e\u0074"]=append (_fdbc ["\u0046\u006f\u006e\u0074"],_agde );};
case "\u0067\u0073":_effd :=_fed [0].String ();if _ ,_efea :=_fdbc ["\u0045x\u0074\u0047\u0053\u0074\u0061\u0074e"];!_efea {_fdbc ["\u0045x\u0074\u0047\u0053\u0074\u0061\u0074e"]=[]string {_effd };}else {_fdbc ["\u0045x\u0074\u0047\u0053\u0074\u0061\u0074e"]=append (_fdbc ["\u0045x\u0074\u0047\u0053\u0074\u0061\u0074e"],_effd );
};};};};return _fdbc ;};

// CleanUnusedResources represents an optimizer used to clean unused resources.
type CleanUnusedResources struct{};

// Image optimizes images by rewrite images into JPEG format with quality equals to ImageQuality.
// TODO(a5i): Add support for inline images.
// It implements interface model.Optimizer.
type Image struct{ImageQuality int ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_dcg *CombineIdenticalIndirectObjects )Optimize (objects []_bb .PdfObject )(_cfdc []_bb .PdfObject ,_cbd error ){_ggb (objects );_fef :=make (map[_bb .PdfObject ]_bb .PdfObject );_fge :=make (map[_bb .PdfObject ]struct{});_ecge :=make (map[string ][]*_bb .PdfIndirectObject );
for _ ,_bcee :=range objects {_eaceb ,_efb :=_bcee .(*_bb .PdfIndirectObject );if !_efb {continue ;};if _agbd ,_dbag :=_eaceb .PdfObject .(*_bb .PdfObjectDictionary );_dbag {if _cffb ,_gfdeg :=_agbd .Get ("\u0054\u0079\u0070\u0065").(*_bb .PdfObjectName );
_gfdeg &&*_cffb =="\u0050\u0061\u0067\u0065"{continue ;};if _abg :=_agbd .Keys ();len (_abg )==0{continue ;};_ecbb :=_c .New ();_ecbb .Write ([]byte (_agbd .WriteString ()));_aba :=string (_ecbb .Sum (nil ));_ecge [_aba ]=append (_ecge [_aba ],_eaceb );
};};for _ ,_dcga :=range _ecge {if len (_dcga )< 2{continue ;};_dgba :=_dcga [0];for _aab :=1;_aab < len (_dcga );_aab ++{_cdaf :=_dcga [_aab ];_fef [_cdaf ]=_dgba ;_fge [_cdaf ]=struct{}{};};};_cfdc =make ([]_bb .PdfObject ,0,len (objects )-len (_fge ));
for _ ,_ecag :=range objects {if _ ,_acgd :=_fge [_ecag ];_acgd {continue ;};_cfdc =append (_cfdc ,_ecag );};_egcd (_cfdc ,_fef );return _cfdc ,nil ;};type objectStructure struct{_dgdg *_bb .PdfObjectDictionary ;_fcb *_bb .PdfObjectDictionary ;_gafd []*_bb .PdfIndirectObject ;
};

// CleanContentstream cleans up redundant operands in content streams, including Page and XObject Form
// contents. This process includes:
// 1. Marked content operators are removed.
// 2. Some operands are simplified (shorter form).
// TODO: Add more reduction methods and improving the methods for identifying unnecessary operands.
type CleanContentstream struct{};

// CombineDuplicateStreams combines duplicated streams by its data hash.
// It implements interface model.Optimizer.
type CombineDuplicateStreams struct{};func _gbdd (_bdg []_bb .PdfObject )(map[_bb .PdfObject ]struct{},error ){_bbbg :=_febg (_bdg );_acae :=_bbbg ._gafd ;_gab :=make (map[_bb .PdfObject ]struct{});_gbga :=_ecaf (_acae );for _ ,_gfda :=range _acae {_daa ,_cae :=_bb .GetDict (_gfda .PdfObject );
if !_cae {continue ;};_bgg ,_cae :=_bb .GetDict (_daa .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"));if !_cae {continue ;};_efg :=_gbga ["\u0058O\u0062\u006a\u0065\u0063\u0074"];_ab ,_cae :=_bb .GetDict (_bgg .Get ("\u0058O\u0062\u006a\u0065\u0063\u0074"));
if _cae {_dfb :=_gec (_ab );for _ ,_bceg :=range _dfb {if _cga (_bceg ,_efg ){continue ;};_bca :=*_bb .MakeName (_bceg );_bfa :=_ab .Get (_bca );_gab [_bfa ]=struct{}{};_ab .Remove (_bca );_dac :=_abe (_bfa ,_gab );if _dac !=nil {_d .Log .Debug ("\u0066\u0061\u0069\u006ce\u0064\u0020\u0074\u006f\u0020\u0074\u0072\u0061\u0076\u0065r\u0073e\u0020\u006f\u0062\u006a\u0065\u0063\u0074 \u0025\u0076",_bfa );
};};};_bge ,_cae :=_bb .GetDict (_bgg .Get ("\u0046\u006f\u006e\u0074"));_bffa :=_gbga ["\u0046\u006f\u006e\u0074"];if _cae {_ed :=_gec (_bge );for _ ,_fbb :=range _ed {if _cga (_fbb ,_bffa ){continue ;};_fbe :=*_bb .MakeName (_fbb );_aea :=_bge .Get (_fbe );
_gab [_aea ]=struct{}{};_bge .Remove (_fbe );_dce :=_abe (_aea ,_gab );if _dce !=nil {_d .Log .Debug ("\u0046\u0061i\u006c\u0065\u0064\u0020\u0074\u006f\u0020\u0074\u0072\u0061\u0076\u0065\u0072\u0073\u0065\u0020\u006f\u0062\u006a\u0065\u0063\u0074 %\u0076\u000a",_aea );
};};};_gac ,_cae :=_bb .GetDict (_bgg .Get ("\u0045x\u0074\u0047\u0053\u0074\u0061\u0074e"));if _cae {_bdca :=_gec (_gac );_ace :=_gbga ["\u0045x\u0074\u0047\u0053\u0074\u0061\u0074e"];for _ ,_fcc :=range _bdca {if _cga (_fcc ,_ace ){continue ;};_ebdf :=*_bb .MakeName (_fcc );
_aedg :=_gac .Get (_ebdf );_gab [_aedg ]=struct{}{};_gac .Remove (_ebdf );_abf :=_abe (_aedg ,_gab );if _abf !=nil {_d .Log .Debug ("\u0066\u0061i\u006c\u0065\u0064\u0020\u0074\u006f\u0020\u0074\u0072\u0061\u0076\u0065\u0072\u0073\u0065\u0020\u006f\u0062\u006a\u0065\u0063\u0074 %\u0076\u000a",_aedg );
};};};};return _gab ,nil ;};

// New creates a optimizers chain from options.
func New (options Options )*Chain {_gdf :=new (Chain );if options .CleanFonts ||options .SubsetFonts {_gdf .Append (&CleanFonts {Subset :options .SubsetFonts });};if options .CleanContentstream {_gdf .Append (new (CleanContentstream ));};if options .ImageUpperPPI > 0{_fefb :=new (ImagePPI );
_fefb .ImageUpperPPI =options .ImageUpperPPI ;_gdf .Append (_fefb );};if options .ImageQuality > 0{_daga :=new (Image );_daga .ImageQuality =options .ImageQuality ;_gdf .Append (_daga );};if options .CombineDuplicateDirectObjects {_gdf .Append (new (CombineDuplicateDirectObjects ));
};if options .CombineDuplicateStreams {_gdf .Append (new (CombineDuplicateStreams ));};if options .CombineIdenticalIndirectObjects {_gdf .Append (new (CombineIdenticalIndirectObjects ));};if options .UseObjectStreams {_gdf .Append (new (ObjectStreams ));
};if options .CompressStreams {_gdf .Append (new (CompressStreams ));};if options .CleanUnusedResources {_gdf .Append (new (CleanUnusedResources ));};return _gdf ;};func _gcc (_ccf *_bb .PdfObjectStream ,_aef []rune ,_cccf []_fdd .GlyphIndex )error {_ccf ,_gbc :=_bb .GetStream (_ccf );
if !_gbc {_d .Log .Debug ("\u0045\u006d\u0062\u0065\u0064\u0064\u0065\u0064\u0020\u0066\u006f\u006e\u0074\u0020\u006f\u0062\u006a\u0065c\u0074\u0020\u006e\u006f\u0074\u0020\u0066o\u0075\u006e\u0064\u0020\u002d\u002d\u0020\u0041\u0042\u004f\u0052T\u0020\u0073\u0075\u0062\u0073\u0065\u0074\u0074\u0069\u006e\u0067");
return _aeg .New ("\u0066\u006f\u006e\u0074fi\u006c\u0065\u0032\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_gfg ,_efd :=_bb .DecodeStream (_ccf );if _efd !=nil {_d .Log .Debug ("\u0044\u0065c\u006f\u0064\u0065 \u0065\u0072\u0072\u006f\u0072\u003a\u0020\u0025\u0076",_efd );
return _efd ;};_ddcg ,_efd :=_fdd .Parse (_b .NewReader (_gfg ));if _efd !=nil {_d .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0070\u0061\u0072\u0073\u0069n\u0067\u0020\u0025\u0064\u0020\u0062\u0079\u0074\u0065\u0020f\u006f\u006e\u0074",len (_ccf .Stream ));
return _efd ;};_gbf :=_cccf ;if len (_aef )> 0{_eagg :=_ddcg .LookupRunes (_aef );_gbf =append (_gbf ,_eagg ...);};_ddcg ,_efd =_ddcg .SubsetKeepIndices (_gbf );if _efd !=nil {_d .Log .Debug ("\u0045R\u0052\u004f\u0052\u0020s\u0075\u0062\u0073\u0065\u0074t\u0069n\u0067 \u0066\u006f\u006e\u0074\u003a\u0020\u0025v",_efd );
return _efd ;};var _fee _b .Buffer ;_efd =_ddcg .Write (&_fee );if _efd !=nil {_d .Log .Debug ("\u0045\u0052\u0052\u004fR \u0057\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076",_efd );return _efd ;};if _fee .Len ()> len (_gfg ){_d .Log .Debug ("\u0052\u0065-\u0077\u0072\u0069\u0074\u0074\u0065\u006e\u0020\u0066\u006f\u006e\u0074\u0020\u0069\u0073\u0020\u006c\u0061\u0072\u0067\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u002d\u0020\u0073\u006b\u0069\u0070");
return nil ;};_fced ,_efd :=_bb .MakeStream (_fee .Bytes (),_bb .NewFlateEncoder ());if _efd !=nil {_d .Log .Debug ("\u0045\u0052\u0052\u004fR \u0057\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076",_efd );return _efd ;
};*_ccf =*_fced ;_ccf .Set ("\u004ce\u006e\u0067\u0074\u0068\u0031",_bb .MakeInteger (int64 (_fee .Len ())));return nil ;};func _cca (_aeb *_ca .Image ,_afea float64 )(*_ca .Image ,error ){_fdf ,_bffe :=_aeb .ToGoImage ();if _bffe !=nil {return nil ,_bffe ;
};var _edd _fd .Image ;_dagf ,_bed :=_fdf .(*_fd .Monochrome );if _bed {if _bffe =_dagf .ResolveDecode ();_bffe !=nil {return nil ,_bffe ;};_edd ,_bffe =_dagf .Scale (_afea );if _bffe !=nil {return nil ,_bffe ;};}else {_agc :=int (_e .RoundToEven (float64 (_aeb .Width )*_afea ));
_aad :=int (_e .RoundToEven (float64 (_aeb .Height )*_afea ));_edd ,_bffe =_fd .NewImage (_agc ,_aad ,int (_aeb .BitsPerComponent ),_aeb .ColorComponents ,nil ,nil ,nil );if _bffe !=nil {return nil ,_bffe ;};_g .CatmullRom .Scale (_edd ,_edd .Bounds (),_fdf ,_fdf .Bounds (),_g .Over ,&_g .Options {});
};_ebf :=_edd .Base ();_def :=&_ca .Image {Width :int64 (_ebf .Width ),Height :int64 (_ebf .Height ),BitsPerComponent :int64 (_ebf .BitsPerComponent ),ColorComponents :_ebf .ColorComponents ,Data :_ebf .Data };_def .SetDecode (_ebf .Decode );_def .SetAlpha (_ebf .Alpha );
return _def ,nil ;};

// ImagePPI optimizes images by scaling images such that the PPI (pixels per inch) is never higher than ImageUpperPPI.
// TODO(a5i): Add support for inline images.
// It implements interface model.Optimizer.
type ImagePPI struct{ImageUpperPPI float64 ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_bcb *CombineDuplicateStreams )Optimize (objects []_bb .PdfObject )(_acb []_bb .PdfObject ,_ecgf error ){_efc :=make (map[_bb .PdfObject ]_bb .PdfObject );_gdee :=make (map[_bb .PdfObject ]struct{});_bab :=make (map[string ][]*_bb .PdfObjectStream );
for _ ,_gge :=range objects {if _gfgg ,_gfff :=_gge .(*_bb .PdfObjectStream );_gfff {_aedd :=_c .New ();_aedd .Write (_gfgg .Stream );_aedd .Write ([]byte (_gfgg .PdfObjectDictionary .WriteString ()));_eace :=string (_aedd .Sum (nil ));_bab [_eace ]=append (_bab [_eace ],_gfgg );
};};for _ ,_bbaa :=range _bab {if len (_bbaa )< 2{continue ;};_gfde :=_bbaa [0];for _agee :=1;_agee < len (_bbaa );_agee ++{_beea :=_bbaa [_agee ];_efc [_beea ]=_gfde ;_gdee [_beea ]=struct{}{};};};_acb =make ([]_bb .PdfObject ,0,len (objects )-len (_gdee ));
for _ ,_gee :=range objects {if _ ,_dbbf :=_gdee [_gee ];_dbbf {continue ;};_acb =append (_acb ,_gee );};_egcd (_acb ,_efc );return _acb ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_baed *CleanFonts )Optimize (objects []_bb .PdfObject )(_gbgb []_bb .PdfObject ,_gbd error ){var _aedc map[*_bb .PdfObjectStream ]struct{};if _baed .Subset {var _bgc error ;_aedc ,_bgc =_bff (objects );if _bgc !=nil {_d .Log .Debug ("\u0045\u0052\u0052\u004fR\u003a\u0020\u0046\u0061\u0069\u006c\u0065\u0064\u0020\u0073u\u0062s\u0065\u0074\u0074\u0069\u006e\u0067\u003a \u0025\u0076",_bgc );
return nil ,_bgc ;};};for _ ,_eg :=range objects {_aaf ,_fdgg :=_bb .GetStream (_eg );if !_fdgg {continue ;};if _ ,_fgb :=_aedc [_aaf ];_fgb {continue ;};_efa ,_agba :=_bb .NewEncoderFromStream (_aaf );if _agba !=nil {_d .Log .Debug ("\u0045\u0052RO\u0052\u0020\u0067e\u0074\u0074\u0069\u006eg e\u006eco\u0064\u0065\u0072\u003a\u0020\u0025\u0076 -\u0020\u0069\u0067\u006e\u006f\u0072\u0069n\u0067",_agba );
continue ;};_ddcc ,_agba :=_efa .DecodeStream (_aaf );if _agba !=nil {_d .Log .Debug ("\u0044\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0065r\u0072\u006f\u0072\u0020\u003a\u0020\u0025v\u0020\u002d\u0020\u0069\u0067\u006e\u006f\u0072\u0069\u006e\u0067",_agba );
continue ;};if len (_ddcc )< 4{continue ;};_cebc :=string (_ddcc [:4]);if _cebc =="\u004f\u0054\u0054\u004f"{continue ;};if _cebc !="\u0000\u0001\u0000\u0000"&&_cebc !="\u0074\u0072\u0075\u0065"{continue ;};_acge ,_agba :=_fdd .Parse (_b .NewReader (_ddcc ));
if _agba !=nil {_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020P\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_agba );continue ;};_agba =_acge .Optimize ();
if _agba !=nil {_d .Log .Debug ("\u0045\u0052RO\u0052\u0020\u004fp\u0074\u0069\u006d\u0069zin\u0067 f\u006f\u006e\u0074\u003a\u0020\u0025\u0076 -\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067",_agba );continue ;};var _cbc _b .Buffer ;_agba =_acge .Write (&_cbc );
if _agba !=nil {_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020W\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_agba );continue ;};if _cbc .Len ()> len (_ddcc ){_d .Log .Debug ("\u0052\u0065-\u0077\u0072\u0069\u0074\u0074\u0065\u006e\u0020\u0066\u006f\u006e\u0074\u0020\u0069\u0073\u0020\u006c\u0061\u0072\u0067\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u002d\u0020\u0073\u006b\u0069\u0070");
continue ;};_dcb ,_agba :=_bb .MakeStream (_cbc .Bytes (),_bb .NewFlateEncoder ());if _agba !=nil {continue ;};*_aaf =*_dcb ;_aaf .Set ("\u004ce\u006e\u0067\u0074\u0068\u0031",_bb .MakeInteger (int64 (_cbc .Len ())));};return objects ,nil ;};func _cga (_deed string ,_cadba []string )bool {for _ ,_fgc :=range _cadba {if _deed ==_fgc {return true ;
};};return false ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_adee *CombineDuplicateDirectObjects )Optimize (objects []_bb .PdfObject )(_gfba []_bb .PdfObject ,_bef error ){_ggb (objects );_bea :=make (map[string ][]*_bb .PdfObjectDictionary );var _dfgd func (_bbega *_bb .PdfObjectDictionary );_dfgd =func (_fag *_bb .PdfObjectDictionary ){for _ ,_fedd :=range _fag .Keys (){_debb :=_fag .Get (_fedd );
if _gbgab ,_gaca :=_debb .(*_bb .PdfObjectDictionary );_gaca {if _fcd :=_gbgab .Keys ();len (_fcd )==0{continue ;};_bfda :=_c .New ();_bfda .Write ([]byte (_gbgab .WriteString ()));_abeb :=string (_bfda .Sum (nil ));_bea [_abeb ]=append (_bea [_abeb ],_gbgab );
_dfgd (_gbgab );};};};for _ ,_fad :=range objects {_ffdf ,_cfe :=_fad .(*_bb .PdfIndirectObject );if !_cfe {continue ;};if _dgcf ,_edg :=_ffdf .PdfObject .(*_bb .PdfObjectDictionary );_edg {_dfgd (_dgcf );};};_abfc :=make ([]_bb .PdfObject ,0,len (_bea ));
_fcf :=make (map[_bb .PdfObject ]_bb .PdfObject );for _ ,_edaf :=range _bea {if len (_edaf )< 2{continue ;};_gede :=_bb .MakeDict ();_gede .Merge (_edaf [0]);_fggf :=_bb .MakeIndirectObject (_gede );_abfc =append (_abfc ,_fggf );for _cgaf :=0;_cgaf < len (_edaf );
_cgaf ++{_dgg :=_edaf [_cgaf ];_fcf [_dgg ]=_fggf ;};};_gfba =make ([]_bb .PdfObject ,len (objects ));copy (_gfba ,objects );_gfba =append (_abfc ,_gfba ...);_egcd (_gfba ,_fcf );return _gfba ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_aed *Chain )Optimize (objects []_bb .PdfObject )(_bbb []_bb .PdfObject ,_ag error ){_de :=objects ;for _ ,_ade :=range _aed ._adf {_bbbc ,_ef :=_ade .Optimize (_de );if _ef !=nil {_d .Log .Debug ("\u0045\u0052\u0052OR\u0020\u004f\u0070\u0074\u0069\u006d\u0069\u007a\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u002b\u0076",_ef );
continue ;};_de =_bbbc ;};return _de ,nil ;};type content struct{_eac string ;_ged *_ca .PdfPageResources ;};func _cb (_be *_bb .PdfObjectStream )error {_gf ,_bd :=_bb .DecodeStream (_be );if _bd !=nil {return _bd ;};_cag :=_ad .NewContentStreamParser (string (_gf ));
_cc ,_bd :=_cag .Parse ();if _bd !=nil {return _bd ;};_cc =_cd (_cc );_deg :=_cc .Bytes ();if len (_deg )>=len (_gf ){return nil ;};_ff ,_bd :=_bb .MakeStream (_cc .Bytes (),_bb .NewFlateEncoder ());if _bd !=nil {return _bd ;};_be .Stream =_ff .Stream ;
_be .Merge (_ff .PdfObjectDictionary );return nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_gca *CompressStreams )Optimize (objects []_bb .PdfObject )(_ffb []_bb .PdfObject ,_gacb error ){_ffb =make ([]_bb .PdfObject ,len (objects ));copy (_ffb ,objects );for _ ,_gbfg :=range objects {_bfbg ,_bbf :=_bb .GetStream (_gbfg );if !_bbf {continue ;
};if _fff :=_bfbg .Get ("\u0046\u0069\u006c\u0074\u0065\u0072");_fff !=nil {if _ ,_ccg :=_bb .GetName (_fff );_ccg {continue ;};if _bccd ,_cfdg :=_bb .GetArray (_fff );_cfdg &&_bccd .Len ()> 0{continue ;};};_fccc :=_bb .NewFlateEncoder ();var _eec []byte ;
_eec ,_gacb =_fccc .EncodeBytes (_bfbg .Stream );if _gacb !=nil {return _ffb ,_gacb ;};_gcac :=_fccc .MakeStreamDict ();if len (_eec )+len (_gcac .WriteString ())< len (_bfbg .Stream ){_bfbg .Stream =_eec ;_bfbg .PdfObjectDictionary .Merge (_gcac );_bfbg .PdfObjectDictionary .Set ("\u004c\u0065\u006e\u0067\u0074\u0068",_bb .MakeInteger (int64 (len (_bfbg .Stream ))));
};};return _ffb ,nil ;};

// Optimize implements Optimizer interface.
func (_eca *CleanUnusedResources )Optimize (objects []_bb .PdfObject )(_ecd []_bb .PdfObject ,_dcf error ){_deac ,_dcf :=_gbdd (objects );if _dcf !=nil {return nil ,_dcf ;};_fcec :=[]_bb .PdfObject {};for _ ,_cda :=range objects {_ ,_ded :=_deac [_cda ];
if _ded {continue ;};_fcec =append (_fcec ,_cda );};return _fcec ,nil ;};type imageModifications struct{Scale float64 ;Encoding _bb .StreamEncoder ;};func _febg (_fbf []_bb .PdfObject )objectStructure {_ddf :=objectStructure {};_fcddf :=false ;for _ ,_ggf :=range _fbf {switch _bgcb :=_ggf .(type ){case *_bb .PdfIndirectObject :_gbdff ,_aeac :=_bb .GetDict (_bgcb );
if !_aeac {continue ;};_cega ,_aeac :=_bb .GetName (_gbdff .Get ("\u0054\u0079\u0070\u0065"));if !_aeac {continue ;};switch _cega .String (){case "\u0043a\u0074\u0061\u006c\u006f\u0067":_ddf ._dgdg =_gbdff ;_fcddf =true ;};};if _fcddf {break ;};};if !_fcddf {return _ddf ;
};_gae ,_gfaeg :=_bb .GetDict (_ddf ._dgdg .Get ("\u0050\u0061\u0067e\u0073"));if !_gfaeg {return _ddf ;};_ddf ._fcb =_gae ;_cegc ,_gfaeg :=_bb .GetArray (_gae .Get ("\u004b\u0069\u0064\u0073"));if !_gfaeg {return _ddf ;};for _ ,_aceb :=range _cegc .Elements (){_dfce ,_gfdaf :=_bb .GetIndirect (_aceb );
if !_gfdaf {break ;};_ddf ._gafd =append (_ddf ._gafd ,_dfce );};return _ddf ;};

// Options describes PDF optimization parameters.
type Options struct{CombineDuplicateStreams bool ;CombineDuplicateDirectObjects bool ;ImageUpperPPI float64 ;ImageQuality int ;UseObjectStreams bool ;CombineIdenticalIndirectObjects bool ;CompressStreams bool ;CleanFonts bool ;SubsetFonts bool ;CleanContentstream bool ;
CleanUnusedResources bool ;};

// Chain allows to use sequence of optimizers.
// It implements interface model.Optimizer.
type Chain struct{_adf []_ca .Optimizer };

// ObjectStreams groups PDF objects to object streams.
// It implements interface model.Optimizer.
type ObjectStreams struct{};

// Optimize optimizes PDF objects to decrease PDF size.
func (_gfed *ImagePPI )Optimize (objects []_bb .PdfObject )(_cba []_bb .PdfObject ,_eaf error ){if _gfed .ImageUpperPPI <=0{return objects ,nil ;};_bgge :=_ecab (objects );if len (_bgge )==0{return objects ,nil ;};_gded :=make (map[_bb .PdfObject ]struct{});
for _ ,_gfc :=range _bgge {_ggca :=_gfc .Stream .PdfObjectDictionary .Get ("\u0053\u004d\u0061s\u006b");_gded [_ggca ]=struct{}{};};_ega :=make (map[*_bb .PdfObjectStream ]*imageInfo );for _ ,_gfgc :=range _bgge {_ega [_gfgc .Stream ]=_gfgc ;};var _bec *_bb .PdfObjectDictionary ;
for _ ,_gdbed :=range objects {if _aaec ,_dda :=_bb .GetDict (_gdbed );_bec ==nil &&_dda {if _aafg ,_cfdb :=_bb .GetName (_aaec .Get ("\u0054\u0079\u0070\u0065"));_cfdb &&*_aafg =="\u0043a\u0074\u0061\u006c\u006f\u0067"{_bec =_aaec ;};};};if _bec ==nil {return objects ,nil ;
};_abef ,_dgfg :=_bb .GetDict (_bec .Get ("\u0050\u0061\u0067e\u0073"));if !_dgfg {return objects ,nil ;};_abcf ,_afdg :=_bb .GetArray (_abef .Get ("\u004b\u0069\u0064\u0073"));if !_afdg {return objects ,nil ;};for _ ,_bfea :=range _abcf .Elements (){_cbfcc :=make (map[string ]*imageInfo );
_gddg ,_cgb :=_bb .GetDict (_bfea );if !_cgb {continue ;};_bece ,_ :=_bgd (_gddg .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));if len (_bece )==0{continue ;};_agcf ,_dcba :=_bb .GetDict (_gddg .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"));
if !_dcba {continue ;};_gdc ,_fdbf :=_ca .NewPdfPageResourcesFromDict (_agcf );if _fdbf !=nil {_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0072\u0065\u0073\u006f\u0075\u0072\u0063\u0065\u0073\u0020-\u0020\u0069\u0067\u006e\u006fr\u0069\u006eg\u003a\u0020\u0025\u0076",_fdbf );
continue ;};_acbf ,_feb :=_bb .GetDict (_agcf .Get ("\u0058O\u0062\u006a\u0065\u0063\u0074"));if !_feb {continue ;};_dfda :=_acbf .Keys ();for _ ,_bgef :=range _dfda {if _aeab ,_dfbc :=_bb .GetStream (_acbf .Get (_bgef ));_dfbc {if _afee ,_gdbf :=_ega [_aeab ];
_gdbf {_cbfcc [string (_bgef )]=_afee ;};};};_ffcc :=_ad .NewContentStreamParser (_bece );_bedb ,_fdbf :=_ffcc .Parse ();if _fdbf !=nil {_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_fdbf );continue ;};_cec :=_ad .NewContentStreamProcessor (*_bedb );
_cec .AddHandler (_ad .HandlerConditionEnumAllOperands ,"",func (_ede *_ad .ContentStreamOperation ,_efce _ad .GraphicsState ,_fgda *_ca .PdfPageResources )error {switch _ede .Operand {case "\u0044\u006f":if len (_ede .Params )!=1{_d .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020\u0049\u0067\u006e\u006f\u0072\u0069\u006e\u0067\u0020\u0044\u006f\u0020w\u0069\u0074\u0068\u0020\u006c\u0065\u006e\u0028\u0070\u0061ra\u006d\u0073\u0029 \u0021=\u0020\u0031");
return nil ;};_fcfg ,_efad :=_bb .GetName (_ede .Params [0]);if !_efad {_d .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0049\u0067\u006e\u006f\u0072\u0069\u006e\u0067\u0020\u0044\u006f\u0020\u0077\u0069\u0074\u0068\u0020\u006e\u006f\u006e\u0020\u004e\u0061\u006d\u0065\u0020p\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072");
return nil ;};if _gabe ,_bdea :=_cbfcc [string (*_fcfg )];_bdea {_abcb :=_efce .CTM .ScalingFactorX ();_deaca :=_efce .CTM .ScalingFactorY ();_egad ,_aefd :=_abcb /72.0,_deaca /72.0;_gbdg ,_eab :=float64 (_gabe .Width )/_egad ,float64 (_gabe .Height )/_aefd ;
if _egad ==0||_aefd ==0{_gbdg =72.0;_eab =72.0;};_gabe .PPI =_e .Max (_gabe .PPI ,_gbdg );_gabe .PPI =_e .Max (_gabe .PPI ,_eab );};};return nil ;});_fdbf =_cec .Process (_gdc );if _fdbf !=nil {_d .Log .Debug ("E\u0052\u0052\u004f\u0052 p\u0072o\u0063\u0065\u0073\u0073\u0069n\u0067\u003a\u0020\u0025\u002b\u0076",_fdbf );
continue ;};};for _ ,_egfe :=range _bgge {if _ ,_dacd :=_gded [_egfe .Stream ];_dacd {continue ;};if _egfe .PPI <=_gfed .ImageUpperPPI {continue ;};_ffgg ,_ebdg :=_ca .NewXObjectImageFromStream (_egfe .Stream );if _ebdg !=nil {_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_ebdg );
continue ;};var _dfdb imageModifications ;_dfdb .Scale =_gfed .ImageUpperPPI /_egfe .PPI ;if _egfe .BitsPerComponent ==1&&_egfe .ColorComponents ==1{_cfeg :=_e .Round (_egfe .PPI /_gfed .ImageUpperPPI );_eafe :=_fd .NextPowerOf2 (uint (_cfeg ));if _fd .InDelta (float64 (_eafe ),1/_dfdb .Scale ,0.3){_dfdb .Scale =float64 (1)/float64 (_eafe );
};if _ ,_bbbbg :=_ffgg .Filter .(*_bb .JBIG2Encoder );!_bbbbg {_dfdb .Encoding =_bb .NewJBIG2Encoder ();};};if _ebdg =_fbab (_ffgg ,_dfdb );_ebdg !=nil {_d .Log .Debug ("\u0045\u0072\u0072\u006f\u0072 \u0073\u0063\u0061\u006c\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u006be\u0065\u0070\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0073",_ebdg );
continue ;};_dfdb .Encoding =nil ;if _bgeg ,_egce :=_bb .GetStream (_egfe .Stream .PdfObjectDictionary .Get ("\u0053\u004d\u0061s\u006b"));_egce {_cced ,_agf :=_ca .NewXObjectImageFromStream (_bgeg );if _agf !=nil {_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_agf );
continue ;};if _agf =_fbab (_cced ,_dfdb );_agf !=nil {_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_agf );continue ;};};};return objects ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_bgb *ObjectStreams )Optimize (objects []_bb .PdfObject )(_cee []_bb .PdfObject ,_aag error ){_cgeg :=&_bb .PdfObjectStreams {};_babb :=make ([]_bb .PdfObject ,0,len (objects ));for _ ,_adcb :=range objects {if _eafb ,_fecg :=_adcb .(*_bb .PdfIndirectObject );
_fecg &&_eafb .GenerationNumber ==0{_cgeg .Append (_adcb );}else {_babb =append (_babb ,_adcb );};};if _cgeg .Len ()==0{return _babb ,nil ;};_cee =make ([]_bb .PdfObject ,0,len (_babb )+_cgeg .Len ()+1);if _cgeg .Len ()> 1{_cee =append (_cee ,_cgeg );};
_cee =append (_cee ,_cgeg .Elements ()...);_cee =append (_cee ,_babb ...);return _cee ,nil ;};

// CleanFonts cleans up embedded fonts, reducing font sizes.
type CleanFonts struct{

// Subset embedded fonts if encountered (if true).
// Otherwise attempts to reduce the font program.
Subset bool ;};type imageInfo struct{BitsPerComponent int ;ColorComponents int ;Width int ;Height int ;Stream *_bb .PdfObjectStream ;PPI float64 ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_afe *Image )Optimize (objects []_bb .PdfObject )(_ccb []_bb .PdfObject ,_fcg error ){if _afe .ImageQuality <=0{return objects ,nil ;};_bag :=_ecab (objects );if len (_bag )==0{return objects ,nil ;};_cade :=make (map[_bb .PdfObject ]_bb .PdfObject );
_ccce :=make (map[_bb .PdfObject ]struct{});for _ ,_ffcfb :=range _bag {_abd :=_ffcfb .Stream .Get ("\u0053\u004d\u0061s\u006b");_ccce [_abd ]=struct{}{};};for _abfca ,_afd :=range _bag {_gea :=_afd .Stream ;if _ ,_cadd :=_ccce [_gea ];_cadd {continue ;
};_eef ,_dge :=_ca .NewXObjectImageFromStream (_gea );if _dge !=nil {_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_dge );continue ;};switch _eef .Filter .(type ){case *_bb .JBIG2Encoder :continue ;case *_bb .CCITTFaxEncoder :continue ;
};_dbgf ,_dge :=_eef .ToImage ();if _dge !=nil {_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_dge );continue ;};_acde :=_bb .NewDCTEncoder ();_acde .ColorComponents =_dbgf .ColorComponents ;_acde .Quality =_afe .ImageQuality ;
_acde .BitsPerComponent =_afd .BitsPerComponent ;_acde .Width =_afd .Width ;_acde .Height =_afd .Height ;_dbc ,_dge :=_acde .EncodeBytes (_dbgf .Data );if _dge !=nil {_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_dge );
continue ;};var _edf _bb .StreamEncoder ;_edf =_acde ;{_fbbe :=_bb .NewFlateEncoder ();_gdbe :=_bb .NewMultiEncoder ();_gdbe .AddEncoder (_fbbe );_gdbe .AddEncoder (_acde );_cdfb ,_bdb :=_gdbe .EncodeBytes (_dbgf .Data );if _bdb !=nil {_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_bdb );
continue ;};if len (_cdfb )< len (_dbc ){_d .Log .Trace ("\u004d\u0075\u006c\u0074\u0069\u0020\u0065\u006e\u0063\u0020\u0069\u006d\u0070\u0072\u006f\u0076\u0065\u0073\u003a\u0020\u0025\u0064\u0020\u0074o\u0020\u0025\u0064\u0020\u0028o\u0072\u0069g\u0020\u0025\u0064\u0029",len (_dbc ),len (_cdfb ),len (_gea .Stream ));
_dbc =_cdfb ;_edf =_gdbe ;};};_egd :=len (_gea .Stream );if _egd < len (_dbc ){continue ;};_caddg :=&_bb .PdfObjectStream {Stream :_dbc };_caddg .PdfObjectReference =_gea .PdfObjectReference ;_caddg .PdfObjectDictionary =_bb .MakeDict ();_caddg .Merge (_gea .PdfObjectDictionary );
_caddg .Merge (_edf .MakeStreamDict ());_caddg .Set ("\u004c\u0065\u006e\u0067\u0074\u0068",_bb .MakeInteger (int64 (len (_dbc ))));_cade [_gea ]=_caddg ;_bag [_abfca ].Stream =_caddg ;};_ccb =make ([]_bb .PdfObject ,len (objects ));copy (_ccb ,objects );
_egcd (_ccb ,_cade );return _ccb ,nil ;};

// GetOptimizers gets the list of optimizers in chain `c`.
func (_ce *Chain )GetOptimizers ()[]_ca .Optimizer {return _ce ._adf };func _gbdf (_fggg _bb .PdfObject )(string ,error ){_bafc :=_bb .TraceToDirectObject (_fggg );switch _cgeb :=_bafc .(type ){case *_bb .PdfObjectString :return _cgeb .Str (),nil ;case *_bb .PdfObjectStream :_bfc ,_acgc :=_bb .DecodeStream (_cgeb );
if _acgc !=nil {return "",_acgc ;};return string (_bfc ),nil ;};return "",_ae .Errorf ("\u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u0063\u006f\u006e\u0074\u0065\u006e\u0074\u0020\u0073\u0074\u0072e\u0061\u006d\u0020\u006f\u0062\u006a\u0065\u0063\u0074\u0020\u0068\u006f\u006c\u0064\u0065\u0072\u0020\u0028\u0025\u0054\u0029",_bafc );
};func _abe (_abc _bb .PdfObject ,_bega map[_bb .PdfObject ]struct{})error {if _cge ,_dgd :=_abc .(*_bb .PdfIndirectObject );_dgd {_bega [_abc ]=struct{}{};_gdb :=_abe (_cge .PdfObject ,_bega );if _gdb !=nil {return _gdb ;};return nil ;};if _agbc ,_dfa :=_abc .(*_bb .PdfObjectStream );
_dfa {_bega [_agbc ]=struct{}{};_dfbe :=_abe (_agbc .PdfObjectDictionary ,_bega );if _dfbe !=nil {return _dfbe ;};return nil ;};if _cce ,_dag :=_abc .(*_bb .PdfObjectDictionary );_dag {for _ ,_gga :=range _cce .Keys (){_cadb :=_cce .Get (_gga );_ =_cadb ;
if _dbba ,_bafa :=_cadb .(*_bb .PdfObjectReference );_bafa {_cadb =_dbba .Resolve ();_cce .Set (_gga ,_cadb );};if _gga !="\u0050\u0061\u0072\u0065\u006e\u0074"{if _dgfc :=_abe (_cadb ,_bega );_dgfc !=nil {return _dgfc ;};};};return nil ;};if _begd ,_dcee :=_abc .(*_bb .PdfObjectArray );
_dcee {if _begd ==nil {return _aeg .New ("\u0061\u0072\u0072a\u0079\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};for _fgd ,_egb :=range _begd .Elements (){if _gcbc ,_fgbc :=_egb .(*_bb .PdfObjectReference );_fgbc {_egb =_gcbc .Resolve ();_begd .Set (_fgd ,_egb );
};if _dagd :=_abe (_egb ,_bega );_dagd !=nil {return _dagd ;};};return nil ;};return nil ;};

// CombineIdenticalIndirectObjects combines identical indirect objects.
// It implements interface model.Optimizer.
type CombineIdenticalIndirectObjects struct{};func _cd (_gc *_ad .ContentStreamOperations )*_ad .ContentStreamOperations {if _gc ==nil {return nil ;};_eb :=_ad .ContentStreamOperations {};for _ ,_age :=range *_gc {switch _age .Operand {case "\u0042\u0044\u0043","\u0042\u004d\u0043","\u0045\u004d\u0043":continue ;
case "\u0054\u006d":if len (_age .Params )==6{if _bf ,_gcb :=_bb .GetNumbersAsFloat (_age .Params );_gcb ==nil {if _bf [0]==1&&_bf [1]==0&&_bf [2]==0&&_bf [3]==1{_age =&_ad .ContentStreamOperation {Params :[]_bb .PdfObject {_age .Params [4],_age .Params [5]},Operand :"\u0054\u0064"};
};};};};_eb =append (_eb ,_age );};return &_eb ;};func _bff (_dgf []_bb .PdfObject )(_ea map[*_bb .PdfObjectStream ]struct{},_fg error ){_ea =map[*_bb .PdfObjectStream ]struct{}{};_afa :=map[*_ca .PdfFont ]struct{}{};_bg :=_febg (_dgf );for _ ,_gd :=range _bg ._gafd {_agb ,_dgb :=_bb .GetDict (_gd .PdfObject );
if !_dgb {continue ;};_ffc ,_dgb :=_bb .GetDict (_agb .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"));if !_dgb {continue ;};_ddc ,_ :=_bgd (_agb .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));_bdc ,_ac :=_ca .NewPdfPageResourcesFromDict (_ffc );
if _ac !=nil {return nil ,_ac ;};_ebd :=[]content {{_eac :_ddc ,_ged :_bdc }};_eag :=_gaa (_agb .Get ("\u0041\u006e\u006e\u006f\u0074\u0073"));if _eag !=nil {_ebd =append (_ebd ,_eag ...);};for _ ,_bgf :=range _ebd {_agbf ,_dea :=_cg .NewFromContents (_bgf ._eac ,_bgf ._ged );
if _dea !=nil {return nil ,_dea ;};_ga ,_ ,_ ,_dea :=_agbf .ExtractPageText ();if _dea !=nil {return nil ,_dea ;};for _ ,_ffd :=range _ga .Marks ().Elements (){if _ffd .Font ==nil {continue ;};if _ ,_afc :=_afa [_ffd .Font ];!_afc {_afa [_ffd .Font ]=struct{}{};
};};};};_cea :=map[*_bb .PdfObjectStream ][]*_ca .PdfFont {};for _gffa :=range _afa {_ccc :=_gffa .FontDescriptor ();if _ccc ==nil ||_ccc .FontFile2 ==nil {continue ;};_cbfc ,_agd :=_bb .GetStream (_ccc .FontFile2 );if !_agd {continue ;};_cea [_cbfc ]=append (_cea [_cbfc ],_gffa );
};for _fdb :=range _cea {var _ecgd []rune ;var _dc []_fdd .GlyphIndex ;for _ ,_cdb :=range _cea [_fdb ]{switch _gbg :=_cdb .Encoder ().(type ){case *_f .IdentityEncoder :_bc :=_gbg .RegisteredRunes ();_afcd :=make ([]_fdd .GlyphIndex ,len (_bc ));for _bee ,_acg :=range _bc {_afcd [_bee ]=_fdd .GlyphIndex (_acg );
};_dc =append (_dc ,_afcd ...);case *_f .TrueTypeFontEncoder :_afb :=_gbg .RegisteredRunes ();_ecgd =append (_ecgd ,_afb ...);case _f .SimpleEncoder :_dba :=_gbg .Charcodes ();for _ ,_bbeg :=range _dba {_dfd ,_aca :=_gbg .CharcodeToRune (_bbeg );if !_aca {_d .Log .Debug ("\u0043\u0068a\u0072\u0063\u006f\u0064\u0065\u003c\u002d\u003e\u0072\u0075\u006e\u0065\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064: \u0025\u0064",_bbeg );
continue ;};_ecgd =append (_ecgd ,_dfd );};};};_fg =_gcc (_fdb ,_ecgd ,_dc );if _fg !=nil {_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020\u0073\u0075\u0062\u0073\u0065\u0074\u0074\u0069\u006eg\u0020f\u006f\u006e\u0074\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u003a\u0020\u0025\u0076",_fg );
return nil ,_fg ;};_ea [_fdb ]=struct{}{};};return _ea ,nil ;};func _gec (_add *_bb .PdfObjectDictionary )[]string {_dccb :=[]string {};for _ ,_dbef :=range _add .Keys (){_dccb =append (_dccb ,_dbef .String ());};return _dccb ;};func _ggb (_ffgbf []_bb .PdfObject ){for _bdgg ,_fab :=range _ffgbf {switch _dbbd :=_fab .(type ){case *_bb .PdfIndirectObject :_dbbd .ObjectNumber =int64 (_bdgg +1);
_dbbd .GenerationNumber =0;case *_bb .PdfObjectStream :_dbbd .ObjectNumber =int64 (_bdgg +1);_dbbd .GenerationNumber =0;case *_bb .PdfObjectStreams :_dbbd .ObjectNumber =int64 (_bdgg +1);_dbbd .GenerationNumber =0;};};};func _ecab (_beb []_bb .PdfObject )[]*imageInfo {_aefc :=_bb .PdfObjectName ("\u0053u\u0062\u0074\u0079\u0070\u0065");
_dfbb :=make (map[*_bb .PdfObjectStream ]struct{});var _aead []*imageInfo ;for _ ,_ecdd :=range _beb {_faca ,_fedb :=_bb .GetStream (_ecdd );if !_fedb {continue ;};if _ ,_baff :=_dfbb [_faca ];_baff {continue ;};_dfbb [_faca ]=struct{}{};_caeg :=_faca .PdfObjectDictionary .Get (_aefc );
_bddb ,_fedb :=_bb .GetName (_caeg );if !_fedb ||string (*_bddb )!="\u0049\u006d\u0061g\u0065"{continue ;};_bbef :=&imageInfo {Stream :_faca ,BitsPerComponent :8};if _cgg ,_gbfa :=_bb .GetIntVal (_faca .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074"));
_gbfa {_bbef .BitsPerComponent =_cgg ;};if _cccfc ,_fba :=_bb .GetIntVal (_faca .Get ("\u0057\u0069\u0064t\u0068"));_fba {_bbef .Width =_cccfc ;};if _ffgb ,_dbbg :=_bb .GetIntVal (_faca .Get ("\u0048\u0065\u0069\u0067\u0068\u0074"));_dbbg {_bbef .Height =_ffgb ;
};_caef ,_dbgb :=_ca .NewPdfColorspaceFromPdfObject (_faca .Get ("\u0043\u006f\u006c\u006f\u0072\u0053\u0070\u0061\u0063\u0065"));if _dbgb !=nil {_d .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_dbgb );continue ;};if _caef ==nil {_fgcf ,_efbb :=_bb .GetName (_faca .Get ("\u0046\u0069\u006c\u0074\u0065\u0072"));
if _efbb {switch _fgcf .String (){case "\u0043\u0043\u0049\u0054\u0054\u0046\u0061\u0078\u0044e\u0063\u006f\u0064\u0065","J\u0042\u0049\u0047\u0032\u0044\u0065\u0063\u006f\u0064\u0065":_caef =_ca .NewPdfColorspaceDeviceGray ();_bbef .BitsPerComponent =1;
};};};switch _fged :=_caef .(type ){case *_ca .PdfColorspaceDeviceRGB :_bbef .ColorComponents =3;case *_ca .PdfColorspaceDeviceGray :_bbef .ColorComponents =1;default:_d .Log .Debug ("\u004f\u0070\u0074\u0069\u006d\u0069\u007aa\u0074\u0069\u006fn\u0020\u0069\u0073 \u006e\u006ft\u0020\u0073\u0075\u0070\u0070\u006fr\u0074ed\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u0025\u0054\u0020\u002d\u0020\u0073\u006b\u0069\u0070",_fged );
continue ;};_aead =append (_aead ,_bbef );};return _aead ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_gfd *CleanContentstream )Optimize (objects []_bb .PdfObject )(_cf []_bb .PdfObject ,_caf error ){_aeda :=map[*_bb .PdfObjectStream ]struct{}{};var _dg []*_bb .PdfObjectStream ;_bda :=func (_df *_bb .PdfObjectStream ){if _ ,_ec :=_aeda [_df ];!_ec {_aeda [_df ]=struct{}{};
_dg =append (_dg ,_df );};};_ceb :=map[_bb .PdfObject ]bool {};_cfb :=map[_bb .PdfObject ]bool {};for _ ,_efe :=range objects {switch _gfb :=_efe .(type ){case *_bb .PdfIndirectObject :switch _fc :=_gfb .PdfObject .(type ){case *_bb .PdfObjectDictionary :if _da ,_ffg :=_bb .GetName (_fc .Get ("\u0054\u0079\u0070\u0065"));
!_ffg ||_da .String ()!="\u0050\u0061\u0067\u0065"{continue ;};if _ee ,_ggd :=_bb .GetStream (_fc .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));_ggd {_bda (_ee );}else if _gfe ,_ebg :=_bb .GetArray (_fc .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));
_ebg {var _dee []*_bb .PdfObjectStream ;for _ ,_fb :=range _gfe .Elements (){if _db ,_gff :=_bb .GetStream (_fb );_gff {_dee =append (_dee ,_db );};};if len (_dee )> 0{var _cdg _b .Buffer ;for _ ,_bde :=range _dee {if _dd ,_caa :=_bb .DecodeStream (_bde );
_caa ==nil {_cdg .Write (_dd );};_ceb [_bde ]=true ;};_cff ,_af :=_bb .MakeStream (_cdg .Bytes (),_bb .NewFlateEncoder ());if _af !=nil {return nil ,_af ;};_cfb [_cff ]=true ;_fc .Set ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073",_cff );_bda (_cff );
};};};case *_bb .PdfObjectStream :if _dbg ,_aa :=_bb .GetName (_gfb .Get ("\u0054\u0079\u0070\u0065"));!_aa ||_dbg .String ()!="\u0058O\u0062\u006a\u0065\u0063\u0074"{continue ;};if _dfc ,_bbea :=_bb .GetName (_gfb .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));
!_bbea ||_dfc .String ()!="\u0046\u006f\u0072\u006d"{continue ;};_bda (_gfb );};};for _ ,_cfd :=range _dg {_caf =_cb (_cfd );if _caf !=nil {return nil ,_caf ;};};_cf =nil ;for _ ,_fce :=range objects {if _ceb [_fce ]{continue ;};_cf =append (_cf ,_fce );
};for _beg :=range _cfb {_cf =append (_cf ,_beg );};return _cf ,nil ;};func _bgd (_bbge _bb .PdfObject )(_agg string ,_caac []_bb .PdfObject ){var _cgf _b .Buffer ;switch _ccaa :=_bbge .(type ){case *_bb .PdfIndirectObject :_caac =append (_caac ,_ccaa );
_bbge =_ccaa .PdfObject ;};switch _aga :=_bbge .(type ){case *_bb .PdfObjectStream :if _bfbf ,_eaee :=_bb .DecodeStream (_aga );_eaee ==nil {_cgf .Write (_bfbf );_caac =append (_caac ,_aga );};case *_bb .PdfObjectArray :for _ ,_agcfd :=range _aga .Elements (){switch _acdf :=_agcfd .(type ){case *_bb .PdfObjectStream :if _fece ,_bbeb :=_bb .DecodeStream (_acdf );
_bbeb ==nil {_cgf .Write (_fece );_caac =append (_caac ,_acdf );};};};};return _cgf .String (),_caac ;};func _fbab (_efgg *_ca .XObjectImage ,_eaa imageModifications )error {_bdaa ,_ddbg :=_efgg .ToImage ();if _ddbg !=nil {return _ddbg ;};if _eaa .Scale !=0{_bdaa ,_ddbg =_cca (_bdaa ,_eaa .Scale );
if _ddbg !=nil {return _ddbg ;};};if _eaa .Encoding !=nil {_efgg .Filter =_eaa .Encoding ;};_efgg .Decode =nil ;switch _cged :=_efgg .Filter .(type ){case *_bb .FlateEncoder :if _cged .Predictor !=1&&_cged .Predictor !=11{_cged .Predictor =1;};};if _ddbg =_efgg .SetImage (_bdaa ,nil );
_ddbg !=nil {_d .Log .Debug ("\u0045\u0072\u0072or\u0020\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0076",_ddbg );return _ddbg ;};_efgg .ToPdfObject ();return nil ;};

// CompressStreams compresses uncompressed streams.
// It implements interface model.Optimizer.
type CompressStreams struct{};func _gaa (_fda _bb .PdfObject )[]content {if _fda ==nil {return nil ;};_dcc ,_ddb :=_bb .GetArray (_fda );if !_ddb {_d .Log .Debug ("\u0041\u006e\u006e\u006fts\u0020\u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0061\u0072\u0072\u0061\u0079");
return nil ;};var _eae []content ;for _ ,_bcg :=range _dcc .Elements (){_dbe ,_fac :=_bb .GetDict (_bcg );if !_fac {_d .Log .Debug ("I\u0067\u006e\u006f\u0072\u0069\u006eg\u0020\u006e\u006f\u006e\u002d\u0064i\u0063\u0074\u0020\u0065\u006c\u0065\u006de\u006e\u0074\u0020\u0069\u006e\u0020\u0041\u006e\u006e\u006ft\u0073");
continue ;};_ffe ,_fac :=_bb .GetDict (_dbe .Get ("\u0041\u0050"));if !_fac {_d .Log .Debug ("\u004e\u006f\u0020\u0041P \u0065\u006e\u0074\u0072\u0079\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067");continue ;};_cfc :=_bb .TraceToDirectObject (_ffe .Get ("\u004e"));
if _cfc ==nil {_d .Log .Debug ("N\u006f\u0020\u004e\u0020en\u0074r\u0079\u0020\u002d\u0020\u0073k\u0069\u0070\u0070\u0069\u006e\u0067");continue ;};var _fbg *_bb .PdfObjectStream ;switch _ffcf :=_cfc .(type ){case *_bb .PdfObjectDictionary :_cef ,_cdc :=_bb .GetName (_dbe .Get ("\u0041\u0053"));
if !_cdc {_d .Log .Debug ("\u004e\u006f\u0020\u0041S \u0065\u006e\u0074\u0072\u0079\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067");continue ;};_fbg ,_cdc =_bb .GetStream (_ffcf .Get (*_cef ));if !_cdc {_d .Log .Debug ("\u0046o\u0072\u006d\u0020\u006eo\u0074\u0020\u0066\u006f\u0075n\u0064 \u002d \u0073\u006b\u0069\u0070\u0070\u0069\u006eg");
continue ;};case *_bb .PdfObjectStream :_fbg =_ffcf ;};if _fbg ==nil {_d .Log .Debug ("\u0046\u006f\u0072m\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0028n\u0069\u006c\u0029\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067");
continue ;};_bce ,_acd :=_ca .NewXObjectFormFromStream (_fbg );if _acd !=nil {_d .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020l\u006f\u0061\u0064\u0069\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_acd );
continue ;};_ebda ,_acd :=_bce .GetContentStream ();if _acd !=nil {_d .Log .Debug ("E\u0072\u0072\u006f\u0072\u0020\u0064e\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0063\u006fn\u0074\u0065\u006et\u0073:\u0020\u0025\u0076",_acd );continue ;};_eae =append (_eae ,content {_eac :string (_ebda ),_ged :_bce .Resources });
};return _eae ;};func _egcd (_bfab []_bb .PdfObject ,_dca map[_bb .PdfObject ]_bb .PdfObject ){if len (_dca )==0{return ;};for _cfa ,_bgfd :=range _bfab {if _dgab ,_bedc :=_dca [_bgfd ];_bedc {_bfab [_cfa ]=_dgab ;continue ;};_dca [_bgfd ]=_bgfd ;switch _gaf :=_bgfd .(type ){case *_bb .PdfObjectArray :_bbac :=make ([]_bb .PdfObject ,_gaf .Len ());
copy (_bbac ,_gaf .Elements ());_egcd (_bbac ,_dca );for _ddd ,_dbf :=range _bbac {_gaf .Set (_ddd ,_dbf );};case *_bb .PdfObjectStreams :_egcd (_gaf .Elements (),_dca );case *_bb .PdfObjectStream :_efeb :=[]_bb .PdfObject {_gaf .PdfObjectDictionary };
_egcd (_efeb ,_dca );_gaf .PdfObjectDictionary =_efeb [0].(*_bb .PdfObjectDictionary );case *_bb .PdfObjectDictionary :_dffd :=_gaf .Keys ();_aabf :=make ([]_bb .PdfObject ,len (_dffd ));for _ggcg ,_eacd :=range _dffd {_aabf [_ggcg ]=_gaf .Get (_eacd );
};_egcd (_aabf ,_dca );for _gfae ,_dage :=range _dffd {_gaf .Set (_dage ,_aabf [_gfae ]);};case *_bb .PdfIndirectObject :_cdfc :=[]_bb .PdfObject {_gaf .PdfObject };_egcd (_cdfc ,_dca );_gaf .PdfObject =_cdfc [0];};};};

// Append appends optimizers to the chain.
func (_fdg *Chain )Append (optimizers ..._ca .Optimizer ){_fdg ._adf =append (_fdg ._adf ,optimizers ...)};

// CombineDuplicateDirectObjects combines duplicated direct objects by its data hash.
// It implements interface model.Optimizer.
type CombineDuplicateDirectObjects struct{};