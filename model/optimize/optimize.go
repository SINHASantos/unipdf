//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package optimize ;import (_e "bytes";_a "crypto/md5";_b "errors";_db "fmt";_g "github.com/unidoc/unipdf/v3/common";_cae "github.com/unidoc/unipdf/v3/contentstream";_bd "github.com/unidoc/unipdf/v3/core";_dg "github.com/unidoc/unipdf/v3/extractor";_fb "github.com/unidoc/unipdf/v3/internal/imageutil";
_cad "github.com/unidoc/unipdf/v3/internal/textencoding";_ce "github.com/unidoc/unipdf/v3/model";_ab "github.com/unidoc/unitype";_d "golang.org/x/image/draw";_c "math";_ca "strings";);func _dcc (_cbd string ,_efgg []string )bool {for _ ,_ace :=range _efgg {if _cbd ==_ace {return true ;
};};return false ;};func _ege (_cdd []_bd .PdfObject )(map[_bd .PdfObject ]struct{},error ){_ebga :=_fde (_cdd );_efg :=_ebga ._abfc ;_ffbc :=make (map[_bd .PdfObject ]struct{});_eag :=_agca (_efg );for _ ,_ffa :=range _efg {_dad ,_adb :=_bd .GetDict (_ffa .PdfObject );
if !_adb {continue ;};_bed ,_adb :=_bd .GetDict (_dad .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"));if !_adb {continue ;};_ccaa :=_eag ["\u0058O\u0062\u006a\u0065\u0063\u0074"];_cabg ,_adb :=_bd .GetDict (_bed .Get ("\u0058O\u0062\u006a\u0065\u0063\u0074"));
if _adb {_cgb :=_bgega (_cabg );for _ ,_fab :=range _cgb {if _dcc (_fab ,_ccaa ){continue ;};_efec :=*_bd .MakeName (_fab );_adf :=_cabg .Get (_efec );_ffbc [_adf ]=struct{}{};_cabg .Remove (_efec );_gfgg :=_fgbd (_adf ,_ffbc );if _gfgg !=nil {_g .Log .Debug ("\u0066\u0061\u0069\u006ce\u0064\u0020\u0074\u006f\u0020\u0074\u0072\u0061\u0076\u0065r\u0073e\u0020\u006f\u0062\u006a\u0065\u0063\u0074 \u0025\u0076",_adf );
};};};_ecd ,_adb :=_bd .GetDict (_bed .Get ("\u0046\u006f\u006e\u0074"));_gcb :=_eag ["\u0046\u006f\u006e\u0074"];if _adb {_dfbf :=_bgega (_ecd );for _ ,_cag :=range _dfbf {if _dcc (_cag ,_gcb ){continue ;};_gfb :=*_bd .MakeName (_cag );_acg :=_ecd .Get (_gfb );
_ffbc [_acg ]=struct{}{};_ecd .Remove (_gfb );_dbe :=_fgbd (_acg ,_ffbc );if _dbe !=nil {_g .Log .Debug ("\u0046\u0061i\u006c\u0065\u0064\u0020\u0074\u006f\u0020\u0074\u0072\u0061\u0076\u0065\u0072\u0073\u0065\u0020\u006f\u0062\u006a\u0065\u0063\u0074 %\u0076\u000a",_acg );
};};};_bfa ,_adb :=_bd .GetDict (_bed .Get ("\u0045x\u0074\u0047\u0053\u0074\u0061\u0074e"));if _adb {_efa :=_bgega (_bfa );_bcd :=_eag ["\u0045x\u0074\u0047\u0053\u0074\u0061\u0074e"];for _ ,_gdd :=range _efa {if _dcc (_gdd ,_bcd ){continue ;};_aacb :=*_bd .MakeName (_gdd );
_dcge :=_bfa .Get (_aacb );_ffbc [_dcge ]=struct{}{};_bfa .Remove (_aacb );_dea :=_fgbd (_dcge ,_ffbc );if _dea !=nil {_g .Log .Debug ("\u0066\u0061i\u006c\u0065\u0064\u0020\u0074\u006f\u0020\u0074\u0072\u0061\u0076\u0065\u0072\u0073\u0065\u0020\u006f\u0062\u006a\u0065\u0063\u0074 %\u0076\u000a",_dcge );
};};};};return _ffbc ,nil ;};func _ccde (_fae _bd .PdfObject )[]content {if _fae ==nil {return nil ;};_cdbc ,_cg :=_bd .GetArray (_fae );if !_cg {_g .Log .Debug ("\u0041\u006e\u006e\u006fts\u0020\u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0061\u0072\u0072\u0061\u0079");
return nil ;};var _ebg []content ;for _ ,_dfb :=range _cdbc .Elements (){_beb ,_ade :=_bd .GetDict (_dfb );if !_ade {_g .Log .Debug ("I\u0067\u006e\u006f\u0072\u0069\u006eg\u0020\u006e\u006f\u006e\u002d\u0064i\u0063\u0074\u0020\u0065\u006c\u0065\u006de\u006e\u0074\u0020\u0069\u006e\u0020\u0041\u006e\u006e\u006ft\u0073");
continue ;};_eea ,_ade :=_bd .GetDict (_beb .Get ("\u0041\u0050"));if !_ade {_g .Log .Debug ("\u004e\u006f\u0020\u0041P \u0065\u006e\u0074\u0072\u0079\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067");continue ;};_dag :=_bd .TraceToDirectObject (_eea .Get ("\u004e"));
if _dag ==nil {_g .Log .Debug ("N\u006f\u0020\u004e\u0020en\u0074r\u0079\u0020\u002d\u0020\u0073k\u0069\u0070\u0070\u0069\u006e\u0067");continue ;};var _fc *_bd .PdfObjectStream ;switch _fbc :=_dag .(type ){case *_bd .PdfObjectDictionary :_gea ,_daa :=_bd .GetName (_beb .Get ("\u0041\u0053"));
if !_daa {_g .Log .Debug ("\u004e\u006f\u0020\u0041S \u0065\u006e\u0074\u0072\u0079\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067");continue ;};_fc ,_daa =_bd .GetStream (_fbc .Get (*_gea ));if !_daa {_g .Log .Debug ("\u0046o\u0072\u006d\u0020\u006eo\u0074\u0020\u0066\u006f\u0075n\u0064 \u002d \u0073\u006b\u0069\u0070\u0070\u0069\u006eg");
continue ;};case *_bd .PdfObjectStream :_fc =_fbc ;};if _fc ==nil {_g .Log .Debug ("\u0046\u006f\u0072m\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0028n\u0069\u006c\u0029\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067");
continue ;};_cdbce ,_baae :=_ce .NewXObjectFormFromStream (_fc );if _baae !=nil {_g .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020l\u006f\u0061\u0064\u0069\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_baae );
continue ;};_cdbd ,_baae :=_cdbce .GetContentStream ();if _baae !=nil {_g .Log .Debug ("E\u0072\u0072\u006f\u0072\u0020\u0064e\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0063\u006fn\u0074\u0065\u006et\u0073:\u0020\u0025\u0076",_baae );continue ;};_ebg =append (_ebg ,content {_aee :string (_cdbd ),_abb :_cdbce .Resources });
};return _ebg ;};

// Options describes PDF optimization parameters.
type Options struct{CombineDuplicateStreams bool ;CombineDuplicateDirectObjects bool ;ImageUpperPPI float64 ;ImageQuality int ;UseObjectStreams bool ;CombineIdenticalIndirectObjects bool ;CompressStreams bool ;CleanFonts bool ;SubsetFonts bool ;CleanContentstream bool ;
CleanUnusedResources bool ;};

// ObjectStreams groups PDF objects to object streams.
// It implements interface model.Optimizer.
type ObjectStreams struct{};

// New creates a optimizers chain from options.
func New (options Options )*Chain {_bbdc :=new (Chain );if options .CleanFonts ||options .SubsetFonts {_bbdc .Append (&CleanFonts {Subset :options .SubsetFonts });};if options .CleanContentstream {_bbdc .Append (new (CleanContentstream ));};if options .ImageUpperPPI > 0{_cdaf :=new (ImagePPI );
_cdaf .ImageUpperPPI =options .ImageUpperPPI ;_bbdc .Append (_cdaf );};if options .ImageQuality > 0{_gacb :=new (Image );_gacb .ImageQuality =options .ImageQuality ;_bbdc .Append (_gacb );};if options .CombineDuplicateDirectObjects {_bbdc .Append (new (CombineDuplicateDirectObjects ));
};if options .CombineDuplicateStreams {_bbdc .Append (new (CombineDuplicateStreams ));};if options .CombineIdenticalIndirectObjects {_bbdc .Append (new (CombineIdenticalIndirectObjects ));};if options .UseObjectStreams {_bbdc .Append (new (ObjectStreams ));
};if options .CompressStreams {_bbdc .Append (new (CompressStreams ));};if options .CleanUnusedResources {_bbdc .Append (new (CleanUnusedResources ));};return _bbdc ;};type imageModifications struct{Scale float64 ;Encoding _bd .StreamEncoder ;};

// Append appends optimizers to the chain.
func (_fa *Chain )Append (optimizers ..._ce .Optimizer ){_fa ._cc =append (_fa ._cc ,optimizers ...)};func _ffbcb (_bdf *_ce .XObjectImage ,_ffee imageModifications )error {_eddf ,_caea :=_bdf .ToImage ();if _caea !=nil {return _caea ;};if _ffee .Scale !=0{_eddf ,_caea =_fcec (_eddf ,_ffee .Scale );
if _caea !=nil {return _caea ;};};if _ffee .Encoding !=nil {_bdf .Filter =_ffee .Encoding ;};_bdf .Decode =nil ;switch _bcce :=_bdf .Filter .(type ){case *_bd .FlateEncoder :if _bcce .Predictor !=1&&_bcce .Predictor !=11{_bcce .Predictor =1;};};if _caea =_bdf .SetImage (_eddf ,nil );
_caea !=nil {_g .Log .Debug ("\u0045\u0072\u0072or\u0020\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0076",_caea );return _caea ;};_bdf .ToPdfObject ();return nil ;};

// CleanUnusedResources represents an optimizer used to clean unused resources.
type CleanUnusedResources struct{};func _baa (_fgf []_bd .PdfObject )(_aaf map[*_bd .PdfObjectStream ]struct{},_bg error ){_aaf =map[*_bd .PdfObjectStream ]struct{}{};_cab :=map[*_ce .PdfFont ]struct{}{};_dgg :=_fde (_fgf );for _ ,_dbcc :=range _dgg ._abfc {_ecg ,_gdg :=_bd .GetDict (_dbcc .PdfObject );
if !_gdg {continue ;};_ced ,_gdg :=_bd .GetDict (_ecg .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"));if !_gdg {continue ;};_dfa ,_ :=_geaa (_ecg .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));_gaa ,_aad :=_ce .NewPdfPageResourcesFromDict (_ced );
if _aad !=nil {return nil ,_aad ;};_eg :=[]content {{_aee :_dfa ,_abb :_gaa }};_fag :=_ccde (_ecg .Get ("\u0041\u006e\u006e\u006f\u0074\u0073"));if _fag !=nil {_eg =append (_eg ,_fag ...);};for _ ,_aac :=range _eg {_gce ,_eca :=_dg .NewFromContents (_aac ._aee ,_aac ._abb );
if _eca !=nil {return nil ,_eca ;};_ecag ,_ ,_ ,_eca :=_gce .ExtractPageText ();if _eca !=nil {return nil ,_eca ;};for _ ,_ed :=range _ecag .Marks ().Elements (){if _ed .Font ==nil {continue ;};if _ ,_fba :=_cab [_ed .Font ];!_fba {_cab [_ed .Font ]=struct{}{};
};};};};_cf :=map[*_bd .PdfObjectStream ][]*_ce .PdfFont {};for _cff :=range _cab {_fgc :=_cff .FontDescriptor ();if _fgc ==nil ||_fgc .FontFile2 ==nil {continue ;};_ad ,_baab :=_bd .GetStream (_fgc .FontFile2 );if !_baab {continue ;};_cf [_ad ]=append (_cf [_ad ],_cff );
};for _dfc :=range _cf {var _fge []rune ;var _agge []_ab .GlyphIndex ;for _ ,_ffc :=range _cf [_dfc ]{switch _eec :=_ffc .Encoder ().(type ){case *_cad .IdentityEncoder :_agd :=_eec .RegisteredRunes ();_efc :=make ([]_ab .GlyphIndex ,len (_agd ));for _bge ,_gdc :=range _agd {_efc [_bge ]=_ab .GlyphIndex (_gdc );
};_agge =append (_agge ,_efc ...);case *_cad .TrueTypeFontEncoder :_dga :=_eec .RegisteredRunes ();_fge =append (_fge ,_dga ...);case _cad .SimpleEncoder :_ffg :=_eec .Charcodes ();for _ ,_gccf :=range _ffg {_eae ,_feg :=_eec .CharcodeToRune (_gccf );if !_feg {_g .Log .Debug ("\u0043\u0068a\u0072\u0063\u006f\u0064\u0065\u003c\u002d\u003e\u0072\u0075\u006e\u0065\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064: \u0025\u0064",_gccf );
continue ;};_fge =append (_fge ,_eae );};};};_bg =_bec (_dfc ,_fge ,_agge );if _bg !=nil {_g .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020\u0073\u0075\u0062\u0073\u0065\u0074\u0074\u0069\u006eg\u0020f\u006f\u006e\u0074\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u003a\u0020\u0025\u0076",_bg );
return nil ,_bg ;};_aaf [_dfc ]=struct{}{};};return _aaf ,nil ;};func _fcec (_ebef *_ce .Image ,_aff float64 )(*_ce .Image ,error ){_aedd ,_cge :=_ebef .ToGoImage ();if _cge !=nil {return nil ,_cge ;};var _aegb _fb .Image ;_bade ,_cecd :=_aedd .(*_fb .Monochrome );
if _cecd {if _cge =_bade .ResolveDecode ();_cge !=nil {return nil ,_cge ;};_aegb ,_cge =_bade .Scale (_aff );if _cge !=nil {return nil ,_cge ;};}else {_afbd :=int (_c .RoundToEven (float64 (_ebef .Width )*_aff ));_abfe :=int (_c .RoundToEven (float64 (_ebef .Height )*_aff ));
_aegb ,_cge =_fb .NewImage (_afbd ,_abfe ,int (_ebef .BitsPerComponent ),_ebef .ColorComponents ,nil ,nil ,nil );if _cge !=nil {return nil ,_cge ;};_d .CatmullRom .Scale (_aegb ,_aegb .Bounds (),_aedd ,_aedd .Bounds (),_d .Over ,&_d .Options {});};_gdbc :=_aegb .Base ();
_egg :=&_ce .Image {Width :int64 (_gdbc .Width ),Height :int64 (_gdbc .Height ),BitsPerComponent :int64 (_gdbc .BitsPerComponent ),ColorComponents :_gdbc .ColorComponents ,Data :_gdbc .Data };_egg .SetDecode (_gdbc .Decode );_egg .SetAlpha (_gdbc .Alpha );
return _egg ,nil ;};func _bcc (_dbc *_cae .ContentStreamOperations )*_cae .ContentStreamOperations {if _dbc ==nil {return nil ;};_caa :=_cae .ContentStreamOperations {};for _ ,_dc :=range *_dbc {switch _dc .Operand {case "\u0042\u0044\u0043","\u0042\u004d\u0043","\u0045\u004d\u0043":continue ;
case "\u0054\u006d":if len (_dc .Params )==6{if _fg ,_eb :=_bd .GetNumbersAsFloat (_dc .Params );_eb ==nil {if _fg [0]==1&&_fg [1]==0&&_fg [2]==0&&_fg [3]==1{_dc =&_cae .ContentStreamOperation {Params :[]_bd .PdfObject {_dc .Params [4],_dc .Params [5]},Operand :"\u0054\u0064"};
};};};};_caa =append (_caa ,_dc );};return &_caa ;};

// GetOptimizers gets the list of optimizers in chain `c`.
func (_ef *Chain )GetOptimizers ()[]_ce .Optimizer {return _ef ._cc };func _fde (_ddc []_bd .PdfObject )objectStructure {_cdf :=objectStructure {};_ccbag :=false ;for _ ,_deba :=range _ddc {switch _egdg :=_deba .(type ){case *_bd .PdfIndirectObject :_fcbf ,_eddfe :=_bd .GetDict (_egdg );
if !_eddfe {continue ;};_baec ,_eddfe :=_bd .GetName (_fcbf .Get ("\u0054\u0079\u0070\u0065"));if !_eddfe {continue ;};switch _baec .String (){case "\u0043a\u0074\u0061\u006c\u006f\u0067":_cdf ._dbga =_fcbf ;_ccbag =true ;};};if _ccbag {break ;};};if !_ccbag {return _cdf ;
};_fdce ,_ccef :=_bd .GetDict (_cdf ._dbga .Get ("\u0050\u0061\u0067e\u0073"));if !_ccef {return _cdf ;};_cdf ._ccba =_fdce ;_ccfdf ,_ccef :=_bd .GetArray (_fdce .Get ("\u004b\u0069\u0064\u0073"));if !_ccef {return _cdf ;};for _ ,_acd :=range _ccfdf .Elements (){_dggd ,_aegg :=_bd .GetIndirect (_acd );
if !_aegg {break ;};_cdf ._abfc =append (_cdf ._abfc ,_dggd );};return _cdf ;};

// ImagePPI optimizes images by scaling images such that the PPI (pixels per inch) is never higher than ImageUpperPPI.
// TODO(a5i): Add support for inline images.
// It implements interface model.Optimizer.
type ImagePPI struct{ImageUpperPPI float64 ;};

// CombineDuplicateStreams combines duplicated streams by its data hash.
// It implements interface model.Optimizer.
type CombineDuplicateStreams struct{};

// Optimize optimizes PDF objects to decrease PDF size.
func (_aage *Image )Optimize (objects []_bd .PdfObject )(_ccc []_bd .PdfObject ,_aaca error ){if _aage .ImageQuality <=0{return objects ,nil ;};_ggg :=_dgf (objects );if len (_ggg )==0{return objects ,nil ;};_gfgb :=make (map[_bd .PdfObject ]_bd .PdfObject );
_fce :=make (map[_bd .PdfObject ]struct{});for _ ,_ffea :=range _ggg {_fegb :=_ffea .Stream .Get ("\u0053\u004d\u0061s\u006b");_fce [_fegb ]=struct{}{};};for _ageb ,_ebb :=range _ggg {_baad :=_ebb .Stream ;if _ ,_fdg :=_fce [_baad ];_fdg {continue ;};_gac ,_gcbe :=_ce .NewXObjectImageFromStream (_baad );
if _gcbe !=nil {_g .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_gcbe );continue ;};switch _gac .Filter .(type ){case *_bd .JBIG2Encoder :continue ;case *_bd .CCITTFaxEncoder :continue ;};_adea ,_gcbe :=_gac .ToImage ();if _gcbe !=nil {_g .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_gcbe );
continue ;};_dccd :=_bd .NewDCTEncoder ();_dccd .ColorComponents =_adea .ColorComponents ;_dccd .Quality =_aage .ImageQuality ;_dccd .BitsPerComponent =_ebb .BitsPerComponent ;_dccd .Width =_ebb .Width ;_dccd .Height =_ebb .Height ;_ccag ,_gcbe :=_dccd .EncodeBytes (_adea .Data );
if _gcbe !=nil {_g .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_gcbe );continue ;};var _bgf _bd .StreamEncoder ;_bgf =_dccd ;{_ebaf :=_bd .NewFlateEncoder ();_fdc :=_bd .NewMultiEncoder ();_fdc .AddEncoder (_ebaf );_fdc .AddEncoder (_dccd );
_daed ,_dde :=_fdc .EncodeBytes (_adea .Data );if _dde !=nil {_g .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_dde );continue ;};if len (_daed )< len (_ccag ){_g .Log .Trace ("\u004d\u0075\u006c\u0074\u0069\u0020\u0065\u006e\u0063\u0020\u0069\u006d\u0070\u0072\u006f\u0076\u0065\u0073\u003a\u0020\u0025\u0064\u0020\u0074o\u0020\u0025\u0064\u0020\u0028o\u0072\u0069g\u0020\u0025\u0064\u0029",len (_ccag ),len (_daed ),len (_baad .Stream ));
_ccag =_daed ;_bgf =_fdc ;};};_gega :=len (_baad .Stream );if _gega < len (_ccag ){continue ;};_gcgd :=&_bd .PdfObjectStream {Stream :_ccag };_gcgd .PdfObjectReference =_baad .PdfObjectReference ;_gcgd .PdfObjectDictionary =_bd .MakeDict ();_gcgd .Merge (_baad .PdfObjectDictionary );
_gcgd .Merge (_bgf .MakeStreamDict ());_gcgd .Set ("\u004c\u0065\u006e\u0067\u0074\u0068",_bd .MakeInteger (int64 (len (_ccag ))));_gfgb [_baad ]=_gcgd ;_ggg [_ageb ].Stream =_gcgd ;};_ccc =make ([]_bd .PdfObject ,len (objects ));copy (_ccc ,objects );
_cef (_ccc ,_gfgb );return _ccc ,nil ;};type imageInfo struct{BitsPerComponent int ;ColorComponents int ;Width int ;Height int ;Stream *_bd .PdfObjectStream ;PPI float64 ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_dgb *CleanContentstream )Optimize (objects []_bd .PdfObject )(_ae []_bd .PdfObject ,_fe error ){_af :=map[*_bd .PdfObjectStream ]struct{}{};var _abd []*_bd .PdfObjectStream ;_ee :=func (_fac *_bd .PdfObjectStream ){if _ ,_cde :=_af [_fac ];!_cde {_af [_fac ]=struct{}{};
_abd =append (_abd ,_fac );};};_ga :=map[_bd .PdfObject ]bool {};_ag :=map[_bd .PdfObject ]bool {};for _ ,_agg :=range objects {switch _gf :=_agg .(type ){case *_bd .PdfIndirectObject :switch _gbd :=_gf .PdfObject .(type ){case *_bd .PdfObjectDictionary :if _bf ,_ccb :=_bd .GetName (_gbd .Get ("\u0054\u0079\u0070\u0065"));
!_ccb ||_bf .String ()!="\u0050\u0061\u0067\u0065"{continue ;};if _eeb ,_ba :=_bd .GetStream (_gbd .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));_ba {_ee (_eeb );}else if _gbf ,_dce :=_bd .GetArray (_gbd .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));
_dce {var _gcd []*_bd .PdfObjectStream ;for _ ,_afc :=range _gbf .Elements (){if _dgbg ,_abf :=_bd .GetStream (_afc );_abf {_gcd =append (_gcd ,_dgbg );};};if len (_gcd )> 0{var _ge _e .Buffer ;for _ ,_bce :=range _gcd {if _gcc ,_de :=_bd .DecodeStream (_bce );
_de ==nil {_ge .Write (_gcc );};_ga [_bce ]=true ;};_ebc ,_bde :=_bd .MakeStream (_ge .Bytes (),_bd .NewFlateEncoder ());if _bde !=nil {return nil ,_bde ;};_ag [_ebc ]=true ;_gbd .Set ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073",_ebc );_ee (_ebc );
};};};case *_bd .PdfObjectStream :if _ac ,_dge :=_bd .GetName (_gf .Get ("\u0054\u0079\u0070\u0065"));!_dge ||_ac .String ()!="\u0058O\u0062\u006a\u0065\u0063\u0074"{continue ;};if _baf ,_bfe :=_bd .GetName (_gf .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));
!_bfe ||_baf .String ()!="\u0046\u006f\u0072\u006d"{continue ;};_ee (_gf );};};for _ ,_cbf :=range _abd {_fe =_gc (_cbf );if _fe !=nil {return nil ,_fe ;};};_ae =nil ;for _ ,_bdb :=range objects {if _ga [_bdb ]{continue ;};_ae =append (_ae ,_bdb );};for _be :=range _ag {_ae =append (_ae ,_be );
};return _ae ,nil ;};

// CompressStreams compresses uncompressed streams.
// It implements interface model.Optimizer.
type CompressStreams struct{};

// Chain allows to use sequence of optimizers.
// It implements interface model.Optimizer.
type Chain struct{_cc []_ce .Optimizer };

// Optimize optimizes PDF objects to decrease PDF size.
func (_cfb *CombineDuplicateDirectObjects )Optimize (objects []_bd .PdfObject )(_afce []_bd .PdfObject ,_bbg error ){_dcad (objects );_gddf :=make (map[string ][]*_bd .PdfObjectDictionary );var _dbg func (_cbed *_bd .PdfObjectDictionary );_dbg =func (_gdgd *_bd .PdfObjectDictionary ){for _ ,_eaa :=range _gdgd .Keys (){_acb :=_gdgd .Get (_eaa );
if _dcf ,_ffcf :=_acb .(*_bd .PdfObjectDictionary );_ffcf {if _abc :=_dcf .Keys ();len (_abc )==0{continue ;};_aae :=_a .New ();_aae .Write ([]byte (_dcf .WriteString ()));_ggf :=string (_aae .Sum (nil ));_gddf [_ggf ]=append (_gddf [_ggf ],_dcf );_dbg (_dcf );
};};};for _ ,_egd :=range objects {_bag ,_gdf :=_egd .(*_bd .PdfIndirectObject );if !_gdf {continue ;};if _eff ,_gefa :=_bag .PdfObject .(*_bd .PdfObjectDictionary );_gefa {_dbg (_eff );};};_dfdg :=make ([]_bd .PdfObject ,0,len (_gddf ));_abg :=make (map[_bd .PdfObject ]_bd .PdfObject );
for _ ,_bfc :=range _gddf {if len (_bfc )< 2{continue ;};_adc :=_bd .MakeDict ();_adc .Merge (_bfc [0]);_add :=_bd .MakeIndirectObject (_adc );_dfdg =append (_dfdg ,_add );for _dfac :=0;_dfac < len (_bfc );_dfac ++{_effb :=_bfc [_dfac ];_abg [_effb ]=_add ;
};};_afce =make ([]_bd .PdfObject ,len (objects ));copy (_afce ,objects );_afce =append (_dfdg ,_afce ...);_cef (_afce ,_abg );return _afce ,nil ;};

// CombineDuplicateDirectObjects combines duplicated direct objects by its data hash.
// It implements interface model.Optimizer.
type CombineDuplicateDirectObjects struct{};

// Optimize optimizes PDF objects to decrease PDF size.
func (_gfag *CombineIdenticalIndirectObjects )Optimize (objects []_bd .PdfObject )(_aafb []_bd .PdfObject ,_gba error ){_dcad (objects );_bac :=make (map[_bd .PdfObject ]_bd .PdfObject );_ggcf :=make (map[_bd .PdfObject ]struct{});_afga :=make (map[string ][]*_bd .PdfIndirectObject );
for _ ,_bfcb :=range objects {_bafe ,_gadg :=_bfcb .(*_bd .PdfIndirectObject );if !_gadg {continue ;};if _gecd ,_ggdd :=_bafe .PdfObject .(*_bd .PdfObjectDictionary );_ggdd {if _dca ,_fea :=_gecd .Get ("\u0054\u0079\u0070\u0065").(*_bd .PdfObjectName );
_fea &&*_dca =="\u0050\u0061\u0067\u0065"{continue ;};if _cfcd :=_gecd .Keys ();len (_cfcd )==0{continue ;};_dfad :=_a .New ();_dfad .Write ([]byte (_gecd .WriteString ()));_cabgb :=string (_dfad .Sum (nil ));_afga [_cabgb ]=append (_afga [_cabgb ],_bafe );
};};for _ ,_bccaf :=range _afga {if len (_bccaf )< 2{continue ;};_facb :=_bccaf [0];for _fgbg :=1;_fgbg < len (_bccaf );_fgbg ++{_bfce :=_bccaf [_fgbg ];_bac [_bfce ]=_facb ;_ggcf [_bfce ]=struct{}{};};};_aafb =make ([]_bd .PdfObject ,0,len (objects )-len (_ggcf ));
for _ ,_dacc :=range objects {if _ ,_bcf :=_ggcf [_dacc ];_bcf {continue ;};_aafb =append (_aafb ,_dacc );};_cef (_aafb ,_bac );return _aafb ,nil ;};func _dcad (_ecdg []_bd .PdfObject ){for _dgab ,_egef :=range _ecdg {switch _fgeg :=_egef .(type ){case *_bd .PdfIndirectObject :_fgeg .ObjectNumber =int64 (_dgab +1);
_fgeg .GenerationNumber =0;case *_bd .PdfObjectStream :_fgeg .ObjectNumber =int64 (_dgab +1);_fgeg .GenerationNumber =0;case *_bd .PdfObjectStreams :_fgeg .ObjectNumber =int64 (_dgab +1);_fgeg .GenerationNumber =0;};};};

// Optimize optimizes PDF objects to decrease PDF size.
func (_aggb *CompressStreams )Optimize (objects []_bd .PdfObject )(_edf []_bd .PdfObject ,_fcg error ){_edf =make ([]_bd .PdfObject ,len (objects ));copy (_edf ,objects );for _ ,_ffad :=range objects {_cbdg ,_ggb :=_bd .GetStream (_ffad );if !_ggb {continue ;
};if _edeg :=_cbdg .Get ("\u0046\u0069\u006c\u0074\u0065\u0072");_edeg !=nil {if _ ,_fcb :=_bd .GetName (_edeg );_fcb {continue ;};if _ccfa ,_bga :=_bd .GetArray (_edeg );_bga &&_ccfa .Len ()> 0{continue ;};};_egac :=_bd .NewFlateEncoder ();var _bdd []byte ;
_bdd ,_fcg =_egac .EncodeBytes (_cbdg .Stream );if _fcg !=nil {return _edf ,_fcg ;};_ffca :=_egac .MakeStreamDict ();if len (_bdd )+len (_ffca .WriteString ())< len (_cbdg .Stream ){_cbdg .Stream =_bdd ;_cbdg .PdfObjectDictionary .Merge (_ffca );_cbdg .PdfObjectDictionary .Set ("\u004c\u0065\u006e\u0067\u0074\u0068",_bd .MakeInteger (int64 (len (_cbdg .Stream ))));
};};return _edf ,nil ;};func _bgega (_cba *_bd .PdfObjectDictionary )[]string {_caae :=[]string {};for _ ,_ccad :=range _cba .Keys (){_caae =append (_caae ,_ccad .String ());};return _caae ;};func _fgbd (_gcg _bd .PdfObject ,_aeed map[_bd .PdfObject ]struct{})error {if _cac ,_cbe :=_gcg .(*_bd .PdfIndirectObject );
_cbe {_aeed [_gcg ]=struct{}{};_gge :=_fgbd (_cac .PdfObject ,_aeed );if _gge !=nil {return _gge ;};return nil ;};if _dffd ,_bca :=_gcg .(*_bd .PdfObjectStream );_bca {_aeed [_dffd ]=struct{}{};_dgd :=_fgbd (_dffd .PdfObjectDictionary ,_aeed );if _dgd !=nil {return _dgd ;
};return nil ;};if _dfdf ,_geg :=_gcg .(*_bd .PdfObjectDictionary );_geg {for _ ,_dadf :=range _dfdf .Keys (){_afa :=_dfdf .Get (_dadf );_ =_afa ;if _dfe ,_agcb :=_afa .(*_bd .PdfObjectReference );_agcb {_afa =_dfe .Resolve ();_dfdf .Set (_dadf ,_afa );
};if _dadf !="\u0050\u0061\u0072\u0065\u006e\u0074"{if _aga :=_fgbd (_afa ,_aeed );_aga !=nil {return _aga ;};};};return nil ;};if _fd ,_ecac :=_gcg .(*_bd .PdfObjectArray );_ecac {if _fd ==nil {return _b .New ("\u0061\u0072\u0072a\u0079\u0020\u0069\u0073\u0020\u006e\u0069\u006c");
};for _bfg ,_fgag :=range _fd .Elements (){if _acad ,_gdee :=_fgag .(*_bd .PdfObjectReference );_gdee {_fgag =_acad .Resolve ();_fd .Set (_bfg ,_fgag );};if _ffcg :=_fgbd (_fgag ,_aeed );_ffcg !=nil {return _ffcg ;};};return nil ;};return nil ;};

// Image optimizes images by rewrite images into JPEG format with quality equals to ImageQuality.
// TODO(a5i): Add support for inline images.
// It implements interface model.Optimizer.
type Image struct{ImageQuality int ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_fgb *CleanFonts )Optimize (objects []_bd .PdfObject )(_dec []_bd .PdfObject ,_agc error ){var _dcgc map[*_bd .PdfObjectStream ]struct{};if _fgb .Subset {var _ggd error ;_dcgc ,_ggd =_baa (objects );if _ggd !=nil {_g .Log .Debug ("\u0045\u0052\u0052\u004fR\u003a\u0020\u0046\u0061\u0069\u006c\u0065\u0064\u0020\u0073u\u0062s\u0065\u0074\u0074\u0069\u006e\u0067\u003a \u0025\u0076",_ggd );
return nil ,_ggd ;};};for _ ,_ega :=range objects {_cdga ,_fbb :=_bd .GetStream (_ega );if !_fbb {continue ;};if _ ,_bccc :=_dcgc [_cdga ];_bccc {continue ;};_dff ,_cbfg :=_bd .NewEncoderFromStream (_cdga );if _cbfg !=nil {_g .Log .Debug ("\u0045\u0052RO\u0052\u0020\u0067e\u0074\u0074\u0069\u006eg e\u006eco\u0064\u0065\u0072\u003a\u0020\u0025\u0076 -\u0020\u0069\u0067\u006e\u006f\u0072\u0069n\u0067",_cbfg );
continue ;};_eac ,_cbfg :=_dff .DecodeStream (_cdga );if _cbfg !=nil {_g .Log .Debug ("\u0044\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0065r\u0072\u006f\u0072\u0020\u003a\u0020\u0025v\u0020\u002d\u0020\u0069\u0067\u006e\u006f\u0072\u0069\u006e\u0067",_cbfg );
continue ;};if len (_eac )< 4{continue ;};_dd :=string (_eac [:4]);if _dd =="\u004f\u0054\u0054\u004f"{continue ;};if _dd !="\u0000\u0001\u0000\u0000"&&_dd !="\u0074\u0072\u0075\u0065"{continue ;};_gad ,_cbfg :=_ab .Parse (_e .NewReader (_eac ));if _cbfg !=nil {_g .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020P\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_cbfg );
continue ;};_cbfg =_gad .Optimize ();if _cbfg !=nil {_g .Log .Debug ("\u0045\u0052RO\u0052\u0020\u004fp\u0074\u0069\u006d\u0069zin\u0067 f\u006f\u006e\u0074\u003a\u0020\u0025\u0076 -\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067",_cbfg );continue ;};
var _bcca _e .Buffer ;_cbfg =_gad .Write (&_bcca );if _cbfg !=nil {_g .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020W\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_cbfg );
continue ;};if _bcca .Len ()> len (_eac ){_g .Log .Debug ("\u0052\u0065-\u0077\u0072\u0069\u0074\u0074\u0065\u006e\u0020\u0066\u006f\u006e\u0074\u0020\u0069\u0073\u0020\u006c\u0061\u0072\u0067\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u002d\u0020\u0073\u006b\u0069\u0070");
continue ;};_efd ,_cbfg :=_bd .MakeStream (_bcca .Bytes (),_bd .NewFlateEncoder ());if _cbfg !=nil {continue ;};*_cdga =*_efd ;_cdga .Set ("\u004ce\u006e\u0067\u0074\u0068\u0031",_bd .MakeInteger (int64 (_bcca .Len ())));};return objects ,nil ;};

// CleanFonts cleans up embedded fonts, reducing font sizes.
type CleanFonts struct{

// Subset embedded fonts if encountered (if true).
// Otherwise attempts to reduce the font program.
Subset bool ;};func _geaa (_daedf _bd .PdfObject )(_cdaff string ,_bcb []_bd .PdfObject ){var _bfed _e .Buffer ;switch _ecc :=_daedf .(type ){case *_bd .PdfIndirectObject :_bcb =append (_bcb ,_ecc );_daedf =_ecc .PdfObject ;};switch _eeae :=_daedf .(type ){case *_bd .PdfObjectStream :if _cfd ,_gceb :=_bd .DecodeStream (_eeae );
_gceb ==nil {_bfed .Write (_cfd );_bcb =append (_bcb ,_eeae );};case *_bd .PdfObjectArray :for _ ,_bbe :=range _eeae .Elements (){switch _dfaf :=_bbe .(type ){case *_bd .PdfObjectStream :if _adfg ,_aagee :=_bd .DecodeStream (_dfaf );_aagee ==nil {_bfed .Write (_adfg );
_bcb =append (_bcb ,_dfaf );};};};};return _bfed .String (),_bcb ;};func _bec (_da *_bd .PdfObjectStream ,_gbc []rune ,_fed []_ab .GlyphIndex )error {_da ,_afd :=_bd .GetStream (_da );if !_afd {_g .Log .Debug ("\u0045\u006d\u0062\u0065\u0064\u0064\u0065\u0064\u0020\u0066\u006f\u006e\u0074\u0020\u006f\u0062\u006a\u0065c\u0074\u0020\u006e\u006f\u0074\u0020\u0066o\u0075\u006e\u0064\u0020\u002d\u002d\u0020\u0041\u0042\u004f\u0052T\u0020\u0073\u0075\u0062\u0073\u0065\u0074\u0074\u0069\u006e\u0067");
return _b .New ("\u0066\u006f\u006e\u0074fi\u006c\u0065\u0032\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_ceg ,_adg :=_bd .DecodeStream (_da );if _adg !=nil {_g .Log .Debug ("\u0044\u0065c\u006f\u0064\u0065 \u0065\u0072\u0072\u006f\u0072\u003a\u0020\u0025\u0076",_adg );
return _adg ;};_cdg ,_adg :=_ab .Parse (_e .NewReader (_ceg ));if _adg !=nil {_g .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0070\u0061\u0072\u0073\u0069n\u0067\u0020\u0025\u0064\u0020\u0062\u0079\u0074\u0065\u0020f\u006f\u006e\u0074",len (_da .Stream ));
return _adg ;};_dac :=_fed ;if len (_gbc )> 0{_gde :=_cdg .LookupRunes (_gbc );_dac =append (_dac ,_gde ...);};_cdg ,_adg =_cdg .SubsetKeepIndices (_dac );if _adg !=nil {_g .Log .Debug ("\u0045R\u0052\u004f\u0052\u0020s\u0075\u0062\u0073\u0065\u0074t\u0069n\u0067 \u0066\u006f\u006e\u0074\u003a\u0020\u0025v",_adg );
return _adg ;};var _gdb _e .Buffer ;_adg =_cdg .Write (&_gdb );if _adg !=nil {_g .Log .Debug ("\u0045\u0052\u0052\u004fR \u0057\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076",_adg );return _adg ;};if _gdb .Len ()> len (_ceg ){_g .Log .Debug ("\u0052\u0065-\u0077\u0072\u0069\u0074\u0074\u0065\u006e\u0020\u0066\u006f\u006e\u0074\u0020\u0069\u0073\u0020\u006c\u0061\u0072\u0067\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u002d\u0020\u0073\u006b\u0069\u0070");
return nil ;};_fga ,_adg :=_bd .MakeStream (_gdb .Bytes (),_bd .NewFlateEncoder ());if _adg !=nil {_g .Log .Debug ("\u0045\u0052\u0052\u004fR \u0057\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076",_adg );return _adg ;
};*_da =*_fga ;_da .Set ("\u004ce\u006e\u0067\u0074\u0068\u0031",_bd .MakeInteger (int64 (_gdb .Len ())));return nil ;};func _cef (_eaeb []_bd .PdfObject ,_deb map[_bd .PdfObject ]_bd .PdfObject ){if len (_deb )==0{return ;};for _ddb ,_fcd :=range _eaeb {if _bccb ,_ddd :=_deb [_fcd ];
_ddd {_eaeb [_ddb ]=_bccb ;continue ;};_deb [_fcd ]=_fcd ;switch _bgef :=_fcd .(type ){case *_bd .PdfObjectArray :_ecbg :=make ([]_bd .PdfObject ,_bgef .Len ());copy (_ecbg ,_bgef .Elements ());_cef (_ecbg ,_deb );for _ggde ,_fff :=range _ecbg {_bgef .Set (_ggde ,_fff );
};case *_bd .PdfObjectStreams :_cef (_bgef .Elements (),_deb );case *_bd .PdfObjectStream :_fcdb :=[]_bd .PdfObject {_bgef .PdfObjectDictionary };_cef (_fcdb ,_deb );_bgef .PdfObjectDictionary =_fcdb [0].(*_bd .PdfObjectDictionary );case *_bd .PdfObjectDictionary :_ebca :=_bgef .Keys ();
_beg :=make ([]_bd .PdfObject ,len (_ebca ));for _aeb ,_dagg :=range _ebca {_beg [_aeb ]=_bgef .Get (_dagg );};_cef (_beg ,_deb );for _aeec ,_abgf :=range _ebca {_bgef .Set (_abgf ,_beg [_aeec ]);};case *_bd .PdfIndirectObject :_gbeg :=[]_bd .PdfObject {_bgef .PdfObject };
_cef (_gbeg ,_deb );_bgef .PdfObject =_gbeg [0];};};};

// Optimize optimizes PDF objects to decrease PDF size.
func (_dfdc *ImagePPI )Optimize (objects []_bd .PdfObject )(_bbb []_bd .PdfObject ,_dfdfg error ){if _dfdc .ImageUpperPPI <=0{return objects ,nil ;};_bbf :=_dgf (objects );if len (_bbf )==0{return objects ,nil ;};_cdc :=make (map[_bd .PdfObject ]struct{});
for _ ,_dgdd :=range _bbf {_dgdf :=_dgdd .Stream .PdfObjectDictionary .Get ("\u0053\u004d\u0061s\u006b");_cdc [_dgdf ]=struct{}{};};_bcab :=make (map[*_bd .PdfObjectStream ]*imageInfo );for _ ,_fgce :=range _bbf {_bcab [_fgce .Stream ]=_fgce ;};var _becc *_bd .PdfObjectDictionary ;
for _ ,_baadf :=range objects {if _ceeb ,_cfce :=_bd .GetDict (_baadf );_becc ==nil &&_cfce {if _face ,_cbab :=_bd .GetName (_ceeb .Get ("\u0054\u0079\u0070\u0065"));_cbab &&*_face =="\u0043a\u0074\u0061\u006c\u006f\u0067"{_becc =_ceeb ;};};};if _becc ==nil {return objects ,nil ;
};_ged ,_ccec :=_bd .GetDict (_becc .Get ("\u0050\u0061\u0067e\u0073"));if !_ccec {return objects ,nil ;};_bdcb ,_ffef :=_bd .GetArray (_ged .Get ("\u004b\u0069\u0064\u0073"));if !_ffef {return objects ,nil ;};for _ ,_gadd :=range _bdcb .Elements (){_egf :=make (map[string ]*imageInfo );
_bgfg ,_ggfd :=_bd .GetDict (_gadd );if !_ggfd {continue ;};_ccg ,_ :=_geaa (_bgfg .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));if len (_ccg )==0{continue ;};_baef ,_abdfg :=_bd .GetDict (_bgfg .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"));
if !_abdfg {continue ;};_gdeb ,_acaa :=_ce .NewPdfPageResourcesFromDict (_baef );if _acaa !=nil {_g .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0072\u0065\u0073\u006f\u0075\u0072\u0063\u0065\u0073\u0020-\u0020\u0069\u0067\u006e\u006fr\u0069\u006eg\u003a\u0020\u0025\u0076",_acaa );
continue ;};_fcgd ,_afbf :=_bd .GetDict (_baef .Get ("\u0058O\u0062\u006a\u0065\u0063\u0074"));if !_afbf {continue ;};_aea :=_fcgd .Keys ();for _ ,_cbb :=range _aea {if _gae ,_bfgc :=_bd .GetStream (_fcgd .Get (_cbb ));_bfgc {if _faff ,_dfde :=_bcab [_gae ];
_dfde {_egf [string (_cbb )]=_faff ;};};};_dafd :=_cae .NewContentStreamParser (_ccg );_dgbge ,_acaa :=_dafd .Parse ();if _acaa !=nil {_g .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_acaa );continue ;};_efed :=_cae .NewContentStreamProcessor (*_dgbge );
_efed .AddHandler (_cae .HandlerConditionEnumAllOperands ,"",func (_deg *_cae .ContentStreamOperation ,_aagc _cae .GraphicsState ,_aafd *_ce .PdfPageResources )error {switch _deg .Operand {case "\u0044\u006f":if len (_deg .Params )!=1{_g .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020\u0049\u0067\u006e\u006f\u0072\u0069\u006e\u0067\u0020\u0044\u006f\u0020w\u0069\u0074\u0068\u0020\u006c\u0065\u006e\u0028\u0070\u0061ra\u006d\u0073\u0029 \u0021=\u0020\u0031");
return nil ;};_ggag ,_edag :=_bd .GetName (_deg .Params [0]);if !_edag {_g .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0049\u0067\u006e\u006f\u0072\u0069\u006e\u0067\u0020\u0044\u006f\u0020\u0077\u0069\u0074\u0068\u0020\u006e\u006f\u006e\u0020\u004e\u0061\u006d\u0065\u0020p\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072");
return nil ;};if _gfbg ,_eagg :=_egf [string (*_ggag )];_eagg {_ebefd :=_aagc .CTM .ScalingFactorX ();_gceg :=_aagc .CTM .ScalingFactorY ();_bcda ,_cda :=_ebefd /72.0,_gceg /72.0;_becd ,_eaad :=float64 (_gfbg .Width )/_bcda ,float64 (_gfbg .Height )/_cda ;
if _bcda ==0||_cda ==0{_becd =72.0;_eaad =72.0;};_gfbg .PPI =_c .Max (_gfbg .PPI ,_becd );_gfbg .PPI =_c .Max (_gfbg .PPI ,_eaad );};};return nil ;});_acaa =_efed .Process (_gdeb );if _acaa !=nil {_g .Log .Debug ("E\u0052\u0052\u004f\u0052 p\u0072o\u0063\u0065\u0073\u0073\u0069n\u0067\u003a\u0020\u0025\u002b\u0076",_acaa );
continue ;};};for _ ,_bgd :=range _bbf {if _ ,_gbfe :=_cdc [_bgd .Stream ];_gbfe {continue ;};if _bgd .PPI <=_dfdc .ImageUpperPPI {continue ;};_dfeg ,_acgg :=_ce .NewXObjectImageFromStream (_bgd .Stream );if _acgg !=nil {_g .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_acgg );
continue ;};var _ecb imageModifications ;_ecb .Scale =_dfdc .ImageUpperPPI /_bgd .PPI ;if _bgd .BitsPerComponent ==1&&_bgd .ColorComponents ==1{_dcgff :=_c .Round (_bgd .PPI /_dfdc .ImageUpperPPI );_ebeg :=_fb .NextPowerOf2 (uint (_dcgff ));if _fb .InDelta (float64 (_ebeg ),1/_ecb .Scale ,0.3){_ecb .Scale =float64 (1)/float64 (_ebeg );
};if _ ,_gegae :=_dfeg .Filter .(*_bd .JBIG2Encoder );!_gegae {_ecb .Encoding =_bd .NewJBIG2Encoder ();};};if _acgg =_ffbcb (_dfeg ,_ecb );_acgg !=nil {_g .Log .Debug ("\u0045\u0072\u0072\u006f\u0072 \u0073\u0063\u0061\u006c\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u006be\u0065\u0070\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0073",_acgg );
continue ;};_ecb .Encoding =nil ;if _eaf ,_bfcf :=_bd .GetStream (_bgd .Stream .PdfObjectDictionary .Get ("\u0053\u004d\u0061s\u006b"));_bfcf {_ead ,_gda :=_ce .NewXObjectImageFromStream (_eaf );if _gda !=nil {_g .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_gda );
continue ;};if _gda =_ffbcb (_ead ,_ecb );_gda !=nil {_g .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_gda );continue ;};};};return objects ,nil ;};

// CleanContentstream cleans up redundant operands in content streams, including Page and XObject Form
// contents. This process includes:
// 1. Marked content operators are removed.
// 2. Some operands are simplified (shorter form).
// TODO: Add more reduction methods and improving the methods for identifying unnecessary operands.
type CleanContentstream struct{};

// Optimize optimizes PDF objects to decrease PDF size.
func (_gg *Chain )Optimize (objects []_bd .PdfObject )(_gd []_bd .PdfObject ,_aa error ){_cd :=objects ;for _ ,_df :=range _gg ._cc {_cb ,_bc :=_df .Optimize (_cd );if _bc !=nil {_g .Log .Debug ("\u0045\u0052\u0052OR\u0020\u004f\u0070\u0074\u0069\u006d\u0069\u007a\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u002b\u0076",_bc );
continue ;};_cd =_cb ;};return _cd ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_cfga *ObjectStreams )Optimize (objects []_bd .PdfObject )(_cea []_bd .PdfObject ,_ecaf error ){_fabc :=&_bd .PdfObjectStreams {};_gbfb :=make ([]_bd .PdfObject ,0,len (objects ));for _ ,_bff :=range objects {if _cedg ,_agb :=_bff .(*_bd .PdfIndirectObject );
_agb &&_cedg .GenerationNumber ==0{_fabc .Append (_bff );}else {_gbfb =append (_gbfb ,_bff );};};if _fabc .Len ()==0{return _gbfb ,nil ;};_cea =make ([]_bd .PdfObject ,0,len (_gbfb )+_fabc .Len ()+1);if _fabc .Len ()> 1{_cea =append (_cea ,_fabc );};_cea =append (_cea ,_fabc .Elements ()...);
_cea =append (_cea ,_gbfb ...);return _cea ,nil ;};type objectStructure struct{_dbga *_bd .PdfObjectDictionary ;_ccba *_bd .PdfObjectDictionary ;_abfc []*_bd .PdfIndirectObject ;};func _cffe (_cdgg _bd .PdfObject )(string ,error ){_dfcb :=_bd .TraceToDirectObject (_cdgg );
switch _aada :=_dfcb .(type ){case *_bd .PdfObjectString :return _aada .Str (),nil ;case *_bd .PdfObjectStream :_efcd ,_ccee :=_bd .DecodeStream (_aada );if _ccee !=nil {return "",_ccee ;};return string (_efcd ),nil ;};return "",_db .Errorf ("\u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u0063\u006f\u006e\u0074\u0065\u006e\u0074\u0020\u0073\u0074\u0072e\u0061\u006d\u0020\u006f\u0062\u006a\u0065\u0063\u0074\u0020\u0068\u006f\u006c\u0064\u0065\u0072\u0020\u0028\u0025\u0054\u0029",_dfcb );
};

// Optimize optimizes PDF objects to decrease PDF size.
func (_gfe *CombineDuplicateStreams )Optimize (objects []_bd .PdfObject )(_cffc []_bd .PdfObject ,_efff error ){_ecf :=make (map[_bd .PdfObject ]_bd .PdfObject );_ccfd :=make (map[_bd .PdfObject ]struct{});_ece :=make (map[string ][]*_bd .PdfObjectStream );
for _ ,_edc :=range objects {if _ggeb ,_cfcc :=_edc .(*_bd .PdfObjectStream );_cfcc {_gga :=_a .New ();_gga .Write (_ggeb .Stream );_gga .Write ([]byte (_ggeb .PdfObjectDictionary .WriteString ()));_faef :=string (_gga .Sum (nil ));_ece [_faef ]=append (_ece [_faef ],_ggeb );
};};for _ ,_aec :=range _ece {if len (_aec )< 2{continue ;};_daaf :=_aec [0];for _aaa :=1;_aaa < len (_aec );_aaa ++{_dcd :=_aec [_aaa ];_ecf [_dcd ]=_daaf ;_ccfd [_dcd ]=struct{}{};};};_cffc =make ([]_bd .PdfObject ,0,len (objects )-len (_ccfd ));for _ ,_bcdc :=range objects {if _ ,_cdgc :=_ccfd [_bcdc ];
_cdgc {continue ;};_cffc =append (_cffc ,_bcdc );};_cef (_cffc ,_ecf );return _cffc ,nil ;};func _agca (_abdf []*_bd .PdfIndirectObject )map[string ][]string {_aca :=map[string ][]string {};for _ ,_aeea :=range _abdf {_daf ,_cece :=_bd .GetDict (_aeea .PdfObject );
if !_cece {continue ;};_gbgf :=_daf .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073");_dgc :=_bd .TraceToDirectObject (_gbgf );_bad :="";if _bae ,_fec :=_dgc .(*_bd .PdfObjectArray );_fec {var _eeca []string ;for _ ,_gec :=range _bae .Elements (){_edd ,_dab :=_cffe (_gec );
if _dab !=nil {continue ;};_eeca =append (_eeca ,_edd );};_bad =_ca .Join (_eeca ,"\u0020");};if _dcgd ,_aeg :=_dgc .(*_bd .PdfObjectStream );_aeg {_agf ,_ddf :=_bd .DecodeStream (_dcgd );if _ddf !=nil {continue ;};_bad =string (_agf );};_bba :=_cae .NewContentStreamParser (_bad );
_bbc ,_ede :=_bba .Parse ();if _ede !=nil {continue ;};for _ ,_bcgf :=range *_bbc {_fbf :=_bcgf .Operand ;_baaf :=_bcgf .Params ;switch _fbf {case "\u0044\u006f":_aded :=_baaf [0].String ();if _ ,_cee :=_aca ["\u0058O\u0062\u006a\u0065\u0063\u0074"];!_cee {_aca ["\u0058O\u0062\u006a\u0065\u0063\u0074"]=[]string {_aded };
}else {_aca ["\u0058O\u0062\u006a\u0065\u0063\u0074"]=append (_aca ["\u0058O\u0062\u006a\u0065\u0063\u0074"],_aded );};case "\u0054\u0066":_febf :=_baaf [0].String ();if _ ,_gfa :=_aca ["\u0046\u006f\u006e\u0074"];!_gfa {_aca ["\u0046\u006f\u006e\u0074"]=[]string {_febf };
}else {_aca ["\u0046\u006f\u006e\u0074"]=append (_aca ["\u0046\u006f\u006e\u0074"],_febf );};case "\u0067\u0073":_cfg :=_baaf [0].String ();if _ ,_cabc :=_aca ["\u0045x\u0074\u0047\u0053\u0074\u0061\u0074e"];!_cabc {_aca ["\u0045x\u0074\u0047\u0053\u0074\u0061\u0074e"]=[]string {_cfg };
}else {_aca ["\u0045x\u0074\u0047\u0053\u0074\u0061\u0074e"]=append (_aca ["\u0045x\u0074\u0047\u0053\u0074\u0061\u0074e"],_cfg );};};};};return _aca ;};func _dgf (_dbda []_bd .PdfObject )[]*imageInfo {_cdbb :=_bd .PdfObjectName ("\u0053u\u0062\u0074\u0079\u0070\u0065");
_fdf :=make (map[*_bd .PdfObjectStream ]struct{});var _ffe []*imageInfo ;for _ ,_bdc :=range _dbda {_cecc ,_cga :=_bd .GetStream (_bdc );if !_cga {continue ;};if _ ,_dfcd :=_fdf [_cecc ];_dfcd {continue ;};_fdf [_cecc ]=struct{}{};_efecf :=_cecc .PdfObjectDictionary .Get (_cdbb );
_aaag ,_cga :=_bd .GetName (_efecf );if !_cga ||string (*_aaag )!="\u0049\u006d\u0061g\u0065"{continue ;};_fecd :=&imageInfo {Stream :_cecc ,BitsPerComponent :8};if _facbe ,_aaeg :=_bd .GetIntVal (_cecc .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074"));
_aaeg {_fecd .BitsPerComponent =_facbe ;};if _aag ,_fgba :=_bd .GetIntVal (_cecc .Get ("\u0057\u0069\u0064t\u0068"));_fgba {_fecd .Width =_aag ;};if _fafc ,_gab :=_bd .GetIntVal (_cecc .Get ("\u0048\u0065\u0069\u0067\u0068\u0074"));_gab {_fecd .Height =_fafc ;
};_dcgf ,_gfgf :=_ce .NewPdfColorspaceFromPdfObject (_cecc .Get ("\u0043\u006f\u006c\u006f\u0072\u0053\u0070\u0061\u0063\u0065"));if _gfgf !=nil {_g .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_gfgf );continue ;};if _dcgf ==nil {_bfaa ,_ebgc :=_bd .GetName (_cecc .Get ("\u0046\u0069\u006c\u0074\u0065\u0072"));
if _ebgc {switch _bfaa .String (){case "\u0043\u0043\u0049\u0054\u0054\u0046\u0061\u0078\u0044e\u0063\u006f\u0064\u0065","J\u0042\u0049\u0047\u0032\u0044\u0065\u0063\u006f\u0064\u0065":_dcgf =_ce .NewPdfColorspaceDeviceGray ();_fecd .BitsPerComponent =1;
};};};switch _febb :=_dcgf .(type ){case *_ce .PdfColorspaceDeviceRGB :_fecd .ColorComponents =3;case *_ce .PdfColorspaceDeviceGray :_fecd .ColorComponents =1;default:_g .Log .Debug ("\u004f\u0070\u0074\u0069\u006d\u0069\u007aa\u0074\u0069\u006fn\u0020\u0069\u0073 \u006e\u006ft\u0020\u0073\u0075\u0070\u0070\u006fr\u0074ed\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u0025\u0054\u0020\u002d\u0020\u0073\u006b\u0069\u0070",_febb );
continue ;};_ffe =append (_ffe ,_fecd );};return _ffe ;};

// Optimize implements Optimizer interface.
func (_cfc *CleanUnusedResources )Optimize (objects []_bd .PdfObject )(_feb []_bd .PdfObject ,_ccbc error ){_cec ,_ccbc :=_ege (objects );if _ccbc !=nil {return nil ,_ccbc ;};_cce :=[]_bd .PdfObject {};for _ ,_ccf :=range objects {_ ,_bda :=_cec [_ccf ];
if _bda {continue ;};_cce =append (_cce ,_ccf );};return _cce ,nil ;};type content struct{_aee string ;_abb *_ce .PdfPageResources ;};

// CombineIdenticalIndirectObjects combines identical indirect objects.
// It implements interface model.Optimizer.
type CombineIdenticalIndirectObjects struct{};func _gc (_ec *_bd .PdfObjectStream )error {_gb ,_ccd :=_bd .DecodeStream (_ec );if _ccd !=nil {return _ccd ;};_cdb :=_cae .NewContentStreamParser (string (_gb ));_dcg ,_ccd :=_cdb .Parse ();if _ccd !=nil {return _ccd ;
};_dcg =_bcc (_dcg );_ebe :=_dcg .Bytes ();if len (_ebe )>=len (_gb ){return nil ;};_ea ,_ccd :=_bd .MakeStream (_dcg .Bytes (),_bd .NewFlateEncoder ());if _ccd !=nil {return _ccd ;};_ec .Stream =_ea .Stream ;_ec .Merge (_ea .PdfObjectDictionary );return nil ;
};