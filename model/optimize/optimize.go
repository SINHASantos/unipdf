//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package optimize ;import (_fg "bytes";_ga "crypto/md5";_b "errors";_d "fmt";_f "github.com/unidoc/unipdf/v4/common";_bf "github.com/unidoc/unipdf/v4/contentstream";_gfg "github.com/unidoc/unipdf/v4/core";_fa "github.com/unidoc/unipdf/v4/extractor";_fe "github.com/unidoc/unipdf/v4/internal/imageutil";
_e "github.com/unidoc/unipdf/v4/internal/textencoding";_fb "github.com/unidoc/unipdf/v4/model";_ac "github.com/unidoc/unitype";_ad "golang.org/x/image/draw";_g "math";_gf "strings";);type imageModifications struct{Scale float64 ;Encoding _gfg .StreamEncoder ;
};

// Optimize optimizes PDF objects to decrease PDF size.
func (_dagg *ObjectStreams )Optimize (objects []_gfg .PdfObject )(_aee []_gfg .PdfObject ,_cfga error ){_gccb :=&_gfg .PdfObjectStreams {};_geee :=make ([]_gfg .PdfObject ,0,len (objects ));for _ ,_dgef :=range objects {if _beg ,_gbag :=_dgef .(*_gfg .PdfIndirectObject );
_gbag &&_beg .GenerationNumber ==0{_gccb .Append (_dgef );}else {_geee =append (_geee ,_dgef );};};if _gccb .Len ()==0{return _geee ,nil ;};_aee =make ([]_gfg .PdfObject ,0,len (_geee )+_gccb .Len ()+1);if _gccb .Len ()> 1{_aee =append (_aee ,_gccb );};
_aee =append (_aee ,_gccb .Elements ()...);_aee =append (_aee ,_geee ...);return _aee ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_agaf *CombineIdenticalIndirectObjects )Optimize (objects []_gfg .PdfObject )(_acc []_gfg .PdfObject ,_bfed error ){_eeb (objects );_afedd :=make (map[_gfg .PdfObject ]_gfg .PdfObject );_ded :=make (map[_gfg .PdfObject ]struct{});_cbfe :=make (map[string ][]*_gfg .PdfIndirectObject );
for _ ,_adb :=range objects {_cdec ,_ege :=_adb .(*_gfg .PdfIndirectObject );if !_ege {continue ;};if _fge ,_caa :=_cdec .PdfObject .(*_gfg .PdfObjectDictionary );_caa {if _dcfa ,_ecc :=_fge .Get ("\u0054\u0079\u0070\u0065").(*_gfg .PdfObjectName );_ecc &&*_dcfa =="\u0050\u0061\u0067\u0065"{continue ;
};if _efd :=_fge .Keys ();len (_efd )==0{continue ;};_caaa :=_ga .New ();_caaa .Write (_fge .Write ());_fbce :=string (_caaa .Sum (nil ));_cbfe [_fbce ]=append (_cbfe [_fbce ],_cdec );};};for _ ,_fgg :=range _cbfe {if len (_fgg )< 2{continue ;};_afca :=_fgg [0];
for _cffc :=1;_cffc < len (_fgg );_cffc ++{_gaaf :=_fgg [_cffc ];_afedd [_gaaf ]=_afca ;_ded [_gaaf ]=struct{}{};};};_acc =make ([]_gfg .PdfObject ,0,len (objects )-len (_ded ));for _ ,_efcf :=range objects {if _ ,_ggga :=_ded [_efcf ];_ggga {continue ;
};_acc =append (_acc ,_efcf );};_gea (_acc ,_afedd );return _acc ,nil ;};

// CleanUnusedResources represents an optimizer used to clean unused resources.
type CleanUnusedResources struct{};type objectStructure struct{_ebe *_gfg .PdfObjectDictionary ;_cfgf *_gfg .PdfObjectDictionary ;_dafd []*_gfg .PdfIndirectObject ;};

// CleanContentstream cleans up redundant operands in content streams, including Page and XObject Form
// contents. This process includes:
// 1. Marked content operators are removed.
// 2. Some operands are simplified (shorter form).
// TODO: Add more reduction methods and improving the methods for identifying unnecessary operands.
type CleanContentstream struct{};func _fbfa (_caf string ,_ebd []string )bool {for _ ,_bgc :=range _ebd {if _caf ==_bgc {return true ;};};return false ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_eadc *Image )Optimize (objects []_gfg .PdfObject )(_gcdg []_gfg .PdfObject ,_agad error ){if _eadc .ImageQuality <=0{return objects ,nil ;};_abb :=_ecfd (objects );if len (_abb )==0{return objects ,nil ;};_gde :=make (map[_gfg .PdfObject ]_gfg .PdfObject );
_bcdf :=make (map[_gfg .PdfObject ]struct{});for _ ,_eeg :=range _abb {_dfbf :=_eeg .Stream .Get ("\u0053\u004d\u0061s\u006b");_bcdf [_dfbf ]=struct{}{};};for _cgaf ,_gdec :=range _abb {_acbg :=_gdec .Stream ;if _ ,_defad :=_bcdf [_acbg ];_defad {continue ;
};_gfb ,_agfa :=_fb .NewXObjectImageFromStream (_acbg );if _agfa !=nil {_f .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_agfa );continue ;};switch _gfb .Filter .(type ){case *_gfg .JBIG2Encoder :continue ;case *_gfg .CCITTFaxEncoder :continue ;
};_bdba ,_agfa :=_gfb .ToImage ();if _agfa !=nil {_f .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_agfa );continue ;};_aae :=_gfg .NewDCTEncoder ();_aae .ColorComponents =_bdba .ColorComponents ;_aae .Quality =_eadc .ImageQuality ;
_aae .BitsPerComponent =_gdec .BitsPerComponent ;_aae .Width =_gdec .Width ;_aae .Height =_gdec .Height ;_bcab ,_agfa :=_aae .EncodeBytes (_bdba .Data );if _agfa !=nil {_f .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_agfa );
continue ;};var _febf _gfg .StreamEncoder ;_febf =_aae ;{_gbb :=_gfg .NewFlateEncoder ();_ece :=_gfg .NewMultiEncoder ();_ece .AddEncoder (_gbb );_ece .AddEncoder (_aae );_debgg ,_bcc :=_ece .EncodeBytes (_bdba .Data );if _bcc !=nil {_f .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_bcc );
continue ;};if len (_debgg )< len (_bcab ){_f .Log .Trace ("\u004d\u0075\u006c\u0074\u0069\u0020\u0065\u006e\u0063\u0020\u0069\u006d\u0070\u0072\u006f\u0076\u0065\u0073\u003a\u0020\u0025\u0064\u0020\u0074o\u0020\u0025\u0064\u0020\u0028o\u0072\u0069g\u0020\u0025\u0064\u0029",len (_bcab ),len (_debgg ),len (_acbg .Stream ));
_bcab =_debgg ;_febf =_ece ;};};_fbcf :=len (_acbg .Stream );if _fbcf < len (_bcab ){continue ;};_ffed :=&_gfg .PdfObjectStream {Stream :_bcab };_ffed .PdfObjectReference =_acbg .PdfObjectReference ;_ffed .PdfObjectDictionary =_gfg .MakeDict ();_ffed .Merge (_acbg .PdfObjectDictionary );
_ffed .Merge (_febf .MakeStreamDict ());_ffed .Set ("\u004c\u0065\u006e\u0067\u0074\u0068",_gfg .MakeInteger (int64 (len (_bcab ))));_gde [_acbg ]=_ffed ;_abb [_cgaf ].Stream =_ffed ;};_gcdg =make ([]_gfg .PdfObject ,len (objects ));copy (_gcdg ,objects );
_gea (_gcdg ,_gde );return _gcdg ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_dage *CleanFonts )Optimize (objects []_gfg .PdfObject )(_ef []_gfg .PdfObject ,_gee error ){var _ecb map[*_gfg .PdfObjectStream ]struct{};if _dage .Subset {var _dfg error ;_ecb ,_dfg =_dda (objects );if _dfg !=nil {_f .Log .Debug ("\u0045\u0052\u0052\u004fR\u003a\u0020\u0046\u0061\u0069\u006c\u0065\u0064\u0020\u0073u\u0062s\u0065\u0074\u0074\u0069\u006e\u0067\u003a \u0025\u0076",_dfg );
return nil ,_dfg ;};};for _ ,_beae :=range objects {_bfc ,_gfda :=_gfg .GetStream (_beae );if !_gfda {continue ;};if _ ,_cba :=_ecb [_bfc ];_cba {continue ;};_bcd ,_cae :=_gfg .NewEncoderFromStream (_bfc );if _cae !=nil {_f .Log .Debug ("\u0045\u0052RO\u0052\u0020\u0067e\u0074\u0074\u0069\u006eg e\u006eco\u0064\u0065\u0072\u003a\u0020\u0025\u0076 -\u0020\u0069\u0067\u006e\u006f\u0072\u0069n\u0067",_cae );
continue ;};_bfcc ,_cae :=_bcd .DecodeStream (_bfc );if _cae !=nil {_f .Log .Debug ("\u0044\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0065r\u0072\u006f\u0072\u0020\u003a\u0020\u0025v\u0020\u002d\u0020\u0069\u0067\u006e\u006f\u0072\u0069\u006e\u0067",_cae );
continue ;};if len (_bfcc )< 4{continue ;};_ced :=string (_bfcc [:4]);if _ced =="\u004f\u0054\u0054\u004f"{continue ;};if _ced !="\u0000\u0001\u0000\u0000"&&_ced !="\u0074\u0072\u0075\u0065"{continue ;};_eff ,_cae :=_ac .Parse (_fg .NewReader (_bfcc ));
if _cae !=nil {_f .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020P\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_cae );continue ;};_cae =_eff .Optimize ();
if _cae !=nil {_f .Log .Debug ("\u0045\u0052RO\u0052\u0020\u004fp\u0074\u0069\u006d\u0069zin\u0067 f\u006f\u006e\u0074\u003a\u0020\u0025\u0076 -\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067",_cae );continue ;};var _aac _fg .Buffer ;_cae =_eff .Write (&_aac );
if _cae !=nil {_f .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020W\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_cae );continue ;};if _aac .Len ()> len (_bfcc ){_f .Log .Debug ("\u0052\u0065-\u0077\u0072\u0069\u0074\u0074\u0065\u006e\u0020\u0066\u006f\u006e\u0074\u0020\u0069\u0073\u0020\u006c\u0061\u0072\u0067\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u002d\u0020\u0073\u006b\u0069\u0070");
continue ;};_ggea ,_cae :=_gfg .MakeStream (_aac .Bytes (),_gfg .NewFlateEncoder ());if _cae !=nil {continue ;};*_bfc =*_ggea ;_bfc .Set ("\u004ce\u006e\u0067\u0074\u0068\u0031",_gfg .MakeInteger (int64 (_aac .Len ())));};return objects ,nil ;};

// Optimize implements Optimizer interface.
func (_gecb *CleanUnusedResources )Optimize (objects []_gfg .PdfObject )(_gcf []_gfg .PdfObject ,_bbb error ){_afe ,_bbb :=_deg (objects );if _bbb !=nil {return nil ,_bbb ;};_bcac :=[]_gfg .PdfObject {};for _ ,_geca :=range objects {_ ,_ccfa :=_afe [_geca ];
if _ccfa {continue ;};_bcac =append (_bcac ,_geca );};return _bcac ,nil ;};func _deg (_efb []_gfg .PdfObject )(map[_gfg .PdfObject ]struct{},error ){_bff :=_bfdc (_efb );_ecbd :=_bff ._dafd ;_bdb :=make (map[_gfg .PdfObject ]struct{});_bfa :=_dff (_ecbd );
for _ ,_cbe :=range _ecbd {_fea ,_fde :=_gfg .GetDict (_cbe .PdfObject );if !_fde {continue ;};_bae ,_fde :=_gfg .GetDict (_fea .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"));if !_fde {continue ;};_dgde :=_bfa ["\u0058O\u0062\u006a\u0065\u0063\u0074"];
_bbbe ,_fde :=_gfg .GetDict (_bae .Get ("\u0058O\u0062\u006a\u0065\u0063\u0074"));if _fde {_adec :=_dded (_bbbe );for _ ,_bbe :=range _adec {if _fbfa (_bbe ,_dgde ){continue ;};_eagf :=*_gfg .MakeName (_bbe );_fce :=_bbbe .Get (_eagf );_bdb [_fce ]=struct{}{};
_bbbe .Remove (_eagf );_fff :=_fefd (_fce ,_bdb );if _fff !=nil {_f .Log .Debug ("\u0066\u0061\u0069\u006ce\u0064\u0020\u0074\u006f\u0020\u0074\u0072\u0061\u0076\u0065r\u0073e\u0020\u006f\u0062\u006a\u0065\u0063\u0074 \u0025\u0076",_fce );};};};_afc ,_fde :=_gfg .GetDict (_bae .Get ("\u0046\u006f\u006e\u0074"));
_eba :=_bfa ["\u0046\u006f\u006e\u0074"];if _fde {_cda :=_dded (_afc );for _ ,_cecd :=range _cda {if _fbfa (_cecd ,_eba ){continue ;};_dfb :=*_gfg .MakeName (_cecd );_cfe :=_afc .Get (_dfb );_bdb [_cfe ]=struct{}{};_afc .Remove (_dfb );_bfda :=_fefd (_cfe ,_bdb );
if _bfda !=nil {_f .Log .Debug ("\u0046\u0061i\u006c\u0065\u0064\u0020\u0074\u006f\u0020\u0074\u0072\u0061\u0076\u0065\u0072\u0073\u0065\u0020\u006f\u0062\u006a\u0065\u0063\u0074 %\u0076\u000a",_cfe );};};};_gcdeb ,_fde :=_gfg .GetDict (_bae .Get ("\u0045x\u0074\u0047\u0053\u0074\u0061\u0074e"));
if _fde {_adc :=_dded (_gcdeb );_cbcc :=_bfa ["\u0045x\u0074\u0047\u0053\u0074\u0061\u0074e"];for _ ,_gb :=range _adc {if _fbfa (_gb ,_cbcc ){continue ;};_cff :=*_gfg .MakeName (_gb );_dfa :=_gcdeb .Get (_cff );_bdb [_dfa ]=struct{}{};_gcdeb .Remove (_cff );
_agc :=_fefd (_dfa ,_bdb );if _agc !=nil {_f .Log .Debug ("\u0066\u0061i\u006c\u0065\u0064\u0020\u0074\u006f\u0020\u0074\u0072\u0061\u0076\u0065\u0072\u0073\u0065\u0020\u006f\u0062\u006a\u0065\u0063\u0074 %\u0076\u000a",_dfa );};};};};return _bdb ,nil ;
};func _agbf (_eadef *_fb .Image ,_dfaf float64 )(*_fb .Image ,error ){_gbgc ,_ddeb :=_eadef .ToGoImage ();if _ddeb !=nil {return nil ,_ddeb ;};var _dgbd _fe .Image ;_dbeg ,_fedc :=_gbgc .(*_fe .Monochrome );if _fedc {if _ddeb =_dbeg .ResolveDecode ();
_ddeb !=nil {return nil ,_ddeb ;};_dgbd ,_ddeb =_dbeg .Scale (_dfaf );if _ddeb !=nil {return nil ,_ddeb ;};}else {_ddaa :=int (_g .RoundToEven (float64 (_eadef .Width )*_dfaf ));_acgb :=int (_g .RoundToEven (float64 (_eadef .Height )*_dfaf ));_dgbd ,_ddeb =_fe .NewImage (_ddaa ,_acgb ,int (_eadef .BitsPerComponent ),_eadef .ColorComponents ,nil ,nil ,nil );
if _ddeb !=nil {return nil ,_ddeb ;};_ad .CatmullRom .Scale (_dgbd ,_dgbd .Bounds (),_gbgc ,_gbgc .Bounds (),_ad .Over ,&_ad .Options {});};_fda :=_dgbd .Base ();_cbce :=&_fb .Image {Width :int64 (_fda .Width ),Height :int64 (_fda .Height ),BitsPerComponent :int64 (_fda .BitsPerComponent ),ColorComponents :_fda .ColorComponents ,Data :_fda .Data };
_cbce .SetDecode (_fda .Decode );_cbce .SetAlpha (_fda .Alpha );return _cbce ,nil ;};

// Append appends optimizers to the chain.
func (_fed *Chain )Append (optimizers ..._fb .Optimizer ){_fed ._c =append (_fed ._c ,optimizers ...)};func _dded (_cad *_gfg .PdfObjectDictionary )[]string {_bceag :=[]string {};for _ ,_eea :=range _cad .Keys (){_bceag =append (_bceag ,_eea .String ());
};return _bceag ;};func _dda (_eag []_gfg .PdfObject )(_ec map[*_gfg .PdfObjectStream ]struct{},_agb error ){_ec =map[*_gfg .PdfObjectStream ]struct{}{};_afa :=map[*_fb .PdfFont ]struct{}{};_deb :=_bfdc (_eag );for _ ,_ace :=range _deb ._dafd {_ggc ,_dba :=_gfg .GetDict (_ace .PdfObject );
if !_dba {continue ;};_fc ,_dba :=_gfg .GetDict (_ggc .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"));if !_dba {continue ;};_dgc ,_ :=_cegag (_ggc .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));_dac ,_eb :=_fb .NewPdfPageResourcesFromDict (_fc );
if _eb !=nil {return nil ,_eb ;};_dde :=[]content {{_cf :_dgc ,_ade :_dac }};_cgg :=_bec (_ggc .Get ("\u0041\u006e\u006e\u006f\u0074\u0073"));if _cgg !=nil {_dde =append (_dde ,_cgg ...);};for _ ,_bdg :=range _dde {_dab ,_ccc :=_fa .NewFromContents (_bdg ._cf ,_bdg ._ade );
if _ccc !=nil {return nil ,_ccc ;};_aeb ,_ ,_ ,_ccc :=_dab .ExtractPageText ();if _ccc !=nil {return nil ,_ccc ;};for _ ,_cb :=range _aeb .Marks ().Elements (){if _cb .Font ==nil {continue ;};if _ ,_gd :=_afa [_cb .Font ];!_gd {_afa [_cb .Font ]=struct{}{};
};};};};_abc :=map[*_gfg .PdfObjectStream ][]*_fb .PdfFont {};for _daa :=range _afa {_gcde :=_daa .FontDescriptor ();if _gcde ==nil ||_gcde .FontFile2 ==nil {continue ;};_gcb ,_ba :=_gfg .GetStream (_gcde .FontFile2 );if !_ba {continue ;};_abc [_gcb ]=append (_abc [_gcb ],_daa );
};for _def :=range _abc {var _eaa []rune ;var _dee []_ac .GlyphIndex ;for _ ,_gag :=range _abc [_def ]{switch _aaf :=_gag .Encoder ().(type ){case *_e .IdentityEncoder :_be :=_aaf .RegisteredRunes ();_bfd :=make ([]_ac .GlyphIndex ,len (_be ));for _daf ,_ebg :=range _be {_bfd [_daf ]=_ac .GlyphIndex (_ebg );
};_dee =append (_dee ,_bfd ...);case *_e .TrueTypeFontEncoder :_gaf :=_aaf .RegisteredRunes ();_eaa =append (_eaa ,_gaf ...);case _e .SimpleEncoder :_fgd :=_aaf .Charcodes ();for _ ,_ce :=range _fgd {_eae ,_dfe :=_aaf .CharcodeToRune (_ce );if !_dfe {_f .Log .Debug ("\u0043\u0068a\u0072\u0063\u006f\u0064\u0065\u003c\u002d\u003e\u0072\u0075\u006e\u0065\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064: \u0025\u0064",_ce );
continue ;};_eaa =append (_eaa ,_eae );};};};_agb =_bca (_def ,_eaa ,_dee );if _agb !=nil {_f .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020\u0073\u0075\u0062\u0073\u0065\u0074\u0074\u0069\u006eg\u0020f\u006f\u006e\u0074\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u003a\u0020\u0025\u0076",_agb );
return nil ,_agb ;};_ec [_def ]=struct{}{};};return _ec ,nil ;};

// CombineDuplicateStreams combines duplicated streams by its data hash.
// It implements interface model.Optimizer.
type CombineDuplicateStreams struct{};

// ObjectStreams groups PDF objects to object streams.
// It implements interface model.Optimizer.
type ObjectStreams struct{};func _bca (_ddc *_gfg .PdfObjectStream ,_ggec []rune ,_bad []_ac .GlyphIndex )error {_ddc ,_bce :=_gfg .GetStream (_ddc );if !_bce {_f .Log .Debug ("\u0045\u006d\u0062\u0065\u0064\u0064\u0065\u0064\u0020\u0066\u006f\u006e\u0074\u0020\u006f\u0062\u006a\u0065c\u0074\u0020\u006e\u006f\u0074\u0020\u0066o\u0075\u006e\u0064\u0020\u002d\u002d\u0020\u0041\u0042\u004f\u0052T\u0020\u0073\u0075\u0062\u0073\u0065\u0074\u0074\u0069\u006e\u0067");
return _b .New ("\u0066\u006f\u006e\u0074fi\u006c\u0065\u0032\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_gab ,_adg :=_gfg .DecodeStream (_ddc );if _adg !=nil {_f .Log .Debug ("\u0044\u0065c\u006f\u0064\u0065 \u0065\u0072\u0072\u006f\u0072\u003a\u0020\u0025\u0076",_adg );
return _adg ;};_eaaf ,_adg :=_ac .Parse (_fg .NewReader (_gab ));if _adg !=nil {_f .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0070\u0061\u0072\u0073\u0069n\u0067\u0020\u0025\u0064\u0020\u0062\u0079\u0074\u0065\u0020f\u006f\u006e\u0074",len (_ddc .Stream ));
return _adg ;};_bea :=_bad ;if len (_ggec )> 0{_fbf :=_eaaf .LookupRunes (_ggec );_bea =append (_bea ,_fbf ...);};_eaaf ,_adg =_eaaf .SubsetKeepIndices (_bea );if _adg !=nil {_f .Log .Debug ("\u0045R\u0052\u004f\u0052\u0020s\u0075\u0062\u0073\u0065\u0074t\u0069n\u0067 \u0066\u006f\u006e\u0074\u003a\u0020\u0025v",_adg );
return _adg ;};var _gec _fg .Buffer ;_adg =_eaaf .Write (&_gec );if _adg !=nil {_f .Log .Debug ("\u0045\u0052\u0052\u004fR \u0057\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076",_adg );return _adg ;};if _gec .Len ()> len (_gab ){_f .Log .Debug ("\u0052\u0065-\u0077\u0072\u0069\u0074\u0074\u0065\u006e\u0020\u0066\u006f\u006e\u0074\u0020\u0069\u0073\u0020\u006c\u0061\u0072\u0067\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u002d\u0020\u0073\u006b\u0069\u0070");
return nil ;};_dag ,_adg :=_gfg .MakeStream (_gec .Bytes (),_gfg .NewFlateEncoder ());if _adg !=nil {_f .Log .Debug ("\u0045\u0052\u0052\u004fR \u0057\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076",_adg );return _adg ;
};*_ddc =*_dag ;_ddc .Set ("\u004ce\u006e\u0067\u0074\u0068\u0031",_gfg .MakeInteger (int64 (_gec .Len ())));return nil ;};

// Options describes PDF optimization parameters.
type Options struct{CombineDuplicateStreams bool ;CombineDuplicateDirectObjects bool ;ImageUpperPPI float64 ;ImageQuality int ;UseObjectStreams bool ;CombineIdenticalIndirectObjects bool ;CompressStreams bool ;CleanFonts bool ;SubsetFonts bool ;CleanContentstream bool ;
CleanUnusedResources bool ;};func _cfb (_ffa _gfg .PdfObject )(string ,error ){_dcb :=_gfg .TraceToDirectObject (_ffa );switch _ggecb :=_dcb .(type ){case *_gfg .PdfObjectString :return _ggecb .Str (),nil ;case *_gfg .PdfObjectStream :_aba ,_efbg :=_gfg .DecodeStream (_ggecb );
if _efbg !=nil {return "",_efbg ;};return string (_aba ),nil ;};return "",_d .Errorf ("\u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u0063\u006f\u006e\u0074\u0065\u006e\u0074\u0020\u0073\u0074\u0072e\u0061\u006d\u0020\u006f\u0062\u006a\u0065\u0063\u0074\u0020\u0068\u006f\u006c\u0064\u0065\u0072\u0020\u0028\u0025\u0054\u0029",_dcb );
};func _dgb (_cg *_gfg .PdfObjectStream )error {_af ,_db :=_gfg .DecodeStream (_cg );if _db !=nil {return _db ;};_gc :=_bf .NewContentStreamParser (string (_af ));_gfd ,_db :=_gc .Parse ();if _db !=nil {return _db ;};_gfd =_ae (_gfd );_gfgc :=_gfd .Bytes ();
if len (_gfgc )>=len (_af ){return nil ;};_gg ,_db :=_gfg .MakeStream (_gfd .Bytes (),_gfg .NewFlateEncoder ());if _db !=nil {return _db ;};_cg .Stream =_gg .Stream ;_cg .Merge (_gg .PdfObjectDictionary );return nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_df *Chain )Optimize (objects []_gfg .PdfObject )(_de []_gfg .PdfObject ,_dg error ){_dc :=objects ;for _ ,_bc :=range _df ._c {_ab ,_cd :=_bc .Optimize (_dc );if _cd !=nil {_f .Log .Debug ("\u0045\u0052\u0052OR\u0020\u004f\u0070\u0074\u0069\u006d\u0069\u007a\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u002b\u0076",_cd );
continue ;};_dc =_ab ;};return _dc ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_dfd *CleanContentstream )Optimize (objects []_gfg .PdfObject )(_ed []_gfg .PdfObject ,_abd error ){_bg :=map[*_gfg .PdfObjectStream ]struct{}{};var _fee []*_gfg .PdfObjectStream ;_ggd :=func (_ge *_gfg .PdfObjectStream ){if _ ,_fbe :=_bg [_ge ];
!_fbe {_bg [_ge ]=struct{}{};_fee =append (_fee ,_ge );};};_da :=map[_gfg .PdfObject ]bool {};_bb :=map[_gfg .PdfObject ]bool {};for _ ,_fbc :=range objects {switch _ead :=_fbc .(type ){case *_gfg .PdfIndirectObject :switch _edg :=_ead .PdfObject .(type ){case *_gfg .PdfObjectDictionary :if _gge ,_edd :=_gfg .GetName (_edg .Get ("\u0054\u0079\u0070\u0065"));
!_edd ||_gge .String ()!="\u0050\u0061\u0067\u0065"{continue ;};if _fga ,_ccf :=_gfg .GetStream (_edg .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));_ccf {_ggd (_fga );}else if _ggg ,_ff :=_gfg .GetArray (_edg .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));
_ff {var _bd []*_gfg .PdfObjectStream ;for _ ,_dad :=range _ggg .Elements (){if _gfc ,_afg :=_gfg .GetStream (_dad );_afg {_bd =append (_bd ,_gfc );};};if len (_bd )> 0{var _ccb _fg .Buffer ;for _ ,_feb :=range _bd {if _dd ,_cdf :=_gfg .DecodeStream (_feb );
_cdf ==nil {_ccb .Write (_dd );};_da [_feb ]=true ;};_ffe ,_bge :=_gfg .MakeStream (_ccb .Bytes (),_gfg .NewFlateEncoder ());if _bge !=nil {return nil ,_bge ;};_bb [_ffe ]=true ;_edg .Set ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073",_ffe );_ggd (_ffe );
};};};case *_gfg .PdfObjectStream :if _bbc ,_eg :=_gfg .GetName (_ead .Get ("\u0054\u0079\u0070\u0065"));!_eg ||_bbc .String ()!="\u0058O\u0062\u006a\u0065\u0063\u0074"{continue ;};if _aeg ,_fef :=_gfg .GetName (_ead .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));
!_fef ||_aeg .String ()!="\u0046\u006f\u0072\u006d"{continue ;};_ggd (_ead );};};for _ ,_fdd :=range _fee {_abd =_dgb (_fdd );if _abd !=nil {return nil ,_abd ;};};_ed =nil ;for _ ,_eee :=range objects {if _da [_eee ]{continue ;};_ed =append (_ed ,_eee );
};for _gfef :=range _bb {_ed =append (_ed ,_gfef );};return _ed ,nil ;};func _gbga (_afef *_fb .XObjectImage ,_bgf imageModifications )error {_eabc ,_bceae :=_afef .ToImage ();if _bceae !=nil {return _bceae ;};if _bgf .Scale !=0{_eabc ,_bceae =_agbf (_eabc ,_bgf .Scale );
if _bceae !=nil {return _bceae ;};};if _bgf .Encoding !=nil {_afef .Filter =_bgf .Encoding ;};_afef .Decode =nil ;switch _ebfg :=_afef .Filter .(type ){case *_gfg .FlateEncoder :if _ebfg .Predictor !=1&&_ebfg .Predictor !=11{_ebfg .Predictor =1;};};if _bceae =_afef .SetImage (_eabc ,nil );
_bceae !=nil {_f .Log .Debug ("\u0045\u0072\u0072or\u0020\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0076",_bceae );return _bceae ;};_afef .ToPdfObject ();return nil ;};func _dff (_dcff []*_gfg .PdfIndirectObject )map[string ][]string {_dce :=map[string ][]string {};
for _ ,_cac :=range _dcff {_egg ,_bda :=_gfg .GetDict (_cac .PdfObject );if !_bda {continue ;};_gfeg :=_egg .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073");_efa :=_gfg .TraceToDirectObject (_gfeg );_ddcd :="";if _gdfa ,_efg :=_efa .(*_gfg .PdfObjectArray );
_efg {var _fede []string ;for _ ,_bgef :=range _gdfa .Elements (){_badf ,_efef :=_cfb (_bgef );if _efef !=nil {continue ;};_fede =append (_fede ,_badf );};_ddcd =_gf .Join (_fede ,"\u0020");};if _ggge ,_dbd :=_efa .(*_gfg .PdfObjectStream );_dbd {_aad ,_afed :=_gfg .DecodeStream (_ggge );
if _afed !=nil {continue ;};_ddcd =string (_aad );};_fbg :=_bf .NewContentStreamParser (_ddcd );_cccc ,_ecfe :=_fbg .Parse ();if _ecfe !=nil {continue ;};for _ ,_aebf :=range *_cccc {_geea :=_aebf .Operand ;_eaeb :=_aebf .Params ;switch _geea {case "\u0044\u006f":_bece :=_eaeb [0].String ();
if _ ,_faa :=_dce ["\u0058O\u0062\u006a\u0065\u0063\u0074"];!_faa {_dce ["\u0058O\u0062\u006a\u0065\u0063\u0074"]=[]string {_bece };}else {_dce ["\u0058O\u0062\u006a\u0065\u0063\u0074"]=append (_dce ["\u0058O\u0062\u006a\u0065\u0063\u0074"],_bece );};case "\u0054\u0066":_cggd :=_eaeb [0].String ();
if _ ,_fgaa :=_dce ["\u0046\u006f\u006e\u0074"];!_fgaa {_dce ["\u0046\u006f\u006e\u0074"]=[]string {_cggd };}else {_dce ["\u0046\u006f\u006e\u0074"]=append (_dce ["\u0046\u006f\u006e\u0074"],_cggd );};case "\u0067\u0073":_afb :=_eaeb [0].String ();if _ ,_eggg :=_dce ["\u0045x\u0074\u0047\u0053\u0074\u0061\u0074e"];
!_eggg {_dce ["\u0045x\u0074\u0047\u0053\u0074\u0061\u0074e"]=[]string {_afb };}else {_dce ["\u0045x\u0074\u0047\u0053\u0074\u0061\u0074e"]=append (_dce ["\u0045x\u0074\u0047\u0053\u0074\u0061\u0074e"],_afb );};};};};return _dce ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_cdg *CombineDuplicateDirectObjects )Optimize (objects []_gfg .PdfObject )(_agd []_gfg .PdfObject ,_bcde error ){_eeb (objects );_cdc :=make (map[string ][]*_gfg .PdfObjectDictionary );var _eagd func (_fcc *_gfg .PdfObjectDictionary );_eagd =func (_bdc *_gfg .PdfObjectDictionary ){for _ ,_cef :=range _bdc .Keys (){_cacg :=_bdc .Get (_cef );
if _ggb ,_ebc :=_cacg .(*_gfg .PdfObjectDictionary );_ebc {if _cega :=_ggb .Keys ();len (_cega )==0{continue ;};_dbe :=_ga .New ();_dbe .Write (_ggb .Write ());_baef :=string (_dbe .Sum (nil ));_cdc [_baef ]=append (_cdc [_baef ],_ggb );_eagd (_ggb );};
};};for _ ,_ebdc :=range objects {_gae ,_ebf :=_ebdc .(*_gfg .PdfIndirectObject );if !_ebf {continue ;};if _dead ,_ggecg :=_gae .PdfObject .(*_gfg .PdfObjectDictionary );_ggecg {_eagd (_dead );};};_eaeg :=make ([]_gfg .PdfObject ,0,len (_cdc ));_efc :=make (map[_gfg .PdfObject ]_gfg .PdfObject );
for _ ,_dgba :=range _cdc {if len (_dgba )< 2{continue ;};_bed :=_gfg .MakeDict ();_bed .Merge (_dgba [0]);_cga :=_gfg .MakeIndirectObject (_bed );_eaeg =append (_eaeg ,_cga );for _cfa :=0;_cfa < len (_dgba );_cfa ++{_cbf :=_dgba [_cfa ];_efc [_cbf ]=_cga ;
};};_agd =make ([]_gfg .PdfObject ,len (objects ));copy (_agd ,objects );_agd =append (_eaeg ,_agd ...);_gea (_agd ,_efc );return _agd ,nil ;};func _gea (_cecb []_gfg .PdfObject ,_bcdd map[_gfg .PdfObject ]_gfg .PdfObject ){if len (_bcdd )==0{return ;};
for _cfd ,_bgccc :=range _cecb {if _fag ,_efac :=_bcdd [_bgccc ];_efac {_cecb [_cfd ]=_fag ;continue ;};_bcdd [_bgccc ]=_bgccc ;switch _cecg :=_bgccc .(type ){case *_gfg .PdfObjectArray :_bab :=make ([]_gfg .PdfObject ,_cecg .Len ());copy (_bab ,_cecg .Elements ());
_gea (_bab ,_bcdd );for _ffd ,_begc :=range _bab {_cecg .Set (_ffd ,_begc );};case *_gfg .PdfObjectStreams :_gea (_cecg .Elements (),_bcdd );case *_gfg .PdfObjectStream :_bfeg :=[]_gfg .PdfObject {_cecg .PdfObjectDictionary };_gea (_bfeg ,_bcdd );_cecg .PdfObjectDictionary =_bfeg [0].(*_gfg .PdfObjectDictionary );
case *_gfg .PdfObjectDictionary :_ebcb :=_cecg .Keys ();_cgf :=make ([]_gfg .PdfObject ,len (_ebcb ));for _ffeb ,_dbef :=range _ebcb {_cgf [_ffeb ]=_cecg .Get (_dbef );};_gea (_cgf ,_bcdd );for _cbdb ,_fgb :=range _ebcb {_cecg .Set (_fgb ,_cgf [_cbdb ]);
};case *_gfg .PdfIndirectObject :_ecbb :=[]_gfg .PdfObject {_cecg .PdfObject };_gea (_ecbb ,_bcdd );_cecg .PdfObject =_ecbb [0];};};};func _ae (_cc *_bf .ContentStreamOperations )*_bf .ContentStreamOperations {if _cc ==nil {return nil ;};_ada :=_bf .ContentStreamOperations {};
for _ ,_ea :=range *_cc {switch _ea .Operand {case "\u0042\u0044\u0043","\u0042\u004d\u0043","\u0045\u004d\u0043":continue ;case "\u0054\u006d":if len (_ea .Params )==6{if _ag ,_gad :=_gfg .GetNumbersAsFloat (_ea .Params );_gad ==nil {if _ag [0]==1&&_ag [1]==0&&_ag [2]==0&&_ag [3]==1{_ea =&_bf .ContentStreamOperation {Params :[]_gfg .PdfObject {_ea .Params [4],_ea .Params [5]},Operand :"\u0054\u0064"};
};};};};_ada =append (_ada ,_ea );};return &_ada ;};

// Image optimizes images by rewrite images into JPEG format with quality equals to ImageQuality.
// TODO(a5i): Add support for inline images.
// It implements interface model.Optimizer.
type Image struct{ImageQuality int ;};

// New creates a optimizers chain from options.
func New (options Options )*Chain {_beeb :=new (Chain );if options .CleanFonts ||options .SubsetFonts {_beeb .Append (&CleanFonts {Subset :options .SubsetFonts });};if options .CleanContentstream {_beeb .Append (new (CleanContentstream ));};if options .ImageUpperPPI > 0{_bgcce :=new (ImagePPI );
_bgcce .ImageUpperPPI =options .ImageUpperPPI ;_beeb .Append (_bgcce );};if options .ImageQuality > 0{_gfdb :=new (Image );_gfdb .ImageQuality =options .ImageQuality ;_beeb .Append (_gfdb );};if options .CombineDuplicateDirectObjects {_beeb .Append (new (CombineDuplicateDirectObjects ));
};if options .CombineDuplicateStreams {_beeb .Append (new (CombineDuplicateStreams ));};if options .CombineIdenticalIndirectObjects {_beeb .Append (new (CombineIdenticalIndirectObjects ));};if options .UseObjectStreams {_beeb .Append (new (ObjectStreams ));
};if options .CompressStreams {_beeb .Append (new (CompressStreams ));};if options .CleanUnusedResources {_beeb .Append (new (CleanUnusedResources ));};return _beeb ;};type content struct{_cf string ;_ade *_fb .PdfPageResources ;};func _fefd (_bdgd _gfg .PdfObject ,_gfa map[_gfg .PdfObject ]struct{})error {if _gecf ,_fdg :=_bdgd .(*_gfg .PdfIndirectObject );
_fdg {_gfa [_bdgd ]=struct{}{};_ddge :=_fefd (_gecf .PdfObject ,_gfa );if _ddge !=nil {return _ddge ;};return nil ;};if _ccd ,_ceg :=_bdgd .(*_gfg .PdfObjectStream );_ceg {_gfa [_ccd ]=struct{}{};_fcd :=_fefd (_ccd .PdfObjectDictionary ,_gfa );if _fcd !=nil {return _fcd ;
};return nil ;};if _ddef ,_cdad :=_bdgd .(*_gfg .PdfObjectDictionary );_cdad {for _ ,_dge :=range _ddef .Keys (){_eac :=_ddef .Get (_dge );_ =_eac ;if _gaa ,_aga :=_eac .(*_gfg .PdfObjectReference );_aga {_eac =_gaa .Resolve ();_ddef .Set (_dge ,_eac );
};if _dge !="\u0050\u0061\u0072\u0065\u006e\u0074"{if _cgbe :=_fefd (_eac ,_gfa );_cgbe !=nil {return _cgbe ;};};};return nil ;};if _fcf ,_egd :=_bdgd .(*_gfg .PdfObjectArray );_egd {if _fcf ==nil {return _b .New ("\u0061\u0072\u0072a\u0079\u0020\u0069\u0073\u0020\u006e\u0069\u006c");
};for _efge ,_edf :=range _fcf .Elements (){if _geg ,_gbg :=_edf .(*_gfg .PdfObjectReference );_gbg {_edf =_geg .Resolve ();_fcf .Set (_efge ,_edf );};if _baa :=_fefd (_edf ,_gfa );_baa !=nil {return _baa ;};};return nil ;};return nil ;};

// CombineDuplicateDirectObjects combines duplicated direct objects by its data hash.
// It implements interface model.Optimizer.
type CombineDuplicateDirectObjects struct{};func _eeb (_aded []_gfg .PdfObject ){for _cab ,_acbf :=range _aded {switch _age :=_acbf .(type ){case *_gfg .PdfIndirectObject :_age .ObjectNumber =int64 (_cab +1);_age .GenerationNumber =0;case *_gfg .PdfObjectStream :_age .ObjectNumber =int64 (_cab +1);
_age .GenerationNumber =0;case *_gfg .PdfObjectStreams :_age .ObjectNumber =int64 (_cab +1);_age .GenerationNumber =0;};};};

// GetOptimizers gets the list of optimizers in chain `c`.
func (_fd *Chain )GetOptimizers ()[]_fb .Optimizer {return _fd ._c };

// Optimize optimizes PDF objects to decrease PDF size.
func (_fcea *CombineDuplicateStreams )Optimize (objects []_gfg .PdfObject )(_ddd []_gfg .PdfObject ,_cccb error ){_ebcf :=make (map[_gfg .PdfObject ]_gfg .PdfObject );_bcad :=make (map[_gfg .PdfObject ]struct{});_debg :=make (map[string ][]*_gfg .PdfObjectStream );
for _ ,_dcea :=range objects {if _bfe ,_fgae :=_dcea .(*_gfg .PdfObjectStream );_fgae {_debb :=_ga .New ();_debb .Write (_bfe .Stream );_debb .Write (_bfe .PdfObjectDictionary .Write ());_cgcg :=string (_debb .Sum (nil ));_debg [_cgcg ]=append (_debg [_cgcg ],_bfe );
};};for _ ,_cefg :=range _debg {if len (_cefg )< 2{continue ;};_defa :=_cefg [0];for _ecbge :=1;_ecbge < len (_cefg );_ecbge ++{_abg :=_cefg [_ecbge ];_ebcf [_abg ]=_defa ;_bcad [_abg ]=struct{}{};};};_ddd =make ([]_gfg .PdfObject ,0,len (objects )-len (_bcad ));
for _ ,_cge :=range objects {if _ ,_abae :=_bcad [_cge ];_abae {continue ;};_ddd =append (_ddd ,_cge );};_gea (_ddd ,_ebcf );return _ddd ,nil ;};

// CompressStreams compresses uncompressed streams.
// It implements interface model.Optimizer.
type CompressStreams struct{};func _bec (_adf _gfg .PdfObject )[]content {if _adf ==nil {return nil ;};_fba ,_cbc :=_gfg .GetArray (_adf );if !_cbc {_f .Log .Debug ("\u0041\u006e\u006e\u006fts\u0020\u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0061\u0072\u0072\u0061\u0079");
return nil ;};var _efe []content ;for _ ,_eaef :=range _fba .Elements (){_fafd ,_gabe :=_gfg .GetDict (_eaef );if !_gabe {_f .Log .Debug ("I\u0067\u006e\u006f\u0072\u0069\u006eg\u0020\u006e\u006f\u006e\u002d\u0064i\u0063\u0074\u0020\u0065\u006c\u0065\u006de\u006e\u0074\u0020\u0069\u006e\u0020\u0041\u006e\u006e\u006ft\u0073");
continue ;};_bag ,_gabe :=_gfg .GetDict (_fafd .Get ("\u0041\u0050"));if !_gabe {_f .Log .Debug ("\u004e\u006f\u0020\u0041P \u0065\u006e\u0074\u0072\u0079\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067");continue ;};_dabb :=_gfg .TraceToDirectObject (_bag .Get ("\u004e"));
if _dabb ==nil {_f .Log .Debug ("N\u006f\u0020\u004e\u0020en\u0074r\u0079\u0020\u002d\u0020\u0073k\u0069\u0070\u0070\u0069\u006e\u0067");continue ;};var _cgb *_gfg .PdfObjectStream ;switch _dfgd :=_dabb .(type ){case *_gfg .PdfObjectDictionary :_ggf ,_aebe :=_gfg .GetName (_fafd .Get ("\u0041\u0053"));
if !_aebe {_f .Log .Debug ("\u004e\u006f\u0020\u0041S \u0065\u006e\u0074\u0072\u0079\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067");continue ;};_cgb ,_aebe =_gfg .GetStream (_dfgd .Get (*_ggf ));if !_aebe {_f .Log .Debug ("\u0046o\u0072\u006d\u0020\u006eo\u0074\u0020\u0066\u006f\u0075n\u0064 \u002d \u0073\u006b\u0069\u0070\u0070\u0069\u006eg");
continue ;};case *_gfg .PdfObjectStream :_cgb =_dfgd ;};if _cgb ==nil {_f .Log .Debug ("\u0046\u006f\u0072m\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0028n\u0069\u006c\u0029\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067");
continue ;};_add ,_acb :=_fb .NewXObjectFormFromStream (_cgb );if _acb !=nil {_f .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020l\u006f\u0061\u0064\u0069\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_acb );
continue ;};_ddb ,_acb :=_add .GetContentStream ();if _acb !=nil {_f .Log .Debug ("E\u0072\u0072\u006f\u0072\u0020\u0064e\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0063\u006fn\u0074\u0065\u006et\u0073:\u0020\u0025\u0076",_acb );continue ;};_efe =append (_efe ,content {_cf :string (_ddb ),_ade :_add .Resources });
};return _efe ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_agf *CompressStreams )Optimize (objects []_gfg .PdfObject )(_fged []_gfg .PdfObject ,_cafd error ){_fged =make ([]_gfg .PdfObject ,len (objects ));copy (_fged ,objects );for _ ,_fbb :=range objects {_fgedf ,_cdfb :=_gfg .GetStream (_fbb );if !_cdfb {continue ;
};if _bddf :=_fgedf .Get ("\u0046\u0069\u006c\u0074\u0065\u0072");_bddf !=nil {if _ ,_cdaf :=_gfg .GetName (_bddf );_cdaf {continue ;};if _gca ,_deec :=_gfg .GetArray (_bddf );_deec &&_gca .Len ()> 0{continue ;};};_adfd :=_gfg .NewFlateEncoder ();var _aag []byte ;
_aag ,_cafd =_adfd .EncodeBytes (_fgedf .Stream );if _cafd !=nil {return _fged ,_cafd ;};_aec :=_adfd .MakeStreamDict ();if len (_aag )+len (_aec .Write ())< len (_fgedf .Stream ){_fgedf .Stream =_aag ;_fgedf .PdfObjectDictionary .Merge (_aec );_fgedf .PdfObjectDictionary .Set ("\u004c\u0065\u006e\u0067\u0074\u0068",_gfg .MakeInteger (int64 (len (_fgedf .Stream ))));
};};return _fged ,nil ;};func _ecfd (_ggfb []_gfg .PdfObject )[]*imageInfo {_gagb :=_gfg .PdfObjectName ("\u0053u\u0062\u0074\u0079\u0070\u0065");_baaf :=make (map[*_gfg .PdfObjectStream ]struct{});var _gfdce []*imageInfo ;for _ ,_abe :=range _ggfb {_debf ,_gcae :=_gfg .GetStream (_abe );
if !_gcae {continue ;};if _ ,_ged :=_baaf [_debf ];_ged {continue ;};_baaf [_debf ]=struct{}{};_ggce :=_debf .PdfObjectDictionary .Get (_gagb );_dfcd ,_gcae :=_gfg .GetName (_ggce );if !_gcae ||string (*_dfcd )!="\u0049\u006d\u0061g\u0065"{continue ;};
_caag :=&imageInfo {Stream :_debf ,BitsPerComponent :8};if _edfa ,_fbab :=_gfg .GetIntVal (_debf .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074"));_fbab {_caag .BitsPerComponent =_edfa ;};if _afd ,_eade :=_gfg .GetIntVal (_debf .Get ("\u0057\u0069\u0064t\u0068"));
_eade {_caag .Width =_afd ;};if _cace ,_dade :=_gfg .GetIntVal (_debf .Get ("\u0048\u0065\u0069\u0067\u0068\u0074"));_dade {_caag .Height =_cace ;};_gdg ,_cedd :=_fb .NewPdfColorspaceFromPdfObject (_debf .Get ("\u0043\u006f\u006c\u006f\u0072\u0053\u0070\u0061\u0063\u0065"));
if _cedd !=nil {_f .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_cedd );continue ;};if _gdg ==nil {_cfad ,_dffc :=_gfg .GetName (_debf .Get ("\u0046\u0069\u006c\u0074\u0065\u0072"));if _dffc {switch _cfad .String (){case "\u0043\u0043\u0049\u0054\u0054\u0046\u0061\u0078\u0044e\u0063\u006f\u0064\u0065","J\u0042\u0049\u0047\u0032\u0044\u0065\u0063\u006f\u0064\u0065":_gdg =_fb .NewPdfColorspaceDeviceGray ();
_caag .BitsPerComponent =1;};};};switch _bgg :=_gdg .(type ){case *_fb .PdfColorspaceDeviceRGB :_caag .ColorComponents =3;case *_fb .PdfColorspaceDeviceGray :_caag .ColorComponents =1;default:_f .Log .Debug ("\u004f\u0070\u0074\u0069\u006d\u0069\u007aa\u0074\u0069\u006fn\u0020\u0069\u0073 \u006e\u006ft\u0020\u0073\u0075\u0070\u0070\u006fr\u0074ed\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u0025\u0054\u0020\u002d\u0020\u0073\u006b\u0069\u0070",_bgg );
continue ;};_gfdce =append (_gfdce ,_caag );};return _gfdce ;};

// CleanFonts cleans up embedded fonts, reducing font sizes.
type CleanFonts struct{

// Subset embedded fonts if encountered (if true).
// Otherwise attempts to reduce the font program.
Subset bool ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_badd *ImagePPI )Optimize (objects []_gfg .PdfObject )(_cbcg []_gfg .PdfObject ,_aece error ){if _badd .ImageUpperPPI <=0{return objects ,nil ;};_dca :=_ecfd (objects );if len (_dca )==0{return objects ,nil ;};_fbgb :=make (map[_gfg .PdfObject ]struct{});
for _ ,_ebac :=range _dca {_dcbb :=_ebac .Stream .PdfObjectDictionary .Get ("\u0053\u004d\u0061s\u006b");_fbgb [_dcbb ]=struct{}{};};_agdc :=make (map[*_gfg .PdfObjectStream ]*imageInfo );for _ ,_ceb :=range _dca {_agdc [_ceb .Stream ]=_ceb ;};var _febg *_gfg .PdfObjectDictionary ;
for _ ,_gcdec :=range objects {if _dcd ,_gfac :=_gfg .GetDict (_gcdec );_febg ==nil &&_gfac {if _cdea ,_eaaa :=_gfg .GetName (_dcd .Get ("\u0054\u0079\u0070\u0065"));_eaaa &&*_cdea =="\u0043a\u0074\u0061\u006c\u006f\u0067"{_febg =_dcd ;};};};if _febg ==nil {return objects ,nil ;
};_cefb ,_ddea :=_gfg .GetDict (_febg .Get ("\u0050\u0061\u0067e\u0073"));if !_ddea {return objects ,nil ;};_cbeg ,_fca :=_gfg .GetArray (_cefb .Get ("\u004b\u0069\u0064\u0073"));if !_fca {return objects ,nil ;};for _ ,_baeg :=range _cbeg .Elements (){_gfdd :=make (map[string ]*imageInfo );
_aebc ,_ggfe :=_gfg .GetDict (_baeg );if !_ggfe {continue ;};_cee ,_ :=_cegag (_aebc .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));if len (_cee )==0{continue ;};_bgcc ,_bfg :=_gfg .GetDict (_aebc .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"));
if !_bfg {continue ;};_deeb ,_deecf :=_fb .NewPdfPageResourcesFromDict (_bgcc );if _deecf !=nil {_f .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0072\u0065\u0073\u006f\u0075\u0072\u0063\u0065\u0073\u0020-\u0020\u0069\u0067\u006e\u006fr\u0069\u006eg\u003a\u0020\u0025\u0076",_deecf );
continue ;};_dec ,_gbac :=_gfg .GetDict (_bgcc .Get ("\u0058O\u0062\u006a\u0065\u0063\u0074"));if !_gbac {continue ;};_feaa :=_dec .Keys ();for _ ,_agca :=range _feaa {if _fec ,_aebfa :=_gfg .GetStream (_dec .Get (_agca ));_aebfa {if _fae ,_abbb :=_agdc [_fec ];
_abbb {_gfdd [string (_agca )]=_fae ;};};};_fcg :=_bf .NewContentStreamParser (_cee );_bfgf ,_deecf :=_fcg .Parse ();if _deecf !=nil {_f .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_deecf );continue ;};_gdb :=_bf .NewContentStreamProcessor (*_bfgf );
_gdb .AddHandler (_bf .HandlerConditionEnumAllOperands ,"",func (_egcc *_bf .ContentStreamOperation ,_dga _bf .GraphicsState ,_bbba *_fb .PdfPageResources )error {switch _egcc .Operand {case "\u0044\u006f":if len (_egcc .Params )!=1{_f .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020\u0049\u0067\u006e\u006f\u0072\u0069\u006e\u0067\u0020\u0044\u006f\u0020w\u0069\u0074\u0068\u0020\u006c\u0065\u006e\u0028\u0070\u0061ra\u006d\u0073\u0029 \u0021=\u0020\u0031");
return nil ;};_daca ,_gbd :=_gfg .GetName (_egcc .Params [0]);if !_gbd {_f .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0049\u0067\u006e\u006f\u0072\u0069\u006e\u0067\u0020\u0044\u006f\u0020\u0077\u0069\u0074\u0068\u0020\u006e\u006f\u006e\u0020\u004e\u0061\u006d\u0065\u0020p\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072");
return nil ;};if _bffg ,_baee :=_gfdd [string (*_daca )];_baee {_agfg :=_dga .CTM .ScalingFactorX ();_cgag :=_dga .CTM .ScalingFactorY ();_cdd ,_cbae :=_agfg /72.0,_cgag /72.0;_gfbe ,_cbb :=float64 (_bffg .Width )/_cdd ,float64 (_bffg .Height )/_cbae ;
if _cdd ==0||_cbae ==0{_gfbe =72.0;_cbb =72.0;};_bffg .PPI =_g .Max (_bffg .PPI ,_gfbe );_bffg .PPI =_g .Max (_bffg .PPI ,_cbb );};};return nil ;});_deecf =_gdb .Process (_deeb );if _deecf !=nil {_f .Log .Debug ("E\u0052\u0052\u004f\u0052 p\u0072o\u0063\u0065\u0073\u0073\u0069n\u0067\u003a\u0020\u0025\u002b\u0076",_deecf );
continue ;};};for _ ,_edb :=range _dca {if _ ,_cdeg :=_fbgb [_edb .Stream ];_cdeg {continue ;};if _edb .PPI <=_badd .ImageUpperPPI {continue ;};_fdf ,_gdecc :=_fb .NewXObjectImageFromStream (_edb .Stream );if _gdecc !=nil {_f .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_gdecc );
continue ;};var _cfg imageModifications ;_cfg .Scale =_badd .ImageUpperPPI /_edb .PPI ;if _edb .BitsPerComponent ==1&&_edb .ColorComponents ==1{_gga :=_g .Round (_edb .PPI /_badd .ImageUpperPPI );_dffd :=_fe .NextPowerOf2 (uint (_gga ));if _fe .InDelta (float64 (_dffd ),1/_cfg .Scale ,0.3){_cfg .Scale =float64 (1)/float64 (_dffd );
};if _ ,_eed :=_fdf .Filter .(*_gfg .JBIG2Encoder );!_eed {_cfg .Encoding =_gfg .NewJBIG2Encoder ();};};if _gdecc =_gbga (_fdf ,_cfg );_gdecc !=nil {_f .Log .Debug ("\u0045\u0072\u0072\u006f\u0072 \u0073\u0063\u0061\u006c\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u006be\u0065\u0070\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0073",_gdecc );
continue ;};_cfg .Encoding =nil ;if _abdc ,_ebfe :=_gfg .GetStream (_edb .Stream .PdfObjectDictionary .Get ("\u0053\u004d\u0061s\u006b"));_ebfe {_efga ,_gdgd :=_fb .NewXObjectImageFromStream (_abdc );if _gdgd !=nil {_f .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_gdgd );
continue ;};if _gdgd =_gbga (_efga ,_cfg );_gdgd !=nil {_f .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_gdgd );continue ;};};};return objects ,nil ;};type imageInfo struct{BitsPerComponent int ;ColorComponents int ;Width int ;
Height int ;Stream *_gfg .PdfObjectStream ;PPI float64 ;};func _cegag (_baf _gfg .PdfObject )(_ggab string ,_gcbf []_gfg .PdfObject ){var _geaa _fg .Buffer ;switch _addd :=_baf .(type ){case *_gfg .PdfIndirectObject :_gcbf =append (_gcbf ,_addd );_baf =_addd .PdfObject ;
};switch _ggdf :=_baf .(type ){case *_gfg .PdfObjectStream :if _cbef ,_agfc :=_gfg .DecodeStream (_ggdf );_agfc ==nil {_geaa .Write (_cbef );_gcbf =append (_gcbf ,_ggdf );};case *_gfg .PdfObjectArray :for _ ,_gcdgb :=range _ggdf .Elements (){switch _faec :=_gcdgb .(type ){case *_gfg .PdfObjectStream :if _faab ,_dedb :=_gfg .DecodeStream (_faec );
_dedb ==nil {_geaa .Write (_faab );_gcbf =append (_gcbf ,_faec );};};};};return _geaa .String (),_gcbf ;};

// Chain allows to use sequence of optimizers.
// It implements interface model.Optimizer.
type Chain struct{_c []_fb .Optimizer };

// ImagePPI optimizes images by scaling images such that the PPI (pixels per inch) is never higher than ImageUpperPPI.
// TODO(a5i): Add support for inline images.
// It implements interface model.Optimizer.
type ImagePPI struct{ImageUpperPPI float64 ;};func _bfdc (_bcf []_gfg .PdfObject )objectStructure {_aadg :=objectStructure {};_debd :=false ;for _ ,_dege :=range _bcf {switch _dceae :=_dege .(type ){case *_gfg .PdfIndirectObject :_cfaa ,_ggeb :=_gfg .GetDict (_dceae );
if !_ggeb {continue ;};_bdf ,_ggeb :=_gfg .GetName (_cfaa .Get ("\u0054\u0079\u0070\u0065"));if !_ggeb {continue ;};switch _bdf .String (){case "\u0043a\u0074\u0061\u006c\u006f\u0067":_aadg ._ebe =_cfaa ;_debd =true ;};};if _debd {break ;};};if !_debd {return _aadg ;
};_ddgd ,_aed :=_gfg .GetDict (_aadg ._ebe .Get ("\u0050\u0061\u0067e\u0073"));if !_aed {return _aadg ;};_aadg ._cfgf =_ddgd ;_dffe ,_aed :=_gfg .GetArray (_ddgd .Get ("\u004b\u0069\u0064\u0073"));if !_aed {return _aadg ;};for _ ,_aegc :=range _dffe .Elements (){_aegf ,_febe :=_gfg .GetIndirect (_aegc );
if !_febe {break ;};_aadg ._dafd =append (_aadg ._dafd ,_aegf );};return _aadg ;};

// CombineIdenticalIndirectObjects combines identical indirect objects.
// It implements interface model.Optimizer.
type CombineIdenticalIndirectObjects struct{};