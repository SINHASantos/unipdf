//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package optimize ;import (_bb "bytes";_g "crypto/md5";_add "errors";_gc "fmt";_b "github.com/unidoc/unipdf/v3/common";_c "github.com/unidoc/unipdf/v3/contentstream";_ag "github.com/unidoc/unipdf/v3/core";_d "github.com/unidoc/unipdf/v3/extractor";_acd "github.com/unidoc/unipdf/v3/internal/imageutil";
_aca "github.com/unidoc/unipdf/v3/internal/textencoding";_f "github.com/unidoc/unipdf/v3/model";_ba "github.com/unidoc/unitype";_e "golang.org/x/image/draw";_ac "math";_ad "strings";);

// Optimize optimizes PDF objects to decrease PDF size.
func (_cda *CombineIdenticalIndirectObjects )Optimize (objects []_ag .PdfObject )(_gbd []_ag .PdfObject ,_gfg error ){_ccag (objects );_dcea :=make (map[_ag .PdfObject ]_ag .PdfObject );_cdef :=make (map[_ag .PdfObject ]struct{});_fab :=make (map[string ][]*_ag .PdfIndirectObject );
for _ ,_dfd :=range objects {_bge ,_ecg :=_dfd .(*_ag .PdfIndirectObject );if !_ecg {continue ;};if _bfbf ,_agbc :=_bge .PdfObject .(*_ag .PdfObjectDictionary );_agbc {if _bgeg ,_ebb :=_bfbf .Get ("\u0054\u0079\u0070\u0065").(*_ag .PdfObjectName );_ebb &&*_bgeg =="\u0050\u0061\u0067\u0065"{continue ;
};if _fgcc :=_bfbf .Keys ();len (_fgcc )==0{continue ;};_dffb :=_g .New ();_dffb .Write ([]byte (_bfbf .WriteString ()));_fgab :=string (_dffb .Sum (nil ));_fab [_fgab ]=append (_fab [_fgab ],_bge );};};for _ ,_gbfa :=range _fab {if len (_gbfa )< 2{continue ;
};_aaeb :=_gbfa [0];for _dffa :=1;_dffa < len (_gbfa );_dffa ++{_gcfb :=_gbfa [_dffa ];_dcea [_gcfb ]=_aaeb ;_cdef [_gcfb ]=struct{}{};};};_gbd =make ([]_ag .PdfObject ,0,len (objects )-len (_cdef ));for _ ,_ggcd :=range objects {if _ ,_aea :=_cdef [_ggcd ];
_aea {continue ;};_gbd =append (_gbd ,_ggcd );};_bafg (_gbd ,_dcea );return _gbd ,nil ;};type content struct{_eaga string ;_ggb *_f .PdfPageResources ;};type imageModifications struct{Scale float64 ;Encoding _ag .StreamEncoder ;};

// Options describes PDF optimization parameters.
type Options struct{CombineDuplicateStreams bool ;CombineDuplicateDirectObjects bool ;ImageUpperPPI float64 ;ImageQuality int ;UseObjectStreams bool ;CombineIdenticalIndirectObjects bool ;CompressStreams bool ;CleanFonts bool ;SubsetFonts bool ;CleanContentstream bool ;
CleanUnusedResources bool ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_eccf *CombineDuplicateStreams )Optimize (objects []_ag .PdfObject )(_dff []_ag .PdfObject ,_gega error ){_cdea :=make (map[_ag .PdfObject ]_ag .PdfObject );_fdae :=make (map[_ag .PdfObject ]struct{});_gbcf :=make (map[string ][]*_ag .PdfObjectStream );
for _ ,_dacd :=range objects {if _edfd ,_effg :=_dacd .(*_ag .PdfObjectStream );_effg {_dca :=_g .New ();_dca .Write (_edfd .Stream );_dca .Write ([]byte (_edfd .PdfObjectDictionary .WriteString ()));_agge :=string (_dca .Sum (nil ));_gbcf [_agge ]=append (_gbcf [_agge ],_edfd );
};};for _ ,_cddb :=range _gbcf {if len (_cddb )< 2{continue ;};_aeg :=_cddb [0];for _fgdg :=1;_fgdg < len (_cddb );_fgdg ++{_cgbg :=_cddb [_fgdg ];_cdea [_cgbg ]=_aeg ;_fdae [_cgbg ]=struct{}{};};};_dff =make ([]_ag .PdfObject ,0,len (objects )-len (_fdae ));
for _ ,_fgf :=range objects {if _ ,_fddf :=_fdae [_fgf ];_fddf {continue ;};_dff =append (_dff ,_fgf );};_bafg (_dff ,_cdea );return _dff ,nil ;};func _cdd (_efea *_ag .PdfObjectDictionary )[]string {_edgd :=[]string {};for _ ,_aac :=range _efea .Keys (){_edgd =append (_edgd ,_aac .String ());
};return _edgd ;};func _bcb (_eeb []_ag .PdfObject )(_ccf map[*_ag .PdfObjectStream ]struct{},_bbb error ){_ccf =map[*_ag .PdfObjectStream ]struct{}{};_bf :=map[*_f .PdfFont ]struct{}{};_feb :=_dgea (_eeb );for _ ,_fad :=range _feb ._bffg {_fgc ,_afc :=_ag .GetDict (_fad .PdfObject );
if !_afc {continue ;};_faf ,_afc :=_ag .GetDict (_fgc .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"));if !_afc {continue ;};_fdd ,_ :=_bcd (_fgc .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));_ab ,_adb :=_f .NewPdfPageResourcesFromDict (_faf );
if _adb !=nil {return nil ,_adb ;};_dbf :=[]content {{_eaga :_fdd ,_ggb :_ab }};_dac :=_ffdd (_fgc .Get ("\u0041\u006e\u006e\u006f\u0074\u0073"));if _dac !=nil {_dbf =append (_dbf ,_dac ...);};for _ ,_bbfb :=range _dbf {_ead ,_ca :=_d .NewFromContents (_bbfb ._eaga ,_bbfb ._ggb );
if _ca !=nil {return nil ,_ca ;};_be ,_ ,_ ,_ca :=_ead .ExtractPageText ();if _ca !=nil {return nil ,_ca ;};for _ ,_ffe :=range _be .Marks ().Elements (){if _ffe .Font ==nil {continue ;};if _ ,_dce :=_bf [_ffe .Font ];!_dce {_bf [_ffe .Font ]=struct{}{};
};};};};_dggb :=map[*_ag .PdfObjectStream ][]*_f .PdfFont {};for _addd :=range _bf {_ae :=_addd .FontDescriptor ();if _ae ==nil ||_ae .FontFile2 ==nil {continue ;};_eed ,_gcf :=_ag .GetStream (_ae .FontFile2 );if !_gcf {continue ;};_dggb [_eed ]=append (_dggb [_eed ],_addd );
};for _cae :=range _dggb {var _caf []rune ;var _efe []_ba .GlyphIndex ;for _ ,_gcab :=range _dggb [_cae ]{switch _bbe :=_gcab .Encoder ().(type ){case *_aca .IdentityEncoder :_geg :=_bbe .RegisteredRunes ();_ecc :=make ([]_ba .GlyphIndex ,len (_geg ));
for _daf ,_baae :=range _geg {_ecc [_daf ]=_ba .GlyphIndex (_baae );};_efe =append (_efe ,_ecc ...);case *_aca .TrueTypeFontEncoder :_egg :=_bbe .RegisteredRunes ();_caf =append (_caf ,_egg ...);case _aca .SimpleEncoder :_cge :=_bbe .Charcodes ();for _ ,_daef :=range _cge {_ffa ,_dgf :=_bbe .CharcodeToRune (_daef );
if !_dgf {_b .Log .Debug ("\u0043\u0068a\u0072\u0063\u006f\u0064\u0065\u003c\u002d\u003e\u0072\u0075\u006e\u0065\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064: \u0025\u0064",_daef );continue ;};_caf =append (_caf ,_ffa );};};};_bbb =_gcfd (_cae ,_caf ,_efe );
if _bbb !=nil {_b .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020\u0073\u0075\u0062\u0073\u0065\u0074\u0074\u0069\u006eg\u0020f\u006f\u006e\u0074\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u003a\u0020\u0025\u0076",_bbb );return nil ,_bbb ;};_ccf [_cae ]=struct{}{};
};return _ccf ,nil ;};func _gcfd (_fca *_ag .PdfObjectStream ,_cfd []rune ,_cgd []_ba .GlyphIndex )error {_fca ,_aba :=_ag .GetStream (_fca );if !_aba {_b .Log .Debug ("\u0045\u006d\u0062\u0065\u0064\u0064\u0065\u0064\u0020\u0066\u006f\u006e\u0074\u0020\u006f\u0062\u006a\u0065c\u0074\u0020\u006e\u006f\u0074\u0020\u0066o\u0075\u006e\u0064\u0020\u002d\u002d\u0020\u0041\u0042\u004f\u0052T\u0020\u0073\u0075\u0062\u0073\u0065\u0074\u0074\u0069\u006e\u0067");
return _add .New ("\u0066\u006f\u006e\u0074fi\u006c\u0065\u0032\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_ede ,_df :=_ag .DecodeStream (_fca );if _df !=nil {_b .Log .Debug ("\u0044\u0065c\u006f\u0064\u0065 \u0065\u0072\u0072\u006f\u0072\u003a\u0020\u0025\u0076",_df );
return _df ;};_gea ,_df :=_ba .Parse (_bb .NewReader (_ede ));if _df !=nil {_b .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0070\u0061\u0072\u0073\u0069n\u0067\u0020\u0025\u0064\u0020\u0062\u0079\u0074\u0065\u0020f\u006f\u006e\u0074",len (_fca .Stream ));
return _df ;};_acea :=_cgd ;if len (_cfd )> 0{_dcge :=_gea .LookupRunes (_cfd );_acea =append (_acea ,_dcge ...);};_gea ,_df =_gea .SubsetKeepIndices (_acea );if _df !=nil {_b .Log .Debug ("\u0045R\u0052\u004f\u0052\u0020s\u0075\u0062\u0073\u0065\u0074t\u0069n\u0067 \u0066\u006f\u006e\u0074\u003a\u0020\u0025v",_df );
return _df ;};var _cfce _bb .Buffer ;_df =_gea .Write (&_cfce );if _df !=nil {_b .Log .Debug ("\u0045\u0052\u0052\u004fR \u0057\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076",_df );return _df ;};if _cfce .Len ()> len (_ede ){_b .Log .Debug ("\u0052\u0065-\u0077\u0072\u0069\u0074\u0074\u0065\u006e\u0020\u0066\u006f\u006e\u0074\u0020\u0069\u0073\u0020\u006c\u0061\u0072\u0067\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u002d\u0020\u0073\u006b\u0069\u0070");
return nil ;};_beg ,_df :=_ag .MakeStream (_cfce .Bytes (),_ag .NewFlateEncoder ());if _df !=nil {_b .Log .Debug ("\u0045\u0052\u0052\u004fR \u0057\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076",_df );return _df ;
};*_fca =*_beg ;_fca .Set ("\u004ce\u006e\u0067\u0074\u0068\u0031",_ag .MakeInteger (int64 (_cfce .Len ())));return nil ;};

// Append appends optimizers to the chain.
func (_ec *Chain )Append (optimizers ..._f .Optimizer ){_ec ._ff =append (_ec ._ff ,optimizers ...)};func _fd (_ed *_c .ContentStreamOperations )*_c .ContentStreamOperations {if _ed ==nil {return nil ;};_gca :=_c .ContentStreamOperations {};for _ ,_fdb :=range *_ed {switch _fdb .Operand {case "\u0042\u0044\u0043","\u0042\u004d\u0043","\u0045\u004d\u0043":continue ;
case "\u0054\u006d":if len (_fdb .Params )==6{if _cd ,_ffd :=_ag .GetNumbersAsFloat (_fdb .Params );_ffd ==nil {if _cd [0]==1&&_cd [1]==0&&_cd [2]==0&&_cd [3]==1{_fdb =&_c .ContentStreamOperation {Params :[]_ag .PdfObject {_fdb .Params [4],_fdb .Params [5]},Operand :"\u0054\u0064"};
};};};};_gca =append (_gca ,_fdb );};return &_gca ;};func _ceab (_dec string ,_gff []string )bool {for _ ,_eaab :=range _gff {if _dec ==_eaab {return true ;};};return false ;};

// New creates a optimizers chain from options.
func New (options Options )*Chain {_dbae :=new (Chain );if options .CleanFonts ||options .SubsetFonts {_dbae .Append (&CleanFonts {Subset :options .SubsetFonts });};if options .CleanContentstream {_dbae .Append (new (CleanContentstream ));};if options .ImageUpperPPI > 0{_fgec :=new (ImagePPI );
_fgec .ImageUpperPPI =options .ImageUpperPPI ;_dbae .Append (_fgec );};if options .ImageQuality > 0{_gbgd :=new (Image );_gbgd .ImageQuality =options .ImageQuality ;_dbae .Append (_gbgd );};if options .CombineDuplicateDirectObjects {_dbae .Append (new (CombineDuplicateDirectObjects ));
};if options .CombineDuplicateStreams {_dbae .Append (new (CombineDuplicateStreams ));};if options .CombineIdenticalIndirectObjects {_dbae .Append (new (CombineIdenticalIndirectObjects ));};if options .UseObjectStreams {_dbae .Append (new (ObjectStreams ));
};if options .CompressStreams {_dbae .Append (new (CompressStreams ));};if options .CleanUnusedResources {_dbae .Append (new (CleanUnusedResources ));};return _dbae ;};

// ImagePPI optimizes images by scaling images such that the PPI (pixels per inch) is never higher than ImageUpperPPI.
// TODO(a5i): Add support for inline images.
// It implements interface model.Optimizer.
type ImagePPI struct{ImageUpperPPI float64 ;};func _cdec (_bgc _ag .PdfObject ,_edba map[_ag .PdfObject ]struct{})error {if _cgc ,_egb :=_bgc .(*_ag .PdfIndirectObject );_egb {_edba [_bgc ]=struct{}{};_bbc :=_cdec (_cgc .PdfObject ,_edba );if _bbc !=nil {return _bbc ;
};return nil ;};if _agg ,_cea :=_bgc .(*_ag .PdfObjectStream );_cea {_edba [_agg ]=struct{}{};_cbe :=_cdec (_agg .PdfObjectDictionary ,_edba );if _cbe !=nil {return _cbe ;};return nil ;};if _fbb ,_feg :=_bgc .(*_ag .PdfObjectDictionary );_feg {for _ ,_bcf :=range _fbb .Keys (){_egaf :=_fbb .Get (_bcf );
_ =_egaf ;if _fbf ,_fadf :=_egaf .(*_ag .PdfObjectReference );_fadf {_egaf =_fbf .Resolve ();_fbb .Set (_bcf ,_egaf );};if _bcf !="\u0050\u0061\u0072\u0065\u006e\u0074"{if _bgae :=_cdec (_egaf ,_edba );_bgae !=nil {return _bgae ;};};};return nil ;};if _gcabd ,_eagc :=_bgc .(*_ag .PdfObjectArray );
_eagc {if _gcabd ==nil {return _add .New ("\u0061\u0072\u0072a\u0079\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};for _cac ,_bbd :=range _gcabd .Elements (){if _cbac ,_cfdd :=_bbd .(*_ag .PdfObjectReference );_cfdd {_bbd =_cbac .Resolve ();_gcabd .Set (_cac ,_bbd );
};if _gaa :=_cdec (_bbd ,_edba );_gaa !=nil {return _gaa ;};};return nil ;};return nil ;};func _bbfg (_cgfb []_ag .PdfObject )[]*imageInfo {_aceg :=_ag .PdfObjectName ("\u0053u\u0062\u0074\u0079\u0070\u0065");_daeb :=make (map[*_ag .PdfObjectStream ]struct{});
var _eaf []*imageInfo ;for _ ,_dcdg :=range _cgfb {_acdf ,_eadc :=_ag .GetStream (_dcdg );if !_eadc {continue ;};if _ ,_gaac :=_daeb [_acdf ];_gaac {continue ;};_daeb [_acdf ]=struct{}{};_eeab :=_acdf .PdfObjectDictionary .Get (_aceg );_efg ,_eadc :=_ag .GetName (_eeab );
if !_eadc ||string (*_efg )!="\u0049\u006d\u0061g\u0065"{continue ;};_abff :=&imageInfo {Stream :_acdf ,BitsPerComponent :8};if _eddg ,_eda :=_ag .GetIntVal (_acdf .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074"));
_eda {_abff .BitsPerComponent =_eddg ;};if _gffg ,_fae :=_ag .GetIntVal (_acdf .Get ("\u0057\u0069\u0064t\u0068"));_fae {_abff .Width =_gffg ;};if _ccb ,_dfa :=_ag .GetIntVal (_acdf .Get ("\u0048\u0065\u0069\u0067\u0068\u0074"));_dfa {_abff .Height =_ccb ;
};_aacb ,_fafb :=_f .NewPdfColorspaceFromPdfObject (_acdf .Get ("\u0043\u006f\u006c\u006f\u0072\u0053\u0070\u0061\u0063\u0065"));if _fafb !=nil {_b .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_fafb );continue ;};if _aacb ==nil {_cecd ,_dge :=_ag .GetName (_acdf .Get ("\u0046\u0069\u006c\u0074\u0065\u0072"));
if _dge {switch _cecd .String (){case "\u0043\u0043\u0049\u0054\u0054\u0046\u0061\u0078\u0044e\u0063\u006f\u0064\u0065","J\u0042\u0049\u0047\u0032\u0044\u0065\u0063\u006f\u0064\u0065":_aacb =_f .NewPdfColorspaceDeviceGray ();_abff .BitsPerComponent =1;
};};};switch _ddfc :=_aacb .(type ){case *_f .PdfColorspaceDeviceRGB :_abff .ColorComponents =3;case *_f .PdfColorspaceDeviceGray :_abff .ColorComponents =1;default:_b .Log .Debug ("\u004f\u0070\u0074\u0069\u006d\u0069\u007aa\u0074\u0069\u006fn\u0020\u0069\u0073 \u006e\u006ft\u0020\u0073\u0075\u0070\u0070\u006fr\u0074ed\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u0025\u0054\u0020\u002d\u0020\u0073\u006b\u0069\u0070",_ddfc );
continue ;};_eaf =append (_eaf ,_abff );};return _eaf ;};func _abdb (_ceg _ag .PdfObject )(string ,error ){_gfb :=_ag .TraceToDirectObject (_ceg );switch _aebb :=_gfb .(type ){case *_ag .PdfObjectString :return _aebb .Str (),nil ;case *_ag .PdfObjectStream :_adbgd ,_bgcc :=_ag .DecodeStream (_aebb );
if _bgcc !=nil {return "",_bgcc ;};return string (_adbgd ),nil ;};return "",_gc .Errorf ("\u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u0063\u006f\u006e\u0074\u0065\u006e\u0074\u0020\u0073\u0074\u0072e\u0061\u006d\u0020\u006f\u0062\u006a\u0065\u0063\u0074\u0020\u0068\u006f\u006c\u0064\u0065\u0072\u0020\u0028\u0025\u0054\u0029",_gfb );
};

// Optimize optimizes PDF objects to decrease PDF size.
func (_gba *CombineDuplicateDirectObjects )Optimize (objects []_ag .PdfObject )(_cgf []_ag .PdfObject ,_bdf error ){_ccag (objects );_gbca :=make (map[string ][]*_ag .PdfObjectDictionary );var _egff func (_bgfa *_ag .PdfObjectDictionary );_egff =func (_aag *_ag .PdfObjectDictionary ){for _ ,_agdg :=range _aag .Keys (){_aacg :=_aag .Get (_agdg );
if _dfc ,_bab :=_aacg .(*_ag .PdfObjectDictionary );_bab {if _ddb :=_dfc .Keys ();len (_ddb )==0{continue ;};_gedb :=_g .New ();_gedb .Write ([]byte (_dfc .WriteString ()));_abf :=string (_gedb .Sum (nil ));_gbca [_abf ]=append (_gbca [_abf ],_dfc );_egff (_dfc );
};};};for _ ,_cbgd :=range objects {_deb ,_fag :=_cbgd .(*_ag .PdfIndirectObject );if !_fag {continue ;};if _aec ,_fadg :=_deb .PdfObject .(*_ag .PdfObjectDictionary );_fadg {_egff (_aec );};};_ecfa :=make ([]_ag .PdfObject ,0,len (_gbca ));_eec :=make (map[_ag .PdfObject ]_ag .PdfObject );
for _ ,_adf :=range _gbca {if len (_adf )< 2{continue ;};_gbcb :=_ag .MakeDict ();_gbcb .Merge (_adf [0]);_abc :=_ag .MakeIndirectObject (_gbcb );_ecfa =append (_ecfa ,_abc );for _age :=0;_age < len (_adf );_age ++{_abe :=_adf [_age ];_eec [_abe ]=_abc ;
};};_cgf =make ([]_ag .PdfObject ,len (objects ));copy (_cgf ,objects );_cgf =append (_ecfa ,_cgf ...);_bafg (_cgf ,_eec );return _cgf ,nil ;};func _ffdd (_bac _ag .PdfObject )[]content {if _bac ==nil {return nil ;};_gbg ,_cccf :=_ag .GetArray (_bac );
if !_cccf {_b .Log .Debug ("\u0041\u006e\u006e\u006fts\u0020\u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0061\u0072\u0072\u0061\u0079");return nil ;};var _cee []content ;for _ ,_gad :=range _gbg .Elements (){_gcb ,_cad :=_ag .GetDict (_gad );if !_cad {_b .Log .Debug ("I\u0067\u006e\u006f\u0072\u0069\u006eg\u0020\u006e\u006f\u006e\u002d\u0064i\u0063\u0074\u0020\u0065\u006c\u0065\u006de\u006e\u0074\u0020\u0069\u006e\u0020\u0041\u006e\u006e\u006ft\u0073");
continue ;};_cedb ,_cad :=_ag .GetDict (_gcb .Get ("\u0041\u0050"));if !_cad {_b .Log .Debug ("\u004e\u006f\u0020\u0041P \u0065\u006e\u0074\u0072\u0079\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067");continue ;};_egd :=_ag .TraceToDirectObject (_cedb .Get ("\u004e"));
if _egd ==nil {_b .Log .Debug ("N\u006f\u0020\u004e\u0020en\u0074r\u0079\u0020\u002d\u0020\u0073k\u0069\u0070\u0070\u0069\u006e\u0067");continue ;};var _gdf *_ag .PdfObjectStream ;switch _ccfc :=_egd .(type ){case *_ag .PdfObjectDictionary :_egfd ,_de :=_ag .GetName (_gcb .Get ("\u0041\u0053"));
if !_de {_b .Log .Debug ("\u004e\u006f\u0020\u0041S \u0065\u006e\u0074\u0072\u0079\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067");continue ;};_gdf ,_de =_ag .GetStream (_ccfc .Get (*_egfd ));if !_de {_b .Log .Debug ("\u0046o\u0072\u006d\u0020\u006eo\u0074\u0020\u0066\u006f\u0075n\u0064 \u002d \u0073\u006b\u0069\u0070\u0070\u0069\u006eg");
continue ;};case *_ag .PdfObjectStream :_gdf =_ccfc ;};if _gdf ==nil {_b .Log .Debug ("\u0046\u006f\u0072m\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0028n\u0069\u006c\u0029\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067");
continue ;};_affc ,_aae :=_f .NewXObjectFormFromStream (_gdf );if _aae !=nil {_b .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020l\u006f\u0061\u0064\u0069\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_aae );
continue ;};_ecf ,_aae :=_affc .GetContentStream ();if _aae !=nil {_b .Log .Debug ("E\u0072\u0072\u006f\u0072\u0020\u0064e\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0063\u006fn\u0074\u0065\u006et\u0073:\u0020\u0025\u0076",_aae );continue ;};_cee =append (_cee ,content {_eaga :string (_ecf ),_ggb :_affc .Resources });
};return _cee ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_cfb *Image )Optimize (objects []_ag .PdfObject )(_gabe []_ag .PdfObject ,_caeb error ){if _cfb .ImageQuality <=0{return objects ,nil ;};_ffed :=_bbfg (objects );if len (_ffed )==0{return objects ,nil ;};_bgfb :=make (map[_ag .PdfObject ]_ag .PdfObject );
_bacg :=make (map[_ag .PdfObject ]struct{});for _ ,_aggc :=range _ffed {_gaag :=_aggc .Stream .Get ("\u0053\u004d\u0061s\u006b");_bacg [_gaag ]=struct{}{};};for _ccfe ,_gade :=range _ffed {_eadf :=_gade .Stream ;if _ ,_ddbe :=_bacg [_eadf ];_ddbe {continue ;
};_egc ,_dcad :=_f .NewXObjectImageFromStream (_eadf );if _dcad !=nil {_b .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_dcad );continue ;};switch _egc .Filter .(type ){case *_ag .JBIG2Encoder :continue ;case *_ag .CCITTFaxEncoder :continue ;
};_fadfa ,_dcad :=_egc .ToImage ();if _dcad !=nil {_b .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_dcad );continue ;};_dfag :=_ag .NewDCTEncoder ();_dfag .ColorComponents =_fadfa .ColorComponents ;_dfag .Quality =_cfb .ImageQuality ;
_dfag .BitsPerComponent =_gade .BitsPerComponent ;_dfag .Width =_gade .Width ;_dfag .Height =_gade .Height ;_dbc ,_dcad :=_dfag .EncodeBytes (_fadfa .Data );if _dcad !=nil {_b .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_dcad );
continue ;};var _gcd _ag .StreamEncoder ;_gcd =_dfag ;{_bbaf :=_ag .NewFlateEncoder ();_acg :=_ag .NewMultiEncoder ();_acg .AddEncoder (_bbaf );_acg .AddEncoder (_dfag );_afd ,_eeabc :=_acg .EncodeBytes (_fadfa .Data );if _eeabc !=nil {_b .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_eeabc );
continue ;};if len (_afd )< len (_dbc ){_b .Log .Trace ("\u004d\u0075\u006c\u0074\u0069\u0020\u0065\u006e\u0063\u0020\u0069\u006d\u0070\u0072\u006f\u0076\u0065\u0073\u003a\u0020\u0025\u0064\u0020\u0074o\u0020\u0025\u0064\u0020\u0028o\u0072\u0069g\u0020\u0025\u0064\u0029",len (_dbc ),len (_afd ),len (_eadf .Stream ));
_dbc =_afd ;_gcd =_acg ;};};_ebge :=len (_eadf .Stream );if _ebge < len (_dbc ){continue ;};_addg :=&_ag .PdfObjectStream {Stream :_dbc };_addg .PdfObjectReference =_eadf .PdfObjectReference ;_addg .PdfObjectDictionary =_ag .MakeDict ();_addg .Merge (_eadf .PdfObjectDictionary );
_addg .Merge (_gcd .MakeStreamDict ());_addg .Set ("\u004c\u0065\u006e\u0067\u0074\u0068",_ag .MakeInteger (int64 (len (_dbc ))));_bgfb [_eadf ]=_addg ;_ffed [_ccfe ].Stream =_addg ;};_gabe =make ([]_ag .PdfObject ,len (objects ));copy (_gabe ,objects );
_bafg (_gabe ,_bgfb );return _gabe ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_bbec *CleanFonts )Optimize (objects []_ag .PdfObject )(_agb []_ag .PdfObject ,_beb error ){var _gbc map[*_ag .PdfObjectStream ]struct{};if _bbec .Subset {var _gab error ;_gbc ,_gab =_bcb (objects );if _gab !=nil {_b .Log .Debug ("\u0045\u0052\u0052\u004fR\u003a\u0020\u0046\u0061\u0069\u006c\u0065\u0064\u0020\u0073u\u0062s\u0065\u0074\u0074\u0069\u006e\u0067\u003a \u0025\u0076",_gab );
return nil ,_gab ;};};for _ ,_gde :=range objects {_fge ,_gbb :=_ag .GetStream (_gde );if !_gbb {continue ;};if _ ,_aaf :=_gbc [_fge ];_aaf {continue ;};_aff ,_cce :=_ag .NewEncoderFromStream (_fge );if _cce !=nil {_b .Log .Debug ("\u0045\u0052RO\u0052\u0020\u0067e\u0074\u0074\u0069\u006eg e\u006eco\u0064\u0065\u0072\u003a\u0020\u0025\u0076 -\u0020\u0069\u0067\u006e\u006f\u0072\u0069n\u0067",_cce );
continue ;};_daff ,_cce :=_aff .DecodeStream (_fge );if _cce !=nil {_b .Log .Debug ("\u0044\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0065r\u0072\u006f\u0072\u0020\u003a\u0020\u0025v\u0020\u002d\u0020\u0069\u0067\u006e\u006f\u0072\u0069\u006e\u0067",_cce );
continue ;};if len (_daff )< 4{continue ;};_bce :=string (_daff [:4]);if _bce =="\u004f\u0054\u0054\u004f"{continue ;};if _bce !="\u0000\u0001\u0000\u0000"&&_bce !="\u0074\u0072\u0075\u0065"{continue ;};_eag ,_cce :=_ba .Parse (_bb .NewReader (_daff ));
if _cce !=nil {_b .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020P\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_cce );continue ;};_cce =_eag .Optimize ();
if _cce !=nil {_b .Log .Debug ("\u0045\u0052RO\u0052\u0020\u004fp\u0074\u0069\u006d\u0069zin\u0067 f\u006f\u006e\u0074\u003a\u0020\u0025\u0076 -\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067",_cce );continue ;};var _eac _bb .Buffer ;_cce =_eag .Write (&_eac );
if _cce !=nil {_b .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020W\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_cce );continue ;};if _eac .Len ()> len (_daff ){_b .Log .Debug ("\u0052\u0065-\u0077\u0072\u0069\u0074\u0074\u0065\u006e\u0020\u0066\u006f\u006e\u0074\u0020\u0069\u0073\u0020\u006c\u0061\u0072\u0067\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u002d\u0020\u0073\u006b\u0069\u0070");
continue ;};_cef ,_cce :=_ag .MakeStream (_eac .Bytes (),_ag .NewFlateEncoder ());if _cce !=nil {continue ;};*_fge =*_cef ;_fge .Set ("\u004ce\u006e\u0067\u0074\u0068\u0031",_ag .MakeInteger (int64 (_eac .Len ())));};return objects ,nil ;};type imageInfo struct{BitsPerComponent int ;
ColorComponents int ;Width int ;Height int ;Stream *_ag .PdfObjectStream ;PPI float64 ;};

// CombineDuplicateStreams combines duplicated streams by its data hash.
// It implements interface model.Optimizer.
type CombineDuplicateStreams struct{};

// CleanFonts cleans up embedded fonts, reducing font sizes.
type CleanFonts struct{

// Subset embedded fonts if encountered (if true).
// Otherwise attempts to reduce the font program.
Subset bool ;};func _da (_ge *_ag .PdfObjectStream )error {_gb ,_baf :=_ag .DecodeStream (_ge );if _baf !=nil {return _baf ;};_fg :=_c .NewContentStreamParser (string (_gb ));_egf ,_baf :=_fg .Parse ();if _baf !=nil {return _baf ;};_egf =_fd (_egf );_cf :=_egf .Bytes ();
if len (_cf )>=len (_gb ){return nil ;};_ega ,_baf :=_ag .MakeStream (_egf .Bytes (),_ag .NewFlateEncoder ());if _baf !=nil {return _baf ;};_ge .Stream =_ega .Stream ;_ge .Merge (_ega .PdfObjectDictionary );return nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_fe *Chain )Optimize (objects []_ag .PdfObject )(_bg []_ag .PdfObject ,_ef error ){_ece :=objects ;for _ ,_bgd :=range _fe ._ff {_cc ,_ea :=_bgd .Optimize (_ece );if _ea !=nil {_b .Log .Debug ("\u0045\u0052\u0052OR\u0020\u004f\u0070\u0074\u0069\u006d\u0069\u007a\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u002b\u0076",_ea );
continue ;};_ece =_cc ;};return _ece ,nil ;};func _dgea (_fefc []_ag .PdfObject )objectStructure {_dcdgb :=objectStructure {};_ddde :=false ;for _ ,_ddac :=range _fefc {switch _agdb :=_ddac .(type ){case *_ag .PdfIndirectObject :_becb ,_fdag :=_ag .GetDict (_agdb );
if !_fdag {continue ;};_ggda ,_fdag :=_ag .GetName (_becb .Get ("\u0054\u0079\u0070\u0065"));if !_fdag {continue ;};switch _ggda .String (){case "\u0043a\u0074\u0061\u006c\u006f\u0067":_dcdgb ._dcff =_becb ;_ddde =true ;};};if _ddde {break ;};};if !_ddde {return _dcdgb ;
};_aab ,_fgfg :=_ag .GetDict (_dcdgb ._dcff .Get ("\u0050\u0061\u0067e\u0073"));if !_fgfg {return _dcdgb ;};_dcdgb ._gbe =_aab ;_eaff ,_fgfg :=_ag .GetArray (_aab .Get ("\u004b\u0069\u0064\u0073"));if !_fgfg {return _dcdgb ;};for _ ,_bgcbc :=range _eaff .Elements (){_ecca ,_abgad :=_ag .GetIndirect (_bgcbc );
if !_abgad {break ;};_dcdgb ._bffg =append (_dcdgb ._bffg ,_ecca );};return _dcdgb ;};func _bcd (_fafca _ag .PdfObject )(_ebga string ,_faeb []_ag .PdfObject ){var _edag _bb .Buffer ;switch _dad :=_fafca .(type ){case *_ag .PdfIndirectObject :_faeb =append (_faeb ,_dad );
_fafca =_dad .PdfObject ;};switch _dacc :=_fafca .(type ){case *_ag .PdfObjectStream :if _cagf ,_dcec :=_ag .DecodeStream (_dacc );_dcec ==nil {_edag .Write (_cagf );_faeb =append (_faeb ,_dacc );};case *_ag .PdfObjectArray :for _ ,_edbag :=range _dacc .Elements (){switch _gebe :=_edbag .(type ){case *_ag .PdfObjectStream :if _efd ,_faab :=_ag .DecodeStream (_gebe );
_faab ==nil {_edag .Write (_efd );_faeb =append (_faeb ,_gebe );};};};};return _edag .String (),_faeb ;};

// CleanContentstream cleans up redundant operands in content streams, including Page and XObject Form
// contents. This process includes:
// 1. Marked content operators are removed.
// 2. Some operands are simplified (shorter form).
// TODO: Add more reduction methods and improving the methods for identifying unnecessary operands.
type CleanContentstream struct{};func _daa (_dgb *_f .Image ,_gcg float64 )(*_f .Image ,error ){_bbcf ,_ggca :=_dgb .ToGoImage ();if _ggca !=nil {return nil ,_ggca ;};var _fdf _acd .Image ;_ecae ,_ddag :=_bbcf .(*_acd .Monochrome );if _ddag {if _ggca =_ecae .ResolveDecode ();
_ggca !=nil {return nil ,_ggca ;};_fdf ,_ggca =_ecae .Scale (_gcg );if _ggca !=nil {return nil ,_ggca ;};}else {_agc :=int (_ac .RoundToEven (float64 (_dgb .Width )*_gcg ));_bdgc :=int (_ac .RoundToEven (float64 (_dgb .Height )*_gcg ));_fdf ,_ggca =_acd .NewImage (_agc ,_bdgc ,int (_dgb .BitsPerComponent ),_dgb .ColorComponents ,nil ,nil ,nil );
if _ggca !=nil {return nil ,_ggca ;};_e .CatmullRom .Scale (_fdf ,_fdf .Bounds (),_bbcf ,_bbcf .Bounds (),_e .Over ,&_e .Options {});};_abge :=_fdf .Base ();_afb :=&_f .Image {Width :int64 (_abge .Width ),Height :int64 (_abge .Height ),BitsPerComponent :int64 (_abge .BitsPerComponent ),ColorComponents :_abge .ColorComponents ,Data :_abge .Data };
_afb .SetDecode (_abge .Decode );_afb .SetAlpha (_abge .Alpha );return _afb ,nil ;};

// CombineDuplicateDirectObjects combines duplicated direct objects by its data hash.
// It implements interface model.Optimizer.
type CombineDuplicateDirectObjects struct{};

// Optimize optimizes PDF objects to decrease PDF size.
func (_ddd *ImagePPI )Optimize (objects []_ag .PdfObject )(_gaf []_ag .PdfObject ,_ada error ){if _ddd .ImageUpperPPI <=0{return objects ,nil ;};_cacf :=_bbfg (objects );if len (_cacf )==0{return objects ,nil ;};_cfcb :=make (map[_ag .PdfObject ]struct{});
for _ ,_fggc :=range _cacf {_eeea :=_fggc .Stream .PdfObjectDictionary .Get ("\u0053\u004d\u0061s\u006b");_cfcb [_eeea ]=struct{}{};};_aef :=make (map[*_ag .PdfObjectStream ]*imageInfo );for _ ,_febd :=range _cacf {_aef [_febd .Stream ]=_febd ;};var _caee *_ag .PdfObjectDictionary ;
for _ ,_efec :=range objects {if _dddd ,_efad :=_ag .GetDict (_efec );_caee ==nil &&_efad {if _cbge ,_gda :=_ag .GetName (_dddd .Get ("\u0054\u0079\u0070\u0065"));_gda &&*_cbge =="\u0043a\u0074\u0061\u006c\u006f\u0067"{_caee =_dddd ;};};};if _caee ==nil {return objects ,nil ;
};_bff ,_cgfd :=_ag .GetDict (_caee .Get ("\u0050\u0061\u0067e\u0073"));if !_cgfd {return objects ,nil ;};_adg ,_ebc :=_ag .GetArray (_bff .Get ("\u004b\u0069\u0064\u0073"));if !_ebc {return objects ,nil ;};for _ ,_fabf :=range _adg .Elements (){_efb :=make (map[string ]*imageInfo );
_dag ,_acabe :=_ag .GetDict (_fabf );if !_acabe {continue ;};_bfa ,_ :=_bcd (_dag .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));if len (_bfa )==0{continue ;};_cceg ,_gadb :=_ag .GetDict (_dag .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"));
if !_gadb {continue ;};_baag ,_eab :=_f .NewPdfPageResourcesFromDict (_cceg );if _eab !=nil {_b .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0072\u0065\u0073\u006f\u0075\u0072\u0063\u0065\u0073\u0020-\u0020\u0069\u0067\u006e\u006fr\u0069\u006eg\u003a\u0020\u0025\u0076",_eab );
continue ;};_dfg ,_cgca :=_ag .GetDict (_cceg .Get ("\u0058O\u0062\u006a\u0065\u0063\u0074"));if !_cgca {continue ;};_ecef :=_dfg .Keys ();for _ ,_cdce :=range _ecef {if _eeadg ,_fdfb :=_ag .GetStream (_dfg .Get (_cdce ));_fdfb {if _bbcfc ,_fdab :=_aef [_eeadg ];
_fdab {_efb [string (_cdce )]=_bbcfc ;};};};_dgd :=_c .NewContentStreamParser (_bfa );_agae ,_eab :=_dgd .Parse ();if _eab !=nil {_b .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_eab );continue ;};_gdg :=_c .NewContentStreamProcessor (*_agae );
_gdg .AddHandler (_c .HandlerConditionEnumAllOperands ,"",func (_aaga *_c .ContentStreamOperation ,_ffeg _c .GraphicsState ,_bceg *_f .PdfPageResources )error {switch _aaga .Operand {case "\u0044\u006f":if len (_aaga .Params )!=1{_b .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020\u0049\u0067\u006e\u006f\u0072\u0069\u006e\u0067\u0020\u0044\u006f\u0020w\u0069\u0074\u0068\u0020\u006c\u0065\u006e\u0028\u0070\u0061ra\u006d\u0073\u0029 \u0021=\u0020\u0031");
return nil ;};_fec ,_fefd :=_ag .GetName (_aaga .Params [0]);if !_fefd {_b .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0049\u0067\u006e\u006f\u0072\u0069\u006e\u0067\u0020\u0044\u006f\u0020\u0077\u0069\u0074\u0068\u0020\u006e\u006f\u006e\u0020\u004e\u0061\u006d\u0065\u0020p\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072");
return nil ;};if _bda ,_gafg :=_efb [string (*_fec )];_gafg {_cfbe :=_ffeg .CTM .ScalingFactorX ();_dab :=_ffeg .CTM .ScalingFactorY ();_eggf ,_gbbc :=_cfbe /72.0,_dab /72.0;_eddd ,_gcgb :=float64 (_bda .Width )/_eggf ,float64 (_bda .Height )/_gbbc ;if _eggf ==0||_gbbc ==0{_eddd =72.0;
_gcgb =72.0;};_bda .PPI =_ac .Max (_bda .PPI ,_eddd );_bda .PPI =_ac .Max (_bda .PPI ,_gcgb );};};return nil ;});_eab =_gdg .Process (_baag );if _eab !=nil {_b .Log .Debug ("E\u0052\u0052\u004f\u0052 p\u0072o\u0063\u0065\u0073\u0073\u0069n\u0067\u003a\u0020\u0025\u002b\u0076",_eab );
continue ;};};for _ ,_bceb :=range _cacf {if _ ,_cgbd :=_cfcb [_bceb .Stream ];_cgbd {continue ;};if _bceb .PPI <=_ddd .ImageUpperPPI {continue ;};_cced ,_acdfg :=_f .NewXObjectImageFromStream (_bceb .Stream );if _acdfg !=nil {_b .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_acdfg );
continue ;};var _bbg imageModifications ;_bbg .Scale =_ddd .ImageUpperPPI /_bceb .PPI ;if _bceb .BitsPerComponent ==1&&_bceb .ColorComponents ==1{_agaf :=_ac .Round (_bceb .PPI /_ddd .ImageUpperPPI );_acabg :=_acd .NextPowerOf2 (uint (_agaf ));if _acd .InDelta (float64 (_acabg ),1/_bbg .Scale ,0.3){_bbg .Scale =float64 (1)/float64 (_acabg );
};if _ ,_gdfg :=_cced .Filter .(*_ag .JBIG2Encoder );!_gdfg {_bbg .Encoding =_ag .NewJBIG2Encoder ();};};if _acdfg =_ggba (_cced ,_bbg );_acdfg !=nil {_b .Log .Debug ("\u0045\u0072\u0072\u006f\u0072 \u0073\u0063\u0061\u006c\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u006be\u0065\u0070\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0073",_acdfg );
continue ;};_bbg .Encoding =nil ;if _gdac ,_gcga :=_ag .GetStream (_bceb .Stream .PdfObjectDictionary .Get ("\u0053\u004d\u0061s\u006b"));_gcga {_bbff ,_afcg :=_f .NewXObjectImageFromStream (_gdac );if _afcg !=nil {_b .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_afcg );
continue ;};if _afcg =_ggba (_bbff ,_bbg );_afcg !=nil {_b .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_afcg );continue ;};};};return objects ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_dbfe *CompressStreams )Optimize (objects []_ag .PdfObject )(_abga []_ag .PdfObject ,_cdcf error ){_abga =make ([]_ag .PdfObject ,len (objects ));copy (_abga ,objects );for _ ,_cbc :=range objects {_bdd ,_dacg :=_ag .GetStream (_cbc );if !_dacg {continue ;
};if _cbgde :=_bdd .Get ("\u0046\u0069\u006c\u0074\u0065\u0072");_cbgde !=nil {if _ ,_gfe :=_ag .GetName (_cbgde );_gfe {continue ;};if _cecc ,_gfc :=_ag .GetArray (_cbgde );_gfc &&_cecc .Len ()> 0{continue ;};};_ddg :=_ag .NewFlateEncoder ();var _aaa []byte ;
_aaa ,_cdcf =_ddg .EncodeBytes (_bdd .Stream );if _cdcf !=nil {return _abga ,_cdcf ;};_adc :=_ddg .MakeStreamDict ();if len (_aaa )+len (_adc .WriteString ())< len (_bdd .Stream ){_bdd .Stream =_aaa ;_bdd .PdfObjectDictionary .Merge (_adc );_bdd .PdfObjectDictionary .Set ("\u004c\u0065\u006e\u0067\u0074\u0068",_ag .MakeInteger (int64 (len (_bdd .Stream ))));
};};return _abga ,nil ;};

// CompressStreams compresses uncompressed streams.
// It implements interface model.Optimizer.
type CompressStreams struct{};

// CombineIdenticalIndirectObjects combines identical indirect objects.
// It implements interface model.Optimizer.
type CombineIdenticalIndirectObjects struct{};

// ObjectStreams groups PDF objects to object streams.
// It implements interface model.Optimizer.
type ObjectStreams struct{};func _ggba (_dee *_f .XObjectImage ,_cca imageModifications )error {_edga ,_abbd :=_dee .ToImage ();if _abbd !=nil {return _abbd ;};if _cca .Scale !=0{_edga ,_abbd =_daa (_edga ,_cca .Scale );if _abbd !=nil {return _abbd ;};
};if _cca .Encoding !=nil {_dee .Filter =_cca .Encoding ;};_dee .Decode =nil ;switch _dcc :=_dee .Filter .(type ){case *_ag .FlateEncoder :if _dcc .Predictor !=1&&_dcc .Predictor !=11{_dcc .Predictor =1;};};if _abbd =_dee .SetImage (_edga ,nil );_abbd !=nil {_b .Log .Debug ("\u0045\u0072\u0072or\u0020\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0076",_abbd );
return _abbd ;};_dee .ToPdfObject ();return nil ;};func _eeef (_fga []*_ag .PdfIndirectObject )map[string ][]string {_dafa :=map[string ][]string {};for _ ,_fcec :=range _fga {_bga ,_edd :=_ag .GetDict (_fcec .PdfObject );if !_edd {continue ;};_fgbd :=_bga .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073");
_fef :=_ag .TraceToDirectObject (_fgbd );_eeee :="";if _dgfa ,_fgg :=_fef .(*_ag .PdfObjectArray );_fgg {var _fgcb []string ;for _ ,_gdb :=range _dgfa .Elements (){_abg ,_dd :=_abdb (_gdb );if _dd !=nil {continue ;};_fgcb =append (_fgcb ,_abg );};_eeee =_ad .Join (_fgcb ,"\u0020");
};if _bd ,_fcg :=_fef .(*_ag .PdfObjectStream );_fcg {_ggc ,_ccef :=_ag .DecodeStream (_bd );if _ccef !=nil {continue ;};_eeee =string (_ggc );};_bdg :=_c .NewContentStreamParser (_eeee );_bbef ,_ebe :=_bdg .Parse ();if _ebe !=nil {continue ;};for _ ,_fefe :=range *_bbef {_deg :=_fefe .Operand ;
_cadg :=_fefe .Params ;switch _deg {case "\u0044\u006f":_dbe :=_cadg [0].String ();if _ ,_bfd :=_dafa ["\u0058O\u0062\u006a\u0065\u0063\u0074"];!_bfd {_dafa ["\u0058O\u0062\u006a\u0065\u0063\u0074"]=[]string {_dbe };}else {_dafa ["\u0058O\u0062\u006a\u0065\u0063\u0074"]=append (_dafa ["\u0058O\u0062\u006a\u0065\u0063\u0074"],_dbe );
};case "\u0054\u0066":_cgb :=_cadg [0].String ();if _ ,_bfe :=_dafa ["\u0046\u006f\u006e\u0074"];!_bfe {_dafa ["\u0046\u006f\u006e\u0074"]=[]string {_cgb };}else {_dafa ["\u0046\u006f\u006e\u0074"]=append (_dafa ["\u0046\u006f\u006e\u0074"],_cgb );};case "\u0067\u0073":_geb :=_cadg [0].String ();
if _ ,_dda :=_dafa ["\u0045x\u0074\u0047\u0053\u0074\u0061\u0074e"];!_dda {_dafa ["\u0045x\u0074\u0047\u0053\u0074\u0061\u0074e"]=[]string {_geb };}else {_dafa ["\u0045x\u0074\u0047\u0053\u0074\u0061\u0074e"]=append (_dafa ["\u0045x\u0074\u0047\u0053\u0074\u0061\u0074e"],_geb );
};};};};return _dafa ;};type objectStructure struct{_dcff *_ag .PdfObjectDictionary ;_gbe *_ag .PdfObjectDictionary ;_bffg []*_ag .PdfIndirectObject ;};func _ccag (_fdbe []_ag .PdfObject ){for _cgeb ,_ecad :=range _fdbe {switch _fbd :=_ecad .(type ){case *_ag .PdfIndirectObject :_fbd .ObjectNumber =int64 (_cgeb +1);
_fbd .GenerationNumber =0;case *_ag .PdfObjectStream :_fbd .ObjectNumber =int64 (_cgeb +1);_fbd .GenerationNumber =0;case *_ag .PdfObjectStreams :_fbd .ObjectNumber =int64 (_cgeb +1);_fbd .GenerationNumber =0;};};};

// Optimize optimizes PDF objects to decrease PDF size.
func (_fegf *ObjectStreams )Optimize (objects []_ag .PdfObject )(_ffdc []_ag .PdfObject ,_bdaf error ){_ccgd :=&_ag .PdfObjectStreams {};_gaaga :=make ([]_ag .PdfObject ,0,len (objects ));for _ ,_dgfe :=range objects {if _bgda ,_acad :=_dgfe .(*_ag .PdfIndirectObject );
_acad &&_bgda .GenerationNumber ==0{_ccgd .Append (_dgfe );}else {_gaaga =append (_gaaga ,_dgfe );};};if _ccgd .Len ()==0{return _gaaga ,nil ;};_ffdc =make ([]_ag .PdfObject ,0,len (_gaaga )+_ccgd .Len ()+1);if _ccgd .Len ()> 1{_ffdc =append (_ffdc ,_ccgd );
};_ffdc =append (_ffdc ,_ccgd .Elements ()...);_ffdc =append (_ffdc ,_gaaga ...);return _ffdc ,nil ;};func _bafg (_affdc []_ag .PdfObject ,_bgg map[_ag .PdfObject ]_ag .PdfObject ){if len (_bgg )==0{return ;};for _ggd ,_aafb :=range _affdc {if _ggf ,_bae :=_bgg [_aafb ];
_bae {_affdc [_ggd ]=_ggf ;continue ;};_bgg [_aafb ]=_aafb ;switch _daad :=_aafb .(type ){case *_ag .PdfObjectArray :_gfga :=make ([]_ag .PdfObject ,_daad .Len ());copy (_gfga ,_daad .Elements ());_bafg (_gfga ,_bgg );for _bbab ,_bcc :=range _gfga {_daad .Set (_bbab ,_bcc );
};case *_ag .PdfObjectStreams :_bafg (_daad .Elements (),_bgg );case *_ag .PdfObjectStream :_dfae :=[]_ag .PdfObject {_daad .PdfObjectDictionary };_bafg (_dfae ,_bgg );_daad .PdfObjectDictionary =_dfae [0].(*_ag .PdfObjectDictionary );case *_ag .PdfObjectDictionary :_aee :=_daad .Keys ();
_fdbb :=make ([]_ag .PdfObject ,len (_aee ));for _fafc ,_ebcb :=range _aee {_fdbb [_fafc ]=_daad .Get (_ebcb );};_bafg (_fdbb ,_bgg );for _gfeg ,_aeec :=range _aee {_daad .Set (_aeec ,_fdbb [_gfeg ]);};case *_ag .PdfIndirectObject :_fbed :=[]_ag .PdfObject {_daad .PdfObject };
_bafg (_fbed ,_bgg );_daad .PdfObject =_fbed [0];};};};

// Chain allows to use sequence of optimizers.
// It implements interface model.Optimizer.
type Chain struct{_ff []_f .Optimizer };

// GetOptimizers gets the list of optimizers in chain `c`.
func (_cb *Chain )GetOptimizers ()[]_f .Optimizer {return _cb ._ff };

// CleanUnusedResources represents an optimizer used to clean unused resources.
type CleanUnusedResources struct{};func _agbe (_aed []_ag .PdfObject )(map[_ag .PdfObject ]struct{},error ){_edg :=_dgea (_aed );_dfb :=_edg ._bffg ;_cbf :=make (map[_ag .PdfObject ]struct{});_aaef :=_eeef (_dfb );for _ ,_dcda :=range _dfb {_efa ,_ebg :=_ag .GetDict (_dcda .PdfObject );
if !_ebg {continue ;};_aeb ,_ebg :=_ag .GetDict (_efa .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"));if !_ebg {continue ;};_acc :=_aaef ["\u0058O\u0062\u006a\u0065\u0063\u0074"];_gce ,_ebg :=_ag .GetDict (_aeb .Get ("\u0058O\u0062\u006a\u0065\u0063\u0074"));
if _ebg {_bgf :=_cdd (_gce );for _ ,_gcec :=range _bgf {if _ceab (_gcec ,_acc ){continue ;};_gcaf :=*_ag .MakeName (_gcec );_adbg :=_gce .Get (_gcaf );_cbf [_adbg ]=struct{}{};_gce .Remove (_gcaf );_dgac :=_cdec (_adbg ,_cbf );if _dgac !=nil {_b .Log .Debug ("\u0066\u0061\u0069\u006ce\u0064\u0020\u0074\u006f\u0020\u0074\u0072\u0061\u0076\u0065r\u0073e\u0020\u006f\u0062\u006a\u0065\u0063\u0074 \u0025\u0076",_adbg );
};};};_cfdc ,_ebg :=_ag .GetDict (_aeb .Get ("\u0046\u006f\u006e\u0074"));_fade :=_aaef ["\u0046\u006f\u006e\u0074"];if _ebg {_dgc :=_cdd (_cfdc );for _ ,_gefe :=range _dgc {if _ceab (_gefe ,_fade ){continue ;};_cdb :=*_ag .MakeName (_gefe );_fda :=_cfdc .Get (_cdb );
_cbf [_fda ]=struct{}{};_cfdc .Remove (_cdb );_bfb :=_cdec (_fda ,_cbf );if _bfb !=nil {_b .Log .Debug ("\u0046\u0061i\u006c\u0065\u0064\u0020\u0074\u006f\u0020\u0074\u0072\u0061\u0076\u0065\u0072\u0073\u0065\u0020\u006f\u0062\u006a\u0065\u0063\u0074 %\u0076\u000a",_fda );
};};};_def ,_ebg :=_ag .GetDict (_aeb .Get ("\u0045x\u0074\u0047\u0053\u0074\u0061\u0074e"));if _ebg {_efeg :=_cdd (_def );_cga :=_aaef ["\u0045x\u0074\u0047\u0053\u0074\u0061\u0074e"];for _ ,_agf :=range _efeg {if _ceab (_agf ,_cga ){continue ;};_faded :=*_ag .MakeName (_agf );
_ebf :=_def .Get (_faded );_cbf [_ebf ]=struct{}{};_def .Remove (_faded );_gac :=_cdec (_ebf ,_cbf );if _gac !=nil {_b .Log .Debug ("\u0066\u0061i\u006c\u0065\u0064\u0020\u0074\u006f\u0020\u0074\u0072\u0061\u0076\u0065\u0072\u0073\u0065\u0020\u006f\u0062\u006a\u0065\u0063\u0074 %\u0076\u000a",_ebf );
};};};};return _cbf ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_ade *CleanContentstream )Optimize (objects []_ag .PdfObject )(_fc []_ag .PdfObject ,_cfe error ){_cba :=map[*_ag .PdfObjectStream ]struct{}{};var _ce []*_ag .PdfObjectStream ;_dc :=func (_dcd *_ag .PdfObjectStream ){if _ ,_af :=_cba [_dcd ];!_af {_cba [_dcd ]=struct{}{};
_ce =append (_ce ,_dcd );};};_cfc :=map[_ag .PdfObject ]bool {};_gbf :=map[_ag .PdfObject ]bool {};for _ ,_ged :=range objects {switch _dcg :=_ged .(type ){case *_ag .PdfIndirectObject :switch _ee :=_dcg .PdfObject .(type ){case *_ag .PdfObjectDictionary :if _gf ,_eb :=_ag .GetName (_ee .Get ("\u0054\u0079\u0070\u0065"));
!_eb ||_gf .String ()!="\u0050\u0061\u0067\u0065"{continue ;};if _eca ,_ege :=_ag .GetStream (_ee .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));_ege {_dc (_eca );}else if _db ,_cg :=_ag .GetArray (_ee .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));
_cg {var _cbg []*_ag .PdfObjectStream ;for _ ,_ccc :=range _db .Elements (){if _eea ,_afe :=_ag .GetStream (_ccc );_afe {_cbg =append (_cbg ,_eea );};};if len (_cbg )> 0{var _gfa _bb .Buffer ;for _ ,_fgd :=range _cbg {if _gg ,_bbf :=_ag .DecodeStream (_fgd );
_bbf ==nil {_gfa .Write (_gg );};_cfc [_fgd ]=true ;};_bc ,_ced :=_ag .MakeStream (_gfa .Bytes (),_ag .NewFlateEncoder ());if _ced !=nil {return nil ,_ced ;};_gbf [_bc ]=true ;_ee .Set ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073",_bc );_dc (_bc );
};};};case *_ag .PdfObjectStream :if _cdc ,_dg :=_ag .GetName (_dcg .Get ("\u0054\u0079\u0070\u0065"));!_dg ||_cdc .String ()!="\u0058O\u0062\u006a\u0065\u0063\u0074"{continue ;};if _fgb ,_ccg :=_ag .GetName (_dcg .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));
!_ccg ||_fgb .String ()!="\u0046\u006f\u0072\u006d"{continue ;};_dc (_dcg );};};for _ ,_dgg :=range _ce {_cfe =_da (_dgg );if _cfe !=nil {return nil ,_cfe ;};};_fc =nil ;for _ ,_cdf :=range objects {if _cfc [_cdf ]{continue ;};_fc =append (_fc ,_cdf );
};for _fa :=range _gbf {_fc =append (_fc ,_fa );};return _fc ,nil ;};

// Image optimizes images by rewrite images into JPEG format with quality equals to ImageQuality.
// TODO(a5i): Add support for inline images.
// It implements interface model.Optimizer.
type Image struct{ImageQuality int ;};

// Optimize implements Optimizer interface.
func (_bba *CleanUnusedResources )Optimize (objects []_ag .PdfObject )(_eff []_ag .PdfObject ,_gcac error ){_dcf ,_gcac :=_agbe (objects );if _gcac !=nil {return nil ,_gcac ;};_ecfe :=[]_ag .PdfObject {};for _ ,_cec :=range objects {_ ,_gag :=_dcf [_cec ];
if _gag {continue ;};_ecfe =append (_ecfe ,_cec );};return _ecfe ,nil ;};