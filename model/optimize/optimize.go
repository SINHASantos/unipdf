//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package optimize ;import (_df "bytes";_af "crypto/md5";_cf "errors";_fa "fmt";_c "github.com/unidoc/unipdf/v3/common";_adc "github.com/unidoc/unipdf/v3/contentstream";_ce "github.com/unidoc/unipdf/v3/core";_cb "github.com/unidoc/unipdf/v3/extractor";_e "github.com/unidoc/unipdf/v3/internal/imageutil";
_fg "github.com/unidoc/unipdf/v3/internal/textencoding";_aa "github.com/unidoc/unipdf/v3/model";_fgb "github.com/unidoc/unitype";_f "golang.org/x/image/draw";_ad "math";_d "strings";);func _dbfa (_dege *_aa .Image ,_dacf float64 )(*_aa .Image ,error ){_ddg ,_cebb :=_dege .ToGoImage ();
if _cebb !=nil {return nil ,_cebb ;};var _ecf _e .Image ;_efeb ,_bgfc :=_ddg .(*_e .Monochrome );if _bgfc {if _cebb =_efeb .ResolveDecode ();_cebb !=nil {return nil ,_cebb ;};_ecf ,_cebb =_efeb .Scale (_dacf );if _cebb !=nil {return nil ,_cebb ;};}else {_eeaa :=int (_ad .RoundToEven (float64 (_dege .Width )*_dacf ));
_cfebf :=int (_ad .RoundToEven (float64 (_dege .Height )*_dacf ));_ecf ,_cebb =_e .NewImage (_eeaa ,_cfebf ,int (_dege .BitsPerComponent ),_dege .ColorComponents ,nil ,nil ,nil );if _cebb !=nil {return nil ,_cebb ;};_f .CatmullRom .Scale (_ecf ,_ecf .Bounds (),_ddg ,_ddg .Bounds (),_f .Over ,&_f .Options {});
};_aad :=_ecf .Base ();_deeb :=&_aa .Image {Width :int64 (_aad .Width ),Height :int64 (_aad .Height ),BitsPerComponent :int64 (_aad .BitsPerComponent ),ColorComponents :_aad .ColorComponents ,Data :_aad .Data };_deeb .SetDecode (_aad .Decode );_deeb .SetAlpha (_aad .Alpha );
return _deeb ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_ee *Chain )Optimize (objects []_ce .PdfObject )(_cee []_ce .PdfObject ,_fgd error ){_afg :=objects ;for _ ,_ec :=range _ee ._dg {_b ,_ag :=_ec .Optimize (_afg );if _ag !=nil {_c .Log .Debug ("\u0045\u0052\u0052OR\u0020\u004f\u0070\u0074\u0069\u006d\u0069\u007a\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u002b\u0076",_ag );
continue ;};_afg =_b ;};return _afg ,nil ;};

// CleanUnusedResources represents an optimizer used to clean unused resources.
type CleanUnusedResources struct{};

// Optimize optimizes PDF objects to decrease PDF size.
func (_fe *CleanContentstream )Optimize (objects []_ce .PdfObject )(_bcd []_ce .PdfObject ,_bg error ){_gg :=map[*_ce .PdfObjectStream ]struct{}{};var _afa []*_ce .PdfObjectStream ;_ac :=func (_bb *_ce .PdfObjectStream ){if _ ,_gd :=_gg [_bb ];!_gd {_gg [_bb ]=struct{}{};
_afa =append (_afa ,_bb );};};_gb :=map[_ce .PdfObject ]bool {};_dge :=map[_ce .PdfObject ]bool {};for _ ,_gbe :=range objects {switch _ecd :=_gbe .(type ){case *_ce .PdfIndirectObject :switch _dbg :=_ecd .PdfObject .(type ){case *_ce .PdfObjectDictionary :if _aga ,_gge :=_ce .GetName (_dbg .Get ("\u0054\u0079\u0070\u0065"));
!_gge ||_aga .String ()!="\u0050\u0061\u0067\u0065"{continue ;};if _bbf ,_cg :=_ce .GetStream (_dbg .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));_cg {_ac (_bbf );}else if _fea ,_ef :=_ce .GetArray (_dbg .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));
_ef {var _dd []*_ce .PdfObjectStream ;for _ ,_cd :=range _fea .Elements (){if _bcaa ,_efd :=_ce .GetStream (_cd );_efd {_dd =append (_dd ,_bcaa );};};if len (_dd )> 0{var _abd _df .Buffer ;for _ ,_ebe :=range _dd {if _dfc ,_eff :=_ce .DecodeStream (_ebe );
_eff ==nil {_abd .Write (_dfc );};_gb [_ebe ]=true ;};_gbg ,_cdd :=_ce .MakeStream (_abd .Bytes (),_ce .NewFlateEncoder ());if _cdd !=nil {return nil ,_cdd ;};_dge [_gbg ]=true ;_dbg .Set ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073",_gbg );_ac (_gbg );
};};};case *_ce .PdfObjectStream :if _gdb ,_agb :=_ce .GetName (_ecd .Get ("\u0054\u0079\u0070\u0065"));!_agb ||_gdb .String ()!="\u0058O\u0062\u006a\u0065\u0063\u0074"{continue ;};if _eaf ,_cgf :=_ce .GetName (_ecd .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));
!_cgf ||_eaf .String ()!="\u0046\u006f\u0072\u006d"{continue ;};_ac (_ecd );};};for _ ,_ead :=range _afa {_bg =_be (_ead );if _bg !=nil {return nil ,_bg ;};};_bcd =nil ;for _ ,_gde :=range objects {if _gb [_gde ]{continue ;};_bcd =append (_bcd ,_gde );
};for _cbe :=range _dge {_bcd =append (_bcd ,_cbe );};return _bcd ,nil ;};func _aac (_daf []*_ce .PdfIndirectObject )map[string ][]string {_deef :=map[string ][]string {};for _ ,_acbg :=range _daf {_egb ,_gdbc :=_ce .GetDict (_acbg .PdfObject );if !_gdbc {continue ;
};_gebf :=_egb .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073");_fcd :=_ce .TraceToDirectObject (_gebf );_cfe :="";if _efea ,_caf :=_fcd .(*_ce .PdfObjectArray );_caf {var _fbed []string ;for _ ,_gee :=range _efea .Elements (){_afgf ,_bff :=_bce (_gee );
if _bff !=nil {continue ;};_fbed =append (_fbed ,_afgf );};_cfe =_d .Join (_fbed ,"\u0020");};if _dab ,_eafd :=_fcd .(*_ce .PdfObjectStream );_eafd {_gdc ,_fdd :=_ce .DecodeStream (_dab );if _fdd !=nil {continue ;};_cfe =string (_gdc );};_bec :=_adc .NewContentStreamParser (_cfe );
_ebee ,_bfb :=_bec .Parse ();if _bfb !=nil {continue ;};for _ ,_agf :=range *_ebee {_aef :=_agf .Operand ;_daba :=_agf .Params ;switch _aef {case "\u0044\u006f":_dgc :=_daba [0].String ();if _ ,_fdag :=_deef ["\u0058O\u0062\u006a\u0065\u0063\u0074"];!_fdag {_deef ["\u0058O\u0062\u006a\u0065\u0063\u0074"]=[]string {_dgc };
}else {_deef ["\u0058O\u0062\u006a\u0065\u0063\u0074"]=append (_deef ["\u0058O\u0062\u006a\u0065\u0063\u0074"],_dgc );};case "\u0054\u0066":_fcc :=_daba [0].String ();if _ ,_gga :=_deef ["\u0046\u006f\u006e\u0074"];!_gga {_deef ["\u0046\u006f\u006e\u0074"]=[]string {_fcc };
}else {_deef ["\u0046\u006f\u006e\u0074"]=append (_deef ["\u0046\u006f\u006e\u0074"],_fcc );};case "\u0067\u0073":_dac :=_daba [0].String ();if _ ,_abc :=_deef ["\u0045x\u0074\u0047\u0053\u0074\u0061\u0074e"];!_abc {_deef ["\u0045x\u0074\u0047\u0053\u0074\u0061\u0074e"]=[]string {_dac };
}else {_deef ["\u0045x\u0074\u0047\u0053\u0074\u0061\u0074e"]=append (_deef ["\u0045x\u0074\u0047\u0053\u0074\u0061\u0074e"],_dac );};};};};return _deef ;};

// Append appends optimizers to the chain.
func (_cc *Chain )Append (optimizers ..._aa .Optimizer ){_cc ._dg =append (_cc ._dg ,optimizers ...)};func _efa (_ceeb []_ce .PdfObject )(map[_ce .PdfObject ]struct{},error ){_aged :=_fcdf (_ceeb );_aeb :=_aged ._egfdc ;_fbfa :=make (map[_ce .PdfObject ]struct{});
_cda :=_aac (_aeb );for _ ,_cddd :=range _aeb {_fgec ,_fda :=_ce .GetDict (_cddd .PdfObject );if !_fda {continue ;};_aed ,_fda :=_ce .GetDict (_fgec .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"));if !_fda {continue ;};_dgb :=_cda ["\u0058O\u0062\u006a\u0065\u0063\u0074"];
_gad ,_fda :=_ce .GetDict (_aed .Get ("\u0058O\u0062\u006a\u0065\u0063\u0074"));if _fda {_cge :=_efg (_gad );for _ ,_egc :=range _cge {if _bede (_egc ,_dgb ){continue ;};_aag :=*_ce .MakeName (_egc );_eea :=_gad .Get (_aag );_fbfa [_eea ]=struct{}{};_gad .Remove (_aag );
_gfb :=_ffd (_eea ,_fbfa );if _gfb !=nil {_c .Log .Debug ("\u0066\u0061\u0069\u006ce\u0064\u0020\u0074\u006f\u0020\u0074\u0072\u0061\u0076\u0065r\u0073e\u0020\u006f\u0062\u006a\u0065\u0063\u0074 \u0025\u0076",_eea );};};};_ffe ,_fda :=_ce .GetDict (_aed .Get ("\u0046\u006f\u006e\u0074"));
_ede :=_cda ["\u0046\u006f\u006e\u0074"];if _fda {_dba :=_efg (_ffe );for _ ,_agc :=range _dba {if _bede (_agc ,_ede ){continue ;};_bda :=*_ce .MakeName (_agc );_aea :=_ffe .Get (_bda );_fbfa [_aea ]=struct{}{};_ffe .Remove (_bda );_gadg :=_ffd (_aea ,_fbfa );
if _gadg !=nil {_c .Log .Debug ("\u0046\u0061i\u006c\u0065\u0064\u0020\u0074\u006f\u0020\u0074\u0072\u0061\u0076\u0065\u0072\u0073\u0065\u0020\u006f\u0062\u006a\u0065\u0063\u0074 %\u0076\u000a",_aea );};};};_gag ,_fda :=_ce .GetDict (_aed .Get ("\u0045x\u0074\u0047\u0053\u0074\u0061\u0074e"));
if _fda {_gec :=_efg (_gag );_abfg :=_cda ["\u0045x\u0074\u0047\u0053\u0074\u0061\u0074e"];for _ ,_dbd :=range _gec {if _bede (_dbd ,_abfg ){continue ;};_cde :=*_ce .MakeName (_dbd );_agcb :=_gag .Get (_cde );_fbfa [_agcb ]=struct{}{};_gag .Remove (_cde );
_bdaf :=_ffd (_agcb ,_fbfa );if _bdaf !=nil {_c .Log .Debug ("\u0066\u0061i\u006c\u0065\u0064\u0020\u0074\u006f\u0020\u0074\u0072\u0061\u0076\u0065\u0072\u0073\u0065\u0020\u006f\u0062\u006a\u0065\u0063\u0074 %\u0076\u000a",_agcb );};};};};return _fbfa ,nil ;
};func _ggeg (_beec _ce .PdfObject )[]content {if _beec ==nil {return nil ;};_gbd ,_cbc :=_ce .GetArray (_beec );if !_cbc {_c .Log .Debug ("\u0041\u006e\u006e\u006fts\u0020\u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0061\u0072\u0072\u0061\u0079");return nil ;
};var _ebc []content ;for _ ,_ebdg :=range _gbd .Elements (){_fcb ,_efe :=_ce .GetDict (_ebdg );if !_efe {_c .Log .Debug ("I\u0067\u006e\u006f\u0072\u0069\u006eg\u0020\u006e\u006f\u006e\u002d\u0064i\u0063\u0074\u0020\u0065\u006c\u0065\u006de\u006e\u0074\u0020\u0069\u006e\u0020\u0041\u006e\u006e\u006ft\u0073");
continue ;};_gcfc ,_efe :=_ce .GetDict (_fcb .Get ("\u0041\u0050"));if !_efe {_c .Log .Debug ("\u004e\u006f\u0020\u0041P \u0065\u006e\u0074\u0072\u0079\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067");continue ;};_egf :=_ce .TraceToDirectObject (_gcfc .Get ("\u004e"));
if _egf ==nil {_c .Log .Debug ("N\u006f\u0020\u004e\u0020en\u0074r\u0079\u0020\u002d\u0020\u0073k\u0069\u0070\u0070\u0069\u006e\u0067");continue ;};var _ffc *_ce .PdfObjectStream ;switch _acd :=_egf .(type ){case *_ce .PdfObjectDictionary :_faf ,_egfd :=_ce .GetName (_fcb .Get ("\u0041\u0053"));
if !_egfd {_c .Log .Debug ("\u004e\u006f\u0020\u0041S \u0065\u006e\u0074\u0072\u0079\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067");continue ;};_ffc ,_egfd =_ce .GetStream (_acd .Get (*_faf ));if !_egfd {_c .Log .Debug ("\u0046o\u0072\u006d\u0020\u006eo\u0074\u0020\u0066\u006f\u0075n\u0064 \u002d \u0073\u006b\u0069\u0070\u0070\u0069\u006eg");
continue ;};case *_ce .PdfObjectStream :_ffc =_acd ;};if _ffc ==nil {_c .Log .Debug ("\u0046\u006f\u0072m\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0028n\u0069\u006c\u0029\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067");
continue ;};_age ,_dad :=_aa .NewXObjectFormFromStream (_ffc );if _dad !=nil {_c .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020l\u006f\u0061\u0064\u0069\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_dad );
continue ;};_cea ,_dad :=_age .GetContentStream ();if _dad !=nil {_c .Log .Debug ("E\u0072\u0072\u006f\u0072\u0020\u0064e\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0063\u006fn\u0074\u0065\u006et\u0073:\u0020\u0025\u0076",_dad );continue ;};_ebc =append (_ebc ,content {_gfg :string (_cea ),_bdf :_age .Resources });
};return _ebc ;};

// CombineDuplicateStreams combines duplicated streams by its data hash.
// It implements interface model.Optimizer.
type CombineDuplicateStreams struct{};func _gdd (_aaa *_ce .PdfObjectStream ,_fec []rune ,_gbcf []_fgb .GlyphIndex )error {_aaa ,_eab :=_ce .GetStream (_aaa );if !_eab {_c .Log .Debug ("\u0045\u006d\u0062\u0065\u0064\u0064\u0065\u0064\u0020\u0066\u006f\u006e\u0074\u0020\u006f\u0062\u006a\u0065c\u0074\u0020\u006e\u006f\u0074\u0020\u0066o\u0075\u006e\u0064\u0020\u002d\u002d\u0020\u0041\u0042\u004f\u0052T\u0020\u0073\u0075\u0062\u0073\u0065\u0074\u0074\u0069\u006e\u0067");
return _cf .New ("\u0066\u006f\u006e\u0074fi\u006c\u0065\u0032\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_bbc ,_ebb :=_ce .DecodeStream (_aaa );if _ebb !=nil {_c .Log .Debug ("\u0044\u0065c\u006f\u0064\u0065 \u0065\u0072\u0072\u006f\u0072\u003a\u0020\u0025\u0076",_ebb );
return _ebb ;};_gfc ,_ebb :=_fgb .Parse (_df .NewReader (_bbc ));if _ebb !=nil {_c .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0070\u0061\u0072\u0073\u0069n\u0067\u0020\u0025\u0064\u0020\u0062\u0079\u0074\u0065\u0020f\u006f\u006e\u0074",len (_aaa .Stream ));
return _ebb ;};_cdg :=_gbcf ;if len (_fec )> 0{_dae :=_gfc .LookupRunes (_fec );_cdg =append (_cdg ,_dae ...);};_gfc ,_ebb =_gfc .SubsetKeepIndices (_cdg );if _ebb !=nil {_c .Log .Debug ("\u0045R\u0052\u004f\u0052\u0020s\u0075\u0062\u0073\u0065\u0074t\u0069n\u0067 \u0066\u006f\u006e\u0074\u003a\u0020\u0025v",_ebb );
return _ebb ;};var _dfcb _df .Buffer ;_ebb =_gfc .Write (&_dfcb );if _ebb !=nil {_c .Log .Debug ("\u0045\u0052\u0052\u004fR \u0057\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076",_ebb );return _ebb ;};if _dfcb .Len ()> len (_bbc ){_c .Log .Debug ("\u0052\u0065-\u0077\u0072\u0069\u0074\u0074\u0065\u006e\u0020\u0066\u006f\u006e\u0074\u0020\u0069\u0073\u0020\u006c\u0061\u0072\u0067\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u002d\u0020\u0073\u006b\u0069\u0070");
return nil ;};_fbf ,_ebb :=_ce .MakeStream (_dfcb .Bytes (),_ce .NewFlateEncoder ());if _ebb !=nil {_c .Log .Debug ("\u0045\u0052\u0052\u004fR \u0057\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076",_ebb );return _ebb ;
};*_aaa =*_fbf ;_aaa .Set ("\u004ce\u006e\u0067\u0074\u0068\u0031",_ce .MakeInteger (int64 (_dfcb .Len ())));return nil ;};

// CombineDuplicateDirectObjects combines duplicated direct objects by its data hash.
// It implements interface model.Optimizer.
type CombineDuplicateDirectObjects struct{};func _efg (_dcc *_ce .PdfObjectDictionary )[]string {_bdaa :=[]string {};for _ ,_eeeb :=range _dcc .Keys (){_bdaa =append (_bdaa ,_eeeb .String ());};return _bdaa ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_eaaf *CombineDuplicateDirectObjects )Optimize (objects []_ce .PdfObject )(_ggc []_ce .PdfObject ,_fabc error ){_afabd (objects );_bbcc :=make (map[string ][]*_ce .PdfObjectDictionary );var _fdac func (_agd *_ce .PdfObjectDictionary );_fdac =func (_eeee *_ce .PdfObjectDictionary ){for _ ,_ecbg :=range _eeee .Keys (){_cfed :=_eeee .Get (_ecbg );
if _gfa ,_beg :=_cfed .(*_ce .PdfObjectDictionary );_beg {if _ddc :=_gfa .Keys ();len (_ddc )==0{continue ;};_dged :=_af .New ();_dged .Write ([]byte (_gfa .WriteString ()));_ccfa :=string (_dged .Sum (nil ));_bbcc [_ccfa ]=append (_bbcc [_ccfa ],_gfa );
_fdac (_gfa );};};};for _ ,_gbf :=range objects {_fdb ,_aedf :=_gbf .(*_ce .PdfIndirectObject );if !_aedf {continue ;};if _fage ,_gbeb :=_fdb .PdfObject .(*_ce .PdfObjectDictionary );_gbeb {_fdac (_fage );};};_bdab :=make ([]_ce .PdfObject ,0,len (_bbcc ));
_bedg :=make (map[_ce .PdfObject ]_ce .PdfObject );for _ ,_gecf :=range _bbcc {if len (_gecf )< 2{continue ;};_deeg :=_ce .MakeDict ();_deeg .Merge (_gecf [0]);_geg :=_ce .MakeIndirectObject (_deeg );_bdab =append (_bdab ,_geg );for _gaga :=0;_gaga < len (_gecf );
_gaga ++{_ggcf :=_gecf [_gaga ];_bedg [_ggcf ]=_geg ;};};_ggc =make ([]_ce .PdfObject ,len (objects ));copy (_ggc ,objects );_ggc =append (_bdab ,_ggc ...);_addb (_ggc ,_bedg );return _ggc ,nil ;};type content struct{_gfg string ;_bdf *_aa .PdfPageResources ;
};

// CleanFonts cleans up embedded fonts, reducing font sizes.
type CleanFonts struct{

// Subset embedded fonts if encountered (if true).
// Otherwise attempts to reduce the font program.
Subset bool ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_eefa *ObjectStreams )Optimize (objects []_ce .PdfObject )(_acdb []_ce .PdfObject ,_gbdd error ){_caae :=&_ce .PdfObjectStreams {};_bfc :=make ([]_ce .PdfObject ,0,len (objects ));for _ ,_afdd :=range objects {if _cceag ,_agdg :=_afdd .(*_ce .PdfIndirectObject );
_agdg &&_cceag .GenerationNumber ==0{_caae .Append (_afdd );}else {_bfc =append (_bfc ,_afdd );};};if _caae .Len ()==0{return _bfc ,nil ;};_acdb =make ([]_ce .PdfObject ,0,len (_bfc )+_caae .Len ()+1);if _caae .Len ()> 1{_acdb =append (_acdb ,_caae );};
_acdb =append (_acdb ,_caae .Elements ()...);_acdb =append (_acdb ,_bfc ...);return _acdb ,nil ;};func _fcdf (_gdbd []_ce .PdfObject )objectStructure {_gfbbe :=objectStructure {};_ceea :=false ;for _ ,_cbbb :=range _gdbd {switch _cdcd :=_cbbb .(type ){case *_ce .PdfIndirectObject :_adcd ,_cbcg :=_ce .GetDict (_cdcd );
if !_cbcg {continue ;};_cdff ,_cbcg :=_ce .GetName (_adcd .Get ("\u0054\u0079\u0070\u0065"));if !_cbcg {continue ;};switch _cdff .String (){case "\u0043a\u0074\u0061\u006c\u006f\u0067":_gfbbe ._ecfa =_adcd ;_ceea =true ;};};if _ceea {break ;};};if !_ceea {return _gfbbe ;
};_eafe ,_fbg :=_ce .GetDict (_gfbbe ._ecfa .Get ("\u0050\u0061\u0067e\u0073"));if !_fbg {return _gfbbe ;};_gfbbe ._abcff =_eafe ;_ggbb ,_fbg :=_ce .GetArray (_eafe .Get ("\u004b\u0069\u0064\u0073"));if !_fbg {return _gfbbe ;};for _ ,_caad :=range _ggbb .Elements (){_daff ,_acbc :=_ce .GetIndirect (_caad );
if !_acbc {break ;};_gfbbe ._egfdc =append (_gfbbe ._egfdc ,_daff );};return _gfbbe ;};type objectStructure struct{_ecfa *_ce .PdfObjectDictionary ;_abcff *_ce .PdfObjectDictionary ;_egfdc []*_ce .PdfIndirectObject ;};func _bce (_bdc _ce .PdfObject )(string ,error ){_ega :=_ce .TraceToDirectObject (_bdc );
switch _faa :=_ega .(type ){case *_ce .PdfObjectString :return _faa .Str (),nil ;case *_ce .PdfObjectStream :_bfbb ,_abde :=_ce .DecodeStream (_faa );if _abde !=nil {return "",_abde ;};return string (_bfbb ),nil ;};return "",_fa .Errorf ("\u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u0063\u006f\u006e\u0074\u0065\u006e\u0074\u0020\u0073\u0074\u0072e\u0061\u006d\u0020\u006f\u0062\u006a\u0065\u0063\u0074\u0020\u0068\u006f\u006c\u0064\u0065\u0072\u0020\u0028\u0025\u0054\u0029",_ega );
};func _ffd (_cbf _ce .PdfObject ,_dcd map[_ce .PdfObject ]struct{})error {if _eeg ,_effg :=_cbf .(*_ce .PdfIndirectObject );_effg {_dcd [_cbf ]=struct{}{};_dcfe :=_ffd (_eeg .PdfObject ,_dcd );if _dcfe !=nil {return _dcfe ;};return nil ;};if _cab ,_abda :=_cbf .(*_ce .PdfObjectStream );
_abda {_dcd [_cab ]=struct{}{};_ecb :=_ffd (_cab .PdfObjectDictionary ,_dcd );if _ecb !=nil {return _ecb ;};return nil ;};if _afcc ,_cdga :=_cbf .(*_ce .PdfObjectDictionary );_cdga {for _ ,_ceb :=range _afcc .Keys (){_bdff :=_afcc .Get (_ceb );_ =_bdff ;
if _fab ,_dde :=_bdff .(*_ce .PdfObjectReference );_dde {_bdff =_fab .Resolve ();_afcc .Set (_ceb ,_bdff );};if _ceb !="\u0050\u0061\u0072\u0065\u006e\u0074"{if _bgf :=_ffd (_bdff ,_dcd );_bgf !=nil {return _bgf ;};};};return nil ;};if _daa ,_dbb :=_cbf .(*_ce .PdfObjectArray );
_dbb {if _daa ==nil {return _cf .New ("\u0061\u0072\u0072a\u0079\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};for _cgb ,_eee :=range _daa .Elements (){if _abcc ,_cfeb :=_eee .(*_ce .PdfObjectReference );_cfeb {_eee =_abcc .Resolve ();_daa .Set (_cgb ,_eee );
};if _ccg :=_ffd (_eee ,_dcd );_ccg !=nil {return _ccg ;};};return nil ;};return nil ;};func _gfcd (_agca *_aa .XObjectImage ,_ggbc imageModifications )error {_afd ,_ecee :=_agca .ToImage ();if _ecee !=nil {return _ecee ;};if _ggbc .Scale !=0{_afd ,_ecee =_dbfa (_afd ,_ggbc .Scale );
if _ecee !=nil {return _ecee ;};};if _ggbc .Encoding !=nil {_agca .Filter =_ggbc .Encoding ;};_agca .Decode =nil ;switch _dgab :=_agca .Filter .(type ){case *_ce .FlateEncoder :if _dgab .Predictor !=1&&_dgab .Predictor !=11{_dgab .Predictor =1;};};if _ecee =_agca .SetImage (_afd ,nil );
_ecee !=nil {_c .Log .Debug ("\u0045\u0072\u0072or\u0020\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0076",_ecee );return _ecee ;};_agca .ToPdfObject ();return nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_bdaae *Image )Optimize (objects []_ce .PdfObject )(_dbab []_ce .PdfObject ,_deda error ){if _bdaae .ImageQuality <=0{return objects ,nil ;};_dgca :=_fff (objects );if len (_dgca )==0{return objects ,nil ;};_cbgb :=make (map[_ce .PdfObject ]_ce .PdfObject );
_bag :=make (map[_ce .PdfObject ]struct{});for _ ,_dfec :=range _dgca {_ddd :=_dfec .Stream .Get ("\u0053\u004d\u0061s\u006b");_bag [_ddd ]=struct{}{};};for _ccge ,_dfgg :=range _dgca {_fdae :=_dfgg .Stream ;if _ ,_gbb :=_bag [_fdae ];_gbb {continue ;};
_dea ,_gfbb :=_aa .NewXObjectImageFromStream (_fdae );if _gfbb !=nil {_c .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_gfbb );continue ;};switch _dea .Filter .(type ){case *_ce .JBIG2Encoder :continue ;case *_ce .CCITTFaxEncoder :continue ;
};_gffg ,_gfbb :=_dea .ToImage ();if _gfbb !=nil {_c .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_gfbb );continue ;};_dbcf :=_ce .NewDCTEncoder ();_dbcf .ColorComponents =_gffg .ColorComponents ;_dbcf .Quality =_bdaae .ImageQuality ;
_dbcf .BitsPerComponent =_dfgg .BitsPerComponent ;_dbcf .Width =_dfgg .Width ;_dbcf .Height =_dfgg .Height ;_deb ,_gfbb :=_dbcf .EncodeBytes (_gffg .Data );if _gfbb !=nil {_c .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_gfbb );
continue ;};var _abcf _ce .StreamEncoder ;_abcf =_dbcf ;{_fbee :=_ce .NewFlateEncoder ();_dbcdg :=_ce .NewMultiEncoder ();_dbcdg .AddEncoder (_fbee );_dbcdg .AddEncoder (_dbcf );_cdb ,_cbgf :=_dbcdg .EncodeBytes (_gffg .Data );if _cbgf !=nil {_c .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_cbgf );
continue ;};if len (_cdb )< len (_deb ){_c .Log .Trace ("\u004d\u0075\u006c\u0074\u0069\u0020\u0065\u006e\u0063\u0020\u0069\u006d\u0070\u0072\u006f\u0076\u0065\u0073\u003a\u0020\u0025\u0064\u0020\u0074o\u0020\u0025\u0064\u0020\u0028o\u0072\u0069g\u0020\u0025\u0064\u0029",len (_deb ),len (_cdb ),len (_fdae .Stream ));
_deb =_cdb ;_abcf =_dbcdg ;};};_cbca :=len (_fdae .Stream );if _cbca < len (_deb ){continue ;};_acaa :=&_ce .PdfObjectStream {Stream :_deb };_acaa .PdfObjectReference =_fdae .PdfObjectReference ;_acaa .PdfObjectDictionary =_ce .MakeDict ();_acaa .Merge (_fdae .PdfObjectDictionary );
_acaa .Merge (_abcf .MakeStreamDict ());_acaa .Set ("\u004c\u0065\u006e\u0067\u0074\u0068",_ce .MakeInteger (int64 (len (_deb ))));_cbgb [_fdae ]=_acaa ;_dgca [_ccge ].Stream =_acaa ;};_dbab =make ([]_ce .PdfObject ,len (objects ));copy (_dbab ,objects );
_addb (_dbab ,_cbgb );return _dbab ,nil ;};

// Image optimizes images by rewrite images into JPEG format with quality equals to ImageQuality.
// TODO(a5i): Add support for inline images.
// It implements interface model.Optimizer.
type Image struct{ImageQuality int ;};func _be (_ea *_ce .PdfObjectStream )error {_bc ,_bca :=_ce .DecodeStream (_ea );if _bca !=nil {return _bca ;};_ccc :=_adc .NewContentStreamParser (string (_bc ));_eb ,_bca :=_ccc .Parse ();if _bca !=nil {return _bca ;
};_eb =_add (_eb );_eg :=_eb .Bytes ();if len (_eg )>=len (_bc ){return nil ;};_fge ,_bca :=_ce .MakeStream (_eb .Bytes (),_ce .NewFlateEncoder ());if _bca !=nil {return _bca ;};_ea .Stream =_fge .Stream ;_ea .Merge (_fge .PdfObjectDictionary );return nil ;
};

// Optimize optimizes PDF objects to decrease PDF size.
func (_fbede *CompressStreams )Optimize (objects []_ce .PdfObject )(_aba []_ce .PdfObject ,_efc error ){_aba =make ([]_ce .PdfObject ,len (objects ));copy (_aba ,objects );for _ ,_fcf :=range objects {_febf ,_aefb :=_ce .GetStream (_fcf );if !_aefb {continue ;
};if _aae :=_febf .Get ("\u0046\u0069\u006c\u0074\u0065\u0072");_aae !=nil {if _ ,_dfb :=_ce .GetName (_aae );_dfb {continue ;};if _defg ,_dcfeg :=_ce .GetArray (_aae );_dcfeg &&_defg .Len ()> 0{continue ;};};_aaac :=_ce .NewFlateEncoder ();var _afcf []byte ;
_afcf ,_efc =_aaac .EncodeBytes (_febf .Stream );if _efc !=nil {return _aba ,_efc ;};_eabg :=_aaac .MakeStreamDict ();if len (_afcf )+len (_eabg .WriteString ())< len (_febf .Stream ){_febf .Stream =_afcf ;_febf .PdfObjectDictionary .Merge (_eabg );_febf .PdfObjectDictionary .Set ("\u004c\u0065\u006e\u0067\u0074\u0068",_ce .MakeInteger (int64 (len (_febf .Stream ))));
};};return _aba ,nil ;};type imageModifications struct{Scale float64 ;Encoding _ce .StreamEncoder ;};func _fff (_adfg []_ce .PdfObject )[]*imageInfo {_caa :=_ce .PdfObjectName ("\u0053u\u0062\u0074\u0079\u0070\u0065");_afb :=make (map[*_ce .PdfObjectStream ]struct{});
var _abe []*imageInfo ;for _ ,_bcc :=range _adfg {_abg ,_bfba :=_ce .GetStream (_bcc );if !_bfba {continue ;};if _ ,_bbe :=_afb [_abg ];_bbe {continue ;};_afb [_abg ]=struct{}{};_ddcc :=_abg .PdfObjectDictionary .Get (_caa );_cgc ,_bfba :=_ce .GetName (_ddcc );
if !_bfba ||string (*_cgc )!="\u0049\u006d\u0061g\u0065"{continue ;};_bcde :=&imageInfo {Stream :_abg ,BitsPerComponent :8};if _cga ,_gegb :=_ce .GetIntVal (_abg .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074"));
_gegb {_bcde .BitsPerComponent =_cga ;};if _cca ,_gba :=_ce .GetIntVal (_abg .Get ("\u0057\u0069\u0064t\u0068"));_gba {_bcde .Width =_cca ;};if _ccff ,_aec :=_ce .GetIntVal (_abg .Get ("\u0048\u0065\u0069\u0067\u0068\u0074"));_aec {_bcde .Height =_ccff ;
};_fdbg ,_cag :=_aa .NewPdfColorspaceFromPdfObject (_abg .Get ("\u0043\u006f\u006c\u006f\u0072\u0053\u0070\u0061\u0063\u0065"));if _cag !=nil {_c .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_cag );continue ;};if _fdbg ==nil {_ebdc ,_cbea :=_ce .GetName (_abg .Get ("\u0046\u0069\u006c\u0074\u0065\u0072"));
if _cbea {switch _ebdc .String (){case "\u0043\u0043\u0049\u0054\u0054\u0046\u0061\u0078\u0044e\u0063\u006f\u0064\u0065","J\u0042\u0049\u0047\u0032\u0044\u0065\u0063\u006f\u0064\u0065":_fdbg =_aa .NewPdfColorspaceDeviceGray ();_bcde .BitsPerComponent =1;
};};};switch _dgdf :=_fdbg .(type ){case *_aa .PdfColorspaceDeviceRGB :_bcde .ColorComponents =3;case *_aa .PdfColorspaceDeviceGray :_bcde .ColorComponents =1;default:_c .Log .Debug ("\u004f\u0070\u0074\u0069\u006d\u0069\u007aa\u0074\u0069\u006fn\u0020\u0069\u0073 \u006e\u006ft\u0020\u0073\u0075\u0070\u0070\u006fr\u0074ed\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u0025\u0054\u0020\u002d\u0020\u0073\u006b\u0069\u0070",_dgdf );
continue ;};_abe =append (_abe ,_bcde );};return _abe ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_ed *CleanFonts )Optimize (objects []_ce .PdfObject )(_abf []_ce .PdfObject ,_fed error ){var _gfcg map[*_ce .PdfObjectStream ]struct{};if _ed .Subset {var _dec error ;_gfcg ,_dec =_ccfd (objects );if _dec !=nil {_c .Log .Debug ("\u0045\u0052\u0052\u004fR\u003a\u0020\u0046\u0061\u0069\u006c\u0065\u0064\u0020\u0073u\u0062s\u0065\u0074\u0074\u0069\u006e\u0067\u003a \u0025\u0076",_dec );
return nil ,_dec ;};};for _ ,_dfe :=range objects {_eag ,_ca :=_ce .GetStream (_dfe );if !_ca {continue ;};if _ ,_beb :=_gfcg [_eag ];_beb {continue ;};_fce ,_acc :=_ce .NewEncoderFromStream (_eag );if _acc !=nil {_c .Log .Debug ("\u0045\u0052RO\u0052\u0020\u0067e\u0074\u0074\u0069\u006eg e\u006eco\u0064\u0065\u0072\u003a\u0020\u0025\u0076 -\u0020\u0069\u0067\u006e\u006f\u0072\u0069n\u0067",_acc );
continue ;};_beaf ,_acc :=_fce .DecodeStream (_eag );if _acc !=nil {_c .Log .Debug ("\u0044\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0065r\u0072\u006f\u0072\u0020\u003a\u0020\u0025v\u0020\u002d\u0020\u0069\u0067\u006e\u006f\u0072\u0069\u006e\u0067",_acc );
continue ;};if len (_beaf )< 4{continue ;};_adfa :=string (_beaf [:4]);if _adfa =="\u004f\u0054\u0054\u004f"{continue ;};if _adfa !="\u0000\u0001\u0000\u0000"&&_adfa !="\u0074\u0072\u0075\u0065"{continue ;};_fbe ,_acc :=_fgb .Parse (_df .NewReader (_beaf ));
if _acc !=nil {_c .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020P\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_acc );continue ;};_acc =_fbe .Optimize ();
if _acc !=nil {_c .Log .Debug ("\u0045\u0052RO\u0052\u0020\u004fp\u0074\u0069\u006d\u0069zin\u0067 f\u006f\u006e\u0074\u003a\u0020\u0025\u0076 -\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067",_acc );continue ;};var _cfcf _df .Buffer ;_acc =_fbe .Write (&_cfcf );
if _acc !=nil {_c .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020W\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_acc );continue ;};if _cfcf .Len ()> len (_beaf ){_c .Log .Debug ("\u0052\u0065-\u0077\u0072\u0069\u0074\u0074\u0065\u006e\u0020\u0066\u006f\u006e\u0074\u0020\u0069\u0073\u0020\u006c\u0061\u0072\u0067\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u002d\u0020\u0073\u006b\u0069\u0070");
continue ;};_ecda ,_acc :=_ce .MakeStream (_cfcf .Bytes (),_ce .NewFlateEncoder ());if _acc !=nil {continue ;};*_eag =*_ecda ;_eag .Set ("\u004ce\u006e\u0067\u0074\u0068\u0031",_ce .MakeInteger (int64 (_cfcf .Len ())));};return objects ,nil ;};func _add (_g *_adc .ContentStreamOperations )*_adc .ContentStreamOperations {if _g ==nil {return nil ;
};_bf :=_adc .ContentStreamOperations {};for _ ,_db :=range *_g {switch _db .Operand {case "\u0042\u0044\u0043","\u0042\u004d\u0043","\u0045\u004d\u0043":continue ;case "\u0054\u006d":if len (_db .Params )==6{if _afc ,_dga :=_ce .GetNumbersAsFloat (_db .Params );
_dga ==nil {if _afc [0]==1&&_afc [1]==0&&_afc [2]==0&&_afc [3]==1{_db =&_adc .ContentStreamOperation {Params :[]_ce .PdfObject {_db .Params [4],_db .Params [5]},Operand :"\u0054\u0064"};};};};};_bf =append (_bf ,_db );};return &_bf ;};

// GetOptimizers gets the list of optimizers in chain `c`.
func (_fd *Chain )GetOptimizers ()[]_aa .Optimizer {return _fd ._dg };func _bede (_gddb string ,_aafa []string )bool {for _ ,_gcff :=range _aafa {if _gddb ==_gcff {return true ;};};return false ;};

// Optimize implements Optimizer interface.
func (_ffg *CleanUnusedResources )Optimize (objects []_ce .PdfObject )(_gddf []_ce .PdfObject ,_egg error ){_fbfb ,_egg :=_efa (objects );if _egg !=nil {return nil ,_egg ;};_ded :=[]_ce .PdfObject {};for _ ,_fag :=range objects {_ ,_afgg :=_fbfb [_fag ];
if _afgg {continue ;};_ded =append (_ded ,_fag );};return _ded ,nil ;};

// ImagePPI optimizes images by scaling images such that the PPI (pixels per inch) is never higher than ImageUpperPPI.
// TODO(a5i): Add support for inline images.
// It implements interface model.Optimizer.
type ImagePPI struct{ImageUpperPPI float64 ;};func _ccfd (_aaf []_ce .PdfObject )(_fac map[*_ce .PdfObjectStream ]struct{},_ff error ){_fac =map[*_ce .PdfObjectStream ]struct{}{};_dc :=map[*_aa .PdfFont ]struct{}{};_fgf :=_fcdf (_aaf );for _ ,_adcb :=range _fgf ._egfdc {_ba ,_bd :=_ce .GetDict (_adcb .PdfObject );
if !_bd {continue ;};_acb ,_bd :=_ce .GetDict (_ba .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"));if !_bd {continue ;};_cfc ,_ :=_ffa (_ba .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));_ece ,_gf :=_aa .NewPdfPageResourcesFromDict (_acb );
if _gf !=nil {return nil ,_gf ;};_dbf :=[]content {{_gfg :_cfc ,_bdf :_ece }};_feb :=_ggeg (_ba .Get ("\u0041\u006e\u006e\u006f\u0074\u0073"));if _feb !=nil {_dbf =append (_dbf ,_feb ...);};for _ ,_fdc :=range _dbf {_dfd ,_ae :=_cb .NewFromContents (_fdc ._gfg ,_fdc ._bdf );
if _ae !=nil {return nil ,_ae ;};_fc ,_ ,_ ,_ae :=_dfd .ExtractPageText ();if _ae !=nil {return nil ,_ae ;};for _ ,_gbc :=range _fc .Marks ().Elements (){if _gbc .Font ==nil {continue ;};if _ ,_ebd :=_dc [_gbc .Font ];!_ebd {_dc [_gbc .Font ]=struct{}{};
};};};};_agad :=map[*_ce .PdfObjectStream ][]*_aa .PdfFont {};for _dbc :=range _dc {_deg :=_dbc .FontDescriptor ();if _deg ==nil ||_deg .FontFile2 ==nil {continue ;};_gfe ,_eaa :=_ce .GetStream (_deg .FontFile2 );if !_eaa {continue ;};_agad [_gfe ]=append (_agad [_gfe ],_dbc );
};for _dfg :=range _agad {var _dff []rune ;var _def []_fgb .GlyphIndex ;for _ ,_cce :=range _agad [_dfg ]{switch _gce :=_cce .Encoder ().(type ){case *_fg .IdentityEncoder :_ge :=_gce .RegisteredRunes ();_fdg :=make ([]_fgb .GlyphIndex ,len (_ge ));for _bed ,_beae :=range _ge {_fdg [_bed ]=_fgb .GlyphIndex (_beae );
};_def =append (_def ,_fdg ...);case *_fg .TrueTypeFontEncoder :_adf :=_gce .RegisteredRunes ();_dff =append (_dff ,_adf ...);case _fg .SimpleEncoder :_egd :=_gce .Charcodes ();for _ ,_acae :=range _egd {_ggf ,_ggb :=_gce .CharcodeToRune (_acae );if !_ggb {_c .Log .Debug ("\u0043\u0068a\u0072\u0063\u006f\u0064\u0065\u003c\u002d\u003e\u0072\u0075\u006e\u0065\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064: \u0025\u0064",_acae );
continue ;};_dff =append (_dff ,_ggf );};};};_ff =_gdd (_dfg ,_dff ,_def );if _ff !=nil {_c .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020\u0073\u0075\u0062\u0073\u0065\u0074\u0074\u0069\u006eg\u0020f\u006f\u006e\u0074\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u003a\u0020\u0025\u0076",_ff );
return nil ,_ff ;};_fac [_dfg ]=struct{}{};};return _fac ,nil ;};

// CompressStreams compresses uncompressed streams.
// It implements interface model.Optimizer.
type CompressStreams struct{};

// New creates a optimizers chain from options.
func New (options Options )*Chain {_bgb :=new (Chain );if options .CleanFonts ||options .SubsetFonts {_bgb .Append (&CleanFonts {Subset :options .SubsetFonts });};if options .CleanContentstream {_bgb .Append (new (CleanContentstream ));};if options .ImageUpperPPI > 0{_bfbaf :=new (ImagePPI );
_bfbaf .ImageUpperPPI =options .ImageUpperPPI ;_bgb .Append (_bfbaf );};if options .ImageQuality > 0{_ddb :=new (Image );_ddb .ImageQuality =options .ImageQuality ;_bgb .Append (_ddb );};if options .CombineDuplicateDirectObjects {_bgb .Append (new (CombineDuplicateDirectObjects ));
};if options .CombineDuplicateStreams {_bgb .Append (new (CombineDuplicateStreams ));};if options .CombineIdenticalIndirectObjects {_bgb .Append (new (CombineIdenticalIndirectObjects ));};if options .UseObjectStreams {_bgb .Append (new (ObjectStreams ));
};if options .CompressStreams {_bgb .Append (new (CompressStreams ));};if options .CleanUnusedResources {_bgb .Append (new (CleanUnusedResources ));};return _bgb ;};

// Options describes PDF optimization parameters.
type Options struct{CombineDuplicateStreams bool ;CombineDuplicateDirectObjects bool ;ImageUpperPPI float64 ;ImageQuality int ;UseObjectStreams bool ;CombineIdenticalIndirectObjects bool ;CompressStreams bool ;CleanFonts bool ;SubsetFonts bool ;CleanContentstream bool ;
CleanUnusedResources bool ;};func _afabd (_dgda []_ce .PdfObject ){for _ffb ,_cebg :=range _dgda {switch _cec :=_cebg .(type ){case *_ce .PdfIndirectObject :_cec .ObjectNumber =int64 (_ffb +1);_cec .GenerationNumber =0;case *_ce .PdfObjectStream :_cec .ObjectNumber =int64 (_ffb +1);
_cec .GenerationNumber =0;case *_ce .PdfObjectStreams :_cec .ObjectNumber =int64 (_ffb +1);_cec .GenerationNumber =0;};};};

// CleanContentstream cleans up redundant operands in content streams, including Page and XObject Form
// contents. This process includes:
// 1. Marked content operators are removed.
// 2. Some operands are simplified (shorter form).
// TODO: Add more reduction methods and improving the methods for identifying unnecessary operands.
type CleanContentstream struct{};func _addb (_efab []_ce .PdfObject ,_dbdb map[_ce .PdfObject ]_ce .PdfObject ){if len (_dbdb )==0{return ;};for _bcaf ,_aacab :=range _efab {if _acag ,_deed :=_dbdb [_aacab ];_deed {_efab [_bcaf ]=_acag ;continue ;};_dbdb [_aacab ]=_aacab ;
switch _adfb :=_aacab .(type ){case *_ce .PdfObjectArray :_fbcc :=make ([]_ce .PdfObject ,_adfb .Len ());copy (_fbcc ,_adfb .Elements ());_addb (_fbcc ,_dbdb );for _cbeb ,_cbcd :=range _fbcc {_adfb .Set (_cbeb ,_cbcd );};case *_ce .PdfObjectStreams :_addb (_adfb .Elements (),_dbdb );
case *_ce .PdfObjectStream :_ecc :=[]_ce .PdfObject {_adfb .PdfObjectDictionary };_addb (_ecc ,_dbdb );_adfb .PdfObjectDictionary =_ecc [0].(*_ce .PdfObjectDictionary );case *_ce .PdfObjectDictionary :_dcfef :=_adfb .Keys ();_dedb :=make ([]_ce .PdfObject ,len (_dcfef ));
for _cbgg ,_adef :=range _dcfef {_dedb [_cbgg ]=_adfb .Get (_adef );};_addb (_dedb ,_dbdb );for _aaed ,_cfbd :=range _dcfef {_adfb .Set (_cfbd ,_dedb [_aaed ]);};case *_ce .PdfIndirectObject :_edee :=[]_ce .PdfObject {_adfb .PdfObject };_addb (_edee ,_dbdb );
_adfb .PdfObject =_edee [0];};};};

// CombineIdenticalIndirectObjects combines identical indirect objects.
// It implements interface model.Optimizer.
type CombineIdenticalIndirectObjects struct{};

// Optimize optimizes PDF objects to decrease PDF size.
func (_afab *ImagePPI )Optimize (objects []_ce .PdfObject )(_ggaf []_ce .PdfObject ,_fdga error ){if _afab .ImageUpperPPI <=0{return objects ,nil ;};_efad :=_fff (objects );if len (_efad )==0{return objects ,nil ;};_eed :=make (map[_ce .PdfObject ]struct{});
for _ ,_dag :=range _efad {_bcec :=_dag .Stream .PdfObjectDictionary .Get ("\u0053\u004d\u0061s\u006b");_eed [_bcec ]=struct{}{};};_afga :=make (map[*_ce .PdfObjectStream ]*imageInfo );for _ ,_fae :=range _efad {_afga [_fae .Stream ]=_fae ;};var _efadd *_ce .PdfObjectDictionary ;
for _ ,_dadgc :=range objects {if _ade ,_aedd :=_ce .GetDict (_dadgc );_efadd ==nil &&_aedd {if _eeeg ,_cba :=_ce .GetName (_ade .Get ("\u0054\u0079\u0070\u0065"));_cba &&*_eeeg =="\u0043a\u0074\u0061\u006c\u006f\u0067"{_efadd =_ade ;};};};if _efadd ==nil {return objects ,nil ;
};_caaf ,_cbfc :=_ce .GetDict (_efadd .Get ("\u0050\u0061\u0067e\u0073"));if !_cbfc {return objects ,nil ;};_eafa ,_deff :=_ce .GetArray (_caaf .Get ("\u004b\u0069\u0064\u0073"));if !_deff {return objects ,nil ;};for _ ,_cagc :=range _eafa .Elements (){_dda :=make (map[string ]*imageInfo );
_bccb ,_eade :=_ce .GetDict (_cagc );if !_eade {continue ;};_becd ,_ :=_ffa (_bccb .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));if len (_becd )==0{continue ;};_fbb ,_gaa :=_ce .GetDict (_bccb .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"));
if !_gaa {continue ;};_dfba ,_bccg :=_aa .NewPdfPageResourcesFromDict (_fbb );if _bccg !=nil {_c .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0072\u0065\u0073\u006f\u0075\u0072\u0063\u0065\u0073\u0020-\u0020\u0069\u0067\u006e\u006fr\u0069\u006eg\u003a\u0020\u0025\u0076",_bccg );
continue ;};_cfcfd ,_eef :=_ce .GetDict (_fbb .Get ("\u0058O\u0062\u006a\u0065\u0063\u0074"));if !_eef {continue ;};_dcdd :=_cfcfd .Keys ();for _ ,_agg :=range _dcdd {if _eace ,_fbc :=_ce .GetStream (_cfcfd .Get (_agg ));_fbc {if _efgc ,_ecg :=_afga [_eace ];
_ecg {_dda [string (_agg )]=_efgc ;};};};_cabe :=_adc .NewContentStreamParser (_becd );_edf ,_bccg :=_cabe .Parse ();if _bccg !=nil {_c .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_bccg );continue ;};_ged :=_adc .NewContentStreamProcessor (*_edf );
_ged .AddHandler (_adc .HandlerConditionEnumAllOperands ,"",func (_cdaf *_adc .ContentStreamOperation ,_egab _adc .GraphicsState ,_cdafc *_aa .PdfPageResources )error {switch _cdaf .Operand {case "\u0044\u006f":if len (_cdaf .Params )!=1{_c .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020\u0049\u0067\u006e\u006f\u0072\u0069\u006e\u0067\u0020\u0044\u006f\u0020w\u0069\u0074\u0068\u0020\u006c\u0065\u006e\u0028\u0070\u0061ra\u006d\u0073\u0029 \u0021=\u0020\u0031");
return nil ;};_baad ,_dead :=_ce .GetName (_cdaf .Params [0]);if !_dead {_c .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0049\u0067\u006e\u006f\u0072\u0069\u006e\u0067\u0020\u0044\u006f\u0020\u0077\u0069\u0074\u0068\u0020\u006e\u006f\u006e\u0020\u004e\u0061\u006d\u0065\u0020p\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072");
return nil ;};if _fafa ,_ffef :=_dda [string (*_baad )];_ffef {_eec :=_egab .CTM .ScalingFactorX ();_edef :=_egab .CTM .ScalingFactorY ();_fccg ,_efde :=_eec /72.0,_edef /72.0;_aee ,_fdf :=float64 (_fafa .Width )/_fccg ,float64 (_fafa .Height )/_efde ;
if _fccg ==0||_efde ==0{_aee =72.0;_fdf =72.0;};_fafa .PPI =_ad .Max (_fafa .PPI ,_aee );_fafa .PPI =_ad .Max (_fafa .PPI ,_fdf );};};return nil ;});_bccg =_ged .Process (_dfba );if _bccg !=nil {_c .Log .Debug ("E\u0052\u0052\u004f\u0052 p\u0072o\u0063\u0065\u0073\u0073\u0069n\u0067\u003a\u0020\u0025\u002b\u0076",_bccg );
continue ;};};for _ ,_cbfd :=range _efad {if _ ,_dcce :=_eed [_cbfd .Stream ];_dcce {continue ;};if _cbfd .PPI <=_afab .ImageUpperPPI {continue ;};_eedd ,_gebff :=_aa .NewXObjectImageFromStream (_cbfd .Stream );if _gebff !=nil {_c .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_gebff );
continue ;};var _fbbd imageModifications ;_fbbd .Scale =_afab .ImageUpperPPI /_cbfd .PPI ;if _cbfd .BitsPerComponent ==1&&_cbfd .ColorComponents ==1{_edd :=_ad .Round (_cbfd .PPI /_afab .ImageUpperPPI );_eefg :=_e .NextPowerOf2 (uint (_edd ));if _e .InDelta (float64 (_eefg ),1/_fbbd .Scale ,0.3){_fbbd .Scale =float64 (1)/float64 (_eefg );
};if _ ,_afgae :=_eedd .Filter .(*_ce .JBIG2Encoder );!_afgae {_fbbd .Encoding =_ce .NewJBIG2Encoder ();};};if _gebff =_gfcd (_eedd ,_fbbd );_gebff !=nil {_c .Log .Debug ("\u0045\u0072\u0072\u006f\u0072 \u0073\u0063\u0061\u006c\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u006be\u0065\u0070\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0073",_gebff );
continue ;};_fbbd .Encoding =nil ;if _fca ,_gbbd :=_ce .GetStream (_cbfd .Stream .PdfObjectDictionary .Get ("\u0053\u004d\u0061s\u006b"));_gbbd {_fee ,_dcg :=_aa .NewXObjectImageFromStream (_fca );if _dcg !=nil {_c .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_dcg );
continue ;};if _dcg =_gfcd (_fee ,_fbbd );_dcg !=nil {_c .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_dcg );continue ;};};};return objects ,nil ;};

// Chain allows to use sequence of optimizers.
// It implements interface model.Optimizer.
type Chain struct{_dg []_aa .Optimizer };type imageInfo struct{BitsPerComponent int ;ColorComponents int ;Width int ;Height int ;Stream *_ce .PdfObjectStream ;PPI float64 ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_fdge *CombineDuplicateStreams )Optimize (objects []_ce .PdfObject )(_egdc []_ce .PdfObject ,_dgaa error ){_cdc :=make (map[_ce .PdfObject ]_ce .PdfObject );_dfgb :=make (map[_ce .PdfObject ]struct{});_bdfe :=make (map[string ][]*_ce .PdfObjectStream );
for _ ,_aaca :=range objects {if _cac ,_gef :=_aaca .(*_ce .PdfObjectStream );_gef {_afge :=_af .New ();_afge .Write (_cac .Stream );_afge .Write ([]byte (_cac .PdfObjectDictionary .WriteString ()));_gfgf :=string (_afge .Sum (nil ));_bdfe [_gfgf ]=append (_bdfe [_gfgf ],_cac );
};};for _ ,_eeaf :=range _bdfe {if len (_eeaf )< 2{continue ;};_afe :=_eeaf [0];for _fafg :=1;_fafg < len (_eeaf );_fafg ++{_bfa :=_eeaf [_fafg ];_cdc [_bfa ]=_afe ;_dfgb [_bfa ]=struct{}{};};};_egdc =make ([]_ce .PdfObject ,0,len (objects )-len (_dfgb ));
for _ ,_dafd :=range objects {if _ ,_cgeb :=_dfgb [_dafd ];_cgeb {continue ;};_egdc =append (_egdc ,_dafd );};_addb (_egdc ,_cdc );return _egdc ,nil ;};func _ffa (_fbgd _ce .PdfObject )(_gbac string ,_ggff []_ce .PdfObject ){var _bgbf _df .Buffer ;switch _bac :=_fbgd .(type ){case *_ce .PdfIndirectObject :_ggff =append (_ggff ,_bac );
_fbgd =_bac .PdfObject ;};switch _abfaa :=_fbgd .(type ){case *_ce .PdfObjectStream :if _afgfd ,_agfd :=_ce .DecodeStream (_abfaa );_agfd ==nil {_bgbf .Write (_afgfd );_ggff =append (_ggff ,_abfaa );};case *_ce .PdfObjectArray :for _ ,_afaf :=range _abfaa .Elements (){switch _bege :=_afaf .(type ){case *_ce .PdfObjectStream :if _cadf ,_faga :=_ce .DecodeStream (_bege );
_faga ==nil {_bgbf .Write (_cadf );_ggff =append (_ggff ,_bege );};};};};return _bgbf .String (),_ggff ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_effd *CombineIdenticalIndirectObjects )Optimize (objects []_ce .PdfObject )(_gae []_ce .PdfObject ,_fba error ){_afabd (objects );_gff :=make (map[_ce .PdfObject ]_ce .PdfObject );_cggf :=make (map[_ce .PdfObject ]struct{});_gaf :=make (map[string ][]*_ce .PdfIndirectObject );
for _ ,_feaa :=range objects {_gea ,_cfb :=_feaa .(*_ce .PdfIndirectObject );if !_cfb {continue ;};if _dffa ,_cbef :=_gea .PdfObject .(*_ce .PdfObjectDictionary );_cbef {if _bdda ,_dgd :=_dffa .Get ("\u0054\u0079\u0070\u0065").(*_ce .PdfObjectName );_dgd &&*_bdda =="\u0050\u0061\u0067\u0065"{continue ;
};if _bcg :=_dffa .Keys ();len (_bcg )==0{continue ;};_ecec :=_af .New ();_ecec .Write ([]byte (_dffa .WriteString ()));_eceg :=string (_ecec .Sum (nil ));_gaf [_eceg ]=append (_gaf [_eceg ],_gea );};};for _ ,_eca :=range _gaf {if len (_eca )< 2{continue ;
};_aaae :=_eca [0];for _fgga :=1;_fgga < len (_eca );_fgga ++{_bbd :=_eca [_fgga ];_gff [_bbd ]=_aaae ;_cggf [_bbd ]=struct{}{};};};_gae =make ([]_ce .PdfObject ,0,len (objects )-len (_cggf ));for _ ,_gfee :=range objects {if _ ,_addc :=_cggf [_gfee ];
_addc {continue ;};_gae =append (_gae ,_gfee );};_addb (_gae ,_gff );return _gae ,nil ;};

// ObjectStreams groups PDF objects to object streams.
// It implements interface model.Optimizer.
type ObjectStreams struct{};