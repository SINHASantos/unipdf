//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package optimize ;import (_ad "bytes";_ec "crypto/md5";_eg "errors";_f "fmt";_g "github.com/unidoc/unipdf/v4/common";_c "github.com/unidoc/unipdf/v4/contentstream";_cf "github.com/unidoc/unipdf/v4/core";_ed "github.com/unidoc/unipdf/v4/extractor";_a "github.com/unidoc/unipdf/v4/internal/imageutil";
_gc "github.com/unidoc/unipdf/v4/internal/textencoding";_b "github.com/unidoc/unipdf/v4/model";_ab "github.com/unidoc/unitype";_e "golang.org/x/image/draw";_ee "math";_ea "strings";);type imageInfo struct{BitsPerComponent int ;ColorComponents int ;Width int ;
Height int ;Stream *_cf .PdfObjectStream ;PPI float64 ;};

// New creates a optimizers chain from options.
func New (options Options )*Chain {_ccda :=new (Chain );if options .CleanFonts ||options .SubsetFonts {_ccda .Append (&CleanFonts {Subset :options .SubsetFonts });};if options .CleanContentstream {_ccda .Append (new (CleanContentstream ));};if options .ImageUpperPPI > 0{_bbde :=new (ImagePPI );
_bbde .ImageUpperPPI =options .ImageUpperPPI ;_ccda .Append (_bbde );};if options .ImageQuality > 0{_becb :=new (Image );_becb .ImageQuality =options .ImageQuality ;_ccda .Append (_becb );};if options .CombineDuplicateDirectObjects {_ccda .Append (new (CombineDuplicateDirectObjects ));
};if options .CombineDuplicateStreams {_ccda .Append (new (CombineDuplicateStreams ));};if options .CombineIdenticalIndirectObjects {_ccda .Append (new (CombineIdenticalIndirectObjects ));};if options .UseObjectStreams {_ccda .Append (new (ObjectStreams ));
};if options .CompressStreams {_ccda .Append (new (CompressStreams ));};if options .CleanUnusedResources {_ccda .Append (new (CleanUnusedResources ));};return _ccda ;};func _ce (_egg *_cf .PdfObjectStream )error {_fbg ,_dfg :=_cf .DecodeStream (_egg );
if _dfg !=nil {return _dfg ;};_ggf :=_c .NewContentStreamParser (string (_fbg ));_bd ,_dfg :=_ggf .Parse ();if _dfg !=nil {return _dfg ;};_bd =_ddb (_bd );_cc :=_bd .Bytes ();if len (_cc )>=len (_fbg ){return nil ;};_dgc ,_dfg :=_cf .MakeStream (_bd .Bytes (),_cf .NewFlateEncoder ());
if _dfg !=nil {return _dfg ;};_egg .Stream =_dgc .Stream ;_egg .Merge (_dgc .PdfObjectDictionary );return nil ;};func _afb (_cda *_cf .PdfObjectStream ,_dbag []rune ,_gea []_ab .GlyphIndex )error {_cda ,_gce :=_cf .GetStream (_cda );if !_gce {_g .Log .Debug ("\u0045\u006d\u0062\u0065\u0064\u0064\u0065\u0064\u0020\u0066\u006f\u006e\u0074\u0020\u006f\u0062\u006a\u0065c\u0074\u0020\u006e\u006f\u0074\u0020\u0066o\u0075\u006e\u0064\u0020\u002d\u002d\u0020\u0041\u0042\u004f\u0052T\u0020\u0073\u0075\u0062\u0073\u0065\u0074\u0074\u0069\u006e\u0067");
return _eg .New ("\u0066\u006f\u006e\u0074fi\u006c\u0065\u0032\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_fdd ,_eeg :=_cf .DecodeStream (_cda );if _eeg !=nil {_g .Log .Debug ("\u0044\u0065c\u006f\u0064\u0065 \u0065\u0072\u0072\u006f\u0072\u003a\u0020\u0025\u0076",_eeg );
return _eeg ;};_fdg ,_eeg :=_ab .Parse (_ad .NewReader (_fdd ));if _eeg !=nil {_g .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0070\u0061\u0072\u0073\u0069n\u0067\u0020\u0025\u0064\u0020\u0062\u0079\u0074\u0065\u0020f\u006f\u006e\u0074",len (_cda .Stream ));
return _eeg ;};_cdd :=_gea ;if len (_dbag )> 0{_fbc :=_fdg .LookupRunes (_dbag );_cdd =append (_cdd ,_fbc ...);};_fdg ,_eeg =_fdg .SubsetKeepIndices (_cdd );if _eeg !=nil {_g .Log .Debug ("\u0045R\u0052\u004f\u0052\u0020s\u0075\u0062\u0073\u0065\u0074t\u0069n\u0067 \u0066\u006f\u006e\u0074\u003a\u0020\u0025v",_eeg );
return _eeg ;};var _gb _ad .Buffer ;_eeg =_fdg .Write (&_gb );if _eeg !=nil {_g .Log .Debug ("\u0045\u0052\u0052\u004fR \u0057\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076",_eeg );return _eeg ;};if _gb .Len ()> len (_fdd ){_g .Log .Debug ("\u0052\u0065-\u0077\u0072\u0069\u0074\u0074\u0065\u006e\u0020\u0066\u006f\u006e\u0074\u0020\u0069\u0073\u0020\u006c\u0061\u0072\u0067\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u002d\u0020\u0073\u006b\u0069\u0070");
return nil ;};_bce ,_eeg :=_cf .MakeStream (_gb .Bytes (),_cf .NewFlateEncoder ());if _eeg !=nil {_g .Log .Debug ("\u0045\u0052\u0052\u004fR \u0057\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076",_eeg );return _eeg ;
};*_cda =*_bce ;_cda .Set ("\u004ce\u006e\u0067\u0074\u0068\u0031",_cf .MakeInteger (int64 (_gb .Len ())));return nil ;};func _fcg (_dfca []_cf .PdfObject )(map[_cf .PdfObject ]struct{},error ){_caa :=_geeea (_dfca );_dbad :=_caa ._edc ;_ccb :=make (map[_cf .PdfObject ]struct{});
_dcdb :=_gdf (_dbad );for _ ,_age :=range _dbad {_bgd ,_cef :=_cf .GetDict (_age .PdfObject );if !_cef {continue ;};_egf ,_cef :=_cf .GetDict (_bgd .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"));if !_cef {continue ;};_egcg :=_dcdb ["\u0058O\u0062\u006a\u0065\u0063\u0074"];
_bgf ,_cef :=_cf .GetDict (_egf .Get ("\u0058O\u0062\u006a\u0065\u0063\u0074"));if _cef {_aff :=_gef (_bgf );for _ ,_gdbd :=range _aff {if _aeea (_gdbd ,_egcg ){continue ;};_cag :=*_cf .MakeName (_gdbd );_cge :=_bgf .Get (_cag );_ccb [_cge ]=struct{}{};
_bgf .Remove (_cag );_gfcd :=_fbf (_cge ,_ccb );if _gfcd !=nil {_g .Log .Debug ("\u0066\u0061\u0069\u006ce\u0064\u0020\u0074\u006f\u0020\u0074\u0072\u0061\u0076\u0065r\u0073e\u0020\u006f\u0062\u006a\u0065\u0063\u0074 \u0025\u0076",_cge );};};};_cac ,_cef :=_cf .GetDict (_egf .Get ("\u0046\u006f\u006e\u0074"));
_aee :=_dcdb ["\u0046\u006f\u006e\u0074"];if _cef {_ga :=_gef (_cac );for _ ,_cae :=range _ga {if _aeea (_cae ,_aee ){continue ;};_abc :=*_cf .MakeName (_cae );_cdc :=_cac .Get (_abc );_ccb [_cdc ]=struct{}{};_cac .Remove (_abc );_beb :=_fbf (_cdc ,_ccb );
if _beb !=nil {_g .Log .Debug ("\u0046\u0061i\u006c\u0065\u0064\u0020\u0074\u006f\u0020\u0074\u0072\u0061\u0076\u0065\u0072\u0073\u0065\u0020\u006f\u0062\u006a\u0065\u0063\u0074 %\u0076\u000a",_cdc );};};};_fab ,_cef :=_cf .GetDict (_egf .Get ("\u0045x\u0074\u0047\u0053\u0074\u0061\u0074e"));
if _cef {_gcfc :=_gef (_fab );_eff :=_dcdb ["\u0045x\u0074\u0047\u0053\u0074\u0061\u0074e"];for _ ,_fbaf :=range _gcfc {if _aeea (_fbaf ,_eff ){continue ;};_acab :=*_cf .MakeName (_fbaf );_fggg :=_fab .Get (_acab );_ccb [_fggg ]=struct{}{};_fab .Remove (_acab );
_acaf :=_fbf (_fggg ,_ccb );if _acaf !=nil {_g .Log .Debug ("\u0066\u0061i\u006c\u0065\u0064\u0020\u0074\u006f\u0020\u0074\u0072\u0061\u0076\u0065\u0072\u0073\u0065\u0020\u006f\u0062\u006a\u0065\u0063\u0074 %\u0076\u000a",_fggg );};};};};return _ccb ,nil ;
};

// Image optimizes images by rewrite images into JPEG format with quality equals to ImageQuality.
// TODO(a5i): Add support for inline images.
// It implements interface model.Optimizer.
type Image struct{ImageQuality int ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_gd *CleanContentstream )Optimize (objects []_cf .PdfObject )(_dcf []_cf .PdfObject ,_ega error ){_ef :=map[*_cf .PdfObjectStream ]struct{}{};var _ge []*_cf .PdfObjectStream ;_gee :=func (_ca *_cf .PdfObjectStream ){if _ ,_egad :=_ef [_ca ];!_egad {_ef [_ca ]=struct{}{};
_ge =append (_ge ,_ca );};};_gdb :=map[_cf .PdfObject ]bool {};_fdc :=map[_cf .PdfObject ]bool {};for _ ,_dfe :=range objects {switch _eb :=_dfe .(type ){case *_cf .PdfIndirectObject :switch _ebe :=_eb .PdfObject .(type ){case *_cf .PdfObjectDictionary :if _eda ,_abg :=_cf .GetName (_ebe .Get ("\u0054\u0079\u0070\u0065"));
!_abg ||_eda .String ()!="\u0050\u0061\u0067\u0065"{continue ;};if _af ,_bdf :=_cf .GetStream (_ebe .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));_bdf {_gee (_af );}else if _ba ,_cd :=_cf .GetArray (_ebe .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));
_cd {var _ccf []*_cf .PdfObjectStream ;for _ ,_dcd :=range _ba .Elements (){if _dgce ,_cde :=_cf .GetStream (_dcd );_cde {_ccf =append (_ccf ,_dgce );};};if len (_ccf )> 0{var _ece _ad .Buffer ;for _ ,_bf :=range _ccf {if _ddbe ,_ff :=_cf .DecodeStream (_bf );
_ff ==nil {_ece .Write (_ddbe );};_gdb [_bf ]=true ;};_gfa ,_da :=_cf .MakeStream (_ece .Bytes (),_cf .NewFlateEncoder ());if _da !=nil {return nil ,_da ;};_fdc [_gfa ]=true ;_ebe .Set ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073",_gfa );_gee (_gfa );
};};};case *_cf .PdfObjectStream :if _bfg ,_eed :=_cf .GetName (_eb .Get ("\u0054\u0079\u0070\u0065"));!_eed ||_bfg .String ()!="\u0058O\u0062\u006a\u0065\u0063\u0074"{continue ;};if _cga ,_fgb :=_cf .GetName (_eb .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));
!_fgb ||_cga .String ()!="\u0046\u006f\u0072\u006d"{continue ;};_gee (_eb );};};for _ ,_gge :=range _ge {_ega =_ce (_gge );if _ega !=nil {return nil ,_ega ;};};_dcf =nil ;for _ ,_dbd :=range objects {if _gdb [_dbd ]{continue ;};_dcf =append (_dcf ,_dbd );
};for _ebc :=range _fdc {_dcf =append (_dcf ,_ebc );};return _dcf ,nil ;};

// CleanFonts cleans up embedded fonts, reducing font sizes.
type CleanFonts struct{

// Subset embedded fonts if encountered (if true).
// Otherwise attempts to reduce the font program.
Subset bool ;};func _cdba (_dcba []_cf .PdfObject ,_cfea map[_cf .PdfObject ]_cf .PdfObject ){if len (_cfea )==0{return ;};for _eafc ,_bedc :=range _dcba {if _edbb ,_acbf :=_cfea [_bedc ];_acbf {_dcba [_eafc ]=_edbb ;continue ;};_cfea [_bedc ]=_bedc ;switch _ccc :=_bedc .(type ){case *_cf .PdfObjectArray :_bfgb :=make ([]_cf .PdfObject ,_ccc .Len ());
copy (_bfgb ,_ccc .Elements ());_cdba (_bfgb ,_cfea );for _adg ,_bcgd :=range _bfgb {_ccc .Set (_adg ,_bcgd );};case *_cf .PdfObjectStreams :_cdba (_ccc .Elements (),_cfea );case *_cf .PdfObjectStream :_becc :=[]_cf .PdfObject {_ccc .PdfObjectDictionary };
_cdba (_becc ,_cfea );_ccc .PdfObjectDictionary =_becc [0].(*_cf .PdfObjectDictionary );case *_cf .PdfObjectDictionary :_fac :=_ccc .Keys ();_agg :=make ([]_cf .PdfObject ,len (_fac ));for _bdbb ,_gfff :=range _fac {_agg [_bdbb ]=_ccc .Get (_gfff );};_cdba (_agg ,_cfea );
for _defg ,_adeg :=range _fac {_ccc .Set (_adeg ,_agg [_defg ]);};case *_cf .PdfIndirectObject :_ccdg :=[]_cf .PdfObject {_ccc .PdfObject };_cdba (_ccdg ,_cfea );_ccc .PdfObject =_ccdg [0];};};};func _ceba (_dcgg *_b .XObjectImage ,_geba imageModifications )error {_dgga ,_ebfe :=_dcgg .ToImage ();
if _ebfe !=nil {return _ebfe ;};if _geba .Scale !=0{_dgga ,_ebfe =_decd (_dgga ,_geba .Scale );if _ebfe !=nil {return _ebfe ;};};if _geba .Encoding !=nil {_dcgg .Filter =_geba .Encoding ;};_dcgg .Decode =nil ;switch _gdcc :=_dcgg .Filter .(type ){case *_cf .FlateEncoder :if _gdcc .Predictor !=1&&_gdcc .Predictor !=11{_gdcc .Predictor =1;
};};if _ebfe =_dcgg .SetImage (_dgga ,nil );_ebfe !=nil {_g .Log .Debug ("\u0045\u0072\u0072or\u0020\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0076",_ebfe );return _ebfe ;};_dcgg .ToPdfObject ();return nil ;
};func _aeea (_cgee string ,_bgdg []string )bool {for _ ,_aede :=range _bgdg {if _cgee ==_aede {return true ;};};return false ;};

// CompressStreams compresses uncompressed streams.
// It implements interface model.Optimizer.
type CompressStreams struct{};

// Optimize optimizes PDF objects to decrease PDF size.
func (_ccee *Image )Optimize (objects []_cf .PdfObject )(_cdb []_cf .PdfObject ,_eeb error ){if _ccee .ImageQuality <=0{return objects ,nil ;};_affc :=_fdaa (objects );if len (_affc )==0{return objects ,nil ;};_cebc :=make (map[_cf .PdfObject ]_cf .PdfObject );
_ceeb :=make (map[_cf .PdfObject ]struct{});for _ ,_gdgb :=range _affc {_gcfce :=_gdgb .Stream .Get ("\u0053\u004d\u0061s\u006b");_ceeb [_gcfce ]=struct{}{};};for _ffe ,_bdcg :=range _affc {_begb :=_bdcg .Stream ;if _ ,_abfd :=_ceeb [_begb ];_abfd {continue ;
};_gcge ,_bdae :=_b .NewXObjectImageFromStream (_begb );if _bdae !=nil {_g .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_bdae );continue ;};switch _gcge .Filter .(type ){case *_cf .JBIG2Encoder :continue ;case *_cf .CCITTFaxEncoder :continue ;
};_bfa ,_bdae :=_gcge .ToImage ();if _bdae !=nil {_g .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_bdae );continue ;};_efbb :=_cf .NewDCTEncoder ();_efbb .ColorComponents =_bfa .ColorComponents ;_efbb .Quality =_ccee .ImageQuality ;
_efbb .BitsPerComponent =_bdcg .BitsPerComponent ;_efbb .Width =_bdcg .Width ;_efbb .Height =_bdcg .Height ;_aabd ,_bdae :=_efbb .EncodeBytes (_bfa .Data );if _bdae !=nil {_g .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_bdae );
continue ;};var _bfce _cf .StreamEncoder ;_bfce =_efbb ;{_fag :=_cf .NewFlateEncoder ();_abbcd :=_cf .NewMultiEncoder ();_abbcd .AddEncoder (_fag );_abbcd .AddEncoder (_efbb );_fgf ,_fdb :=_abbcd .EncodeBytes (_bfa .Data );if _fdb !=nil {_g .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_fdb );
continue ;};if len (_fgf )< len (_aabd ){_g .Log .Trace ("\u004d\u0075\u006c\u0074\u0069\u0020\u0065\u006e\u0063\u0020\u0069\u006d\u0070\u0072\u006f\u0076\u0065\u0073\u003a\u0020\u0025\u0064\u0020\u0074o\u0020\u0025\u0064\u0020\u0028o\u0072\u0069g\u0020\u0025\u0064\u0029",len (_aabd ),len (_fgf ),len (_begb .Stream ));
_aabd =_fgf ;_bfce =_abbcd ;};};_bfd :=len (_begb .Stream );if _bfd < len (_aabd ){continue ;};_eab :=&_cf .PdfObjectStream {Stream :_aabd };_eab .PdfObjectReference =_begb .PdfObjectReference ;_eab .PdfObjectDictionary =_cf .MakeDict ();_eab .Merge (_begb .PdfObjectDictionary );
_eab .Merge (_bfce .MakeStreamDict ());_eab .Set ("\u004c\u0065\u006e\u0067\u0074\u0068",_cf .MakeInteger (int64 (len (_aabd ))));_cebc [_begb ]=_eab ;_affc [_ffe ].Stream =_eab ;};_cdb =make ([]_cf .PdfObject ,len (objects ));copy (_cdb ,objects );_cdba (_cdb ,_cebc );
return _cdb ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_cdcg *ObjectStreams )Optimize (objects []_cf .PdfObject )(_aaab []_cf .PdfObject ,_gceg error ){_egef :=&_cf .PdfObjectStreams {};_cdebf :=make ([]_cf .PdfObject ,0,len (objects ));for _ ,_efdg :=range objects {if _fefd ,_bfag :=_efdg .(*_cf .PdfIndirectObject );
_bfag &&_fefd .GenerationNumber ==0{_egef .Append (_efdg );}else {_cdebf =append (_cdebf ,_efdg );};};if _egef .Len ()==0{return _cdebf ,nil ;};_aaab =make ([]_cf .PdfObject ,0,len (_cdebf )+_egef .Len ()+1);if _egef .Len ()> 1{_aaab =append (_aaab ,_egef );
};_aaab =append (_aaab ,_egef .Elements ()...);_aaab =append (_aaab ,_cdebf ...);return _aaab ,nil ;};

// Chain allows to use sequence of optimizers.
// It implements interface model.Optimizer.
type Chain struct{_ac []_b .Optimizer };

// Optimize optimizes PDF objects to decrease PDF size.
func (_ebb *CombineIdenticalIndirectObjects )Optimize (objects []_cf .PdfObject )(_ccbd []_cf .PdfObject ,_ecfc error ){_bbdd (objects );_dcbd :=make (map[_cf .PdfObject ]_cf .PdfObject );_aabb :=make (map[_cf .PdfObject ]struct{});_cgge :=make (map[string ][]*_cf .PdfIndirectObject );
for _ ,_bacd :=range objects {_agd ,_geee :=_bacd .(*_cf .PdfIndirectObject );if !_geee {continue ;};if _dea ,_agb :=_agd .PdfObject .(*_cf .PdfObjectDictionary );_agb {if _fce ,_ffbg :=_dea .Get ("\u0054\u0079\u0070\u0065").(*_cf .PdfObjectName );_ffbg &&*_fce =="\u0050\u0061\u0067\u0065"{continue ;
};if _efg :=_dea .Keys ();len (_efg )==0{continue ;};_gegb :=_ec .New ();_gegb .Write (_dea .Write ());_efge :=string (_gegb .Sum (nil ));_cgge [_efge ]=append (_cgge [_efge ],_agd );};};for _ ,_cdeb :=range _cgge {if len (_cdeb )< 2{continue ;};_dbdc :=_cdeb [0];
for _fbb :=1;_fbb < len (_cdeb );_fbb ++{_bda :=_cdeb [_fbb ];_dcbd [_bda ]=_dbdc ;_aabb [_bda ]=struct{}{};};};_ccbd =make ([]_cf .PdfObject ,0,len (objects )-len (_aabb ));for _ ,_eefe :=range objects {if _ ,_bcb :=_aabb [_eefe ];_bcb {continue ;};_ccbd =append (_ccbd ,_eefe );
};_cdba (_ccbd ,_dcbd );return _ccbd ,nil ;};func _bbcc (_ggea _cf .PdfObject )(string ,error ){_ffbf :=_cf .TraceToDirectObject (_ggea );switch _egfb :=_ffbf .(type ){case *_cf .PdfObjectString :return _egfb .Str (),nil ;case *_cf .PdfObjectStream :_eade ,_eaed :=_cf .DecodeStream (_egfb );
if _eaed !=nil {return "",_eaed ;};return string (_eade ),nil ;};return "",_f .Errorf ("\u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u0063\u006f\u006e\u0074\u0065\u006e\u0074\u0020\u0073\u0074\u0072e\u0061\u006d\u0020\u006f\u0062\u006a\u0065\u0063\u0074\u0020\u0068\u006f\u006c\u0064\u0065\u0072\u0020\u0028\u0025\u0054\u0029",_ffbf );
};func _ddbf (_abf _cf .PdfObject )[]content {if _abf ==nil {return nil ;};_bea ,_gffe :=_cf .GetArray (_abf );if !_gffe {_g .Log .Debug ("\u0041\u006e\u006e\u006fts\u0020\u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0061\u0072\u0072\u0061\u0079");return nil ;
};var _dbg []content ;for _ ,_gdba :=range _bea .Elements (){_geg ,_dge :=_cf .GetDict (_gdba );if !_dge {_g .Log .Debug ("I\u0067\u006e\u006f\u0072\u0069\u006eg\u0020\u006e\u006f\u006e\u002d\u0064i\u0063\u0074\u0020\u0065\u006c\u0065\u006de\u006e\u0074\u0020\u0069\u006e\u0020\u0041\u006e\u006e\u006ft\u0073");
continue ;};_faa ,_dge :=_cf .GetDict (_geg .Get ("\u0041\u0050"));if !_dge {_g .Log .Debug ("\u004e\u006f\u0020\u0041P \u0065\u006e\u0074\u0072\u0079\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067");continue ;};_ggeg :=_cf .TraceToDirectObject (_faa .Get ("\u004e"));
if _ggeg ==nil {_g .Log .Debug ("N\u006f\u0020\u004e\u0020en\u0074r\u0079\u0020\u002d\u0020\u0073k\u0069\u0070\u0070\u0069\u006e\u0067");continue ;};var _cdde *_cf .PdfObjectStream ;switch _aca :=_ggeg .(type ){case *_cf .PdfObjectDictionary :_fbca ,_fe :=_cf .GetName (_geg .Get ("\u0041\u0053"));
if !_fe {_g .Log .Debug ("\u004e\u006f\u0020\u0041S \u0065\u006e\u0074\u0072\u0079\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067");continue ;};_cdde ,_fe =_cf .GetStream (_aca .Get (*_fbca ));if !_fe {_g .Log .Debug ("\u0046o\u0072\u006d\u0020\u006eo\u0074\u0020\u0066\u006f\u0075n\u0064 \u002d \u0073\u006b\u0069\u0070\u0070\u0069\u006eg");
continue ;};case *_cf .PdfObjectStream :_cdde =_aca ;};if _cdde ==nil {_g .Log .Debug ("\u0046\u006f\u0072m\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0028n\u0069\u006c\u0029\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067");
continue ;};_fgg ,_daf :=_b .NewXObjectFormFromStream (_cdde );if _daf !=nil {_g .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020l\u006f\u0061\u0064\u0069\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_daf );
continue ;};_dga ,_daf :=_fgg .GetContentStream ();if _daf !=nil {_g .Log .Debug ("E\u0072\u0072\u006f\u0072\u0020\u0064e\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0063\u006fn\u0074\u0065\u006et\u0073:\u0020\u0025\u0076",_daf );continue ;};_dbg =append (_dbg ,content {_geag :string (_dga ),_cgg :_fgg .Resources });
};return _dbg ;};

// CleanContentstream cleans up redundant operands in content streams, including Page and XObject Form
// contents. This process includes:
// 1. Marked content operators are removed.
// 2. Some operands are simplified (shorter form).
// TODO: Add more reduction methods and improving the methods for identifying unnecessary operands.
type CleanContentstream struct{};

// CleanUnusedResources represents an optimizer used to clean unused resources.
type CleanUnusedResources struct{};func _fdge (_cddg _cf .PdfObject )(_cagc string ,_caeg []_cf .PdfObject ){var _aaga _ad .Buffer ;switch _gdd :=_cddg .(type ){case *_cf .PdfIndirectObject :_caeg =append (_caeg ,_gdd );_cddg =_gdd .PdfObject ;};switch _gcee :=_cddg .(type ){case *_cf .PdfObjectStream :if _gfb ,_abba :=_cf .DecodeStream (_gcee );
_abba ==nil {_aaga .Write (_gfb );_caeg =append (_caeg ,_gcee );};case *_cf .PdfObjectArray :for _ ,_gfbc :=range _gcee .Elements (){switch _gfge :=_gfbc .(type ){case *_cf .PdfObjectStream :if _faeg ,_fbfa :=_cf .DecodeStream (_gfge );_fbfa ==nil {_aaga .Write (_faeg );
_caeg =append (_caeg ,_gfge );};};};};return _aaga .String (),_caeg ;};func _gef (_baf *_cf .PdfObjectDictionary )[]string {_bee :=[]string {};for _ ,_cdee :=range _baf .Keys (){_bee =append (_bee ,_cdee .String ());};return _bee ;};func _daa (_efa []_cf .PdfObject )(_de map[*_cf .PdfObjectStream ]struct{},_cbg error ){_de =map[*_cf .PdfObjectStream ]struct{}{};
_dbb :=map[*_b .PdfFont ]struct{}{};_dad :=_geeea (_efa );for _ ,_ebca :=range _dad ._edc {_acd ,_acg :=_cf .GetDict (_ebca .PdfObject );if !_acg {continue ;};_geb ,_acg :=_cf .GetDict (_acd .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"));if !_acg {continue ;
};_bac ,_ :=_fdge (_acd .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));_ag ,_bg :=_b .NewPdfPageResourcesFromDict (_geb );if _bg !=nil {return nil ,_bg ;};_gdbg :=[]content {{_geag :_bac ,_cgg :_ag }};_deb :=_ddbf (_acd .Get ("\u0041\u006e\u006e\u006f\u0074\u0073"));
if _deb !=nil {_gdbg =append (_gdbg ,_deb ...);};for _ ,_dda :=range _gdbg {_bca ,_dec :=_ed .NewFromContents (_dda ._geag ,_dda ._cgg );if _dec !=nil {return nil ,_dec ;};_ege ,_ ,_ ,_dec :=_bca .ExtractPageText ();if _dec !=nil {return nil ,_dec ;};for _ ,_ceg :=range _ege .Marks ().Elements (){if _ceg .Font ==nil {continue ;
};if _ ,_bdfd :=_dbb [_ceg .Font ];!_bdfd {_dbb [_ceg .Font ]=struct{}{};};};};};_bbc :=map[*_cf .PdfObjectStream ][]*_b .PdfFont {};for _fga :=range _dbb {_bbb :=_fga .FontDescriptor ();if _bbb ==nil ||_bbb .FontFile2 ==nil {continue ;};_gdbe ,_eef :=_cf .GetStream (_bbb .FontFile2 );
if !_eef {continue ;};_bbc [_gdbe ]=append (_bbc [_gdbe ],_fga );};for _bfc :=range _bbc {var _ffb []rune ;var _cee []_ab .GlyphIndex ;for _ ,_fdca :=range _bbc [_bfc ]{switch _cgf :=_fdca .Encoder ().(type ){case *_gc .IdentityEncoder :_cfa :=_cgf .RegisteredRunes ();
_aed :=make ([]_ab .GlyphIndex ,len (_cfa ));for _efaf ,_cgd :=range _cfa {_aed [_efaf ]=_ab .GlyphIndex (_cgd );};_cee =append (_cee ,_aed ...);case *_gc .TrueTypeFontEncoder :_egc :=_cgf .RegisteredRunes ();_ffb =append (_ffb ,_egc ...);case _gc .SimpleEncoder :_cbb :=_cgf .Charcodes ();
for _ ,_fba :=range _cbb {_aab ,_fcd :=_cgf .CharcodeToRune (_fba );if !_fcd {_g .Log .Debug ("\u0043\u0068a\u0072\u0063\u006f\u0064\u0065\u003c\u002d\u003e\u0072\u0075\u006e\u0065\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064: \u0025\u0064",_fba );
continue ;};_ffb =append (_ffb ,_aab );};};};_cbg =_afb (_bfc ,_ffb ,_cee );if _cbg !=nil {_g .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020\u0073\u0075\u0062\u0073\u0065\u0074\u0074\u0069\u006eg\u0020f\u006f\u006e\u0074\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u003a\u0020\u0025\u0076",_cbg );
return nil ,_cbg ;};_de [_bfc ]=struct{}{};};return _de ,nil ;};

// CombineDuplicateStreams combines duplicated streams by its data hash.
// It implements interface model.Optimizer.
type CombineDuplicateStreams struct{};type imageModifications struct{Scale float64 ;Encoding _cf .StreamEncoder ;};func _ddb (_ecd *_c .ContentStreamOperations )*_c .ContentStreamOperations {if _ecd ==nil {return nil ;};_fc :=_c .ContentStreamOperations {};
for _ ,_ggg :=range *_ecd {switch _ggg .Operand {case "\u0042\u0044\u0043","\u0042\u004d\u0043","\u0045\u004d\u0043":continue ;case "\u0054\u006d":if len (_ggg .Params )==6{if _fd ,_bb :=_cf .GetNumbersAsFloat (_ggg .Params );_bb ==nil {if _fd [0]==1&&_fd [1]==0&&_fd [2]==0&&_fd [3]==1{_ggg =&_c .ContentStreamOperation {Params :[]_cf .PdfObject {_ggg .Params [4],_ggg .Params [5]},Operand :"\u0054\u0064"};
};};};};_fc =append (_fc ,_ggg );};return &_fc ;};func _fdaa (_bec []_cf .PdfObject )[]*imageInfo {_dagb :=_cf .PdfObjectName ("\u0053u\u0062\u0074\u0079\u0070\u0065");_ecb :=make (map[*_cf .PdfObjectStream ]struct{});var _fdfa []*imageInfo ;for _ ,_daag :=range _bec {_efb ,_abbcf :=_cf .GetStream (_daag );
if !_abbcf {continue ;};if _ ,_fgbaf :=_ecb [_efb ];_fgbaf {continue ;};_ecb [_efb ]=struct{}{};_cca :=_efb .PdfObjectDictionary .Get (_dagb );_ebd ,_abbcf :=_cf .GetName (_cca );if !_abbcf ||string (*_ebd )!="\u0049\u006d\u0061g\u0065"{continue ;};_gbeg :=&imageInfo {Stream :_efb ,BitsPerComponent :8};
if _gdc ,_gggd :=_cf .GetIntVal (_efb .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074"));_gggd {_gbeg .BitsPerComponent =_gdc ;};if _ggbb ,_cbc :=_cf .GetIntVal (_efb .Get ("\u0057\u0069\u0064t\u0068"));_cbc {_gbeg .Width =_ggbb ;
};if _fbag ,_gbb :=_cf .GetIntVal (_efb .Get ("\u0048\u0065\u0069\u0067\u0068\u0074"));_gbb {_gbeg .Height =_fbag ;};_cdebg ,_gcg :=_b .NewPdfColorspaceFromPdfObject (_efb .Get ("\u0043\u006f\u006c\u006f\u0072\u0053\u0070\u0061\u0063\u0065"));if _gcg !=nil {_g .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_gcg );
continue ;};if _cdebg ==nil {_dce ,_dcg :=_cf .GetName (_efb .Get ("\u0046\u0069\u006c\u0074\u0065\u0072"));if _dcg {switch _dce .String (){case "\u0043\u0043\u0049\u0054\u0054\u0046\u0061\u0078\u0044e\u0063\u006f\u0064\u0065","J\u0042\u0049\u0047\u0032\u0044\u0065\u0063\u006f\u0064\u0065":_cdebg =_b .NewPdfColorspaceDeviceGray ();
_gbeg .BitsPerComponent =1;};};};switch _fgaf :=_cdebg .(type ){case *_b .PdfColorspaceDeviceRGB :_gbeg .ColorComponents =3;case *_b .PdfColorspaceDeviceGray :_gbeg .ColorComponents =1;default:_g .Log .Debug ("\u004f\u0070\u0074\u0069\u006d\u0069\u007aa\u0074\u0069\u006fn\u0020\u0069\u0073 \u006e\u006ft\u0020\u0073\u0075\u0070\u0070\u006fr\u0074ed\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u0025\u0054\u0020\u002d\u0020\u0073\u006b\u0069\u0070",_fgaf );
continue ;};_fdfa =append (_fdfa ,_gbeg );};return _fdfa ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_agbg *CompressStreams )Optimize (objects []_cf .PdfObject )(_bge []_cf .PdfObject ,_egbd error ){_bge =make ([]_cf .PdfObject ,len (objects ));copy (_bge ,objects );for _ ,_defd :=range objects {_edb ,_bcba :=_cf .GetStream (_defd );if !_bcba {continue ;
};if _ebcac :=_edb .Get ("\u0046\u0069\u006c\u0074\u0065\u0072");_ebcac !=nil {if _ ,_dbc :=_cf .GetName (_ebcac );_dbc {continue ;};if _eba ,_edeg :=_cf .GetArray (_ebcac );_edeg &&_eba .Len ()> 0{continue ;};};_gfag :=_cf .NewFlateEncoder ();var _bgdga []byte ;
_bgdga ,_egbd =_gfag .EncodeBytes (_edb .Stream );if _egbd !=nil {return _bge ,_egbd ;};_bbgd :=_gfag .MakeStreamDict ();if len (_bgdga )+len (_bbgd .Write ())< len (_edb .Stream ){_edb .Stream =_bgdga ;_edb .PdfObjectDictionary .Merge (_bbgd );_edb .PdfObjectDictionary .Set ("\u004c\u0065\u006e\u0067\u0074\u0068",_cf .MakeInteger (int64 (len (_edb .Stream ))));
};};return _bge ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_df *Chain )Optimize (objects []_cf .PdfObject )(_dd []_cf .PdfObject ,_fb error ){_cbf :=objects ;for _ ,_dc :=range _df ._ac {_fg ,_db :=_dc .Optimize (_cbf );if _db !=nil {_g .Log .Debug ("\u0045\u0052\u0052OR\u0020\u004f\u0070\u0074\u0069\u006d\u0069\u007a\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u002b\u0076",_db );
continue ;};_cbf =_fg ;};return _cbf ,nil ;};

// CombineDuplicateDirectObjects combines duplicated direct objects by its data hash.
// It implements interface model.Optimizer.
type CombineDuplicateDirectObjects struct{};func _bbdd (_ecfb []_cf .PdfObject ){for _beab ,_dbeb :=range _ecfb {switch _cdaa :=_dbeb .(type ){case *_cf .PdfIndirectObject :_cdaa .ObjectNumber =int64 (_beab +1);_cdaa .GenerationNumber =0;case *_cf .PdfObjectStream :_cdaa .ObjectNumber =int64 (_beab +1);
_cdaa .GenerationNumber =0;case *_cf .PdfObjectStreams :_cdaa .ObjectNumber =int64 (_beab +1);_cdaa .GenerationNumber =0;};};};type content struct{_geag string ;_cgg *_b .PdfPageResources ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_gga *CleanFonts )Optimize (objects []_cf .PdfObject )(_be []_cf .PdfObject ,_cbgg error ){var _bff map[*_cf .PdfObjectStream ]struct{};if _gga .Subset {var _cdac error ;_bff ,_cdac =_daa (objects );if _cdac !=nil {_g .Log .Debug ("\u0045\u0052\u0052\u004fR\u003a\u0020\u0046\u0061\u0069\u006c\u0065\u0064\u0020\u0073u\u0062s\u0065\u0074\u0074\u0069\u006e\u0067\u003a \u0025\u0076",_cdac );
return nil ,_cdac ;};};for _ ,_dgf :=range objects {_beg ,_cbe :=_cf .GetStream (_dgf );if !_cbe {continue ;};if _ ,_bga :=_bff [_beg ];_bga {continue ;};_eegb ,_dgg :=_cf .NewEncoderFromStream (_beg );if _dgg !=nil {_g .Log .Debug ("\u0045\u0052RO\u0052\u0020\u0067e\u0074\u0074\u0069\u006eg e\u006eco\u0064\u0065\u0072\u003a\u0020\u0025\u0076 -\u0020\u0069\u0067\u006e\u006f\u0072\u0069n\u0067",_dgg );
continue ;};_aabg ,_dgg :=_eegb .DecodeStream (_beg );if _dgg !=nil {_g .Log .Debug ("\u0044\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0065r\u0072\u006f\u0072\u0020\u003a\u0020\u0025v\u0020\u002d\u0020\u0069\u0067\u006e\u006f\u0072\u0069\u006e\u0067",_dgg );
continue ;};if len (_aabg )< 4{continue ;};_ada :=string (_aabg [:4]);if _ada =="\u004f\u0054\u0054\u004f"{continue ;};if _ada !="\u0000\u0001\u0000\u0000"&&_ada !="\u0074\u0072\u0075\u0065"{continue ;};_dfc ,_dgg :=_ab .Parse (_ad .NewReader (_aabg ));
if _dgg !=nil {_g .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020P\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_dgg );continue ;};_dgg =_dfc .Optimize ();
if _dgg !=nil {_g .Log .Debug ("\u0045\u0052RO\u0052\u0020\u004fp\u0074\u0069\u006d\u0069zin\u0067 f\u006f\u006e\u0074\u003a\u0020\u0025\u0076 -\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067",_dgg );continue ;};var _adb _ad .Buffer ;_dgg =_dfc .Write (&_adb );
if _dgg !=nil {_g .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020W\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_dgg );continue ;};if _adb .Len ()> len (_aabg ){_g .Log .Debug ("\u0052\u0065-\u0077\u0072\u0069\u0074\u0074\u0065\u006e\u0020\u0066\u006f\u006e\u0074\u0020\u0069\u0073\u0020\u006c\u0061\u0072\u0067\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u002d\u0020\u0073\u006b\u0069\u0070");
continue ;};_cdeg ,_dgg :=_cf .MakeStream (_adb .Bytes (),_cf .NewFlateEncoder ());if _dgg !=nil {continue ;};*_beg =*_cdeg ;_beg .Set ("\u004ce\u006e\u0067\u0074\u0068\u0031",_cf .MakeInteger (int64 (_adb .Len ())));};return objects ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_gcfg *CombineDuplicateStreams )Optimize (objects []_cf .PdfObject )(_bdfe []_cf .PdfObject ,_bcd error ){_fbd :=make (map[_cf .PdfObject ]_cf .PdfObject );_fbcag :=make (map[_cf .PdfObject ]struct{});_dcdbf :=make (map[string ][]*_cf .PdfObjectStream );
for _ ,_fca :=range objects {if _eac ,_cefg :=_fca .(*_cf .PdfObjectStream );_cefg {_aabgd :=_ec .New ();_aabgd .Write (_eac .Stream );_aabgd .Write (_eac .PdfObjectDictionary .Write ());_fda :=string (_aabgd .Sum (nil ));_dcdbf [_fda ]=append (_dcdbf [_fda ],_eac );
};};for _ ,_gggg :=range _dcdbf {if len (_gggg )< 2{continue ;};_begg :=_gggg [0];for _dgd :=1;_dgd < len (_gggg );_dgd ++{_eacf :=_gggg [_dgd ];_fbd [_eacf ]=_begg ;_fbcag [_eacf ]=struct{}{};};};_bdfe =make ([]_cf .PdfObject ,0,len (objects )-len (_fbcag ));
for _ ,_bfcg :=range objects {if _ ,_cfe :=_fbcag [_bfcg ];_cfe {continue ;};_bdfe =append (_bdfe ,_bfcg );};_cdba (_bdfe ,_fbd );return _bdfe ,nil ;};

// GetOptimizers gets the list of optimizers in chain `c`.
func (_gf *Chain )GetOptimizers ()[]_b .Optimizer {return _gf ._ac };

// Optimize optimizes PDF objects to decrease PDF size.
func (_gccc *ImagePPI )Optimize (objects []_cf .PdfObject )(_ebff []_cf .PdfObject ,_eedb error ){if _gccc .ImageUpperPPI <=0{return objects ,nil ;};_acad :=_fdaa (objects );if len (_acad )==0{return objects ,nil ;};_ace :=make (map[_cf .PdfObject ]struct{});
for _ ,_eee :=range _acad {_fgadc :=_eee .Stream .PdfObjectDictionary .Get ("\u0053\u004d\u0061s\u006b");_ace [_fgadc ]=struct{}{};};_acag :=make (map[*_cf .PdfObjectStream ]*imageInfo );for _ ,_dbde :=range _acad {_acag [_dbde .Stream ]=_dbde ;};var _gbc *_cf .PdfObjectDictionary ;
for _ ,_ccbb :=range objects {if _ceeg ,_dgdd :=_cf .GetDict (_ccbb );_gbc ==nil &&_dgdd {if _ade ,_dgec :=_cf .GetName (_ceeg .Get ("\u0054\u0079\u0070\u0065"));_dgec &&*_ade =="\u0043a\u0074\u0061\u006c\u006f\u0067"{_gbc =_ceeg ;};};};if _gbc ==nil {return objects ,nil ;
};_cdgf ,_ccg :=_cf .GetDict (_gbc .Get ("\u0050\u0061\u0067e\u0073"));if !_ccg {return objects ,nil ;};_agec ,_cbd :=_cf .GetArray (_cdgf .Get ("\u004b\u0069\u0064\u0073"));if !_cbd {return objects ,nil ;};for _ ,_acb :=range _agec .Elements (){_gcccc :=make (map[string ]*imageInfo );
_fee ,_ggcb :=_cf .GetDict (_acb );if !_ggcb {continue ;};_cced ,_ :=_fdge (_fee .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));if len (_cced )==0{continue ;};_abga ,_eaa :=_cf .GetDict (_fee .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"));
if !_eaa {continue ;};_cea ,_acdd :=_b .NewPdfPageResourcesFromDict (_abga );if _acdd !=nil {_g .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0072\u0065\u0073\u006f\u0075\u0072\u0063\u0065\u0073\u0020-\u0020\u0069\u0067\u006e\u006fr\u0069\u006eg\u003a\u0020\u0025\u0076",_acdd );
continue ;};_bef ,_cgc :=_cf .GetDict (_abga .Get ("\u0058O\u0062\u006a\u0065\u0063\u0074"));if !_cgc {continue ;};_geae :=_bef .Keys ();for _ ,_aacc :=range _geae {if _aae ,_cfde :=_cf .GetStream (_bef .Get (_aacc ));_cfde {if _cdfd ,_acf :=_acag [_aae ];
_acf {_gcccc [string (_aacc )]=_cdfd ;};};};_bdfc :=_c .NewContentStreamParser (_cced );_gefe ,_acdd :=_bdfc .Parse ();if _acdd !=nil {_g .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_acdd );continue ;};_cgb :=_c .NewContentStreamProcessor (*_gefe );
_cgb .AddHandler (_c .HandlerConditionEnumAllOperands ,"",func (_cefd *_c .ContentStreamOperation ,_dfdc _c .GraphicsState ,_cdag *_b .PdfPageResources )error {switch _cefd .Operand {case "\u0044\u006f":if len (_cefd .Params )!=1{_g .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020\u0049\u0067\u006e\u006f\u0072\u0069\u006e\u0067\u0020\u0044\u006f\u0020w\u0069\u0074\u0068\u0020\u006c\u0065\u006e\u0028\u0070\u0061ra\u006d\u0073\u0029 \u0021=\u0020\u0031");
return nil ;};_ddd ,_bced :=_cf .GetName (_cefd .Params [0]);if !_bced {_g .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0049\u0067\u006e\u006f\u0072\u0069\u006e\u0067\u0020\u0044\u006f\u0020\u0077\u0069\u0074\u0068\u0020\u006e\u006f\u006e\u0020\u004e\u0061\u006d\u0065\u0020p\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072");
return nil ;};if _fdab ,_cfef :=_gcccc [string (*_ddd )];_cfef {_ffa :=_dfdc .CTM .ScalingFactorX ();_dfgc :=_dfdc .CTM .ScalingFactorY ();_ceac ,_cbfa :=_ffa /72.0,_dfgc /72.0;_cddb ,_agaf :=float64 (_fdab .Width )/_ceac ,float64 (_fdab .Height )/_cbfa ;
if _ceac ==0||_cbfa ==0{_cddb =72.0;_agaf =72.0;};_fdab .PPI =_ee .Max (_fdab .PPI ,_cddb );_fdab .PPI =_ee .Max (_fdab .PPI ,_agaf );};};return nil ;});_acdd =_cgb .Process (_cea );if _acdd !=nil {_g .Log .Debug ("E\u0052\u0052\u004f\u0052 p\u0072o\u0063\u0065\u0073\u0073\u0069n\u0067\u003a\u0020\u0025\u002b\u0076",_acdd );
continue ;};};for _ ,_decfc :=range _acad {if _ ,_ffbgf :=_ace [_decfc .Stream ];_ffbgf {continue ;};if _decfc .PPI <=_gccc .ImageUpperPPI {continue ;};_gdad ,_dae :=_b .NewXObjectImageFromStream (_decfc .Stream );if _dae !=nil {_g .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_dae );
continue ;};var _dbdef imageModifications ;_dbdef .Scale =_gccc .ImageUpperPPI /_decfc .PPI ;if _decfc .BitsPerComponent ==1&&_decfc .ColorComponents ==1{_ced :=_ee .Round (_decfc .PPI /_gccc .ImageUpperPPI );_bcfe :=_a .NextPowerOf2 (uint (_ced ));if _a .InDelta (float64 (_bcfe ),1/_dbdef .Scale ,0.3){_dbdef .Scale =float64 (1)/float64 (_bcfe );
};if _ ,_ffg :=_gdad .Filter .(*_cf .JBIG2Encoder );!_ffg {_dbdef .Encoding =_cf .NewJBIG2Encoder ();};};if _dae =_ceba (_gdad ,_dbdef );_dae !=nil {_g .Log .Debug ("\u0045\u0072\u0072\u006f\u0072 \u0073\u0063\u0061\u006c\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u006be\u0065\u0070\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0073",_dae );
continue ;};_dbdef .Encoding =nil ;if _cggc ,_bega :=_cf .GetStream (_decfc .Stream .PdfObjectDictionary .Get ("\u0053\u004d\u0061s\u006b"));_bega {_efdd ,_abfdd :=_b .NewXObjectImageFromStream (_cggc );if _abfdd !=nil {_g .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_abfdd );
continue ;};if _abfdd =_ceba (_efdd ,_dbdef );_abfdd !=nil {_g .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_abfdd );continue ;};};};return objects ,nil ;};

// ObjectStreams groups PDF objects to object streams.
// It implements interface model.Optimizer.
type ObjectStreams struct{};func _decd (_fcf *_b .Image ,_dcgc float64 )(*_b .Image ,error ){_gdbgd ,_bdb :=_fcf .ToGoImage ();if _bdb !=nil {return nil ,_bdb ;};var _eceg _a .Image ;_ecef ,_cdg :=_gdbgd .(*_a .Monochrome );if _cdg {if _bdb =_ecef .ResolveDecode ();
_bdb !=nil {return nil ,_bdb ;};_eceg ,_bdb =_ecef .Scale (_dcgc );if _bdb !=nil {return nil ,_bdb ;};}else {_bage :=int (_ee .RoundToEven (float64 (_fcf .Width )*_dcgc ));_ggce :=int (_ee .RoundToEven (float64 (_fcf .Height )*_dcgc ));_eceg ,_bdb =_a .NewImage (_bage ,_ggce ,int (_fcf .BitsPerComponent ),_fcf .ColorComponents ,nil ,nil ,nil );
if _bdb !=nil {return nil ,_bdb ;};_e .CatmullRom .Scale (_eceg ,_eceg .Bounds (),_gdbgd ,_gdbgd .Bounds (),_e .Over ,&_e .Options {});};_aag :=_eceg .Base ();_adcg :=&_b .Image {Width :int64 (_aag .Width ),Height :int64 (_aag .Height ),BitsPerComponent :int64 (_aag .BitsPerComponent ),ColorComponents :_aag .ColorComponents ,Data :_aag .Data };
_adcg .SetDecode (_aag .Decode );_adcg .SetAlpha (_aag .Alpha );return _adcg ,nil ;};

// Append appends optimizers to the chain.
func (_cb *Chain )Append (optimizers ..._b .Optimizer ){_cb ._ac =append (_cb ._ac ,optimizers ...)};type objectStructure struct{_dcfd *_cf .PdfObjectDictionary ;_ccdff *_cf .PdfObjectDictionary ;_edc []*_cf .PdfIndirectObject ;};

// Optimize implements Optimizer interface.
func (_ceee *CleanUnusedResources )Optimize (objects []_cf .PdfObject )(_dag []_cf .PdfObject ,_fgbc error ){_gda ,_fgbc :=_fcg (objects );if _fgbc !=nil {return nil ,_fgbc ;};_gcf :=[]_cf .PdfObject {};for _ ,_fge :=range objects {_ ,_cab :=_gda [_fge ];
if _cab {continue ;};_gcf =append (_gcf ,_fge );};return _gcf ,nil ;};func _geeea (_gcgc []_cf .PdfObject )objectStructure {_egda :=objectStructure {};_affce :=false ;for _ ,_gdgg :=range _gcgc {switch _ddc :=_gdgg .(type ){case *_cf .PdfIndirectObject :_fbfe ,_ebcf :=_cf .GetDict (_ddc );
if !_ebcf {continue ;};_fbde ,_ebcf :=_cf .GetName (_fbfe .Get ("\u0054\u0079\u0070\u0065"));if !_ebcf {continue ;};switch _fbde .String (){case "\u0043a\u0074\u0061\u006c\u006f\u0067":_egda ._dcfd =_fbfe ;_affce =true ;};};if _affce {break ;};};if !_affce {return _egda ;
};_cefdg ,_gdaf :=_cf .GetDict (_egda ._dcfd .Get ("\u0050\u0061\u0067e\u0073"));if !_gdaf {return _egda ;};_egda ._ccdff =_cefdg ;_debe ,_gdaf :=_cf .GetArray (_cefdg .Get ("\u004b\u0069\u0064\u0073"));if !_gdaf {return _egda ;};for _ ,_fcb :=range _debe .Elements (){_acabc ,_acbb :=_cf .GetIndirect (_fcb );
if !_acbb {break ;};_egda ._edc =append (_egda ._edc ,_acabc );};return _egda ;};func _gdf (_aac []*_cf .PdfIndirectObject )map[string ][]string {_afg :=map[string ][]string {};for _ ,_fef :=range _aac {_dgcg ,_adab :=_cf .GetDict (_fef .PdfObject );if !_adab {continue ;
};_gcff :=_dgcg .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073");_bbg :=_cf .TraceToDirectObject (_gcff );_gfg :="";if _cabg ,_bag :=_bbg .(*_cf .PdfObjectArray );_bag {var _ead []string ;for _ ,_gged :=range _cabg .Elements (){_fec ,_aga :=_bbcc (_gged );
if _aga !=nil {continue ;};_ead =append (_ead ,_fec );};_gfg =_ea .Join (_ead ,"\u0020");};if _eadc ,_efac :=_bbg .(*_cf .PdfObjectStream );_efac {_eae ,_cgdc :=_cf .DecodeStream (_eadc );if _cgdc !=nil {continue ;};_gfg =string (_eae );};_dgfg :=_c .NewContentStreamParser (_gfg );
_bad ,_adbg :=_dgfg .Parse ();if _adbg !=nil {continue ;};for _ ,_ggc :=range *_bad {_dbbb :=_ggc .Operand ;_cce :=_ggc .Params ;switch _dbbb {case "\u0044\u006f":_gcea :=_cce [0].String ();if _ ,_geac :=_afg ["\u0058O\u0062\u006a\u0065\u0063\u0074"];!_geac {_afg ["\u0058O\u0062\u006a\u0065\u0063\u0074"]=[]string {_gcea };
}else {_afg ["\u0058O\u0062\u006a\u0065\u0063\u0074"]=append (_afg ["\u0058O\u0062\u006a\u0065\u0063\u0074"],_gcea );};case "\u0054\u0066":_efae :=_cce [0].String ();if _ ,_add :=_afg ["\u0046\u006f\u006e\u0074"];!_add {_afg ["\u0046\u006f\u006e\u0074"]=[]string {_efae };
}else {_afg ["\u0046\u006f\u006e\u0074"]=append (_afg ["\u0046\u006f\u006e\u0074"],_efae );};case "\u0067\u0073":_fgbg :=_cce [0].String ();if _ ,_cbfga :=_afg ["\u0045x\u0074\u0047\u0053\u0074\u0061\u0074e"];!_cbfga {_afg ["\u0045x\u0074\u0047\u0053\u0074\u0061\u0074e"]=[]string {_fgbg };
}else {_afg ["\u0045x\u0074\u0047\u0053\u0074\u0061\u0074e"]=append (_afg ["\u0045x\u0074\u0047\u0053\u0074\u0061\u0074e"],_fgbg );};};};};return _afg ;};

// Options describes PDF optimization parameters.
type Options struct{CombineDuplicateStreams bool ;CombineDuplicateDirectObjects bool ;ImageUpperPPI float64 ;ImageQuality int ;UseObjectStreams bool ;CombineIdenticalIndirectObjects bool ;CompressStreams bool ;CleanFonts bool ;SubsetFonts bool ;CleanContentstream bool ;
CleanUnusedResources bool ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_adc *CombineDuplicateDirectObjects )Optimize (objects []_cf .PdfObject )(_fgae []_cf .PdfObject ,_dcb error ){_bbdd (objects );_aba :=make (map[string ][]*_cf .PdfObjectDictionary );var _dfb func (_cdaf *_cf .PdfObjectDictionary );_dfb =func (_aaa *_cf .PdfObjectDictionary ){for _ ,_ebf :=range _aaa .Keys (){_feb :=_aaa .Get (_ebf );
if _fgc ,_bed :=_feb .(*_cf .PdfObjectDictionary );_bed {if _bcf :=_fgc .Keys ();len (_bcf )==0{continue ;};_bada :=_ec .New ();_bada .Write (_fgc .Write ());_gcd :=string (_bada .Sum (nil ));_aba [_gcd ]=append (_aba [_gcd ],_fgc );_dfb (_fgc );};};};
for _ ,_ecf :=range objects {_bacc ,_badg :=_ecf .(*_cf .PdfIndirectObject );if !_badg {continue ;};if _dafd ,_ccdf :=_bacc .PdfObject .(*_cf .PdfObjectDictionary );_ccdf {_dfb (_dafd );};};_fdf :=make ([]_cf .PdfObject ,0,len (_aba ));_adaf :=make (map[_cf .PdfObject ]_cf .PdfObject );
for _ ,_cgda :=range _aba {if len (_cgda )< 2{continue ;};_decf :=_cf .MakeDict ();_decf .Merge (_cgda [0]);_egd :=_cf .MakeIndirectObject (_decf );_fdf =append (_fdf ,_egd );for _cfc :=0;_cfc < len (_cgda );_cfc ++{_ceed :=_cgda [_cfc ];_adaf [_ceed ]=_egd ;
};};_fgae =make ([]_cf .PdfObject ,len (objects ));copy (_fgae ,objects );_fgae =append (_fdf ,_fgae ...);_cdba (_fgae ,_adaf );return _fgae ,nil ;};func _fbf (_dgcf _cf .PdfObject ,_ede map[_cf .PdfObject ]struct{})error {if _cfad ,_bab :=_dgcf .(*_cf .PdfIndirectObject );
_bab {_ede [_dgcf ]=struct{}{};_gec :=_fbf (_cfad .PdfObject ,_ede );if _gec !=nil {return _gec ;};return nil ;};if _cbgge ,_cbba :=_dgcf .(*_cf .PdfObjectStream );_cbba {_ede [_cbgge ]=struct{}{};_dfd :=_fbf (_cbgge .PdfObjectDictionary ,_ede );if _dfd !=nil {return _dfd ;
};return nil ;};if _bae ,_abb :=_dgcf .(*_cf .PdfObjectDictionary );_abb {for _ ,_gad :=range _bae .Keys (){_ccdb :=_bae .Get (_gad );_ =_ccdb ;if _bgff ,_dff :=_ccdb .(*_cf .PdfObjectReference );_dff {_ccdb =_bgff .Resolve ();_bae .Set (_gad ,_ccdb );
};if _gad !="\u0050\u0061\u0072\u0065\u006e\u0074"{if _edg :=_fbf (_ccdb ,_ede );_edg !=nil {return _edg ;};};};return nil ;};if _fgad ,_egfa :=_dgcf .(*_cf .PdfObjectArray );_egfa {if _fgad ==nil {return _eg .New ("\u0061\u0072\u0072a\u0079\u0020\u0069\u0073\u0020\u006e\u0069\u006c");
};for _gcffg ,_bfga :=range _fgad .Elements (){if _gbe ,_beba :=_bfga .(*_cf .PdfObjectReference );_beba {_bfga =_gbe .Resolve ();_fgad .Set (_gcffg ,_bfga );};if _cba :=_fbf (_bfga ,_ede );_cba !=nil {return _cba ;};};return nil ;};return nil ;};

// ImagePPI optimizes images by scaling images such that the PPI (pixels per inch) is never higher than ImageUpperPPI.
// TODO(a5i): Add support for inline images.
// It implements interface model.Optimizer.
type ImagePPI struct{ImageUpperPPI float64 ;};

// CombineIdenticalIndirectObjects combines identical indirect objects.
// It implements interface model.Optimizer.
type CombineIdenticalIndirectObjects struct{};