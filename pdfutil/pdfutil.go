//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package pdfutil ;import (_g "github.com/unidoc/unipdf/v3/common";_da "github.com/unidoc/unipdf/v3/contentstream";_ed "github.com/unidoc/unipdf/v3/contentstream/draw";_e "github.com/unidoc/unipdf/v3/core";_b "github.com/unidoc/unipdf/v3/model";);

// NormalizePage performs the following operations on the passed in page:
//   - Normalize the page rotation.
//     Rotates the contents of the page according to the Rotate entry, thus
//     flattening the rotation. The Rotate entry of the page is set to nil.
//   - Normalize the media box.
//     If the media box of the page is offsetted (Llx != 0 or Lly != 0),
//     the contents of the page are translated to (-Llx, -Lly). After
//     normalization, the media box is updated (Llx and Lly are set to 0 and
//     Urx and Ury are updated accordingly).
//   - Normalize the crop box.
//     The crop box of the page is updated based on the previous operations.
//
// After normalization, the page should look the same if openend using a
// PDF viewer.
// NOTE: This function does not normalize annotations, outlines other parts
// that are not part of the basic geometry and page content streams.
func NormalizePage (page *_b .PdfPage )error {_ga ,_f :=page .GetMediaBox ();if _f !=nil {return _f ;};_gd ,_f :=page .GetRotate ();if _f !=nil {_g .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0025\u0073\u0020\u002d\u0020\u0069\u0067\u006e\u006f\u0072\u0069\u006e\u0067\u0020\u0061\u006e\u0064\u0020\u0061\u0073\u0073\u0075\u006d\u0069\u006e\u0067\u0020\u006e\u006f\u0020\u0072\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u000a",_f .Error ());
};_ba :=_gd %360!=0&&_gd %90==0;_ga .Normalize ();_db ,_de ,_dbd ,_c :=_ga .Llx ,_ga .Lly ,_ga .Width (),_ga .Height ();_bf :=_db !=0||_de !=0;if !_ba &&!_bf {return nil ;};_ff :=func (_gb ,_dg ,_a float64 )_ed .BoundingBox {return _ed .Path {Points :[]_ed .Point {_ed .NewPoint (0,0).Rotate (_a ),_ed .NewPoint (_gb ,0).Rotate (_a ),_ed .NewPoint (0,_dg ).Rotate (_a ),_ed .NewPoint (_gb ,_dg ).Rotate (_a )}}.GetBoundingBox ();
};_ec :=_da .NewContentCreator ();var _fa float64 ;if _ba {_fa =-float64 (_gd );_eg :=_ff (_dbd ,_c ,_fa );_ec .Translate ((_eg .Width -_dbd )/2+_dbd /2,(_eg .Height -_c )/2+_c /2);_ec .RotateDeg (_fa );_ec .Translate (-_dbd /2,-_c /2);_dbd ,_c =_eg .Width ,_eg .Height ;
};if _bf {_ec .Translate (-_db ,-_de );};_gdd :=_ec .Operations ();_bab ,_f :=_e .MakeStream (_gdd .Bytes (),_e .NewFlateEncoder ());if _f !=nil {return _f ;};_cd :=_e .MakeArray (_bab );_cd .Append (page .GetContentStreamObjs ()...);*_ga =_b .PdfRectangle {Urx :_dbd ,Ury :_c };
if _dc :=page .CropBox ;_dc !=nil {_dc .Normalize ();_egb ,_dcc ,_eb ,_gf :=_dc .Llx -_db ,_dc .Lly -_de ,_dc .Width (),_dc .Height ();if _ba {_edg :=_ff (_eb ,_gf ,_fa );_eb ,_gf =_edg .Width ,_edg .Height ;};*_dc =_b .PdfRectangle {Llx :_egb ,Lly :_dcc ,Urx :_egb +_eb ,Ury :_dcc +_gf };
};_g .Log .Debug ("\u0052\u006f\u0074\u0061\u0074\u0065\u003d\u0025\u0066\u00b0\u0020\u004f\u0070\u0073\u003d%\u0071 \u004d\u0065\u0064\u0069\u0061\u0042\u006f\u0078\u003d\u0025\u002e\u0032\u0066",_fa ,_gdd ,_ga );page .Contents =_cd ;page .Rotate =nil ;
return nil ;};