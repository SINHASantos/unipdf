//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package imagerender ;import (_d "errors";_b "fmt";_bf "github.com/unidoc/freetype/raster";_bb "github.com/unidoc/unipdf/v3/common";_bc "github.com/unidoc/unipdf/v3/internal/transform";_fg "github.com/unidoc/unipdf/v3/render/internal/context";_fc "golang.org/x/image/draw";
_gf "golang.org/x/image/font";_de "golang.org/x/image/math/f64";_af "golang.org/x/image/math/fixed";_a "image";_cb "image/color";_cf "image/draw";_g "math";_f "sort";_e "strings";);func (_adcc *radialGradient )ColorAt (x ,y int )_cb .Color {if len (_adcc ._fbbc )==0{return _cb .Transparent ;
};_egc ,_bef :=float64 (x )+0.5-_adcc ._edbd ._bfb ,float64 (y )+0.5-_adcc ._edbd ._agg ;_bgcf :=_cgg (_egc ,_bef ,_adcc ._edbd ._deca ,_adcc ._bca ._bfb ,_adcc ._bca ._agg ,_adcc ._bca ._deca );_bcdc :=_cgg (_egc ,_bef ,-_adcc ._edbd ._deca ,_egc ,_bef ,_adcc ._edbd ._deca );
if _adcc ._fge ==0{if _bgcf ==0{return _cb .Transparent ;};_fcfd :=0.5*_bcdc /_bgcf ;if _fcfd *_adcc ._bca ._deca >=_adcc ._bfce {return _bbga (_fcfd ,_adcc ._fbbc );};return _cb .Transparent ;};_fde :=_cgg (_bgcf ,_adcc ._fge ,0,_bgcf ,-_bcdc ,0);if _fde >=0{_ecd :=_g .Sqrt (_fde );
_ddb :=(_bgcf +_ecd )*_adcc ._afg ;_bfcf :=(_bgcf -_ecd )*_adcc ._afg ;if _ddb *_adcc ._bca ._deca >=_adcc ._bfce {return _bbga (_ddb ,_adcc ._fbbc );}else if _bfcf *_adcc ._bca ._deca >=_adcc ._bfce {return _bbga (_bfcf ,_adcc ._fbbc );};};return _cb .Transparent ;
};func (_efdd *Context )NewSubPath (){if _efdd ._dff {_efdd ._ad .Add1 (_deac (_efdd ._gagc ));};_efdd ._dff =false ;};func (_gead *Context )ResetClip (){_gead ._bgcb =nil };func (_cdf *Context )QuadraticTo (x1 ,y1 ,x2 ,y2 float64 ){if !_cdf ._dff {_cdf .MoveTo (x1 ,y1 );
};x1 ,y1 =_cdf .Transform (x1 ,y1 );x2 ,y2 =_cdf .Transform (x2 ,y2 );_gbgg :=_bc .NewPoint (x1 ,y1 );_eag :=_bc .NewPoint (x2 ,y2 );_eff :=_deac (_gbgg );_bfcg :=_deac (_eag );_cdf ._be .Add2 (_eff ,_bfcg );_cdf ._ad .Add2 (_eff ,_bfcg );_cdf ._egd =_eag ;
};func _afcae (_ddac *_a .RGBA ,_egcg *_a .Alpha ,_gbed _fg .Pattern )*patternPainter {return &patternPainter {_ddac ,_egcg ,_gbed };};type surfacePattern struct{_afecd _a .Image ;_cdg repeatOp ;};func _ceg (_deb ,_bcc ,_cc ,_ef ,_dd ,_baf ,_bab ,_cd ,_ggg float64 )(_abf ,_bfd float64 ){_gfeg :=1-_ggg ;
_cg :=_gfeg *_gfeg *_gfeg ;_ece :=3*_gfeg *_gfeg *_ggg ;_gac :=3*_gfeg *_ggg *_ggg ;_ed :=_ggg *_ggg *_ggg ;_abf =_cg *_deb +_ece *_cc +_gac *_dd +_ed *_bab ;_bfd =_cg *_bcc +_ece *_ef +_gac *_baf +_ed *_cd ;return ;};type repeatOp int ;func (_dbd *Context )SetFillRGBA (r ,g ,b ,a float64 ){_ ,_ ,_ ,_bbf :=_dbd ._cfg .RGBA ();
if _bbf > 0&&_bbf !=65535&&a ==1{a =float64 (_bbf )/65535;};_eb :=_cb .NRGBA {uint8 (r *255),uint8 (g *255),uint8 (b *255),uint8 (a *255)};_dbd ._cfg =_eb ;_dbd ._cde =_dabe (_eb );};func (_bac *Context )DrawCircle (x ,y ,r float64 ){_bac .NewSubPath ();
_bac .DrawEllipticalArc (x ,y ,r ,r ,0,2*_g .Pi );_bac .ClosePath ();};func (_ccb *Context )setFillAndStrokeColor (_agd _cb .Color ){_ccb ._cfg =_agd ;_ccb ._cde =_dabe (_agd );_ccb ._aca =_dabe (_agd );};func (_gea *Context )SetLineCap (lineCap _fg .LineCap ){_gea ._da =lineCap };
func _dfff (_afff string )(_bddc ,_dbbd ,_ddbg ,_ebc int ){_afff =_e .TrimPrefix (_afff ,"\u0023");_ebc =255;if len (_afff )==3{_dgef :="\u00251\u0078\u0025\u0031\u0078\u0025\u0031x";_b .Sscanf (_afff ,_dgef ,&_bddc ,&_dbbd ,&_ddbg );_bddc |=_bddc <<4;
_dbbd |=_dbbd <<4;_ddbg |=_ddbg <<4;};if len (_afff )==6{_aabc :="\u0025\u0030\u0032x\u0025\u0030\u0032\u0078\u0025\u0030\u0032\u0078";_b .Sscanf (_afff ,_aabc ,&_bddc ,&_dbbd ,&_ddbg );};if len (_afff )==8{_cdfd :="\u0025\u00302\u0078\u0025\u00302\u0078\u0025\u0030\u0032\u0078\u0025\u0030\u0032\u0078";
_b .Sscanf (_afff ,_cdfd ,&_bddc ,&_dbbd ,&_ddbg ,&_ebc );};return ;};type patternPainter struct{_gad *_a .RGBA ;_ddcd *_a .Alpha ;_fecb _fg .Pattern ;};func (_adc *Context )ClipPreserve (){_dcc :=_a .NewAlpha (_a .Rect (0,0,_adc ._cbg ,_adc ._ge ));_fcad :=_bf .NewAlphaOverPainter (_dcc );
_adc .fill (_fcad );if _adc ._bgcb ==nil {_adc ._bgcb =_dcc ;}else {_eeag :=_a .NewAlpha (_a .Rect (0,0,_adc ._cbg ,_adc ._ge ));_fc .DrawMask (_eeag ,_eeag .Bounds (),_dcc ,_a .Point {},_adc ._bgcb ,_a .Point {},_fc .Over );_adc ._bgcb =_eeag ;};};func (_acde stops )Swap (i ,j int ){_acde [i ],_acde [j ]=_acde [j ],_acde [i ]};
func (_eed *Context )Transform (x ,y float64 )(_fdg ,_cfgda float64 ){return _eed ._gbe .Transform (x ,y )};func (_ced *Context )Clip (){_ced .ClipPreserve ();_ced .ClearPath ()};func _deac (_fbef _bc .Point )_af .Point26_6 {return _af .Point26_6 {X :_bad (_fbef .X ),Y :_bad (_fbef .Y )}};
func _effe (_cag _a .Image ,_fcd repeatOp )_fg .Pattern {return &surfacePattern {_afecd :_cag ,_cdg :_fcd };};func _febe (_fag [][]_bc .Point ,_cddc []float64 ,_cdbg float64 )[][]_bc .Point {var _gfeb [][]_bc .Point ;if len (_cddc )==0{return _fag ;};if len (_cddc )==1{_cddc =append (_cddc ,_cddc [0]);
};for _ ,_gbdg :=range _fag {if len (_gbdg )< 2{continue ;};_cabe :=_gbdg [0];_eceg :=1;_gcg :=0;_aage :=0.0;if _cdbg !=0{var _abg float64 ;for _ ,_bbgag :=range _cddc {_abg +=_bbgag ;};_cdbg =_g .Mod (_cdbg ,_abg );if _cdbg < 0{_cdbg +=_abg ;};for _fad ,_ccbe :=range _cddc {_cdbg -=_ccbe ;
if _cdbg < 0{_gcg =_fad ;_aage =_ccbe +_cdbg ;break ;};};};var _fbgf []_bc .Point ;_fbgf =append (_fbgf ,_cabe );for _eceg < len (_gbdg ){_eagd :=_cddc [_gcg ];_ede :=_gbdg [_eceg ];_dcac :=_cabe .Distance (_ede );_fac :=_eagd -_aage ;if _dcac > _fac {_bgab :=_fac /_dcac ;
_fdd :=_cabe .Interpolate (_ede ,_bgab );_fbgf =append (_fbgf ,_fdd );if _gcg %2==0&&len (_fbgf )> 1{_gfeb =append (_gfeb ,_fbgf );};_fbgf =nil ;_fbgf =append (_fbgf ,_fdd );_aage =0;_cabe =_fdd ;_gcg =(_gcg +1)%len (_cddc );}else {_fbgf =append (_fbgf ,_ede );
_cabe =_ede ;_aage +=_dcac ;_eceg ++;};};if _gcg %2==0&&len (_fbgf )> 1{_gfeb =append (_gfeb ,_fbgf );};};return _gfeb ;};func (_ggc *Context )SetRGBA (r ,g ,b ,a float64 ){_ ,_ ,_ ,_aff :=_ggc ._cfg .RGBA ();if _aff > 0&&_aff !=65535&&a ==1{a =float64 (_aff )/65535;
};_ggc ._cfg =_cb .NRGBA {uint8 (r *255),uint8 (g *255),uint8 (b *255),uint8 (a *255)};_ggc .setFillAndStrokeColor (_ggc ._cfg );};type stops []stop ;func (_faf *Context )LineWidth ()float64 {return _faf ._efa };func (_gfcd *Context )SetRGB255 (r ,g ,b int ){_gfcd .SetRGBA255 (r ,g ,b ,255)};
func _cfb (_ec ,_bfa ,_gag ,_fb ,_bge ,_dea float64 )[]_bc .Point {_bfc :=(_g .Hypot (_gag -_ec ,_fb -_bfa )+_g .Hypot (_bge -_gag ,_dea -_fb ));_ab :=int (_bfc +0.5);if _ab < 4{_ab =4;};_gb :=float64 (_ab )-1;_ba :=make ([]_bc .Point ,_ab );for _dc :=0;
_dc < _ab ;_dc ++{_dg :=float64 (_dc )/_gb ;_gbb ,_ce :=_fa (_ec ,_bfa ,_gag ,_fb ,_bge ,_dea ,_dg );_ba [_dc ]=_bc .NewPoint (_gbb ,_ce );};return _ba ;};func (_cead *Context )MoveTo (x ,y float64 ){if _cead ._dff {_cead ._ad .Add1 (_deac (_cead ._gagc ));
};x ,y =_cead .Transform (x ,y );_aea :=_bc .NewPoint (x ,y );_gbg :=_deac (_aea );_cead ._be .Start (_gbg );_cead ._ad .Start (_gbg );_cead ._gagc =_aea ;_cead ._egd =_aea ;_cead ._dff =true ;};func _bcda (_gdg ,_caf uint32 ,_eebg float64 )uint8 {return uint8 (int32 (float64 (_gdg )*(1.0-_eebg )+float64 (_caf )*_eebg )>>8);
};func (_fcae *Context )Matrix ()_bc .Matrix {return _fcae ._gbe };type linearGradient struct{_fdcg ,_fcc ,_eecc ,_daa float64 ;_dgbb stops ;};func (_ceadb *Context )Clear (){_dga :=_a .NewUniform (_ceadb ._cfg );_fc .Draw (_ceadb ._gaga ,_ceadb ._gaga .Bounds (),_dga ,_a .Point {},_fc .Src );
};func (_fcf *Context )SetRGB (r ,g ,b float64 ){_fcf .SetRGBA (r ,g ,b ,1)};func (_db *Context )SetDashOffset (offset float64 ){_db ._ae =offset };func (_bcb stops )Len ()int {return len (_bcb )};func (_abbc *patternPainter )Paint (ss []_bf .Span ,done bool ){_aac :=_abbc ._gad .Bounds ();
for _ ,_beg :=range ss {if _beg .Y < _aac .Min .Y {continue ;};if _beg .Y >=_aac .Max .Y {return ;};if _beg .X0 < _aac .Min .X {_beg .X0 =_aac .Min .X ;};if _beg .X1 > _aac .Max .X {_beg .X1 =_aac .Max .X ;};if _beg .X0 >=_beg .X1 {continue ;};const _fafe =1<<16-1;
_bbge :=_beg .Y -_abbc ._gad .Rect .Min .Y ;_bbbf :=_beg .X0 -_abbc ._gad .Rect .Min .X ;_bdb :=(_beg .Y -_abbc ._gad .Rect .Min .Y )*_abbc ._gad .Stride +(_beg .X0 -_abbc ._gad .Rect .Min .X )*4;_cebb :=_bdb +(_beg .X1 -_beg .X0 )*4;for _fege ,_bddf :=_bdb ,_bbbf ;
_fege < _cebb ;_fege ,_bddf =_fege +4,_bddf +1{_dcea :=_beg .Alpha ;if _abbc ._ddcd !=nil {_dcea =_dcea *uint32 (_abbc ._ddcd .AlphaAt (_bddf ,_bbge ).A )/255;if _dcea ==0{continue ;};};_debc :=_abbc ._fecb .ColorAt (_bddf ,_bbge );_ebga ,_babc ,_eeg ,_ggcc :=_debc .RGBA ();
_fega :=uint32 (_abbc ._gad .Pix [_fege +0]);_becc :=uint32 (_abbc ._gad .Pix [_fege +1]);_abdb :=uint32 (_abbc ._gad .Pix [_fege +2]);_ggd :=uint32 (_abbc ._gad .Pix [_fege +3]);_cebg :=(_fafe -(_ggcc *_dcea /_fafe ))*0x101;_abbc ._gad .Pix [_fege +0]=uint8 ((_fega *_cebg +_ebga *_dcea )/_fafe >>8);
_abbc ._gad .Pix [_fege +1]=uint8 ((_becc *_cebg +_babc *_dcea )/_fafe >>8);_abbc ._gad .Pix [_fege +2]=uint8 ((_abdb *_cebg +_eeg *_dcea )/_fafe >>8);_abbc ._gad .Pix [_fege +3]=uint8 ((_ggd *_cebg +_ggcc *_dcea )/_fafe >>8);};};};func (_abe *Context )SetStrokeStyle (pattern _fg .Pattern ){_abe ._aca =pattern };
func (_cgfd *Context )Stroke (){_cgfd .StrokePreserve ();_cgfd .ClearPath ()};type radialGradient struct{_edbd ,_bcff ,_bca circle ;_fge ,_afg float64 ;_bfce float64 ;_fbbc stops ;};func (_cdac *Context )SetLineWidth (lineWidth float64 ){_cdac ._efa =lineWidth };
func _dbf (_bdfb _bf .Path )[][]_bc .Point {var _cgac [][]_bc .Point ;var _bbfa []_bc .Point ;var _dcca ,_ccea float64 ;for _gfcda :=0;_gfcda < len (_bdfb );{switch _bdfb [_gfcda ]{case 0:if len (_bbfa )> 0{_cgac =append (_cgac ,_bbfa );_bbfa =nil ;};_fgc :=_ged (_bdfb [_gfcda +1]);
_gef :=_ged (_bdfb [_gfcda +2]);_bbfa =append (_bbfa ,_bc .NewPoint (_fgc ,_gef ));_dcca ,_ccea =_fgc ,_gef ;_gfcda +=4;case 1:_ecgc :=_ged (_bdfb [_gfcda +1]);_bde :=_ged (_bdfb [_gfcda +2]);_bbfa =append (_bbfa ,_bc .NewPoint (_ecgc ,_bde ));_dcca ,_ccea =_ecgc ,_bde ;
_gfcda +=4;case 2:_aba :=_ged (_bdfb [_gfcda +1]);_agf :=_ged (_bdfb [_gfcda +2]);_dabf :=_ged (_bdfb [_gfcda +3]);_feda :=_ged (_bdfb [_gfcda +4]);_bgca :=_cfb (_dcca ,_ccea ,_aba ,_agf ,_dabf ,_feda );_bbfa =append (_bbfa ,_bgca ...);_dcca ,_ccea =_dabf ,_feda ;
_gfcda +=6;case 3:_cbga :=_ged (_bdfb [_gfcda +1]);_cdacd :=_ged (_bdfb [_gfcda +2]);_ddf :=_ged (_bdfb [_gfcda +3]);_fccf :=_ged (_bdfb [_gfcda +4]);_febg :=_ged (_bdfb [_gfcda +5]);_faab :=_ged (_bdfb [_gfcda +6]);_gcd :=_eg (_dcca ,_ccea ,_cbga ,_cdacd ,_ddf ,_fccf ,_febg ,_faab );
_bbfa =append (_bbfa ,_gcd ...);_dcca ,_ccea =_febg ,_faab ;_gfcda +=8;default:_bb .Log .Debug ("\u0057\u0041\u0052\u004e: \u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0070\u0061\u0074\u0068\u003a\u0020%\u0076",_bdfb );return _cgac ;};};if len (_bbfa )> 0{_cgac =append (_cgac ,_bbfa );
};return _cgac ;};func _fa (_bg ,_ff ,_gc ,_df ,_ga ,_bbb ,_fe float64 )(_ag ,_ee float64 ){_gfe :=1-_fe ;_bgc :=_gfe *_gfe ;_gg :=2*_gfe *_fe ;_bd :=_fe *_fe ;_ag =_bgc *_bg +_gg *_gc +_bd *_ga ;_ee =_bgc *_ff +_gg *_df +_bd *_bbb ;return ;};func (_fbdd *Context )SetPixel (x ,y int ){_fbdd ._gaga .Set (x ,y ,_fbdd ._cfg )};
func (_ebd *Context )DrawImageAnchored (im _a .Image ,x ,y int ,ax ,ay float64 ){_gae :=im .Bounds ().Size ();x -=int (ax *float64 (_gae .X ));y -=int (ay *float64 (_gae .Y ));_eeb :=_fc .BiLinear ;_effc :=_ebd ._gbe .Clone ().Translate (float64 (x ),float64 (y ));
_bga :=_de .Aff3 {_effc [0],_effc [3],_effc [6],_effc [1],_effc [4],_effc [7]};if _ebd ._bgcb ==nil {_eeb .Transform (_ebd ._gaga ,_bga ,im ,im .Bounds (),_fc .Over ,nil );}else {_eeb .Transform (_ebd ._gaga ,_bga ,im ,im .Bounds (),_fc .Over ,&_fc .Options {DstMask :_ebd ._bgcb ,DstMaskP :_a .Point {}});
};};func (_bcf *Context )MeasureString (s string ,face _gf .Face )(_gdf ,_bdca float64 ){_bdg :=&_gf .Drawer {Face :face };_ecc :=_bdg .MeasureString (s );return float64 (_ecc >>6),_bcf ._bgee .Tf .Size ;};func (_gcae *Context )fill (_feb _bf .Painter ){_cdb :=_gcae ._ad ;
if _gcae ._dff {_cdb =make (_bf .Path ,len (_gcae ._ad ));copy (_cdb ,_gcae ._ad );_cdb .Add1 (_deac (_gcae ._gagc ));};_deg :=_gcae ._ace ;_deg .UseNonZeroWinding =_gcae ._cgf ==_fg .FillRuleWinding ;_deg .Clear ();_deg .AddPath (_cdb );_deg .Rasterize (_feb );
};func _fcgd (_afab _bf .Path ,_dgeg []float64 ,_agdd float64 )_bf .Path {return _efg (_febe (_dbf (_afab ),_dgeg ,_agdd ));};func (_eba *Context )FillPreserve (){var _dca _bf .Painter ;if _eba ._bgcb ==nil {if _edb ,_gaf :=_eba ._cde .(*solidPattern );
_gaf {_fga :=_bf .NewRGBAPainter (_eba ._gaga );_fga .SetColor (_edb ._bede );_dca =_fga ;};};if _dca ==nil {_dca =_afcae (_eba ._gaga ,_eba ._bgcb ,_eba ._cde );};_eba .fill (_dca );};func (_acef *Context )Push (){_cbeb :=*_acef ;_acef ._acc =append (_acef ._acc ,&_cbeb )};
func (_dggc *Context )InvertMask (){if _dggc ._bgcb ==nil {_dggc ._bgcb =_a .NewAlpha (_dggc ._gaga .Bounds ());}else {for _fda ,_gfdg :=range _dggc ._bgcb .Pix {_dggc ._bgcb .Pix [_fda ]=255-_gfdg ;};};};const (_baa repeatOp =iota ;_dccf ;_gfea ;_aadd ;
);func (_fdf *Context )ClosePath (){if _fdf ._dff {_beb :=_deac (_fdf ._gagc );_fdf ._be .Add1 (_beb );_fdf ._ad .Add1 (_beb );_fdf ._egd =_fdf ._gagc ;};};func (_bbg *Context )SetColor (c _cb .Color ){_bbg .setFillAndStrokeColor (c )};func (_cfgd *Context )Height ()int {return _cfgd ._ge };
func (_adf *radialGradient )AddColorStop (offset float64 ,color _cb .Color ){_adf ._fbbc =append (_adf ._fbbc ,stop {_acd :offset ,_efcd :color });_f .Sort (_adf ._fbbc );};func (_fbd *Context )SetFillStyle (pattern _fg .Pattern ){if _daf ,_bae :=pattern .(*solidPattern );
_bae {_fbd ._cfg =_daf ._bede ;};_fbd ._cde =pattern ;};func (_bbgg *Context )joiner ()_bf .Joiner {switch _bbgg ._cgb {case _fg .LineJoinBevel :return _bf .BevelJoiner ;case _fg .LineJoinRound :return _bf .RoundJoiner ;};return nil ;};func _edcg (_dfcg _a .Image )*_a .RGBA {_fbc :=_dfcg .Bounds ();
_bggf :=_a .NewRGBA (_fbc );_cf .Draw (_bggf ,_fbc ,_dfcg ,_fbc .Min ,_cf .Src );return _bggf ;};var (_fff =_dabe (_cb .White );_bdc =_dabe (_cb .Black ););type solidPattern struct{_bede _cb .Color };func (_afc *Context )DrawImage (im _a .Image ,x ,y int ){_afc .DrawImageAnchored (im ,x ,y ,0,0)};
func _ged (_bdgg _af .Int26_6 )float64 {const _agfb ,_ggcd =6,1<<6-1;if _bdgg >=0{return float64 (_bdgg >>_agfb )+float64 (_bdgg &_ggcd )/64;};_bdgg =-_bdgg ;if _bdgg >=0{return -(float64 (_bdgg >>_agfb )+float64 (_bdgg &_ggcd )/64);};return 0;};func (_cfd *Context )SetRGBA255 (r ,g ,b ,a int ){_cfd ._cfg =_cb .NRGBA {uint8 (r ),uint8 (g ),uint8 (b ),uint8 (a )};
_cfd .setFillAndStrokeColor (_cfd ._cfg );};func (_cdec *linearGradient )AddColorStop (offset float64 ,color _cb .Color ){_cdec ._dgbb =append (_cdec ._dgbb ,stop {_acd :offset ,_efcd :color });_f .Sort (_cdec ._dgbb );};func (_bagf *Context )capper ()_bf .Capper {switch _bagf ._da {case _fg .LineCapButt :return _bf .ButtCapper ;
case _fg .LineCapRound :return _bf .RoundCapper ;case _fg .LineCapSquare :return _bf .SquareCapper ;};return nil ;};func (_fab *Context )Rotate (angle float64 ){_fab ._gbe =_fab ._gbe .Rotate (angle )};func (_adg *Context )DrawArc (x ,y ,r ,angle1 ,angle2 float64 ){_adg .DrawEllipticalArc (x ,y ,r ,r ,angle1 ,angle2 );
};func (_dge *Context )Pop (){_dadd :=*_dge ;_gbba :=_dge ._acc ;_ffec :=_gbba [len (_gbba )-1];*_dge =*_ffec ;_dge ._be =_dadd ._be ;_dge ._ad =_dadd ._ad ;_dge ._gagc =_dadd ._gagc ;_dge ._egd =_dadd ._egd ;_dge ._dff =_dadd ._dff ;};func _cfec (_fcfdc ,_cae _cb .Color ,_bdf float64 )_cb .Color {_fbga ,_bcdce ,_cab ,_cceg :=_fcfdc .RGBA ();
_fgf ,_cdfc ,_daaa ,_aeb :=_cae .RGBA ();return _cb .RGBA {_bcda (_fbga ,_fgf ,_bdf ),_bcda (_bcdce ,_cdfc ,_bdf ),_bcda (_cab ,_daaa ,_bdf ),_bcda (_cceg ,_aeb ,_bdf )};};func NewLinearGradient (x0 ,y0 ,x1 ,y1 float64 )_fg .Gradient {_bedd :=&linearGradient {_fdcg :x0 ,_fcc :y0 ,_eecc :x1 ,_daa :y1 };
return _bedd ;};func _eg (_bcce ,_dfe ,_dda ,_cda ,_ac ,_efd ,_gab ,_gff float64 )[]_bc .Point {_abd :=(_g .Hypot (_dda -_bcce ,_cda -_dfe )+_g .Hypot (_ac -_dda ,_efd -_cda )+_g .Hypot (_gab -_ac ,_gff -_efd ));_afb :=int (_abd +0.5);if _afb < 4{_afb =4;
};_eea :=float64 (_afb )-1;_fd :=make ([]_bc .Point ,_afb );for _cea :=0;_cea < _afb ;_cea ++{_cdd :=float64 (_cea )/_eea ;_cce ,_dgg :=_ceg (_bcce ,_dfe ,_dda ,_cda ,_ac ,_efd ,_gab ,_gff ,_cdd );_fd [_cea ]=_bc .NewPoint (_cce ,_dgg );};return _fd ;};
type circle struct{_bfb ,_agg ,_deca float64 };func (_cfe *Context )SetHexColor (x string ){_fgd ,_ddaf ,_bbe ,_ddd :=_dfff (x );_cfe .SetRGBA255 (_fgd ,_ddaf ,_bbe ,_ddd );};func (_ddafd *Context )ScaleAbout (sx ,sy ,x ,y float64 ){_ddafd .Translate (x ,y );
_ddafd .Scale (sx ,sy );_ddafd .Translate (-x ,-y );};func (_bcd *Context )drawString (_dgc string ,_bed _gf .Face ,_bgd ,_aab float64 ){_gbcf :=&_gf .Drawer {Src :_a .NewUniform (_bcd ._cfg ),Face :_bed ,Dot :_deac (_bc .NewPoint (_bgd ,_aab ))};_gbd :=rune (-1);
for _ ,_ceb :=range _dgc {if _gbd >=0{_gbcf .Dot .X +=_gbcf .Face .Kern (_gbd ,_ceb );};_edbb ,_eafb ,_eee ,_bec ,_cbe :=_gbcf .Face .Glyph (_gbcf .Dot ,_ceb );if !_cbe {continue ;};_fec :=_edbb .Sub (_edbb .Min );_eca :=_a .NewRGBA (_fec );_fc .DrawMask (_eca ,_fec ,_gbcf .Src ,_a .Point {},_eafb ,_eee ,_fc .Over );
var _gaeg *_fc .Options ;if _bcd ._bgcb !=nil {_gaeg =&_fc .Options {DstMask :_bcd ._bgcb ,DstMaskP :_a .Point {}};};_cdc :=_bcd ._gbe .Clone ().Translate (float64 (_edbb .Min .X ),float64 (_edbb .Min .Y ));_fbbf :=_de .Aff3 {_cdc [0],_cdc [3],_cdc [6],_cdc [1],_cdc [4],_cdc [7]};
_fc .BiLinear .Transform (_bcd ._gaga ,_fbbf ,_eca ,_fec ,_fc .Over ,_gaeg );_gbcf .Dot .X +=_bec ;_gbd =_ceb ;};};func (_fdfd *solidPattern )ColorAt (x ,y int )_cb .Color {return _fdfd ._bede };func NewRadialGradient (x0 ,y0 ,r0 ,x1 ,y1 ,r1 float64 )_fg .Gradient {_ccc :=circle {x0 ,y0 ,r0 };
_bfbd :=circle {x1 ,y1 ,r1 };_dfgc :=circle {x1 -x0 ,y1 -y0 ,r1 -r0 };_cdcb :=_cgg (_dfgc ._bfb ,_dfgc ._agg ,-_dfgc ._deca ,_dfgc ._bfb ,_dfgc ._agg ,_dfgc ._deca );var _dgee float64 ;if _cdcb !=0{_dgee =1.0/_cdcb ;};_cdfg :=-_ccc ._deca ;_cad :=&radialGradient {_edbd :_ccc ,_bcff :_bfbd ,_bca :_dfgc ,_fge :_cdcb ,_afg :_dgee ,_bfce :_cdfg };
return _cad ;};func (_ea *Context )SetDash (dashes ...float64 ){_ea ._bbd =dashes };func _bad (_gge float64 )_af .Int26_6 {return _af .Int26_6 (_gge *64)};func (_ca *Context )Width ()int {return _ca ._cbg };func (_dfc *Context )TextState ()*_fg .TextState {return &_dfc ._bgee };
func (_accb *linearGradient )ColorAt (x ,y int )_cb .Color {if len (_accb ._dgbb )==0{return _cb .Transparent ;};_gegae ,_acg :=float64 (x ),float64 (y );_cba ,_edcf ,_ege ,_acae :=_accb ._fdcg ,_accb ._fcc ,_accb ._eecc ,_accb ._daa ;_ddc ,_fed :=_ege -_cba ,_acae -_edcf ;
if _fed ==0&&_ddc !=0{return _bbga ((_gegae -_cba )/_ddc ,_accb ._dgbb );};if _ddc ==0&&_fed !=0{return _bbga ((_acg -_edcf )/_fed ,_accb ._dgbb );};_bdd :=_ddc *(_gegae -_cba )+_fed *(_acg -_edcf );if _bdd < 0{return _accb ._dgbb [0]._efcd ;};_ddg :=_g .Hypot (_ddc ,_fed );
_bdga :=((_gegae -_cba )*-_fed +(_acg -_edcf )*_ddc )/(_ddg *_ddg );_afe ,_fbdc :=_cba +_bdga *-_fed ,_edcf +_bdga *_ddc ;_gaca :=_g .Hypot (_gegae -_afe ,_acg -_fbdc )/_ddg ;return _bbga (_gaca ,_accb ._dgbb );};func (_eggb *Context )Identity (){_eggb ._gbe =_bc .IdentityMatrix ()};
func NewContext (width ,height int )*Context {return NewContextForRGBA (_a .NewRGBA (_a .Rect (0,0,width ,height )));};func (_fbfb *Context )DrawStringAnchored (s string ,face _gf .Face ,x ,y ,ax ,ay float64 ){_bbea ,_faad :=_fbfb .MeasureString (s ,face );
_fbfb .drawString (s ,face ,x -ax *_bbea ,y +ay *_faad );};func (_cgd *Context )RotateAbout (angle ,x ,y float64 ){_cgd .Translate (x ,y );_cgd .Rotate (angle );_cgd .Translate (-x ,-y );};func NewContextForImage (im _a .Image )*Context {return NewContextForRGBA (_edcg (im ))};
func _fabc (_bcaf float64 )float64 {return _bcaf *_g .Pi /180};func (_gd *Context )CubicTo (x1 ,y1 ,x2 ,y2 ,x3 ,y3 float64 ){if !_gd ._dff {_gd .MoveTo (x1 ,y1 );};_egg ,_gbea :=_gd ._egd .X ,_gd ._egd .Y ;x1 ,y1 =_gd .Transform (x1 ,y1 );x2 ,y2 =_gd .Transform (x2 ,y2 );
x3 ,y3 =_gd .Transform (x3 ,y3 );_ebb :=_eg (_egg ,_gbea ,x1 ,y1 ,x2 ,y2 ,x3 ,y3 );_aa :=_deac (_gd ._egd );for _ ,_bbbd :=range _ebb [1:]{_cac :=_deac (_bbbd );if _cac ==_aa {continue ;};_aa =_cac ;_gd ._be .Add1 (_cac );_gd ._ad .Add1 (_cac );_gd ._egd =_bbbd ;
};};func (_fdc *Context )ClearPath (){_fdc ._be .Clear ();_fdc ._ad .Clear ();_fdc ._dff =false };func (_dee *surfacePattern )ColorAt (x ,y int )_cb .Color {_cgfg :=_dee ._afecd .Bounds ();switch _dee ._cdg {case _dccf :if y >=_cgfg .Dy (){return _cb .Transparent ;
};case _gfea :if x >=_cgfg .Dx (){return _cb .Transparent ;};case _aadd :if x >=_cgfg .Dx ()||y >=_cgfg .Dy (){return _cb .Transparent ;};};x =x %_cgfg .Dx ()+_cgfg .Min .X ;y =y %_cgfg .Dy ()+_cgfg .Min .Y ;return _dee ._afecd .At (x ,y );};func (_geg *Context )DrawEllipticalArc (x ,y ,rx ,ry ,angle1 ,angle2 float64 ){const _ccd =16;
for _aed :=0;_aed < _ccd ;_aed ++{_afa :=float64 (_aed +0)/_ccd ;_ccf :=float64 (_aed +1)/_ccd ;_bafa :=angle1 +(angle2 -angle1 )*_afa ;_edd :=angle1 +(angle2 -angle1 )*_ccf ;_abdg :=x +rx *_g .Cos (_bafa );_ffb :=y +ry *_g .Sin (_bafa );_gega :=x +rx *_g .Cos ((_bafa +_edd )/2);
_egfb :=y +ry *_g .Sin ((_bafa +_edd )/2);_dbc :=x +rx *_g .Cos (_edd );_cga :=y +ry *_g .Sin (_edd );_ddag :=2*_gega -_abdg /2-_dbc /2;_fcg :=2*_egfb -_ffb /2-_cga /2;if _aed ==0{if _geg ._dff {_geg .LineTo (_abdg ,_ffb );}else {_geg .MoveTo (_abdg ,_ffb );
};};_geg .QuadraticTo (_ddag ,_fcg ,_dbc ,_cga );};};func (_bfae *Context )DrawEllipse (x ,y ,rx ,ry float64 ){_bfae .NewSubPath ();_bfae .DrawEllipticalArc (x ,y ,rx ,ry ,0,2*_g .Pi );_bfae .ClosePath ();};type stop struct{_acd float64 ;_efcd _cb .Color ;
};func (_gfd *Context )SetFillRule (fillRule _fg .FillRule ){_gfd ._cgf =fillRule };func (_cdeb *Context )SetMask (mask *_a .Alpha )error {if mask .Bounds ().Size ()!=_cdeb ._gaga .Bounds ().Size (){return _d .New ("\u006d\u0061\u0073\u006b\u0020\u0073i\u007a\u0065\u0020\u006d\u0075\u0073\u0074\u0020\u006d\u0061\u0074\u0063\u0068 \u0063\u006f\u006e\u0074\u0065\u0078\u0074 \u0073\u0069\u007a\u0065");
};_cdeb ._bgcb =mask ;return nil ;};func (_baea *Context )SetMatrix (m _bc .Matrix ){_baea ._gbe =m };func (_fbe *Context )StrokePreserve (){var _gbbf _bf .Painter ;if _fbe ._bgcb ==nil {if _cfba ,_dbb :=_fbe ._aca .(*solidPattern );_dbb {_aag :=_bf .NewRGBAPainter (_fbe ._gaga );
_aag .SetColor (_cfba ._bede );_gbbf =_aag ;};};if _gbbf ==nil {_gbbf =_afcae (_fbe ._gaga ,_fbe ._bgcb ,_fbe ._aca );};_fbe .stroke (_gbbf );};func NewContextForRGBA (im *_a .RGBA )*Context {_bag :=im .Bounds ().Size ().X ;_gfc :=im .Bounds ().Size ().Y ;
return &Context {_cbg :_bag ,_ge :_gfc ,_ace :_bf .NewRasterizer (_bag ,_gfc ),_gaga :im ,_cfg :_cb .Transparent ,_cde :_fff ,_aca :_bdc ,_efa :1,_cgf :_fg .FillRuleWinding ,_gbe :_bc .IdentityMatrix (),_bgee :_fg .NewTextState ()};};func _cgg (_bfdf ,_dfd ,_dbe ,_dce ,_acdg ,_dfca float64 )float64 {return _bfdf *_dce +_dfd *_acdg +_dbe *_dfca ;
};func (_ebg *Context )Shear (x ,y float64 ){_ebg ._gbe .Shear (x ,y )};func (_bfdc *Context )SetStrokeRGBA (r ,g ,b ,a float64 ){_cbb :=_cb .NRGBA {uint8 (r *255),uint8 (g *255),uint8 (b *255),uint8 (a *255)};_bfdc ._aca =_dabe (_cbb );};func (_ebae *Context )ShearAbout (sx ,sy ,x ,y float64 ){_ebae .Translate (x ,y );
_ebae .Shear (sx ,sy );_ebae .Translate (-x ,-y );};func (_gfg *Context )AsMask ()*_a .Alpha {_gbc :=_a .NewAlpha (_gfg ._gaga .Bounds ());_fc .Draw (_gbc ,_gfg ._gaga .Bounds (),_gfg ._gaga ,_a .Point {},_fc .Src );return _gbc ;};func (_ffd *Context )Image ()_a .Image {return _ffd ._gaga };
func (_bgg *Context )DrawRoundedRectangle (x ,y ,w ,h ,r float64 ){_abb ,_ggbe ,_cdda ,_eec :=x ,x +r ,x +w -r ,x +w ;_ada ,_debf ,_fbb ,_egf :=y ,y +r ,y +h -r ,y +h ;_bgg .NewSubPath ();_bgg .MoveTo (_ggbe ,_ada );_bgg .LineTo (_cdda ,_ada );_bgg .DrawArc (_cdda ,_debf ,r ,_fabc (270),_fabc (360));
_bgg .LineTo (_eec ,_fbb );_bgg .DrawArc (_cdda ,_fbb ,r ,_fabc (0),_fabc (90));_bgg .LineTo (_ggbe ,_egf );_bgg .DrawArc (_ggbe ,_fbb ,r ,_fabc (90),_fabc (180));_bgg .LineTo (_abb ,_debf );_bgg .DrawArc (_ggbe ,_debf ,r ,_fabc (180),_fabc (270));_bgg .ClosePath ();
};func (_gcc *Context )DrawString (s string ,face _gf .Face ,x ,y float64 ){_gcc .DrawStringAnchored (s ,face ,x ,y ,0,0);};func (_gfb *Context )StrokePattern ()_fg .Pattern {return _gfb ._aca };func _dabe (_cbba _cb .Color )_fg .Pattern {return &solidPattern {_bede :_cbba }};
func (_cgbc *Context )FillPattern ()_fg .Pattern {return _cgbc ._cde };func _bbga (_cdbd float64 ,_fcb stops )_cb .Color {if _cdbd <=0.0||len (_fcb )==1{return _fcb [0]._efcd ;};_fdca :=_fcb [len (_fcb )-1];if _cdbd >=_fdca ._acd {return _fdca ._efcd ;
};for _afca ,_agb :=range _fcb [1:]{if _cdbd < _agb ._acd {_cdbd =(_cdbd -_fcb [_afca ]._acd )/(_agb ._acd -_fcb [_afca ]._acd );return _cfec (_fcb [_afca ]._efcd ,_agb ._efcd ,_cdbd );};};return _fdca ._efcd ;};type Context struct{_cbg int ;_ge int ;_ace *_bf .Rasterizer ;
_gaga *_a .RGBA ;_bgcb *_a .Alpha ;_cfg _cb .Color ;_cde _fg .Pattern ;_aca _fg .Pattern ;_be _bf .Path ;_ad _bf .Path ;_gagc _bc .Point ;_egd _bc .Point ;_dff bool ;_bbd []float64 ;_ae float64 ;_efa float64 ;_da _fg .LineCap ;_cgb _fg .LineJoin ;_cgf _fg .FillRule ;
_gbe _bc .Matrix ;_bgee _fg .TextState ;_acc []*Context ;};func (_feg *Context )SetLineJoin (lineJoin _fg .LineJoin ){_feg ._cgb =lineJoin };func (_dgb *Context )DrawPoint (x ,y ,r float64 ){_dgb .Push ();_edc ,_ffe :=_dgb .Transform (x ,y );_dgb .Identity ();
_dgb .DrawCircle (_edc ,_ffe ,r );_dgb .Pop ();};func (_fef *Context )stroke (_eeaf _bf .Painter ){_fbf :=_fef ._be ;if len (_fef ._bbd )> 0{_fbf =_fcgd (_fbf ,_fef ._bbd ,_fef ._ae );}else {_fbf =_efg (_dbf (_fbf ));};_dfg :=_fef ._ace ;_dfg .UseNonZeroWinding =true ;
_dfg .Clear ();_dcf :=(_fef ._gbe .ScalingFactorX ()+_fef ._gbe .ScalingFactorY ())/2;_dfg .AddStroke (_fbf ,_bad (_fef ._efa *_dcf ),_fef .capper (),_fef .joiner ());_dfg .Rasterize (_eeaf );};func (_gdd *Context )Scale (x ,y float64 ){_gdd ._gbe =_gdd ._gbe .Scale (x ,y )};
func (_dae *Context )Translate (x ,y float64 ){_dae ._gbe =_dae ._gbe .Translate (x ,y )};func (_ecg *Context )Fill (){_ecg .FillPreserve ();_ecg .ClearPath ()};func (_aga *Context )DrawRectangle (x ,y ,w ,h float64 ){_aga .NewSubPath ();_aga .MoveTo (x ,y );
_aga .LineTo (x +w ,y );_aga .LineTo (x +w ,y +h );_aga .LineTo (x ,y +h );_aga .ClosePath ();};func (_dadf stops )Less (i ,j int )bool {return _dadf [i ]._acd < _dadf [j ]._acd };func _efg (_eab [][]_bc .Point )_bf .Path {var _bbdg _bf .Path ;for _ ,_afec :=range _eab {var _facg _af .Point26_6 ;
for _egeb ,_fbda :=range _afec {_bba :=_deac (_fbda );if _egeb ==0{_bbdg .Start (_bba );}else {_eaa :=_bba .X -_facg .X ;_dadc :=_bba .Y -_facg .Y ;if _eaa < 0{_eaa =-_eaa ;};if _dadc < 0{_dadc =-_dadc ;};if _eaa +_dadc > 8{_bbdg .Add1 (_bba );};};_facg =_bba ;
};};return _bbdg ;};func (_gca *Context )LineTo (x ,y float64 ){if !_gca ._dff {_gca .MoveTo (x ,y );}else {x ,y =_gca .Transform (x ,y );_dab :=_bc .NewPoint (x ,y );_faa :=_deac (_dab );_gca ._be .Add1 (_faa );_gca ._ad .Add1 (_faa );_gca ._egd =_dab ;
};};func (_ddafg *Context )DrawLine (x1 ,y1 ,x2 ,y2 float64 ){_ddafg .MoveTo (x1 ,y1 );_ddafg .LineTo (x2 ,y2 )};func (_eaf *Context )drawRegularPolygon (_dec int ,_gde ,_ebf ,_gacd ,_aad float64 ){_eda :=2*_g .Pi /float64 (_dec );_aad -=_g .Pi /2;if _dec %2==0{_aad +=_eda /2;
};_eaf .NewSubPath ();for _ecb :=0;_ecb < _dec ;_ecb ++{_dcg :=_aad +_eda *float64 (_ecb );_eaf .LineTo (_gde +_gacd *_g .Cos (_dcg ),_ebf +_gacd *_g .Sin (_dcg ));};_eaf .ClosePath ();};