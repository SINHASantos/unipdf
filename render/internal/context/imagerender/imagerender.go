//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package imagerender ;import (_g "errors";_ad "fmt";_ed "github.com/unidoc/freetype/raster";_be "github.com/unidoc/unipdf/v4/common";_e "github.com/unidoc/unipdf/v4/internal/precision";_gg "github.com/unidoc/unipdf/v4/internal/transform";_bc "github.com/unidoc/unipdf/v4/render/internal/context";
_ab "golang.org/x/image/draw";_gc "golang.org/x/image/font";_ef "golang.org/x/image/math/f64";_da "golang.org/x/image/math/fixed";_d "image";_ae "image/color";_c "image/draw";_fe "math";_b "sort";_a "strings";);func (_aab *Context )NewSubPath (){if _aab ._gbb {_aab ._eba .Add1 (_gecb (_aab ._ege ));
};_aab ._gbb =false ;};func _dfc (_ade ,_cc ,_bea ,_gfe ,_abb ,_cd ,_dde ,_becd float64 )[]_gg .Point {_cgf :=(_fe .Hypot (_bea -_ade ,_gfe -_cc )+_fe .Hypot (_abb -_bea ,_cd -_gfe )+_fe .Hypot (_dde -_abb ,_becd -_cd ));_ag :=int (_cgf +0.5);if _ag < 4{_ag =4;
};_aeb :=float64 (_ag )-1;_fg :=make ([]_gg .Point ,_ag );for _becc :=0;_becc < _ag ;_becc ++{_aff :=float64 (_becc )/_aeb ;_cdd ,_ggb :=_bb (_ade ,_cc ,_bea ,_gfe ,_abb ,_cd ,_dde ,_becd ,_aff );_fg [_becc ]=_gg .NewPoint (_cdd ,_ggb );};return _fg ;};
type patternPainter struct{_geec *_d .RGBA ;_fgga *_d .Alpha ;_becda _bc .Pattern ;};func (_aaca *Context )ClearPath (){_aaca ._ce .Clear ();_aaca ._eba .Clear ();_aaca ._gbb =false };type repeatOp int ;func (_ecb *Context )Pop (){_gcc :=*_ecb ;_faf :=_ecb ._dabb ;
_cbb :=_faf [len (_faf )-1];*_ecb =*_cbb ;_ecb ._ce =_gcc ._ce ;_ecb ._eba =_gcc ._eba ;_ecb ._ege =_gcc ._ege ;_ecb ._beab =_gcc ._beab ;_ecb ._gbb =_gcc ._gbb ;};func (_agd *Context )Clear (){_dgbf :=_d .NewUniform (_agd ._dac );_ab .Draw (_agd ._ea ,_agd ._ea .Bounds (),_dgbf ,_d .Point {},_ab .Src );
};func (_cgc *Context )MeasureString (s string ,face _gc .Face )(_bf ,_fbd float64 ){_egb :=&_gc .Drawer {Face :face };_bggd :=_egb .MeasureString (s );return float64 (_bggd >>6),_cgc ._deb .Tf .Size ;};func (_gec *Context )Clip (){_gec .ClipPreserve ();
_gec .ClearPath ()};func (_efa *Context )Push (){_cedc :=*_efa ;_efa ._dabb =append (_efa ._dabb ,&_cedc )};func NewContextForRGBA (im *_d .RGBA )*Context {_ffb :=im .Bounds ().Size ().X ;_ca :=im .Bounds ().Size ().Y ;return &Context {_fga :_ffb ,_fba :_ca ,_beg :_ed .NewRasterizer (_ffb ,_ca ),_ea :im ,_dac :_ae .Transparent ,_abbg :_abc ,_gge :_adf ,_db :1,_gba :_bc .FillRuleWinding ,_efd :_gg .IdentityMatrix (),_deb :_bc .NewTextState ()};
};func (_gdd *Context )stroke (_eaf _ed .Painter ){_ceec :=_gdd ._ce ;if len (_gdd ._fgb )> 0{_ceec =_bgf (_ceec ,_gdd ._fgb ,_gdd ._efbg );}else {_ceec =_geg (_fefb (_ceec ));};_ffc :=_gdd ._beg ;_ffc .UseNonZeroWinding =true ;_ffc .Clear ();_dee :=(_gdd ._efd .ScalingFactorX ()+_gdd ._efd .ScalingFactorY ())/2;
_ffc .AddStroke (_ceec ,_ecbf (_gdd ._db *_dee ),_gdd .capper (),_gdd .joiner ());_ffc .Rasterize (_eaf );};func (_dadf *Context )StrokePattern ()_bc .Pattern {return _dadf ._gge };func (_eae *Context )joiner ()_ed .Joiner {switch _eae ._fbf {case _bc .LineJoinBevel :return _ed .BevelJoiner ;
case _bc .LineJoinRound :return _ed .RoundJoiner ;};return nil ;};func (_ggae *linearGradient )AddColorStop (offset float64 ,color _ae .Color ){_ggae ._ffcff =append (_ggae ._ffcff ,stop {_ffce :offset ,_ddd :color });_b .Sort (_ggae ._ffcff );};func (_dgb *Context )FillPreserve (){var _aaf _ed .Painter ;
if _dgb ._ccc ==nil {if _cgg ,_cedd :=_dgb ._abbg .(*solidPattern );_cedd {_eab :=_ed .NewRGBAPainter (_dgb ._ea );_eab .SetColor (_cgg ._dea );_aaf =_eab ;};};if _aaf ==nil {_aaf =_face (_dgb ._ea ,_dgb ._ccc ,_dgb ._abbg );};_dgb .fill (_aaf );};func (_dfed *Context )DrawStringAnchored (s string ,face _gc .Face ,x ,y ,ax ,ay float64 ){_dcb ,_gfec :=_dfed .MeasureString (s ,face );
_dfed .drawString (s ,face ,x -ax *_dcb ,y +ay *_gfec );};func _agdb (_bgdf ,_edd ,_fcd ,_aae ,_cggg ,_bcd float64 )float64 {return _bgdf *_aae +_edd *_cggg +_fcd *_bcd ;};func (_ded *solidPattern )ColorAt (x ,y int )_ae .Color {return _ded ._dea };func (_gdaa *Context )TextState ()*_bc .TextState {return &_gdaa ._deb };
func (_bef *Context )Stroke (){_bef .StrokePreserve ();_bef .ClearPath ()};func (_cca *Context )ClipPreserve (){_ace :=_d .NewAlpha (_d .Rect (0,0,_cca ._fga ,_cca ._fba ));_bg :=_ed .NewAlphaOverPainter (_ace );_cca .fill (_bg );if _cca ._ccc ==nil {_cca ._ccc =_ace ;
}else {_fdag :=_d .NewAlpha (_d .Rect (0,0,_cca ._fga ,_cca ._fba ));_ab .DrawMask (_fdag ,_fdag .Bounds (),_ace ,_d .Point {},_cca ._ccc ,_d .Point {},_ab .Over );_cca ._ccc =_fdag ;};};func (_bad *Context )DrawPoint (x ,y ,r float64 ){_bad .Push ();_bced ,_dcf :=_bad .Transform (x ,y );
_bad .Identity ();_bad .DrawCircle (_bced ,_dcf ,r );_bad .Pop ();};func (_gef *Context )Fill (){_gef .FillPreserve ();_gef .ClearPath ()};func (_caa *Context )ClosePath (){if _caa ._gbb {_bbf :=_gecb (_caa ._ege );_caa ._ce .Add1 (_bbf );_caa ._eba .Add1 (_bbf );
_caa ._beab =_caa ._ege ;};};func _cgac (_dbgc float64 )float64 {return _dbgc *_fe .Pi /180};func (_ddef *Context )SetFillRule (fillRule _bc .FillRule ){_ddef ._gba =fillRule };func (_aabc *Context )drawString (_cgda string ,_dcd _gc .Face ,_fcg ,_cag float64 ){_bcff :=&_gc .Drawer {Src :_d .NewUniform (_aabc ._dac ),Face :_dcd ,Dot :_gecb (_gg .NewPoint (_fcg ,_cag ))};
_fdb :=rune (-1);for _ ,_cab :=range _cgda {if _fdb >=0{_bcff .Dot .X +=_bcff .Face .Kern (_fdb ,_cab );};_gdb ,_acaa ,_gfb ,_cdc ,_egfe :=_bcff .Face .Glyph (_bcff .Dot ,_cab );if !_egfe {continue ;};_gfcd :=_gdb .Sub (_gdb .Min );_dabe :=_d .NewRGBA (_gfcd );
_ab .DrawMask (_dabe ,_gfcd ,_bcff .Src ,_d .Point {},_acaa ,_gfb ,_ab .Over );var _bcb *_ab .Options ;if _aabc ._ccc !=nil {_bcb =&_ab .Options {DstMask :_aabc ._ccc ,DstMaskP :_d .Point {}};};_fcc :=_aabc ._efd .Clone ().Translate (float64 (_gdb .Min .X ),float64 (_gdb .Min .Y ));
_ecc :=_ef .Aff3 {_fcc [0],_fcc [3],_fcc [6],_fcc [1],_fcc [4],_fcc [7]};_ab .BiLinear .Transform (_aabc ._ea ,_ecc ,_dabe ,_gfcd ,_ab .Over ,_bcb );_bcff .Dot .X +=_cdc ;_fdb =_cab ;};};func (_geb *Context )SetMask (mask *_d .Alpha )error {if mask .Bounds ().Size ()!=_geb ._ea .Bounds ().Size (){return _g .New ("\u006d\u0061\u0073\u006b\u0020\u0073i\u007a\u0065\u0020\u006d\u0075\u0073\u0074\u0020\u006d\u0061\u0074\u0063\u0068 \u0063\u006f\u006e\u0074\u0065\u0078\u0074 \u0073\u0069\u007a\u0065");
};_geb ._ccc =mask ;return nil ;};func (_aea *Context )fill (_fef _ed .Painter ){_cbe :=_aea ._eba ;if _aea ._gbb {_cbe =make (_ed .Path ,len (_aea ._eba ));copy (_cbe ,_aea ._eba );_cbe .Add1 (_gecb (_aea ._ege ));};_ffcf :=_aea ._beg ;_ffcf .UseNonZeroWinding =_aea ._gba ==_bc .FillRuleWinding ;
_ffcf .Clear ();_ffcf .AddPath (_cbe );_ffcf .Rasterize (_fef );};func (_fcef *linearGradient )ColorAt (x ,y int )_ae .Color {if len (_fcef ._ffcff )==0{return _ae .Transparent ;};_agg ,_fcf :=float64 (x ),float64 (y );_efbb ,_aebg ,_aaa ,_gedc :=_fcef ._bdb ,_fcef ._dfb ,_fcef ._gdf ,_fcef ._bgb ;
_bfg ,_cgcf :=_aaa -_efbb ,_gedc -_aebg ;if _cgcf ==0&&_bfg !=0{return _egc ((_agg -_efbb )/_bfg ,_fcef ._ffcff );};if _bfg ==0&&_cgcf !=0{return _egc ((_fcf -_aebg )/_cgcf ,_fcef ._ffcff );};_egfg :=_bfg *(_agg -_efbb )+_cgcf *(_fcf -_aebg );if _egfg < 0{return _fcef ._ffcff [0]._ddd ;
};_dbde :=_fe .Hypot (_bfg ,_cgcf );_egac :=((_agg -_efbb )*-_cgcf +(_fcf -_aebg )*_bfg )/(_dbde *_dbde );_bfa ,_fgd :=_efbb +_egac *-_cgcf ,_aebg +_egac *_bfg ;_cbaa :=_fe .Hypot (_agg -_bfa ,_fcf -_fgd )/_dbde ;return _egc (_cbaa ,_fcef ._ffcff );};func (_ecf *Context )ShearAbout (sx ,sy ,x ,y float64 ){_ecf .Translate (x ,y );
_ecf .Shear (sx ,sy );_ecf .Translate (-x ,-y );};func _ecbf (_dabg float64 )_da .Int26_6 {_dabg =_e .RoundDefault (_dabg );return _da .Int26_6 (_dabg *64)};func (_aac *Context )SetRGBA255 (r ,g ,b ,a int ){_aac ._dac =_ae .NRGBA {uint8 (r ),uint8 (g ),uint8 (b ),uint8 (a )};
_aac .setFillAndStrokeColor (_aac ._dac );};func (_dafc *Context )DrawCircle (x ,y ,r float64 ){_dafc .NewSubPath ();_dafc .DrawEllipticalArc (x ,y ,r ,r ,0,2*_fe .Pi );_dafc .ClosePath ();};type stops []stop ;func (_afb *Context )SetDashOffset (offset float64 ){_afb ._efbg =offset };
func NewLinearGradient (x0 ,y0 ,x1 ,y1 float64 )_bc .Gradient {_ffa :=&linearGradient {_bdb :x0 ,_dfb :y0 ,_gdf :x1 ,_bgb :y1 };return _ffa ;};func (_deba *Context )SetLineWidth (lineWidth float64 ){_deba ._db =lineWidth };var (_abc =_fbbbg (_ae .White );
_adf =_fbbbg (_ae .Black ););type surfacePattern struct{_fggg _d .Image ;_fagg repeatOp ;};func (_aca *Context )CubicTo (x1 ,y1 ,x2 ,y2 ,x3 ,y3 float64 ){if !_aca ._gbb {_aca .MoveTo (x1 ,y1 );};_fbe ,_adec :=_aca ._beab .X ,_aca ._beab .Y ;x1 ,y1 =_aca .Transform (x1 ,y1 );
x2 ,y2 =_aca .Transform (x2 ,y2 );x3 ,y3 =_aca .Transform (x3 ,y3 );_agb :=_dfc (_fbe ,_adec ,x1 ,y1 ,x2 ,y2 ,x3 ,y3 );_fed :=_gecb (_aca ._beab );for _ ,_bccd :=range _agb [1:]{_adfb :=_gecb (_bccd );if _adfb ==_fed {continue ;};_fed =_adfb ;_aca ._ce .Add1 (_adfb );
_aca ._eba .Add1 (_adfb );_aca ._beab =_bccd ;};};func (_dcfa *Context )Identity (){_dcfa ._efd =_gg .IdentityMatrix ()};func (_daca *Context )SetFillRGBA (r ,g ,b ,a float64 ){_ ,_ ,_ ,_caf :=_daca ._dac .RGBA ();if _caf > 0&&_caf !=65535&&a ==1{a =float64 (_caf )/65535;
};_bcg :=_ae .NRGBA {uint8 (r *255),uint8 (g *255),uint8 (b *255),uint8 (a *255)};_daca ._dac =_bcg ;_daca ._abbg =_fbbbg (_bcg );};func _cb (_ee ,_ba ,_gf ,_eb ,_ac ,_dae float64 )[]_gg .Point {_ggg :=(_fe .Hypot (_gf -_ee ,_eb -_ba )+_fe .Hypot (_ac -_gf ,_dae -_eb ));
_de :=int (_ggg +0.5);if _de < 4{_de =4;};_bcc :=float64 (_de )-1;_acd :=make ([]_gg .Point ,_de );for _fa :=0;_fa < _de ;_fa ++{_abf :=float64 (_fa )/_bcc ;_bec ,_aec :=_daf (_ee ,_ba ,_gf ,_eb ,_ac ,_dae ,_abf );_acd [_fa ]=_gg .NewPoint (_bec ,_aec );
};return _acd ;};type Context struct{_fga int ;_fba int ;_beg *_ed .Rasterizer ;_ea *_d .RGBA ;_ccc *_d .Alpha ;_dac _ae .Color ;_abbg _bc .Pattern ;_gge _bc .Pattern ;_ce _ed .Path ;_eba _ed .Path ;_ege _gg .Point ;_beab _gg .Point ;_gbb bool ;_fgb []float64 ;
_efbg float64 ;_db float64 ;_gag _bc .LineCap ;_fbf _bc .LineJoin ;_gba _bc .FillRule ;_efd _gg .Matrix ;_deb _bc .TextState ;_dabb []*Context ;};func (_fgf *Context )AsMask ()*_d .Alpha {_gde :=_d .NewAlpha (_fgf ._ea .Bounds ());_ab .Draw (_gde ,_fgf ._ea .Bounds (),_fgf ._ea ,_d .Point {},_ab .Src );
return _gde ;};func (_egg *Context )SetRGB (r ,g ,b float64 ){_egg .SetRGBA (r ,g ,b ,1)};func (_eecf *patternPainter )Paint (ss []_ed .Span ,done bool ){_gcad :=_eecf ._geec .Bounds ();for _ ,_dbga :=range ss {if _dbga .Y < _gcad .Min .Y {continue ;};
if _dbga .Y >=_gcad .Max .Y {return ;};if _dbga .X0 < _gcad .Min .X {_dbga .X0 =_gcad .Min .X ;};if _dbga .X1 > _gcad .Max .X {_dbga .X1 =_gcad .Max .X ;};if _dbga .X0 >=_dbga .X1 {continue ;};const _efe =1<<16-1;_ddgg :=_dbga .Y -_eecf ._geec .Rect .Min .Y ;
_beca :=_dbga .X0 -_eecf ._geec .Rect .Min .X ;_gbae :=(_dbga .Y -_eecf ._geec .Rect .Min .Y )*_eecf ._geec .Stride +(_dbga .X0 -_eecf ._geec .Rect .Min .X )*4;_caff :=_gbae +(_dbga .X1 -_dbga .X0 )*4;for _adba ,_dda :=_gbae ,_beca ;_adba < _caff ;_adba ,_dda =_adba +4,_dda +1{_bcba :=_dbga .Alpha ;
if _eecf ._fgga !=nil {_bcba =_bcba *uint32 (_eecf ._fgga .AlphaAt (_dda ,_ddgg ).A )/255;if _bcba ==0{continue ;};};_cbgd :=_eecf ._becda .ColorAt (_dda ,_ddgg );_bdf ,_abdf ,_caed ,_abaaa :=_cbgd .RGBA ();_fdaf :=uint32 (_eecf ._geec .Pix [_adba +0]);
_eabc :=uint32 (_eecf ._geec .Pix [_adba +1]);_gecf :=uint32 (_eecf ._geec .Pix [_adba +2]);_bdcf :=uint32 (_eecf ._geec .Pix [_adba +3]);_bbg :=(_efe -(_abaaa *_bcba /_efe ))*0x101;_eecf ._geec .Pix [_adba +0]=uint8 ((_fdaf *_bbg +_bdf *_bcba )/_efe >>8);
_eecf ._geec .Pix [_adba +1]=uint8 ((_eabc *_bbg +_abdf *_bcba )/_efe >>8);_eecf ._geec .Pix [_adba +2]=uint8 ((_gecf *_bbg +_caed *_bcba )/_efe >>8);_eecf ._geec .Pix [_adba +3]=uint8 ((_bdcf *_bbg +_abaaa *_bcba )/_efe >>8);};};};func (_gee *Context )capper ()_ed .Capper {switch _gee ._gag {case _bc .LineCapButt :return _ed .ButtCapper ;
case _bc .LineCapRound :return _ed .RoundCapper ;case _bc .LineCapSquare :return _ed .SquareCapper ;};return nil ;};func (_ecg *Context )DrawImage (im _d .Image ,x ,y int ){_ecg .DrawImageAnchored (im ,x ,y ,0,0)};func (_cfa *Context )drawRegularPolygon (_dfe int ,_cfdc ,_beef ,_fgba ,_fac float64 ){_bdg :=2*_fe .Pi /float64 (_dfe );
_fac -=_fe .Pi /2;if _dfe %2==0{_fac +=_bdg /2;};_cfa .NewSubPath ();for _bgd :=0;_bgd < _dfe ;_bgd ++{_eee :=_fac +_bdg *float64 (_bgd );_cfa .LineTo (_cfdc +_fgba *_fe .Cos (_eee ),_beef +_fgba *_fe .Sin (_eee ));};_cfa .ClosePath ();};func (_efac *radialGradient )AddColorStop (offset float64 ,color _ae .Color ){_efac ._cgcg =append (_efac ._cgcg ,stop {_ffce :offset ,_ddd :color });
_b .Sort (_efac ._cgcg );};func _fefb (_bfc _ed .Path )[][]_gg .Point {var _cddb [][]_gg .Point ;var _eeg []_gg .Point ;var _cbc ,_ffgg float64 ;for _dacc :=0;_dacc < len (_bfc );{switch _bfc [_dacc ]{case 0:if len (_eeg )> 0{_cddb =append (_cddb ,_eeg );
_eeg =nil ;};_adda :=_dddd (_bfc [_dacc +1]);_ccd :=_dddd (_bfc [_dacc +2]);_eeg =append (_eeg ,_gg .NewPoint (_adda ,_ccd ));_cbc ,_ffgg =_adda ,_ccd ;_dacc +=4;case 1:_acfb :=_dddd (_bfc [_dacc +1]);_fbg :=_dddd (_bfc [_dacc +2]);_eeg =append (_eeg ,_gg .NewPoint (_acfb ,_fbg ));
_cbc ,_ffgg =_acfb ,_fbg ;_dacc +=4;case 2:_aba :=_dddd (_bfc [_dacc +1]);_bdeb :=_dddd (_bfc [_dacc +2]);_egae :=_dddd (_bfc [_dacc +3]);_edc :=_dddd (_bfc [_dacc +4]);_bgc :=_cb (_cbc ,_ffgg ,_aba ,_bdeb ,_egae ,_edc );_eeg =append (_eeg ,_bgc ...);_cbc ,_ffgg =_egae ,_edc ;
_dacc +=6;case 3:_debg :=_dddd (_bfc [_dacc +1]);_ceg :=_dddd (_bfc [_dacc +2]);_dfdd :=_dddd (_bfc [_dacc +3]);_bdc :=_dddd (_bfc [_dacc +4]);_ggc :=_dddd (_bfc [_dacc +5]);_acdc :=_dddd (_bfc [_dacc +6]);_dgdd :=_dfc (_cbc ,_ffgg ,_debg ,_ceg ,_dfdd ,_bdc ,_ggc ,_acdc );
_eeg =append (_eeg ,_dgdd ...);_cbc ,_ffgg =_ggc ,_acdc ;_dacc +=8;default:_be .Log .Debug ("\u0057\u0041\u0052\u004e: \u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0070\u0061\u0074\u0068\u003a\u0020%\u0076",_bfc );return _cddb ;};};if len (_eeg )> 0{_cddb =append (_cddb ,_eeg );
};return _cddb ;};type circle struct{_cad ,_fcce ,_fea float64 };type solidPattern struct{_dea _ae .Color };func (_gcd *Context )InvertMask (){if _gcd ._ccc ==nil {_gcd ._ccc =_d .NewAlpha (_gcd ._ea .Bounds ());}else {for _fbb ,_dagg :=range _gcd ._ccc .Pix {_gcd ._ccc .Pix [_fbb ]=255-_dagg ;
};};};func (_abd *radialGradient )ColorAt (x ,y int )_ae .Color {if len (_abd ._cgcg )==0{return _ae .Transparent ;};_gfea ,_fge :=float64 (x )+0.5-_abd ._agf ._cad ,float64 (y )+0.5-_abd ._agf ._fcce ;_dca :=_agdb (_gfea ,_fge ,_abd ._agf ._fea ,_abd ._adbg ._cad ,_abd ._adbg ._fcce ,_abd ._adbg ._fea );
_dece :=_agdb (_gfea ,_fge ,-_abd ._agf ._fea ,_gfea ,_fge ,_abd ._agf ._fea );if _abd ._ffd ==0{if _dca ==0{return _ae .Transparent ;};_bdbe :=0.5*_dece /_dca ;if _bdbe *_abd ._adbg ._fea >=_abd ._bbea {return _egc (_bdbe ,_abd ._cgcg );};return _ae .Transparent ;
};_acc :=_agdb (_dca ,_abd ._ffd ,0,_dca ,-_dece ,0);if _acc >=0{_fff :=_fe .Sqrt (_acc );_ffe :=(_dca +_fff )*_abd ._dbe ;_cbg :=(_dca -_fff )*_abd ._dbe ;if _ffe *_abd ._adbg ._fea >=_abd ._bbea {return _egc (_ffe ,_abd ._cgcg );}else if _cbg *_abd ._adbg ._fea >=_abd ._bbea {return _egc (_cbg ,_abd ._cgcg );
};};return _ae .Transparent ;};func _cfe (_egfa [][]_gg .Point ,_abaa []float64 ,_fcda float64 )[][]_gg .Point {var _fedc [][]_gg .Point ;if len (_abaa )==0{return _egfa ;};if len (_abaa )==1{_abaa =append (_abaa ,_abaa [0]);};for _ ,_fgg :=range _egfa {if len (_fgg )< 2{continue ;
};_bbff :=_fgg [0];_gfcda :=1;_dga :=0;_fcaa :=0.0;if _fcda !=0{var _ggbc float64 ;for _ ,_eeca :=range _abaa {_ggbc +=_eeca ;};_fcda =_fe .Mod (_fcda ,_ggbc );if _fcda < 0{_fcda +=_ggbc ;};for _bebb ,_becb :=range _abaa {_fcda -=_becb ;if _fcda < 0{_dga =_bebb ;
_fcaa =_becb +_fcda ;break ;};};};var _abda []_gg .Point ;_abda =append (_abda ,_bbff );for _gfcda < len (_fgg ){_gfbea :=_abaa [_dga ];_ebd :=_fgg [_gfcda ];_cfb :=_bbff .Distance (_ebd );_fcgf :=_gfbea -_fcaa ;if _cfb > _fcgf {_edca :=_fcgf /_cfb ;_ecd :=_bbff .Interpolate (_ebd ,_edca );
_abda =append (_abda ,_ecd );if _dga %2==0&&len (_abda )> 1{_fedc =append (_fedc ,_abda );};_abda =nil ;_abda =append (_abda ,_ecd );_fcaa =0;_bbff =_ecd ;_dga =(_dga +1)%len (_abaa );}else {_abda =append (_abda ,_ebd );_bbff =_ebd ;_fcaa +=_cfb ;_gfcda ++;
};};if _dga %2==0&&len (_abda )> 1{_fedc =append (_fedc ,_abda );};};return _fedc ;};func (_gagc *Context )SetMatrix (m _gg .Matrix ){_gagc ._efd =m };func (_cgfg *Context )DrawEllipse (x ,y ,rx ,ry float64 ){_cgfg .NewSubPath ();_cgfg .DrawEllipticalArc (x ,y ,rx ,ry ,0,2*_fe .Pi );
_cgfg .ClosePath ();};func (_gab *Context )DrawLine (x1 ,y1 ,x2 ,y2 float64 ){_gab .MoveTo (x1 ,y1 );_gab .LineTo (x2 ,y2 )};func (_dff *Context )SetLineCap (lineCap _bc .LineCap ){_dff ._gag =lineCap };func (_aa *Context )Image ()_d .Image {return _aa ._ea };
func (_ccg *Context )SetStrokeRGBA (r ,g ,b ,a float64 ){_gffd :=_ae .NRGBA {uint8 (r *255),uint8 (g *255),uint8 (b *255),uint8 (a *255)};_ccg ._gge =_fbbbg (_gffd );};func (_feb *Context )Height ()int {return _feb ._fba };func (_bee *Context )SetFillStyle (pattern _bc .Pattern ){if _cddf ,_fgc :=pattern .(*solidPattern );
_fgc {_bee ._dac =_cddf ._dea ;};_bee ._abbg =pattern ;};func (_gga *Context )Transform (x ,y float64 )(_gffg ,_gbd float64 ){return _gga ._efd .Transform (x ,y )};const (_befd repeatOp =iota ;_cade ;_ddee ;_fgfd ;);func _fdg (_cadd ,_feag _ae .Color ,_dgd float64 )_ae .Color {_ddgd ,_acfa ,_ffbe ,_eagc :=_cadd .RGBA ();
_gfac ,_gfbe ,_acdb ,_fag :=_feag .RGBA ();return _ae .RGBA {_bbd (_ddgd ,_gfac ,_dgd ),_bbd (_acfa ,_gfbe ,_dgd ),_bbd (_ffbe ,_acdb ,_dgd ),_bbd (_eagc ,_fag ,_dgd )};};func NewRadialGradient (x0 ,y0 ,r0 ,x1 ,y1 ,r1 float64 )_bc .Gradient {_acdd :=circle {x0 ,y0 ,r0 };
_eag :=circle {x1 ,y1 ,r1 };_gcb :=circle {x1 -x0 ,y1 -y0 ,r1 -r0 };_gfcc :=_agdb (_gcb ._cad ,_gcb ._fcce ,-_gcb ._fea ,_gcb ._cad ,_gcb ._fcce ,_gcb ._fea );var _bba float64 ;if _gfcc !=0{_bba =1.0/_gfcc ;};_cbd :=-_acdd ._fea ;_eebg :=&radialGradient {_agf :_acdd ,_fdc :_eag ,_adbg :_gcb ,_ffd :_gfcc ,_dbe :_bba ,_bbea :_cbd };
return _eebg ;};func (_eec *Context )Scale (x ,y float64 ){_eec ._efd =_eec ._efd .Scale (x ,y )};func _egc (_adbd float64 ,_cec stops )_ae .Color {if _adbd <=0.0||len (_cec )==1{return _cec [0]._ddd ;};_fgbaf :=_cec [len (_cec )-1];if _adbd >=_fgbaf ._ffce {return _fgbaf ._ddd ;
};for _ffg ,_cfg :=range _cec [1:]{if _adbd < _cfg ._ffce {_adbd =(_adbd -_cec [_ffg ]._ffce )/(_cfg ._ffce -_cec [_ffg ]._ffce );return _fdg (_cec [_ffg ]._ddd ,_cfg ._ddd ,_adbd );};};return _fgbaf ._ddd ;};func (_gfc *Context )StrokePreserve (){var _fda _ed .Painter ;
if _gfc ._ccc ==nil {if _cba ,_agbf :=_gfc ._gge .(*solidPattern );_agbf {_cbed :=_ed .NewRGBAPainter (_gfc ._ea );_cbed .SetColor (_cba ._dea );_fda =_cbed ;};};if _fda ==nil {_fda =_face (_gfc ._ea ,_gfc ._ccc ,_gfc ._gge );};_gfc .stroke (_fda );};func _geg (_bcdb [][]_gg .Point )_ed .Path {var _afbf _ed .Path ;
for _ ,_gcdg :=range _bcdb {var _fcfb _da .Point26_6 ;for _eecg ,_cbga :=range _gcdg {_fbbb :=_gecb (_cbga );if _eecg ==0{_afbf .Start (_fbbb );}else {_dffe :=_fbbb .X -_fcfb .X ;_aecc :=_fbbb .Y -_fcfb .Y ;if _dffe < 0{_dffe =-_dffe ;};if _aecc < 0{_aecc =-_aecc ;
};if _dffe +_aecc > 8{_afbf .Add1 (_fbbb );};};_fcfb =_fbbb ;};};return _afbf ;};type radialGradient struct{_agf ,_fdc ,_adbg circle ;_ffd ,_dbe float64 ;_bbea float64 ;_cgcg stops ;};func (_bed *Context )QuadraticTo (x1 ,y1 ,x2 ,y2 float64 ){if !_bed ._gbb {_bed .MoveTo (x1 ,y1 );
};x1 ,y1 =_bed .Transform (x1 ,y1 );x2 ,y2 =_bed .Transform (x2 ,y2 );_aacc :=_gg .NewPoint (x1 ,y1 );_affa :=_gg .NewPoint (x2 ,y2 );_dafa :=_gecb (_aacc );_fce :=_gecb (_affa );_bed ._ce .Add2 (_dafa ,_fce );_bed ._eba .Add2 (_dafa ,_fce );_bed ._beab =_affa ;
};func (_cee *Context )MoveTo (x ,y float64 ){if _cee ._gbb {_cee ._eba .Add1 (_gecb (_cee ._ege ));};x ,y =_cee .Transform (x ,y );_afe :=_gg .NewPoint (x ,y );_efc :=_gecb (_afe );_cee ._ce .Start (_efc );_cee ._eba .Start (_efc );_cee ._ege =_afe ;_cee ._beab =_afe ;
_cee ._gbb =true ;};func (_gedf stops )Less (i ,j int )bool {return _gedf [i ]._ffce < _gedf [j ]._ffce };func _dfgb (_cfee _d .Image )*_d .RGBA {_aggdc :=_cfee .Bounds ();_becdc :=_d .NewRGBA (_aggdc );_c .Draw (_becdc ,_aggdc ,_cfee ,_aggdc .Min ,_c .Src );
return _becdc ;};func _gecb (_fbae _gg .Point )_da .Point26_6 {return _da .Point26_6 {X :_ecbf (_fbae .X ),Y :_ecbf (_fbae .Y )}};func (_abcc *surfacePattern )ColorAt (x ,y int )_ae .Color {_egacb :=_abcc ._fggg .Bounds ();switch _abcc ._fagg {case _cade :if y >=_egacb .Dy (){return _ae .Transparent ;
};case _ddee :if x >=_egacb .Dx (){return _ae .Transparent ;};case _fgfd :if x >=_egacb .Dx ()||y >=_egacb .Dy (){return _ae .Transparent ;};};x =x %_egacb .Dx ()+_egacb .Min .X ;y =y %_egacb .Dy ()+_egacb .Min .Y ;return _abcc ._fggg .At (x ,y );};func (_fec *Context )SetRGBA (r ,g ,b ,a float64 ){_ ,_ ,_ ,_dad :=_fec ._dac .RGBA ();
if _dad > 0&&_dad !=65535&&a ==1{a =float64 (_dad )/65535;};_fec ._dac =_ae .NRGBA {uint8 (r *255),uint8 (g *255),uint8 (b *255),uint8 (a *255)};_fec .setFillAndStrokeColor (_fec ._dac );};func _bb (_eff ,_cg ,_dc ,_cf ,_bce ,_daef ,_dag ,_add ,_cfd float64 )(_fc ,_ebc float64 ){_dg :=1-_cfd ;
_af :=_dg *_dg *_dg ;_efb :=3*_dg *_dg *_cfd ;_fb :=3*_dg *_cfd *_cfd ;_ggf :=_cfd *_cfd *_cfd ;_fc =_af *_eff +_efb *_dc +_fb *_bce +_ggf *_dag ;_ebc =_af *_cg +_efb *_cf +_fb *_daef +_ggf *_add ;return ;};func _fbbbg (_bdeg _ae .Color )_bc .Pattern {return &solidPattern {_dea :_bdeg }};
func (_bgg *Context )DrawEllipticalArc (x ,y ,rx ,ry ,angle1 ,angle2 float64 ){const _acf =16;for _ggd :=0;_ggd < _acf ;_ggd ++{_dfa :=float64 (_ggd +0)/_acf ;_cgad :=float64 (_ggd +1)/_acf ;_ada :=angle1 +(angle2 -angle1 )*_dfa ;_ead :=angle1 +(angle2 -angle1 )*_cgad ;
_eef :=x +rx *_fe .Cos (_ada );_dbd :=y +ry *_fe .Sin (_ada );_ec :=x +rx *_fe .Cos ((_ada +_ead )/2);_dbg :=y +ry *_fe .Sin ((_ada +_ead )/2);_bgga :=x +rx *_fe .Cos (_ead );_fbeg :=y +ry *_fe .Sin (_ead );_egad :=2*_ec -_eef /2-_bgga /2;_aga :=2*_dbg -_dbd /2-_fbeg /2;
if _ggd ==0{if _bgg ._gbb {_bgg .LineTo (_eef ,_dbd );}else {_bgg .MoveTo (_eef ,_dbd );};};_bgg .QuadraticTo (_egad ,_aga ,_bgga ,_fbeg );};};func (_ged *Context )Translate (x ,y float64 ){_ged ._efd =_ged ._efd .Translate (x ,y )};func _daf (_ff ,_ga ,_gd ,_dd ,_gb ,_fd ,_eg float64 )(_bd ,_adb float64 ){_df :=1-_eg ;
_eda :=_df *_df ;_ddg :=2*_df *_eg ;_dab :=_eg *_eg ;_bd =_eda *_ff +_ddg *_gd +_dab *_gb ;_adb =_eda *_ga +_ddg *_dd +_dab *_fd ;return ;};func (_bdae *Context )DrawImageAnchored (im _d .Image ,x ,y int ,ax ,ay float64 ){_baf :=im .Bounds ().Size ();x -=int (ax *float64 (_baf .X ));
y -=int (ay *float64 (_baf .Y ));_afg :=_ab .BiLinear ;_agad :=_bdae ._efd .Clone ().Translate (float64 (x ),float64 (y ));_cdda :=_ef .Aff3 {_agad [0],_agad [3],_agad [6],_agad [1],_agad [4],_agad [7]};if _bdae ._ccc ==nil {_afg .Transform (_bdae ._ea ,_cdda ,im ,im .Bounds (),_ab .Over ,nil );
}else {_afg .Transform (_bdae ._ea ,_cdda ,im ,im .Bounds (),_ab .Over ,&_ab .Options {DstMask :_bdae ._ccc ,DstMaskP :_d .Point {}});};};func (_gff *Context )setFillAndStrokeColor (_bde _ae .Color ){_gff ._dac =_bde ;_gff ._abbg =_fbbbg (_bde );_gff ._gge =_fbbbg (_bde );
};func _dddd (_abdac _da .Int26_6 )float64 {const _ddeee ,_aaag =6,1<<6-1;if _abdac >=0{return float64 (_abdac >>_ddeee )+float64 (_abdac &_aaag )/64;};_abdac =-_abdac ;if _abdac >=0{return -(float64 (_abdac >>_ddeee )+float64 (_abdac &_aaag )/64);};return 0;
};func (_cgd *Context )SetColor (c _ae .Color ){_cgd .setFillAndStrokeColor (c )};func (_eebe *Context )ScaleAbout (sx ,sy ,x ,y float64 ){_eebe .Translate (x ,y );_eebe .Scale (sx ,sy );_eebe .Translate (-x ,-y );};func (_bbc stops )Len ()int {return len (_bbc )};
func (_afd *Context )SetHexColor (x string ){_feg ,_bcf ,_acb ,_dfg :=_gaga (x );_afd .SetRGBA255 (_feg ,_bcf ,_acb ,_dfg );};func _fde (_dbb _d .Image ,_gcbb repeatOp )_bc .Pattern {return &surfacePattern {_fggg :_dbb ,_fagg :_gcbb };};func (_fca *Context )DrawRectangle (x ,y ,w ,h float64 ){_fca .NewSubPath ();
_fca .MoveTo (x ,y );_fca .LineTo (x +w ,y );_fca .LineTo (x +w ,y +h );_fca .LineTo (x ,y +h );_fca .ClosePath ();};func NewContextForImage (im _d .Image )*Context {return NewContextForRGBA (_dfgb (im ))};func (_bda *Context )SetLineJoin (lineJoin _bc .LineJoin ){_bda ._fbf =lineJoin };
func (_afc *Context )Matrix ()_gg .Matrix {return _afc ._efd };func (_ccae stops )Swap (i ,j int ){_ccae [i ],_ccae [j ]=_ccae [j ],_ccae [i ]};func (_bbe *Context )Shear (x ,y float64 ){_bbe ._efd .Shear (x ,y )};func (_ccb *Context )DrawArc (x ,y ,r ,angle1 ,angle2 float64 ){_ccb .DrawEllipticalArc (x ,y ,r ,r ,angle1 ,angle2 );
};func NewContext (width ,height int )*Context {return NewContextForRGBA (_d .NewRGBA (_d .Rect (0,0,width ,height )));};func _face (_abfc *_d .RGBA ,_aggd *_d .Alpha ,_ebad _bc .Pattern )*patternPainter {return &patternPainter {_abfc ,_aggd ,_ebad };};
func (_cga *Context )SetStrokeStyle (pattern _bc .Pattern ){_cga ._gge =pattern };func (_abff *Context )Rotate (angle float64 ){_abff ._efd =_abff ._efd .Rotate (angle )};type linearGradient struct{_bdb ,_dfb ,_gdf ,_bgb float64 ;_ffcff stops ;};func (_gca *Context )SetPixel (x ,y int ){_gca ._ea .Set (x ,y ,_gca ._dac )};
type stop struct{_ffce float64 ;_ddd _ae .Color ;};func (_aded *Context )DrawRoundedRectangle (x ,y ,w ,h ,r float64 ){_cgb ,_dec ,_bab ,_deee :=x ,x +r ,x +w -r ,x +w ;_fbaf ,_gfce ,_eged ,_gfa :=y ,y +r ,y +h -r ,y +h ;_aded .NewSubPath ();_aded .MoveTo (_dec ,_fbaf );
_aded .LineTo (_bab ,_fbaf );_aded .DrawArc (_bab ,_gfce ,r ,_cgac (270),_cgac (360));_aded .LineTo (_deee ,_eged );_aded .DrawArc (_bab ,_eged ,r ,_cgac (0),_cgac (90));_aded .LineTo (_dec ,_gfa );_aded .DrawArc (_dec ,_eged ,r ,_cgac (90),_cgac (180));
_aded .LineTo (_cgb ,_gfce );_aded .DrawArc (_dec ,_gfce ,r ,_cgac (180),_cgac (270));_aded .ClosePath ();};func (_adg *Context )LineWidth ()float64 {return _adg ._db };func _bbd (_edfc ,_gcag uint32 ,_gdee float64 )uint8 {return uint8 (int32 (float64 (_edfc )*(1.0-_gdee )+float64 (_gcag )*_gdee )>>8);
};func (_gda *Context )ResetClip (){_gda ._ccc =nil };func (_dfd *Context )SetDash (dashes ...float64 ){_dfd ._fgb =dashes };func _gaga (_dfeda string )(_edae ,_bdaed ,_debb ,_bdac int ){_dfeda =_a .TrimPrefix (_dfeda ,"\u0023");_bdac =255;if len (_dfeda )==3{_gce :="\u00251\u0078\u0025\u0031\u0078\u0025\u0031x";
_ad .Sscanf (_dfeda ,_gce ,&_edae ,&_bdaed ,&_debb );_edae |=_edae <<4;_bdaed |=_bdaed <<4;_debb |=_debb <<4;};if len (_dfeda )==6{_cgfa :="\u0025\u0030\u0032x\u0025\u0030\u0032\u0078\u0025\u0030\u0032\u0078";_ad .Sscanf (_dfeda ,_cgfa ,&_edae ,&_bdaed ,&_debb );
};if len (_dfeda )==8{_bff :="\u0025\u00302\u0078\u0025\u00302\u0078\u0025\u0030\u0032\u0078\u0025\u0030\u0032\u0078";_ad .Sscanf (_dfeda ,_bff ,&_edae ,&_bdaed ,&_debb ,&_bdac );};return ;};func (_beb *Context )Width ()int {return _beb ._fga };func (_ced *Context )SetRGB255 (r ,g ,b int ){_ced .SetRGBA255 (r ,g ,b ,255)};
func (_cae *Context )LineTo (x ,y float64 ){if !_cae ._gbb {_cae .MoveTo (x ,y );}else {x ,y =_cae .Transform (x ,y );_dffa :=_gg .NewPoint (x ,y );_ggec :=_gecb (_dffa );_cae ._ce .Add1 (_ggec );_cae ._eba .Add1 (_ggec );_cae ._beab =_dffa ;};};func (_ega *Context )FillPattern ()_bc .Pattern {return _ega ._abbg };
func (_egfb *Context )RotateAbout (angle ,x ,y float64 ){_egfb .Translate (x ,y );_egfb .Rotate (angle );_egfb .Translate (-x ,-y );};func (_dfab *Context )DrawString (s string ,face _gc .Face ,x ,y float64 ){_dfab .DrawStringAnchored (s ,face ,x ,y ,0,0);
};func _bgf (_bgcc _ed .Path ,_adag []float64 ,_gcf float64 )_ed .Path {return _geg (_cfe (_fefb (_bgcc ),_adag ,_gcf ));};