//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package imagerender ;import (_fg "errors";_be "fmt";_eac "github.com/unidoc/freetype/raster";_ag "github.com/unidoc/unipdf/v3/common";_c "github.com/unidoc/unipdf/v3/internal/transform";_ac "github.com/unidoc/unipdf/v3/render/internal/context";_bd "golang.org/x/image/draw";
_fab "golang.org/x/image/font";_bc "golang.org/x/image/math/f64";_fa "golang.org/x/image/math/fixed";_a "image";_ea "image/color";_bf "image/draw";_b "math";_e "sort";_f "strings";);func (_ffc *Context )MoveTo (x ,y float64 ){if _ffc ._eace {_ffc ._gggb .Add1 (_baeg (_ffc ._dad ));
};x ,y =_ffc .Transform (x ,y );_eggb :=_c .NewPoint (x ,y );_dcfd :=_baeg (_eggb );_ffc ._gbf .Start (_dcfd );_ffc ._gggb .Start (_dcfd );_ffc ._dad =_eggb ;_ffc ._cdac =_eggb ;_ffc ._eace =true ;};func _ec (_fe ,_g ,_bb ,_fc ,_cf ,_gb ,_af float64 )(_dg ,_ae float64 ){_agf :=1-_af ;
_cc :=_agf *_agf ;_fb :=2*_agf *_af ;_cd :=_af *_af ;_dg =_cc *_fe +_fb *_bb +_cd *_cf ;_ae =_cc *_g +_fb *_fc +_cd *_gb ;return ;};type radialGradient struct{_afgf ,_cgfc ,_egc circle ;_ced ,_fcdf float64 ;_ddgc float64 ;_fcc stops ;};func (_aeb *Context )ShearAbout (sx ,sy ,x ,y float64 ){_aeb .Translate (x ,y );
_aeb .Shear (sx ,sy );_aeb .Translate (-x ,-y );};func (_cce *Context )SetHexColor (x string ){_fbf ,_eeb ,_afa ,_dgd :=_agce (x );_cce .SetRGBA255 (_fbf ,_eeb ,_afa ,_dgd );};func (_aa *Context )ClipPreserve (){_gcf :=_a .NewAlpha (_a .Rect (0,0,_aa ._abc ,_aa ._fbc ));
_cdg :=_eac .NewAlphaOverPainter (_gcf );_aa .fill (_cdg );if _aa ._bcaa ==nil {_aa ._bcaa =_gcf ;}else {_bdaa :=_a .NewAlpha (_a .Rect (0,0,_aa ._abc ,_aa ._fbc ));_bd .DrawMask (_bdaa ,_bdaa .Bounds (),_gcf ,_a .Point {},_aa ._bcaa ,_a .Point {},_bd .Over );
_aa ._bcaa =_bdaa ;};};func (_bcb *Context )RotateAbout (angle ,x ,y float64 ){_bcb .Translate (x ,y );_bcb .Rotate (angle );_bcb .Translate (-x ,-y );};type linearGradient struct{_def ,_gfgc ,_dcbc ,_dfed float64 ;_cbb stops ;};func (_gcc *Context )Clear (){_eacc :=_a .NewUniform (_gcc ._feb );
_bd .Draw (_gcc ._geg ,_gcc ._geg .Bounds (),_eacc ,_a .Point {},_bd .Src );};func (_abcb *Context )setFillAndStrokeColor (_gbd _ea .Color ){_abcb ._feb =_gbd ;_abcb ._dcb =_egdc (_gbd );_abcb ._fcfe =_egdc (_gbd );};func (_bfg *surfacePattern )ColorAt (x ,y int )_ea .Color {_gfga :=_bfg ._gbef .Bounds ();
switch _bfg ._bgag {case _ddff :if y >=_gfga .Dy (){return _ea .Transparent ;};case _cgfca :if x >=_gfga .Dx (){return _ea .Transparent ;};case _gae :if x >=_gfga .Dx ()||y >=_gfga .Dy (){return _ea .Transparent ;};};x =x %_gfga .Dx ()+_gfga .Min .X ;y =y %_gfga .Dy ()+_gfga .Min .Y ;
return _bfg ._gbef .At (x ,y );};func (_bcg *Context )stroke (_fbb _eac .Painter ){_acgb :=_bcg ._gbf ;if len (_bcg ._gbcg )> 0{_acgb =_beb (_acgb ,_bcg ._gbcg ,_bcg ._gcd );}else {_acgb =_ded (_gcg (_acgb ));};_bga :=_bcg ._cec ;_bga .UseNonZeroWinding =true ;
_bga .Clear ();_beg :=(_bcg ._cgc .ScalingFactorX ()+_bcg ._cgc .ScalingFactorY ())/2;_bga .AddStroke (_acgb ,_bebf (_bcg ._eca *_beg ),_bcg .capper (),_bcg .joiner ());_bga .Rasterize (_fbb );};func (_gdg *Context )Height ()int {return _gdg ._fbc };func (_efe *Context )FillPreserve (){var _cag _eac .Painter ;
if _efe ._bcaa ==nil {if _fcge ,_dcd :=_efe ._dcb .(*solidPattern );_dcd {_fff :=_eac .NewRGBAPainter (_efe ._geg );_fff .SetColor (_fcge ._ggfb );_cag =_fff ;};};if _cag ==nil {_cag =_fgcf (_efe ._geg ,_efe ._bcaa ,_efe ._dcb );};_efe .fill (_cag );};
func (_gge *Context )Identity (){_gge ._cgc =_c .IdentityMatrix ()};type stop struct{_adc float64 ;_bee _ea .Color ;};func (_gfb *Context )ScaleAbout (sx ,sy ,x ,y float64 ){_gfb .Translate (x ,y );_gfb .Scale (sx ,sy );_gfb .Translate (-x ,-y );};func (_dfb *Context )SetColor (c _ea .Color ){_dfb .setFillAndStrokeColor (c )};
func _agce (_abedb string )(_efbf ,_caf ,_acad ,_acadf int ){_abedb =_f .TrimPrefix (_abedb ,"\u0023");_acadf =255;if len (_abedb )==3{_eef :="\u00251\u0078\u0025\u0031\u0078\u0025\u0031x";_be .Sscanf (_abedb ,_eef ,&_efbf ,&_caf ,&_acad );_efbf |=_efbf <<4;
_caf |=_caf <<4;_acad |=_acad <<4;};if len (_abedb )==6{_badc :="\u0025\u0030\u0032x\u0025\u0030\u0032\u0078\u0025\u0030\u0032\u0078";_be .Sscanf (_abedb ,_badc ,&_efbf ,&_caf ,&_acad );};if len (_abedb )==8{_fbgda :="\u0025\u00302\u0078\u0025\u00302\u0078\u0025\u0030\u0032\u0078\u0025\u0030\u0032\u0078";
_be .Sscanf (_abedb ,_fbgda ,&_efbf ,&_caf ,&_acad ,&_acadf );};return ;};func (_cfg *Context )InvertMask (){if _cfg ._bcaa ==nil {_cfg ._bcaa =_a .NewAlpha (_cfg ._geg .Bounds ());}else {for _bag ,_fbfe :=range _cfg ._bcaa .Pix {_cfg ._bcaa .Pix [_bag ]=255-_fbfe ;
};};};func (_aggb *Context )TextState ()*_ac .TextState {return &_aggb ._fbd };func (_gfg *Context )fill (_ecga _eac .Painter ){_dfbc :=_gfg ._gggb ;if _gfg ._eace {_dfbc =make (_eac .Path ,len (_gfg ._gggb ));copy (_dfbc ,_gfg ._gggb );_dfbc .Add1 (_baeg (_gfg ._dad ));
};_dbf :=_gfg ._cec ;_dbf .UseNonZeroWinding =_gfg ._agcg ==_ac .FillRuleWinding ;_dbf .Clear ();_dbf .AddPath (_dfbc );_dbf .Rasterize (_ecga );};func (_afb *Context )DrawArc (x ,y ,r ,angle1 ,angle2 float64 ){_afb .DrawEllipticalArc (x ,y ,r ,r ,angle1 ,angle2 );
};func _fgcf (_bdf *_a .RGBA ,_fdgc *_a .Alpha ,_bcf _ac .Pattern )*patternPainter {return &patternPainter {_bdf ,_fdgc ,_bcf };};func _abg (_gbaf float64 ,_fgg stops )_ea .Color {if _gbaf <=0.0||len (_fgg )==1{return _fgg [0]._bee ;};_fed :=_fgg [len (_fgg )-1];
if _gbaf >=_fed ._adc {return _fed ._bee ;};for _ggf ,_gdge :=range _fgg [1:]{if _gbaf < _gdge ._adc {_gbaf =(_gbaf -_fgg [_ggf ]._adc )/(_gdge ._adc -_fgg [_ggf ]._adc );return _fbff (_fgg [_ggf ]._bee ,_gdge ._bee ,_gbaf );};};return _fed ._bee ;};func (_egd *radialGradient )AddColorStop (offset float64 ,color _ea .Color ){_egd ._fcc =append (_egd ._fcc ,stop {_adc :offset ,_bee :color });
_e .Sort (_egd ._fcc );};const (_dbac repeatOp =iota ;_ddff ;_cgfca ;_gae ;);func (_ede *Context )SetDash (dashes ...float64 ){_ede ._gbcg =dashes };func (_deb *Context )QuadraticTo (x1 ,y1 ,x2 ,y2 float64 ){if !_deb ._eace {_deb .MoveTo (x1 ,y1 );};x1 ,y1 =_deb .Transform (x1 ,y1 );
x2 ,y2 =_deb .Transform (x2 ,y2 );_dga :=_c .NewPoint (x1 ,y1 );_edg :=_c .NewPoint (x2 ,y2 );_ceg :=_baeg (_dga );_baa :=_baeg (_edg );_deb ._gbf .Add2 (_ceg ,_baa );_deb ._gggb .Add2 (_ceg ,_baa );_deb ._cdac =_edg ;};func (_ddbc *Context )Translate (x ,y float64 ){_ddbc ._cgc =_ddbc ._cgc .Translate (x ,y )};
func (_ggc *Context )DrawRoundedRectangle (x ,y ,w ,h ,r float64 ){_ddc ,_cbd ,_acc ,_eacd :=x ,x +r ,x +w -r ,x +w ;_abcf ,_gfgd ,_gdbd ,_gedc :=y ,y +r ,y +h -r ,y +h ;_ggc .NewSubPath ();_ggc .MoveTo (_cbd ,_abcf );_ggc .LineTo (_acc ,_abcf );_ggc .DrawArc (_acc ,_gfgd ,r ,_effe (270),_effe (360));
_ggc .LineTo (_eacd ,_gdbd );_ggc .DrawArc (_acc ,_gdbd ,r ,_effe (0),_effe (90));_ggc .LineTo (_cbd ,_gedc );_ggc .DrawArc (_cbd ,_gdbd ,r ,_effe (90),_effe (180));_ggc .LineTo (_ddc ,_gfgd );_ggc .DrawArc (_cbd ,_gfgd ,r ,_effe (180),_effe (270));_ggc .ClosePath ();
};func (_ebc *Context )StrokePreserve (){var _agcf _eac .Painter ;if _ebc ._bcaa ==nil {if _efa ,_dfgf :=_ebc ._fcfe .(*solidPattern );_dfgf {_cfc :=_eac .NewRGBAPainter (_ebc ._geg );_cfc .SetColor (_efa ._ggfb );_agcf =_cfc ;};};if _agcf ==nil {_agcf =_fgcf (_ebc ._geg ,_ebc ._bcaa ,_ebc ._fcfe );
};_ebc .stroke (_agcf );};func (_fbac *Context )AsMask ()*_a .Alpha {_abd :=_a .NewAlpha (_fbac ._geg .Bounds ());_bd .Draw (_abd ,_fbac ._geg .Bounds (),_fbac ._geg ,_a .Point {},_bd .Src );return _abd ;};func (_cfda *Context )Clip (){_cfda .ClipPreserve ();
_cfda .ClearPath ()};func (_gcdb *Context )Stroke (){_gcdb .StrokePreserve ();_gcdb .ClearPath ()};type circle struct{_cgf ,_dce ,_faa float64 };func (_acbb *Context )SetMask (mask *_a .Alpha )error {if mask .Bounds ().Size ()!=_acbb ._geg .Bounds ().Size (){return _fg .New ("\u006d\u0061\u0073\u006b\u0020\u0073i\u007a\u0065\u0020\u006d\u0075\u0073\u0074\u0020\u006d\u0061\u0074\u0063\u0068 \u0063\u006f\u006e\u0074\u0065\u0078\u0074 \u0073\u0069\u007a\u0065");
};_acbb ._bcaa =mask ;return nil ;};func NewContextForImage (im _a .Image )*Context {return NewContextForRGBA (_ddbba (im ))};func (_fec *Context )SetPixel (x ,y int ){_fec ._geg .Set (x ,y ,_fec ._feb )};func (_dgb *Context )Shear (x ,y float64 ){_dgb ._cgc .Shear (x ,y )};
func (_fgd *Context )Pop (){_dfce :=*_fgd ;_cbe :=_fgd ._eg ;_ddbe :=_cbe [len (_cbe )-1];*_fgd =*_ddbe ;_fgd ._gbf =_dfce ._gbf ;_fgd ._gggb =_dfce ._gggb ;_fgd ._dad =_dfce ._dad ;_fgd ._cdac =_dfce ._cdac ;_fgd ._eace =_dfce ._eace ;};func _adg (_cbed [][]_c .Point ,_ebeb []float64 ,_dbfd float64 )[][]_c .Point {var _bgfb [][]_c .Point ;
if len (_ebeb )==0{return _cbed ;};if len (_ebeb )==1{_ebeb =append (_ebeb ,_ebeb [0]);};for _ ,_bfa :=range _cbed {if len (_bfa )< 2{continue ;};_afde :=_bfa [0];_dbag :=1;_ecage :=0;_beea :=0.0;if _dbfd !=0{var _bcag float64 ;for _ ,_cgb :=range _ebeb {_bcag +=_cgb ;
};_dbfd =_b .Mod (_dbfd ,_bcag );if _dbfd < 0{_dbfd +=_bcag ;};for _efgb ,_adaed :=range _ebeb {_dbfd -=_adaed ;if _dbfd < 0{_ecage =_efgb ;_beea =_adaed +_dbfd ;break ;};};};var _cagg []_c .Point ;_cagg =append (_cagg ,_afde );for _dbag < len (_bfa ){_dadg :=_ebeb [_ecage ];
_abe :=_bfa [_dbag ];_gca :=_afde .Distance (_abe );_fbgd :=_dadg -_beea ;if _gca > _fbgd {_fcfaf :=_fbgd /_gca ;_gcga :=_afde .Interpolate (_abe ,_fcfaf );_cagg =append (_cagg ,_gcga );if _ecage %2==0&&len (_cagg )> 1{_bgfb =append (_bgfb ,_cagg );};_cagg =nil ;
_cagg =append (_cagg ,_gcga );_beea =0;_afde =_gcga ;_ecage =(_ecage +1)%len (_ebeb );}else {_cagg =append (_cagg ,_abe );_afde =_abe ;_beea +=_gca ;_dbag ++;};};if _ecage %2==0&&len (_cagg )> 1{_bgfb =append (_bgfb ,_cagg );};};return _bgfb ;};func (_eda *Context )Image ()_a .Image {return _eda ._geg };
type Context struct{_abc int ;_fbc int ;_cec *_eac .Rasterizer ;_geg *_a .RGBA ;_bcaa *_a .Alpha ;_feb _ea .Color ;_dcb _ac .Pattern ;_fcfe _ac .Pattern ;_gbf _eac .Path ;_gggb _eac .Path ;_dad _c .Point ;_cdac _c .Point ;_eace bool ;_gbcg []float64 ;_gcd float64 ;
_eca float64 ;_dda _ac .LineCap ;_dde _ac .LineJoin ;_agcg _ac .FillRule ;_cgc _c .Matrix ;_fbd _ac .TextState ;_eg []*Context ;};func (_ecg *Context )FillPattern ()_ac .Pattern {return _ecg ._dcb };func (_fgb *Context )ClosePath (){if _fgb ._eace {_cegd :=_baeg (_fgb ._dad );
_fgb ._gbf .Add1 (_cegd );_fgb ._gggb .Add1 (_cegd );_fgb ._cdac =_fgb ._dad ;};};func (_cfa *Context )DrawEllipse (x ,y ,rx ,ry float64 ){_cfa .NewSubPath ();_cfa .DrawEllipticalArc (x ,y ,rx ,ry ,0,2*_b .Pi );_cfa .ClosePath ();};func (_dfbb *Context )Matrix ()_c .Matrix {return _dfbb ._cgc };
func (_ega *Context )SetLineCap (lineCap _ac .LineCap ){_ega ._dda =lineCap };func (_ebe *Context )ClearPath (){_ebe ._gbf .Clear ();_ebe ._gggb .Clear ();_ebe ._eace =false };func _ged (_bdab ,_ed ,_bab ,_ggg ,_dc ,_daf ,_dgc ,_ddb float64 )[]_c .Point {_bdd :=(_b .Hypot (_bab -_bdab ,_ggg -_ed )+_b .Hypot (_dc -_bab ,_daf -_ggg )+_b .Hypot (_dgc -_dc ,_ddb -_daf ));
_dfg :=int (_bdd +0.5);if _dfg < 4{_dfg =4;};_fcd :=float64 (_dfg )-1;_ab :=make ([]_c .Point ,_dfg );for _cfd :=0;_cfd < _dfg ;_cfd ++{_gd :=float64 (_cfd )/_fcd ;_acg ,_ccg :=_gcb (_bdab ,_ed ,_bab ,_ggg ,_dc ,_daf ,_dgc ,_ddb ,_gd );_ab [_cfd ]=_c .NewPoint (_acg ,_ccg );
};return _ab ;};func (_ddec *Context )SetFillStyle (pattern _ac .Pattern ){if _aef ,_fag :=pattern .(*solidPattern );_fag {_ddec ._feb =_aef ._ggfb ;};_ddec ._dcb =pattern ;};func (_bfe *Context )Transform (x ,y float64 )(_bad ,_eacf float64 ){return _bfe ._cgc .Transform (x ,y )};
func NewLinearGradient (x0 ,y0 ,x1 ,y1 float64 )_ac .Gradient {_ece :=&linearGradient {_def :x0 ,_gfgc :y0 ,_dcbc :x1 ,_dfed :y1 };return _ece ;};func NewContext (width ,height int )*Context {return NewContextForRGBA (_a .NewRGBA (_a .Rect (0,0,width ,height )));
};func (_agca *Context )DrawEllipticalArc (x ,y ,rx ,ry ,angle1 ,angle2 float64 ){const _dac =16;for _fdf :=0;_fdf < _dac ;_fdf ++{_fea :=float64 (_fdf +0)/_dac ;_ecag :=float64 (_fdf +1)/_dac ;_dge :=angle1 +(angle2 -angle1 )*_fea ;_cde :=angle1 +(angle2 -angle1 )*_ecag ;
_cdd :=x +rx *_b .Cos (_dge );_abcc :=y +ry *_b .Sin (_dge );_cgg :=x +rx *_b .Cos ((_dge +_cde )/2);_fdc :=y +ry *_b .Sin ((_dge +_cde )/2);_dfdb :=x +rx *_b .Cos (_cde );_babc :=y +ry *_b .Sin (_cde );_ccd :=2*_cgg -_cdd /2-_dfdb /2;_gag :=2*_fdc -_abcc /2-_babc /2;
if _fdf ==0{if _agca ._eace {_agca .LineTo (_cdd ,_abcc );}else {_agca .MoveTo (_cdd ,_abcc );};};_agca .QuadraticTo (_ccd ,_gag ,_dfdb ,_babc );};};func _gcb (_bg ,_cea ,_df ,_de ,_gbc ,_cda ,_efb ,_ff ,_ge float64 )(_cg ,_bbd float64 ){_da :=1-_ge ;_bca :=_da *_da *_da ;
_cb :=3*_da *_da *_ge ;_ba :=3*_da *_ge *_ge ;_gg :=_ge *_ge *_ge ;_cg =_bca *_bg +_cb *_df +_ba *_gbc +_gg *_efb ;_bbd =_bca *_cea +_cb *_de +_ba *_cda +_gg *_ff ;return ;};func _ded (_cbc [][]_c .Point )_eac .Path {var _dbef _eac .Path ;for _ ,_fce :=range _cbc {var _cfge _fa .Point26_6 ;
for _fegd ,_efeb :=range _fce {_ecd :=_baeg (_efeb );if _fegd ==0{_dbef .Start (_ecd );}else {_bgaf :=_ecd .X -_cfge .X ;_abed :=_ecd .Y -_cfge .Y ;if _bgaf < 0{_bgaf =-_bgaf ;};if _abed < 0{_abed =-_abed ;};if _bgaf +_abed > 8{_dbef .Add1 (_ecd );};};
_cfge =_ecd ;};};return _dbef ;};func (_eaa *Context )SetLineJoin (lineJoin _ac .LineJoin ){_eaa ._dde =lineJoin };func (_egb *Context )DrawString (s string ,face _fab .Face ,x ,y float64 ){_egb .DrawStringAnchored (s ,face ,x ,y ,0,0);};func _baeg (_bgab _c .Point )_fa .Point26_6 {return _fa .Point26_6 {X :_bebf (_bgab .X ),Y :_bebf (_bgab .Y )}};
func (_feaa stops )Less (i ,j int )bool {return _feaa [i ]._adc < _feaa [j ]._adc };func (_cga *Context )StrokePattern ()_ac .Pattern {return _cga ._fcfe };func (_cdgg *Context )drawString (_gbdd string ,_aab _fab .Face ,_dee ,_dadf float64 ){_bdad :=&_fab .Drawer {Src :_a .NewUniform (_cdgg ._feb ),Face :_aab ,Dot :_baeg (_c .NewPoint (_dee ,_dadf ))};
_aged :=rune (-1);for _ ,_bbaf :=range _gbdd {if _aged >=0{_bdad .Dot .X +=_bdad .Face .Kern (_aged ,_bbaf );};_fgf ,_fbe ,_dea ,_dgec ,_bgb :=_bdad .Face .Glyph (_bdad .Dot ,_bbaf );if !_bgb {continue ;};_acag :=_fgf .Sub (_fgf .Min );_gebc :=_a .NewRGBA (_acag );
_bd .DrawMask (_gebc ,_acag ,_bdad .Src ,_a .Point {},_fbe ,_dea ,_bd .Over );var _acf *_bd .Options ;if _cdgg ._bcaa !=nil {_acf =&_bd .Options {DstMask :_cdgg ._bcaa ,DstMaskP :_a .Point {}};};_abfd :=_cdgg ._cgc .Clone ().Translate (float64 (_fgf .Min .X ),float64 (_fgf .Min .Y ));
_fac :=_bc .Aff3 {_abfd [0],_abfd [3],_abfd [6],_abfd [1],_abfd [4],_abfd [7]};_bd .BiLinear .Transform (_cdgg ._geg ,_fac ,_gebc ,_acag ,_bd .Over ,_acf );_bdad .Dot .X +=_dgec ;_aged =_bbaf ;};};func (_ebee *Context )NewSubPath (){if _ebee ._eace {_ebee ._gggb .Add1 (_baeg (_ebee ._dad ));
};_ebee ._eace =false ;};func (_gbff *Context )Push (){_cff :=*_gbff ;_gbff ._eg =append (_gbff ._eg ,&_cff )};func (_dcf *Context )LineWidth ()float64 {return _dcf ._eca };func NewRadialGradient (x0 ,y0 ,r0 ,x1 ,y1 ,r1 float64 )_ac .Gradient {_adcg :=circle {x0 ,y0 ,r0 };
_gff :=circle {x1 ,y1 ,r1 };_eggbd :=circle {x1 -x0 ,y1 -y0 ,r1 -r0 };_ffe :=_bcd (_eggbd ._cgf ,_eggbd ._dce ,-_eggbd ._faa ,_eggbd ._cgf ,_eggbd ._dce ,_eggbd ._faa );var _cgfb float64 ;if _ffe !=0{_cgfb =1.0/_ffe ;};_cca :=-_adcg ._faa ;_fda :=&radialGradient {_afgf :_adcg ,_cgfc :_gff ,_egc :_eggbd ,_ced :_ffe ,_fcdf :_cgfb ,_ddgc :_cca };
return _fda ;};func (_fffc *Context )ResetClip (){_fffc ._bcaa =nil };type patternPainter struct{_bec *_a .RGBA ;_cfcb *_a .Alpha ;_fcga _ac .Pattern ;};func (_dag *Context )capper ()_eac .Capper {switch _dag ._dda {case _ac .LineCapButt :return _eac .ButtCapper ;
case _ac .LineCapRound :return _eac .RoundCapper ;case _ac .LineCapSquare :return _eac .SquareCapper ;};return nil ;};func _ageg (_baba ,_dacb uint32 ,_bgfe float64 )uint8 {return uint8 (int32 (float64 (_baba )*(1.0-_bgfe )+float64 (_dacb )*_bgfe )>>8);
};func (_fcb *Context )DrawImageAnchored (im _a .Image ,x ,y int ,ax ,ay float64 ){_aec :=im .Bounds ().Size ();x -=int (ax *float64 (_aec .X ));y -=int (ay *float64 (_aec .Y ));_aed :=_bd .BiLinear ;_geb :=_fcb ._cgc .Clone ().Translate (float64 (x ),float64 (y ));
_gada :=_bc .Aff3 {_geb [0],_geb [3],_geb [6],_geb [1],_geb [4],_geb [7]};if _fcb ._bcaa ==nil {_aed .Transform (_fcb ._geg ,_gada ,im ,im .Bounds (),_bd .Over ,nil );}else {_aed .Transform (_fcb ._geg ,_gada ,im ,im .Bounds (),_bd .Over ,&_bd .Options {DstMask :_fcb ._bcaa ,DstMaskP :_a .Point {}});
};};func (_gac *Context )Rotate (angle float64 ){_gac ._cgc =_gac ._cgc .Rotate (angle )};func (_ebag *solidPattern )ColorAt (x ,y int )_ea .Color {return _ebag ._ggfb };func (_ccf *Context )SetStrokeRGBA (r ,g ,b ,a float64 ){_fba :=_ea .NRGBA {uint8 (r *255),uint8 (g *255),uint8 (b *255),uint8 (a *255)};
_ccf ._fcfe =_egdc (_fba );};var (_fcf =_egdc (_ea .White );_eb =_egdc (_ea .Black ););func (_eba *Context )DrawLine (x1 ,y1 ,x2 ,y2 float64 ){_eba .MoveTo (x1 ,y1 );_eba .LineTo (x2 ,y2 )};type surfacePattern struct{_gbef _a .Image ;_bgag repeatOp ;};
func (_bfc *Context )joiner ()_eac .Joiner {switch _bfc ._dde {case _ac .LineJoinBevel :return _eac .BevelJoiner ;case _ac .LineJoinRound :return _eac .RoundJoiner ;};return nil ;};func _ga (_gad ,_ca ,_gc ,_bdc ,_ecb ,_bfb float64 )[]_c .Point {_age :=(_b .Hypot (_gc -_gad ,_bdc -_ca )+_b .Hypot (_ecb -_gc ,_bfb -_bdc ));
_agc :=int (_age +0.5);if _agc < 4{_agc =4;};_ef :=float64 (_agc )-1;_fd :=make ([]_c .Point ,_agc );for _fcg :=0;_fcg < _agc ;_fcg ++{_ce :=float64 (_fcg )/_ef ;_bda ,_dd :=_ec (_gad ,_ca ,_gc ,_bdc ,_ecb ,_bfb ,_ce );_fd [_fcg ]=_c .NewPoint (_bda ,_dd );
};return _fd ;};func (_bae *Context )SetFillRGBA (r ,g ,b ,a float64 ){_ ,_ ,_ ,_gcbe :=_bae ._feb .RGBA ();if _gcbe > 0&&_gcbe !=65535&&a ==1{a =float64 (_gcbe )/65535;};_ebd :=_ea .NRGBA {uint8 (r *255),uint8 (g *255),uint8 (b *255),uint8 (a *255)};_bae ._feb =_ebd ;
_bae ._dcb =_egdc (_ebd );};func (_ddg stops )Swap (i ,j int ){_ddg [i ],_ddg [j ]=_ddg [j ],_ddg [i ]};func _edb (_bdae _a .Image ,_bgc repeatOp )_ac .Pattern {return &surfacePattern {_gbef :_bdae ,_bgag :_bgc };};type stops []stop ;func (_ccdd *Context )SetMatrix (m _c .Matrix ){_ccdd ._cgc =m };
func (_efg *Context )SetRGBA255 (r ,g ,b ,a int ){_efg ._feb =_ea .NRGBA {uint8 (r ),uint8 (g ),uint8 (b ),uint8 (a )};_efg .setFillAndStrokeColor (_efg ._feb );};func (_dfe *Context )CubicTo (x1 ,y1 ,x2 ,y2 ,x3 ,y3 float64 ){if !_dfe ._eace {_dfe .MoveTo (x1 ,y1 );
};_cbg ,_dgdd :=_dfe ._cdac .X ,_dfe ._cdac .Y ;x1 ,y1 =_dfe .Transform (x1 ,y1 );x2 ,y2 =_dfe .Transform (x2 ,y2 );x3 ,y3 =_dfe .Transform (x3 ,y3 );_gf :=_ged (_cbg ,_dgdd ,x1 ,y1 ,x2 ,y2 ,x3 ,y3 );_aca :=_baeg (_dfe ._cdac );for _ ,_fad :=range _gf [1:]{_fagb :=_baeg (_fad );
if _fagb ==_aca {continue ;};_aca =_fagb ;_dfe ._gbf .Add1 (_fagb );_dfe ._gggb .Add1 (_fagb );_dfe ._cdac =_fad ;};};func (_ccgf *Context )SetRGB (r ,g ,b float64 ){_ccgf .SetRGBA (r ,g ,b ,1)};func (_aaf *Context )Scale (x ,y float64 ){_aaf ._cgc =_aaf ._cgc .Scale (x ,y )};
func (_ee *Context )SetLineWidth (lineWidth float64 ){_ee ._eca =lineWidth };func (_fae *Context )SetDashOffset (offset float64 ){_fae ._gcd =offset };func _ddbba (_dgee _a .Image )*_a .RGBA {_afc :=_dgee .Bounds ();_ebf :=_a .NewRGBA (_afc );_bf .Draw (_ebf ,_afc ,_dgee ,_afc .Min ,_bf .Src );
return _ebf ;};func (_ada *Context )MeasureString (s string ,face _fab .Face )(_fga ,_abcfe float64 ){_cdb :=&_fab .Drawer {Face :face };_bbde :=_cdb .MeasureString (s );return float64 (_bbde >>6),_ada ._fbd .Tf .Size ;};func NewContextForRGBA (im *_a .RGBA )*Context {_cad :=im .Bounds ().Size ().X ;
_cbf :=im .Bounds ().Size ().Y ;return &Context {_abc :_cad ,_fbc :_cbf ,_cec :_eac .NewRasterizer (_cad ,_cbf ),_geg :im ,_feb :_ea .Transparent ,_dcb :_fcf ,_fcfe :_eb ,_eca :1,_agcg :_ac .FillRuleWinding ,_cgc :_c .IdentityMatrix (),_fbd :_ac .NewTextState ()};
};func (_fbg *radialGradient )ColorAt (x ,y int )_ea .Color {if len (_fbg ._fcc )==0{return _ea .Transparent ;};_cddg ,_fef :=float64 (x )+0.5-_fbg ._afgf ._cgf ,float64 (y )+0.5-_fbg ._afgf ._dce ;_baab :=_bcd (_cddg ,_fef ,_fbg ._afgf ._faa ,_fbg ._egc ._cgf ,_fbg ._egc ._dce ,_fbg ._egc ._faa );
_aefg :=_bcd (_cddg ,_fef ,-_fbg ._afgf ._faa ,_cddg ,_fef ,_fbg ._afgf ._faa );if _fbg ._ced ==0{if _baab ==0{return _ea .Transparent ;};_bbafb :=0.5*_aefg /_baab ;if _bbafb *_fbg ._egc ._faa >=_fbg ._ddgc {return _abg (_bbafb ,_fbg ._fcc );};return _ea .Transparent ;
};_dfa :=_bcd (_baab ,_fbg ._ced ,0,_baab ,-_aefg ,0);if _dfa >=0{_bgf :=_b .Sqrt (_dfa );_fdgb :=(_baab +_bgf )*_fbg ._fcdf ;_gbce :=(_baab -_bgf )*_fbg ._fcdf ;if _fdgb *_fbg ._egc ._faa >=_fbg ._ddgc {return _abg (_fdgb ,_fbg ._fcc );}else if _gbce *_fbg ._egc ._faa >=_fbg ._ddgc {return _abg (_gbce ,_fbg ._fcc );
};};return _ea .Transparent ;};func (_gba *Context )SetStrokeStyle (pattern _ac .Pattern ){_gba ._fcfe =pattern };type repeatOp int ;func (_bba *Context )Width ()int {return _bba ._abc };func (_gbcgg *Context )DrawRectangle (x ,y ,w ,h float64 ){_gbcgg .NewSubPath ();
_gbcgg .MoveTo (x ,y );_gbcgg .LineTo (x +w ,y );_gbcgg .LineTo (x +w ,y +h );_gbcgg .LineTo (x ,y +h );_gbcgg .ClosePath ();};func _bebf (_bce float64 )_fa .Int26_6 {return _fa .Int26_6 (_bce *64)};func (_bbe *linearGradient )ColorAt (x ,y int )_ea .Color {if len (_bbe ._cbb )==0{return _ea .Transparent ;
};_bfed ,_babe :=float64 (x ),float64 (y );_afd ,_ddac ,_cbgb ,_dbb :=_bbe ._def ,_bbe ._gfgc ,_bbe ._dcbc ,_bbe ._dfed ;_eea ,_gaca :=_cbgb -_afd ,_dbb -_ddac ;if _gaca ==0&&_eea !=0{return _abg ((_bfed -_afd )/_eea ,_bbe ._cbb );};if _eea ==0&&_gaca !=0{return _abg ((_babe -_ddac )/_gaca ,_bbe ._cbb );
};_bcbb :=_eea *(_bfed -_afd )+_gaca *(_babe -_ddac );if _bcbb < 0{return _bbe ._cbb [0]._bee ;};_bdg :=_b .Hypot (_eea ,_gaca );_bgd :=((_bfed -_afd )*-_gaca +(_babe -_ddac )*_eea )/(_bdg *_bdg );_aad ,_beec :=_afd +_bgd *-_gaca ,_ddac +_bgd *_eea ;_baf :=_b .Hypot (_bfed -_aad ,_babe -_beec )/_bdg ;
return _abg (_baf ,_bbe ._cbb );};func _egdc (_egec _ea .Color )_ac .Pattern {return &solidPattern {_ggfb :_egec }};func _beb (_gebe _eac .Path ,_ccae []float64 ,_afbg float64 )_eac .Path {return _ded (_adg (_gcg (_gebe ),_ccae ,_afbg ));};func (_gbe *Context )LineTo (x ,y float64 ){if !_gbe ._eace {_gbe .MoveTo (x ,y );
}else {x ,y =_gbe .Transform (x ,y );_fgc :=_c .NewPoint (x ,y );_gda :=_baeg (_fgc );_gbe ._gbf .Add1 (_gda );_gbe ._gggb .Add1 (_gda );_gbe ._cdac =_fgc ;};};func (_fde *Context )SetRGB255 (r ,g ,b int ){_fde .SetRGBA255 (r ,g ,b ,255)};func _gcg (_gaf _eac .Path )[][]_c .Point {var _afdc [][]_c .Point ;
var _adae []_c .Point ;var _edf ,_effc float64 ;for _afe :=0;_afe < len (_gaf );{switch _gaf [_afe ]{case 0:if len (_adae )> 0{_afdc =append (_afdc ,_adae );_adae =nil ;};_adf :=_gdf (_gaf [_afe +1]);_gfbc :=_gdf (_gaf [_afe +2]);_adae =append (_adae ,_c .NewPoint (_adf ,_gfbc ));
_edf ,_effc =_adf ,_gfbc ;_afe +=4;case 1:_fdec :=_gdf (_gaf [_afe +1]);_baea :=_gdf (_gaf [_afe +2]);_adae =append (_adae ,_c .NewPoint (_fdec ,_baea ));_edf ,_effc =_fdec ,_baea ;_afe +=4;case 2:_ebb :=_gdf (_gaf [_afe +1]);_ecc :=_gdf (_gaf [_afe +2]);
_gdgb :=_gdf (_gaf [_afe +3]);_ccc :=_gdf (_gaf [_afe +4]);_fggf :=_ga (_edf ,_effc ,_ebb ,_ecc ,_gdgb ,_ccc );_adae =append (_adae ,_fggf ...);_edf ,_effc =_gdgb ,_ccc ;_afe +=6;case 3:_aag :=_gdf (_gaf [_afe +1]);_efbg :=_gdf (_gaf [_afe +2]);_bcc :=_gdf (_gaf [_afe +3]);
_fegb :=_gdf (_gaf [_afe +4]);_ddef :=_gdf (_gaf [_afe +5]);_adb :=_gdf (_gaf [_afe +6]);_caga :=_ged (_edf ,_effc ,_aag ,_efbg ,_bcc ,_fegb ,_ddef ,_adb );_adae =append (_adae ,_caga ...);_edf ,_effc =_ddef ,_adb ;_afe +=8;default:_ag .Log .Debug ("\u0057\u0041\u0052\u004e: \u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0070\u0061\u0074\u0068\u003a\u0020%\u0076",_gaf );
return _afdc ;};};if len (_adae )> 0{_afdc =append (_afdc ,_adae );};return _afdc ;};func _gdf (_dafb _fa .Int26_6 )float64 {const _gggc ,_faf =6,1<<6-1;if _dafb >=0{return float64 (_dafb >>_gggc )+float64 (_dafb &_faf )/64;};_dafb =-_dafb ;if _dafb >=0{return -(float64 (_dafb >>_gggc )+float64 (_dafb &_faf )/64);
};return 0;};func _bcd (_ecae ,_ddd ,_dbfg ,_eab ,_dca ,_dfbe float64 )float64 {return _ecae *_eab +_ddd *_dca +_dbfg *_dfbe ;};func (_aae *Context )drawRegularPolygon (_fagc int ,_ddae ,_dgf ,_fage ,_dfbcc float64 ){_bef :=2*_b .Pi /float64 (_fagc );_dfbcc -=_b .Pi /2;
if _fagc %2==0{_dfbcc +=_bef /2;};_aae .NewSubPath ();for _ddf :=0;_ddf < _fagc ;_ddf ++{_dbe :=_dfbcc +_bef *float64 (_ddf );_aae .LineTo (_ddae +_fage *_b .Cos (_dbe ),_dgf +_fage *_b .Sin (_dbe ));};_aae .ClosePath ();};func (_egg *Context )SetFillRule (fillRule _ac .FillRule ){_egg ._agcg =fillRule };
func (_dfc *Context )DrawImage (im _a .Image ,x ,y int ){_dfc .DrawImageAnchored (im ,x ,y ,0,0)};func (_ccfe *Context )DrawPoint (x ,y ,r float64 ){_ccfe .Push ();_agff ,_ege :=_ccfe .Transform (x ,y );_ccfe .Identity ();_ccfe .DrawCircle (_agff ,_ege ,r );
_ccfe .Pop ();};func _fbff (_bdac ,_ggfa _ea .Color ,_eff float64 )_ea .Color {_dcaa ,_dgae ,_bac ,_fdd :=_bdac .RGBA ();_fffa ,_cddc ,_afdd ,_cbgg :=_ggfa .RGBA ();return _ea .RGBA {_ageg (_dcaa ,_fffa ,_eff ),_ageg (_dgae ,_cddc ,_eff ),_ageg (_bac ,_afdd ,_eff ),_ageg (_fdd ,_cbgg ,_eff )};
};func (_gbb *linearGradient )AddColorStop (offset float64 ,color _ea .Color ){_gbb ._cbb =append (_gbb ._cbb ,stop {_adc :offset ,_bee :color });_e .Sort (_gbb ._cbb );};func (_agd *Context )Fill (){_agd .FillPreserve ();_agd .ClearPath ()};func (_ebg *patternPainter )Paint (ss []_eac .Span ,done bool ){_abb :=_ebg ._bec .Bounds ();
for _ ,_fcdd :=range ss {if _fcdd .Y < _abb .Min .Y {continue ;};if _fcdd .Y >=_abb .Max .Y {return ;};if _fcdd .X0 < _abb .Min .X {_fcdd .X0 =_abb .Min .X ;};if _fcdd .X1 > _abb .Max .X {_fcdd .X1 =_abb .Max .X ;};if _fcdd .X0 >=_fcdd .X1 {continue ;};
const _abgb =1<<16-1;_cage :=_fcdd .Y -_ebg ._bec .Rect .Min .Y ;_becd :=_fcdd .X0 -_ebg ._bec .Rect .Min .X ;_gdag :=(_fcdd .Y -_ebg ._bec .Rect .Min .Y )*_ebg ._bec .Stride +(_fcdd .X0 -_ebg ._bec .Rect .Min .X )*4;_cdace :=_gdag +(_fcdd .X1 -_fcdd .X0 )*4;
for _adcgf ,_cdee :=_gdag ,_becd ;_adcgf < _cdace ;_adcgf ,_cdee =_adcgf +4,_cdee +1{_dab :=_fcdd .Alpha ;if _ebg ._cfcb !=nil {_dab =_dab *uint32 (_ebg ._cfcb .AlphaAt (_cdee ,_cage ).A )/255;if _dab ==0{continue ;};};_eed :=_ebg ._fcga .ColorAt (_cdee ,_cage );
_efff ,_gedb ,_gcbg ,_fdga :=_eed .RGBA ();_fbfd :=uint32 (_ebg ._bec .Pix [_adcgf +0]);_dbc :=uint32 (_ebg ._bec .Pix [_adcgf +1]);_ddbb :=uint32 (_ebg ._bec .Pix [_adcgf +2]);_bcdg :=uint32 (_ebg ._bec .Pix [_adcgf +3]);_dcbcb :=(_abgb -(_fdga *_dab /_abgb ))*0x101;
_ebg ._bec .Pix [_adcgf +0]=uint8 ((_fbfd *_dcbcb +_efff *_dab )/_abgb >>8);_ebg ._bec .Pix [_adcgf +1]=uint8 ((_dbc *_dcbcb +_gedb *_dab )/_abgb >>8);_ebg ._bec .Pix [_adcgf +2]=uint8 ((_ddbb *_dcbcb +_gcbg *_dab )/_abgb >>8);_ebg ._bec .Pix [_adcgf +3]=uint8 ((_bcdg *_dcbcb +_fdga *_dab )/_abgb >>8);
};};};func (_acb *Context )SetRGBA (r ,g ,b ,a float64 ){_ ,_ ,_ ,_fcfa :=_acb ._feb .RGBA ();if _fcfa > 0&&_fcfa !=65535&&a ==1{a =float64 (_fcfa )/65535;};_acb ._feb =_ea .NRGBA {uint8 (r *255),uint8 (g *255),uint8 (b *255),uint8 (a *255)};_acb .setFillAndStrokeColor (_acb ._feb );
};func (_afge *Context )DrawCircle (x ,y ,r float64 ){_afge .NewSubPath ();_afge .DrawEllipticalArc (x ,y ,r ,r ,0,2*_b .Pi );_afge .ClosePath ();};func (_fdg *Context )DrawStringAnchored (s string ,face _fab .Face ,x ,y ,ax ,ay float64 ){_ad ,_fbbf :=_fdg .MeasureString (s ,face );
_fdg .drawString (s ,face ,x -ax *_ad ,y +ay *_fbbf );};func (_feg stops )Len ()int {return len (_feg )};func _effe (_bbg float64 )float64 {return _bbg *_b .Pi /180};type solidPattern struct{_ggfb _ea .Color };