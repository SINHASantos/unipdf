//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package context ;import (_g "errors";_ea "github.com/unidoc/freetype/truetype";_aa "github.com/unidoc/unipdf/v4/core";_ec "github.com/unidoc/unipdf/v4/internal/cmap";_d "github.com/unidoc/unipdf/v4/internal/textencoding";_eb "github.com/unidoc/unipdf/v4/internal/transform";
_efe "github.com/unidoc/unipdf/v4/model";_gc "golang.org/x/image/font";_gf "image";_b "image/color";_ef "strconv";_a "strings";);func (_ce *TextFont )charcodeToRunesSimple (_ff _d .CharCode )(_d .CharCode ,[]rune ){_fde :=[]_d .CharCode {_ff };if _ce .Font .IsSimple ()&&_ce ._dd !=nil {if _edg :=_ce ._dd .Index (rune (_ff ));
_edg > 0{return _ff ,[]rune {rune (_ff )};};};if _ce ._dd !=nil &&!_ce ._dd .HasCmap ()&&_a .Contains (_ce .Font .Encoder ().String (),"\u0049d\u0065\u006e\u0074\u0069\u0074\u0079-"){if _bef :=_ce ._dd .Index (rune (_ff ));_bef > 0{return _ff ,[]rune {rune (_ff )};
};};return _ff ,_ce .Font .CharcodesToUnicode (_fde );};const (LineJoinRound LineJoin =iota ;LineJoinBevel ;);func (_ebgb *TextState )ProcTj (data []byte ,ctx Context ){_cg :=_ebgb .Tf .Size ;_gecd :=_ebgb .Th /100.0;_eac :=_ebgb .GlobalScale ;_dga :=_eb .NewMatrix (_cg *_gecd ,0,0,_cg ,0,_ebgb .Ts );
_edbd :=ctx .Matrix ();_efcc :=_edbd .Clone ().Mult (_ebgb .Tm .Clone ().Mult (_dga )).ScalingFactorY ();_gfd :=_ebgb .Tf .NewFace (_efcc );_bbf :=_ebgb .Tf .BytesToCharcodes (data );for _ ,_facea :=range _bbf {_edde ,_ebgg :=_ebgb .Tf .CharcodeToRunes (_facea );
_eddf :=string (_ebgg );if _eddf =="\u0000"{continue ;};_cba :=_edbd .Clone ().Mult (_ebgb .Tm .Clone ().Mult (_dga ));_cea :=_cba .ScalingFactorY ();_cba =_cba .Scale (1/_cea ,-1/_cea );if _ebgb .Tr !=TextRenderingModeInvisible {ctx .SetMatrix (_cba );
ctx .DrawString (_eddf ,_gfd ,0,0);ctx .SetMatrix (_edbd );};_dfa :=0.0;if _eddf =="\u0020"{_dfa =_ebgb .Tw ;};_aba ,_ ,_bbd :=_ebgb .Tf .GetCharMetrics (_edde );if _bbd {_aba =_aba *0.001*_cg ;}else {_aba ,_ =ctx .MeasureString (_eddf ,_gfd );_aba =_aba /_eac ;
};_ecc :=(_aba +_ebgb .Tc +_dfa )*_gecd ;_ebgb .Tm =_ebgb .Tm .Mult (_eb .TranslationMatrix (_ecc ,0));};};func NewTextState ()TextState {return TextState {Th :100,Tm :_eb .IdentityMatrix (),Tlm :_eb .IdentityMatrix ()};};func (_eegd *TextState )ProcTStar (){_eegd .ProcTd (0,-_eegd .Tl )};
const (LineCapRound LineCap =iota ;LineCapButt ;LineCapSquare ;);const (FillRuleWinding FillRule =iota ;FillRuleEvenOdd ;);type TextRenderingMode int ;func (_ead *TextFont )WithSize (size float64 ,originalFont *_efe .PdfFont )*TextFont {return &TextFont {Font :_ead .Font ,Size :size ,_dd :_ead ._dd ,_gaeg :originalFont };
};func (_gb *TextFont )NewFace (size float64 )_gc .Face {return _ea .NewFace (_gb ._dd ,&_ea .Options {Size :size });};func (_deba *TextState )ProcTf (font *TextFont ){_deba .Tf =font };func (_gba *TextState )ProcTD (tx ,ty float64 ){_gba .Tl =-ty ;_gba .ProcTd (tx ,ty )};
func NewTextFont (font *_efe .PdfFont ,size float64 )(*TextFont ,error ){_cd :=font .FontDescriptor ();if _cd ==nil {return nil ,_g .New ("\u0063\u006fu\u006c\u0064\u0020\u006e\u006f\u0074\u0020\u0067\u0065\u0074\u0020\u0066\u006f\u006e\u0074\u0020\u0064\u0065\u0073\u0063\u0072\u0069pt\u006f\u0072");
};_cad ,_gcd :=_aa .GetStream (_cd .FontFile2 );if !_gcd {return nil ,_g .New ("\u006di\u0073\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u0020f\u0069\u006c\u0065\u0020\u0073\u0074\u0072\u0065\u0061\u006d");};_ade ,_aed :=_aa .DecodeStream (_cad );
if _aed !=nil {return nil ,_aed ;};_dbb ,_aed :=_ea .Parse (_ade );if _aed !=nil {return nil ,_aed ;};_beg :=font .FontDescriptor ().FontName .String ();_face :=len (_beg )> 7&&_beg [6]=='+';if _cd .Flags !=nil {_gfgc ,_fc :=_ef .Atoi (_cd .Flags .String ());
if _fc ==nil &&_gfgc ==32{_face =false ;};};if !_dbb .HasCmap ()&&(!_a .Contains (font .Encoder ().String (),"\u0049d\u0065\u006e\u0074\u0069\u0074\u0079-")||!_face ){return nil ,_g .New ("\u006e\u006f c\u006d\u0061\u0070 \u0061\u006e\u0064\u0020enc\u006fdi\u006e\u0067\u0020\u0069\u0073\u0020\u006eot\u0020\u0069\u0064\u0065\u006e\u0074\u0069t\u0079");
};return &TextFont {Font :font ,Size :size ,_dd :_dbb },nil ;};func (_ebd *TextState )ProcQ (data []byte ,ctx Context ){_ebd .ProcTStar ();_ebd .ProcTj (data ,ctx )};func (_bdf *TextState )Translate (tx ,ty float64 ){_bdf .Tm =_bdf .Tm .Mult (_eb .TranslationMatrix (tx ,ty ));
};func (_dbf *TextFont )GetCharMetrics (code _d .CharCode )(float64 ,float64 ,bool ){if _bbg ,_dee :=_dbf .Font .GetCharMetrics (code );_dee &&_bbg .Wx !=0{return _bbg .Wx ,_bbg .Wy ,_dee ;};if _dbf ._gaeg ==nil {return 0,0,false ;};_eeg ,_fef :=_dbf ._gaeg .GetCharMetrics (code );
return _eeg .Wx ,_eeg .Wy ,_fef &&_eeg .Wx !=0;};type Pattern interface{ColorAt (_aac ,_ag int )_b .Color ;};type TextState struct{Tc float64 ;Tw float64 ;Th float64 ;Tl float64 ;Tf *TextFont ;Ts float64 ;Tm _eb .Matrix ;Tlm _eb .Matrix ;Tr TextRenderingMode ;
GlobalScale float64 ;};type Gradient interface{Pattern ;AddColorStop (_db float64 ,_bc _b .Color );};type LineJoin int ;type Context interface{Push ();Pop ();Matrix ()_eb .Matrix ;SetMatrix (_f _eb .Matrix );Translate (_c ,_gd float64 );Scale (_de ,_da float64 );
Rotate (_bcf float64 );MoveTo (_dg ,_ba float64 );LineTo (_bcd ,_df float64 );CubicTo (_fg ,_gcg ,_ecf ,_ab ,_ad ,_ga float64 );QuadraticTo (_gg ,_fa ,_efd ,_fac float64 );NewSubPath ();ClosePath ();ClearPath ();Clip ();ClipPreserve ();ResetClip ();LineWidth ()float64 ;
SetLineWidth (_bd float64 );SetLineCap (_efc LineCap );SetLineJoin (_dfg LineJoin );SetDash (_deb ...float64 );SetDashOffset (_aaa float64 );Fill ();FillPreserve ();Stroke ();StrokePreserve ();SetRGBA (_eg ,_age ,_adf ,_ac float64 );SetFillRGBA (_fgg ,_gff ,_cc ,_ca float64 );
SetFillStyle (_fb Pattern );SetFillRule (_ee FillRule );SetStrokeRGBA (_fd ,_ge ,_aad ,_caf float64 );SetStrokeStyle (_ggf Pattern );FillPattern ()Pattern ;StrokePattern ()Pattern ;TextState ()*TextState ;DrawString (_gfg string ,_fe _gc .Face ,_ed ,_ebg float64 );
MeasureString (_be string ,_gae _gc .Face )(_ebe ,_ae float64 );DrawRectangle (_edb ,_ccb ,_edd ,_gda float64 );DrawImage (_gga _gf .Image ,_aadb ,_fae int );DrawImageAnchored (_ggc _gf .Image ,_dec ,_af int ,_acf ,_bb float64 );Height ()int ;Width ()int ;
};func NewTextFontFromPath (filePath string ,size float64 )(*TextFont ,error ){_ebf ,_ece :=_efe .NewPdfFontFromTTFFile (filePath );if _ece !=nil {return nil ,_ece ;};return NewTextFont (_ebf ,size );};func (_acfg *TextState )ProcDQ (data []byte ,aw ,ac float64 ,ctx Context ){_acfg .Tw =aw ;
_acfg .Tc =ac ;_acfg .ProcQ (data ,ctx );};type FillRule int ;func (_cdf *TextState )ProcTm (a ,b ,c ,d ,e ,f float64 ){_cdf .Tm =_eb .NewMatrix (a ,b ,c ,d ,e ,f );_cdf .Tlm =_cdf .Tm .Clone ();};type TextFont struct{Font *_efe .PdfFont ;Size float64 ;
_dd *_ea .Font ;_gaeg *_efe .PdfFont ;};func (_fcg *TextFont )CharcodeToRunes (charcode _d .CharCode )(_d .CharCode ,[]rune ){_cb :=[]_d .CharCode {charcode };if _fcg ._gaeg ==nil ||_fcg ._gaeg ==_fcg .Font {return _fcg .charcodeToRunesSimple (charcode );
};_bg :=_fcg ._gaeg .CharcodesToUnicode (_cb );_gcf ,_ :=_fcg .Font .RunesToCharcodeBytes (_bg );_gec :=_fcg .Font .BytesToCharcodes (_gcf );_aaaa :=charcode ;if len (_gec )> 0&&_gec [0]!=0{_aaaa =_gec [0];};if string (_bg )==string (_ec .MissingCodeRune )&&_fcg ._gaeg .BaseFont ()==_fcg .Font .BaseFont (){return _fcg .charcodeToRunesSimple (charcode );
};return _aaaa ,_bg ;};type LineCap int ;func (_dbe *TextFont )BytesToCharcodes (data []byte )[]_d .CharCode {if _dbe ._gaeg !=nil {return _dbe ._gaeg .BytesToCharcodes (data );};return _dbe .Font .BytesToCharcodes (data );};func (_ebef *TextState )Reset (){_ebef .Tm =_eb .IdentityMatrix ();
_ebef .Tlm =_eb .IdentityMatrix ()};const (TextRenderingModeFill TextRenderingMode =iota ;TextRenderingModeStroke ;TextRenderingModeFillStroke ;TextRenderingModeInvisible ;TextRenderingModeFillClip ;TextRenderingModeStrokeClip ;TextRenderingModeFillStrokeClip ;
TextRenderingModeClip ;);func (_fce *TextState )ProcTd (tx ,ty float64 ){_fce .Tlm .Concat (_eb .TranslationMatrix (tx ,ty ));_fce .Tm =_fce .Tlm .Clone ();};