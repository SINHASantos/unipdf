//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package context ;import (_c "errors";_ea "github.com/unidoc/freetype/truetype";_e "github.com/unidoc/unipdf/v3/core";_ab "github.com/unidoc/unipdf/v3/internal/cmap";_f "github.com/unidoc/unipdf/v3/internal/textencoding";_b "github.com/unidoc/unipdf/v3/internal/transform";
_fa "github.com/unidoc/unipdf/v3/model";_ae "golang.org/x/image/font";_gb "image";_g "image/color";_d "strconv";_ga "strings";);type LineCap int ;type Pattern interface{ColorAt (_bd ,_ge int )_g .Color ;};func (_fdaf *TextFont )charcodeToRunesSimple (_af _f .CharCode )(_f .CharCode ,[]rune ){_dbf :=[]_f .CharCode {_af };
if _fdaf .Font .IsSimple ()&&_fdaf ._ceb !=nil {if _ag :=_fdaf ._ceb .Index (rune (_af ));_ag > 0{return _af ,[]rune {rune (_af )};};};if _fdaf ._ceb !=nil &&!_fdaf ._ceb .HasCmap ()&&_ga .Contains (_fdaf .Font .Encoder ().String (),"\u0049d\u0065\u006e\u0074\u0069\u0074\u0079-"){if _bbd :=_fdaf ._ceb .Index (rune (_af ));
_bbd > 0{return _af ,[]rune {rune (_af )};};};return _af ,_fdaf .Font .CharcodesToUnicode (_dbf );};const (LineJoinRound LineJoin =iota ;LineJoinBevel ;);type Gradient interface{Pattern ;AddColorStop (_gc float64 ,_bf _g .Color );};type TextRenderingMode int ;
const (LineCapRound LineCap =iota ;LineCapButt ;LineCapSquare ;);func (_gaba *TextState )ProcDQ (data []byte ,aw ,ac float64 ,ctx Context ){_gaba .Tw =aw ;_gaba .Tc =ac ;_gaba .ProcQ (data ,ctx );};type Context interface{Push ();Pop ();Matrix ()_b .Matrix ;
SetMatrix (_ff _b .Matrix );Translate (_ad ,_gea float64 );Scale (_eb ,_fag float64 );Rotate (_bdg float64 );MoveTo (_cd ,_cdd float64 );LineTo (_abe ,_abd float64 );CubicTo (_cb ,_ef ,_ce ,_eag ,_be ,_cdg float64 );QuadraticTo (_bc ,_gba ,_ee ,_cbc float64 );
NewSubPath ();ClosePath ();ClearPath ();Clip ();ClipPreserve ();ResetClip ();LineWidth ()float64 ;SetLineWidth (_fac float64 );SetLineCap (_df LineCap );SetLineJoin (_gcg LineJoin );SetDash (_fe ...float64 );SetDashOffset (_bg float64 );Fill ();FillPreserve ();
Stroke ();StrokePreserve ();SetRGBA (_ca ,_dg ,_gab ,_cg float64 );SetFillRGBA (_bfg ,_gcgg ,_eab ,_eff float64 );SetFillStyle (_cbb Pattern );SetFillRule (_cgf FillRule );SetStrokeRGBA (_fd ,_ffc ,_dd ,_fg float64 );SetStrokeStyle (_ba Pattern );FillPattern ()Pattern ;
StrokePattern ()Pattern ;TextState ()*TextState ;DrawString (_aa string ,_aeg _ae .Face ,_ed ,_eac float64 );MeasureString (_fda string ,_db _ae .Face )(_fc ,_aec float64 );DrawRectangle (_bce ,_gcc ,_bea ,_gcce float64 );DrawImage (_gca _gb .Image ,_edc ,_aed int );
DrawImageAnchored (_aaa _gb .Image ,_cdge ,_dbd int ,_ebe ,_cbbd float64 );Height ()int ;Width ()int ;};type TextFont struct{Font *_fa .PdfFont ;Size float64 ;_ceb *_ea .Font ;_eg *_fa .PdfFont ;};func NewTextFont (font *_fa .PdfFont ,size float64 )(*TextFont ,error ){_gf :=font .FontDescriptor ();
if _gf ==nil {return nil ,_c .New ("\u0063\u006fu\u006c\u0064\u0020\u006e\u006f\u0074\u0020\u0067\u0065\u0074\u0020\u0066\u006f\u006e\u0074\u0020\u0064\u0065\u0073\u0063\u0072\u0069pt\u006f\u0072");};_abea ,_cag :=_e .GetStream (_gf .FontFile2 );if !_cag {return nil ,_c .New ("\u006di\u0073\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u0020f\u0069\u006c\u0065\u0020\u0073\u0074\u0072\u0065\u0061\u006d");
};_cdf ,_gac :=_e .DecodeStream (_abea );if _gac !=nil {return nil ,_gac ;};_dc ,_gac :=_ea .Parse (_cdf );if _gac !=nil {return nil ,_gac ;};_gg :=font .FontDescriptor ().FontName .String ();_cgb :=len (_gg )> 7&&_gg [6]=='+';if _gf .Flags !=nil {_bff ,_bcf :=_d .Atoi (_gf .Flags .String ());
if _bcf ==nil &&_bff ==32{_cgb =false ;};};if !_dc .HasCmap ()&&(!_ga .Contains (font .Encoder ().String (),"\u0049d\u0065\u006e\u0074\u0069\u0074\u0079-")||!_cgb ){return nil ,_c .New ("\u006e\u006f c\u006d\u0061\u0070 \u0061\u006e\u0064\u0020enc\u006fdi\u006e\u0067\u0020\u0069\u0073\u0020\u006eot\u0020\u0069\u0064\u0065\u006e\u0074\u0069t\u0079");
};return &TextFont {Font :font ,Size :size ,_ceb :_dc },nil ;};func (_ffb *TextState )ProcTStar (){_ffb .ProcTd (0,-_ffb .Tl )};func (_de *TextState )ProcTm (a ,b ,c ,d ,e ,f float64 ){_de .Tm =_b .NewMatrix (a ,b ,c ,d ,e ,f );_de .Tlm =_de .Tm .Clone ();
};func (_faf *TextFont )CharcodeToRunes (charcode _f .CharCode )(_f .CharCode ,[]rune ){_adb :=[]_f .CharCode {charcode };if _faf ._eg ==nil ||_faf ._eg ==_faf .Font {return _faf .charcodeToRunesSimple (charcode );};_cdfc :=_faf ._eg .CharcodesToUnicode (_adb );
_bceb ,_ :=_faf .Font .RunesToCharcodeBytes (_cdfc );_bfa :=_faf .Font .BytesToCharcodes (_bceb );_bb :=charcode ;if len (_bfa )> 0&&_bfa [0]!=0{_bb =_bfa [0];};if string (_cdfc )==string (_ab .MissingCodeRune )&&_faf ._eg .BaseFont ()==_faf .Font .BaseFont (){return _faf .charcodeToRunesSimple (charcode );
};return _bb ,_cdfc ;};type LineJoin int ;func (_afc *TextState )ProcTf (font *TextFont ){_afc .Tf =font };func (_aae *TextState )ProcQ (data []byte ,ctx Context ){_aae .ProcTStar ();_aae .ProcTj (data ,ctx )};func (_cea *TextState )ProcTD (tx ,ty float64 ){_cea .Tl =-ty ;
_cea .ProcTd (tx ,ty )};const (TextRenderingModeFill TextRenderingMode =iota ;TextRenderingModeStroke ;TextRenderingModeFillStroke ;TextRenderingModeInvisible ;TextRenderingModeFillClip ;TextRenderingModeStrokeClip ;TextRenderingModeFillStrokeClip ;TextRenderingModeClip ;
);func (_gfg *TextState )ProcTj (data []byte ,ctx Context ){_efd :=_gfg .Tf .Size ;_cdc :=_gfg .Th /100.0;_fb :=_gfg .GlobalScale ;_gbb :=_b .NewMatrix (_efd *_cdc ,0,0,_efd ,0,_gfg .Ts );_gbaa :=ctx .Matrix ();_cad :=_gbaa .Clone ().Mult (_gfg .Tm .Clone ().Mult (_gbb )).ScalingFactorY ();
_fad :=_gfg .Tf .NewFace (_cad );_afb :=_gfg .Tf .BytesToCharcodes (data );for _ ,_dce :=range _afb {_cgd ,_fcd :=_gfg .Tf .CharcodeToRunes (_dce );_cda :=string (_fcd );if _cda =="\u0000"{continue ;};_eceg :=_gbaa .Clone ().Mult (_gfg .Tm .Clone ().Mult (_gbb ));
_fgc :=_eceg .ScalingFactorY ();_eceg =_eceg .Scale (1/_fgc ,-1/_fgc );if _gfg .Tr !=TextRenderingModeInvisible {ctx .SetMatrix (_eceg );ctx .DrawString (_cda ,_fad ,0,0);ctx .SetMatrix (_gbaa );};_ggf :=0.0;if _cda =="\u0020"{_ggf =_gfg .Tw ;};_dea ,_ ,_egg :=_gfg .Tf .GetCharMetrics (_cgd );
if _egg {_dea =_dea *0.001*_efd ;}else {_dea ,_ =ctx .MeasureString (_cda ,_fad );_dea =_dea /_fb ;};_fcf :=(_dea +_gfg .Tc +_ggf )*_cdc ;_gfg .Tm =_gfg .Tm .Mult (_b .TranslationMatrix (_fcf ,0));};};func (_ffbf *TextState )Translate (tx ,ty float64 ){_ffbf .Tm =_ffbf .Tm .Mult (_b .TranslationMatrix (tx ,ty ));
};const (FillRuleWinding FillRule =iota ;FillRuleEvenOdd ;);func (_bdgc *TextFont )WithSize (size float64 ,originalFont *_fa .PdfFont )*TextFont {return &TextFont {Font :_bdgc .Font ,Size :size ,_ceb :_bdgc ._ceb ,_eg :originalFont };};func (_gdf *TextState )Reset (){_gdf .Tm =_b .IdentityMatrix ();
_gdf .Tlm =_b .IdentityMatrix ()};func (_agb *TextFont )GetCharMetrics (code _f .CharCode )(float64 ,float64 ,bool ){if _eeb ,_gfa :=_agb .Font .GetCharMetrics (code );_gfa &&_eeb .Wx !=0{return _eeb .Wx ,_eeb .Wy ,_gfa ;};if _agb ._eg ==nil {return 0,0,false ;
};_dfc ,_ece :=_agb ._eg .GetCharMetrics (code );return _dfc .Wx ,_dfc .Wy ,_ece &&_dfc .Wx !=0;};type FillRule int ;func (_efg *TextFont )NewFace (size float64 )_ae .Face {return _ea .NewFace (_efg ._ceb ,&_ea .Options {Size :size });};func (_beg *TextState )ProcTd (tx ,ty float64 ){_beg .Tlm .Concat (_b .TranslationMatrix (tx ,ty ));
_beg .Tm =_beg .Tlm .Clone ();};func NewTextFontFromPath (filePath string ,size float64 )(*TextFont ,error ){_edb ,_ec :=_fa .NewPdfFontFromTTFFile (filePath );if _ec !=nil {return nil ,_ec ;};return NewTextFont (_edb ,size );};func NewTextState ()TextState {return TextState {Th :100,Tm :_b .IdentityMatrix (),Tlm :_b .IdentityMatrix ()};
};type TextState struct{Tc float64 ;Tw float64 ;Th float64 ;Tl float64 ;Tf *TextFont ;Ts float64 ;Tm _b .Matrix ;Tlm _b .Matrix ;Tr TextRenderingMode ;GlobalScale float64 ;};func (_dfe *TextFont )BytesToCharcodes (data []byte )[]_f .CharCode {if _dfe ._eg !=nil {return _dfe ._eg .BytesToCharcodes (data );
};return _dfe .Font .BytesToCharcodes (data );};