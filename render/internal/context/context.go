//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package context ;import (_g "errors";_cc "github.com/unidoc/freetype/truetype";_b "github.com/unidoc/unipdf/v3/core";_d "github.com/unidoc/unipdf/v3/internal/cmap";_ee "github.com/unidoc/unipdf/v3/internal/textencoding";_ac "github.com/unidoc/unipdf/v3/internal/transform";
_ga "github.com/unidoc/unipdf/v3/model";_a "golang.org/x/image/font";_gc "image";_e "image/color";_ff "strconv";_c "strings";);type FillRule int ;func (_gcgf *TextState )ProcQ (data []byte ,ctx Context ){_gcgf .ProcTStar ();_gcgf .ProcTj (data ,ctx )};
func (_afc *TextFont )BytesToCharcodes (data []byte )[]_ee .CharCode {if _afc ._agaf !=nil {return _afc ._agaf .BytesToCharcodes (data );};return _afc .Font .BytesToCharcodes (data );};type TextRenderingMode int ;func (_edc *TextFont )WithSize (size float64 ,originalFont *_ga .PdfFont )*TextFont {return &TextFont {Font :_edc .Font ,Size :size ,_bdee :_edc ._bdee ,_agaf :originalFont };
};type Gradient interface{Pattern ;AddColorStop (_bf float64 ,_fc _e .Color );};func (_bdea *TextFont )CharcodeToRunes (charcode _ee .CharCode )(_ee .CharCode ,[]rune ){_gba :=[]_ee .CharCode {charcode };if _bdea ._agaf ==nil ||_bdea ._agaf ==_bdea .Font {return _bdea .charcodeToRunesSimple (charcode );
};_agc :=_bdea ._agaf .CharcodesToUnicode (_gba );_dbf ,_ :=_bdea .Font .RunesToCharcodeBytes (_agc );_fd :=_bdea .Font .BytesToCharcodes (_dbf );_eag :=charcode ;if len (_fd )> 0&&_fd [0]!=0{_eag =_fd [0];};if string (_agc )==string (_d .MissingCodeRune )&&_bdea ._agaf .BaseFont ()==_bdea .Font .BaseFont (){return _bdea .charcodeToRunesSimple (charcode );
};return _eag ,_agc ;};type TextState struct{Tc float64 ;Tw float64 ;Th float64 ;Tl float64 ;Tf *TextFont ;Ts float64 ;Tm _ac .Matrix ;Tlm _ac .Matrix ;Tr TextRenderingMode ;GlobalScale float64 ;};const (LineJoinRound LineJoin =iota ;LineJoinBevel ;);const (TextRenderingModeFill TextRenderingMode =iota ;
TextRenderingModeStroke ;TextRenderingModeFillStroke ;TextRenderingModeInvisible ;TextRenderingModeFillClip ;TextRenderingModeStrokeClip ;TextRenderingModeFillStrokeClip ;TextRenderingModeClip ;);func (_feg *TextState )ProcDQ (data []byte ,aw ,ac float64 ,ctx Context ){_feg .Tw =aw ;
_feg .Tc =ac ;_feg .ProcQ (data ,ctx );};func (_bac *TextFont )charcodeToRunesSimple (_ceg _ee .CharCode )(_ee .CharCode ,[]rune ){_dgb :=[]_ee .CharCode {_ceg };if _bac .Font .IsSimple ()&&_bac ._bdee !=nil {if _gga :=_bac ._bdee .Index (rune (_ceg ));
_gga > 0{return _ceg ,[]rune {rune (_ceg )};};};if _bac ._bdee !=nil &&!_bac ._bdee .HasCmap ()&&_c .Contains (_bac .Font .Encoder ().String (),"\u0049d\u0065\u006e\u0074\u0069\u0074\u0079-"){if _dbd :=_bac ._bdee .Index (rune (_ceg ));_dbd > 0{return _ceg ,[]rune {rune (_ceg )};
};};return _ceg ,_bac .Font .CharcodesToUnicode (_dgb );};func NewTextFontFromPath (filePath string ,size float64 )(*TextFont ,error ){_cd ,_ba :=_ga .NewPdfFontFromTTFFile (filePath );if _ba !=nil {return nil ,_ba ;};return NewTextFont (_cd ,size );};
type TextFont struct{Font *_ga .PdfFont ;Size float64 ;_bdee *_cc .Font ;_agaf *_ga .PdfFont ;};func (_ecc *TextFont )NewFace (size float64 )_a .Face {return _cc .NewFace (_ecc ._bdee ,&_cc .Options {Size :size });};func (_fcf *TextState )ProcTd (tx ,ty float64 ){_fcf .Tlm .Concat (_ac .TranslationMatrix (tx ,ty ));
_fcf .Tm =_fcf .Tlm .Clone ();};const (LineCapRound LineCap =iota ;LineCapButt ;LineCapSquare ;);func NewTextState ()TextState {return TextState {Th :100,Tm :_ac .IdentityMatrix (),Tlm :_ac .IdentityMatrix ()};};type LineJoin int ;func (_fdd *TextState )Reset (){_fdd .Tm =_ac .IdentityMatrix ();
_fdd .Tlm =_ac .IdentityMatrix ()};type Context interface{Push ();Pop ();Matrix ()_ac .Matrix ;SetMatrix (_bb _ac .Matrix );Translate (_bc ,_db float64 );Scale (_ag ,_bca float64 );Rotate (_ad float64 );MoveTo (_fe ,_bd float64 );LineTo (_ec ,_ef float64 );
CubicTo (_gaa ,_aa ,_bg ,_eg ,_bde ,_fce float64 );QuadraticTo (_fg ,_ece ,_ge ,_ab float64 );NewSubPath ();ClosePath ();ClearPath ();Clip ();ClipPreserve ();ResetClip ();LineWidth ()float64 ;SetLineWidth (_bba float64 );SetLineCap (_efb LineCap );SetLineJoin (_bbg LineJoin );
SetDash (_bcb ...float64 );SetDashOffset (_dg float64 );Fill ();FillPreserve ();Stroke ();StrokePreserve ();SetRGBA (_daa ,_aga ,_eb ,_eda float64 );SetFillRGBA (_af ,_fa ,_gb ,_ca float64 );SetFillStyle (_ce Pattern );SetFillRule (_ffb FillRule );SetStrokeRGBA (_bfg ,_ege ,_bbb ,_add float64 );
SetStrokeStyle (_ccf Pattern );FillPattern ()Pattern ;StrokePattern ()Pattern ;TextState ()*TextState ;DrawString (_ea string ,_ccd _a .Face ,_dad ,_gbe float64 );MeasureString (_geg string ,_eec _a .Face )(_ecd ,_aag float64 );DrawRectangle (_cac ,_abf ,_df ,_ebe float64 );
DrawImage (_fb _gc .Image ,_edd ,_gd int );DrawImageAnchored (_afa _gc .Image ,_dbg ,_gg int ,_gf ,_bfd float64 );Height ()int ;Width ()int ;};func (_eea *TextState )ProcTD (tx ,ty float64 ){_eea .Tl =-ty ;_eea .ProcTd (tx ,ty )};func (_be *TextState )ProcTm (a ,b ,c ,d ,e ,f float64 ){_be .Tm =_ac .NewMatrix (a ,b ,c ,d ,e ,f );
_be .Tlm =_be .Tm .Clone ();};func (_fga *TextFont )GetCharMetrics (code _ee .CharCode )(float64 ,float64 ,bool ){if _gda ,_daf :=_fga .Font .GetCharMetrics (code );_daf &&_gda .Wx !=0{return _gda .Wx ,_gda .Wy ,_daf ;};if _fga ._agaf ==nil {return 0,0,false ;
};_cegf ,_cda :=_fga ._agaf .GetCharMetrics (code );return _cegf .Wx ,_cegf .Wy ,_cda &&_cegf .Wx !=0;};func (_bgg *TextState )ProcTStar (){_bgg .ProcTd (0,-_bgg .Tl )};func NewTextFont (font *_ga .PdfFont ,size float64 )(*TextFont ,error ){_dgc :=font .FontDescriptor ();
if _dgc ==nil {return nil ,_g .New ("\u0063\u006fu\u006c\u0064\u0020\u006e\u006f\u0074\u0020\u0067\u0065\u0074\u0020\u0066\u006f\u006e\u0074\u0020\u0064\u0065\u0073\u0063\u0072\u0069pt\u006f\u0072");};_agac ,_abfc :=_b .GetStream (_dgc .FontFile2 );if !_abfc {return nil ,_g .New ("\u006di\u0073\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u0020f\u0069\u006c\u0065\u0020\u0073\u0074\u0072\u0065\u0061\u006d");
};_dd ,_gdd :=_b .DecodeStream (_agac );if _gdd !=nil {return nil ,_gdd ;};_de ,_gdd :=_cc .Parse (_dd );if _gdd !=nil {return nil ,_gdd ;};_ebc :=font .FontDescriptor ().FontName .String ();_egd :=len (_ebc )> 7&&_ebc [6]=='+';if _dgc .Flags !=nil {_fef ,_adb :=_ff .Atoi (_dgc .Flags .String ());
if _adb ==nil &&_fef ==32{_egd =false ;};};if !_de .HasCmap ()&&(!_c .Contains (font .Encoder ().String (),"\u0049d\u0065\u006e\u0074\u0069\u0074\u0079-")||!_egd ){return nil ,_g .New ("\u006e\u006f c\u006d\u0061\u0070 \u0061\u006e\u0064\u0020enc\u006fdi\u006e\u0067\u0020\u0069\u0073\u0020\u006eot\u0020\u0069\u0064\u0065\u006e\u0074\u0069t\u0079");
};return &TextFont {Font :font ,Size :size ,_bdee :_de },nil ;};func (_adg *TextState )ProcTf (font *TextFont ){_adg .Tf =font };func (_ecg *TextState )Translate (tx ,ty float64 ){_ecg .Tm =_ecg .Tm .Mult (_ac .TranslationMatrix (tx ,ty ));};const (FillRuleWinding FillRule =iota ;
FillRuleEvenOdd ;);type LineCap int ;func (_fca *TextState )ProcTj (data []byte ,ctx Context ){_fbg :=_fca .Tf .Size ;_agad :=_fca .Th /100.0;_fgd :=_fca .GlobalScale ;_eae :=_ac .NewMatrix (_fbg *_agad ,0,0,_fbg ,0,_fca .Ts );_gca :=ctx .Matrix ();_efe :=_gca .Clone ().Mult (_fca .Tm .Clone ().Mult (_eae )).ScalingFactorY ();
_ecea :=_fca .Tf .NewFace (_efe );_dfb :=_fca .Tf .BytesToCharcodes (data );for _ ,_gdc :=range _dfb {_ede ,_efea :=_fca .Tf .CharcodeToRunes (_gdc );_cb :=string (_efea );if _cb =="\u0000"{continue ;};_ffa :=_gca .Clone ().Mult (_fca .Tm .Clone ().Mult (_eae ));
_afab :=_ffa .ScalingFactorY ();_ffa =_ffa .Scale (1/_afab ,-1/_afab );if _fca .Tr !=TextRenderingModeInvisible {ctx .SetMatrix (_ffa );ctx .DrawString (_cb ,_ecea ,0,0);ctx .SetMatrix (_gca );};_gbef :=0.0;if _cb =="\u0020"{_gbef =_fca .Tw ;};_fdg ,_ ,_ecdg :=_fca .Tf .GetCharMetrics (_ede );
if _ecdg {_fdg =_fdg *0.001*_fbg ;}else {_fdg ,_ =ctx .MeasureString (_cb ,_ecea );_fdg =_fdg /_fgd ;};_bea :=(_fdg +_fca .Tc +_gbef )*_agad ;_fca .Tm =_fca .Tm .Mult (_ac .TranslationMatrix (_bea ,0));};};type Pattern interface{ColorAt (_da ,_ed int )_e .Color ;
};