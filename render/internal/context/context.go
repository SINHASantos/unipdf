//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package context ;import (_g "errors";_af "github.com/unidoc/freetype/truetype";_ef "github.com/unidoc/unipdf/v3/core";_df "github.com/unidoc/unipdf/v3/internal/cmap";_ab "github.com/unidoc/unipdf/v3/internal/textencoding";_f "github.com/unidoc/unipdf/v3/internal/transform";
_fd "github.com/unidoc/unipdf/v3/model";_e "golang.org/x/image/font";_be "image";_c "image/color";_a "strconv";_d "strings";);type Pattern interface{ColorAt (_db ,_aa int )_c .Color ;};type Context interface{Push ();Pop ();Matrix ()_f .Matrix ;SetMatrix (_aad _f .Matrix );
Translate (_ce ,_eg float64 );Scale (_eb ,_fc float64 );Rotate (_bea float64 );MoveTo (_ee ,_fe float64 );LineTo (_ae ,_ff float64 );CubicTo (_ac ,_da ,_ffb ,_cc ,_ad ,_cg float64 );QuadraticTo (_ebg ,_fg ,_ga ,_eed float64 );NewSubPath ();ClosePath ();
ClearPath ();Clip ();ClipPreserve ();ResetClip ();LineWidth ()float64 ;SetLineWidth (_gc float64 );SetLineCap (_bg LineCap );SetLineJoin (_fdb LineJoin );SetDash (_cef ...float64 );SetDashOffset (_ed float64 );Fill ();FillPreserve ();Stroke ();StrokePreserve ();
SetRGBA (_dgg ,_cgb ,_dc ,_egb float64 );SetFillRGBA (_fb ,_cb ,_dcg ,_bd float64 );SetFillStyle (_dcc Pattern );SetFillRule (_gf FillRule );SetStrokeRGBA (_aeg ,_fge ,_gec ,_beb float64 );SetStrokeStyle (_fbg Pattern );FillPattern ()Pattern ;StrokePattern ()Pattern ;
TextState ()*TextState ;DrawString (_aadb string ,_ba _e .Face ,_bc ,_bb float64 );MeasureString (_gg string ,_eec _e .Face )(_cefb ,_ede float64 );DrawRectangle (_dbd ,_gga ,_cge ,_bcd float64 );DrawImage (_ca _be .Image ,_de ,_gea int );DrawImageAnchored (_egc _be .Image ,_gb ,_egcg int ,_daf ,_fbgc float64 );
Height ()int ;Width ()int ;};func (_acf *TextFont )BytesToCharcodes (data []byte )[]_ab .CharCode {if _acf ._gfc !=nil {return _acf ._gfc .BytesToCharcodes (data );};return _acf .Font .BytesToCharcodes (data );};func (_fef *TextFont )CharcodeToRunes (charcode _ab .CharCode )(_ab .CharCode ,[]rune ){_edb :=[]_ab .CharCode {charcode };
if _fef ._gfc ==nil ||_fef ._gfc ==_fef .Font {return _fef .charcodeToRunesSimple (charcode );};_fa :=_fef ._gfc .CharcodesToUnicode (_edb );_aac ,_ :=_fef .Font .RunesToCharcodeBytes (_fa );_bed :=_fef .Font .BytesToCharcodes (_aac );_bge :=charcode ;
if len (_bed )> 0&&_bed [0]!=0{_bge =_bed [0];};if string (_fa )==string (_df .MissingCodeRune )&&_fef ._gfc .BaseFont ()==_fef .Font .BaseFont (){return _fef .charcodeToRunesSimple (charcode );};return _bge ,_fa ;};func (_caf *TextFont )charcodeToRunesSimple (_dee _ab .CharCode )(_ab .CharCode ,[]rune ){_dgb :=[]_ab .CharCode {_dee };
if _caf .Font .IsSimple ()&&_caf ._dd !=nil {if _bcdb :=_caf ._dd .Index (rune (_dee ));_bcdb > 0{return _dee ,[]rune {rune (_dee )};};};if _caf ._dd !=nil &&!_caf ._dd .HasCmap ()&&_d .Contains (_caf .Font .Encoder ().String (),"\u0049d\u0065\u006e\u0074\u0069\u0074\u0079-"){if _ag :=_caf ._dd .Index (rune (_dee ));
_ag > 0{return _dee ,[]rune {rune (_dee )};};};return _dee ,_caf .Font .CharcodesToUnicode (_dgb );};func (_bbe *TextState )Reset (){_bbe .Tm =_f .IdentityMatrix ();_bbe .Tlm =_f .IdentityMatrix ()};func (_ded *TextState )ProcTm (a ,b ,c ,d ,e ,f float64 ){_ded .Tm =_f .NewMatrix (a ,b ,c ,d ,e ,f );
_ded .Tlm =_ded .Tm .Clone ();};func (_bged *TextState )ProcQ (data []byte ,ctx Context ){_bged .ProcTStar ();_bged .ProcTj (data ,ctx )};func (_ec *TextState )ProcTStar (){_ec .ProcTd (0,-_ec .Tl )};type TextState struct{Tc float64 ;Tw float64 ;Th float64 ;
Tl float64 ;Tf *TextFont ;Ts float64 ;Tm _f .Matrix ;Tlm _f .Matrix ;Tr TextRenderingMode ;GlobalScale float64 ;};func (_gaba *TextState )Translate (tx ,ty float64 ){_gaba .Tm =_gaba .Tm .Mult (_f .TranslationMatrix (tx ,ty ));};type FillRule int ;type LineCap int ;
func (_gab *TextState )ProcTf (font *TextFont ){_gab .Tf =font };func (_aebd *TextState )ProcTj (data []byte ,ctx Context ){_eeff :=_aebd .Tf .Size ;_gfg :=_aebd .Th /100.0;_beab :=_aebd .GlobalScale ;_cf :=_f .NewMatrix (_eeff *_gfg ,0,0,_eeff ,0,_aebd .Ts );
_adg :=ctx .Matrix ();_fed :=_adg .Clone ().Mult (_aebd .Tm .Clone ().Mult (_cf )).ScalingFactorY ();_fdc :=_aebd .Tf .NewFace (_fed );_dec :=_aebd .Tf .BytesToCharcodes (data );for _ ,_ccd :=range _dec {_dedf ,_gae :=_aebd .Tf .CharcodeToRunes (_ccd );
_gbd :=string (_gae );if _gbd =="\u0000"{continue ;};_ecc :=_adg .Clone ().Mult (_aebd .Tm .Clone ().Mult (_cf ));_agb :=_ecc .ScalingFactorY ();_ecc =_ecc .Scale (1/_agb ,-1/_agb );if _aebd .Tr !=TextRenderingModeInvisible {ctx .SetMatrix (_ecc );ctx .DrawString (_gbd ,_fdc ,0,0);
ctx .SetMatrix (_adg );};_cfd :=0.0;if _gbd =="\u0020"{_cfd =_aebd .Tw ;};_gba ,_ ,_eae :=_aebd .Tf .GetCharMetrics (_dedf );if _eae {_gba =_gba *0.001*_eeff ;}else {_gba ,_ =ctx .MeasureString (_gbd ,_fdc );_gba =_gba /_beab ;};_dcb :=(_gba +_aebd .Tc +_cfd )*_gfg ;
_aebd .Tm =_aebd .Tm .Mult (_f .TranslationMatrix (_dcb ,0));};};func (_fbdd *TextFont )WithSize (size float64 ,originalFont *_fd .PdfFont )*TextFont {return &TextFont {Font :_fbdd .Font ,Size :size ,_dd :_fbdd ._dd ,_gfc :originalFont };};func (_aca *TextFont )GetCharMetrics (code _ab .CharCode )(float64 ,float64 ,bool ){if _eef ,_ea :=_aca .Font .GetCharMetrics (code );
_ea &&_eef .Wx !=0{return _eef .Wx ,_eef .Wy ,_ea ;};if _aca ._gfc ==nil {return 0,0,false ;};_bbf ,_fec :=_aca ._gfc .GetCharMetrics (code );return _bbf .Wx ,_bbf .Wy ,_fec &&_bbf .Wx !=0;};func (_fae *TextState )ProcTD (tx ,ty float64 ){_fae .Tl =-ty ;
_fae .ProcTd (tx ,ty )};const (FillRuleWinding FillRule =iota ;FillRuleEvenOdd ;);type TextRenderingMode int ;const (TextRenderingModeFill TextRenderingMode =iota ;TextRenderingModeStroke ;TextRenderingModeFillStroke ;TextRenderingModeInvisible ;TextRenderingModeFillClip ;
TextRenderingModeStrokeClip ;TextRenderingModeFillStrokeClip ;TextRenderingModeClip ;);type TextFont struct{Font *_fd .PdfFont ;Size float64 ;_dd *_af .Font ;_gfc *_fd .PdfFont ;};func NewTextState ()TextState {return TextState {Th :100,Tm :_f .IdentityMatrix (),Tlm :_f .IdentityMatrix ()};
};const (LineJoinRound LineJoin =iota ;LineJoinBevel ;);type Gradient interface{Pattern ;AddColorStop (_dg float64 ,_ge _c .Color );};func (_fcg *TextState )ProcDQ (data []byte ,aw ,ac float64 ,ctx Context ){_fcg .Tw =aw ;_fcg .Tc =ac ;_fcg .ProcQ (data ,ctx );
};func NewTextFontFromPath (filePath string ,size float64 )(*TextFont ,error ){_eeg ,_fbd :=_fd .NewPdfFontFromTTFFile (filePath );if _fbd !=nil {return nil ,_fbd ;};return NewTextFont (_eeg ,size );};func (_deb *TextFont )NewFace (size float64 )_e .Face {return _af .NewFace (_deb ._dd ,&_af .Options {Size :size });
};type LineJoin int ;func NewTextFont (font *_fd .PdfFont ,size float64 )(*TextFont ,error ){_geb :=font .FontDescriptor ();if _geb ==nil {return nil ,_g .New ("\u0063\u006fu\u006c\u0064\u0020\u006e\u006f\u0074\u0020\u0067\u0065\u0074\u0020\u0066\u006f\u006e\u0074\u0020\u0064\u0065\u0073\u0063\u0072\u0069pt\u006f\u0072");
};_ccb ,_ebc :=_ef .GetStream (_geb .FontFile2 );if !_ebc {return nil ,_g .New ("\u006di\u0073\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u0020f\u0069\u006c\u0065\u0020\u0073\u0074\u0072\u0065\u0061\u006d");};_gebd ,_dfb :=_ef .DecodeStream (_ccb );
if _dfb !=nil {return nil ,_dfb ;};_edg ,_dfb :=_af .Parse (_gebd );if _dfb !=nil {return nil ,_dfb ;};_beg :=font .FontDescriptor ().FontName .String ();_aeb :=len (_beg )> 7&&_beg [6]=='+';if _geb .Flags !=nil {_dfe ,_begg :=_a .Atoi (_geb .Flags .String ());
if _begg ==nil &&_dfe ==32{_aeb =false ;};};if !_edg .HasCmap ()&&(!_d .Contains (font .Encoder ().String (),"\u0049d\u0065\u006e\u0074\u0069\u0074\u0079-")||!_aeb ){return nil ,_g .New ("\u006e\u006f c\u006d\u0061\u0070 \u0061\u006e\u0064\u0020enc\u006fdi\u006e\u0067\u0020\u0069\u0073\u0020\u006eot\u0020\u0069\u0064\u0065\u006e\u0074\u0069t\u0079");
};return &TextFont {Font :font ,Size :size ,_dd :_edg },nil ;};const (LineCapRound LineCap =iota ;LineCapButt ;LineCapSquare ;);func (_ffg *TextState )ProcTd (tx ,ty float64 ){_ffg .Tlm .Concat (_f .TranslationMatrix (tx ,ty ));_ffg .Tm =_ffg .Tlm .Clone ();
};