//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package context ;import (_fg "errors";_g "github.com/unidoc/freetype/truetype";_dg "github.com/unidoc/unipdf/v4/core";_ba "github.com/unidoc/unipdf/v4/internal/cmap";_da "github.com/unidoc/unipdf/v4/internal/textencoding";_fb "github.com/unidoc/unipdf/v4/internal/transform";
_bg "github.com/unidoc/unipdf/v4/model";_db "golang.org/x/image/font";_a "image";_d "image/color";_f "strconv";_c "strings";);func (_bec *TextState )Reset (){_bec .Tm =_fb .IdentityMatrix ();_bec .Tlm =_fb .IdentityMatrix ()};func NewTextFontFromPath (filePath string ,size float64 )(*TextFont ,error ){_ca ,_cfa :=_bg .NewPdfFontFromTTFFile (filePath );
if _cfa !=nil {return nil ,_cfa ;};return NewTextFont (_ca ,size );};func (_fae *TextState )Translate (tx ,ty float64 ){_fae .Tm =_fae .Tm .Mult (_fb .TranslationMatrix (tx ,ty ));};type LineCap int ;func (_gff *TextState )ProcTD (tx ,ty float64 ){_gff .Tl =-ty ;
_gff .ProcTd (tx ,ty )};type Pattern interface{ColorAt (_gc ,_baa int )_d .Color ;};type TextFont struct{Font *_bg .PdfFont ;Size float64 ;_cfbf *_g .Font ;_eab *_bg .PdfFont ;};func (_efe *TextFont )charcodeToRunesSimple (_dd _da .CharCode )(_da .CharCode ,[]rune ){_ffd :=[]_da .CharCode {_dd };
if _efe .Font .IsSimple ()&&_efe ._cfbf !=nil {if _ge :=_efe ._cfbf .Index (rune (_dd ));_ge > 0{return _dd ,[]rune {rune (_dd )};};};if _efe ._cfbf !=nil &&!_efe ._cfbf .HasCmap ()&&_c .Contains (_efe .Font .Encoder ().String (),"\u0049d\u0065\u006e\u0074\u0069\u0074\u0079-"){if _aag :=_efe ._cfbf .Index (rune (_dd ));
_aag > 0{return _dd ,[]rune {rune (_dd )};};};return _dd ,_efe .Font .CharcodesToUnicode (_ffd );};const (LineJoinRound LineJoin =iota ;LineJoinBevel ;);func (_eba *TextState )ProcTj (data []byte ,ctx Context ){_ege :=_eba .Tf .Size ;_faf :=_eba .Th /100.0;
_gaga :=_eba .GlobalScale ;_ebb :=_fb .NewMatrix (_ege *_faf ,0,0,_ege ,0,_eba .Ts );_bge :=ctx .Matrix ();_acd :=_bge .Clone ().Mult (_eba .Tm .Clone ().Mult (_ebb )).ScalingFactorY ();_dba :=_eba .Tf .NewFace (_acd );_bgf :=_eba .Tf .BytesToCharcodes (data );
for _ ,_cad :=range _bgf {_gd ,_fbb :=_eba .Tf .CharcodeToRunes (_cad );_ee :=string (_fbb );if _ee =="\u0000"{continue ;};_cda :=_bge .Clone ().Mult (_eba .Tm .Clone ().Mult (_ebb ));_ce :=_cda .ScalingFactorY ();_cda =_cda .Scale (1/_ce ,-1/_ce );if _eba .Tr !=TextRenderingModeInvisible {ctx .SetMatrix (_cda );
ctx .DrawString (_ee ,_dba ,0,0);ctx .SetMatrix (_bge );};_dde :=0.0;if _ee =="\u0020"{_dde =_eba .Tw ;};_dec ,_ ,_gge :=_eba .Tf .GetCharMetrics (_gd );if _gge {_dec =_dec *0.001*_ege ;}else {_dec ,_ =ctx .MeasureString (_ee ,_dba );_dec =_dec /_gaga ;
};_cgd :=(_dec +_eba .Tc +_dde )*_faf ;_eba .Tm =_eba .Tm .Mult (_fb .TranslationMatrix (_cgd ,0));};};func (_aaa *TextFont )WithSize (size float64 ,originalFont *_bg .PdfFont )*TextFont {return &TextFont {Font :_aaa .Font ,Size :size ,_cfbf :_aaa ._cfbf ,_eab :originalFont };
};func (_fef *TextState )ProcTf (font *TextFont ){_fef .Tf =font };func (_cfbe *TextFont )NewFace (size float64 )_db .Face {return _g .NewFace (_cfbe ._cfbf ,&_g .Options {Size :size });};func (_cfbb *TextState )ProcDQ (data []byte ,aw ,ac float64 ,ctx Context ){_cfbb .Tw =aw ;
_cfbb .Tc =ac ;_cfbb .ProcQ (data ,ctx );};func (_agg *TextFont )CharcodeToRunes (charcode _da .CharCode )(_da .CharCode ,[]rune ){_dfe :=[]_da .CharCode {charcode };if _agg ._eab ==nil ||_agg ._eab ==_agg .Font {return _agg .charcodeToRunesSimple (charcode );
};_bdf :=_agg ._eab .CharcodesToUnicode (_dfe );_fdf ,_ :=_agg .Font .RunesToCharcodeBytes (_bdf );_gaf :=_agg .Font .BytesToCharcodes (_fdf );_be :=charcode ;if len (_gaf )> 0&&_gaf [0]!=0{_be =_gaf [0];};if string (_bdf )==string (_ba .MissingCodeRune )&&_agg ._eab .BaseFont ()==_agg .Font .BaseFont (){return _agg .charcodeToRunesSimple (charcode );
};return _be ,_bdf ;};func (_cgec *TextState )ProcTStar (){_cgec .ProcTd (0,-_cgec .Tl )};const (FillRuleWinding FillRule =iota ;FillRuleEvenOdd ;);type Gradient interface{Pattern ;AddColorStop (_ac float64 ,_fbg _d .Color );};const (LineCapRound LineCap =iota ;
LineCapButt ;LineCapSquare ;);type Context interface{Push ();Pop ();Matrix ()_fb .Matrix ;SetMatrix (_bgg _fb .Matrix );Translate (_cf ,_ag float64 );Scale (_de ,_e float64 );Rotate (_af float64 );MoveTo (_gg ,_eb float64 );LineTo (_fc ,_ad float64 );CubicTo (_df ,_dgc ,_ggf ,_cg ,_bc ,_ae float64 );
QuadraticTo (_eg ,_ec ,_fd ,_cfb float64 );NewSubPath ();ClosePath ();ClearPath ();Clip ();ClipPreserve ();ResetClip ();LineWidth ()float64 ;SetLineWidth (_ef float64 );SetLineCap (_ggd LineCap );SetLineJoin (_fa LineJoin );SetDash (_ga ...float64 );SetDashOffset (_cb float64 );
Fill ();FillPreserve ();Stroke ();StrokePreserve ();SetRGBA (_dc ,_bac ,_gf ,_bacg float64 );SetFillRGBA (_bd ,_dgcb ,_dga ,_adb float64 );SetFillStyle (_dag Pattern );SetFillRule (_deg FillRule );SetStrokeRGBA (_dab ,_ff ,_cd ,_dff float64 );SetStrokeStyle (_cge Pattern );
FillPattern ()Pattern ;StrokePattern ()Pattern ;TextState ()*TextState ;DrawString (_gb string ,_aa _db .Face ,_adc ,_fgc float64 );MeasureString (_gfb string ,_ea _db .Face )(_dfc ,_fe float64 );DrawRectangle (_aef ,_fbd ,_bca ,_bab float64 );DrawImage (_bf _a .Image ,_ece ,_gcc int );
DrawImageAnchored (_bfa _a .Image ,_ed ,_gfe int ,_fcc ,_bggg float64 );Height ()int ;Width ()int ;};type FillRule int ;func (_cdb *TextState )ProcTm (a ,b ,c ,d ,e ,f float64 ){_cdb .Tm =_fb .NewMatrix (a ,b ,c ,d ,e ,f );_cdb .Tlm =_cdb .Tm .Clone ();
};func (_fdfc *TextFont )GetCharMetrics (code _da .CharCode )(float64 ,float64 ,bool ){if _cfd ,_cgb :=_fdfc .Font .GetCharMetrics (code );_cgb &&_cfd .Wx !=0{return _cfd .Wx ,_cfd .Wy ,_cgb ;};if _fdfc ._eab ==nil {return 0,0,false ;};_gag ,_fgd :=_fdfc ._eab .GetCharMetrics (code );
return _gag .Wx ,_gag .Wy ,_fgd &&_gag .Wx !=0;};type TextRenderingMode int ;func NewTextFont (font *_bg .PdfFont ,size float64 )(*TextFont ,error ){_daf :=font .FontDescriptor ();if _daf ==nil {return nil ,_fg .New ("\u0063\u006fu\u006c\u0064\u0020\u006e\u006f\u0074\u0020\u0067\u0065\u0074\u0020\u0066\u006f\u006e\u0074\u0020\u0064\u0065\u0073\u0063\u0072\u0069pt\u006f\u0072");
};_age ,_fab :=_dg .GetStream (_daf .FontFile2 );if !_fab {return nil ,_fg .New ("\u006di\u0073\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u0020f\u0069\u006c\u0065\u0020\u0073\u0074\u0072\u0065\u0061\u006d");};_fbda ,_ebc :=_dg .DecodeStream (_age );
if _ebc !=nil {return nil ,_ebc ;};_fag ,_ebc :=_g .Parse (_fbda );if _ebc !=nil {return nil ,_ebc ;};_bgc :=font .FontDescriptor ().FontName .String ();_aged :=len (_bgc )> 7&&_bgc [6]=='+';if _daf .Flags !=nil {_efd ,_fce :=_f .Atoi (_daf .Flags .String ());
if _fce ==nil &&_efd ==32{_aged =false ;};};if !_fag .HasCmap ()&&(!_c .Contains (font .Encoder ().String (),"\u0049d\u0065\u006e\u0074\u0069\u0074\u0079-")||!_aged ){return nil ,_fg .New ("\u006e\u006f c\u006d\u0061\u0070 \u0061\u006e\u0064\u0020enc\u006fdi\u006e\u0067\u0020\u0069\u0073\u0020\u006eot\u0020\u0069\u0064\u0065\u006e\u0074\u0069t\u0079");
};return &TextFont {Font :font ,Size :size ,_cfbf :_fag },nil ;};func (_gbg *TextState )ProcQ (data []byte ,ctx Context ){_gbg .ProcTStar ();_gbg .ProcTj (data ,ctx )};func (_dcc *TextFont )BytesToCharcodes (data []byte )[]_da .CharCode {if _dcc ._eab !=nil {return _dcc ._eab .BytesToCharcodes (data );
};return _dcc .Font .BytesToCharcodes (data );};func NewTextState ()TextState {return TextState {Th :100,Tm :_fb .IdentityMatrix (),Tlm :_fb .IdentityMatrix ()};};func (_dffe *TextState )ProcTd (tx ,ty float64 ){_dffe .Tlm .Concat (_fb .TranslationMatrix (tx ,ty ));
_dffe .Tm =_dffe .Tlm .Clone ();};type LineJoin int ;const (TextRenderingModeFill TextRenderingMode =iota ;TextRenderingModeStroke ;TextRenderingModeFillStroke ;TextRenderingModeInvisible ;TextRenderingModeFillClip ;TextRenderingModeStrokeClip ;TextRenderingModeFillStrokeClip ;
TextRenderingModeClip ;);type TextState struct{Tc float64 ;Tw float64 ;Th float64 ;Tl float64 ;Tf *TextFont ;Ts float64 ;Tm _fb .Matrix ;Tlm _fb .Matrix ;Tr TextRenderingMode ;GlobalScale float64 ;};