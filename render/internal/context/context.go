//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package context ;import (_fba "errors";_deg "github.com/unidoc/freetype/truetype";_dg "github.com/unidoc/unipdf/v3/core";_de "github.com/unidoc/unipdf/v3/internal/cmap";_d "github.com/unidoc/unipdf/v3/internal/textencoding";_b "github.com/unidoc/unipdf/v3/internal/transform";
_cg "github.com/unidoc/unipdf/v3/model";_ac "golang.org/x/image/font";_cb "image";_a "image/color";_fb "strconv";_c "strings";);const (LineCapRound LineCap =iota ;LineCapButt ;LineCapSquare ;);type Context interface{Push ();Pop ();Matrix ()_b .Matrix ;
SetMatrix (_fdf _b .Matrix );Translate (_ca ,_fdc float64 );Scale (_cd ,_ab float64 );Rotate (_fa float64 );MoveTo (_db ,_be float64 );LineTo (_dcb ,_e float64 );CubicTo (_cc ,_ff ,_fe ,_abd ,_dcg ,_cdd float64 );QuadraticTo (_eb ,_da ,_bf ,_dega float64 );
NewSubPath ();ClosePath ();ClearPath ();Clip ();ClipPreserve ();ResetClip ();LineWidth ()float64 ;SetLineWidth (_eg float64 );SetLineCap (_fg LineCap );SetLineJoin (_ebd LineJoin );SetDash (_ae ...float64 );SetDashOffset (_fde float64 );Fill ();FillPreserve ();
Stroke ();StrokePreserve ();SetRGBA (_ebb ,_ad ,_ffa ,_aa float64 );SetFillRGBA (_bg ,_bgc ,_ec ,_bdf float64 );SetFillStyle (_ee Pattern );SetFillRule (_gd FillRule );SetStrokeRGBA (_def ,_aae ,_bgcc ,_feg float64 );SetStrokeStyle (_dag Pattern );FillPattern ()Pattern ;
StrokePattern ()Pattern ;TextState ()*TextState ;DrawString (_bge string ,_ce _ac .Face ,_dd ,_cf float64 );MeasureString (_fga string ,_fbc _ac .Face )(_cdf ,_eba float64 );DrawRectangle (_cce ,_aad ,_acf ,_bff float64 );DrawImage (_gf _cb .Image ,_cga ,_cdc int );
DrawImageAnchored (_df _cb .Image ,_gc ,_bc int ,_bb ,_gb float64 );Height ()int ;Width ()int ;};func (_adg *TextFont )charcodeToRunesSimple (_dca _d .CharCode )(_d .CharCode ,[]rune ){_abdg :=[]_d .CharCode {_dca };if _adg .Font .IsSimple ()&&_adg ._fff !=nil {if _dab :=_adg ._fff .Index (rune (_dca ));
_dab > 0{return _dca ,[]rune {rune (_dca )};};};if _adg ._fff !=nil &&!_adg ._fff .HasCmap ()&&_c .Contains (_adg .Font .Encoder ().String (),"\u0049d\u0065\u006e\u0074\u0069\u0074\u0079-"){if _cag :=_adg ._fff .Index (rune (_dca ));_cag > 0{return _dca ,[]rune {rune (_dca )};
};};return _dca ,_adg .Font .CharcodesToUnicode (_abdg );};func (_ea *TextState )ProcTf (font *TextFont ){_ea .Tf =font };func (_ag *TextFont )WithSize (size float64 ,originalFont *_cg .PdfFont )*TextFont {return &TextFont {Font :_ag .Font ,Size :size ,_fff :_ag ._fff ,_cgd :originalFont };
};type FillRule int ;func NewTextState ()TextState {return TextState {Th :100,Tm :_b .IdentityMatrix (),Tlm :_b .IdentityMatrix ()};};type LineJoin int ;func (_fdg *TextState )ProcTStar (){_fdg .ProcTd (0,-_fdg .Tl )};func (_fcd *TextFont )BytesToCharcodes (data []byte )[]_d .CharCode {if _fcd ._cgd !=nil {return _fcd ._cgd .BytesToCharcodes (data );
};return _fcd .Font .BytesToCharcodes (data );};type Pattern interface{ColorAt (_g ,_fd int )_a .Color ;};func (_ceac *TextState )ProcDQ (data []byte ,aw ,ac float64 ,ctx Context ){_ceac .Tw =aw ;_ceac .Tc =ac ;_ceac .ProcQ (data ,ctx );};const (FillRuleWinding FillRule =iota ;
FillRuleEvenOdd ;);func (_aba *TextFont )NewFace (size float64 )_ac .Face {return _deg .NewFace (_aba ._fff ,&_deg .Options {Size :size });};type TextRenderingMode int ;func (_ege *TextState )ProcTj (data []byte ,ctx Context ){_ece :=_ege .Tf .Size ;_gg :=_ege .Th /100.0;
_bgg :=_ege .GlobalScale ;_eea :=_b .NewMatrix (_ece *_gg ,0,0,_ece ,0,_ege .Ts );_fffd :=ctx .Matrix ();_ede :=_fffd .Clone ().Mult (_ege .Tm .Clone ().Mult (_eea )).ScalingFactorY ();_cff :=_ege .Tf .NewFace (_ede );_dbd :=_ege .Tf .BytesToCharcodes (data );
for _ ,_ebdc :=range _dbd {_ecga ,_gcb :=_ege .Tf .CharcodeToRunes (_ebdc );_cdg :=string (_gcb );if _cdg =="\u0000"{continue ;};_fce :=_fffd .Clone ().Mult (_ege .Tm .Clone ().Mult (_eea ));_dagd :=_fce .ScalingFactorY ();_fce =_fce .Scale (1/_dagd ,-1/_dagd );
if _ege .Tr !=TextRenderingModeInvisible {ctx .SetMatrix (_fce );ctx .DrawString (_cdg ,_cff ,0,0);ctx .SetMatrix (_fffd );};_dcbd :=0.0;if _cdg =="\u0020"{_dcbd =_ege .Tw ;};_cea ,_ ,_bbc :=_ege .Tf .GetCharMetrics (_ecga );if _bbc {_cea =_cea *0.001*_ece ;
}else {_cea ,_ =ctx .MeasureString (_cdg ,_cff );_cea =_cea /_bgg ;};_bgeb :=(_cea +_ege .Tc +_dcbd )*_gg ;_ege .Tm =_ege .Tm .Mult (_b .TranslationMatrix (_bgeb ,0));};};func (_ffb *TextFont )GetCharMetrics (code _d .CharCode )(float64 ,float64 ,bool ){if _cbc ,_age :=_ffb .Font .GetCharMetrics (code );
_age &&_cbc .Wx !=0{return _cbc .Wx ,_cbc .Wy ,_age ;};if _ffb ._cgd ==nil {return 0,0,false ;};_agf ,_caga :=_ffb ._cgd .GetCharMetrics (code );return _agf .Wx ,_agf .Wy ,_caga &&_agf .Wx !=0;};func (_bea *TextState )ProcTm (a ,b ,c ,d ,e ,f float64 ){_bea .Tm =_b .NewMatrix (a ,b ,c ,d ,e ,f );
_bea .Tlm =_bea .Tm .Clone ();};func (_aff *TextState )Translate (tx ,ty float64 ){_aff .Tm =_aff .Tm .Mult (_b .TranslationMatrix (tx ,ty ));};const (LineJoinRound LineJoin =iota ;LineJoinBevel ;);func (_ebf *TextFont )CharcodeToRunes (charcode _d .CharCode )(_d .CharCode ,[]rune ){_ed :=[]_d .CharCode {charcode };
if _ebf ._cgd ==nil ||_ebf ._cgd ==_ebf .Font {return _ebf .charcodeToRunesSimple (charcode );};_cdfg :=_ebf ._cgd .CharcodesToUnicode (_ed );_afd ,_ :=_ebf .Font .RunesToCharcodeBytes (_cdfg );_bee :=_ebf .Font .BytesToCharcodes (_afd );_gbe :=charcode ;
if len (_bee )> 0&&_bee [0]!=0{_gbe =_bee [0];};if string (_cdfg )==string (_de .MissingCodeRune )&&_ebf ._cgd .BaseFont ()==_ebf .Font .BaseFont (){return _ebf .charcodeToRunesSimple (charcode );};return _gbe ,_cdfg ;};type Gradient interface{Pattern ;
AddColorStop (_dc float64 ,_bd _a .Color );};func NewTextFont (font *_cg .PdfFont ,size float64 )(*TextFont ,error ){_dbb :=font .FontDescriptor ();if _dbb ==nil {return nil ,_fba .New ("\u0063\u006fu\u006c\u0064\u0020\u006e\u006f\u0074\u0020\u0067\u0065\u0074\u0020\u0066\u006f\u006e\u0074\u0020\u0064\u0065\u0073\u0063\u0072\u0069pt\u006f\u0072");
};_eef ,_dbbd :=_dg .GetStream (_dbb .FontFile2 );if !_dbbd {return nil ,_fba .New ("\u006di\u0073\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u0020f\u0069\u006c\u0065\u0020\u0073\u0074\u0072\u0065\u0061\u006d");};_beb ,_aed :=_dg .DecodeStream (_eef );
if _aed !=nil {return nil ,_aed ;};_bgd ,_aed :=_deg .Parse (_beb );if _aed !=nil {return nil ,_aed ;};_ega :=font .FontDescriptor ().FontName .String ();_bfe :=len (_ega )> 7&&_ega [6]=='+';if _dbb .Flags !=nil {_cfc ,_af :=_fb .Atoi (_dbb .Flags .String ());
if _af ==nil &&_cfc ==32{_bfe =false ;};};if !_bgd .HasCmap ()&&(!_c .Contains (font .Encoder ().String (),"\u0049d\u0065\u006e\u0074\u0069\u0074\u0079-")||!_bfe ){return nil ,_fba .New ("\u006e\u006f c\u006d\u0061\u0070 \u0061\u006e\u0064\u0020enc\u006fdi\u006e\u0067\u0020\u0069\u0073\u0020\u006eot\u0020\u0069\u0064\u0065\u006e\u0074\u0069t\u0079");
};return &TextFont {Font :font ,Size :size ,_fff :_bgd },nil ;};type LineCap int ;func NewTextFontFromPath (filePath string ,size float64 )(*TextFont ,error ){_eeb ,_fc :=_cg .NewPdfFontFromTTFFile (filePath );if _fc !=nil {return nil ,_fc ;};return NewTextFont (_eeb ,size );
};const (TextRenderingModeFill TextRenderingMode =iota ;TextRenderingModeStroke ;TextRenderingModeFillStroke ;TextRenderingModeInvisible ;TextRenderingModeFillClip ;TextRenderingModeStrokeClip ;TextRenderingModeFillStrokeClip ;TextRenderingModeClip ;);
func (_daf *TextState )ProcQ (data []byte ,ctx Context ){_daf .ProcTStar ();_daf .ProcTj (data ,ctx )};func (_ecg *TextState )ProcTd (tx ,ty float64 ){_ecg .Tlm .Concat (_b .TranslationMatrix (tx ,ty ));_ecg .Tm =_ecg .Tlm .Clone ();};func (_gdg *TextState )ProcTD (tx ,ty float64 ){_gdg .Tl =-ty ;
_gdg .ProcTd (tx ,ty )};type TextState struct{Tc float64 ;Tw float64 ;Th float64 ;Tl float64 ;Tf *TextFont ;Ts float64 ;Tm _b .Matrix ;Tlm _b .Matrix ;Tr TextRenderingMode ;GlobalScale float64 ;};func (_bcd *TextState )Reset (){_bcd .Tm =_b .IdentityMatrix ();
_bcd .Tlm =_b .IdentityMatrix ()};type TextFont struct{Font *_cg .PdfFont ;Size float64 ;_fff *_deg .Font ;_cgd *_cg .PdfFont ;};