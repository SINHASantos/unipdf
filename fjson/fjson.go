//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package fjson provides support for loading PDF form field data from JSON data/files.
package fjson ;import (_c "encoding/json";_cc "github.com/unidoc/unipdf/v4/common";_ag "github.com/unidoc/unipdf/v4/core";_a "github.com/unidoc/unipdf/v4/model";_dc "io";_ca "os";);

// JSON returns the field data as a string in JSON format.
func (_bcb FieldData )JSON ()(string ,error ){_ecg ,_agg :=_c .MarshalIndent (_bcb ._e ,"","\u0020\u0020\u0020\u0020");return string (_ecg ),_agg ;};

// FieldValues implements model.FieldValueProvider interface.
func (_gfg *FieldData )FieldValues ()(map[string ]_ag .PdfObject ,error ){_bbb :=make (map[string ]_ag .PdfObject );for _ ,_ffd :=range _gfg ._e {if len (_ffd .Value )> 0{_bbb [_ffd .Name ]=_ag .MakeString (_ffd .Value );};};return _bbb ,nil ;};type fieldValue struct{Name string `json:"name"`;
Value string `json:"value"`;ImageValue *_a .Image `json:"-"`;

// Options lists allowed values if present.
Options []string `json:"options,omitempty"`;};

// LoadFromJSON loads JSON form data from `r`.
func LoadFromJSON (r _dc .Reader )(*FieldData ,error ){var _g FieldData ;_cd :=_c .NewDecoder (r ).Decode (&_g ._e );if _cd !=nil {return nil ,_cd ;};return &_g ,nil ;};

// LoadFromPDFFile loads form field data from a PDF file.
func LoadFromPDFFile (filePath string )(*FieldData ,error ){_agd ,_db :=_ca .Open (filePath );if _db !=nil {return nil ,_db ;};defer _agd .Close ();return LoadFromPDF (_agd );};

// LoadFromJSONFile loads form field data from a JSON file.
func LoadFromJSONFile (filePath string )(*FieldData ,error ){_cg ,_ef :=_ca .Open (filePath );if _ef !=nil {return nil ,_ef ;};defer _cg .Close ();return LoadFromJSON (_cg );};

// SetImage assign model.Image to a specific field identified by fieldName.
func (_ccd *FieldData )SetImage (fieldName string ,img *_a .Image ,opt []string )error {_feg :=fieldValue {Name :fieldName ,ImageValue :img ,Options :opt };_ccd ._e =append (_ccd ._e ,_feg );return nil ;};

// SetImageFromFile assign image file to a specific field identified by fieldName.
func (_ab *FieldData )SetImageFromFile (fieldName string ,imagePath string ,opt []string )error {_edce ,_bfa :=_ca .Open (imagePath );if _bfa !=nil {return _bfa ;};defer _edce .Close ();_gb ,_bfa :=_a .ImageHandling .Read (_edce );if _bfa !=nil {_cc .Log .Error ("\u0045\u0072\u0072or\u0020\u006c\u006f\u0061\u0064\u0069\u006e\u0067\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0073",_bfa );
return _bfa ;};return _ab .SetImage (fieldName ,_gb ,opt );};

// FieldImageValues implements model.FieldImageProvider interface.
func (_df *FieldData )FieldImageValues ()(map[string ]*_a .Image ,error ){_gd :=make (map[string ]*_a .Image );for _ ,_cec :=range _df ._e {if _cec .ImageValue !=nil {_gd [_cec .Name ]=_cec .ImageValue ;};};return _gd ,nil ;};

// FieldData represents form field data loaded from JSON file.
type FieldData struct{_e []fieldValue };

// LoadFromPDF loads form field data from a PDF.
func LoadFromPDF (rs _dc .ReadSeeker )(*FieldData ,error ){_ea ,_f :=_a .NewPdfReader (rs );if _f !=nil {return nil ,_f ;};if _ea .AcroForm ==nil {return nil ,nil ;};var _cdg []fieldValue ;_eb :=_ea .AcroForm .AllFields ();for _ ,_fg :=range _eb {var _ed []string ;
_b :=make (map[string ]struct{});_da ,_efc :=_fg .FullName ();if _efc !=nil {return nil ,_efc ;};if _bb ,_ff :=_fg .V .(*_ag .PdfObjectString );_ff {_cdg =append (_cdg ,fieldValue {Name :_da ,Value :_bb .Decoded ()});continue ;};var _ec string ;for _ ,_fa :=range _fg .Annotations {_fgg ,_fe :=_ag .GetName (_fa .AS );
if _fe {_ec =_fgg .String ();};_ac ,_gf :=_ag .GetDict (_fa .AP );if !_gf {continue ;};_af ,_ :=_ag .GetDict (_ac .Get ("\u004e"));for _ ,_gea :=range _af .Keys (){_dd :=_gea .String ();if _ ,_gg :=_b [_dd ];!_gg {_ed =append (_ed ,_dd );_b [_dd ]=struct{}{};
};};_edc ,_ :=_ag .GetDict (_ac .Get ("\u0044"));for _ ,_bf :=range _edc .Keys (){_de :=_bf .String ();if _ ,_ebc :=_b [_de ];!_ebc {_ed =append (_ed ,_de );_b [_de ]=struct{}{};};};};_gee :=fieldValue {Name :_da ,Value :_ec ,Options :_ed };_cdg =append (_cdg ,_gee );
};_cdc :=FieldData {_e :_cdg };return &_cdc ,nil ;};