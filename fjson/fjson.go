//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package fjson provides support for loading PDF form field data from JSON data/files.
package fjson ;import (_g "encoding/json";_d "github.com/unidoc/unipdf/v4/common";_a "github.com/unidoc/unipdf/v4/core";_c "github.com/unidoc/unipdf/v4/model";_gc "io";_f "os";);

// LoadFromPDFFile loads form field data from a PDF file.
func LoadFromPDFFile (filePath string )(*FieldData ,error ){_dfd ,_dca :=_f .Open (filePath );if _dca !=nil {return nil ,_dca ;};defer _dfd .Close ();return LoadFromPDF (_dfd );};

// LoadFromJSONFile loads form field data from a JSON file.
func LoadFromJSONFile (filePath string )(*FieldData ,error ){_ef ,_cc :=_f .Open (filePath );if _cc !=nil {return nil ,_cc ;};defer _ef .Close ();return LoadFromJSON (_ef );};

// SetImageFromFile assign image file to a specific field identified by fieldName.
func (_acf *FieldData )SetImageFromFile (fieldName string ,imagePath string ,opt []string )error {_fc ,_bg :=_f .Open (imagePath );if _bg !=nil {return _bg ;};defer _fc .Close ();_dff ,_bg :=_c .ImageHandling .Read (_fc );if _bg !=nil {_d .Log .Error ("\u0045\u0072\u0072or\u0020\u006c\u006f\u0061\u0064\u0069\u006e\u0067\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0073",_bg );
return _bg ;};return _acf .SetImage (fieldName ,_dff ,opt );};

// FieldValues implements model.FieldValueProvider interface.
func (_fea *FieldData )FieldValues ()(map[string ]_a .PdfObject ,error ){_aea :=make (map[string ]_a .PdfObject );for _ ,_cad :=range _fea ._ae {if len (_cad .Value )> 0{_aea [_cad .Name ]=_a .MakeString (_cad .Value );};};return _aea ,nil ;};

// LoadFromJSON loads JSON form data from `r`.
func LoadFromJSON (r _gc .Reader )(*FieldData ,error ){var _b FieldData ;_dc :=_g .NewDecoder (r ).Decode (&_b ._ae );if _dc !=nil {return nil ,_dc ;};return &_b ,nil ;};

// FieldImageValues implements model.FieldImageProvider interface.
func (_ce *FieldData )FieldImageValues ()(map[string ]*_c .Image ,error ){_aad :=make (map[string ]*_c .Image );for _ ,_eecb :=range _ce ._ae {if _eecb .ImageValue !=nil {_aad [_eecb .Name ]=_eecb .ImageValue ;};};return _aad ,nil ;};

// JSON returns the field data as a string in JSON format.
func (_aca FieldData )JSON ()(string ,error ){_fef ,_gge :=_g .MarshalIndent (_aca ._ae ,"","\u0020\u0020\u0020\u0020");return string (_fef ),_gge ;};type fieldValue struct{Name string `json:"name"`;Value string `json:"value"`;ImageValue *_c .Image `json:"-"`;


// Options lists allowed values if present.
Options []string `json:"options,omitempty"`;};

// FieldData represents form field data loaded from JSON file.
type FieldData struct{_ae []fieldValue };

// SetImage assign model.Image to a specific field identified by fieldName.
func (_cb *FieldData )SetImage (fieldName string ,img *_c .Image ,opt []string )error {_ecc :=fieldValue {Name :fieldName ,ImageValue :img ,Options :opt };_cb ._ae =append (_cb ._ae ,_ecc );return nil ;};

// LoadFromPDF loads form field data from a PDF.
func LoadFromPDF (rs _gc .ReadSeeker )(*FieldData ,error ){_dd ,_eb :=_c .NewPdfReader (rs );if _eb !=nil {return nil ,_eb ;};if _dd .AcroForm ==nil {return nil ,nil ;};var _aef []fieldValue ;_ge :=_dd .AcroForm .AllFields ();for _ ,_ac :=range _ge {var _aa []string ;
_dcf :=make (map[string ]struct{});_ca ,_ag :=_ac .FullName ();if _ag !=nil {return nil ,_ag ;};if _acg ,_ed :=_ac .V .(*_a .PdfObjectString );_ed {_aef =append (_aef ,fieldValue {Name :_ca ,Value :_acg .Decoded ()});continue ;};var _bc string ;for _ ,_cg :=range _ac .Annotations {_ccb ,_gg :=_a .GetName (_cg .AS );
if _gg {_bc =_ccb .String ();};_ga ,_cf :=_a .GetDict (_cg .AP );if !_cf {continue ;};_be ,_ :=_a .GetDict (_ga .Get ("\u004e"));for _ ,_fa :=range _be .Keys (){_ea :=_fa .String ();if _ ,_fe :=_dcf [_ea ];!_fe {_aa =append (_aa ,_ea );_dcf [_ea ]=struct{}{};
};};_aaa ,_ :=_a .GetDict (_ga .Get ("\u0044"));for _ ,_ab :=range _aaa .Keys (){_db :=_ab .String ();if _ ,_dde :=_dcf [_db ];!_dde {_aa =append (_aa ,_db );_dcf [_db ]=struct{}{};};};};_ec :=fieldValue {Name :_ca ,Value :_bc ,Options :_aa };_aef =append (_aef ,_ec );
};_eec :=FieldData {_ae :_aef };return &_eec ,nil ;};