//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package fjson provides support for loading PDF form field data from JSON data/files.
package fjson ;import (_f "encoding/json";_b "github.com/unidoc/unipdf/v3/common";_c "github.com/unidoc/unipdf/v3/core";_de "github.com/unidoc/unipdf/v3/model";_e "io";_d "os";);

// FieldImageValues implements model.FieldImageProvider interface.
func (_cac *FieldData )FieldImageValues ()(map[string ]*_de .Image ,error ){_gdf :=make (map[string ]*_de .Image );for _ ,_dga :=range _cac ._ca {if _dga .ImageValue !=nil {_gdf [_dga .Name ]=_dga .ImageValue ;};};return _gdf ,nil ;};

// FieldValues implements model.FieldValueProvider interface.
func (_aa *FieldData )FieldValues ()(map[string ]_c .PdfObject ,error ){_gdc :=make (map[string ]_c .PdfObject );for _ ,_dac :=range _aa ._ca {if len (_dac .Value )> 0{_gdc [_dac .Name ]=_c .MakeString (_dac .Value );};};return _gdc ,nil ;};

// LoadFromPDFFile loads form field data from a PDF file.
func LoadFromPDFFile (filePath string )(*FieldData ,error ){_bdd ,_edg :=_d .Open (filePath );if _edg !=nil {return nil ,_edg ;};defer _bdd .Close ();return LoadFromPDF (_bdd );};

// LoadFromJSONFile loads form field data from a JSON file.
func LoadFromJSONFile (filePath string )(*FieldData ,error ){_gd ,_dd :=_d .Open (filePath );if _dd !=nil {return nil ,_dd ;};defer _gd .Close ();return LoadFromJSON (_gd );};

// SetImageFromFile assign image file to a specific field identified by fieldName.
func (_af *FieldData )SetImageFromFile (fieldName string ,imagePath string ,opt []string )error {_ebg ,_abe :=_d .Open (imagePath );if _abe !=nil {return _abe ;};defer _ebg .Close ();_cc ,_abe :=_de .ImageHandling .Read (_ebg );if _abe !=nil {_b .Log .Error ("\u0045\u0072\u0072or\u0020\u006c\u006f\u0061\u0064\u0069\u006e\u0067\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0073",_abe );
return _abe ;};return _af .SetImage (fieldName ,_cc ,opt );};

// SetImage assign model.Image to a specific field identified by fieldName.
func (_ga *FieldData )SetImage (fieldName string ,img *_de .Image ,opt []string )error {_gaf :=fieldValue {Name :fieldName ,ImageValue :img ,Options :opt };_ga ._ca =append (_ga ._ca ,_gaf );return nil ;};

// FieldData represents form field data loaded from JSON file.
type FieldData struct{_ca []fieldValue };

// LoadFromPDF loads form field data from a PDF.
func LoadFromPDF (rs _e .ReadSeeker )(*FieldData ,error ){_da ,_df :=_de .NewPdfReader (rs );if _df !=nil {return nil ,_df ;};if _da .AcroForm ==nil {return nil ,nil ;};var _ba []fieldValue ;_ea :=_da .AcroForm .AllFields ();for _ ,_bc :=range _ea {var _ead []string ;
_a :=make (map[string ]struct{});_eaf ,_ee :=_bc .FullName ();if _ee !=nil {return nil ,_ee ;};if _bd ,_ab :=_bc .V .(*_c .PdfObjectString );_ab {_ba =append (_ba ,fieldValue {Name :_eaf ,Value :_bd .Decoded ()});continue ;};var _bf string ;for _ ,_dg :=range _bc .Annotations {_bg ,_ebe :=_c .GetName (_dg .AS );
if _ebe {_bf =_bg .String ();};_fa ,_dgb :=_c .GetDict (_dg .AP );if !_dgb {continue ;};_bfa ,_ :=_c .GetDict (_fa .Get ("\u004e"));for _ ,_gb :=range _bfa .Keys (){_gge :=_gb .String ();if _ ,_ed :=_a [_gge ];!_ed {_ead =append (_ead ,_gge );_a [_gge ]=struct{}{};
};};_ce ,_ :=_c .GetDict (_fa .Get ("\u0044"));for _ ,_cec :=range _ce .Keys (){_dfa :=_cec .String ();if _ ,_gf :=_a [_dfa ];!_gf {_ead =append (_ead ,_dfa );_a [_dfa ]=struct{}{};};};};_gged :=fieldValue {Name :_eaf ,Value :_bf ,Options :_ead };_ba =append (_ba ,_gged );
};_ggb :=FieldData {_ca :_ba };return &_ggb ,nil ;};

// LoadFromJSON loads JSON form data from `r`.
func LoadFromJSON (r _e .Reader )(*FieldData ,error ){var _cf FieldData ;_bb :=_f .NewDecoder (r ).Decode (&_cf ._ca );if _bb !=nil {return nil ,_bb ;};return &_cf ,nil ;};type fieldValue struct{Name string `json:"name"`;Value string `json:"value"`;ImageValue *_de .Image `json:"-"`;


// Options lists allowed values if present.
Options []string `json:"options,omitempty"`;};

// JSON returns the field data as a string in JSON format.
func (_ef FieldData )JSON ()(string ,error ){_daa ,_gdg :=_f .MarshalIndent (_ef ._ca ,"","\u0020\u0020\u0020\u0020");return string (_daa ),_gdg ;};