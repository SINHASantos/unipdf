//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package fjson provides support for loading PDF form field data from JSON data/files.
package fjson ;import (_f "encoding/json";_df "github.com/unidoc/unipdf/v3/common";_g "github.com/unidoc/unipdf/v3/core";_be "github.com/unidoc/unipdf/v3/model";_b "io";_e "os";);

// LoadFromPDF loads form field data from a PDF.
func LoadFromPDF (rs _b .ReadSeeker )(*FieldData ,error ){_a ,_dg :=_be .NewPdfReader (rs );if _dg !=nil {return nil ,_dg ;};if _a .AcroForm ==nil {return nil ,nil ;};var _eeb []fieldValue ;_gb :=_a .AcroForm .AllFields ();for _ ,_ae :=range _gb {var _cd []string ;
_ec :=make (map[string ]struct{});_ab ,_gc :=_ae .FullName ();if _gc !=nil {return nil ,_gc ;};if _dfc ,_bb :=_ae .V .(*_g .PdfObjectString );_bb {_eeb =append (_eeb ,fieldValue {Name :_ab ,Value :_dfc .Decoded ()});continue ;};var _dfe string ;for _ ,_aeg :=range _ae .Annotations {_ad ,_eebe :=_g .GetName (_aeg .AS );
if _eebe {_dfe =_ad .String ();};_gba ,_gd :=_g .GetDict (_aeg .AP );if !_gd {continue ;};_eg ,_ :=_g .GetDict (_gba .Get ("\u004e"));for _ ,_af :=range _eg .Keys (){_eb :=_af .String ();if _ ,_aca :=_ec [_eb ];!_aca {_cd =append (_cd ,_eb );_ec [_eb ]=struct{}{};
};};_dgb ,_ :=_g .GetDict (_gba .Get ("\u0044"));for _ ,_aa :=range _dgb .Keys (){_fff :=_aa .String ();if _ ,_fe :=_ec [_fff ];!_fe {_cd =append (_cd ,_fff );_ec [_fff ]=struct{}{};};};};_egb :=fieldValue {Name :_ab ,Value :_dfe ,Options :_cd };_eeb =append (_eeb ,_egb );
};_ebe :=FieldData {_bec :_eeb };return &_ebe ,nil ;};

// LoadFromJSON loads JSON form data from `r`.
func LoadFromJSON (r _b .Reader )(*FieldData ,error ){var _fa FieldData ;_fb :=_f .NewDecoder (r ).Decode (&_fa ._bec );if _fb !=nil {return nil ,_fb ;};return &_fa ,nil ;};

// FieldImageValues implements model.FieldImageProvider interface.
func (_gf *FieldData )FieldImageValues ()(map[string ]*_be .Image ,error ){_fc :=make (map[string ]*_be .Image );for _ ,_eba :=range _gf ._bec {if _eba .ImageValue !=nil {_fc [_eba .Name ]=_eba .ImageValue ;};};return _fc ,nil ;};

// LoadFromJSONFile loads form field data from a JSON file.
func LoadFromJSONFile (filePath string )(*FieldData ,error ){_ee ,_ff :=_e .Open (filePath );if _ff !=nil {return nil ,_ff ;};defer _ee .Close ();return LoadFromJSON (_ee );};

// FieldValues implements model.FieldValueProvider interface.
func (_fd *FieldData )FieldValues ()(map[string ]_g .PdfObject ,error ){_ga :=make (map[string ]_g .PdfObject );for _ ,_gecg :=range _fd ._bec {if len (_gecg .Value )> 0{_ga [_gecg .Name ]=_g .MakeString (_gecg .Value );};};return _ga ,nil ;};

// SetImage assign model.Image to a specific field identified by fieldName.
func (_cc *FieldData )SetImage (fieldName string ,img *_be .Image ,opt []string )error {_cac :=fieldValue {Name :fieldName ,ImageValue :img ,Options :opt };_cc ._bec =append (_cc ._bec ,_cac );return nil ;};

// LoadFromPDFFile loads form field data from a PDF file.
func LoadFromPDFFile (filePath string )(*FieldData ,error ){_cb ,_bc :=_e .Open (filePath );if _bc !=nil {return nil ,_bc ;};defer _cb .Close ();return LoadFromPDF (_cb );};

// JSON returns the field data as a string in JSON format.
func (_ge FieldData )JSON ()(string ,error ){_bcg ,_gec :=_f .MarshalIndent (_ge ._bec ,"","\u0020\u0020\u0020\u0020");return string (_bcg ),_gec ;};type fieldValue struct{Name string `json:"name"`;Value string `json:"value"`;ImageValue *_be .Image `json:"-"`;


// Options lists allowed values if present.
Options []string `json:"options,omitempty"`;};

// FieldData represents form field data loaded from JSON file.
type FieldData struct{_bec []fieldValue };

// SetImageFromFile assign image file to a specific field identified by fieldName.
func (_da *FieldData )SetImageFromFile (fieldName string ,imagePath string ,opt []string )error {_cg ,_bg :=_e .Open (imagePath );if _bg !=nil {return _bg ;};defer _cg .Close ();_ag ,_bg :=_be .ImageHandling .Read (_cg );if _bg !=nil {_df .Log .Error ("\u0045\u0072\u0072or\u0020\u006c\u006f\u0061\u0064\u0069\u006e\u0067\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0073",_bg );
return _bg ;};return _da .SetImage (fieldName ,_ag ,opt );};