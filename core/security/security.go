//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package security ;import (_cf "bytes";_b "crypto/aes";_f "crypto/cipher";_eg "crypto/md5";_c "crypto/rand";_bd "crypto/rc4";_a "crypto/sha256";_e "crypto/sha512";_dc "encoding/binary";_fg "errors";_g "fmt";_ab "github.com/unidoc/unipdf/v3/common";_df "hash";
_db "io";_fgb "math";);

// StdHandler is an interface for standard security handlers.
type StdHandler interface{

// GenerateParams uses owner and user passwords to set encryption parameters and generate an encryption key.
// It assumes that R, P and EncryptMetadata are already set.
GenerateParams (_egg *StdEncryptDict ,_aa ,_baf []byte )([]byte ,error );

// Authenticate uses encryption dictionary parameters and the password to calculate
// the document encryption key. It also returns permissions that should be granted to a user.
// In case of failed authentication, it returns empty key and zero permissions with no error.
Authenticate (_ga *StdEncryptDict ,_ff []byte )([]byte ,Permissions ,error );};var _ StdHandler =stdHandlerR4 {};func (_eggg stdHandlerR4 )alg3Key (R int ,_ccd []byte )[]byte {_gec :=_eg .New ();_de :=_eggg .paddedPass (_ccd );_gec .Write (_de );if R >=3{for _bca :=0;
_bca < 50;_bca ++{_fd :=_gec .Sum (nil );_gec =_eg .New ();_gec .Write (_fd );};};_cfg :=_gec .Sum (nil );if R ==2{_cfg =_cfg [0:5];}else {_cfg =_cfg [0:_eggg .Length /8];};return _cfg ;};func (stdHandlerR4 )paddedPass (_afc []byte )[]byte {_adb :=make ([]byte ,32);
_gbc :=copy (_adb ,_afc );for ;_gbc < 32;_gbc ++{_adb [_gbc ]=_ggd [_gbc -len (_afc )];};return _adb ;};

// Authenticate implements StdHandler interface.
func (_deg stdHandlerR4 )Authenticate (d *StdEncryptDict ,pass []byte )([]byte ,Permissions ,error ){_ab .Log .Trace ("\u0044\u0065b\u0075\u0067\u0067\u0069n\u0067\u0020a\u0075\u0074\u0068\u0065\u006e\u0074\u0069\u0063a\u0074\u0069\u006f\u006e\u0020\u002d\u0020\u006f\u0077\u006e\u0065\u0072 \u0070\u0061\u0073\u0073");
_dfe ,_adbc :=_deg .alg7 (d ,pass );if _adbc !=nil {return nil ,0,_adbc ;};if _dfe !=nil {_ab .Log .Trace ("\u0074h\u0069\u0073\u002e\u0061u\u0074\u0068\u0065\u006e\u0074i\u0063a\u0074e\u0064\u0020\u003d\u0020\u0054\u0072\u0075e");return _dfe ,PermOwner ,nil ;
};_ab .Log .Trace ("\u0044\u0065bu\u0067\u0067\u0069n\u0067\u0020\u0061\u0075the\u006eti\u0063\u0061\u0074\u0069\u006f\u006e\u0020- \u0075\u0073\u0065\u0072\u0020\u0070\u0061s\u0073");_dfe ,_adbc =_deg .alg6 (d ,pass );if _adbc !=nil {return nil ,0,_adbc ;
};if _dfe !=nil {_ab .Log .Trace ("\u0074h\u0069\u0073\u002e\u0061u\u0074\u0068\u0065\u006e\u0074i\u0063a\u0074e\u0064\u0020\u003d\u0020\u0054\u0072\u0075e");return _dfe ,d .P ,nil ;};return nil ,0,nil ;};func _bfb (_cbc []byte )(_f .Block ,error ){_ce ,_bbc :=_b .NewCipher (_cbc );
if _bbc !=nil {_ab .Log .Error ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0063\u006f\u0075\u006c\u0064\u0020\u006e\u006f\u0074\u0020\u0063\u0072\u0065\u0061\u0074\u0065\u0020A\u0045\u0053\u0020\u0063\u0069p\u0068\u0065r\u003a\u0020\u0025\u0076",_bbc );
return nil ,_bbc ;};return _ce ,nil ;};func _fc (_cc _f .Block )*ecb {return &ecb {_ee :_cc ,_gd :_cc .BlockSize ()}};func _eec (_gf _f .Block )_f .BlockMode {return (*ecbDecrypter )(_fc (_gf ))};const (PermOwner =Permissions (_fgb .MaxUint32 );PermPrinting =Permissions (1<<2);
PermModify =Permissions (1<<3);PermExtractGraphics =Permissions (1<<4);PermAnnotate =Permissions (1<<5);PermFillForms =Permissions (1<<8);PermDisabilityExtract =Permissions (1<<9);PermRotateInsert =Permissions (1<<10);PermFullPrintQuality =Permissions (1<<11);
);func (_ed stdHandlerR4 )alg3 (R int ,_ea ,_da []byte )([]byte ,error ){var _eab []byte ;if len (_da )> 0{_eab =_ed .alg3Key (R ,_da );}else {_eab =_ed .alg3Key (R ,_ea );};_ef ,_eeb :=_bd .NewCipher (_eab );if _eeb !=nil {return nil ,_fg .New ("\u0066a\u0069l\u0065\u0064\u0020\u0072\u0063\u0034\u0020\u0063\u0069\u0070\u0068");
};_egb :=_ed .paddedPass (_ea );_gfe :=make ([]byte ,len (_egb ));_ef .XORKeyStream (_gfe ,_egb );if R >=3{_ae :=make ([]byte ,len (_eab ));for _ccc :=0;_ccc < 19;_ccc ++{for _be :=0;_be < len (_eab );_be ++{_ae [_be ]=_eab [_be ]^byte (_ccc +1);};_bb ,_egd :=_bd .NewCipher (_ae );
if _egd !=nil {return nil ,_fg .New ("\u0066a\u0069l\u0065\u0064\u0020\u0072\u0063\u0034\u0020\u0063\u0069\u0070\u0068");};_bb .XORKeyStream (_gfe ,_gfe );};};return _gfe ,nil ;};const _ggd ="\x28\277\116\136\x4e\x75\x8a\x41\x64\000\x4e\x56\377"+"\xfa\001\010\056\x2e\x00\xb6\xd0\x68\076\x80\x2f\014"+"\251\xfe\x64\x53\x69\172";
func _gc (_fe _f .Block )_f .BlockMode {return (*ecbEncrypter )(_fc (_fe ))};

// GenerateParams generates and sets O and U parameters for the encryption dictionary.
// It expects R, P and EncryptMetadata fields to be set.
func (_bf stdHandlerR4 )GenerateParams (d *StdEncryptDict ,opass ,upass []byte )([]byte ,error ){O ,_bbb :=_bf .alg3 (d .R ,upass ,opass );if _bbb !=nil {_ab .Log .Debug ("\u0045R\u0052\u004fR\u003a\u0020\u0045r\u0072\u006f\u0072\u0020\u0067\u0065\u006ee\u0072\u0061\u0074\u0069\u006e\u0067 \u004f\u0020\u0066\u006f\u0072\u0020\u0065\u006e\u0063\u0072\u0079p\u0074\u0069\u006f\u006e\u0020\u0028\u0025\u0073\u0029",_bbb );
return nil ,_bbb ;};d .O =O ;_ab .Log .Trace ("\u0067\u0065\u006e\u0020\u004f\u003a\u0020\u0025\u0020\u0078",O );_ege :=_bf .alg2 (d ,upass );U ,_bbb :=_bf .alg5 (_ege ,upass );if _bbb !=nil {_ab .Log .Debug ("\u0045R\u0052\u004fR\u003a\u0020\u0045r\u0072\u006f\u0072\u0020\u0067\u0065\u006ee\u0072\u0061\u0074\u0069\u006e\u0067 \u004f\u0020\u0066\u006f\u0072\u0020\u0065\u006e\u0063\u0072\u0079p\u0074\u0069\u006f\u006e\u0020\u0028\u0025\u0073\u0029",_bbb );
return nil ,_bbb ;};d .U =U ;_ab .Log .Trace ("\u0067\u0065\u006e\u0020\u0055\u003a\u0020\u0025\u0020\u0078",U );return _ege ,nil ;};func (_egc stdHandlerR6 )alg8 (_dff *StdEncryptDict ,_ead []byte ,_ffe []byte )error {if _aaa :=_cb ("\u0061\u006c\u0067\u0038","\u004b\u0065\u0079",32,_ead );
_aaa !=nil {return _aaa ;};var _cdc [16]byte ;if _ ,_fgd :=_db .ReadFull (_c .Reader ,_cdc [:]);_fgd !=nil {return _fgd ;};_cgc :=_cdc [0:8];_fdc :=_cdc [8:16];_aaf :=make ([]byte ,len (_ffe )+len (_cgc ));_adcb :=copy (_aaf ,_ffe );copy (_aaf [_adcb :],_cgc );
_dee ,_gfd :=_egc .alg2b (_dff .R ,_aaf ,_ffe ,nil );if _gfd !=nil {return _gfd ;};U :=make ([]byte ,len (_dee )+len (_cgc )+len (_fdc ));_adcb =copy (U ,_dee [:32]);_adcb +=copy (U [_adcb :],_cgc );copy (U [_adcb :],_fdc );_dff .U =U ;_adcb =len (_ffe );
copy (_aaf [_adcb :],_fdc );_dee ,_gfd =_egc .alg2b (_dff .R ,_aaf ,_ffe ,nil );if _gfd !=nil {return _gfd ;};_bbf ,_gfd :=_bfb (_dee [:32]);if _gfd !=nil {return _gfd ;};_aaca :=make ([]byte ,_b .BlockSize );_ffa :=_f .NewCBCEncrypter (_bbf ,_aaca );UE :=make ([]byte ,32);
_ffa .CryptBlocks (UE ,_ead [:32]);_dff .UE =UE ;return nil ;};func (_egf stdHandlerR4 )alg7 (_dcc *StdEncryptDict ,_baa []byte )([]byte ,error ){_acd :=_egf .alg3Key (_dcc .R ,_baa );_gbfg :=make ([]byte ,len (_dcc .O ));if _dcc .R ==2{_bea ,_ag :=_bd .NewCipher (_acd );
if _ag !=nil {return nil ,_fg .New ("\u0066\u0061\u0069\u006c\u0065\u0064\u0020\u0063\u0069\u0070\u0068\u0065\u0072");};_bea .XORKeyStream (_gbfg ,_dcc .O );}else if _dcc .R >=3{_dfg :=append ([]byte {},_dcc .O ...);for _cbe :=0;_cbe < 20;_cbe ++{_fad :=append ([]byte {},_acd ...);
for _aad :=0;_aad < len (_acd );_aad ++{_fad [_aad ]^=byte (19-_cbe );};_ade ,_bg :=_bd .NewCipher (_fad );if _bg !=nil {return nil ,_fg .New ("\u0066\u0061\u0069\u006c\u0065\u0064\u0020\u0063\u0069\u0070\u0068\u0065\u0072");};_ade .XORKeyStream (_gbfg ,_dfg );
_dfg =append ([]byte {},_gbfg ...);};}else {return nil ,_fg .New ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020R");};_egbe ,_fff :=_egf .alg6 (_dcc ,_gbfg );if _fff !=nil {return nil ,nil ;};return _egbe ,nil ;};

// GenerateParams is the algorithm opposite to alg2a (R>=5).
// It generates U,O,UE,OE,Perms fields using AESv3 encryption.
// There is no algorithm number assigned to this function in the spec.
// It expects R, P and EncryptMetadata fields to be set.
func (_cad stdHandlerR6 )GenerateParams (d *StdEncryptDict ,opass ,upass []byte )([]byte ,error ){_gfdf :=make ([]byte ,32);if _ ,_bgd :=_db .ReadFull (_c .Reader ,_gfdf );_bgd !=nil {return nil ,_bgd ;};d .U =nil ;d .O =nil ;d .UE =nil ;d .OE =nil ;d .Perms =nil ;
if len (upass )> 127{upass =upass [:127];};if len (opass )> 127{opass =opass [:127];};if _degd :=_cad .alg8 (d ,_gfdf ,upass );_degd !=nil {return nil ,_degd ;};if _aga :=_cad .alg9 (d ,_gfdf ,opass );_aga !=nil {return nil ,_aga ;};if d .R ==5{return _gfdf ,nil ;
};if _cbb :=_cad .alg10 (d ,_gfdf );_cbb !=nil {return nil ,_cbb ;};return _gfdf ,nil ;};type ecb struct{_ee _f .Block ;_gd int ;};func (_gfa stdHandlerR4 )alg4 (_aeg []byte ,_faf []byte )([]byte ,error ){_fedg ,_eaf :=_bd .NewCipher (_aeg );if _eaf !=nil {return nil ,_fg .New ("\u0066a\u0069l\u0065\u0064\u0020\u0072\u0063\u0034\u0020\u0063\u0069\u0070\u0068");
};_dcb :=[]byte (_ggd );_ac :=make ([]byte ,len (_dcb ));_fedg .XORKeyStream (_ac ,_dcb );return _ac ,nil ;};

// Allowed checks if a set of permissions can be granted.
func (_ggg Permissions )Allowed (p2 Permissions )bool {return _ggg &p2 ==p2 };func (_afb stdHandlerR6 )alg10 (_gcb *StdEncryptDict ,_bgc []byte )error {if _geg :=_cb ("\u0061\u006c\u00671\u0030","\u004b\u0065\u0079",32,_bgc );_geg !=nil {return _geg ;};
_fde :=uint64 (uint32 (_gcb .P ))|(_fgb .MaxUint32 <<32);Perms :=make ([]byte ,16);_dc .LittleEndian .PutUint64 (Perms [:8],_fde );if _gcb .EncryptMetadata {Perms [8]='T';}else {Perms [8]='F';};copy (Perms [9:12],"\u0061\u0064\u0062");if _ ,_abd :=_db .ReadFull (_c .Reader ,Perms [12:16]);
_abd !=nil {return _abd ;};_fcf ,_edcd :=_bfb (_bgc [:32]);if _edcd !=nil {return _edcd ;};_abf :=_gc (_fcf );_abf .CryptBlocks (Perms ,Perms );_gcb .Perms =Perms [:16];return nil ;};func (_afcf stdHandlerR4 )alg6 (_fab *StdEncryptDict ,_ada []byte )([]byte ,error ){var (_bda []byte ;
_dfd error ;);_adag :=_afcf .alg2 (_fab ,_ada );if _fab .R ==2{_bda ,_dfd =_afcf .alg4 (_adag ,_ada );}else if _fab .R >=3{_bda ,_dfd =_afcf .alg5 (_adag ,_ada );}else {return nil ,_fg .New ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020R");};if _dfd !=nil {return nil ,_dfd ;
};_ab .Log .Trace ("\u0063\u0068\u0065\u0063k:\u0020\u0025\u0020\u0078\u0020\u003d\u003d\u0020\u0025\u0020\u0078\u0020\u003f",string (_bda ),string (_fab .U ));_fbc :=_bda ;_defc :=_fab .U ;if _fab .R >=3{if len (_fbc )> 16{_fbc =_fbc [0:16];};if len (_defc )> 16{_defc =_defc [0:16];
};};if !_cf .Equal (_fbc ,_defc ){return nil ,nil ;};return _adag ,nil ;};func _fbf (_gfee []byte )([]byte ,error ){_age :=_a .New ();_age .Write (_gfee );return _age .Sum (nil ),nil ;};func (_gaeg stdHandlerR6 )alg2b (R int ,_adf ,_adc ,_ffcf []byte )([]byte ,error ){if R ==5{return _fbf (_adf );
};return _bga (_adf ,_adc ,_ffcf );};

// NewHandlerR4 creates a new standard security handler for R<=4.
func NewHandlerR4 (id0 string ,length int )StdHandler {return stdHandlerR4 {ID0 :id0 ,Length :length }};

// AuthEvent is an event type that triggers authentication.
type AuthEvent string ;

// Authenticate implements StdHandler interface.
func (_ebe stdHandlerR6 )Authenticate (d *StdEncryptDict ,pass []byte )([]byte ,Permissions ,error ){return _ebe .alg2a (d ,pass );};

// StdEncryptDict is a set of additional fields used in standard encryption dictionary.
type StdEncryptDict struct{R int ;P Permissions ;EncryptMetadata bool ;O ,U []byte ;OE ,UE []byte ;Perms []byte ;};type ecbEncrypter ecb ;var _ StdHandler =stdHandlerR6 {};func (_af *ecbDecrypter )BlockSize ()int {return _af ._gd };func (_ad errInvalidField )Error ()string {return _g .Sprintf ("\u0025s\u003a\u0020e\u0078\u0070\u0065\u0063t\u0065\u0064\u0020%\u0073\u0020\u0066\u0069\u0065\u006c\u0064\u0020\u0074o \u0062\u0065\u0020%\u0064\u0020b\u0079\u0074\u0065\u0073\u002c\u0020g\u006f\u0074 \u0025\u0064",_ad .Func ,_ad .Field ,_ad .Exp ,_ad .Got );
};type stdHandlerR6 struct{};func (_fec stdHandlerR6 )alg13 (_bbad *StdEncryptDict ,_fgc []byte )error {if _ecf :=_cb ("\u0061\u006c\u00671\u0033","\u004b\u0065\u0079",32,_fgc );_ecf !=nil {return _ecf ;};if _ecc :=_cb ("\u0061\u006c\u00671\u0033","\u0050\u0065\u0072m\u0073",16,_bbad .Perms );
_ecc !=nil {return _ecc ;};_agc :=make ([]byte ,16);copy (_agc ,_bbad .Perms [:16]);_bgag ,_bef :=_b .NewCipher (_fgc [:32]);if _bef !=nil {return _bef ;};_dcf :=_eec (_bgag );_dcf .CryptBlocks (_agc ,_agc );if !_cf .Equal (_agc [9:12],[]byte ("\u0061\u0064\u0062")){return _fg .New ("\u0064\u0065\u0063o\u0064\u0065\u0064\u0020p\u0065\u0072\u006d\u0069\u0073\u0073\u0069o\u006e\u0073\u0020\u0061\u0072\u0065\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064");
};_bccb :=Permissions (_dc .LittleEndian .Uint32 (_agc [0:4]));if _bccb !=_bbad .P {return _fg .New ("\u0070\u0065r\u006d\u0069\u0073\u0073\u0069\u006f\u006e\u0073\u0020\u0076\u0061\u006c\u0069\u0064\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0061il\u0065\u0064");
};var _dab bool ;if _agc [8]=='T'{_dab =true ;}else if _agc [8]=='F'{_dab =false ;}else {return _fg .New ("\u0064\u0065\u0063\u006f\u0064\u0065\u0064 \u006d\u0065\u0074a\u0064\u0061\u0074\u0061 \u0065\u006e\u0063\u0072\u0079\u0070\u0074\u0069\u006f\u006e\u0020\u0066\u006c\u0061\u0067\u0020\u0069\u0073\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064");
};if _dab !=_bbad .EncryptMetadata {return _fg .New ("\u006d\u0065t\u0061\u0064\u0061\u0074a\u0020\u0065n\u0063\u0072\u0079\u0070\u0074\u0069\u006f\u006e \u0076\u0061\u006c\u0069\u0064\u0061\u0074\u0069\u006f\u006e\u0020\u0066a\u0069\u006c\u0065\u0064");
};return nil ;};func (_bc stdHandlerR4 )alg2 (_gac *StdEncryptDict ,_bde []byte )[]byte {_ab .Log .Trace ("\u0061\u006c\u0067\u0032");_gbf :=_bc .paddedPass (_bde );_ccf :=_eg .New ();_ccf .Write (_gbf );_ccf .Write (_gac .O );var _aac [4]byte ;_dc .LittleEndian .PutUint32 (_aac [:],uint32 (_gac .P ));
_ccf .Write (_aac [:]);_ab .Log .Trace ("\u0067o\u0020\u0050\u003a\u0020\u0025\u0020x",_aac );_ccf .Write ([]byte (_bc .ID0 ));_ab .Log .Trace ("\u0074\u0068\u0069\u0073\u002e\u0052\u0020\u003d\u0020\u0025d\u0020\u0065\u006e\u0063\u0072\u0079\u0070t\u004d\u0065\u0074\u0061\u0064\u0061\u0074\u0061\u0020\u0025\u0076",_gac .R ,_gac .EncryptMetadata );
if (_gac .R >=4)&&!_gac .EncryptMetadata {_ccf .Write ([]byte {0xff,0xff,0xff,0xff});};_aae :=_ccf .Sum (nil );if _gac .R >=3{_ccf =_eg .New ();for _ffb :=0;_ffb < 50;_ffb ++{_ccf .Reset ();_ccf .Write (_aae [0:_bc .Length /8]);_aae =_ccf .Sum (nil );};
};if _gac .R >=3{return _aae [0:_bc .Length /8];};return _aae [0:5];};func (_eda stdHandlerR6 )alg9 (_dffc *StdEncryptDict ,_ddb []byte ,_eece []byte )error {if _dbgb :=_cb ("\u0061\u006c\u0067\u0039","\u004b\u0065\u0079",32,_ddb );_dbgb !=nil {return _dbgb ;
};if _abb :=_cb ("\u0061\u006c\u0067\u0039","\u0055",48,_dffc .U );_abb !=nil {return _abb ;};var _dgg [16]byte ;if _ ,_dag :=_db .ReadFull (_c .Reader ,_dgg [:]);_dag !=nil {return _dag ;};_dggb :=_dgg [0:8];_dbgd :=_dgg [8:16];_eca :=_dffc .U [:48];_dce :=make ([]byte ,len (_eece )+len (_dggb )+len (_eca ));
_bgf :=copy (_dce ,_eece );_bgf +=copy (_dce [_bgf :],_dggb );_bgf +=copy (_dce [_bgf :],_eca );_fadd ,_ggcg :=_eda .alg2b (_dffc .R ,_dce ,_eece ,_eca );if _ggcg !=nil {return _ggcg ;};O :=make ([]byte ,len (_fadd )+len (_dggb )+len (_dbgd ));_bgf =copy (O ,_fadd [:32]);
_bgf +=copy (O [_bgf :],_dggb );_bgf +=copy (O [_bgf :],_dbgd );_dffc .O =O ;_bgf =len (_eece );_bgf +=copy (_dce [_bgf :],_dbgd );_fadd ,_ggcg =_eda .alg2b (_dffc .R ,_dce ,_eece ,_eca );if _ggcg !=nil {return _ggcg ;};_facg ,_ggcg :=_bfb (_fadd [:32]);
if _ggcg !=nil {return _ggcg ;};_fedf :=make ([]byte ,_b .BlockSize );_cgg :=_f .NewCBCEncrypter (_facg ,_fedf );OE :=make ([]byte ,32);_cgg .CryptBlocks (OE ,_ddb [:32]);_dffc .OE =OE ;return nil ;};func (_cd *ecbEncrypter )BlockSize ()int {return _cd ._gd };
const (EventDocOpen =AuthEvent ("\u0044o\u0063\u004f\u0070\u0065\u006e");EventEFOpen =AuthEvent ("\u0045\u0046\u004f\u0070\u0065\u006e"););

// Permissions is a bitmask of access permissions for a PDF file.
type Permissions uint32 ;type stdHandlerR4 struct{Length int ;ID0 string ;};func _bga (_gff ,_dcce ,_aedb []byte )([]byte ,error ){var (_aee ,_beg ,_fbb _df .Hash ;);_aee =_a .New ();_aege :=make ([]byte ,64);_gfed :=_aee ;_gfed .Write (_gff );K :=_gfed .Sum (_aege [:0]);
_bccg :=make ([]byte ,64*(127+64+48));_beb :=func (_bcb int )([]byte ,error ){_bbcb :=len (_dcce )+len (K )+len (_aedb );_cfc :=_bccg [:_bbcb ];_bag :=copy (_cfc ,_dcce );_bag +=copy (_cfc [_bag :],K [:]);_bag +=copy (_cfc [_bag :],_aedb );if _bag !=_bbcb {_ab .Log .Error ("E\u0052\u0052\u004f\u0052\u003a\u0020u\u006e\u0065\u0078\u0070\u0065\u0063t\u0065\u0064\u0020\u0072\u006f\u0075\u006ed\u0020\u0069\u006e\u0070\u0075\u0074\u0020\u0073\u0069\u007ae\u002e");
return nil ,_fg .New ("\u0077\u0072\u006f\u006e\u0067\u0020\u0073\u0069\u007a\u0065");};K1 :=_bccg [:_bbcb *64];_edc (K1 ,_bbcb );_fdf ,_gef :=_bfb (K [0:16]);if _gef !=nil {return nil ,_gef ;};_agd :=_f .NewCBCEncrypter (_fdf ,K [16:32]);_agd .CryptBlocks (K1 ,K1 );
E :=K1 ;_dd :=0;for _adbb :=0;_adbb < 16;_adbb ++{_dd +=int (E [_adbb ]%3);};var _ffc _df .Hash ;switch _dd %3{case 0:_ffc =_aee ;case 1:if _beg ==nil {_beg =_e .New384 ();};_ffc =_beg ;case 2:if _fbb ==nil {_fbb =_e .New ();};_ffc =_fbb ;};_ffc .Reset ();
_ffc .Write (E );K =_ffc .Sum (_aege [:0]);return E ,nil ;};for _aec :=0;;{E ,_dfb :=_beb (_aec );if _dfb !=nil {return nil ,_dfb ;};_caf :=E [len (E )-1];_aec ++;if _aec >=64&&_caf <=uint8 (_aec -32){break ;};};return K [:32],nil ;};func (_bdg stdHandlerR6 )alg12 (_egga *StdEncryptDict ,_gcbg []byte )([]byte ,error ){if _aagf :=_cb ("\u0061\u006c\u00671\u0032","\u0055",48,_egga .U );
_aagf !=nil {return nil ,_aagf ;};if _cdg :=_cb ("\u0061\u006c\u00671\u0032","\u004f",48,_egga .O );_cdg !=nil {return nil ,_cdg ;};_eb :=make ([]byte ,len (_gcbg )+8+48);_egec :=copy (_eb ,_gcbg );_egec +=copy (_eb [_egec :],_egga .O [32:40]);_egec +=copy (_eb [_egec :],_egga .U [0:48]);
_fbcb ,_aaea :=_bdg .alg2b (_egga .R ,_eb ,_gcbg ,_egga .U [0:48]);if _aaea !=nil {return nil ,_aaea ;};_fbcb =_fbcb [:32];if !_cf .Equal (_fbcb ,_egga .O [:32]){return nil ,nil ;};return _fbcb ,nil ;};func (_fed *ecbDecrypter )CryptBlocks (dst ,src []byte ){if len (src )%_fed ._gd !=0{_ab .Log .Error ("\u0045\u0052\u0052\u004f\u0052:\u0020\u0045\u0043\u0042\u0020\u0064\u0065\u0063\u0072\u0079\u0070\u0074\u003a \u0069\u006e\u0070\u0075\u0074\u0020\u006e\u006f\u0074\u0020\u0066\u0075\u006c\u006c\u0020\u0062\u006c\u006f\u0063\u006b\u0073");
return ;};if len (dst )< len (src ){_ab .Log .Error ("\u0045R\u0052\u004fR\u003a\u0020\u0045C\u0042\u0020\u0064\u0065\u0063\u0072\u0079p\u0074\u003a\u0020\u006f\u0075\u0074p\u0075\u0074\u0020\u0073\u006d\u0061\u006c\u006c\u0065\u0072\u0020t\u0068\u0061\u006e\u0020\u0069\u006e\u0070\u0075\u0074");
return ;};for len (src )> 0{_fed ._ee .Decrypt (dst ,src [:_fed ._gd ]);src =src [_fed ._gd :];dst =dst [_fed ._gd :];};};type errInvalidField struct{Func string ;Field string ;Exp int ;Got int ;};func (_ba *ecbEncrypter )CryptBlocks (dst ,src []byte ){if len (src )%_ba ._gd !=0{_ab .Log .Error ("\u0045\u0052\u0052\u004f\u0052:\u0020\u0045\u0043\u0042\u0020\u0065\u006e\u0063\u0072\u0079\u0070\u0074\u003a \u0069\u006e\u0070\u0075\u0074\u0020\u006e\u006f\u0074\u0020\u0066\u0075\u006c\u006c\u0020\u0062\u006c\u006f\u0063\u006b\u0073");
return ;};if len (dst )< len (src ){_ab .Log .Error ("\u0045R\u0052\u004fR\u003a\u0020\u0045C\u0042\u0020\u0065\u006e\u0063\u0072\u0079p\u0074\u003a\u0020\u006f\u0075\u0074p\u0075\u0074\u0020\u0073\u006d\u0061\u006c\u006c\u0065\u0072\u0020t\u0068\u0061\u006e\u0020\u0069\u006e\u0070\u0075\u0074");
return ;};for len (src )> 0{_ba ._ee .Encrypt (dst ,src [:_ba ._gd ]);src =src [_ba ._gd :];dst =dst [_ba ._gd :];};};func (_fedgb stdHandlerR6 )alg11 (_gfdc *StdEncryptDict ,_eff []byte )([]byte ,error ){if _eebg :=_cb ("\u0061\u006c\u00671\u0031","\u0055",48,_gfdc .U );
_eebg !=nil {return nil ,_eebg ;};_ffca :=make ([]byte ,len (_eff )+8);_bfd :=copy (_ffca ,_eff );_bfd +=copy (_ffca [_bfd :],_gfdc .U [32:40]);_cggg ,_cfd :=_fedgb .alg2b (_gfdc .R ,_ffca ,_eff ,nil );if _cfd !=nil {return nil ,_cfd ;};_cggg =_cggg [:32];
if !_cf .Equal (_cggg ,_gfdc .U [:32]){return nil ,nil ;};return _cggg ,nil ;};type ecbDecrypter ecb ;func _cb (_ge ,_gb string ,_gg int ,_fa []byte )error {if len (_fa )< _gg {return errInvalidField {Func :_ge ,Field :_gb ,Exp :_gg ,Got :len (_fa )};};
return nil ;};

// NewHandlerR6 creates a new standard security handler for R=5 and R=6.
func NewHandlerR6 ()StdHandler {return stdHandlerR6 {}};func (_acdb stdHandlerR6 )alg2a (_edd *StdEncryptDict ,_dg []byte )([]byte ,Permissions ,error ){if _faa :=_cb ("\u0061\u006c\u00672\u0061","\u004f",48,_edd .O );_faa !=nil {return nil ,0,_faa ;};
if _eac :=_cb ("\u0061\u006c\u00672\u0061","\u0055",48,_edd .U );_eac !=nil {return nil ,0,_eac ;};if len (_dg )> 127{_dg =_dg [:127];};_ca ,_gae :=_acdb .alg12 (_edd ,_dg );if _gae !=nil {return nil ,0,_gae ;};var (_bee []byte ;_ec []byte ;_bad []byte ;
);var _agb Permissions ;if len (_ca )!=0{_agb =PermOwner ;_bba :=make ([]byte ,len (_dg )+8+48);_bgb :=copy (_bba ,_dg );_bgb +=copy (_bba [_bgb :],_edd .O [40:48]);copy (_bba [_bgb :],_edd .U [0:48]);_bee =_bba ;_ec =_edd .OE ;_bad =_edd .U [0:48];}else {_ca ,_gae =_acdb .alg11 (_edd ,_dg );
if _gae ==nil &&len (_ca )==0{_ca ,_gae =_acdb .alg11 (_edd ,[]byte (""));};if _gae !=nil {return nil ,0,_gae ;}else if len (_ca )==0{return nil ,0,nil ;};_agb =_edd .P ;_beaf :=make ([]byte ,len (_dg )+8);_daf :=copy (_beaf ,_dg );copy (_beaf [_daf :],_edd .U [40:48]);
_bee =_beaf ;_ec =_edd .UE ;_bad =nil ;};if _dbg :=_cb ("\u0061\u006c\u00672\u0061","\u004b\u0065\u0079",32,_ec );_dbg !=nil {return nil ,0,_dbg ;};_ec =_ec [:32];_aba ,_gae :=_acdb .alg2b (_edd .R ,_bee ,_dg ,_bad );if _gae !=nil {return nil ,0,_gae ;
};_efc ,_gae :=_b .NewCipher (_aba [:32]);if _gae !=nil {return nil ,0,_gae ;};_bge :=make ([]byte ,_b .BlockSize );_bead :=_f .NewCBCDecrypter (_efc ,_bge );_aed :=make ([]byte ,32);_bead .CryptBlocks (_aed ,_ec );if _edd .R ==5{return _aed ,_agb ,nil ;
};_gae =_acdb .alg13 (_edd ,_aed );if _gae !=nil {return nil ,0,_gae ;};return _aed ,_agb ,nil ;};func _edc (_aag []byte ,_gbcd int ){_bcc :=_gbcd ;for _bcc < len (_aag ){copy (_aag [_bcc :],_aag [:_bcc ]);_bcc *=2;};};func (_dfa stdHandlerR4 )alg5 (_cfgg []byte ,_fea []byte )([]byte ,error ){_cg :=_eg .New ();
_cg .Write ([]byte (_ggd ));_cg .Write ([]byte (_dfa .ID0 ));_cfga :=_cg .Sum (nil );_ab .Log .Trace ("\u0061\u006c\u0067\u0035");_ab .Log .Trace ("\u0065k\u0065\u0079\u003a\u0020\u0025\u0020x",_cfgg );_ab .Log .Trace ("\u0049D\u003a\u0020\u0025\u0020\u0078",_dfa .ID0 );
if len (_cfga )!=16{return nil ,_fg .New ("\u0068a\u0073\u0068\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u006eo\u0074\u0020\u0031\u0036\u0020\u0062\u0079\u0074\u0065\u0073");};_gdc ,_gcg :=_bd .NewCipher (_cfgg );if _gcg !=nil {return nil ,_fg .New ("\u0066a\u0069l\u0065\u0064\u0020\u0072\u0063\u0034\u0020\u0063\u0069\u0070\u0068");
};_ffg :=make ([]byte ,16);_gdc .XORKeyStream (_ffg ,_cfga );_egbg :=make ([]byte ,len (_cfgg ));for _fb :=0;_fb < 19;_fb ++{for _fac :=0;_fac < len (_cfgg );_fac ++{_egbg [_fac ]=_cfgg [_fac ]^byte (_fb +1);};_gdc ,_gcg =_bd .NewCipher (_egbg );if _gcg !=nil {return nil ,_fg .New ("\u0066a\u0069l\u0065\u0064\u0020\u0072\u0063\u0034\u0020\u0063\u0069\u0070\u0068");
};_gdc .XORKeyStream (_ffg ,_ffg );_ab .Log .Trace ("\u0069\u0020\u003d\u0020\u0025\u0064\u002c\u0020\u0065\u006b\u0065\u0079:\u0020\u0025\u0020\u0078",_fb ,_egbg );_ab .Log .Trace ("\u0069\u0020\u003d\u0020\u0025\u0064\u0020\u002d\u003e\u0020\u0025\u0020\u0078",_fb ,_ffg );
};_ggc :=make ([]byte ,32);for _def :=0;_def < 16;_def ++{_ggc [_def ]=_ffg [_def ];};_ ,_gcg =_c .Read (_ggc [16:32]);if _gcg !=nil {return nil ,_fg .New ("\u0066a\u0069\u006c\u0065\u0064 \u0074\u006f\u0020\u0067\u0065n\u0020r\u0061n\u0064\u0020\u006e\u0075\u006d\u0062\u0065r");
};return _ggc ,nil ;};