//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package security ;import (_ac "bytes";_aa "crypto/aes";_f "crypto/cipher";_abd "crypto/md5";_da "crypto/rand";_fe "crypto/rc4";_d "crypto/sha256";_fd "crypto/sha512";_dd "encoding/binary";_e "errors";_b "fmt";_ec "github.com/unidoc/unipdf/v3/common";_ab "hash";
_g "io";_c "math";);func _df (_ad ,_db string ,_fad int ,_dbc []byte )error {if len (_dbc )< _fad {return errInvalidField {Func :_ad ,Field :_db ,Exp :_fad ,Got :len (_dbc )};};return nil ;};func (_abc *ecbEncrypter )CryptBlocks (dst ,src []byte ){if len (src )%_abc ._fg !=0{_ec .Log .Error ("\u0045\u0052\u0052\u004f\u0052:\u0020\u0045\u0043\u0042\u0020\u0065\u006e\u0063\u0072\u0079\u0070\u0074\u003a \u0069\u006e\u0070\u0075\u0074\u0020\u006e\u006f\u0074\u0020\u0066\u0075\u006c\u006c\u0020\u0062\u006c\u006f\u0063\u006b\u0073");
return ;};if len (dst )< len (src ){_ec .Log .Error ("\u0045R\u0052\u004fR\u003a\u0020\u0045C\u0042\u0020\u0065\u006e\u0063\u0072\u0079p\u0074\u003a\u0020\u006f\u0075\u0074p\u0075\u0074\u0020\u0073\u006d\u0061\u006c\u006c\u0065\u0072\u0020t\u0068\u0061\u006e\u0020\u0069\u006e\u0070\u0075\u0074");
return ;};for len (src )> 0{_abc ._gf .Encrypt (dst ,src [:_abc ._fg ]);src =src [_abc ._fg :];dst =dst [_abc ._fg :];};};

// GenerateParams generates and sets O and U parameters for the encryption dictionary.
// It expects R, P and EncryptMetadata fields to be set.
func (_egc stdHandlerR4 )GenerateParams (d *StdEncryptDict ,opass ,upass []byte )([]byte ,error ){O ,_ed :=_egc .alg3 (d .R ,upass ,opass );if _ed !=nil {_ec .Log .Debug ("\u0045R\u0052\u004fR\u003a\u0020\u0045r\u0072\u006f\u0072\u0020\u0067\u0065\u006ee\u0072\u0061\u0074\u0069\u006e\u0067 \u004f\u0020\u0066\u006f\u0072\u0020\u0065\u006e\u0063\u0072\u0079p\u0074\u0069\u006f\u006e\u0020\u0028\u0025\u0073\u0029",_ed );
return nil ,_ed ;};d .O =O ;_ec .Log .Trace ("\u0067\u0065\u006e\u0020\u004f\u003a\u0020\u0025\u0020\u0078",O );_bc :=_egc .alg2 (d ,upass );U ,_ed :=_egc .alg5 (_bc ,upass );if _ed !=nil {_ec .Log .Debug ("\u0045R\u0052\u004fR\u003a\u0020\u0045r\u0072\u006f\u0072\u0020\u0067\u0065\u006ee\u0072\u0061\u0074\u0069\u006e\u0067 \u004f\u0020\u0066\u006f\u0072\u0020\u0065\u006e\u0063\u0072\u0079p\u0074\u0069\u006f\u006e\u0020\u0028\u0025\u0073\u0029",_ed );
return nil ,_ed ;};d .U =U ;_ec .Log .Trace ("\u0067\u0065\u006e\u0020\u0055\u003a\u0020\u0025\u0020\u0078",U );return _bc ,nil ;};func (_bff *ecbDecrypter )CryptBlocks (dst ,src []byte ){if len (src )%_bff ._fg !=0{_ec .Log .Error ("\u0045\u0052\u0052\u004f\u0052:\u0020\u0045\u0043\u0042\u0020\u0064\u0065\u0063\u0072\u0079\u0070\u0074\u003a \u0069\u006e\u0070\u0075\u0074\u0020\u006e\u006f\u0074\u0020\u0066\u0075\u006c\u006c\u0020\u0062\u006c\u006f\u0063\u006b\u0073");
return ;};if len (dst )< len (src ){_ec .Log .Error ("\u0045R\u0052\u004fR\u003a\u0020\u0045C\u0042\u0020\u0064\u0065\u0063\u0072\u0079p\u0074\u003a\u0020\u006f\u0075\u0074p\u0075\u0074\u0020\u0073\u006d\u0061\u006c\u006c\u0065\u0072\u0020t\u0068\u0061\u006e\u0020\u0069\u006e\u0070\u0075\u0074");
return ;};for len (src )> 0{_bff ._gf .Decrypt (dst ,src [:_bff ._fg ]);src =src [_bff ._fg :];dst =dst [_bff ._fg :];};};

// StdHandler is an interface for standard security handlers.
type StdHandler interface{

// GenerateParams uses owner and user passwords to set encryption parameters and generate an encryption key.
// It assumes that R, P and EncryptMetadata are already set.
GenerateParams (_dab *StdEncryptDict ,_cd ,_caa []byte )([]byte ,error );

// Authenticate uses encryption dictionary parameters and the password to calculate
// the document encryption key. It also returns permissions that should be granted to a user.
// In case of failed authentication, it returns empty key and zero permissions with no error.
Authenticate (_ce *StdEncryptDict ,_cb []byte )([]byte ,Permissions ,error );};func (_eea stdHandlerR4 )alg2 (_ccg *StdEncryptDict ,_af []byte )[]byte {_ec .Log .Trace ("\u0061\u006c\u0067\u0032");_aff :=_eea .paddedPass (_af );_ea :=_abd .New ();_ea .Write (_aff );
_ea .Write (_ccg .O );var _dbf [4]byte ;_dd .LittleEndian .PutUint32 (_dbf [:],uint32 (_ccg .P ));_ea .Write (_dbf [:]);_ec .Log .Trace ("\u0067o\u0020\u0050\u003a\u0020\u0025\u0020x",_dbf );_ea .Write ([]byte (_eea .ID0 ));_ec .Log .Trace ("\u0074\u0068\u0069\u0073\u002e\u0052\u0020\u003d\u0020\u0025d\u0020\u0065\u006e\u0063\u0072\u0079\u0070t\u004d\u0065\u0074\u0061\u0064\u0061\u0074\u0061\u0020\u0025\u0076",_ccg .R ,_ccg .EncryptMetadata );
if (_ccg .R >=4)&&!_ccg .EncryptMetadata {_ea .Write ([]byte {0xff,0xff,0xff,0xff});};_de :=_ea .Sum (nil );if _ccg .R >=3{_ea =_abd .New ();for _fc :=0;_fc < 50;_fc ++{_ea .Reset ();_ea .Write (_de [0:_eea .Length /8]);_de =_ea .Sum (nil );};};if _ccg .R >=3{return _de [0:_eea .Length /8];
};return _de [0:5];};func (_fdg *ecbEncrypter )BlockSize ()int {return _fdg ._fg };type errInvalidField struct{Func string ;Field string ;Exp int ;Got int ;};

// AuthEvent is an event type that triggers authentication.
type AuthEvent string ;func (_efge stdHandlerR6 )alg10 (_ffd *StdEncryptDict ,_cgc []byte )error {if _fgc :=_df ("\u0061\u006c\u00671\u0030","\u004b\u0065\u0079",32,_cgc );_fgc !=nil {return _fgc ;};_aaae :=uint64 (uint32 (_ffd .P ))|(_c .MaxUint32 <<32);
Perms :=make ([]byte ,16);_dd .LittleEndian .PutUint64 (Perms [:8],_aaae );if _ffd .EncryptMetadata {Perms [8]='T';}else {Perms [8]='F';};copy (Perms [9:12],"\u0061\u0064\u0062");if _ ,_faa :=_g .ReadFull (_da .Reader ,Perms [12:16]);_faa !=nil {return _faa ;
};_ccag ,_efeg :=_bcc (_cgc [:32]);if _efeg !=nil {return _efeg ;};_dcb :=_bf (_ccag );_dcb .CryptBlocks (Perms ,Perms );_ffd .Perms =Perms [:16];return nil ;};func (_be errInvalidField )Error ()string {return _b .Sprintf ("\u0025s\u003a\u0020e\u0078\u0070\u0065\u0063t\u0065\u0064\u0020%\u0073\u0020\u0066\u0069\u0065\u006c\u0064\u0020\u0074o \u0062\u0065\u0020%\u0064\u0020b\u0079\u0074\u0065\u0073\u002c\u0020g\u006f\u0074 \u0025\u0064",_be .Func ,_be .Field ,_be .Exp ,_be .Got );
};

// NewHandlerR6 creates a new standard security handler for R=5 and R=6.
func NewHandlerR6 ()StdHandler {return stdHandlerR6 {}};

// StdEncryptDict is a set of additional fields used in standard encryption dictionary.
type StdEncryptDict struct{R int ;P Permissions ;EncryptMetadata bool ;O ,U []byte ;OE ,UE []byte ;Perms []byte ;};func _fa (_dg _f .Block )*ecb {return &ecb {_gf :_dg ,_fg :_dg .BlockSize ()}};func _afc (_aeg []byte )([]byte ,error ){_ccc :=_d .New ();
_ccc .Write (_aeg );return _ccc .Sum (nil ),nil };const (PermOwner =Permissions (_c .MaxUint32 );PermPrinting =Permissions (1<<2);PermModify =Permissions (1<<3);PermExtractGraphics =Permissions (1<<4);PermAnnotate =Permissions (1<<5);PermFillForms =Permissions (1<<8);
PermDisabilityExtract =Permissions (1<<9);PermRotateInsert =Permissions (1<<10);PermFullPrintQuality =Permissions (1<<11););func (_ebd stdHandlerR6 )alg2a (_eeaa *StdEncryptDict ,_ege []byte )([]byte ,Permissions ,error ){if _egeg :=_df ("\u0061\u006c\u00672\u0061","\u004f",48,_eeaa .O );
_egeg !=nil {return nil ,0,_egeg ;};if _dae :=_df ("\u0061\u006c\u00672\u0061","\u0055",48,_eeaa .U );_dae !=nil {return nil ,0,_dae ;};if len (_ege )> 127{_ege =_ege [:127];};_dfe ,_cbg :=_ebd .alg12 (_eeaa ,_ege );if _cbg !=nil {return nil ,0,_cbg ;};
var (_abgb []byte ;_beeg []byte ;_aeb []byte ;);var _gcf Permissions ;if len (_dfe )!=0{_gcf =PermOwner ;_egcf :=make ([]byte ,len (_ege )+8+48);_gdc :=copy (_egcf ,_ege );_gdc +=copy (_egcf [_gdc :],_eeaa .O [40:48]);copy (_egcf [_gdc :],_eeaa .U [0:48]);
_abgb =_egcf ;_beeg =_eeaa .OE ;_aeb =_eeaa .U [0:48];}else {_dfe ,_cbg =_ebd .alg11 (_eeaa ,_ege );if _cbg ==nil &&len (_dfe )==0{_dfe ,_cbg =_ebd .alg11 (_eeaa ,[]byte (""));};if _cbg !=nil {return nil ,0,_cbg ;}else if len (_dfe )==0{return nil ,0,nil ;
};_gcf =_eeaa .P ;_bfff :=make ([]byte ,len (_ege )+8);_gfgg :=copy (_bfff ,_ege );copy (_bfff [_gfgg :],_eeaa .U [40:48]);_abgb =_bfff ;_beeg =_eeaa .UE ;_aeb =nil ;};if _ggb :=_df ("\u0061\u006c\u00672\u0061","\u004b\u0065\u0079",32,_beeg );_ggb !=nil {return nil ,0,_ggb ;
};_beeg =_beeg [:32];_cg ,_cbg :=_ebd .alg2b (_eeaa .R ,_abgb ,_ege ,_aeb );if _cbg !=nil {return nil ,0,_cbg ;};_egd ,_cbg :=_aa .NewCipher (_cg [:32]);if _cbg !=nil {return nil ,0,_cbg ;};_adg :=make ([]byte ,_aa .BlockSize );_bb :=_f .NewCBCDecrypter (_egd ,_adg );
_abe :=make ([]byte ,32);_bb .CryptBlocks (_abe ,_beeg );if _eeaa .R ==5{return _abe ,_gcf ,nil ;};_cbg =_ebd .alg13 (_eeaa ,_abe );if _cbg !=nil {return nil ,0,_cbg ;};return _abe ,_gcf ,nil ;};func (_eg stdHandlerR4 )alg4 (_gg []byte ,_agf []byte )([]byte ,error ){_cdc ,_ccf :=_fe .NewCipher (_gg );
if _ccf !=nil {return nil ,_e .New ("\u0066a\u0069l\u0065\u0064\u0020\u0072\u0063\u0034\u0020\u0063\u0069\u0070\u0068");};_cae :=[]byte (_ddd );_fcg :=make ([]byte ,len (_cae ));_cdc .XORKeyStream (_fcg ,_cae );return _fcg ,nil ;};func (_ebc stdHandlerR6 )alg13 (_cdeb *StdEncryptDict ,_cfac []byte )error {if _ade :=_df ("\u0061\u006c\u00671\u0033","\u004b\u0065\u0079",32,_cfac );
_ade !=nil {return _ade ;};if _feg :=_df ("\u0061\u006c\u00671\u0033","\u0050\u0065\u0072m\u0073",16,_cdeb .Perms );_feg !=nil {return _feg ;};_cfd :=make ([]byte ,16);copy (_cfd ,_cdeb .Perms [:16]);_edg ,_edc :=_aa .NewCipher (_cfac [:32]);if _edc !=nil {return _edc ;
};_cffd :=_cf (_edg );_cffd .CryptBlocks (_cfd ,_cfd );if !_ac .Equal (_cfd [9:12],[]byte ("\u0061\u0064\u0062")){return _e .New ("\u0064\u0065\u0063o\u0064\u0065\u0064\u0020p\u0065\u0072\u006d\u0069\u0073\u0073\u0069o\u006e\u0073\u0020\u0061\u0072\u0065\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064");
};_def :=Permissions (_dd .LittleEndian .Uint32 (_cfd [0:4]));if _def !=_cdeb .P {return _e .New ("\u0070\u0065r\u006d\u0069\u0073\u0073\u0069\u006f\u006e\u0073\u0020\u0076\u0061\u006c\u0069\u0064\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0061il\u0065\u0064");
};var _caf bool ;if _cfd [8]=='T'{_caf =true ;}else if _cfd [8]=='F'{_caf =false ;}else {return _e .New ("\u0064\u0065\u0063\u006f\u0064\u0065\u0064 \u006d\u0065\u0074a\u0064\u0061\u0074\u0061 \u0065\u006e\u0063\u0072\u0079\u0070\u0074\u0069\u006f\u006e\u0020\u0066\u006c\u0061\u0067\u0020\u0069\u0073\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064");
};if _caf !=_cdeb .EncryptMetadata {return _e .New ("\u006d\u0065t\u0061\u0064\u0061\u0074a\u0020\u0065n\u0063\u0072\u0079\u0070\u0074\u0069\u006f\u006e \u0076\u0061\u006c\u0069\u0064\u0061\u0074\u0069\u006f\u006e\u0020\u0066a\u0069\u006c\u0065\u0064");
};return nil ;};func (_ff stdHandlerR4 )alg7 (_ded *StdEncryptDict ,_gbd []byte )([]byte ,error ){_aba :=_ff .alg3Key (_ded .R ,_gbd );_fefc :=make ([]byte ,len (_ded .O ));if _ded .R ==2{_eeag ,_dfc :=_fe .NewCipher (_aba );if _dfc !=nil {return nil ,_e .New ("\u0066\u0061\u0069\u006c\u0065\u0064\u0020\u0063\u0069\u0070\u0068\u0065\u0072");
};_eeag .XORKeyStream (_fefc ,_ded .O );}else if _ded .R >=3{_efg :=append ([]byte {},_ded .O ...);for _gda :=0;_gda < 20;_gda ++{_aee :=append ([]byte {},_aba ...);for _geg :=0;_geg < len (_aba );_geg ++{_aee [_geg ]^=byte (19-_gda );};_dgb ,_fgb :=_fe .NewCipher (_aee );
if _fgb !=nil {return nil ,_e .New ("\u0066\u0061\u0069\u006c\u0065\u0064\u0020\u0063\u0069\u0070\u0068\u0065\u0072");};_dgb .XORKeyStream (_fefc ,_efg );_efg =append ([]byte {},_fefc ...);};}else {return nil ,_e .New ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020R");
};_abb ,_cfe :=_ff .alg6 (_ded ,_fefc );if _cfe !=nil {return nil ,nil ;};return _abb ,nil ;};func (_ca *ecbDecrypter )BlockSize ()int {return _ca ._fg };func (_fba stdHandlerR6 )alg12 (_dca *StdEncryptDict ,_cef []byte )([]byte ,error ){if _ebf :=_df ("\u0061\u006c\u00671\u0032","\u0055",48,_dca .U );
_ebf !=nil {return nil ,_ebf ;};if _dga :=_df ("\u0061\u006c\u00671\u0032","\u004f",48,_dca .O );_dga !=nil {return nil ,_dga ;};_gbb :=make ([]byte ,len (_cef )+8+48);_eda :=copy (_gbb ,_cef );_eda +=copy (_gbb [_eda :],_dca .O [32:40]);_eda +=copy (_gbb [_eda :],_dca .U [0:48]);
_gdb ,_fbd :=_fba .alg2b (_dca .R ,_gbb ,_cef ,_dca .U [0:48]);if _fbd !=nil {return nil ,_fbd ;};_gdb =_gdb [:32];if !_ac .Equal (_gdb ,_dca .O [:32]){return nil ,nil ;};return _gdb ,nil ;};func (_cda stdHandlerR6 )alg2b (R int ,_cab ,_egb ,_gba []byte )([]byte ,error ){if R ==5{return _afc (_cab );
};return _ged (_cab ,_egb ,_gba );};func (_fb stdHandlerR4 )alg6 (_eb *StdEncryptDict ,_gd []byte )([]byte ,error ){var (_fdd []byte ;_dbe error ;);_fcfc :=_fb .alg2 (_eb ,_gd );if _eb .R ==2{_fdd ,_dbe =_fb .alg4 (_fcfc ,_gd );}else if _eb .R >=3{_fdd ,_dbe =_fb .alg5 (_fcfc ,_gd );
}else {return nil ,_e .New ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020R");};if _dbe !=nil {return nil ,_dbe ;};_ec .Log .Trace ("\u0063\u0068\u0065\u0063k:\u0020\u0025\u0020\u0078\u0020\u003d\u003d\u0020\u0025\u0020\u0078\u0020\u003f",string (_fdd ),string (_eb .U ));
_dgf :=_fdd ;_ceb :=_eb .U ;if _eb .R >=3{if len (_dgf )> 16{_dgf =_dgf [0:16];};if len (_ceb )> 16{_ceb =_ceb [0:16];};};if !_ac .Equal (_dgf ,_ceb ){return nil ,nil ;};return _fcfc ,nil ;};func _egdd (_eae []byte ,_efgb int ){_gfd :=_efgb ;for _gfd < len (_eae ){copy (_eae [_gfd :],_eae [:_gfd ]);
_gfd *=2;};};var _ StdHandler =stdHandlerR4 {};type ecbDecrypter ecb ;func (_edd stdHandlerR6 )alg8 (_cfc *StdEncryptDict ,_acc []byte ,_gde []byte )error {if _dbb :=_df ("\u0061\u006c\u0067\u0038","\u004b\u0065\u0079",32,_acc );_dbb !=nil {return _dbb ;
};var _geec [16]byte ;if _ ,_adcc :=_g .ReadFull (_da .Reader ,_geec [:]);_adcc !=nil {return _adcc ;};_ddg :=_geec [0:8];_cea :=_geec [8:16];_bg :=make ([]byte ,len (_gde )+len (_ddg ));_efe :=copy (_bg ,_gde );copy (_bg [_efe :],_ddg );_egea ,_ebe :=_edd .alg2b (_cfc .R ,_bg ,_gde ,nil );
if _ebe !=nil {return _ebe ;};U :=make ([]byte ,len (_egea )+len (_ddg )+len (_cea ));_efe =copy (U ,_egea [:32]);_efe +=copy (U [_efe :],_ddg );copy (U [_efe :],_cea );_cfc .U =U ;_efe =len (_gde );copy (_bg [_efe :],_cea );_egea ,_ebe =_edd .alg2b (_cfc .R ,_bg ,_gde ,nil );
if _ebe !=nil {return _ebe ;};_ffg ,_ebe :=_bcc (_egea [:32]);if _ebe !=nil {return _ebe ;};_cabf :=make ([]byte ,_aa .BlockSize );_dea :=_f .NewCBCEncrypter (_ffg ,_cabf );UE :=make ([]byte ,32);_dea .CryptBlocks (UE ,_acc [:32]);_cfc .UE =UE ;return nil ;
};var _ StdHandler =stdHandlerR6 {};const (EventDocOpen =AuthEvent ("\u0044o\u0063\u004f\u0070\u0065\u006e");EventEFOpen =AuthEvent ("\u0045\u0046\u004f\u0070\u0065\u006e"););type ecb struct{_gf _f .Block ;_fg int ;};

// NewHandlerR4 creates a new standard security handler for R<=4.
func NewHandlerR4 (id0 string ,length int )StdHandler {return stdHandlerR4 {ID0 :id0 ,Length :length }};func (_ef stdHandlerR4 )alg3 (R int ,_gc ,_deb []byte )([]byte ,error ){var _ceg []byte ;if len (_deb )> 0{_ceg =_ef .alg3Key (R ,_deb );}else {_ceg =_ef .alg3Key (R ,_gc );
};_cba ,_dgc :=_fe .NewCipher (_ceg );if _dgc !=nil {return nil ,_e .New ("\u0066a\u0069l\u0065\u0064\u0020\u0072\u0063\u0034\u0020\u0063\u0069\u0070\u0068");};_fee :=_ef .paddedPass (_gc );_fef :=make ([]byte ,len (_fee ));_cba .XORKeyStream (_fef ,_fee );
if R >=3{_adc :=make ([]byte ,len (_ceg ));for _bee :=0;_bee < 19;_bee ++{for _ba :=0;_ba < len (_ceg );_ba ++{_adc [_ba ]=_ceg [_ba ]^byte (_bee +1);};_ecf ,_aaa :=_fe .NewCipher (_adc );if _aaa !=nil {return nil ,_e .New ("\u0066a\u0069l\u0065\u0064\u0020\u0072\u0063\u0034\u0020\u0063\u0069\u0070\u0068");
};_ecf .XORKeyStream (_fef ,_fef );};};return _fef ,nil ;};func (stdHandlerR4 )paddedPass (_ge []byte )[]byte {_dda :=make ([]byte ,32);_cc :=copy (_dda ,_ge );for ;_cc < 32;_cc ++{_dda [_cc ]=_ddd [_cc -len (_ge )];};return _dda ;};

// Authenticate implements StdHandler interface.
func (_fca stdHandlerR4 )Authenticate (d *StdEncryptDict ,pass []byte )([]byte ,Permissions ,error ){_ec .Log .Trace ("\u0044\u0065b\u0075\u0067\u0067\u0069n\u0067\u0020a\u0075\u0074\u0068\u0065\u006e\u0074\u0069\u0063a\u0074\u0069\u006f\u006e\u0020\u002d\u0020\u006f\u0077\u006e\u0065\u0072 \u0070\u0061\u0073\u0073");
_efgc ,_bce :=_fca .alg7 (d ,pass );if _bce !=nil {return nil ,0,_bce ;};if _efgc !=nil {_ec .Log .Trace ("\u0074h\u0069\u0073\u002e\u0061u\u0074\u0068\u0065\u006e\u0074i\u0063a\u0074e\u0064\u0020\u003d\u0020\u0054\u0072\u0075e");return _efgc ,PermOwner ,nil ;
};_ec .Log .Trace ("\u0044\u0065bu\u0067\u0067\u0069n\u0067\u0020\u0061\u0075the\u006eti\u0063\u0061\u0074\u0069\u006f\u006e\u0020- \u0075\u0073\u0065\u0072\u0020\u0070\u0061s\u0073");_efgc ,_bce =_fca .alg6 (d ,pass );if _bce !=nil {return nil ,0,_bce ;
};if _efgc !=nil {_ec .Log .Trace ("\u0074h\u0069\u0073\u002e\u0061u\u0074\u0068\u0065\u006e\u0074i\u0063a\u0074e\u0064\u0020\u003d\u0020\u0054\u0072\u0075e");return _efgc ,d .P ,nil ;};return nil ,0,nil ;};func _bf (_gb _f .Block )_f .BlockMode {return (*ecbEncrypter )(_fa (_gb ))};
func (_gfe stdHandlerR4 )alg5 (_cde []byte ,_fcf []byte )([]byte ,error ){_feb :=_abd .New ();_feb .Write ([]byte (_ddd ));_feb .Write ([]byte (_gfe .ID0 ));_eee :=_feb .Sum (nil );_ec .Log .Trace ("\u0061\u006c\u0067\u0035");_ec .Log .Trace ("\u0065k\u0065\u0079\u003a\u0020\u0025\u0020x",_cde );
_ec .Log .Trace ("\u0049D\u003a\u0020\u0025\u0020\u0078",_gfe .ID0 );if len (_eee )!=16{return nil ,_e .New ("\u0068a\u0073\u0068\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u006eo\u0074\u0020\u0031\u0036\u0020\u0062\u0079\u0074\u0065\u0073");};_gee ,_fce :=_fe .NewCipher (_cde );
if _fce !=nil {return nil ,_e .New ("\u0066a\u0069l\u0065\u0064\u0020\u0072\u0063\u0034\u0020\u0063\u0069\u0070\u0068");};_fcga :=make ([]byte ,16);_gee .XORKeyStream (_fcga ,_eee );_dbcd :=make ([]byte ,len (_cde ));for _cbc :=0;_cbc < 19;_cbc ++{for _ga :=0;
_ga < len (_cde );_ga ++{_dbcd [_ga ]=_cde [_ga ]^byte (_cbc +1);};_gee ,_fce =_fe .NewCipher (_dbcd );if _fce !=nil {return nil ,_e .New ("\u0066a\u0069l\u0065\u0064\u0020\u0072\u0063\u0034\u0020\u0063\u0069\u0070\u0068");};_gee .XORKeyStream (_fcga ,_fcga );
_ec .Log .Trace ("\u0069\u0020\u003d\u0020\u0025\u0064\u002c\u0020\u0065\u006b\u0065\u0079:\u0020\u0025\u0020\u0078",_cbc ,_dbcd );_ec .Log .Trace ("\u0069\u0020\u003d\u0020\u0025\u0064\u0020\u002d\u003e\u0020\u0025\u0020\u0078",_cbc ,_fcga );};_cdb :=make ([]byte ,32);
for _dc :=0;_dc < 16;_dc ++{_cdb [_dc ]=_fcga [_dc ];};_ ,_fce =_da .Read (_cdb [16:32]);if _fce !=nil {return nil ,_e .New ("\u0066a\u0069\u006c\u0065\u0064 \u0074\u006f\u0020\u0067\u0065n\u0020r\u0061n\u0064\u0020\u006e\u0075\u006d\u0062\u0065r");};return _cdb ,nil ;
};type stdHandlerR6 struct{};func _bcc (_abg []byte )(_f .Block ,error ){_cbb ,_eeaf :=_aa .NewCipher (_abg );if _eeaf !=nil {_ec .Log .Error ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0063\u006f\u0075\u006c\u0064\u0020\u006e\u006f\u0074\u0020\u0063\u0072\u0065\u0061\u0074\u0065\u0020A\u0045\u0053\u0020\u0063\u0069p\u0068\u0065r\u003a\u0020\u0025\u0076",_eeaf );
return nil ,_eeaf ;};return _cbb ,nil ;};func _cf (_ag _f .Block )_f .BlockMode {return (*ecbDecrypter )(_fa (_ag ))};func (_ffge stdHandlerR6 )alg9 (_egg *StdEncryptDict ,_dedd []byte ,_cabg []byte )error {if _bed :=_df ("\u0061\u006c\u0067\u0039","\u004b\u0065\u0079",32,_dedd );
_bed !=nil {return _bed ;};if _dedb :=_df ("\u0061\u006c\u0067\u0039","\u0055",48,_egg .U );_dedb !=nil {return _dedb ;};var _ggg [16]byte ;if _ ,_bgc :=_g .ReadFull (_da .Reader ,_ggg [:]);_bgc !=nil {return _bgc ;};_bbe :=_ggg [0:8];_cbe :=_ggg [8:16];
_aebg :=_egg .U [:48];_gge :=make ([]byte ,len (_cabg )+len (_bbe )+len (_aebg ));_fga :=copy (_gge ,_cabg );_fga +=copy (_gge [_fga :],_bbe );_fga +=copy (_gge [_fga :],_aebg );_dbec ,_cabfb :=_ffge .alg2b (_egg .R ,_gge ,_cabg ,_aebg );if _cabfb !=nil {return _cabfb ;
};O :=make ([]byte ,len (_dbec )+len (_bbe )+len (_cbe ));_fga =copy (O ,_dbec [:32]);_fga +=copy (O [_fga :],_bbe );_fga +=copy (O [_fga :],_cbe );_egg .O =O ;_fga =len (_cabg );_fga +=copy (_gge [_fga :],_cbe );_dbec ,_cabfb =_ffge .alg2b (_egg .R ,_gge ,_cabg ,_aebg );
if _cabfb !=nil {return _cabfb ;};_dabe ,_cabfb :=_bcc (_dbec [:32]);if _cabfb !=nil {return _cabfb ;};_bceg :=make ([]byte ,_aa .BlockSize );_dee :=_f .NewCBCEncrypter (_dabe ,_bceg );OE :=make ([]byte ,32);_dee .CryptBlocks (OE ,_dedd [:32]);_egg .OE =OE ;
return nil ;};

// GenerateParams is the algorithm opposite to alg2a (R>=5).
// It generates U,O,UE,OE,Perms fields using AESv3 encryption.
// There is no algorithm number assigned to this function in the spec.
// It expects R, P and EncryptMetadata fields to be set.
func (_fgag stdHandlerR6 )GenerateParams (d *StdEncryptDict ,opass ,upass []byte )([]byte ,error ){_edcb :=make ([]byte ,32);if _ ,_acf :=_g .ReadFull (_da .Reader ,_edcb );_acf !=nil {return nil ,_acf ;};d .U =nil ;d .O =nil ;d .UE =nil ;d .OE =nil ;d .Perms =nil ;
if len (upass )> 127{upass =upass [:127];};if len (opass )> 127{opass =opass [:127];};if _gcg :=_fgag .alg8 (d ,_edcb ,upass );_gcg !=nil {return nil ,_gcg ;};if _cbf :=_fgag .alg9 (d ,_edcb ,opass );_cbf !=nil {return nil ,_cbf ;};if d .R ==5{return _edcb ,nil ;
};if _ddb :=_fgag .alg10 (d ,_edcb );_ddb !=nil {return nil ,_ddb ;};return _edcb ,nil ;};type stdHandlerR4 struct{Length int ;ID0 string ;};func (_bd stdHandlerR4 )alg3Key (R int ,_geb []byte )[]byte {_ae :=_abd .New ();_bea :=_bd .paddedPass (_geb );
_ae .Write (_bea );if R >=3{for _aag :=0;_aag < 50;_aag ++{_bfd :=_ae .Sum (nil );_ae =_abd .New ();_ae .Write (_bfd );};};_bfa :=_ae .Sum (nil );if R ==2{_bfa =_bfa [0:5];}else {_bfa =_bfa [0:_bd .Length /8];};return _bfa ;};func (_eed stdHandlerR6 )alg11 (_acg *StdEncryptDict ,_bfae []byte )([]byte ,error ){if _fge :=_df ("\u0061\u006c\u00671\u0031","\u0055",48,_acg .U );
_fge !=nil {return nil ,_fge ;};_fcfa :=make ([]byte ,len (_bfae )+8);_eef :=copy (_fcfa ,_bfae );_eef +=copy (_fcfa [_eef :],_acg .U [32:40]);_cccb ,_egaa :=_eed .alg2b (_acg .R ,_fcfa ,_bfae ,nil );if _egaa !=nil {return nil ,_egaa ;};_cccb =_cccb [:32];
if !_ac .Equal (_cccb ,_acg .U [:32]){return nil ,nil ;};return _cccb ,nil ;};

// Permissions is a bitmask of access permissions for a PDF file.
type Permissions uint32 ;

// Allowed checks if a set of permissions can be granted.
func (_ee Permissions )Allowed (p2 Permissions )bool {return _ee &p2 ==p2 };const _ddd ="\x28\277\116\136\x4e\x75\x8a\x41\x64\000\x4e\x56\377"+"\xfa\001\010\056\x2e\x00\xb6\xd0\x68\076\x80\x2f\014"+"\251\xfe\x64\x53\x69\172";func _ged (_bfad ,_gdac ,_ega []byte )([]byte ,error ){var (_abgc ,_cfa ,_cca _ab .Hash ;
);_abgc =_d .New ();_eeb :=make ([]byte ,64);_gbg :=_abgc ;_gbg .Write (_bfad );K :=_gbg .Sum (_eeb [:0]);_cff :=make ([]byte ,64*(127+64+48));_cgd :=func (_gac int )([]byte ,error ){_ebg :=len (_gdac )+len (K )+len (_ega );_gae :=_cff [:_ebg ];_cac :=copy (_gae ,_gdac );
_cac +=copy (_gae [_cac :],K [:]);_cac +=copy (_gae [_cac :],_ega );if _cac !=_ebg {_ec .Log .Error ("E\u0052\u0052\u004f\u0052\u003a\u0020u\u006e\u0065\u0078\u0070\u0065\u0063t\u0065\u0064\u0020\u0072\u006f\u0075\u006ed\u0020\u0069\u006e\u0070\u0075\u0074\u0020\u0073\u0069\u007ae\u002e");
return nil ,_e .New ("\u0077\u0072\u006f\u006e\u0067\u0020\u0073\u0069\u007a\u0065");};K1 :=_cff [:_ebg *64];_egdd (K1 ,_ebg );_bdf ,_cbbf :=_bcc (K [0:16]);if _cbbf !=nil {return nil ,_cbbf ;};_add :=_f .NewCBCEncrypter (_bdf ,K [16:32]);_add .CryptBlocks (K1 ,K1 );
E :=K1 ;_bfda :=0;for _gdd :=0;_gdd < 16;_gdd ++{_bfda +=int (E [_gdd ]%3);};var _ecg _ab .Hash ;switch _bfda %3{case 0:_ecg =_abgc ;case 1:if _cfa ==nil {_cfa =_fd .New384 ();};_ecg =_cfa ;case 2:if _cca ==nil {_cca =_fd .New ();};_ecg =_cca ;};_ecg .Reset ();
_ecg .Write (E );K =_ecg .Sum (_eeb [:0]);return E ,nil ;};for _dgfb :=0;;{E ,_adcg :=_cgd (_dgfb );if _adcg !=nil {return nil ,_adcg ;};_dbcc :=E [len (E )-1];_dgfb ++;if _dgfb >=64&&_dbcc <=uint8 (_dgfb -32){break ;};};return K [:32],nil ;};type ecbEncrypter ecb ;


// Authenticate implements StdHandler interface.
func (_cag stdHandlerR6 )Authenticate (d *StdEncryptDict ,pass []byte )([]byte ,Permissions ,error ){return _cag .alg2a (d ,pass );};