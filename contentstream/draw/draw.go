//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package draw has handy features for defining paths which can be used to draw content on a PDF page.  Handles
// defining paths as points, vector calculations and conversion to PDF content stream data which can be used in
// page content streams and XObject forms and thus also in annotation appearance streams.
//
// Also defines utility functions for drawing common shapes such as rectangles, lines and circles (ovals).
package draw ;import (_f "fmt";_d "github.com/unidoc/unipdf/v3/contentstream";_cd "github.com/unidoc/unipdf/v3/core";_b "github.com/unidoc/unipdf/v3/internal/transform";_ag "github.com/unidoc/unipdf/v3/model";_c "math";);

// Draw draws the composite curve polygon. A graphics state name can be
// specified for setting the curve properties (e.g. setting the opacity).
// Otherwise leave empty (""). Returns the content stream as a byte array
// and the bounding box of the polygon.
func (_efa CurvePolygon )Draw (gsName string )([]byte ,*_ag .PdfRectangle ,error ){_gda :=_d .NewContentCreator ();_gda .Add_q ();_efa .FillEnabled =_efa .FillEnabled &&_efa .FillColor !=nil ;if _efa .FillEnabled {_gda .SetNonStrokingColor (_efa .FillColor );
};_efa .BorderEnabled =_efa .BorderEnabled &&_efa .BorderColor !=nil ;if _efa .BorderEnabled {_gda .SetStrokingColor (_efa .BorderColor );_gda .Add_w (_efa .BorderWidth );};if len (gsName )> 1{_gda .Add_gs (_cd .PdfObjectName (gsName ));};_fga :=NewCubicBezierPath ();
for _ ,_ed :=range _efa .Rings {for _cefe ,_bg :=range _ed {if _cefe ==0{_gda .Add_m (_bg .P0 .X ,_bg .P0 .Y );}else {_gda .Add_l (_bg .P0 .X ,_bg .P0 .Y );};_gda .Add_c (_bg .P1 .X ,_bg .P1 .Y ,_bg .P2 .X ,_bg .P2 .Y ,_bg .P3 .X ,_bg .P3 .Y );_fga =_fga .AppendCurve (_bg );
};_gda .Add_h ();};if _efa .FillEnabled &&_efa .BorderEnabled {_gda .Add_B ();}else if _efa .FillEnabled {_gda .Add_f ();}else if _efa .BorderEnabled {_gda .Add_S ();};_gda .Add_Q ();return _gda .Bytes (),_fga .GetBoundingBox ().ToPdfRectangle (),nil ;
};

// LineStyle refers to how the line will be created.
type LineStyle int ;

// NewVectorBetween returns a new vector with the direction specified by
// the subtraction of point a from point b (b-a).
func NewVectorBetween (a Point ,b Point )Vector {_fcc :=Vector {};_fcc .Dx =b .X -a .X ;_fcc .Dy =b .Y -a .Y ;return _fcc ;};

// Offset shifts the path with the specified offsets.
func (_dc Path )Offset (offX ,offY float64 )Path {for _gc ,_de :=range _dc .Points {_dc .Points [_gc ]=_de .Add (offX ,offY );};return _dc ;};

// DrawBezierPathWithCreator makes the bezier path with the content creator.
// Adds the PDF commands to draw the path to the creator instance.
func DrawBezierPathWithCreator (bpath CubicBezierPath ,creator *_d .ContentCreator ){for _gcea ,_bbdf :=range bpath .Curves {if _gcea ==0{creator .Add_m (_bbdf .P0 .X ,_bbdf .P0 .Y );};creator .Add_c (_bbdf .P1 .X ,_bbdf .P1 .Y ,_bbdf .P2 .X ,_bbdf .P2 .Y ,_bbdf .P3 .X ,_bbdf .P3 .Y );
};};

// Draw draws the polyline. A graphics state name can be specified for
// setting the polyline properties (e.g. setting the opacity). Otherwise leave
// empty (""). Returns the content stream as a byte array and the polyline
// bounding box.
func (_cbd Polyline )Draw (gsName string )([]byte ,*_ag .PdfRectangle ,error ){if _cbd .LineColor ==nil {_cbd .LineColor =_ag .NewPdfColorDeviceRGB (0,0,0);};_abad :=NewPath ();for _ ,_fbg :=range _cbd .Points {_abad =_abad .AppendPoint (_fbg );};_fff :=_d .NewContentCreator ();
_fff .Add_q ().SetStrokingColor (_cbd .LineColor ).Add_w (_cbd .LineWidth );if len (gsName )> 1{_fff .Add_gs (_cd .PdfObjectName (gsName ));};DrawPathWithCreator (_abad ,_fff );_fff .Add_S ();_fff .Add_Q ();return _fff .Bytes (),_abad .GetBoundingBox ().ToPdfRectangle (),nil ;
};

// Polyline defines a slice of points that are connected as straight lines.
type Polyline struct{Points []Point ;LineColor _ag .PdfColor ;LineWidth float64 ;};

// Draw draws the rectangle. A graphics state can be specified for
// setting additional properties (e.g. opacity). Otherwise pass an empty string
// for the `gsName` parameter. The method returns the content stream as a byte
// array and the bounding box of the shape.
func (_eab Rectangle )Draw (gsName string )([]byte ,*_ag .PdfRectangle ,error ){_fbe :=_d .NewContentCreator ();_fbe .Add_q ();if _eab .FillEnabled {_fbe .SetNonStrokingColor (_eab .FillColor );};if _eab .BorderEnabled {_fbe .SetStrokingColor (_eab .BorderColor );
_fbe .Add_w (_eab .BorderWidth );};if len (gsName )> 1{_fbe .Add_gs (_cd .PdfObjectName (gsName ));};var (_ddg ,_eaf =_eab .X ,_eab .Y ;_dda ,_dg =_eab .Width ,_eab .Height ;_deg =_c .Abs (_eab .BorderRadiusTopLeft );_cac =_c .Abs (_eab .BorderRadiusTopRight );
_gdg =_c .Abs (_eab .BorderRadiusBottomLeft );_bd =_c .Abs (_eab .BorderRadiusBottomRight );_ec =0.4477;);_bdf :=Path {Points :[]Point {{X :_ddg +_dda -_bd ,Y :_eaf },{X :_ddg +_dda ,Y :_eaf +_dg -_cac },{X :_ddg +_deg ,Y :_eaf +_dg },{X :_ddg ,Y :_eaf +_gdg }}};
_bed :=[][7]float64 {{_bd ,_ddg +_dda -_bd *_ec ,_eaf ,_ddg +_dda ,_eaf +_bd *_ec ,_ddg +_dda ,_eaf +_bd },{_cac ,_ddg +_dda ,_eaf +_dg -_cac *_ec ,_ddg +_dda -_cac *_ec ,_eaf +_dg ,_ddg +_dda -_cac ,_eaf +_dg },{_deg ,_ddg +_deg *_ec ,_eaf +_dg ,_ddg ,_eaf +_dg -_deg *_ec ,_ddg ,_eaf +_dg -_deg },{_gdg ,_ddg ,_eaf +_gdg *_ec ,_ddg +_gdg *_ec ,_eaf ,_ddg +_gdg ,_eaf }};
_fbe .Add_m (_ddg +_gdg ,_eaf );for _ddb :=0;_ddb < 4;_ddb ++{_egc :=_bdf .Points [_ddb ];_fbe .Add_l (_egc .X ,_egc .Y );_eae :=_bed [_ddb ];if _ega :=_eae [0];_ega !=0{_fbe .Add_c (_eae [1],_eae [2],_eae [3],_eae [4],_eae [5],_eae [6]);};};_fbe .Add_h ();
if _eab .FillEnabled &&_eab .BorderEnabled {_fbe .Add_B ();}else if _eab .FillEnabled {_fbe .Add_f ();}else if _eab .BorderEnabled {_fbe .Add_S ();};_fbe .Add_Q ();return _fbe .Bytes (),_bdf .GetBoundingBox ().ToPdfRectangle (),nil ;};

// Rotate rotates the vector by the specified angle.
func (_caa Vector )Rotate (phi float64 )Vector {_bdfg :=_caa .Magnitude ();_fgab :=_caa .GetPolarAngle ();return NewVectorPolar (_bdfg ,_fgab +phi );};

// Copy returns a clone of the Bezier path.
func (_ef CubicBezierPath )Copy ()CubicBezierPath {_be :=CubicBezierPath {};_be .Curves =append (_be .Curves ,_ef .Curves ...);return _be ;};

// Draw draws the polygon. A graphics state name can be specified for
// setting the polygon properties (e.g. setting the opacity). Otherwise leave
// empty (""). Returns the content stream as a byte array and the polygon
// bounding box.
func (_add Polygon )Draw (gsName string )([]byte ,*_ag .PdfRectangle ,error ){_aac :=_d .NewContentCreator ();_aac .Add_q ();_add .FillEnabled =_add .FillEnabled &&_add .FillColor !=nil ;if _add .FillEnabled {_aac .SetNonStrokingColor (_add .FillColor );
};_add .BorderEnabled =_add .BorderEnabled &&_add .BorderColor !=nil ;if _add .BorderEnabled {_aac .SetStrokingColor (_add .BorderColor );_aac .Add_w (_add .BorderWidth );};if len (gsName )> 1{_aac .Add_gs (_cd .PdfObjectName (gsName ));};_aeg :=NewPath ();
for _ ,_ggf :=range _add .Points {for _dfab ,_dcb :=range _ggf {_aeg =_aeg .AppendPoint (_dcb );if _dfab ==0{_aac .Add_m (_dcb .X ,_dcb .Y );}else {_aac .Add_l (_dcb .X ,_dcb .Y );};};_aac .Add_h ();};if _add .FillEnabled &&_add .BorderEnabled {_aac .Add_B ();
}else if _add .FillEnabled {_aac .Add_f ();}else if _add .BorderEnabled {_aac .Add_S ();};_aac .Add_Q ();return _aac .Bytes (),_aeg .GetBoundingBox ().ToPdfRectangle (),nil ;};

// NewCubicBezierCurve returns a new cubic Bezier curve.
func NewCubicBezierCurve (x0 ,y0 ,x1 ,y1 ,x2 ,y2 ,x3 ,y3 float64 )CubicBezierCurve {_e :=CubicBezierCurve {};_e .P0 =NewPoint (x0 ,y0 );_e .P1 =NewPoint (x1 ,y1 );_e .P2 =NewPoint (x2 ,y2 );_e .P3 =NewPoint (x3 ,y3 );return _e ;};const (LineStyleSolid LineStyle =0;
LineStyleDashed LineStyle =1;);

// Draw draws the composite Bezier curve. A graphics state name can be
// specified for setting the curve properties (e.g. setting the opacity).
// Otherwise leave empty (""). Returns the content stream as a byte array and
// the curve bounding box.
func (_aa PolyBezierCurve )Draw (gsName string )([]byte ,*_ag .PdfRectangle ,error ){if _aa .BorderColor ==nil {_aa .BorderColor =_ag .NewPdfColorDeviceRGB (0,0,0);};_gfc :=NewCubicBezierPath ();for _ ,_cff :=range _aa .Curves {_gfc =_gfc .AppendCurve (_cff );
};_cab :=_d .NewContentCreator ();_cab .Add_q ();_aa .FillEnabled =_aa .FillEnabled &&_aa .FillColor !=nil ;if _aa .FillEnabled {_cab .SetNonStrokingColor (_aa .FillColor );};_cab .SetStrokingColor (_aa .BorderColor );_cab .Add_w (_aa .BorderWidth );if len (gsName )> 1{_cab .Add_gs (_cd .PdfObjectName (gsName ));
};for _ded ,_cae :=range _gfc .Curves {if _ded ==0{_cab .Add_m (_cae .P0 .X ,_cae .P0 .Y );}else {_cab .Add_l (_cae .P0 .X ,_cae .P0 .Y );};_cab .Add_c (_cae .P1 .X ,_cae .P1 .Y ,_cae .P2 .X ,_cae .P2 .Y ,_cae .P3 .X ,_cae .P3 .Y );};if _aa .FillEnabled {_cab .Add_h ();
_cab .Add_B ();}else {_cab .Add_S ();};_cab .Add_Q ();return _cab .Bytes (),_gfc .GetBoundingBox ().ToPdfRectangle (),nil ;};

// AppendCurve appends the specified Bezier curve to the path.
func (_ea CubicBezierPath )AppendCurve (curve CubicBezierCurve )CubicBezierPath {_ea .Curves =append (_ea .Curves ,curve );return _ea ;};

// Draw draws the basic line to PDF. Generates the content stream which can be used in page contents or appearance
// stream of annotation. Returns the stream content, XForm bounding box (local), bounding box and an error if
// one occurred.
func (_bgf BasicLine )Draw (gsName string )([]byte ,*_ag .PdfRectangle ,error ){_gafe :=NewPath ();_gafe =_gafe .AppendPoint (NewPoint (_bgf .X1 ,_bgf .Y1 ));_gafe =_gafe .AppendPoint (NewPoint (_bgf .X2 ,_bgf .Y2 ));_ddda :=_d .NewContentCreator ();_ddda .Add_q ().Add_w (_bgf .LineWidth ).SetStrokingColor (_bgf .LineColor );
if _bgf .LineStyle ==LineStyleDashed {if _bgf .DashArray ==nil {_bgf .DashArray =[]int64 {1,1};};_ddda .Add_d (_bgf .DashArray ,_bgf .DashPhase );};if len (gsName )> 1{_ddda .Add_gs (_cd .PdfObjectName (gsName ));};DrawPathWithCreator (_gafe ,_ddda );_ddda .Add_S ().Add_Q ();
return _ddda .Bytes (),_gafe .GetBoundingBox ().ToPdfRectangle (),nil ;};

// NewCubicBezierPath returns a new empty cubic Bezier path.
func NewCubicBezierPath ()CubicBezierPath {_dd :=CubicBezierPath {};_dd .Curves =[]CubicBezierCurve {};return _dd ;};

// PolyBezierCurve represents a composite curve that is the result of
// joining multiple cubic Bezier curves.
type PolyBezierCurve struct{Curves []CubicBezierCurve ;BorderWidth float64 ;BorderColor _ag .PdfColor ;FillEnabled bool ;FillColor _ag .PdfColor ;};

// Length returns the number of points in the path.
func (_gb Path )Length ()int {return len (_gb .Points )};

// GetPointNumber returns the path point at the index specified by number.
// The index is 1-based.
func (_ccb Path )GetPointNumber (number int )Point {if number < 1||number > len (_ccb .Points ){return Point {};};return _ccb .Points [number -1];};

// Rotate returns a new Point at `p` rotated by `theta` degrees.
func (_gf Point )Rotate (theta float64 )Point {_eg :=_b .NewPoint (_gf .X ,_gf .Y ).Rotate (theta );return NewPoint (_eg .X ,_eg .Y );};

// Add shifts the coordinates of the point with dx, dy and returns the result.
func (_gg Point )Add (dx ,dy float64 )Point {_gg .X +=dx ;_gg .Y +=dy ;return _gg };const (LineEndingStyleNone LineEndingStyle =0;LineEndingStyleArrow LineEndingStyle =1;LineEndingStyleButt LineEndingStyle =2;);

// Add adds the specified vector to the current one and returns the result.
func (_cfa Vector )Add (other Vector )Vector {_cfa .Dx +=other .Dx ;_cfa .Dy +=other .Dy ;return _cfa };

// Draw draws the circle. Can specify a graphics state (gsName) for setting opacity etc.  Otherwise leave empty ("").
// Returns the content stream as a byte array, the bounding box and an error on failure.
func (_cbc Circle )Draw (gsName string )([]byte ,*_ag .PdfRectangle ,error ){_fd :=_cbc .Width /2;_cbg :=_cbc .Height /2;if _cbc .BorderEnabled {_fd -=_cbc .BorderWidth /2;_cbg -=_cbc .BorderWidth /2;};_fa :=0.551784;_cbfa :=_fd *_fa ;_fe :=_cbg *_fa ;
_fad :=NewCubicBezierPath ();_fad =_fad .AppendCurve (NewCubicBezierCurve (-_fd ,0,-_fd ,_fe ,-_cbfa ,_cbg ,0,_cbg ));_fad =_fad .AppendCurve (NewCubicBezierCurve (0,_cbg ,_cbfa ,_cbg ,_fd ,_fe ,_fd ,0));_fad =_fad .AppendCurve (NewCubicBezierCurve (_fd ,0,_fd ,-_fe ,_cbfa ,-_cbg ,0,-_cbg ));
_fad =_fad .AppendCurve (NewCubicBezierCurve (0,-_cbg ,-_cbfa ,-_cbg ,-_fd ,-_fe ,-_fd ,0));_fad =_fad .Offset (_fd ,_cbg );if _cbc .BorderEnabled {_fad =_fad .Offset (_cbc .BorderWidth /2,_cbc .BorderWidth /2);};if _cbc .X !=0||_cbc .Y !=0{_fad =_fad .Offset (_cbc .X ,_cbc .Y );
};_cga :=_d .NewContentCreator ();_cga .Add_q ();if _cbc .FillEnabled {_cga .SetNonStrokingColor (_cbc .FillColor );};if _cbc .BorderEnabled {_cga .SetStrokingColor (_cbc .BorderColor );_cga .Add_w (_cbc .BorderWidth );};if len (gsName )> 1{_cga .Add_gs (_cd .PdfObjectName (gsName ));
};DrawBezierPathWithCreator (_fad ,_cga );_cga .Add_h ();if _cbc .FillEnabled &&_cbc .BorderEnabled {_cga .Add_B ();}else if _cbc .FillEnabled {_cga .Add_f ();}else if _cbc .BorderEnabled {_cga .Add_S ();};_cga .Add_Q ();_fgb :=_fad .GetBoundingBox ();
if _cbc .BorderEnabled {_fgb .Height +=_cbc .BorderWidth ;_fgb .Width +=_cbc .BorderWidth ;_fgb .X -=_cbc .BorderWidth /2;_fgb .Y -=_cbc .BorderWidth /2;};return _cga .Bytes (),_fgb .ToPdfRectangle (),nil ;};

// Flip changes the sign of the vector: -vector.
func (_ceb Vector )Flip ()Vector {_fadd :=_ceb .Magnitude ();_ba :=_ceb .GetPolarAngle ();_ceb .Dx =_fadd *_c .Cos (_ba +_c .Pi );_ceb .Dy =_fadd *_c .Sin (_ba +_c .Pi );return _ceb ;};

// Vector represents a two-dimensional vector.
type Vector struct{Dx float64 ;Dy float64 ;};

// Draw draws the line to PDF contentstream. Generates the content stream which can be used in page contents or
// appearance stream of annotation. Returns the stream content, XForm bounding box (local), bounding box and an error
// if one occurred.
func (_bda Line )Draw (gsName string )([]byte ,*_ag .PdfRectangle ,error ){_aba ,_fac :=_bda .X1 ,_bda .X2 ;_ccg ,_bee :=_bda .Y1 ,_bda .Y2 ;_bb :=_bee -_ccg ;_faf :=_fac -_aba ;_aga :=_c .Atan2 (_bb ,_faf );L :=_c .Sqrt (_c .Pow (_faf ,2.0)+_c .Pow (_bb ,2.0));
_dcg :=_bda .LineWidth ;_bc :=_c .Pi ;_bbd :=1.0;if _faf < 0{_bbd *=-1.0;};if _bb < 0{_bbd *=-1.0;};VsX :=_bbd *(-_dcg /2*_c .Cos (_aga +_bc /2));VsY :=_bbd *(-_dcg /2*_c .Sin (_aga +_bc /2)+_dcg *_c .Sin (_aga +_bc /2));V1X :=VsX +_dcg /2*_c .Cos (_aga +_bc /2);
V1Y :=VsY +_dcg /2*_c .Sin (_aga +_bc /2);V2X :=VsX +_dcg /2*_c .Cos (_aga +_bc /2)+L *_c .Cos (_aga );V2Y :=VsY +_dcg /2*_c .Sin (_aga +_bc /2)+L *_c .Sin (_aga );V3X :=VsX +_dcg /2*_c .Cos (_aga +_bc /2)+L *_c .Cos (_aga )+_dcg *_c .Cos (_aga -_bc /2);
V3Y :=VsY +_dcg /2*_c .Sin (_aga +_bc /2)+L *_c .Sin (_aga )+_dcg *_c .Sin (_aga -_bc /2);V4X :=VsX +_dcg /2*_c .Cos (_aga -_bc /2);V4Y :=VsY +_dcg /2*_c .Sin (_aga -_bc /2);_cea :=NewPath ();_cea =_cea .AppendPoint (NewPoint (V1X ,V1Y ));_cea =_cea .AppendPoint (NewPoint (V2X ,V2Y ));
_cea =_cea .AppendPoint (NewPoint (V3X ,V3Y ));_cea =_cea .AppendPoint (NewPoint (V4X ,V4Y ));_dca :=_bda .LineEndingStyle1 ;_eeb :=_bda .LineEndingStyle2 ;_ge :=3*_dcg ;_cde :=3*_dcg ;_cgf :=(_cde -_dcg )/2;if _eeb ==LineEndingStyleArrow {_gcf :=_cea .GetPointNumber (2);
_gaf :=NewVectorPolar (_ge ,_aga +_bc );_agae :=_gcf .AddVector (_gaf );_afb :=NewVectorPolar (_cde /2,_aga +_bc /2);_dag :=NewVectorPolar (_ge ,_aga );_ac :=NewVectorPolar (_cgf ,_aga +_bc /2);_gef :=_agae .AddVector (_ac );_bgg :=_dag .Add (_afb .Flip ());
_aea :=_gef .AddVector (_bgg );_bba :=_afb .Scale (2).Flip ().Add (_bgg .Flip ());_fbed :=_aea .AddVector (_bba );_fba :=_agae .AddVector (NewVectorPolar (_dcg ,_aga -_bc /2));_bf :=NewPath ();_bf =_bf .AppendPoint (_cea .GetPointNumber (1));_bf =_bf .AppendPoint (_agae );
_bf =_bf .AppendPoint (_gef );_bf =_bf .AppendPoint (_aea );_bf =_bf .AppendPoint (_fbed );_bf =_bf .AppendPoint (_fba );_bf =_bf .AppendPoint (_cea .GetPointNumber (4));_cea =_bf ;};if _dca ==LineEndingStyleArrow {_daed :=_cea .GetPointNumber (1);_ecd :=_cea .GetPointNumber (_cea .Length ());
_acd :=NewVectorPolar (_dcg /2,_aga +_bc +_bc /2);_ffd :=_daed .AddVector (_acd );_aacd :=NewVectorPolar (_ge ,_aga ).Add (NewVectorPolar (_cde /2,_aga +_bc /2));_beb :=_ffd .AddVector (_aacd );_fafa :=NewVectorPolar (_cgf ,_aga -_bc /2);_ggff :=_beb .AddVector (_fafa );
_gdgg :=NewVectorPolar (_ge ,_aga );_gce :=_ecd .AddVector (_gdgg );_gfb :=NewVectorPolar (_cgf ,_aga +_bc +_bc /2);_egd :=_gce .AddVector (_gfb );_adgb :=_ffd ;_ebd :=NewPath ();_ebd =_ebd .AppendPoint (_ffd );_ebd =_ebd .AppendPoint (_beb );_ebd =_ebd .AppendPoint (_ggff );
for _ ,_adb :=range _cea .Points [1:len (_cea .Points )-1]{_ebd =_ebd .AppendPoint (_adb );};_ebd =_ebd .AppendPoint (_gce );_ebd =_ebd .AppendPoint (_egd );_ebd =_ebd .AppendPoint (_adgb );_cea =_ebd ;};_dbd :=_d .NewContentCreator ();_dbd .Add_q ().SetNonStrokingColor (_bda .LineColor );
if len (gsName )> 1{_dbd .Add_gs (_cd .PdfObjectName (gsName ));};_cea =_cea .Offset (_bda .X1 ,_bda .Y1 );_dcbe :=_cea .GetBoundingBox ();DrawPathWithCreator (_cea ,_dbd );if _bda .LineStyle ==LineStyleDashed {_dbd .Add_d ([]int64 {1,1},0).Add_S ().Add_f ().Add_Q ();
}else {_dbd .Add_f ().Add_Q ();};return _dbd .Bytes (),_dcbe .ToPdfRectangle (),nil ;};

// BoundingBox represents the smallest rectangular area that encapsulates an object.
type BoundingBox struct{X float64 ;Y float64 ;Width float64 ;Height float64 ;};

// Line defines a line shape between point 1 (X1,Y1) and point 2 (X2,Y2).  The line ending styles can be none (regular line),
// or arrows at either end.  The line also has a specified width, color and opacity.
type Line struct{X1 float64 ;Y1 float64 ;X2 float64 ;Y2 float64 ;LineColor _ag .PdfColor ;Opacity float64 ;LineWidth float64 ;LineEndingStyle1 LineEndingStyle ;LineEndingStyle2 LineEndingStyle ;LineStyle LineStyle ;};

// FlipX flips the sign of the Dx component of the vector.
func (_dbb Vector )FlipX ()Vector {_dbb .Dx =-_dbb .Dx ;return _dbb };

// GetPolarAngle returns the angle the magnitude of the vector forms with the
// positive X-axis going counterclockwise.
func (_adga Vector )GetPolarAngle ()float64 {return _c .Atan2 (_adga .Dy ,_adga .Dx )};

// Copy returns a clone of the path.
func (_dae Path )Copy ()Path {_cgd :=Path {};_cgd .Points =append (_cgd .Points ,_dae .Points ...);return _cgd ;};func (_cbf Point )String ()string {return _f .Sprintf ("(\u0025\u002e\u0031\u0066\u002c\u0025\u002e\u0031\u0066\u0029",_cbf .X ,_cbf .Y );
};

// ToPdfRectangle returns the rectangle as a PDF rectangle.
func (_dde Rectangle )ToPdfRectangle ()*_ag .PdfRectangle {return &_ag .PdfRectangle {Llx :_dde .X ,Lly :_dde .Y ,Urx :_dde .X +_dde .Width ,Ury :_dde .Y +_dde .Height };};

// NewPoint returns a new point with the coordinates x, y.
func NewPoint (x ,y float64 )Point {return Point {X :x ,Y :y }};

// Point represents a two-dimensional point.
type Point struct{X float64 ;Y float64 ;};

// Circle represents a circle shape with fill and border properties that can be drawn to a PDF content stream.
type Circle struct{X float64 ;Y float64 ;Width float64 ;Height float64 ;FillEnabled bool ;FillColor _ag .PdfColor ;BorderEnabled bool ;BorderWidth float64 ;BorderColor _ag .PdfColor ;Opacity float64 ;};

// Offset shifts the Bezier path with the specified offsets.
func (_da CubicBezierPath )Offset (offX ,offY float64 )CubicBezierPath {for _g ,_ae :=range _da .Curves {_da .Curves [_g ]=_ae .AddOffsetXY (offX ,offY );};return _da ;};

// Magnitude returns the magnitude of the vector.
func (_agea Vector )Magnitude ()float64 {return _c .Sqrt (_c .Pow (_agea .Dx ,2.0)+_c .Pow (_agea .Dy ,2.0));};

// GetBounds returns the bounding box of the Bezier curve.
func (_cdd CubicBezierCurve )GetBounds ()_ag .PdfRectangle {_ca :=_cdd .P0 .X ;_ab :=_cdd .P0 .X ;_cad :=_cdd .P0 .Y ;_eb :=_cdd .P0 .Y ;for _cdc :=0.0;_cdc <=1.0;_cdc +=0.001{Rx :=_cdd .P0 .X *_c .Pow (1-_cdc ,3)+_cdd .P1 .X *3*_cdc *_c .Pow (1-_cdc ,2)+_cdd .P2 .X *3*_c .Pow (_cdc ,2)*(1-_cdc )+_cdd .P3 .X *_c .Pow (_cdc ,3);
Ry :=_cdd .P0 .Y *_c .Pow (1-_cdc ,3)+_cdd .P1 .Y *3*_cdc *_c .Pow (1-_cdc ,2)+_cdd .P2 .Y *3*_c .Pow (_cdc ,2)*(1-_cdc )+_cdd .P3 .Y *_c .Pow (_cdc ,3);if Rx < _ca {_ca =Rx ;};if Rx > _ab {_ab =Rx ;};if Ry < _cad {_cad =Ry ;};if Ry > _eb {_eb =Ry ;};};
_cc :=_ag .PdfRectangle {};_cc .Llx =_ca ;_cc .Lly =_cad ;_cc .Urx =_ab ;_cc .Ury =_eb ;return _cc ;};

// RemovePoint removes the point at the index specified by number from the
// path. The index is 1-based.
func (_ccf Path )RemovePoint (number int )Path {if number < 1||number > len (_ccf .Points ){return _ccf ;};_cdb :=number -1;_ccf .Points =append (_ccf .Points [:_cdb ],_ccf .Points [_cdb +1:]...);return _ccf ;};

// NewVector returns a new vector with the direction specified by dx and dy.
func NewVector (dx ,dy float64 )Vector {_fbf :=Vector {};_fbf .Dx =dx ;_fbf .Dy =dy ;return _fbf };

// Polygon is a multi-point shape that can be drawn to a PDF content stream.
type Polygon struct{Points [][]Point ;FillEnabled bool ;FillColor _ag .PdfColor ;BorderEnabled bool ;BorderColor _ag .PdfColor ;BorderWidth float64 ;};

// NewVectorPolar returns a new vector calculated from the specified
// magnitude and angle.
func NewVectorPolar (length float64 ,theta float64 )Vector {_cee :=Vector {};_cee .Dx =length *_c .Cos (theta );_cee .Dy =length *_c .Sin (theta );return _cee ;};

// DrawPathWithCreator makes the path with the content creator.
// Adds the PDF commands to draw the path to the creator instance.
func DrawPathWithCreator (path Path ,creator *_d .ContentCreator ){for _dcd ,_aae :=range path .Points {if _dcd ==0{creator .Add_m (_aae .X ,_aae .Y );}else {creator .Add_l (_aae .X ,_aae .Y );};};};

// CubicBezierPath represents a collection of cubic Bezier curves.
type CubicBezierPath struct{Curves []CubicBezierCurve ;};

// CurvePolygon is a multi-point shape with rings containing curves that can be
// drawn to a PDF content stream.
type CurvePolygon struct{Rings [][]CubicBezierCurve ;FillEnabled bool ;FillColor _ag .PdfColor ;BorderEnabled bool ;BorderColor _ag .PdfColor ;BorderWidth float64 ;};

// AddVector adds vector to a point.
func (_efc Point )AddVector (v Vector )Point {_efc .X +=v .Dx ;_efc .Y +=v .Dy ;return _efc };

// ToPdfRectangle returns the bounding box as a PDF rectangle.
func (_adg BoundingBox )ToPdfRectangle ()*_ag .PdfRectangle {return &_ag .PdfRectangle {Llx :_adg .X ,Lly :_adg .Y ,Urx :_adg .X +_adg .Width ,Ury :_adg .Y +_adg .Height };};

// CubicBezierCurve is defined by:
// R(t) = P0*(1-t)^3 + P1*3*t*(1-t)^2 + P2*3*t^2*(1-t) + P3*t^3
// where P0 is the current point, P1, P2 control points and P3 the final point.
type CubicBezierCurve struct{P0 Point ;P1 Point ;P2 Point ;P3 Point ;};

// GetBoundingBox returns the bounding box of the Bezier path.
func (_fc CubicBezierPath )GetBoundingBox ()Rectangle {_fcg :=Rectangle {};_cb :=0.0;_fb :=0.0;_cg :=0.0;_ga :=0.0;for _fg ,_ddd :=range _fc .Curves {_cag :=_ddd .GetBounds ();if _fg ==0{_cb =_cag .Llx ;_fb =_cag .Urx ;_cg =_cag .Lly ;_ga =_cag .Ury ;continue ;
};if _cag .Llx < _cb {_cb =_cag .Llx ;};if _cag .Urx > _fb {_fb =_cag .Urx ;};if _cag .Lly < _cg {_cg =_cag .Lly ;};if _cag .Ury > _ga {_ga =_cag .Ury ;};};_fcg .X =_cb ;_fcg .Y =_cg ;_fcg .Width =_fb -_cb ;_fcg .Height =_ga -_cg ;return _fcg ;};

// GetBoundingBox returns the bounding box of the path.
func (_cf Path )GetBoundingBox ()BoundingBox {_af :=BoundingBox {};_gd :=0.0;_df :=0.0;_ad :=0.0;_dfa :=0.0;for _cef ,_db :=range _cf .Points {if _cef ==0{_gd =_db .X ;_df =_db .X ;_ad =_db .Y ;_dfa =_db .Y ;continue ;};if _db .X < _gd {_gd =_db .X ;};
if _db .X > _df {_df =_db .X ;};if _db .Y < _ad {_ad =_db .Y ;};if _db .Y > _dfa {_dfa =_db .Y ;};};_af .X =_gd ;_af .Y =_ad ;_af .Width =_df -_gd ;_af .Height =_dfa -_ad ;return _af ;};

// FlipY flips the sign of the Dy component of the vector.
func (_fafd Vector )FlipY ()Vector {_fafd .Dy =-_fafd .Dy ;return _fafd };

// AddOffsetXY adds X,Y offset to all points on a curve.
func (_ce CubicBezierCurve )AddOffsetXY (offX ,offY float64 )CubicBezierCurve {_ce .P0 .X +=offX ;_ce .P1 .X +=offX ;_ce .P2 .X +=offX ;_ce .P3 .X +=offX ;_ce .P0 .Y +=offY ;_ce .P1 .Y +=offY ;_ce .P2 .Y +=offY ;_ce .P3 .Y +=offY ;return _ce ;};

// NewPath returns a new empty path.
func NewPath ()Path {return Path {}};

// AppendPoint adds the specified point to the path.
func (_ee Path )AppendPoint (point Point )Path {_ee .Points =append (_ee .Points ,point );return _ee };

// Scale scales the vector by the specified factor.
func (_fee Vector )Scale (factor float64 )Vector {_fbea :=_fee .Magnitude ();_ffb :=_fee .GetPolarAngle ();_fee .Dx =factor *_fbea *_c .Cos (_ffb );_fee .Dy =factor *_fbea *_c .Sin (_ffb );return _fee ;};

// Rectangle is a shape with a specified Width and Height and a lower left corner at (X,Y) that can be
// drawn to a PDF content stream.  The rectangle can optionally have a border and a filling color.
// The Width/Height includes the border (if any specified), i.e. is positioned inside.
type Rectangle struct{

// Position and size properties.
X float64 ;Y float64 ;Width float64 ;Height float64 ;

// Fill properties.
FillEnabled bool ;FillColor _ag .PdfColor ;

// Border properties.
BorderEnabled bool ;BorderColor _ag .PdfColor ;BorderWidth float64 ;BorderRadiusTopLeft float64 ;BorderRadiusTopRight float64 ;BorderRadiusBottomLeft float64 ;BorderRadiusBottomRight float64 ;

// Shape opacity (0-1 interval).
Opacity float64 ;};

// LineEndingStyle defines the line ending style for lines.
// The currently supported line ending styles are None, Arrow (ClosedArrow) and Butt.
type LineEndingStyle int ;

// Path consists of straight line connections between each point defined in an array of points.
type Path struct{Points []Point ;};

// BasicLine defines a line between point 1 (X1,Y1) and point 2 (X2,Y2). The line has a specified width, color and opacity.
type BasicLine struct{X1 float64 ;Y1 float64 ;X2 float64 ;Y2 float64 ;LineColor _ag .PdfColor ;Opacity float64 ;LineWidth float64 ;LineStyle LineStyle ;DashArray []int64 ;DashPhase int64 ;};