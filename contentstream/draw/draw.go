//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package draw has handy features for defining paths which can be used to draw content on a PDF page.  Handles
// defining paths as points, vector calculations and conversion to PDF content stream data which can be used in
// page content streams and XObject forms and thus also in annotation appearance streams.
//
// Also defines utility functions for drawing common shapes such as rectangles, lines and circles (ovals).
package draw ;import (_e "fmt";_a "github.com/unidoc/unipdf/v3/contentstream";_fc "github.com/unidoc/unipdf/v3/core";_c "github.com/unidoc/unipdf/v3/internal/transform";_f "github.com/unidoc/unipdf/v3/model";_gd "math";);

// NewVector returns a new vector with the direction specified by dx and dy.
func NewVector (dx ,dy float64 )Vector {_ecc :=Vector {};_ecc .Dx =dx ;_ecc .Dy =dy ;return _ecc };

// ToPdfRectangle returns the rectangle as a PDF rectangle.
func (_fdf Rectangle )ToPdfRectangle ()*_f .PdfRectangle {return &_f .PdfRectangle {Llx :_fdf .X ,Lly :_fdf .Y ,Urx :_fdf .X +_fdf .Width ,Ury :_fdf .Y +_fdf .Height };};

// Rotate returns a new Point at `p` rotated by `theta` degrees.
func (_cc Point )Rotate (theta float64 )Point {_ga :=_c .NewPoint (_cc .X ,_cc .Y ).Rotate (theta );return NewPoint (_ga .X ,_ga .Y );};

// CubicBezierPath represents a collection of cubic Bezier curves.
type CubicBezierPath struct{Curves []CubicBezierCurve ;};

// Draw draws the circle. Can specify a graphics state (gsName) for setting opacity etc.  Otherwise leave empty ("").
// Returns the content stream as a byte array, the bounding box and an error on failure.
func (_ebf Circle )Draw (gsName string )([]byte ,*_f .PdfRectangle ,error ){_edg :=_ebf .Width /2;_fg :=_ebf .Height /2;if _ebf .BorderEnabled {_edg -=_ebf .BorderWidth /2;_fg -=_ebf .BorderWidth /2;};_fce :=0.551784;_aea :=_edg *_fce ;_gag :=_fg *_fce ;
_gbc :=NewCubicBezierPath ();_gbc =_gbc .AppendCurve (NewCubicBezierCurve (-_edg ,0,-_edg ,_gag ,-_aea ,_fg ,0,_fg ));_gbc =_gbc .AppendCurve (NewCubicBezierCurve (0,_fg ,_aea ,_fg ,_edg ,_gag ,_edg ,0));_gbc =_gbc .AppendCurve (NewCubicBezierCurve (_edg ,0,_edg ,-_gag ,_aea ,-_fg ,0,-_fg ));
_gbc =_gbc .AppendCurve (NewCubicBezierCurve (0,-_fg ,-_aea ,-_fg ,-_edg ,-_gag ,-_edg ,0));_gbc =_gbc .Offset (_edg ,_fg );if _ebf .BorderEnabled {_gbc =_gbc .Offset (_ebf .BorderWidth /2,_ebf .BorderWidth /2);};if _ebf .X !=0||_ebf .Y !=0{_gbc =_gbc .Offset (_ebf .X ,_ebf .Y );
};_ceef :=_a .NewContentCreator ();_ceef .Add_q ();if _ebf .FillEnabled {_ceef .SetNonStrokingColor (_ebf .FillColor );};if _ebf .BorderEnabled {_ceef .SetStrokingColor (_ebf .BorderColor );_ceef .Add_w (_ebf .BorderWidth );};if len (gsName )> 1{_ceef .Add_gs (_fc .PdfObjectName (gsName ));
};DrawBezierPathWithCreator (_gbc ,_ceef );_ceef .Add_h ();if _ebf .FillEnabled &&_ebf .BorderEnabled {_ceef .Add_B ();}else if _ebf .FillEnabled {_ceef .Add_f ();}else if _ebf .BorderEnabled {_ceef .Add_S ();};_ceef .Add_Q ();_acg :=_gbc .GetBoundingBox ();
if _ebf .BorderEnabled {_acg .Height +=_ebf .BorderWidth ;_acg .Width +=_ebf .BorderWidth ;_acg .X -=_ebf .BorderWidth /2;_acg .Y -=_ebf .BorderWidth /2;};return _ceef .Bytes (),_acg .ToPdfRectangle (),nil ;};const (LineStyleSolid LineStyle =0;LineStyleDashed LineStyle =1;
);

// RemovePoint removes the point at the index specified by number from the
// path. The index is 1-based.
func (_dfg Path )RemovePoint (number int )Path {if number < 1||number > len (_dfg .Points ){return _dfg ;};_abef :=number -1;_dfg .Points =append (_dfg .Points [:_abef ],_dfg .Points [_abef +1:]...);return _dfg ;};

// NewPath returns a new empty path.
func NewPath ()Path {return Path {}};

// Add adds the specified vector to the current one and returns the result.
func (_baeb Vector )Add (other Vector )Vector {_baeb .Dx +=other .Dx ;_baeb .Dy +=other .Dy ;return _baeb ;};

// FlipY flips the sign of the Dy component of the vector.
func (_eff Vector )FlipY ()Vector {_eff .Dy =-_eff .Dy ;return _eff };

// Path consists of straight line connections between each point defined in an array of points.
type Path struct{Points []Point ;};

// Scale scales the vector by the specified factor.
func (_egad Vector )Scale (factor float64 )Vector {_gae :=_egad .Magnitude ();_gcad :=_egad .GetPolarAngle ();_egad .Dx =factor *_gae *_gd .Cos (_gcad );_egad .Dy =factor *_gae *_gd .Sin (_gcad );return _egad ;};

// Draw draws the basic line to PDF. Generates the content stream which can be used in page contents or appearance
// stream of annotation. Returns the stream content, XForm bounding box (local), bounding box and an error if
// one occurred.
func (_ffe BasicLine )Draw (gsName string )([]byte ,*_f .PdfRectangle ,error ){_dba :=NewPath ();_dba =_dba .AppendPoint (NewPoint (_ffe .X1 ,_ffe .Y1 ));_dba =_dba .AppendPoint (NewPoint (_ffe .X2 ,_ffe .Y2 ));_agg :=_a .NewContentCreator ();_agg .Add_q ().Add_w (_ffe .LineWidth ).SetStrokingColor (_ffe .LineColor );
if _ffe .LineStyle ==LineStyleDashed {if _ffe .DashArray ==nil {_ffe .DashArray =[]int64 {1,1};};_agg .Add_d (_ffe .DashArray ,_ffe .DashPhase );};if len (gsName )> 1{_agg .Add_gs (_fc .PdfObjectName (gsName ));};DrawPathWithCreator (_dba ,_agg );_agg .Add_S ().Add_Q ();
return _agg .Bytes (),_dba .GetBoundingBox ().ToPdfRectangle (),nil ;};

// BoundingBox represents the smallest rectangular area that encapsulates an object.
type BoundingBox struct{X float64 ;Y float64 ;Width float64 ;Height float64 ;};

// CurvePolygon is a multi-point shape with rings containing curves that can be
// drawn to a PDF content stream.
type CurvePolygon struct{Rings [][]CubicBezierCurve ;FillEnabled bool ;FillColor _f .PdfColor ;BorderEnabled bool ;BorderColor _f .PdfColor ;BorderWidth float64 ;};

// Rectangle is a shape with a specified Width and Height and a lower left corner at (X,Y) that can be
// drawn to a PDF content stream.  The rectangle can optionally have a border and a filling color.
// The Width/Height includes the border (if any specified), i.e. is positioned inside.
type Rectangle struct{

// Position and size properties.
X float64 ;Y float64 ;Width float64 ;Height float64 ;

// Fill properties.
FillEnabled bool ;FillColor _f .PdfColor ;

// Border properties.
BorderEnabled bool ;BorderColor _f .PdfColor ;BorderWidth float64 ;BorderRadiusTopLeft float64 ;BorderRadiusTopRight float64 ;BorderRadiusBottomLeft float64 ;BorderRadiusBottomRight float64 ;

// Shape opacity (0-1 interval).
Opacity float64 ;};

// Add shifts the coordinates of the point with dx, dy and returns the result.
func (_dgb Point )Add (dx ,dy float64 )Point {_dgb .X +=dx ;_dgb .Y +=dy ;return _dgb };

// NewVectorPolar returns a new vector calculated from the specified
// magnitude and angle.
func NewVectorPolar (length float64 ,theta float64 )Vector {_fad :=Vector {};_fad .Dx =length *_gd .Cos (theta );_fad .Dy =length *_gd .Sin (theta );return _fad ;};

// BasicLine defines a line between point 1 (X1,Y1) and point 2 (X2,Y2). The line has a specified width, color and opacity.
type BasicLine struct{X1 float64 ;Y1 float64 ;X2 float64 ;Y2 float64 ;LineColor _f .PdfColor ;Opacity float64 ;LineWidth float64 ;LineStyle LineStyle ;DashArray []int64 ;DashPhase int64 ;};

// NewVectorBetween returns a new vector with the direction specified by
// the subtraction of point a from point b (b-a).
func NewVectorBetween (a Point ,b Point )Vector {_bbcb :=Vector {};_bbcb .Dx =b .X -a .X ;_bbcb .Dy =b .Y -a .Y ;return _bbcb ;};

// Offset shifts the Bezier path with the specified offsets.
func (_fbe CubicBezierPath )Offset (offX ,offY float64 )CubicBezierPath {for _df ,_cf :=range _fbe .Curves {_fbe .Curves [_df ]=_cf .AddOffsetXY (offX ,offY );};return _fbe ;};

// NewCubicBezierCurve returns a new cubic Bezier curve.
func NewCubicBezierCurve (x0 ,y0 ,x1 ,y1 ,x2 ,y2 ,x3 ,y3 float64 )CubicBezierCurve {_gc :=CubicBezierCurve {};_gc .P0 =NewPoint (x0 ,y0 );_gc .P1 =NewPoint (x1 ,y1 );_gc .P2 =NewPoint (x2 ,y2 );_gc .P3 =NewPoint (x3 ,y3 );return _gc ;};

// LineEndingStyle defines the line ending style for lines.
// The currently supported line ending styles are None, Arrow (ClosedArrow) and Butt.
type LineEndingStyle int ;

// Draw draws the composite curve polygon. A graphics state name can be
// specified for setting the curve properties (e.g. setting the opacity).
// Otherwise leave empty (""). Returns the content stream as a byte array
// and the bounding box of the polygon.
func (_ea CurvePolygon )Draw (gsName string )([]byte ,*_f .PdfRectangle ,error ){_cfe :=_a .NewContentCreator ();_cfe .Add_q ();_ea .FillEnabled =_ea .FillEnabled &&_ea .FillColor !=nil ;if _ea .FillEnabled {_cfe .SetNonStrokingColor (_ea .FillColor );
};_ea .BorderEnabled =_ea .BorderEnabled &&_ea .BorderColor !=nil ;if _ea .BorderEnabled {_cfe .SetStrokingColor (_ea .BorderColor );_cfe .Add_w (_ea .BorderWidth );};if len (gsName )> 1{_cfe .Add_gs (_fc .PdfObjectName (gsName ));};_ccb :=NewCubicBezierPath ();
for _ ,_cea :=range _ea .Rings {for _fba ,_ege :=range _cea {if _fba ==0{_cfe .Add_m (_ege .P0 .X ,_ege .P0 .Y );}else {_cfe .Add_l (_ege .P0 .X ,_ege .P0 .Y );};_cfe .Add_c (_ege .P1 .X ,_ege .P1 .Y ,_ege .P2 .X ,_ege .P2 .Y ,_ege .P3 .X ,_ege .P3 .Y );
_ccb =_ccb .AppendCurve (_ege );};_cfe .Add_h ();};if _ea .FillEnabled &&_ea .BorderEnabled {_cfe .Add_B ();}else if _ea .FillEnabled {_cfe .Add_f ();}else if _ea .BorderEnabled {_cfe .Add_S ();};_cfe .Add_Q ();return _cfe .Bytes (),_ccb .GetBoundingBox ().ToPdfRectangle (),nil ;
};

// FlipX flips the sign of the Dx component of the vector.
func (_abb Vector )FlipX ()Vector {_abb .Dx =-_abb .Dx ;return _abb };

// Polygon is a multi-point shape that can be drawn to a PDF content stream.
type Polygon struct{Points [][]Point ;FillEnabled bool ;FillColor _f .PdfColor ;BorderEnabled bool ;BorderColor _f .PdfColor ;BorderWidth float64 ;};

// Polyline defines a slice of points that are connected as straight lines.
type Polyline struct{Points []Point ;LineColor _f .PdfColor ;LineWidth float64 ;};

// Line defines a line shape between point 1 (X1,Y1) and point 2 (X2,Y2).  The line ending styles can be none (regular line),
// or arrows at either end.  The line also has a specified width, color and opacity.
type Line struct{X1 float64 ;Y1 float64 ;X2 float64 ;Y2 float64 ;LineColor _f .PdfColor ;Opacity float64 ;LineWidth float64 ;LineEndingStyle1 LineEndingStyle ;LineEndingStyle2 LineEndingStyle ;LineStyle LineStyle ;};

// NewCubicBezierPath returns a new empty cubic Bezier path.
func NewCubicBezierPath ()CubicBezierPath {_d :=CubicBezierPath {};_d .Curves =[]CubicBezierCurve {};return _d ;};func (_gb Point )String ()string {return _e .Sprintf ("(\u0025\u002e\u0031\u0066\u002c\u0025\u002e\u0031\u0066\u0029",_gb .X ,_gb .Y );};

// AddVector adds vector to a point.
func (_fca Point )AddVector (v Vector )Point {_fca .X +=v .Dx ;_fca .Y +=v .Dy ;return _fca };

// DrawBezierPathWithCreator makes the bezier path with the content creator.
// Adds the PDF commands to draw the path to the creator instance.
func DrawBezierPathWithCreator (bpath CubicBezierPath ,creator *_a .ContentCreator ){for _ddbg ,_dce :=range bpath .Curves {if _ddbg ==0{creator .Add_m (_dce .P0 .X ,_dce .P0 .Y );};creator .Add_c (_dce .P1 .X ,_dce .P1 .Y ,_dce .P2 .X ,_dce .P2 .Y ,_dce .P3 .X ,_dce .P3 .Y );
};};

// AppendPoint adds the specified point to the path.
func (_aca Path )AppendPoint (point Point )Path {_aca .Points =append (_aca .Points ,point );return _aca };

// Vector represents a two-dimensional vector.
type Vector struct{Dx float64 ;Dy float64 ;};

// GetPolarAngle returns the angle the magnitude of the vector forms with the
// positive X-axis going counterclockwise.
func (_fbeg Vector )GetPolarAngle ()float64 {return _gd .Atan2 (_fbeg .Dy ,_fbeg .Dx )};

// AddOffsetXY adds X,Y offset to all points on a curve.
func (_b CubicBezierCurve )AddOffsetXY (offX ,offY float64 )CubicBezierCurve {_b .P0 .X +=offX ;_b .P1 .X +=offX ;_b .P2 .X +=offX ;_b .P3 .X +=offX ;_b .P0 .Y +=offY ;_b .P1 .Y +=offY ;_b .P2 .Y +=offY ;_b .P3 .Y +=offY ;return _b ;};

// Draw draws the polyline. A graphics state name can be specified for
// setting the polyline properties (e.g. setting the opacity). Otherwise leave
// empty (""). Returns the content stream as a byte array and the polyline
// bounding box.
func (_gfdc Polyline )Draw (gsName string )([]byte ,*_f .PdfRectangle ,error ){if _gfdc .LineColor ==nil {_gfdc .LineColor =_f .NewPdfColorDeviceRGB (0,0,0);};_eed :=NewPath ();for _ ,_ge :=range _gfdc .Points {_eed =_eed .AppendPoint (_ge );};_acgb :=_a .NewContentCreator ();
_acgb .Add_q ().SetStrokingColor (_gfdc .LineColor ).Add_w (_gfdc .LineWidth );if len (gsName )> 1{_acgb .Add_gs (_fc .PdfObjectName (gsName ));};DrawPathWithCreator (_eed ,_acgb );_acgb .Add_S ();_acgb .Add_Q ();return _acgb .Bytes (),_eed .GetBoundingBox ().ToPdfRectangle (),nil ;
};

// ToPdfRectangle returns the bounding box as a PDF rectangle.
func (_bb BoundingBox )ToPdfRectangle ()*_f .PdfRectangle {return &_f .PdfRectangle {Llx :_bb .X ,Lly :_bb .Y ,Urx :_bb .X +_bb .Width ,Ury :_bb .Y +_bb .Height };};

// DrawPathWithCreator makes the path with the content creator.
// Adds the PDF commands to draw the path to the creator instance.
func DrawPathWithCreator (path Path ,creator *_a .ContentCreator ){for _dcd ,_fcaa :=range path .Points {if _dcd ==0{creator .Add_m (_fcaa .X ,_fcaa .Y );}else {creator .Add_l (_fcaa .X ,_fcaa .Y );};};};const (LineEndingStyleNone LineEndingStyle =0;LineEndingStyleArrow LineEndingStyle =1;
LineEndingStyleButt LineEndingStyle =2;);

// Length returns the number of points in the path.
func (_fe Path )Length ()int {return len (_fe .Points )};

// AppendCurve appends the specified Bezier curve to the path.
func (_fb CubicBezierPath )AppendCurve (curve CubicBezierCurve )CubicBezierPath {_fb .Curves =append (_fb .Curves ,curve );return _fb ;};

// Draw draws the polygon. A graphics state name can be specified for
// setting the polygon properties (e.g. setting the opacity). Otherwise leave
// empty (""). Returns the content stream as a byte array and the polygon
// bounding box.
func (_bf Polygon )Draw (gsName string )([]byte ,*_f .PdfRectangle ,error ){_bcc :=_a .NewContentCreator ();_bcc .Add_q ();_bf .FillEnabled =_bf .FillEnabled &&_bf .FillColor !=nil ;if _bf .FillEnabled {_bcc .SetNonStrokingColor (_bf .FillColor );};_bf .BorderEnabled =_bf .BorderEnabled &&_bf .BorderColor !=nil ;
if _bf .BorderEnabled {_bcc .SetStrokingColor (_bf .BorderColor );_bcc .Add_w (_bf .BorderWidth );};if len (gsName )> 1{_bcc .Add_gs (_fc .PdfObjectName (gsName ));};_dbc :=NewPath ();for _ ,_gde :=range _bf .Points {for _bbc ,_bbd :=range _gde {_dbc =_dbc .AppendPoint (_bbd );
if _bbc ==0{_bcc .Add_m (_bbd .X ,_bbd .Y );}else {_bcc .Add_l (_bbd .X ,_bbd .Y );};};_bcc .Add_h ();};if _bf .FillEnabled &&_bf .BorderEnabled {_bcc .Add_B ();}else if _bf .FillEnabled {_bcc .Add_f ();}else if _bf .BorderEnabled {_bcc .Add_S ();};_bcc .Add_Q ();
return _bcc .Bytes (),_dbc .GetBoundingBox ().ToPdfRectangle (),nil ;};

// PolyBezierCurve represents a composite curve that is the result of
// joining multiple cubic Bezier curves.
type PolyBezierCurve struct{Curves []CubicBezierCurve ;BorderWidth float64 ;BorderColor _f .PdfColor ;FillEnabled bool ;FillColor _f .PdfColor ;};

// NewPoint returns a new point with the coordinates x, y.
func NewPoint (x ,y float64 )Point {return Point {X :x ,Y :y }};

// Magnitude returns the magnitude of the vector.
func (_gbe Vector )Magnitude ()float64 {return _gd .Sqrt (_gd .Pow (_gbe .Dx ,2.0)+_gd .Pow (_gbe .Dy ,2.0));};

// CubicBezierCurve is defined by:
// R(t) = P0*(1-t)^3 + P1*3*t*(1-t)^2 + P2*3*t^2*(1-t) + P3*t^3
// where P0 is the current point, P1, P2 control points and P3 the final point.
type CubicBezierCurve struct{P0 Point ;P1 Point ;P2 Point ;P3 Point ;};

// GetPointNumber returns the path point at the index specified by number.
// The index is 1-based.
func (_ce Path )GetPointNumber (number int )Point {if number < 1||number > len (_ce .Points ){return Point {};};return _ce .Points [number -1];};

// Rotate rotates the vector by the specified angle.
func (_dcc Vector )Rotate (phi float64 )Vector {_fbec :=_dcc .Magnitude ();_ede :=_dcc .GetPolarAngle ();return NewVectorPolar (_fbec ,_ede +phi );};

// GetBoundingBox returns the bounding box of the path.
func (_gf Path )GetBoundingBox ()BoundingBox {_dfc :=BoundingBox {};_ba :=0.0;_cda :=0.0;_da :=0.0;_cee :=0.0;for _gdc ,_egg :=range _gf .Points {if _gdc ==0{_ba =_egg .X ;_cda =_egg .X ;_da =_egg .Y ;_cee =_egg .Y ;continue ;};if _egg .X < _ba {_ba =_egg .X ;
};if _egg .X > _cda {_cda =_egg .X ;};if _egg .Y < _da {_da =_egg .Y ;};if _egg .Y > _cee {_cee =_egg .Y ;};};_dfc .X =_ba ;_dfc .Y =_da ;_dfc .Width =_cda -_ba ;_dfc .Height =_cee -_da ;return _dfc ;};

// Offset shifts the path with the specified offsets.
func (_dg Path )Offset (offX ,offY float64 )Path {for _ed ,_fdd :=range _dg .Points {_dg .Points [_ed ]=_fdd .Add (offX ,offY );};return _dg ;};

// Draw draws the composite Bezier curve. A graphics state name can be
// specified for setting the curve properties (e.g. setting the opacity).
// Otherwise leave empty (""). Returns the content stream as a byte array and
// the curve bounding box.
func (_gbg PolyBezierCurve )Draw (gsName string )([]byte ,*_f .PdfRectangle ,error ){if _gbg .BorderColor ==nil {_gbg .BorderColor =_f .NewPdfColorDeviceRGB (0,0,0);};_gad :=NewCubicBezierPath ();for _ ,_gg :=range _gbg .Curves {_gad =_gad .AppendCurve (_gg );
};_ffd :=_a .NewContentCreator ();_ffd .Add_q ();_gbg .FillEnabled =_gbg .FillEnabled &&_gbg .FillColor !=nil ;if _gbg .FillEnabled {_ffd .SetNonStrokingColor (_gbg .FillColor );};_ffd .SetStrokingColor (_gbg .BorderColor );_ffd .Add_w (_gbg .BorderWidth );
if len (gsName )> 1{_ffd .Add_gs (_fc .PdfObjectName (gsName ));};for _bgc ,_db :=range _gad .Curves {if _bgc ==0{_ffd .Add_m (_db .P0 .X ,_db .P0 .Y );}else {_ffd .Add_l (_db .P0 .X ,_db .P0 .Y );};_ffd .Add_c (_db .P1 .X ,_db .P1 .Y ,_db .P2 .X ,_db .P2 .Y ,_db .P3 .X ,_db .P3 .Y );
};if _gbg .FillEnabled {_ffd .Add_h ();_ffd .Add_B ();}else {_ffd .Add_S ();};_ffd .Add_Q ();return _ffd .Bytes (),_gad .GetBoundingBox ().ToPdfRectangle (),nil ;};

// Draw draws the line to PDF contentstream. Generates the content stream which can be used in page contents or
// appearance stream of annotation. Returns the stream content, XForm bounding box (local), bounding box and an error
// if one occurred.
func (_ecf Line )Draw (gsName string )([]byte ,*_f .PdfRectangle ,error ){_fdc ,_dfe :=_ecf .X1 ,_ecf .X2 ;_acf ,_fddf :=_ecf .Y1 ,_ecf .Y2 ;_ef :=_fddf -_acf ;_eggc :=_dfe -_fdc ;_dd :=_gd .Atan2 (_ef ,_eggc );L :=_gd .Sqrt (_gd .Pow (_eggc ,2.0)+_gd .Pow (_ef ,2.0));
_dag :=_ecf .LineWidth ;_gdg :=_gd .Pi ;_deb :=1.0;if _eggc < 0{_deb *=-1.0;};if _ef < 0{_deb *=-1.0;};VsX :=_deb *(-_dag /2*_gd .Cos (_dd +_gdg /2));VsY :=_deb *(-_dag /2*_gd .Sin (_dd +_gdg /2)+_dag *_gd .Sin (_dd +_gdg /2));V1X :=VsX +_dag /2*_gd .Cos (_dd +_gdg /2);
V1Y :=VsY +_dag /2*_gd .Sin (_dd +_gdg /2);V2X :=VsX +_dag /2*_gd .Cos (_dd +_gdg /2)+L *_gd .Cos (_dd );V2Y :=VsY +_dag /2*_gd .Sin (_dd +_gdg /2)+L *_gd .Sin (_dd );V3X :=VsX +_dag /2*_gd .Cos (_dd +_gdg /2)+L *_gd .Cos (_dd )+_dag *_gd .Cos (_dd -_gdg /2);
V3Y :=VsY +_dag /2*_gd .Sin (_dd +_gdg /2)+L *_gd .Sin (_dd )+_dag *_gd .Sin (_dd -_gdg /2);V4X :=VsX +_dag /2*_gd .Cos (_dd -_gdg /2);V4Y :=VsY +_dag /2*_gd .Sin (_dd -_gdg /2);_ddb :=NewPath ();_ddb =_ddb .AppendPoint (NewPoint (V1X ,V1Y ));_ddb =_ddb .AppendPoint (NewPoint (V2X ,V2Y ));
_ddb =_ddb .AppendPoint (NewPoint (V3X ,V3Y ));_ddb =_ddb .AppendPoint (NewPoint (V4X ,V4Y ));_cb :=_ecf .LineEndingStyle1 ;_dff :=_ecf .LineEndingStyle2 ;_bab :=3*_dag ;_aeb :=3*_dag ;_bcf :=(_aeb -_dag )/2;if _dff ==LineEndingStyleArrow {_ega :=_ddb .GetPointNumber (2);
_bed :=NewVectorPolar (_bab ,_dd +_gdg );_cbe :=_ega .AddVector (_bed );_bae :=NewVectorPolar (_aeb /2,_dd +_gdg /2);_fea :=NewVectorPolar (_bab ,_dd );_ggb :=NewVectorPolar (_bcf ,_dd +_gdg /2);_aga :=_cbe .AddVector (_ggb );_fff :=_fea .Add (_bae .Flip ());
_dfee :=_aga .AddVector (_fff );_cfc :=_bae .Scale (2).Flip ().Add (_fff .Flip ());_eae :=_dfee .AddVector (_cfc );_dfa :=_cbe .AddVector (NewVectorPolar (_dag ,_dd -_gdg /2));_gfd :=NewPath ();_gfd =_gfd .AppendPoint (_ddb .GetPointNumber (1));_gfd =_gfd .AppendPoint (_cbe );
_gfd =_gfd .AppendPoint (_aga );_gfd =_gfd .AppendPoint (_dfee );_gfd =_gfd .AppendPoint (_eae );_gfd =_gfd .AppendPoint (_dfa );_gfd =_gfd .AppendPoint (_ddb .GetPointNumber (4));_ddb =_gfd ;};if _cb ==LineEndingStyleArrow {_cg :=_ddb .GetPointNumber (1);
_gagb :=_ddb .GetPointNumber (_ddb .Length ());_cec :=NewVectorPolar (_dag /2,_dd +_gdg +_gdg /2);_cgc :=_cg .AddVector (_cec );_fgf :=NewVectorPolar (_bab ,_dd ).Add (NewVectorPolar (_aeb /2,_dd +_gdg /2));_aecf :=_cgc .AddVector (_fgf );_ecd :=NewVectorPolar (_bcf ,_dd -_gdg /2);
_dgd :=_aecf .AddVector (_ecd );_ded :=NewVectorPolar (_bab ,_dd );_ddbb :=_gagb .AddVector (_ded );_dc :=NewVectorPolar (_bcf ,_dd +_gdg +_gdg /2);_aaa :=_ddbb .AddVector (_dc );_gfa :=_cgc ;_aag :=NewPath ();_aag =_aag .AppendPoint (_cgc );_aag =_aag .AppendPoint (_aecf );
_aag =_aag .AppendPoint (_dgd );for _ ,_aeac :=range _ddb .Points [1:len (_ddb .Points )-1]{_aag =_aag .AppendPoint (_aeac );};_aag =_aag .AppendPoint (_ddbb );_aag =_aag .AppendPoint (_aaa );_aag =_aag .AppendPoint (_gfa );_ddb =_aag ;};_abd :=_a .NewContentCreator ();
_abd .Add_q ().SetNonStrokingColor (_ecf .LineColor );if len (gsName )> 1{_abd .Add_gs (_fc .PdfObjectName (gsName ));};_ddb =_ddb .Offset (_ecf .X1 ,_ecf .Y1 );_baf :=_ddb .GetBoundingBox ();DrawPathWithCreator (_ddb ,_abd );if _ecf .LineStyle ==LineStyleDashed {_abd .Add_d ([]int64 {1,1},0).Add_S ().Add_f ().Add_Q ();
}else {_abd .Add_f ().Add_Q ();};return _abd .Bytes (),_baf .ToPdfRectangle (),nil ;};

// Flip changes the sign of the vector: -vector.
func (_bbe Vector )Flip ()Vector {_ece :=_bbe .Magnitude ();_beb :=_bbe .GetPolarAngle ();_bbe .Dx =_ece *_gd .Cos (_beb +_gd .Pi );_bbe .Dy =_ece *_gd .Sin (_beb +_gd .Pi );return _bbe ;};

// Copy returns a clone of the Bezier path.
func (_cd CubicBezierPath )Copy ()CubicBezierPath {_be :=CubicBezierPath {};_be .Curves =append (_be .Curves ,_cd .Curves ...);return _be ;};

// GetBounds returns the bounding box of the Bezier curve.
func (_ae CubicBezierCurve )GetBounds ()_f .PdfRectangle {_bg :=_ae .P0 .X ;_fcb :=_ae .P0 .X ;_eg :=_ae .P0 .Y ;_bc :=_ae .P0 .Y ;for _fd :=0.0;_fd <=1.0;_fd +=0.001{Rx :=_ae .P0 .X *_gd .Pow (1-_fd ,3)+_ae .P1 .X *3*_fd *_gd .Pow (1-_fd ,2)+_ae .P2 .X *3*_gd .Pow (_fd ,2)*(1-_fd )+_ae .P3 .X *_gd .Pow (_fd ,3);
Ry :=_ae .P0 .Y *_gd .Pow (1-_fd ,3)+_ae .P1 .Y *3*_fd *_gd .Pow (1-_fd ,2)+_ae .P2 .Y *3*_gd .Pow (_fd ,2)*(1-_fd )+_ae .P3 .Y *_gd .Pow (_fd ,3);if Rx < _bg {_bg =Rx ;};if Rx > _fcb {_fcb =Rx ;};if Ry < _eg {_eg =Ry ;};if Ry > _bc {_bc =Ry ;};};_eb :=_f .PdfRectangle {};
_eb .Llx =_bg ;_eb .Lly =_eg ;_eb .Urx =_fcb ;_eb .Ury =_bc ;return _eb ;};

// Copy returns a clone of the path.
func (_af Path )Copy ()Path {_fee :=Path {};_fee .Points =append (_fee .Points ,_af .Points ...);return _fee ;};

// Circle represents a circle shape with fill and border properties that can be drawn to a PDF content stream.
type Circle struct{X float64 ;Y float64 ;Width float64 ;Height float64 ;FillEnabled bool ;FillColor _f .PdfColor ;BorderEnabled bool ;BorderWidth float64 ;BorderColor _f .PdfColor ;Opacity float64 ;};

// LineStyle refers to how the line will be created.
type LineStyle int ;

// Draw draws the rectangle. A graphics state can be specified for
// setting additional properties (e.g. opacity). Otherwise pass an empty string
// for the `gsName` parameter. The method returns the content stream as a byte
// array and the bounding box of the shape.
func (_gca Rectangle )Draw (gsName string )([]byte ,*_f .PdfRectangle ,error ){_gfc :=_a .NewContentCreator ();_gfc .Add_q ();if _gca .FillEnabled {_gfc .SetNonStrokingColor (_gca .FillColor );};if _gca .BorderEnabled {_gfc .SetStrokingColor (_gca .BorderColor );
_gfc .Add_w (_gca .BorderWidth );};if len (gsName )> 1{_gfc .Add_gs (_fc .PdfObjectName (gsName ));};var (_bcg ,_edf =_gca .X ,_gca .Y ;_gfb ,_ca =_gca .Width ,_gca .Height ;_fbad =_gd .Abs (_gca .BorderRadiusTopLeft );_ec =_gd .Abs (_gca .BorderRadiusTopRight );
_de =_gd .Abs (_gca .BorderRadiusBottomLeft );_beg =_gd .Abs (_gca .BorderRadiusBottomRight );_acbg =0.4477;);_ffa :=Path {Points :[]Point {{X :_bcg +_gfb -_beg ,Y :_edf },{X :_bcg +_gfb ,Y :_edf +_ca -_ec },{X :_bcg +_fbad ,Y :_edf +_ca },{X :_bcg ,Y :_edf +_de }}};
_acgd :=[][7]float64 {{_beg ,_bcg +_gfb -_beg *_acbg ,_edf ,_bcg +_gfb ,_edf +_beg *_acbg ,_bcg +_gfb ,_edf +_beg },{_ec ,_bcg +_gfb ,_edf +_ca -_ec *_acbg ,_bcg +_gfb -_ec *_acbg ,_edf +_ca ,_bcg +_gfb -_ec ,_edf +_ca },{_fbad ,_bcg +_fbad *_acbg ,_edf +_ca ,_bcg ,_edf +_ca -_fbad *_acbg ,_bcg ,_edf +_ca -_fbad },{_de ,_bcg ,_edf +_de *_acbg ,_bcg +_de *_acbg ,_edf ,_bcg +_de ,_edf }};
_gfc .Add_m (_bcg +_de ,_edf );for _fa :=0;_fa < 4;_fa ++{_cac :=_ffa .Points [_fa ];_gfc .Add_l (_cac .X ,_cac .Y );_ee :=_acgd [_fa ];if _gac :=_ee [0];_gac !=0{_gfc .Add_c (_ee [1],_ee [2],_ee [3],_ee [4],_ee [5],_ee [6]);};};_gfc .Add_h ();if _gca .FillEnabled &&_gca .BorderEnabled {_gfc .Add_B ();
}else if _gca .FillEnabled {_gfc .Add_f ();}else if _gca .BorderEnabled {_gfc .Add_S ();};_gfc .Add_Q ();return _gfc .Bytes (),_ffa .GetBoundingBox ().ToPdfRectangle (),nil ;};

// GetBoundingBox returns the bounding box of the Bezier path.
func (_ag CubicBezierPath )GetBoundingBox ()Rectangle {_ab :=Rectangle {};_abe :=0.0;_egd :=0.0;_ac :=0.0;_aa :=0.0;for _bd ,_cdc :=range _ag .Curves {_ff :=_cdc .GetBounds ();if _bd ==0{_abe =_ff .Llx ;_egd =_ff .Urx ;_ac =_ff .Lly ;_aa =_ff .Ury ;continue ;
};if _ff .Llx < _abe {_abe =_ff .Llx ;};if _ff .Urx > _egd {_egd =_ff .Urx ;};if _ff .Lly < _ac {_ac =_ff .Lly ;};if _ff .Ury > _aa {_aa =_ff .Ury ;};};_ab .X =_abe ;_ab .Y =_ac ;_ab .Width =_egd -_abe ;_ab .Height =_aa -_ac ;return _ab ;};

// Point represents a two-dimensional point.
type Point struct{X float64 ;Y float64 ;};