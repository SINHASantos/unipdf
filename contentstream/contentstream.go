//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package contentstream provides functionality for parsing and creating content streams for PDF files.
//
// For processing and manipulating content streams, it allows parse the content stream into a list of
// operands that can then be processed further for rendering or extraction of information.
// The ContentStreamProcessor offers a basic engine for processing the content stream and can be used
// to render or modify the contents.
//
// For creating content streams, see NewContentCreator.  It allows adding multiple operands and then can
// be converted to a string for embedding in a PDF file.
//
// The contentstream package uses the core and model packages.
package contentstream ;import (_e "bufio";_fg "bytes";_cg "encoding/hex";_g "errors";_ga "fmt";_dc "github.com/unidoc/unipdf/v3/common";_eaf "github.com/unidoc/unipdf/v3/core";_d "github.com/unidoc/unipdf/v3/internal/imageutil";_b "github.com/unidoc/unipdf/v3/internal/transform";
_ee "github.com/unidoc/unipdf/v3/model";_fc "image/color";_gg "image/jpeg";_ea "io";_ed "math";_ce "regexp";_c "strconv";);

// Add_Do adds 'Do' operation to the content stream:
// Displays an XObject (image or form) specified by `name`.
//
// See section 8.8 "External Objects" and Table 87 (pp. 209-220 PDF32000_2008).
func (_cfa *ContentCreator )Add_Do (name _eaf .PdfObjectName )*ContentCreator {_afc :=ContentStreamOperation {};_afc .Operand ="\u0044\u006f";_afc .Params =_fcce ([]_eaf .PdfObjectName {name });_cfa ._eg =append (_cfa ._eg ,&_afc );return _cfa ;};

// String returns `ops.Bytes()` as a string.
func (_df *ContentStreamOperations )String ()string {return string (_df .Bytes ())};func (_ddad *ContentStreamProcessor )handleCommand_rg (_fccb *ContentStreamOperation ,_cga *_ee .PdfPageResources )error {_fegg :=_ee .NewPdfColorspaceDeviceRGB ();if len (_fccb .Params )!=_fegg .GetNumComponents (){_dc .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_dc .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_fccb .Params ),_fegg );return _g .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};_gadc ,_dgd :=_fegg .ColorFromPdfObjects (_fccb .Params );if _dgd !=nil {return _dgd ;};_ddad ._edec .ColorspaceNonStroking =_fegg ;_ddad ._edec .ColorNonStroking =_gadc ;return nil ;};

// Add_s appends 's' operand to the content stream: Close and stroke the path.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_dcfg *ContentCreator )Add_s ()*ContentCreator {_cb :=ContentStreamOperation {};_cb .Operand ="\u0073";_dcfg ._eg =append (_dcfg ._eg ,&_cb );return _dcfg ;};

// ContentStreamOperations is a slice of ContentStreamOperations.
type ContentStreamOperations []*ContentStreamOperation ;func (_bgb *ContentStreamParser )skipSpaces ()(int ,error ){_aaea :=0;for {_cfbda ,_bfdf :=_bgb ._ccf .Peek (1);if _bfdf !=nil {return 0,_bfdf ;};if _eaf .IsWhiteSpace (_cfbda [0]){_bgb ._ccf .ReadByte ();
_aaea ++;}else {break ;};};return _aaea ,nil ;};

// Add_Tf appends 'Tf' operand to the content stream:
// Set font and font size specified by font resource `fontName` and `fontSize`.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_ged *ContentCreator )Add_Tf (fontName _eaf .PdfObjectName ,fontSize float64 )*ContentCreator {_dfd :=ContentStreamOperation {};_dfd .Operand ="\u0054\u0066";_dfd .Params =_fcce ([]_eaf .PdfObjectName {fontName });_dfd .Params =append (_dfd .Params ,_daea ([]float64 {fontSize })...);
_ged ._eg =append (_ged ._eg ,&_dfd );return _ged ;};

// Add_cm adds 'cm' operation to the content stream: Modifies the current transformation matrix (ctm)
// of the graphics state.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_gaa *ContentCreator )Add_cm (a ,b ,c ,d ,e ,f float64 )*ContentCreator {_fa :=ContentStreamOperation {};_fa .Operand ="\u0063\u006d";_fa .Params =_daea ([]float64 {a ,b ,c ,d ,e ,f });_gaa ._eg =append (_gaa ._eg ,&_fa );return _gaa ;};func (_bab *ContentStreamParser )parseBool ()(_eaf .PdfObjectBool ,error ){_dgbc ,_edag :=_bab ._ccf .Peek (4);
if _edag !=nil {return _eaf .PdfObjectBool (false ),_edag ;};if (len (_dgbc )>=4)&&(string (_dgbc [:4])=="\u0074\u0072\u0075\u0065"){_bab ._ccf .Discard (4);return _eaf .PdfObjectBool (true ),nil ;};_dgbc ,_edag =_bab ._ccf .Peek (5);if _edag !=nil {return _eaf .PdfObjectBool (false ),_edag ;
};if (len (_dgbc )>=5)&&(string (_dgbc [:5])=="\u0066\u0061\u006cs\u0065"){_bab ._ccf .Discard (5);return _eaf .PdfObjectBool (false ),nil ;};return _eaf .PdfObjectBool (false ),_g .New ("\u0075n\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0062o\u006fl\u0065a\u006e\u0020\u0073\u0074\u0072\u0069\u006eg");
};

// NewContentCreator returns a new initialized ContentCreator.
func NewContentCreator ()*ContentCreator {_gf :=&ContentCreator {};_gf ._eg =ContentStreamOperations {};return _gf ;};

// Add_SCN appends 'SCN' operand to the content stream:
// Same as SC but supports more colorspaces.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_gce *ContentCreator )Add_SCN (c ...float64 )*ContentCreator {_dad :=ContentStreamOperation {};_dad .Operand ="\u0053\u0043\u004e";_dad .Params =_daea (c );_gce ._eg =append (_gce ._eg ,&_dad );return _gce ;};

// Add_M adds 'M' operand to the content stream: Set the miter limit (graphics state).
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_acc *ContentCreator )Add_M (miterlimit float64 )*ContentCreator {_gd :=ContentStreamOperation {};_gd .Operand ="\u004d";_gd .Params =_daea ([]float64 {miterlimit });_acc ._eg =append (_acc ._eg ,&_gd );return _acc ;};

// Add_W_starred appends 'W*' operand to the content stream:
// Modify the current clipping path by intersecting with the current path (even odd rule).
//
// See section 8.5.4 "Clipping Path Operators" and Table 61 (p. 146 PDF32000_2008).
func (_gad *ContentCreator )Add_W_starred ()*ContentCreator {_cgf :=ContentStreamOperation {};_cgf .Operand ="\u0057\u002a";_gad ._eg =append (_gad ._eg ,&_cgf );return _gad ;};func (_babd *ContentStreamProcessor )handleCommand_K (_bbd *ContentStreamOperation ,_fgfe *_ee .PdfPageResources )error {_cgaa :=_ee .NewPdfColorspaceDeviceCMYK ();
if len (_bbd .Params )!=_cgaa .GetNumComponents (){_dc .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_dc .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_bbd .Params ),_cgaa );return _g .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};_acfdc ,_fgaa :=_cgaa .ColorFromPdfObjects (_bbd .Params );if _fgaa !=nil {return _fgaa ;};_babd ._edec .ColorspaceStroking =_cgaa ;_babd ._edec .ColorStroking =_acfdc ;return nil ;};

// Add_ri adds 'ri' operand to the content stream, which sets the color rendering intent.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_bfg *ContentCreator )Add_ri (intent _eaf .PdfObjectName )*ContentCreator {_gdd :=ContentStreamOperation {};_gdd .Operand ="\u0072\u0069";_gdd .Params =_fcce ([]_eaf .PdfObjectName {intent });_bfg ._eg =append (_bfg ._eg ,&_gdd );return _bfg ;};type handlerEntry struct{Condition HandlerConditionEnum ;
Operand string ;Handler HandlerFunc ;};

// Add_SCN_pattern appends 'SCN' operand to the content stream for pattern `name`:
// SCN with name attribute (for pattern). Syntax: c1 ... cn name SCN.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_ebga *ContentCreator )Add_SCN_pattern (name _eaf .PdfObjectName ,c ...float64 )*ContentCreator {_bc :=ContentStreamOperation {};_bc .Operand ="\u0053\u0043\u004e";_bc .Params =_daea (c );_bc .Params =append (_bc .Params ,_eaf .MakeName (string (name )));
_ebga ._eg =append (_ebga ._eg ,&_bc );return _ebga ;};

// Add_EMC appends 'EMC' operand to the content stream:
// Ends a marked-content sequence.
//
// See section 14.6 "Marked Content" and Table 320 (p. 561 PDF32000_2008).
func (_dgg *ContentCreator )Add_EMC ()*ContentCreator {_ccdd :=ContentStreamOperation {};_ccdd .Operand ="\u0045\u004d\u0043";_dgg ._eg =append (_dgg ._eg ,&_ccdd );return _dgg ;};

// Add_y appends 'y' operand to the content stream: Append a Bezier curve to the current path from the
// current point to (x3,y3) with (x1, y1) and (x3,y3) as control points.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_ba *ContentCreator )Add_y (x1 ,y1 ,x3 ,y3 float64 )*ContentCreator {_acf :=ContentStreamOperation {};_acf .Operand ="\u0079";_acf .Params =_daea ([]float64 {x1 ,y1 ,x3 ,y3 });_ba ._eg =append (_ba ._eg ,&_acf );return _ba ;};

// Add_TJ appends 'TJ' operand to the content stream:
// Show one or more text string. Array of numbers (displacement) and strings.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_eedf *ContentCreator )Add_TJ (vals ..._eaf .PdfObject )*ContentCreator {_bddd :=ContentStreamOperation {};_bddd .Operand ="\u0054\u004a";_bddd .Params =[]_eaf .PdfObject {_eaf .MakeArray (vals ...)};_eedf ._eg =append (_eedf ._eg ,&_bddd );return _eedf ;
};

// Add_Tj appends 'Tj' operand to the content stream:
// Show a text string.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_bcg *ContentCreator )Add_Tj (textstr _eaf .PdfObjectString )*ContentCreator {_bg :=ContentStreamOperation {};_bg .Operand ="\u0054\u006a";_bg .Params =_aeg ([]_eaf .PdfObjectString {textstr });_bcg ._eg =append (_bcg ._eg ,&_bg );return _bcg ;};


// NewInlineImageFromImage makes a new content stream inline image object from an image.
func NewInlineImageFromImage (img _ee .Image ,encoder _eaf .StreamEncoder )(*ContentStreamInlineImage ,error ){if encoder ==nil {encoder =_eaf .NewRawEncoder ();};encoder .UpdateParams (img .GetParamsDict ());_baa :=ContentStreamInlineImage {};if img .ColorComponents ==1{_baa .ColorSpace =_eaf .MakeName ("\u0047");
}else if img .ColorComponents ==3{_baa .ColorSpace =_eaf .MakeName ("\u0052\u0047\u0042");}else if img .ColorComponents ==4{_baa .ColorSpace =_eaf .MakeName ("\u0043\u004d\u0059\u004b");}else {_dc .Log .Debug ("\u0049\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006db\u0065\u0072\u0020o\u0066\u0020c\u006f\u006c\u006f\u0072\u0020\u0063o\u006dpo\u006e\u0065\u006e\u0074\u0073\u0020\u0066\u006f\u0072\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0064",img .ColorComponents );
return nil ,_g .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020c\u006fl\u006f\u0072\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073");};_baa .BitsPerComponent =_eaf .MakeInteger (img .BitsPerComponent );
_baa .Width =_eaf .MakeInteger (img .Width );_baa .Height =_eaf .MakeInteger (img .Height );_gdf ,_efac :=encoder .EncodeBytes (img .Data );if _efac !=nil {return nil ,_efac ;};_baa ._gda =_gdf ;_cad :=encoder .GetFilterName ();if _cad !=_eaf .StreamEncodingFilterNameRaw {_baa .Filter =_eaf .MakeName (_cad );
};return &_baa ,nil ;};

// Add_quote appends "'" operand to the content stream:
// Move to next line and show a string.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_febb *ContentCreator )Add_quote (textstr _eaf .PdfObjectString )*ContentCreator {_cae :=ContentStreamOperation {};_cae .Operand ="\u0027";_cae .Params =_aeg ([]_eaf .PdfObjectString {textstr });_febb ._eg =append (_febb ._eg ,&_cae );return _febb ;
};

// Bytes converts the content stream operations to a content stream byte presentation, i.e. the kind that can be
// stored as a PDF stream or string format.
func (_cfg *ContentCreator )Bytes ()[]byte {return _cfg ._eg .Bytes ()};

// Add_Tstar appends 'T*' operand to the content stream:
// Move to the start of next line.
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_deb *ContentCreator )Add_Tstar ()*ContentCreator {_cffc :=ContentStreamOperation {};_cffc .Operand ="\u0054\u002a";_deb ._eg =append (_deb ._eg ,&_cffc );return _deb ;};

// HandlerConditionEnum represents the type of operand content stream processor (handler).
// The handler may process a single specific named operand or all operands.
type HandlerConditionEnum int ;

// NewContentStreamParser creates a new instance of the content stream parser from an input content
// stream string.
func NewContentStreamParser (contentStr string )*ContentStreamParser {_gaf :=ContentStreamParser {};contentStr =string (_daa .ReplaceAll ([]byte (contentStr ),[]byte ("\u002f")));_ecec :=_fg .NewBufferString (contentStr +"\u000a");_gaf ._ccf =_e .NewReader (_ecec );
return &_gaf ;};func _daea (_fgee []float64 )[]_eaf .PdfObject {var _dfe []_eaf .PdfObject ;for _ ,_afbe :=range _fgee {_dfe =append (_dfe ,_eaf .MakeFloat (_afbe ));};return _dfe ;};

// ExtractText parses and extracts all text data in content streams and returns as a string.
// Does not take into account Encoding table, the output is simply the character codes.
//
// Deprecated: More advanced text extraction is offered in package extractor with character encoding support.
func (_ebg *ContentStreamParser )ExtractText ()(string ,error ){_ebc ,_cc :=_ebg .Parse ();if _cc !=nil {return "",_cc ;};_eff :=false ;_dg ,_geb :=float64 (-1),float64 (-1);_bf :="";for _ ,_cgg :=range *_ebc {if _cgg .Operand =="\u0042\u0054"{_eff =true ;
}else if _cgg .Operand =="\u0045\u0054"{_eff =false ;};if _cgg .Operand =="\u0054\u0064"||_cgg .Operand =="\u0054\u0044"||_cgg .Operand =="\u0054\u002a"{_bf +="\u000a";};if _cgg .Operand =="\u0054\u006d"{if len (_cgg .Params )!=6{continue ;};_gag ,_gge :=_cgg .Params [4].(*_eaf .PdfObjectFloat );
if !_gge {_eac ,_bd :=_cgg .Params [4].(*_eaf .PdfObjectInteger );if !_bd {continue ;};_gag =_eaf .MakeFloat (float64 (*_eac ));};_ad ,_gge :=_cgg .Params [5].(*_eaf .PdfObjectFloat );if !_gge {_bb ,_bdd :=_cgg .Params [5].(*_eaf .PdfObjectInteger );if !_bdd {continue ;
};_ad =_eaf .MakeFloat (float64 (*_bb ));};if _geb ==-1{_geb =float64 (*_ad );}else if _geb > float64 (*_ad ){_bf +="\u000a";_dg =float64 (*_gag );_geb =float64 (*_ad );continue ;};if _dg ==-1{_dg =float64 (*_gag );}else if _dg < float64 (*_gag ){_bf +="\u0009";
_dg =float64 (*_gag );};};if _eff &&_cgg .Operand =="\u0054\u004a"{if len (_cgg .Params )< 1{continue ;};_eba ,_dba :=_cgg .Params [0].(*_eaf .PdfObjectArray );if !_dba {return "",_ga .Errorf ("\u0069\u006ev\u0061\u006c\u0069\u0064 \u0070\u0061r\u0061\u006d\u0065\u0074\u0065\u0072\u0020\u0074y\u0070\u0065\u002c\u0020\u006e\u006f\u0020\u0061\u0072\u0072\u0061\u0079 \u0028\u0025\u0054\u0029",_cgg .Params [0]);
};for _ ,_aga :=range _eba .Elements (){switch _de :=_aga .(type ){case *_eaf .PdfObjectString :_bf +=_de .Str ();case *_eaf .PdfObjectFloat :if *_de < -100{_bf +="\u0020";};case *_eaf .PdfObjectInteger :if *_de < -100{_bf +="\u0020";};};};}else if _eff &&_cgg .Operand =="\u0054\u006a"{if len (_cgg .Params )< 1{continue ;
};_fb ,_cge :=_cgg .Params [0].(*_eaf .PdfObjectString );if !_cge {return "",_ga .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0070\u0061\u0072\u0061\u006de\u0074\u0065\u0072\u0020\u0074\u0079p\u0065\u002c\u0020\u006e\u006f\u0074\u0020\u0073\u0074\u0072\u0069\u006e\u0067 \u0028\u0025\u0054\u0029",_cgg .Params [0]);
};_bf +=_fb .Str ();};};return _bf ,nil ;};func (_baga *ContentStreamProcessor )handleCommand_g (_aagd *ContentStreamOperation ,_eeag *_ee .PdfPageResources )error {_fdc :=_ee .NewPdfColorspaceDeviceGray ();if len (_aagd .Params )!=_fdc .GetNumComponents (){_dc .Log .Debug ("\u0049\u006e\u0076al\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020p\u0061r\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020\u0067");
_dc .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_aagd .Params ),_fdc );return _g .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};_ggcf ,_dbed :=_fdc .ColorFromPdfObjects (_aagd .Params );if _dbed !=nil {_dc .Log .Debug ("\u0045\u0052\u0052\u004fR\u003a\u0020\u0068\u0061\u006e\u0064\u006c\u0065\u0043o\u006d\u006d\u0061\u006e\u0064\u005f\u0067\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0070\u0061r\u0061\u006d\u0073\u002e\u0020c\u0073\u003d\u0025\u0054\u0020\u006f\u0070\u003d\u0025\u0073\u0020\u0065\u0072\u0072\u003d\u0025\u0076",_fdc ,_aagd ,_dbed );
return _dbed ;};_baga ._edec .ColorspaceNonStroking =_fdc ;_baga ._edec .ColorNonStroking =_ggcf ;return nil ;};

// Add_i adds 'i' operand to the content stream: Set the flatness tolerance in the graphics state.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_da *ContentCreator )Add_i (flatness float64 )*ContentCreator {_ece :=ContentStreamOperation {};_ece .Operand ="\u0069";_ece .Params =_daea ([]float64 {flatness });_da ._eg =append (_da ._eg ,&_ece );return _da ;};func _dda (_dcda *ContentStreamInlineImage )(*_eaf .MultiEncoder ,error ){_aaa :=_eaf .NewMultiEncoder ();
var _ggfb *_eaf .PdfObjectDictionary ;var _ecbe []_eaf .PdfObject ;if _dbac :=_dcda .DecodeParms ;_dbac !=nil {_bcgd ,_cba :=_dbac .(*_eaf .PdfObjectDictionary );if _cba {_ggfb =_bcgd ;};_dgef ,_ffdeg :=_dbac .(*_eaf .PdfObjectArray );if _ffdeg {for _ ,_ddb :=range _dgef .Elements (){if _eafa ,_efgg :=_ddb .(*_eaf .PdfObjectDictionary );
_efgg {_ecbe =append (_ecbe ,_eafa );}else {_ecbe =append (_ecbe ,nil );};};};};_eec :=_dcda .Filter ;if _eec ==nil {return nil ,_ga .Errorf ("\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u006d\u0069s\u0073\u0069\u006e\u0067");};_fcg ,_dag :=_eec .(*_eaf .PdfObjectArray );
if !_dag {return nil ,_ga .Errorf ("m\u0075\u006c\u0074\u0069\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0063\u0061\u006e\u0020\u006f\u006el\u0079\u0020\u0062\u0065\u0020\u006d\u0061\u0064\u0065\u0020fr\u006f\u006d\u0020a\u0072r\u0061\u0079");};for _gbef ,_ebf :=range _fcg .Elements (){_agf ,_gabe :=_ebf .(*_eaf .PdfObjectName );
if !_gabe {return nil ,_ga .Errorf ("\u006d\u0075l\u0074\u0069\u0020\u0066i\u006c\u0074e\u0072\u0020\u0061\u0072\u0072\u0061\u0079\u0020e\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006e\u006f\u0074\u0020\u0061 \u006e\u0061\u006d\u0065");};var _cfab _eaf .PdfObject ;
if _ggfb !=nil {_cfab =_ggfb ;}else {if len (_ecbe )> 0{if _gbef >=len (_ecbe ){return nil ,_ga .Errorf ("\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0073\u0020\u0069\u006e\u0020d\u0065\u0063\u006f\u0064\u0065\u0020\u0070\u0061\u0072\u0061\u006d\u0073\u0020a\u0072\u0072\u0061\u0079");
};_cfab =_ecbe [_gbef ];};};var _bdgg *_eaf .PdfObjectDictionary ;if _dbf ,_abbf :=_cfab .(*_eaf .PdfObjectDictionary );_abbf {_bdgg =_dbf ;};if *_agf ==_eaf .StreamEncodingFilterNameFlate ||*_agf =="\u0046\u006c"{_egfe ,_ecd :=_cag (_dcda ,_bdgg );if _ecd !=nil {return nil ,_ecd ;
};_aaa .AddEncoder (_egfe );}else if *_agf ==_eaf .StreamEncodingFilterNameLZW {_beg ,_aee :=_gffd (_dcda ,_bdgg );if _aee !=nil {return nil ,_aee ;};_aaa .AddEncoder (_beg );}else if *_agf ==_eaf .StreamEncodingFilterNameASCIIHex {_egae :=_eaf .NewASCIIHexEncoder ();
_aaa .AddEncoder (_egae );}else if *_agf ==_eaf .StreamEncodingFilterNameASCII85 ||*_agf =="\u0041\u0038\u0035"{_ceab :=_eaf .NewASCII85Encoder ();_aaa .AddEncoder (_ceab );}else {_dc .Log .Error ("U\u006e\u0073\u0075\u0070po\u0072t\u0065\u0064\u0020\u0066\u0069l\u0074\u0065\u0072\u0020\u0025\u0073",*_agf );
return nil ,_ga .Errorf ("\u0069\u006eva\u006c\u0069\u0064 \u0066\u0069\u006c\u0074er \u0069n \u006d\u0075\u006c\u0074\u0069\u0020\u0066il\u0074\u0065\u0072\u0020\u0061\u0072\u0072a\u0079");};};return _aaa ,nil ;};

// Add_S appends 'S' operand to the content stream: Stroke the path.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_fd *ContentCreator )Add_S ()*ContentCreator {_fadg :=ContentStreamOperation {};_fadg .Operand ="\u0053";_fd ._eg =append (_fd ._eg ,&_fadg );return _fd ;};

// SetNonStrokingColor sets the non-stroking `color` where color can be one of
// PdfColorDeviceGray, PdfColorDeviceRGB, or PdfColorDeviceCMYK.
func (_gadg *ContentCreator )SetNonStrokingColor (color _ee .PdfColor )*ContentCreator {switch _efa :=color .(type ){case *_ee .PdfColorDeviceGray :_gadg .Add_g (_efa .Val ());case *_ee .PdfColorDeviceRGB :_gadg .Add_rg (_efa .R (),_efa .G (),_efa .B ());
case *_ee .PdfColorDeviceCMYK :_gadg .Add_k (_efa .C (),_efa .M (),_efa .Y (),_efa .K ());case *_ee .PdfColorPatternType2 :_gadg .Add_cs (*_eaf .MakeName ("\u0050a\u0074\u0074\u0065\u0072\u006e"));_gadg .Add_scn_pattern (_efa .PatternName );case *_ee .PdfColorPatternType3 :_gadg .Add_cs (*_eaf .MakeName ("\u0050a\u0074\u0074\u0065\u0072\u006e"));
_gadg .Add_scn_pattern (_efa .PatternName );default:_dc .Log .Debug ("\u0053\u0065\u0074N\u006f\u006e\u0053\u0074\u0072\u006f\u006b\u0069\u006e\u0067\u0043\u006f\u006c\u006f\u0072\u003a\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020c\u006f\u006c\u006f\u0072\u003a\u0020\u0025\u0054",_efa );
};return _gadg ;};

// HasUnclosedQ checks if all the `q` operator is properly closed by `Q` operator.
func (_ec *ContentStreamOperations )HasUnclosedQ ()bool {_dcf :=0;for _ ,_fe :=range *_ec {if _fe .Operand =="\u0071"{_dcf ++;}else if _fe .Operand =="\u0051"{_dcf --;};};return _dcf !=0;};

// GraphicStateStack represents a stack of GraphicsState.
type GraphicStateStack []GraphicsState ;

// ContentStreamParser represents a content stream parser for parsing content streams in PDFs.
type ContentStreamParser struct{_ccf *_e .Reader };

// Add_v appends 'v' operand to the content stream: Append a Bezier curve to the current path from the
// current point to (x3,y3) with the current point and (x2,y2) as control points.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_agg *ContentCreator )Add_v (x2 ,y2 ,x3 ,y3 float64 )*ContentCreator {_afd :=ContentStreamOperation {};_afd .Operand ="\u0076";_afd .Params =_daea ([]float64 {x2 ,y2 ,x3 ,y3 });_agg ._eg =append (_agg ._eg ,&_afd );return _agg ;};

// Add_scn_pattern appends 'scn' operand to the content stream for pattern `name`:
// scn with name attribute (for pattern). Syntax: c1 ... cn name scn.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_dab *ContentCreator )Add_scn_pattern (name _eaf .PdfObjectName ,c ...float64 )*ContentCreator {_feb :=ContentStreamOperation {};_feb .Operand ="\u0073\u0063\u006e";_feb .Params =_daea (c );_feb .Params =append (_feb .Params ,_eaf .MakeName (string (name )));
_dab ._eg =append (_dab ._eg ,&_feb );return _dab ;};

// Add_c adds 'c' operand to the content stream: Append a Bezier curve to the current path from
// the current point to (x3,y3) with (x1,x1) and (x2,y2) as control points.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_ccb *ContentCreator )Add_c (x1 ,y1 ,x2 ,y2 ,x3 ,y3 float64 )*ContentCreator {_ffd :=ContentStreamOperation {};_ffd .Operand ="\u0063";_ffd .Params =_daea ([]float64 {x1 ,y1 ,x2 ,y2 ,x3 ,y3 });_ccb ._eg =append (_ccb ._eg ,&_ffd );return _ccb ;};


// Add_J adds 'J' operand to the content stream: Set the line cap style (graphics state).
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_af *ContentCreator )Add_J (lineCapStyle string )*ContentCreator {_eeb :=ContentStreamOperation {};_eeb .Operand ="\u004a";_eeb .Params =_fcce ([]_eaf .PdfObjectName {_eaf .PdfObjectName (lineCapStyle )});_af ._eg =append (_af ._eg ,&_eeb );return _af ;
};func _gffd (_cgfa *ContentStreamInlineImage ,_ggb *_eaf .PdfObjectDictionary )(*_eaf .LZWEncoder ,error ){_bbc :=_eaf .NewLZWEncoder ();if _ggb ==nil {if _cgfa .DecodeParms !=nil {_ded ,_aad :=_eaf .GetDict (_cgfa .DecodeParms );if !_aad {_dc .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073\u0020n\u006f\u0074\u0020\u0061\u0020\u0064\u0069\u0063\u0074\u0069on\u0061\u0072\u0079 \u0028%\u0054\u0029",_cgfa .DecodeParms );
return nil ,_ga .Errorf ("\u0069\u006e\u0076\u0061li\u0064\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073");};_ggb =_ded ;};};if _ggb ==nil {return _bbc ,nil ;};_cfbdg :=_ggb .Get ("E\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065");
if _cfbdg !=nil {_bfa ,_fgf :=_cfbdg .(*_eaf .PdfObjectInteger );if !_fgf {_dc .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u003a \u0045\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0062\u0075\u0074\u0020\u006e\u006f\u0074\u0020\u006e\u0075\u006d\u0065\u0072i\u0063 \u0028\u0025\u0054\u0029",_cfbdg );
return nil ,_ga .Errorf ("\u0069\u006e\u0076\u0061li\u0064\u0020\u0045\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065");};if *_bfa !=0&&*_bfa !=1{return nil ,_ga .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0045\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065\u0020\u0076\u0061\u006c\u0075e\u0020\u0028\u006e\u006f\u0074 \u0030\u0020o\u0072\u0020\u0031\u0029");
};_bbc .EarlyChange =int (*_bfa );}else {_bbc .EarlyChange =1;};_cfbdg =_ggb .Get ("\u0050r\u0065\u0064\u0069\u0063\u0074\u006fr");if _cfbdg !=nil {_eceb ,_gfb :=_cfbdg .(*_eaf .PdfObjectInteger );if !_gfb {_dc .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0050\u0072\u0065d\u0069\u0063\u0074\u006f\u0072\u0020\u0073pe\u0063\u0069\u0066\u0069e\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u006f\u0074 n\u0075\u006de\u0072\u0069\u0063\u0020\u0028\u0025\u0054\u0029",_cfbdg );
return nil ,_ga .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0072\u0065\u0064i\u0063\u0074\u006f\u0072");};_bbc .Predictor =int (*_eceb );};_cfbdg =_ggb .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");
if _cfbdg !=nil {_ggg ,_aab :=_cfbdg .(*_eaf .PdfObjectInteger );if !_aab {_dc .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0049n\u0076\u0061\u006c\u0069\u0064\u0020\u0042i\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");
return nil ,_ga .Errorf ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020\u0042\u0069\u0074\u0073\u0050e\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");};_bbc .BitsPerComponent =int (*_ggg );};if _bbc .Predictor > 1{_bbc .Columns =1;_cfbdg =_ggb .Get ("\u0043o\u006c\u0075\u006d\u006e\u0073");
if _cfbdg !=nil {_gggb ,_gab :=_cfbdg .(*_eaf .PdfObjectInteger );if !_gab {return nil ,_ga .Errorf ("\u0070r\u0065\u0064\u0069\u0063\u0074\u006f\u0072\u0020\u0063\u006f\u006cu\u006d\u006e\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064");};_bbc .Columns =int (*_gggb );
};_bbc .Colors =1;_cfbdg =_ggb .Get ("\u0043\u006f\u006c\u006f\u0072\u0073");if _cfbdg !=nil {_adg ,_afag :=_cfbdg .(*_eaf .PdfObjectInteger );if !_afag {return nil ,_ga .Errorf ("\u0070\u0072\u0065d\u0069\u0063\u0074\u006fr\u0020\u0063\u006f\u006c\u006f\u0072\u0073 \u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072");
};_bbc .Colors =int (*_adg );};};_dc .Log .Trace ("\u0064\u0065\u0063\u006f\u0064\u0065\u0020\u0070\u0061\u0072\u0061\u006ds\u003a\u0020\u0025\u0073",_ggb .String ());return _bbc ,nil ;};

// Process processes the entire list of operations. Maintains the graphics state that is passed to any
// handlers that are triggered during processing (either on specific operators or all).
func (_gdaf *ContentStreamProcessor )Process (resources *_ee .PdfPageResources )error {_gdaf ._edec .ColorspaceStroking =_ee .NewPdfColorspaceDeviceGray ();_gdaf ._edec .ColorspaceNonStroking =_ee .NewPdfColorspaceDeviceGray ();_gdaf ._edec .ColorStroking =_ee .NewPdfColorDeviceGray (0);
_gdaf ._edec .ColorNonStroking =_ee .NewPdfColorDeviceGray (0);_gdaf ._edec .CTM =_b .IdentityMatrix ();for _ ,_efbg :=range _gdaf ._gbebf {var _abeb error ;switch _efbg .Operand {case "\u0071":_gdaf ._effc .Push (_gdaf ._edec );case "\u0051":if len (_gdaf ._effc )==0{_dc .Log .Debug ("\u0057\u0041\u0052\u004e\u003a\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0060\u0051\u0060\u0020\u006f\u0070e\u0072\u0061\u0074\u006f\u0072\u002e\u0020\u0047\u0072\u0061\u0070\u0068\u0069\u0063\u0073\u0020\u0073\u0074\u0061\u0074\u0065 \u0073\u0074\u0061\u0063\u006b\u0020\u0069\u0073\u0020\u0065\u006d\u0070\u0074\u0079.\u0020\u0053\u006bi\u0070\u0070\u0069\u006e\u0067\u002e");
continue ;};_gdaf ._edec =_gdaf ._effc .Pop ();case "\u0043\u0053":_abeb =_gdaf .handleCommand_CS (_efbg ,resources );case "\u0063\u0073":_abeb =_gdaf .handleCommand_cs (_efbg ,resources );case "\u0053\u0043":_abeb =_gdaf .handleCommand_SC (_efbg ,resources );
case "\u0053\u0043\u004e":_abeb =_gdaf .handleCommand_SCN (_efbg ,resources );case "\u0073\u0063":_abeb =_gdaf .handleCommand_sc (_efbg ,resources );case "\u0073\u0063\u006e":_abeb =_gdaf .handleCommand_scn (_efbg ,resources );case "\u0047":_abeb =_gdaf .handleCommand_G (_efbg ,resources );
case "\u0067":_abeb =_gdaf .handleCommand_g (_efbg ,resources );case "\u0052\u0047":_abeb =_gdaf .handleCommand_RG (_efbg ,resources );case "\u0072\u0067":_abeb =_gdaf .handleCommand_rg (_efbg ,resources );case "\u004b":_abeb =_gdaf .handleCommand_K (_efbg ,resources );
case "\u006b":_abeb =_gdaf .handleCommand_k (_efbg ,resources );case "\u0063\u006d":_abeb =_gdaf .handleCommand_cm (_efbg ,resources );};if _abeb !=nil {_dc .Log .Debug ("\u0050\u0072\u006f\u0063\u0065\u0073s\u006f\u0072\u0020\u0068\u0061\u006e\u0064\u006c\u0069\u006e\u0067\u0020\u0065r\u0072\u006f\u0072\u0020\u0028\u0025\u0073)\u003a\u0020\u0025\u0076",_efbg .Operand ,_abeb );
_dc .Log .Debug ("\u004f\u0070\u0065r\u0061\u006e\u0064\u003a\u0020\u0025\u0023\u0076",_efbg .Operand );return _abeb ;};for _ ,_bade :=range _gdaf ._cfd {var _ggbf error ;if _bade .Condition .All (){_ggbf =_bade .Handler (_efbg ,_gdaf ._edec ,resources );
}else if _bade .Condition .Operand ()&&_efbg .Operand ==_bade .Operand {_ggbf =_bade .Handler (_efbg ,_gdaf ._edec ,resources );};if _ggbf !=nil {_dc .Log .Debug ("P\u0072\u006f\u0063\u0065\u0073\u0073o\u0072\u0020\u0068\u0061\u006e\u0064\u006c\u0065\u0072 \u0065\u0072\u0072o\u0072:\u0020\u0025\u0076",_ggbf );
return _ggbf ;};};};return nil ;};func (_abg *ContentStreamParser )parseString ()(*_eaf .PdfObjectString ,error ){_abg ._ccf .ReadByte ();var _cgfc []byte ;_egg :=1;for {_defd ,_ggaf :=_abg ._ccf .Peek (1);if _ggaf !=nil {return _eaf .MakeString (string (_cgfc )),_ggaf ;
};if _defd [0]=='\\'{_abg ._ccf .ReadByte ();_ceb ,_dgf :=_abg ._ccf .ReadByte ();if _dgf !=nil {return _eaf .MakeString (string (_cgfc )),_dgf ;};if _eaf .IsOctalDigit (_ceb ){_cbe ,_add :=_abg ._ccf .Peek (2);if _add !=nil {return _eaf .MakeString (string (_cgfc )),_add ;
};var _aaec []byte ;_aaec =append (_aaec ,_ceb );for _ ,_cggbd :=range _cbe {if _eaf .IsOctalDigit (_cggbd ){_aaec =append (_aaec ,_cggbd );}else {break ;};};_abg ._ccf .Discard (len (_aaec )-1);_dc .Log .Trace ("\u004e\u0075\u006d\u0065ri\u0063\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0022\u0025\u0073\u0022",_aaec );
_abbb ,_add :=_c .ParseUint (string (_aaec ),8,32);if _add !=nil {return _eaf .MakeString (string (_cgfc )),_add ;};_cgfc =append (_cgfc ,byte (_abbb ));continue ;};switch _ceb {case 'n':_cgfc =append (_cgfc ,'\n');case 'r':_cgfc =append (_cgfc ,'\r');
case 't':_cgfc =append (_cgfc ,'\t');case 'b':_cgfc =append (_cgfc ,'\b');case 'f':_cgfc =append (_cgfc ,'\f');case '(':_cgfc =append (_cgfc ,'(');case ')':_cgfc =append (_cgfc ,')');case '\\':_cgfc =append (_cgfc ,'\\');};continue ;}else if _defd [0]=='('{_egg ++;
}else if _defd [0]==')'{_egg --;if _egg ==0{_abg ._ccf .ReadByte ();break ;};};_fea ,_ :=_abg ._ccf .ReadByte ();_cgfc =append (_cgfc ,_fea );};return _eaf .MakeString (string (_cgfc )),nil ;};

// Scale applies x-y scaling to the transformation matrix.
func (_ceg *ContentCreator )Scale (sx ,sy float64 )*ContentCreator {return _ceg .Add_cm (sx ,0,0,sy ,0,0);};

// Add_re appends 're' operand to the content stream:
// Append a rectangle to the current path as a complete subpath, with lower left corner (x,y).
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_faa *ContentCreator )Add_re (x ,y ,width ,height float64 )*ContentCreator {_dcb :=ContentStreamOperation {};_dcb .Operand ="\u0072\u0065";_dcb .Params =_daea ([]float64 {x ,y ,width ,height });_faa ._eg =append (_faa ._eg ,&_dcb );return _faa ;};
func (_cdb *ContentStreamProcessor )handleCommand_SC (_ggeb *ContentStreamOperation ,_egag *_ee .PdfPageResources )error {_bccg :=_cdb ._edec .ColorspaceStroking ;if len (_ggeb .Params )!=_bccg .GetNumComponents (){_dc .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_dc .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_ggeb .Params ),_bccg );return _g .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};_ecef ,_dggd :=_bccg .ColorFromPdfObjects (_ggeb .Params );if _dggd !=nil {return _dggd ;};_cdb ._edec .ColorStroking =_ecef ;return nil ;};

// ContentStreamProcessor defines a data structure and methods for processing a content stream, keeping track of the
// current graphics state, and allowing external handlers to define their own functions as a part of the processing,
// for example rendering or extracting certain information.
type ContentStreamProcessor struct{_effc GraphicStateStack ;_gbebf []*ContentStreamOperation ;_edec GraphicsState ;_cfd []handlerEntry ;_faae int ;};

// Add_BT appends 'BT' operand to the content stream:
// Begin text.
//
// See section 9.4 "Text Objects" and Table 107 (p. 256 PDF32000_2008).
func (_acec *ContentCreator )Add_BT ()*ContentCreator {_ca :=ContentStreamOperation {};_ca .Operand ="\u0042\u0054";_acec ._eg =append (_acec ._eg ,&_ca );return _acec ;};

// Add_k appends 'k' operand to the content stream:
// Same as K but used for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_acb *ContentCreator )Add_k (c ,m ,y ,k float64 )*ContentCreator {_gdg :=ContentStreamOperation {};_gdg .Operand ="\u006b";_gdg .Params =_daea ([]float64 {c ,m ,y ,k });_acb ._eg =append (_acb ._eg ,&_gdg );return _acb ;};

// Add_BMC appends 'BMC' operand to the content stream:
// Begins a marked-content sequence terminated by a balancing EMC operator.
// `tag` shall be a name object indicating the role or significance of
// the sequence.
//
// See section 14.6 "Marked Content" and Table 320 (p. 561 PDF32000_2008).
func (_cbf *ContentCreator )Add_BMC (tag _eaf .PdfObjectName )*ContentCreator {_bfd :=ContentStreamOperation {};_bfd .Operand ="\u0042\u004d\u0043";_bfd .Params =_fcce ([]_eaf .PdfObjectName {tag });_cbf ._eg =append (_cbf ._eg ,&_bfd );return _cbf ;};


// Add_quotes appends `"` operand to the content stream:
// Move to next line and show a string, using `aw` and `ac` as word
// and character spacing respectively.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_bdgd *ContentCreator )Add_quotes (textstr _eaf .PdfObjectString ,aw ,ac float64 )*ContentCreator {_baf :=ContentStreamOperation {};_baf .Operand ="\u0022";_baf .Params =_daea ([]float64 {aw ,ac });_baf .Params =append (_baf .Params ,_aeg ([]_eaf .PdfObjectString {textstr })...);
_bdgd ._eg =append (_bdgd ._eg ,&_baf );return _bdgd ;};

// Add_b_starred appends 'b*' operand to the content stream:
// Close, fill and then stroke the path (even-odd winding number rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_agc *ContentCreator )Add_b_starred ()*ContentCreator {_gga :=ContentStreamOperation {};_gga .Operand ="\u0062\u002a";_agc ._eg =append (_agc ._eg ,&_gga );return _agc ;};

// WrapIfNeeded wraps the entire contents within q ... Q.  If unbalanced, then adds extra Qs at the end.
// Only does if needed. Ensures that when adding new content, one start with all states
// in the default condition.
func (_cfc *ContentStreamOperations )WrapIfNeeded ()*ContentStreamOperations {if len (*_cfc )==0{return _cfc ;};if _cfc .isWrapped (){return _cfc ;};*_cfc =append ([]*ContentStreamOperation {{Operand :"\u0071"}},*_cfc ...);_cfb :=0;for _ ,_db :=range *_cfc {if _db .Operand =="\u0071"{_cfb ++;
}else if _db .Operand =="\u0051"{_cfb --;};};for _cfb > 0{*_cfc =append (*_cfc ,&ContentStreamOperation {Operand :"\u0051"});_cfb --;};return _cfc ;};

// Add_scn appends 'scn' operand to the content stream:
// Same as SC but for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_abf *ContentCreator )Add_scn (c ...float64 )*ContentCreator {_afg :=ContentStreamOperation {};_afg .Operand ="\u0073\u0063\u006e";_afg .Params =_daea (c );_abf ._eg =append (_abf ._eg ,&_afg );return _abf ;};

// Add_Tc appends 'Tc' operand to the content stream:
// Set character spacing.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_bad *ContentCreator )Add_Tc (charSpace float64 )*ContentCreator {_beb :=ContentStreamOperation {};_beb .Operand ="\u0054\u0063";_beb .Params =_daea ([]float64 {charSpace });_bad ._eg =append (_bad ._eg ,&_beb );return _bad ;};

// HandlerFunc is the function syntax that the ContentStreamProcessor handler must implement.
type HandlerFunc func (_caed *ContentStreamOperation ,_ecbee GraphicsState ,_aac *_ee .PdfPageResources )error ;func (_a *ContentStreamOperations )isWrapped ()bool {if len (*_a )< 2{return false ;};_ag :=0;for _ ,_cf :=range *_a {if _cf .Operand =="\u0071"{_ag ++;
}else if _cf .Operand =="\u0051"{_ag --;}else {if _ag < 1{return false ;};};};return _ag ==0;};

// SetStrokingColor sets the stroking `color` where color can be one of
// PdfColorDeviceGray, PdfColorDeviceRGB, or PdfColorDeviceCMYK.
func (_bbae *ContentCreator )SetStrokingColor (color _ee .PdfColor )*ContentCreator {switch _age :=color .(type ){case *_ee .PdfColorDeviceGray :_bbae .Add_G (_age .Val ());case *_ee .PdfColorDeviceRGB :_bbae .Add_RG (_age .R (),_age .G (),_age .B ());
case *_ee .PdfColorDeviceCMYK :_bbae .Add_K (_age .C (),_age .M (),_age .Y (),_age .K ());case *_ee .PdfColorPatternType2 :_bbae .Add_CS (*_eaf .MakeName ("\u0050a\u0074\u0074\u0065\u0072\u006e"));_bbae .Add_SCN_pattern (_age .PatternName );case *_ee .PdfColorPatternType3 :_bbae .Add_CS (*_eaf .MakeName ("\u0050a\u0074\u0074\u0065\u0072\u006e"));
_bbae .Add_SCN_pattern (_age .PatternName );default:_dc .Log .Debug ("\u0053\u0065\u0074\u0053\u0074\u0072\u006f\u006b\u0069\u006e\u0067\u0043\u006fl\u006f\u0072\u003a\u0020\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0063\u006f\u006c\u006fr\u003a\u0020\u0025\u0054",_age );
};return _bbae ;};func (_cgfg *ContentStreamProcessor )getColorspace (_abe string ,_edbd *_ee .PdfPageResources )(_ee .PdfColorspace ,error ){switch _abe {case "\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079":return _ee .NewPdfColorspaceDeviceGray (),nil ;
case "\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B":return _ee .NewPdfColorspaceDeviceRGB (),nil ;case "\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b":return _ee .NewPdfColorspaceDeviceCMYK (),nil ;case "\u0050a\u0074\u0074\u0065\u0072\u006e":return _ee .NewPdfColorspaceSpecialPattern (),nil ;
};if _edbd !=nil {_dac ,_cggd :=_edbd .GetColorspaceByName (_eaf .PdfObjectName (_abe ));if _cggd {return _dac ,nil ;};};switch _abe {case "\u0043a\u006c\u0047\u0072\u0061\u0079":return _ee .NewPdfColorspaceCalGray (),nil ;case "\u0043\u0061\u006c\u0052\u0047\u0042":return _ee .NewPdfColorspaceCalRGB (),nil ;
case "\u004c\u0061\u0062":return _ee .NewPdfColorspaceLab (),nil ;};_dc .Log .Debug ("\u0055\u006e\u006b\u006e\u006f\u0077\u006e\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070a\u0063e\u0020\u0072\u0065\u0071\u0075\u0065\u0073\u0074\u0065\u0064\u003a\u0020\u0025\u0073",_abe );
return nil ,_ga .Errorf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065:\u0020\u0025\u0073",_abe );};

// Add_B appends 'B' operand to the content stream:
// Fill and then stroke the path (nonzero winding number rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_cfge *ContentCreator )Add_B ()*ContentCreator {_adc :=ContentStreamOperation {};_adc .Operand ="\u0042";_cfge ._eg =append (_cfge ._eg ,&_adc );return _cfge ;};func _fcce (_bcgc []_eaf .PdfObjectName )[]_eaf .PdfObject {var _gggdg []_eaf .PdfObject ;
for _ ,_gfad :=range _bcgc {_gggdg =append (_gggdg ,_eaf .MakeName (string (_gfad )));};return _gggdg ;};

// Add_g appends 'g' operand to the content stream:
// Same as G but used for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_fgae *ContentCreator )Add_g (gray float64 )*ContentCreator {_fed :=ContentStreamOperation {};_fed .Operand ="\u0067";_fed .Params =_daea ([]float64 {gray });_fgae ._eg =append (_fgae ._eg ,&_fed );return _fgae ;};

// IsMask checks if an image is a mask.
// The image mask entry in the image dictionary specifies that the image data shall be used as a stencil
// mask for painting in the current color. The mask data is 1bpc, grayscale.
func (_daf *ContentStreamInlineImage )IsMask ()(bool ,error ){if _daf .ImageMask !=nil {_deg ,_bddf :=_daf .ImageMask .(*_eaf .PdfObjectBool );if !_bddf {_dc .Log .Debug ("\u0049m\u0061\u0067\u0065\u0020\u006d\u0061\u0073\u006b\u0020\u006e\u006ft\u0020\u0061\u0020\u0062\u006f\u006f\u006c\u0065\u0061\u006e");
return false ,_g .New ("\u0069\u006e\u0076\u0061li\u0064\u0020\u006f\u0062\u006a\u0065\u0063\u0074\u0020\u0074\u0079\u0070\u0065");};return bool (*_deg ),nil ;};return false ,nil ;};

// Add_gs adds 'gs' operand to the content stream: Set the graphics state.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_eag *ContentCreator )Add_gs (dictName _eaf .PdfObjectName )*ContentCreator {_gc :=ContentStreamOperation {};_gc .Operand ="\u0067\u0073";_gc .Params =_fcce ([]_eaf .PdfObjectName {dictName });_eag ._eg =append (_eag ._eg ,&_gc );return _eag ;};

// Add_q adds 'q' operand to the content stream: Pushes the current graphics state on the stack.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_gebf *ContentCreator )Add_q ()*ContentCreator {_gef :=ContentStreamOperation {};_gef .Operand ="\u0071";_gebf ._eg =append (_gebf ._eg ,&_gef );return _gebf ;};func (_gdda *ContentStreamProcessor )handleCommand_cs (_ggfa *ContentStreamOperation ,_abad *_ee .PdfPageResources )error {if len (_ggfa .Params )< 1{_dc .Log .Debug ("\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u0043\u0053\u0020\u0063\u006f\u006d\u006d\u0061\u006e\u0064\u002c\u0020s\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u006f\u0076\u0065\u0072");
return _g .New ("\u0074o\u006f \u0066\u0065\u0077\u0020\u0070a\u0072\u0061m\u0065\u0074\u0065\u0072\u0073");};if len (_ggfa .Params )> 1{_dc .Log .Debug ("\u0043\u0053\u0020\u0063\u006f\u006d\u006d\u0061n\u0064\u0020\u0077it\u0068\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020-\u0020\u0063\u006f\u006e\u0074\u0069\u006e\u0075i\u006e\u0067");
return _g .New ("\u0074\u006f\u006f\u0020ma\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073");};_cedc ,_bda :=_ggfa .Params [0].(*_eaf .PdfObjectName );if !_bda {_dc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020C\u0053\u0020\u0063o\u006d\u006d\u0061n\u0064\u0020w\u0069\u0074\u0068\u0020\u0069\u006ev\u0061li\u0064\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u002c\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u006f\u0076\u0065\u0072");
return _g .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};_aacg ,_ebgd :=_gdda .getColorspace (string (*_cedc ),_abad );if _ebgd !=nil {return _ebgd ;};_gdda ._edec .ColorspaceNonStroking =_aacg ;_dbdb ,_ebgd :=_gdda .getInitialColor (_aacg );
if _ebgd !=nil {return _ebgd ;};_gdda ._edec .ColorNonStroking =_dbdb ;return nil ;};func (_aadc *ContentStreamParser )parseObject ()(_gedg _eaf .PdfObject ,_cdd bool ,_gbc error ){_aadc .skipSpaces ();for {_eabd ,_bccd :=_aadc ._ccf .Peek (2);if _bccd !=nil {return nil ,false ,_bccd ;
};_dc .Log .Trace ("\u0050e\u0065k\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u003a\u0020\u0025\u0073",string (_eabd ));if _eabd [0]=='%'{_aadc .skipComments ();continue ;}else if _eabd [0]=='/'{_dedf ,_fced :=_aadc .parseName ();_dc .Log .Trace ("\u002d\u003e\u004ea\u006d\u0065\u003a\u0020\u0027\u0025\u0073\u0027",_dedf );
return &_dedf ,false ,_fced ;}else if _eabd [0]=='('{_dc .Log .Trace ("\u002d>\u0053\u0074\u0072\u0069\u006e\u0067!");_bbb ,_gafe :=_aadc .parseString ();return _bbb ,false ,_gafe ;}else if _eabd [0]=='<'&&_eabd [1]!='<'{_dc .Log .Trace ("\u002d\u003e\u0048\u0065\u0078\u0020\u0053\u0074\u0072\u0069\u006e\u0067\u0021");
_fcaa ,_feeb :=_aadc .parseHexString ();return _fcaa ,false ,_feeb ;}else if _eabd [0]=='['{_dc .Log .Trace ("\u002d\u003e\u0041\u0072\u0072\u0061\u0079\u0021");_dded ,_efed :=_aadc .parseArray ();return _dded ,false ,_efed ;}else if _eaf .IsFloatDigit (_eabd [0])||(_eabd [0]=='-'&&_eaf .IsFloatDigit (_eabd [1]))||(_eabd [0]=='+'&&_eaf .IsFloatDigit (_eabd [1])){_dc .Log .Trace ("\u002d>\u004e\u0075\u006d\u0062\u0065\u0072!");
_ebdf ,_cdef :=_aadc .parseNumber ();return _ebdf ,false ,_cdef ;}else if _eabd [0]=='<'&&_eabd [1]=='<'{_fbd ,_afga :=_aadc .parseDict ();return _fbd ,false ,_afga ;}else {_dc .Log .Trace ("\u002d>\u004fp\u0065\u0072\u0061\u006e\u0064 \u006f\u0072 \u0062\u006f\u006f\u006c\u003f");
_eabd ,_ =_aadc ._ccf .Peek (5);_edb :=string (_eabd );_dc .Log .Trace ("\u0063\u006f\u006e\u0074\u0020\u0050\u0065\u0065\u006b\u0020\u0073\u0074r\u003a\u0020\u0025\u0073",_edb );if (len (_edb )> 3)&&(_edb [:4]=="\u006e\u0075\u006c\u006c"){_gbeb ,_dcaf :=_aadc .parseNull ();
return &_gbeb ,false ,_dcaf ;}else if (len (_edb )> 4)&&(_edb [:5]=="\u0066\u0061\u006cs\u0065"){_fabb ,_bddg :=_aadc .parseBool ();return &_fabb ,false ,_bddg ;}else if (len (_edb )> 3)&&(_edb [:4]=="\u0074\u0072\u0075\u0065"){_fcd ,_fbc :=_aadc .parseBool ();
return &_fcd ,false ,_fbc ;};_efcc ,_edd :=_aadc .parseOperand ();if _edd !=nil {return _efcc ,false ,_edd ;};if len (_efcc .String ())< 1{return _efcc ,false ,ErrInvalidOperand ;};return _efcc ,true ,nil ;};};};func _caa (_fegc string )bool {_ ,_cac :=_bff [_fegc ];
return _cac };

// Add_Q adds 'Q' operand to the content stream: Pops the most recently stored state from the stack.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_be *ContentCreator )Add_Q ()*ContentCreator {_ebb :=ContentStreamOperation {};_ebb .Operand ="\u0051";_be ._eg =append (_be ._eg ,&_ebb );return _be ;};func (_aaagc *ContentStreamProcessor )handleCommand_CS (_cce *ContentStreamOperation ,_dgea *_ee .PdfPageResources )error {if len (_cce .Params )< 1{_dc .Log .Debug ("\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u0063\u0073\u0020\u0063\u006f\u006d\u006d\u0061\u006e\u0064\u002c\u0020s\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u006f\u0076\u0065\u0072");
return _g .New ("\u0074o\u006f \u0066\u0065\u0077\u0020\u0070a\u0072\u0061m\u0065\u0074\u0065\u0072\u0073");};if len (_cce .Params )> 1{_dc .Log .Debug ("\u0063\u0073\u0020\u0063\u006f\u006d\u006d\u0061n\u0064\u0020\u0077it\u0068\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020-\u0020\u0063\u006f\u006e\u0074\u0069\u006e\u0075i\u006e\u0067");
return _g .New ("\u0074\u006f\u006f\u0020ma\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073");};_gde ,_badd :=_cce .Params [0].(*_eaf .PdfObjectName );if !_badd {_dc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020c\u0073\u0020\u0063o\u006d\u006d\u0061n\u0064\u0020w\u0069\u0074\u0068\u0020\u0069\u006ev\u0061li\u0064\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u002c\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u006f\u0076\u0065\u0072");
return _g .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};_aba ,_ggfbg :=_aaagc .getColorspace (string (*_gde ),_dgea );if _ggfbg !=nil {return _ggfbg ;};_aaagc ._edec .ColorspaceStroking =_aba ;_gfa ,_ggfbg :=_aaagc .getInitialColor (_aba );
if _ggfbg !=nil {return _ggfbg ;};_aaagc ._edec .ColorStroking =_gfa ;return nil ;};

// WriteString outputs the object as it is to be written to file.
func (_bdgdg *ContentStreamInlineImage )WriteString ()string {var _ceaf _fg .Buffer ;_bgf :="";if _bdgdg .BitsPerComponent !=nil {_bgf +="\u002f\u0042\u0050C\u0020"+_bdgdg .BitsPerComponent .WriteString ()+"\u000a";};if _bdgdg .ColorSpace !=nil {_bgf +="\u002f\u0043\u0053\u0020"+_bdgdg .ColorSpace .WriteString ()+"\u000a";
};if _bdgdg .Decode !=nil {_bgf +="\u002f\u0044\u0020"+_bdgdg .Decode .WriteString ()+"\u000a";};if _bdgdg .DecodeParms !=nil {_bgf +="\u002f\u0044\u0050\u0020"+_bdgdg .DecodeParms .WriteString ()+"\u000a";};if _bdgdg .Filter !=nil {_bgf +="\u002f\u0046\u0020"+_bdgdg .Filter .WriteString ()+"\u000a";
};if _bdgdg .Height !=nil {_bgf +="\u002f\u0048\u0020"+_bdgdg .Height .WriteString ()+"\u000a";};if _bdgdg .ImageMask !=nil {_bgf +="\u002f\u0049\u004d\u0020"+_bdgdg .ImageMask .WriteString ()+"\u000a";};if _bdgdg .Intent !=nil {_bgf +="\u002f\u0049\u006e\u0074\u0065\u006e\u0074\u0020"+_bdgdg .Intent .WriteString ()+"\u000a";
};if _bdgdg .Interpolate !=nil {_bgf +="\u002f\u0049\u0020"+_bdgdg .Interpolate .WriteString ()+"\u000a";};if _bdgdg .Width !=nil {_bgf +="\u002f\u0057\u0020"+_bdgdg .Width .WriteString ()+"\u000a";};_ceaf .WriteString (_bgf );_ceaf .WriteString ("\u0049\u0044\u0020");
_ceaf .Write (_bdgdg ._gda );_ceaf .WriteString ("\u000a\u0045\u0049\u000a");return _ceaf .String ();};

// Add_TD appends 'TD' operand to the content stream:
// Move to start of next line with offset (`tx`, `ty`).
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_gec *ContentCreator )Add_TD (tx ,ty float64 )*ContentCreator {_afa :=ContentStreamOperation {};_afa .Operand ="\u0054\u0044";_afa .Params =_daea ([]float64 {tx ,ty });_gec ._eg =append (_gec ._eg ,&_afa );return _gec ;};

// AddHandler adds a new ContentStreamProcessor `handler` of type `condition` for `operand`.
func (_aaf *ContentStreamProcessor )AddHandler (condition HandlerConditionEnum ,operand string ,handler HandlerFunc ){_aaead :=handlerEntry {};_aaead .Condition =condition ;_aaead .Operand =operand ;_aaead .Handler =handler ;_aaf ._cfd =append (_aaf ._cfd ,_aaead );
};

// Add_RG appends 'RG' operand to the content stream:
// Set the stroking colorspace to DeviceRGB and sets the r,g,b colors (0-1 each).
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_aff *ContentCreator )Add_RG (r ,g ,b float64 )*ContentCreator {_ddd :=ContentStreamOperation {};_ddd .Operand ="\u0052\u0047";_ddd .Params =_daea ([]float64 {r ,g ,b });_aff ._eg =append (_aff ._eg ,&_ddd );return _aff ;};

// Add_Tz appends 'Tz' operand to the content stream:
// Set horizontal scaling.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_eedg *ContentCreator )Add_Tz (scale float64 )*ContentCreator {_bec :=ContentStreamOperation {};_bec .Operand ="\u0054\u007a";_bec .Params =_daea ([]float64 {scale });_eedg ._eg =append (_eedg ._eg ,&_bec );return _eedg ;};

// Add_Tm appends 'Tm' operand to the content stream:
// Set the text line matrix.
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_eab *ContentCreator )Add_Tm (a ,b ,c ,d ,e ,f float64 )*ContentCreator {_cff :=ContentStreamOperation {};_cff .Operand ="\u0054\u006d";_cff .Params =_daea ([]float64 {a ,b ,c ,d ,e ,f });_eab ._eg =append (_eab ._eg ,&_cff );return _eab ;};

// Bytes converts a set of content stream operations to a content stream byte presentation,
// i.e. the kind that can be stored as a PDF stream or string format.
func (_fgg *ContentStreamOperations )Bytes ()[]byte {var _ff _fg .Buffer ;for _ ,_ac :=range *_fgg {if _ac ==nil {continue ;};if _ac .Operand =="\u0042\u0049"{_ff .WriteString (_ac .Operand +"\u000a");_ff .WriteString (_ac .Params [0].WriteString ());}else {for _ ,_ace :=range _ac .Params {_ff .WriteString (_ace .WriteString ());
_ff .WriteString ("\u0020");};_ff .WriteString (_ac .Operand +"\u000a");};};return _ff .Bytes ();};func (_cgga *ContentStreamProcessor )handleCommand_scn (_efea *ContentStreamOperation ,_gfgd *_ee .PdfPageResources )error {_gcea :=_cgga ._edec .ColorspaceNonStroking ;
if !_gecbc (_gcea ){if len (_efea .Params )!=_gcea .GetNumComponents (){_dc .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_dc .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_efea .Params ),_gcea );return _g .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};};_feab ,_feed :=_gcea .ColorFromPdfObjects (_efea .Params );if _feed !=nil {_dc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0046\u0061\u0069\u006c \u0074\u006f\u0020\u0067\u0065\u0074\u0020\u0063o\u006co\u0072\u0020\u0066\u0072\u006f\u006d\u0020\u0070\u0061\u0072\u0061\u006d\u0073\u003a\u0020\u0025\u002b\u0076 \u0028\u0043\u0053\u0020\u0069\u0073\u0020\u0025\u002b\u0076\u0029",_efea .Params ,_gcea );
return _feed ;};_cgga ._edec .ColorNonStroking =_feab ;return nil ;};

// Wrap ensures that the contentstream is wrapped within a balanced q ... Q expression.
func (_ffc *ContentCreator )Wrap (){_ffc ._eg .WrapIfNeeded ()};

// Add_m adds 'm' operand to the content stream: Move the current point to (x,y).
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_cd *ContentCreator )Add_m (x ,y float64 )*ContentCreator {_eafg :=ContentStreamOperation {};_eafg .Operand ="\u006d";_eafg .Params =_daea ([]float64 {x ,y });_cd ._eg =append (_cd ._eg ,&_eafg );return _cd ;};func (_ggec *ContentStreamParser )parseHexString ()(*_eaf .PdfObjectString ,error ){_ggec ._ccf .ReadByte ();
_abffa :=[]byte ("\u0030\u0031\u0032\u003345\u0036\u0037\u0038\u0039\u0061\u0062\u0063\u0064\u0065\u0066\u0041\u0042\u0043\u0044E\u0046");var _bbaee []byte ;for {_ggec .skipSpaces ();_dbcc ,_cfcc :=_ggec ._ccf .Peek (1);if _cfcc !=nil {return _eaf .MakeString (""),_cfcc ;
};if _dbcc [0]=='>'{_ggec ._ccf .ReadByte ();break ;};_eace ,_ :=_ggec ._ccf .ReadByte ();if _fg .IndexByte (_abffa ,_eace )>=0{_bbaee =append (_bbaee ,_eace );};};if len (_bbaee )%2==1{_bbaee =append (_bbaee ,'0');};_dcdd ,_ :=_cg .DecodeString (string (_bbaee ));
return _eaf .MakeHexString (string (_dcdd )),nil ;};

// Add_Td appends 'Td' operand to the content stream:
// Move to start of next line with offset (`tx`, `ty`).
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_ecb *ContentCreator )Add_Td (tx ,ty float64 )*ContentCreator {_ggfg :=ContentStreamOperation {};_ggfg .Operand ="\u0054\u0064";_ggfg .Params =_daea ([]float64 {tx ,ty });_ecb ._eg =append (_ecb ._eg ,&_ggfg );return _ecb ;};

// Add_B_starred appends 'B*' operand to the content stream:
// Fill and then stroke the path (even-odd rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_def *ContentCreator )Add_B_starred ()*ContentCreator {_bae :=ContentStreamOperation {};_bae .Operand ="\u0042\u002a";_def ._eg =append (_def ._eg ,&_bae );return _def ;};func (_bbaa *ContentStreamParser )parseName ()(_eaf .PdfObjectName ,error ){_aeec :="";
_fbf :=false ;for {_accb ,_eafac :=_bbaa ._ccf .Peek (1);if _eafac ==_ea .EOF {break ;};if _eafac !=nil {return _eaf .PdfObjectName (_aeec ),_eafac ;};if !_fbf {if _accb [0]=='/'{_fbf =true ;_bbaa ._ccf .ReadByte ();}else {_dc .Log .Error ("N\u0061\u006d\u0065\u0020\u0073\u0074a\u0072\u0074\u0069\u006e\u0067\u0020\u0077\u0069\u0074h\u0020\u0025\u0073 \u0028%\u0020\u0078\u0029",_accb ,_accb );
return _eaf .PdfObjectName (_aeec ),_ga .Errorf ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006ea\u006d\u0065:\u0020\u0028\u0025\u0063\u0029",_accb [0]);};}else {if _eaf .IsWhiteSpace (_accb [0]){break ;}else if (_accb [0]=='/')||(_accb [0]=='[')||(_accb [0]=='(')||(_accb [0]==']')||(_accb [0]=='<')||(_accb [0]=='>'){break ;
}else if _accb [0]=='#'{_ebbg ,_aea :=_bbaa ._ccf .Peek (3);if _aea !=nil {return _eaf .PdfObjectName (_aeec ),_aea ;};_bbaa ._ccf .Discard (3);_dbbd ,_aea :=_cg .DecodeString (string (_ebbg [1:3]));if _aea !=nil {return _eaf .PdfObjectName (_aeec ),_aea ;
};_aeec +=string (_dbbd );}else {_eedfa ,_ :=_bbaa ._ccf .ReadByte ();_aeec +=string (_eedfa );};};};return _eaf .PdfObjectName (_aeec ),nil ;};func (_bebe *ContentStreamParser )parseNull ()(_eaf .PdfObjectNull ,error ){_ ,_eafc :=_bebe ._ccf .Discard (4);
return _eaf .PdfObjectNull {},_eafc ;};

// Push pushes `gs` on the `gsStack`.
func (_adge *GraphicStateStack )Push (gs GraphicsState ){*_adge =append (*_adge ,gs )};

// Add_f appends 'f' operand to the content stream:
// Fill the path using the nonzero winding number rule to determine fill region.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_bdf *ContentCreator )Add_f ()*ContentCreator {_fec :=ContentStreamOperation {};_fec .Operand ="\u0066";_bdf ._eg =append (_bdf ._eg ,&_fec );return _bdf ;};

// GetEncoder returns the encoder of the inline image.
func (_cgc *ContentStreamInlineImage )GetEncoder ()(_eaf .StreamEncoder ,error ){return _bcc (_cgc )};func _aeg (_ccec []_eaf .PdfObjectString )[]_eaf .PdfObject {var _ccg []_eaf .PdfObject ;for _ ,_bbdb :=range _ccec {_ccg =append (_ccg ,_eaf .MakeString (_bbdb .Str ()));
};return _ccg ;};

// ParseInlineImage parses an inline image from a content stream, both reading its properties and binary data.
// When called, "BI" has already been read from the stream.  This function
// finishes reading through "EI" and then returns the ContentStreamInlineImage.
func (_eee *ContentStreamParser )ParseInlineImage ()(*ContentStreamInlineImage ,error ){_abbgd :=ContentStreamInlineImage {};for {_eee .skipSpaces ();_dcg ,_defc ,_gecb :=_eee .parseObject ();if _gecb !=nil {return nil ,_gecb ;};if !_defc {_dbe ,_fbg :=_eaf .GetName (_dcg );
if !_fbg {_dc .Log .Debug ("\u0049\u006e\u0076\u0061\u006ci\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067e\u0020\u0070\u0072\u006f\u0070\u0065\u0072\u0074\u0079\u0020\u0028\u0065\u0078\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u0029\u0020\u002d\u0020\u0025T",_dcg );
return nil ,_ga .Errorf ("\u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067e\u0020\u0070\u0072\u006f\u0070\u0065\u0072\u0074\u0079\u0020\u0028\u0065\u0078\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u0029\u0020\u002d\u0020\u0025T",_dcg );
};_fabd ,_cgff ,_gcec :=_eee .parseObject ();if _gcec !=nil {return nil ,_gcec ;};if _cgff {return nil ,_ga .Errorf ("\u006eo\u0074\u0020\u0065\u0078\u0070\u0065\u0063\u0074\u0069\u006e\u0067 \u0061\u006e\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");
};switch *_dbe {case "\u0042\u0050\u0043","\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074":_abbgd .BitsPerComponent =_fabd ;case "\u0043\u0053","\u0043\u006f\u006c\u006f\u0072\u0053\u0070\u0061\u0063\u0065":_abbgd .ColorSpace =_fabd ;
case "\u0044","\u0044\u0065\u0063\u006f\u0064\u0065":_abbgd .Decode =_fabd ;case "\u0044\u0050","D\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073":_abbgd .DecodeParms =_fabd ;case "\u0046","\u0046\u0069\u006c\u0074\u0065\u0072":_abbgd .Filter =_fabd ;
case "\u0048","\u0048\u0065\u0069\u0067\u0068\u0074":_abbgd .Height =_fabd ;case "\u0049\u004d","\u0049m\u0061\u0067\u0065\u004d\u0061\u0073k":_abbgd .ImageMask =_fabd ;case "\u0049\u006e\u0074\u0065\u006e\u0074":_abbgd .Intent =_fabd ;case "\u0049","I\u006e\u0074\u0065\u0072\u0070\u006f\u006c\u0061\u0074\u0065":_abbgd .Interpolate =_fabd ;
case "\u0057","\u0057\u0069\u0064t\u0068":_abbgd .Width =_fabd ;case "\u004c\u0065\u006e\u0067\u0074\u0068","\u0053u\u0062\u0074\u0079\u0070\u0065","\u0054\u0079\u0070\u0065":_dc .Log .Debug ("\u0049\u0067\u006e\u006fr\u0069\u006e\u0067\u0020\u0069\u006e\u006c\u0069\u006e\u0065 \u0070a\u0072\u0061\u006d\u0065\u0074\u0065\u0072 \u0025\u0073",*_dbe );
default:return nil ,_ga .Errorf ("\u0075\u006e\u006b\u006e\u006f\u0077n\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0020\u0025\u0073",*_dbe );};};if _defc {_bgg ,_cgcef :=_dcg .(*_eaf .PdfObjectString );
if !_cgcef {return nil ,_ga .Errorf ("\u0066a\u0069\u006ce\u0064\u0020\u0074o\u0020\u0072\u0065\u0061\u0064\u0020\u0069n\u006c\u0069\u006e\u0065\u0020\u0069m\u0061\u0067\u0065\u0020\u002d\u0020\u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");
};if _bgg .Str ()=="\u0045\u0049"{_dc .Log .Trace ("\u0049n\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020f\u0069\u006e\u0069\u0073\u0068\u0065\u0064\u002e\u002e\u002e");return &_abbgd ,nil ;}else if _bgg .Str ()=="\u0049\u0044"{_dc .Log .Trace ("\u0049\u0044\u0020\u0073\u0074\u0061\u0072\u0074");
_ecac ,_ggd :=_eee ._ccf .Peek (1);if _ggd !=nil {return nil ,_ggd ;};if _eaf .IsWhiteSpace (_ecac [0]){_eee ._ccf .Discard (1);};_abbgd ._gda =[]byte {};_cdg :=0;var _ffee []byte ;for {_ggfe ,_dde :=_eee ._ccf .ReadByte ();if _dde !=nil {_dc .Log .Debug ("\u0055\u006e\u0061\u0062\u006ce\u0020\u0074\u006f\u0020\u0066\u0069\u006e\u0064\u0020\u0065\u006e\u0064\u0020o\u0066\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0045\u0049\u0020\u0069\u006e\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0064\u0061\u0074a");
return nil ,_dde ;};if _cdg ==0{if _eaf .IsWhiteSpace (_ggfe ){_ffee =[]byte {};_ffee =append (_ffee ,_ggfe );_cdg =1;}else if _ggfe =='E'{_ffee =append (_ffee ,_ggfe );_cdg =2;}else {_abbgd ._gda =append (_abbgd ._gda ,_ggfe );};}else if _cdg ==1{_ffee =append (_ffee ,_ggfe );
if _ggfe =='E'{_cdg =2;}else {_abbgd ._gda =append (_abbgd ._gda ,_ffee ...);_ffee =[]byte {};if _eaf .IsWhiteSpace (_ggfe ){_cdg =1;}else {_cdg =0;};};}else if _cdg ==2{_ffee =append (_ffee ,_ggfe );if _ggfe =='I'{_cdg =3;}else {_abbgd ._gda =append (_abbgd ._gda ,_ffee ...);
_ffee =[]byte {};_cdg =0;};}else if _cdg ==3{_ffee =append (_ffee ,_ggfe );if _eaf .IsWhiteSpace (_ggfe ){_efc ,_gebfd :=_eee ._ccf .Peek (20);if _gebfd !=nil &&_gebfd !=_ea .EOF {return nil ,_gebfd ;};_dbc :=NewContentStreamParser (string (_efc ));_fee :=true ;
for _gca :=0;_gca < 3;_gca ++{_cbba ,_caf ,_dbdg :=_dbc .parseObject ();if _dbdg !=nil {if _dbdg ==_ea .EOF {break ;};_fee =false ;continue ;};if _caf &&!_caa (_cbba .String ()){_fee =false ;break ;};};if _fee {if len (_abbgd ._gda )> 100{_dc .Log .Trace ("\u0049\u006d\u0061\u0067\u0065\u0020\u0073\u0074\u0072\u0065\u0061m\u0020\u0028\u0025\u0064\u0029\u003a\u0020\u0025\u0020\u0078 \u002e\u002e\u002e",len (_abbgd ._gda ),_abbgd ._gda [:100]);
}else {_dc .Log .Trace ("\u0049\u006d\u0061\u0067e \u0073\u0074\u0072\u0065\u0061\u006d\u0020\u0028\u0025\u0064\u0029\u003a\u0020\u0025 \u0078",len (_abbgd ._gda ),_abbgd ._gda );};return &_abbgd ,nil ;};};_abbgd ._gda =append (_abbgd ._gda ,_ffee ...);
_ffee =[]byte {};_cdg =0;};};};};};};

// Add_W appends 'W' operand to the content stream:
// Modify the current clipping path by intersecting with the current path (nonzero winding rule).
//
// See section 8.5.4 "Clipping Path Operators" and Table 61 (p. 146 PDF32000_2008).
func (_cde *ContentCreator )Add_W ()*ContentCreator {_efg :=ContentStreamOperation {};_efg .Operand ="\u0057";_cde ._eg =append (_cde ._eg ,&_efg );return _cde ;};

// All returns true if `hce` is equivalent to HandlerConditionEnumAllOperands.
func (_cdgb HandlerConditionEnum )All ()bool {return _cdgb ==HandlerConditionEnumAllOperands };func (_cfabb *ContentStreamProcessor )getInitialColor (_edab _ee .PdfColorspace )(_ee .PdfColor ,error ){switch _eedd :=_edab .(type ){case *_ee .PdfColorspaceDeviceGray :return _ee .NewPdfColorDeviceGray (0.0),nil ;
case *_ee .PdfColorspaceDeviceRGB :return _ee .NewPdfColorDeviceRGB (0.0,0.0,0.0),nil ;case *_ee .PdfColorspaceDeviceCMYK :return _ee .NewPdfColorDeviceCMYK (0.0,0.0,0.0,1.0),nil ;case *_ee .PdfColorspaceCalGray :return _ee .NewPdfColorCalGray (0.0),nil ;
case *_ee .PdfColorspaceCalRGB :return _ee .NewPdfColorCalRGB (0.0,0.0,0.0),nil ;case *_ee .PdfColorspaceLab :_efef :=0.0;_abgf :=0.0;_dbg :=0.0;if _eedd .Range [0]> 0{_efef =_eedd .Range [0];};if _eedd .Range [2]> 0{_abgf =_eedd .Range [2];};return _ee .NewPdfColorLab (_efef ,_abgf ,_dbg ),nil ;
case *_ee .PdfColorspaceICCBased :if _eedd .Alternate ==nil {_dc .Log .Trace ("\u0049\u0043\u0043\u0020\u0042\u0061\u0073\u0065\u0064\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065d\u0020-\u0020\u0061\u0074\u0074\u0065\u006d\u0070\u0074\u0069\u006e\u0067\u0020\u0066\u0061\u006c\u006c\u0020\u0062a\u0063\u006b\u0020\u0028\u004e\u0020\u003d\u0020\u0025\u0064\u0029",_eedd .N );
if _eedd .N ==1{_dc .Log .Trace ("\u0046\u0061\u006c\u006c\u0069\u006e\u0067\u0020\u0062\u0061\u0063k\u0020\u0074\u006f\u0020\u0044\u0065\u0076\u0069\u0063\u0065G\u0072\u0061\u0079");return _cfabb .getInitialColor (_ee .NewPdfColorspaceDeviceGray ());}else if _eedd .N ==3{_dc .Log .Trace ("\u0046a\u006c\u006c\u0069\u006eg\u0020\u0062\u0061\u0063\u006b \u0074o\u0020D\u0065\u0076\u0069\u0063\u0065\u0052\u0047B");
return _cfabb .getInitialColor (_ee .NewPdfColorspaceDeviceRGB ());}else if _eedd .N ==4{_dc .Log .Trace ("\u0046\u0061\u006c\u006c\u0069\u006e\u0067\u0020\u0062\u0061\u0063k\u0020\u0074\u006f\u0020\u0044\u0065\u0076\u0069\u0063\u0065C\u004d\u0059\u004b");
return _cfabb .getInitialColor (_ee .NewPdfColorspaceDeviceCMYK ());}else {return nil ,_g .New ("a\u006c\u0074\u0065\u0072\u006e\u0061t\u0065\u0020\u0073\u0070\u0061\u0063e\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064\u0020\u0066\u006f\u0072\u0020\u0049C\u0043");
};};return _cfabb .getInitialColor (_eedd .Alternate );case *_ee .PdfColorspaceSpecialIndexed :if _eedd .Base ==nil {return nil ,_g .New ("\u0069\u006e\u0064\u0065\u0078\u0065\u0064\u0020\u0062\u0061\u0073e\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069f\u0069\u0065\u0064");
};return _cfabb .getInitialColor (_eedd .Base );case *_ee .PdfColorspaceSpecialSeparation :if _eedd .AlternateSpace ==nil {return nil ,_g .New ("\u0061\u006ct\u0065\u0072\u006e\u0061\u0074\u0065\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069fi\u0065\u0064");
};return _cfabb .getInitialColor (_eedd .AlternateSpace );case *_ee .PdfColorspaceDeviceN :if _eedd .AlternateSpace ==nil {return nil ,_g .New ("\u0061\u006ct\u0065\u0072\u006e\u0061\u0074\u0065\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069fi\u0065\u0064");
};return _cfabb .getInitialColor (_eedd .AlternateSpace );case *_ee .PdfColorspaceSpecialPattern :return _ee .NewPdfColorPattern (),nil ;};_dc .Log .Debug ("Un\u0061\u0062l\u0065\u0020\u0074\u006f\u0020\u0064\u0065\u0074\u0065r\u006d\u0069\u006e\u0065\u0020\u0069\u006e\u0069\u0074\u0069\u0061\u006c\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u0066\u006f\u0072\u0020\u0075\u006e\u006b\u006e\u006fw\u006e \u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061c\u0065:\u0020\u0025T",_edab );
return nil ,_g .New ("\u0075\u006e\u0073\u0075pp\u006f\u0072\u0074\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061c\u0065");};

// Add_K appends 'K' operand to the content stream:
// Set the stroking colorspace to DeviceCMYK and sets the c,m,y,k color (0-1 each component).
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_abb *ContentCreator )Add_K (c ,m ,y ,k float64 )*ContentCreator {_agce :=ContentStreamOperation {};_agce .Operand ="\u004b";_agce .Params =_daea ([]float64 {c ,m ,y ,k });_abb ._eg =append (_abb ._eg ,&_agce );return _abb ;};func (_ddeb *ContentStreamParser )parseDict ()(*_eaf .PdfObjectDictionary ,error ){_dc .Log .Trace ("\u0052\u0065\u0061\u0064i\u006e\u0067\u0020\u0063\u006f\u006e\u0074\u0065\u006e\u0074 \u0073t\u0072\u0065\u0061\u006d\u0020\u0064\u0069c\u0074\u0021");
_bcd :=_eaf .MakeDict ();_dgee ,_ :=_ddeb ._ccf .ReadByte ();if _dgee !='<'{return nil ,_g .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074");};_dgee ,_ =_ddeb ._ccf .ReadByte ();if _dgee !='<'{return nil ,_g .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074");
};for {_ddeb .skipSpaces ();_ede ,_afcd :=_ddeb ._ccf .Peek (2);if _afcd !=nil {return nil ,_afcd ;};_dc .Log .Trace ("D\u0069c\u0074\u0020\u0070\u0065\u0065\u006b\u003a\u0020%\u0073\u0020\u0028\u0025 x\u0029\u0021",string (_ede ),string (_ede ));if (_ede [0]=='>')&&(_ede [1]=='>'){_dc .Log .Trace ("\u0045\u004f\u0046\u0020\u0064\u0069\u0063\u0074\u0069o\u006e\u0061\u0072\u0079");
_ddeb ._ccf .ReadByte ();_ddeb ._ccf .ReadByte ();break ;};_dc .Log .Trace ("\u0050a\u0072s\u0065\u0020\u0074\u0068\u0065\u0020\u006e\u0061\u006d\u0065\u0021");_eabe ,_afcd :=_ddeb .parseName ();_dc .Log .Trace ("\u004be\u0079\u003a\u0020\u0025\u0073",_eabe );
if _afcd !=nil {_dc .Log .Debug ("E\u0052\u0052\u004f\u0052\u0020\u0052e\u0074\u0075\u0072\u006e\u0069\u006e\u0067\u0020\u006ea\u006d\u0065\u0020e\u0072r\u0020\u0025\u0073",_afcd );return nil ,_afcd ;};if len (_eabe )> 4&&_eabe [len (_eabe )-4:]=="\u006e\u0075\u006c\u006c"{_ebe :=_eabe [0:len (_eabe )-4];
_dc .Log .Trace ("\u0054\u0061\u006b\u0069n\u0067\u0020\u0063\u0061\u0072\u0065\u0020\u006f\u0066\u0020n\u0075l\u006c\u0020\u0062\u0075\u0067\u0020\u0028%\u0073\u0029",_eabe );_dc .Log .Trace ("\u004e\u0065\u0077\u0020ke\u0079\u0020\u0022\u0025\u0073\u0022\u0020\u003d\u0020\u006e\u0075\u006c\u006c",_ebe );
_ddeb .skipSpaces ();_egec ,_ :=_ddeb ._ccf .Peek (1);if _egec [0]=='/'{_bcd .Set (_ebe ,_eaf .MakeNull ());continue ;};};_ddeb .skipSpaces ();_cca ,_ ,_afcd :=_ddeb .parseObject ();if _afcd !=nil {return nil ,_afcd ;};_bcd .Set (_eabe ,_cca );_dc .Log .Trace ("\u0064\u0069\u0063\u0074\u005b\u0025\u0073\u005d\u0020\u003d\u0020\u0025\u0073",_eabe ,_cca .String ());
};return _bcd ,nil ;};func (_dbff *ContentStreamProcessor )handleCommand_sc (_cgge *ContentStreamOperation ,_eea *_ee .PdfPageResources )error {_caag :=_dbff ._edec .ColorspaceNonStroking ;if !_gecbc (_caag ){if len (_cgge .Params )!=_caag .GetNumComponents (){_dc .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_dc .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_cgge .Params ),_caag );return _g .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};};_gdae ,_bbad :=_caag .ColorFromPdfObjects (_cgge .Params );if _bbad !=nil {return _bbad ;};_dbff ._edec .ColorNonStroking =_gdae ;return nil ;};

// Add_b appends 'b' operand to the content stream:
// Close, fill and then stroke the path (nonzero winding number rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_fca *ContentCreator )Add_b ()*ContentCreator {_fde :=ContentStreamOperation {};_fde .Operand ="\u0062";_fca ._eg =append (_fca ._eg ,&_fde );return _fca ;};

// Transform returns coordinates x, y transformed by the CTM.
func (_dbcb *GraphicsState )Transform (x ,y float64 )(float64 ,float64 ){return _dbcb .CTM .Transform (x ,y );};

// Add_h appends 'h' operand to the content stream:
// Close the current subpath by adding a line between the current position and the starting position.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_eebg *ContentCreator )Add_h ()*ContentCreator {_ffdb :=ContentStreamOperation {};_ffdb .Operand ="\u0068";_eebg ._eg =append (_eebg ._eg ,&_ffdb );return _eebg ;};func (_dae *ContentStreamInlineImage )String ()string {_dbd :=_ga .Sprintf ("I\u006el\u0069\u006e\u0065\u0049\u006d\u0061\u0067\u0065(\u006c\u0065\u006e\u003d%d\u0029\u000a",len (_dae ._gda ));
if _dae .BitsPerComponent !=nil {_dbd +="\u002d\u0020\u0042\u0050\u0043\u0020"+_dae .BitsPerComponent .WriteString ()+"\u000a";};if _dae .ColorSpace !=nil {_dbd +="\u002d\u0020\u0043S\u0020"+_dae .ColorSpace .WriteString ()+"\u000a";};if _dae .Decode !=nil {_dbd +="\u002d\u0020\u0044\u0020"+_dae .Decode .WriteString ()+"\u000a";
};if _dae .DecodeParms !=nil {_dbd +="\u002d\u0020\u0044P\u0020"+_dae .DecodeParms .WriteString ()+"\u000a";};if _dae .Filter !=nil {_dbd +="\u002d\u0020\u0046\u0020"+_dae .Filter .WriteString ()+"\u000a";};if _dae .Height !=nil {_dbd +="\u002d\u0020\u0048\u0020"+_dae .Height .WriteString ()+"\u000a";
};if _dae .ImageMask !=nil {_dbd +="\u002d\u0020\u0049M\u0020"+_dae .ImageMask .WriteString ()+"\u000a";};if _dae .Intent !=nil {_dbd +="\u002d \u0049\u006e\u0074\u0065\u006e\u0074 "+_dae .Intent .WriteString ()+"\u000a";};if _dae .Interpolate !=nil {_dbd +="\u002d\u0020\u0049\u0020"+_dae .Interpolate .WriteString ()+"\u000a";
};if _dae .Width !=nil {_dbd +="\u002d\u0020\u0057\u0020"+_dae .Width .WriteString ()+"\u000a";};return _dbd ;};

// Add_TL appends 'TL' operand to the content stream:
// Set leading.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_eeg *ContentCreator )Add_TL (leading float64 )*ContentCreator {_cbd :=ContentStreamOperation {};_cbd .Operand ="\u0054\u004c";_cbd .Params =_daea ([]float64 {leading });_eeg ._eg =append (_eeg ._eg ,&_cbd );return _eeg ;};

// GetColorSpace returns the colorspace of the inline image.
func (_ced *ContentStreamInlineImage )GetColorSpace (resources *_ee .PdfPageResources )(_ee .PdfColorspace ,error ){if _ced .ColorSpace ==nil {_dc .Log .Debug ("\u0049\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u006e\u006f\u0074\u0020\u0068\u0061\u0076i\u006e\u0067\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065\u002c\u0020\u0061\u0073\u0073\u0075\u006di\u006e\u0067\u0020\u0047\u0072a\u0079");
return _ee .NewPdfColorspaceDeviceGray (),nil ;};if _bafc ,_fdd :=_ced .ColorSpace .(*_eaf .PdfObjectArray );_fdd {return _dggeb (_bafc );};_effa ,_ffe :=_ced .ColorSpace .(*_eaf .PdfObjectName );if !_ffe {_dc .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020I\u006e\u0076\u0061\u006c\u0069\u0064 \u006f\u0062\u006a\u0065\u0063\u0074\u0020t\u0079\u0070\u0065\u0020\u0028\u0025\u0054\u003b\u0025\u002bv\u0029",_ced .ColorSpace ,_ced .ColorSpace );
return nil ,_g .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if *_effa =="\u0047"||*_effa =="\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079"{return _ee .NewPdfColorspaceDeviceGray (),nil ;
}else if *_effa =="\u0052\u0047\u0042"||*_effa =="\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B"{return _ee .NewPdfColorspaceDeviceRGB (),nil ;}else if *_effa =="\u0043\u004d\u0059\u004b"||*_effa =="\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b"{return _ee .NewPdfColorspaceDeviceCMYK (),nil ;
}else if *_effa =="\u0049"||*_effa =="\u0049n\u0064\u0065\u0078\u0065\u0064"{return nil ,_g .New ("\u0075\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0049\u006e\u0064e\u0078 \u0063\u006f\u006c\u006f\u0072\u0073\u0070a\u0063\u0065");}else {if resources .ColorSpace ==nil {_dc .Log .Debug ("\u0045\u0072r\u006f\u0072\u002c\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065\u003a\u0020\u0025\u0073",*_effa );
return nil ,_g .New ("\u0075n\u006bn\u006f\u0077\u006e\u0020\u0063o\u006c\u006fr\u0073\u0070\u0061\u0063\u0065");};_bddc ,_bde :=resources .GetColorspaceByName (*_effa );if !_bde {_dc .Log .Debug ("\u0045\u0072r\u006f\u0072\u002c\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065\u003a\u0020\u0025\u0073",*_effa );
return nil ,_g .New ("\u0075n\u006bn\u006f\u0077\u006e\u0020\u0063o\u006c\u006fr\u0073\u0070\u0061\u0063\u0065");};return _bddc ,nil ;};};

// AddOperand adds a specified operand.
func (_ab *ContentCreator )AddOperand (op ContentStreamOperation )*ContentCreator {_ab ._eg =append (_ab ._eg ,&op );return _ab ;};

// Parse parses all commands in content stream, returning a list of operation data.
func (_cfabe *ContentStreamParser )Parse ()(*ContentStreamOperations ,error ){_gfg :=ContentStreamOperations {};for {_ebd :=ContentStreamOperation {};for {_dee ,_ffg ,_cdga :=_cfabe .parseObject ();if _cdga !=nil {if _cdga ==_ea .EOF {return &_gfg ,nil ;
};return &_gfg ,_cdga ;};if _ffg {_ebd .Operand ,_ =_eaf .GetStringVal (_dee );_gfg =append (_gfg ,&_ebd );break ;}else {_ebd .Params =append (_ebd .Params ,_dee );};};if _ebd .Operand =="\u0042\u0049"{_gebbf ,_aaab :=_cfabe .ParseInlineImage ();if _aaab !=nil {return &_gfg ,_aaab ;
};_ebd .Params =append (_ebd .Params ,_gebbf );};};};

// Add_ET appends 'ET' operand to the content stream:
// End text.
//
// See section 9.4 "Text Objects" and Table 107 (p. 256 PDF32000_2008).
func (_abff *ContentCreator )Add_ET ()*ContentCreator {_bdge :=ContentStreamOperation {};_bdge .Operand ="\u0045\u0054";_abff ._eg =append (_abff ._eg ,&_bdge );return _abff ;};var _bff =map[string ]struct{}{"\u0062":struct{}{},"\u0042":struct{}{},"\u0062\u002a":struct{}{},"\u0042\u002a":struct{}{},"\u0042\u0044\u0043":struct{}{},"\u0042\u0049":struct{}{},"\u0042\u004d\u0043":struct{}{},"\u0042\u0054":struct{}{},"\u0042\u0058":struct{}{},"\u0063":struct{}{},"\u0063\u006d":struct{}{},"\u0043\u0053":struct{}{},"\u0063\u0073":struct{}{},"\u0064":struct{}{},"\u0064\u0030":struct{}{},"\u0064\u0031":struct{}{},"\u0044\u006f":struct{}{},"\u0044\u0050":struct{}{},"\u0045\u0049":struct{}{},"\u0045\u004d\u0043":struct{}{},"\u0045\u0054":struct{}{},"\u0045\u0058":struct{}{},"\u0066":struct{}{},"\u0046":struct{}{},"\u0066\u002a":struct{}{},"\u0047":struct{}{},"\u0067":struct{}{},"\u0067\u0073":struct{}{},"\u0068":struct{}{},"\u0069":struct{}{},"\u0049\u0044":struct{}{},"\u006a":struct{}{},"\u004a":struct{}{},"\u004b":struct{}{},"\u006b":struct{}{},"\u006c":struct{}{},"\u006d":struct{}{},"\u004d":struct{}{},"\u004d\u0050":struct{}{},"\u006e":struct{}{},"\u0071":struct{}{},"\u0051":struct{}{},"\u0072\u0065":struct{}{},"\u0052\u0047":struct{}{},"\u0072\u0067":struct{}{},"\u0072\u0069":struct{}{},"\u0073":struct{}{},"\u0053":struct{}{},"\u0053\u0043":struct{}{},"\u0073\u0063":struct{}{},"\u0053\u0043\u004e":struct{}{},"\u0073\u0063\u006e":struct{}{},"\u0073\u0068":struct{}{},"\u0054\u002a":struct{}{},"\u0054\u0063":struct{}{},"\u0054\u0064":struct{}{},"\u0054\u0044":struct{}{},"\u0054\u0066":struct{}{},"\u0054\u006a":struct{}{},"\u0054\u004a":struct{}{},"\u0054\u004c":struct{}{},"\u0054\u006d":struct{}{},"\u0054\u0072":struct{}{},"\u0054\u0073":struct{}{},"\u0054\u0077":struct{}{},"\u0054\u007a":struct{}{},"\u0076":struct{}{},"\u0077":struct{}{},"\u0057":struct{}{},"\u0057\u002a":struct{}{},"\u0079":struct{}{},"\u0027":struct{}{},"\u0022":struct{}{}};


// NewContentStreamProcessor returns a new ContentStreamProcessor for operations `ops`.
func NewContentStreamProcessor (ops []*ContentStreamOperation )*ContentStreamProcessor {_ffb :=ContentStreamProcessor {};_ffb ._effc =GraphicStateStack {};_dgec :=GraphicsState {};_ffb ._edec =_dgec ;_ffb ._cfd =[]handlerEntry {};_ffb ._faae =0;_ffb ._gbebf =ops ;
return &_ffb ;};

// Add_cs appends 'cs' operand to the content stream:
// Same as CS but for non-stroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_ebaf *ContentCreator )Add_cs (name _eaf .PdfObjectName )*ContentCreator {_eaca :=ContentStreamOperation {};_eaca .Operand ="\u0063\u0073";_eaca .Params =_fcce ([]_eaf .PdfObjectName {name });_ebaf ._eg =append (_ebaf ._eg ,&_eaca );return _ebaf ;
};

// ContentCreator is a builder for PDF content streams.
type ContentCreator struct{_eg ContentStreamOperations };

// Add_Tr appends 'Tr' operand to the content stream:
// Set text rendering mode.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_eca *ContentCreator )Add_Tr (render int64 )*ContentCreator {_afb :=ContentStreamOperation {};_afb .Operand ="\u0054\u0072";_afb .Params =_abebd ([]int64 {render });_eca ._eg =append (_eca ._eg ,&_afb );return _eca ;};func (_gbea *ContentStreamProcessor )handleCommand_k (_dfa *ContentStreamOperation ,_gbcc *_ee .PdfPageResources )error {_fba :=_ee .NewPdfColorspaceDeviceCMYK ();
if len (_dfa .Params )!=_fba .GetNumComponents (){_dc .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_dc .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_dfa .Params ),_fba );return _g .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};_dbeb ,_fafd :=_fba .ColorFromPdfObjects (_dfa .Params );if _fafd !=nil {return _fafd ;};_gbea ._edec .ColorspaceNonStroking =_fba ;_gbea ._edec .ColorNonStroking =_dbeb ;return nil ;};

// Add_rg appends 'rg' operand to the content stream:
// Same as RG but used for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_bef *ContentCreator )Add_rg (r ,g ,b float64 )*ContentCreator {_gff :=ContentStreamOperation {};_gff .Operand ="\u0072\u0067";_gff .Params =_daea ([]float64 {r ,g ,b });_bef ._eg =append (_bef ._eg ,&_gff );return _bef ;};

// Add_Tw appends 'Tw' operand to the content stream:
// Set word spacing.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_gb *ContentCreator )Add_Tw (wordSpace float64 )*ContentCreator {_dcd :=ContentStreamOperation {};_dcd .Operand ="\u0054\u0077";_dcd .Params =_daea ([]float64 {wordSpace });_gb ._eg =append (_gb ._eg ,&_dcd );return _gb ;};func (_aaag *ContentStreamInlineImage )toImageBase (_cbg *_ee .PdfPageResources )(*_d .ImageBase ,error ){if _aaag ._eadc !=nil {return _aaag ._eadc ,nil ;
};_gbed :=_d .ImageBase {};if _aaag .Height ==nil {return nil ,_g .New ("\u0068e\u0069\u0067\u0068\u0074\u0020\u0061\u0074\u0074\u0072\u0069\u0062u\u0074\u0065\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067");};_ddaf ,_aaef :=_aaag .Height .(*_eaf .PdfObjectInteger );
if !_aaef {return nil ,_g .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0068e\u0069\u0067\u0068\u0074");};_gbed .Height =int (*_ddaf );if _aaag .Width ==nil {return nil ,_g .New ("\u0077\u0069\u0064th\u0020\u0061\u0074\u0074\u0072\u0069\u0062\u0075\u0074\u0065\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067");
};_fge ,_aaef :=_aaag .Width .(*_eaf .PdfObjectInteger );if !_aaef {return nil ,_g .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0077\u0069\u0064\u0074\u0068");};_gbed .Width =int (*_fge );_fegb ,_cgeg :=_aaag .IsMask ();if _cgeg !=nil {return nil ,_cgeg ;
};if _fegb {_gbed .BitsPerComponent =1;_gbed .ColorComponents =1;}else {if _aaag .BitsPerComponent ==nil {_dc .Log .Debug ("\u0049\u006el\u0069\u006e\u0065\u0020\u0042\u0069\u0074\u0073\u0020\u0070\u0065\u0072\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u0020\u002d\u0020\u0061\u0073\u0073\u0075\u006d\u0069\u006e\u0067\u0020\u0038");
_gbed .BitsPerComponent =8;}else {_dggf ,_efb :=_aaag .BitsPerComponent .(*_eaf .PdfObjectInteger );if !_efb {_dc .Log .Debug ("E\u0072\u0072\u006f\u0072\u0020\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0062\u0069\u0074\u0073 p\u0065\u0072\u0020\u0063o\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0020\u0076al\u0075\u0065,\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_aaag .BitsPerComponent );
return nil ,_g .New ("\u0042\u0050\u0043\u0020\u0054\u0079\u0070\u0065\u0020e\u0072\u0072\u006f\u0072");};_gbed .BitsPerComponent =int (*_dggf );};if _aaag .ColorSpace !=nil {_gdgd ,_faf :=_aaag .GetColorSpace (_cbg );if _faf !=nil {return nil ,_faf ;};
_gbed .ColorComponents =_gdgd .GetNumComponents ();}else {_dc .Log .Debug ("\u0049\u006el\u0069\u006e\u0065\u0020\u0049\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063e\u0020\u006e\u006f\u0074\u0020\u0073p\u0065\u0063\u0069\u0066\u0069\u0065\u0064\u0020\u002d\u0020\u0061\u0073\u0073\u0075m\u0069\u006eg\u0020\u0031\u0020\u0063o\u006c\u006f\u0072\u0020\u0063o\u006d\u0070\u006f\u006e\u0065\u006e\u0074");
_gbed .ColorComponents =1;};};if _eagg ,_fgb :=_eaf .GetArray (_aaag .Decode );_fgb {_gbed .Decode ,_cgeg =_eagg .ToFloat64Array ();if _cgeg !=nil {return nil ,_cgeg ;};};_aaag ._eadc =&_gbed ;return _aaag ._eadc ,nil ;};var _daa =_ce .MustCompile ("\u005e\u002f\u007b\u0032\u002c\u007d");


// Pop pops and returns the topmost GraphicsState off the `gsStack`.
func (_gcc *GraphicStateStack )Pop ()GraphicsState {_bag :=(*_gcc )[len (*_gcc )-1];*_gcc =(*_gcc )[:len (*_gcc )-1];return _bag ;};var (ErrInvalidOperand =_g .New ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");ErrEarlyExit =_g .New ("\u0074\u0065\u0072\u006di\u006e\u0061\u0074\u0065\u0020\u0070\u0072\u006f\u0063\u0065s\u0073 \u0065\u0061\u0072\u006c\u0079\u0020\u0065x\u0069\u0074");
);func (_dca *ContentStreamParser )parseArray ()(*_eaf .PdfObjectArray ,error ){_gdc :=_eaf .MakeArray ();_dca ._ccf .ReadByte ();for {_dca .skipSpaces ();_ecc ,_ebag :=_dca ._ccf .Peek (1);if _ebag !=nil {return _gdc ,_ebag ;};if _ecc [0]==']'{_dca ._ccf .ReadByte ();
break ;};_ebbb ,_ ,_ebag :=_dca .parseObject ();if _ebag !=nil {return _gdc ,_ebag ;};_gdc .Append (_ebbb );};return _gdc ,nil ;};func (_cfabg *ContentStreamParser )parseOperand ()(*_eaf .PdfObjectString ,error ){var _dgge []byte ;for {_ggeg ,_dbag :=_cfabg ._ccf .Peek (1);
if _dbag !=nil {return _eaf .MakeString (string (_dgge )),_dbag ;};if _eaf .IsDelimiter (_ggeg [0]){break ;};if _eaf .IsWhiteSpace (_ggeg [0]){break ;};_gcgb ,_ :=_cfabg ._ccf .ReadByte ();_dgge =append (_dgge ,_gcgb );};return _eaf .MakeString (string (_dgge )),nil ;
};

// Add_Ts appends 'Ts' operand to the content stream:
// Set text rise.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_ead *ContentCreator )Add_Ts (rise float64 )*ContentCreator {_bed :=ContentStreamOperation {};_bed .Operand ="\u0054\u0073";_bed .Params =_daea ([]float64 {rise });_ead ._eg =append (_ead ._eg ,&_bed );return _ead ;};

// ToImage exports the inline image to Image which can be transformed or exported easily.
// Page resources are needed to look up colorspace information.
func (_bgfc *ContentStreamInlineImage )ToImage (resources *_ee .PdfPageResources )(*_ee .Image ,error ){_efe ,_cggb :=_bgfc .toImageBase (resources );if _cggb !=nil {return nil ,_cggb ;};_cgce ,_cggb :=_bcc (_bgfc );if _cggb !=nil {return nil ,_cggb ;};
_bdec ,_gcf :=_eaf .GetDict (_bgfc .DecodeParms );if _gcf {_cgce .UpdateParams (_bdec );};_dc .Log .Trace ("\u0065n\u0063o\u0064\u0065\u0072\u003a\u0020\u0025\u002b\u0076\u0020\u0025\u0054",_cgce ,_cgce );_dc .Log .Trace ("\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065:\u0020\u0025\u002b\u0076",_bgfc );
_ebca ,_cggb :=_cgce .DecodeBytes (_bgfc ._gda );if _cggb !=nil {return nil ,_cggb ;};_ccc :=&_ee .Image {Width :int64 (_efe .Width ),Height :int64 (_efe .Height ),BitsPerComponent :int64 (_efe .BitsPerComponent ),ColorComponents :_efe .ColorComponents ,Data :_ebca };
if len (_efe .Decode )> 0{for _fcb :=0;_fcb < len (_efe .Decode );_fcb ++{_efe .Decode [_fcb ]*=float64 ((int (1)<<uint (_efe .BitsPerComponent ))-1);};_ccc .SetDecode (_efe .Decode );};return _ccc ,nil ;};

// Add_d adds 'd' operand to the content stream: Set the line dash pattern.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_fga *ContentCreator )Add_d (dashArray []int64 ,dashPhase int64 )*ContentCreator {_ege :=ContentStreamOperation {};_ege .Operand ="\u0064";_ege .Params =[]_eaf .PdfObject {};_ege .Params =append (_ege .Params ,_eaf .MakeArrayFromIntegers64 (dashArray ));
_ege .Params =append (_ege .Params ,_eaf .MakeInteger (dashPhase ));_fga ._eg =append (_fga ._eg ,&_ege );return _fga ;};const (HandlerConditionEnumOperand HandlerConditionEnum =iota ;HandlerConditionEnumAllOperands ;);

// Add_w adds 'w' operand to the content stream, which sets the line width.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_fab *ContentCreator )Add_w (lineWidth float64 )*ContentCreator {_cfeg :=ContentStreamOperation {};_cfeg .Operand ="\u0077";_cfeg .Params =_daea ([]float64 {lineWidth });_fab ._eg =append (_fab ._eg ,&_cfeg );return _fab ;};func _bcc (_cfbd *ContentStreamInlineImage )(_eaf .StreamEncoder ,error ){if _cfbd .Filter ==nil {return _eaf .NewRawEncoder (),nil ;
};_cab ,_eabf :=_cfbd .Filter .(*_eaf .PdfObjectName );if !_eabf {_feg ,_afca :=_cfbd .Filter .(*_eaf .PdfObjectArray );if !_afca {return nil ,_ga .Errorf ("\u0066\u0069\u006c\u0074\u0065\u0072 \u006e\u006f\u0074\u0020\u0061\u0020\u004e\u0061\u006d\u0065\u0020\u006f\u0072 \u0041\u0072\u0072\u0061\u0079\u0020\u006fb\u006a\u0065\u0063\u0074");
};if _feg .Len ()==0{return _eaf .NewRawEncoder (),nil ;};if _feg .Len ()!=1{_edc ,_cea :=_dda (_cfbd );if _cea !=nil {_dc .Log .Error ("\u0046\u0061\u0069\u006c\u0065\u0064 \u0063\u0072\u0065\u0061\u0074\u0069\u006e\u0067\u0020\u006d\u0075\u006c\u0074i\u0020\u0065\u006e\u0063\u006f\u0064\u0065r\u003a\u0020\u0025\u0076",_cea );
return nil ,_cea ;};_dc .Log .Trace ("\u004d\u0075\u006c\u0074\u0069\u0020\u0065\u006e\u0063:\u0020\u0025\u0073\u000a",_edc );return _edc ,nil ;};_eaff :=_feg .Get (0);_cab ,_afca =_eaff .(*_eaf .PdfObjectName );if !_afca {return nil ,_ga .Errorf ("\u0066\u0069l\u0074\u0065\u0072\u0020a\u0072\u0072a\u0079\u0020\u006d\u0065\u006d\u0062\u0065\u0072 \u006e\u006f\u0074\u0020\u0061\u0020\u004e\u0061\u006d\u0065\u0020\u006fb\u006a\u0065\u0063\u0074");
};};switch *_cab {case "\u0041\u0048\u0078","\u0041\u0053\u0043\u0049\u0049\u0048\u0065\u0078\u0044e\u0063\u006f\u0064\u0065":return _eaf .NewASCIIHexEncoder (),nil ;case "\u0041\u0038\u0035","\u0041\u0053\u0043\u0049\u0049\u0038\u0035\u0044\u0065\u0063\u006f\u0064\u0065":return _eaf .NewASCII85Encoder (),nil ;
case "\u0044\u0043\u0054","\u0044C\u0054\u0044\u0065\u0063\u006f\u0064e":return _cbb (_cfbd );case "\u0046\u006c","F\u006c\u0061\u0074\u0065\u0044\u0065\u0063\u006f\u0064\u0065":return _cag (_cfbd ,nil );case "\u004c\u005a\u0057","\u004cZ\u0057\u0044\u0065\u0063\u006f\u0064e":return _gffd (_cfbd ,nil );
case "\u0043\u0043\u0046","\u0043\u0043\u0049\u0054\u0054\u0046\u0061\u0078\u0044e\u0063\u006f\u0064\u0065":return _eaf .NewCCITTFaxEncoder (),nil ;case "\u0052\u004c","\u0052u\u006eL\u0065\u006e\u0067\u0074\u0068\u0044\u0065\u0063\u006f\u0064\u0065":return _eaf .NewRunLengthEncoder (),nil ;
default:_dc .Log .Debug ("\u0055\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065 \u0069\u006d\u0061\u0067\u0065\u0020\u0065n\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0066\u0069\u006c\u0074e\u0072\u0020\u006e\u0061\u006d\u0065\u0020\u003a\u0020\u0025\u0073",*_cab );
return nil ,_g .New ("\u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006el\u0069n\u0065 \u0065n\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u006d\u0065\u0074\u0068\u006f\u0064");};};func (_dgc *ContentStreamProcessor )handleCommand_RG (_bafca *ContentStreamOperation ,_eaa *_ee .PdfPageResources )error {_cbff :=_ee .NewPdfColorspaceDeviceRGB ();
if len (_bafca .Params )!=_cbff .GetNumComponents (){_dc .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020R\u0047");
_dc .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_bafca .Params ),_cbff );return _g .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};_bee ,_dfb :=_cbff .ColorFromPdfObjects (_bafca .Params );if _dfb !=nil {return _dfb ;};_dgc ._edec .ColorspaceStroking =_cbff ;_dgc ._edec .ColorStroking =_bee ;return nil ;};

// Add_l adds 'l' operand to the content stream:
// Append a straight line segment from the current point to (x,y).
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_bba *ContentCreator )Add_l (x ,y float64 )*ContentCreator {_cfege :=ContentStreamOperation {};_cfege .Operand ="\u006c";_cfege .Params =_daea ([]float64 {x ,y });_bba ._eg =append (_bba ._eg ,&_cfege );return _bba ;};

// ContentStreamOperation represents an operation in PDF contentstream which consists of
// an operand and parameters.
type ContentStreamOperation struct{Params []_eaf .PdfObject ;Operand string ;};

// RotateDeg applies a rotation to the transformation matrix.
func (_adf *ContentCreator )RotateDeg (angle float64 )*ContentCreator {_ggf :=_ed .Cos (angle *_ed .Pi /180.0);_cfe :=_ed .Sin (angle *_ed .Pi /180.0);_gefb :=-_ed .Sin (angle *_ed .Pi /180.0);_cfcf :=_ed .Cos (angle *_ed .Pi /180.0);return _adf .Add_cm (_ggf ,_cfe ,_gefb ,_cfcf ,0,0);
};

// Add_j adds 'j' operand to the content stream: Set the line join style (graphics state).
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_dga *ContentCreator )Add_j (lineJoinStyle string )*ContentCreator {_fad :=ContentStreamOperation {};_fad .Operand ="\u006a";_fad .Params =_fcce ([]_eaf .PdfObjectName {_eaf .PdfObjectName (lineJoinStyle )});_dga ._eg =append (_dga ._eg ,&_fad );
return _dga ;};func (_dff *ContentStreamProcessor )handleCommand_cm (_dec *ContentStreamOperation ,_eeba *_ee .PdfPageResources )error {if len (_dec .Params )!=6{_dc .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020\u0063\u006d\u003a\u0020\u0025\u0064",len (_dec .Params ));
return _g .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_efeg ,_ddf :=_eaf .GetNumbersAsFloat (_dec .Params );if _ddf !=nil {return _ddf ;
};_aabe :=_b .NewMatrix (_efeg [0],_efeg [1],_efeg [2],_efeg [3],_efeg [4],_efeg [5]);_dff ._edec .CTM .Concat (_aabe );return nil ;};

// String is same as Bytes() except returns as a string for convenience.
func (_aag *ContentCreator )String ()string {return string (_aag ._eg .Bytes ())};func (_gadga *ContentStreamParser )skipComments ()error {if _ ,_egb :=_gadga .skipSpaces ();_egb !=nil {return _egb ;};_gcg :=true ;for {_gffc ,_bcf :=_gadga ._ccf .Peek (1);
if _bcf !=nil {_dc .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_bcf .Error ());return _bcf ;};if _gcg &&_gffc [0]!='%'{return nil ;};_gcg =false ;if (_gffc [0]!='\r')&&(_gffc [0]!='\n'){_gadga ._ccf .ReadByte ();}else {break ;};};return _gadga .skipComments ();
};

// Add_sh appends 'sh' operand to the content stream:
// Paints the shape and colour shading described by a shading dictionary specified by `name`,
// subject to the current clipping path
//
// See section 8.7.4 "Shading Patterns" and Table 77 (p. 190 PDF32000_2008).
func (_ecg *ContentCreator )Add_sh (name _eaf .PdfObjectName )*ContentCreator {_ffde :=ContentStreamOperation {};_ffde .Operand ="\u0073\u0068";_ffde .Params =_fcce ([]_eaf .PdfObjectName {name });_ecg ._eg =append (_ecg ._eg ,&_ffde );return _ecg ;};func (_caee *ContentStreamParser )parseNumber ()(_eaf .PdfObject ,error ){return _eaf .ParseNumber (_caee ._ccf );
};func _cag (_eda *ContentStreamInlineImage ,_gae *_eaf .PdfObjectDictionary )(*_eaf .FlateEncoder ,error ){_fedc :=_eaf .NewFlateEncoder ();if _eda ._eadc !=nil {_fedc .SetImage (_eda ._eadc );};if _gae ==nil {_dcc :=_eda .DecodeParms ;if _dcc !=nil {_gebb ,_acfd :=_eaf .GetDict (_dcc );
if !_acfd {_dc .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073\u0020n\u006f\u0074\u0020\u0061\u0020\u0064\u0069\u0063\u0074\u0069on\u0061\u0072\u0079 \u0028%\u0054\u0029",_dcc );return nil ,_ga .Errorf ("\u0069\u006e\u0076\u0061li\u0064\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073");
};_gae =_gebb ;};};if _gae ==nil {return _fedc ,nil ;};_dc .Log .Trace ("\u0064\u0065\u0063\u006f\u0064\u0065\u0020\u0070\u0061\u0072\u0061\u006ds\u003a\u0020\u0025\u0073",_gae .String ());_dge :=_gae .Get ("\u0050r\u0065\u0064\u0069\u0063\u0074\u006fr");
if _dge ==nil {_dc .Log .Debug ("E\u0072\u0072o\u0072\u003a\u0020\u0050\u0072\u0065\u0064\u0069\u0063\u0074\u006f\u0072\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067 \u0066\u0072\u006f\u006d\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073 \u002d\u0020\u0043\u006f\u006e\u0074\u0069\u006e\u0075\u0065\u0020\u0077\u0069t\u0068\u0020\u0064\u0065\u0066\u0061\u0075\u006c\u0074\u0020\u00281\u0029");
}else {_abbg ,_acba :=_dge .(*_eaf .PdfObjectInteger );if !_acba {_dc .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0050\u0072\u0065d\u0069\u0063\u0074\u006f\u0072\u0020\u0073pe\u0063\u0069\u0066\u0069e\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u006f\u0074 n\u0075\u006de\u0072\u0069\u0063\u0020\u0028\u0025\u0054\u0029",_dge );
return nil ,_ga .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0072\u0065\u0064i\u0063\u0074\u006f\u0072");};_fedc .Predictor =int (*_abbg );};_dge =_gae .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");
if _dge !=nil {_gffb ,_cgb :=_dge .(*_eaf .PdfObjectInteger );if !_cgb {_dc .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0049n\u0076\u0061\u006c\u0069\u0064\u0020\u0042i\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");
return nil ,_ga .Errorf ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020\u0042\u0069\u0074\u0073\u0050e\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");};_fedc .BitsPerComponent =int (*_gffb );};if _fedc .Predictor > 1{_fedc .Columns =1;_dge =_gae .Get ("\u0043o\u006c\u0075\u006d\u006e\u0073");
if _dge !=nil {_gaab ,_bebg :=_dge .(*_eaf .PdfObjectInteger );if !_bebg {return nil ,_ga .Errorf ("\u0070r\u0065\u0064\u0069\u0063\u0074\u006f\u0072\u0020\u0063\u006f\u006cu\u006d\u006e\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064");};_fedc .Columns =int (*_gaab );
};_fedc .Colors =1;_fce :=_gae .Get ("\u0043\u006f\u006c\u006f\u0072\u0073");if _fce !=nil {_ggca ,_bga :=_fce .(*_eaf .PdfObjectInteger );if !_bga {return nil ,_ga .Errorf ("\u0070\u0072\u0065d\u0069\u0063\u0074\u006fr\u0020\u0063\u006f\u006c\u006f\u0072\u0073 \u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072");
};_fedc .Colors =int (*_ggca );};};return _fedc ,nil ;};func (_gbf *ContentStreamProcessor )handleCommand_SCN (_adb *ContentStreamOperation ,_dbcf *_ee .PdfPageResources )error {_gbdga :=_gbf ._edec .ColorspaceStroking ;if !_gecbc (_gbdga ){if len (_adb .Params )!=_gbdga .GetNumComponents (){_dc .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_dc .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_adb .Params ),_gbdga );return _g .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};};_eddg ,_bcda :=_gbdga .ColorFromPdfObjects (_adb .Params );if _bcda !=nil {return _bcda ;};_gbf ._edec .ColorStroking =_eddg ;return nil ;};func _cbb (_cdf *ContentStreamInlineImage )(*_eaf .DCTEncoder ,error ){_cfee :=_eaf .NewDCTEncoder ();_egf :=_fg .NewReader (_cdf ._gda );
_cgef ,_gbd :=_gg .DecodeConfig (_egf );if _gbd !=nil {_dc .Log .Debug ("\u0045\u0072\u0072or\u0020\u0064\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0066\u0069\u006c\u0065\u003a\u0020\u0025\u0073",_gbd );return nil ,_gbd ;};switch _cgef .ColorModel {case _fc .RGBAModel :_cfee .BitsPerComponent =8;
_cfee .ColorComponents =3;case _fc .RGBA64Model :_cfee .BitsPerComponent =16;_cfee .ColorComponents =3;case _fc .GrayModel :_cfee .BitsPerComponent =8;_cfee .ColorComponents =1;case _fc .Gray16Model :_cfee .BitsPerComponent =16;_cfee .ColorComponents =1;
case _fc .CMYKModel :_cfee .BitsPerComponent =8;_cfee .ColorComponents =4;case _fc .YCbCrModel :_cfee .BitsPerComponent =8;_cfee .ColorComponents =3;default:return nil ,_g .New ("\u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u006d\u006f\u0064\u0065\u006c");
};_cfee .Width =_cgef .Width ;_cfee .Height =_cgef .Height ;_dc .Log .Trace ("\u0044\u0043T\u0020\u0045\u006ec\u006f\u0064\u0065\u0072\u003a\u0020\u0025\u002b\u0076",_cfee );return _cfee ,nil ;};

// Add_n appends 'n' operand to the content stream:
// End the path without filling or stroking.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_fbb *ContentCreator )Add_n ()*ContentCreator {_aae :=ContentStreamOperation {};_aae .Operand ="\u006e";_fbb ._eg =append (_fbb ._eg ,&_aae );return _fbb ;};func _abebd (_cegf []int64 )[]_eaf .PdfObject {var _eafge []_eaf .PdfObject ;for _ ,_ccgf :=range _cegf {_eafge =append (_eafge ,_eaf .MakeInteger (_ccgf ));
};return _eafge ;};

// Translate applies a simple x-y translation to the transformation matrix.
func (_eed *ContentCreator )Translate (tx ,ty float64 )*ContentCreator {return _eed .Add_cm (1,0,0,1,tx ,ty );};

// Add_BDC appends 'BDC' operand to the content stream:
// Begins a marked-content sequence with an associated property list terminated by a balancing EMC operator.
// `tag` shall be a name object indicating the role or significance of
// the sequence.
// `propertyList` shall be a dictionary containing the properties of the
//
// See section 14.6 "Marked Content" and Table 320 (p. 561 PDF32000_2008).
func (_gagd *ContentCreator )Add_BDC (tag _eaf .PdfObjectName ,propertyList map[string ]_eaf .PdfObject )*ContentCreator {_fcc :=ContentStreamOperation {};_fcc .Operand ="\u0042\u0044\u0043";_fcc .Params =_fcce ([]_eaf .PdfObjectName {tag });if len (propertyList )> 0{_fcc .Params =append (_fcc .Params ,_eaf .MakeDictMap (propertyList ));
};_gagd ._eg =append (_gagd ._eg ,&_fcc );return _gagd ;};

// Operations returns the list of operations.
func (_cef *ContentCreator )Operations ()*ContentStreamOperations {return &_cef ._eg };

// Operand returns true if `hce` is equivalent to HandlerConditionEnumOperand.
func (_cbc HandlerConditionEnum )Operand ()bool {return _cbc ==HandlerConditionEnumOperand };

// Add_G appends 'G' operand to the content stream:
// Set the stroking colorspace to DeviceGray and sets the gray level (0-1).
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_eged *ContentCreator )Add_G (gray float64 )*ContentCreator {_dd :=ContentStreamOperation {};_dd .Operand ="\u0047";_dd .Params =_daea ([]float64 {gray });_eged ._eg =append (_eged ._eg ,&_dd );return _eged ;};

// Add_SC appends 'SC' operand to the content stream:
// Set color for stroking operations.  Input: c1, ..., cn.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_dgb *ContentCreator )Add_SC (c ...float64 )*ContentCreator {_bea :=ContentStreamOperation {};_bea .Operand ="\u0053\u0043";_bea .Params =_daea (c );_dgb ._eg =append (_dgb ._eg ,&_bea );return _dgb ;};func (_fcf *ContentStreamProcessor )handleCommand_G (_ccbc *ContentStreamOperation ,_gdcd *_ee .PdfPageResources )error {_cbbaf :=_ee .NewPdfColorspaceDeviceGray ();
if len (_ccbc .Params )!=_cbbaf .GetNumComponents (){_dc .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_dc .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_ccbc .Params ),_cbbaf );return _g .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};_gea ,_dbace :=_cbbaf .ColorFromPdfObjects (_ccbc .Params );if _dbace !=nil {return _dbace ;};_fcf ._edec .ColorspaceStroking =_cbbaf ;_fcf ._edec .ColorStroking =_gea ;return nil ;};

// ContentStreamInlineImage is a representation of an inline image in a Content stream. Everything between the BI and EI operands.
// ContentStreamInlineImage implements the core.PdfObject interface although strictly it is not a PDF object.
type ContentStreamInlineImage struct{BitsPerComponent _eaf .PdfObject ;ColorSpace _eaf .PdfObject ;Decode _eaf .PdfObject ;DecodeParms _eaf .PdfObject ;Filter _eaf .PdfObject ;Height _eaf .PdfObject ;ImageMask _eaf .PdfObject ;Intent _eaf .PdfObject ;Interpolate _eaf .PdfObject ;
Width _eaf .PdfObject ;_gda []byte ;_eadc *_d .ImageBase ;};

// GraphicsState is a basic graphics state implementation for PDF processing.
// Initially only implementing and tracking a portion of the information specified. Easy to add more.
type GraphicsState struct{ColorspaceStroking _ee .PdfColorspace ;ColorspaceNonStroking _ee .PdfColorspace ;ColorStroking _ee .PdfColor ;ColorNonStroking _ee .PdfColor ;CTM _b .Matrix ;};func _gecbc (_dcgc _ee .PdfColorspace )bool {_ ,_eae :=_dcgc .(*_ee .PdfColorspaceSpecialPattern );
return _eae ;};

// Add_f_starred appends 'f*' operand to the content stream.
// f*: Fill the path using the even-odd rule to determine fill region.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_ega *ContentCreator )Add_f_starred ()*ContentCreator {_dbb :=ContentStreamOperation {};_dbb .Operand ="\u0066\u002a";_ega ._eg =append (_ega ._eg ,&_dbb );return _ega ;};func _dggeb (_dabd _eaf .PdfObject )(_ee .PdfColorspace ,error ){_cfeea ,_baddg :=_dabd .(*_eaf .PdfObjectArray );
if !_baddg {_dc .Log .Debug ("\u0045r\u0072\u006fr\u003a\u0020\u0049\u006ev\u0061\u006c\u0069d\u0020\u0069\u006e\u0064\u0065\u0078\u0065\u0064\u0020cs\u0020\u006e\u006ft\u0020\u0069n\u0020\u0061\u0072\u0072\u0061\u0079 \u0028\u0025#\u0076\u0029",_dabd );
return nil ,_g .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if _cfeea .Len ()!=4{_dc .Log .Debug ("\u0045\u0072\u0072\u006f\u0072:\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061r\u0072\u0061\u0079\u002c\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u0021\u003d\u0020\u0034\u0020\u0028\u0025\u0064\u0029",_cfeea .Len ());
return nil ,_g .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");};_daeaa ,_baddg :=_cfeea .Get (0).(*_eaf .PdfObjectName );if !_baddg {_dc .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0066\u0069\u0072s\u0074 \u0065\u006c\u0065\u006de\u006e\u0074 \u006e\u006f\u0074\u0020\u0061\u0020\u006e\u0061\u006d\u0065\u0020\u0028\u0061\u0072\u0072\u0061\u0079\u003a\u0020\u0025\u0023\u0076\u0029",*_cfeea );
return nil ,_g .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if *_daeaa !="\u0049"&&*_daeaa !="\u0049n\u0064\u0065\u0078\u0065\u0064"{_dc .Log .Debug ("\u0045\u0072r\u006f\u0072\u003a\u0020\u0049n\u0076\u0061\u006c\u0069\u0064 \u0063\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0021\u003d\u0020\u0049\u0020\u0028\u0067\u006f\u0074\u003a\u0020\u0025\u0076\u0029",*_daeaa );
return nil ,_g .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");};_daeaa ,_baddg =_cfeea .Get (1).(*_eaf .PdfObjectName );if !_baddg {_dc .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0032\u006e\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u006e\u0061\u006d\u0065\u0020\u0028\u0061\u0072\u0072a\u0079\u003a\u0020\u0025\u0023v\u0029",*_cfeea );
return nil ,_g .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if *_daeaa !="\u0047"&&*_daeaa !="\u0052\u0047\u0042"&&*_daeaa !="\u0043\u004d\u0059\u004b"&&*_daeaa !="\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079"&&*_daeaa !="\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B"&&*_daeaa !="\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b"{_dc .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0032\u006e\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0021\u003d\u0020\u0047\u002f\u0052\u0047\u0042\u002f\u0043\u004d\u0059\u004b\u0020\u0028g\u006f\u0074\u003a\u0020\u0025v\u0029",*_daeaa );
return nil ,_g .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");};_gbg :="";switch *_daeaa {case "\u0047","\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079":_gbg ="\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079";
case "\u0052\u0047\u0042","\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B":_gbg ="\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B";case "\u0043\u004d\u0059\u004b","\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b":_gbg ="\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b";
};_cda :=_eaf .MakeArray (_eaf .MakeName ("\u0049n\u0064\u0065\u0078\u0065\u0064"),_eaf .MakeName (_gbg ),_cfeea .Get (2),_cfeea .Get (3));return _ee .NewPdfColorspaceFromPdfObject (_cda );};

// Add_CS appends 'CS' operand to the content stream:
// Set the current colorspace for stroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_ggee *ContentCreator )Add_CS (name _eaf .PdfObjectName )*ContentCreator {_bdg :=ContentStreamOperation {};_bdg .Operand ="\u0043\u0053";_bdg .Params =_fcce ([]_eaf .PdfObjectName {name });_ggee ._eg =append (_ggee ._eg ,&_bdg );return _ggee ;};