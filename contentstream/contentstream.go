//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package contentstream provides functionality for parsing and creating content streams for PDF files.
//
// For processing and manipulating content streams, it allows parse the content stream into a list of
// operands that can then be processed further for rendering or extraction of information.
// The ContentStreamProcessor offers a basic engine for processing the content stream and can be used
// to render or modify the contents.
//
// For creating content streams, see NewContentCreator.  It allows adding multiple operands and then can
// be converted to a string for embedding in a PDF file.
//
// The contentstream package uses the core and model packages.
package contentstream ;import (_ce "bufio";_db "bytes";_cb "encoding/hex";_g "errors";_ec "fmt";_bc "github.com/unidoc/unipdf/v3/common";_f "github.com/unidoc/unipdf/v3/core";_bb "github.com/unidoc/unipdf/v3/internal/imageutil";_ece "github.com/unidoc/unipdf/v3/internal/transform";
_ba "github.com/unidoc/unipdf/v3/model";_e "image/color";_bd "image/jpeg";_gd "io";_ed "math";_b "regexp";_d "strconv";);

// Add_SCN appends 'SCN' operand to the content stream:
// Same as SC but supports more colorspaces.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_daea *ContentCreator )Add_SCN (c ...float64 )*ContentCreator {_aef :=ContentStreamOperation {};_aef .Operand ="\u0053\u0043\u004e";_aef .Params =_adcg (c );_daea ._ag =append (_daea ._ag ,&_aef );return _daea ;};func (_cacc *ContentStreamParser )skipComments ()error {if _ ,_dgda :=_cacc .skipSpaces ();
_dgda !=nil {return _dgda ;};_cbbd :=true ;for {_abd ,_acc :=_cacc ._egfe .Peek (1);if _acc !=nil {_bc .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_acc .Error ());return _acc ;};if _cbbd &&_abd [0]!='%'{return nil ;};_cbbd =false ;if (_abd [0]!='\r')&&(_abd [0]!='\n'){_cacc ._egfe .ReadByte ();
}else {break ;};};return _cacc .skipComments ();};

// Add_y appends 'y' operand to the content stream: Append a Bezier curve to the current path from the
// current point to (x3,y3) with (x1, y1) and (x3,y3) as control points.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_dg *ContentCreator )Add_y (x1 ,y1 ,x3 ,y3 float64 )*ContentCreator {_dde :=ContentStreamOperation {};_dde .Operand ="\u0079";_dde .Params =_adcg ([]float64 {x1 ,y1 ,x3 ,y3 });_dg ._ag =append (_dg ._ag ,&_dde );return _dg ;};

// Add_J adds 'J' operand to the content stream: Set the line cap style (graphics state).
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_eg *ContentCreator )Add_J (lineCapStyle string )*ContentCreator {_ac :=ContentStreamOperation {};_ac .Operand ="\u004a";_ac .Params =_aefe ([]_f .PdfObjectName {_f .PdfObjectName (lineCapStyle )});_eg ._ag =append (_eg ._ag ,&_ac );return _eg ;};


// Add_h appends 'h' operand to the content stream:
// Close the current subpath by adding a line between the current position and the starting position.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_ga *ContentCreator )Add_h ()*ContentCreator {_eefg :=ContentStreamOperation {};_eefg .Operand ="\u0068";_ga ._ag =append (_ga ._ag ,&_eefg );return _ga ;};

// Add_w adds 'w' operand to the content stream, which sets the line width.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_efd *ContentCreator )Add_w (lineWidth float64 )*ContentCreator {_aba :=ContentStreamOperation {};_aba .Operand ="\u0077";_aba .Params =_adcg ([]float64 {lineWidth });_efd ._ag =append (_efd ._ag ,&_aba );return _efd ;};

// Scale applies x-y scaling to the transformation matrix.
func (_eaa *ContentCreator )Scale (sx ,sy float64 )*ContentCreator {return _eaa .Add_cm (sx ,0,0,sy ,0,0);};func (_ffdf *ContentStreamProcessor )handleCommand_G (_bbee *ContentStreamOperation ,_fcg *_ba .PdfPageResources )error {_geecb :=_ba .NewPdfColorspaceDeviceGray ();
if len (_bbee .Params )!=_geecb .GetNumComponents (){_bc .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_bc .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_bbee .Params ),_geecb );return _g .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};_acgc ,_efdcd :=_geecb .ColorFromPdfObjects (_bbee .Params );if _efdcd !=nil {return _efdcd ;};_ffdf ._eeeb .ColorspaceStroking =_geecb ;_ffdf ._eeeb .ColorStroking =_acgc ;return nil ;};

// Add_CS appends 'CS' operand to the content stream:
// Set the current colorspace for stroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_bdf *ContentCreator )Add_CS (name _f .PdfObjectName )*ContentCreator {_dcca :=ContentStreamOperation {};_dcca .Operand ="\u0043\u0053";_dcca .Params =_aefe ([]_f .PdfObjectName {name });_bdf ._ag =append (_bdf ._ag ,&_dcca );return _bdf ;};type handlerEntry struct{Condition HandlerConditionEnum ;
Operand string ;Handler HandlerFunc ;};

// Add_ri adds 'ri' operand to the content stream, which sets the color rendering intent.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_fbb *ContentCreator )Add_ri (intent _f .PdfObjectName )*ContentCreator {_be :=ContentStreamOperation {};_be .Operand ="\u0072\u0069";_be .Params =_aefe ([]_f .PdfObjectName {intent });_fbb ._ag =append (_fbb ._ag ,&_be );return _fbb ;};func _aefe (_ecgca []_f .PdfObjectName )[]_f .PdfObject {var _ggea []_f .PdfObject ;
for _ ,_fgaf :=range _ecgca {_ggea =append (_ggea ,_f .MakeName (string (_fgaf )));};return _ggea ;};

// Add_Tm appends 'Tm' operand to the content stream:
// Set the text line matrix.
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_bbbe *ContentCreator )Add_Tm (a ,b ,c ,d ,e ,f float64 )*ContentCreator {_dga :=ContentStreamOperation {};_dga .Operand ="\u0054\u006d";_dga .Params =_adcg ([]float64 {a ,b ,c ,d ,e ,f });_bbbe ._ag =append (_bbbe ._ag ,&_dga );return _bbbe ;};

// ContentStreamOperations is a slice of ContentStreamOperations.
type ContentStreamOperations []*ContentStreamOperation ;

// Add_S appends 'S' operand to the content stream: Stroke the path.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_eeb *ContentCreator )Add_S ()*ContentCreator {_bef :=ContentStreamOperation {};_bef .Operand ="\u0053";_eeb ._ag =append (_eeb ._ag ,&_bef );return _eeb ;};

// ContentCreator is a builder for PDF content streams.
type ContentCreator struct{_ag ContentStreamOperations };

// All returns true if `hce` is equivalent to HandlerConditionEnumAllOperands.
func (_gggf HandlerConditionEnum )All ()bool {return _gggf ==HandlerConditionEnumAllOperands };

// Add_gs adds 'gs' operand to the content stream: Set the graphics state.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_cbe *ContentCreator )Add_gs (dictName _f .PdfObjectName )*ContentCreator {_efb :=ContentStreamOperation {};_efb .Operand ="\u0067\u0073";_efb .Params =_aefe ([]_f .PdfObjectName {dictName });_cbe ._ag =append (_cbe ._ag ,&_efb );return _cbe ;};

// Bytes converts a set of content stream operations to a content stream byte presentation,
// i.e. the kind that can be stored as a PDF stream or string format.
func (_a *ContentStreamOperations )Bytes ()[]byte {var _gf _db .Buffer ;for _ ,_dfa :=range *_a {if _dfa ==nil {continue ;};if _dfa .Operand =="\u0042\u0049"{_gf .WriteString (_dfa .Operand +"\u000a");_gf .WriteString (_dfa .Params [0].WriteString ());
}else {for _ ,_ea :=range _dfa .Params {_gf .WriteString (_ea .WriteString ());_gf .WriteString ("\u0020");};_gf .WriteString (_dfa .Operand +"\u000a");};};return _gf .Bytes ();};

// Add_Q adds 'Q' operand to the content stream: Pops the most recently stored state from the stack.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_agb *ContentCreator )Add_Q ()*ContentCreator {_bbb :=ContentStreamOperation {};_bbb .Operand ="\u0051";_agb ._ag =append (_agb ._ag ,&_bbb );return _agb ;};func _deda (_bcbd *ContentStreamInlineImage )(_f .StreamEncoder ,error ){if _bcbd .Filter ==nil {return _f .NewRawEncoder (),nil ;
};_acg ,_gda :=_bcbd .Filter .(*_f .PdfObjectName );if !_gda {_gdd ,_eaf :=_bcbd .Filter .(*_f .PdfObjectArray );if !_eaf {return nil ,_ec .Errorf ("\u0066\u0069\u006c\u0074\u0065\u0072 \u006e\u006f\u0074\u0020\u0061\u0020\u004e\u0061\u006d\u0065\u0020\u006f\u0072 \u0041\u0072\u0072\u0061\u0079\u0020\u006fb\u006a\u0065\u0063\u0074");
};if _gdd .Len ()==0{return _f .NewRawEncoder (),nil ;};if _gdd .Len ()!=1{_dbg ,_deg :=_ace (_bcbd );if _deg !=nil {_bc .Log .Error ("\u0046\u0061\u0069\u006c\u0065\u0064 \u0063\u0072\u0065\u0061\u0074\u0069\u006e\u0067\u0020\u006d\u0075\u006c\u0074i\u0020\u0065\u006e\u0063\u006f\u0064\u0065r\u003a\u0020\u0025\u0076",_deg );
return nil ,_deg ;};_bc .Log .Trace ("\u004d\u0075\u006c\u0074\u0069\u0020\u0065\u006e\u0063:\u0020\u0025\u0073\u000a",_dbg );return _dbg ,nil ;};_gde :=_gdd .Get (0);_acg ,_eaf =_gde .(*_f .PdfObjectName );if !_eaf {return nil ,_ec .Errorf ("\u0066\u0069l\u0074\u0065\u0072\u0020a\u0072\u0072a\u0079\u0020\u006d\u0065\u006d\u0062\u0065\u0072 \u006e\u006f\u0074\u0020\u0061\u0020\u004e\u0061\u006d\u0065\u0020\u006fb\u006a\u0065\u0063\u0074");
};};switch *_acg {case "\u0041\u0048\u0078","\u0041\u0053\u0043\u0049\u0049\u0048\u0065\u0078\u0044e\u0063\u006f\u0064\u0065":return _f .NewASCIIHexEncoder (),nil ;case "\u0041\u0038\u0035","\u0041\u0053\u0043\u0049\u0049\u0038\u0035\u0044\u0065\u0063\u006f\u0064\u0065":return _f .NewASCII85Encoder (),nil ;
case "\u0044\u0043\u0054","\u0044C\u0054\u0044\u0065\u0063\u006f\u0064e":return _ceg (_bcbd );case "\u0046\u006c","F\u006c\u0061\u0074\u0065\u0044\u0065\u0063\u006f\u0064\u0065":return _baa (_bcbd ,nil );case "\u004c\u005a\u0057","\u004cZ\u0057\u0044\u0065\u0063\u006f\u0064e":return _cae (_bcbd ,nil );
case "\u0043\u0043\u0046","\u0043\u0043\u0049\u0054\u0054\u0046\u0061\u0078\u0044e\u0063\u006f\u0064\u0065":return _f .NewCCITTFaxEncoder (),nil ;case "\u0052\u004c","\u0052u\u006eL\u0065\u006e\u0067\u0074\u0068\u0044\u0065\u0063\u006f\u0064\u0065":return _f .NewRunLengthEncoder (),nil ;
default:_bc .Log .Debug ("\u0055\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065 \u0069\u006d\u0061\u0067\u0065\u0020\u0065n\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0066\u0069\u006c\u0074e\u0072\u0020\u006e\u0061\u006d\u0065\u0020\u003a\u0020\u0025\u0073",*_acg );
return nil ,_g .New ("\u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006el\u0069n\u0065 \u0065n\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u006d\u0065\u0074\u0068\u006f\u0064");};};

// Add_EMC appends 'EMC' operand to the content stream:
// Ends a marked-content sequence.
//
// See section 14.6 "Marked Content" and Table 320 (p. 561 PDF32000_2008).
func (_bcdf *ContentCreator )Add_EMC ()*ContentCreator {_ege :=ContentStreamOperation {};_ege .Operand ="\u0045\u004d\u0043";_bcdf ._ag =append (_bcdf ._ag ,&_ege );return _bcdf ;};

// Add_Tstar appends 'T*' operand to the content stream:
// Move to the start of next line.
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_fcc *ContentCreator )Add_Tstar ()*ContentCreator {_ggfd :=ContentStreamOperation {};_ggfd .Operand ="\u0054\u002a";_fcc ._ag =append (_fcc ._ag ,&_ggfd );return _fcc ;};

// ContentStreamParser represents a content stream parser for parsing content streams in PDFs.
type ContentStreamParser struct{_egfe *_ce .Reader };func (_fccd *ContentStreamProcessor )handleCommand_SCN (_gag *ContentStreamOperation ,_gbad *_ba .PdfPageResources )error {_befe :=_fccd ._eeeb .ColorspaceStroking ;if !_agg (_befe ){if len (_gag .Params )!=_befe .GetNumComponents (){_bc .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_bc .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_gag .Params ),_befe );return _g .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};};_bcfg ,_ebfe :=_befe .ColorFromPdfObjects (_gag .Params );if _ebfe !=nil {return _ebfe ;};_fccd ._eeeb .ColorStroking =_bcfg ;return nil ;};func (_gbg *ContentStreamParser )parseDict ()(*_f .PdfObjectDictionary ,error ){_bc .Log .Trace ("\u0052\u0065\u0061\u0064i\u006e\u0067\u0020\u0063\u006f\u006e\u0074\u0065\u006e\u0074 \u0073t\u0072\u0065\u0061\u006d\u0020\u0064\u0069c\u0074\u0021");
_fegg :=_f .MakeDict ();_cfa ,_ :=_gbg ._egfe .ReadByte ();if _cfa !='<'{return nil ,_g .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074");};_cfa ,_ =_gbg ._egfe .ReadByte ();if _cfa !='<'{return nil ,_g .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074");
};for {_gbg .skipSpaces ();_dedb ,_ggfdb :=_gbg ._egfe .Peek (2);if _ggfdb !=nil {return nil ,_ggfdb ;};_bc .Log .Trace ("D\u0069c\u0074\u0020\u0070\u0065\u0065\u006b\u003a\u0020%\u0073\u0020\u0028\u0025 x\u0029\u0021",string (_dedb ),string (_dedb ));
if (_dedb [0]=='>')&&(_dedb [1]=='>'){_bc .Log .Trace ("\u0045\u004f\u0046\u0020\u0064\u0069\u0063\u0074\u0069o\u006e\u0061\u0072\u0079");_gbg ._egfe .ReadByte ();_gbg ._egfe .ReadByte ();break ;};_bc .Log .Trace ("\u0050a\u0072s\u0065\u0020\u0074\u0068\u0065\u0020\u006e\u0061\u006d\u0065\u0021");
_fbdd ,_ggfdb :=_gbg .parseName ();_bc .Log .Trace ("\u004be\u0079\u003a\u0020\u0025\u0073",_fbdd );if _ggfdb !=nil {_bc .Log .Debug ("E\u0052\u0052\u004f\u0052\u0020\u0052e\u0074\u0075\u0072\u006e\u0069\u006e\u0067\u0020\u006ea\u006d\u0065\u0020e\u0072r\u0020\u0025\u0073",_ggfdb );
return nil ,_ggfdb ;};if len (_fbdd )> 4&&_fbdd [len (_fbdd )-4:]=="\u006e\u0075\u006c\u006c"{_ebbb :=_fbdd [0:len (_fbdd )-4];_bc .Log .Trace ("\u0054\u0061\u006b\u0069n\u0067\u0020\u0063\u0061\u0072\u0065\u0020\u006f\u0066\u0020n\u0075l\u006c\u0020\u0062\u0075\u0067\u0020\u0028%\u0073\u0029",_fbdd );
_bc .Log .Trace ("\u004e\u0065\u0077\u0020ke\u0079\u0020\u0022\u0025\u0073\u0022\u0020\u003d\u0020\u006e\u0075\u006c\u006c",_ebbb );_gbg .skipSpaces ();_adf ,_ :=_gbg ._egfe .Peek (1);if _adf [0]=='/'{_fegg .Set (_ebbb ,_f .MakeNull ());continue ;};};_gbg .skipSpaces ();
_eefee ,_ ,_ggfdb :=_gbg .parseObject ();if _ggfdb !=nil {return nil ,_ggfdb ;};_fegg .Set (_fbdd ,_eefee );_bc .Log .Trace ("\u0064\u0069\u0063\u0074\u005b\u0025\u0073\u005d\u0020\u003d\u0020\u0025\u0073",_fbdd ,_eefee .String ());};return _fegg ,nil ;
};var _adca =_b .MustCompile ("\u005e\u002f\u007b\u0032\u002c\u007d");

// ContentStreamInlineImage is a representation of an inline image in a Content stream. Everything between the BI and EI operands.
// ContentStreamInlineImage implements the core.PdfObject interface although strictly it is not a PDF object.
type ContentStreamInlineImage struct{BitsPerComponent _f .PdfObject ;ColorSpace _f .PdfObject ;Decode _f .PdfObject ;DecodeParms _f .PdfObject ;Filter _f .PdfObject ;Height _f .PdfObject ;ImageMask _f .PdfObject ;Intent _f .PdfObject ;Interpolate _f .PdfObject ;
Width _f .PdfObject ;_ffa []byte ;_bdgb *_bb .ImageBase ;};func (_edfaa *ContentStreamParser )parseObject ()(_adeg _f .PdfObject ,_fbg bool ,_bdgbf error ){_edfaa .skipSpaces ();for {_abc ,_afg :=_edfaa ._egfe .Peek (2);if _afg !=nil {return nil ,false ,_afg ;
};_bc .Log .Trace ("\u0050e\u0065k\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u003a\u0020\u0025\u0073",string (_abc ));if _abc [0]=='%'{_edfaa .skipComments ();continue ;}else if _abc [0]=='/'{_afdd ,_bbbed :=_edfaa .parseName ();_bc .Log .Trace ("\u002d\u003e\u004ea\u006d\u0065\u003a\u0020\u0027\u0025\u0073\u0027",_afdd );
return &_afdd ,false ,_bbbed ;}else if _abc [0]=='('{_bc .Log .Trace ("\u002d>\u0053\u0074\u0072\u0069\u006e\u0067!");_fdfb ,_ggae :=_edfaa .parseString ();return _fdfb ,false ,_ggae ;}else if _abc [0]=='<'&&_abc [1]!='<'{_bc .Log .Trace ("\u002d\u003e\u0048\u0065\u0078\u0020\u0053\u0074\u0072\u0069\u006e\u0067\u0021");
_bdec ,_cegf :=_edfaa .parseHexString ();return _bdec ,false ,_cegf ;}else if _abc [0]=='['{_bc .Log .Trace ("\u002d\u003e\u0041\u0072\u0072\u0061\u0079\u0021");_bbaf ,_defg :=_edfaa .parseArray ();return _bbaf ,false ,_defg ;}else if _f .IsFloatDigit (_abc [0])||(_abc [0]=='-'&&_f .IsFloatDigit (_abc [1]))||(_abc [0]=='+'&&_f .IsFloatDigit (_abc [1])){_bc .Log .Trace ("\u002d>\u004e\u0075\u006d\u0062\u0065\u0072!");
_caf ,_fdaa :=_edfaa .parseNumber ();return _caf ,false ,_fdaa ;}else if _abc [0]=='<'&&_abc [1]=='<'{_cdb ,_cdf :=_edfaa .parseDict ();return _cdb ,false ,_cdf ;}else {_bc .Log .Trace ("\u002d>\u004fp\u0065\u0072\u0061\u006e\u0064 \u006f\u0072 \u0062\u006f\u006f\u006c\u003f");
_abc ,_ =_edfaa ._egfe .Peek (5);_fdag :=string (_abc );_bc .Log .Trace ("\u0063\u006f\u006e\u0074\u0020\u0050\u0065\u0065\u006b\u0020\u0073\u0074r\u003a\u0020\u0025\u0073",_fdag );if (len (_fdag )> 3)&&(_fdag [:4]=="\u006e\u0075\u006c\u006c"){_aed ,_gdaa :=_edfaa .parseNull ();
return &_aed ,false ,_gdaa ;}else if (len (_fdag )> 4)&&(_fdag [:5]=="\u0066\u0061\u006cs\u0065"){_ebc ,_fgeb :=_edfaa .parseBool ();return &_ebc ,false ,_fgeb ;}else if (len (_fdag )> 3)&&(_fdag [:4]=="\u0074\u0072\u0075\u0065"){_dge ,_fbcb :=_edfaa .parseBool ();
return &_dge ,false ,_fbcb ;};_bdba ,_fag :=_edfaa .parseOperand ();if _fag !=nil {return _bdba ,false ,_fag ;};if len (_bdba .String ())< 1{return _bdba ,false ,ErrInvalidOperand ;};return _bdba ,true ,nil ;};};};

// Add_W appends 'W' operand to the content stream:
// Modify the current clipping path by intersecting with the current path (nonzero winding rule).
//
// See section 8.5.4 "Clipping Path Operators" and Table 61 (p. 146 PDF32000_2008).
func (_ffdg *ContentCreator )Add_W ()*ContentCreator {_dfg :=ContentStreamOperation {};_dfg .Operand ="\u0057";_ffdg ._ag =append (_ffdg ._ag ,&_dfg );return _ffdg ;};

// ContentStreamOperation represents an operation in PDF contentstream which consists of
// an operand and parameters.
type ContentStreamOperation struct{Params []_f .PdfObject ;Operand string ;};

// ContentStreamProcessor defines a data structure and methods for processing a content stream, keeping track of the
// current graphics state, and allowing external handlers to define their own functions as a part of the processing,
// for example rendering or extracting certain information.
type ContentStreamProcessor struct{_dafc GraphicStateStack ;_aagc []*ContentStreamOperation ;_eeeb GraphicsState ;_fgd []handlerEntry ;_badc int ;};func (_afe *ContentStreamProcessor )handleCommand_cs (_dfgb *ContentStreamOperation ,_debb *_ba .PdfPageResources )error {if len (_dfgb .Params )< 1{_bc .Log .Debug ("\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u0043\u0053\u0020\u0063\u006f\u006d\u006d\u0061\u006e\u0064\u002c\u0020s\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u006f\u0076\u0065\u0072");
return _g .New ("\u0074o\u006f \u0066\u0065\u0077\u0020\u0070a\u0072\u0061m\u0065\u0074\u0065\u0072\u0073");};if len (_dfgb .Params )> 1{_bc .Log .Debug ("\u0043\u0053\u0020\u0063\u006f\u006d\u006d\u0061n\u0064\u0020\u0077it\u0068\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020-\u0020\u0063\u006f\u006e\u0074\u0069\u006e\u0075i\u006e\u0067");
return _g .New ("\u0074\u006f\u006f\u0020ma\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073");};_dbea ,_gbc :=_dfgb .Params [0].(*_f .PdfObjectName );if !_gbc {_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020C\u0053\u0020\u0063o\u006d\u006d\u0061n\u0064\u0020w\u0069\u0074\u0068\u0020\u0069\u006ev\u0061li\u0064\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u002c\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u006f\u0076\u0065\u0072");
return _g .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};_daae ,_afbb :=_afe .getColorspace (string (*_dbea ),_debb );if _afbb !=nil {return _afbb ;};_afe ._eeeb .ColorspaceNonStroking =_daae ;_gacf ,_afbb :=_afe .getInitialColor (_daae );
if _afbb !=nil {return _afbb ;};_afe ._eeeb .ColorNonStroking =_gacf ;return nil ;};

// Add_v appends 'v' operand to the content stream: Append a Bezier curve to the current path from the
// current point to (x3,y3) with the current point and (x2,y2) as control points.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_aaed *ContentCreator )Add_v (x2 ,y2 ,x3 ,y3 float64 )*ContentCreator {_fec :=ContentStreamOperation {};_fec .Operand ="\u0076";_fec .Params =_adcg ([]float64 {x2 ,y2 ,x3 ,y3 });_aaed ._ag =append (_aaed ._ag ,&_fec );return _aaed ;};func (_gdca *ContentStreamParser )parseArray ()(*_f .PdfObjectArray ,error ){_aaf :=_f .MakeArray ();
_gdca ._egfe .ReadByte ();for {_gdca .skipSpaces ();_bcdg ,_fegd :=_gdca ._egfe .Peek (1);if _fegd !=nil {return _aaf ,_fegd ;};if _bcdg [0]==']'{_gdca ._egfe .ReadByte ();break ;};_fgcg ,_ ,_fegd :=_gdca .parseObject ();if _fegd !=nil {return _aaf ,_fegd ;
};_aaf .Append (_fgcg );};return _aaf ,nil ;};

// Add_cs appends 'cs' operand to the content stream:
// Same as CS but for non-stroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_cbc *ContentCreator )Add_cs (name _f .PdfObjectName )*ContentCreator {_dbb :=ContentStreamOperation {};_dbb .Operand ="\u0063\u0073";_dbb .Params =_aefe ([]_f .PdfObjectName {name });_cbc ._ag =append (_cbc ._ag ,&_dbb );return _cbc ;};

// NewContentStreamParser creates a new instance of the content stream parser from an input content
// stream string.
func NewContentStreamParser (contentStr string )*ContentStreamParser {_daf :=ContentStreamParser {};contentStr =string (_adca .ReplaceAll ([]byte (contentStr ),[]byte ("\u002f")));_dbaa :=_db .NewBufferString (contentStr +"\u000a");_daf ._egfe =_ce .NewReader (_dbaa );
return &_daf ;};

// Add_quotes appends `"` operand to the content stream:
// Move to next line and show a string, using `aw` and `ac` as word
// and character spacing respectively.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_cce *ContentCreator )Add_quotes (textstr _f .PdfObjectString ,aw ,ac float64 )*ContentCreator {_cfd :=ContentStreamOperation {};_cfd .Operand ="\u0022";_cfd .Params =_adcg ([]float64 {aw ,ac });_cfd .Params =append (_cfd .Params ,_afc ([]_f .PdfObjectString {textstr })...);
_cce ._ag =append (_cce ._ag ,&_cfd );return _cce ;};func (_abag *ContentStreamProcessor )getColorspace (_eefb string ,_fcd *_ba .PdfPageResources )(_ba .PdfColorspace ,error ){switch _eefb {case "\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079":return _ba .NewPdfColorspaceDeviceGray (),nil ;
case "\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B":return _ba .NewPdfColorspaceDeviceRGB (),nil ;case "\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b":return _ba .NewPdfColorspaceDeviceCMYK (),nil ;case "\u0050a\u0074\u0074\u0065\u0072\u006e":return _ba .NewPdfColorspaceSpecialPattern (),nil ;
};_baf ,_bbgc :=_fcd .GetColorspaceByName (_f .PdfObjectName (_eefb ));if _bbgc {return _baf ,nil ;};switch _eefb {case "\u0043a\u006c\u0047\u0072\u0061\u0079":return _ba .NewPdfColorspaceCalGray (),nil ;case "\u0043\u0061\u006c\u0052\u0047\u0042":return _ba .NewPdfColorspaceCalRGB (),nil ;
case "\u004c\u0061\u0062":return _ba .NewPdfColorspaceLab (),nil ;};_bc .Log .Debug ("\u0055\u006e\u006b\u006e\u006f\u0077\u006e\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070a\u0063e\u0020\u0072\u0065\u0071\u0075\u0065\u0073\u0074\u0065\u0064\u003a\u0020\u0025\u0073",_eefb );
return nil ,_ec .Errorf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065:\u0020\u0025\u0073",_eefb );};

// Add_n appends 'n' operand to the content stream:
// End the path without filling or stroking.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_gce *ContentCreator )Add_n ()*ContentCreator {_efdc :=ContentStreamOperation {};_efdc .Operand ="\u006e";_gce ._ag =append (_gce ._ag ,&_efdc );return _gce ;};

// Add_l adds 'l' operand to the content stream:
// Append a straight line segment from the current point to (x,y).
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_bec *ContentCreator )Add_l (x ,y float64 )*ContentCreator {_dae :=ContentStreamOperation {};_dae .Operand ="\u006c";_dae .Params =_adcg ([]float64 {x ,y });_bec ._ag =append (_bec ._ag ,&_dae );return _bec ;};

// Add_m adds 'm' operand to the content stream: Move the current point to (x,y).
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_fc *ContentCreator )Add_m (x ,y float64 )*ContentCreator {_ddf :=ContentStreamOperation {};_ddf .Operand ="\u006d";_ddf .Params =_adcg ([]float64 {x ,y });_fc ._ag =append (_fc ._ag ,&_ddf );return _fc ;};func (_ddc *ContentStreamParser )skipSpaces ()(int ,error ){_cabg :=0;
for {_dbbe ,_bdegd :=_ddc ._egfe .Peek (1);if _bdegd !=nil {return 0,_bdegd ;};if _f .IsWhiteSpace (_dbbe [0]){_ddc ._egfe .ReadByte ();_cabg ++;}else {break ;};};return _cabg ,nil ;};func (_dbd *ContentStreamProcessor )handleCommand_sc (_fgaee *ContentStreamOperation ,_cgc *_ba .PdfPageResources )error {_cdeb :=_dbd ._eeeb .ColorspaceNonStroking ;
if !_agg (_cdeb ){if len (_fgaee .Params )!=_cdeb .GetNumComponents (){_bc .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_bc .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_fgaee .Params ),_cdeb );return _g .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};};_eebc ,_baea :=_cdeb .ColorFromPdfObjects (_fgaee .Params );if _baea !=nil {return _baea ;};_dbd ._eeeb .ColorNonStroking =_eebc ;return nil ;};

// Add_rg appends 'rg' operand to the content stream:
// Same as RG but used for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_fad *ContentCreator )Add_rg (r ,g ,b float64 )*ContentCreator {_cba :=ContentStreamOperation {};_cba .Operand ="\u0072\u0067";_cba .Params =_adcg ([]float64 {r ,g ,b });_fad ._ag =append (_fad ._ag ,&_cba );return _fad ;};

// AddHandler adds a new ContentStreamProcessor `handler` of type `condition` for `operand`.
func (_cfad *ContentStreamProcessor )AddHandler (condition HandlerConditionEnum ,operand string ,handler HandlerFunc ){_cgda :=handlerEntry {};_cgda .Condition =condition ;_cgda .Operand =operand ;_cgda .Handler =handler ;_cfad ._fgd =append (_cfad ._fgd ,_cgda );
};

// Add_K appends 'K' operand to the content stream:
// Set the stroking colorspace to DeviceCMYK and sets the c,m,y,k color (0-1 each component).
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_bdg *ContentCreator )Add_K (c ,m ,y ,k float64 )*ContentCreator {_agc :=ContentStreamOperation {};_agc .Operand ="\u004b";_agc .Params =_adcg ([]float64 {c ,m ,y ,k });_bdg ._ag =append (_bdg ._ag ,&_agc );return _bdg ;};var (ErrInvalidOperand =_g .New ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");
ErrEarlyExit =_g .New ("\u0074\u0065\u0072\u006di\u006e\u0061\u0074\u0065\u0020\u0070\u0072\u006f\u0063\u0065s\u0073 \u0065\u0061\u0072\u006c\u0079\u0020\u0065x\u0069\u0074"););

// Add_TL appends 'TL' operand to the content stream:
// Set leading.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_agf *ContentCreator )Add_TL (leading float64 )*ContentCreator {_fdaf :=ContentStreamOperation {};_fdaf .Operand ="\u0054\u004c";_fdaf .Params =_adcg ([]float64 {leading });_agf ._ag =append (_agf ._ag ,&_fdaf );return _agf ;};func (_fgae *ContentStreamParser )parseOperand ()(*_f .PdfObjectString ,error ){var _bagg []byte ;
for {_dede ,_fbe :=_fgae ._egfe .Peek (1);if _fbe !=nil {return _f .MakeString (string (_bagg )),_fbe ;};if _f .IsDelimiter (_dede [0]){break ;};if _f .IsWhiteSpace (_dede [0]){break ;};_dad ,_ :=_fgae ._egfe .ReadByte ();_bagg =append (_bagg ,_dad );};
return _f .MakeString (string (_bagg )),nil ;};

// Process processes the entire list of operations. Maintains the graphics state that is passed to any
// handlers that are triggered during processing (either on specific operators or all).
func (_ggdeg *ContentStreamProcessor )Process (resources *_ba .PdfPageResources )error {_ggdeg ._eeeb .ColorspaceStroking =_ba .NewPdfColorspaceDeviceGray ();_ggdeg ._eeeb .ColorspaceNonStroking =_ba .NewPdfColorspaceDeviceGray ();_ggdeg ._eeeb .ColorStroking =_ba .NewPdfColorDeviceGray (0);
_ggdeg ._eeeb .ColorNonStroking =_ba .NewPdfColorDeviceGray (0);_ggdeg ._eeeb .CTM =_ece .IdentityMatrix ();for _ ,_dcgg :=range _ggdeg ._aagc {var _agff error ;switch _dcgg .Operand {case "\u0071":_ggdeg ._dafc .Push (_ggdeg ._eeeb );case "\u0051":if len (_ggdeg ._dafc )==0{_bc .Log .Debug ("\u0057\u0041\u0052\u004e\u003a\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0060\u0051\u0060\u0020\u006f\u0070e\u0072\u0061\u0074\u006f\u0072\u002e\u0020\u0047\u0072\u0061\u0070\u0068\u0069\u0063\u0073\u0020\u0073\u0074\u0061\u0074\u0065 \u0073\u0074\u0061\u0063\u006b\u0020\u0069\u0073\u0020\u0065\u006d\u0070\u0074\u0079.\u0020\u0053\u006bi\u0070\u0070\u0069\u006e\u0067\u002e");
continue ;};_ggdeg ._eeeb =_ggdeg ._dafc .Pop ();case "\u0043\u0053":_agff =_ggdeg .handleCommand_CS (_dcgg ,resources );case "\u0063\u0073":_agff =_ggdeg .handleCommand_cs (_dcgg ,resources );case "\u0053\u0043":_agff =_ggdeg .handleCommand_SC (_dcgg ,resources );
case "\u0053\u0043\u004e":_agff =_ggdeg .handleCommand_SCN (_dcgg ,resources );case "\u0073\u0063":_agff =_ggdeg .handleCommand_sc (_dcgg ,resources );case "\u0073\u0063\u006e":_agff =_ggdeg .handleCommand_scn (_dcgg ,resources );case "\u0047":_agff =_ggdeg .handleCommand_G (_dcgg ,resources );
case "\u0067":_agff =_ggdeg .handleCommand_g (_dcgg ,resources );case "\u0052\u0047":_agff =_ggdeg .handleCommand_RG (_dcgg ,resources );case "\u0072\u0067":_agff =_ggdeg .handleCommand_rg (_dcgg ,resources );case "\u004b":_agff =_ggdeg .handleCommand_K (_dcgg ,resources );
case "\u006b":_agff =_ggdeg .handleCommand_k (_dcgg ,resources );case "\u0063\u006d":_agff =_ggdeg .handleCommand_cm (_dcgg ,resources );};if _agff !=nil {_bc .Log .Debug ("\u0050\u0072\u006f\u0063\u0065\u0073s\u006f\u0072\u0020\u0068\u0061\u006e\u0064\u006c\u0069\u006e\u0067\u0020\u0065r\u0072\u006f\u0072\u0020\u0028\u0025\u0073)\u003a\u0020\u0025\u0076",_dcgg .Operand ,_agff );
_bc .Log .Debug ("\u004f\u0070\u0065r\u0061\u006e\u0064\u003a\u0020\u0025\u0023\u0076",_dcgg .Operand );return _agff ;};for _ ,_gebd :=range _ggdeg ._fgd {var _fbad error ;if _gebd .Condition .All (){_fbad =_gebd .Handler (_dcgg ,_ggdeg ._eeeb ,resources );
}else if _gebd .Condition .Operand ()&&_dcgg .Operand ==_gebd .Operand {_fbad =_gebd .Handler (_dcgg ,_ggdeg ._eeeb ,resources );};if _fbad !=nil {_bc .Log .Debug ("P\u0072\u006f\u0063\u0065\u0073\u0073o\u0072\u0020\u0068\u0061\u006e\u0064\u006c\u0065\u0072 \u0065\u0072\u0072o\u0072:\u0020\u0025\u0076",_fbad );
return _fbad ;};};};return nil ;};func _dgf (_babdb string )bool {_ ,_bcdb :=_cef [_babdb ];return _bcdb };func (_aee *ContentStreamProcessor )handleCommand_CS (_eeca *ContentStreamOperation ,_efbf *_ba .PdfPageResources )error {if len (_eeca .Params )< 1{_bc .Log .Debug ("\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u0063\u0073\u0020\u0063\u006f\u006d\u006d\u0061\u006e\u0064\u002c\u0020s\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u006f\u0076\u0065\u0072");
return _g .New ("\u0074o\u006f \u0066\u0065\u0077\u0020\u0070a\u0072\u0061m\u0065\u0074\u0065\u0072\u0073");};if len (_eeca .Params )> 1{_bc .Log .Debug ("\u0063\u0073\u0020\u0063\u006f\u006d\u006d\u0061n\u0064\u0020\u0077it\u0068\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020-\u0020\u0063\u006f\u006e\u0074\u0069\u006e\u0075i\u006e\u0067");
return _g .New ("\u0074\u006f\u006f\u0020ma\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073");};_fage ,_efa :=_eeca .Params [0].(*_f .PdfObjectName );if !_efa {_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020c\u0073\u0020\u0063o\u006d\u006d\u0061n\u0064\u0020w\u0069\u0074\u0068\u0020\u0069\u006ev\u0061li\u0064\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u002c\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u006f\u0076\u0065\u0072");
return _g .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};_aceg ,_ggc :=_aee .getColorspace (string (*_fage ),_efbf );if _ggc !=nil {return _ggc ;};_aee ._eeeb .ColorspaceStroking =_aceg ;_aedg ,_ggc :=_aee .getInitialColor (_aceg );
if _ggc !=nil {return _ggc ;};_aee ._eeeb .ColorStroking =_aedg ;return nil ;};

// AddOperand adds a specified operand.
func (_fg *ContentCreator )AddOperand (op ContentStreamOperation )*ContentCreator {_fg ._ag =append (_fg ._ag ,&op );return _fg ;};

// SetStrokingColor sets the stroking `color` where color can be one of
// PdfColorDeviceGray, PdfColorDeviceRGB, or PdfColorDeviceCMYK.
func (_dfb *ContentCreator )SetStrokingColor (color _ba .PdfColor )*ContentCreator {switch _ecc :=color .(type ){case *_ba .PdfColorDeviceGray :_dfb .Add_G (_ecc .Val ());case *_ba .PdfColorDeviceRGB :_dfb .Add_RG (_ecc .R (),_ecc .G (),_ecc .B ());case *_ba .PdfColorDeviceCMYK :_dfb .Add_K (_ecc .C (),_ecc .M (),_ecc .Y (),_ecc .K ());
case *_ba .PdfColorPatternType2 :_dfb .Add_CS (*_f .MakeName ("\u0050a\u0074\u0074\u0065\u0072\u006e"));_dfb .Add_SCN_pattern (_ecc .PatternName );case *_ba .PdfColorPatternType3 :_dfb .Add_CS (*_f .MakeName ("\u0050a\u0074\u0074\u0065\u0072\u006e"));_dfb .Add_SCN_pattern (_ecc .PatternName );
default:_bc .Log .Debug ("\u0053\u0065\u0074\u0053\u0074\u0072\u006f\u006b\u0069\u006e\u0067\u0043\u006fl\u006f\u0072\u003a\u0020\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0063\u006f\u006c\u006fr\u003a\u0020\u0025\u0054",_ecc );
};return _dfb ;};func _cae (_gee *ContentStreamInlineImage ,_fbde *_f .PdfObjectDictionary )(*_f .LZWEncoder ,error ){_cdg :=_f .NewLZWEncoder ();if _fbde ==nil {if _gee .DecodeParms !=nil {_acga ,_gad :=_f .GetDict (_gee .DecodeParms );if !_gad {_bc .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073\u0020n\u006f\u0074\u0020\u0061\u0020\u0064\u0069\u0063\u0074\u0069on\u0061\u0072\u0079 \u0028%\u0054\u0029",_gee .DecodeParms );
return nil ,_ec .Errorf ("\u0069\u006e\u0076\u0061li\u0064\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073");};_fbde =_acga ;};};if _fbde ==nil {return _cdg ,nil ;};_dca :=_fbde .Get ("E\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065");
if _dca !=nil {_dccb ,_eab :=_dca .(*_f .PdfObjectInteger );if !_eab {_bc .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u003a \u0045\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0062\u0075\u0074\u0020\u006e\u006f\u0074\u0020\u006e\u0075\u006d\u0065\u0072i\u0063 \u0028\u0025\u0054\u0029",_dca );
return nil ,_ec .Errorf ("\u0069\u006e\u0076\u0061li\u0064\u0020\u0045\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065");};if *_dccb !=0&&*_dccb !=1{return nil ,_ec .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0045\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065\u0020\u0076\u0061\u006c\u0075e\u0020\u0028\u006e\u006f\u0074 \u0030\u0020o\u0072\u0020\u0031\u0029");
};_cdg .EarlyChange =int (*_dccb );}else {_cdg .EarlyChange =1;};_dca =_fbde .Get ("\u0050r\u0065\u0064\u0069\u0063\u0074\u006fr");if _dca !=nil {_fac ,_eba :=_dca .(*_f .PdfObjectInteger );if !_eba {_bc .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0050\u0072\u0065d\u0069\u0063\u0074\u006f\u0072\u0020\u0073pe\u0063\u0069\u0066\u0069e\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u006f\u0074 n\u0075\u006de\u0072\u0069\u0063\u0020\u0028\u0025\u0054\u0029",_dca );
return nil ,_ec .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0072\u0065\u0064i\u0063\u0074\u006f\u0072");};_cdg .Predictor =int (*_fac );};_dca =_fbde .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");
if _dca !=nil {_eac ,_eae :=_dca .(*_f .PdfObjectInteger );if !_eae {_bc .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0049n\u0076\u0061\u006c\u0069\u0064\u0020\u0042i\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");
return nil ,_ec .Errorf ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020\u0042\u0069\u0074\u0073\u0050e\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");};_cdg .BitsPerComponent =int (*_eac );};if _cdg .Predictor > 1{_cdg .Columns =1;_dca =_fbde .Get ("\u0043o\u006c\u0075\u006d\u006e\u0073");
if _dca !=nil {_ddead ,_bgg :=_dca .(*_f .PdfObjectInteger );if !_bgg {return nil ,_ec .Errorf ("\u0070r\u0065\u0064\u0069\u0063\u0074\u006f\u0072\u0020\u0063\u006f\u006cu\u006d\u006e\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064");};_cdg .Columns =int (*_ddead );
};_cdg .Colors =1;_dca =_fbde .Get ("\u0043\u006f\u006c\u006f\u0072\u0073");if _dca !=nil {_gcec ,_dbae :=_dca .(*_f .PdfObjectInteger );if !_dbae {return nil ,_ec .Errorf ("\u0070\u0072\u0065d\u0069\u0063\u0074\u006fr\u0020\u0063\u006f\u006c\u006f\u0072\u0073 \u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072");
};_cdg .Colors =int (*_gcec );};};_bc .Log .Trace ("\u0064\u0065\u0063\u006f\u0064\u0065\u0020\u0070\u0061\u0072\u0061\u006ds\u003a\u0020\u0025\u0073",_fbde .String ());return _cdg ,nil ;};

// HandlerConditionEnum represents the type of operand content stream processor (handler).
// The handler may process a single specific named operand or all operands.
type HandlerConditionEnum int ;

// Add_Tj appends 'Tj' operand to the content stream:
// Show a text string.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_bea *ContentCreator )Add_Tj (textstr _f .PdfObjectString )*ContentCreator {_cead :=ContentStreamOperation {};_cead .Operand ="\u0054\u006a";_cead .Params =_afc ([]_f .PdfObjectString {textstr });_bea ._ag =append (_bea ._ag ,&_cead );return _bea ;
};

// Add_W_starred appends 'W*' operand to the content stream:
// Modify the current clipping path by intersecting with the current path (even odd rule).
//
// See section 8.5.4 "Clipping Path Operators" and Table 61 (p. 146 PDF32000_2008).
func (_fdc *ContentCreator )Add_W_starred ()*ContentCreator {_ebg :=ContentStreamOperation {};_ebg .Operand ="\u0057\u002a";_fdc ._ag =append (_fdc ._ag ,&_ebg );return _fdc ;};

// Add_f appends 'f' operand to the content stream:
// Fill the path using the nonzero winding number rule to determine fill region.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_dce *ContentCreator )Add_f ()*ContentCreator {_aea :=ContentStreamOperation {};_aea .Operand ="\u0066";_dce ._ag =append (_dce ._ag ,&_aea );return _dce ;};

// Add_SCN_pattern appends 'SCN' operand to the content stream for pattern `name`:
// SCN with name attribute (for pattern). Syntax: c1 ... cn name SCN.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_bdb *ContentCreator )Add_SCN_pattern (name _f .PdfObjectName ,c ...float64 )*ContentCreator {_gdf :=ContentStreamOperation {};_gdf .Operand ="\u0053\u0043\u004e";_gdf .Params =_adcg (c );_gdf .Params =append (_gdf .Params ,_f .MakeName (string (name )));
_bdb ._ag =append (_bdb ._ag ,&_gdf );return _bdb ;};

// Add_cm adds 'cm' operation to the content stream: Modifies the current transformation matrix (ctm)
// of the graphics state.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_gcd *ContentCreator )Add_cm (a ,b ,c ,d ,e ,f float64 )*ContentCreator {_bcd :=ContentStreamOperation {};_bcd .Operand ="\u0063\u006d";_bcd .Params =_adcg ([]float64 {a ,b ,c ,d ,e ,f });_gcd ._ag =append (_gcd ._ag ,&_bcd );return _gcd ;};

// Add_Td appends 'Td' operand to the content stream:
// Move to start of next line with offset (`tx`, `ty`).
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_bcc *ContentCreator )Add_Td (tx ,ty float64 )*ContentCreator {_cbb :=ContentStreamOperation {};_cbb .Operand ="\u0054\u0064";_cbb .Params =_adcg ([]float64 {tx ,ty });_bcc ._ag =append (_bcc ._ag ,&_cbb );return _bcc ;};func (_dedf *ContentStreamProcessor )handleCommand_rg (_aad *ContentStreamOperation ,_gdbd *_ba .PdfPageResources )error {_bfef :=_ba .NewPdfColorspaceDeviceRGB ();
if len (_aad .Params )!=_bfef .GetNumComponents (){_bc .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_bc .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_aad .Params ),_bfef );return _g .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};_dafg ,_cgbc :=_bfef .ColorFromPdfObjects (_aad .Params );if _cgbc !=nil {return _cgbc ;};_dedf ._eeeb .ColorspaceNonStroking =_bfef ;_dedf ._eeeb .ColorNonStroking =_dafg ;return nil ;};

// Add_Tf appends 'Tf' operand to the content stream:
// Set font and font size specified by font resource `fontName` and `fontSize`.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_fdg *ContentCreator )Add_Tf (fontName _f .PdfObjectName ,fontSize float64 )*ContentCreator {_cgb :=ContentStreamOperation {};_cgb .Operand ="\u0054\u0066";_cgb .Params =_aefe ([]_f .PdfObjectName {fontName });_cgb .Params =append (_cgb .Params ,_adcg ([]float64 {fontSize })...);
_fdg ._ag =append (_fdg ._ag ,&_cgb );return _fdg ;};

// Add_re appends 're' operand to the content stream:
// Append a rectangle to the current path as a complete subpath, with lower left corner (x,y).
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_dgd *ContentCreator )Add_re (x ,y ,width ,height float64 )*ContentCreator {_dfc :=ContentStreamOperation {};_dfc .Operand ="\u0072\u0065";_dfc .Params =_adcg ([]float64 {x ,y ,width ,height });_dgd ._ag =append (_dgd ._ag ,&_dfc );return _dgd ;};


// Add_G appends 'G' operand to the content stream:
// Set the stroking colorspace to DeviceGray and sets the gray level (0-1).
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_afa *ContentCreator )Add_G (gray float64 )*ContentCreator {_def :=ContentStreamOperation {};_def .Operand ="\u0047";_def .Params =_adcg ([]float64 {gray });_afa ._ag =append (_afa ._ag ,&_def );return _afa ;};func (_gcf *ContentStreamProcessor )handleCommand_g (_gfbf *ContentStreamOperation ,_addd *_ba .PdfPageResources )error {_dfgbe :=_ba .NewPdfColorspaceDeviceGray ();
if len (_gfbf .Params )!=_dfgbe .GetNumComponents (){_bc .Log .Debug ("\u0049\u006e\u0076al\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020p\u0061r\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020\u0067");_bc .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_gfbf .Params ),_dfgbe );
return _g .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_egc ,_bcbda :=_dfgbe .ColorFromPdfObjects (_gfbf .Params );if _bcbda !=nil {_bc .Log .Debug ("\u0045\u0052\u0052\u004fR\u003a\u0020\u0068\u0061\u006e\u0064\u006c\u0065\u0043o\u006d\u006d\u0061\u006e\u0064\u005f\u0067\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0070\u0061r\u0061\u006d\u0073\u002e\u0020c\u0073\u003d\u0025\u0054\u0020\u006f\u0070\u003d\u0025\u0073\u0020\u0065\u0072\u0072\u003d\u0025\u0076",_dfgbe ,_gfbf ,_bcbda );
return _bcbda ;};_gcf ._eeeb .ColorspaceNonStroking =_dfgbe ;_gcf ._eeeb .ColorNonStroking =_egc ;return nil ;};

// Add_BMC appends 'BMC' operand to the content stream:
// Begins a marked-content sequence terminated by a balancing EMC operator.
// `tag` shall be a name object indicating the role or significance of
// the sequence.
//
// See section 14.6 "Marked Content" and Table 320 (p. 561 PDF32000_2008).
func (_ggd *ContentCreator )Add_BMC (tag _f .PdfObjectName )*ContentCreator {_age :=ContentStreamOperation {};_age .Operand ="\u0042\u004d\u0043";_age .Params =_aefe ([]_f .PdfObjectName {tag });_ggd ._ag =append (_ggd ._ag ,&_age );return _ggd ;};

// Wrap ensures that the contentstream is wrapped within a balanced q ... Q expression.
func (_ef *ContentCreator )Wrap (){_ef ._ag .WrapIfNeeded ()};

// Operations returns the list of operations.
func (_ff *ContentCreator )Operations ()*ContentStreamOperations {return &_ff ._ag };

// NewInlineImageFromImage makes a new content stream inline image object from an image.
func NewInlineImageFromImage (img _ba .Image ,encoder _f .StreamEncoder )(*ContentStreamInlineImage ,error ){if encoder ==nil {encoder =_f .NewRawEncoder ();};encoder .UpdateParams (img .GetParamsDict ());_eee :=ContentStreamInlineImage {};if img .ColorComponents ==1{_eee .ColorSpace =_f .MakeName ("\u0047");
}else if img .ColorComponents ==3{_eee .ColorSpace =_f .MakeName ("\u0052\u0047\u0042");}else if img .ColorComponents ==4{_eee .ColorSpace =_f .MakeName ("\u0043\u004d\u0059\u004b");}else {_bc .Log .Debug ("\u0049\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006db\u0065\u0072\u0020o\u0066\u0020c\u006f\u006c\u006f\u0072\u0020\u0063o\u006dpo\u006e\u0065\u006e\u0074\u0073\u0020\u0066\u006f\u0072\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0064",img .ColorComponents );
return nil ,_g .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020c\u006fl\u006f\u0072\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073");};_eee .BitsPerComponent =_f .MakeInteger (img .BitsPerComponent );
_eee .Width =_f .MakeInteger (img .Width );_eee .Height =_f .MakeInteger (img .Height );_fgc ,_cca :=encoder .EncodeBytes (img .Data );if _cca !=nil {return nil ,_cca ;};_eee ._ffa =_fgc ;_bggg :=encoder .GetFilterName ();if _bggg !=_f .StreamEncodingFilterNameRaw {_eee .Filter =_f .MakeName (_bggg );
};return &_eee ,nil ;};func _ace (_dab *ContentStreamInlineImage )(*_f .MultiEncoder ,error ){_eefe :=_f .NewMultiEncoder ();var _feb *_f .PdfObjectDictionary ;var _fgef []_f .PdfObject ;if _fea :=_dab .DecodeParms ;_fea !=nil {_gdab ,_dac :=_fea .(*_f .PdfObjectDictionary );
if _dac {_feb =_gdab ;};_gadd ,_ebe :=_fea .(*_f .PdfObjectArray );if _ebe {for _ ,_fggg :=range _gadd .Elements (){if _bcf ,_gdaf :=_fggg .(*_f .PdfObjectDictionary );_gdaf {_fgef =append (_fgef ,_bcf );}else {_fgef =append (_fgef ,nil );};};};};_gddf :=_dab .Filter ;
if _gddf ==nil {return nil ,_ec .Errorf ("\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u006d\u0069s\u0073\u0069\u006e\u0067");};_eacd ,_fade :=_gddf .(*_f .PdfObjectArray );if !_fade {return nil ,_ec .Errorf ("m\u0075\u006c\u0074\u0069\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0063\u0061\u006e\u0020\u006f\u006el\u0079\u0020\u0062\u0065\u0020\u006d\u0061\u0064\u0065\u0020fr\u006f\u006d\u0020a\u0072r\u0061\u0079");
};for _ccf ,_cfgfc :=range _eacd .Elements (){_egd ,_gga :=_cfgfc .(*_f .PdfObjectName );if !_gga {return nil ,_ec .Errorf ("\u006d\u0075l\u0074\u0069\u0020\u0066i\u006c\u0074e\u0072\u0020\u0061\u0072\u0072\u0061\u0079\u0020e\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006e\u006f\u0074\u0020\u0061 \u006e\u0061\u006d\u0065");
};var _fcf _f .PdfObject ;if _feb !=nil {_fcf =_feb ;}else {if len (_fgef )> 0{if _ccf >=len (_fgef ){return nil ,_ec .Errorf ("\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0073\u0020\u0069\u006e\u0020d\u0065\u0063\u006f\u0064\u0065\u0020\u0070\u0061\u0072\u0061\u006d\u0073\u0020a\u0072\u0072\u0061\u0079");
};_fcf =_fgef [_ccf ];};};var _agbb *_f .PdfObjectDictionary ;if _ddfa ,_agbg :=_fcf .(*_f .PdfObjectDictionary );_agbg {_agbb =_ddfa ;};if *_egd ==_f .StreamEncodingFilterNameFlate ||*_egd =="\u0046\u006c"{_abab ,_gdb :=_baa (_dab ,_agbb );if _gdb !=nil {return nil ,_gdb ;
};_eefe .AddEncoder (_abab );}else if *_egd ==_f .StreamEncodingFilterNameLZW {_add ,_ebf :=_cae (_dab ,_agbb );if _ebf !=nil {return nil ,_ebf ;};_eefe .AddEncoder (_add );}else if *_egd ==_f .StreamEncodingFilterNameASCIIHex {_bfe :=_f .NewASCIIHexEncoder ();
_eefe .AddEncoder (_bfe );}else if *_egd ==_f .StreamEncodingFilterNameASCII85 ||*_egd =="\u0041\u0038\u0035"{_dbga :=_f .NewASCII85Encoder ();_eefe .AddEncoder (_dbga );}else {_bc .Log .Error ("U\u006e\u0073\u0075\u0070po\u0072t\u0065\u0064\u0020\u0066\u0069l\u0074\u0065\u0072\u0020\u0025\u0073",*_egd );
return nil ,_ec .Errorf ("\u0069\u006eva\u006c\u0069\u0064 \u0066\u0069\u006c\u0074er \u0069n \u006d\u0075\u006c\u0074\u0069\u0020\u0066il\u0074\u0065\u0072\u0020\u0061\u0072\u0072a\u0079");};};return _eefe ,nil ;};

// Add_Do adds 'Do' operation to the content stream:
// Displays an XObject (image or form) specified by `name`.
//
// See section 8.8 "External Objects" and Table 87 (pp. 209-220 PDF32000_2008).
func (_gea *ContentCreator )Add_Do (name _f .PdfObjectName )*ContentCreator {_ega :=ContentStreamOperation {};_ega .Operand ="\u0044\u006f";_ega .Params =_aefe ([]_f .PdfObjectName {name });_gea ._ag =append (_gea ._ag ,&_ega );return _gea ;};

// ParseInlineImage parses an inline image from a content stream, both reading its properties and binary data.
// When called, "BI" has already been read from the stream.  This function
// finishes reading through "EI" and then returns the ContentStreamInlineImage.
func (_aead *ContentStreamParser )ParseInlineImage ()(*ContentStreamInlineImage ,error ){_fbce :=ContentStreamInlineImage {};for {_aead .skipSpaces ();_ebd ,_ggg ,_fccb :=_aead .parseObject ();if _fccb !=nil {return nil ,_fccb ;};if !_ggg {_gefc ,_gefd :=_f .GetName (_ebd );
if !_gefd {_bc .Log .Debug ("\u0049\u006e\u0076\u0061\u006ci\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067e\u0020\u0070\u0072\u006f\u0070\u0065\u0072\u0074\u0079\u0020\u0028\u0065\u0078\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u0029\u0020\u002d\u0020\u0025T",_ebd );
return nil ,_ec .Errorf ("\u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067e\u0020\u0070\u0072\u006f\u0070\u0065\u0072\u0074\u0079\u0020\u0028\u0065\u0078\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u0029\u0020\u002d\u0020\u0025T",_ebd );
};_bbf ,_fdadf ,_gceb :=_aead .parseObject ();if _gceb !=nil {return nil ,_gceb ;};if _fdadf {return nil ,_ec .Errorf ("\u006eo\u0074\u0020\u0065\u0078\u0070\u0065\u0063\u0074\u0069\u006e\u0067 \u0061\u006e\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");
};switch *_gefc {case "\u0042\u0050\u0043","\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074":_fbce .BitsPerComponent =_bbf ;case "\u0043\u0053","\u0043\u006f\u006c\u006f\u0072\u0053\u0070\u0061\u0063\u0065":_fbce .ColorSpace =_bbf ;
case "\u0044","\u0044\u0065\u0063\u006f\u0064\u0065":_fbce .Decode =_bbf ;case "\u0044\u0050","D\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073":_fbce .DecodeParms =_bbf ;case "\u0046","\u0046\u0069\u006c\u0074\u0065\u0072":_fbce .Filter =_bbf ;
case "\u0048","\u0048\u0065\u0069\u0067\u0068\u0074":_fbce .Height =_bbf ;case "\u0049\u004d","\u0049m\u0061\u0067\u0065\u004d\u0061\u0073k":_fbce .ImageMask =_bbf ;case "\u0049\u006e\u0074\u0065\u006e\u0074":_fbce .Intent =_bbf ;case "\u0049","I\u006e\u0074\u0065\u0072\u0070\u006f\u006c\u0061\u0074\u0065":_fbce .Interpolate =_bbf ;
case "\u0057","\u0057\u0069\u0064t\u0068":_fbce .Width =_bbf ;case "\u004c\u0065\u006e\u0067\u0074\u0068","\u0053u\u0062\u0074\u0079\u0070\u0065","\u0054\u0079\u0070\u0065":_bc .Log .Debug ("\u0049\u0067\u006e\u006fr\u0069\u006e\u0067\u0020\u0069\u006e\u006c\u0069\u006e\u0065 \u0070a\u0072\u0061\u006d\u0065\u0074\u0065\u0072 \u0025\u0073",*_gefc );
default:return nil ,_ec .Errorf ("\u0075\u006e\u006b\u006e\u006f\u0077n\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0020\u0025\u0073",*_gefc );};};if _ggg {_gfa ,_ced :=_ebd .(*_f .PdfObjectString );
if !_ced {return nil ,_ec .Errorf ("\u0066a\u0069\u006ce\u0064\u0020\u0074o\u0020\u0072\u0065\u0061\u0064\u0020\u0069n\u006c\u0069\u006e\u0065\u0020\u0069m\u0061\u0067\u0065\u0020\u002d\u0020\u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");
};if _gfa .Str ()=="\u0045\u0049"{_bc .Log .Trace ("\u0049n\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020f\u0069\u006e\u0069\u0073\u0068\u0065\u0064\u002e\u002e\u002e");return &_fbce ,nil ;}else if _gfa .Str ()=="\u0049\u0044"{_bc .Log .Trace ("\u0049\u0044\u0020\u0073\u0074\u0061\u0072\u0074");
_bag ,_dee :=_aead ._egfe .Peek (1);if _dee !=nil {return nil ,_dee ;};if _f .IsWhiteSpace (_bag [0]){_aead ._egfe .Discard (1);};_fbce ._ffa =[]byte {};_egef :=0;var _ccee []byte ;for {_ebeg ,_cdec :=_aead ._egfe .ReadByte ();if _cdec !=nil {_bc .Log .Debug ("\u0055\u006e\u0061\u0062\u006ce\u0020\u0074\u006f\u0020\u0066\u0069\u006e\u0064\u0020\u0065\u006e\u0064\u0020o\u0066\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0045\u0049\u0020\u0069\u006e\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0064\u0061\u0074a");
return nil ,_cdec ;};if _egef ==0{if _f .IsWhiteSpace (_ebeg ){_ccee =[]byte {};_ccee =append (_ccee ,_ebeg );_egef =1;}else if _ebeg =='E'{_ccee =append (_ccee ,_ebeg );_egef =2;}else {_fbce ._ffa =append (_fbce ._ffa ,_ebeg );};}else if _egef ==1{_ccee =append (_ccee ,_ebeg );
if _ebeg =='E'{_egef =2;}else {_fbce ._ffa =append (_fbce ._ffa ,_ccee ...);_ccee =[]byte {};if _f .IsWhiteSpace (_ebeg ){_egef =1;}else {_egef =0;};};}else if _egef ==2{_ccee =append (_ccee ,_ebeg );if _ebeg =='I'{_egef =3;}else {_fbce ._ffa =append (_fbce ._ffa ,_ccee ...);
_ccee =[]byte {};_egef =0;};}else if _egef ==3{_ccee =append (_ccee ,_ebeg );if _f .IsWhiteSpace (_ebeg ){_dff ,_aff :=_aead ._egfe .Peek (20);if _aff !=nil &&_aff !=_gd .EOF {return nil ,_aff ;};_fdab :=NewContentStreamParser (string (_dff ));_aeaa :=true ;
for _aaea :=0;_aaea < 3;_aaea ++{_gadg ,_aag ,_gec :=_fdab .parseObject ();if _gec !=nil {if _gec ==_gd .EOF {break ;};_aeaa =false ;continue ;};if _aag &&!_dgf (_gadg .String ()){_aeaa =false ;break ;};};if _aeaa {if len (_fbce ._ffa )> 100{_bc .Log .Trace ("\u0049\u006d\u0061\u0067\u0065\u0020\u0073\u0074\u0072\u0065\u0061m\u0020\u0028\u0025\u0064\u0029\u003a\u0020\u0025\u0020\u0078 \u002e\u002e\u002e",len (_fbce ._ffa ),_fbce ._ffa [:100]);
}else {_bc .Log .Trace ("\u0049\u006d\u0061\u0067e \u0073\u0074\u0072\u0065\u0061\u006d\u0020\u0028\u0025\u0064\u0029\u003a\u0020\u0025 \u0078",len (_fbce ._ffa ),_fbce ._ffa );};return &_fbce ,nil ;};};_fbce ._ffa =append (_fbce ._ffa ,_ccee ...);_ccee =[]byte {};
_egef =0;};};};};};};

// GetColorSpace returns the colorspace of the inline image.
func (_bdeb *ContentStreamInlineImage )GetColorSpace (resources *_ba .PdfPageResources )(_ba .PdfColorspace ,error ){if _bdeb .ColorSpace ==nil {_bc .Log .Debug ("\u0049\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u006e\u006f\u0074\u0020\u0068\u0061\u0076i\u006e\u0067\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065\u002c\u0020\u0061\u0073\u0073\u0075\u006di\u006e\u0067\u0020\u0047\u0072a\u0079");
return _ba .NewPdfColorspaceDeviceGray (),nil ;};if _fde ,_gab :=_bdeb .ColorSpace .(*_f .PdfObjectArray );_gab {return _bafe (_fde );};_babd ,_dggd :=_bdeb .ColorSpace .(*_f .PdfObjectName );if !_dggd {_bc .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020I\u006e\u0076\u0061\u006c\u0069\u0064 \u006f\u0062\u006a\u0065\u0063\u0074\u0020t\u0079\u0070\u0065\u0020\u0028\u0025\u0054\u003b\u0025\u002bv\u0029",_bdeb .ColorSpace ,_bdeb .ColorSpace );
return nil ,_g .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if *_babd =="\u0047"||*_babd =="\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079"{return _ba .NewPdfColorspaceDeviceGray (),nil ;
}else if *_babd =="\u0052\u0047\u0042"||*_babd =="\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B"{return _ba .NewPdfColorspaceDeviceRGB (),nil ;}else if *_babd =="\u0043\u004d\u0059\u004b"||*_babd =="\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b"{return _ba .NewPdfColorspaceDeviceCMYK (),nil ;
}else if *_babd =="\u0049"||*_babd =="\u0049n\u0064\u0065\u0078\u0065\u0064"{return nil ,_g .New ("\u0075\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0049\u006e\u0064e\u0078 \u0063\u006f\u006c\u006f\u0072\u0073\u0070a\u0063\u0065");}else {if resources .ColorSpace ==nil {_bc .Log .Debug ("\u0045\u0072r\u006f\u0072\u002c\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065\u003a\u0020\u0025\u0073",*_babd );
return nil ,_g .New ("\u0075n\u006bn\u006f\u0077\u006e\u0020\u0063o\u006c\u006fr\u0073\u0070\u0061\u0063\u0065");};_cgd ,_bbe :=resources .GetColorspaceByName (*_babd );if !_bbe {_bc .Log .Debug ("\u0045\u0072r\u006f\u0072\u002c\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065\u003a\u0020\u0025\u0073",*_babd );
return nil ,_g .New ("\u0075n\u006bn\u006f\u0077\u006e\u0020\u0063o\u006c\u006fr\u0073\u0070\u0061\u0063\u0065");};return _cgd ,nil ;};};

// WrapIfNeeded wraps the entire contents within q ... Q.  If unbalanced, then adds extra Qs at the end.
// Only does if needed. Ensures that when adding new content, one start with all states
// in the default condition.
func (_ca *ContentStreamOperations )WrapIfNeeded ()*ContentStreamOperations {if len (*_ca )==0{return _ca ;};if _ca .isWrapped (){return _ca ;};*_ca =append ([]*ContentStreamOperation {{Operand :"\u0071"}},*_ca ...);_df :=0;for _ ,_dcb :=range *_ca {if _dcb .Operand =="\u0071"{_df ++;
}else if _dcb .Operand =="\u0051"{_df --;};};for _df > 0{*_ca =append (*_ca ,&ContentStreamOperation {Operand :"\u0051"});_df --;};return _ca ;};func _bafe (_fgcf _f .PdfObject )(_ba .PdfColorspace ,error ){_dcd ,_deeg :=_fgcf .(*_f .PdfObjectArray );if !_deeg {_bc .Log .Debug ("\u0045r\u0072\u006fr\u003a\u0020\u0049\u006ev\u0061\u006c\u0069d\u0020\u0069\u006e\u0064\u0065\u0078\u0065\u0064\u0020cs\u0020\u006e\u006ft\u0020\u0069n\u0020\u0061\u0072\u0072\u0061\u0079 \u0028\u0025#\u0076\u0029",_fgcf );
return nil ,_g .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if _dcd .Len ()!=4{_bc .Log .Debug ("\u0045\u0072\u0072\u006f\u0072:\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061r\u0072\u0061\u0079\u002c\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u0021\u003d\u0020\u0034\u0020\u0028\u0025\u0064\u0029",_dcd .Len ());
return nil ,_g .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");};_gdae ,_deeg :=_dcd .Get (0).(*_f .PdfObjectName );if !_deeg {_bc .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0066\u0069\u0072s\u0074 \u0065\u006c\u0065\u006de\u006e\u0074 \u006e\u006f\u0074\u0020\u0061\u0020\u006e\u0061\u006d\u0065\u0020\u0028\u0061\u0072\u0072\u0061\u0079\u003a\u0020\u0025\u0023\u0076\u0029",*_dcd );
return nil ,_g .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if *_gdae !="\u0049"&&*_gdae !="\u0049n\u0064\u0065\u0078\u0065\u0064"{_bc .Log .Debug ("\u0045\u0072r\u006f\u0072\u003a\u0020\u0049n\u0076\u0061\u006c\u0069\u0064 \u0063\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0021\u003d\u0020\u0049\u0020\u0028\u0067\u006f\u0074\u003a\u0020\u0025\u0076\u0029",*_gdae );
return nil ,_g .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");};_gdae ,_deeg =_dcd .Get (1).(*_f .PdfObjectName );if !_deeg {_bc .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0032\u006e\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u006e\u0061\u006d\u0065\u0020\u0028\u0061\u0072\u0072a\u0079\u003a\u0020\u0025\u0023v\u0029",*_dcd );
return nil ,_g .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if *_gdae !="\u0047"&&*_gdae !="\u0052\u0047\u0042"&&*_gdae !="\u0043\u004d\u0059\u004b"&&*_gdae !="\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079"&&*_gdae !="\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B"&&*_gdae !="\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b"{_bc .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0032\u006e\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0021\u003d\u0020\u0047\u002f\u0052\u0047\u0042\u002f\u0043\u004d\u0059\u004b\u0020\u0028g\u006f\u0074\u003a\u0020\u0025v\u0029",*_gdae );
return nil ,_g .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");};_bdfdd :="";switch *_gdae {case "\u0047","\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079":_bdfdd ="\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079";
case "\u0052\u0047\u0042","\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B":_bdfdd ="\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B";case "\u0043\u004d\u0059\u004b","\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b":_bdfdd ="\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b";
};_fead :=_f .MakeArray (_f .MakeName ("\u0049n\u0064\u0065\u0078\u0065\u0064"),_f .MakeName (_bdfdd ),_dcd .Get (2),_dcd .Get (3));return _ba .NewPdfColorspaceFromPdfObject (_fead );};

// Add_i adds 'i' operand to the content stream: Set the flatness tolerance in the graphics state.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_cf *ContentCreator )Add_i (flatness float64 )*ContentCreator {_aeg :=ContentStreamOperation {};_aeg .Operand ="\u0069";_aeg .Params =_adcg ([]float64 {flatness });_cf ._ag =append (_cf ._ag ,&_aeg );return _cf ;};func (_eege *ContentStreamProcessor )getInitialColor (_dfd _ba .PdfColorspace )(_ba .PdfColor ,error ){switch _bbff :=_dfd .(type ){case *_ba .PdfColorspaceDeviceGray :return _ba .NewPdfColorDeviceGray (0.0),nil ;
case *_ba .PdfColorspaceDeviceRGB :return _ba .NewPdfColorDeviceRGB (0.0,0.0,0.0),nil ;case *_ba .PdfColorspaceDeviceCMYK :return _ba .NewPdfColorDeviceCMYK (0.0,0.0,0.0,1.0),nil ;case *_ba .PdfColorspaceCalGray :return _ba .NewPdfColorCalGray (0.0),nil ;
case *_ba .PdfColorspaceCalRGB :return _ba .NewPdfColorCalRGB (0.0,0.0,0.0),nil ;case *_ba .PdfColorspaceLab :_ecg :=0.0;_bgaa :=0.0;_gebf :=0.0;if _bbff .Range [0]> 0{_ecg =_bbff .Range [0];};if _bbff .Range [2]> 0{_bgaa =_bbff .Range [2];};return _ba .NewPdfColorLab (_ecg ,_bgaa ,_gebf ),nil ;
case *_ba .PdfColorspaceICCBased :if _bbff .Alternate ==nil {_bc .Log .Trace ("\u0049\u0043\u0043\u0020\u0042\u0061\u0073\u0065\u0064\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065d\u0020-\u0020\u0061\u0074\u0074\u0065\u006d\u0070\u0074\u0069\u006e\u0067\u0020\u0066\u0061\u006c\u006c\u0020\u0062a\u0063\u006b\u0020\u0028\u004e\u0020\u003d\u0020\u0025\u0064\u0029",_bbff .N );
if _bbff .N ==1{_bc .Log .Trace ("\u0046\u0061\u006c\u006c\u0069\u006e\u0067\u0020\u0062\u0061\u0063k\u0020\u0074\u006f\u0020\u0044\u0065\u0076\u0069\u0063\u0065G\u0072\u0061\u0079");return _eege .getInitialColor (_ba .NewPdfColorspaceDeviceGray ());}else if _bbff .N ==3{_bc .Log .Trace ("\u0046a\u006c\u006c\u0069\u006eg\u0020\u0062\u0061\u0063\u006b \u0074o\u0020D\u0065\u0076\u0069\u0063\u0065\u0052\u0047B");
return _eege .getInitialColor (_ba .NewPdfColorspaceDeviceRGB ());}else if _bbff .N ==4{_bc .Log .Trace ("\u0046\u0061\u006c\u006c\u0069\u006e\u0067\u0020\u0062\u0061\u0063k\u0020\u0074\u006f\u0020\u0044\u0065\u0076\u0069\u0063\u0065C\u004d\u0059\u004b");
return _eege .getInitialColor (_ba .NewPdfColorspaceDeviceCMYK ());}else {return nil ,_g .New ("a\u006c\u0074\u0065\u0072\u006e\u0061t\u0065\u0020\u0073\u0070\u0061\u0063e\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064\u0020\u0066\u006f\u0072\u0020\u0049C\u0043");
};};return _eege .getInitialColor (_bbff .Alternate );case *_ba .PdfColorspaceSpecialIndexed :if _bbff .Base ==nil {return nil ,_g .New ("\u0069\u006e\u0064\u0065\u0078\u0065\u0064\u0020\u0062\u0061\u0073e\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069f\u0069\u0065\u0064");
};return _eege .getInitialColor (_bbff .Base );case *_ba .PdfColorspaceSpecialSeparation :if _bbff .AlternateSpace ==nil {return nil ,_g .New ("\u0061\u006ct\u0065\u0072\u006e\u0061\u0074\u0065\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069fi\u0065\u0064");
};return _eege .getInitialColor (_bbff .AlternateSpace );case *_ba .PdfColorspaceDeviceN :if _bbff .AlternateSpace ==nil {return nil ,_g .New ("\u0061\u006ct\u0065\u0072\u006e\u0061\u0074\u0065\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069fi\u0065\u0064");
};return _eege .getInitialColor (_bbff .AlternateSpace );case *_ba .PdfColorspaceSpecialPattern :return _ba .NewPdfColorPattern (),nil ;};_bc .Log .Debug ("Un\u0061\u0062l\u0065\u0020\u0074\u006f\u0020\u0064\u0065\u0074\u0065r\u006d\u0069\u006e\u0065\u0020\u0069\u006e\u0069\u0074\u0069\u0061\u006c\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u0066\u006f\u0072\u0020\u0075\u006e\u006b\u006e\u006fw\u006e \u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061c\u0065:\u0020\u0025T",_dfd );
return nil ,_g .New ("\u0075\u006e\u0073\u0075pp\u006f\u0072\u0074\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061c\u0065");};

// Add_TD appends 'TD' operand to the content stream:
// Move to start of next line with offset (`tx`, `ty`).
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_fbc *ContentCreator )Add_TD (tx ,ty float64 )*ContentCreator {_ggf :=ContentStreamOperation {};_ggf .Operand ="\u0054\u0044";_ggf .Params =_adcg ([]float64 {tx ,ty });_fbc ._ag =append (_fbc ._ag ,&_ggf );return _fbc ;};func (_fbaf *ContentStreamProcessor )handleCommand_k (_bffa *ContentStreamOperation ,_fdcdg *_ba .PdfPageResources )error {_gaaa :=_ba .NewPdfColorspaceDeviceCMYK ();
if len (_bffa .Params )!=_gaaa .GetNumComponents (){_bc .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_bc .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_bffa .Params ),_gaaa );return _g .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};_ecaf ,_abf :=_gaaa .ColorFromPdfObjects (_bffa .Params );if _abf !=nil {return _abf ;};_fbaf ._eeeb .ColorspaceNonStroking =_gaaa ;_fbaf ._eeeb .ColorNonStroking =_ecaf ;return nil ;};

// Add_j adds 'j' operand to the content stream: Set the line join style (graphics state).
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_gca *ContentCreator )Add_j (lineJoinStyle string )*ContentCreator {_eeg :=ContentStreamOperation {};_eeg .Operand ="\u006a";_eeg .Params =_aefe ([]_f .PdfObjectName {_f .PdfObjectName (lineJoinStyle )});_gca ._ag =append (_gca ._ag ,&_eeg );return _gca ;
};

// HasUnclosedQ checks if all the `q` operator is properly closed by `Q` operator.
func (_dbf *ContentStreamOperations )HasUnclosedQ ()bool {_bf :=0;for _ ,_cbd :=range *_dbf {if _cbd .Operand =="\u0071"{_bf ++;}else if _cbd .Operand =="\u0051"{_bf --;};};return _bf !=0;};func _acbf (_edc []int64 )[]_f .PdfObject {var _egefa []_f .PdfObject ;
for _ ,_bafd :=range _edc {_egefa =append (_egefa ,_f .MakeInteger (_bafd ));};return _egefa ;};

// Add_Tc appends 'Tc' operand to the content stream:
// Set character spacing.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_faf *ContentCreator )Add_Tc (charSpace float64 )*ContentCreator {_eec :=ContentStreamOperation {};_eec .Operand ="\u0054\u0063";_eec .Params =_adcg ([]float64 {charSpace });_faf ._ag =append (_faf ._ag ,&_eec );return _faf ;};

// Add_B appends 'B' operand to the content stream:
// Fill and then stroke the path (nonzero winding number rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_ffc *ContentCreator )Add_B ()*ContentCreator {_ddg :=ContentStreamOperation {};_ddg .Operand ="\u0042";_ffc ._ag =append (_ffc ._ag ,&_ddg );return _ffc ;};func (_ecf *ContentStreamInlineImage )toImageBase (_aac *_ba .PdfPageResources )(*_bb .ImageBase ,error ){if _ecf ._bdgb !=nil {return _ecf ._bdgb ,nil ;
};_gdeb :=_bb .ImageBase {};if _ecf .Height ==nil {return nil ,_g .New ("\u0068e\u0069\u0067\u0068\u0074\u0020\u0061\u0074\u0074\u0072\u0069\u0062u\u0074\u0065\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067");};_dbbb ,_bfa :=_ecf .Height .(*_f .PdfObjectInteger );
if !_bfa {return nil ,_g .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0068e\u0069\u0067\u0068\u0074");};_gdeb .Height =int (*_dbbb );if _ecf .Width ==nil {return nil ,_g .New ("\u0077\u0069\u0064th\u0020\u0061\u0074\u0074\u0072\u0069\u0062\u0075\u0074\u0065\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067");
};_cab ,_bfa :=_ecf .Width .(*_f .PdfObjectInteger );if !_bfa {return nil ,_g .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0077\u0069\u0064\u0074\u0068");};_gdeb .Width =int (*_cab );_ede ,_gbdc :=_ecf .IsMask ();if _gbdc !=nil {return nil ,_gbdc ;
};if _ede {_gdeb .BitsPerComponent =1;_gdeb .ColorComponents =1;}else {if _ecf .BitsPerComponent ==nil {_bc .Log .Debug ("\u0049\u006el\u0069\u006e\u0065\u0020\u0042\u0069\u0074\u0073\u0020\u0070\u0065\u0072\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u0020\u002d\u0020\u0061\u0073\u0073\u0075\u006d\u0069\u006e\u0067\u0020\u0038");
_gdeb .BitsPerComponent =8;}else {_cde ,_eea :=_ecf .BitsPerComponent .(*_f .PdfObjectInteger );if !_eea {_bc .Log .Debug ("E\u0072\u0072\u006f\u0072\u0020\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0062\u0069\u0074\u0073 p\u0065\u0072\u0020\u0063o\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0020\u0076al\u0075\u0065,\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_ecf .BitsPerComponent );
return nil ,_g .New ("\u0042\u0050\u0043\u0020\u0054\u0079\u0070\u0065\u0020e\u0072\u0072\u006f\u0072");};_gdeb .BitsPerComponent =int (*_cde );};if _ecf .ColorSpace !=nil {_feaf ,_cdcb :=_ecf .GetColorSpace (_aac );if _cdcb !=nil {return nil ,_cdcb ;};
_gdeb .ColorComponents =_feaf .GetNumComponents ();}else {_bc .Log .Debug ("\u0049\u006el\u0069\u006e\u0065\u0020\u0049\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063e\u0020\u006e\u006f\u0074\u0020\u0073p\u0065\u0063\u0069\u0066\u0069\u0065\u0064\u0020\u002d\u0020\u0061\u0073\u0073\u0075m\u0069\u006eg\u0020\u0031\u0020\u0063o\u006c\u006f\u0072\u0020\u0063o\u006d\u0070\u006f\u006e\u0065\u006e\u0074");
_gdeb .ColorComponents =1;};};if _edg ,_ebgc :=_f .GetArray (_ecf .Decode );_ebgc {_gdeb .Decode ,_gbdc =_edg .ToFloat64Array ();if _gbdc !=nil {return nil ,_gbdc ;};};_ecf ._bdgb =&_gdeb ;return _ecf ._bdgb ,nil ;};

// Add_TJ appends 'TJ' operand to the content stream:
// Show one or more text string. Array of numbers (displacement) and strings.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_gac *ContentCreator )Add_TJ (vals ..._f .PdfObject )*ContentCreator {_eda :=ContentStreamOperation {};_eda .Operand ="\u0054\u004a";_eda .Params =[]_f .PdfObject {_f .MakeArray (vals ...)};_gac ._ag =append (_gac ._ag ,&_eda );return _gac ;};

// Parse parses all commands in content stream, returning a list of operation data.
func (_ade *ContentStreamParser )Parse ()(*ContentStreamOperations ,error ){_fecb :=ContentStreamOperations {};for {_aeb :=ContentStreamOperation {};for {_acbg ,_dbe ,_gbfb :=_ade .parseObject ();if _gbfb !=nil {if _gbfb ==_gd .EOF {return &_fecb ,nil ;
};return &_fecb ,_gbfb ;};if _dbe {_aeb .Operand ,_ =_f .GetStringVal (_acbg );_fecb =append (_fecb ,&_aeb );break ;}else {_aeb .Params =append (_aeb .Params ,_acbg );};};if _aeb .Operand =="\u0042\u0049"{_degf ,_caeb :=_ade .ParseInlineImage ();if _caeb !=nil {return &_fecb ,_caeb ;
};_aeb .Params =append (_aeb .Params ,_degf );};};};

// Push pushes `gs` on the `gsStack`.
func (_ecd *GraphicStateStack )Push (gs GraphicsState ){*_ecd =append (*_ecd ,gs )};

// Add_M adds 'M' operand to the content stream: Set the miter limit (graphics state).
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_fff *ContentCreator )Add_M (miterlimit float64 )*ContentCreator {_gff :=ContentStreamOperation {};_gff .Operand ="\u004d";_gff .Params =_adcg ([]float64 {miterlimit });_fff ._ag =append (_fff ._ag ,&_gff );return _fff ;};

// Add_b_starred appends 'b*' operand to the content stream:
// Close, fill and then stroke the path (even-odd winding number rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_dgg *ContentCreator )Add_b_starred ()*ContentCreator {_gfg :=ContentStreamOperation {};_gfg .Operand ="\u0062\u002a";_dgg ._ag =append (_dgg ._ag ,&_gfg );return _dgg ;};

// Translate applies a simple x-y translation to the transformation matrix.
func (_dcg *ContentCreator )Translate (tx ,ty float64 )*ContentCreator {return _dcg .Add_cm (1,0,0,1,tx ,ty );};

// Add_quote appends "'" operand to the content stream:
// Move to next line and show a string.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_dda *ContentCreator )Add_quote (textstr _f .PdfObjectString )*ContentCreator {_caa :=ContentStreamOperation {};_caa .Operand ="\u0027";_caa .Params =_afc ([]_f .PdfObjectString {textstr });_dda ._ag =append (_dda ._ag ,&_caa );return _dda ;};

// String returns `ops.Bytes()` as a string.
func (_eef *ContentStreamOperations )String ()string {return string (_eef .Bytes ())};

// SetNonStrokingColor sets the non-stroking `color` where color can be one of
// PdfColorDeviceGray, PdfColorDeviceRGB, or PdfColorDeviceCMYK.
func (_bfcb *ContentCreator )SetNonStrokingColor (color _ba .PdfColor )*ContentCreator {switch _fbd :=color .(type ){case *_ba .PdfColorDeviceGray :_bfcb .Add_g (_fbd .Val ());case *_ba .PdfColorDeviceRGB :_bfcb .Add_rg (_fbd .R (),_fbd .G (),_fbd .B ());
case *_ba .PdfColorDeviceCMYK :_bfcb .Add_k (_fbd .C (),_fbd .M (),_fbd .Y (),_fbd .K ());case *_ba .PdfColorPatternType2 :_bfcb .Add_cs (*_f .MakeName ("\u0050a\u0074\u0074\u0065\u0072\u006e"));_bfcb .Add_scn_pattern (_fbd .PatternName );case *_ba .PdfColorPatternType3 :_bfcb .Add_cs (*_f .MakeName ("\u0050a\u0074\u0074\u0065\u0072\u006e"));
_bfcb .Add_scn_pattern (_fbd .PatternName );default:_bc .Log .Debug ("\u0053\u0065\u0074N\u006f\u006e\u0053\u0074\u0072\u006f\u006b\u0069\u006e\u0067\u0043\u006f\u006c\u006f\u0072\u003a\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020c\u006f\u006c\u006f\u0072\u003a\u0020\u0025\u0054",_fbd );
};return _bfcb ;};var _cef =map[string ]struct{}{"\u0062":struct{}{},"\u0042":struct{}{},"\u0062\u002a":struct{}{},"\u0042\u002a":struct{}{},"\u0042\u0044\u0043":struct{}{},"\u0042\u0049":struct{}{},"\u0042\u004d\u0043":struct{}{},"\u0042\u0054":struct{}{},"\u0042\u0058":struct{}{},"\u0063":struct{}{},"\u0063\u006d":struct{}{},"\u0043\u0053":struct{}{},"\u0063\u0073":struct{}{},"\u0064":struct{}{},"\u0064\u0030":struct{}{},"\u0064\u0031":struct{}{},"\u0044\u006f":struct{}{},"\u0044\u0050":struct{}{},"\u0045\u0049":struct{}{},"\u0045\u004d\u0043":struct{}{},"\u0045\u0054":struct{}{},"\u0045\u0058":struct{}{},"\u0066":struct{}{},"\u0046":struct{}{},"\u0066\u002a":struct{}{},"\u0047":struct{}{},"\u0067":struct{}{},"\u0067\u0073":struct{}{},"\u0068":struct{}{},"\u0069":struct{}{},"\u0049\u0044":struct{}{},"\u006a":struct{}{},"\u004a":struct{}{},"\u004b":struct{}{},"\u006b":struct{}{},"\u006c":struct{}{},"\u006d":struct{}{},"\u004d":struct{}{},"\u004d\u0050":struct{}{},"\u006e":struct{}{},"\u0071":struct{}{},"\u0051":struct{}{},"\u0072\u0065":struct{}{},"\u0052\u0047":struct{}{},"\u0072\u0067":struct{}{},"\u0072\u0069":struct{}{},"\u0073":struct{}{},"\u0053":struct{}{},"\u0053\u0043":struct{}{},"\u0073\u0063":struct{}{},"\u0053\u0043\u004e":struct{}{},"\u0073\u0063\u006e":struct{}{},"\u0073\u0068":struct{}{},"\u0054\u002a":struct{}{},"\u0054\u0063":struct{}{},"\u0054\u0064":struct{}{},"\u0054\u0044":struct{}{},"\u0054\u0066":struct{}{},"\u0054\u006a":struct{}{},"\u0054\u004a":struct{}{},"\u0054\u004c":struct{}{},"\u0054\u006d":struct{}{},"\u0054\u0072":struct{}{},"\u0054\u0073":struct{}{},"\u0054\u0077":struct{}{},"\u0054\u007a":struct{}{},"\u0076":struct{}{},"\u0077":struct{}{},"\u0057":struct{}{},"\u0057\u002a":struct{}{},"\u0079":struct{}{},"\u0027":struct{}{},"\u0022":struct{}{}};
func (_baeb *ContentStreamProcessor )handleCommand_RG (_gdgb *ContentStreamOperation ,_gddg *_ba .PdfPageResources )error {_fgdf :=_ba .NewPdfColorspaceDeviceRGB ();if len (_gdgb .Params )!=_fgdf .GetNumComponents (){_bc .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020R\u0047");
_bc .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_gdgb .Params ),_fgdf );return _g .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};_cbea ,_gdfd :=_fgdf .ColorFromPdfObjects (_gdgb .Params );if _gdfd !=nil {return _gdfd ;};_baeb ._eeeb .ColorspaceStroking =_fgdf ;_baeb ._eeeb .ColorStroking =_cbea ;return nil ;};

// Add_Tw appends 'Tw' operand to the content stream:
// Set word spacing.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_cbdd *ContentCreator )Add_Tw (wordSpace float64 )*ContentCreator {_cdcf :=ContentStreamOperation {};_cdcf .Operand ="\u0054\u0077";_cdcf .Params =_adcg ([]float64 {wordSpace });_cbdd ._ag =append (_cbdd ._ag ,&_cdcf );return _cbdd ;};

// Add_Tr appends 'Tr' operand to the content stream:
// Set text rendering mode.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_cac *ContentCreator )Add_Tr (render int64 )*ContentCreator {_ddea :=ContentStreamOperation {};_ddea .Operand ="\u0054\u0072";_ddea .Params =_acbf ([]int64 {render });_cac ._ag =append (_cac ._ag ,&_ddea );return _cac ;};

// Bytes converts the content stream operations to a content stream byte presentation, i.e. the kind that can be
// stored as a PDF stream or string format.
func (_cc *ContentCreator )Bytes ()[]byte {return _cc ._ag .Bytes ()};

// ToImage exports the inline image to Image which can be transformed or exported easily.
// Page resources are needed to look up colorspace information.
func (_afae *ContentStreamInlineImage )ToImage (resources *_ba .PdfPageResources )(*_ba .Image ,error ){_ebff ,_dfe :=_afae .toImageBase (resources );if _dfe !=nil {return nil ,_dfe ;};_bae ,_dfe :=_deda (_afae );if _dfe !=nil {return nil ,_dfe ;};_dbgb ,_fdad :=_f .GetDict (_afae .DecodeParms );
if _fdad {_bae .UpdateParams (_dbgb );};_bc .Log .Trace ("\u0065n\u0063o\u0064\u0065\u0072\u003a\u0020\u0025\u002b\u0076\u0020\u0025\u0054",_bae ,_bae );_bc .Log .Trace ("\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065:\u0020\u0025\u002b\u0076",_afae );
_fgbg ,_dfe :=_bae .DecodeBytes (_afae ._ffa );if _dfe !=nil {return nil ,_dfe ;};_fdb :=&_ba .Image {Width :int64 (_ebff .Width ),Height :int64 (_ebff .Height ),BitsPerComponent :int64 (_ebff .BitsPerComponent ),ColorComponents :_ebff .ColorComponents ,Data :_fgbg };
if len (_ebff .Decode )> 0{for _acb :=0;_acb < len (_ebff .Decode );_acb ++{_ebff .Decode [_acb ]*=float64 ((int (1)<<uint (_ebff .BitsPerComponent ))-1);};_fdb .SetDecode (_ebff .Decode );};return _fdb ,nil ;};func (_beaf *ContentStreamParser )parseBool ()(_f .PdfObjectBool ,error ){_ffe ,_gge :=_beaf ._egfe .Peek (4);
if _gge !=nil {return _f .PdfObjectBool (false ),_gge ;};if (len (_ffe )>=4)&&(string (_ffe [:4])=="\u0074\u0072\u0075\u0065"){_beaf ._egfe .Discard (4);return _f .PdfObjectBool (true ),nil ;};_ffe ,_gge =_beaf ._egfe .Peek (5);if _gge !=nil {return _f .PdfObjectBool (false ),_gge ;
};if (len (_ffe )>=5)&&(string (_ffe [:5])=="\u0066\u0061\u006cs\u0065"){_beaf ._egfe .Discard (5);return _f .PdfObjectBool (false ),nil ;};return _f .PdfObjectBool (false ),_g .New ("\u0075n\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0062o\u006fl\u0065a\u006e\u0020\u0073\u0074\u0072\u0069\u006eg");
};func (_bcdd *ContentStreamProcessor )handleCommand_K (_ceae *ContentStreamOperation ,_dgba *_ba .PdfPageResources )error {_fab :=_ba .NewPdfColorspaceDeviceCMYK ();if len (_ceae .Params )!=_fab .GetNumComponents (){_bc .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_bc .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_ceae .Params ),_fab );return _g .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};_bage ,_cdcbb :=_fab .ColorFromPdfObjects (_ceae .Params );if _cdcbb !=nil {return _cdcbb ;};_bcdd ._eeeb .ColorspaceStroking =_fab ;_bcdd ._eeeb .ColorStroking =_bage ;return nil ;};

// Transform returns coordinates x, y transformed by the CTM.
func (_gfcd *GraphicsState )Transform (x ,y float64 )(float64 ,float64 ){return _gfcd .CTM .Transform (x ,y );};

// Add_q adds 'q' operand to the content stream: Pushes the current graphics state on the stack.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_aaa *ContentCreator )Add_q ()*ContentCreator {_dba :=ContentStreamOperation {};_dba .Operand ="\u0071";_aaa ._ag =append (_aaa ._ag ,&_dba );return _aaa ;};

// Add_d adds 'd' operand to the content stream: Set the line dash pattern.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_dcc *ContentCreator )Add_d (dashArray []int64 ,dashPhase int64 )*ContentCreator {_cgg :=ContentStreamOperation {};_cgg .Operand ="\u0064";_cgg .Params =[]_f .PdfObject {};_cgg .Params =append (_cgg .Params ,_f .MakeArrayFromIntegers64 (dashArray ));
_cgg .Params =append (_cgg .Params ,_f .MakeInteger (dashPhase ));_dcc ._ag =append (_dcc ._ag ,&_cgg );return _dcc ;};func (_eccf *ContentStreamParser )parseNull ()(_f .PdfObjectNull ,error ){_ ,_efe :=_eccf ._egfe .Discard (4);return _f .PdfObjectNull {},_efe ;
};

// Add_RG appends 'RG' operand to the content stream:
// Set the stroking colorspace to DeviceRGB and sets the r,g,b colors (0-1 each).
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_gcaa *ContentCreator )Add_RG (r ,g ,b float64 )*ContentCreator {_eebf :=ContentStreamOperation {};_eebf .Operand ="\u0052\u0047";_eebf .Params =_adcg ([]float64 {r ,g ,b });_gcaa ._ag =append (_gcaa ._ag ,&_eebf );return _gcaa ;};func (_gcaf *ContentStreamProcessor )handleCommand_SC (_cdge *ContentStreamOperation ,_gfaf *_ba .PdfPageResources )error {_eace :=_gcaf ._eeeb .ColorspaceStroking ;
if len (_cdge .Params )!=_eace .GetNumComponents (){_bc .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_bc .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_cdge .Params ),_eace );return _g .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};_cbg ,_fdd :=_eace .ColorFromPdfObjects (_cdge .Params );if _fdd !=nil {return _fdd ;};_gcaf ._eeeb .ColorStroking =_cbg ;return nil ;};func _agg (_bccg _ba .PdfColorspace )bool {_ ,_dgbg :=_bccg .(*_ba .PdfColorspaceSpecialPattern );return _dgbg ;};
func _baa (_egf *ContentStreamInlineImage ,_bdga *_f .PdfObjectDictionary )(*_f .FlateEncoder ,error ){_gfb :=_f .NewFlateEncoder ();if _egf ._bdgb !=nil {_gfb .SetImage (_egf ._bdgb );};if _bdga ==nil {_ddgb :=_egf .DecodeParms ;if _ddgb !=nil {_cfda ,_bga :=_f .GetDict (_ddgb );
if !_bga {_bc .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073\u0020n\u006f\u0074\u0020\u0061\u0020\u0064\u0069\u0063\u0074\u0069on\u0061\u0072\u0079 \u0028%\u0054\u0029",_ddgb );return nil ,_ec .Errorf ("\u0069\u006e\u0076\u0061li\u0064\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073");
};_bdga =_cfda ;};};if _bdga ==nil {return _gfb ,nil ;};_bc .Log .Trace ("\u0064\u0065\u0063\u006f\u0064\u0065\u0020\u0070\u0061\u0072\u0061\u006ds\u003a\u0020\u0025\u0073",_bdga .String ());_ada :=_bdga .Get ("\u0050r\u0065\u0064\u0069\u0063\u0074\u006fr");
if _ada ==nil {_bc .Log .Debug ("E\u0072\u0072o\u0072\u003a\u0020\u0050\u0072\u0065\u0064\u0069\u0063\u0074\u006f\u0072\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067 \u0066\u0072\u006f\u006d\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073 \u002d\u0020\u0043\u006f\u006e\u0074\u0069\u006e\u0075\u0065\u0020\u0077\u0069t\u0068\u0020\u0064\u0065\u0066\u0061\u0075\u006c\u0074\u0020\u00281\u0029");
}else {_ged ,_dbba :=_ada .(*_f .PdfObjectInteger );if !_dbba {_bc .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0050\u0072\u0065d\u0069\u0063\u0074\u006f\u0072\u0020\u0073pe\u0063\u0069\u0066\u0069e\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u006f\u0074 n\u0075\u006de\u0072\u0069\u0063\u0020\u0028\u0025\u0054\u0029",_ada );
return nil ,_ec .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0072\u0065\u0064i\u0063\u0074\u006f\u0072");};_gfb .Predictor =int (*_ged );};_ada =_bdga .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");
if _ada !=nil {_cacg ,_bcbf :=_ada .(*_f .PdfObjectInteger );if !_bcbf {_bc .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0049n\u0076\u0061\u006c\u0069\u0064\u0020\u0042i\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");
return nil ,_ec .Errorf ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020\u0042\u0069\u0074\u0073\u0050e\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");};_gfb .BitsPerComponent =int (*_cacg );};if _gfb .Predictor > 1{_gfb .Columns =1;_ada =_bdga .Get ("\u0043o\u006c\u0075\u006d\u006e\u0073");
if _ada !=nil {_gbf ,_daa :=_ada .(*_f .PdfObjectInteger );if !_daa {return nil ,_ec .Errorf ("\u0070r\u0065\u0064\u0069\u0063\u0074\u006f\u0072\u0020\u0063\u006f\u006cu\u006d\u006e\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064");};_gfb .Columns =int (*_gbf );
};_gfb .Colors =1;_eff :=_bdga .Get ("\u0043\u006f\u006c\u006f\u0072\u0073");if _eff !=nil {_dgdd ,_fgee :=_eff .(*_f .PdfObjectInteger );if !_fgee {return nil ,_ec .Errorf ("\u0070\u0072\u0065d\u0069\u0063\u0074\u006fr\u0020\u0063\u006f\u006c\u006f\u0072\u0073 \u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072");
};_gfb .Colors =int (*_dgdd );};};return _gfb ,nil ;};const (HandlerConditionEnumOperand HandlerConditionEnum =iota ;HandlerConditionEnumAllOperands ;);

// GraphicsState is a basic graphics state implementation for PDF processing.
// Initially only implementing and tracking a portion of the information specified. Easy to add more.
type GraphicsState struct{ColorspaceStroking _ba .PdfColorspace ;ColorspaceNonStroking _ba .PdfColorspace ;ColorStroking _ba .PdfColor ;ColorNonStroking _ba .PdfColor ;CTM _ece .Matrix ;};func (_cgdb *ContentStreamParser )parseString ()(*_f .PdfObjectString ,error ){_cgdb ._egfe .ReadByte ();
var _feafc []byte ;_dagf :=1;for {_bade ,_gfc :=_cgdb ._egfe .Peek (1);if _gfc !=nil {return _f .MakeString (string (_feafc )),_gfc ;};if _bade [0]=='\\'{_cgdb ._egfe .ReadByte ();_ead ,_cda :=_cgdb ._egfe .ReadByte ();if _cda !=nil {return _f .MakeString (string (_feafc )),_cda ;
};if _f .IsOctalDigit (_ead ){_egbg ,_gdag :=_cgdb ._egfe .Peek (2);if _gdag !=nil {return _f .MakeString (string (_feafc )),_gdag ;};var _gcg []byte ;_gcg =append (_gcg ,_ead );for _ ,_cga :=range _egbg {if _f .IsOctalDigit (_cga ){_gcg =append (_gcg ,_cga );
}else {break ;};};_cgdb ._egfe .Discard (len (_gcg )-1);_bc .Log .Trace ("\u004e\u0075\u006d\u0065ri\u0063\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0022\u0025\u0073\u0022",_gcg );_bed ,_gdag :=_d .ParseUint (string (_gcg ),8,32);if _gdag !=nil {return _f .MakeString (string (_feafc )),_gdag ;
};_feafc =append (_feafc ,byte (_bed ));continue ;};switch _ead {case 'n':_feafc =append (_feafc ,'\n');case 'r':_feafc =append (_feafc ,'\r');case 't':_feafc =append (_feafc ,'\t');case 'b':_feafc =append (_feafc ,'\b');case 'f':_feafc =append (_feafc ,'\f');
case '(':_feafc =append (_feafc ,'(');case ')':_feafc =append (_feafc ,')');case '\\':_feafc =append (_feafc ,'\\');};continue ;}else if _bade [0]=='('{_dagf ++;}else if _bade [0]==')'{_dagf --;if _dagf ==0{_cgdb ._egfe .ReadByte ();break ;};};_feafd ,_ :=_cgdb ._egfe .ReadByte ();
_feafc =append (_feafc ,_feafd );};return _f .MakeString (string (_feafc )),nil ;};

// Add_ET appends 'ET' operand to the content stream:
// End text.
//
// See section 9.4 "Text Objects" and Table 107 (p. 256 PDF32000_2008).
func (_gbd *ContentCreator )Add_ET ()*ContentCreator {_afd :=ContentStreamOperation {};_afd .Operand ="\u0045\u0054";_gbd ._ag =append (_gbd ._ag ,&_afd );return _gbd ;};

// Add_BT appends 'BT' operand to the content stream:
// Begin text.
//
// See section 9.4 "Text Objects" and Table 107 (p. 256 PDF32000_2008).
func (_dgc *ContentCreator )Add_BT ()*ContentCreator {_geff :=ContentStreamOperation {};_geff .Operand ="\u0042\u0054";_dgc ._ag =append (_dgc ._ag ,&_geff );return _dgc ;};func (_cff *ContentStreamInlineImage )String ()string {_bdee :=_ec .Sprintf ("I\u006el\u0069\u006e\u0065\u0049\u006d\u0061\u0067\u0065(\u006c\u0065\u006e\u003d%d\u0029\u000a",len (_cff ._ffa ));
if _cff .BitsPerComponent !=nil {_bdee +="\u002d\u0020\u0042\u0050\u0043\u0020"+_cff .BitsPerComponent .WriteString ()+"\u000a";};if _cff .ColorSpace !=nil {_bdee +="\u002d\u0020\u0043S\u0020"+_cff .ColorSpace .WriteString ()+"\u000a";};if _cff .Decode !=nil {_bdee +="\u002d\u0020\u0044\u0020"+_cff .Decode .WriteString ()+"\u000a";
};if _cff .DecodeParms !=nil {_bdee +="\u002d\u0020\u0044P\u0020"+_cff .DecodeParms .WriteString ()+"\u000a";};if _cff .Filter !=nil {_bdee +="\u002d\u0020\u0046\u0020"+_cff .Filter .WriteString ()+"\u000a";};if _cff .Height !=nil {_bdee +="\u002d\u0020\u0048\u0020"+_cff .Height .WriteString ()+"\u000a";
};if _cff .ImageMask !=nil {_bdee +="\u002d\u0020\u0049M\u0020"+_cff .ImageMask .WriteString ()+"\u000a";};if _cff .Intent !=nil {_bdee +="\u002d \u0049\u006e\u0074\u0065\u006e\u0074 "+_cff .Intent .WriteString ()+"\u000a";};if _cff .Interpolate !=nil {_bdee +="\u002d\u0020\u0049\u0020"+_cff .Interpolate .WriteString ()+"\u000a";
};if _cff .Width !=nil {_bdee +="\u002d\u0020\u0057\u0020"+_cff .Width .WriteString ()+"\u000a";};return _bdee ;};

// NewContentCreator returns a new initialized ContentCreator.
func NewContentCreator ()*ContentCreator {_cdc :=&ContentCreator {};_cdc ._ag =ContentStreamOperations {};return _cdc ;};

// Operand returns true if `hce` is equivalent to HandlerConditionEnumOperand.
func (_ddcg HandlerConditionEnum )Operand ()bool {return _ddcg ==HandlerConditionEnumOperand };

// Add_scn appends 'scn' operand to the content stream:
// Same as SC but for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_bdeg *ContentCreator )Add_scn (c ...float64 )*ContentCreator {_bcb :=ContentStreamOperation {};_bcb .Operand ="\u0073\u0063\u006e";_bcb .Params =_adcg (c );_bdeg ._ag =append (_bdeg ._ag ,&_bcb );return _bdeg ;};func _ceg (_gbfc *ContentStreamInlineImage )(*_f .DCTEncoder ,error ){_gdea :=_f .NewDCTEncoder ();
_ggde :=_db .NewReader (_gbfc ._ffa );_bbg ,_gcae :=_bd .DecodeConfig (_ggde );if _gcae !=nil {_bc .Log .Debug ("\u0045\u0072\u0072or\u0020\u0064\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0066\u0069\u006c\u0065\u003a\u0020\u0025\u0073",_gcae );return nil ,_gcae ;
};switch _bbg .ColorModel {case _e .RGBAModel :_gdea .BitsPerComponent =8;_gdea .ColorComponents =3;case _e .RGBA64Model :_gdea .BitsPerComponent =16;_gdea .ColorComponents =3;case _e .GrayModel :_gdea .BitsPerComponent =8;_gdea .ColorComponents =1;case _e .Gray16Model :_gdea .BitsPerComponent =16;
_gdea .ColorComponents =1;case _e .CMYKModel :_gdea .BitsPerComponent =8;_gdea .ColorComponents =4;case _e .YCbCrModel :_gdea .BitsPerComponent =8;_gdea .ColorComponents =3;default:return nil ,_g .New ("\u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u006d\u006f\u0064\u0065\u006c");
};_gdea .Width =_bbg .Width ;_gdea .Height =_bbg .Height ;_bc .Log .Trace ("\u0044\u0043T\u0020\u0045\u006ec\u006f\u0064\u0065\u0072\u003a\u0020\u0025\u002b\u0076",_gdea );return _gdea ,nil ;};

// IsMask checks if an image is a mask.
// The image mask entry in the image dictionary specifies that the image data shall be used as a stencil
// mask for painting in the current color. The mask data is 1bpc, grayscale.
func (_deb *ContentStreamInlineImage )IsMask ()(bool ,error ){if _deb .ImageMask !=nil {_bad ,_gdg :=_deb .ImageMask .(*_f .PdfObjectBool );if !_gdg {_bc .Log .Debug ("\u0049m\u0061\u0067\u0065\u0020\u006d\u0061\u0073\u006b\u0020\u006e\u006ft\u0020\u0061\u0020\u0062\u006f\u006f\u006c\u0065\u0061\u006e");
return false ,_g .New ("\u0069\u006e\u0076\u0061li\u0064\u0020\u006f\u0062\u006a\u0065\u0063\u0074\u0020\u0074\u0079\u0070\u0065");};return bool (*_bad ),nil ;};return false ,nil ;};

// RotateDeg applies a rotation to the transformation matrix.
func (_cbf *ContentCreator )RotateDeg (angle float64 )*ContentCreator {_aae :=_ed .Cos (angle *_ed .Pi /180.0);_ae :=_ed .Sin (angle *_ed .Pi /180.0);_ded :=-_ed .Sin (angle *_ed .Pi /180.0);_fgb :=_ed .Cos (angle *_ed .Pi /180.0);return _cbf .Add_cm (_aae ,_ae ,_ded ,_fgb ,0,0);
};

// Add_sh appends 'sh' operand to the content stream:
// Paints the shape and colour shading described by a shading dictionary specified by `name`,
// subject to the current clipping path
//
// See section 8.7.4 "Shading Patterns" and Table 77 (p. 190 PDF32000_2008).
func (_gfe *ContentCreator )Add_sh (name _f .PdfObjectName )*ContentCreator {_gaa :=ContentStreamOperation {};_gaa .Operand ="\u0073\u0068";_gaa .Params =_aefe ([]_f .PdfObjectName {name });_gfe ._ag =append (_gfe ._ag ,&_gaa );return _gfe ;};

// Add_k appends 'k' operand to the content stream:
// Same as K but used for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_dag *ContentCreator )Add_k (c ,m ,y ,k float64 )*ContentCreator {_gbe :=ContentStreamOperation {};_gbe .Operand ="\u006b";_gbe .Params =_adcg ([]float64 {c ,m ,y ,k });_dag ._ag =append (_dag ._ag ,&_gbe );return _dag ;};func _afc (_faga []_f .PdfObjectString )[]_f .PdfObject {var _gfff []_f .PdfObject ;
for _ ,_fgce :=range _faga {_gfff =append (_gfff ,_f .MakeString (_fgce .Str ()));};return _gfff ;};

// GetEncoder returns the encoder of the inline image.
func (_bgf *ContentStreamInlineImage )GetEncoder ()(_f .StreamEncoder ,error ){return _deda (_bgf )};

// HandlerFunc is the function syntax that the ContentStreamProcessor handler must implement.
type HandlerFunc func (_ecdc *ContentStreamOperation ,_ebgcc GraphicsState ,_dgdae *_ba .PdfPageResources )error ;

// Add_SC appends 'SC' operand to the content stream:
// Set color for stroking operations.  Input: c1, ..., cn.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_feg *ContentCreator )Add_SC (c ...float64 )*ContentCreator {_dgb :=ContentStreamOperation {};_dgb .Operand ="\u0053\u0043";_dgb .Params =_adcg (c );_feg ._ag =append (_feg ._ag ,&_dgb );return _feg ;};

// ExtractText parses and extracts all text data in content streams and returns as a string.
// Does not take into account Encoding table, the output is simply the character codes.
//
// Deprecated: More advanced text extraction is offered in package extractor with character encoding support.
func (_dd *ContentStreamParser )ExtractText ()(string ,error ){_bab ,_gg :=_dd .Parse ();if _gg !=nil {return "",_gg ;};_bac :=false ;_cd ,_fd :=float64 (-1),float64 (-1);_fa :="";for _ ,_bff :=range *_bab {if _bff .Operand =="\u0042\u0054"{_bac =true ;
}else if _bff .Operand =="\u0045\u0054"{_bac =false ;};if _bff .Operand =="\u0054\u0064"||_bff .Operand =="\u0054\u0044"||_bff .Operand =="\u0054\u002a"{_fa +="\u000a";};if _bff .Operand =="\u0054\u006d"{if len (_bff .Params )!=6{continue ;};_gb ,_de :=_bff .Params [4].(*_f .PdfObjectFloat );
if !_de {_dbc ,_fdf :=_bff .Params [4].(*_f .PdfObjectInteger );if !_fdf {continue ;};_gb =_f .MakeFloat (float64 (*_dbc ));};_cg ,_de :=_bff .Params [5].(*_f .PdfObjectFloat );if !_de {_ge ,_gba :=_bff .Params [5].(*_f .PdfObjectInteger );if !_gba {continue ;
};_cg =_f .MakeFloat (float64 (*_ge ));};if _fd ==-1{_fd =float64 (*_cg );}else if _fd > float64 (*_cg ){_fa +="\u000a";_cd =float64 (*_gb );_fd =float64 (*_cg );continue ;};if _cd ==-1{_cd =float64 (*_gb );}else if _cd < float64 (*_gb ){_fa +="\u0009";
_cd =float64 (*_gb );};};if _bac &&_bff .Operand =="\u0054\u004a"{if len (_bff .Params )< 1{continue ;};_ab ,_af :=_bff .Params [0].(*_f .PdfObjectArray );if !_af {return "",_ec .Errorf ("\u0069\u006ev\u0061\u006c\u0069\u0064 \u0070\u0061r\u0061\u006d\u0065\u0074\u0065\u0072\u0020\u0074y\u0070\u0065\u002c\u0020\u006e\u006f\u0020\u0061\u0072\u0072\u0061\u0079 \u0028\u0025\u0054\u0029",_bff .Params [0]);
};for _ ,_gc :=range _ab .Elements (){switch _fe :=_gc .(type ){case *_f .PdfObjectString :_fa +=_fe .Str ();case *_f .PdfObjectFloat :if *_fe < -100{_fa +="\u0020";};case *_f .PdfObjectInteger :if *_fe < -100{_fa +="\u0020";};};};}else if _bac &&_bff .Operand =="\u0054\u006a"{if len (_bff .Params )< 1{continue ;
};_aa ,_gef :=_bff .Params [0].(*_f .PdfObjectString );if !_gef {return "",_ec .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0070\u0061\u0072\u0061\u006de\u0074\u0065\u0072\u0020\u0074\u0079p\u0065\u002c\u0020\u006e\u006f\u0074\u0020\u0073\u0074\u0072\u0069\u006e\u0067 \u0028\u0025\u0054\u0029",_bff .Params [0]);
};_fa +=_aa .Str ();};};return _fa ,nil ;};

// NewContentStreamProcessor returns a new ContentStreamProcessor for operations `ops`.
func NewContentStreamProcessor (ops []*ContentStreamOperation )*ContentStreamProcessor {_fcb :=ContentStreamProcessor {};_fcb ._dafc =GraphicStateStack {};_ebdd :=GraphicsState {};_fcb ._eeeb =_ebdd ;_fcb ._fgd =[]handlerEntry {};_fcb ._badc =0;_fcb ._aagc =ops ;
return &_fcb ;};

// Add_Tz appends 'Tz' operand to the content stream:
// Set horizontal scaling.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_bg *ContentCreator )Add_Tz (scale float64 )*ContentCreator {_cfg :=ContentStreamOperation {};_cfg .Operand ="\u0054\u007a";_cfg .Params =_adcg ([]float64 {scale });_bg ._ag =append (_bg ._ag ,&_cfg );return _bg ;};

// Add_f_starred appends 'f*' operand to the content stream.
// f*: Fill the path using the even-odd rule to determine fill region.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_dcea *ContentCreator )Add_f_starred ()*ContentCreator {_adc :=ContentStreamOperation {};_adc .Operand ="\u0066\u002a";_dcea ._ag =append (_dcea ._ag ,&_adc );return _dcea ;};

// Add_Ts appends 'Ts' operand to the content stream:
// Set text rise.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_ebb *ContentCreator )Add_Ts (rise float64 )*ContentCreator {_cfgf :=ContentStreamOperation {};_cfgf .Operand ="\u0054\u0073";_cfgf .Params =_adcg ([]float64 {rise });_ebb ._ag =append (_ebb ._ag ,&_cfgf );return _ebb ;};func (_edf *ContentStreamParser )parseNumber ()(_f .PdfObject ,error ){return _f .ParseNumber (_edf ._egfe );
};func (_dged *ContentStreamProcessor )handleCommand_cm (_fabf *ContentStreamOperation ,_bbac *_ba .PdfPageResources )error {if len (_fabf .Params )!=6{_bc .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020\u0063\u006d\u003a\u0020\u0025\u0064",len (_fabf .Params ));
return _g .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_ecgc ,_gagd :=_f .GetNumbersAsFloat (_fabf .Params );if _gagd !=nil {return _gagd ;
};_fdge :=_ece .NewMatrix (_ecgc [0],_ecgc [1],_ecgc [2],_ecgc [3],_ecgc [4],_ecgc [5]);_dged ._eeeb .CTM .Concat (_fdge );return nil ;};

// Pop pops and returns the topmost GraphicsState off the `gsStack`.
func (_bagc *GraphicStateStack )Pop ()GraphicsState {_cadg :=(*_bagc )[len (*_bagc )-1];*_bagc =(*_bagc )[:len (*_bagc )-1];return _cadg ;};func (_adaa *ContentStreamProcessor )handleCommand_scn (_efdb *ContentStreamOperation ,_bee *_ba .PdfPageResources )error {_dcef :=_adaa ._eeeb .ColorspaceNonStroking ;
if !_agg (_dcef ){if len (_efdb .Params )!=_dcef .GetNumComponents (){_bc .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_bc .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_efdb .Params ),_dcef );return _g .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};};_dadd ,_efba :=_dcef .ColorFromPdfObjects (_efdb .Params );if _efba !=nil {_bc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0046\u0061\u0069\u006c \u0074\u006f\u0020\u0067\u0065\u0074\u0020\u0063o\u006co\u0072\u0020\u0066\u0072\u006f\u006d\u0020\u0070\u0061\u0072\u0061\u006d\u0073\u003a\u0020\u0025\u002b\u0076 \u0028\u0043\u0053\u0020\u0069\u0073\u0020\u0025\u002b\u0076\u0029",_efdb .Params ,_dcef );
return _efba ;};_adaa ._eeeb .ColorNonStroking =_dadd ;return nil ;};

// Add_b appends 'b' operand to the content stream:
// Close, fill and then stroke the path (nonzero winding number rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_fba *ContentCreator )Add_b ()*ContentCreator {_fgg :=ContentStreamOperation {};_fgg .Operand ="\u0062";_fba ._ag =append (_fba ._ag ,&_fgg );return _fba ;};func _adcg (_fdbg []float64 )[]_f .PdfObject {var _efdf []_f .PdfObject ;for _ ,_aade :=range _fdbg {_efdf =append (_efdf ,_f .MakeFloat (_aade ));
};return _efdf ;};func (_ageb *ContentStreamParser )parseHexString ()(*_f .PdfObjectString ,error ){_ageb ._egfe .ReadByte ();_cbad :=[]byte ("\u0030\u0031\u0032\u003345\u0036\u0037\u0038\u0039\u0061\u0062\u0063\u0064\u0065\u0066\u0041\u0042\u0043\u0044E\u0046");
var _egba []byte ;for {_ageb .skipSpaces ();_bceb ,_dagc :=_ageb ._egfe .Peek (1);if _dagc !=nil {return _f .MakeString (""),_dagc ;};if _bceb [0]=='>'{_ageb ._egfe .ReadByte ();break ;};_dcae ,_ :=_ageb ._egfe .ReadByte ();if _db .IndexByte (_cbad ,_dcae )>=0{_egba =append (_egba ,_dcae );
};};if len (_egba )%2==1{_egba =append (_egba ,'0');};_afb ,_ :=_cb .DecodeString (string (_egba ));return _f .MakeHexString (string (_afb )),nil ;};

// Add_B_starred appends 'B*' operand to the content stream:
// Fill and then stroke the path (even-odd rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_eb *ContentCreator )Add_B_starred ()*ContentCreator {_ffd :=ContentStreamOperation {};_ffd .Operand ="\u0042\u002a";_eb ._ag =append (_eb ._ag ,&_ffd );return _eb ;};

// GraphicStateStack represents a stack of GraphicsState.
type GraphicStateStack []GraphicsState ;

// Add_c adds 'c' operand to the content stream: Append a Bezier curve to the current path from
// the current point to (x3,y3) with (x1,x1) and (x2,y2) as control points.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_fge *ContentCreator )Add_c (x1 ,y1 ,x2 ,y2 ,x3 ,y3 float64 )*ContentCreator {_egb :=ContentStreamOperation {};_egb .Operand ="\u0063";_egb .Params =_adcg ([]float64 {x1 ,y1 ,x2 ,y2 ,x3 ,y3 });_fge ._ag =append (_fge ._ag ,&_egb );return _fge ;};
func (_dc *ContentStreamOperations )isWrapped ()bool {if len (*_dc )< 2{return false ;};_da :=0;for _ ,_ee :=range *_dc {if _ee .Operand =="\u0071"{_da ++;}else if _ee .Operand =="\u0051"{_da --;}else {if _da < 1{return false ;};};};return _da ==0;};

// Add_s appends 's' operand to the content stream: Close and stroke the path.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_fga *ContentCreator )Add_s ()*ContentCreator {_gefa :=ContentStreamOperation {};_gefa .Operand ="\u0073";_fga ._ag =append (_fga ._ag ,&_gefa );return _fga ;};func (_gebb *ContentStreamParser )parseName ()(_f .PdfObjectName ,error ){_bdfd :="";_cad :=false ;
for {_fdbb ,_bfd :=_gebb ._egfe .Peek (1);if _bfd ==_gd .EOF {break ;};if _bfd !=nil {return _f .PdfObjectName (_bdfd ),_bfd ;};if !_cad {if _fdbb [0]=='/'{_cad =true ;_gebb ._egfe .ReadByte ();}else {_bc .Log .Error ("N\u0061\u006d\u0065\u0020\u0073\u0074a\u0072\u0074\u0069\u006e\u0067\u0020\u0077\u0069\u0074h\u0020\u0025\u0073 \u0028%\u0020\u0078\u0029",_fdbb ,_fdbb );
return _f .PdfObjectName (_bdfd ),_ec .Errorf ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006ea\u006d\u0065:\u0020\u0028\u0025\u0063\u0029",_fdbb [0]);};}else {if _f .IsWhiteSpace (_fdbb [0]){break ;}else if (_fdbb [0]=='/')||(_fdbb [0]=='[')||(_fdbb [0]=='(')||(_fdbb [0]==']')||(_fdbb [0]=='<')||(_fdbb [0]=='>'){break ;
}else if _fdbb [0]=='#'{_bbeg ,_cbda :=_gebb ._egfe .Peek (3);if _cbda !=nil {return _f .PdfObjectName (_bdfd ),_cbda ;};_gebb ._egfe .Discard (3);_beb ,_cbda :=_cb .DecodeString (string (_bbeg [1:3]));if _cbda !=nil {return _f .PdfObjectName (_bdfd ),_cbda ;
};_bdfd +=string (_beb );}else {_ecb ,_ :=_gebb ._egfe .ReadByte ();_bdfd +=string (_ecb );};};};return _f .PdfObjectName (_bdfd ),nil ;};

// Add_g appends 'g' operand to the content stream:
// Same as G but used for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_gae *ContentCreator )Add_g (gray float64 )*ContentCreator {_bdc :=ContentStreamOperation {};_bdc .Operand ="\u0067";_bdc .Params =_adcg ([]float64 {gray });_gae ._ag =append (_gae ._ag ,&_bdc );return _gae ;};

// Add_scn_pattern appends 'scn' operand to the content stream for pattern `name`:
// scn with name attribute (for pattern). Syntax: c1 ... cn name scn.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_egbe *ContentCreator )Add_scn_pattern (name _f .PdfObjectName ,c ...float64 )*ContentCreator {_fda :=ContentStreamOperation {};_fda .Operand ="\u0073\u0063\u006e";_fda .Params =_adcg (c );_fda .Params =append (_fda .Params ,_f .MakeName (string (name )));
_egbe ._ag =append (_egbe ._ag ,&_fda );return _egbe ;};

// WriteString outputs the object as it is to be written to file.
func (_ffda *ContentStreamInlineImage )WriteString ()string {var _adae _db .Buffer ;_acf :="";if _ffda .BitsPerComponent !=nil {_acf +="\u002f\u0042\u0050C\u0020"+_ffda .BitsPerComponent .WriteString ()+"\u000a";};if _ffda .ColorSpace !=nil {_acf +="\u002f\u0043\u0053\u0020"+_ffda .ColorSpace .WriteString ()+"\u000a";
};if _ffda .Decode !=nil {_acf +="\u002f\u0044\u0020"+_ffda .Decode .WriteString ()+"\u000a";};if _ffda .DecodeParms !=nil {_acf +="\u002f\u0044\u0050\u0020"+_ffda .DecodeParms .WriteString ()+"\u000a";};if _ffda .Filter !=nil {_acf +="\u002f\u0046\u0020"+_ffda .Filter .WriteString ()+"\u000a";
};if _ffda .Height !=nil {_acf +="\u002f\u0048\u0020"+_ffda .Height .WriteString ()+"\u000a";};if _ffda .ImageMask !=nil {_acf +="\u002f\u0049\u004d\u0020"+_ffda .ImageMask .WriteString ()+"\u000a";};if _ffda .Intent !=nil {_acf +="\u002f\u0049\u006e\u0074\u0065\u006e\u0074\u0020"+_ffda .Intent .WriteString ()+"\u000a";
};if _ffda .Interpolate !=nil {_acf +="\u002f\u0049\u0020"+_ffda .Interpolate .WriteString ()+"\u000a";};if _ffda .Width !=nil {_acf +="\u002f\u0057\u0020"+_ffda .Width .WriteString ()+"\u000a";};_adae .WriteString (_acf );_adae .WriteString ("\u0049\u0044\u0020");
_adae .Write (_ffda ._ffa );_adae .WriteString ("\u000a\u0045\u0049\u000a");return _adae .String ();};

// String is same as Bytes() except returns as a string for convenience.
func (_cea *ContentCreator )String ()string {return string (_cea ._ag .Bytes ())};