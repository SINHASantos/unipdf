//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package unichart ;import (_e "bytes";_c "fmt";_gg "github.com/unidoc/unichart/render";_eb "github.com/unidoc/unipdf/v4/common";_a "github.com/unidoc/unipdf/v4/contentstream";_fe "github.com/unidoc/unipdf/v4/contentstream/draw";_eed "github.com/unidoc/unipdf/v4/core";
_ee "github.com/unidoc/unipdf/v4/model";_f "image/color";_ge "io";_d "math";);func (_adg *Renderer )Text (text string ,x ,y int ){_adg ._gef .Add_q ();_adg .SetFont (_adg ._ebg );_dee ,_agd ,_fgg ,_ :=_dab (_adg ._db );_adg ._gef .Add_rg (_dee ,_agd ,_fgg );
_adg ._gef .Translate (float64 (x ),float64 (y )).Scale (1,-1);if _aee :=_adg ._gb ;_aee !=0{_adg ._gef .RotateDeg (_aee );};_adg ._gef .Add_BT ().Add_TL (_adg ._b );var (_afe =_adg ._ebg .Encoder ();_dg =_adg .wrapText (text );_cd =len (_dg ););for _ga ,_aff :=range _dg {_adg ._gef .Add_TJ (_eed .MakeStringFromBytes (_afe .Encode (_aff )));
if _ga !=_cd -1{_adg ._gef .Add_Tstar ();};};_adg ._gef .Add_ET ();_adg ._gef .Add_Q ();};func (_agb *Renderer )Close (){_agb ._gef .Add_h ()};func (_gcd *Renderer )MoveTo (x ,y int ){_gcd ._gef .Add_m (float64 (x ),float64 (y ))};func (_ege *Renderer )ArcTo (cx ,cy int ,rx ,ry ,startAngle ,deltaAngle float64 ){startAngle =_cdbc (2.0*_d .Pi -startAngle );
deltaAngle =_cdbc (-deltaAngle );_fa ,_bf :=deltaAngle ,1;if _d .Abs (deltaAngle )> 90.0{_bf =int (_d .Ceil (_d .Abs (deltaAngle )/90.0));_fa =deltaAngle /float64 (_bf );};var (_fge =_abd (_fa /2);_bcb =_d .Abs (4.0/3.0*(1.0-_d .Cos (_fge ))/_d .Sin (_fge ));
_gd =float64 (cx );_cg =float64 (cy ););for _cfc :=0;_cfc < _bf ;_cfc ++{_cfa :=_abd (startAngle +float64 (_cfc )*_fa );_eeb :=_abd (startAngle +float64 (_cfc +1)*_fa );_deg :=_d .Cos (_cfa );_feg :=_d .Cos (_eeb );_acc :=_d .Sin (_cfa );_ea :=_d .Sin (_eeb );
var _fgc []float64 ;if _fa > 0{_fgc =[]float64 {_gd +rx *_deg ,_cg -ry *_acc ,_gd +rx *(_deg -_bcb *_acc ),_cg -ry *(_acc +_bcb *_deg ),_gd +rx *(_feg +_bcb *_ea ),_cg -ry *(_ea -_bcb *_feg ),_gd +rx *_feg ,_cg -ry *_ea };}else {_fgc =[]float64 {_gd +rx *_deg ,_cg -ry *_acc ,_gd +rx *(_deg +_bcb *_acc ),_cg -ry *(_acc -_bcb *_deg ),_gd +rx *(_feg -_bcb *_ea ),_cg -ry *(_ea +_bcb *_feg ),_gd +rx *_feg ,_cg -ry *_ea };
};if _cfc ==0{_ege ._gef .Add_l (_fgc [0],_fgc [1]);};_ege ._gef .Add_c (_fgc [2],_fgc [3],_fgc [4],_fgc [5],_fgc [6],_fgc [7]);};};func _abd (_bda float64 )float64 {return _bda *_d .Pi /180.0};func (_ec *Renderer )SetStrokeColor (color _f .Color ){_ec ._ad =color ;
_efc ,_cf ,_ebf ,_ :=_dab (color );_ec ._gef .Add_RG (_efc ,_cf ,_ebf );};func NewRenderer (cc *_a .ContentCreator ,res *_ee .PdfPageResources )func (int ,int )(_gg .Renderer ,error ){return func (_aa ,_adc int )(_gg .Renderer ,error ){_bd :=&Renderer {_eg :_aa ,_ae :_adc ,_ef :72,_gef :cc ,_ce :res ,_dec :map[*_ee .PdfFont ]_eed .PdfObjectName {}};
_bd .ResetStyle ();return _bd ,nil ;};};func (_gc *Renderer )SetStrokeWidth (width float64 ){_gc ._aea =width ;_gc ._gef .Add_w (width )};func (_cfe *Renderer )QuadCurveTo (cx ,cy ,x ,y int ){_cfe ._gef .Add_v (float64 (x ),float64 (y ),float64 (cx ),float64 (cy ));
};func (_ca *Renderer )Stroke (){_ca ._gef .Add_S ()};func (_ebc *Renderer )MeasureText (text string )_gg .Box {_afd :=_ebc ._b ;_aba ,_gge :=_ebc ._ebg .GetFontDescriptor ();if _gge !=nil {_eb .Log .Debug ("W\u0041\u0052\u004e\u003a\u0020\u0055n\u0061\u0062\u006c\u0065\u0020\u0074o\u0020\u0067\u0065\u0074\u0020\u0066\u006fn\u0074\u0020\u0064\u0065\u0073\u0063\u0072\u0069\u0070\u0074o\u0072");
}else {_bbg ,_ecc :=_aba .GetCapHeight ();if _ecc !=nil {_eb .Log .Debug ("\u0057\u0041\u0052\u004e\u003a\u0020\u0055\u006e\u0061\u0062\u006c\u0065\u0020t\u006f\u0020\u0067\u0065\u0074\u0020f\u006f\u006e\u0074\u0020\u0063\u0061\u0070\u0020\u0068\u0065\u0069\u0067\u0068t\u003a\u0020\u0025\u0076",_ecc );
}else {_afd =_bbg /1000.0*_ebc ._b ;};};var (_bcbg =0.0;_eee =_ebc .wrapText (text ););for _ ,_ed :=range _eee {if _eda :=_ebc .getTextWidth (_ed );_eda > _bcbg {_bcbg =_eda ;};};_dgf :=_gg .NewBox (0,0,int (_bcbg ),int (_afd ));if _fb :=_ebc ._gb ;_fb !=0{_dgf =_dgf .Corners ().Rotate (_fb ).Box ();
};return _dgf ;};func (_ace *Renderer )GetDPI ()float64 {return _ace ._ef };func _cdbc (_egee float64 )float64 {return _egee *180/_d .Pi };func (_cgb *Renderer )ClearTextRotation (){_cgb ._gb =0};func _dab (_faa _f .Color )(float64 ,float64 ,float64 ,float64 ){_fc ,_caa ,_bec ,_bgf :=_cbg (_faa );
return float64 (_fc )/255,float64 (_caa )/255,float64 (_bec )/255,float64 (_bgf )/255;};func (_ggb *Renderer )Fill (){_ggb ._gef .Add_f ()};func _cc (_gbf string ,_aed int ,_cee func (_eed .PdfObjectName )bool )_eed .PdfObjectName {_bga :=_eed .PdfObjectName (_c .Sprintf ("\u0025\u0073\u0025\u0064",_gbf ,_aed ));
for _egg :=_aed ;_cee (_bga );{_egg ++;_bga =_eed .PdfObjectName (_c .Sprintf ("\u0025\u0073\u0025\u0064",_gbf ,_egg ));};return _bga ;};func (_bg *Renderer )getTextWidth (_cfcd string )float64 {var _ggf float64 ;for _ ,_cda :=range _cfcd {_gcc ,_eae :=_bg ._ebg .GetRuneMetrics (_cda );
if !_eae {_eb .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074e\u0064 \u0072u\u006e\u0065\u0020\u0025\u0076\u0020\u0069\u006e\u0020\u0066\u006f\u006e\u0074",_cda );};_ggf +=_gcc .Wx ;};return _bg ._b *_ggf /1000.0;
};func (_bb *Renderer )SetFont (font _gg .Font ){_gefa ,_gga :=font .(*_ee .PdfFont );if !_gga {_eb .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0069\u006e\u0076\u0061\u006c\u0069d\u0020\u0066\u006f\u006e\u0074\u0020\u0074\u0079\u0070\u0065");return ;
};_ega ,_gga :=_bb ._dec [_gefa ];if !_gga {_ega =_cc ("\u0046\u006f\u006e\u0074",1,_bb ._ce .HasFontByName );if _cec :=_bb ._ce .SetFontByName (_ega ,_gefa .ToPdfObject ());_cec !=nil {_eb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052:\u0020\u0063\u006f\u0075\u006c\u0064\u0020\u006e\u006f\u0074\u0020\u0061\u0064d\u0020\u0066\u006f\u006e\u0074\u0020\u0025\u0076\u0020\u0074\u006f\u0020\u0072\u0065\u0073\u006f\u0075\u0072\u0063\u0065\u0073",_gefa );
};_bb ._dec [_gefa ]=_ega ;};_bb ._gef .Add_Tf (_ega ,_bb ._b );_bb ._ebg =_gefa ;};func (_eef *Renderer )FillStroke (){_eef ._gef .Add_B ()};func (_ac *Renderer )ResetStyle (){_ac .SetFillColor (_f .Black );_ac .SetStrokeColor (_f .Transparent );_ac .SetStrokeWidth (0);
_ac .SetFont (_ee .DefaultFont ());_ac .SetFontColor (_f .Black );_ac .SetFontSize (12);_ac .SetTextRotation (0);};func (_deb *Renderer )LineTo (x ,y int ){_deb ._gef .Add_l (float64 (x ),float64 (y ))};func (_ffa *Renderer )Save (w _ge .Writer )error {if w ==nil {return nil ;
};_ ,_ecg :=_ge .Copy (w ,_e .NewBuffer (_ffa ._gef .Bytes ()));return _ecg ;};func (_aae *Renderer )Circle (radius float64 ,x ,y int ){_eebc :=radius ;if _ff :=_aae ._aea ;_ff !=0{_eebc -=_ff /2;};_dc :=_eebc *0.551784;_be :=_fe .CubicBezierPath {Curves :[]_fe .CubicBezierCurve {_fe .NewCubicBezierCurve (-_eebc ,0,-_eebc ,_dc ,-_dc ,_eebc ,0,_eebc ),_fe .NewCubicBezierCurve (0,_eebc ,_dc ,_eebc ,_eebc ,_dc ,_eebc ,0),_fe .NewCubicBezierCurve (_eebc ,0,_eebc ,-_dc ,_dc ,-_eebc ,0,-_eebc ),_fe .NewCubicBezierCurve (0,-_eebc ,-_dc ,-_eebc ,-_eebc ,-_dc ,-_eebc ,0)}};
if _cba :=_aae ._aea ;_cba !=0{_be =_be .Offset (_cba /2,_cba /2);};_be =_be .Offset (float64 (x ),float64 (y ));_fe .DrawBezierPathWithCreator (_be ,_aae ._gef );};func (_ada *Renderer )SetTextRotation (radians float64 ){_ada ._gb =_cdbc (-radians )};
func (_bc *Renderer )SetDPI (dpi float64 ){_bc ._ef =dpi };func (_eeff *Renderer )SetFontColor (color _f .Color ){_eeff ._db =color };func _cbg (_cad _f .Color )(uint8 ,uint8 ,uint8 ,uint8 ){_df ,_bfe ,_bde ,_fgb :=_cad .RGBA ();return uint8 (_df >>8),uint8 (_bfe >>8),uint8 (_bde >>8),uint8 (_fgb >>8);
};func (_ab *Renderer )SetFillColor (color _f .Color ){_ab ._de =color ;_ag ,_cb ,_fee ,_ :=_dab (color );_ab ._gef .Add_rg (_ag ,_cb ,_fee );};func (_fg *Renderer )SetStrokeDashArray (dashArray []float64 ){_af :=make ([]int64 ,len (dashArray ));for _ceb ,_da :=range dashArray {_af [_ceb ]=int64 (_da );
};_fg ._gef .Add_d (_af ,0);};func (_eca *Renderer )wrapText (_cdb string )[]string {var (_ffc []string ;_ece []rune ;);for _ ,_cff :=range _cdb {if _cff =='\n'{_ffc =append (_ffc ,string (_ece ));_ece =[]rune {};continue ;};_ece =append (_ece ,_cff );
};if len (_ece )> 0{_ffc =append (_ffc ,string (_ece ));};return _ffc ;};func (_egae *Renderer )SetFontSize (size float64 ){_egae ._b =size };type Renderer struct{_eg int ;_ae int ;_ef float64 ;_gef *_a .ContentCreator ;_ce *_ee .PdfPageResources ;_de _f .Color ;
_ad _f .Color ;_aea float64 ;_ebg *_ee .PdfFont ;_b float64 ;_db _f .Color ;_gb float64 ;_dec map[*_ee .PdfFont ]_eed .PdfObjectName ;};func (_efb *Renderer )SetClassName (name string ){};