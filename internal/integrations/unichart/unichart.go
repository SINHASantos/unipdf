//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package unichart ;import (_a "bytes";_e "fmt";_d "github.com/unidoc/unichart/render";_fe "github.com/unidoc/unipdf/v3/common";_bed "github.com/unidoc/unipdf/v3/contentstream";_ab "github.com/unidoc/unipdf/v3/contentstream/draw";_c "github.com/unidoc/unipdf/v3/core";
_be "github.com/unidoc/unipdf/v3/model";_ag "image/color";_bc "io";_b "math";);func _faf (_dec float64 )float64 {return _dec *_b .Pi /180.0};func (_cce *Renderer )ArcTo (cx ,cy int ,rx ,ry ,startAngle ,deltaAngle float64 ){startAngle =_gcea (2.0*_b .Pi -startAngle );
deltaAngle =_gcea (-deltaAngle );_fbe ,_aac :=deltaAngle ,1;if _b .Abs (deltaAngle )> 90.0{_aac =int (_b .Ceil (_b .Abs (deltaAngle )/90.0));_fbe =deltaAngle /float64 (_aac );};var (_cf =_faf (_fbe /2);_ccd =_b .Abs (4.0/3.0*(1.0-_b .Cos (_cf ))/_b .Sin (_cf ));
_abd =float64 (cx );_bcc =float64 (cy ););for _bfb :=0;_bfb < _aac ;_bfb ++{_eg :=_faf (startAngle +float64 (_bfb )*_fbe );_gc :=_faf (startAngle +float64 (_bfb +1)*_fbe );_ef :=_b .Cos (_eg );_bb :=_b .Cos (_gc );_cfd :=_b .Sin (_eg );_gb :=_b .Sin (_gc );
var _gg []float64 ;if _fbe > 0{_gg =[]float64 {_abd +rx *_ef ,_bcc -ry *_cfd ,_abd +rx *(_ef -_ccd *_cfd ),_bcc -ry *(_cfd +_ccd *_ef ),_abd +rx *(_bb +_ccd *_gb ),_bcc -ry *(_gb -_ccd *_bb ),_abd +rx *_bb ,_bcc -ry *_gb };}else {_gg =[]float64 {_abd +rx *_ef ,_bcc -ry *_cfd ,_abd +rx *(_ef +_ccd *_cfd ),_bcc -ry *(_cfd -_ccd *_ef ),_abd +rx *(_bb -_ccd *_gb ),_bcc -ry *(_gb +_ccd *_bb ),_abd +rx *_bb ,_bcc -ry *_gb };
};if _bfb ==0{_cce ._de .Add_l (_gg [0],_gg [1]);};_cce ._de .Add_c (_gg [2],_gg [3],_gg [4],_gg [5],_gg [6],_gg [7]);};};func (_dg *Renderer )SetStrokeWidth (width float64 ){_dg ._aa =width ;_dg ._de .Add_w (width )};func (_efe *Renderer )Text (text string ,x ,y int ){_efe ._de .Add_q ();
_efe .SetFont (_efe ._ded );_agc ,_gff ,_cae ,_ :=_gcb (_efe ._ge );_efe ._de .Add_rg (_agc ,_gff ,_cae );_efe ._de .Translate (float64 (x ),float64 (y )).Scale (1,-1);if _ffa :=_efe ._gea ;_ffa !=0{_efe ._de .RotateDeg (_ffa );};_efe ._de .Add_BT ().Add_TL (_efe ._eda );
var (_bdd =_efe ._ded .Encoder ();_cfdd =_efe .wrapText (text );_ce =len (_cfdd ););for _ecg ,_edfa :=range _cfdd {_efe ._de .Add_TJ (_c .MakeStringFromBytes (_bdd .Encode (_edfa )));if _ecg !=_ce -1{_efe ._de .Add_Tstar ();};};_efe ._de .Add_ET ();_efe ._de .Add_Q ();
};func (_cfdc *Renderer )Close (){_cfdc ._de .Add_h ()};func (_bdc *Renderer )ResetStyle (){_bdc .SetFillColor (_ag .Black );_bdc .SetStrokeColor (_ag .Transparent );_bdc .SetStrokeWidth (0);_bdc .SetFont (_be .DefaultFont ());_bdc .SetFontColor (_ag .Black );
_bdc .SetFontSize (12);_bdc .SetTextRotation (0);};func (_bcd *Renderer )SetDPI (dpi float64 ){_bcd ._g =dpi };func _gcea (_ga float64 )float64 {return _ga *180/_b .Pi };func (_ad *Renderer )SetClassName (name string ){};type Renderer struct{_bf int ;_bg int ;
_g float64 ;_de *_bed .ContentCreator ;_dc *_be .PdfPageResources ;_gf _ag .Color ;_ed _ag .Color ;_aa float64 ;_ded *_be .PdfFont ;_eda float64 ;_ge _ag .Color ;_gea float64 ;_bd map[*_be .PdfFont ]_c .PdfObjectName ;};func (_ec *Renderer )Circle (radius float64 ,x ,y int ){_cb :=radius ;
if _bbf :=_ec ._aa ;_bbf !=0{_cb -=_bbf /2;};_abc :=_cb *0.551784;_da :=_ab .CubicBezierPath {Curves :[]_ab .CubicBezierCurve {_ab .NewCubicBezierCurve (-_cb ,0,-_cb ,_abc ,-_abc ,_cb ,0,_cb ),_ab .NewCubicBezierCurve (0,_cb ,_abc ,_cb ,_cb ,_abc ,_cb ,0),_ab .NewCubicBezierCurve (_cb ,0,_cb ,-_abc ,_abc ,-_cb ,0,-_cb ),_ab .NewCubicBezierCurve (0,-_cb ,-_abc ,-_cb ,-_cb ,-_abc ,-_cb ,0)}};
if _ebg :=_ec ._aa ;_ebg !=0{_da =_da .Offset (_ebg /2,_ebg /2);};_da =_da .Offset (float64 (x ),float64 (y ));_ab .DrawBezierPathWithCreator (_da ,_ec ._de );};func (_fg *Renderer )SetStrokeDashArray (dashArray []float64 ){_ea :=make ([]int64 ,len (dashArray ));
for _eba ,_eag :=range dashArray {_ea [_eba ]=int64 (_eag );};_fg ._de .Add_d (_ea ,0);};func _fgg (_gce _ag .Color )(uint8 ,uint8 ,uint8 ,uint8 ){_eeg ,_dcc ,_aag ,_fed :=_gce .RGBA ();return uint8 (_eeg >>8),uint8 (_dcc >>8),uint8 (_aag >>8),uint8 (_fed >>8);
};func _edfag (_aab string ,_gdf int ,_bdga func (_c .PdfObjectName )bool )_c .PdfObjectName {_fdd :=_c .PdfObjectName (_e .Sprintf ("\u0025\u0073\u0025\u0064",_aab ,_gdf ));for _ddd :=_gdf ;_bdga (_fdd );{_ddd ++;_fdd =_c .PdfObjectName (_e .Sprintf ("\u0025\u0073\u0025\u0064",_aab ,_ddd ));
};return _fdd ;};func (_gga *Renderer )Stroke (){_gga ._de .Add_S ()};func (_cc *Renderer )QuadCurveTo (cx ,cy ,x ,y int ){_cc ._de .Add_v (float64 (x ),float64 (y ),float64 (cx ),float64 (cy ));};func _gcb (_gede _ag .Color )(float64 ,float64 ,float64 ,float64 ){_ba ,_fdb ,_gbcg ,_dab :=_fgg (_gede );
return float64 (_ba )/255,float64 (_fdb )/255,float64 (_gbcg )/255,float64 (_dab )/255;};func (_gbe *Renderer )getTextWidth (_aef string )float64 {var _bgc float64 ;for _ ,_cda :=range _aef {_bec ,_dac :=_gbe ._ded .GetRuneMetrics (_cda );if !_dac {_fe .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074e\u0064 \u0072u\u006e\u0065\u0020\u0025\u0076\u0020\u0069\u006e\u0020\u0066\u006f\u006e\u0074",_cda );
};_bgc +=_bec .Wx ;};return _gbe ._eda *_bgc /1000.0;};func (_ca *Renderer )SetFillColor (color _ag .Color ){_ca ._gf =color ;_ged ,_bdg ,_ac ,_ :=_gcb (color );_ca ._de .Add_rg (_ged ,_bdg ,_ac );};func (_gba *Renderer )ClearTextRotation (){_gba ._gea =0};
func (_cd *Renderer )SetTextRotation (radians float64 ){_cd ._gea =_gcea (-radians )};func NewRenderer (cc *_bed .ContentCreator ,res *_be .PdfPageResources )func (int ,int )(_d .Renderer ,error ){return func (_eb ,_gd int )(_d .Renderer ,error ){_ff :=&Renderer {_bf :_eb ,_bg :_gd ,_g :72,_de :cc ,_dc :res ,_bd :map[*_be .PdfFont ]_c .PdfObjectName {}};
_ff .ResetStyle ();return _ff ,nil ;};};func (_deb *Renderer )Fill (){_deb ._de .Add_f ()};func (_db *Renderer )SetStrokeColor (color _ag .Color ){_db ._ed =color ;_agf ,_fb ,_dbf ,_ :=_gcb (color );_db ._de .Add_RG (_agf ,_fb ,_dbf );};func (_dd *Renderer )SetFontSize (size float64 ){_dd ._eda =size };
func (_age *Renderer )LineTo (x ,y int ){_age ._de .Add_l (float64 (x ),float64 (y ))};func (_fbc *Renderer )MoveTo (x ,y int ){_fbc ._de .Add_m (float64 (x ),float64 (y ))};func (_dcf *Renderer )SetFontColor (color _ag .Color ){_dcf ._ge =color };func (_fa *Renderer )wrapText (_dda string )[]string {var (_dde []string ;
_ecd []rune ;);for _ ,_gfa :=range _dda {if _gfa =='\n'{_dde =append (_dde ,string (_ecd ));_ecd =[]rune {};continue ;};_ecd =append (_ecd ,_gfa );};if len (_ecd )> 0{_dde =append (_dde ,string (_ecd ));};return _dde ;};func (_ee *Renderer )SetFont (font _d .Font ){_gge ,_fba :=font .(*_be .PdfFont );
if !_fba {_fe .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0069\u006e\u0076\u0061\u006c\u0069d\u0020\u0066\u006f\u006e\u0074\u0020\u0074\u0079\u0070\u0065");return ;};_edf ,_fba :=_ee ._bd [_gge ];if !_fba {_edf =_edfag ("\u0046\u006f\u006e\u0074",1,_ee ._dc .HasFontByName );
if _ggg :=_ee ._dc .SetFontByName (_edf ,_gge .ToPdfObject ());_ggg !=nil {_fe .Log .Debug ("\u0045\u0052\u0052\u004f\u0052:\u0020\u0063\u006f\u0075\u006c\u0064\u0020\u006e\u006f\u0074\u0020\u0061\u0064d\u0020\u0066\u006f\u006e\u0074\u0020\u0025\u0076\u0020\u0074\u006f\u0020\u0072\u0065\u0073\u006f\u0075\u0072\u0063\u0065\u0073",_gge );
};_ee ._bd [_gge ]=_edf ;};_ee ._de .Add_Tf (_edf ,_ee ._eda );_ee ._ded =_gge ;};func (_cgb *Renderer )Save (w _bc .Writer )error {if w ==nil {return nil ;};_ ,_efeg :=_bc .Copy (w ,_a .NewBuffer (_cgb ._de .Bytes ()));return _efeg ;};func (_dga *Renderer )FillStroke (){_dga ._de .Add_B ()};
func (_ecf *Renderer )MeasureText (text string )_d .Box {_ece :=_ecf ._eda ;_ebc ,_gfg :=_ecf ._ded .GetFontDescriptor ();if _gfg !=nil {_fe .Log .Debug ("W\u0041\u0052\u004e\u003a\u0020\u0055n\u0061\u0062\u006c\u0065\u0020\u0074o\u0020\u0067\u0065\u0074\u0020\u0066\u006fn\u0074\u0020\u0064\u0065\u0073\u0063\u0072\u0069\u0070\u0074o\u0072");
}else {_cfddf ,_dge :=_ebc .GetCapHeight ();if _dge !=nil {_fe .Log .Debug ("\u0057\u0041\u0052\u004e\u003a\u0020\u0055\u006e\u0061\u0062\u006c\u0065\u0020t\u006f\u0020\u0067\u0065\u0074\u0020f\u006f\u006e\u0074\u0020\u0063\u0061\u0070\u0020\u0068\u0065\u0069\u0067\u0068t\u003a\u0020\u0025\u0076",_dge );
}else {_ece =_cfddf /1000.0*_ecf ._eda ;};};var (_eeb =0.0;_gedf =_ecf .wrapText (text ););for _ ,_ccg :=range _gedf {if _dbe :=_ecf .getTextWidth (_ccg );_dbe > _eeb {_eeb =_dbe ;};};_dgec :=_d .NewBox (0,0,int (_eeb ),int (_ece ));if _gbc :=_ecf ._gea ;
_gbc !=0{_dgec =_dgec .Corners ().Rotate (_gbc ).Box ();};return _dgec ;};func (_ae *Renderer )GetDPI ()float64 {return _ae ._g };