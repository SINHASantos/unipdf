//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package ccittfax ;import (_b "errors";_ac "github.com/unidoc/unipdf/v3/internal/bitwise";_a "io";_c "math";);func (_bdc *Decoder )getNextChangingElement (_gce int ,_fdg bool )int {_edc :=0;if !_fdg {_edc =1;};_edea :=int (uint32 (_bdc ._gaa )&0xFFFFFFFE)+_edc ;
if _edea > 2{_edea -=2;};if _gce ==0{return _edea ;};for _gad :=_edea ;_gad < _bdc ._af ;_gad +=2{if _gce < _bdc ._dcb [_gad ]{_bdc ._gaa =_gad ;return _gad ;};};return -1;};func init (){_eb =&treeNode {_gaff :true ,_dbc :_edd };_ee =&treeNode {_dbc :_bf ,_decg :_eb };
_ee ._fega =_ee ;_f =&tree {_ggf :&treeNode {}};if _ef :=_f .fillWithNode (12,0,_ee );_ef !=nil {panic (_ef .Error ());};if _db :=_f .fillWithNode (12,1,_eb );_db !=nil {panic (_db .Error ());};_d =&tree {_ggf :&treeNode {}};for _eee :=0;_eee < len (_bae );
_eee ++{for _fg :=0;_fg < len (_bae [_eee ]);_fg ++{if _aag :=_d .fill (_eee +2,int (_bae [_eee ][_fg ]),int (_gbb [_eee ][_fg ]));_aag !=nil {panic (_aag .Error ());};};};if _cc :=_d .fillWithNode (12,0,_ee );_cc !=nil {panic (_cc .Error ());};if _ae :=_d .fillWithNode (12,1,_eb );
_ae !=nil {panic (_ae .Error ());};_ed =&tree {_ggf :&treeNode {}};for _ea :=0;_ea < len (_efg );_ea ++{for _g :=0;_g < len (_efg [_ea ]);_g ++{if _aeg :=_ed .fill (_ea +4,int (_efg [_ea ][_g ]),int (_gdg [_ea ][_g ]));_aeg !=nil {panic (_aeg .Error ());
};};};if _cf :=_ed .fillWithNode (12,0,_ee );_cf !=nil {panic (_cf .Error ());};if _eac :=_ed .fillWithNode (12,1,_eb );_eac !=nil {panic (_eac .Error ());};_eg =&tree {_ggf :&treeNode {}};if _bb :=_eg .fill (4,1,_aa );_bb !=nil {panic (_bb .Error ());
};if _fc :=_eg .fill (3,1,_df );_fc !=nil {panic (_fc .Error ());};if _ga :=_eg .fill (1,1,0);_ga !=nil {panic (_ga .Error ());};if _fa :=_eg .fill (3,3,1);_fa !=nil {panic (_fa .Error ());};if _ba :=_eg .fill (6,3,2);_ba !=nil {panic (_ba .Error ());};
if _cca :=_eg .fill (7,3,3);_cca !=nil {panic (_cca .Error ());};if _gd :=_eg .fill (3,2,-1);_gd !=nil {panic (_gd .Error ());};if _gb :=_eg .fill (6,2,-2);_gb !=nil {panic (_gb .Error ());};if _aegd :=_eg .fill (7,2,-3);_aegd !=nil {panic (_aegd .Error ());
};};type Decoder struct{_efe int ;_dc int ;_ab int ;_da []byte ;_baf int ;_fcg bool ;_bbg bool ;_bea bool ;_egc bool ;_ede bool ;_dbd bool ;_faf bool ;_cd int ;_ff int ;_dcb []int ;_bab []int ;_af int ;_fae int ;_fb int ;_gaa int ;_fgg *_ac .Reader ;_eae tiffType ;
_efga error ;};func (_gg tiffType )String ()string {switch _gg {case _gc :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u004d\u006f\u0064i\u0066\u0069\u0065\u0064\u0048\u0075\u0066\u0066\u006d\u0061n\u0052\u006c\u0065";case _gbd :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u0054\u0034";
case _baa :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u0054\u0036";default:return "\u0075n\u0064\u0065\u0066\u0069\u006e\u0065d";};};func (_adb *Encoder )Encode (pixels [][]byte )[]byte {if _adb .BlackIs1 {_gaf =0;_fac =1;}else {_gaf =1;_fac =0;
};if _adb .K ==0{return _adb .encodeG31D (pixels );};if _adb .K > 0{return _adb .encodeG32D (pixels );};if _adb .K < 0{return _adb .encodeG4 (pixels );};return nil ;};func (_baaf *Decoder )decoderRowType41D ()error {if _baaf ._faf {_baaf ._fgg .Align ();
};_baaf ._fgg .Mark ();var (_acddf bool ;_bbb error ;);if _baaf ._ede {_acddf ,_bbb =_baaf .tryFetchEOL ();if _bbb !=nil {return _bbb ;};if !_acddf {return _fd ;};}else {_acddf ,_bbb =_baaf .looseFetchEOL ();if _bbb !=nil {return _bbb ;};};if !_acddf {_baaf ._fgg .Reset ();
};if _acddf &&_baaf ._dbd {_baaf ._fgg .Mark ();for _ce :=0;_ce < 5;_ce ++{_acddf ,_bbb =_baaf .tryFetchEOL ();if _bbb !=nil {if _b .Is (_bbb ,_a .EOF ){if _ce ==0{break ;};return _deb ;};};if _acddf {continue ;};if _ce > 0{return _deb ;};break ;};if _acddf {return _a .EOF ;
};_baaf ._fgg .Reset ();};if _bbb =_baaf .decode1D ();_bbb !=nil {return _bbb ;};return nil ;};type DecodeOptions struct{Columns int ;Rows int ;K int ;EncodedByteAligned bool ;BlackIsOne bool ;EndOfBlock bool ;EndOfLine bool ;DamagedRowsBeforeError int ;
};func _gbba (_cede []byte ,_gbdd int )int {if _gbdd >=len (_cede ){return _gbdd ;};if _gbdd < -1{_gbdd =-1;};var _fdbb byte ;if _gbdd > -1{_fdbb =_cede [_gbdd ];}else {_fdbb =_gaf ;};_def :=_gbdd +1;for _def < len (_cede ){if _cede [_def ]!=_fdbb {break ;
};_def ++;};return _def ;};func init (){_be =make (map[int ]code );_be [0]=code {Code :13<<8|3<<6,BitsWritten :10};_be [1]=code {Code :2<<(5+8),BitsWritten :3};_be [2]=code {Code :3<<(6+8),BitsWritten :2};_be [3]=code {Code :2<<(6+8),BitsWritten :2};_be [4]=code {Code :3<<(5+8),BitsWritten :3};
_be [5]=code {Code :3<<(4+8),BitsWritten :4};_be [6]=code {Code :2<<(4+8),BitsWritten :4};_be [7]=code {Code :3<<(3+8),BitsWritten :5};_be [8]=code {Code :5<<(2+8),BitsWritten :6};_be [9]=code {Code :4<<(2+8),BitsWritten :6};_be [10]=code {Code :4<<(1+8),BitsWritten :7};
_be [11]=code {Code :5<<(1+8),BitsWritten :7};_be [12]=code {Code :7<<(1+8),BitsWritten :7};_be [13]=code {Code :4<<8,BitsWritten :8};_be [14]=code {Code :7<<8,BitsWritten :8};_be [15]=code {Code :12<<8,BitsWritten :9};_be [16]=code {Code :5<<8|3<<6,BitsWritten :10};
_be [17]=code {Code :6<<8,BitsWritten :10};_be [18]=code {Code :2<<8,BitsWritten :10};_be [19]=code {Code :12<<8|7<<5,BitsWritten :11};_be [20]=code {Code :13<<8,BitsWritten :11};_be [21]=code {Code :13<<8|4<<5,BitsWritten :11};_be [22]=code {Code :6<<8|7<<5,BitsWritten :11};
_be [23]=code {Code :5<<8,BitsWritten :11};_be [24]=code {Code :2<<8|7<<5,BitsWritten :11};_be [25]=code {Code :3<<8,BitsWritten :11};_be [26]=code {Code :12<<8|10<<4,BitsWritten :12};_be [27]=code {Code :12<<8|11<<4,BitsWritten :12};_be [28]=code {Code :12<<8|12<<4,BitsWritten :12};
_be [29]=code {Code :12<<8|13<<4,BitsWritten :12};_be [30]=code {Code :6<<8|8<<4,BitsWritten :12};_be [31]=code {Code :6<<8|9<<4,BitsWritten :12};_be [32]=code {Code :6<<8|10<<4,BitsWritten :12};_be [33]=code {Code :6<<8|11<<4,BitsWritten :12};_be [34]=code {Code :13<<8|2<<4,BitsWritten :12};
_be [35]=code {Code :13<<8|3<<4,BitsWritten :12};_be [36]=code {Code :13<<8|4<<4,BitsWritten :12};_be [37]=code {Code :13<<8|5<<4,BitsWritten :12};_be [38]=code {Code :13<<8|6<<4,BitsWritten :12};_be [39]=code {Code :13<<8|7<<4,BitsWritten :12};_be [40]=code {Code :6<<8|12<<4,BitsWritten :12};
_be [41]=code {Code :6<<8|13<<4,BitsWritten :12};_be [42]=code {Code :13<<8|10<<4,BitsWritten :12};_be [43]=code {Code :13<<8|11<<4,BitsWritten :12};_be [44]=code {Code :5<<8|4<<4,BitsWritten :12};_be [45]=code {Code :5<<8|5<<4,BitsWritten :12};_be [46]=code {Code :5<<8|6<<4,BitsWritten :12};
_be [47]=code {Code :5<<8|7<<4,BitsWritten :12};_be [48]=code {Code :6<<8|4<<4,BitsWritten :12};_be [49]=code {Code :6<<8|5<<4,BitsWritten :12};_be [50]=code {Code :5<<8|2<<4,BitsWritten :12};_be [51]=code {Code :5<<8|3<<4,BitsWritten :12};_be [52]=code {Code :2<<8|4<<4,BitsWritten :12};
_be [53]=code {Code :3<<8|7<<4,BitsWritten :12};_be [54]=code {Code :3<<8|8<<4,BitsWritten :12};_be [55]=code {Code :2<<8|7<<4,BitsWritten :12};_be [56]=code {Code :2<<8|8<<4,BitsWritten :12};_be [57]=code {Code :5<<8|8<<4,BitsWritten :12};_be [58]=code {Code :5<<8|9<<4,BitsWritten :12};
_be [59]=code {Code :2<<8|11<<4,BitsWritten :12};_be [60]=code {Code :2<<8|12<<4,BitsWritten :12};_be [61]=code {Code :5<<8|10<<4,BitsWritten :12};_be [62]=code {Code :6<<8|6<<4,BitsWritten :12};_be [63]=code {Code :6<<8|7<<4,BitsWritten :12};_bfg =make (map[int ]code );
_bfg [0]=code {Code :53<<8,BitsWritten :8};_bfg [1]=code {Code :7<<(2+8),BitsWritten :6};_bfg [2]=code {Code :7<<(4+8),BitsWritten :4};_bfg [3]=code {Code :8<<(4+8),BitsWritten :4};_bfg [4]=code {Code :11<<(4+8),BitsWritten :4};_bfg [5]=code {Code :12<<(4+8),BitsWritten :4};
_bfg [6]=code {Code :14<<(4+8),BitsWritten :4};_bfg [7]=code {Code :15<<(4+8),BitsWritten :4};_bfg [8]=code {Code :19<<(3+8),BitsWritten :5};_bfg [9]=code {Code :20<<(3+8),BitsWritten :5};_bfg [10]=code {Code :7<<(3+8),BitsWritten :5};_bfg [11]=code {Code :8<<(3+8),BitsWritten :5};
_bfg [12]=code {Code :8<<(2+8),BitsWritten :6};_bfg [13]=code {Code :3<<(2+8),BitsWritten :6};_bfg [14]=code {Code :52<<(2+8),BitsWritten :6};_bfg [15]=code {Code :53<<(2+8),BitsWritten :6};_bfg [16]=code {Code :42<<(2+8),BitsWritten :6};_bfg [17]=code {Code :43<<(2+8),BitsWritten :6};
_bfg [18]=code {Code :39<<(1+8),BitsWritten :7};_bfg [19]=code {Code :12<<(1+8),BitsWritten :7};_bfg [20]=code {Code :8<<(1+8),BitsWritten :7};_bfg [21]=code {Code :23<<(1+8),BitsWritten :7};_bfg [22]=code {Code :3<<(1+8),BitsWritten :7};_bfg [23]=code {Code :4<<(1+8),BitsWritten :7};
_bfg [24]=code {Code :40<<(1+8),BitsWritten :7};_bfg [25]=code {Code :43<<(1+8),BitsWritten :7};_bfg [26]=code {Code :19<<(1+8),BitsWritten :7};_bfg [27]=code {Code :36<<(1+8),BitsWritten :7};_bfg [28]=code {Code :24<<(1+8),BitsWritten :7};_bfg [29]=code {Code :2<<8,BitsWritten :8};
_bfg [30]=code {Code :3<<8,BitsWritten :8};_bfg [31]=code {Code :26<<8,BitsWritten :8};_bfg [32]=code {Code :27<<8,BitsWritten :8};_bfg [33]=code {Code :18<<8,BitsWritten :8};_bfg [34]=code {Code :19<<8,BitsWritten :8};_bfg [35]=code {Code :20<<8,BitsWritten :8};
_bfg [36]=code {Code :21<<8,BitsWritten :8};_bfg [37]=code {Code :22<<8,BitsWritten :8};_bfg [38]=code {Code :23<<8,BitsWritten :8};_bfg [39]=code {Code :40<<8,BitsWritten :8};_bfg [40]=code {Code :41<<8,BitsWritten :8};_bfg [41]=code {Code :42<<8,BitsWritten :8};
_bfg [42]=code {Code :43<<8,BitsWritten :8};_bfg [43]=code {Code :44<<8,BitsWritten :8};_bfg [44]=code {Code :45<<8,BitsWritten :8};_bfg [45]=code {Code :4<<8,BitsWritten :8};_bfg [46]=code {Code :5<<8,BitsWritten :8};_bfg [47]=code {Code :10<<8,BitsWritten :8};
_bfg [48]=code {Code :11<<8,BitsWritten :8};_bfg [49]=code {Code :82<<8,BitsWritten :8};_bfg [50]=code {Code :83<<8,BitsWritten :8};_bfg [51]=code {Code :84<<8,BitsWritten :8};_bfg [52]=code {Code :85<<8,BitsWritten :8};_bfg [53]=code {Code :36<<8,BitsWritten :8};
_bfg [54]=code {Code :37<<8,BitsWritten :8};_bfg [55]=code {Code :88<<8,BitsWritten :8};_bfg [56]=code {Code :89<<8,BitsWritten :8};_bfg [57]=code {Code :90<<8,BitsWritten :8};_bfg [58]=code {Code :91<<8,BitsWritten :8};_bfg [59]=code {Code :74<<8,BitsWritten :8};
_bfg [60]=code {Code :75<<8,BitsWritten :8};_bfg [61]=code {Code :50<<8,BitsWritten :8};_bfg [62]=code {Code :51<<8,BitsWritten :8};_bfg [63]=code {Code :52<<8,BitsWritten :8};_ge =make (map[int ]code );_ge [64]=code {Code :3<<8|3<<6,BitsWritten :10};_ge [128]=code {Code :12<<8|8<<4,BitsWritten :12};
_ge [192]=code {Code :12<<8|9<<4,BitsWritten :12};_ge [256]=code {Code :5<<8|11<<4,BitsWritten :12};_ge [320]=code {Code :3<<8|3<<4,BitsWritten :12};_ge [384]=code {Code :3<<8|4<<4,BitsWritten :12};_ge [448]=code {Code :3<<8|5<<4,BitsWritten :12};_ge [512]=code {Code :3<<8|12<<3,BitsWritten :13};
_ge [576]=code {Code :3<<8|13<<3,BitsWritten :13};_ge [640]=code {Code :2<<8|10<<3,BitsWritten :13};_ge [704]=code {Code :2<<8|11<<3,BitsWritten :13};_ge [768]=code {Code :2<<8|12<<3,BitsWritten :13};_ge [832]=code {Code :2<<8|13<<3,BitsWritten :13};_ge [896]=code {Code :3<<8|18<<3,BitsWritten :13};
_ge [960]=code {Code :3<<8|19<<3,BitsWritten :13};_ge [1024]=code {Code :3<<8|20<<3,BitsWritten :13};_ge [1088]=code {Code :3<<8|21<<3,BitsWritten :13};_ge [1152]=code {Code :3<<8|22<<3,BitsWritten :13};_ge [1216]=code {Code :119<<3,BitsWritten :13};_ge [1280]=code {Code :2<<8|18<<3,BitsWritten :13};
_ge [1344]=code {Code :2<<8|19<<3,BitsWritten :13};_ge [1408]=code {Code :2<<8|20<<3,BitsWritten :13};_ge [1472]=code {Code :2<<8|21<<3,BitsWritten :13};_ge [1536]=code {Code :2<<8|26<<3,BitsWritten :13};_ge [1600]=code {Code :2<<8|27<<3,BitsWritten :13};
_ge [1664]=code {Code :3<<8|4<<3,BitsWritten :13};_ge [1728]=code {Code :3<<8|5<<3,BitsWritten :13};_ec =make (map[int ]code );_ec [64]=code {Code :27<<(3+8),BitsWritten :5};_ec [128]=code {Code :18<<(3+8),BitsWritten :5};_ec [192]=code {Code :23<<(2+8),BitsWritten :6};
_ec [256]=code {Code :55<<(1+8),BitsWritten :7};_ec [320]=code {Code :54<<8,BitsWritten :8};_ec [384]=code {Code :55<<8,BitsWritten :8};_ec [448]=code {Code :100<<8,BitsWritten :8};_ec [512]=code {Code :101<<8,BitsWritten :8};_ec [576]=code {Code :104<<8,BitsWritten :8};
_ec [640]=code {Code :103<<8,BitsWritten :8};_ec [704]=code {Code :102<<8,BitsWritten :9};_ec [768]=code {Code :102<<8|1<<7,BitsWritten :9};_ec [832]=code {Code :105<<8,BitsWritten :9};_ec [896]=code {Code :105<<8|1<<7,BitsWritten :9};_ec [960]=code {Code :106<<8,BitsWritten :9};
_ec [1024]=code {Code :106<<8|1<<7,BitsWritten :9};_ec [1088]=code {Code :107<<8,BitsWritten :9};_ec [1152]=code {Code :107<<8|1<<7,BitsWritten :9};_ec [1216]=code {Code :108<<8,BitsWritten :9};_ec [1280]=code {Code :108<<8|1<<7,BitsWritten :9};_ec [1344]=code {Code :109<<8,BitsWritten :9};
_ec [1408]=code {Code :109<<8|1<<7,BitsWritten :9};_ec [1472]=code {Code :76<<8,BitsWritten :9};_ec [1536]=code {Code :76<<8|1<<7,BitsWritten :9};_ec [1600]=code {Code :77<<8,BitsWritten :9};_ec [1664]=code {Code :24<<(2+8),BitsWritten :6};_ec [1728]=code {Code :77<<8|1<<7,BitsWritten :9};
_cfc =make (map[int ]code );_cfc [1792]=code {Code :1<<8,BitsWritten :11};_cfc [1856]=code {Code :1<<8|4<<5,BitsWritten :11};_cfc [1920]=code {Code :1<<8|5<<5,BitsWritten :11};_cfc [1984]=code {Code :1<<8|2<<4,BitsWritten :12};_cfc [2048]=code {Code :1<<8|3<<4,BitsWritten :12};
_cfc [2112]=code {Code :1<<8|4<<4,BitsWritten :12};_cfc [2176]=code {Code :1<<8|5<<4,BitsWritten :12};_cfc [2240]=code {Code :1<<8|6<<4,BitsWritten :12};_cfc [2304]=code {Code :1<<8|7<<4,BitsWritten :12};_cfc [2368]=code {Code :1<<8|12<<4,BitsWritten :12};
_cfc [2432]=code {Code :1<<8|13<<4,BitsWritten :12};_cfc [2496]=code {Code :1<<8|14<<4,BitsWritten :12};_cfc [2560]=code {Code :1<<8|15<<4,BitsWritten :12};_de =make (map[int ]byte );_de [0]=0xFF;_de [1]=0xFE;_de [2]=0xFC;_de [3]=0xF8;_de [4]=0xF0;_de [5]=0xE0;
_de [6]=0xC0;_de [7]=0x80;_de [8]=0x00;};func _ccdb (_ecbd []byte ,_cdg bool ,_daf int )(int ,int ){_dge :=0;for _daf < len (_ecbd ){if _cdg {if _ecbd [_daf ]!=_gaf {break ;};}else {if _ecbd [_daf ]!=_fac {break ;};};_dge ++;_daf ++;};return _dge ,_daf ;
};type tiffType int ;func (_bfa *Encoder )encodeG4 (_aagg [][]byte )[]byte {_cagg :=make ([][]byte ,len (_aagg ));copy (_cagg ,_aagg );_cagg =_ebe (_cagg );var _adbg []byte ;var _gbe int ;for _fba :=1;_fba < len (_cagg );_fba ++{if _bfa .Rows > 0&&!_bfa .EndOfBlock &&_fba ==(_bfa .Rows +1){break ;
};var _gdb []byte ;var _fdea ,_faca ,_geaf int ;_ebf :=_gbe ;_fad :=-1;for _fad < len (_cagg [_fba ]){_fdea =_gbba (_cagg [_fba ],_fad );_faca =_fcae (_cagg [_fba ],_cagg [_fba -1],_fad );_geaf =_gbba (_cagg [_fba -1],_faca );if _geaf < _fdea {_gdb ,_ebf =_gde (_gdb ,_ebf ,_bfd );
_fad =_geaf ;}else {if _c .Abs (float64 (_faca -_fdea ))> 3{_gdb ,_ebf ,_fad =_cfde (_cagg [_fba ],_gdb ,_ebf ,_fad ,_fdea );}else {_gdb ,_ebf =_ece (_gdb ,_ebf ,_fdea ,_faca );_fad =_fdea ;};};};_adbg =_bfa .appendEncodedRow (_adbg ,_gdb ,_gbe );if _bfa .EncodedByteAlign {_ebf =0;
};_gbe =_ebf %8;};if _bfa .EndOfBlock {_gcfa ,_ :=_ffcf (_gbe );_adbg =_bfa .appendEncodedRow (_adbg ,_gcfa ,_gbe );};return _adbg ;};func (_cb *Encoder )encodeG32D (_abe [][]byte )[]byte {var _bdg []byte ;var _cfd int ;for _ddg :=0;_ddg < len (_abe );
_ddg +=_cb .K {if _cb .Rows > 0&&!_cb .EndOfBlock &&_ddg ==_cb .Rows {break ;};_dff ,_dccc :=_cbc (_abe [_ddg ],_cfd ,_edf );_bdg =_cb .appendEncodedRow (_bdg ,_dff ,_cfd );if _cb .EncodedByteAlign {_dccc =0;};_cfd =_dccc ;for _bcf :=_ddg +1;_bcf < (_ddg +_cb .K )&&_bcf < len (_abe );
_bcf ++{if _cb .Rows > 0&&!_cb .EndOfBlock &&_bcf ==_cb .Rows {break ;};_ccac ,_cfg :=_gde (nil ,_cfd ,_dfb );var _bag ,_ccg ,_bfb int ;_bdf :=-1;for _bdf < len (_abe [_bcf ]){_bag =_gbba (_abe [_bcf ],_bdf );_ccg =_fcae (_abe [_bcf ],_abe [_bcf -1],_bdf );
_bfb =_gbba (_abe [_bcf -1],_ccg );if _bfb < _bag {_ccac ,_cfg =_ebb (_ccac ,_cfg );_bdf =_bfb ;}else {if _c .Abs (float64 (_ccg -_bag ))> 3{_ccac ,_cfg ,_bdf =_cfde (_abe [_bcf ],_ccac ,_cfg ,_bdf ,_bag );}else {_ccac ,_cfg =_ece (_ccac ,_cfg ,_bag ,_ccg );
_bdf =_bag ;};};};_bdg =_cb .appendEncodedRow (_bdg ,_ccac ,_cfd );if _cb .EncodedByteAlign {_cfg =0;};_cfd =_cfg %8;};};if _cb .EndOfBlock {_dea ,_ :=_cfb (_cfd );_bdg =_cb .appendEncodedRow (_bdg ,_dea ,_cfd );};return _bdg ;};func (_fdf *Decoder )decodeRowType4 ()error {if !_fdf ._fcg {return _fdf .decoderRowType41D ();
};if _fdf ._faf {_fdf ._fgg .Align ();};_fdf ._fgg .Mark ();_ada ,_cfca :=_fdf .tryFetchEOL ();if _cfca !=nil {return _cfca ;};if !_ada &&_fdf ._ede {_fdf ._fb ++;if _fdf ._fb > _fdf ._baf {return _fd ;};_fdf ._fgg .Reset ();};if !_ada {_fdf ._fgg .Reset ();
};_eec ,_cfca :=_fdf ._fgg .ReadBool ();if _cfca !=nil {return _cfca ;};if _eec {if _ada &&_fdf ._dbd {if _cfca =_fdf .tryFetchRTC2D ();_cfca !=nil {return _cfca ;};};_cfca =_fdf .decode1D ();}else {_cfca =_fdf .decode2D ();};if _cfca !=nil {return _cfca ;
};return nil ;};func (_bce *Decoder )decodeRowType2 ()error {if _bce ._faf {_bce ._fgg .Align ();};if _aee :=_bce .decode1D ();_aee !=nil {return _aee ;};return nil ;};func _dfff (_aac int )([]byte ,int ){var _aca []byte ;for _fdfd :=0;_fdfd < 6;_fdfd ++{_aca ,_aac =_gde (_aca ,_aac ,_efd );
};return _aca ,_aac %8;};var (_be map[int ]code ;_bfg map[int ]code ;_ge map[int ]code ;_ec map[int ]code ;_cfc map[int ]code ;_de map[int ]byte ;_efd =code {Code :1<<4,BitsWritten :12};_edf =code {Code :3<<3,BitsWritten :13};_dfb =code {Code :2<<3,BitsWritten :13};
_bfd =code {Code :1<<12,BitsWritten :4};_bfgc =code {Code :1<<13,BitsWritten :3};_ecg =code {Code :1<<15,BitsWritten :1};_bg =code {Code :3<<13,BitsWritten :3};_ecb =code {Code :3<<10,BitsWritten :6};_acd =code {Code :3<<9,BitsWritten :7};_ca =code {Code :2<<13,BitsWritten :3};
_eea =code {Code :2<<10,BitsWritten :6};_fe =code {Code :2<<9,BitsWritten :7};);type treeNode struct{_fega *treeNode ;_decg *treeNode ;_dbc int ;_ddab bool ;_gaff bool ;};var (_gaf byte =1;_fac byte =0;);var (_deb =_b .New ("\u0063\u0063\u0069\u0074tf\u0061\u0078\u0020\u0063\u006f\u0072\u0072\u0075\u0070\u0074\u0065\u0064\u0020\u0052T\u0043");
_fd =_b .New ("\u0063\u0063\u0069\u0074tf\u0061\u0078\u0020\u0045\u004f\u004c\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075n\u0064"););func _dfe (_bcg int ,_bee bool )(code ,int ,bool ){if _bcg < 64{if _bee {return _bfg [_bcg ],0,true ;};return _be [_bcg ],0,true ;
};_gecd :=_bcg /64;if _gecd > 40{return _cfc [2560],_bcg -2560,false ;};if _gecd > 27{return _cfc [_gecd *64],_bcg -_gecd *64,false ;};if _bee {return _ec [_gecd *64],_bcg -_gecd *64,false ;};return _ge [_gecd *64],_bcg -_gecd *64,false ;};var _efg =[...][]uint16 {{0x7,0x8,0xb,0xc,0xe,0xf},{0x12,0x13,0x14,0x1b,0x7,0x8},{0x17,0x18,0x2a,0x2b,0x3,0x34,0x35,0x7,0x8},{0x13,0x17,0x18,0x24,0x27,0x28,0x2b,0x3,0x37,0x4,0x8,0xc},{0x12,0x13,0x14,0x15,0x16,0x17,0x1a,0x1b,0x2,0x24,0x25,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x3,0x32,0x33,0x34,0x35,0x36,0x37,0x4,0x4a,0x4b,0x5,0x52,0x53,0x54,0x55,0x58,0x59,0x5a,0x5b,0x64,0x65,0x67,0x68,0xa,0xb},{0x98,0x99,0x9a,0x9b,0xcc,0xcd,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8,0xd9,0xda,0xdb},{},{0x8,0xc,0xd},{0x12,0x13,0x14,0x15,0x16,0x17,0x1c,0x1d,0x1e,0x1f}};
func (_dec *Encoder )encodeG31D (_ced [][]byte )[]byte {var _bcec []byte ;_dcaa :=0;for _fcd :=range _ced {if _dec .Rows > 0&&!_dec .EndOfBlock &&_fcd ==_dec .Rows {break ;};_fbb ,_fed :=_cbc (_ced [_fcd ],_dcaa ,_efd );_bcec =_dec .appendEncodedRow (_bcec ,_fbb ,_dcaa );
if _dec .EncodedByteAlign {_fed =0;};_dcaa =_fed ;};if _dec .EndOfBlock {_dbdd ,_ :=_dfff (_dcaa );_bcec =_dec .appendEncodedRow (_bcec ,_dbdd ,_dcaa );};return _bcec ;};func _ade (_cega []byte ,_gfaa int ,_ceca int ,_abee bool )([]byte ,int ){var (_ecf code ;
_dbb bool ;);for !_dbb {_ecf ,_ceca ,_dbb =_dfe (_ceca ,_abee );_cega ,_gfaa =_gde (_cega ,_gfaa ,_ecf );};return _cega ,_gfaa ;};const (_ tiffType =iota ;_gc ;_gbd ;_baa ;);var _gbb =[...][]uint16 {{3,2},{1,4},{6,5},{7},{9,8},{10,11,12},{13,14},{15},{16,17,0,18,64},{24,25,23,22,19,20,21,1792,1856,1920},{1984,2048,2112,2176,2240,2304,2368,2432,2496,2560,52,55,56,59,60,320,384,448,53,54,50,51,44,45,46,47,57,58,61,256,48,49,62,63,30,31,32,33,40,41,128,192,26,27,28,29,34,35,36,37,38,39,42,43},{640,704,768,832,1280,1344,1408,1472,1536,1600,1664,1728,512,576,896,960,1024,1088,1152,1216}};
func (_fbe *Decoder )decodeRun (_bba *tree )(int ,error ){var _gade int ;_afe :=_bba ._ggf ;for {_baab ,_bbd :=_fbe ._fgg .ReadBool ();if _bbd !=nil {return 0,_bbd ;};_afe =_afe .walk (_baab );if _afe ==nil {return 0,_b .New ("\u0075\u006e\u006bno\u0077\u006e\u0020\u0063\u006f\u0064\u0065\u0020\u0069n\u0020H\u0075f\u0066m\u0061\u006e\u0020\u0052\u004c\u0045\u0020\u0073\u0074\u0072\u0065\u0061\u006d");
};if _afe ._gaff {_gade +=_afe ._dbc ;switch {case _afe ._dbc >=64:_afe =_bba ._ggf ;case _afe ._dbc >=0:return _gade ,nil ;default:return _fbe ._efe ,nil ;};};};};func (_ffg *Decoder )fetch ()error {if _ffg ._cd ==-1{return nil ;};if _ffg ._ff < _ffg ._cd {return nil ;
};_ffg ._cd =0;_fcac :=_ffg .decodeRow ();if _fcac !=nil {if !_b .Is (_fcac ,_a .EOF ){return _fcac ;};if _ffg ._cd !=0{return _fcac ;};_ffg ._cd =-1;};_ffg ._ff =0;return nil ;};func _ebe (_bbf [][]byte )[][]byte {_ebc :=make ([]byte ,len (_bbf [0]));
for _dgd :=range _ebc {_ebc [_dgd ]=_gaf ;};_bbf =append (_bbf ,[]byte {});for _eabg :=len (_bbf )-1;_eabg > 0;_eabg --{_bbf [_eabg ]=_bbf [_eabg -1];};_bbf [0]=_ebc ;return _bbf ;};func (_ceg *Decoder )looseFetchEOL ()(bool ,error ){_ecbe ,_bbdb :=_ceg ._fgg .ReadBits (12);
if _bbdb !=nil {return false ,_bbdb ;};switch _ecbe {case 0x1:return true ,nil ;case 0x0:for {_dba ,_ggg :=_ceg ._fgg .ReadBool ();if _ggg !=nil {return false ,_ggg ;};if _dba {return true ,nil ;};};default:return false ,nil ;};};func _cfde (_gge ,_beeg []byte ,_bedd ,_eab ,_dbfa int )([]byte ,int ,int ){_caa :=_gbba (_gge ,_dbfa );
_cacg :=_eab >=0&&_gge [_eab ]==_gaf ||_eab ==-1;_beeg ,_bedd =_gde (_beeg ,_bedd ,_bfgc );var _fce int ;if _eab > -1{_fce =_dbfa -_eab ;}else {_fce =_dbfa -_eab -1;};_beeg ,_bedd =_ade (_beeg ,_bedd ,_fce ,_cacg );_cacg =!_cacg ;_gfac :=_caa -_dbfa ;_beeg ,_bedd =_ade (_beeg ,_bedd ,_gfac ,_cacg );
_eab =_caa ;return _beeg ,_bedd ,_eab ;};func (_fgfd *treeNode )walk (_eaec bool )*treeNode {if _eaec {return _fgfd ._decg ;};return _fgfd ._fega ;};func _ebb (_ddf []byte ,_bgaa int )([]byte ,int ){return _gde (_ddf ,_bgaa ,_bfd )};func _fcae (_bebd ,_agd []byte ,_dcd int )int {_cdf :=_gbba (_agd ,_dcd );
if _cdf < len (_agd )&&(_dcd ==-1&&_agd [_cdf ]==_gaf ||_dcd >=0&&_dcd < len (_bebd )&&_bebd [_dcd ]==_agd [_cdf ]||_dcd >=len (_bebd )&&_bebd [_dcd -1]!=_agd [_cdf ]){_cdf =_gbba (_agd ,_cdf );};return _cdf ;};func (_edg *Decoder )decodeRowType6 ()error {if _edg ._faf {_edg ._fgg .Align ();
};if _edg ._dbd {_edg ._fgg .Mark ();_dd ,_bef :=_edg .tryFetchEOL ();if _bef !=nil {return _bef ;};if _dd {_dd ,_bef =_edg .tryFetchEOL ();if _bef !=nil {return _bef ;};if _dd {return _a .EOF ;};};_edg ._fgg .Reset ();};return _edg .decode2D ();};func (_befc *Decoder )tryFetchRTC2D ()(_aab error ){_befc ._fgg .Mark ();
var _gea bool ;for _affb :=0;_affb < 5;_affb ++{_gea ,_aab =_befc .tryFetchEOL1 ();if _aab !=nil {if _b .Is (_aab ,_a .EOF ){if _affb ==0{break ;};return _deb ;};};if _gea {continue ;};if _affb > 0{return _deb ;};break ;};if _gea {return _a .EOF ;};_befc ._fgg .Reset ();
return _aab ;};func (_fea *Decoder )decodeG32D ()error {_fea ._af =_fea ._fae ;_fea ._bab ,_fea ._dcb =_fea ._dcb ,_fea ._bab ;_dcc :=true ;var (_fdbg bool ;_ffc int ;_gfae error ;);_fea ._fae =0;_dca :for _ffc < _fea ._efe {_ggd :=_eg ._ggf ;for {_fdbg ,_gfae =_fea ._fgg .ReadBool ();
if _gfae !=nil {return _gfae ;};_ggd =_ggd .walk (_fdbg );if _ggd ==nil {continue _dca ;};if !_ggd ._gaff {continue ;};switch _ggd ._dbc {case _df :var _feg int ;if _dcc {_feg ,_gfae =_fea .decodeRun (_ed );}else {_feg ,_gfae =_fea .decodeRun (_d );};if _gfae !=nil {return _gfae ;
};_ffc +=_feg ;_fea ._bab [_fea ._fae ]=_ffc ;_fea ._fae ++;if _dcc {_feg ,_gfae =_fea .decodeRun (_d );}else {_feg ,_gfae =_fea .decodeRun (_ed );};if _gfae !=nil {return _gfae ;};_ffc +=_feg ;_fea ._bab [_fea ._fae ]=_ffc ;_fea ._fae ++;case _aa :_dfbc :=_fea .getNextChangingElement (_ffc ,_dcc )+1;
if _dfbc >=_fea ._af {_ffc =_fea ._efe ;}else {_ffc =_fea ._dcb [_dfbc ];};default:_gdgb :=_fea .getNextChangingElement (_ffc ,_dcc );if _gdgb >=_fea ._af ||_gdgb ==-1{_ffc =_fea ._efe +_ggd ._dbc ;}else {_ffc =_fea ._dcb [_gdgb ]+_ggd ._dbc ;};_fea ._bab [_fea ._fae ]=_ffc ;
_fea ._fae ++;_dcc =!_dcc ;};continue _dca ;};};return nil ;};func _cfb (_ag int )([]byte ,int ){var _gag []byte ;for _dce :=0;_dce < 6;_dce ++{_gag ,_ag =_gde (_gag ,_ag ,_edf );};return _gag ,_ag %8;};func _cbc (_dcec []byte ,_ace int ,_ggbc code )([]byte ,int ){_bga :=true ;
var _cg []byte ;_cg ,_ace =_gde (nil ,_ace ,_ggbc );_cbe :=0;var _cce int ;for _cbe < len (_dcec ){_cce ,_cbe =_ccdb (_dcec ,_bga ,_cbe );_cg ,_ace =_ade (_cg ,_ace ,_cce ,_bga );_bga =!_bga ;};return _cg ,_ace %8;};func (_eeaf *Decoder )tryFetchEOL ()(bool ,error ){_fgc ,_gga :=_eeaf ._fgg .ReadBits (12);
if _gga !=nil {return false ,_gga ;};return _fgc ==0x1,nil ;};func (_gfc *Decoder )tryFetchEOL1 ()(bool ,error ){_fee ,_fgb :=_gfc ._fgg .ReadBits (13);if _fgb !=nil {return false ,_fgb ;};return _fee ==0x3,nil ;};func (_ead *tree )fill (_bec ,_gbca ,_eda int )error {_efa :=_ead ._ggf ;
for _aacg :=0;_aacg < _bec ;_aacg ++{_debe :=_bec -1-_aacg ;_bgf :=((_gbca >>uint (_debe ))&1)!=0;_fge :=_efa .walk (_bgf );if _fge !=nil {if _fge ._gaff {return _b .New ("\u006e\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u006c\u0065\u0061\u0066\u002c\u0020\u006eo\u0020o\u0074\u0068\u0065\u0072\u0020\u0066\u006f\u006c\u006c\u006f\u0077\u0069\u006e\u0067");
};_efa =_fge ;continue ;};_fge =&treeNode {};if _aacg ==_bec -1{_fge ._dbc =_eda ;_fge ._gaff =true ;};if _gbca ==0{_fge ._ddab =true ;};_efa .set (_bgf ,_fge );_efa =_fge ;};return nil ;};func _daa (_efb ,_dcbc int )code {var _cbef code ;switch _dcbc -_efb {case -1:_cbef =_bg ;
case -2:_cbef =_ecb ;case -3:_cbef =_acd ;case 0:_cbef =_ecg ;case 1:_cbef =_ca ;case 2:_cbef =_eea ;case 3:_cbef =_fe ;};return _cbef ;};func _ece (_ecee []byte ,_gdef ,_dcdd ,_aegf int )([]byte ,int ){_edeg :=_daa (_dcdd ,_aegf );_ecee ,_gdef =_gde (_ecee ,_gdef ,_edeg );
return _ecee ,_gdef ;};func (_ad *Decoder )decodeRow ()(_adg error ){if !_ad ._dbd &&_ad ._dc > 0&&_ad ._dc ==_ad ._ab {return _a .EOF ;};switch _ad ._eae {case _gc :_adg =_ad .decodeRowType2 ();case _gbd :_adg =_ad .decodeRowType4 ();case _baa :_adg =_ad .decodeRowType6 ();
};if _adg !=nil {return _adg ;};_dg :=0;_fde :=true ;_ad ._gaa =0;for _gf :=0;_gf < _ad ._fae ;_gf ++{_dfbd :=_ad ._efe ;if _gf !=_ad ._fae {_dfbd =_ad ._bab [_gf ];};if _dfbd > _ad ._efe {_dfbd =_ad ._efe ;};_gfe :=_dg /8;for _dg %8!=0&&_dfbd -_dg > 0{var _gdc byte ;
if !_fde {_gdc =1<<uint (7-(_dg %8));};_ad ._da [_gfe ]|=_gdc ;_dg ++;};if _dg %8==0{_gfe =_dg /8;var _gfa byte ;if !_fde {_gfa =0xff;};for _dfbd -_dg > 7{_ad ._da [_gfe ]=_gfa ;_dg +=8;_gfe ++;};};for _dfbd -_dg > 0{if _dg %8==0{_ad ._da [_gfe ]=0;};var _cab byte ;
if !_fde {_cab =1<<uint (7-(_dg %8));};_ad ._da [_gfe ]|=_cab ;_dg ++;};_fde =!_fde ;};if _dg !=_ad ._efe {return _b .New ("\u0073\u0075\u006d\u0020\u006f\u0066 \u0072\u0075\u006e\u002d\u006c\u0065\u006e\u0067\u0074\u0068\u0073\u0020\u0064\u006f\u0065\u0073\u0020\u006e\u006f\u0074 \u0065\u0071\u0075\u0061\u006c\u0020\u0073\u0063\u0061\u006e\u0020\u006c\u0069\u006ee\u0020w\u0069\u0064\u0074\u0068");
};_ad ._cd =(_dg +7)/8;_ad ._ab ++;return nil ;};func _gde (_beb []byte ,_bbge int ,_abd code )([]byte ,int ){_deab :=0;for _deab < _abd .BitsWritten {_bed :=_bbge /8;_afec :=_bbge %8;if _bed >=len (_beb ){_beb =append (_beb ,0);};_cfgc :=8-_afec ;_cece :=_abd .BitsWritten -_deab ;
if _cfgc > _cece {_cfgc =_cece ;};if _deab < 8{_beb [_bed ]=_beb [_bed ]|byte (_abd .Code >>uint (8+_afec -_deab ))&_de [8-_cfgc -_afec ];}else {_beb [_bed ]=_beb [_bed ]|(byte (_abd .Code <<uint (_deab -8))&_de [8-_cfgc ])>>uint (_afec );};_bbge +=_cfgc ;
_deab +=_cfgc ;};return _beb ,_bbge ;};var (_eb *treeNode ;_ee *treeNode ;_d *tree ;_ed *tree ;_f *tree ;_eg *tree ;_edd =-2000;_bf =-1000;_aa =-3000;_df =-4000;);type code struct{Code uint16 ;BitsWritten int ;};func (_acg *Decoder )decode2D ()error {_acg ._af =_acg ._fae ;
_acg ._bab ,_acg ._dcb =_acg ._dcb ,_acg ._bab ;_dcg :=true ;var (_geg bool ;_dda int ;_ggb error ;);_acg ._fae =0;_cec :for _dda < _acg ._efe {_ccd :=_eg ._ggf ;for {_geg ,_ggb =_acg ._fgg .ReadBool ();if _ggb !=nil {return _ggb ;};_ccd =_ccd .walk (_geg );
if _ccd ==nil {continue _cec ;};if !_ccd ._gaff {continue ;};switch _ccd ._dbc {case _df :var _gbc int ;if _dcg {_gbc ,_ggb =_acg .decodeRun (_ed );}else {_gbc ,_ggb =_acg .decodeRun (_d );};if _ggb !=nil {return _ggb ;};_dda +=_gbc ;_acg ._bab [_acg ._fae ]=_dda ;
_acg ._fae ++;if _dcg {_gbc ,_ggb =_acg .decodeRun (_d );}else {_gbc ,_ggb =_acg .decodeRun (_ed );};if _ggb !=nil {return _ggb ;};_dda +=_gbc ;_acg ._bab [_acg ._fae ]=_dda ;_acg ._fae ++;case _aa :_aegdb :=_acg .getNextChangingElement (_dda ,_dcg )+1;
if _aegdb >=_acg ._af {_dda =_acg ._efe ;}else {_dda =_acg ._dcb [_aegdb ];};default:_ecgb :=_acg .getNextChangingElement (_dda ,_dcg );if _ecgb >=_acg ._af ||_ecgb ==-1{_dda =_acg ._efe +_ccd ._dbc ;}else {_dda =_acg ._dcb [_ecgb ]+_ccd ._dbc ;};_acg ._bab [_acg ._fae ]=_dda ;
_acg ._fae ++;_dcg =!_dcg ;};continue _cec ;};};return nil ;};func NewDecoder (data []byte ,options DecodeOptions )(*Decoder ,error ){_ded :=&Decoder {_fgg :_ac .NewReader (data ),_efe :options .Columns ,_dc :options .Rows ,_baf :options .DamagedRowsBeforeError ,_da :make ([]byte ,(options .Columns +7)/8),_dcb :make ([]int ,options .Columns +2),_bab :make ([]int ,options .Columns +2),_faf :options .EncodedByteAligned ,_egc :options .BlackIsOne ,_ede :options .EndOfLine ,_dbd :options .EndOfBlock };
switch {case options .K ==0:_ded ._eae =_gbd ;if len (data )< 20{return nil ,_b .New ("\u0074o\u006f\u0020\u0073\u0068o\u0072\u0074\u0020\u0063\u0063i\u0074t\u0066a\u0078\u0020\u0073\u0074\u0072\u0065\u0061m");};_fca :=data [:20];if _fca [0]!=0||(_fca [1]>>4!=1&&_fca [1]!=1){_ded ._eae =_gc ;
_fdb :=(uint16 (_fca [0])<<8+uint16 (_fca [1]&0xff))>>4;for _eaf :=12;_eaf < 160;_eaf ++{_fdb =(_fdb <<1)+uint16 ((_fca [_eaf /8]>>uint16 (7-(_eaf %8)))&0x01);if _fdb &0xfff==1{_ded ._eae =_gbd ;break ;};};};case options .K < 0:_ded ._eae =_baa ;case options .K > 0:_ded ._eae =_gbd ;
_ded ._fcg =true ;};switch _ded ._eae {case _gc ,_gbd ,_baa :default:return nil ,_b .New ("\u0075\u006ek\u006e\u006f\u0077\u006e\u0020\u0063\u0063\u0069\u0074\u0074\u0066\u0061\u0078\u002e\u0044\u0065\u0063\u006f\u0064\u0065\u0072\u0020ty\u0070\u0065");
};return _ded ,nil ;};func (_ffa *treeNode )set (_bgab bool ,_eeec *treeNode ){if !_bgab {_ffa ._fega =_eeec ;}else {_ffa ._decg =_eeec ;};};var _bae =[...][]uint16 {{0x2,0x3},{0x2,0x3},{0x2,0x3},{0x3},{0x4,0x5},{0x4,0x5,0x7},{0x4,0x7},{0x18},{0x17,0x18,0x37,0x8,0xf},{0x17,0x18,0x28,0x37,0x67,0x68,0x6c,0x8,0xc,0xd},{0x12,0x13,0x14,0x15,0x16,0x17,0x1c,0x1d,0x1e,0x1f,0x24,0x27,0x28,0x2b,0x2c,0x33,0x34,0x35,0x37,0x38,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0xc8,0xc9,0xca,0xcb,0xcc,0xcd,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xda,0xdb},{0x4a,0x4b,0x4c,0x4d,0x52,0x53,0x54,0x55,0x5a,0x5b,0x64,0x65,0x6c,0x6d,0x72,0x73,0x74,0x75,0x76,0x77}};
func (_afc *Decoder )decode1D ()error {var (_gcf int ;_eddg error ;);_dfbe :=true ;_afc ._fae =0;for {var _gec int ;if _dfbe {_gec ,_eddg =_afc .decodeRun (_ed );}else {_gec ,_eddg =_afc .decodeRun (_d );};if _eddg !=nil {return _eddg ;};_gcf +=_gec ;_afc ._bab [_afc ._fae ]=_gcf ;
_afc ._fae ++;_dfbe =!_dfbe ;if _gcf >=_afc ._efe {break ;};};return nil ;};func (_eafc *Decoder )Read (in []byte )(int ,error ){if _eafc ._efga !=nil {return 0,_eafc ._efga ;};_aff :=len (in );var (_bc int ;_aeb int ;);for _aff !=0{if _eafc ._ff >=_eafc ._cd {if _cac :=_eafc .fetch ();
_cac !=nil {_eafc ._efga =_cac ;return 0,_cac ;};};if _eafc ._cd ==-1{return _bc ,_a .EOF ;};switch {case _aff <=_eafc ._cd -_eafc ._ff :_bd :=_eafc ._da [_eafc ._ff :_eafc ._ff +_aff ];for _ ,_dbf :=range _bd {if !_eafc ._egc {_dbf =^_dbf ;};in [_aeb ]=_dbf ;
_aeb ++;};_bc +=len (_bd );_eafc ._ff +=len (_bd );return _bc ,nil ;default:_dac :=_eafc ._da [_eafc ._ff :];for _ ,_bca :=range _dac {if !_eafc ._egc {_bca =^_bca ;};in [_aeb ]=_bca ;_aeb ++;};_bc +=len (_dac );_eafc ._ff +=len (_dac );_aff -=len (_dac );
};};return _bc ,nil ;};var _gdg =[...][]uint16 {{2,3,4,5,6,7},{128,8,9,64,10,11},{192,1664,16,17,13,14,15,1,12},{26,21,28,27,18,24,25,22,256,23,20,19},{33,34,35,36,37,38,31,32,29,53,54,39,40,41,42,43,44,30,61,62,63,0,320,384,45,59,60,46,49,50,51,52,55,56,57,58,448,512,640,576,47,48},{1472,1536,1600,1728,704,768,832,896,960,1024,1088,1152,1216,1280,1344,1408},{},{1792,1856,1920},{1984,2048,2112,2176,2240,2304,2368,2432,2496,2560}};
func _eecf (_ecd ,_efda []byte ,_gcd int ,_ege bool )int {_ddc :=_gbba (_efda ,_gcd );if _ddc < len (_efda )&&(_gcd ==-1&&_efda [_ddc ]==_gaf ||_gcd >=0&&_gcd < len (_ecd )&&_ecd [_gcd ]==_efda [_ddc ]||_gcd >=len (_ecd )&&_ege &&_efda [_ddc ]==_gaf ||_gcd >=len (_ecd )&&!_ege &&_efda [_ddc ]==_fac ){_ddc =_gbba (_efda ,_ddc );
};return _ddc ;};func (_fgf *tree )fillWithNode (_afa ,_eceg int ,_fag *treeNode )error {_cabe :=_fgf ._ggf ;for _dag :=0;_dag < _afa ;_dag ++{_fdfc :=uint (_afa -1-_dag );_aea :=((_eceg >>_fdfc )&1)!=0;_adf :=_cabe .walk (_aea );if _adf !=nil {if _adf ._gaff {return _b .New ("\u006e\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u006c\u0065\u0061\u0066\u002c\u0020\u006eo\u0020o\u0074\u0068\u0065\u0072\u0020\u0066\u006f\u006c\u006c\u006f\u0077\u0069\u006e\u0067");
};_cabe =_adf ;continue ;};if _dag ==_afa -1{_adf =_fag ;}else {_adf =&treeNode {};};if _eceg ==0{_adf ._ddab =true ;};_cabe .set (_aea ,_adf );_cabe =_adf ;};return nil ;};func _ffcf (_cfdd int )([]byte ,int ){var _fdbd []byte ;for _cagc :=0;_cagc < 2;
_cagc ++{_fdbd ,_cfdd =_gde (_fdbd ,_cfdd ,_efd );};return _fdbd ,_cfdd %8;};type Encoder struct{K int ;EndOfLine bool ;EncodedByteAlign bool ;Columns int ;Rows int ;EndOfBlock bool ;BlackIs1 bool ;DamagedRowsBeforeError int ;};type tree struct{_ggf *treeNode };
func (_cdd *Encoder )appendEncodedRow (_agb ,_dfd []byte ,_cfdc int )[]byte {if len (_agb )> 0&&_cfdc !=0&&!_cdd .EncodedByteAlign {_agb [len (_agb )-1]=_agb [len (_agb )-1]|_dfd [0];_agb =append (_agb ,_dfd [1:]...);}else {_agb =append (_agb ,_dfd ...);
};return _agb ;};