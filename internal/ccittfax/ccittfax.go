//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package ccittfax ;import (_g "errors";_f "github.com/unidoc/unipdf/v3/internal/bitwise";_ga "io";_c "math";);func (_gbdg *treeNode )walk (_caag bool )*treeNode {if _caag {return _gbdg ._efa ;};return _gbdg ._dfg ;};func init (){_ba =&treeNode {_bbf :true ,_fde :_gb };
_a =&treeNode {_fde :_ab ,_efa :_ba };_a ._dfg =_a ;_d =&tree {_fgbc :&treeNode {}};if _bg :=_d .fillWithNode (12,0,_a );_bg !=nil {panic (_bg .Error ());};if _ge :=_d .fillWithNode (12,1,_ba );_ge !=nil {panic (_ge .Error ());};_fg =&tree {_fgbc :&treeNode {}};
for _ff :=0;_ff < len (_af );_ff ++{for _cb :=0;_cb < len (_af [_ff ]);_cb ++{if _dg :=_fg .fill (_ff +2,int (_af [_ff ][_cb ]),int (_fc [_ff ][_cb ]));_dg !=nil {panic (_dg .Error ());};};};if _gee :=_fg .fillWithNode (12,0,_a );_gee !=nil {panic (_gee .Error ());
};if _bge :=_fg .fillWithNode (12,1,_ba );_bge !=nil {panic (_bge .Error ());};_ca =&tree {_fgbc :&treeNode {}};for _bb :=0;_bb < len (_cbd );_bb ++{for _bd :=0;_bd < len (_cbd [_bb ]);_bd ++{if _geec :=_ca .fill (_bb +4,int (_cbd [_bb ][_bd ]),int (_ae [_bb ][_bd ]));
_geec !=nil {panic (_geec .Error ());};};};if _ac :=_ca .fillWithNode (12,0,_a );_ac !=nil {panic (_ac .Error ());};if _cee :=_ca .fillWithNode (12,1,_ba );_cee !=nil {panic (_cee .Error ());};_ce =&tree {_fgbc :&treeNode {}};if _dd :=_ce .fill (4,1,_cc );
_dd !=nil {panic (_dd .Error ());};if _gbe :=_ce .fill (3,1,_gc );_gbe !=nil {panic (_gbe .Error ());};if _de :=_ce .fill (1,1,0);_de !=nil {panic (_de .Error ());};if _be :=_ce .fill (3,3,1);_be !=nil {panic (_be .Error ());};if _e :=_ce .fill (6,3,2);
_e !=nil {panic (_e .Error ());};if _cag :=_ce .fill (7,3,3);_cag !=nil {panic (_cag .Error ());};if _ged :=_ce .fill (3,2,-1);_ged !=nil {panic (_ged .Error ());};if _ef :=_ce .fill (6,2,-2);_ef !=nil {panic (_ef .Error ());};if _efe :=_ce .fill (7,2,-3);
_efe !=nil {panic (_efe .Error ());};};func _bffd (_fbda ,_dcag []byte ,_ccbc int ,_gfdc bool )int {_gga :=_ccf (_dcag ,_ccbc );if _gga < len (_dcag )&&(_ccbc ==-1&&_dcag [_gga ]==_bgdc ||_ccbc >=0&&_ccbc < len (_fbda )&&_fbda [_ccbc ]==_dcag [_gga ]||_ccbc >=len (_fbda )&&_gfdc &&_dcag [_gga ]==_bgdc ||_ccbc >=len (_fbda )&&!_gfdc &&_dcag [_gga ]==_fcf ){_gga =_ccf (_dcag ,_gga );
};return _gga ;};func _dad (_cfb []byte ,_aacc int ,_dfab code )([]byte ,int ){_fef :=0;for _fef < _dfab .BitsWritten {_dafca :=_aacc /8;_aga :=_aacc %8;if _dafca >=len (_cfb ){_cfb =append (_cfb ,0);};_baeg :=8-_aga ;_aag :=_dfab .BitsWritten -_fef ;if _baeg > _aag {_baeg =_aag ;
};if _fef < 8{_cfb [_dafca ]=_cfb [_dafca ]|byte (_dfab .Code >>uint (8+_aga -_fef ))&_dgg [8-_baeg -_aga ];}else {_cfb [_dafca ]=_cfb [_dafca ]|(byte (_dfab .Code <<uint (_fef -8))&_dgg [8-_baeg ])>>uint (_aga );};_aacc +=_baeg ;_fef +=_baeg ;};return _cfb ,_aacc ;
};func (_gcde *Decoder )tryFetchRTC2D ()(_gbc error ){_gcde ._adb .Mark ();var _dde bool ;for _cbcd :=0;_cbcd < 5;_cbcd ++{_dde ,_gbc =_gcde .tryFetchEOL1 ();if _gbc !=nil {if _g .Is (_gbc ,_ga .EOF ){if _cbcd ==0{break ;};return _ad ;};};if _dde {continue ;
};if _cbcd > 0{return _ad ;};break ;};if _dde {return _ga .EOF ;};_gcde ._adb .Reset ();return _gbc ;};func (_dfd *Decoder )decodeRowType6 ()error {if _dfd ._ffd {_dfd ._adb .Align ();};if _dfd ._eee {_dfd ._adb .Mark ();_eef ,_ece :=_dfd .tryFetchEOL ();
if _ece !=nil {return _ece ;};if _eef {_eef ,_ece =_dfd .tryFetchEOL ();if _ece !=nil {return _ece ;};if _eef {return _ga .EOF ;};};_dfd ._adb .Reset ();};return _dfd .decode2D ();};type tiffType int ;func _baef (_gbad []byte ,_fec bool ,_fdba int )(int ,int ){_gebc :=0;
for _fdba < len (_gbad ){if _fec {if _gbad [_fdba ]!=_bgdc {break ;};}else {if _gbad [_fdba ]!=_fcf {break ;};};_gebc ++;_fdba ++;};return _gebc ,_fdba ;};func init (){_fca =make (map[int ]code );_fca [0]=code {Code :13<<8|3<<6,BitsWritten :10};_fca [1]=code {Code :2<<(5+8),BitsWritten :3};
_fca [2]=code {Code :3<<(6+8),BitsWritten :2};_fca [3]=code {Code :2<<(6+8),BitsWritten :2};_fca [4]=code {Code :3<<(5+8),BitsWritten :3};_fca [5]=code {Code :3<<(4+8),BitsWritten :4};_fca [6]=code {Code :2<<(4+8),BitsWritten :4};_fca [7]=code {Code :3<<(3+8),BitsWritten :5};
_fca [8]=code {Code :5<<(2+8),BitsWritten :6};_fca [9]=code {Code :4<<(2+8),BitsWritten :6};_fca [10]=code {Code :4<<(1+8),BitsWritten :7};_fca [11]=code {Code :5<<(1+8),BitsWritten :7};_fca [12]=code {Code :7<<(1+8),BitsWritten :7};_fca [13]=code {Code :4<<8,BitsWritten :8};
_fca [14]=code {Code :7<<8,BitsWritten :8};_fca [15]=code {Code :12<<8,BitsWritten :9};_fca [16]=code {Code :5<<8|3<<6,BitsWritten :10};_fca [17]=code {Code :6<<8,BitsWritten :10};_fca [18]=code {Code :2<<8,BitsWritten :10};_fca [19]=code {Code :12<<8|7<<5,BitsWritten :11};
_fca [20]=code {Code :13<<8,BitsWritten :11};_fca [21]=code {Code :13<<8|4<<5,BitsWritten :11};_fca [22]=code {Code :6<<8|7<<5,BitsWritten :11};_fca [23]=code {Code :5<<8,BitsWritten :11};_fca [24]=code {Code :2<<8|7<<5,BitsWritten :11};_fca [25]=code {Code :3<<8,BitsWritten :11};
_fca [26]=code {Code :12<<8|10<<4,BitsWritten :12};_fca [27]=code {Code :12<<8|11<<4,BitsWritten :12};_fca [28]=code {Code :12<<8|12<<4,BitsWritten :12};_fca [29]=code {Code :12<<8|13<<4,BitsWritten :12};_fca [30]=code {Code :6<<8|8<<4,BitsWritten :12};
_fca [31]=code {Code :6<<8|9<<4,BitsWritten :12};_fca [32]=code {Code :6<<8|10<<4,BitsWritten :12};_fca [33]=code {Code :6<<8|11<<4,BitsWritten :12};_fca [34]=code {Code :13<<8|2<<4,BitsWritten :12};_fca [35]=code {Code :13<<8|3<<4,BitsWritten :12};_fca [36]=code {Code :13<<8|4<<4,BitsWritten :12};
_fca [37]=code {Code :13<<8|5<<4,BitsWritten :12};_fca [38]=code {Code :13<<8|6<<4,BitsWritten :12};_fca [39]=code {Code :13<<8|7<<4,BitsWritten :12};_fca [40]=code {Code :6<<8|12<<4,BitsWritten :12};_fca [41]=code {Code :6<<8|13<<4,BitsWritten :12};_fca [42]=code {Code :13<<8|10<<4,BitsWritten :12};
_fca [43]=code {Code :13<<8|11<<4,BitsWritten :12};_fca [44]=code {Code :5<<8|4<<4,BitsWritten :12};_fca [45]=code {Code :5<<8|5<<4,BitsWritten :12};_fca [46]=code {Code :5<<8|6<<4,BitsWritten :12};_fca [47]=code {Code :5<<8|7<<4,BitsWritten :12};_fca [48]=code {Code :6<<8|4<<4,BitsWritten :12};
_fca [49]=code {Code :6<<8|5<<4,BitsWritten :12};_fca [50]=code {Code :5<<8|2<<4,BitsWritten :12};_fca [51]=code {Code :5<<8|3<<4,BitsWritten :12};_fca [52]=code {Code :2<<8|4<<4,BitsWritten :12};_fca [53]=code {Code :3<<8|7<<4,BitsWritten :12};_fca [54]=code {Code :3<<8|8<<4,BitsWritten :12};
_fca [55]=code {Code :2<<8|7<<4,BitsWritten :12};_fca [56]=code {Code :2<<8|8<<4,BitsWritten :12};_fca [57]=code {Code :5<<8|8<<4,BitsWritten :12};_fca [58]=code {Code :5<<8|9<<4,BitsWritten :12};_fca [59]=code {Code :2<<8|11<<4,BitsWritten :12};_fca [60]=code {Code :2<<8|12<<4,BitsWritten :12};
_fca [61]=code {Code :5<<8|10<<4,BitsWritten :12};_fca [62]=code {Code :6<<8|6<<4,BitsWritten :12};_fca [63]=code {Code :6<<8|7<<4,BitsWritten :12};_gd =make (map[int ]code );_gd [0]=code {Code :53<<8,BitsWritten :8};_gd [1]=code {Code :7<<(2+8),BitsWritten :6};
_gd [2]=code {Code :7<<(4+8),BitsWritten :4};_gd [3]=code {Code :8<<(4+8),BitsWritten :4};_gd [4]=code {Code :11<<(4+8),BitsWritten :4};_gd [5]=code {Code :12<<(4+8),BitsWritten :4};_gd [6]=code {Code :14<<(4+8),BitsWritten :4};_gd [7]=code {Code :15<<(4+8),BitsWritten :4};
_gd [8]=code {Code :19<<(3+8),BitsWritten :5};_gd [9]=code {Code :20<<(3+8),BitsWritten :5};_gd [10]=code {Code :7<<(3+8),BitsWritten :5};_gd [11]=code {Code :8<<(3+8),BitsWritten :5};_gd [12]=code {Code :8<<(2+8),BitsWritten :6};_gd [13]=code {Code :3<<(2+8),BitsWritten :6};
_gd [14]=code {Code :52<<(2+8),BitsWritten :6};_gd [15]=code {Code :53<<(2+8),BitsWritten :6};_gd [16]=code {Code :42<<(2+8),BitsWritten :6};_gd [17]=code {Code :43<<(2+8),BitsWritten :6};_gd [18]=code {Code :39<<(1+8),BitsWritten :7};_gd [19]=code {Code :12<<(1+8),BitsWritten :7};
_gd [20]=code {Code :8<<(1+8),BitsWritten :7};_gd [21]=code {Code :23<<(1+8),BitsWritten :7};_gd [22]=code {Code :3<<(1+8),BitsWritten :7};_gd [23]=code {Code :4<<(1+8),BitsWritten :7};_gd [24]=code {Code :40<<(1+8),BitsWritten :7};_gd [25]=code {Code :43<<(1+8),BitsWritten :7};
_gd [26]=code {Code :19<<(1+8),BitsWritten :7};_gd [27]=code {Code :36<<(1+8),BitsWritten :7};_gd [28]=code {Code :24<<(1+8),BitsWritten :7};_gd [29]=code {Code :2<<8,BitsWritten :8};_gd [30]=code {Code :3<<8,BitsWritten :8};_gd [31]=code {Code :26<<8,BitsWritten :8};
_gd [32]=code {Code :27<<8,BitsWritten :8};_gd [33]=code {Code :18<<8,BitsWritten :8};_gd [34]=code {Code :19<<8,BitsWritten :8};_gd [35]=code {Code :20<<8,BitsWritten :8};_gd [36]=code {Code :21<<8,BitsWritten :8};_gd [37]=code {Code :22<<8,BitsWritten :8};
_gd [38]=code {Code :23<<8,BitsWritten :8};_gd [39]=code {Code :40<<8,BitsWritten :8};_gd [40]=code {Code :41<<8,BitsWritten :8};_gd [41]=code {Code :42<<8,BitsWritten :8};_gd [42]=code {Code :43<<8,BitsWritten :8};_gd [43]=code {Code :44<<8,BitsWritten :8};
_gd [44]=code {Code :45<<8,BitsWritten :8};_gd [45]=code {Code :4<<8,BitsWritten :8};_gd [46]=code {Code :5<<8,BitsWritten :8};_gd [47]=code {Code :10<<8,BitsWritten :8};_gd [48]=code {Code :11<<8,BitsWritten :8};_gd [49]=code {Code :82<<8,BitsWritten :8};
_gd [50]=code {Code :83<<8,BitsWritten :8};_gd [51]=code {Code :84<<8,BitsWritten :8};_gd [52]=code {Code :85<<8,BitsWritten :8};_gd [53]=code {Code :36<<8,BitsWritten :8};_gd [54]=code {Code :37<<8,BitsWritten :8};_gd [55]=code {Code :88<<8,BitsWritten :8};
_gd [56]=code {Code :89<<8,BitsWritten :8};_gd [57]=code {Code :90<<8,BitsWritten :8};_gd [58]=code {Code :91<<8,BitsWritten :8};_gd [59]=code {Code :74<<8,BitsWritten :8};_gd [60]=code {Code :75<<8,BitsWritten :8};_gd [61]=code {Code :50<<8,BitsWritten :8};
_gd [62]=code {Code :51<<8,BitsWritten :8};_gd [63]=code {Code :52<<8,BitsWritten :8};_bc =make (map[int ]code );_bc [64]=code {Code :3<<8|3<<6,BitsWritten :10};_bc [128]=code {Code :12<<8|8<<4,BitsWritten :12};_bc [192]=code {Code :12<<8|9<<4,BitsWritten :12};
_bc [256]=code {Code :5<<8|11<<4,BitsWritten :12};_bc [320]=code {Code :3<<8|3<<4,BitsWritten :12};_bc [384]=code {Code :3<<8|4<<4,BitsWritten :12};_bc [448]=code {Code :3<<8|5<<4,BitsWritten :12};_bc [512]=code {Code :3<<8|12<<3,BitsWritten :13};_bc [576]=code {Code :3<<8|13<<3,BitsWritten :13};
_bc [640]=code {Code :2<<8|10<<3,BitsWritten :13};_bc [704]=code {Code :2<<8|11<<3,BitsWritten :13};_bc [768]=code {Code :2<<8|12<<3,BitsWritten :13};_bc [832]=code {Code :2<<8|13<<3,BitsWritten :13};_bc [896]=code {Code :3<<8|18<<3,BitsWritten :13};_bc [960]=code {Code :3<<8|19<<3,BitsWritten :13};
_bc [1024]=code {Code :3<<8|20<<3,BitsWritten :13};_bc [1088]=code {Code :3<<8|21<<3,BitsWritten :13};_bc [1152]=code {Code :3<<8|22<<3,BitsWritten :13};_bc [1216]=code {Code :119<<3,BitsWritten :13};_bc [1280]=code {Code :2<<8|18<<3,BitsWritten :13};_bc [1344]=code {Code :2<<8|19<<3,BitsWritten :13};
_bc [1408]=code {Code :2<<8|20<<3,BitsWritten :13};_bc [1472]=code {Code :2<<8|21<<3,BitsWritten :13};_bc [1536]=code {Code :2<<8|26<<3,BitsWritten :13};_bc [1600]=code {Code :2<<8|27<<3,BitsWritten :13};_bc [1664]=code {Code :3<<8|4<<3,BitsWritten :13};
_bc [1728]=code {Code :3<<8|5<<3,BitsWritten :13};_bee =make (map[int ]code );_bee [64]=code {Code :27<<(3+8),BitsWritten :5};_bee [128]=code {Code :18<<(3+8),BitsWritten :5};_bee [192]=code {Code :23<<(2+8),BitsWritten :6};_bee [256]=code {Code :55<<(1+8),BitsWritten :7};
_bee [320]=code {Code :54<<8,BitsWritten :8};_bee [384]=code {Code :55<<8,BitsWritten :8};_bee [448]=code {Code :100<<8,BitsWritten :8};_bee [512]=code {Code :101<<8,BitsWritten :8};_bee [576]=code {Code :104<<8,BitsWritten :8};_bee [640]=code {Code :103<<8,BitsWritten :8};
_bee [704]=code {Code :102<<8,BitsWritten :9};_bee [768]=code {Code :102<<8|1<<7,BitsWritten :9};_bee [832]=code {Code :105<<8,BitsWritten :9};_bee [896]=code {Code :105<<8|1<<7,BitsWritten :9};_bee [960]=code {Code :106<<8,BitsWritten :9};_bee [1024]=code {Code :106<<8|1<<7,BitsWritten :9};
_bee [1088]=code {Code :107<<8,BitsWritten :9};_bee [1152]=code {Code :107<<8|1<<7,BitsWritten :9};_bee [1216]=code {Code :108<<8,BitsWritten :9};_bee [1280]=code {Code :108<<8|1<<7,BitsWritten :9};_bee [1344]=code {Code :109<<8,BitsWritten :9};_bee [1408]=code {Code :109<<8|1<<7,BitsWritten :9};
_bee [1472]=code {Code :76<<8,BitsWritten :9};_bee [1536]=code {Code :76<<8|1<<7,BitsWritten :9};_bee [1600]=code {Code :77<<8,BitsWritten :9};_bee [1664]=code {Code :24<<(2+8),BitsWritten :6};_bee [1728]=code {Code :77<<8|1<<7,BitsWritten :9};_ddg =make (map[int ]code );
_ddg [1792]=code {Code :1<<8,BitsWritten :11};_ddg [1856]=code {Code :1<<8|4<<5,BitsWritten :11};_ddg [1920]=code {Code :1<<8|5<<5,BitsWritten :11};_ddg [1984]=code {Code :1<<8|2<<4,BitsWritten :12};_ddg [2048]=code {Code :1<<8|3<<4,BitsWritten :12};_ddg [2112]=code {Code :1<<8|4<<4,BitsWritten :12};
_ddg [2176]=code {Code :1<<8|5<<4,BitsWritten :12};_ddg [2240]=code {Code :1<<8|6<<4,BitsWritten :12};_ddg [2304]=code {Code :1<<8|7<<4,BitsWritten :12};_ddg [2368]=code {Code :1<<8|12<<4,BitsWritten :12};_ddg [2432]=code {Code :1<<8|13<<4,BitsWritten :12};
_ddg [2496]=code {Code :1<<8|14<<4,BitsWritten :12};_ddg [2560]=code {Code :1<<8|15<<4,BitsWritten :12};_dgg =make (map[int ]byte );_dgg [0]=0xFF;_dgg [1]=0xFE;_dgg [2]=0xFC;_dgg [3]=0xF8;_dgg [4]=0xF0;_dgg [5]=0xE0;_dgg [6]=0xC0;_dgg [7]=0x80;_dgg [8]=0x00;
};func _cd (_caa int ,_gdab bool )(code ,int ,bool ){if _caa < 64{if _gdab {return _gd [_caa ],0,true ;};return _fca [_caa ],0,true ;};_dcg :=_caa /64;if _dcg > 40{return _ddg [2560],_caa -2560,false ;};if _dcg > 27{return _ddg [_dcg *64],_caa -_dcg *64,false ;
};if _gdab {return _bee [_dcg *64],_caa -_dcg *64,false ;};return _bc [_dcg *64],_caa -_dcg *64,false ;};type tree struct{_fgbc *treeNode };func (_gcd *Decoder )getNextChangingElement (_dfac int ,_geb bool )int {_bcb :=0;if !_geb {_bcb =1;};_ffg :=int (uint32 (_gcd ._cfc )&0xFFFFFFFE)+_bcb ;
if _ffg > 2{_ffg -=2;};if _dfac ==0{return _ffg ;};for _gef :=_ffg ;_gef < _gcd ._fa ;_gef +=2{if _dfac < _gcd ._cf [_gef ]{_gcd ._cfc =_gef ;return _gef ;};};return -1;};func (_ffa *Encoder )encodeG4 (_ccgf [][]byte )[]byte {_ddc :=make ([][]byte ,len (_ccgf ));
copy (_ddc ,_ccgf );_ddc =_cagea (_ddc );var _ffag []byte ;var _gbd int ;for _edc :=1;_edc < len (_ddc );_edc ++{if _ffa .Rows > 0&&!_ffa .EndOfBlock &&_edc ==(_ffa .Rows +1){break ;};var _gfd []byte ;var _eeb ,_fae ,_gba int ;_fffa :=_gbd ;_accb :=-1;
for _accb < len (_ddc [_edc ]){_eeb =_ccf (_ddc [_edc ],_accb );_fae =_acfc (_ddc [_edc ],_ddc [_edc -1],_accb );_gba =_ccf (_ddc [_edc -1],_fae );if _gba < _eeb {_gfd ,_fffa =_dad (_gfd ,_fffa ,_bbe );_accb =_gba ;}else {if _c .Abs (float64 (_fae -_eeb ))> 3{_gfd ,_fffa ,_accb =_ffagc (_ddc [_edc ],_gfd ,_fffa ,_accb ,_eeb );
}else {_gfd ,_fffa =_fagb (_gfd ,_fffa ,_eeb ,_fae );_accb =_eeb ;};};};_ffag =_ffa .appendEncodedRow (_ffag ,_gfd ,_gbd );if _ffa .EncodedByteAlign {_fffa =0;};_gbd =_fffa %8;};if _ffa .EndOfBlock {_ccbg ,_ :=_faee (_gbd );_ffag =_ffa .appendEncodedRow (_ffag ,_ccbg ,_gbd );
};return _ffag ;};func (_beg *Decoder )decode2D ()error {_beg ._fa =_beg ._fcd ;_beg ._ed ,_beg ._cf =_beg ._cf ,_beg ._ed ;_ffbf :=true ;var (_gcfe bool ;_beeg int ;_dfbg error ;);_beg ._fcd =0;_bcde :for _beeg < _beg ._dga {_bdd :=_ce ._fgbc ;for {_gcfe ,_dfbg =_beg ._adb .ReadBool ();
if _dfbg !=nil {return _dfbg ;};_bdd =_bdd .walk (_gcfe );if _bdd ==nil {continue _bcde ;};if !_bdd ._bbf {continue ;};switch _bdd ._fde {case _gc :var _bba int ;if _ffbf {_bba ,_dfbg =_beg .decodeRun (_ca );}else {_bba ,_dfbg =_beg .decodeRun (_fg );};
if _dfbg !=nil {return _dfbg ;};_beeg +=_bba ;_beg ._ed [_beg ._fcd ]=_beeg ;_beg ._fcd ++;if _ffbf {_bba ,_dfbg =_beg .decodeRun (_fg );}else {_bba ,_dfbg =_beg .decodeRun (_ca );};if _dfbg !=nil {return _dfbg ;};_beeg +=_bba ;_beg ._ed [_beg ._fcd ]=_beeg ;
_beg ._fcd ++;case _cc :_gbfg :=_beg .getNextChangingElement (_beeg ,_ffbf )+1;if _gbfg >=_beg ._fa {_beeg =_beg ._dga ;}else {_beeg =_beg ._cf [_gbfg ];};default:_gcef :=_beg .getNextChangingElement (_beeg ,_ffbf );if _gcef >=_beg ._fa ||_gcef ==-1{_beeg =_beg ._dga +_bdd ._fde ;
}else {_beeg =_beg ._cf [_gcef ]+_bdd ._fde ;};_beg ._ed [_beg ._fcd ]=_beeg ;_beg ._fcd ++;_ffbf =!_ffbf ;};continue _bcde ;};};return nil ;};func _acfc (_gfb ,_adfc []byte ,_ebf int )int {_cbda :=_ccf (_adfc ,_ebf );if _cbda < len (_adfc )&&(_ebf ==-1&&_adfc [_cbda ]==_bgdc ||_ebf >=0&&_ebf < len (_gfb )&&_gfb [_ebf ]==_adfc [_cbda ]||_ebf >=len (_gfb )&&_gfb [_ebf -1]!=_adfc [_cbda ]){_cbda =_ccf (_adfc ,_cbda );
};return _cbda ;};type code struct{Code uint16 ;BitsWritten int ;};func NewDecoder (data []byte ,options DecodeOptions )(*Decoder ,error ){_gbf :=&Decoder {_adb :_f .NewReader (data ),_dga :options .Columns ,_cefg :options .Rows ,_eg :options .DamagedRowsBeforeError ,_aeg :make ([]byte ,(options .Columns +7)/8),_cf :make ([]int ,options .Columns +2),_ed :make ([]int ,options .Columns +2),_ffd :options .EncodedByteAligned ,_bca :options .BlackIsOne ,_ecb :options .EndOfLine ,_eee :options .EndOfBlock };
switch {case options .K ==0:_gbf ._fcc =_ccc ;if len (data )< 20{return nil ,_g .New ("\u0074o\u006f\u0020\u0073\u0068o\u0072\u0074\u0020\u0063\u0063i\u0074t\u0066a\u0078\u0020\u0073\u0074\u0072\u0065\u0061m");};_ccb :=data [:20];if _ccb [0]!=0||(_ccb [1]>>4!=1&&_ccb [1]!=1){_gbf ._fcc =_cef ;
_dgd :=(uint16 (_ccb [0])<<8+uint16 (_ccb [1]&0xff))>>4;for _daf :=12;_daf < 160;_daf ++{_dgd =(_dgd <<1)+uint16 ((_ccb [_daf /8]>>uint16 (7-(_daf %8)))&0x01);if _dgd &0xfff==1{_gbf ._fcc =_ccc ;break ;};};};case options .K < 0:_gbf ._fcc =_bdc ;case options .K > 0:_gbf ._fcc =_ccc ;
_gbf ._fed =true ;};switch _gbf ._fcc {case _cef ,_ccc ,_bdc :default:return nil ,_g .New ("\u0075\u006ek\u006e\u006f\u0077\u006e\u0020\u0063\u0063\u0069\u0074\u0074\u0066\u0061\u0078\u002e\u0044\u0065\u0063\u006f\u0064\u0065\u0072\u0020ty\u0070\u0065");
};return _gbf ,nil ;};func _cefd (_bcg ,_efec int )code {var _aceg code ;switch _efec -_bcg {case -1:_aceg =_fe ;case -2:_aceg =_agb ;case -3:_aceg =_acc ;case 0:_aceg =_ec ;case 1:_aceg =_dc ;case 2:_aceg =_gce ;case 3:_aceg =_efc ;};return _aceg ;};func (_fdcb *Encoder )appendEncodedRow (_age ,_bgc []byte ,_bfcf int )[]byte {if len (_age )> 0&&_bfcf !=0&&!_fdcb .EncodedByteAlign {_age [len (_age )-1]=_age [len (_age )-1]|_bgc [0];
_age =append (_age ,_bgc [1:]...);}else {_age =append (_age ,_bgc ...);};return _age ;};func _fbg (_fgg []byte ,_cagc int )([]byte ,int ){return _dad (_fgg ,_cagc ,_bbe )};func _bcf (_gdfa []byte ,_bddf int ,_ege int ,_aae bool )([]byte ,int ){var (_ggc code ;
_gcg bool ;);for !_gcg {_ggc ,_ege ,_gcg =_cd (_ege ,_aae );_gdfa ,_bddf =_dad (_gdfa ,_bddf ,_ggc );};return _gdfa ,_bddf ;};func (_fcb *Decoder )tryFetchEOL ()(bool ,error ){_dgac ,_bed :=_fcb ._adb .ReadBits (12);if _bed !=nil {return false ,_bed ;};
return _dgac ==0x1,nil ;};var (_ba *treeNode ;_a *treeNode ;_fg *tree ;_ca *tree ;_d *tree ;_ce *tree ;_gb =-2000;_ab =-1000;_cc =-3000;_gc =-4000;);func _cagea (_cgef [][]byte )[][]byte {_dcac :=make ([]byte ,len (_cgef [0]));for _edcc :=range _dcac {_dcac [_edcc ]=_bgdc ;
};_cgef =append (_cgef ,[]byte {});for _gff :=len (_cgef )-1;_gff > 0;_gff --{_cgef [_gff ]=_cgef [_gff -1];};_cgef [0]=_dcac ;return _cgef ;};func (_dafc *Decoder )decodeRun (_fbb *tree )(int ,error ){var _cea int ;_gf :=_fbb ._fgbc ;for {_gae ,_gaec :=_dafc ._adb .ReadBool ();
if _gaec !=nil {return 0,_gaec ;};_gf =_gf .walk (_gae );if _gf ==nil {return 0,_g .New ("\u0075\u006e\u006bno\u0077\u006e\u0020\u0063\u006f\u0064\u0065\u0020\u0069n\u0020H\u0075f\u0066m\u0061\u006e\u0020\u0052\u004c\u0045\u0020\u0073\u0074\u0072\u0065\u0061\u006d");
};if _gf ._bbf {_cea +=_gf ._fde ;switch {case _gf ._fde >=64:_gf =_fbb ._fgbc ;case _gf ._fde >=0:return _cea ,nil ;default:return _dafc ._dga ,nil ;};};};};var _cbd =[...][]uint16 {{0x7,0x8,0xb,0xc,0xe,0xf},{0x12,0x13,0x14,0x1b,0x7,0x8},{0x17,0x18,0x2a,0x2b,0x3,0x34,0x35,0x7,0x8},{0x13,0x17,0x18,0x24,0x27,0x28,0x2b,0x3,0x37,0x4,0x8,0xc},{0x12,0x13,0x14,0x15,0x16,0x17,0x1a,0x1b,0x2,0x24,0x25,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x3,0x32,0x33,0x34,0x35,0x36,0x37,0x4,0x4a,0x4b,0x5,0x52,0x53,0x54,0x55,0x58,0x59,0x5a,0x5b,0x64,0x65,0x67,0x68,0xa,0xb},{0x98,0x99,0x9a,0x9b,0xcc,0xcd,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8,0xd9,0xda,0xdb},{},{0x8,0xc,0xd},{0x12,0x13,0x14,0x15,0x16,0x17,0x1c,0x1d,0x1e,0x1f}};
var _ae =[...][]uint16 {{2,3,4,5,6,7},{128,8,9,64,10,11},{192,1664,16,17,13,14,15,1,12},{26,21,28,27,18,24,25,22,256,23,20,19},{33,34,35,36,37,38,31,32,29,53,54,39,40,41,42,43,44,30,61,62,63,0,320,384,45,59,60,46,49,50,51,52,55,56,57,58,448,512,640,576,47,48},{1472,1536,1600,1728,704,768,832,896,960,1024,1088,1152,1216,1280,1344,1408},{},{1792,1856,1920},{1984,2048,2112,2176,2240,2304,2368,2432,2496,2560}};
var (_ad =_g .New ("\u0063\u0063\u0069\u0074tf\u0061\u0078\u0020\u0063\u006f\u0072\u0072\u0075\u0070\u0074\u0065\u0064\u0020\u0052T\u0043");_cbc =_g .New ("\u0063\u0063\u0069\u0074tf\u0061\u0078\u0020\u0045\u004f\u004c\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075n\u0064");
);func (_eded *tree )fill (_adfe ,_fac ,_gge int )error {_gea :=_eded ._fgbc ;for _dbc :=0;_dbc < _adfe ;_dbc ++{_ecd :=_adfe -1-_dbc ;_bbacg :=((_fac >>uint (_ecd ))&1)!=0;_egf :=_gea .walk (_bbacg );if _egf !=nil {if _egf ._bbf {return _g .New ("\u006e\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u006c\u0065\u0061\u0066\u002c\u0020\u006eo\u0020o\u0074\u0068\u0065\u0072\u0020\u0066\u006f\u006c\u006c\u006f\u0077\u0069\u006e\u0067");
};_gea =_egf ;continue ;};_egf =&treeNode {};if _dbc ==_adfe -1{_egf ._fde =_gge ;_egf ._bbf =true ;};if _fac ==0{_egf ._cab =true ;};_gea .set (_bbacg ,_egf );_gea =_egf ;};return nil ;};func _faef (_cgg []byte ,_cff int ,_fcee code )([]byte ,int ){_bda :=true ;
var _ebc []byte ;_ebc ,_cff =_dad (nil ,_cff ,_fcee );_ddec :=0;var _ebg int ;for _ddec < len (_cgg ){_ebg ,_ddec =_baef (_cgg ,_bda ,_ddec );_ebc ,_cff =_bcf (_ebc ,_cff ,_ebg ,_bda );_bda =!_bda ;};return _ebc ,_cff %8;};func (_bcdd *tree )fillWithNode (_baac ,_ffae int ,_adac *treeNode )error {_fcdb :=_bcdd ._fgbc ;
for _fdda :=0;_fdda < _baac ;_fdda ++{_gfdf :=uint (_baac -1-_fdda );_bea :=((_ffae >>_gfdf )&1)!=0;_geff :=_fcdb .walk (_bea );if _geff !=nil {if _geff ._bbf {return _g .New ("\u006e\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u006c\u0065\u0061\u0066\u002c\u0020\u006eo\u0020o\u0074\u0068\u0065\u0072\u0020\u0066\u006f\u006c\u006c\u006f\u0077\u0069\u006e\u0067");
};_fcdb =_geff ;continue ;};if _fdda ==_baac -1{_geff =_adac ;}else {_geff =&treeNode {};};if _ffae ==0{_geff ._cab =true ;};_fcdb .set (_bea ,_geff );_fcdb =_geff ;};return nil ;};func (_cec *Decoder )tryFetchEOL1 ()(bool ,error ){_adf ,_aac :=_cec ._adb .ReadBits (13);
if _aac !=nil {return false ,_aac ;};return _adf ==0x3,nil ;};func _faee (_fab int )([]byte ,int ){var _faba []byte ;for _aggb :=0;_aggb < 2;_aggb ++{_faba ,_fab =_dad (_faba ,_fab ,_ag );};return _faba ,_fab %8;};type treeNode struct{_dfg *treeNode ;_efa *treeNode ;
_fde int ;_cab bool ;_bbf bool ;};type DecodeOptions struct{Columns int ;Rows int ;K int ;EncodedByteAligned bool ;BlackIsOne bool ;EndOfBlock bool ;EndOfLine bool ;DamagedRowsBeforeError int ;};func _cedb (_bdbf int )([]byte ,int ){var _acf []byte ;for _bbac :=0;
_bbac < 6;_bbac ++{_acf ,_bdbf =_dad (_acf ,_bdbf ,_ag );};return _acf ,_bdbf %8;};var _fc =[...][]uint16 {{3,2},{1,4},{6,5},{7},{9,8},{10,11,12},{13,14},{15},{16,17,0,18,64},{24,25,23,22,19,20,21,1792,1856,1920},{1984,2048,2112,2176,2240,2304,2368,2432,2496,2560,52,55,56,59,60,320,384,448,53,54,50,51,44,45,46,47,57,58,61,256,48,49,62,63,30,31,32,33,40,41,128,192,26,27,28,29,34,35,36,37,38,39,42,43},{640,704,768,832,1280,1344,1408,1472,1536,1600,1664,1728,512,576,896,960,1024,1088,1152,1216}};
func (_fba *Decoder )looseFetchEOL ()(bool ,error ){_fda ,_cg :=_fba ._adb .ReadBits (12);if _cg !=nil {return false ,_cg ;};switch _fda {case 0x1:return true ,nil ;case 0x0:for {_aedg ,_fdc :=_fba ._adb .ReadBool ();if _fdc !=nil {return false ,_fdc ;
};if _aedg {return true ,nil ;};};default:return false ,nil ;};};type Decoder struct{_dga int ;_cefg int ;_fb int ;_aeg []byte ;_eg int ;_fed bool ;_agg bool ;_agc bool ;_bca bool ;_ecb bool ;_eee bool ;_ffd bool ;_da int ;_gca int ;_cf []int ;_ed []int ;
_fa int ;_fcd int ;_db int ;_cfc int ;_adb *_f .Reader ;_fcc tiffType ;_bff error ;};func (_ede *Decoder )decodeRowType2 ()error {if _ede ._ffd {_ede ._adb .Align ();};if _aed :=_ede .decode1D ();_aed !=nil {return _aed ;};return nil ;};const (_ tiffType =iota ;
_cef ;_ccc ;_bdc ;);func _ffagc (_dfaf ,_bec []byte ,_faea ,_cda ,_cdb int )([]byte ,int ,int ){_cage :=_ccf (_dfaf ,_cdb );_afb :=_cda >=0&&_dfaf [_cda ]==_bgdc ||_cda ==-1;_bec ,_faea =_dad (_bec ,_faea ,_bf );var _ddbc int ;if _cda > -1{_ddbc =_cdb -_cda ;
}else {_ddbc =_cdb -_cda -1;};_bec ,_faea =_bcf (_bec ,_faea ,_ddbc ,_afb );_afb =!_afb ;_fdbd :=_cage -_cdb ;_bec ,_faea =_bcf (_bec ,_faea ,_fdbd ,_afb );_cda =_cage ;return _bec ,_faea ,_cda ;};var _af =[...][]uint16 {{0x2,0x3},{0x2,0x3},{0x2,0x3},{0x3},{0x4,0x5},{0x4,0x5,0x7},{0x4,0x7},{0x18},{0x17,0x18,0x37,0x8,0xf},{0x17,0x18,0x28,0x37,0x67,0x68,0x6c,0x8,0xc,0xd},{0x12,0x13,0x14,0x15,0x16,0x17,0x1c,0x1d,0x1e,0x1f,0x24,0x27,0x28,0x2b,0x2c,0x33,0x34,0x35,0x37,0x38,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0xc8,0xc9,0xca,0xcb,0xcc,0xcd,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xda,0xdb},{0x4a,0x4b,0x4c,0x4d,0x52,0x53,0x54,0x55,0x5a,0x5b,0x64,0x65,0x6c,0x6d,0x72,0x73,0x74,0x75,0x76,0x77}};
func (_fag *Decoder )fetch ()error {if _fag ._da ==-1{return nil ;};if _fag ._gca < _fag ._da {return nil ;};_fag ._da =0;_abg :=_fag .decodeRow ();if _abg !=nil {if !_g .Is (_abg ,_ga .EOF ){return _abg ;};if _fag ._da !=0{return _abg ;};_fag ._da =-1;
};_fag ._gca =0;return nil ;};func _ccf (_dce []byte ,_dcd int )int {if _dcd >=len (_dce ){return _dcd ;};if _dcd < -1{_dcd =-1;};var _dcgd byte ;if _dcd > -1{_dcgd =_dce [_dcd ];}else {_dcgd =_bgdc ;};_dafcf :=_dcd +1;for _dafcf < len (_dce ){if _dce [_dafcf ]!=_dcgd {break ;
};_dafcf ++;};return _dafcf ;};func (_fcdd *Encoder )encodeG32D (_efed [][]byte )[]byte {var _cbdg []byte ;var _dcc int ;for _eea :=0;_eea < len (_efed );_eea +=_fcdd .K {if _fcdd .Rows > 0&&!_fcdd .EndOfBlock &&_eea ==_fcdd .Rows {break ;};_ada ,_fdb :=_faef (_efed [_eea ],_dcc ,_aeb );
_cbdg =_fcdd .appendEncodedRow (_cbdg ,_ada ,_dcc );if _fcdd .EncodedByteAlign {_fdb =0;};_dcc =_fdb ;for _fbd :=_eea +1;_fbd < (_eea +_fcdd .K )&&_fbd < len (_efed );_fbd ++{if _fcdd .Rows > 0&&!_fcdd .EndOfBlock &&_fbd ==_fcdd .Rows {break ;};_bbaf ,_caf :=_dad (nil ,_dcc ,_fge );
var _afag ,_fdd ,_cge int ;_dbf :=-1;for _dbf < len (_efed [_fbd ]){_afag =_ccf (_efed [_fbd ],_dbf );_fdd =_acfc (_efed [_fbd ],_efed [_fbd -1],_dbf );_cge =_ccf (_efed [_fbd -1],_fdd );if _cge < _afag {_bbaf ,_caf =_fbg (_bbaf ,_caf );_dbf =_cge ;}else {if _c .Abs (float64 (_fdd -_afag ))> 3{_bbaf ,_caf ,_dbf =_ffagc (_efed [_fbd ],_bbaf ,_caf ,_dbf ,_afag );
}else {_bbaf ,_caf =_fagb (_bbaf ,_caf ,_afag ,_fdd );_dbf =_afag ;};};};_cbdg =_fcdd .appendEncodedRow (_cbdg ,_bbaf ,_dcc );if _fcdd .EncodedByteAlign {_caf =0;};_dcc =_caf %8;};};if _fcdd .EndOfBlock {_gg ,_ :=_abf (_dcc );_cbdg =_fcdd .appendEncodedRow (_cbdg ,_gg ,_dcc );
};return _cbdg ;};var (_bgdc byte =1;_fcf byte =0;);var (_fca map[int ]code ;_gd map[int ]code ;_bc map[int ]code ;_bee map[int ]code ;_ddg map[int ]code ;_dgg map[int ]byte ;_ag =code {Code :1<<4,BitsWritten :12};_aeb =code {Code :3<<3,BitsWritten :13};
_fge =code {Code :2<<3,BitsWritten :13};_bbe =code {Code :1<<12,BitsWritten :4};_bf =code {Code :1<<13,BitsWritten :3};_ec =code {Code :1<<15,BitsWritten :1};_fe =code {Code :3<<13,BitsWritten :3};_agb =code {Code :3<<10,BitsWritten :6};_acc =code {Code :3<<9,BitsWritten :7};
_dc =code {Code :2<<13,BitsWritten :3};_gce =code {Code :2<<10,BitsWritten :6};_efc =code {Code :2<<9,BitsWritten :7};);func _fagb (_dcgb []byte ,_bce ,_ggcb ,_fbdg int )([]byte ,int ){_bgcd :=_cefd (_ggcb ,_fbdg );_dcgb ,_bce =_dad (_dcgb ,_bce ,_bgcd );
return _dcgb ,_bce ;};func (_fcg tiffType )String ()string {switch _fcg {case _cef :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u004d\u006f\u0064i\u0066\u0069\u0065\u0064\u0048\u0075\u0066\u0066\u006d\u0061n\u0052\u006c\u0065";case _ccc :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u0054\u0034";
case _bdc :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u0054\u0036";default:return "\u0075n\u0064\u0065\u0066\u0069\u006e\u0065d";};};func (_acb *Decoder )decodeRowType4 ()error {if !_acb ._fed {return _acb .decoderRowType41D ();};if _acb ._ffd {_acb ._adb .Align ();
};_acb ._adb .Mark ();_fga ,_adbe :=_acb .tryFetchEOL ();if _adbe !=nil {return _adbe ;};if !_fga &&_acb ._ecb {_acb ._db ++;if _acb ._db > _acb ._eg {return _cbc ;};_acb ._adb .Reset ();};if !_fga {_acb ._adb .Reset ();};_adbec ,_adbe :=_acb ._adb .ReadBool ();
if _adbe !=nil {return _adbe ;};if _adbec {if _fga &&_acb ._eee {if _adbe =_acb .tryFetchRTC2D ();_adbe !=nil {return _adbe ;};};_adbe =_acb .decode1D ();}else {_adbe =_acb .decode2D ();};if _adbe !=nil {return _adbe ;};return nil ;};func (_dca *Decoder )decodeRow ()(_efd error ){if !_dca ._eee &&_dca ._cefg > 0&&_dca ._cefg ==_dca ._fb {return _ga .EOF ;
};switch _dca ._fcc {case _cef :_efd =_dca .decodeRowType2 ();case _ccc :_efd =_dca .decodeRowType4 ();case _bdc :_efd =_dca .decodeRowType6 ();};if _efd !=nil {return _efd ;};_ddf :=0;_cbe :=true ;_dca ._cfc =0;for _gcfa :=0;_gcfa < _dca ._fcd ;_gcfa ++{_fbc :=_dca ._dga ;
if _gcfa !=_dca ._fcd {_fbc =_dca ._ed [_gcfa ];};if _fbc > _dca ._dga {_fbc =_dca ._dga ;};_ea :=_ddf /8;for _ddf %8!=0&&_fbc -_ddf > 0{var _baa byte ;if !_cbe {_baa =1<<uint (7-(_ddf %8));};_dca ._aeg [_ea ]|=_baa ;_ddf ++;};if _ddf %8==0{_ea =_ddf /8;
var _cba byte ;if !_cbe {_cba =0xff;};for _fbc -_ddf > 7{_dca ._aeg [_ea ]=_cba ;_ddf +=8;_ea ++;};};for _fbc -_ddf > 0{if _ddf %8==0{_dca ._aeg [_ea ]=0;};var _ced byte ;if !_cbe {_ced =1<<uint (7-(_ddf %8));};_dca ._aeg [_ea ]|=_ced ;_ddf ++;};_cbe =!_cbe ;
};if _ddf !=_dca ._dga {return _g .New ("\u0073\u0075\u006d\u0020\u006f\u0066 \u0072\u0075\u006e\u002d\u006c\u0065\u006e\u0067\u0074\u0068\u0073\u0020\u0064\u006f\u0065\u0073\u0020\u006e\u006f\u0074 \u0065\u0071\u0075\u0061\u006c\u0020\u0073\u0063\u0061\u006e\u0020\u006c\u0069\u006ee\u0020w\u0069\u0064\u0074\u0068");
};_dca ._da =(_ddf +7)/8;_dca ._fb ++;return nil ;};func (_abgc *Decoder )decoderRowType41D ()error {if _abgc ._ffd {_abgc ._adb .Align ();};_abgc ._adb .Mark ();var (_bag bool ;_ffb error ;);if _abgc ._ecb {_bag ,_ffb =_abgc .tryFetchEOL ();if _ffb !=nil {return _ffb ;
};if !_bag {return _cbc ;};}else {_bag ,_ffb =_abgc .looseFetchEOL ();if _ffb !=nil {return _ffb ;};};if !_bag {_abgc ._adb .Reset ();};if _bag &&_abgc ._eee {_abgc ._adb .Mark ();for _fff :=0;_fff < 5;_fff ++{_bag ,_ffb =_abgc .tryFetchEOL ();if _ffb !=nil {if _g .Is (_ffb ,_ga .EOF ){if _fff ==0{break ;
};return _ad ;};};if _bag {continue ;};if _fff > 0{return _ad ;};break ;};if _bag {return _ga .EOF ;};_abgc ._adb .Reset ();};if _ffb =_abgc .decode1D ();_ffb !=nil {return _ffb ;};return nil ;};func _abf (_ade int )([]byte ,int ){var _bae []byte ;for _gcdg :=0;
_gcdg < 6;_gcdg ++{_bae ,_ade =_dad (_bae ,_ade ,_aeb );};return _bae ,_ade %8;};func (_bgd *Decoder )decodeG32D ()error {_bgd ._fa =_bgd ._fcd ;_bgd ._ed ,_bgd ._cf =_bgd ._cf ,_bgd ._ed ;_bdb :=true ;var (_aab bool ;_fd int ;_gde error ;);_bgd ._fcd =0;
_gbb :for _fd < _bgd ._dga {_bcd :=_ce ._fgbc ;for {_aab ,_gde =_bgd ._adb .ReadBool ();if _gde !=nil {return _gde ;};_bcd =_bcd .walk (_aab );if _bcd ==nil {continue _gbb ;};if !_bcd ._bbf {continue ;};switch _bcd ._fde {case _gc :var _ccg int ;if _bdb {_ccg ,_gde =_bgd .decodeRun (_ca );
}else {_ccg ,_gde =_bgd .decodeRun (_fg );};if _gde !=nil {return _gde ;};_fd +=_ccg ;_bgd ._ed [_bgd ._fcd ]=_fd ;_bgd ._fcd ++;if _bdb {_ccg ,_gde =_bgd .decodeRun (_fg );}else {_ccg ,_gde =_bgd .decodeRun (_ca );};if _gde !=nil {return _gde ;};_fd +=_ccg ;
_bgd ._ed [_bgd ._fcd ]=_fd ;_bgd ._fcd ++;case _cc :_bdcg :=_bgd .getNextChangingElement (_fd ,_bdb )+1;if _bdcg >=_bgd ._fa {_fd =_bgd ._dga ;}else {_fd =_bgd ._cf [_bdcg ];};default:_dfa :=_bgd .getNextChangingElement (_fd ,_bdb );if _dfa >=_bgd ._fa ||_dfa ==-1{_fd =_bgd ._dga +_bcd ._fde ;
}else {_fd =_bgd ._cf [_dfa ]+_bcd ._fde ;};_bgd ._ed [_bgd ._fcd ]=_fd ;_bgd ._fcd ++;_bdb =!_bdb ;};continue _gbb ;};};return nil ;};func (_eb *Decoder )decode1D ()error {var (_edf int ;_fgb error ;);_gda :=true ;_eb ._fcd =0;for {var _ecg int ;if _gda {_ecg ,_fgb =_eb .decodeRun (_ca );
}else {_ecg ,_fgb =_eb .decodeRun (_fg );};if _fgb !=nil {return _fgb ;};_edf +=_ecg ;_eb ._ed [_eb ._fcd ]=_edf ;_eb ._fcd ++;_gda =!_gda ;if _edf >=_eb ._dga {break ;};};return nil ;};func (_fcgb *treeNode )set (_gfg bool ,_bcab *treeNode ){if !_gfg {_fcgb ._dfg =_bcab ;
}else {_fcgb ._efa =_bcab ;};};func (_ffc *Encoder )Encode (pixels [][]byte )[]byte {if _ffc .BlackIs1 {_bgdc =0;_fcf =1;}else {_bgdc =1;_fcf =0;};if _ffc .K ==0{return _ffc .encodeG31D (pixels );};if _ffc .K > 0{return _ffc .encodeG32D (pixels );};if _ffc .K < 0{return _ffc .encodeG4 (pixels );
};return nil ;};type Encoder struct{K int ;EndOfLine bool ;EncodedByteAlign bool ;Columns int ;Rows int ;EndOfBlock bool ;BlackIs1 bool ;DamagedRowsBeforeError int ;};func (_bdf *Decoder )Read (in []byte )(int ,error ){if _bdf ._bff !=nil {return 0,_bdf ._bff ;
};_ddb :=len (in );var (_bcac int ;_fce int ;);for _ddb !=0{if _bdf ._gca >=_bdf ._da {if _aa :=_bdf .fetch ();_aa !=nil {_bdf ._bff =_aa ;return 0,_aa ;};};if _bdf ._da ==-1{return _bcac ,_ga .EOF ;};switch {case _ddb <=_bdf ._da -_bdf ._gca :_df :=_bdf ._aeg [_bdf ._gca :_bdf ._gca +_ddb ];
for _ ,_cad :=range _df {if !_bdf ._bca {_cad =^_cad ;};in [_fce ]=_cad ;_fce ++;};_bcac +=len (_df );_bdf ._gca +=len (_df );return _bcac ,nil ;default:_bfc :=_bdf ._aeg [_bdf ._gca :];for _ ,_dfb :=range _bfc {if !_bdf ._bca {_dfb =^_dfb ;};in [_fce ]=_dfb ;
_fce ++;};_bcac +=len (_bfc );_bdf ._gca +=len (_bfc );_ddb -=len (_bfc );};};return _bcac ,nil ;};func (_ded *Encoder )encodeG31D (_edd [][]byte )[]byte {var _afa []byte ;_abc :=0;for _aaa :=range _edd {if _ded .Rows > 0&&!_ded .EndOfBlock &&_aaa ==_ded .Rows {break ;
};_eff ,_gdf :=_faef (_edd [_aaa ],_abc ,_ag );_afa =_ded .appendEncodedRow (_afa ,_eff ,_abc );if _ded .EncodedByteAlign {_gdf =0;};_abc =_gdf ;};if _ded .EndOfBlock {_bef ,_ :=_cedb (_abc );_afa =_ded .appendEncodedRow (_afa ,_bef ,_abc );};return _afa ;
};