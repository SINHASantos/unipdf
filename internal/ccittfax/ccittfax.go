//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package ccittfax ;import (_g "errors";_gc "github.com/unidoc/unipdf/v3/internal/bitwise";_ae "io";_aa "math";);func (_cggg *tree )fillWithNode (_fffg ,_eeb int ,_dgd *treeNode )error {_fcba :=_cggg ._gbg ;for _dbcb :=0;_dbcb < _fffg ;_dbcb ++{_dad :=uint (_fffg -1-_dbcb );
_ggc :=((_eeb >>_dad )&1)!=0;_cffb :=_fcba .walk (_ggc );if _cffb !=nil {if _cffb ._fbef {return _g .New ("\u006e\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u006c\u0065\u0061\u0066\u002c\u0020\u006eo\u0020o\u0074\u0068\u0065\u0072\u0020\u0066\u006f\u006c\u006c\u006f\u0077\u0069\u006e\u0067");
};_fcba =_cffb ;continue ;};if _dbcb ==_fffg -1{_cffb =_dgd ;}else {_cffb =&treeNode {};};if _eeb ==0{_cffb ._ebde =true ;};_fcba .set (_ggc ,_cffb );_fcba =_cffb ;};return nil ;};func init (){_c =&treeNode {_fbef :true ,_aeca :_ff };_d =&treeNode {_aeca :_daf ,_dfc :_c };
_d ._gde =_d ;_f =&tree {_gbg :&treeNode {}};if _bf :=_f .fillWithNode (12,0,_d );_bf !=nil {panic (_bf .Error ());};if _gg :=_f .fillWithNode (12,1,_c );_gg !=nil {panic (_gg .Error ());};_ag =&tree {_gbg :&treeNode {}};for _fa :=0;_fa < len (_dgf );_fa ++{for _fef :=0;
_fef < len (_dgf [_fa ]);_fef ++{if _dg :=_ag .fill (_fa +2,int (_dgf [_fa ][_fef ]),int (_cde [_fa ][_fef ]));_dg !=nil {panic (_dg .Error ());};};};if _df :=_ag .fillWithNode (12,0,_d );_df !=nil {panic (_df .Error ());};if _ad :=_ag .fillWithNode (12,1,_c );
_ad !=nil {panic (_ad .Error ());};_da =&tree {_gbg :&treeNode {}};for _daff :=0;_daff < len (_cgd );_daff ++{for _cg :=0;_cg < len (_cgd [_daff ]);_cg ++{if _e :=_da .fill (_daff +4,int (_cgd [_daff ][_cg ]),int (_aed [_daff ][_cg ]));_e !=nil {panic (_e .Error ());
};};};if _fg :=_da .fillWithNode (12,0,_d );_fg !=nil {panic (_fg .Error ());};if _ga :=_da .fillWithNode (12,1,_c );_ga !=nil {panic (_ga .Error ());};_aea =&tree {_gbg :&treeNode {}};if _de :=_aea .fill (4,1,_ffa );_de !=nil {panic (_de .Error ());};
if _fgd :=_aea .fill (3,1,_fe );_fgd !=nil {panic (_fgd .Error ());};if _af :=_aea .fill (1,1,0);_af !=nil {panic (_af .Error ());};if _cd :=_aea .fill (3,3,1);_cd !=nil {panic (_cd .Error ());};if _ea :=_aea .fill (6,3,2);_ea !=nil {panic (_ea .Error ());
};if _fc :=_aea .fill (7,3,3);_fc !=nil {panic (_fc .Error ());};if _ffc :=_aea .fill (3,2,-1);_ffc !=nil {panic (_ffc .Error ());};if _bfc :=_aea .fill (6,2,-2);_bfc !=nil {panic (_bfc .Error ());};if _fcd :=_aea .fill (7,2,-3);_fcd !=nil {panic (_fcd .Error ());
};};func (_aaba *Encoder )appendEncodedRow (_ceb ,_faae []byte ,_faff int )[]byte {if len (_ceb )> 0&&_faff !=0&&!_aaba .EncodedByteAlign {_ceb [len (_ceb )-1]=_ceb [len (_ceb )-1]|_faae [0];_ceb =append (_ceb ,_faae [1:]...);}else {_ceb =append (_ceb ,_faae ...);
};return _ceb ;};func (_gdf *Decoder )decoderRowType41D ()error {if _gdf ._ffd {_gdf ._fdd .Align ();};_gdf ._fdd .Mark ();var (_degc bool ;_bgb error ;);if _gdf ._ee {_degc ,_bgb =_gdf .tryFetchEOL ();if _bgb !=nil {return _bgb ;};if !_degc {return _dd ;
};}else {_degc ,_bgb =_gdf .looseFetchEOL ();if _bgb !=nil {return _bgb ;};};if !_degc {_gdf ._fdd .Reset ();};if _degc &&_gdf ._ab {_gdf ._fdd .Mark ();for _bde :=0;_bde < 5;_bde ++{_degc ,_bgb =_gdf .tryFetchEOL ();if _bgb !=nil {if _g .Is (_bgb ,_ae .EOF ){if _bde ==0{break ;
};return _bda ;};};if _degc {continue ;};if _bde > 0{return _bda ;};break ;};if _degc {return _ae .EOF ;};_gdf ._fdd .Reset ();};if _bgb =_gdf .decode1D ();_bgb !=nil {return _bgb ;};return nil ;};func _cbf (_gdbg ,_aece []byte ,_egb int ,_acef bool )int {_beg :=_gge (_aece ,_egb );
if _beg < len (_aece )&&(_egb ==-1&&_aece [_beg ]==_bdea ||_egb >=0&&_egb < len (_gdbg )&&_gdbg [_egb ]==_aece [_beg ]||_egb >=len (_gdbg )&&_acef &&_aece [_beg ]==_bdea ||_egb >=len (_gdbg )&&!_acef &&_aece [_beg ]==_gbc ){_beg =_gge (_aece ,_beg );};
return _beg ;};func (_ede *Encoder )Encode (pixels [][]byte )[]byte {if _ede .BlackIs1 {_bdea =0;_gbc =1;}else {_bdea =1;_gbc =0;};if _ede .K ==0{return _ede .encodeG31D (pixels );};if _ede .K > 0{return _ede .encodeG32D (pixels );};if _ede .K < 0{return _ede .encodeG4 (pixels );
};return nil ;};func _feff (_ebdc []byte ,_gdc bool ,_edec int )(int ,int ){_dgbb :=0;for _edec < len (_ebdc ){if _gdc {if _ebdc [_edec ]!=_bdea {break ;};}else {if _ebdc [_edec ]!=_gbc {break ;};};_dgbb ++;_edec ++;};return _dgbb ,_edec ;};func _gge (_gac []byte ,_abc int )int {if _abc >=len (_gac ){return _abc ;
};if _abc < -1{_abc =-1;};var _gea byte ;if _abc > -1{_gea =_gac [_abc ];}else {_gea =_bdea ;};_ecf :=_abc +1;for _ecf < len (_gac ){if _gac [_ecf ]!=_gea {break ;};_ecf ++;};return _ecf ;};func init (){_eg =make (map[int ]code );_eg [0]=code {Code :13<<8|3<<6,BitsWritten :10};
_eg [1]=code {Code :2<<(5+8),BitsWritten :3};_eg [2]=code {Code :3<<(6+8),BitsWritten :2};_eg [3]=code {Code :2<<(6+8),BitsWritten :2};_eg [4]=code {Code :3<<(5+8),BitsWritten :3};_eg [5]=code {Code :3<<(4+8),BitsWritten :4};_eg [6]=code {Code :2<<(4+8),BitsWritten :4};
_eg [7]=code {Code :3<<(3+8),BitsWritten :5};_eg [8]=code {Code :5<<(2+8),BitsWritten :6};_eg [9]=code {Code :4<<(2+8),BitsWritten :6};_eg [10]=code {Code :4<<(1+8),BitsWritten :7};_eg [11]=code {Code :5<<(1+8),BitsWritten :7};_eg [12]=code {Code :7<<(1+8),BitsWritten :7};
_eg [13]=code {Code :4<<8,BitsWritten :8};_eg [14]=code {Code :7<<8,BitsWritten :8};_eg [15]=code {Code :12<<8,BitsWritten :9};_eg [16]=code {Code :5<<8|3<<6,BitsWritten :10};_eg [17]=code {Code :6<<8,BitsWritten :10};_eg [18]=code {Code :2<<8,BitsWritten :10};
_eg [19]=code {Code :12<<8|7<<5,BitsWritten :11};_eg [20]=code {Code :13<<8,BitsWritten :11};_eg [21]=code {Code :13<<8|4<<5,BitsWritten :11};_eg [22]=code {Code :6<<8|7<<5,BitsWritten :11};_eg [23]=code {Code :5<<8,BitsWritten :11};_eg [24]=code {Code :2<<8|7<<5,BitsWritten :11};
_eg [25]=code {Code :3<<8,BitsWritten :11};_eg [26]=code {Code :12<<8|10<<4,BitsWritten :12};_eg [27]=code {Code :12<<8|11<<4,BitsWritten :12};_eg [28]=code {Code :12<<8|12<<4,BitsWritten :12};_eg [29]=code {Code :12<<8|13<<4,BitsWritten :12};_eg [30]=code {Code :6<<8|8<<4,BitsWritten :12};
_eg [31]=code {Code :6<<8|9<<4,BitsWritten :12};_eg [32]=code {Code :6<<8|10<<4,BitsWritten :12};_eg [33]=code {Code :6<<8|11<<4,BitsWritten :12};_eg [34]=code {Code :13<<8|2<<4,BitsWritten :12};_eg [35]=code {Code :13<<8|3<<4,BitsWritten :12};_eg [36]=code {Code :13<<8|4<<4,BitsWritten :12};
_eg [37]=code {Code :13<<8|5<<4,BitsWritten :12};_eg [38]=code {Code :13<<8|6<<4,BitsWritten :12};_eg [39]=code {Code :13<<8|7<<4,BitsWritten :12};_eg [40]=code {Code :6<<8|12<<4,BitsWritten :12};_eg [41]=code {Code :6<<8|13<<4,BitsWritten :12};_eg [42]=code {Code :13<<8|10<<4,BitsWritten :12};
_eg [43]=code {Code :13<<8|11<<4,BitsWritten :12};_eg [44]=code {Code :5<<8|4<<4,BitsWritten :12};_eg [45]=code {Code :5<<8|5<<4,BitsWritten :12};_eg [46]=code {Code :5<<8|6<<4,BitsWritten :12};_eg [47]=code {Code :5<<8|7<<4,BitsWritten :12};_eg [48]=code {Code :6<<8|4<<4,BitsWritten :12};
_eg [49]=code {Code :6<<8|5<<4,BitsWritten :12};_eg [50]=code {Code :5<<8|2<<4,BitsWritten :12};_eg [51]=code {Code :5<<8|3<<4,BitsWritten :12};_eg [52]=code {Code :2<<8|4<<4,BitsWritten :12};_eg [53]=code {Code :3<<8|7<<4,BitsWritten :12};_eg [54]=code {Code :3<<8|8<<4,BitsWritten :12};
_eg [55]=code {Code :2<<8|7<<4,BitsWritten :12};_eg [56]=code {Code :2<<8|8<<4,BitsWritten :12};_eg [57]=code {Code :5<<8|8<<4,BitsWritten :12};_eg [58]=code {Code :5<<8|9<<4,BitsWritten :12};_eg [59]=code {Code :2<<8|11<<4,BitsWritten :12};_eg [60]=code {Code :2<<8|12<<4,BitsWritten :12};
_eg [61]=code {Code :5<<8|10<<4,BitsWritten :12};_eg [62]=code {Code :6<<8|6<<4,BitsWritten :12};_eg [63]=code {Code :6<<8|7<<4,BitsWritten :12};_dec =make (map[int ]code );_dec [0]=code {Code :53<<8,BitsWritten :8};_dec [1]=code {Code :7<<(2+8),BitsWritten :6};
_dec [2]=code {Code :7<<(4+8),BitsWritten :4};_dec [3]=code {Code :8<<(4+8),BitsWritten :4};_dec [4]=code {Code :11<<(4+8),BitsWritten :4};_dec [5]=code {Code :12<<(4+8),BitsWritten :4};_dec [6]=code {Code :14<<(4+8),BitsWritten :4};_dec [7]=code {Code :15<<(4+8),BitsWritten :4};
_dec [8]=code {Code :19<<(3+8),BitsWritten :5};_dec [9]=code {Code :20<<(3+8),BitsWritten :5};_dec [10]=code {Code :7<<(3+8),BitsWritten :5};_dec [11]=code {Code :8<<(3+8),BitsWritten :5};_dec [12]=code {Code :8<<(2+8),BitsWritten :6};_dec [13]=code {Code :3<<(2+8),BitsWritten :6};
_dec [14]=code {Code :52<<(2+8),BitsWritten :6};_dec [15]=code {Code :53<<(2+8),BitsWritten :6};_dec [16]=code {Code :42<<(2+8),BitsWritten :6};_dec [17]=code {Code :43<<(2+8),BitsWritten :6};_dec [18]=code {Code :39<<(1+8),BitsWritten :7};_dec [19]=code {Code :12<<(1+8),BitsWritten :7};
_dec [20]=code {Code :8<<(1+8),BitsWritten :7};_dec [21]=code {Code :23<<(1+8),BitsWritten :7};_dec [22]=code {Code :3<<(1+8),BitsWritten :7};_dec [23]=code {Code :4<<(1+8),BitsWritten :7};_dec [24]=code {Code :40<<(1+8),BitsWritten :7};_dec [25]=code {Code :43<<(1+8),BitsWritten :7};
_dec [26]=code {Code :19<<(1+8),BitsWritten :7};_dec [27]=code {Code :36<<(1+8),BitsWritten :7};_dec [28]=code {Code :24<<(1+8),BitsWritten :7};_dec [29]=code {Code :2<<8,BitsWritten :8};_dec [30]=code {Code :3<<8,BitsWritten :8};_dec [31]=code {Code :26<<8,BitsWritten :8};
_dec [32]=code {Code :27<<8,BitsWritten :8};_dec [33]=code {Code :18<<8,BitsWritten :8};_dec [34]=code {Code :19<<8,BitsWritten :8};_dec [35]=code {Code :20<<8,BitsWritten :8};_dec [36]=code {Code :21<<8,BitsWritten :8};_dec [37]=code {Code :22<<8,BitsWritten :8};
_dec [38]=code {Code :23<<8,BitsWritten :8};_dec [39]=code {Code :40<<8,BitsWritten :8};_dec [40]=code {Code :41<<8,BitsWritten :8};_dec [41]=code {Code :42<<8,BitsWritten :8};_dec [42]=code {Code :43<<8,BitsWritten :8};_dec [43]=code {Code :44<<8,BitsWritten :8};
_dec [44]=code {Code :45<<8,BitsWritten :8};_dec [45]=code {Code :4<<8,BitsWritten :8};_dec [46]=code {Code :5<<8,BitsWritten :8};_dec [47]=code {Code :10<<8,BitsWritten :8};_dec [48]=code {Code :11<<8,BitsWritten :8};_dec [49]=code {Code :82<<8,BitsWritten :8};
_dec [50]=code {Code :83<<8,BitsWritten :8};_dec [51]=code {Code :84<<8,BitsWritten :8};_dec [52]=code {Code :85<<8,BitsWritten :8};_dec [53]=code {Code :36<<8,BitsWritten :8};_dec [54]=code {Code :37<<8,BitsWritten :8};_dec [55]=code {Code :88<<8,BitsWritten :8};
_dec [56]=code {Code :89<<8,BitsWritten :8};_dec [57]=code {Code :90<<8,BitsWritten :8};_dec [58]=code {Code :91<<8,BitsWritten :8};_dec [59]=code {Code :74<<8,BitsWritten :8};_dec [60]=code {Code :75<<8,BitsWritten :8};_dec [61]=code {Code :50<<8,BitsWritten :8};
_dec [62]=code {Code :51<<8,BitsWritten :8};_dec [63]=code {Code :52<<8,BitsWritten :8};_afe =make (map[int ]code );_afe [64]=code {Code :3<<8|3<<6,BitsWritten :10};_afe [128]=code {Code :12<<8|8<<4,BitsWritten :12};_afe [192]=code {Code :12<<8|9<<4,BitsWritten :12};
_afe [256]=code {Code :5<<8|11<<4,BitsWritten :12};_afe [320]=code {Code :3<<8|3<<4,BitsWritten :12};_afe [384]=code {Code :3<<8|4<<4,BitsWritten :12};_afe [448]=code {Code :3<<8|5<<4,BitsWritten :12};_afe [512]=code {Code :3<<8|12<<3,BitsWritten :13};
_afe [576]=code {Code :3<<8|13<<3,BitsWritten :13};_afe [640]=code {Code :2<<8|10<<3,BitsWritten :13};_afe [704]=code {Code :2<<8|11<<3,BitsWritten :13};_afe [768]=code {Code :2<<8|12<<3,BitsWritten :13};_afe [832]=code {Code :2<<8|13<<3,BitsWritten :13};
_afe [896]=code {Code :3<<8|18<<3,BitsWritten :13};_afe [960]=code {Code :3<<8|19<<3,BitsWritten :13};_afe [1024]=code {Code :3<<8|20<<3,BitsWritten :13};_afe [1088]=code {Code :3<<8|21<<3,BitsWritten :13};_afe [1152]=code {Code :3<<8|22<<3,BitsWritten :13};
_afe [1216]=code {Code :119<<3,BitsWritten :13};_afe [1280]=code {Code :2<<8|18<<3,BitsWritten :13};_afe [1344]=code {Code :2<<8|19<<3,BitsWritten :13};_afe [1408]=code {Code :2<<8|20<<3,BitsWritten :13};_afe [1472]=code {Code :2<<8|21<<3,BitsWritten :13};
_afe [1536]=code {Code :2<<8|26<<3,BitsWritten :13};_afe [1600]=code {Code :2<<8|27<<3,BitsWritten :13};_afe [1664]=code {Code :3<<8|4<<3,BitsWritten :13};_afe [1728]=code {Code :3<<8|5<<3,BitsWritten :13};_cdf =make (map[int ]code );_cdf [64]=code {Code :27<<(3+8),BitsWritten :5};
_cdf [128]=code {Code :18<<(3+8),BitsWritten :5};_cdf [192]=code {Code :23<<(2+8),BitsWritten :6};_cdf [256]=code {Code :55<<(1+8),BitsWritten :7};_cdf [320]=code {Code :54<<8,BitsWritten :8};_cdf [384]=code {Code :55<<8,BitsWritten :8};_cdf [448]=code {Code :100<<8,BitsWritten :8};
_cdf [512]=code {Code :101<<8,BitsWritten :8};_cdf [576]=code {Code :104<<8,BitsWritten :8};_cdf [640]=code {Code :103<<8,BitsWritten :8};_cdf [704]=code {Code :102<<8,BitsWritten :9};_cdf [768]=code {Code :102<<8|1<<7,BitsWritten :9};_cdf [832]=code {Code :105<<8,BitsWritten :9};
_cdf [896]=code {Code :105<<8|1<<7,BitsWritten :9};_cdf [960]=code {Code :106<<8,BitsWritten :9};_cdf [1024]=code {Code :106<<8|1<<7,BitsWritten :9};_cdf [1088]=code {Code :107<<8,BitsWritten :9};_cdf [1152]=code {Code :107<<8|1<<7,BitsWritten :9};_cdf [1216]=code {Code :108<<8,BitsWritten :9};
_cdf [1280]=code {Code :108<<8|1<<7,BitsWritten :9};_cdf [1344]=code {Code :109<<8,BitsWritten :9};_cdf [1408]=code {Code :109<<8|1<<7,BitsWritten :9};_cdf [1472]=code {Code :76<<8,BitsWritten :9};_cdf [1536]=code {Code :76<<8|1<<7,BitsWritten :9};_cdf [1600]=code {Code :77<<8,BitsWritten :9};
_cdf [1664]=code {Code :24<<(2+8),BitsWritten :6};_cdf [1728]=code {Code :77<<8|1<<7,BitsWritten :9};_aab =make (map[int ]code );_aab [1792]=code {Code :1<<8,BitsWritten :11};_aab [1856]=code {Code :1<<8|4<<5,BitsWritten :11};_aab [1920]=code {Code :1<<8|5<<5,BitsWritten :11};
_aab [1984]=code {Code :1<<8|2<<4,BitsWritten :12};_aab [2048]=code {Code :1<<8|3<<4,BitsWritten :12};_aab [2112]=code {Code :1<<8|4<<4,BitsWritten :12};_aab [2176]=code {Code :1<<8|5<<4,BitsWritten :12};_aab [2240]=code {Code :1<<8|6<<4,BitsWritten :12};
_aab [2304]=code {Code :1<<8|7<<4,BitsWritten :12};_aab [2368]=code {Code :1<<8|12<<4,BitsWritten :12};_aab [2432]=code {Code :1<<8|13<<4,BitsWritten :12};_aab [2496]=code {Code :1<<8|14<<4,BitsWritten :12};_aab [2560]=code {Code :1<<8|15<<4,BitsWritten :12};
_fb =make (map[int ]byte );_fb [0]=0xFF;_fb [1]=0xFE;_fb [2]=0xFC;_fb [3]=0xF8;_fb [4]=0xF0;_fb [5]=0xE0;_fb [6]=0xC0;_fb [7]=0x80;_fb [8]=0x00;};func (_aggd *Decoder )tryFetchEOL ()(bool ,error ){_cded ,_aeg :=_aggd ._fdd .ReadBits (12);if _aeg !=nil {return false ,_aeg ;
};return _cded ==0x1,nil ;};func (_baa *Decoder )getNextChangingElement (_befb int ,_dda bool )int {_gdb :=0;if !_dda {_gdb =1;};_aaf :=int (uint32 (_baa ._abd )&0xFFFFFFFE)+_gdb ;if _aaf > 2{_aaf -=2;};if _befb ==0{return _aaf ;};for _bebd :=_aaf ;_bebd < _baa ._afb ;
_bebd +=2{if _befb < _baa ._fcdd [_bebd ]{_baa ._abd =_bebd ;return _bebd ;};};return -1;};func (_cf *Decoder )decodeRowType4 ()error {if !_cf ._fbf {return _cf .decoderRowType41D ();};if _cf ._ffd {_cf ._fdd .Align ();};_cf ._fdd .Mark ();_dfa ,_edbb :=_cf .tryFetchEOL ();
if _edbb !=nil {return _edbb ;};if !_dfa &&_cf ._ee {_cf ._gcc ++;if _cf ._gcc > _cf ._gb {return _dd ;};_cf ._fdd .Reset ();};if !_dfa {_cf ._fdd .Reset ();};_bge ,_edbb :=_cf ._fdd .ReadBool ();if _edbb !=nil {return _edbb ;};if _bge {if _dfa &&_cf ._ab {if _edbb =_cf .tryFetchRTC2D ();
_edbb !=nil {return _edbb ;};};_edbb =_cf .decode1D ();}else {_edbb =_cf .decode2D ();};if _edbb !=nil {return _edbb ;};return nil ;};var _aed =[...][]uint16 {{2,3,4,5,6,7},{128,8,9,64,10,11},{192,1664,16,17,13,14,15,1,12},{26,21,28,27,18,24,25,22,256,23,20,19},{33,34,35,36,37,38,31,32,29,53,54,39,40,41,42,43,44,30,61,62,63,0,320,384,45,59,60,46,49,50,51,52,55,56,57,58,448,512,640,576,47,48},{1472,1536,1600,1728,704,768,832,896,960,1024,1088,1152,1216,1280,1344,1408},{},{1792,1856,1920},{1984,2048,2112,2176,2240,2304,2368,2432,2496,2560}};
type tiffType int ;func (_ccde *treeNode )walk (_fee bool )*treeNode {if _fee {return _ccde ._dfc ;};return _ccde ._gde ;};var _cgd =[...][]uint16 {{0x7,0x8,0xb,0xc,0xe,0xf},{0x12,0x13,0x14,0x1b,0x7,0x8},{0x17,0x18,0x2a,0x2b,0x3,0x34,0x35,0x7,0x8},{0x13,0x17,0x18,0x24,0x27,0x28,0x2b,0x3,0x37,0x4,0x8,0xc},{0x12,0x13,0x14,0x15,0x16,0x17,0x1a,0x1b,0x2,0x24,0x25,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x3,0x32,0x33,0x34,0x35,0x36,0x37,0x4,0x4a,0x4b,0x5,0x52,0x53,0x54,0x55,0x58,0x59,0x5a,0x5b,0x64,0x65,0x67,0x68,0xa,0xb},{0x98,0x99,0x9a,0x9b,0xcc,0xcd,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8,0xd9,0xda,0xdb},{},{0x8,0xc,0xd},{0x12,0x13,0x14,0x15,0x16,0x17,0x1c,0x1d,0x1e,0x1f}};
type DecodeOptions struct{Columns int ;Rows int ;K int ;EncodedByteAligned bool ;BlackIsOne bool ;EndOfBlock bool ;EndOfLine bool ;DamagedRowsBeforeError int ;};type code struct{Code uint16 ;BitsWritten int ;};func _ecbf (_ace []byte ,_dbc int ,_agd code )([]byte ,int ){_cbg :=0;
for _cbg < _agd .BitsWritten {_caf :=_dbc /8;_abgd :=_dbc %8;if _caf >=len (_ace ){_ace =append (_ace ,0);};_afgf :=8-_abgd ;_bbb :=_agd .BitsWritten -_cbg ;if _afgf > _bbb {_afgf =_bbb ;};if _cbg < 8{_ace [_caf ]=_ace [_caf ]|byte (_agd .Code >>uint (8+_abgd -_cbg ))&_fb [8-_afgf -_abgd ];
}else {_ace [_caf ]=_ace [_caf ]|(byte (_agd .Code <<uint (_cbg -8))&_fb [8-_afgf ])>>uint (_abgd );};_dbc +=_afgf ;_cbg +=_afgf ;};return _ace ,_dbc ;};func (_gfa *Encoder )encodeG31D (_fbdf [][]byte )[]byte {var _fdf []byte ;_gdg :=0;for _bgf :=range _fbdf {if _gfa .Rows > 0&&!_gfa .EndOfBlock &&_bgf ==_gfa .Rows {break ;
};_gbb ,_dgb :=_efe (_fbdf [_bgf ],_gdg ,_fcb );_fdf =_gfa .appendEncodedRow (_fdf ,_gbb ,_gdg );if _gfa .EncodedByteAlign {_dgb =0;};_gdg =_dgb ;};if _gfa .EndOfBlock {_efc ,_ :=_eaf (_gdg );_fdf =_gfa .appendEncodedRow (_fdf ,_efc ,_gdg );};return _fdf ;
};const (_ tiffType =iota ;_dffa ;_bc ;_bd ;);func (_cb *Encoder )encodeG4 (_gfaa [][]byte )[]byte {_ggg :=make ([][]byte ,len (_gfaa ));copy (_ggg ,_gfaa );_ggg =_edbe (_ggg );var _dbe []byte ;var _dafa int ;for _eeg :=1;_eeg < len (_ggg );_eeg ++{if _cb .Rows > 0&&!_cb .EndOfBlock &&_eeg ==(_cb .Rows +1){break ;
};var _bba []byte ;var _dcb ,_ccd ,_cggb int ;_cdd :=_dafa ;_dcd :=-1;for _dcd < len (_ggg [_eeg ]){_dcb =_gge (_ggg [_eeg ],_dcd );_ccd =_bed (_ggg [_eeg ],_ggg [_eeg -1],_dcd );_cggb =_gge (_ggg [_eeg -1],_ccd );if _cggb < _dcb {_bba ,_cdd =_ecbf (_bba ,_cdd ,_ffb );
_dcd =_cggb ;}else {if _aa .Abs (float64 (_ccd -_dcb ))> 3{_bba ,_cdd ,_dcd =_edg (_ggg [_eeg ],_bba ,_cdd ,_dcd ,_dcb );}else {_bba ,_cdd =_ece (_bba ,_cdd ,_dcb ,_ccd );_dcd =_dcb ;};};};_dbe =_cb .appendEncodedRow (_dbe ,_bba ,_dafa );if _cb .EncodedByteAlign {_cdd =0;
};_dafa =_cdd %8;};if _cb .EndOfBlock {_ddf ,_ :=_aad (_dafa );_dbe =_cb .appendEncodedRow (_dbe ,_ddf ,_dafa );};return _dbe ;};func (_bbf *Decoder )tryFetchRTC2D ()(_dece error ){_bbf ._fdd .Mark ();var _ggfa bool ;for _cee :=0;_cee < 5;_cee ++{_ggfa ,_dece =_bbf .tryFetchEOL1 ();
if _dece !=nil {if _g .Is (_dece ,_ae .EOF ){if _cee ==0{break ;};return _bda ;};};if _ggfa {continue ;};if _cee > 0{return _bda ;};break ;};if _ggfa {return _ae .EOF ;};_bbf ._fdd .Reset ();return _dece ;};func (_dac *treeNode )set (_cac bool ,_fcdg *treeNode ){if !_cac {_dac ._gde =_fcdg ;
}else {_dac ._dfc =_fcdg ;};};func _aad (_abga int )([]byte ,int ){var _acc []byte ;for _fec :=0;_fec < 2;_fec ++{_acc ,_abga =_ecbf (_acc ,_abga ,_fcb );};return _acc ,_abga %8;};var _cde =[...][]uint16 {{3,2},{1,4},{6,5},{7},{9,8},{10,11,12},{13,14},{15},{16,17,0,18,64},{24,25,23,22,19,20,21,1792,1856,1920},{1984,2048,2112,2176,2240,2304,2368,2432,2496,2560,52,55,56,59,60,320,384,448,53,54,50,51,44,45,46,47,57,58,61,256,48,49,62,63,30,31,32,33,40,41,128,192,26,27,28,29,34,35,36,37,38,39,42,43},{640,704,768,832,1280,1344,1408,1472,1536,1600,1664,1728,512,576,896,960,1024,1088,1152,1216}};
func _eaf (_ffe int )([]byte ,int ){var _agf []byte ;for _cge :=0;_cge < 6;_cge ++{_agf ,_ffe =_ecbf (_agf ,_ffe ,_fcb );};return _agf ,_ffe %8;};func (_cc *Decoder )looseFetchEOL ()(bool ,error ){_ggf ,_afbg :=_cc ._fdd .ReadBits (12);if _afbg !=nil {return false ,_afbg ;
};switch _ggf {case 0x1:return true ,nil ;case 0x0:for {_geed ,_gdbb :=_cc ._fdd .ReadBool ();if _gdbb !=nil {return false ,_gdbb ;};if _geed {return true ,nil ;};};default:return false ,nil ;};};func _edbe (_bdg [][]byte )[][]byte {_ddg :=make ([]byte ,len (_bdg [0]));
for _abge :=range _ddg {_ddg [_abge ]=_bdea ;};_bdg =append (_bdg ,[]byte {});for _ffec :=len (_bdg )-1;_ffec > 0;_ffec --{_bdg [_ffec ]=_bdg [_ffec -1];};_bdg [0]=_ddg ;return _bdg ;};var (_bda =_g .New ("\u0063\u0063\u0069\u0074tf\u0061\u0078\u0020\u0063\u006f\u0072\u0072\u0075\u0070\u0074\u0065\u0064\u0020\u0052T\u0043");
_dd =_g .New ("\u0063\u0063\u0069\u0074tf\u0061\u0078\u0020\u0045\u004f\u004c\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075n\u0064"););var (_bdea byte =1;_gbc byte =0;);func _ffg (_bdag int )([]byte ,int ){var _fgf []byte ;for _bce :=0;_bce < 6;_bce ++{_fgf ,_bdag =_ecbf (_fgf ,_bdag ,_ec );
};return _fgf ,_bdag %8;};var _dgf =[...][]uint16 {{0x2,0x3},{0x2,0x3},{0x2,0x3},{0x3},{0x4,0x5},{0x4,0x5,0x7},{0x4,0x7},{0x18},{0x17,0x18,0x37,0x8,0xf},{0x17,0x18,0x28,0x37,0x67,0x68,0x6c,0x8,0xc,0xd},{0x12,0x13,0x14,0x15,0x16,0x17,0x1c,0x1d,0x1e,0x1f,0x24,0x27,0x28,0x2b,0x2c,0x33,0x34,0x35,0x37,0x38,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0xc8,0xc9,0xca,0xcb,0xcc,0xcd,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xda,0xdb},{0x4a,0x4b,0x4c,0x4d,0x52,0x53,0x54,0x55,0x5a,0x5b,0x64,0x65,0x6c,0x6d,0x72,0x73,0x74,0x75,0x76,0x77}};
func _gfd (_bgg []byte ,_bggc int ,_aae int ,_ggfc bool )([]byte ,int ){var (_beff code ;_ead bool ;);for !_ead {_beff ,_aae ,_ead =_dafab (_aae ,_ggfc );_bgg ,_bggc =_ecbf (_bgg ,_bggc ,_beff );};return _bgg ,_bggc ;};func (_ggb *Decoder )decode2D ()error {_ggb ._afb =_ggb ._faf ;
_ggb ._def ,_ggb ._fcdd =_ggb ._fcdd ,_ggb ._def ;_eab :=true ;var (_faaf bool ;_efa int ;_ege error ;);_ggb ._faf =0;_cff :for _efa < _ggb ._dfb {_gcb :=_aea ._gbg ;for {_faaf ,_ege =_ggb ._fdd .ReadBool ();if _ege !=nil {return _ege ;};_gcb =_gcb .walk (_faaf );
if _gcb ==nil {continue _cff ;};if !_gcb ._fbef {continue ;};switch _gcb ._aeca {case _fe :var _ebd int ;if _eab {_ebd ,_ege =_ggb .decodeRun (_da );}else {_ebd ,_ege =_ggb .decodeRun (_ag );};if _ege !=nil {return _ege ;};_efa +=_ebd ;_ggb ._def [_ggb ._faf ]=_efa ;
_ggb ._faf ++;if _eab {_ebd ,_ege =_ggb .decodeRun (_ag );}else {_ebd ,_ege =_ggb .decodeRun (_da );};if _ege !=nil {return _ege ;};_efa +=_ebd ;_ggb ._def [_ggb ._faf ]=_efa ;_ggb ._faf ++;case _ffa :_aec :=_ggb .getNextChangingElement (_efa ,_eab )+1;
if _aec >=_ggb ._afb {_efa =_ggb ._dfb ;}else {_efa =_ggb ._fcdd [_aec ];};default:_gee :=_ggb .getNextChangingElement (_efa ,_eab );if _gee >=_ggb ._afb ||_gee ==-1{_efa =_ggb ._dfb +_gcb ._aeca ;}else {_efa =_ggb ._fcdd [_gee ]+_gcb ._aeca ;};_ggb ._def [_ggb ._faf ]=_efa ;
_ggb ._faf ++;_eab =!_eab ;};continue _cff ;};};return nil ;};type Encoder struct{K int ;EndOfLine bool ;EncodedByteAlign bool ;Columns int ;Rows int ;EndOfBlock bool ;BlackIs1 bool ;DamagedRowsBeforeError int ;};func (_aag tiffType )String ()string {switch _aag {case _dffa :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u004d\u006f\u0064i\u0066\u0069\u0065\u0064\u0048\u0075\u0066\u0066\u006d\u0061n\u0052\u006c\u0065";
case _bc :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u0054\u0034";case _bd :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u0054\u0036";default:return "\u0075n\u0064\u0065\u0066\u0069\u006e\u0065d";};};func (_baeb *Decoder )tryFetchEOL1 ()(bool ,error ){_abee ,_gab :=_baeb ._fdd .ReadBits (13);
if _gab !=nil {return false ,_gab ;};return _abee ==0x3,nil ;};func _efe (_acg []byte ,_bee int ,_dea code )([]byte ,int ){_bdc :=true ;var _cbc []byte ;_cbc ,_bee =_ecbf (nil ,_bee ,_dea );_ceeb :=0;var _gaa int ;for _ceeb < len (_acg ){_gaa ,_ceeb =_feff (_acg ,_bdc ,_ceeb );
_cbc ,_bee =_gfd (_cbc ,_bee ,_gaa ,_bdc );_bdc =!_bdc ;};return _cbc ,_bee %8;};func _edg (_fcbf ,_gdbc []byte ,_aadc ,_bffb ,_ebdcd int )([]byte ,int ,int ){_egc :=_gge (_fcbf ,_ebdcd );_agc :=_bffb >=0&&_fcbf [_bffb ]==_bdea ||_bffb ==-1;_gdbc ,_aadc =_ecbf (_gdbc ,_aadc ,_ecb );
var _bbab int ;if _bffb > -1{_bbab =_ebdcd -_bffb ;}else {_bbab =_ebdcd -_bffb -1;};_gdbc ,_aadc =_gfd (_gdbc ,_aadc ,_bbab ,_agc );_agc =!_agc ;_bdcb :=_egc -_ebdcd ;_gdbc ,_aadc =_gfd (_gdbc ,_aadc ,_bdcb ,_agc );_bffb =_egc ;return _gdbc ,_aadc ,_bffb ;
};func (_edd *Decoder )decodeRowType6 ()error {if _edd ._ffd {_edd ._fdd .Align ();};if _edd ._ab {_edd ._fdd .Mark ();_dab ,_cef :=_edd .tryFetchEOL ();if _cef !=nil {return _cef ;};if _dab {_dab ,_cef =_edd .tryFetchEOL ();if _cef !=nil {return _cef ;
};if _dab {return _ae .EOF ;};};_edd ._fdd .Reset ();};return _edd .decode2D ();};func (_fbg *Decoder )decode1D ()error {var (_bef int ;_bcd error ;);_ffca :=true ;_fbg ._faf =0;for {var _fed int ;if _ffca {_fed ,_bcd =_fbg .decodeRun (_da );}else {_fed ,_bcd =_fbg .decodeRun (_ag );
};if _bcd !=nil {return _bcd ;};_bef +=_fed ;_fbg ._def [_fbg ._faf ]=_bef ;_fbg ._faf ++;_ffca =!_ffca ;if _bef >=_fbg ._dfb {break ;};};return nil ;};func (_faa *Decoder )decodeRow ()(_efg error ){if !_faa ._ab &&_faa ._bb > 0&&_faa ._bb ==_faa ._fd {return _ae .EOF ;
};switch _faa ._ge {case _dffa :_efg =_faa .decodeRowType2 ();case _bc :_efg =_faa .decodeRowType4 ();case _bd :_efg =_faa .decodeRowType6 ();};if _efg !=nil {return _efg ;};_ed :=0;_bff :=true ;_faa ._abd =0;for _edb :=0;_edb < _faa ._faf ;_edb ++{_abe :=_faa ._dfb ;
if _edb !=_faa ._faf {_abe =_faa ._def [_edb ];};if _abe > _faa ._dfb {_abe =_faa ._dfb ;};_ceg :=_ed /8;for _ed %8!=0&&_abe -_ed > 0{var _dag byte ;if !_bff {_dag =1<<uint (7-(_ed %8));};_faa ._gcd [_ceg ]|=_dag ;_ed ++;};if _ed %8==0{_ceg =_ed /8;var _dgcb byte ;
if !_bff {_dgcb =0xff;};for _abe -_ed > 7{_faa ._gcd [_ceg ]=_dgcb ;_ed +=8;_ceg ++;};};for _abe -_ed > 0{if _ed %8==0{_faa ._gcd [_ceg ]=0;};var _ffce byte ;if !_bff {_ffce =1<<uint (7-(_ed %8));};_faa ._gcd [_ceg ]|=_ffce ;_ed ++;};_bff =!_bff ;};if _ed !=_faa ._dfb {return _g .New ("\u0073\u0075\u006d\u0020\u006f\u0066 \u0072\u0075\u006e\u002d\u006c\u0065\u006e\u0067\u0074\u0068\u0073\u0020\u0064\u006f\u0065\u0073\u0020\u006e\u006f\u0074 \u0065\u0071\u0075\u0061\u006c\u0020\u0073\u0063\u0061\u006e\u0020\u006c\u0069\u006ee\u0020w\u0069\u0064\u0074\u0068");
};_faa ._aga =(_ed +7)/8;_faa ._fd ++;return nil ;};func (_gca *Encoder )encodeG32D (_fgde [][]byte )[]byte {var _add []byte ;var _fbc int ;for _afg :=0;_afg < len (_fgde );_afg +=_gca .K {if _gca .Rows > 0&&!_gca .EndOfBlock &&_afg ==_gca .Rows {break ;
};_gabc ,_cgg :=_efe (_fgde [_afg ],_fbc ,_ec );_add =_gca .appendEncodedRow (_add ,_gabc ,_fbc );if _gca .EncodedByteAlign {_cgg =0;};_fbc =_cgg ;for _fgg :=_afg +1;_fgg < (_afg +_gca .K )&&_fgg < len (_fgde );_fgg ++{if _gca .Rows > 0&&!_gca .EndOfBlock &&_fgg ==_gca .Rows {break ;
};_fafg ,_eea :=_ecbf (nil ,_fbc ,_ce );var _bbga ,_fda ,_aabc int ;_fbec :=-1;for _fbec < len (_fgde [_fgg ]){_bbga =_gge (_fgde [_fgg ],_fbec );_fda =_bed (_fgde [_fgg ],_fgde [_fgg -1],_fbec );_aabc =_gge (_fgde [_fgg -1],_fda );if _aabc < _bbga {_fafg ,_eea =_aafa (_fafg ,_eea );
_fbec =_aabc ;}else {if _aa .Abs (float64 (_fda -_bbga ))> 3{_fafg ,_eea ,_fbec =_edg (_fgde [_fgg ],_fafg ,_eea ,_fbec ,_bbga );}else {_fafg ,_eea =_ece (_fafg ,_eea ,_bbga ,_fda );_fbec =_bbga ;};};};_add =_gca .appendEncodedRow (_add ,_fafg ,_fbc );
if _gca .EncodedByteAlign {_eea =0;};_fbc =_eea %8;};};if _gca .EndOfBlock {_eba ,_ :=_ffg (_fbc );_add =_gca .appendEncodedRow (_add ,_eba ,_fbc );};return _add ;};type treeNode struct{_gde *treeNode ;_dfc *treeNode ;_aeca int ;_ebde bool ;_fbef bool ;
};func (_gcab *tree )fill (_aggc ,_aabac ,_agca int )error {_ega :=_gcab ._gbg ;for _ffbd :=0;_ffbd < _aggc ;_ffbd ++{_faaa :=_aggc -1-_ffbd ;_dbee :=((_aabac >>uint (_faaa ))&1)!=0;_efgb :=_ega .walk (_dbee );if _efgb !=nil {if _efgb ._fbef {return _g .New ("\u006e\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u006c\u0065\u0061\u0066\u002c\u0020\u006eo\u0020o\u0074\u0068\u0065\u0072\u0020\u0066\u006f\u006c\u006c\u006f\u0077\u0069\u006e\u0067");
};_ega =_efgb ;continue ;};_efgb =&treeNode {};if _ffbd ==_aggc -1{_efgb ._aeca =_agca ;_efgb ._fbef =true ;};if _aabac ==0{_efgb ._ebde =true ;};_ega .set (_dbee ,_efgb );_ega =_efgb ;};return nil ;};func _ece (_agga []byte ,_dce ,_abdd ,_efgd int )([]byte ,int ){_decd :=_gcbb (_abdd ,_efgd );
_agga ,_dce =_ecbf (_agga ,_dce ,_decd );return _agga ,_dce ;};func (_ac *Decoder )decodeRun (_fbd *tree )(int ,error ){var _afae int ;_bgd :=_fbd ._gbg ;for {_feb ,_ada :=_ac ._fdd .ReadBool ();if _ada !=nil {return 0,_ada ;};_bgd =_bgd .walk (_feb );
if _bgd ==nil {return 0,_g .New ("\u0075\u006e\u006bno\u0077\u006e\u0020\u0063\u006f\u0064\u0065\u0020\u0069n\u0020H\u0075f\u0066m\u0061\u006e\u0020\u0052\u004c\u0045\u0020\u0073\u0074\u0072\u0065\u0061\u006d");};if _bgd ._fbef {_afae +=_bgd ._aeca ;switch {case _bgd ._aeca >=64:_bgd =_fbd ._gbg ;
case _bgd ._aeca >=0:return _afae ,nil ;default:return _ac ._dfb ,nil ;};};};};var (_c *treeNode ;_d *treeNode ;_ag *tree ;_da *tree ;_f *tree ;_aea *tree ;_ff =-2000;_daf =-1000;_ffa =-3000;_fe =-4000;);func (_ef *Decoder )Read (in []byte )(int ,error ){if _ef ._ffdg !=nil {return 0,_ef ._ffdg ;
};_gade :=len (in );var (_dfg int ;_ddb int ;);for _gade !=0{if _ef ._beb >=_ef ._aga {if _bg :=_ef .fetch ();_bg !=nil {_ef ._ffdg =_bg ;return 0,_bg ;};};if _ef ._aga ==-1{return _dfg ,_ae .EOF ;};switch {case _gade <=_ef ._aga -_ef ._beb :_egf :=_ef ._gcd [_ef ._beb :_ef ._beb +_gade ];
for _ ,_afa :=range _egf {if !_ef ._gf {_afa =^_afa ;};in [_ddb ]=_afa ;_ddb ++;};_dfg +=len (_egf );_ef ._beb +=len (_egf );return _dfg ,nil ;default:_bdf :=_ef ._gcd [_ef ._beb :];for _ ,_fbff :=range _bdf {if !_ef ._gf {_fbff =^_fbff ;};in [_ddb ]=_fbff ;
_ddb ++;};_dfg +=len (_bdf );_ef ._beb +=len (_bdf );_gade -=len (_bdf );};};return _dfg ,nil ;};func (_agg *Decoder )decodeRowType2 ()error {if _agg ._ffd {_agg ._fdd .Align ();};if _fag :=_agg .decode1D ();_fag !=nil {return _fag ;};return nil ;};func (_fbb *Decoder )fetch ()error {if _fbb ._aga ==-1{return nil ;
};if _fbb ._beb < _fbb ._aga {return nil ;};_fbb ._aga =0;_gce :=_fbb .decodeRow ();if _gce !=nil {if !_g .Is (_gce ,_ae .EOF ){return _gce ;};if _fbb ._aga !=0{return _gce ;};_fbb ._aga =-1;};_fbb ._beb =0;return nil ;};type tree struct{_gbg *treeNode };
type Decoder struct{_dfb int ;_bb int ;_fd int ;_gcd []byte ;_gb int ;_fbf bool ;_eb bool ;_dae bool ;_gf bool ;_ee bool ;_ab bool ;_ffd bool ;_aga int ;_beb int ;_fcdd []int ;_def []int ;_afb int ;_faf int ;_gcc int ;_abd int ;_fdd *_gc .Reader ;_ge tiffType ;
_ffdg error ;};func (_ced *Decoder )decodeG32D ()error {_ced ._afb =_ced ._faf ;_ced ._def ,_ced ._fcdd =_ced ._fcdd ,_ced ._def ;_bffc :=true ;var (_fbe bool ;_ca int ;_bfd error ;);_ced ._faf =0;_bag :for _ca < _ced ._dfb {_abg :=_aea ._gbg ;for {_fbe ,_bfd =_ced ._fdd .ReadBool ();
if _bfd !=nil {return _bfd ;};_abg =_abg .walk (_fbe );if _abg ==nil {continue _bag ;};if !_abg ._fbef {continue ;};switch _abg ._aeca {case _fe :var _bae int ;if _bffc {_bae ,_bfd =_ced .decodeRun (_da );}else {_bae ,_bfd =_ced .decodeRun (_ag );};if _bfd !=nil {return _bfd ;
};_ca +=_bae ;_ced ._def [_ced ._faf ]=_ca ;_ced ._faf ++;if _bffc {_bae ,_bfd =_ced .decodeRun (_ag );}else {_bae ,_bfd =_ced .decodeRun (_da );};if _bfd !=nil {return _bfd ;};_ca +=_bae ;_ced ._def [_ced ._faf ]=_ca ;_ced ._faf ++;case _ffa :_dgcbc :=_ced .getNextChangingElement (_ca ,_bffc )+1;
if _dgcbc >=_ced ._afb {_ca =_ced ._dfb ;}else {_ca =_ced ._fcdd [_dgcbc ];};default:_adf :=_ced .getNextChangingElement (_ca ,_bffc );if _adf >=_ced ._afb ||_adf ==-1{_ca =_ced ._dfb +_abg ._aeca ;}else {_ca =_ced ._fcdd [_adf ]+_abg ._aeca ;};_ced ._def [_ced ._faf ]=_ca ;
_ced ._faf ++;_bffc =!_bffc ;};continue _bag ;};};return nil ;};func _bed (_ecbe ,_ebf []byte ,_eegb int )int {_bebde :=_gge (_ebf ,_eegb );if _bebde < len (_ebf )&&(_eegb ==-1&&_ebf [_bebde ]==_bdea ||_eegb >=0&&_eegb < len (_ecbe )&&_ecbe [_eegb ]==_ebf [_bebde ]||_eegb >=len (_ecbe )&&_ecbe [_eegb -1]!=_ebf [_bebde ]){_bebde =_gge (_ebf ,_bebde );
};return _bebde ;};func _dafab (_fgc int ,_aedb bool )(code ,int ,bool ){if _fgc < 64{if _aedb {return _dec [_fgc ],0,true ;};return _eg [_fgc ],0,true ;};_bgga :=_fgc /64;if _bgga > 40{return _aab [2560],_fgc -2560,false ;};if _bgga > 27{return _aab [_bgga *64],_fgc -_bgga *64,false ;
};if _aedb {return _cdf [_bgga *64],_fgc -_bgga *64,false ;};return _afe [_bgga *64],_fgc -_bgga *64,false ;};func NewDecoder (data []byte ,options DecodeOptions )(*Decoder ,error ){_gba :=&Decoder {_fdd :_gc .NewReader (data ),_dfb :options .Columns ,_bb :options .Rows ,_gb :options .DamagedRowsBeforeError ,_gcd :make ([]byte ,(options .Columns +7)/8),_fcdd :make ([]int ,options .Columns +2),_def :make ([]int ,options .Columns +2),_ffd :options .EncodedByteAligned ,_gf :options .BlackIsOne ,_ee :options .EndOfLine ,_ab :options .EndOfBlock };
switch {case options .K ==0:_gba ._ge =_bc ;if len (data )< 20{return nil ,_g .New ("\u0074o\u006f\u0020\u0073\u0068o\u0072\u0074\u0020\u0063\u0063i\u0074t\u0066a\u0078\u0020\u0073\u0074\u0072\u0065\u0061m");};_bbg :=data [:20];if _bbg [0]!=0||(_bbg [1]>>4!=1&&_bbg [1]!=1){_gba ._ge =_dffa ;
_ba :=(uint16 (_bbg [0])<<8+uint16 (_bbg [1]&0xff))>>4;for _gadb :=12;_gadb < 160;_gadb ++{_ba =(_ba <<1)+uint16 ((_bbg [_gadb /8]>>uint16 (7-(_gadb %8)))&0x01);if _ba &0xfff==1{_gba ._ge =_bc ;break ;};};};case options .K < 0:_gba ._ge =_bd ;case options .K > 0:_gba ._ge =_bc ;
_gba ._fbf =true ;};switch _gba ._ge {case _dffa ,_bc ,_bd :default:return nil ,_g .New ("\u0075\u006ek\u006e\u006f\u0077\u006e\u0020\u0063\u0063\u0069\u0074\u0074\u0066\u0061\u0078\u002e\u0044\u0065\u0063\u006f\u0064\u0065\u0072\u0020ty\u0070\u0065");
};return _gba ,nil ;};func _gcbb (_bdb ,_eee int )code {var _cea code ;switch _eee -_bdb {case -1:_cea =_gd ;case -2:_cea =_deg ;case -3:_cea =_be ;case 0:_cea =_ecg ;case 1:_cea =_gad ;case 2:_cea =_fea ;case 3:_cea =_dff ;};return _cea ;};var (_eg map[int ]code ;
_dec map[int ]code ;_afe map[int ]code ;_cdf map[int ]code ;_aab map[int ]code ;_fb map[int ]byte ;_fcb =code {Code :1<<4,BitsWritten :12};_ec =code {Code :3<<3,BitsWritten :13};_ce =code {Code :2<<3,BitsWritten :13};_ffb =code {Code :1<<12,BitsWritten :4};
_ecb =code {Code :1<<13,BitsWritten :3};_ecg =code {Code :1<<15,BitsWritten :1};_gd =code {Code :3<<13,BitsWritten :3};_deg =code {Code :3<<10,BitsWritten :6};_be =code {Code :3<<9,BitsWritten :7};_gad =code {Code :2<<13,BitsWritten :3};_fea =code {Code :2<<10,BitsWritten :6};
_dff =code {Code :2<<9,BitsWritten :7};);func _aafa (_cdc []byte ,_aee int )([]byte ,int ){return _ecbf (_cdc ,_aee ,_ffb )};