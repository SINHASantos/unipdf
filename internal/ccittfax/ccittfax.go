//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package ccittfax ;import (_g "errors";_gb "github.com/unidoc/unipdf/v3/internal/bitwise";_a "io";_c "math";);type treeNode struct{_gfd *treeNode ;_fbdc *treeNode ;_daab int ;_fdg bool ;_egbd bool ;};func init (){_ce =&treeNode {_egbd :true ,_daab :_ad };
_ge =&treeNode {_daab :_ceg ,_fbdc :_ce };_ge ._gfd =_ge ;_dd =&tree {_fgca :&treeNode {}};if _cd :=_dd .fillWithNode (12,0,_ge );_cd !=nil {panic (_cd .Error ());};if _eg :=_dd .fillWithNode (12,1,_ce );_eg !=nil {panic (_eg .Error ());};_gd =&tree {_fgca :&treeNode {}};
for _de :=0;_de < len (_abd );_de ++{for _ee :=0;_ee < len (_abd [_de ]);_ee ++{if _ab :=_gd .fill (_de +2,int (_abd [_de ][_ee ]),int (_ea [_de ][_ee ]));_ab !=nil {panic (_ab .Error ());};};};if _abg :=_gd .fillWithNode (12,0,_ge );_abg !=nil {panic (_abg .Error ());
};if _da :=_gd .fillWithNode (12,1,_ce );_da !=nil {panic (_da .Error ());};_f =&tree {_fgca :&treeNode {}};for _fa :=0;_fa < len (_aac );_fa ++{for _ga :=0;_ga < len (_aac [_fa ]);_ga ++{if _fe :=_f .fill (_fa +4,int (_aac [_fa ][_ga ]),int (_ac [_fa ][_ga ]));
_fe !=nil {panic (_fe .Error ());};};};if _bc :=_f .fillWithNode (12,0,_ge );_bc !=nil {panic (_bc .Error ());};if _aa :=_f .fillWithNode (12,1,_ce );_aa !=nil {panic (_aa .Error ());};_ff =&tree {_fgca :&treeNode {}};if _bd :=_ff .fill (4,1,_b );_bd !=nil {panic (_bd .Error ());
};if _gc :=_ff .fill (3,1,_e );_gc !=nil {panic (_gc .Error ());};if _af :=_ff .fill (1,1,0);_af !=nil {panic (_af .Error ());};if _dc :=_ff .fill (3,3,1);_dc !=nil {panic (_dc .Error ());};if _cf :=_ff .fill (6,3,2);_cf !=nil {panic (_cf .Error ());};
if _gf :=_ff .fill (7,3,3);_gf !=nil {panic (_gf .Error ());};if _ef :=_ff .fill (3,2,-1);_ef !=nil {panic (_ef .Error ());};if _ec :=_ff .fill (6,2,-2);_ec !=nil {panic (_ec .Error ());};if _fc :=_ff .fill (7,2,-3);_fc !=nil {panic (_fc .Error ());};};
func _cbdd (_aaa ,_efde []byte ,_cgf ,_def ,_fdfe int )([]byte ,int ,int ){_abe :=_bfe (_aaa ,_fdfe );_ffc :=_def >=0&&_aaa [_def ]==_cdbb ||_def ==-1;_efde ,_cgf =_cdbd (_efde ,_cgf ,_bdd );var _ebfc int ;if _def > -1{_ebfc =_fdfe -_def ;}else {_ebfc =_fdfe -_def -1;
};_efde ,_cgf =_fcga (_efde ,_cgf ,_ebfc ,_ffc );_ffc =!_ffc ;_fag :=_abe -_fdfe ;_efde ,_cgf =_fcga (_efde ,_cgf ,_fag ,_ffc );_def =_abe ;return _efde ,_cgf ,_def ;};var (_fcac =_g .New ("\u0063\u0063\u0069\u0074tf\u0061\u0078\u0020\u0063\u006f\u0072\u0072\u0075\u0070\u0074\u0065\u0064\u0020\u0052T\u0043");
_eef =_g .New ("\u0063\u0063\u0069\u0074tf\u0061\u0078\u0020\u0045\u004f\u004c\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075n\u0064"););var (_cdbb byte =1;_ace byte =0;);func (_fd *Decoder )decoderRowType41D ()error {if _fd ._adg {_fd ._fcae .Align ();
};_fd ._fcae .Mark ();var (_gae bool ;_gbe error ;);if _fd ._fcc {_gae ,_gbe =_fd .tryFetchEOL ();if _gbe !=nil {return _gbe ;};if !_gae {return _eef ;};}else {_gae ,_gbe =_fd .looseFetchEOL ();if _gbe !=nil {return _gbe ;};};if !_gae {_fd ._fcae .Reset ();
};if _gae &&_fd ._ed {_fd ._fcae .Mark ();for _ffa :=0;_ffa < 5;_ffa ++{_gae ,_gbe =_fd .tryFetchEOL ();if _gbe !=nil {if _g .Is (_gbe ,_a .EOF ){if _ffa ==0{break ;};return _fcac ;};};if _gae {continue ;};if _ffa > 0{return _fcac ;};break ;};if _gae {return _a .EOF ;
};_fd ._fcae .Reset ();};if _gbe =_fd .decode1D ();_gbe !=nil {return _gbe ;};return nil ;};type Encoder struct{K int ;EndOfLine bool ;EncodedByteAlign bool ;Columns int ;Rows int ;EndOfBlock bool ;BlackIs1 bool ;DamagedRowsBeforeError int ;};func _cge (_acg [][]byte )[][]byte {_aeb :=make ([]byte ,len (_acg [0]));
for _gcfc :=range _aeb {_aeb [_gcfc ]=_cdbb ;};_acg =append (_acg ,[]byte {});for _ffgba :=len (_acg )-1;_ffgba > 0;_ffgba --{_acg [_ffgba ]=_acg [_ffgba -1];};_acg [0]=_aeb ;return _acg ;};func init (){_dea =make (map[int ]code );_dea [0]=code {Code :13<<8|3<<6,BitsWritten :10};
_dea [1]=code {Code :2<<(5+8),BitsWritten :3};_dea [2]=code {Code :3<<(6+8),BitsWritten :2};_dea [3]=code {Code :2<<(6+8),BitsWritten :2};_dea [4]=code {Code :3<<(5+8),BitsWritten :3};_dea [5]=code {Code :3<<(4+8),BitsWritten :4};_dea [6]=code {Code :2<<(4+8),BitsWritten :4};
_dea [7]=code {Code :3<<(3+8),BitsWritten :5};_dea [8]=code {Code :5<<(2+8),BitsWritten :6};_dea [9]=code {Code :4<<(2+8),BitsWritten :6};_dea [10]=code {Code :4<<(1+8),BitsWritten :7};_dea [11]=code {Code :5<<(1+8),BitsWritten :7};_dea [12]=code {Code :7<<(1+8),BitsWritten :7};
_dea [13]=code {Code :4<<8,BitsWritten :8};_dea [14]=code {Code :7<<8,BitsWritten :8};_dea [15]=code {Code :12<<8,BitsWritten :9};_dea [16]=code {Code :5<<8|3<<6,BitsWritten :10};_dea [17]=code {Code :6<<8,BitsWritten :10};_dea [18]=code {Code :2<<8,BitsWritten :10};
_dea [19]=code {Code :12<<8|7<<5,BitsWritten :11};_dea [20]=code {Code :13<<8,BitsWritten :11};_dea [21]=code {Code :13<<8|4<<5,BitsWritten :11};_dea [22]=code {Code :6<<8|7<<5,BitsWritten :11};_dea [23]=code {Code :5<<8,BitsWritten :11};_dea [24]=code {Code :2<<8|7<<5,BitsWritten :11};
_dea [25]=code {Code :3<<8,BitsWritten :11};_dea [26]=code {Code :12<<8|10<<4,BitsWritten :12};_dea [27]=code {Code :12<<8|11<<4,BitsWritten :12};_dea [28]=code {Code :12<<8|12<<4,BitsWritten :12};_dea [29]=code {Code :12<<8|13<<4,BitsWritten :12};_dea [30]=code {Code :6<<8|8<<4,BitsWritten :12};
_dea [31]=code {Code :6<<8|9<<4,BitsWritten :12};_dea [32]=code {Code :6<<8|10<<4,BitsWritten :12};_dea [33]=code {Code :6<<8|11<<4,BitsWritten :12};_dea [34]=code {Code :13<<8|2<<4,BitsWritten :12};_dea [35]=code {Code :13<<8|3<<4,BitsWritten :12};_dea [36]=code {Code :13<<8|4<<4,BitsWritten :12};
_dea [37]=code {Code :13<<8|5<<4,BitsWritten :12};_dea [38]=code {Code :13<<8|6<<4,BitsWritten :12};_dea [39]=code {Code :13<<8|7<<4,BitsWritten :12};_dea [40]=code {Code :6<<8|12<<4,BitsWritten :12};_dea [41]=code {Code :6<<8|13<<4,BitsWritten :12};_dea [42]=code {Code :13<<8|10<<4,BitsWritten :12};
_dea [43]=code {Code :13<<8|11<<4,BitsWritten :12};_dea [44]=code {Code :5<<8|4<<4,BitsWritten :12};_dea [45]=code {Code :5<<8|5<<4,BitsWritten :12};_dea [46]=code {Code :5<<8|6<<4,BitsWritten :12};_dea [47]=code {Code :5<<8|7<<4,BitsWritten :12};_dea [48]=code {Code :6<<8|4<<4,BitsWritten :12};
_dea [49]=code {Code :6<<8|5<<4,BitsWritten :12};_dea [50]=code {Code :5<<8|2<<4,BitsWritten :12};_dea [51]=code {Code :5<<8|3<<4,BitsWritten :12};_dea [52]=code {Code :2<<8|4<<4,BitsWritten :12};_dea [53]=code {Code :3<<8|7<<4,BitsWritten :12};_dea [54]=code {Code :3<<8|8<<4,BitsWritten :12};
_dea [55]=code {Code :2<<8|7<<4,BitsWritten :12};_dea [56]=code {Code :2<<8|8<<4,BitsWritten :12};_dea [57]=code {Code :5<<8|8<<4,BitsWritten :12};_dea [58]=code {Code :5<<8|9<<4,BitsWritten :12};_dea [59]=code {Code :2<<8|11<<4,BitsWritten :12};_dea [60]=code {Code :2<<8|12<<4,BitsWritten :12};
_dea [61]=code {Code :5<<8|10<<4,BitsWritten :12};_dea [62]=code {Code :6<<8|6<<4,BitsWritten :12};_dea [63]=code {Code :6<<8|7<<4,BitsWritten :12};_add =make (map[int ]code );_add [0]=code {Code :53<<8,BitsWritten :8};_add [1]=code {Code :7<<(2+8),BitsWritten :6};
_add [2]=code {Code :7<<(4+8),BitsWritten :4};_add [3]=code {Code :8<<(4+8),BitsWritten :4};_add [4]=code {Code :11<<(4+8),BitsWritten :4};_add [5]=code {Code :12<<(4+8),BitsWritten :4};_add [6]=code {Code :14<<(4+8),BitsWritten :4};_add [7]=code {Code :15<<(4+8),BitsWritten :4};
_add [8]=code {Code :19<<(3+8),BitsWritten :5};_add [9]=code {Code :20<<(3+8),BitsWritten :5};_add [10]=code {Code :7<<(3+8),BitsWritten :5};_add [11]=code {Code :8<<(3+8),BitsWritten :5};_add [12]=code {Code :8<<(2+8),BitsWritten :6};_add [13]=code {Code :3<<(2+8),BitsWritten :6};
_add [14]=code {Code :52<<(2+8),BitsWritten :6};_add [15]=code {Code :53<<(2+8),BitsWritten :6};_add [16]=code {Code :42<<(2+8),BitsWritten :6};_add [17]=code {Code :43<<(2+8),BitsWritten :6};_add [18]=code {Code :39<<(1+8),BitsWritten :7};_add [19]=code {Code :12<<(1+8),BitsWritten :7};
_add [20]=code {Code :8<<(1+8),BitsWritten :7};_add [21]=code {Code :23<<(1+8),BitsWritten :7};_add [22]=code {Code :3<<(1+8),BitsWritten :7};_add [23]=code {Code :4<<(1+8),BitsWritten :7};_add [24]=code {Code :40<<(1+8),BitsWritten :7};_add [25]=code {Code :43<<(1+8),BitsWritten :7};
_add [26]=code {Code :19<<(1+8),BitsWritten :7};_add [27]=code {Code :36<<(1+8),BitsWritten :7};_add [28]=code {Code :24<<(1+8),BitsWritten :7};_add [29]=code {Code :2<<8,BitsWritten :8};_add [30]=code {Code :3<<8,BitsWritten :8};_add [31]=code {Code :26<<8,BitsWritten :8};
_add [32]=code {Code :27<<8,BitsWritten :8};_add [33]=code {Code :18<<8,BitsWritten :8};_add [34]=code {Code :19<<8,BitsWritten :8};_add [35]=code {Code :20<<8,BitsWritten :8};_add [36]=code {Code :21<<8,BitsWritten :8};_add [37]=code {Code :22<<8,BitsWritten :8};
_add [38]=code {Code :23<<8,BitsWritten :8};_add [39]=code {Code :40<<8,BitsWritten :8};_add [40]=code {Code :41<<8,BitsWritten :8};_add [41]=code {Code :42<<8,BitsWritten :8};_add [42]=code {Code :43<<8,BitsWritten :8};_add [43]=code {Code :44<<8,BitsWritten :8};
_add [44]=code {Code :45<<8,BitsWritten :8};_add [45]=code {Code :4<<8,BitsWritten :8};_add [46]=code {Code :5<<8,BitsWritten :8};_add [47]=code {Code :10<<8,BitsWritten :8};_add [48]=code {Code :11<<8,BitsWritten :8};_add [49]=code {Code :82<<8,BitsWritten :8};
_add [50]=code {Code :83<<8,BitsWritten :8};_add [51]=code {Code :84<<8,BitsWritten :8};_add [52]=code {Code :85<<8,BitsWritten :8};_add [53]=code {Code :36<<8,BitsWritten :8};_add [54]=code {Code :37<<8,BitsWritten :8};_add [55]=code {Code :88<<8,BitsWritten :8};
_add [56]=code {Code :89<<8,BitsWritten :8};_add [57]=code {Code :90<<8,BitsWritten :8};_add [58]=code {Code :91<<8,BitsWritten :8};_add [59]=code {Code :74<<8,BitsWritten :8};_add [60]=code {Code :75<<8,BitsWritten :8};_add [61]=code {Code :50<<8,BitsWritten :8};
_add [62]=code {Code :51<<8,BitsWritten :8};_add [63]=code {Code :52<<8,BitsWritten :8};_gg =make (map[int ]code );_gg [64]=code {Code :3<<8|3<<6,BitsWritten :10};_gg [128]=code {Code :12<<8|8<<4,BitsWritten :12};_gg [192]=code {Code :12<<8|9<<4,BitsWritten :12};
_gg [256]=code {Code :5<<8|11<<4,BitsWritten :12};_gg [320]=code {Code :3<<8|3<<4,BitsWritten :12};_gg [384]=code {Code :3<<8|4<<4,BitsWritten :12};_gg [448]=code {Code :3<<8|5<<4,BitsWritten :12};_gg [512]=code {Code :3<<8|12<<3,BitsWritten :13};_gg [576]=code {Code :3<<8|13<<3,BitsWritten :13};
_gg [640]=code {Code :2<<8|10<<3,BitsWritten :13};_gg [704]=code {Code :2<<8|11<<3,BitsWritten :13};_gg [768]=code {Code :2<<8|12<<3,BitsWritten :13};_gg [832]=code {Code :2<<8|13<<3,BitsWritten :13};_gg [896]=code {Code :3<<8|18<<3,BitsWritten :13};_gg [960]=code {Code :3<<8|19<<3,BitsWritten :13};
_gg [1024]=code {Code :3<<8|20<<3,BitsWritten :13};_gg [1088]=code {Code :3<<8|21<<3,BitsWritten :13};_gg [1152]=code {Code :3<<8|22<<3,BitsWritten :13};_gg [1216]=code {Code :119<<3,BitsWritten :13};_gg [1280]=code {Code :2<<8|18<<3,BitsWritten :13};_gg [1344]=code {Code :2<<8|19<<3,BitsWritten :13};
_gg [1408]=code {Code :2<<8|20<<3,BitsWritten :13};_gg [1472]=code {Code :2<<8|21<<3,BitsWritten :13};_gg [1536]=code {Code :2<<8|26<<3,BitsWritten :13};_gg [1600]=code {Code :2<<8|27<<3,BitsWritten :13};_gg [1664]=code {Code :3<<8|4<<3,BitsWritten :13};
_gg [1728]=code {Code :3<<8|5<<3,BitsWritten :13};_egf =make (map[int ]code );_egf [64]=code {Code :27<<(3+8),BitsWritten :5};_egf [128]=code {Code :18<<(3+8),BitsWritten :5};_egf [192]=code {Code :23<<(2+8),BitsWritten :6};_egf [256]=code {Code :55<<(1+8),BitsWritten :7};
_egf [320]=code {Code :54<<8,BitsWritten :8};_egf [384]=code {Code :55<<8,BitsWritten :8};_egf [448]=code {Code :100<<8,BitsWritten :8};_egf [512]=code {Code :101<<8,BitsWritten :8};_egf [576]=code {Code :104<<8,BitsWritten :8};_egf [640]=code {Code :103<<8,BitsWritten :8};
_egf [704]=code {Code :102<<8,BitsWritten :9};_egf [768]=code {Code :102<<8|1<<7,BitsWritten :9};_egf [832]=code {Code :105<<8,BitsWritten :9};_egf [896]=code {Code :105<<8|1<<7,BitsWritten :9};_egf [960]=code {Code :106<<8,BitsWritten :9};_egf [1024]=code {Code :106<<8|1<<7,BitsWritten :9};
_egf [1088]=code {Code :107<<8,BitsWritten :9};_egf [1152]=code {Code :107<<8|1<<7,BitsWritten :9};_egf [1216]=code {Code :108<<8,BitsWritten :9};_egf [1280]=code {Code :108<<8|1<<7,BitsWritten :9};_egf [1344]=code {Code :109<<8,BitsWritten :9};_egf [1408]=code {Code :109<<8|1<<7,BitsWritten :9};
_egf [1472]=code {Code :76<<8,BitsWritten :9};_egf [1536]=code {Code :76<<8|1<<7,BitsWritten :9};_egf [1600]=code {Code :77<<8,BitsWritten :9};_egf [1664]=code {Code :24<<(2+8),BitsWritten :6};_egf [1728]=code {Code :77<<8|1<<7,BitsWritten :9};_ca =make (map[int ]code );
_ca [1792]=code {Code :1<<8,BitsWritten :11};_ca [1856]=code {Code :1<<8|4<<5,BitsWritten :11};_ca [1920]=code {Code :1<<8|5<<5,BitsWritten :11};_ca [1984]=code {Code :1<<8|2<<4,BitsWritten :12};_ca [2048]=code {Code :1<<8|3<<4,BitsWritten :12};_ca [2112]=code {Code :1<<8|4<<4,BitsWritten :12};
_ca [2176]=code {Code :1<<8|5<<4,BitsWritten :12};_ca [2240]=code {Code :1<<8|6<<4,BitsWritten :12};_ca [2304]=code {Code :1<<8|7<<4,BitsWritten :12};_ca [2368]=code {Code :1<<8|12<<4,BitsWritten :12};_ca [2432]=code {Code :1<<8|13<<4,BitsWritten :12};
_ca [2496]=code {Code :1<<8|14<<4,BitsWritten :12};_ca [2560]=code {Code :1<<8|15<<4,BitsWritten :12};_cb =make (map[int ]byte );_cb [0]=0xFF;_cb [1]=0xFE;_cb [2]=0xFC;_cb [3]=0xF8;_cb [4]=0xF0;_cb [5]=0xE0;_cb [6]=0xC0;_cb [7]=0x80;_cb [8]=0x00;};func _decg (_edg ,_aga []byte ,_fdc int ,_abad bool )int {_edbg :=_bfe (_aga ,_fdc );
if _edbg < len (_aga )&&(_fdc ==-1&&_aga [_edbg ]==_cdbb ||_fdc >=0&&_fdc < len (_edg )&&_edg [_fdc ]==_aga [_edbg ]||_fdc >=len (_edg )&&_abad &&_aga [_edbg ]==_cdbb ||_fdc >=len (_edg )&&!_abad &&_aga [_edbg ]==_ace ){_edbg =_bfe (_aga ,_edbg );};return _edbg ;
};func (_dcfe *Decoder )tryFetchEOL ()(bool ,error ){_aca ,_cegf :=_dcfe ._fcae .ReadBits (12);if _cegf !=nil {return false ,_cegf ;};return _aca ==0x1,nil ;};func _dfc (_bgab int )([]byte ,int ){var _accb []byte ;for _ecc :=0;_ecc < 2;_ecc ++{_accb ,_bgab =_cdbd (_accb ,_bgab ,_faa );
};return _accb ,_bgab %8;};func _bab (_abf ,_abbb []byte ,_gbg int )int {_efe :=_bfe (_abbb ,_gbg );if _efe < len (_abbb )&&(_gbg ==-1&&_abbb [_efe ]==_cdbb ||_gbg >=0&&_gbg < len (_abf )&&_abf [_gbg ]==_abbb [_efe ]||_gbg >=len (_abf )&&_abf [_gbg -1]!=_abbb [_efe ]){_efe =_bfe (_abbb ,_efe );
};return _efe ;};func (_cba *Encoder )Encode (pixels [][]byte )[]byte {if _cba .BlackIs1 {_cdbb =0;_ace =1;}else {_cdbb =1;_ace =0;};if _cba .K ==0{return _cba .encodeG31D (pixels );};if _cba .K > 0{return _cba .encodeG32D (pixels );};if _cba .K < 0{return _cba .encodeG4 (pixels );
};return nil ;};func (_ccb *Decoder )decodeG32D ()error {_ccb ._egb =_ccb ._edd ;_ccb ._agg ,_ccb ._ba =_ccb ._ba ,_ccb ._agg ;_fgg :=true ;var (_eb bool ;_dgd int ;_bgd error ;);_ccb ._edd =0;_aggd :for _dgd < _ccb ._df {_bdda :=_ff ._fgca ;for {_eb ,_bgd =_ccb ._fcae .ReadBool ();
if _bgd !=nil {return _bgd ;};_bdda =_bdda .walk (_eb );if _bdda ==nil {continue _aggd ;};if !_bdda ._egbd {continue ;};switch _bdda ._daab {case _e :var _dcd int ;if _fgg {_dcd ,_bgd =_ccb .decodeRun (_f );}else {_dcd ,_bgd =_ccb .decodeRun (_gd );};if _bgd !=nil {return _bgd ;
};_dgd +=_dcd ;_ccb ._agg [_ccb ._edd ]=_dgd ;_ccb ._edd ++;if _fgg {_dcd ,_bgd =_ccb .decodeRun (_gd );}else {_dcd ,_bgd =_ccb .decodeRun (_f );};if _bgd !=nil {return _bgd ;};_dgd +=_dcd ;_ccb ._agg [_ccb ._edd ]=_dgd ;_ccb ._edd ++;case _b :_eaa :=_ccb .getNextChangingElement (_dgd ,_fgg )+1;
if _eaa >=_ccb ._egb {_dgd =_ccb ._df ;}else {_dgd =_ccb ._ba [_eaa ];};default:_abc :=_ccb .getNextChangingElement (_dgd ,_fgg );if _abc >=_ccb ._egb ||_abc ==-1{_dgd =_ccb ._df +_bdda ._daab ;}else {_dgd =_ccb ._ba [_abc ]+_bdda ._daab ;};_ccb ._agg [_ccb ._edd ]=_dgd ;
_ccb ._edd ++;_fgg =!_fgg ;};continue _aggd ;};};return nil ;};func (_afd *Decoder )decodeRow ()(_gec error ){if !_afd ._ed &&_afd ._egd > 0&&_afd ._egd ==_afd ._gef {return _a .EOF ;};switch _afd ._dgg {case _efd :_gec =_afd .decodeRowType2 ();case _dg :_gec =_afd .decodeRowType4 ();
case _dcf :_gec =_afd .decodeRowType6 ();};if _gec !=nil {return _gec ;};_cec :=0;_acd :=true ;_afd ._eag =0;for _cg :=0;_cg < _afd ._edd ;_cg ++{_dac :=_afd ._df ;if _cg !=_afd ._edd {_dac =_afd ._agg [_cg ];};if _dac > _afd ._df {_dac =_afd ._df ;};_aad :=_cec /8;
for _cec %8!=0&&_dac -_cec > 0{var _feb byte ;if !_acd {_feb =1<<uint (7-(_cec %8));};_afd ._ddd [_aad ]|=_feb ;_cec ++;};if _cec %8==0{_aad =_cec /8;var _ggg byte ;if !_acd {_ggg =0xff;};for _dac -_cec > 7{_afd ._ddd [_aad ]=_ggg ;_cec +=8;_aad ++;};};
for _dac -_cec > 0{if _cec %8==0{_afd ._ddd [_aad ]=0;};var _fec byte ;if !_acd {_fec =1<<uint (7-(_cec %8));};_afd ._ddd [_aad ]|=_fec ;_cec ++;};_acd =!_acd ;};if _cec !=_afd ._df {return _g .New ("\u0073\u0075\u006d\u0020\u006f\u0066 \u0072\u0075\u006e\u002d\u006c\u0065\u006e\u0067\u0074\u0068\u0073\u0020\u0064\u006f\u0065\u0073\u0020\u006e\u006f\u0074 \u0065\u0071\u0075\u0061\u006c\u0020\u0073\u0063\u0061\u006e\u0020\u006c\u0069\u006ee\u0020w\u0069\u0064\u0074\u0068");
};_afd ._cc =(_cec +7)/8;_afd ._gef ++;return nil ;};func NewDecoder (data []byte ,options DecodeOptions )(*Decoder ,error ){_eaf :=&Decoder {_fcae :_gb .NewReader (data ),_df :options .Columns ,_egd :options .Rows ,_gad :options .DamagedRowsBeforeError ,_ddd :make ([]byte ,(options .Columns +7)/8),_ba :make ([]int ,options .Columns +2),_agg :make ([]int ,options .Columns +2),_adg :options .EncodedByteAligned ,_bcc :options .BlackIsOne ,_fcc :options .EndOfLine ,_ed :options .EndOfBlock };
switch {case options .K ==0:_eaf ._dgg =_dg ;if len (data )< 20{return nil ,_g .New ("\u0074o\u006f\u0020\u0073\u0068o\u0072\u0074\u0020\u0063\u0063i\u0074t\u0066a\u0078\u0020\u0073\u0074\u0072\u0065\u0061m");};_beb :=data [:20];if _beb [0]!=0||(_beb [1]>>4!=1&&_beb [1]!=1){_eaf ._dgg =_efd ;
_daf :=(uint16 (_beb [0])<<8+uint16 (_beb [1]&0xff))>>4;for _adgb :=12;_adgb < 160;_adgb ++{_daf =(_daf <<1)+uint16 ((_beb [_adgb /8]>>uint16 (7-(_adgb %8)))&0x01);if _daf &0xfff==1{_eaf ._dgg =_dg ;break ;};};};case options .K < 0:_eaf ._dgg =_dcf ;case options .K > 0:_eaf ._dgg =_dg ;
_eaf ._cdg =true ;};switch _eaf ._dgg {case _efd ,_dg ,_dcf :default:return nil ,_g .New ("\u0075\u006ek\u006e\u006f\u0077\u006e\u0020\u0063\u0063\u0069\u0074\u0074\u0066\u0061\u0078\u002e\u0044\u0065\u0063\u006f\u0064\u0065\u0072\u0020ty\u0070\u0065");
};return _eaf ,nil ;};var _abd =[...][]uint16 {{0x2,0x3},{0x2,0x3},{0x2,0x3},{0x3},{0x4,0x5},{0x4,0x5,0x7},{0x4,0x7},{0x18},{0x17,0x18,0x37,0x8,0xf},{0x17,0x18,0x28,0x37,0x67,0x68,0x6c,0x8,0xc,0xd},{0x12,0x13,0x14,0x15,0x16,0x17,0x1c,0x1d,0x1e,0x1f,0x24,0x27,0x28,0x2b,0x2c,0x33,0x34,0x35,0x37,0x38,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0xc8,0xc9,0xca,0xcb,0xcc,0xcd,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xda,0xdb},{0x4a,0x4b,0x4c,0x4d,0x52,0x53,0x54,0x55,0x5a,0x5b,0x64,0x65,0x6c,0x6d,0x72,0x73,0x74,0x75,0x76,0x77}};
func (_bf tiffType )String ()string {switch _bf {case _efd :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u004d\u006f\u0064i\u0066\u0069\u0065\u0064\u0048\u0075\u0066\u0066\u006d\u0061n\u0052\u006c\u0065";case _dg :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u0054\u0034";
case _dcf :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u0054\u0036";default:return "\u0075n\u0064\u0065\u0066\u0069\u006e\u0065d";};};func _cdbd (_bda []byte ,_gdfa int ,_gcfa code )([]byte ,int ){_dba :=0;for _dba < _gcfa .BitsWritten {_ecd :=_gdfa /8;
_bba :=_gdfa %8;if _ecd >=len (_bda ){_bda =append (_bda ,0);};_ccc :=8-_bba ;_cbd :=_gcfa .BitsWritten -_dba ;if _ccc > _cbd {_ccc =_cbd ;};if _dba < 8{_bda [_ecd ]=_bda [_ecd ]|byte (_gcfa .Code >>uint (8+_bba -_dba ))&_cb [8-_ccc -_bba ];}else {_bda [_ecd ]=_bda [_ecd ]|(byte (_gcfa .Code <<uint (_dba -8))&_cb [8-_ccc ])>>uint (_bba );
};_gdfa +=_ccc ;_dba +=_ccc ;};return _bda ,_gdfa ;};func (_cfe *Encoder )encodeG31D (_ffeb [][]byte )[]byte {var _bdbe []byte ;_age :=0;for _agf :=range _ffeb {if _cfe .Rows > 0&&!_cfe .EndOfBlock &&_agf ==_cfe .Rows {break ;};_cag ,_ggc :=_cea (_ffeb [_agf ],_age ,_faa );
_bdbe =_cfe .appendEncodedRow (_bdbe ,_cag ,_age );if _cfe .EncodedByteAlign {_ggc =0;};_age =_ggc ;};if _cfe .EndOfBlock {_cff ,_ :=_agc (_age );_bdbe =_cfe .appendEncodedRow (_bdbe ,_cff ,_age );};return _bdbe ;};func _eec (_cbf int )([]byte ,int ){var _gga []byte ;
for _abb :=0;_abb < 6;_abb ++{_gga ,_cbf =_cdbd (_gga ,_cbf ,_abde );};return _gga ,_cbf %8;};func (_beg *Decoder )decodeRowType2 ()error {if _beg ._adg {_beg ._fcae .Align ();};if _gab :=_beg .decode1D ();_gab !=nil {return _gab ;};return nil ;};var (_ce *treeNode ;
_ge *treeNode ;_gd *tree ;_f *tree ;_dd *tree ;_ff *tree ;_ad =-2000;_ceg =-1000;_b =-3000;_e =-4000;);var _aac =[...][]uint16 {{0x7,0x8,0xb,0xc,0xe,0xf},{0x12,0x13,0x14,0x1b,0x7,0x8},{0x17,0x18,0x2a,0x2b,0x3,0x34,0x35,0x7,0x8},{0x13,0x17,0x18,0x24,0x27,0x28,0x2b,0x3,0x37,0x4,0x8,0xc},{0x12,0x13,0x14,0x15,0x16,0x17,0x1a,0x1b,0x2,0x24,0x25,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x3,0x32,0x33,0x34,0x35,0x36,0x37,0x4,0x4a,0x4b,0x5,0x52,0x53,0x54,0x55,0x58,0x59,0x5a,0x5b,0x64,0x65,0x67,0x68,0xa,0xb},{0x98,0x99,0x9a,0x9b,0xcc,0xcd,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8,0xd9,0xda,0xdb},{},{0x8,0xc,0xd},{0x12,0x13,0x14,0x15,0x16,0x17,0x1c,0x1d,0x1e,0x1f}};
func (_gfc *Decoder )tryFetchRTC2D ()(_bdbg error ){_gfc ._fcae .Mark ();var _baf bool ;for _cfd :=0;_cfd < 5;_cfd ++{_baf ,_bdbg =_gfc .tryFetchEOL1 ();if _bdbg !=nil {if _g .Is (_bdbg ,_a .EOF ){if _cfd ==0{break ;};return _fcac ;};};if _baf {continue ;
};if _cfd > 0{return _fcac ;};break ;};if _baf {return _a .EOF ;};_gfc ._fcae .Reset ();return _bdbg ;};const (_ tiffType =iota ;_efd ;_dg ;_dcf ;);var _ac =[...][]uint16 {{2,3,4,5,6,7},{128,8,9,64,10,11},{192,1664,16,17,13,14,15,1,12},{26,21,28,27,18,24,25,22,256,23,20,19},{33,34,35,36,37,38,31,32,29,53,54,39,40,41,42,43,44,30,61,62,63,0,320,384,45,59,60,46,49,50,51,52,55,56,57,58,448,512,640,576,47,48},{1472,1536,1600,1728,704,768,832,896,960,1024,1088,1152,1216,1280,1344,1408},{},{1792,1856,1920},{1984,2048,2112,2176,2240,2304,2368,2432,2496,2560}};
var (_dea map[int ]code ;_add map[int ]code ;_gg map[int ]code ;_egf map[int ]code ;_ca map[int ]code ;_cb map[int ]byte ;_faa =code {Code :1<<4,BitsWritten :12};_abde =code {Code :3<<3,BitsWritten :13};_fca =code {Code :2<<3,BitsWritten :13};_bb =code {Code :1<<12,BitsWritten :4};
_bdd =code {Code :1<<13,BitsWritten :3};_bddb =code {Code :1<<15,BitsWritten :1};_aaf =code {Code :3<<13,BitsWritten :3};_ded =code {Code :3<<10,BitsWritten :6};_adc =code {Code :3<<9,BitsWritten :7};_bg =code {Code :2<<13,BitsWritten :3};_ag =code {Code :2<<10,BitsWritten :6};
_faf =code {Code :2<<9,BitsWritten :7};);type DecodeOptions struct{Columns int ;Rows int ;K int ;EncodedByteAligned bool ;BlackIsOne bool ;EndOfBlock bool ;EndOfLine bool ;DamagedRowsBeforeError int ;};func (_cdbg *treeNode )set (_abab bool ,_gbea *treeNode ){if !_abab {_cdbg ._gfd =_gbea ;
}else {_cdbg ._fbdc =_gbea ;};};func _fcga (_cbfe []byte ,_dad int ,_egdg int ,_abca bool )([]byte ,int ){var (_gfa code ;_dgcf bool ;);for !_dgcf {_gfa ,_egdg ,_dgcf =_bdc (_egdg ,_abca );_cbfe ,_dad =_cdbd (_cbfe ,_dad ,_gfa );};return _cbfe ,_dad ;};
type Decoder struct{_df int ;_egd int ;_gef int ;_ddd []byte ;_gad int ;_cdg bool ;_agb bool ;_ffe bool ;_bcc bool ;_fcc bool ;_ed bool ;_adg bool ;_cc int ;_fb int ;_ba []int ;_agg []int ;_egb int ;_edd int ;_bbg int ;_eag int ;_fcae *_gb .Reader ;_dgg tiffType ;
_dec error ;};func _cea (_ade []byte ,_fde int ,_aba code )([]byte ,int ){_cee :=true ;var _cbc []byte ;_cbc ,_fde =_cdbd (nil ,_fde ,_aba );_cde :=0;var _affa int ;for _cde < len (_ade ){_affa ,_cde =_gfad (_ade ,_cee ,_cde );_cbc ,_fde =_fcga (_cbc ,_fde ,_affa ,_cee );
_cee =!_cee ;};return _cbc ,_fde %8;};func (_eeg *Decoder )fetch ()error {if _eeg ._cc ==-1{return nil ;};if _eeg ._fb < _eeg ._cc {return nil ;};_eeg ._cc =0;_gca :=_eeg .decodeRow ();if _gca !=nil {if !_g .Is (_gca ,_a .EOF ){return _gca ;};if _eeg ._cc !=0{return _gca ;
};_eeg ._cc =-1;};_eeg ._fb =0;return nil ;};func (_ddbb *Encoder )appendEncodedRow (_fbd ,_ffga []byte ,_dbe int )[]byte {if len (_fbd )> 0&&_dbe !=0&&!_ddbb .EncodedByteAlign {_fbd [len (_fbd )-1]=_fbd [len (_fbd )-1]|_ffga [0];_fbd =append (_fbd ,_ffga [1:]...);
}else {_fbd =append (_fbd ,_ffga ...);};return _fbd ;};func _agc (_dca int )([]byte ,int ){var _fdf []byte ;for _afde :=0;_afde < 6;_afde ++{_fdf ,_dca =_cdbd (_fdf ,_dca ,_faa );};return _fdf ,_dca %8;};func (_dge *Decoder )Read (in []byte )(int ,error ){if _dge ._dec !=nil {return 0,_dge ._dec ;
};_bgb :=len (in );var (_cdc int ;_fg int ;);for _bgb !=0{if _dge ._fb >=_dge ._cc {if _edb :=_dge .fetch ();_edb !=nil {_dge ._dec =_edb ;return 0,_edb ;};};if _dge ._cc ==-1{return _cdc ,_a .EOF ;};switch {case _bgb <=_dge ._cc -_dge ._fb :_gcb :=_dge ._ddd [_dge ._fb :_dge ._fb +_bgb ];
for _ ,_dddc :=range _gcb {if !_dge ._bcc {_dddc =^_dddc ;};in [_fg ]=_dddc ;_fg ++;};_cdc +=len (_gcb );_dge ._fb +=len (_gcb );return _cdc ,nil ;default:_dafg :=_dge ._ddd [_dge ._fb :];for _ ,_cce :=range _dafg {if !_dge ._bcc {_cce =^_cce ;};in [_fg ]=_cce ;
_fg ++;};_cdc +=len (_dafg );_dge ._fb +=len (_dafg );_bgb -=len (_dafg );};};return _cdc ,nil ;};func _bdc (_cfb int ,_bcd bool )(code ,int ,bool ){if _cfb < 64{if _bcd {return _add [_cfb ],0,true ;};return _dea [_cfb ],0,true ;};_ceb :=_cfb /64;if _ceb > 40{return _ca [2560],_cfb -2560,false ;
};if _ceb > 27{return _ca [_ceb *64],_cfb -_ceb *64,false ;};if _bcd {return _egf [_ceb *64],_cfb -_ceb *64,false ;};return _gg [_ceb *64],_cfb -_ceb *64,false ;};func (_bcg *Decoder )decodeRowType4 ()error {if !_bcg ._cdg {return _bcg .decoderRowType41D ();
};if _bcg ._adg {_bcg ._fcae .Align ();};_bcg ._fcae .Mark ();_cdf ,_efdd :=_bcg .tryFetchEOL ();if _efdd !=nil {return _efdd ;};if !_cdf &&_bcg ._fcc {_bcg ._bbg ++;if _bcg ._bbg > _bcg ._gad {return _eef ;};_bcg ._fcae .Reset ();};if !_cdf {_bcg ._fcae .Reset ();
};_dcc ,_efdd :=_bcg ._fcae .ReadBool ();if _efdd !=nil {return _efdd ;};if _dcc {if _cdf &&_bcg ._ed {if _efdd =_bcg .tryFetchRTC2D ();_efdd !=nil {return _efdd ;};};_efdd =_bcg .decode1D ();}else {_efdd =_bcg .decode2D ();};if _efdd !=nil {return _efdd ;
};return nil ;};func (_dfg *Decoder )getNextChangingElement (_aada int ,_ae bool )int {_bdb :=0;if !_ae {_bdb =1;};_eba :=int (uint32 (_dfg ._eag )&0xFFFFFFFE)+_bdb ;if _eba > 2{_eba -=2;};if _aada ==0{return _eba ;};for _ffgb :=_eba ;_ffgb < _dfg ._egb ;
_ffgb +=2{if _aada < _dfg ._ba [_ffgb ]{_dfg ._eag =_ffgb ;return _ffgb ;};};return -1;};func (_fga *Decoder )decode1D ()error {var (_ffg int ;_aff error ;);_gbb :=true ;_fga ._edd =0;for {var _fbe int ;if _gbb {_fbe ,_aff =_fga .decodeRun (_f );}else {_fbe ,_aff =_fga .decodeRun (_gd );
};if _aff !=nil {return _aff ;};_ffg +=_fbe ;_fga ._agg [_fga ._edd ]=_ffg ;_fga ._edd ++;_gbb =!_gbb ;if _ffg >=_fga ._df {break ;};};return nil ;};type tiffType int ;type tree struct{_fgca *treeNode };func (_daa *Decoder )decode2D ()error {_daa ._egb =_daa ._edd ;
_daa ._agg ,_daa ._ba =_daa ._ba ,_daa ._agg ;_adf :=true ;var (_eea bool ;_geg int ;_ged error ;);_daa ._edd =0;_dae :for _geg < _daa ._df {_cca :=_ff ._fgca ;for {_eea ,_ged =_daa ._fcae .ReadBool ();if _ged !=nil {return _ged ;};_cca =_cca .walk (_eea );
if _cca ==nil {continue _dae ;};if !_cca ._egbd {continue ;};switch _cca ._daab {case _e :var _dece int ;if _adf {_dece ,_ged =_daa .decodeRun (_f );}else {_dece ,_ged =_daa .decodeRun (_gd );};if _ged !=nil {return _ged ;};_geg +=_dece ;_daa ._agg [_daa ._edd ]=_geg ;
_daa ._edd ++;if _adf {_dece ,_ged =_daa .decodeRun (_gd );}else {_dece ,_ged =_daa .decodeRun (_f );};if _ged !=nil {return _ged ;};_geg +=_dece ;_daa ._agg [_daa ._edd ]=_geg ;_daa ._edd ++;case _b :_eeb :=_daa .getNextChangingElement (_geg ,_adf )+1;
if _eeb >=_daa ._egb {_geg =_daa ._df ;}else {_geg =_daa ._ba [_eeb ];};default:_acb :=_daa .getNextChangingElement (_geg ,_adf );if _acb >=_daa ._egb ||_acb ==-1{_geg =_daa ._df +_cca ._daab ;}else {_geg =_daa ._ba [_acb ]+_cca ._daab ;};_daa ._agg [_daa ._edd ]=_geg ;
_daa ._edd ++;_adf =!_adf ;};continue _dae ;};};return nil ;};var _ea =[...][]uint16 {{3,2},{1,4},{6,5},{7},{9,8},{10,11,12},{13,14},{15},{16,17,0,18,64},{24,25,23,22,19,20,21,1792,1856,1920},{1984,2048,2112,2176,2240,2304,2368,2432,2496,2560,52,55,56,59,60,320,384,448,53,54,50,51,44,45,46,47,57,58,61,256,48,49,62,63,30,31,32,33,40,41,128,192,26,27,28,29,34,35,36,37,38,39,42,43},{640,704,768,832,1280,1344,1408,1472,1536,1600,1664,1728,512,576,896,960,1024,1088,1152,1216}};
func (_gefe *treeNode )walk (_dbf bool )*treeNode {if _dbf {return _gefe ._fbdc ;};return _gefe ._gfd ;};func (_eae *tree )fill (_acef ,_afe ,_ccbc int )error {_agbb :=_eae ._fgca ;for _fce :=0;_fce < _acef ;_fce ++{_dde :=_acef -1-_fce ;_gdeg :=((_afe >>uint (_dde ))&1)!=0;
_ffb :=_agbb .walk (_gdeg );if _ffb !=nil {if _ffb ._egbd {return _g .New ("\u006e\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u006c\u0065\u0061\u0066\u002c\u0020\u006eo\u0020o\u0074\u0068\u0065\u0072\u0020\u0066\u006f\u006c\u006c\u006f\u0077\u0069\u006e\u0067");
};_agbb =_ffb ;continue ;};_ffb =&treeNode {};if _fce ==_acef -1{_ffb ._daab =_ccbc ;_ffb ._egbd =true ;};if _afe ==0{_ffb ._fdg =true ;};_agbb .set (_gdeg ,_ffb );_agbb =_ffb ;};return nil ;};func (_cdda *Encoder )encodeG4 (_dbb [][]byte )[]byte {_abcc :=make ([][]byte ,len (_dbb ));
copy (_abcc ,_dbb );_abcc =_cge (_abcc );var _cef []byte ;var _bddd int ;for _gede :=1;_gede < len (_abcc );_gede ++{if _cdda .Rows > 0&&!_cdda .EndOfBlock &&_gede ==(_cdda .Rows +1){break ;};var _dcg []byte ;var _dgde ,_gde ,_gdgf int ;_adb :=_bddd ;_ggcb :=-1;
for _ggcb < len (_abcc [_gede ]){_dgde =_bfe (_abcc [_gede ],_ggcb );_gde =_bab (_abcc [_gede ],_abcc [_gede -1],_ggcb );_gdgf =_bfe (_abcc [_gede -1],_gde );if _gdgf < _dgde {_dcg ,_adb =_cdbd (_dcg ,_adb ,_bb );_ggcb =_gdgf ;}else {if _c .Abs (float64 (_gde -_dgde ))> 3{_dcg ,_adb ,_ggcb =_cbdd (_abcc [_gede ],_dcg ,_adb ,_ggcb ,_dgde );
}else {_dcg ,_adb =_gdb (_dcg ,_adb ,_dgde ,_gde );_ggcb =_dgde ;};};};_cef =_cdda .appendEncodedRow (_cef ,_dcg ,_bddd );if _cdda .EncodedByteAlign {_adb =0;};_bddd =_adb %8;};if _cdda .EndOfBlock {_afc ,_ :=_dfc (_bddd );_cef =_cdda .appendEncodedRow (_cef ,_afc ,_bddd );
};return _cef ;};func (_gdg *Decoder )looseFetchEOL ()(bool ,error ){_gcf ,_cdb :=_gdg ._fcae .ReadBits (12);if _cdb !=nil {return false ,_cdb ;};switch _gcf {case 0x1:return true ,nil ;case 0x0:for {_bed ,_cab :=_gdg ._fcae .ReadBool ();if _cab !=nil {return false ,_cab ;
};if _bed {return true ,nil ;};};default:return false ,nil ;};};func _bfe (_cdeg []byte ,_gfcd int )int {if _gfcd >=len (_cdeg ){return _gfcd ;};if _gfcd < -1{_gfcd =-1;};var _agbc byte ;if _gfcd > -1{_agbc =_cdeg [_gfcd ];}else {_agbc =_cdbb ;};_eab :=_gfcd +1;
for _eab < len (_cdeg ){if _cdeg [_eab ]!=_agbc {break ;};_eab ++;};return _eab ;};func (_ddg *tree )fillWithNode (_gbd ,_gdfab int ,_fgd *treeNode )error {_cdge :=_ddg ._fgca ;for _afb :=0;_afb < _gbd ;_afb ++{_afeg :=uint (_gbd -1-_afb );_ccd :=((_gdfab >>_afeg )&1)!=0;
_ggd :=_cdge .walk (_ccd );if _ggd !=nil {if _ggd ._egbd {return _g .New ("\u006e\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u006c\u0065\u0061\u0066\u002c\u0020\u006eo\u0020o\u0074\u0068\u0065\u0072\u0020\u0066\u006f\u006c\u006c\u006f\u0077\u0069\u006e\u0067");
};_cdge =_ggd ;continue ;};if _afb ==_gbd -1{_ggd =_fgd ;}else {_ggd =&treeNode {};};if _gdfab ==0{_ggd ._fdg =true ;};_cdge .set (_ccd ,_ggd );_cdge =_ggd ;};return nil ;};func _efc (_cgd ,_caga int )code {var _dab code ;switch _caga -_cgd {case -1:_dab =_aaf ;
case -2:_dab =_ded ;case -3:_dab =_adc ;case 0:_dab =_bddb ;case 1:_dab =_bg ;case 2:_dab =_ag ;case 3:_dab =_faf ;};return _dab ;};func (_bge *Encoder )encodeG32D (_ebd [][]byte )[]byte {var _gge []byte ;var _dddd int ;for _bga :=0;_bga < len (_ebd );
_bga +=_bge .K {if _bge .Rows > 0&&!_bge .EndOfBlock &&_bga ==_bge .Rows {break ;};_fgc ,_caba :=_cea (_ebd [_bga ],_dddd ,_abde );_gge =_bge .appendEncodedRow (_gge ,_fgc ,_dddd );if _bge .EncodedByteAlign {_caba =0;};_dddd =_caba ;for _acc :=_bga +1;
_acc < (_bga +_bge .K )&&_acc < len (_ebd );_acc ++{if _bge .Rows > 0&&!_bge .EndOfBlock &&_acc ==_bge .Rows {break ;};_dgc ,_dafgf :=_cdbd (nil ,_dddd ,_fca );var _dfa ,_ccec ,_ecf int ;_gcc :=-1;for _gcc < len (_ebd [_acc ]){_dfa =_bfe (_ebd [_acc ],_gcc );
_ccec =_bab (_ebd [_acc ],_ebd [_acc -1],_gcc );_ecf =_bfe (_ebd [_acc -1],_ccec );if _ecf < _dfa {_dgc ,_dafgf =_fbge (_dgc ,_dafgf );_gcc =_ecf ;}else {if _c .Abs (float64 (_ccec -_dfa ))> 3{_dgc ,_dafgf ,_gcc =_cbdd (_ebd [_acc ],_dgc ,_dafgf ,_gcc ,_dfa );
}else {_dgc ,_dafgf =_gdb (_dgc ,_dafgf ,_dfa ,_ccec );_gcc =_dfa ;};};};_gge =_bge .appendEncodedRow (_gge ,_dgc ,_dddd );if _bge .EncodedByteAlign {_dafgf =0;};_dddd =_dafgf %8;};};if _bge .EndOfBlock {_efb ,_ :=_eec (_dddd );_gge =_bge .appendEncodedRow (_gge ,_efb ,_dddd );
};return _gge ;};func (_fcg *Decoder )tryFetchEOL1 ()(bool ,error ){_ddb ,_gac :=_fcg ._fcae .ReadBits (13);if _gac !=nil {return false ,_gac ;};return _ddb ==0x3,nil ;};func _fbge (_ddbg []byte ,_egfb int )([]byte ,int ){return _cdbd (_ddbg ,_egfb ,_bb )};
func (_ebae *Decoder )decodeRun (_aed *tree )(int ,error ){var _cdd int ;_bfc :=_aed ._fgca ;for {_fge ,_feee :=_ebae ._fcae .ReadBool ();if _feee !=nil {return 0,_feee ;};_bfc =_bfc .walk (_fge );if _bfc ==nil {return 0,_g .New ("\u0075\u006e\u006bno\u0077\u006e\u0020\u0063\u006f\u0064\u0065\u0020\u0069n\u0020H\u0075f\u0066m\u0061\u006e\u0020\u0052\u004c\u0045\u0020\u0073\u0074\u0072\u0065\u0061\u006d");
};if _bfc ._egbd {_cdd +=_bfc ._daab ;switch {case _bfc ._daab >=64:_bfc =_aed ._fgca ;case _bfc ._daab >=0:return _cdd ,nil ;default:return _ebae ._df ,nil ;};};};};func (_egg *Decoder )decodeRowType6 ()error {if _egg ._adg {_egg ._fcae .Align ();};if _egg ._ed {_egg ._fcae .Mark ();
_dee ,_gdf :=_egg .tryFetchEOL ();if _gdf !=nil {return _gdf ;};if _dee {_dee ,_gdf =_egg .tryFetchEOL ();if _gdf !=nil {return _gdf ;};if _dee {return _a .EOF ;};};_egg ._fcae .Reset ();};return _egg .decode2D ();};type code struct{Code uint16 ;BitsWritten int ;
};func _gfad (_egdgg []byte ,_aab bool ,_abga int )(int ,int ){_dgeg :=0;for _abga < len (_egdgg ){if _aab {if _egdgg [_abga ]!=_cdbb {break ;};}else {if _egdgg [_abga ]!=_ace {break ;};};_dgeg ++;_abga ++;};return _dgeg ,_abga ;};func _gdb (_ddf []byte ,_cbaa ,_adgg ,_fbef int )([]byte ,int ){_eegb :=_efc (_adgg ,_fbef );
_ddf ,_cbaa =_cdbd (_ddf ,_cbaa ,_eegb );return _ddf ,_cbaa ;};