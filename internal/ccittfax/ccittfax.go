//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package ccittfax ;import (_f "errors";_fec "github.com/unidoc/unipdf/v4/internal/bitwise";_fe "io";_c "math";);func _geec (_acge int ,_cfee bool )(code ,int ,bool ){if _acge < 64{if _cfee {return _cf [_acge ],0,true ;};return _ec [_acge ],0,true ;};_dbf :=_acge /64;
if _dbf > 40{return _db [2560],_acge -2560,false ;};if _dbf > 27{return _db [_dbf *64],_acge -_dbf *64,false ;};if _cfee {return _agg [_dbf *64],_acge -_dbf *64,false ;};return _ff [_dbf *64],_acge -_dbf *64,false ;};func init (){_d =&treeNode {_gaff :true ,_abb :_efc };
_e =&treeNode {_abb :_bd ,_eggc :_d };_e ._dbge =_e ;_dg =&tree {_gdbe :&treeNode {}};if _gd :=_dg .fillWithNode (12,0,_e );_gd !=nil {panic (_gd .Error ());};if _fef :=_dg .fillWithNode (12,1,_d );_fef !=nil {panic (_fef .Error ());};_ef =&tree {_gdbe :&treeNode {}};
for _bf :=0;_bf < len (_efe );_bf ++{for _ge :=0;_ge < len (_efe [_bf ]);_ge ++{if _dgf :=_ef .fill (_bf +2,int (_efe [_bf ][_ge ]),int (_ba [_bf ][_ge ]));_dgf !=nil {panic (_dgf .Error ());};};};if _fa :=_ef .fillWithNode (12,0,_e );_fa !=nil {panic (_fa .Error ());
};if _gg :=_ef .fillWithNode (12,1,_d );_gg !=nil {panic (_gg .Error ());};_b =&tree {_gdbe :&treeNode {}};for _fg :=0;_fg < len (_aef );_fg ++{for _cb :=0;_cb < len (_aef [_fg ]);_cb ++{if _dd :=_b .fill (_fg +4,int (_aef [_fg ][_cb ]),int (_bdge [_fg ][_cb ]));
_dd !=nil {panic (_dd .Error ());};};};if _ae :=_b .fillWithNode (12,0,_e );_ae !=nil {panic (_ae .Error ());};if _fb :=_b .fillWithNode (12,1,_d );_fb !=nil {panic (_fb .Error ());};_de =&tree {_gdbe :&treeNode {}};if _ad :=_de .fill (4,1,_eb );_ad !=nil {panic (_ad .Error ());
};if _bc :=_de .fill (3,1,_g );_bc !=nil {panic (_bc .Error ());};if _fbd :=_de .fill (1,1,0);_fbd !=nil {panic (_fbd .Error ());};if _ga :=_de .fill (3,3,1);_ga !=nil {panic (_ga .Error ());};if _bdg :=_de .fill (6,3,2);_bdg !=nil {panic (_bdg .Error ());
};if _bb :=_de .fill (7,3,3);_bb !=nil {panic (_bb .Error ());};if _fd :=_de .fill (3,2,-1);_fd !=nil {panic (_fd .Error ());};if _ada :=_de .fill (6,2,-2);_ada !=nil {panic (_ada .Error ());};if _gc :=_de .fill (7,2,-3);_gc !=nil {panic (_gc .Error ());
};};func (_fbb *Decoder )tryFetchEOL1 ()(bool ,error ){_gee ,_dfg :=_fbb ._ca .ReadBits (13);if _dfg !=nil {return false ,_dfg ;};return _gee ==0x3,nil ;};func (_dede *tree )fillWithNode (_faeb ,_eded int ,_fgf *treeNode )error {_cddc :=_dede ._gdbe ;for _dafb :=0;
_dafb < _faeb ;_dafb ++{_fed :=uint (_faeb -1-_dafb );_dddd :=((_eded >>_fed )&1)!=0;_gba :=_cddc .walk (_dddd );if _gba !=nil {if _gba ._gaff {return _f .New ("\u006e\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u006c\u0065\u0061\u0066\u002c\u0020\u006eo\u0020o\u0074\u0068\u0065\u0072\u0020\u0066\u006f\u006c\u006c\u006f\u0077\u0069\u006e\u0067");
};_cddc =_gba ;continue ;};if _dafb ==_faeb -1{_gba =_fgf ;}else {_gba =&treeNode {};};if _eded ==0{_gba ._eee =true ;};_cddc .set (_dddd ,_gba );_cddc =_gba ;};return nil ;};func _fdbe (_beg []byte ,_fadf bool ,_gag int )(int ,int ){_fdgd :=0;for _gag < len (_beg ){if _fadf {if _beg [_gag ]!=_fbe {break ;
};}else {if _beg [_gag ]!=_fdc {break ;};};_fdgd ++;_gag ++;};return _fdgd ,_gag ;};func (_cea *Decoder )decodeRow ()(_ffa error ){if !_cea ._bfd &&_cea ._af > 0&&_cea ._af ==_cea ._bgb {return _fe .EOF ;};switch _cea ._gfc {case _fc :_ffa =_cea .decodeRowType2 ();
case _dab :_ffa =_cea .decodeRowType4 ();case _bdgd :_ffa =_cea .decodeRowType6 ();};if _ffa !=nil {return _ffa ;};_gb :=0;_fgb :=true ;_cea ._dea =0;for _ceb :=0;_ceb < _cea ._ede ;_ceb ++{_fca :=_cea ._gdb ;if _ceb !=_cea ._ede {_fca =_cea ._gcd [_ceb ];
};if _fca > _cea ._gdb {_fca =_cea ._gdb ;};_agf :=_gb /8;for _gb %8!=0&&_fca -_gb > 0{var _fag byte ;if !_fgb {_fag =1<<uint (7-(_gb %8));};_cea ._dgd [_agf ]|=_fag ;_gb ++;};if _gb %8==0{_agf =_gb /8;var _gbb byte ;if !_fgb {_gbb =0xff;};for _fca -_gb > 7{_cea ._dgd [_agf ]=_gbb ;
_gb +=8;_agf ++;};};for _fca -_gb > 0{if _gb %8==0{_cea ._dgd [_agf ]=0;};var _ffb byte ;if !_fgb {_ffb =1<<uint (7-(_gb %8));};_cea ._dgd [_agf ]|=_ffb ;_gb ++;};_fgb =!_fgb ;};if _gb !=_cea ._gdb {return _f .New ("\u0073\u0075\u006d\u0020\u006f\u0066 \u0072\u0075\u006e\u002d\u006c\u0065\u006e\u0067\u0074\u0068\u0073\u0020\u0064\u006f\u0065\u0073\u0020\u006e\u006f\u0074 \u0065\u0071\u0075\u0061\u006c\u0020\u0073\u0063\u0061\u006e\u0020\u006c\u0069\u006ee\u0020w\u0069\u0064\u0074\u0068");
};_cea ._agc =(_gb +7)/8;_cea ._bgb ++;return nil ;};func _fae (_abgf []byte ,_dccd int )int {if _dccd >=len (_abgf ){return _dccd ;};if _dccd < -1{_dccd =-1;};var _ffd byte ;if _dccd > -1{_ffd =_abgf [_dccd ];}else {_ffd =_fbe ;};_cbc :=_dccd +1;for _cbc < len (_abgf ){if _abgf [_cbc ]!=_ffd {break ;
};_cbc ++;};return _cbc ;};func (_dgfg *Encoder )encodeG32D (_bbf [][]byte )[]byte {var _cab []byte ;var _ffae int ;for _fdg :=0;_fdg < len (_bbf );_fdg +=_dgfg .K {if _dgfg .Rows > 0&&!_dgfg .EndOfBlock &&_fdg ==_dgfg .Rows {break ;};_adb ,_aed :=_dead (_bbf [_fdg ],_ffae ,_cd );
_cab =_dgfg .appendEncodedRow (_cab ,_adb ,_ffae );if _dgfg .EncodedByteAlign {_aed =0;};_ffae =_aed ;for _dedd :=_fdg +1;_dedd < (_fdg +_dgfg .K )&&_dedd < len (_bbf );_dedd ++{if _dgfg .Rows > 0&&!_dgfg .EndOfBlock &&_dedd ==_dgfg .Rows {break ;};_aaf ,_edc :=_dcce (nil ,_ffae ,_bba );
var _gadd ,_daf ,_dbg int ;_gda :=-1;for _gda < len (_bbf [_dedd ]){_gadd =_fae (_bbf [_dedd ],_gda );_daf =_dfgd (_bbf [_dedd ],_bbf [_dedd -1],_gda );_dbg =_fae (_bbf [_dedd -1],_daf );if _dbg < _gadd {_aaf ,_edc =_cgfd (_aaf ,_edc );_gda =_dbg ;}else {if _c .Abs (float64 (_daf -_gadd ))> 3{_aaf ,_edc ,_gda =_cdcd (_bbf [_dedd ],_aaf ,_edc ,_gda ,_gadd );
}else {_aaf ,_edc =_afb (_aaf ,_edc ,_gadd ,_daf );_gda =_gadd ;};};};_cab =_dgfg .appendEncodedRow (_cab ,_aaf ,_ffae );if _dgfg .EncodedByteAlign {_edc =0;};_ffae =_edc %8;};};if _dgfg .EndOfBlock {_bcd ,_ :=_fbeg (_ffae );_cab =_dgfg .appendEncodedRow (_cab ,_bcd ,_ffae );
};return _cab ;};func init (){_ec =make (map[int ]code );_ec [0]=code {Code :13<<8|3<<6,BitsWritten :10};_ec [1]=code {Code :2<<(5+8),BitsWritten :3};_ec [2]=code {Code :3<<(6+8),BitsWritten :2};_ec [3]=code {Code :2<<(6+8),BitsWritten :2};_ec [4]=code {Code :3<<(5+8),BitsWritten :3};
_ec [5]=code {Code :3<<(4+8),BitsWritten :4};_ec [6]=code {Code :2<<(4+8),BitsWritten :4};_ec [7]=code {Code :3<<(3+8),BitsWritten :5};_ec [8]=code {Code :5<<(2+8),BitsWritten :6};_ec [9]=code {Code :4<<(2+8),BitsWritten :6};_ec [10]=code {Code :4<<(1+8),BitsWritten :7};
_ec [11]=code {Code :5<<(1+8),BitsWritten :7};_ec [12]=code {Code :7<<(1+8),BitsWritten :7};_ec [13]=code {Code :4<<8,BitsWritten :8};_ec [14]=code {Code :7<<8,BitsWritten :8};_ec [15]=code {Code :12<<8,BitsWritten :9};_ec [16]=code {Code :5<<8|3<<6,BitsWritten :10};
_ec [17]=code {Code :6<<8,BitsWritten :10};_ec [18]=code {Code :2<<8,BitsWritten :10};_ec [19]=code {Code :12<<8|7<<5,BitsWritten :11};_ec [20]=code {Code :13<<8,BitsWritten :11};_ec [21]=code {Code :13<<8|4<<5,BitsWritten :11};_ec [22]=code {Code :6<<8|7<<5,BitsWritten :11};
_ec [23]=code {Code :5<<8,BitsWritten :11};_ec [24]=code {Code :2<<8|7<<5,BitsWritten :11};_ec [25]=code {Code :3<<8,BitsWritten :11};_ec [26]=code {Code :12<<8|10<<4,BitsWritten :12};_ec [27]=code {Code :12<<8|11<<4,BitsWritten :12};_ec [28]=code {Code :12<<8|12<<4,BitsWritten :12};
_ec [29]=code {Code :12<<8|13<<4,BitsWritten :12};_ec [30]=code {Code :6<<8|8<<4,BitsWritten :12};_ec [31]=code {Code :6<<8|9<<4,BitsWritten :12};_ec [32]=code {Code :6<<8|10<<4,BitsWritten :12};_ec [33]=code {Code :6<<8|11<<4,BitsWritten :12};_ec [34]=code {Code :13<<8|2<<4,BitsWritten :12};
_ec [35]=code {Code :13<<8|3<<4,BitsWritten :12};_ec [36]=code {Code :13<<8|4<<4,BitsWritten :12};_ec [37]=code {Code :13<<8|5<<4,BitsWritten :12};_ec [38]=code {Code :13<<8|6<<4,BitsWritten :12};_ec [39]=code {Code :13<<8|7<<4,BitsWritten :12};_ec [40]=code {Code :6<<8|12<<4,BitsWritten :12};
_ec [41]=code {Code :6<<8|13<<4,BitsWritten :12};_ec [42]=code {Code :13<<8|10<<4,BitsWritten :12};_ec [43]=code {Code :13<<8|11<<4,BitsWritten :12};_ec [44]=code {Code :5<<8|4<<4,BitsWritten :12};_ec [45]=code {Code :5<<8|5<<4,BitsWritten :12};_ec [46]=code {Code :5<<8|6<<4,BitsWritten :12};
_ec [47]=code {Code :5<<8|7<<4,BitsWritten :12};_ec [48]=code {Code :6<<8|4<<4,BitsWritten :12};_ec [49]=code {Code :6<<8|5<<4,BitsWritten :12};_ec [50]=code {Code :5<<8|2<<4,BitsWritten :12};_ec [51]=code {Code :5<<8|3<<4,BitsWritten :12};_ec [52]=code {Code :2<<8|4<<4,BitsWritten :12};
_ec [53]=code {Code :3<<8|7<<4,BitsWritten :12};_ec [54]=code {Code :3<<8|8<<4,BitsWritten :12};_ec [55]=code {Code :2<<8|7<<4,BitsWritten :12};_ec [56]=code {Code :2<<8|8<<4,BitsWritten :12};_ec [57]=code {Code :5<<8|8<<4,BitsWritten :12};_ec [58]=code {Code :5<<8|9<<4,BitsWritten :12};
_ec [59]=code {Code :2<<8|11<<4,BitsWritten :12};_ec [60]=code {Code :2<<8|12<<4,BitsWritten :12};_ec [61]=code {Code :5<<8|10<<4,BitsWritten :12};_ec [62]=code {Code :6<<8|6<<4,BitsWritten :12};_ec [63]=code {Code :6<<8|7<<4,BitsWritten :12};_cf =make (map[int ]code );
_cf [0]=code {Code :53<<8,BitsWritten :8};_cf [1]=code {Code :7<<(2+8),BitsWritten :6};_cf [2]=code {Code :7<<(4+8),BitsWritten :4};_cf [3]=code {Code :8<<(4+8),BitsWritten :4};_cf [4]=code {Code :11<<(4+8),BitsWritten :4};_cf [5]=code {Code :12<<(4+8),BitsWritten :4};
_cf [6]=code {Code :14<<(4+8),BitsWritten :4};_cf [7]=code {Code :15<<(4+8),BitsWritten :4};_cf [8]=code {Code :19<<(3+8),BitsWritten :5};_cf [9]=code {Code :20<<(3+8),BitsWritten :5};_cf [10]=code {Code :7<<(3+8),BitsWritten :5};_cf [11]=code {Code :8<<(3+8),BitsWritten :5};
_cf [12]=code {Code :8<<(2+8),BitsWritten :6};_cf [13]=code {Code :3<<(2+8),BitsWritten :6};_cf [14]=code {Code :52<<(2+8),BitsWritten :6};_cf [15]=code {Code :53<<(2+8),BitsWritten :6};_cf [16]=code {Code :42<<(2+8),BitsWritten :6};_cf [17]=code {Code :43<<(2+8),BitsWritten :6};
_cf [18]=code {Code :39<<(1+8),BitsWritten :7};_cf [19]=code {Code :12<<(1+8),BitsWritten :7};_cf [20]=code {Code :8<<(1+8),BitsWritten :7};_cf [21]=code {Code :23<<(1+8),BitsWritten :7};_cf [22]=code {Code :3<<(1+8),BitsWritten :7};_cf [23]=code {Code :4<<(1+8),BitsWritten :7};
_cf [24]=code {Code :40<<(1+8),BitsWritten :7};_cf [25]=code {Code :43<<(1+8),BitsWritten :7};_cf [26]=code {Code :19<<(1+8),BitsWritten :7};_cf [27]=code {Code :36<<(1+8),BitsWritten :7};_cf [28]=code {Code :24<<(1+8),BitsWritten :7};_cf [29]=code {Code :2<<8,BitsWritten :8};
_cf [30]=code {Code :3<<8,BitsWritten :8};_cf [31]=code {Code :26<<8,BitsWritten :8};_cf [32]=code {Code :27<<8,BitsWritten :8};_cf [33]=code {Code :18<<8,BitsWritten :8};_cf [34]=code {Code :19<<8,BitsWritten :8};_cf [35]=code {Code :20<<8,BitsWritten :8};
_cf [36]=code {Code :21<<8,BitsWritten :8};_cf [37]=code {Code :22<<8,BitsWritten :8};_cf [38]=code {Code :23<<8,BitsWritten :8};_cf [39]=code {Code :40<<8,BitsWritten :8};_cf [40]=code {Code :41<<8,BitsWritten :8};_cf [41]=code {Code :42<<8,BitsWritten :8};
_cf [42]=code {Code :43<<8,BitsWritten :8};_cf [43]=code {Code :44<<8,BitsWritten :8};_cf [44]=code {Code :45<<8,BitsWritten :8};_cf [45]=code {Code :4<<8,BitsWritten :8};_cf [46]=code {Code :5<<8,BitsWritten :8};_cf [47]=code {Code :10<<8,BitsWritten :8};
_cf [48]=code {Code :11<<8,BitsWritten :8};_cf [49]=code {Code :82<<8,BitsWritten :8};_cf [50]=code {Code :83<<8,BitsWritten :8};_cf [51]=code {Code :84<<8,BitsWritten :8};_cf [52]=code {Code :85<<8,BitsWritten :8};_cf [53]=code {Code :36<<8,BitsWritten :8};
_cf [54]=code {Code :37<<8,BitsWritten :8};_cf [55]=code {Code :88<<8,BitsWritten :8};_cf [56]=code {Code :89<<8,BitsWritten :8};_cf [57]=code {Code :90<<8,BitsWritten :8};_cf [58]=code {Code :91<<8,BitsWritten :8};_cf [59]=code {Code :74<<8,BitsWritten :8};
_cf [60]=code {Code :75<<8,BitsWritten :8};_cf [61]=code {Code :50<<8,BitsWritten :8};_cf [62]=code {Code :51<<8,BitsWritten :8};_cf [63]=code {Code :52<<8,BitsWritten :8};_ff =make (map[int ]code );_ff [64]=code {Code :3<<8|3<<6,BitsWritten :10};_ff [128]=code {Code :12<<8|8<<4,BitsWritten :12};
_ff [192]=code {Code :12<<8|9<<4,BitsWritten :12};_ff [256]=code {Code :5<<8|11<<4,BitsWritten :12};_ff [320]=code {Code :3<<8|3<<4,BitsWritten :12};_ff [384]=code {Code :3<<8|4<<4,BitsWritten :12};_ff [448]=code {Code :3<<8|5<<4,BitsWritten :12};_ff [512]=code {Code :3<<8|12<<3,BitsWritten :13};
_ff [576]=code {Code :3<<8|13<<3,BitsWritten :13};_ff [640]=code {Code :2<<8|10<<3,BitsWritten :13};_ff [704]=code {Code :2<<8|11<<3,BitsWritten :13};_ff [768]=code {Code :2<<8|12<<3,BitsWritten :13};_ff [832]=code {Code :2<<8|13<<3,BitsWritten :13};_ff [896]=code {Code :3<<8|18<<3,BitsWritten :13};
_ff [960]=code {Code :3<<8|19<<3,BitsWritten :13};_ff [1024]=code {Code :3<<8|20<<3,BitsWritten :13};_ff [1088]=code {Code :3<<8|21<<3,BitsWritten :13};_ff [1152]=code {Code :3<<8|22<<3,BitsWritten :13};_ff [1216]=code {Code :119<<3,BitsWritten :13};_ff [1280]=code {Code :2<<8|18<<3,BitsWritten :13};
_ff [1344]=code {Code :2<<8|19<<3,BitsWritten :13};_ff [1408]=code {Code :2<<8|20<<3,BitsWritten :13};_ff [1472]=code {Code :2<<8|21<<3,BitsWritten :13};_ff [1536]=code {Code :2<<8|26<<3,BitsWritten :13};_ff [1600]=code {Code :2<<8|27<<3,BitsWritten :13};
_ff [1664]=code {Code :3<<8|4<<3,BitsWritten :13};_ff [1728]=code {Code :3<<8|5<<3,BitsWritten :13};_agg =make (map[int ]code );_agg [64]=code {Code :27<<(3+8),BitsWritten :5};_agg [128]=code {Code :18<<(3+8),BitsWritten :5};_agg [192]=code {Code :23<<(2+8),BitsWritten :6};
_agg [256]=code {Code :55<<(1+8),BitsWritten :7};_agg [320]=code {Code :54<<8,BitsWritten :8};_agg [384]=code {Code :55<<8,BitsWritten :8};_agg [448]=code {Code :100<<8,BitsWritten :8};_agg [512]=code {Code :101<<8,BitsWritten :8};_agg [576]=code {Code :104<<8,BitsWritten :8};
_agg [640]=code {Code :103<<8,BitsWritten :8};_agg [704]=code {Code :102<<8,BitsWritten :9};_agg [768]=code {Code :102<<8|1<<7,BitsWritten :9};_agg [832]=code {Code :105<<8,BitsWritten :9};_agg [896]=code {Code :105<<8|1<<7,BitsWritten :9};_agg [960]=code {Code :106<<8,BitsWritten :9};
_agg [1024]=code {Code :106<<8|1<<7,BitsWritten :9};_agg [1088]=code {Code :107<<8,BitsWritten :9};_agg [1152]=code {Code :107<<8|1<<7,BitsWritten :9};_agg [1216]=code {Code :108<<8,BitsWritten :9};_agg [1280]=code {Code :108<<8|1<<7,BitsWritten :9};_agg [1344]=code {Code :109<<8,BitsWritten :9};
_agg [1408]=code {Code :109<<8|1<<7,BitsWritten :9};_agg [1472]=code {Code :76<<8,BitsWritten :9};_agg [1536]=code {Code :76<<8|1<<7,BitsWritten :9};_agg [1600]=code {Code :77<<8,BitsWritten :9};_agg [1664]=code {Code :24<<(2+8),BitsWritten :6};_agg [1728]=code {Code :77<<8|1<<7,BitsWritten :9};
_db =make (map[int ]code );_db [1792]=code {Code :1<<8,BitsWritten :11};_db [1856]=code {Code :1<<8|4<<5,BitsWritten :11};_db [1920]=code {Code :1<<8|5<<5,BitsWritten :11};_db [1984]=code {Code :1<<8|2<<4,BitsWritten :12};_db [2048]=code {Code :1<<8|3<<4,BitsWritten :12};
_db [2112]=code {Code :1<<8|4<<4,BitsWritten :12};_db [2176]=code {Code :1<<8|5<<4,BitsWritten :12};_db [2240]=code {Code :1<<8|6<<4,BitsWritten :12};_db [2304]=code {Code :1<<8|7<<4,BitsWritten :12};_db [2368]=code {Code :1<<8|12<<4,BitsWritten :12};_db [2432]=code {Code :1<<8|13<<4,BitsWritten :12};
_db [2496]=code {Code :1<<8|14<<4,BitsWritten :12};_db [2560]=code {Code :1<<8|15<<4,BitsWritten :12};_efeb =make (map[int ]byte );_efeb [0]=0xFF;_efeb [1]=0xFE;_efeb [2]=0xFC;_efeb [3]=0xF8;_efeb [4]=0xF0;_efeb [5]=0xE0;_efeb [6]=0xC0;_efeb [7]=0x80;_efeb [8]=0x00;
};var (_ed =_f .New ("\u0063\u0063\u0069\u0074tf\u0061\u0078\u0020\u0063\u006f\u0072\u0072\u0075\u0070\u0074\u0065\u0064\u0020\u0052T\u0043");_gfa =_f .New ("\u0063\u0063\u0069\u0074tf\u0061\u0078\u0020\u0045\u004f\u004c\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075n\u0064");
);func _afb (_gfg []byte ,_cce ,_cdgd ,_caf int )([]byte ,int ){_aea :=_cdgf (_cdgd ,_caf );_gfg ,_cce =_dcce (_gfg ,_cce ,_aea );return _gfg ,_cce ;};func (_dbe *treeNode )set (_fcbb bool ,_gbaf *treeNode ){if !_fcbb {_dbe ._dbge =_gbaf ;}else {_dbe ._eggc =_gbaf ;
};};func (_bgc *Decoder )decodeRowType4 ()error {if !_bgc ._df {return _bgc .decoderRowType41D ();};if _bgc ._geg {_bgc ._ca .Align ();};_bgc ._ca .Mark ();_cg ,_be :=_bgc .tryFetchEOL ();if _be !=nil {return _be ;};if !_cg &&_bgc ._bde {_bgc ._acc ++;
if _bgc ._acc > _bgc ._aab {return _gfa ;};_bgc ._ca .Reset ();};if !_cg {_bgc ._ca .Reset ();};_eg ,_be :=_bgc ._ca .ReadBool ();if _be !=nil {return _be ;};if _eg {if _cg &&_bgc ._bfd {if _be =_bgc .tryFetchRTC2D ();_be !=nil {return _be ;};};_be =_bgc .decode1D ();
}else {_be =_bgc .decode2D ();};if _be !=nil {return _be ;};return nil ;};var _efe =[...][]uint16 {{0x2,0x3},{0x2,0x3},{0x2,0x3},{0x3},{0x4,0x5},{0x4,0x5,0x7},{0x4,0x7},{0x18},{0x17,0x18,0x37,0x8,0xf},{0x17,0x18,0x28,0x37,0x67,0x68,0x6c,0x8,0xc,0xd},{0x12,0x13,0x14,0x15,0x16,0x17,0x1c,0x1d,0x1e,0x1f,0x24,0x27,0x28,0x2b,0x2c,0x33,0x34,0x35,0x37,0x38,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0xc8,0xc9,0xca,0xcb,0xcc,0xcd,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xda,0xdb},{0x4a,0x4b,0x4c,0x4d,0x52,0x53,0x54,0x55,0x5a,0x5b,0x64,0x65,0x6c,0x6d,0x72,0x73,0x74,0x75,0x76,0x77}};
type code struct{Code uint16 ;BitsWritten int ;};type treeNode struct{_dbge *treeNode ;_eggc *treeNode ;_abb int ;_eee bool ;_gaff bool ;};var _bdge =[...][]uint16 {{2,3,4,5,6,7},{128,8,9,64,10,11},{192,1664,16,17,13,14,15,1,12},{26,21,28,27,18,24,25,22,256,23,20,19},{33,34,35,36,37,38,31,32,29,53,54,39,40,41,42,43,44,30,61,62,63,0,320,384,45,59,60,46,49,50,51,52,55,56,57,58,448,512,640,576,47,48},{1472,1536,1600,1728,704,768,832,896,960,1024,1088,1152,1216,1280,1344,1408},{},{1792,1856,1920},{1984,2048,2112,2176,2240,2304,2368,2432,2496,2560}};
func _cdgf (_bca ,_gff int )code {var _feb code ;switch _gff -_bca {case -1:_feb =_dgb ;case -2:_feb =_dbd ;case -3:_feb =_da ;case 0:_feb =_gad ;case 1:_feb =_ebb ;case 2:_feb =_dc ;case 3:_feb =_bg ;};return _feb ;};func (_cfd *Decoder )decodeRowType2 ()error {if _cfd ._geg {_cfd ._ca .Align ();
};if _eeb :=_cfd .decode1D ();_eeb !=nil {return _eeb ;};return nil ;};func (_add *Encoder )Encode (pixels [][]byte )[]byte {if _add .BlackIs1 {_fbe =0;_fdc =1;}else {_fbe =1;_fdc =0;};if _add .K ==0{return _add .encodeG31D (pixels );};if _add .K > 0{return _add .encodeG32D (pixels );
};if _add .K < 0{return _add .encodeG4 (pixels );};return nil ;};func (_fce *Decoder )decode2D ()error {_fce ._dbb =_fce ._ede ;_fce ._gcd ,_fce ._cc =_fce ._cc ,_fce ._gcd ;_deg :=true ;var (_gac bool ;_gadb int ;_ffe error ;);_fce ._ede =0;_gca :for _gadb < _fce ._gdb {_fcb :=_de ._gdbe ;
for {_gac ,_ffe =_fce ._ca .ReadBool ();if _ffe !=nil {return _ffe ;};_fcb =_fcb .walk (_gac );if _fcb ==nil {continue _gca ;};if !_fcb ._gaff {continue ;};switch _fcb ._abb {case _g :var _bgg int ;if _deg {_bgg ,_ffe =_fce .decodeRun (_b );}else {_bgg ,_ffe =_fce .decodeRun (_ef );
};if _ffe !=nil {return _ffe ;};_gadb +=_bgg ;_fce ._gcd [_fce ._ede ]=_gadb ;_fce ._ede ++;if _deg {_bgg ,_ffe =_fce .decodeRun (_ef );}else {_bgg ,_ffe =_fce .decodeRun (_b );};if _ffe !=nil {return _ffe ;};_gadb +=_bgg ;_fce ._gcd [_fce ._ede ]=_gadb ;
_fce ._ede ++;case _eb :_fdb :=_fce .getNextChangingElement (_gadb ,_deg )+1;if _fdb >=_fce ._dbb {_gadb =_fce ._gdb ;}else {_gadb =_fce ._cc [_fdb ];};default:_faae :=_fce .getNextChangingElement (_gadb ,_deg );if _faae >=_fce ._dbb ||_faae ==-1{_gadb =_fce ._gdb +_fcb ._abb ;
}else {_gadb =_fce ._cc [_faae ]+_fcb ._abb ;};_fce ._gcd [_fce ._ede ]=_gadb ;_fce ._ede ++;_deg =!_deg ;};continue _gca ;};};return nil ;};func _caae (_fad int )([]byte ,int ){var _dfe []byte ;for _ccg :=0;_ccg < 6;_ccg ++{_dfe ,_fad =_dcce (_dfe ,_fad ,_gf );
};return _dfe ,_fad %8;};func (_cfeg *Encoder )encodeG4 (_cece [][]byte )[]byte {_fagb :=make ([][]byte ,len (_cece ));copy (_fagb ,_cece );_fagb =_dgc (_fagb );var _bcc []byte ;var _cgd int ;for _daga :=1;_daga < len (_fagb );_daga ++{if _cfeg .Rows > 0&&!_cfeg .EndOfBlock &&_daga ==(_cfeg .Rows +1){break ;
};var _fge []byte ;var _gcc ,_ddb ,_fega int ;_dcb :=_cgd ;_dega :=-1;for _dega < len (_fagb [_daga ]){_gcc =_fae (_fagb [_daga ],_dega );_ddb =_dfgd (_fagb [_daga ],_fagb [_daga -1],_dega );_fega =_fae (_fagb [_daga -1],_ddb );if _fega < _gcc {_fge ,_dcb =_dcce (_fge ,_dcb ,_cfa );
_dega =_fega ;}else {if _c .Abs (float64 (_ddb -_gcc ))> 3{_fge ,_dcb ,_dega =_cdcd (_fagb [_daga ],_fge ,_dcb ,_dega ,_gcc );}else {_fge ,_dcb =_afb (_fge ,_dcb ,_gcc ,_ddb );_dega =_gcc ;};};};_bcc =_cfeg .appendEncodedRow (_bcc ,_fge ,_cgd );if _cfeg .EncodedByteAlign {_dcb =0;
};_cgd =_dcb %8;};if _cfeg .EndOfBlock {_dcc ,_ :=_ecaf (_cgd );_bcc =_cfeg .appendEncodedRow (_bcc ,_dcc ,_cgd );};return _bcc ;};var _aef =[...][]uint16 {{0x7,0x8,0xb,0xc,0xe,0xf},{0x12,0x13,0x14,0x1b,0x7,0x8},{0x17,0x18,0x2a,0x2b,0x3,0x34,0x35,0x7,0x8},{0x13,0x17,0x18,0x24,0x27,0x28,0x2b,0x3,0x37,0x4,0x8,0xc},{0x12,0x13,0x14,0x15,0x16,0x17,0x1a,0x1b,0x2,0x24,0x25,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x3,0x32,0x33,0x34,0x35,0x36,0x37,0x4,0x4a,0x4b,0x5,0x52,0x53,0x54,0x55,0x58,0x59,0x5a,0x5b,0x64,0x65,0x67,0x68,0xa,0xb},{0x98,0x99,0x9a,0x9b,0xcc,0xcd,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8,0xd9,0xda,0xdb},{},{0x8,0xc,0xd},{0x12,0x13,0x14,0x15,0x16,0x17,0x1c,0x1d,0x1e,0x1f}};
type Encoder struct{K int ;EndOfLine bool ;EncodedByteAlign bool ;Columns int ;Rows int ;EndOfBlock bool ;BlackIs1 bool ;DamagedRowsBeforeError int ;};var (_fbe byte =1;_fdc byte =0;);func _dfgd (_daae ,_gcgg []byte ,_cbg int )int {_bgfe :=_fae (_gcgg ,_cbg );
if _bgfe < len (_gcgg )&&(_cbg ==-1&&_gcgg [_bgfe ]==_fbe ||_cbg >=0&&_cbg < len (_daae )&&_daae [_cbg ]==_gcgg [_bgfe ]||_cbg >=len (_daae )&&_daae [_cbg -1]!=_gcgg [_bgfe ]){_bgfe =_fae (_gcgg ,_bgfe );};return _bgfe ;};const (_ tiffType =iota ;_fc ;
_dab ;_bdgd ;);func (_ebfc *Decoder )getNextChangingElement (_eebe int ,_gfab bool )int {_adc :=0;if !_gfab {_adc =1;};_dgfe :=int (uint32 (_ebfc ._dea )&0xFFFFFFFE)+_adc ;if _dgfe > 2{_dgfe -=2;};if _eebe ==0{return _dgfe ;};for _gbf :=_dgfe ;_gbf < _ebfc ._dbb ;
_gbf +=2{if _eebe < _ebfc ._cc [_gbf ]{_ebfc ._dea =_gbf ;return _gbf ;};};return -1;};func (_ege *Decoder )tryFetchRTC2D ()(_cgb error ){_ege ._ca .Mark ();var _ggd bool ;for _bgf :=0;_bgf < 5;_bgf ++{_ggd ,_cgb =_ege .tryFetchEOL1 ();if _cgb !=nil {if _f .Is (_cgb ,_fe .EOF ){if _bgf ==0{break ;
};return _ed ;};};if _ggd {continue ;};if _bgf > 0{return _ed ;};break ;};if _ggd {return _fe .EOF ;};_ege ._ca .Reset ();return _cgb ;};func (_effa *Decoder )looseFetchEOL ()(bool ,error ){_gadbb ,_fbc :=_effa ._ca .ReadBits (12);if _fbc !=nil {return false ,_fbc ;
};switch _gadbb {case 0x1:return true ,nil ;case 0x0:for {_ab ,_cgf :=_effa ._ca .ReadBool ();if _cgf !=nil {return false ,_cgf ;};if _ab {return true ,nil ;};};default:return false ,nil ;};};type DecodeOptions struct{Columns int ;Rows int ;K int ;EncodedByteAligned bool ;
BlackIsOne bool ;EndOfBlock bool ;EndOfLine bool ;DamagedRowsBeforeError int ;};func _cgfd (_cfdf []byte ,_cfda int )([]byte ,int ){return _dcce (_cfdf ,_cfda ,_cfa )};func _abg (_ecc []byte ,_dff int ,_ecf int ,_cbf bool )([]byte ,int ){var (_dbgf code ;
_eeac bool ;);for !_eeac {_dbgf ,_ecf ,_eeac =_geec (_ecf ,_cbf );_ecc ,_dff =_dcce (_ecc ,_dff ,_dbgf );};return _ecc ,_dff ;};func (_ea *Decoder )decodeRun (_acd *tree )(int ,error ){var _gbd int ;_bac :=_acd ._gdbe ;for {_gdbf ,_feg :=_ea ._ca .ReadBool ();
if _feg !=nil {return 0,_feg ;};_bac =_bac .walk (_gdbf );if _bac ==nil {return 0,_f .New ("\u0075\u006e\u006bno\u0077\u006e\u0020\u0063\u006f\u0064\u0065\u0020\u0069n\u0020H\u0075f\u0066m\u0061\u006e\u0020\u0052\u004c\u0045\u0020\u0073\u0074\u0072\u0065\u0061\u006d");
};if _bac ._gaff {_gbd +=_bac ._abb ;switch {case _bac ._abb >=64:_bac =_acd ._gdbe ;case _bac ._abb >=0:return _gbd ,nil ;default:return _ea ._gdb ,nil ;};};};};func _ecaf (_gaddd int )([]byte ,int ){var _adbg []byte ;for _efec :=0;_efec < 2;_efec ++{_adbg ,_gaddd =_dcce (_adbg ,_gaddd ,_gf );
};return _adbg ,_gaddd %8;};func _dcce (_eefe []byte ,_bage int ,_bfc code )([]byte ,int ){_bbg :=0;for _bbg < _bfc .BitsWritten {_fee :=_bage /8;_ceg :=_bage %8;if _fee >=len (_eefe ){_eefe =append (_eefe ,0);};_fdad :=8-_ceg ;_dddg :=_bfc .BitsWritten -_bbg ;
if _fdad > _dddg {_fdad =_dddg ;};if _bbg < 8{_eefe [_fee ]=_eefe [_fee ]|byte (_bfc .Code >>uint (8+_ceg -_bbg ))&_efeb [8-_fdad -_ceg ];}else {_eefe [_fee ]=_eefe [_fee ]|(byte (_bfc .Code <<uint (_bbg -8))&_efeb [8-_fdad ])>>uint (_ceg );};_bage +=_fdad ;
_bbg +=_fdad ;};return _eefe ,_bage ;};func (_bdb *Decoder )decode1D ()error {var (_aaa int ;_cdc error ;);_faf :=true ;_bdb ._ede =0;for {var _eeaa int ;if _faf {_eeaa ,_cdc =_bdb .decodeRun (_b );}else {_eeaa ,_cdc =_bdb .decodeRun (_ef );};if _cdc !=nil {return _cdc ;
};_aaa +=_eeaa ;_bdb ._gcd [_bdb ._ede ]=_aaa ;_bdb ._ede ++;_faf =!_faf ;if _aaa >=_bdb ._gdb {break ;};};return nil ;};var (_ec map[int ]code ;_cf map[int ]code ;_ff map[int ]code ;_agg map[int ]code ;_db map[int ]code ;_efeb map[int ]byte ;_gf =code {Code :1<<4,BitsWritten :12};
_cd =code {Code :3<<3,BitsWritten :13};_bba =code {Code :2<<3,BitsWritten :13};_cfa =code {Code :1<<12,BitsWritten :4};_fbf =code {Code :1<<13,BitsWritten :3};_gad =code {Code :1<<15,BitsWritten :1};_dgb =code {Code :3<<13,BitsWritten :3};_dbd =code {Code :3<<10,BitsWritten :6};
_da =code {Code :3<<9,BitsWritten :7};_ebb =code {Code :2<<13,BitsWritten :3};_dc =code {Code :2<<10,BitsWritten :6};_bg =code {Code :2<<9,BitsWritten :7};);type Decoder struct{_gdb int ;_af int ;_bgb int ;_dgd []byte ;_aab int ;_df bool ;_acg bool ;_baf bool ;
_ebf bool ;_bde bool ;_bfd bool ;_geg bool ;_agc int ;_gfb int ;_cc []int ;_gcd []int ;_dbb int ;_ede int ;_acc int ;_dea int ;_ca *_fec .Reader ;_gfc tiffType ;_ccf error ;};func _gcdf (_aeb ,_ega []byte ,_egg int ,_effc bool )int {_bbef :=_fae (_ega ,_egg );
if _bbef < len (_ega )&&(_egg ==-1&&_ega [_bbef ]==_fbe ||_egg >=0&&_egg < len (_aeb )&&_aeb [_egg ]==_ega [_bbef ]||_egg >=len (_aeb )&&_effc &&_ega [_bbef ]==_fbe ||_egg >=len (_aeb )&&!_effc &&_ega [_bbef ]==_fdc ){_bbef =_fae (_ega ,_bbef );};return _bbef ;
};func NewDecoder (data []byte ,options DecodeOptions )(*Decoder ,error ){_cda :=&Decoder {_ca :_fec .NewReader (data ),_gdb :options .Columns ,_af :options .Rows ,_aab :options .DamagedRowsBeforeError ,_dgd :make ([]byte ,(options .Columns +7)/8),_cc :make ([]int ,options .Columns +2),_gcd :make ([]int ,options .Columns +2),_geg :options .EncodedByteAligned ,_ebf :options .BlackIsOne ,_bde :options .EndOfLine ,_bfd :options .EndOfBlock };
switch {case options .K ==0:_cda ._gfc =_dab ;if len (data )< 20{return nil ,_f .New ("\u0074o\u006f\u0020\u0073\u0068o\u0072\u0074\u0020\u0063\u0063i\u0074t\u0066a\u0078\u0020\u0073\u0074\u0072\u0065\u0061m");};_cdg :=data [:20];if _cdg [0]!=0||(_cdg [1]>>4!=1&&_cdg [1]!=1){_cda ._gfc =_fc ;
_daa :=(uint16 (_cdg [0])<<8+uint16 (_cdg [1]&0xff))>>4;for _cdb :=12;_cdb < 160;_cdb ++{_daa =(_daa <<1)+uint16 ((_cdg [_cdb /8]>>uint16 (7-(_cdb %8)))&0x01);if _daa &0xfff==1{_cda ._gfc =_dab ;break ;};};};case options .K < 0:_cda ._gfc =_bdgd ;case options .K > 0:_cda ._gfc =_dab ;
_cda ._df =true ;};switch _cda ._gfc {case _fc ,_dab ,_bdgd :default:return nil ,_f .New ("\u0075\u006ek\u006e\u006f\u0077\u006e\u0020\u0063\u0063\u0069\u0074\u0074\u0066\u0061\u0078\u002e\u0044\u0065\u0063\u006f\u0064\u0065\u0072\u0020ty\u0070\u0065");
};return _cda ,nil ;};func _cdcd (_acdb ,_cdca []byte ,_eceb ,_gfd ,_bab int )([]byte ,int ,int ){_cbcd :=_fae (_acdb ,_bab );_ffeg :=_gfd >=0&&_acdb [_gfd ]==_fbe ||_gfd ==-1;_cdca ,_eceb =_dcce (_cdca ,_eceb ,_fbf );var _gcca int ;if _gfd > -1{_gcca =_bab -_gfd ;
}else {_gcca =_bab -_gfd -1;};_cdca ,_eceb =_abg (_cdca ,_eceb ,_gcca ,_ffeg );_ffeg =!_ffeg ;_dedc :=_cbcd -_bab ;_cdca ,_eceb =_abg (_cdca ,_eceb ,_dedc ,_ffeg );_gfd =_cbcd ;return _cdca ,_eceb ,_gfd ;};func (_eebg *Encoder )appendEncodedRow (_gaf ,_bbfc []byte ,_bgcd int )[]byte {if len (_gaf )> 0&&_bgcd !=0&&!_eebg .EncodedByteAlign {_gaf [len (_gaf )-1]=_gaf [len (_gaf )-1]|_bbfc [0];
_gaf =append (_gaf ,_bbfc [1:]...);}else {_gaf =append (_gaf ,_bbfc ...);};return _gaf ;};func (_acf *Decoder )Read (in []byte )(int ,error ){if _acf ._ccf !=nil {return 0,_acf ._ccf ;};_caa :=len (in );var (_ce int ;_bbe int ;);for _caa !=0{if _acf ._gfb >=_acf ._agc {if _acb :=_acf .fetch ();
_acb !=nil {_acf ._ccf =_acb ;return 0,_acb ;};};if _acf ._agc ==-1{return _ce ,_fe .EOF ;};switch {case _caa <=_acf ._agc -_acf ._gfb :_faa :=_acf ._dgd [_acf ._gfb :_acf ._gfb +_caa ];for _ ,_fga :=range _faa {if !_acf ._ebf {_fga =^_fga ;};in [_bbe ]=_fga ;
_bbe ++;};_ce +=len (_faa );_acf ._gfb +=len (_faa );return _ce ,nil ;default:_eca :=_acf ._dgd [_acf ._gfb :];for _ ,_ece :=range _eca {if !_acf ._ebf {_ece =^_ece ;};in [_bbe ]=_ece ;_bbe ++;};_ce +=len (_eca );_acf ._gfb +=len (_eca );_caa -=len (_eca );
};};return _ce ,nil ;};func (_efab *Decoder )decodeG32D ()error {_efab ._dbb =_efab ._ede ;_efab ._gcd ,_efab ._cc =_efab ._cc ,_efab ._gcd ;_dac :=true ;var (_eff bool ;_bdeg int ;_dage error ;);_efab ._ede =0;_ddd :for _bdeg < _efab ._gdb {_dfd :=_de ._gdbe ;
for {_eff ,_dage =_efab ._ca .ReadBool ();if _dage !=nil {return _dage ;};_dfd =_dfd .walk (_eff );if _dfd ==nil {continue _ddd ;};if !_dfd ._gaff {continue ;};switch _dfd ._abb {case _g :var _fefb int ;if _dac {_fefb ,_dage =_efab .decodeRun (_b );}else {_fefb ,_dage =_efab .decodeRun (_ef );
};if _dage !=nil {return _dage ;};_bdeg +=_fefb ;_efab ._gcd [_efab ._ede ]=_bdeg ;_efab ._ede ++;if _dac {_fefb ,_dage =_efab .decodeRun (_ef );}else {_fefb ,_dage =_efab .decodeRun (_b );};if _dage !=nil {return _dage ;};_bdeg +=_fefb ;_efab ._gcd [_efab ._ede ]=_bdeg ;
_efab ._ede ++;case _eb :_acbf :=_efab .getNextChangingElement (_bdeg ,_dac )+1;if _acbf >=_efab ._dbb {_bdeg =_efab ._gdb ;}else {_bdeg =_efab ._cc [_acbf ];};default:_cdd :=_efab .getNextChangingElement (_bdeg ,_dac );if _cdd >=_efab ._dbb ||_cdd ==-1{_bdeg =_efab ._gdb +_dfd ._abb ;
}else {_bdeg =_efab ._cc [_cdd ]+_dfd ._abb ;};_efab ._gcd [_efab ._ede ]=_bdeg ;_efab ._ede ++;_dac =!_dac ;};continue _ddd ;};};return nil ;};func (_aad *treeNode )walk (_ddc bool )*treeNode {if _ddc {return _aad ._eggc ;};return _aad ._dbge ;};func _dgc (_edcd [][]byte )[][]byte {_aafc :=make ([]byte ,len (_edcd [0]));
for _gcf :=range _aafc {_aafc [_gcf ]=_fbe ;};_edcd =append (_edcd ,[]byte {});for _cbfe :=len (_edcd )-1;_cbfe > 0;_cbfe --{_edcd [_cbfe ]=_edcd [_cbfe -1];};_edcd [0]=_aafc ;return _edcd ;};func _fbeg (_edcb int )([]byte ,int ){var _cabb []byte ;for _bdd :=0;
_bdd < 6;_bdd ++{_cabb ,_edcb =_dcce (_cabb ,_edcb ,_cd );};return _cabb ,_edcb %8;};func (_ccfe *Decoder )decodeRowType6 ()error {if _ccfe ._geg {_ccfe ._ca .Align ();};if _ccfe ._bfd {_ccfe ._ca .Mark ();_eef ,_edd :=_ccfe .tryFetchEOL ();if _edd !=nil {return _edd ;
};if _eef {_eef ,_edd =_ccfe .tryFetchEOL ();if _edd !=nil {return _edd ;};if _eef {return _fe .EOF ;};};_ccfe ._ca .Reset ();};return _ccfe .decode2D ();};type tiffType int ;func (_ac tiffType )String ()string {switch _ac {case _fc :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u004d\u006f\u0064i\u0066\u0069\u0065\u0064\u0048\u0075\u0066\u0066\u006d\u0061n\u0052\u006c\u0065";
case _dab :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u0054\u0034";case _bdgd :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u0054\u0036";default:return "\u0075n\u0064\u0065\u0066\u0069\u006e\u0065d";};};func (_ead *tree )fill (_deab ,_aee ,_dge int )error {_fefg :=_ead ._gdbe ;
for _accg :=0;_accg < _deab ;_accg ++{_cff :=_deab -1-_accg ;_fdcc :=((_aee >>uint (_cff ))&1)!=0;_bcca :=_fefg .walk (_fdcc );if _bcca !=nil {if _bcca ._gaff {return _f .New ("\u006e\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u006c\u0065\u0061\u0066\u002c\u0020\u006eo\u0020o\u0074\u0068\u0065\u0072\u0020\u0066\u006f\u006c\u006c\u006f\u0077\u0069\u006e\u0067");
};_fefg =_bcca ;continue ;};_bcca =&treeNode {};if _accg ==_deab -1{_bcca ._abb =_dge ;_bcca ._gaff =true ;};if _aee ==0{_bcca ._eee =true ;};_fefg .set (_fdcc ,_bcca );_fefg =_bcca ;};return nil ;};func (_cec *Encoder )encodeG31D (_ded [][]byte )[]byte {var _deb []byte ;
_cdad :=0;for _eab :=range _ded {if _cec .Rows > 0&&!_cec .EndOfBlock &&_eab ==_cec .Rows {break ;};_fceg ,_cca :=_dead (_ded [_eab ],_cdad ,_gf );_deb =_cec .appendEncodedRow (_deb ,_fceg ,_cdad );if _cec .EncodedByteAlign {_cca =0;};_cdad =_cca ;};if _cec .EndOfBlock {_cfe ,_ :=_caae (_cdad );
_deb =_cec .appendEncodedRow (_deb ,_cfe ,_cdad );};return _deb ;};func (_bafc *Decoder )fetch ()error {if _bafc ._agc ==-1{return nil ;};if _bafc ._gfb < _bafc ._agc {return nil ;};_bafc ._agc =0;_aefa :=_bafc .decodeRow ();if _aefa !=nil {if !_f .Is (_aefa ,_fe .EOF ){return _aefa ;
};if _bafc ._agc !=0{return _aefa ;};_bafc ._agc =-1;};_bafc ._gfb =0;return nil ;};func (_gce *Decoder )tryFetchEOL ()(bool ,error ){_cdf ,_cee :=_gce ._ca .ReadBits (12);if _cee !=nil {return false ,_cee ;};return _cdf ==0x1,nil ;};type tree struct{_gdbe *treeNode };
var (_d *treeNode ;_e *treeNode ;_ef *tree ;_b *tree ;_dg *tree ;_de *tree ;_efc =-2000;_bd =-1000;_eb =-3000;_g =-4000;);var _ba =[...][]uint16 {{3,2},{1,4},{6,5},{7},{9,8},{10,11,12},{13,14},{15},{16,17,0,18,64},{24,25,23,22,19,20,21,1792,1856,1920},{1984,2048,2112,2176,2240,2304,2368,2432,2496,2560,52,55,56,59,60,320,384,448,53,54,50,51,44,45,46,47,57,58,61,256,48,49,62,63,30,31,32,33,40,41,128,192,26,27,28,29,34,35,36,37,38,39,42,43},{640,704,768,832,1280,1344,1408,1472,1536,1600,1664,1728,512,576,896,960,1024,1088,1152,1216}};
func (_dgbe *Decoder )decoderRowType41D ()error {if _dgbe ._geg {_dgbe ._ca .Align ();};_dgbe ._ca .Mark ();var (_dag bool ;_def error ;);if _dgbe ._bde {_dag ,_def =_dgbe .tryFetchEOL ();if _def !=nil {return _def ;};if !_dag {return _gfa ;};}else {_dag ,_def =_dgbe .looseFetchEOL ();
if _def !=nil {return _def ;};};if !_dag {_dgbe ._ca .Reset ();};if _dag &&_dgbe ._bfd {_dgbe ._ca .Mark ();for _gcg :=0;_gcg < 5;_gcg ++{_dag ,_def =_dgbe .tryFetchEOL ();if _def !=nil {if _f .Is (_def ,_fe .EOF ){if _gcg ==0{break ;};return _ed ;};};
if _dag {continue ;};if _gcg > 0{return _ed ;};break ;};if _dag {return _fe .EOF ;};_dgbe ._ca .Reset ();};if _def =_dgbe .decode1D ();_def !=nil {return _def ;};return nil ;};func _dead (_fda []byte ,_cgdg int ,_ccaf code )([]byte ,int ){_cad :=true ;
var _ebe []byte ;_ebe ,_cgdg =_dcce (nil ,_cgdg ,_ccaf );_bag :=0;var _eaf int ;for _bag < len (_fda ){_eaf ,_bag =_fdbe (_fda ,_cad ,_bag );_ebe ,_cgdg =_abg (_ebe ,_cgdg ,_eaf ,_cad );_cad =!_cad ;};return _ebe ,_cgdg %8;};