//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package ccittfax ;import (_f "errors";_c "github.com/unidoc/unipdf/v4/internal/bitwise";_e "io";_b "math";);var _bc =[...][]uint16 {{0x2,0x3},{0x2,0x3},{0x2,0x3},{0x3},{0x4,0x5},{0x4,0x5,0x7},{0x4,0x7},{0x18},{0x17,0x18,0x37,0x8,0xf},{0x17,0x18,0x28,0x37,0x67,0x68,0x6c,0x8,0xc,0xd},{0x12,0x13,0x14,0x15,0x16,0x17,0x1c,0x1d,0x1e,0x1f,0x24,0x27,0x28,0x2b,0x2c,0x33,0x34,0x35,0x37,0x38,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0xc8,0xc9,0xca,0xcb,0xcc,0xcd,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xda,0xdb},{0x4a,0x4b,0x4c,0x4d,0x52,0x53,0x54,0x55,0x5a,0x5b,0x64,0x65,0x6c,0x6d,0x72,0x73,0x74,0x75,0x76,0x77}};
func init (){_ec =&treeNode {_fcac :true ,_baad :_dg };_ee =&treeNode {_baad :_fc ,_efgc :_ec };_ee ._fdgc =_ee ;_ea =&tree {_bbg :&treeNode {}};if _aa :=_ea .fillWithNode (12,0,_ee );_aa !=nil {panic (_aa .Error ());};if _ff :=_ea .fillWithNode (12,1,_ec );
_ff !=nil {panic (_ff .Error ());};_cf =&tree {_bbg :&treeNode {}};for _ca :=0;_ca < len (_bc );_ca ++{for _cc :=0;_cc < len (_bc [_ca ]);_cc ++{if _fg :=_cf .fill (_ca +2,int (_bc [_ca ][_cc ]),int (_aaf [_ca ][_cc ]));_fg !=nil {panic (_fg .Error ());
};};};if _cb :=_cf .fillWithNode (12,0,_ee );_cb !=nil {panic (_cb .Error ());};if _ag :=_cf .fillWithNode (12,1,_ec );_ag !=nil {panic (_ag .Error ());};_d =&tree {_bbg :&treeNode {}};for _fd :=0;_fd < len (_cbc );_fd ++{for _eg :=0;_eg < len (_cbc [_fd ]);
_eg ++{if _cg :=_d .fill (_fd +4,int (_cbc [_fd ][_eg ]),int (_cae [_fd ][_eg ]));_cg !=nil {panic (_cg .Error ());};};};if _cag :=_d .fillWithNode (12,0,_ee );_cag !=nil {panic (_cag .Error ());};if _be :=_d .fillWithNode (12,1,_ec );_be !=nil {panic (_be .Error ());
};_g =&tree {_bbg :&treeNode {}};if _af :=_g .fill (4,1,_fce );_af !=nil {panic (_af .Error ());};if _egb :=_g .fill (3,1,_bb );_egb !=nil {panic (_egb .Error ());};if _bf :=_g .fill (1,1,0);_bf !=nil {panic (_bf .Error ());};if _ef :=_g .fill (3,3,1);
_ef !=nil {panic (_ef .Error ());};if _egc :=_g .fill (6,3,2);_egc !=nil {panic (_egc .Error ());};if _cfe :=_g .fill (7,3,3);_cfe !=nil {panic (_cfe .Error ());};if _dc :=_g .fill (3,2,-1);_dc !=nil {panic (_dc .Error ());};if _ad :=_g .fill (6,2,-2);
_ad !=nil {panic (_ad .Error ());};if _ce :=_g .fill (7,2,-3);_ce !=nil {panic (_ce .Error ());};};var (_ge map[int ]code ;_gg map[int ]code ;_dga map[int ]code ;_efe map[int ]code ;_bbc map[int ]code ;_cga map[int ]byte ;_agd =code {Code :1<<4,BitsWritten :12};
_da =code {Code :3<<3,BitsWritten :13};_caf =code {Code :2<<3,BitsWritten :13};_dd =code {Code :1<<12,BitsWritten :4};_ga =code {Code :1<<13,BitsWritten :3};_ab =code {Code :1<<15,BitsWritten :1};_ba =code {Code :3<<13,BitsWritten :3};_fa =code {Code :3<<10,BitsWritten :6};
_gf =code {Code :3<<9,BitsWritten :7};_fge =code {Code :2<<13,BitsWritten :3};_afb =code {Code :2<<10,BitsWritten :6};_gee =code {Code :2<<9,BitsWritten :7};);func (_edf *Decoder )fetch ()error {if _edf ._fcef ==-1{return nil ;};if _edf ._caa < _edf ._fcef {return nil ;
};_edf ._fcef =0;_fff :=_edf .decodeRow ();if _fff !=nil {if !_f .Is (_fff ,_e .EOF ){return _fff ;};if _edf ._fcef !=0{return _fff ;};_edf ._fcef =-1;};_edf ._caa =0;return nil ;};func (_ggcc *Encoder )appendEncodedRow (_ebdd ,_ffg []byte ,_fgf int )[]byte {if len (_ebdd )> 0&&_fgf !=0&&!_ggcc .EncodedByteAlign {_ebdd [len (_ebdd )-1]=_ebdd [len (_ebdd )-1]|_ffg [0];
_ebdd =append (_ebdd ,_ffg [1:]...);}else {_ebdd =append (_ebdd ,_ffg ...);};return _ebdd ;};func (_gd *Encoder )encodeG31D (_fae [][]byte )[]byte {var _gba []byte ;_fab :=0;for _faa :=range _fae {if _gd .Rows > 0&&!_gd .EndOfBlock &&_faa ==_gd .Rows {break ;
};_bebb ,_dbf :=_ggb (_fae [_faa ],_fab ,_agd );_gba =_gd .appendEncodedRow (_gba ,_bebb ,_fab );if _gd .EncodedByteAlign {_dbf =0;};_fab =_dbf ;};if _gd .EndOfBlock {_gbg ,_ :=_gde (_fab );_gba =_gd .appendEncodedRow (_gba ,_gbg ,_fab );};return _gba ;
};func _egd (_agc int ,_dgg bool )(code ,int ,bool ){if _agc < 64{if _dgg {return _gg [_agc ],0,true ;};return _ge [_agc ],0,true ;};_ddcd :=_agc /64;if _ddcd > 40{return _bbc [2560],_agc -2560,false ;};if _ddcd > 27{return _bbc [_ddcd *64],_agc -_ddcd *64,false ;
};if _dgg {return _efe [_ddcd *64],_agc -_ddcd *64,false ;};return _dga [_ddcd *64],_agc -_ddcd *64,false ;};func (_cgaa *Decoder )looseFetchEOL ()(bool ,error ){_dcc ,_fbf :=_cgaa ._gc .ReadBits (12);if _fbf !=nil {return false ,_fbf ;};switch _dcc {case 0x1:return true ,nil ;
case 0x0:for {_ffc ,_edg :=_cgaa ._gc .ReadBool ();if _edg !=nil {return false ,_edg ;};if _ffc {return true ,nil ;};};default:return false ,nil ;};};func init (){_ge =make (map[int ]code );_ge [0]=code {Code :13<<8|3<<6,BitsWritten :10};_ge [1]=code {Code :2<<(5+8),BitsWritten :3};
_ge [2]=code {Code :3<<(6+8),BitsWritten :2};_ge [3]=code {Code :2<<(6+8),BitsWritten :2};_ge [4]=code {Code :3<<(5+8),BitsWritten :3};_ge [5]=code {Code :3<<(4+8),BitsWritten :4};_ge [6]=code {Code :2<<(4+8),BitsWritten :4};_ge [7]=code {Code :3<<(3+8),BitsWritten :5};
_ge [8]=code {Code :5<<(2+8),BitsWritten :6};_ge [9]=code {Code :4<<(2+8),BitsWritten :6};_ge [10]=code {Code :4<<(1+8),BitsWritten :7};_ge [11]=code {Code :5<<(1+8),BitsWritten :7};_ge [12]=code {Code :7<<(1+8),BitsWritten :7};_ge [13]=code {Code :4<<8,BitsWritten :8};
_ge [14]=code {Code :7<<8,BitsWritten :8};_ge [15]=code {Code :12<<8,BitsWritten :9};_ge [16]=code {Code :5<<8|3<<6,BitsWritten :10};_ge [17]=code {Code :6<<8,BitsWritten :10};_ge [18]=code {Code :2<<8,BitsWritten :10};_ge [19]=code {Code :12<<8|7<<5,BitsWritten :11};
_ge [20]=code {Code :13<<8,BitsWritten :11};_ge [21]=code {Code :13<<8|4<<5,BitsWritten :11};_ge [22]=code {Code :6<<8|7<<5,BitsWritten :11};_ge [23]=code {Code :5<<8,BitsWritten :11};_ge [24]=code {Code :2<<8|7<<5,BitsWritten :11};_ge [25]=code {Code :3<<8,BitsWritten :11};
_ge [26]=code {Code :12<<8|10<<4,BitsWritten :12};_ge [27]=code {Code :12<<8|11<<4,BitsWritten :12};_ge [28]=code {Code :12<<8|12<<4,BitsWritten :12};_ge [29]=code {Code :12<<8|13<<4,BitsWritten :12};_ge [30]=code {Code :6<<8|8<<4,BitsWritten :12};_ge [31]=code {Code :6<<8|9<<4,BitsWritten :12};
_ge [32]=code {Code :6<<8|10<<4,BitsWritten :12};_ge [33]=code {Code :6<<8|11<<4,BitsWritten :12};_ge [34]=code {Code :13<<8|2<<4,BitsWritten :12};_ge [35]=code {Code :13<<8|3<<4,BitsWritten :12};_ge [36]=code {Code :13<<8|4<<4,BitsWritten :12};_ge [37]=code {Code :13<<8|5<<4,BitsWritten :12};
_ge [38]=code {Code :13<<8|6<<4,BitsWritten :12};_ge [39]=code {Code :13<<8|7<<4,BitsWritten :12};_ge [40]=code {Code :6<<8|12<<4,BitsWritten :12};_ge [41]=code {Code :6<<8|13<<4,BitsWritten :12};_ge [42]=code {Code :13<<8|10<<4,BitsWritten :12};_ge [43]=code {Code :13<<8|11<<4,BitsWritten :12};
_ge [44]=code {Code :5<<8|4<<4,BitsWritten :12};_ge [45]=code {Code :5<<8|5<<4,BitsWritten :12};_ge [46]=code {Code :5<<8|6<<4,BitsWritten :12};_ge [47]=code {Code :5<<8|7<<4,BitsWritten :12};_ge [48]=code {Code :6<<8|4<<4,BitsWritten :12};_ge [49]=code {Code :6<<8|5<<4,BitsWritten :12};
_ge [50]=code {Code :5<<8|2<<4,BitsWritten :12};_ge [51]=code {Code :5<<8|3<<4,BitsWritten :12};_ge [52]=code {Code :2<<8|4<<4,BitsWritten :12};_ge [53]=code {Code :3<<8|7<<4,BitsWritten :12};_ge [54]=code {Code :3<<8|8<<4,BitsWritten :12};_ge [55]=code {Code :2<<8|7<<4,BitsWritten :12};
_ge [56]=code {Code :2<<8|8<<4,BitsWritten :12};_ge [57]=code {Code :5<<8|8<<4,BitsWritten :12};_ge [58]=code {Code :5<<8|9<<4,BitsWritten :12};_ge [59]=code {Code :2<<8|11<<4,BitsWritten :12};_ge [60]=code {Code :2<<8|12<<4,BitsWritten :12};_ge [61]=code {Code :5<<8|10<<4,BitsWritten :12};
_ge [62]=code {Code :6<<8|6<<4,BitsWritten :12};_ge [63]=code {Code :6<<8|7<<4,BitsWritten :12};_gg =make (map[int ]code );_gg [0]=code {Code :53<<8,BitsWritten :8};_gg [1]=code {Code :7<<(2+8),BitsWritten :6};_gg [2]=code {Code :7<<(4+8),BitsWritten :4};
_gg [3]=code {Code :8<<(4+8),BitsWritten :4};_gg [4]=code {Code :11<<(4+8),BitsWritten :4};_gg [5]=code {Code :12<<(4+8),BitsWritten :4};_gg [6]=code {Code :14<<(4+8),BitsWritten :4};_gg [7]=code {Code :15<<(4+8),BitsWritten :4};_gg [8]=code {Code :19<<(3+8),BitsWritten :5};
_gg [9]=code {Code :20<<(3+8),BitsWritten :5};_gg [10]=code {Code :7<<(3+8),BitsWritten :5};_gg [11]=code {Code :8<<(3+8),BitsWritten :5};_gg [12]=code {Code :8<<(2+8),BitsWritten :6};_gg [13]=code {Code :3<<(2+8),BitsWritten :6};_gg [14]=code {Code :52<<(2+8),BitsWritten :6};
_gg [15]=code {Code :53<<(2+8),BitsWritten :6};_gg [16]=code {Code :42<<(2+8),BitsWritten :6};_gg [17]=code {Code :43<<(2+8),BitsWritten :6};_gg [18]=code {Code :39<<(1+8),BitsWritten :7};_gg [19]=code {Code :12<<(1+8),BitsWritten :7};_gg [20]=code {Code :8<<(1+8),BitsWritten :7};
_gg [21]=code {Code :23<<(1+8),BitsWritten :7};_gg [22]=code {Code :3<<(1+8),BitsWritten :7};_gg [23]=code {Code :4<<(1+8),BitsWritten :7};_gg [24]=code {Code :40<<(1+8),BitsWritten :7};_gg [25]=code {Code :43<<(1+8),BitsWritten :7};_gg [26]=code {Code :19<<(1+8),BitsWritten :7};
_gg [27]=code {Code :36<<(1+8),BitsWritten :7};_gg [28]=code {Code :24<<(1+8),BitsWritten :7};_gg [29]=code {Code :2<<8,BitsWritten :8};_gg [30]=code {Code :3<<8,BitsWritten :8};_gg [31]=code {Code :26<<8,BitsWritten :8};_gg [32]=code {Code :27<<8,BitsWritten :8};
_gg [33]=code {Code :18<<8,BitsWritten :8};_gg [34]=code {Code :19<<8,BitsWritten :8};_gg [35]=code {Code :20<<8,BitsWritten :8};_gg [36]=code {Code :21<<8,BitsWritten :8};_gg [37]=code {Code :22<<8,BitsWritten :8};_gg [38]=code {Code :23<<8,BitsWritten :8};
_gg [39]=code {Code :40<<8,BitsWritten :8};_gg [40]=code {Code :41<<8,BitsWritten :8};_gg [41]=code {Code :42<<8,BitsWritten :8};_gg [42]=code {Code :43<<8,BitsWritten :8};_gg [43]=code {Code :44<<8,BitsWritten :8};_gg [44]=code {Code :45<<8,BitsWritten :8};
_gg [45]=code {Code :4<<8,BitsWritten :8};_gg [46]=code {Code :5<<8,BitsWritten :8};_gg [47]=code {Code :10<<8,BitsWritten :8};_gg [48]=code {Code :11<<8,BitsWritten :8};_gg [49]=code {Code :82<<8,BitsWritten :8};_gg [50]=code {Code :83<<8,BitsWritten :8};
_gg [51]=code {Code :84<<8,BitsWritten :8};_gg [52]=code {Code :85<<8,BitsWritten :8};_gg [53]=code {Code :36<<8,BitsWritten :8};_gg [54]=code {Code :37<<8,BitsWritten :8};_gg [55]=code {Code :88<<8,BitsWritten :8};_gg [56]=code {Code :89<<8,BitsWritten :8};
_gg [57]=code {Code :90<<8,BitsWritten :8};_gg [58]=code {Code :91<<8,BitsWritten :8};_gg [59]=code {Code :74<<8,BitsWritten :8};_gg [60]=code {Code :75<<8,BitsWritten :8};_gg [61]=code {Code :50<<8,BitsWritten :8};_gg [62]=code {Code :51<<8,BitsWritten :8};
_gg [63]=code {Code :52<<8,BitsWritten :8};_dga =make (map[int ]code );_dga [64]=code {Code :3<<8|3<<6,BitsWritten :10};_dga [128]=code {Code :12<<8|8<<4,BitsWritten :12};_dga [192]=code {Code :12<<8|9<<4,BitsWritten :12};_dga [256]=code {Code :5<<8|11<<4,BitsWritten :12};
_dga [320]=code {Code :3<<8|3<<4,BitsWritten :12};_dga [384]=code {Code :3<<8|4<<4,BitsWritten :12};_dga [448]=code {Code :3<<8|5<<4,BitsWritten :12};_dga [512]=code {Code :3<<8|12<<3,BitsWritten :13};_dga [576]=code {Code :3<<8|13<<3,BitsWritten :13};
_dga [640]=code {Code :2<<8|10<<3,BitsWritten :13};_dga [704]=code {Code :2<<8|11<<3,BitsWritten :13};_dga [768]=code {Code :2<<8|12<<3,BitsWritten :13};_dga [832]=code {Code :2<<8|13<<3,BitsWritten :13};_dga [896]=code {Code :3<<8|18<<3,BitsWritten :13};
_dga [960]=code {Code :3<<8|19<<3,BitsWritten :13};_dga [1024]=code {Code :3<<8|20<<3,BitsWritten :13};_dga [1088]=code {Code :3<<8|21<<3,BitsWritten :13};_dga [1152]=code {Code :3<<8|22<<3,BitsWritten :13};_dga [1216]=code {Code :119<<3,BitsWritten :13};
_dga [1280]=code {Code :2<<8|18<<3,BitsWritten :13};_dga [1344]=code {Code :2<<8|19<<3,BitsWritten :13};_dga [1408]=code {Code :2<<8|20<<3,BitsWritten :13};_dga [1472]=code {Code :2<<8|21<<3,BitsWritten :13};_dga [1536]=code {Code :2<<8|26<<3,BitsWritten :13};
_dga [1600]=code {Code :2<<8|27<<3,BitsWritten :13};_dga [1664]=code {Code :3<<8|4<<3,BitsWritten :13};_dga [1728]=code {Code :3<<8|5<<3,BitsWritten :13};_efe =make (map[int ]code );_efe [64]=code {Code :27<<(3+8),BitsWritten :5};_efe [128]=code {Code :18<<(3+8),BitsWritten :5};
_efe [192]=code {Code :23<<(2+8),BitsWritten :6};_efe [256]=code {Code :55<<(1+8),BitsWritten :7};_efe [320]=code {Code :54<<8,BitsWritten :8};_efe [384]=code {Code :55<<8,BitsWritten :8};_efe [448]=code {Code :100<<8,BitsWritten :8};_efe [512]=code {Code :101<<8,BitsWritten :8};
_efe [576]=code {Code :104<<8,BitsWritten :8};_efe [640]=code {Code :103<<8,BitsWritten :8};_efe [704]=code {Code :102<<8,BitsWritten :9};_efe [768]=code {Code :102<<8|1<<7,BitsWritten :9};_efe [832]=code {Code :105<<8,BitsWritten :9};_efe [896]=code {Code :105<<8|1<<7,BitsWritten :9};
_efe [960]=code {Code :106<<8,BitsWritten :9};_efe [1024]=code {Code :106<<8|1<<7,BitsWritten :9};_efe [1088]=code {Code :107<<8,BitsWritten :9};_efe [1152]=code {Code :107<<8|1<<7,BitsWritten :9};_efe [1216]=code {Code :108<<8,BitsWritten :9};_efe [1280]=code {Code :108<<8|1<<7,BitsWritten :9};
_efe [1344]=code {Code :109<<8,BitsWritten :9};_efe [1408]=code {Code :109<<8|1<<7,BitsWritten :9};_efe [1472]=code {Code :76<<8,BitsWritten :9};_efe [1536]=code {Code :76<<8|1<<7,BitsWritten :9};_efe [1600]=code {Code :77<<8,BitsWritten :9};_efe [1664]=code {Code :24<<(2+8),BitsWritten :6};
_efe [1728]=code {Code :77<<8|1<<7,BitsWritten :9};_bbc =make (map[int ]code );_bbc [1792]=code {Code :1<<8,BitsWritten :11};_bbc [1856]=code {Code :1<<8|4<<5,BitsWritten :11};_bbc [1920]=code {Code :1<<8|5<<5,BitsWritten :11};_bbc [1984]=code {Code :1<<8|2<<4,BitsWritten :12};
_bbc [2048]=code {Code :1<<8|3<<4,BitsWritten :12};_bbc [2112]=code {Code :1<<8|4<<4,BitsWritten :12};_bbc [2176]=code {Code :1<<8|5<<4,BitsWritten :12};_bbc [2240]=code {Code :1<<8|6<<4,BitsWritten :12};_bbc [2304]=code {Code :1<<8|7<<4,BitsWritten :12};
_bbc [2368]=code {Code :1<<8|12<<4,BitsWritten :12};_bbc [2432]=code {Code :1<<8|13<<4,BitsWritten :12};_bbc [2496]=code {Code :1<<8|14<<4,BitsWritten :12};_bbc [2560]=code {Code :1<<8|15<<4,BitsWritten :12};_cga =make (map[int ]byte );_cga [0]=0xFF;_cga [1]=0xFE;
_cga [2]=0xFC;_cga [3]=0xF8;_cga [4]=0xF0;_cga [5]=0xE0;_cga [6]=0xC0;_cga [7]=0x80;_cga [8]=0x00;};func _cbg (_dfe []byte ,_abc int )int {if _abc >=len (_dfe ){return _abc ;};if _abc < -1{_abc =-1;};var _dggf byte ;if _abc > -1{_dggf =_dfe [_abc ];}else {_dggf =_ebda ;
};_ebdc :=_abc +1;for _ebdc < len (_dfe ){if _dfe [_ebdc ]!=_dggf {break ;};_ebdc ++;};return _ebdc ;};func _ggb (_eecc []byte ,_dda int ,_ade code )([]byte ,int ){_cfa :=true ;var _adbf []byte ;_adbf ,_dda =_gggf (nil ,_dda ,_ade );_cdg :=0;var _abf int ;
for _cdg < len (_eecc ){_abf ,_cdg =_gccd (_eecc ,_cfa ,_cdg );_adbf ,_dda =_cda (_adbf ,_dda ,_abf ,_cfa );_cfa =!_cfa ;};return _adbf ,_dda %8;};func (_ebbe *Decoder )decoderRowType41D ()error {if _ebbe ._ae {_ebbe ._gc .Align ();};_ebbe ._gc .Mark ();
var (_geea bool ;_fcf error ;);if _ebbe ._bcgf {_geea ,_fcf =_ebbe .tryFetchEOL ();if _fcf !=nil {return _fcf ;};if !_geea {return _agf ;};}else {_geea ,_fcf =_ebbe .looseFetchEOL ();if _fcf !=nil {return _fcf ;};};if !_geea {_ebbe ._gc .Reset ();};if _geea &&_ebbe ._df {_ebbe ._gc .Mark ();
for _gec :=0;_gec < 5;_gec ++{_geea ,_fcf =_ebbe .tryFetchEOL ();if _fcf !=nil {if _f .Is (_fcf ,_e .EOF ){if _gec ==0{break ;};return _egf ;};};if _geea {continue ;};if _gec > 0{return _egf ;};break ;};if _geea {return _e .EOF ;};_ebbe ._gc .Reset ();
};if _fcf =_ebbe .decode1D ();_fcf !=nil {return _fcf ;};return nil ;};func (_gfa *Decoder )getNextChangingElement (_aec int ,_gce bool )int {_edac :=0;if !_gce {_edac =1;};_age :=int (uint32 (_gfa ._eagf )&0xFFFFFFFE)+_edac ;if _age > 2{_age -=2;};if _aec ==0{return _age ;
};for _beg :=_age ;_beg < _gfa ._gbc ;_beg +=2{if _aec < _gfa ._gbb [_beg ]{_gfa ._eagf =_beg ;return _beg ;};};return -1;};type treeNode struct{_fdgc *treeNode ;_efgc *treeNode ;_baad int ;_bebde bool ;_fcac bool ;};var _cbc =[...][]uint16 {{0x7,0x8,0xb,0xc,0xe,0xf},{0x12,0x13,0x14,0x1b,0x7,0x8},{0x17,0x18,0x2a,0x2b,0x3,0x34,0x35,0x7,0x8},{0x13,0x17,0x18,0x24,0x27,0x28,0x2b,0x3,0x37,0x4,0x8,0xc},{0x12,0x13,0x14,0x15,0x16,0x17,0x1a,0x1b,0x2,0x24,0x25,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x3,0x32,0x33,0x34,0x35,0x36,0x37,0x4,0x4a,0x4b,0x5,0x52,0x53,0x54,0x55,0x58,0x59,0x5a,0x5b,0x64,0x65,0x67,0x68,0xa,0xb},{0x98,0x99,0x9a,0x9b,0xcc,0xcd,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8,0xd9,0xda,0xdb},{},{0x8,0xc,0xd},{0x12,0x13,0x14,0x15,0x16,0x17,0x1c,0x1d,0x1e,0x1f}};
func _bffc (_fbgd int )([]byte ,int ){var _fed []byte ;for _egec :=0;_egec < 2;_egec ++{_fed ,_fbgd =_gggf (_fed ,_fbgd ,_agd );};return _fed ,_fbgd %8;};var (_ec *treeNode ;_ee *treeNode ;_cf *tree ;_d *tree ;_ea *tree ;_g *tree ;_dg =-2000;_fc =-1000;
_fce =-3000;_bb =-4000;);type tree struct{_bbg *treeNode };func (_dgf tiffType )String ()string {switch _dgf {case _fgg :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u004d\u006f\u0064i\u0066\u0069\u0065\u0064\u0048\u0075\u0066\u0066\u006d\u0061n\u0052\u006c\u0065";
case _bg :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u0054\u0034";case _dgd :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u0054\u0036";default:return "\u0075n\u0064\u0065\u0066\u0069\u006e\u0065d";};};func _gegg (_cee ,_fegd []byte ,_cfcd int )int {_aafe :=_cbg (_fegd ,_cfcd );
if _aafe < len (_fegd )&&(_cfcd ==-1&&_fegd [_aafe ]==_ebda ||_cfcd >=0&&_cfcd < len (_cee )&&_cee [_cfcd ]==_fegd [_aafe ]||_cfcd >=len (_cee )&&_cee [_cfcd -1]!=_fegd [_aafe ]){_aafe =_cbg (_fegd ,_aafe );};return _aafe ;};func (_feg *Decoder )decodeRun (_dca *tree )(int ,error ){var _fba int ;
_cage :=_dca ._bbg ;for {_bebd ,_fcdc :=_feg ._gc .ReadBool ();if _fcdc !=nil {return 0,_fcdc ;};_cage =_cage .walk (_bebd );if _cage ==nil {return 0,_f .New ("\u0075\u006e\u006bno\u0077\u006e\u0020\u0063\u006f\u0064\u0065\u0020\u0069n\u0020H\u0075f\u0066m\u0061\u006e\u0020\u0052\u004c\u0045\u0020\u0073\u0074\u0072\u0065\u0061\u006d");
};if _cage ._fcac {_fba +=_cage ._baad ;switch {case _cage ._baad >=64:_cage =_dca ._bbg ;case _cage ._baad >=0:return _fba ,nil ;default:return _feg ._ggc ,nil ;};};};};func (_bfe *Decoder )tryFetchEOL ()(bool ,error ){_ege ,_aef :=_bfe ._gc .ReadBits (12);
if _aef !=nil {return false ,_aef ;};return _ege ==0x1,nil ;};var _cae =[...][]uint16 {{2,3,4,5,6,7},{128,8,9,64,10,11},{192,1664,16,17,13,14,15,1,12},{26,21,28,27,18,24,25,22,256,23,20,19},{33,34,35,36,37,38,31,32,29,53,54,39,40,41,42,43,44,30,61,62,63,0,320,384,45,59,60,46,49,50,51,52,55,56,57,58,448,512,640,576,47,48},{1472,1536,1600,1728,704,768,832,896,960,1024,1088,1152,1216,1280,1344,1408},{},{1792,1856,1920},{1984,2048,2112,2176,2240,2304,2368,2432,2496,2560}};
const (_ tiffType =iota ;_fgg ;_bg ;_dgd ;);func (_egbf *Decoder )decodeRowType4 ()error {if !_egbf ._ada {return _egbf .decoderRowType41D ();};if _egbf ._ae {_egbf ._gc .Align ();};_egbf ._gc .Mark ();_ebd ,_ead :=_egbf .tryFetchEOL ();if _ead !=nil {return _ead ;
};if !_ebd &&_egbf ._bcgf {_egbf ._afg ++;if _egbf ._afg > _egbf ._fdg {return _agf ;};_egbf ._gc .Reset ();};if !_ebd {_egbf ._gc .Reset ();};_ggg ,_ead :=_egbf ._gc .ReadBool ();if _ead !=nil {return _ead ;};if _ggg {if _ebd &&_egbf ._df {if _ead =_egbf .tryFetchRTC2D ();
_ead !=nil {return _ead ;};};_ead =_egbf .decode1D ();}else {_ead =_egbf .decode2D ();};if _ead !=nil {return _ead ;};return nil ;};func (_bef *Encoder )encodeG4 (_aefd [][]byte )[]byte {_eeg :=make ([][]byte ,len (_aefd ));copy (_eeg ,_aefd );_eeg =_adf (_eeg );
var _fbb []byte ;var _adba int ;for _faef :=1;_faef < len (_eeg );_faef ++{if _bef .Rows > 0&&!_bef .EndOfBlock &&_faef ==(_bef .Rows +1){break ;};var _cbag []byte ;var _dea ,_gge ,_decc int ;_efc :=_adba ;_edfd :=-1;for _edfd < len (_eeg [_faef ]){_dea =_cbg (_eeg [_faef ],_edfd );
_gge =_gegg (_eeg [_faef ],_eeg [_faef -1],_edfd );_decc =_cbg (_eeg [_faef -1],_gge );if _decc < _dea {_cbag ,_efc =_gggf (_cbag ,_efc ,_dd );_edfd =_decc ;}else {if _b .Abs (float64 (_gge -_dea ))> 3{_cbag ,_efc ,_edfd =_bgg (_eeg [_faef ],_cbag ,_efc ,_edfd ,_dea );
}else {_cbag ,_efc =_ggf (_cbag ,_efc ,_dea ,_gge );_edfd =_dea ;};};};_fbb =_bef .appendEncodedRow (_fbb ,_cbag ,_adba );if _bef .EncodedByteAlign {_efc =0;};_adba =_efc %8;};if _bef .EndOfBlock {_bdda ,_ :=_bffc (_adba );_fbb =_bef .appendEncodedRow (_fbb ,_bdda ,_adba );
};return _fbb ;};func (_cbb *Encoder )Encode (pixels [][]byte )[]byte {if _cbb .BlackIs1 {_ebda =0;_gcce =1;}else {_ebda =1;_gcce =0;};if _cbb .K ==0{return _cbb .encodeG31D (pixels );};if _cbb .K > 0{return _cbb .encodeG32D (pixels );};if _cbb .K < 0{return _cbb .encodeG4 (pixels );
};return nil ;};func NewDecoder (data []byte ,options DecodeOptions )(*Decoder ,error ){_ddc :=&Decoder {_gc :_c .NewReader (data ),_ggc :options .Columns ,_bcg :options .Rows ,_fdg :options .DamagedRowsBeforeError ,_beb :make ([]byte ,(options .Columns +7)/8),_gbb :make ([]int ,options .Columns +2),_dcb :make ([]int ,options .Columns +2),_ae :options .EncodedByteAligned ,_cd :options .BlackIsOne ,_bcgf :options .EndOfLine ,_df :options .EndOfBlock };
switch {case options .K ==0:_ddc ._de =_bg ;if len (data )< 20{return nil ,_f .New ("\u0074o\u006f\u0020\u0073\u0068o\u0072\u0074\u0020\u0063\u0063i\u0074t\u0066a\u0078\u0020\u0073\u0074\u0072\u0065\u0061m");};_cagc :=data [:20];if _cagc [0]!=0||(_cagc [1]>>4!=1&&_cagc [1]!=1){_ddc ._de =_fgg ;
_ecf :=(uint16 (_cagc [0])<<8+uint16 (_cagc [1]&0xff))>>4;for _ed :=12;_ed < 160;_ed ++{_ecf =(_ecf <<1)+uint16 ((_cagc [_ed /8]>>uint16 (7-(_ed %8)))&0x01);if _ecf &0xfff==1{_ddc ._de =_bg ;break ;};};};case options .K < 0:_ddc ._de =_dgd ;case options .K > 0:_ddc ._de =_bg ;
_ddc ._ada =true ;};switch _ddc ._de {case _fgg ,_bg ,_dgd :default:return nil ,_f .New ("\u0075\u006ek\u006e\u006f\u0077\u006e\u0020\u0063\u0063\u0069\u0074\u0074\u0066\u0061\u0078\u002e\u0044\u0065\u0063\u006f\u0064\u0065\u0072\u0020ty\u0070\u0065");
};return _ddc ,nil ;};func _cfae (_cfcg []byte ,_egcd int )([]byte ,int ){return _gggf (_cfcg ,_egcd ,_dd )};func _agaa (_gdb ,_fbfd []byte ,_dbfc int ,_fdef bool )int {_cea :=_cbg (_fbfd ,_dbfc );if _cea < len (_fbfd )&&(_dbfc ==-1&&_fbfd [_cea ]==_ebda ||_dbfc >=0&&_dbfc < len (_gdb )&&_gdb [_dbfc ]==_fbfd [_cea ]||_dbfc >=len (_gdb )&&_fdef &&_fbfd [_cea ]==_ebda ||_dbfc >=len (_gdb )&&!_fdef &&_fbfd [_cea ]==_gcce ){_cea =_cbg (_fbfd ,_cea );
};return _cea ;};func (_ddb *Decoder )decodeRowType2 ()error {if _ddb ._ae {_ddb ._gc .Align ();};if _eec :=_ddb .decode1D ();_eec !=nil {return _eec ;};return nil ;};func (_adc *Decoder )tryFetchEOL1 ()(bool ,error ){_bgd ,_aee :=_adc ._gc .ReadBits (13);
if _aee !=nil {return false ,_aee ;};return _bgd ==0x3,nil ;};func _adf (_dbd [][]byte )[][]byte {_bac :=make ([]byte ,len (_dbd [0]));for _fbe :=range _bac {_bac [_fbe ]=_ebda ;};_dbd =append (_dbd ,[]byte {});for _gab :=len (_dbd )-1;_gab > 0;_gab --{_dbd [_gab ]=_dbd [_gab -1];
};_dbd [0]=_bac ;return _dbd ;};func _gggf (_adbfc []byte ,_fee int ,_aea code )([]byte ,int ){_bfea :=0;for _bfea < _aea .BitsWritten {_cab :=_fee /8;_cbac :=_fee %8;if _cab >=len (_adbfc ){_adbfc =append (_adbfc ,0);};_geg :=8-_cbac ;_bgaa :=_aea .BitsWritten -_bfea ;
if _geg > _bgaa {_geg =_bgaa ;};if _bfea < 8{_adbfc [_cab ]=_adbfc [_cab ]|byte (_aea .Code >>uint (8+_cbac -_bfea ))&_cga [8-_geg -_cbac ];}else {_adbfc [_cab ]=_adbfc [_cab ]|(byte (_aea .Code <<uint (_bfea -8))&_cga [8-_geg ])>>uint (_cbac );};_fee +=_geg ;
_bfea +=_geg ;};return _adbfc ,_fee ;};func _gccd (_dcae []byte ,_fggb bool ,_gbad int )(int ,int ){_daa :=0;for _gbad < len (_dcae ){if _fggb {if _dcae [_gbad ]!=_ebda {break ;};}else {if _dcae [_gbad ]!=_gcce {break ;};};_daa ++;_gbad ++;};return _daa ,_gbad ;
};func _ecfd (_eab int )([]byte ,int ){var _gff []byte ;for _fabd :=0;_fabd < 6;_fabd ++{_gff ,_eab =_gggf (_gff ,_eab ,_da );};return _gff ,_eab %8;};func (_fbg *Decoder )decodeRow ()(_ebb error ){if !_fbg ._df &&_fbg ._bcg > 0&&_fbg ._bcg ==_fbg ._eb {return _e .EOF ;
};switch _fbg ._de {case _fgg :_ebb =_fbg .decodeRowType2 ();case _bg :_ebb =_fbg .decodeRowType4 ();case _dgd :_ebb =_fbg .decodeRowType6 ();};if _ebb !=nil {return _ebb ;};_gad :=0;_edca :=true ;_fbg ._eagf =0;for _fcd :=0;_fcd < _fbg ._ac ;_fcd ++{_ddg :=_fbg ._ggc ;
if _fcd !=_fbg ._ac {_ddg =_fbg ._dcb [_fcd ];};if _ddg > _fbg ._ggc {_ddg =_fbg ._ggc ;};_dag :=_gad /8;for _gad %8!=0&&_ddg -_gad > 0{var _cff byte ;if !_edca {_cff =1<<uint (7-(_gad %8));};_fbg ._beb [_dag ]|=_cff ;_gad ++;};if _gad %8==0{_dag =_gad /8;
var _bce byte ;if !_edca {_bce =0xff;};for _ddg -_gad > 7{_fbg ._beb [_dag ]=_bce ;_gad +=8;_dag ++;};};for _ddg -_gad > 0{if _gad %8==0{_fbg ._beb [_dag ]=0;};var _efd byte ;if !_edca {_efd =1<<uint (7-(_gad %8));};_fbg ._beb [_dag ]|=_efd ;_gad ++;};
_edca =!_edca ;};if _gad !=_fbg ._ggc {return _f .New ("\u0073\u0075\u006d\u0020\u006f\u0066 \u0072\u0075\u006e\u002d\u006c\u0065\u006e\u0067\u0074\u0068\u0073\u0020\u0064\u006f\u0065\u0073\u0020\u006e\u006f\u0074 \u0065\u0071\u0075\u0061\u006c\u0020\u0073\u0063\u0061\u006e\u0020\u006c\u0069\u006ee\u0020w\u0069\u0064\u0074\u0068");
};_fbg ._fcef =(_gad +7)/8;_fbg ._eb ++;return nil ;};func (_ddfb *tree )fillWithNode (_ggcce ,_becb int ,_efg *treeNode )error {_bggc :=_ddfb ._bbg ;for _cbeg :=0;_cbeg < _ggcce ;_cbeg ++{_gcd :=uint (_ggcce -1-_cbeg );_abg :=((_becb >>_gcd )&1)!=0;_gea :=_bggc .walk (_abg );
if _gea !=nil {if _gea ._fcac {return _f .New ("\u006e\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u006c\u0065\u0061\u0066\u002c\u0020\u006eo\u0020o\u0074\u0068\u0065\u0072\u0020\u0066\u006f\u006c\u006c\u006f\u0077\u0069\u006e\u0067");};_bggc =_gea ;continue ;
};if _cbeg ==_ggcce -1{_gea =_efg ;}else {_gea =&treeNode {};};if _becb ==0{_gea ._bebde =true ;};_bggc .set (_abg ,_gea );_bggc =_gea ;};return nil ;};func (_cce *Decoder )decode1D ()error {var (_bdd int ;_dad error ;);_deb :=true ;_cce ._ac =0;for {var _bcd int ;
if _deb {_bcd ,_dad =_cce .decodeRun (_d );}else {_bcd ,_dad =_cce .decodeRun (_cf );};if _dad !=nil {return _dad ;};_bdd +=_bcd ;_cce ._dcb [_cce ._ac ]=_bdd ;_cce ._ac ++;_deb =!_deb ;if _bdd >=_cce ._ggc {break ;};};return nil ;};func (_egcc *Decoder )decodeRowType6 ()error {if _egcc ._ae {_egcc ._gc .Align ();
};if _egcc ._df {_egcc ._gc .Mark ();_cde ,_abd :=_egcc .tryFetchEOL ();if _abd !=nil {return _abd ;};if _cde {_cde ,_abd =_egcc .tryFetchEOL ();if _abd !=nil {return _abd ;};if _cde {return _e .EOF ;};};_egcc ._gc .Reset ();};return _egcc .decode2D ();
};func _ggf (_adbg []byte ,_debe ,_dab ,_dfg int )([]byte ,int ){_egcb :=_ega (_dab ,_dfg );_adbg ,_debe =_gggf (_adbg ,_debe ,_egcb );return _adbg ,_debe ;};func _ega (_feda ,_eee int )code {var _ecc code ;switch _eee -_feda {case -1:_ecc =_ba ;case -2:_ecc =_fa ;
case -3:_ecc =_gf ;case 0:_ecc =_ab ;case 1:_ecc =_fge ;case 2:_ecc =_afb ;case 3:_ecc =_gee ;};return _ecc ;};type code struct{Code uint16 ;BitsWritten int ;};var (_ebda byte =1;_gcce byte =0;);func (_fdd *Encoder )encodeG32D (_gcb [][]byte )[]byte {var _afe []byte ;
var _dec int ;for _daf :=0;_daf < len (_gcb );_daf +=_fdd .K {if _fdd .Rows > 0&&!_fdd .EndOfBlock &&_daf ==_fdd .Rows {break ;};_ccd ,_fca :=_ggb (_gcb [_daf ],_dec ,_da );_afe =_fdd .appendEncodedRow (_afe ,_ccd ,_dec );if _fdd .EncodedByteAlign {_fca =0;
};_dec =_fca ;for _cbe :=_daf +1;_cbe < (_daf +_fdd .K )&&_cbe < len (_gcb );_cbe ++{if _fdd .Rows > 0&&!_fdd .EndOfBlock &&_cbe ==_fdd .Rows {break ;};_fddg ,_bga :=_gggf (nil ,_dec ,_caf );var _fdb ,_edgc ,_ebbd int ;_fde :=-1;for _fde < len (_gcb [_cbe ]){_fdb =_cbg (_gcb [_cbe ],_fde );
_edgc =_gegg (_gcb [_cbe ],_gcb [_cbe -1],_fde );_ebbd =_cbg (_gcb [_cbe -1],_edgc );if _ebbd < _fdb {_fddg ,_bga =_cfae (_fddg ,_bga );_fde =_ebbd ;}else {if _b .Abs (float64 (_edgc -_fdb ))> 3{_fddg ,_bga ,_fde =_bgg (_gcb [_cbe ],_fddg ,_bga ,_fde ,_fdb );
}else {_fddg ,_bga =_ggf (_fddg ,_bga ,_fdb ,_edgc );_fde =_fdb ;};};};_afe =_fdd .appendEncodedRow (_afe ,_fddg ,_dec );if _fdd .EncodedByteAlign {_bga =0;};_dec =_bga %8;};};if _fdd .EndOfBlock {_ccf ,_ :=_ecfd (_dec );_afe =_fdd .appendEncodedRow (_afe ,_ccf ,_dec );
};return _afe ;};type tiffType int ;func _bgg (_geec ,_gfe []byte ,_baa ,_cad ,_agbc int )([]byte ,int ,int ){_bbb :=_cbg (_geec ,_agbc );_bec :=_cad >=0&&_geec [_cad ]==_ebda ||_cad ==-1;_gfe ,_baa =_gggf (_gfe ,_baa ,_ga );var _faefc int ;if _cad > -1{_faefc =_agbc -_cad ;
}else {_faefc =_agbc -_cad -1;};_gfe ,_baa =_cda (_gfe ,_baa ,_faefc ,_bec );_bec =!_bec ;_dbe :=_bbb -_agbc ;_gfe ,_baa =_cda (_gfe ,_baa ,_dbe ,_bec );_cad =_bbb ;return _gfe ,_baa ,_cad ;};type DecodeOptions struct{Columns int ;Rows int ;K int ;EncodedByteAligned bool ;
BlackIsOne bool ;EndOfBlock bool ;EndOfLine bool ;DamagedRowsBeforeError int ;};type Encoder struct{K int ;EndOfLine bool ;EncodedByteAlign bool ;Columns int ;Rows int ;EndOfBlock bool ;BlackIs1 bool ;DamagedRowsBeforeError int ;};func (_cdd *Decoder )decode2D ()error {_cdd ._gbc =_cdd ._ac ;
_cdd ._dcb ,_cdd ._gbb =_cdd ._gbb ,_cdd ._dcb ;_db :=true ;var (_cec bool ;_bff int ;_edag error ;);_cdd ._ac =0;_eecb :for _bff < _cdd ._ggc {_cfc :=_g ._bbg ;for {_cec ,_edag =_cdd ._gc .ReadBool ();if _edag !=nil {return _edag ;};_cfc =_cfc .walk (_cec );
if _cfc ==nil {continue _eecb ;};if !_cfc ._fcac {continue ;};switch _cfc ._baad {case _bb :var _eaa int ;if _db {_eaa ,_edag =_cdd .decodeRun (_d );}else {_eaa ,_edag =_cdd .decodeRun (_cf );};if _edag !=nil {return _edag ;};_bff +=_eaa ;_cdd ._dcb [_cdd ._ac ]=_bff ;
_cdd ._ac ++;if _db {_eaa ,_edag =_cdd .decodeRun (_cf );}else {_eaa ,_edag =_cdd .decodeRun (_d );};if _edag !=nil {return _edag ;};_bff +=_eaa ;_cdd ._dcb [_cdd ._ac ]=_bff ;_cdd ._ac ++;case _fce :_cdb :=_cdd .getNextChangingElement (_bff ,_db )+1;if _cdb >=_cdd ._gbc {_bff =_cdd ._ggc ;
}else {_bff =_cdd ._gbb [_cdb ];};default:_bea :=_cdd .getNextChangingElement (_bff ,_db );if _bea >=_cdd ._gbc ||_bea ==-1{_bff =_cdd ._ggc +_cfc ._baad ;}else {_bff =_cdd ._gbb [_bea ]+_cfc ._baad ;};_cdd ._dcb [_cdd ._ac ]=_bff ;_cdd ._ac ++;_db =!_db ;
};continue _eecb ;};};return nil ;};func (_adcc *treeNode )set (_gfc bool ,_add *treeNode ){if !_gfc {_adcc ._fdgc =_add ;}else {_adcc ._efgc =_add ;};};func _cda (_bba []byte ,_edce int ,_ebe int ,_gbbd bool )([]byte ,int ){var (_ccg code ;_efdb bool ;
);for !_efdb {_ccg ,_ebe ,_efdb =_egd (_ebe ,_gbbd );_bba ,_edce =_gggf (_bba ,_edce ,_ccg );};return _bba ,_edce ;};func (_gcca *Decoder )tryFetchRTC2D ()(_edff error ){_gcca ._gc .Mark ();var _aga bool ;for _agb :=0;_agb < 5;_agb ++{_aga ,_edff =_gcca .tryFetchEOL1 ();
if _edff !=nil {if _f .Is (_edff ,_e .EOF ){if _agb ==0{break ;};return _egf ;};};if _aga {continue ;};if _agb > 0{return _egf ;};break ;};if _aga {return _e .EOF ;};_gcca ._gc .Reset ();return _edff ;};type Decoder struct{_ggc int ;_bcg int ;_eb int ;
_beb []byte ;_fdg int ;_ada bool ;_bbcc bool ;_eag bool ;_cd bool ;_bcgf bool ;_df bool ;_ae bool ;_fcef int ;_caa int ;_gbb []int ;_dcb []int ;_gbc int ;_ac int ;_afg int ;_eagf int ;_gc *_c .Reader ;_de tiffType ;_fe error ;};func _gde (_gcf int )([]byte ,int ){var _ggcd []byte ;
for _bddb :=0;_bddb < 6;_bddb ++{_ggcd ,_gcf =_gggf (_ggcd ,_gcf ,_agd );};return _ggcd ,_gcf %8;};func (_bgaaa *treeNode )walk (_ece bool )*treeNode {if _ece {return _bgaaa ._efgc ;};return _bgaaa ._fdgc ;};func (_gefb *tree )fill (_bfb ,_def ,_adca int )error {_fag :=_gefb ._bbg ;
for _acef :=0;_acef < _bfb ;_acef ++{_egfd :=_bfb -1-_acef ;_cabd :=((_def >>uint (_egfd ))&1)!=0;_egfdg :=_fag .walk (_cabd );if _egfdg !=nil {if _egfdg ._fcac {return _f .New ("\u006e\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u006c\u0065\u0061\u0066\u002c\u0020\u006eo\u0020o\u0074\u0068\u0065\u0072\u0020\u0066\u006f\u006c\u006c\u006f\u0077\u0069\u006e\u0067");
};_fag =_egfdg ;continue ;};_egfdg =&treeNode {};if _acef ==_bfb -1{_egfdg ._baad =_adca ;_egfdg ._fcac =true ;};if _def ==0{_egfdg ._bebde =true ;};_fag .set (_cabd ,_egfdg );_fag =_egfdg ;};return nil ;};var _aaf =[...][]uint16 {{3,2},{1,4},{6,5},{7},{9,8},{10,11,12},{13,14},{15},{16,17,0,18,64},{24,25,23,22,19,20,21,1792,1856,1920},{1984,2048,2112,2176,2240,2304,2368,2432,2496,2560,52,55,56,59,60,320,384,448,53,54,50,51,44,45,46,47,57,58,61,256,48,49,62,63,30,31,32,33,40,41,128,192,26,27,28,29,34,35,36,37,38,39,42,43},{640,704,768,832,1280,1344,1408,1472,1536,1600,1664,1728,512,576,896,960,1024,1088,1152,1216}};
var (_egf =_f .New ("\u0063\u0063\u0069\u0074tf\u0061\u0078\u0020\u0063\u006f\u0072\u0072\u0075\u0070\u0074\u0065\u0064\u0020\u0052T\u0043");_agf =_f .New ("\u0063\u0063\u0069\u0074tf\u0061\u0078\u0020\u0045\u004f\u004c\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075n\u0064");
);func (_cbf *Decoder )decodeG32D ()error {_cbf ._gbc =_cbf ._ac ;_cbf ._dcb ,_cbf ._gbb =_cbf ._gbb ,_cbf ._dcb ;_bd :=true ;var (_egbg bool ;_ddf int ;_bcge error ;);_cbf ._ac =0;_eagd :for _ddf < _cbf ._ggc {_ace :=_g ._bbg ;for {_egbg ,_bcge =_cbf ._gc .ReadBool ();
if _bcge !=nil {return _bcge ;};_ace =_ace .walk (_egbg );if _ace ==nil {continue _eagd ;};if !_ace ._fcac {continue ;};switch _ace ._baad {case _bb :var _gcc int ;if _bd {_gcc ,_bcge =_cbf .decodeRun (_d );}else {_gcc ,_bcge =_cbf .decodeRun (_cf );};
if _bcge !=nil {return _bcge ;};_ddf +=_gcc ;_cbf ._dcb [_cbf ._ac ]=_ddf ;_cbf ._ac ++;if _bd {_gcc ,_bcge =_cbf .decodeRun (_cf );}else {_gcc ,_bcge =_cbf .decodeRun (_d );};if _bcge !=nil {return _bcge ;};_ddf +=_gcc ;_cbf ._dcb [_cbf ._ac ]=_ddf ;_cbf ._ac ++;
case _fce :_cba :=_cbf .getNextChangingElement (_ddf ,_bd )+1;if _cba >=_cbf ._gbc {_ddf =_cbf ._ggc ;}else {_ddf =_cbf ._gbb [_cba ];};default:_dcg :=_cbf .getNextChangingElement (_ddf ,_bd );if _dcg >=_cbf ._gbc ||_dcg ==-1{_ddf =_cbf ._ggc +_ace ._baad ;
}else {_ddf =_cbf ._gbb [_dcg ]+_ace ._baad ;};_cbf ._dcb [_cbf ._ac ]=_ddf ;_cbf ._ac ++;_bd =!_bd ;};continue _eagd ;};};return nil ;};func (_gef *Decoder )Read (in []byte )(int ,error ){if _gef ._fe !=nil {return 0,_gef ._fe ;};_fga :=len (in );var (_cca int ;
_dde int ;);for _fga !=0{if _gef ._caa >=_gef ._fcef {if _bae :=_gef .fetch ();_bae !=nil {_gef ._fe =_bae ;return 0,_bae ;};};if _gef ._fcef ==-1{return _cca ,_e .EOF ;};switch {case _fga <=_gef ._fcef -_gef ._caa :_adb :=_gef ._beb [_gef ._caa :_gef ._caa +_fga ];
for _ ,_eda :=range _adb {if !_gef ._cd {_eda =^_eda ;};in [_dde ]=_eda ;_dde ++;};_cca +=len (_adb );_gef ._caa +=len (_adb );return _cca ,nil ;default:_fcc :=_gef ._beb [_gef ._caa :];for _ ,_dgb :=range _fcc {if !_gef ._cd {_dgb =^_dgb ;};in [_dde ]=_dgb ;
_dde ++;};_cca +=len (_fcc );_gef ._caa +=len (_fcc );_fga -=len (_fcc );};};return _cca ,nil ;};