//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package ccittfax ;import (_e "errors";_ad "github.com/unidoc/unipdf/v3/internal/bitwise";_b "io";_d "math";);type tiffType int ;func init (){_f =&treeNode {_gcbd :true ,_dbc :_bf };_bb =&treeNode {_dbc :_cb ,_agbf :_f };_bb ._aacg =_bb ;_be =&tree {_ffag :&treeNode {}};
if _bfe :=_be .fillWithNode (12,0,_bb );_bfe !=nil {panic (_bfe .Error ());};if _eg :=_be .fillWithNode (12,1,_f );_eg !=nil {panic (_eg .Error ());};_ba =&tree {_ffag :&treeNode {}};for _fb :=0;_fb < len (_ag );_fb ++{for _fc :=0;_fc < len (_ag [_fb ]);
_fc ++{if _eb :=_ba .fill (_fb +2,int (_ag [_fb ][_fc ]),int (_ce [_fb ][_fc ]));_eb !=nil {panic (_eb .Error ());};};};if _egb :=_ba .fillWithNode (12,0,_bb );_egb !=nil {panic (_egb .Error ());};if _cbb :=_ba .fillWithNode (12,1,_f );_cbb !=nil {panic (_cbb .Error ());
};_c =&tree {_ffag :&treeNode {}};for _egc :=0;_egc < len (_aa );_egc ++{for _fca :=0;_fca < len (_aa [_egc ]);_fca ++{if _ae :=_c .fill (_egc +4,int (_aa [_egc ][_fca ]),int (_beb [_egc ][_fca ]));_ae !=nil {panic (_ae .Error ());};};};if _bg :=_c .fillWithNode (12,0,_bb );
_bg !=nil {panic (_bg .Error ());};if _gc :=_c .fillWithNode (12,1,_f );_gc !=nil {panic (_gc .Error ());};_fg =&tree {_ffag :&treeNode {}};if _gd :=_fg .fill (4,1,_beg );_gd !=nil {panic (_gd .Error ());};if _ac :=_fg .fill (3,1,_dd );_ac !=nil {panic (_ac .Error ());
};if _dc :=_fg .fill (1,1,0);_dc !=nil {panic (_dc .Error ());};if _gg :=_fg .fill (3,3,1);_gg !=nil {panic (_gg .Error ());};if _db :=_fg .fill (6,3,2);_db !=nil {panic (_db .Error ());};if _fga :=_fg .fill (7,3,3);_fga !=nil {panic (_fga .Error ());};
if _cbe :=_fg .fill (3,2,-1);_cbe !=nil {panic (_cbe .Error ());};if _bff :=_fg .fill (6,2,-2);_bff !=nil {panic (_bff .Error ());};if _ef :=_fg .fill (7,2,-3);_ef !=nil {panic (_ef .Error ());};};func _deb (_dcb ,_bccc int )code {var _fgbg code ;switch _bccc -_dcb {case -1:_fgbg =_fcg ;
case -2:_fgbg =_efa ;case -3:_fgbg =_afc ;case 0:_fgbg =_fa ;case 1:_fgbg =_gca ;case 2:_fgbg =_bd ;case 3:_fgbg =_gcd ;};return _fgbg ;};type tree struct{_ffag *treeNode };func _cbbc (_fcd []byte ,_abc int ,_cef code )([]byte ,int ){_dgeb :=0;for _dgeb < _cef .BitsWritten {_gbf :=_abc /8;
_aeg :=_abc %8;if _gbf >=len (_fcd ){_fcd =append (_fcd ,0);};_gff :=8-_aeg ;_ddg :=_cef .BitsWritten -_dgeb ;if _gff > _ddg {_gff =_ddg ;};if _dgeb < 8{_fcd [_gbf ]=_fcd [_gbf ]|byte (_cef .Code >>uint (8+_aeg -_dgeb ))&_cee [8-_gff -_aeg ];}else {_fcd [_gbf ]=_fcd [_gbf ]|(byte (_cef .Code <<uint (_dgeb -8))&_cee [8-_gff ])>>uint (_aeg );
};_abc +=_gff ;_dgeb +=_gff ;};return _fcd ,_abc ;};func _ccg (_gffd [][]byte )[][]byte {_bbed :=make ([]byte ,len (_gffd [0]));for _cca :=range _bbed {_bbed [_cca ]=_eed ;};_gffd =append (_gffd ,[]byte {});for _bee :=len (_gffd )-1;_bee > 0;_bee --{_gffd [_bee ]=_gffd [_bee -1];
};_gffd [0]=_bbed ;return _gffd ;};func (_gcc *Decoder )tryFetchEOL ()(bool ,error ){_dcg ,_dge :=_gcc ._gf .ReadBits (12);if _dge !=nil {return false ,_dge ;};return _dcg ==0x1,nil ;};func _bdca (_feea []byte ,_fced int )([]byte ,int ){return _cbbc (_feea ,_fced ,_afg )};
func init (){_bc =make (map[int ]code );_bc [0]=code {Code :13<<8|3<<6,BitsWritten :10};_bc [1]=code {Code :2<<(5+8),BitsWritten :3};_bc [2]=code {Code :3<<(6+8),BitsWritten :2};_bc [3]=code {Code :2<<(6+8),BitsWritten :2};_bc [4]=code {Code :3<<(5+8),BitsWritten :3};
_bc [5]=code {Code :3<<(4+8),BitsWritten :4};_bc [6]=code {Code :2<<(4+8),BitsWritten :4};_bc [7]=code {Code :3<<(3+8),BitsWritten :5};_bc [8]=code {Code :5<<(2+8),BitsWritten :6};_bc [9]=code {Code :4<<(2+8),BitsWritten :6};_bc [10]=code {Code :4<<(1+8),BitsWritten :7};
_bc [11]=code {Code :5<<(1+8),BitsWritten :7};_bc [12]=code {Code :7<<(1+8),BitsWritten :7};_bc [13]=code {Code :4<<8,BitsWritten :8};_bc [14]=code {Code :7<<8,BitsWritten :8};_bc [15]=code {Code :12<<8,BitsWritten :9};_bc [16]=code {Code :5<<8|3<<6,BitsWritten :10};
_bc [17]=code {Code :6<<8,BitsWritten :10};_bc [18]=code {Code :2<<8,BitsWritten :10};_bc [19]=code {Code :12<<8|7<<5,BitsWritten :11};_bc [20]=code {Code :13<<8,BitsWritten :11};_bc [21]=code {Code :13<<8|4<<5,BitsWritten :11};_bc [22]=code {Code :6<<8|7<<5,BitsWritten :11};
_bc [23]=code {Code :5<<8,BitsWritten :11};_bc [24]=code {Code :2<<8|7<<5,BitsWritten :11};_bc [25]=code {Code :3<<8,BitsWritten :11};_bc [26]=code {Code :12<<8|10<<4,BitsWritten :12};_bc [27]=code {Code :12<<8|11<<4,BitsWritten :12};_bc [28]=code {Code :12<<8|12<<4,BitsWritten :12};
_bc [29]=code {Code :12<<8|13<<4,BitsWritten :12};_bc [30]=code {Code :6<<8|8<<4,BitsWritten :12};_bc [31]=code {Code :6<<8|9<<4,BitsWritten :12};_bc [32]=code {Code :6<<8|10<<4,BitsWritten :12};_bc [33]=code {Code :6<<8|11<<4,BitsWritten :12};_bc [34]=code {Code :13<<8|2<<4,BitsWritten :12};
_bc [35]=code {Code :13<<8|3<<4,BitsWritten :12};_bc [36]=code {Code :13<<8|4<<4,BitsWritten :12};_bc [37]=code {Code :13<<8|5<<4,BitsWritten :12};_bc [38]=code {Code :13<<8|6<<4,BitsWritten :12};_bc [39]=code {Code :13<<8|7<<4,BitsWritten :12};_bc [40]=code {Code :6<<8|12<<4,BitsWritten :12};
_bc [41]=code {Code :6<<8|13<<4,BitsWritten :12};_bc [42]=code {Code :13<<8|10<<4,BitsWritten :12};_bc [43]=code {Code :13<<8|11<<4,BitsWritten :12};_bc [44]=code {Code :5<<8|4<<4,BitsWritten :12};_bc [45]=code {Code :5<<8|5<<4,BitsWritten :12};_bc [46]=code {Code :5<<8|6<<4,BitsWritten :12};
_bc [47]=code {Code :5<<8|7<<4,BitsWritten :12};_bc [48]=code {Code :6<<8|4<<4,BitsWritten :12};_bc [49]=code {Code :6<<8|5<<4,BitsWritten :12};_bc [50]=code {Code :5<<8|2<<4,BitsWritten :12};_bc [51]=code {Code :5<<8|3<<4,BitsWritten :12};_bc [52]=code {Code :2<<8|4<<4,BitsWritten :12};
_bc [53]=code {Code :3<<8|7<<4,BitsWritten :12};_bc [54]=code {Code :3<<8|8<<4,BitsWritten :12};_bc [55]=code {Code :2<<8|7<<4,BitsWritten :12};_bc [56]=code {Code :2<<8|8<<4,BitsWritten :12};_bc [57]=code {Code :5<<8|8<<4,BitsWritten :12};_bc [58]=code {Code :5<<8|9<<4,BitsWritten :12};
_bc [59]=code {Code :2<<8|11<<4,BitsWritten :12};_bc [60]=code {Code :2<<8|12<<4,BitsWritten :12};_bc [61]=code {Code :5<<8|10<<4,BitsWritten :12};_bc [62]=code {Code :6<<8|6<<4,BitsWritten :12};_bc [63]=code {Code :6<<8|7<<4,BitsWritten :12};_cd =make (map[int ]code );
_cd [0]=code {Code :53<<8,BitsWritten :8};_cd [1]=code {Code :7<<(2+8),BitsWritten :6};_cd [2]=code {Code :7<<(4+8),BitsWritten :4};_cd [3]=code {Code :8<<(4+8),BitsWritten :4};_cd [4]=code {Code :11<<(4+8),BitsWritten :4};_cd [5]=code {Code :12<<(4+8),BitsWritten :4};
_cd [6]=code {Code :14<<(4+8),BitsWritten :4};_cd [7]=code {Code :15<<(4+8),BitsWritten :4};_cd [8]=code {Code :19<<(3+8),BitsWritten :5};_cd [9]=code {Code :20<<(3+8),BitsWritten :5};_cd [10]=code {Code :7<<(3+8),BitsWritten :5};_cd [11]=code {Code :8<<(3+8),BitsWritten :5};
_cd [12]=code {Code :8<<(2+8),BitsWritten :6};_cd [13]=code {Code :3<<(2+8),BitsWritten :6};_cd [14]=code {Code :52<<(2+8),BitsWritten :6};_cd [15]=code {Code :53<<(2+8),BitsWritten :6};_cd [16]=code {Code :42<<(2+8),BitsWritten :6};_cd [17]=code {Code :43<<(2+8),BitsWritten :6};
_cd [18]=code {Code :39<<(1+8),BitsWritten :7};_cd [19]=code {Code :12<<(1+8),BitsWritten :7};_cd [20]=code {Code :8<<(1+8),BitsWritten :7};_cd [21]=code {Code :23<<(1+8),BitsWritten :7};_cd [22]=code {Code :3<<(1+8),BitsWritten :7};_cd [23]=code {Code :4<<(1+8),BitsWritten :7};
_cd [24]=code {Code :40<<(1+8),BitsWritten :7};_cd [25]=code {Code :43<<(1+8),BitsWritten :7};_cd [26]=code {Code :19<<(1+8),BitsWritten :7};_cd [27]=code {Code :36<<(1+8),BitsWritten :7};_cd [28]=code {Code :24<<(1+8),BitsWritten :7};_cd [29]=code {Code :2<<8,BitsWritten :8};
_cd [30]=code {Code :3<<8,BitsWritten :8};_cd [31]=code {Code :26<<8,BitsWritten :8};_cd [32]=code {Code :27<<8,BitsWritten :8};_cd [33]=code {Code :18<<8,BitsWritten :8};_cd [34]=code {Code :19<<8,BitsWritten :8};_cd [35]=code {Code :20<<8,BitsWritten :8};
_cd [36]=code {Code :21<<8,BitsWritten :8};_cd [37]=code {Code :22<<8,BitsWritten :8};_cd [38]=code {Code :23<<8,BitsWritten :8};_cd [39]=code {Code :40<<8,BitsWritten :8};_cd [40]=code {Code :41<<8,BitsWritten :8};_cd [41]=code {Code :42<<8,BitsWritten :8};
_cd [42]=code {Code :43<<8,BitsWritten :8};_cd [43]=code {Code :44<<8,BitsWritten :8};_cd [44]=code {Code :45<<8,BitsWritten :8};_cd [45]=code {Code :4<<8,BitsWritten :8};_cd [46]=code {Code :5<<8,BitsWritten :8};_cd [47]=code {Code :10<<8,BitsWritten :8};
_cd [48]=code {Code :11<<8,BitsWritten :8};_cd [49]=code {Code :82<<8,BitsWritten :8};_cd [50]=code {Code :83<<8,BitsWritten :8};_cd [51]=code {Code :84<<8,BitsWritten :8};_cd [52]=code {Code :85<<8,BitsWritten :8};_cd [53]=code {Code :36<<8,BitsWritten :8};
_cd [54]=code {Code :37<<8,BitsWritten :8};_cd [55]=code {Code :88<<8,BitsWritten :8};_cd [56]=code {Code :89<<8,BitsWritten :8};_cd [57]=code {Code :90<<8,BitsWritten :8};_cd [58]=code {Code :91<<8,BitsWritten :8};_cd [59]=code {Code :74<<8,BitsWritten :8};
_cd [60]=code {Code :75<<8,BitsWritten :8};_cd [61]=code {Code :50<<8,BitsWritten :8};_cd [62]=code {Code :51<<8,BitsWritten :8};_cd [63]=code {Code :52<<8,BitsWritten :8};_af =make (map[int ]code );_af [64]=code {Code :3<<8|3<<6,BitsWritten :10};_af [128]=code {Code :12<<8|8<<4,BitsWritten :12};
_af [192]=code {Code :12<<8|9<<4,BitsWritten :12};_af [256]=code {Code :5<<8|11<<4,BitsWritten :12};_af [320]=code {Code :3<<8|3<<4,BitsWritten :12};_af [384]=code {Code :3<<8|4<<4,BitsWritten :12};_af [448]=code {Code :3<<8|5<<4,BitsWritten :12};_af [512]=code {Code :3<<8|12<<3,BitsWritten :13};
_af [576]=code {Code :3<<8|13<<3,BitsWritten :13};_af [640]=code {Code :2<<8|10<<3,BitsWritten :13};_af [704]=code {Code :2<<8|11<<3,BitsWritten :13};_af [768]=code {Code :2<<8|12<<3,BitsWritten :13};_af [832]=code {Code :2<<8|13<<3,BitsWritten :13};_af [896]=code {Code :3<<8|18<<3,BitsWritten :13};
_af [960]=code {Code :3<<8|19<<3,BitsWritten :13};_af [1024]=code {Code :3<<8|20<<3,BitsWritten :13};_af [1088]=code {Code :3<<8|21<<3,BitsWritten :13};_af [1152]=code {Code :3<<8|22<<3,BitsWritten :13};_af [1216]=code {Code :119<<3,BitsWritten :13};_af [1280]=code {Code :2<<8|18<<3,BitsWritten :13};
_af [1344]=code {Code :2<<8|19<<3,BitsWritten :13};_af [1408]=code {Code :2<<8|20<<3,BitsWritten :13};_af [1472]=code {Code :2<<8|21<<3,BitsWritten :13};_af [1536]=code {Code :2<<8|26<<3,BitsWritten :13};_af [1600]=code {Code :2<<8|27<<3,BitsWritten :13};
_af [1664]=code {Code :3<<8|4<<3,BitsWritten :13};_af [1728]=code {Code :3<<8|5<<3,BitsWritten :13};_fbe =make (map[int ]code );_fbe [64]=code {Code :27<<(3+8),BitsWritten :5};_fbe [128]=code {Code :18<<(3+8),BitsWritten :5};_fbe [192]=code {Code :23<<(2+8),BitsWritten :6};
_fbe [256]=code {Code :55<<(1+8),BitsWritten :7};_fbe [320]=code {Code :54<<8,BitsWritten :8};_fbe [384]=code {Code :55<<8,BitsWritten :8};_fbe [448]=code {Code :100<<8,BitsWritten :8};_fbe [512]=code {Code :101<<8,BitsWritten :8};_fbe [576]=code {Code :104<<8,BitsWritten :8};
_fbe [640]=code {Code :103<<8,BitsWritten :8};_fbe [704]=code {Code :102<<8,BitsWritten :9};_fbe [768]=code {Code :102<<8|1<<7,BitsWritten :9};_fbe [832]=code {Code :105<<8,BitsWritten :9};_fbe [896]=code {Code :105<<8|1<<7,BitsWritten :9};_fbe [960]=code {Code :106<<8,BitsWritten :9};
_fbe [1024]=code {Code :106<<8|1<<7,BitsWritten :9};_fbe [1088]=code {Code :107<<8,BitsWritten :9};_fbe [1152]=code {Code :107<<8|1<<7,BitsWritten :9};_fbe [1216]=code {Code :108<<8,BitsWritten :9};_fbe [1280]=code {Code :108<<8|1<<7,BitsWritten :9};_fbe [1344]=code {Code :109<<8,BitsWritten :9};
_fbe [1408]=code {Code :109<<8|1<<7,BitsWritten :9};_fbe [1472]=code {Code :76<<8,BitsWritten :9};_fbe [1536]=code {Code :76<<8|1<<7,BitsWritten :9};_fbe [1600]=code {Code :77<<8,BitsWritten :9};_fbe [1664]=code {Code :24<<(2+8),BitsWritten :6};_fbe [1728]=code {Code :77<<8|1<<7,BitsWritten :9};
_cc =make (map[int ]code );_cc [1792]=code {Code :1<<8,BitsWritten :11};_cc [1856]=code {Code :1<<8|4<<5,BitsWritten :11};_cc [1920]=code {Code :1<<8|5<<5,BitsWritten :11};_cc [1984]=code {Code :1<<8|2<<4,BitsWritten :12};_cc [2048]=code {Code :1<<8|3<<4,BitsWritten :12};
_cc [2112]=code {Code :1<<8|4<<4,BitsWritten :12};_cc [2176]=code {Code :1<<8|5<<4,BitsWritten :12};_cc [2240]=code {Code :1<<8|6<<4,BitsWritten :12};_cc [2304]=code {Code :1<<8|7<<4,BitsWritten :12};_cc [2368]=code {Code :1<<8|12<<4,BitsWritten :12};_cc [2432]=code {Code :1<<8|13<<4,BitsWritten :12};
_cc [2496]=code {Code :1<<8|14<<4,BitsWritten :12};_cc [2560]=code {Code :1<<8|15<<4,BitsWritten :12};_cee =make (map[int ]byte );_cee [0]=0xFF;_cee [1]=0xFE;_cee [2]=0xFC;_cee [3]=0xF8;_cee [4]=0xF0;_cee [5]=0xE0;_cee [6]=0xC0;_cee [7]=0x80;_cee [8]=0x00;
};var (_bc map[int ]code ;_cd map[int ]code ;_af map[int ]code ;_fbe map[int ]code ;_cc map[int ]code ;_cee map[int ]byte ;_ab =code {Code :1<<4,BitsWritten :12};_cf =code {Code :3<<3,BitsWritten :13};_aec =code {Code :2<<3,BitsWritten :13};_afg =code {Code :1<<12,BitsWritten :4};
_dg =code {Code :1<<13,BitsWritten :3};_fa =code {Code :1<<15,BitsWritten :1};_fcg =code {Code :3<<13,BitsWritten :3};_efa =code {Code :3<<10,BitsWritten :6};_afc =code {Code :3<<9,BitsWritten :7};_gca =code {Code :2<<13,BitsWritten :3};_bd =code {Code :2<<10,BitsWritten :6};
_gcd =code {Code :2<<9,BitsWritten :7};);func (_ccd *Decoder )decodeRow ()(_fab error ){if !_ccd ._bda &&_ccd ._ddc > 0&&_ccd ._ddc ==_ccd ._cg {return _b .EOF ;};switch _ccd ._afe {case _bec :_fab =_ccd .decodeRowType2 ();case _egcf :_fab =_ccd .decodeRowType4 ();
case _bcf :_fab =_ccd .decodeRowType6 ();};if _fab !=nil {return _fab ;};_ceef :=0;_ccdd :=true ;_ccd ._ec =0;for _fce :=0;_fce < _ccd ._ca ;_fce ++{_egcd :=_ccd ._efd ;if _fce !=_ccd ._ca {_egcd =_ccd ._bbc [_fce ];};if _egcd > _ccd ._efd {_egcd =_ccd ._efd ;
};_ecb :=_ceef /8;for _ceef %8!=0&&_egcd -_ceef > 0{var _ebf byte ;if !_ccdd {_ebf =1<<uint (7-(_ceef %8));};_ccd ._acd [_ecb ]|=_ebf ;_ceef ++;};if _ceef %8==0{_ecb =_ceef /8;var _fad byte ;if !_ccdd {_fad =0xff;};for _egcd -_ceef > 7{_ccd ._acd [_ecb ]=_fad ;
_ceef +=8;_ecb ++;};};for _egcd -_ceef > 0{if _ceef %8==0{_ccd ._acd [_ecb ]=0;};var _fd byte ;if !_ccdd {_fd =1<<uint (7-(_ceef %8));};_ccd ._acd [_ecb ]|=_fd ;_ceef ++;};_ccdd =!_ccdd ;};if _ceef !=_ccd ._efd {return _e .New ("\u0073\u0075\u006d\u0020\u006f\u0066 \u0072\u0075\u006e\u002d\u006c\u0065\u006e\u0067\u0074\u0068\u0073\u0020\u0064\u006f\u0065\u0073\u0020\u006e\u006f\u0074 \u0065\u0071\u0075\u0061\u006c\u0020\u0073\u0063\u0061\u006e\u0020\u006c\u0069\u006ee\u0020w\u0069\u0064\u0074\u0068");
};_ccd ._gb =(_ceef +7)/8;_ccd ._cg ++;return nil ;};func (_ggdd *Decoder )decodeRowType2 ()error {if _ggdd ._bcg {_ggdd ._gf .Align ();};if _cea :=_ggdd .decode1D ();_cea !=nil {return _cea ;};return nil ;};func _gbgg (_bba []byte ,_afgd int )int {if _afgd >=len (_bba ){return _afgd ;
};if _afgd < -1{_afgd =-1;};var _cagd byte ;if _afgd > -1{_cagd =_bba [_afgd ];}else {_cagd =_eed ;};_gfd :=_afgd +1;for _gfd < len (_bba ){if _bba [_gfd ]!=_cagd {break ;};_gfd ++;};return _gfd ;};type treeNode struct{_aacg *treeNode ;_agbf *treeNode ;
_dbc int ;_afga bool ;_gcbd bool ;};func _baaf (_dgc int )([]byte ,int ){var _cedc []byte ;for _gfaa :=0;_gfaa < 6;_gfaa ++{_cedc ,_dgc =_cbbc (_cedc ,_dgc ,_cf );};return _cedc ,_dgc %8;};func (_bfffa *Decoder )decodeRun (_cff *tree )(int ,error ){var _gggg int ;
_fbde :=_cff ._ffag ;for {_ddf ,_dac :=_bfffa ._gf .ReadBool ();if _dac !=nil {return 0,_dac ;};_fbde =_fbde .walk (_ddf );if _fbde ==nil {return 0,_e .New ("\u0075\u006e\u006bno\u0077\u006e\u0020\u0063\u006f\u0064\u0065\u0020\u0069n\u0020H\u0075f\u0066m\u0061\u006e\u0020\u0052\u004c\u0045\u0020\u0073\u0074\u0072\u0065\u0061\u006d");
};if _fbde ._gcbd {_gggg +=_fbde ._dbc ;switch {case _fbde ._dbc >=64:_fbde =_cff ._ffag ;case _fbde ._dbc >=0:return _gggg ,nil ;default:return _bfffa ._efd ,nil ;};};};};func (_fag tiffType )String ()string {switch _fag {case _bec :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u004d\u006f\u0064i\u0066\u0069\u0065\u0064\u0048\u0075\u0066\u0066\u006d\u0061n\u0052\u006c\u0065";
case _egcf :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u0054\u0034";case _bcf :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u0054\u0036";default:return "\u0075n\u0064\u0065\u0066\u0069\u006e\u0065d";};};func (_agc *Decoder )tryFetchEOL1 ()(bool ,error ){_egbd ,_cdg :=_agc ._gf .ReadBits (13);
if _cdg !=nil {return false ,_cdg ;};return _egbd ==0x3,nil ;};func (_gef *Decoder )decode2D ()error {_gef ._bdd =_gef ._ca ;_gef ._bbc ,_gef ._ff =_gef ._ff ,_gef ._bbc ;_bcc :=true ;var (_fgb bool ;_abg int ;_edgb error ;);_gef ._ca =0;_acfe :for _abg < _gef ._efd {_ecf :=_fg ._ffag ;
for {_fgb ,_edgb =_gef ._gf .ReadBool ();if _edgb !=nil {return _edgb ;};_ecf =_ecf .walk (_fgb );if _ecf ==nil {continue _acfe ;};if !_ecf ._gcbd {continue ;};switch _ecf ._dbc {case _dd :var _ced int ;if _bcc {_ced ,_edgb =_gef .decodeRun (_c );}else {_ced ,_edgb =_gef .decodeRun (_ba );
};if _edgb !=nil {return _edgb ;};_abg +=_ced ;_gef ._bbc [_gef ._ca ]=_abg ;_gef ._ca ++;if _bcc {_ced ,_edgb =_gef .decodeRun (_ba );}else {_ced ,_edgb =_gef .decodeRun (_c );};if _edgb !=nil {return _edgb ;};_abg +=_ced ;_gef ._bbc [_gef ._ca ]=_abg ;
_gef ._ca ++;case _beg :_ffg :=_gef .getNextChangingElement (_abg ,_bcc )+1;if _ffg >=_gef ._bdd {_abg =_gef ._efd ;}else {_abg =_gef ._ff [_ffg ];};default:_ceeb :=_gef .getNextChangingElement (_abg ,_bcc );if _ceeb >=_gef ._bdd ||_ceeb ==-1{_abg =_gef ._efd +_ecf ._dbc ;
}else {_abg =_gef ._ff [_ceeb ]+_ecf ._dbc ;};_gef ._bbc [_gef ._ca ]=_abg ;_gef ._ca ++;_bcc =!_bcc ;};continue _acfe ;};};return nil ;};type DecodeOptions struct{Columns int ;Rows int ;K int ;EncodedByteAligned bool ;BlackIsOne bool ;EndOfBlock bool ;
EndOfLine bool ;DamagedRowsBeforeError int ;};var _beb =[...][]uint16 {{2,3,4,5,6,7},{128,8,9,64,10,11},{192,1664,16,17,13,14,15,1,12},{26,21,28,27,18,24,25,22,256,23,20,19},{33,34,35,36,37,38,31,32,29,53,54,39,40,41,42,43,44,30,61,62,63,0,320,384,45,59,60,46,49,50,51,52,55,56,57,58,448,512,640,576,47,48},{1472,1536,1600,1728,704,768,832,896,960,1024,1088,1152,1216,1280,1344,1408},{},{1792,1856,1920},{1984,2048,2112,2176,2240,2304,2368,2432,2496,2560}};
var (_eed byte =1;_ffe byte =0;);func (_bffb *Decoder )fetch ()error {if _bffb ._gb ==-1{return nil ;};if _bffb ._cga < _bffb ._gb {return nil ;};_bffb ._gb =0;_efc :=_bffb .decodeRow ();if _efc !=nil {if !_e .Is (_efc ,_b .EOF ){return _efc ;};if _bffb ._gb !=0{return _efc ;
};_bffb ._gb =-1;};_bffb ._cga =0;return nil ;};func (_ffc *Encoder )Encode (pixels [][]byte )[]byte {if _ffc .BlackIs1 {_eed =0;_ffe =1;}else {_eed =1;_ffe =0;};if _ffc .K ==0{return _ffc .encodeG31D (pixels );};if _ffc .K > 0{return _ffc .encodeG32D (pixels );
};if _ffc .K < 0{return _ffc .encodeG4 (pixels );};return nil ;};func (_bgb *Decoder )tryFetchRTC2D ()(_dgeg error ){_bgb ._gf .Mark ();var _ecfa bool ;for _gdeg :=0;_gdeg < 5;_gdeg ++{_ecfa ,_dgeg =_bgb .tryFetchEOL1 ();if _dgeg !=nil {if _e .Is (_dgeg ,_b .EOF ){if _gdeg ==0{break ;
};return _ebe ;};};if _ecfa {continue ;};if _gdeg > 0{return _ebe ;};break ;};if _ecfa {return _b .EOF ;};_bgb ._gf .Reset ();return _dgeg ;};func _abd (_ceaf int )([]byte ,int ){var _fdc []byte ;for _fcb :=0;_fcb < 2;_fcb ++{_fdc ,_ceaf =_cbbc (_fdc ,_ceaf ,_ab );
};return _fdc ,_ceaf %8;};func (_aacb *treeNode )set (_fea bool ,_bbaf *treeNode ){if !_fea {_aacb ._aacg =_bbaf ;}else {_aacb ._agbf =_bbaf ;};};var _ag =[...][]uint16 {{0x2,0x3},{0x2,0x3},{0x2,0x3},{0x3},{0x4,0x5},{0x4,0x5,0x7},{0x4,0x7},{0x18},{0x17,0x18,0x37,0x8,0xf},{0x17,0x18,0x28,0x37,0x67,0x68,0x6c,0x8,0xc,0xd},{0x12,0x13,0x14,0x15,0x16,0x17,0x1c,0x1d,0x1e,0x1f,0x24,0x27,0x28,0x2b,0x2c,0x33,0x34,0x35,0x37,0x38,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0xc8,0xc9,0xca,0xcb,0xcc,0xcd,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xda,0xdb},{0x4a,0x4b,0x4c,0x4d,0x52,0x53,0x54,0x55,0x5a,0x5b,0x64,0x65,0x6c,0x6d,0x72,0x73,0x74,0x75,0x76,0x77}};
var _aa =[...][]uint16 {{0x7,0x8,0xb,0xc,0xe,0xf},{0x12,0x13,0x14,0x1b,0x7,0x8},{0x17,0x18,0x2a,0x2b,0x3,0x34,0x35,0x7,0x8},{0x13,0x17,0x18,0x24,0x27,0x28,0x2b,0x3,0x37,0x4,0x8,0xc},{0x12,0x13,0x14,0x15,0x16,0x17,0x1a,0x1b,0x2,0x24,0x25,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x3,0x32,0x33,0x34,0x35,0x36,0x37,0x4,0x4a,0x4b,0x5,0x52,0x53,0x54,0x55,0x58,0x59,0x5a,0x5b,0x64,0x65,0x67,0x68,0xa,0xb},{0x98,0x99,0x9a,0x9b,0xcc,0xcd,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8,0xd9,0xda,0xdb},{},{0x8,0xc,0xd},{0x12,0x13,0x14,0x15,0x16,0x17,0x1c,0x1d,0x1e,0x1f}};
func _bde (_dced []byte ,_gdae int ,_gdf int ,_egf bool )([]byte ,int ){var (_fcag code ;_gfg bool ;);for !_gfg {_fcag ,_gdf ,_gfg =_dff (_gdf ,_egf );_dced ,_gdae =_cbbc (_dced ,_gdae ,_fcag );};return _dced ,_gdae ;};type Encoder struct{K int ;EndOfLine bool ;
EncodedByteAlign bool ;Columns int ;Rows int ;EndOfBlock bool ;BlackIs1 bool ;DamagedRowsBeforeError int ;};func (_bdad *Encoder )encodeG4 (_abb [][]byte )[]byte {_gcb :=make ([][]byte ,len (_abb ));copy (_gcb ,_abb );_gcb =_ccg (_gcb );var _gdee []byte ;
var _dbg int ;for _gggb :=1;_gggb < len (_gcb );_gggb ++{if _bdad .Rows > 0&&!_bdad .EndOfBlock &&_gggb ==(_bdad .Rows +1){break ;};var _ecc []byte ;var _gdc ,_bge ,_ceac int ;_gfae :=_dbg ;_ffb :=-1;for _ffb < len (_gcb [_gggb ]){_gdc =_gbgg (_gcb [_gggb ],_ffb );
_bge =_ded (_gcb [_gggb ],_gcb [_gggb -1],_ffb );_ceac =_gbgg (_gcb [_gggb -1],_bge );if _ceac < _gdc {_ecc ,_gfae =_cbbc (_ecc ,_gfae ,_afg );_ffb =_ceac ;}else {if _d .Abs (float64 (_bge -_gdc ))> 3{_ecc ,_gfae ,_ffb =_cbbca (_gcb [_gggb ],_ecc ,_gfae ,_ffb ,_gdc );
}else {_ecc ,_gfae =_ece (_ecc ,_gfae ,_gdc ,_bge );_ffb =_gdc ;};};};_gdee =_bdad .appendEncodedRow (_gdee ,_ecc ,_dbg );if _bdad .EncodedByteAlign {_gfae =0;};_dbg =_gfae %8;};if _bdad .EndOfBlock {_aeb ,_ :=_abd (_dbg );_gdee =_bdad .appendEncodedRow (_gdee ,_aeb ,_dbg );
};return _gdee ;};func (_gda *Decoder )Read (in []byte )(int ,error ){if _gda ._edg !=nil {return 0,_gda ._edg ;};_aef :=len (in );var (_bcb int ;_df int ;);for _aef !=0{if _gda ._cga >=_gda ._gb {if _gbb :=_gda .fetch ();_gbb !=nil {_gda ._edg =_gbb ;
return 0,_gbb ;};};if _gda ._gb ==-1{return _bcb ,_b .EOF ;};switch {case _aef <=_gda ._gb -_gda ._cga :_fe :=_gda ._acd [_gda ._cga :_gda ._cga +_aef ];for _ ,_ea :=range _fe {if !_gda ._efab {_ea =^_ea ;};in [_df ]=_ea ;_df ++;};_bcb +=len (_fe );_gda ._cga +=len (_fe );
return _bcb ,nil ;default:_ggd :=_gda ._acd [_gda ._cga :];for _ ,_bbe :=range _ggd {if !_gda ._efab {_bbe =^_bbe ;};in [_df ]=_bbe ;_df ++;};_bcb +=len (_ggd );_gda ._cga +=len (_ggd );_aef -=len (_ggd );};};return _bcb ,nil ;};func (_faf *Decoder )decoderRowType41D ()error {if _faf ._bcg {_faf ._gf .Align ();
};_faf ._gf .Mark ();var (_agb bool ;_dbd error ;);if _faf ._ed {_agb ,_dbd =_faf .tryFetchEOL ();if _dbd !=nil {return _dbd ;};if !_agb {return _fcc ;};}else {_agb ,_dbd =_faf .looseFetchEOL ();if _dbd !=nil {return _dbd ;};};if !_agb {_faf ._gf .Reset ();
};if _agb &&_faf ._bda {_faf ._gf .Mark ();for _cfa :=0;_cfa < 5;_cfa ++{_agb ,_dbd =_faf .tryFetchEOL ();if _dbd !=nil {if _e .Is (_dbd ,_b .EOF ){if _cfa ==0{break ;};return _ebe ;};};if _agb {continue ;};if _cfa > 0{return _ebe ;};break ;};if _agb {return _b .EOF ;
};_faf ._gf .Reset ();};if _dbd =_faf .decode1D ();_dbd !=nil {return _dbd ;};return nil ;};func (_bbcd *Decoder )getNextChangingElement (_fef int ,_gbg bool )int {_ffa :=0;if !_gbg {_ffa =1;};_cbf :=int (uint32 (_bbcd ._ec )&0xFFFFFFFE)+_ffa ;if _cbf > 2{_cbf -=2;
};if _fef ==0{return _cbf ;};for _bgd :=_cbf ;_bgd < _bbcd ._bdd ;_bgd +=2{if _fef < _bbcd ._ff [_bgd ]{_bbcd ._ec =_bgd ;return _bgd ;};};return -1;};const (_ tiffType =iota ;_bec ;_egcf ;_bcf ;);func (_adg *Decoder )looseFetchEOL ()(bool ,error ){_gde ,_baa :=_adg ._gf .ReadBits (12);
if _baa !=nil {return false ,_baa ;};switch _gde {case 0x1:return true ,nil ;case 0x0:for {_abge ,_fadd :=_adg ._gf .ReadBool ();if _fadd !=nil {return false ,_fadd ;};if _abge {return true ,nil ;};};default:return false ,nil ;};};func _efac (_dcdc ,_fdg []byte ,_fafe int ,_abde bool )int {_bfeg :=_gbgg (_fdg ,_fafe );
if _bfeg < len (_fdg )&&(_fafe ==-1&&_fdg [_bfeg ]==_eed ||_fafe >=0&&_fafe < len (_dcdc )&&_dcdc [_fafe ]==_fdg [_bfeg ]||_fafe >=len (_dcdc )&&_abde &&_fdg [_bfeg ]==_eed ||_fafe >=len (_dcdc )&&!_abde &&_fdg [_bfeg ]==_ffe ){_bfeg =_gbgg (_fdg ,_bfeg );
};return _bfeg ;};func _bdbf (_aacc int )([]byte ,int ){var _eee []byte ;for _dce :=0;_dce < 6;_dce ++{_eee ,_aacc =_cbbc (_eee ,_aacc ,_ab );};return _eee ,_aacc %8;};var (_ebe =_e .New ("\u0063\u0063\u0069\u0074tf\u0061\u0078\u0020\u0063\u006f\u0072\u0072\u0075\u0070\u0074\u0065\u0064\u0020\u0052T\u0043");
_fcc =_e .New ("\u0063\u0063\u0069\u0074tf\u0061\u0078\u0020\u0045\u004f\u004c\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075n\u0064"););func _cbbca (_ebgf ,_fabf []byte ,_afcd ,_cfab ,_egfb int )([]byte ,int ,int ){_fge :=_gbgg (_ebgf ,_egfb );_bcbf :=_cfab >=0&&_ebgf [_cfab ]==_eed ||_cfab ==-1;
_fabf ,_afcd =_cbbc (_fabf ,_afcd ,_dg );var _aga int ;if _cfab > -1{_aga =_egfb -_cfab ;}else {_aga =_egfb -_cfab -1;};_fabf ,_afcd =_bde (_fabf ,_afcd ,_aga ,_bcbf );_bcbf =!_bcbf ;_bac :=_fge -_egfb ;_fabf ,_afcd =_bde (_fabf ,_afcd ,_bac ,_bcbf );_cfab =_fge ;
return _fabf ,_afcd ,_cfab ;};func (_dbgc *Encoder )appendEncodedRow (_egcfd ,_ccdf []byte ,_bgbb int )[]byte {if len (_egcfd )> 0&&_bgbb !=0&&!_dbgc .EncodedByteAlign {_egcfd [len (_egcfd )-1]=_egcfd [len (_egcfd )-1]|_ccdf [0];_egcfd =append (_egcfd ,_ccdf [1:]...);
}else {_egcfd =append (_egcfd ,_ccdf ...);};return _egcfd ;};func _ded (_aae ,_dfe []byte ,_ebd int )int {_ddfc :=_gbgg (_dfe ,_ebd );if _ddfc < len (_dfe )&&(_ebd ==-1&&_dfe [_ddfc ]==_eed ||_ebd >=0&&_ebd < len (_aae )&&_aae [_ebd ]==_dfe [_ddfc ]||_ebd >=len (_aae )&&_aae [_ebd -1]!=_dfe [_ddfc ]){_ddfc =_gbgg (_dfe ,_ddfc );
};return _ddfc ;};func _cec (_bdg []byte ,_ebb int ,_bad code )([]byte ,int ){_aba :=true ;var _afad []byte ;_afad ,_ebb =_cbbc (nil ,_ebb ,_bad );_gdcb :=0;var _adee int ;for _gdcb < len (_bdg ){_adee ,_gdcb =_dgec (_bdg ,_aba ,_gdcb );_afad ,_ebb =_bde (_afad ,_ebb ,_adee ,_aba );
_aba =!_aba ;};return _afad ,_ebb %8;};var _ce =[...][]uint16 {{3,2},{1,4},{6,5},{7},{9,8},{10,11,12},{13,14},{15},{16,17,0,18,64},{24,25,23,22,19,20,21,1792,1856,1920},{1984,2048,2112,2176,2240,2304,2368,2432,2496,2560,52,55,56,59,60,320,384,448,53,54,50,51,44,45,46,47,57,58,61,256,48,49,62,63,30,31,32,33,40,41,128,192,26,27,28,29,34,35,36,37,38,39,42,43},{640,704,768,832,1280,1344,1408,1472,1536,1600,1664,1728,512,576,896,960,1024,1088,1152,1216}};
func (_ggg *Decoder )decodeRowType6 ()error {if _ggg ._bcg {_ggg ._gf .Align ();};if _ggg ._bda {_ggg ._gf .Mark ();_dfa ,_afb :=_ggg .tryFetchEOL ();if _afb !=nil {return _afb ;};if _dfa {_dfa ,_afb =_ggg .tryFetchEOL ();if _afb !=nil {return _afb ;};
if _dfa {return _b .EOF ;};};_ggg ._gf .Reset ();};return _ggg .decode2D ();};func _ece (_cgg []byte ,_afec ,_afbg ,_edf int )([]byte ,int ){_eec :=_deb (_afbg ,_edf );_cgg ,_afec =_cbbc (_cgg ,_afec ,_eec );return _cgg ,_afec ;};func NewDecoder (data []byte ,options DecodeOptions )(*Decoder ,error ){_ccb :=&Decoder {_gf :_ad .NewReader (data ),_efd :options .Columns ,_ddc :options .Rows ,_cgb :options .DamagedRowsBeforeError ,_acd :make ([]byte ,(options .Columns +7)/8),_ff :make ([]int ,options .Columns +2),_bbc :make ([]int ,options .Columns +2),_bcg :options .EncodedByteAligned ,_efab :options .BlackIsOne ,_ed :options .EndOfLine ,_bda :options .EndOfBlock };
switch {case options .K ==0:_ccb ._afe =_egcf ;if len (data )< 20{return nil ,_e .New ("\u0074o\u006f\u0020\u0073\u0068o\u0072\u0074\u0020\u0063\u0063i\u0074t\u0066a\u0078\u0020\u0073\u0074\u0072\u0065\u0061m");};_ade :=data [:20];if _ade [0]!=0||(_ade [1]>>4!=1&&_ade [1]!=1){_ccb ._afe =_bec ;
_bfff :=(uint16 (_ade [0])<<8+uint16 (_ade [1]&0xff))>>4;for _bffc :=12;_bffc < 160;_bffc ++{_bfff =(_bfff <<1)+uint16 ((_ade [_bffc /8]>>uint16 (7-(_bffc %8)))&0x01);if _bfff &0xfff==1{_ccb ._afe =_egcf ;break ;};};};case options .K < 0:_ccb ._afe =_bcf ;
case options .K > 0:_ccb ._afe =_egcf ;_ccb ._acf =true ;};switch _ccb ._afe {case _bec ,_egcf ,_bcf :default:return nil ,_e .New ("\u0075\u006ek\u006e\u006f\u0077\u006e\u0020\u0063\u0063\u0069\u0074\u0074\u0066\u0061\u0078\u002e\u0044\u0065\u0063\u006f\u0064\u0065\u0072\u0020ty\u0070\u0065");
};return _ccb ,nil ;};func _dgec (_cgf []byte ,_afgc bool ,_aeca int )(int ,int ){_daa :=0;for _aeca < len (_cgf ){if _afgc {if _cgf [_aeca ]!=_eed {break ;};}else {if _cgf [_aeca ]!=_ffe {break ;};};_daa ++;_aeca ++;};return _daa ,_aeca ;};func (_agcb *tree )fillWithNode (_bccg ,_acfa int ,_fbbb *treeNode )error {_gga :=_agcb ._ffag ;
for _ecg :=0;_ecg < _bccg ;_ecg ++{_abf :=uint (_bccg -1-_ecg );_egca :=((_acfa >>_abf )&1)!=0;_ccae :=_gga .walk (_egca );if _ccae !=nil {if _ccae ._gcbd {return _e .New ("\u006e\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u006c\u0065\u0061\u0066\u002c\u0020\u006eo\u0020o\u0074\u0068\u0065\u0072\u0020\u0066\u006f\u006c\u006c\u006f\u0077\u0069\u006e\u0067");
};_gga =_ccae ;continue ;};if _ecg ==_bccg -1{_ccae =_fbbb ;}else {_ccae =&treeNode {};};if _acfa ==0{_ccae ._afga =true ;};_gga .set (_egca ,_ccae );_gga =_ccae ;};return nil ;};type code struct{Code uint16 ;BitsWritten int ;};var (_f *treeNode ;_bb *treeNode ;
_ba *tree ;_c *tree ;_be *tree ;_fg *tree ;_bf =-2000;_cb =-1000;_beg =-3000;_dd =-4000;);func (_bcd *Decoder )decodeG32D ()error {_bcd ._bdd =_bcd ._ca ;_bcd ._bbc ,_bcd ._ff =_bcd ._ff ,_bcd ._bbc ;_fbb :=true ;var (_agbd bool ;_dfg int ;_ebg error ;
);_bcd ._ca =0;_bcda :for _dfg < _bcd ._efd {_aab :=_fg ._ffag ;for {_agbd ,_ebg =_bcd ._gf .ReadBool ();if _ebg !=nil {return _ebg ;};_aab =_aab .walk (_agbd );if _aab ==nil {continue _bcda ;};if !_aab ._gcbd {continue ;};switch _aab ._dbc {case _dd :var _gea int ;
if _fbb {_gea ,_ebg =_bcd .decodeRun (_c );}else {_gea ,_ebg =_bcd .decodeRun (_ba );};if _ebg !=nil {return _ebg ;};_dfg +=_gea ;_bcd ._bbc [_bcd ._ca ]=_dfg ;_bcd ._ca ++;if _fbb {_gea ,_ebg =_bcd .decodeRun (_ba );}else {_gea ,_ebg =_bcd .decodeRun (_c );
};if _ebg !=nil {return _ebg ;};_dfg +=_gea ;_bcd ._bbc [_bcd ._ca ]=_dfg ;_bcd ._ca ++;case _beg :_aac :=_bcd .getNextChangingElement (_dfg ,_fbb )+1;if _aac >=_bcd ._bdd {_dfg =_bcd ._efd ;}else {_dfg =_bcd ._ff [_aac ];};default:_fde :=_bcd .getNextChangingElement (_dfg ,_fbb );
if _fde >=_bcd ._bdd ||_fde ==-1{_dfg =_bcd ._efd +_aab ._dbc ;}else {_dfg =_bcd ._ff [_fde ]+_aab ._dbc ;};_bcd ._bbc [_bcd ._ca ]=_dfg ;_bcd ._ca ++;_fbb =!_fbb ;};continue _bcda ;};};return nil ;};func (_aace *treeNode )walk (_feg bool )*treeNode {if _feg {return _aace ._agbf ;
};return _aace ._aacg ;};type Decoder struct{_efd int ;_ddc int ;_cg int ;_acd []byte ;_cgb int ;_acf bool ;_cbeg bool ;_ge bool ;_efab bool ;_ed bool ;_bda bool ;_bcg bool ;_gb int ;_cga int ;_ff []int ;_bbc []int ;_bdd int ;_ca int ;_bbd int ;_ec int ;
_gf *_ad .Reader ;_afe tiffType ;_edg error ;};func (_gfa *Encoder )encodeG32D (_aed [][]byte )[]byte {var _fefc []byte ;var _ggc int ;for _cfg :=0;_cfg < len (_aed );_cfg +=_gfa .K {if _gfa .Rows > 0&&!_gfa .EndOfBlock &&_cfg ==_gfa .Rows {break ;};_fee ,_dcd :=_cec (_aed [_cfg ],_ggc ,_cf );
_fefc =_gfa .appendEncodedRow (_fefc ,_fee ,_ggc );if _gfa .EncodedByteAlign {_dcd =0;};_ggc =_dcd ;for _fdf :=_cfg +1;_fdf < (_cfg +_gfa .K )&&_fdf < len (_aed );_fdf ++{if _gfa .Rows > 0&&!_gfa .EndOfBlock &&_fdf ==_gfa .Rows {break ;};_ccc ,_fagg :=_cbbc (nil ,_ggc ,_aec );
var _cbff ,_gdgg ,_cfd int ;_aaa :=-1;for _aaa < len (_aed [_fdf ]){_cbff =_gbgg (_aed [_fdf ],_aaa );_gdgg =_ded (_aed [_fdf ],_aed [_fdf -1],_aaa );_cfd =_gbgg (_aed [_fdf -1],_gdgg );if _cfd < _cbff {_ccc ,_fagg =_bdca (_ccc ,_fagg );_aaa =_cfd ;}else {if _d .Abs (float64 (_gdgg -_cbff ))> 3{_ccc ,_fagg ,_aaa =_cbbca (_aed [_fdf ],_ccc ,_fagg ,_aaa ,_cbff );
}else {_ccc ,_fagg =_ece (_ccc ,_fagg ,_cbff ,_gdgg );_aaa =_cbff ;};};};_fefc =_gfa .appendEncodedRow (_fefc ,_ccc ,_ggc );if _gfa .EncodedByteAlign {_fagg =0;};_ggc =_fagg %8;};};if _gfa .EndOfBlock {_ffee ,_ :=_baaf (_ggc );_fefc =_gfa .appendEncodedRow (_fefc ,_ffee ,_ggc );
};return _fefc ;};func _dff (_add int ,_eeg bool )(code ,int ,bool ){if _add < 64{if _eeg {return _cd [_add ],0,true ;};return _bc [_add ],0,true ;};_fgg :=_add /64;if _fgg > 40{return _cc [2560],_add -2560,false ;};if _fgg > 27{return _cc [_fgg *64],_add -_fgg *64,false ;
};if _eeg {return _fbe [_fgg *64],_add -_fgg *64,false ;};return _af [_fgg *64],_add -_fgg *64,false ;};func (_feff *tree )fill (_bbb ,_acfb ,_ga int )error {_ace :=_feff ._ffag ;for _gge :=0;_gge < _bbb ;_gge ++{_ege :=_bbb -1-_gge ;_dag :=((_acfb >>uint (_ege ))&1)!=0;
_bae :=_ace .walk (_dag );if _bae !=nil {if _bae ._gcbd {return _e .New ("\u006e\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u006c\u0065\u0061\u0066\u002c\u0020\u006eo\u0020o\u0074\u0068\u0065\u0072\u0020\u0066\u006f\u006c\u006c\u006f\u0077\u0069\u006e\u0067");
};_ace =_bae ;continue ;};_bae =&treeNode {};if _gge ==_bbb -1{_bae ._dbc =_ga ;_bae ._gcbd =true ;};if _acfb ==0{_bae ._afga =true ;};_ace .set (_dag ,_bae );_ace =_bae ;};return nil ;};func (_dae *Decoder )decode1D ()error {var (_fbbc int ;_geaf error ;
);_bga :=true ;_dae ._ca =0;for {var _fbd int ;if _bga {_fbd ,_geaf =_dae .decodeRun (_c );}else {_fbd ,_geaf =_dae .decodeRun (_ba );};if _geaf !=nil {return _geaf ;};_fbbc +=_fbd ;_dae ._bbc [_dae ._ca ]=_fbbc ;_dae ._ca ++;_bga =!_bga ;if _fbbc >=_dae ._efd {break ;
};};return nil ;};func (_bdc *Decoder )decodeRowType4 ()error {if !_bdc ._acf {return _bdc .decoderRowType41D ();};if _bdc ._bcg {_bdc ._gf .Align ();};_bdc ._gf .Mark ();_cag ,_ee :=_bdc .tryFetchEOL ();if _ee !=nil {return _ee ;};if !_cag &&_bdc ._ed {_bdc ._bbd ++;
if _bdc ._bbd > _bdc ._cgb {return _fcc ;};_bdc ._gf .Reset ();};if !_cag {_bdc ._gf .Reset ();};_eaf ,_ee :=_bdc ._gf .ReadBool ();if _ee !=nil {return _ee ;};if _eaf {if _cag &&_bdc ._bda {if _ee =_bdc .tryFetchRTC2D ();_ee !=nil {return _ee ;};};_ee =_bdc .decode1D ();
}else {_ee =_bdc .decode2D ();};if _ee !=nil {return _ee ;};return nil ;};func (_caf *Encoder )encodeG31D (_aea [][]byte )[]byte {var _gee []byte ;_fbbf :=0;for _gdg :=range _aea {if _caf .Rows > 0&&!_caf .EndOfBlock &&_gdg ==_caf .Rows {break ;};_bebb ,_adb :=_cec (_aea [_gdg ],_fbbf ,_ab );
_gee =_caf .appendEncodedRow (_gee ,_bebb ,_fbbf );if _caf .EncodedByteAlign {_adb =0;};_fbbf =_adb ;};if _caf .EndOfBlock {_efcd ,_ :=_bdbf (_fbbf );_gee =_caf .appendEncodedRow (_gee ,_efcd ,_fbbf );};return _gee ;};