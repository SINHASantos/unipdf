//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package ccittfax ;import (_a "errors";_g "github.com/unidoc/unipdf/v3/internal/bitwise";_d "io";_bb "math";);func (_aeg *Decoder )looseFetchEOL ()(bool ,error ){_eea ,_eca :=_aeg ._bcfb .ReadBits (12);if _eca !=nil {return false ,_eca ;};switch _eea {case 0x1:return true ,nil ;
case 0x0:for {_dadc ,_baae :=_aeg ._bcfb .ReadBool ();if _baae !=nil {return false ,_baae ;};if _dadc {return true ,nil ;};};default:return false ,nil ;};};func init (){_ba =&treeNode {_fbf :true ,_cggd :_c };_f =&treeNode {_cggd :_fa ,_dcb :_ba };_f ._gbcd =_f ;
_ga =&tree {_aaea :&treeNode {}};if _gg :=_ga .fillWithNode (12,0,_f );_gg !=nil {panic (_gg .Error ());};if _ag :=_ga .fillWithNode (12,1,_ba );_ag !=nil {panic (_ag .Error ());};_da =&tree {_aaea :&treeNode {}};for _df :=0;_df < len (_dd );_df ++{for _agd :=0;
_agd < len (_dd [_df ]);_agd ++{if _ge :=_da .fill (_df +2,int (_dd [_df ][_agd ]),int (_bf [_df ][_agd ]));_ge !=nil {panic (_ge .Error ());};};};if _ff :=_da .fillWithNode (12,0,_f );_ff !=nil {panic (_ff .Error ());};if _bee :=_da .fillWithNode (12,1,_ba );
_bee !=nil {panic (_bee .Error ());};_ab =&tree {_aaea :&treeNode {}};for _aa :=0;_aa < len (_cg );_aa ++{for _ce :=0;_ce < len (_cg [_aa ]);_ce ++{if _ec :=_ab .fill (_aa +4,int (_cg [_aa ][_ce ]),int (_gd [_aa ][_ce ]));_ec !=nil {panic (_ec .Error ());
};};};if _eg :=_ab .fillWithNode (12,0,_f );_eg !=nil {panic (_eg .Error ());};if _dad :=_ab .fillWithNode (12,1,_ba );_dad !=nil {panic (_dad .Error ());};_fg =&tree {_aaea :&treeNode {}};if _daa :=_fg .fill (4,1,_e );_daa !=nil {panic (_daa .Error ());
};if _cd :=_fg .fill (3,1,_fb );_cd !=nil {panic (_cd .Error ());};if _bae :=_fg .fill (1,1,0);_bae !=nil {panic (_bae .Error ());};if _fbc :=_fg .fill (3,3,1);_fbc !=nil {panic (_fbc .Error ());};if _aab :=_fg .fill (6,3,2);_aab !=nil {panic (_aab .Error ());
};if _de :=_fg .fill (7,3,3);_de !=nil {panic (_de .Error ());};if _gab :=_fg .fill (3,2,-1);_gab !=nil {panic (_gab .Error ());};if _dfe :=_fg .fill (6,2,-2);_dfe !=nil {panic (_dfe .Error ());};if _eb :=_fg .fill (7,2,-3);_eb !=nil {panic (_eb .Error ());
};};func _efag (_dbab []byte ,_bfd ,_gdd ,_gdbc int )([]byte ,int ){_aagf :=_aec (_gdd ,_gdbc );_dbab ,_bfd =_fda (_dbab ,_bfd ,_aagf );return _dbab ,_bfd ;};func _abf (_dacb int ,_gdc bool )(code ,int ,bool ){if _dacb < 64{if _gdc {return _geg [_dacb ],0,true ;
};return _ecf [_dacb ],0,true ;};_acc :=_dacb /64;if _acc > 40{return _ged [2560],_dacb -2560,false ;};if _acc > 27{return _ged [_acc *64],_dacb -_acc *64,false ;};if _gdc {return _fe [_acc *64],_dacb -_acc *64,false ;};return _cf [_acc *64],_dacb -_acc *64,false ;
};func (_fad *Decoder )decodeRow ()(_fce error ){if !_fad ._dc &&_fad ._eff > 0&&_fad ._eff ==_fad ._bbe {return _d .EOF ;};switch _fad ._ceb {case _fcc :_fce =_fad .decodeRowType2 ();case _cb :_fce =_fad .decodeRowType4 ();case _fgf :_fce =_fad .decodeRowType6 ();
};if _fce !=nil {return _fce ;};_db :=0;_cfe :=true ;_fad ._fbge =0;for _gea :=0;_gea < _fad ._ac ;_gea ++{_egc :=_fad ._efa ;if _gea !=_fad ._ac {_egc =_fad ._cfa [_gea ];};if _egc > _fad ._efa {_egc =_fad ._efa ;};_fd :=_db /8;for _db %8!=0&&_egc -_db > 0{var _ddg byte ;
if !_cfe {_ddg =1<<uint (7-(_db %8));};_fad ._adb [_fd ]|=_ddg ;_db ++;};if _db %8==0{_fd =_db /8;var _bgdg byte ;if !_cfe {_bgdg =0xff;};for _egc -_db > 7{_fad ._adb [_fd ]=_bgdg ;_db +=8;_fd ++;};};for _egc -_db > 0{if _db %8==0{_fad ._adb [_fd ]=0;};
var _ded byte ;if !_cfe {_ded =1<<uint (7-(_db %8));};_fad ._adb [_fd ]|=_ded ;_db ++;};_cfe =!_cfe ;};if _db !=_fad ._efa {return _a .New ("\u0073\u0075\u006d\u0020\u006f\u0066 \u0072\u0075\u006e\u002d\u006c\u0065\u006e\u0067\u0074\u0068\u0073\u0020\u0064\u006f\u0065\u0073\u0020\u006e\u006f\u0074 \u0065\u0071\u0075\u0061\u006c\u0020\u0073\u0063\u0061\u006e\u0020\u006c\u0069\u006ee\u0020w\u0069\u0064\u0074\u0068");
};_fad ._eag =(_db +7)/8;_fad ._bbe ++;return nil ;};const (_ tiffType =iota ;_fcc ;_cb ;_fgf ;);type DecodeOptions struct{Columns int ;Rows int ;K int ;EncodedByteAligned bool ;BlackIsOne bool ;EndOfBlock bool ;EndOfLine bool ;DamagedRowsBeforeError int ;
};func (_dfg *Decoder )decodeRowType6 ()error {if _dfg ._fae {_dfg ._bcfb .Align ();};if _dfg ._dc {_dfg ._bcfb .Mark ();_cdf ,_eeg :=_dfg .tryFetchEOL ();if _eeg !=nil {return _eeg ;};if _cdf {_cdf ,_eeg =_dfg .tryFetchEOL ();if _eeg !=nil {return _eeg ;
};if _cdf {return _d .EOF ;};};_dfg ._bcfb .Reset ();};return _dfg .decode2D ();};func init (){_ecf =make (map[int ]code );_ecf [0]=code {Code :13<<8|3<<6,BitsWritten :10};_ecf [1]=code {Code :2<<(5+8),BitsWritten :3};_ecf [2]=code {Code :3<<(6+8),BitsWritten :2};
_ecf [3]=code {Code :2<<(6+8),BitsWritten :2};_ecf [4]=code {Code :3<<(5+8),BitsWritten :3};_ecf [5]=code {Code :3<<(4+8),BitsWritten :4};_ecf [6]=code {Code :2<<(4+8),BitsWritten :4};_ecf [7]=code {Code :3<<(3+8),BitsWritten :5};_ecf [8]=code {Code :5<<(2+8),BitsWritten :6};
_ecf [9]=code {Code :4<<(2+8),BitsWritten :6};_ecf [10]=code {Code :4<<(1+8),BitsWritten :7};_ecf [11]=code {Code :5<<(1+8),BitsWritten :7};_ecf [12]=code {Code :7<<(1+8),BitsWritten :7};_ecf [13]=code {Code :4<<8,BitsWritten :8};_ecf [14]=code {Code :7<<8,BitsWritten :8};
_ecf [15]=code {Code :12<<8,BitsWritten :9};_ecf [16]=code {Code :5<<8|3<<6,BitsWritten :10};_ecf [17]=code {Code :6<<8,BitsWritten :10};_ecf [18]=code {Code :2<<8,BitsWritten :10};_ecf [19]=code {Code :12<<8|7<<5,BitsWritten :11};_ecf [20]=code {Code :13<<8,BitsWritten :11};
_ecf [21]=code {Code :13<<8|4<<5,BitsWritten :11};_ecf [22]=code {Code :6<<8|7<<5,BitsWritten :11};_ecf [23]=code {Code :5<<8,BitsWritten :11};_ecf [24]=code {Code :2<<8|7<<5,BitsWritten :11};_ecf [25]=code {Code :3<<8,BitsWritten :11};_ecf [26]=code {Code :12<<8|10<<4,BitsWritten :12};
_ecf [27]=code {Code :12<<8|11<<4,BitsWritten :12};_ecf [28]=code {Code :12<<8|12<<4,BitsWritten :12};_ecf [29]=code {Code :12<<8|13<<4,BitsWritten :12};_ecf [30]=code {Code :6<<8|8<<4,BitsWritten :12};_ecf [31]=code {Code :6<<8|9<<4,BitsWritten :12};_ecf [32]=code {Code :6<<8|10<<4,BitsWritten :12};
_ecf [33]=code {Code :6<<8|11<<4,BitsWritten :12};_ecf [34]=code {Code :13<<8|2<<4,BitsWritten :12};_ecf [35]=code {Code :13<<8|3<<4,BitsWritten :12};_ecf [36]=code {Code :13<<8|4<<4,BitsWritten :12};_ecf [37]=code {Code :13<<8|5<<4,BitsWritten :12};_ecf [38]=code {Code :13<<8|6<<4,BitsWritten :12};
_ecf [39]=code {Code :13<<8|7<<4,BitsWritten :12};_ecf [40]=code {Code :6<<8|12<<4,BitsWritten :12};_ecf [41]=code {Code :6<<8|13<<4,BitsWritten :12};_ecf [42]=code {Code :13<<8|10<<4,BitsWritten :12};_ecf [43]=code {Code :13<<8|11<<4,BitsWritten :12};
_ecf [44]=code {Code :5<<8|4<<4,BitsWritten :12};_ecf [45]=code {Code :5<<8|5<<4,BitsWritten :12};_ecf [46]=code {Code :5<<8|6<<4,BitsWritten :12};_ecf [47]=code {Code :5<<8|7<<4,BitsWritten :12};_ecf [48]=code {Code :6<<8|4<<4,BitsWritten :12};_ecf [49]=code {Code :6<<8|5<<4,BitsWritten :12};
_ecf [50]=code {Code :5<<8|2<<4,BitsWritten :12};_ecf [51]=code {Code :5<<8|3<<4,BitsWritten :12};_ecf [52]=code {Code :2<<8|4<<4,BitsWritten :12};_ecf [53]=code {Code :3<<8|7<<4,BitsWritten :12};_ecf [54]=code {Code :3<<8|8<<4,BitsWritten :12};_ecf [55]=code {Code :2<<8|7<<4,BitsWritten :12};
_ecf [56]=code {Code :2<<8|8<<4,BitsWritten :12};_ecf [57]=code {Code :5<<8|8<<4,BitsWritten :12};_ecf [58]=code {Code :5<<8|9<<4,BitsWritten :12};_ecf [59]=code {Code :2<<8|11<<4,BitsWritten :12};_ecf [60]=code {Code :2<<8|12<<4,BitsWritten :12};_ecf [61]=code {Code :5<<8|10<<4,BitsWritten :12};
_ecf [62]=code {Code :6<<8|6<<4,BitsWritten :12};_ecf [63]=code {Code :6<<8|7<<4,BitsWritten :12};_geg =make (map[int ]code );_geg [0]=code {Code :53<<8,BitsWritten :8};_geg [1]=code {Code :7<<(2+8),BitsWritten :6};_geg [2]=code {Code :7<<(4+8),BitsWritten :4};
_geg [3]=code {Code :8<<(4+8),BitsWritten :4};_geg [4]=code {Code :11<<(4+8),BitsWritten :4};_geg [5]=code {Code :12<<(4+8),BitsWritten :4};_geg [6]=code {Code :14<<(4+8),BitsWritten :4};_geg [7]=code {Code :15<<(4+8),BitsWritten :4};_geg [8]=code {Code :19<<(3+8),BitsWritten :5};
_geg [9]=code {Code :20<<(3+8),BitsWritten :5};_geg [10]=code {Code :7<<(3+8),BitsWritten :5};_geg [11]=code {Code :8<<(3+8),BitsWritten :5};_geg [12]=code {Code :8<<(2+8),BitsWritten :6};_geg [13]=code {Code :3<<(2+8),BitsWritten :6};_geg [14]=code {Code :52<<(2+8),BitsWritten :6};
_geg [15]=code {Code :53<<(2+8),BitsWritten :6};_geg [16]=code {Code :42<<(2+8),BitsWritten :6};_geg [17]=code {Code :43<<(2+8),BitsWritten :6};_geg [18]=code {Code :39<<(1+8),BitsWritten :7};_geg [19]=code {Code :12<<(1+8),BitsWritten :7};_geg [20]=code {Code :8<<(1+8),BitsWritten :7};
_geg [21]=code {Code :23<<(1+8),BitsWritten :7};_geg [22]=code {Code :3<<(1+8),BitsWritten :7};_geg [23]=code {Code :4<<(1+8),BitsWritten :7};_geg [24]=code {Code :40<<(1+8),BitsWritten :7};_geg [25]=code {Code :43<<(1+8),BitsWritten :7};_geg [26]=code {Code :19<<(1+8),BitsWritten :7};
_geg [27]=code {Code :36<<(1+8),BitsWritten :7};_geg [28]=code {Code :24<<(1+8),BitsWritten :7};_geg [29]=code {Code :2<<8,BitsWritten :8};_geg [30]=code {Code :3<<8,BitsWritten :8};_geg [31]=code {Code :26<<8,BitsWritten :8};_geg [32]=code {Code :27<<8,BitsWritten :8};
_geg [33]=code {Code :18<<8,BitsWritten :8};_geg [34]=code {Code :19<<8,BitsWritten :8};_geg [35]=code {Code :20<<8,BitsWritten :8};_geg [36]=code {Code :21<<8,BitsWritten :8};_geg [37]=code {Code :22<<8,BitsWritten :8};_geg [38]=code {Code :23<<8,BitsWritten :8};
_geg [39]=code {Code :40<<8,BitsWritten :8};_geg [40]=code {Code :41<<8,BitsWritten :8};_geg [41]=code {Code :42<<8,BitsWritten :8};_geg [42]=code {Code :43<<8,BitsWritten :8};_geg [43]=code {Code :44<<8,BitsWritten :8};_geg [44]=code {Code :45<<8,BitsWritten :8};
_geg [45]=code {Code :4<<8,BitsWritten :8};_geg [46]=code {Code :5<<8,BitsWritten :8};_geg [47]=code {Code :10<<8,BitsWritten :8};_geg [48]=code {Code :11<<8,BitsWritten :8};_geg [49]=code {Code :82<<8,BitsWritten :8};_geg [50]=code {Code :83<<8,BitsWritten :8};
_geg [51]=code {Code :84<<8,BitsWritten :8};_geg [52]=code {Code :85<<8,BitsWritten :8};_geg [53]=code {Code :36<<8,BitsWritten :8};_geg [54]=code {Code :37<<8,BitsWritten :8};_geg [55]=code {Code :88<<8,BitsWritten :8};_geg [56]=code {Code :89<<8,BitsWritten :8};
_geg [57]=code {Code :90<<8,BitsWritten :8};_geg [58]=code {Code :91<<8,BitsWritten :8};_geg [59]=code {Code :74<<8,BitsWritten :8};_geg [60]=code {Code :75<<8,BitsWritten :8};_geg [61]=code {Code :50<<8,BitsWritten :8};_geg [62]=code {Code :51<<8,BitsWritten :8};
_geg [63]=code {Code :52<<8,BitsWritten :8};_cf =make (map[int ]code );_cf [64]=code {Code :3<<8|3<<6,BitsWritten :10};_cf [128]=code {Code :12<<8|8<<4,BitsWritten :12};_cf [192]=code {Code :12<<8|9<<4,BitsWritten :12};_cf [256]=code {Code :5<<8|11<<4,BitsWritten :12};
_cf [320]=code {Code :3<<8|3<<4,BitsWritten :12};_cf [384]=code {Code :3<<8|4<<4,BitsWritten :12};_cf [448]=code {Code :3<<8|5<<4,BitsWritten :12};_cf [512]=code {Code :3<<8|12<<3,BitsWritten :13};_cf [576]=code {Code :3<<8|13<<3,BitsWritten :13};_cf [640]=code {Code :2<<8|10<<3,BitsWritten :13};
_cf [704]=code {Code :2<<8|11<<3,BitsWritten :13};_cf [768]=code {Code :2<<8|12<<3,BitsWritten :13};_cf [832]=code {Code :2<<8|13<<3,BitsWritten :13};_cf [896]=code {Code :3<<8|18<<3,BitsWritten :13};_cf [960]=code {Code :3<<8|19<<3,BitsWritten :13};_cf [1024]=code {Code :3<<8|20<<3,BitsWritten :13};
_cf [1088]=code {Code :3<<8|21<<3,BitsWritten :13};_cf [1152]=code {Code :3<<8|22<<3,BitsWritten :13};_cf [1216]=code {Code :119<<3,BitsWritten :13};_cf [1280]=code {Code :2<<8|18<<3,BitsWritten :13};_cf [1344]=code {Code :2<<8|19<<3,BitsWritten :13};_cf [1408]=code {Code :2<<8|20<<3,BitsWritten :13};
_cf [1472]=code {Code :2<<8|21<<3,BitsWritten :13};_cf [1536]=code {Code :2<<8|26<<3,BitsWritten :13};_cf [1600]=code {Code :2<<8|27<<3,BitsWritten :13};_cf [1664]=code {Code :3<<8|4<<3,BitsWritten :13};_cf [1728]=code {Code :3<<8|5<<3,BitsWritten :13};
_fe =make (map[int ]code );_fe [64]=code {Code :27<<(3+8),BitsWritten :5};_fe [128]=code {Code :18<<(3+8),BitsWritten :5};_fe [192]=code {Code :23<<(2+8),BitsWritten :6};_fe [256]=code {Code :55<<(1+8),BitsWritten :7};_fe [320]=code {Code :54<<8,BitsWritten :8};
_fe [384]=code {Code :55<<8,BitsWritten :8};_fe [448]=code {Code :100<<8,BitsWritten :8};_fe [512]=code {Code :101<<8,BitsWritten :8};_fe [576]=code {Code :104<<8,BitsWritten :8};_fe [640]=code {Code :103<<8,BitsWritten :8};_fe [704]=code {Code :102<<8,BitsWritten :9};
_fe [768]=code {Code :102<<8|1<<7,BitsWritten :9};_fe [832]=code {Code :105<<8,BitsWritten :9};_fe [896]=code {Code :105<<8|1<<7,BitsWritten :9};_fe [960]=code {Code :106<<8,BitsWritten :9};_fe [1024]=code {Code :106<<8|1<<7,BitsWritten :9};_fe [1088]=code {Code :107<<8,BitsWritten :9};
_fe [1152]=code {Code :107<<8|1<<7,BitsWritten :9};_fe [1216]=code {Code :108<<8,BitsWritten :9};_fe [1280]=code {Code :108<<8|1<<7,BitsWritten :9};_fe [1344]=code {Code :109<<8,BitsWritten :9};_fe [1408]=code {Code :109<<8|1<<7,BitsWritten :9};_fe [1472]=code {Code :76<<8,BitsWritten :9};
_fe [1536]=code {Code :76<<8|1<<7,BitsWritten :9};_fe [1600]=code {Code :77<<8,BitsWritten :9};_fe [1664]=code {Code :24<<(2+8),BitsWritten :6};_fe [1728]=code {Code :77<<8|1<<7,BitsWritten :9};_ged =make (map[int ]code );_ged [1792]=code {Code :1<<8,BitsWritten :11};
_ged [1856]=code {Code :1<<8|4<<5,BitsWritten :11};_ged [1920]=code {Code :1<<8|5<<5,BitsWritten :11};_ged [1984]=code {Code :1<<8|2<<4,BitsWritten :12};_ged [2048]=code {Code :1<<8|3<<4,BitsWritten :12};_ged [2112]=code {Code :1<<8|4<<4,BitsWritten :12};
_ged [2176]=code {Code :1<<8|5<<4,BitsWritten :12};_ged [2240]=code {Code :1<<8|6<<4,BitsWritten :12};_ged [2304]=code {Code :1<<8|7<<4,BitsWritten :12};_ged [2368]=code {Code :1<<8|12<<4,BitsWritten :12};_ged [2432]=code {Code :1<<8|13<<4,BitsWritten :12};
_ged [2496]=code {Code :1<<8|14<<4,BitsWritten :12};_ged [2560]=code {Code :1<<8|15<<4,BitsWritten :12};_ad =make (map[int ]byte );_ad [0]=0xFF;_ad [1]=0xFE;_ad [2]=0xFC;_ad [3]=0xF8;_ad [4]=0xF0;_ad [5]=0xE0;_ad [6]=0xC0;_ad [7]=0x80;_ad [8]=0x00;};type code struct{Code uint16 ;
BitsWritten int ;};func (_ebc *Decoder )decodeRowType4 ()error {if !_ebc ._ecd {return _ebc .decoderRowType41D ();};if _ebc ._fae {_ebc ._bcfb .Align ();};_ebc ._bcfb .Mark ();_caeg ,_cff :=_ebc .tryFetchEOL ();if _cff !=nil {return _cff ;};if !_caeg &&_ebc ._abg {_ebc ._ae ++;
if _ebc ._ae > _ebc ._dfb {return _bc ;};_ebc ._bcfb .Reset ();};if !_caeg {_ebc ._bcfb .Reset ();};_ee ,_cff :=_ebc ._bcfb .ReadBool ();if _cff !=nil {return _cff ;};if _ee {if _caeg &&_ebc ._dc {if _cff =_ebc .tryFetchRTC2D ();_cff !=nil {return _cff ;
};};_cff =_ebc .decode1D ();}else {_cff =_ebc .decode2D ();};if _cff !=nil {return _cff ;};return nil ;};func (_edg *Decoder )decoderRowType41D ()error {if _edg ._fae {_edg ._bcfb .Align ();};_edg ._bcfb .Mark ();var (_dcc bool ;_badf error ;);if _edg ._abg {_dcc ,_badf =_edg .tryFetchEOL ();
if _badf !=nil {return _badf ;};if !_dcc {return _bc ;};}else {_dcc ,_badf =_edg .looseFetchEOL ();if _badf !=nil {return _badf ;};};if !_dcc {_edg ._bcfb .Reset ();};if _dcc &&_edg ._dc {_edg ._bcfb .Mark ();for _geae :=0;_geae < 5;_geae ++{_dcc ,_badf =_edg .tryFetchEOL ();
if _badf !=nil {if _a .Is (_badf ,_d .EOF ){if _geae ==0{break ;};return _ca ;};};if _dcc {continue ;};if _geae > 0{return _ca ;};break ;};if _dcc {return _d .EOF ;};_edg ._bcfb .Reset ();};if _badf =_edg .decode1D ();_badf !=nil {return _badf ;};return nil ;
};var (_ba *treeNode ;_f *treeNode ;_da *tree ;_ab *tree ;_ga *tree ;_fg *tree ;_c =-2000;_fa =-1000;_e =-3000;_fb =-4000;);func _ffc (_accb [][]byte )[][]byte {_cceg :=make ([]byte ,len (_accb [0]));for _cea :=range _cceg {_cceg [_cea ]=_edd ;};_accb =append (_accb ,[]byte {});
for _deca :=len (_accb )-1;_deca > 0;_deca --{_accb [_deca ]=_accb [_deca -1];};_accb [0]=_cceg ;return _accb ;};func (_fde *Decoder )decode2D ()error {_fde ._dea =_fde ._ac ;_fde ._cfa ,_fde ._cbd =_fde ._cbd ,_fde ._cfa ;_fga :=true ;var (_cca bool ;
_gf int ;_cdfd error ;);_fde ._ac =0;_bdeg :for _gf < _fde ._efa {_bgg :=_fg ._aaea ;for {_cca ,_cdfd =_fde ._bcfb .ReadBool ();if _cdfd !=nil {return _cdfd ;};_bgg =_bgg .walk (_cca );if _bgg ==nil {continue _bdeg ;};if !_bgg ._fbf {continue ;};switch _bgg ._cggd {case _fb :var _fec int ;
if _fga {_fec ,_cdfd =_fde .decodeRun (_ab );}else {_fec ,_cdfd =_fde .decodeRun (_da );};if _cdfd !=nil {return _cdfd ;};_gf +=_fec ;_fde ._cfa [_fde ._ac ]=_gf ;_fde ._ac ++;if _fga {_fec ,_cdfd =_fde .decodeRun (_da );}else {_fec ,_cdfd =_fde .decodeRun (_ab );
};if _cdfd !=nil {return _cdfd ;};_gf +=_fec ;_fde ._cfa [_fde ._ac ]=_gf ;_fde ._ac ++;case _e :_gb :=_fde .getNextChangingElement (_gf ,_fga )+1;if _gb >=_fde ._dea {_gf =_fde ._efa ;}else {_gf =_fde ._cbd [_gb ];};default:_dabd :=_fde .getNextChangingElement (_gf ,_fga );
if _dabd >=_fde ._dea ||_dabd ==-1{_gf =_fde ._efa +_bgg ._cggd ;}else {_gf =_fde ._cbd [_dabd ]+_bgg ._cggd ;};_fde ._cfa [_fde ._ac ]=_gf ;_fde ._ac ++;_fga =!_fga ;};continue _bdeg ;};};return nil ;};func (_eaa *Decoder )Read (in []byte )(int ,error ){if _eaa ._bbb !=nil {return 0,_eaa ._bbb ;
};_ecdd :=len (in );var (_ffa int ;_acg int ;);for _ecdd !=0{if _eaa ._bbeg >=_eaa ._eag {if _cbdc :=_eaa .fetch ();_cbdc !=nil {_eaa ._bbb =_cbdc ;return 0,_cbdc ;};};if _eaa ._eag ==-1{return _ffa ,_d .EOF ;};switch {case _ecdd <=_eaa ._eag -_eaa ._bbeg :_cgec :=_eaa ._adb [_eaa ._bbeg :_eaa ._bbeg +_ecdd ];
for _ ,_af :=range _cgec {if !_eaa ._bd {_af =^_af ;};in [_acg ]=_af ;_acg ++;};_ffa +=len (_cgec );_eaa ._bbeg +=len (_cgec );return _ffa ,nil ;default:_ebd :=_eaa ._adb [_eaa ._bbeg :];for _ ,_aaf :=range _ebd {if !_eaa ._bd {_aaf =^_aaf ;};in [_acg ]=_aaf ;
_acg ++;};_ffa +=len (_ebd );_eaa ._bbeg +=len (_ebd );_ecdd -=len (_ebd );};};return _ffa ,nil ;};var _dd =[...][]uint16 {{0x2,0x3},{0x2,0x3},{0x2,0x3},{0x3},{0x4,0x5},{0x4,0x5,0x7},{0x4,0x7},{0x18},{0x17,0x18,0x37,0x8,0xf},{0x17,0x18,0x28,0x37,0x67,0x68,0x6c,0x8,0xc,0xd},{0x12,0x13,0x14,0x15,0x16,0x17,0x1c,0x1d,0x1e,0x1f,0x24,0x27,0x28,0x2b,0x2c,0x33,0x34,0x35,0x37,0x38,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0xc8,0xc9,0xca,0xcb,0xcc,0xcd,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xda,0xdb},{0x4a,0x4b,0x4c,0x4d,0x52,0x53,0x54,0x55,0x5a,0x5b,0x64,0x65,0x6c,0x6d,0x72,0x73,0x74,0x75,0x76,0x77}};
func (_ddgg *Decoder )decode1D ()error {var (_fgc int ;_aad error ;);_gee :=true ;_ddgg ._ac =0;for {var _efe int ;if _gee {_efe ,_aad =_ddgg .decodeRun (_ab );}else {_efe ,_aad =_ddgg .decodeRun (_da );};if _aad !=nil {return _aad ;};_fgc +=_efe ;_ddgg ._cfa [_ddgg ._ac ]=_fgc ;
_ddgg ._ac ++;_gee =!_gee ;if _fgc >=_ddgg ._efa {break ;};};return nil ;};func _cfb (_cebb []byte ,_eagd bool ,_def int )(int ,int ){_gae :=0;for _def < len (_cebb ){if _eagd {if _cebb [_def ]!=_edd {break ;};}else {if _cebb [_def ]!=_bab {break ;};};
_gae ++;_def ++;};return _gae ,_def ;};func (_gdb *Encoder )Encode (pixels [][]byte )[]byte {if _gdb .BlackIs1 {_edd =0;_bab =1;}else {_edd =1;_bab =0;};if _gdb .K ==0{return _gdb .encodeG31D (pixels );};if _gdb .K > 0{return _gdb .encodeG32D (pixels );
};if _gdb .K < 0{return _gdb .encodeG4 (pixels );};return nil ;};func (_fgaf *tree )fill (_gafa ,_bff ,_ebcb int )error {_bgb :=_fgaf ._aaea ;for _gccd :=0;_gccd < _gafa ;_gccd ++{_bdag :=_gafa -1-_gccd ;_eae :=((_bff >>uint (_bdag ))&1)!=0;_agb :=_bgb .walk (_eae );
if _agb !=nil {if _agb ._fbf {return _a .New ("\u006e\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u006c\u0065\u0061\u0066\u002c\u0020\u006eo\u0020o\u0074\u0068\u0065\u0072\u0020\u0066\u006f\u006c\u006c\u006f\u0077\u0069\u006e\u0067");};_bgb =_agb ;continue ;
};_agb =&treeNode {};if _gccd ==_gafa -1{_agb ._cggd =_ebcb ;_agb ._fbf =true ;};if _bff ==0{_agb ._aabf =true ;};_bgb .set (_eae ,_agb );_bgb =_agb ;};return nil ;};func (_cfd tiffType )String ()string {switch _cfd {case _fcc :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u004d\u006f\u0064i\u0066\u0069\u0065\u0064\u0048\u0075\u0066\u0066\u006d\u0061n\u0052\u006c\u0065";
case _cb :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u0054\u0034";case _fgf :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u0054\u0036";default:return "\u0075n\u0064\u0065\u0066\u0069\u006e\u0065d";};};func (_fdc *Decoder )decodeRun (_dca *tree )(int ,error ){var _ebf int ;
_ada :=_dca ._aaea ;for {_ffad ,_fdb :=_fdc ._bcfb .ReadBool ();if _fdb !=nil {return 0,_fdb ;};_ada =_ada .walk (_ffad );if _ada ==nil {return 0,_a .New ("\u0075\u006e\u006bno\u0077\u006e\u0020\u0063\u006f\u0064\u0065\u0020\u0069n\u0020H\u0075f\u0066m\u0061\u006e\u0020\u0052\u004c\u0045\u0020\u0073\u0074\u0072\u0065\u0061\u006d");
};if _ada ._fbf {_ebf +=_ada ._cggd ;switch {case _ada ._cggd >=64:_ada =_dca ._aaea ;case _ada ._cggd >=0:return _ebf ,nil ;default:return _fdc ._efa ,nil ;};};};};func _bbf (_fafg ,_eee []byte ,_agad int )int {_gaec :=_eda (_eee ,_agad );if _gaec < len (_eee )&&(_agad ==-1&&_eee [_gaec ]==_edd ||_agad >=0&&_agad < len (_fafg )&&_fafg [_agad ]==_eee [_gaec ]||_agad >=len (_fafg )&&_fafg [_agad -1]!=_eee [_gaec ]){_gaec =_eda (_eee ,_gaec );
};return _gaec ;};func (_bga *Encoder )encodeG4 (_ead [][]byte )[]byte {_ffe :=make ([][]byte ,len (_ead ));copy (_ffe ,_ead );_ffe =_ffc (_ffe );var _faf []byte ;var _ece int ;for _cgg :=1;_cgg < len (_ffe );_cgg ++{if _bga .Rows > 0&&!_bga .EndOfBlock &&_cgg ==(_bga .Rows +1){break ;
};var _aafe []byte ;var _cdb ,_efed ,_ggf int ;_gbe :=_ece ;_bdb :=-1;for _bdb < len (_ffe [_cgg ]){_cdb =_eda (_ffe [_cgg ],_bdb );_efed =_bbf (_ffe [_cgg ],_ffe [_cgg -1],_bdb );_ggf =_eda (_ffe [_cgg -1],_efed );if _ggf < _cdb {_aafe ,_gbe =_fda (_aafe ,_gbe ,_fc );
_bdb =_ggf ;}else {if _bb .Abs (float64 (_efed -_cdb ))> 3{_aafe ,_gbe ,_bdb =_deg (_ffe [_cgg ],_aafe ,_gbe ,_bdb ,_cdb );}else {_aafe ,_gbe =_efag (_aafe ,_gbe ,_cdb ,_efed );_bdb =_cdb ;};};};_faf =_bga .appendEncodedRow (_faf ,_aafe ,_ece );if _bga .EncodedByteAlign {_gbe =0;
};_ece =_gbe %8;};if _bga .EndOfBlock {_bfbd ,_ :=_gfb (_ece );_faf =_bga .appendEncodedRow (_faf ,_bfbd ,_ece );};return _faf ;};func (_fafb *Encoder )appendEncodedRow (_gaf ,_eddd []byte ,_agee int )[]byte {if len (_gaf )> 0&&_agee !=0&&!_fafb .EncodedByteAlign {_gaf [len (_gaf )-1]=_gaf [len (_gaf )-1]|_eddd [0];
_gaf =append (_gaf ,_eddd [1:]...);}else {_gaf =append (_gaf ,_eddd ...);};return _gaf ;};func (_fdg *Decoder )tryFetchEOL1 ()(bool ,error ){_efb ,_dccg :=_fdg ._bcfb .ReadBits (13);if _dccg !=nil {return false ,_dccg ;};return _efb ==0x3,nil ;};type treeNode struct{_gbcd *treeNode ;
_dcb *treeNode ;_cggd int ;_aabf bool ;_fbf bool ;};func (_gbc *Decoder )tryFetchRTC2D ()(_aed error ){_gbc ._bcfb .Mark ();var _dec bool ;for _dge :=0;_dge < 5;_dge ++{_dec ,_aed =_gbc .tryFetchEOL1 ();if _aed !=nil {if _a .Is (_aed ,_d .EOF ){if _dge ==0{break ;
};return _ca ;};};if _dec {continue ;};if _dge > 0{return _ca ;};break ;};if _dec {return _d .EOF ;};_gbc ._bcfb .Reset ();return _aed ;};func _aag (_edc ,_geaed []byte ,_ddbg int ,_babg bool )int {_fea :=_eda (_geaed ,_ddbg );if _fea < len (_geaed )&&(_ddbg ==-1&&_geaed [_fea ]==_edd ||_ddbg >=0&&_ddbg < len (_edc )&&_edc [_ddbg ]==_geaed [_fea ]||_ddbg >=len (_edc )&&_babg &&_geaed [_fea ]==_edd ||_ddbg >=len (_edc )&&!_babg &&_geaed [_fea ]==_bab ){_fea =_eda (_geaed ,_fea );
};return _fea ;};func _aec (_bgf ,_fcg int )code {var _afbf code ;switch _fcg -_bgf {case -1:_afbf =_fbd ;case -2:_afbf =_cce ;case -3:_afbf =_dg ;case 0:_afbf =_bad ;case 1:_afbf =_fbg ;case 2:_afbf =_cge ;case 3:_afbf =_ef ;};return _afbf ;};type tree struct{_aaea *treeNode };
func (_bged *treeNode )walk (_bef bool )*treeNode {if _bef {return _bged ._dcb ;};return _bged ._gbcd ;};func (_dde *Decoder )fetch ()error {if _dde ._eag ==-1{return nil ;};if _dde ._bbeg < _dde ._eag {return nil ;};_dde ._eag =0;_cae :=_dde .decodeRow ();
if _cae !=nil {if !_a .Is (_cae ,_d .EOF ){return _cae ;};if _dde ._eag !=0{return _cae ;};_dde ._eag =-1;};_dde ._bbeg =0;return nil ;};func _bac (_abd int )([]byte ,int ){var _dgg []byte ;for _afb :=0;_afb < 6;_afb ++{_dgg ,_abd =_fda (_dgg ,_abd ,_agg );
};return _dgg ,_abd %8;};func _cde (_add int )([]byte ,int ){var _cfaf []byte ;for _dbb :=0;_dbb < 6;_dbb ++{_cfaf ,_add =_fda (_cfaf ,_add ,_ea );};return _cfaf ,_add %8;};type Encoder struct{K int ;EndOfLine bool ;EncodedByteAlign bool ;Columns int ;
Rows int ;EndOfBlock bool ;BlackIs1 bool ;DamagedRowsBeforeError int ;};func (_bfc *Decoder )tryFetchEOL ()(bool ,error ){_dac ,_afc :=_bfc ._bcfb .ReadBits (12);if _afc !=nil {return false ,_afc ;};return _dac ==0x1,nil ;};func (_bde *Decoder )decodeRowType2 ()error {if _bde ._fae {_bde ._bcfb .Align ();
};if _bfb :=_bde .decode1D ();_bfb !=nil {return _bfb ;};return nil ;};func _fda (_fgb []byte ,_bebf int ,_ffea code )([]byte ,int ){_fca :=0;for _fca < _ffea .BitsWritten {_dbg :=_bebf /8;_cee :=_bebf %8;if _dbg >=len (_fgb ){_fgb =append (_fgb ,0);};
_effc :=8-_cee ;_cbc :=_ffea .BitsWritten -_fca ;if _effc > _cbc {_effc =_cbc ;};if _fca < 8{_fgb [_dbg ]=_fgb [_dbg ]|byte (_ffea .Code >>uint (8+_cee -_fca ))&_ad [8-_effc -_cee ];}else {_fgb [_dbg ]=_fgb [_dbg ]|(byte (_ffea .Code <<uint (_fca -8))&_ad [8-_effc ])>>uint (_cee );
};_bebf +=_effc ;_fca +=_effc ;};return _fgb ,_bebf ;};func _dfd (_eab []byte ,_fccg int ,_eaf int ,_bdbe bool )([]byte ,int ){var (_dbe code ;_ffaf bool ;);for !_ffaf {_dbe ,_eaf ,_ffaf =_abf (_eaf ,_bdbe );_eab ,_fccg =_fda (_eab ,_fccg ,_dbe );};return _eab ,_fccg ;
};var (_ca =_a .New ("\u0063\u0063\u0069\u0074tf\u0061\u0078\u0020\u0063\u006f\u0072\u0072\u0075\u0070\u0074\u0065\u0064\u0020\u0052T\u0043");_bc =_a .New ("\u0063\u0063\u0069\u0074tf\u0061\u0078\u0020\u0045\u004f\u004c\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075n\u0064");
);func (_adg *tree )fillWithNode (_beed ,_baed int ,_agdg *treeNode )error {_cdc :=_adg ._aaea ;for _gccb :=0;_gccb < _beed ;_gccb ++{_bgcd :=uint (_beed -1-_gccb );_bcg :=((_baed >>_bgcd )&1)!=0;_dbcb :=_cdc .walk (_bcg );if _dbcb !=nil {if _dbcb ._fbf {return _a .New ("\u006e\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u006c\u0065\u0061\u0066\u002c\u0020\u006eo\u0020o\u0074\u0068\u0065\u0072\u0020\u0066\u006f\u006c\u006c\u006f\u0077\u0069\u006e\u0067");
};_cdc =_dbcb ;continue ;};if _gccb ==_beed -1{_dbcb =_agdg ;}else {_dbcb =&treeNode {};};if _baed ==0{_dbcb ._aabf =true ;};_cdc .set (_bcg ,_dbcb );_cdc =_dbcb ;};return nil ;};var _bf =[...][]uint16 {{3,2},{1,4},{6,5},{7},{9,8},{10,11,12},{13,14},{15},{16,17,0,18,64},{24,25,23,22,19,20,21,1792,1856,1920},{1984,2048,2112,2176,2240,2304,2368,2432,2496,2560,52,55,56,59,60,320,384,448,53,54,50,51,44,45,46,47,57,58,61,256,48,49,62,63,30,31,32,33,40,41,128,192,26,27,28,29,34,35,36,37,38,39,42,43},{640,704,768,832,1280,1344,1408,1472,1536,1600,1664,1728,512,576,896,960,1024,1088,1152,1216}};
func _gfb (_ddf int )([]byte ,int ){var _ccb []byte ;for _cac :=0;_cac < 2;_cac ++{_ccb ,_ddf =_fda (_ccb ,_ddf ,_agg );};return _ccb ,_ddf %8;};func (_dab *Decoder )decodeG32D ()error {_dab ._dea =_dab ._ac ;_dab ._cfa ,_dab ._cbd =_dab ._cbd ,_dab ._cfa ;
_cffc :=true ;var (_age bool ;_fgfc int ;_aabd error ;);_dab ._ac =0;_feg :for _fgfc < _dab ._efa {_cgb :=_fg ._aaea ;for {_age ,_aabd =_dab ._bcfb .ReadBool ();if _aabd !=nil {return _aabd ;};_cgb =_cgb .walk (_age );if _cgb ==nil {continue _feg ;};if !_cgb ._fbf {continue ;
};switch _cgb ._cggd {case _fb :var _edf int ;if _cffc {_edf ,_aabd =_dab .decodeRun (_ab );}else {_edf ,_aabd =_dab .decodeRun (_da );};if _aabd !=nil {return _aabd ;};_fgfc +=_edf ;_dab ._cfa [_dab ._ac ]=_fgfc ;_dab ._ac ++;if _cffc {_edf ,_aabd =_dab .decodeRun (_da );
}else {_edf ,_aabd =_dab .decodeRun (_ab );};if _aabd !=nil {return _aabd ;};_fgfc +=_edf ;_dab ._cfa [_dab ._ac ]=_fgfc ;_dab ._ac ++;case _e :_gge :=_dab .getNextChangingElement (_fgfc ,_cffc )+1;if _gge >=_dab ._dea {_fgfc =_dab ._efa ;}else {_fgfc =_dab ._cbd [_gge ];
};default:_beb :=_dab .getNextChangingElement (_fgfc ,_cffc );if _beb >=_dab ._dea ||_beb ==-1{_fgfc =_dab ._efa +_cgb ._cggd ;}else {_fgfc =_dab ._cbd [_beb ]+_cgb ._cggd ;};_dab ._cfa [_dab ._ac ]=_fgfc ;_dab ._ac ++;_cffc =!_cffc ;};continue _feg ;};
};return nil ;};func _eda (_gega []byte ,_fcac int )int {if _fcac >=len (_gega ){return _fcac ;};if _fcac < -1{_fcac =-1;};var _ace byte ;if _fcac > -1{_ace =_gega [_fcac ];}else {_ace =_edd ;};_fdge :=_fcac +1;for _fdge < len (_gega ){if _gega [_fdge ]!=_ace {break ;
};_fdge ++;};return _fdge ;};func _gbg (_ggb []byte ,_bcd int )([]byte ,int ){return _fda (_ggb ,_bcd ,_fc )};var (_ecf map[int ]code ;_geg map[int ]code ;_cf map[int ]code ;_fe map[int ]code ;_ged map[int ]code ;_ad map[int ]byte ;_agg =code {Code :1<<4,BitsWritten :12};
_ea =code {Code :3<<3,BitsWritten :13};_cc =code {Code :2<<3,BitsWritten :13};_fc =code {Code :1<<12,BitsWritten :4};_baa =code {Code :1<<13,BitsWritten :3};_bad =code {Code :1<<15,BitsWritten :1};_fbd =code {Code :3<<13,BitsWritten :3};_cce =code {Code :3<<10,BitsWritten :6};
_dg =code {Code :3<<9,BitsWritten :7};_fbg =code {Code :2<<13,BitsWritten :3};_cge =code {Code :2<<10,BitsWritten :6};_ef =code {Code :2<<9,BitsWritten :7};);func (_efeg *treeNode )set (_gag bool ,_faff *treeNode ){if !_gag {_efeg ._gbcd =_faff ;}else {_efeg ._dcb =_faff ;
};};type Decoder struct{_efa int ;_eff int ;_bbe int ;_adb []byte ;_dfb int ;_ecd bool ;_bcf bool ;_bg bool ;_bd bool ;_abg bool ;_dc bool ;_fae bool ;_eag int ;_bbeg int ;_cbd []int ;_cfa []int ;_dea int ;_ac int ;_ae int ;_fbge int ;_bcfb *_g .Reader ;
_ceb tiffType ;_bbb error ;};func _aae (_efff []byte ,_dcg int ,_cfeb code )([]byte ,int ){_daad :=true ;var _gcd []byte ;_gcd ,_dcg =_fda (nil ,_dcg ,_cfeb );_cgef :=0;var _dbc int ;for _cgef < len (_efff ){_dbc ,_cgef =_cfb (_efff ,_daad ,_cgef );_gcd ,_dcg =_dfd (_gcd ,_dcg ,_dbc ,_daad );
_daad =!_daad ;};return _gcd ,_dcg %8;};type tiffType int ;var (_edd byte =1;_bab byte =0;);var _cg =[...][]uint16 {{0x7,0x8,0xb,0xc,0xe,0xf},{0x12,0x13,0x14,0x1b,0x7,0x8},{0x17,0x18,0x2a,0x2b,0x3,0x34,0x35,0x7,0x8},{0x13,0x17,0x18,0x24,0x27,0x28,0x2b,0x3,0x37,0x4,0x8,0xc},{0x12,0x13,0x14,0x15,0x16,0x17,0x1a,0x1b,0x2,0x24,0x25,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x3,0x32,0x33,0x34,0x35,0x36,0x37,0x4,0x4a,0x4b,0x5,0x52,0x53,0x54,0x55,0x58,0x59,0x5a,0x5b,0x64,0x65,0x67,0x68,0xa,0xb},{0x98,0x99,0x9a,0x9b,0xcc,0xcd,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8,0xd9,0xda,0xdb},{},{0x8,0xc,0xd},{0x12,0x13,0x14,0x15,0x16,0x17,0x1c,0x1d,0x1e,0x1f}};
func (_aga *Encoder )encodeG32D (_gfa [][]byte )[]byte {var _bfeb []byte ;var _effe int ;for _dgeag :=0;_dgeag < len (_gfa );_dgeag +=_aga .K {if _aga .Rows > 0&&!_aga .EndOfBlock &&_dgeag ==_aga .Rows {break ;};_bge ,_cgeb :=_aae (_gfa [_dgeag ],_effe ,_ea );
_bfeb =_aga .appendEncodedRow (_bfeb ,_bge ,_effe );if _aga .EncodedByteAlign {_cgeb =0;};_effe =_cgeb ;for _aef :=_dgeag +1;_aef < (_dgeag +_aga .K )&&_aef < len (_gfa );_aef ++{if _aga .Rows > 0&&!_aga .EndOfBlock &&_aef ==_aga .Rows {break ;};_dacd ,_dabdg :=_fda (nil ,_effe ,_cc );
var _ddb ,_afd ,_cgba int ;_afg :=-1;for _afg < len (_gfa [_aef ]){_ddb =_eda (_gfa [_aef ],_afg );_afd =_bbf (_gfa [_aef ],_gfa [_aef -1],_afg );_cgba =_eda (_gfa [_aef -1],_afd );if _cgba < _ddb {_dacd ,_dabdg =_gbg (_dacd ,_dabdg );_afg =_cgba ;}else {if _bb .Abs (float64 (_afd -_ddb ))> 3{_dacd ,_dabdg ,_afg =_deg (_gfa [_aef ],_dacd ,_dabdg ,_afg ,_ddb );
}else {_dacd ,_dabdg =_efag (_dacd ,_dabdg ,_ddb ,_afd );_afg =_ddb ;};};};_bfeb =_aga .appendEncodedRow (_bfeb ,_dacd ,_effe );if _aga .EncodedByteAlign {_dabdg =0;};_effe =_dabdg %8;};};if _aga .EndOfBlock {_gfd ,_ :=_cde (_effe );_bfeb =_aga .appendEncodedRow (_bfeb ,_gfd ,_effe );
};return _bfeb ;};func NewDecoder (data []byte ,options DecodeOptions )(*Decoder ,error ){_ed :=&Decoder {_bcfb :_g .NewReader (data ),_efa :options .Columns ,_eff :options .Rows ,_dfb :options .DamagedRowsBeforeError ,_adb :make ([]byte ,(options .Columns +7)/8),_cbd :make ([]int ,options .Columns +2),_cfa :make ([]int ,options .Columns +2),_fae :options .EncodedByteAligned ,_bd :options .BlackIsOne ,_abg :options .EndOfLine ,_dc :options .EndOfBlock };
switch {case options .K ==0:_ed ._ceb =_cb ;if len (data )< 20{return nil ,_a .New ("\u0074o\u006f\u0020\u0073\u0068o\u0072\u0074\u0020\u0063\u0063i\u0074t\u0066a\u0078\u0020\u0073\u0074\u0072\u0065\u0061m");};_bfe :=data [:20];if _bfe [0]!=0||(_bfe [1]>>4!=1&&_bfe [1]!=1){_ed ._ceb =_fcc ;
_bgd :=(uint16 (_bfe [0])<<8+uint16 (_bfe [1]&0xff))>>4;for _gc :=12;_gc < 160;_gc ++{_bgd =(_bgd <<1)+uint16 ((_bfe [_gc /8]>>uint16 (7-(_gc %8)))&0x01);if _bgd &0xfff==1{_ed ._ceb =_cb ;break ;};};};case options .K < 0:_ed ._ceb =_fgf ;case options .K > 0:_ed ._ceb =_cb ;
_ed ._ecd =true ;};switch _ed ._ceb {case _fcc ,_cb ,_fgf :default:return nil ,_a .New ("\u0075\u006ek\u006e\u006f\u0077\u006e\u0020\u0063\u0063\u0069\u0074\u0074\u0066\u0061\u0078\u002e\u0044\u0065\u0063\u006f\u0064\u0065\u0072\u0020ty\u0070\u0065");};
return _ed ,nil ;};var _gd =[...][]uint16 {{2,3,4,5,6,7},{128,8,9,64,10,11},{192,1664,16,17,13,14,15,1,12},{26,21,28,27,18,24,25,22,256,23,20,19},{33,34,35,36,37,38,31,32,29,53,54,39,40,41,42,43,44,30,61,62,63,0,320,384,45,59,60,46,49,50,51,52,55,56,57,58,448,512,640,576,47,48},{1472,1536,1600,1728,704,768,832,896,960,1024,1088,1152,1216,1280,1344,1408},{},{1792,1856,1920},{1984,2048,2112,2176,2240,2304,2368,2432,2496,2560}};
func (_aaa *Decoder )getNextChangingElement (_bcfd int ,_dgf bool )int {_eac :=0;if !_dgf {_eac =1;};_ggc :=int (uint32 (_aaa ._fbge )&0xFFFFFFFE)+_eac ;if _ggc > 2{_ggc -=2;};if _bcfd ==0{return _ggc ;};for _dba :=_ggc ;_dba < _aaa ._dea ;_dba +=2{if _bcfd < _aaa ._cbd [_dba ]{_aaa ._fbge =_dba ;
return _dba ;};};return -1;};func _deg (_bda ,_edcg []byte ,_abb ,_cgc ,_fgag int )([]byte ,int ,int ){_dbd :=_eda (_bda ,_fgag );_aceb :=_cgc >=0&&_bda [_cgc ]==_edd ||_cgc ==-1;_edcg ,_abb =_fda (_edcg ,_abb ,_baa );var _aeb int ;if _cgc > -1{_aeb =_fgag -_cgc ;
}else {_aeb =_fgag -_cgc -1;};_edcg ,_abb =_dfd (_edcg ,_abb ,_aeb ,_aceb );_aceb =!_aceb ;_egf :=_dbd -_fgag ;_edcg ,_abb =_dfd (_edcg ,_abb ,_egf ,_aceb );_cgc =_dbd ;return _edcg ,_abb ,_cgc ;};func (_dgea *Encoder )encodeG31D (_gcc [][]byte )[]byte {var _bgc []byte ;
_aff :=0;for _gege :=range _gcc {if _dgea .Rows > 0&&!_dgea .EndOfBlock &&_gege ==_dgea .Rows {break ;};_gfg ,_gef :=_aae (_gcc [_gege ],_aff ,_agg );_bgc =_dgea .appendEncodedRow (_bgc ,_gfg ,_aff );if _dgea .EncodedByteAlign {_gef =0;};_aff =_gef ;};
if _dgea .EndOfBlock {_gff ,_ :=_bac (_aff );_bgc =_dgea .appendEncodedRow (_bgc ,_gff ,_aff );};return _bgc ;};