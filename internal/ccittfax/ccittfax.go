//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package ccittfax ;import (_b "errors";_ef "github.com/unidoc/unipdf/v3/internal/bitwise";_a "io";_bf "math";);func _afgd (_edcg ,_gfe int )code {var _aaeg code ;switch _gfe -_edcg {case -1:_aaeg =_dda ;case -2:_aaeg =_fbg ;case -3:_aaeg =_dgc ;case 0:_aaeg =_dbcg ;
case 1:_aaeg =_gg ;case 2:_aaeg =_fg ;case 3:_aaeg =_cga ;};return _aaeg ;};func init (){_ec =&treeNode {_bgc :true ,_fdaf :_ed };_ea =&treeNode {_fdaf :_d ,_fgea :_ec };_ea ._cab =_ea ;_g =&tree {_eecg :&treeNode {}};if _fb :=_g .fillWithNode (12,0,_ea );
_fb !=nil {panic (_fb .Error ());};if _ff :=_g .fillWithNode (12,1,_ec );_ff !=nil {panic (_ff .Error ());};_eaa =&tree {_eecg :&treeNode {}};for _bfc :=0;_bfc < len (_af );_bfc ++{for _db :=0;_db < len (_af [_bfc ]);_db ++{if _ac :=_eaa .fill (_bfc +2,int (_af [_bfc ][_db ]),int (_dg [_bfc ][_db ]));
_ac !=nil {panic (_ac .Error ());};};};if _df :=_eaa .fillWithNode (12,0,_ea );_df !=nil {panic (_df .Error ());};if _ae :=_eaa .fillWithNode (12,1,_ec );_ae !=nil {panic (_ae .Error ());};_c =&tree {_eecg :&treeNode {}};for _gb :=0;_gb < len (_ee );_gb ++{for _bb :=0;
_bb < len (_ee [_gb ]);_bb ++{if _ecg :=_c .fill (_gb +4,int (_ee [_gb ][_bb ]),int (_bfg [_gb ][_bb ]));_ecg !=nil {panic (_ecg .Error ());};};};if _ce :=_c .fillWithNode (12,0,_ea );_ce !=nil {panic (_ce .Error ());};if _be :=_c .fillWithNode (12,1,_ec );
_be !=nil {panic (_be .Error ());};_f =&tree {_eecg :&treeNode {}};if _cf :=_f .fill (4,1,_aa );_cf !=nil {panic (_cf .Error ());};if _ad :=_f .fill (3,1,_efb );_ad !=nil {panic (_ad .Error ());};if _cc :=_f .fill (1,1,0);_cc !=nil {panic (_cc .Error ());
};if _adb :=_f .fill (3,3,1);_adb !=nil {panic (_adb .Error ());};if _fe :=_f .fill (6,3,2);_fe !=nil {panic (_fe .Error ());};if _fbf :=_f .fill (7,3,3);_fbf !=nil {panic (_fbf .Error ());};if _ag :=_f .fill (3,2,-1);_ag !=nil {panic (_ag .Error ());};
if _aaf :=_f .fill (6,2,-2);_aaf !=nil {panic (_aaf .Error ());};if _bc :=_f .fill (7,2,-3);_bc !=nil {panic (_bc .Error ());};};var (_eg =_b .New ("\u0063\u0063\u0069\u0074tf\u0061\u0078\u0020\u0063\u006f\u0072\u0072\u0075\u0070\u0074\u0065\u0064\u0020\u0052T\u0043");
_ba =_b .New ("\u0063\u0063\u0069\u0074tf\u0061\u0078\u0020\u0045\u004f\u004c\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075n\u0064"););type code struct{Code uint16 ;BitsWritten int ;};var _bfg =[...][]uint16 {{2,3,4,5,6,7},{128,8,9,64,10,11},{192,1664,16,17,13,14,15,1,12},{26,21,28,27,18,24,25,22,256,23,20,19},{33,34,35,36,37,38,31,32,29,53,54,39,40,41,42,43,44,30,61,62,63,0,320,384,45,59,60,46,49,50,51,52,55,56,57,58,448,512,640,576,47,48},{1472,1536,1600,1728,704,768,832,896,960,1024,1088,1152,1216,1280,1344,1408},{},{1792,1856,1920},{1984,2048,2112,2176,2240,2304,2368,2432,2496,2560}};
func _dcd (_cdfe [][]byte )[][]byte {_dee :=make ([]byte ,len (_cdfe [0]));for _gfd :=range _dee {_dee [_gfd ]=_geg ;};_cdfe =append (_cdfe ,[]byte {});for _eadd :=len (_cdfe )-1;_eadd > 0;_eadd --{_cdfe [_eadd ]=_cdfe [_eadd -1];};_cdfe [0]=_dee ;return _cdfe ;
};func _dfda (_bdb int )([]byte ,int ){var _cbe []byte ;for _gbcd :=0;_gbcd < 6;_gbcd ++{_cbe ,_bdb =_fgce (_cbe ,_bdb ,_dbcf );};return _cbe ,_bdb %8;};type Decoder struct{_eeb int ;_aef int ;_dc int ;_da []byte ;_aaa int ;_eca bool ;_fgc bool ;_fba bool ;
_def bool ;_aec bool ;_ecc bool ;_ffc bool ;_fgcg int ;_bd int ;_ge []int ;_bba []int ;_aae int ;_bg int ;_fd int ;_bde int ;_cca *_ef .Reader ;_cfe tiffType ;_fbga error ;};func init (){_edb =make (map[int ]code );_edb [0]=code {Code :13<<8|3<<6,BitsWritten :10};
_edb [1]=code {Code :2<<(5+8),BitsWritten :3};_edb [2]=code {Code :3<<(6+8),BitsWritten :2};_edb [3]=code {Code :2<<(6+8),BitsWritten :2};_edb [4]=code {Code :3<<(5+8),BitsWritten :3};_edb [5]=code {Code :3<<(4+8),BitsWritten :4};_edb [6]=code {Code :2<<(4+8),BitsWritten :4};
_edb [7]=code {Code :3<<(3+8),BitsWritten :5};_edb [8]=code {Code :5<<(2+8),BitsWritten :6};_edb [9]=code {Code :4<<(2+8),BitsWritten :6};_edb [10]=code {Code :4<<(1+8),BitsWritten :7};_edb [11]=code {Code :5<<(1+8),BitsWritten :7};_edb [12]=code {Code :7<<(1+8),BitsWritten :7};
_edb [13]=code {Code :4<<8,BitsWritten :8};_edb [14]=code {Code :7<<8,BitsWritten :8};_edb [15]=code {Code :12<<8,BitsWritten :9};_edb [16]=code {Code :5<<8|3<<6,BitsWritten :10};_edb [17]=code {Code :6<<8,BitsWritten :10};_edb [18]=code {Code :2<<8,BitsWritten :10};
_edb [19]=code {Code :12<<8|7<<5,BitsWritten :11};_edb [20]=code {Code :13<<8,BitsWritten :11};_edb [21]=code {Code :13<<8|4<<5,BitsWritten :11};_edb [22]=code {Code :6<<8|7<<5,BitsWritten :11};_edb [23]=code {Code :5<<8,BitsWritten :11};_edb [24]=code {Code :2<<8|7<<5,BitsWritten :11};
_edb [25]=code {Code :3<<8,BitsWritten :11};_edb [26]=code {Code :12<<8|10<<4,BitsWritten :12};_edb [27]=code {Code :12<<8|11<<4,BitsWritten :12};_edb [28]=code {Code :12<<8|12<<4,BitsWritten :12};_edb [29]=code {Code :12<<8|13<<4,BitsWritten :12};_edb [30]=code {Code :6<<8|8<<4,BitsWritten :12};
_edb [31]=code {Code :6<<8|9<<4,BitsWritten :12};_edb [32]=code {Code :6<<8|10<<4,BitsWritten :12};_edb [33]=code {Code :6<<8|11<<4,BitsWritten :12};_edb [34]=code {Code :13<<8|2<<4,BitsWritten :12};_edb [35]=code {Code :13<<8|3<<4,BitsWritten :12};_edb [36]=code {Code :13<<8|4<<4,BitsWritten :12};
_edb [37]=code {Code :13<<8|5<<4,BitsWritten :12};_edb [38]=code {Code :13<<8|6<<4,BitsWritten :12};_edb [39]=code {Code :13<<8|7<<4,BitsWritten :12};_edb [40]=code {Code :6<<8|12<<4,BitsWritten :12};_edb [41]=code {Code :6<<8|13<<4,BitsWritten :12};_edb [42]=code {Code :13<<8|10<<4,BitsWritten :12};
_edb [43]=code {Code :13<<8|11<<4,BitsWritten :12};_edb [44]=code {Code :5<<8|4<<4,BitsWritten :12};_edb [45]=code {Code :5<<8|5<<4,BitsWritten :12};_edb [46]=code {Code :5<<8|6<<4,BitsWritten :12};_edb [47]=code {Code :5<<8|7<<4,BitsWritten :12};_edb [48]=code {Code :6<<8|4<<4,BitsWritten :12};
_edb [49]=code {Code :6<<8|5<<4,BitsWritten :12};_edb [50]=code {Code :5<<8|2<<4,BitsWritten :12};_edb [51]=code {Code :5<<8|3<<4,BitsWritten :12};_edb [52]=code {Code :2<<8|4<<4,BitsWritten :12};_edb [53]=code {Code :3<<8|7<<4,BitsWritten :12};_edb [54]=code {Code :3<<8|8<<4,BitsWritten :12};
_edb [55]=code {Code :2<<8|7<<4,BitsWritten :12};_edb [56]=code {Code :2<<8|8<<4,BitsWritten :12};_edb [57]=code {Code :5<<8|8<<4,BitsWritten :12};_edb [58]=code {Code :5<<8|9<<4,BitsWritten :12};_edb [59]=code {Code :2<<8|11<<4,BitsWritten :12};_edb [60]=code {Code :2<<8|12<<4,BitsWritten :12};
_edb [61]=code {Code :5<<8|10<<4,BitsWritten :12};_edb [62]=code {Code :6<<8|6<<4,BitsWritten :12};_edb [63]=code {Code :6<<8|7<<4,BitsWritten :12};_gd =make (map[int ]code );_gd [0]=code {Code :53<<8,BitsWritten :8};_gd [1]=code {Code :7<<(2+8),BitsWritten :6};
_gd [2]=code {Code :7<<(4+8),BitsWritten :4};_gd [3]=code {Code :8<<(4+8),BitsWritten :4};_gd [4]=code {Code :11<<(4+8),BitsWritten :4};_gd [5]=code {Code :12<<(4+8),BitsWritten :4};_gd [6]=code {Code :14<<(4+8),BitsWritten :4};_gd [7]=code {Code :15<<(4+8),BitsWritten :4};
_gd [8]=code {Code :19<<(3+8),BitsWritten :5};_gd [9]=code {Code :20<<(3+8),BitsWritten :5};_gd [10]=code {Code :7<<(3+8),BitsWritten :5};_gd [11]=code {Code :8<<(3+8),BitsWritten :5};_gd [12]=code {Code :8<<(2+8),BitsWritten :6};_gd [13]=code {Code :3<<(2+8),BitsWritten :6};
_gd [14]=code {Code :52<<(2+8),BitsWritten :6};_gd [15]=code {Code :53<<(2+8),BitsWritten :6};_gd [16]=code {Code :42<<(2+8),BitsWritten :6};_gd [17]=code {Code :43<<(2+8),BitsWritten :6};_gd [18]=code {Code :39<<(1+8),BitsWritten :7};_gd [19]=code {Code :12<<(1+8),BitsWritten :7};
_gd [20]=code {Code :8<<(1+8),BitsWritten :7};_gd [21]=code {Code :23<<(1+8),BitsWritten :7};_gd [22]=code {Code :3<<(1+8),BitsWritten :7};_gd [23]=code {Code :4<<(1+8),BitsWritten :7};_gd [24]=code {Code :40<<(1+8),BitsWritten :7};_gd [25]=code {Code :43<<(1+8),BitsWritten :7};
_gd [26]=code {Code :19<<(1+8),BitsWritten :7};_gd [27]=code {Code :36<<(1+8),BitsWritten :7};_gd [28]=code {Code :24<<(1+8),BitsWritten :7};_gd [29]=code {Code :2<<8,BitsWritten :8};_gd [30]=code {Code :3<<8,BitsWritten :8};_gd [31]=code {Code :26<<8,BitsWritten :8};
_gd [32]=code {Code :27<<8,BitsWritten :8};_gd [33]=code {Code :18<<8,BitsWritten :8};_gd [34]=code {Code :19<<8,BitsWritten :8};_gd [35]=code {Code :20<<8,BitsWritten :8};_gd [36]=code {Code :21<<8,BitsWritten :8};_gd [37]=code {Code :22<<8,BitsWritten :8};
_gd [38]=code {Code :23<<8,BitsWritten :8};_gd [39]=code {Code :40<<8,BitsWritten :8};_gd [40]=code {Code :41<<8,BitsWritten :8};_gd [41]=code {Code :42<<8,BitsWritten :8};_gd [42]=code {Code :43<<8,BitsWritten :8};_gd [43]=code {Code :44<<8,BitsWritten :8};
_gd [44]=code {Code :45<<8,BitsWritten :8};_gd [45]=code {Code :4<<8,BitsWritten :8};_gd [46]=code {Code :5<<8,BitsWritten :8};_gd [47]=code {Code :10<<8,BitsWritten :8};_gd [48]=code {Code :11<<8,BitsWritten :8};_gd [49]=code {Code :82<<8,BitsWritten :8};
_gd [50]=code {Code :83<<8,BitsWritten :8};_gd [51]=code {Code :84<<8,BitsWritten :8};_gd [52]=code {Code :85<<8,BitsWritten :8};_gd [53]=code {Code :36<<8,BitsWritten :8};_gd [54]=code {Code :37<<8,BitsWritten :8};_gd [55]=code {Code :88<<8,BitsWritten :8};
_gd [56]=code {Code :89<<8,BitsWritten :8};_gd [57]=code {Code :90<<8,BitsWritten :8};_gd [58]=code {Code :91<<8,BitsWritten :8};_gd [59]=code {Code :74<<8,BitsWritten :8};_gd [60]=code {Code :75<<8,BitsWritten :8};_gd [61]=code {Code :50<<8,BitsWritten :8};
_gd [62]=code {Code :51<<8,BitsWritten :8};_gd [63]=code {Code :52<<8,BitsWritten :8};_gbc =make (map[int ]code );_gbc [64]=code {Code :3<<8|3<<6,BitsWritten :10};_gbc [128]=code {Code :12<<8|8<<4,BitsWritten :12};_gbc [192]=code {Code :12<<8|9<<4,BitsWritten :12};
_gbc [256]=code {Code :5<<8|11<<4,BitsWritten :12};_gbc [320]=code {Code :3<<8|3<<4,BitsWritten :12};_gbc [384]=code {Code :3<<8|4<<4,BitsWritten :12};_gbc [448]=code {Code :3<<8|5<<4,BitsWritten :12};_gbc [512]=code {Code :3<<8|12<<3,BitsWritten :13};
_gbc [576]=code {Code :3<<8|13<<3,BitsWritten :13};_gbc [640]=code {Code :2<<8|10<<3,BitsWritten :13};_gbc [704]=code {Code :2<<8|11<<3,BitsWritten :13};_gbc [768]=code {Code :2<<8|12<<3,BitsWritten :13};_gbc [832]=code {Code :2<<8|13<<3,BitsWritten :13};
_gbc [896]=code {Code :3<<8|18<<3,BitsWritten :13};_gbc [960]=code {Code :3<<8|19<<3,BitsWritten :13};_gbc [1024]=code {Code :3<<8|20<<3,BitsWritten :13};_gbc [1088]=code {Code :3<<8|21<<3,BitsWritten :13};_gbc [1152]=code {Code :3<<8|22<<3,BitsWritten :13};
_gbc [1216]=code {Code :119<<3,BitsWritten :13};_gbc [1280]=code {Code :2<<8|18<<3,BitsWritten :13};_gbc [1344]=code {Code :2<<8|19<<3,BitsWritten :13};_gbc [1408]=code {Code :2<<8|20<<3,BitsWritten :13};_gbc [1472]=code {Code :2<<8|21<<3,BitsWritten :13};
_gbc [1536]=code {Code :2<<8|26<<3,BitsWritten :13};_gbc [1600]=code {Code :2<<8|27<<3,BitsWritten :13};_gbc [1664]=code {Code :3<<8|4<<3,BitsWritten :13};_gbc [1728]=code {Code :3<<8|5<<3,BitsWritten :13};_afg =make (map[int ]code );_afg [64]=code {Code :27<<(3+8),BitsWritten :5};
_afg [128]=code {Code :18<<(3+8),BitsWritten :5};_afg [192]=code {Code :23<<(2+8),BitsWritten :6};_afg [256]=code {Code :55<<(1+8),BitsWritten :7};_afg [320]=code {Code :54<<8,BitsWritten :8};_afg [384]=code {Code :55<<8,BitsWritten :8};_afg [448]=code {Code :100<<8,BitsWritten :8};
_afg [512]=code {Code :101<<8,BitsWritten :8};_afg [576]=code {Code :104<<8,BitsWritten :8};_afg [640]=code {Code :103<<8,BitsWritten :8};_afg [704]=code {Code :102<<8,BitsWritten :9};_afg [768]=code {Code :102<<8|1<<7,BitsWritten :9};_afg [832]=code {Code :105<<8,BitsWritten :9};
_afg [896]=code {Code :105<<8|1<<7,BitsWritten :9};_afg [960]=code {Code :106<<8,BitsWritten :9};_afg [1024]=code {Code :106<<8|1<<7,BitsWritten :9};_afg [1088]=code {Code :107<<8,BitsWritten :9};_afg [1152]=code {Code :107<<8|1<<7,BitsWritten :9};_afg [1216]=code {Code :108<<8,BitsWritten :9};
_afg [1280]=code {Code :108<<8|1<<7,BitsWritten :9};_afg [1344]=code {Code :109<<8,BitsWritten :9};_afg [1408]=code {Code :109<<8|1<<7,BitsWritten :9};_afg [1472]=code {Code :76<<8,BitsWritten :9};_afg [1536]=code {Code :76<<8|1<<7,BitsWritten :9};_afg [1600]=code {Code :77<<8,BitsWritten :9};
_afg [1664]=code {Code :24<<(2+8),BitsWritten :6};_afg [1728]=code {Code :77<<8|1<<7,BitsWritten :9};_cb =make (map[int ]code );_cb [1792]=code {Code :1<<8,BitsWritten :11};_cb [1856]=code {Code :1<<8|4<<5,BitsWritten :11};_cb [1920]=code {Code :1<<8|5<<5,BitsWritten :11};
_cb [1984]=code {Code :1<<8|2<<4,BitsWritten :12};_cb [2048]=code {Code :1<<8|3<<4,BitsWritten :12};_cb [2112]=code {Code :1<<8|4<<4,BitsWritten :12};_cb [2176]=code {Code :1<<8|5<<4,BitsWritten :12};_cb [2240]=code {Code :1<<8|6<<4,BitsWritten :12};_cb [2304]=code {Code :1<<8|7<<4,BitsWritten :12};
_cb [2368]=code {Code :1<<8|12<<4,BitsWritten :12};_cb [2432]=code {Code :1<<8|13<<4,BitsWritten :12};_cb [2496]=code {Code :1<<8|14<<4,BitsWritten :12};_cb [2560]=code {Code :1<<8|15<<4,BitsWritten :12};_dbc =make (map[int ]byte );_dbc [0]=0xFF;_dbc [1]=0xFE;
_dbc [2]=0xFC;_dbc [3]=0xF8;_dbc [4]=0xF0;_dbc [5]=0xE0;_dbc [6]=0xC0;_dbc [7]=0x80;_dbc [8]=0x00;};const (_ tiffType =iota ;_de ;_ab ;_beg ;);func _egf (_bead []byte ,_eae int )int {if _eae >=len (_bead ){return _eae ;};if _eae < -1{_eae =-1;};var _cba byte ;
if _eae > -1{_cba =_bead [_eae ];}else {_cba =_geg ;};_add :=_eae +1;for _add < len (_bead ){if _bead [_add ]!=_cba {break ;};_add ++;};return _add ;};var _dg =[...][]uint16 {{3,2},{1,4},{6,5},{7},{9,8},{10,11,12},{13,14},{15},{16,17,0,18,64},{24,25,23,22,19,20,21,1792,1856,1920},{1984,2048,2112,2176,2240,2304,2368,2432,2496,2560,52,55,56,59,60,320,384,448,53,54,50,51,44,45,46,47,57,58,61,256,48,49,62,63,30,31,32,33,40,41,128,192,26,27,28,29,34,35,36,37,38,39,42,43},{640,704,768,832,1280,1344,1408,1472,1536,1600,1664,1728,512,576,896,960,1024,1088,1152,1216}};
type Encoder struct{K int ;EndOfLine bool ;EncodedByteAlign bool ;Columns int ;Rows int ;EndOfBlock bool ;BlackIs1 bool ;DamagedRowsBeforeError int ;};func (_efa *Encoder )encodeG31D (_gega [][]byte )[]byte {var _gdc []byte ;_ffcb :=0;for _dge :=range _gega {if _efa .Rows > 0&&!_efa .EndOfBlock &&_dge ==_efa .Rows {break ;
};_fef ,_feb :=_acg (_gega [_dge ],_ffcb ,_dbcf );_gdc =_efa .appendEncodedRow (_gdc ,_fef ,_ffcb );if _efa .EncodedByteAlign {_feb =0;};_ffcb =_feb ;};if _efa .EndOfBlock {_bee ,_ :=_dfda (_ffcb );_gdc =_efa .appendEncodedRow (_gdc ,_bee ,_ffcb );};return _gdc ;
};func _acbf (_egc []byte ,_feee bool ,_dff int )(int ,int ){_gca :=0;for _dff < len (_egc ){if _feee {if _egc [_dff ]!=_geg {break ;};}else {if _egc [_dff ]!=_ddcb {break ;};};_gca ++;_dff ++;};return _gca ,_dff ;};func (_cdd *Encoder )encodeG4 (_acag [][]byte )[]byte {_bbcf :=make ([][]byte ,len (_acag ));
copy (_bbcf ,_acag );_bbcf =_dcd (_bbcf );var _dad []byte ;var _begd int ;for _bed :=1;_bed < len (_bbcf );_bed ++{if _cdd .Rows > 0&&!_cdd .EndOfBlock &&_bed ==(_cdd .Rows +1){break ;};var _cec []byte ;var _fbff ,_bbg ,_ede int ;_bcb :=_begd ;_acbc :=-1;
for _acbc < len (_bbcf [_bed ]){_fbff =_egf (_bbcf [_bed ],_acbc );_bbg =_gbf (_bbcf [_bed ],_bbcf [_bed -1],_acbc );_ede =_egf (_bbcf [_bed -1],_bbg );if _ede < _fbff {_cec ,_bcb =_fgce (_cec ,_bcb ,_cea );_acbc =_ede ;}else {if _bf .Abs (float64 (_bbg -_fbff ))> 3{_cec ,_bcb ,_acbc =_gaf (_bbcf [_bed ],_cec ,_bcb ,_acbc ,_fbff );
}else {_cec ,_bcb =_ace (_cec ,_bcb ,_fbff ,_bbg );_acbc =_fbff ;};};};_dad =_cdd .appendEncodedRow (_dad ,_cec ,_begd );if _cdd .EncodedByteAlign {_bcb =0;};_begd =_bcb %8;};if _cdd .EndOfBlock {_cgb ,_ :=_fda (_begd );_dad =_cdd .appendEncodedRow (_dad ,_cgb ,_begd );
};return _dad ;};func _eddb (_efdf int )([]byte ,int ){var _fbdb []byte ;for _gfbe :=0;_gfbe < 6;_gfbe ++{_fbdb ,_efdf =_fgce (_fbdb ,_efdf ,_adf );};return _fbdb ,_efdf %8;};func _gbf (_eafa ,_cbaf []byte ,_fge int )int {_fdd :=_egf (_cbaf ,_fge );if _fdd < len (_cbaf )&&(_fge ==-1&&_cbaf [_fdd ]==_geg ||_fge >=0&&_fge < len (_eafa )&&_eafa [_fge ]==_cbaf [_fdd ]||_fge >=len (_eafa )&&_eafa [_fge -1]!=_cbaf [_fdd ]){_fdd =_egf (_cbaf ,_fdd );
};return _fdd ;};func (_agg *Decoder )decode2D ()error {_agg ._aae =_agg ._bg ;_agg ._bba ,_agg ._ge =_agg ._ge ,_agg ._bba ;_bfea :=true ;var (_abd bool ;_bcd int ;_bea error ;);_agg ._bg =0;_cef :for _bcd < _agg ._eeb {_dgcg :=_f ._eecg ;for {_abd ,_bea =_agg ._cca .ReadBool ();
if _bea !=nil {return _bea ;};_dgcg =_dgcg .walk (_abd );if _dgcg ==nil {continue _cef ;};if !_dgcg ._bgc {continue ;};switch _dgcg ._fdaf {case _efb :var _dec int ;if _bfea {_dec ,_bea =_agg .decodeRun (_c );}else {_dec ,_bea =_agg .decodeRun (_eaa );
};if _bea !=nil {return _bea ;};_bcd +=_dec ;_agg ._bba [_agg ._bg ]=_bcd ;_agg ._bg ++;if _bfea {_dec ,_bea =_agg .decodeRun (_eaa );}else {_dec ,_bea =_agg .decodeRun (_c );};if _bea !=nil {return _bea ;};_bcd +=_dec ;_agg ._bba [_agg ._bg ]=_bcd ;_agg ._bg ++;
case _aa :_ecd :=_agg .getNextChangingElement (_bcd ,_bfea )+1;if _ecd >=_agg ._aae {_bcd =_agg ._eeb ;}else {_bcd =_agg ._ge [_ecd ];};default:_ddf :=_agg .getNextChangingElement (_bcd ,_bfea );if _ddf >=_agg ._aae ||_ddf ==-1{_bcd =_agg ._eeb +_dgcg ._fdaf ;
}else {_bcd =_agg ._ge [_ddf ]+_dgcg ._fdaf ;};_agg ._bba [_agg ._bg ]=_bcd ;_agg ._bg ++;_bfea =!_bfea ;};continue _cef ;};};return nil ;};func (_edd *Decoder )tryFetchEOL1 ()(bool ,error ){_gad ,_cgd :=_edd ._cca .ReadBits (13);if _cgd !=nil {return false ,_cgd ;
};return _gad ==0x3,nil ;};func (_fgf tiffType )String ()string {switch _fgf {case _de :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u004d\u006f\u0064i\u0066\u0069\u0065\u0064\u0048\u0075\u0066\u0066\u006d\u0061n\u0052\u006c\u0065";case _ab :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u0054\u0034";
case _beg :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u0054\u0036";default:return "\u0075n\u0064\u0065\u0066\u0069\u006e\u0065d";};};func (_cac *Decoder )tryFetchEOL ()(bool ,error ){_cfc ,_gfa :=_cac ._cca .ReadBits (12);if _gfa !=nil {return false ,_gfa ;
};return _cfc ==0x1,nil ;};func _fda (_bdbf int )([]byte ,int ){var _bdd []byte ;for _eeg :=0;_eeg < 2;_eeg ++{_bdd ,_bdbf =_fgce (_bdd ,_bdbf ,_dbcf );};return _bdd ,_bdbf %8;};func _fgce (_ceb []byte ,_gebd int ,_bdc code )([]byte ,int ){_eaaa :=0;for _eaaa < _bdc .BitsWritten {_cgad :=_gebd /8;
_egbb :=_gebd %8;if _cgad >=len (_ceb ){_ceb =append (_ceb ,0);};_gce :=8-_egbb ;_cad :=_bdc .BitsWritten -_eaaa ;if _gce > _cad {_gce =_cad ;};if _eaaa < 8{_ceb [_cgad ]=_ceb [_cgad ]|byte (_bdc .Code >>uint (8+_egbb -_eaaa ))&_dbc [8-_gce -_egbb ];}else {_ceb [_cgad ]=_ceb [_cgad ]|(byte (_bdc .Code <<uint (_eaaa -8))&_dbc [8-_gce ])>>uint (_egbb );
};_gebd +=_gce ;_eaaa +=_gce ;};return _ceb ,_gebd ;};func (_cd *Decoder )looseFetchEOL ()(bool ,error ){_bfca ,_bbd :=_cd ._cca .ReadBits (12);if _bbd !=nil {return false ,_bbd ;};switch _bfca {case 0x1:return true ,nil ;case 0x0:for {_aefb ,_fce :=_cd ._cca .ReadBool ();
if _fce !=nil {return false ,_fce ;};if _aefb {return true ,nil ;};};default:return false ,nil ;};};type tree struct{_eecg *treeNode };func (_ccb *Decoder )decode1D ()error {var (_fbd int ;_geb error ;);_bcc :=true ;_ccb ._bg =0;for {var _aca int ;if _bcc {_aca ,_geb =_ccb .decodeRun (_c );
}else {_aca ,_geb =_ccb .decodeRun (_eaa );};if _geb !=nil {return _geb ;};_fbd +=_aca ;_ccb ._bba [_ccb ._bg ]=_fbd ;_ccb ._bg ++;_bcc =!_bcc ;if _fbd >=_ccb ._eeb {break ;};};return nil ;};func _gaf (_dab ,_bca []byte ,_edc ,_ded ,_ccbf int )([]byte ,int ,int ){_gaa :=_egf (_dab ,_ccbf );
_daae :=_ded >=0&&_dab [_ded ]==_geg ||_ded ==-1;_bca ,_edc =_fgce (_bca ,_edc ,_dd );var _ffb int ;if _ded > -1{_ffb =_ccbf -_ded ;}else {_ffb =_ccbf -_ded -1;};_bca ,_edc =_gfg (_bca ,_edc ,_ffb ,_daae );_daae =!_daae ;_fegb :=_gaa -_ccbf ;_bca ,_edc =_gfg (_bca ,_edc ,_fegb ,_daae );
_ded =_gaa ;return _bca ,_edc ,_ded ;};func (_cbg *Encoder )encodeG32D (_fgga [][]byte )[]byte {var _bge []byte ;var _caac int ;for _gdgf :=0;_gdgf < len (_fgga );_gdgf +=_cbg .K {if _cbg .Rows > 0&&!_cbg .EndOfBlock &&_gdgf ==_cbg .Rows {break ;};_fae ,_deag :=_acg (_fgga [_gdgf ],_caac ,_adf );
_bge =_cbg .appendEncodedRow (_bge ,_fae ,_caac );if _cbg .EncodedByteAlign {_deag =0;};_caac =_deag ;for _bgf :=_gdgf +1;_bgf < (_gdgf +_cbg .K )&&_bgf < len (_fgga );_bgf ++{if _cbg .Rows > 0&&!_cbg .EndOfBlock &&_bgf ==_cbg .Rows {break ;};_fde ,_efc :=_fgce (nil ,_caac ,_aac );
var _fbdd ,_ddg ,_ged int ;_ffgb :=-1;for _ffgb < len (_fgga [_bgf ]){_fbdd =_egf (_fgga [_bgf ],_ffgb );_ddg =_gbf (_fgga [_bgf ],_fgga [_bgf -1],_ffgb );_ged =_egf (_fgga [_bgf -1],_ddg );if _ged < _fbdd {_fde ,_efc =_fcfa (_fde ,_efc );_ffgb =_ged ;
}else {if _bf .Abs (float64 (_ddg -_fbdd ))> 3{_fde ,_efc ,_ffgb =_gaf (_fgga [_bgf ],_fde ,_efc ,_ffgb ,_fbdd );}else {_fde ,_efc =_ace (_fde ,_efc ,_fbdd ,_ddg );_ffgb =_fbdd ;};};};_bge =_cbg .appendEncodedRow (_bge ,_fde ,_caac );if _cbg .EncodedByteAlign {_efc =0;
};_caac =_efc %8;};};if _cbg .EndOfBlock {_cda ,_ :=_eddb (_caac );_bge =_cbg .appendEncodedRow (_bge ,_cda ,_caac );};return _bge ;};func (_gdg *Decoder )decodeRowType6 ()error {if _gdg ._ffc {_gdg ._cca .Align ();};if _gdg ._ecc {_gdg ._cca .Mark ();
_gcg ,_bfdc :=_gdg .tryFetchEOL ();if _bfdc !=nil {return _bfdc ;};if _gcg {_gcg ,_bfdc =_gdg .tryFetchEOL ();if _bfdc !=nil {return _bfdc ;};if _gcg {return _a .EOF ;};};_gdg ._cca .Reset ();};return _gdg .decode2D ();};func (_efg *Decoder )fetch ()error {if _efg ._fgcg ==-1{return nil ;
};if _efg ._bd < _efg ._fgcg {return nil ;};_efg ._fgcg =0;_acb :=_efg .decodeRow ();if _acb !=nil {if !_b .Is (_acb ,_a .EOF ){return _acb ;};if _efg ._fgcg !=0{return _acb ;};_efg ._fgcg =-1;};_efg ._bd =0;return nil ;};var _af =[...][]uint16 {{0x2,0x3},{0x2,0x3},{0x2,0x3},{0x3},{0x4,0x5},{0x4,0x5,0x7},{0x4,0x7},{0x18},{0x17,0x18,0x37,0x8,0xf},{0x17,0x18,0x28,0x37,0x67,0x68,0x6c,0x8,0xc,0xd},{0x12,0x13,0x14,0x15,0x16,0x17,0x1c,0x1d,0x1e,0x1f,0x24,0x27,0x28,0x2b,0x2c,0x33,0x34,0x35,0x37,0x38,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0xc8,0xc9,0xca,0xcb,0xcc,0xcd,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xda,0xdb},{0x4a,0x4b,0x4c,0x4d,0x52,0x53,0x54,0x55,0x5a,0x5b,0x64,0x65,0x6c,0x6d,0x72,0x73,0x74,0x75,0x76,0x77}};
func (_aga *Decoder )decodeRow ()(_bdg error ){if !_aga ._ecc &&_aga ._aef > 0&&_aga ._aef ==_aga ._dc {return _a .EOF ;};switch _aga ._cfe {case _de :_bdg =_aga .decodeRowType2 ();case _ab :_bdg =_aga .decodeRowType4 ();case _beg :_bdg =_aga .decodeRowType6 ();
};if _bdg !=nil {return _bdg ;};_eec :=0;_dfa :=true ;_aga ._bde =0;for _eada :=0;_eada < _aga ._bg ;_eada ++{_afe :=_aga ._eeb ;if _eada !=_aga ._bg {_afe =_aga ._bba [_eada ];};if _afe > _aga ._eeb {_afe =_aga ._eeb ;};_deb :=_eec /8;for _eec %8!=0&&_afe -_eec > 0{var _fc byte ;
if !_dfa {_fc =1<<uint (7-(_eec %8));};_aga ._da [_deb ]|=_fc ;_eec ++;};if _eec %8==0{_deb =_eec /8;var _ffg byte ;if !_dfa {_ffg =0xff;};for _afe -_eec > 7{_aga ._da [_deb ]=_ffg ;_eec +=8;_deb ++;};};for _afe -_eec > 0{if _eec %8==0{_aga ._da [_deb ]=0;
};var _bfcg byte ;if !_dfa {_bfcg =1<<uint (7-(_eec %8));};_aga ._da [_deb ]|=_bfcg ;_eec ++;};_dfa =!_dfa ;};if _eec !=_aga ._eeb {return _b .New ("\u0073\u0075\u006d\u0020\u006f\u0066 \u0072\u0075\u006e\u002d\u006c\u0065\u006e\u0067\u0074\u0068\u0073\u0020\u0064\u006f\u0065\u0073\u0020\u006e\u006f\u0074 \u0065\u0071\u0075\u0061\u006c\u0020\u0073\u0063\u0061\u006e\u0020\u006c\u0069\u006ee\u0020w\u0069\u0064\u0074\u0068");
};_aga ._fgcg =(_eec +7)/8;_aga ._dc ++;return nil ;};type tiffType int ;func (_eac *Encoder )appendEncodedRow (_ddcbb ,_dfaa []byte ,_ade int )[]byte {if len (_ddcbb )> 0&&_ade !=0&&!_eac .EncodedByteAlign {_ddcbb [len (_ddcbb )-1]=_ddcbb [len (_ddcbb )-1]|_dfaa [0];
_ddcbb =append (_ddcbb ,_dfaa [1:]...);}else {_ddcbb =append (_ddcbb ,_dfaa ...);};return _ddcbb ;};func (_beadb *tree )fillWithNode (_bcg ,_agb int ,_adde *treeNode )error {_acc :=_beadb ._eecg ;for _abde :=0;_abde < _bcg ;_abde ++{_aega :=uint (_bcg -1-_abde );
_edg :=((_agb >>_aega )&1)!=0;_aggb :=_acc .walk (_edg );if _aggb !=nil {if _aggb ._bgc {return _b .New ("\u006e\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u006c\u0065\u0061\u0066\u002c\u0020\u006eo\u0020o\u0074\u0068\u0065\u0072\u0020\u0066\u006f\u006c\u006c\u006f\u0077\u0069\u006e\u0067");
};_acc =_aggb ;continue ;};if _abde ==_bcg -1{_aggb =_adde ;}else {_aggb =&treeNode {};};if _agb ==0{_aggb ._adg =true ;};_acc .set (_edg ,_aggb );_acc =_aggb ;};return nil ;};func _acg (_aaae []byte ,_defb int ,_bff code )([]byte ,int ){_dbg :=true ;var _fee []byte ;
_fee ,_defb =_fgce (nil ,_defb ,_bff );_ddd :=0;var _fcb int ;for _ddd < len (_aaae ){_fcb ,_ddd =_acbf (_aaae ,_dbg ,_ddd );_fee ,_defb =_gfg (_fee ,_defb ,_fcb ,_dbg );_dbg =!_dbg ;};return _fee ,_defb %8;};func (_dfd *Decoder )decodeRun (_ffa *tree )(int ,error ){var _ecac int ;
_fgg :=_ffa ._eecg ;for {_bbe ,_dcb :=_dfd ._cca .ReadBool ();if _dcb !=nil {return 0,_dcb ;};_fgg =_fgg .walk (_bbe );if _fgg ==nil {return 0,_b .New ("\u0075\u006e\u006bno\u0077\u006e\u0020\u0063\u006f\u0064\u0065\u0020\u0069n\u0020H\u0075f\u0066m\u0061\u006e\u0020\u0052\u004c\u0045\u0020\u0073\u0074\u0072\u0065\u0061\u006d");
};if _fgg ._bgc {_ecac +=_fgg ._fdaf ;switch {case _fgg ._fdaf >=64:_fgg =_ffa ._eecg ;case _fgg ._fdaf >=0:return _ecac ,nil ;default:return _dfd ._eeb ,nil ;};};};};type DecodeOptions struct{Columns int ;Rows int ;K int ;EncodedByteAligned bool ;BlackIsOne bool ;
EndOfBlock bool ;EndOfLine bool ;DamagedRowsBeforeError int ;};func (_ddc *Decoder )decoderRowType41D ()error {if _ddc ._ffc {_ddc ._cca .Align ();};_ddc ._cca .Mark ();var (_age bool ;_fa error ;);if _ddc ._aec {_age ,_fa =_ddc .tryFetchEOL ();if _fa !=nil {return _fa ;
};if !_age {return _ba ;};}else {_age ,_fa =_ddc .looseFetchEOL ();if _fa !=nil {return _fa ;};};if !_age {_ddc ._cca .Reset ();};if _age &&_ddc ._ecc {_ddc ._cca .Mark ();for _fac :=0;_fac < 5;_fac ++{_age ,_fa =_ddc .tryFetchEOL ();if _fa !=nil {if _b .Is (_fa ,_a .EOF ){if _fac ==0{break ;
};return _eg ;};};if _age {continue ;};if _fac > 0{return _eg ;};break ;};if _age {return _a .EOF ;};_ddc ._cca .Reset ();};if _fa =_ddc .decode1D ();_fa !=nil {return _fa ;};return nil ;};type treeNode struct{_cab *treeNode ;_fgea *treeNode ;_fdaf int ;
_adg bool ;_bgc bool ;};func _ace (_acgf []byte ,_ffae ,_bec ,_dcbc int )([]byte ,int ){_gga :=_afgd (_bec ,_dcbc );_acgf ,_ffae =_fgce (_acgf ,_ffae ,_gga );return _acgf ,_ffae ;};func _ebbe (_aeg ,_afb []byte ,_eddf int ,_fdg bool )int {_gee :=_egf (_afb ,_eddf );
if _gee < len (_afb )&&(_eddf ==-1&&_afb [_gee ]==_geg ||_eddf >=0&&_eddf < len (_aeg )&&_aeg [_eddf ]==_afb [_gee ]||_eddf >=len (_aeg )&&_fdg &&_afb [_gee ]==_geg ||_eddf >=len (_aeg )&&!_fdg &&_afb [_gee ]==_ddcb ){_gee =_egf (_afb ,_gee );};return _gee ;
};func (_fed *tree )fill (_ggg ,_eafe ,_gcc int )error {_ecgba :=_fed ._eecg ;for _caae :=0;_caae < _ggg ;_caae ++{_dbb :=_ggg -1-_caae ;_ebbd :=((_eafe >>uint (_dbb ))&1)!=0;_cbae :=_ecgba .walk (_ebbd );if _cbae !=nil {if _cbae ._bgc {return _b .New ("\u006e\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u006c\u0065\u0061\u0066\u002c\u0020\u006eo\u0020o\u0074\u0068\u0065\u0072\u0020\u0066\u006f\u006c\u006c\u006f\u0077\u0069\u006e\u0067");
};_ecgba =_cbae ;continue ;};_cbae =&treeNode {};if _caae ==_ggg -1{_cbae ._fdaf =_gcc ;_cbae ._bgc =true ;};if _eafe ==0{_cbae ._adg =true ;};_ecgba .set (_ebbd ,_cbae );_ecgba =_cbae ;};return nil ;};var _ee =[...][]uint16 {{0x7,0x8,0xb,0xc,0xe,0xf},{0x12,0x13,0x14,0x1b,0x7,0x8},{0x17,0x18,0x2a,0x2b,0x3,0x34,0x35,0x7,0x8},{0x13,0x17,0x18,0x24,0x27,0x28,0x2b,0x3,0x37,0x4,0x8,0xc},{0x12,0x13,0x14,0x15,0x16,0x17,0x1a,0x1b,0x2,0x24,0x25,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x3,0x32,0x33,0x34,0x35,0x36,0x37,0x4,0x4a,0x4b,0x5,0x52,0x53,0x54,0x55,0x58,0x59,0x5a,0x5b,0x64,0x65,0x67,0x68,0xa,0xb},{0x98,0x99,0x9a,0x9b,0xcc,0xcd,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8,0xd9,0xda,0xdb},{},{0x8,0xc,0xd},{0x12,0x13,0x14,0x15,0x16,0x17,0x1c,0x1d,0x1e,0x1f}};
func (_dgb *treeNode )set (_ceg bool ,_ecdb *treeNode ){if !_ceg {_dgb ._cab =_ecdb ;}else {_dgb ._fgea =_ecdb ;};};func (_ebb *Decoder )decodeG32D ()error {_ebb ._aae =_ebb ._bg ;_ebb ._bba ,_ebb ._ge =_ebb ._ge ,_ebb ._bba ;_aab :=true ;var (_bfe bool ;
_ca int ;_gbg error ;);_ebb ._bg =0;_ege :for _ca < _ebb ._eeb {_eafc :=_f ._eecg ;for {_bfe ,_gbg =_ebb ._cca .ReadBool ();if _gbg !=nil {return _gbg ;};_eafc =_eafc .walk (_bfe );if _eafc ==nil {continue _ege ;};if !_eafc ._bgc {continue ;};switch _eafc ._fdaf {case _efb :var _efd int ;
if _aab {_efd ,_gbg =_ebb .decodeRun (_c );}else {_efd ,_gbg =_ebb .decodeRun (_eaa );};if _gbg !=nil {return _gbg ;};_ca +=_efd ;_ebb ._bba [_ebb ._bg ]=_ca ;_ebb ._bg ++;if _aab {_efd ,_gbg =_ebb .decodeRun (_eaa );}else {_efd ,_gbg =_ebb .decodeRun (_c );
};if _gbg !=nil {return _gbg ;};_ca +=_efd ;_ebb ._bba [_ebb ._bg ]=_ca ;_ebb ._bg ++;case _aa :_edbd :=_ebb .getNextChangingElement (_ca ,_aab )+1;if _edbd >=_ebb ._aae {_ca =_ebb ._eeb ;}else {_ca =_ebb ._ge [_edbd ];};default:_aabf :=_ebb .getNextChangingElement (_ca ,_aab );
if _aabf >=_ebb ._aae ||_aabf ==-1{_ca =_ebb ._eeb +_eafc ._fdaf ;}else {_ca =_ebb ._ge [_aabf ]+_eafc ._fdaf ;};_ebb ._bba [_ebb ._bg ]=_ca ;_ebb ._bg ++;_aab =!_aab ;};continue _ege ;};};return nil ;};func (_dfg *Decoder )Read (in []byte )(int ,error ){if _dfg ._fbga !=nil {return 0,_dfg ._fbga ;
};_dae :=len (in );var (_ead int ;_eb int ;);for _dae !=0{if _dfg ._bd >=_dfg ._fgcg {if _aaaf :=_dfg .fetch ();_aaaf !=nil {_dfg ._fbga =_aaaf ;return 0,_aaaf ;};};if _dfg ._fgcg ==-1{return _ead ,_a .EOF ;};switch {case _dae <=_dfg ._fgcg -_dfg ._bd :_aad :=_dfg ._da [_dfg ._bd :_dfg ._bd +_dae ];
for _ ,_ebc :=range _aad {if !_dfg ._def {_ebc =^_ebc ;};in [_eb ]=_ebc ;_eb ++;};_ead +=len (_aad );_dfg ._bd +=len (_aad );return _ead ,nil ;default:_adbe :=_dfg ._da [_dfg ._bd :];for _ ,_gcd :=range _adbe {if !_dfg ._def {_gcd =^_gcd ;};in [_eb ]=_gcd ;
_eb ++;};_ead +=len (_adbe );_dfg ._bd +=len (_adbe );_dae -=len (_adbe );};};return _ead ,nil ;};var (_edb map[int ]code ;_gd map[int ]code ;_gbc map[int ]code ;_afg map[int ]code ;_cb map[int ]code ;_dbc map[int ]byte ;_dbcf =code {Code :1<<4,BitsWritten :12};
_adf =code {Code :3<<3,BitsWritten :13};_aac =code {Code :2<<3,BitsWritten :13};_cea =code {Code :1<<12,BitsWritten :4};_dd =code {Code :1<<13,BitsWritten :3};_dbcg =code {Code :1<<15,BitsWritten :1};_dda =code {Code :3<<13,BitsWritten :3};_fbg =code {Code :3<<10,BitsWritten :6};
_dgc =code {Code :3<<9,BitsWritten :7};_gg =code {Code :2<<13,BitsWritten :3};_fg =code {Code :2<<10,BitsWritten :6};_cga =code {Code :2<<9,BitsWritten :7};);func (_fcf *Decoder )decodeRowType2 ()error {if _fcf ._ffc {_fcf ._cca .Align ();};if _bbaa :=_fcf .decode1D ();
_bbaa !=nil {return _bbaa ;};return nil ;};func (_ggd *Decoder )decodeRowType4 ()error {if !_ggd ._eca {return _ggd .decoderRowType41D ();};if _ggd ._ffc {_ggd ._cca .Align ();};_ggd ._cca .Mark ();_eef ,_feg :=_ggd .tryFetchEOL ();if _feg !=nil {return _feg ;
};if !_eef &&_ggd ._aec {_ggd ._fd ++;if _ggd ._fd > _ggd ._aaa {return _ba ;};_ggd ._cca .Reset ();};if !_eef {_ggd ._cca .Reset ();};_daa ,_feg :=_ggd ._cca .ReadBool ();if _feg !=nil {return _feg ;};if _daa {if _eef &&_ggd ._ecc {if _feg =_ggd .tryFetchRTC2D ();
_feg !=nil {return _feg ;};};_feg =_ggd .decode1D ();}else {_feg =_ggd .decode2D ();};if _feg !=nil {return _feg ;};return nil ;};func (_dea *Decoder )getNextChangingElement (_bag int ,_gae bool )int {_gf :=0;if !_gae {_gf =1;};_eccg :=int (uint32 (_dea ._bde )&0xFFFFFFFE)+_gf ;
if _eccg > 2{_eccg -=2;};if _bag ==0{return _eccg ;};for _caa :=_eccg ;_caa < _dea ._aae ;_caa +=2{if _bag < _dea ._ge [_caa ]{_dea ._bde =_caa ;return _caa ;};};return -1;};func _gfg (_deagd []byte ,_cdf int ,_ega int ,_aaaea bool )([]byte ,int ){var (_dgaa code ;
_dcg bool ;);for !_dcg {_dgaa ,_ega ,_dcg =_ecgb (_ega ,_aaaea );_deagd ,_cdf =_fgce (_deagd ,_cdf ,_dgaa );};return _deagd ,_cdf ;};func (_afgb *Encoder )Encode (pixels [][]byte )[]byte {if _afgb .BlackIs1 {_geg =0;_ddcb =1;}else {_geg =1;_ddcb =0;};if _afgb .K ==0{return _afgb .encodeG31D (pixels );
};if _afgb .K > 0{return _afgb .encodeG32D (pixels );};if _afgb .K < 0{return _afgb .encodeG4 (pixels );};return nil ;};var (_geg byte =1;_ddcb byte =0;);func (_aegg *treeNode )walk (_aed bool )*treeNode {if _aed {return _aegg ._fgea ;};return _aegg ._cab ;
};func (_gfb *Decoder )tryFetchRTC2D ()(_dga error ){_gfb ._cca .Mark ();var _bgg bool ;for _egb :=0;_egb < 5;_egb ++{_bgg ,_dga =_gfb .tryFetchEOL1 ();if _dga !=nil {if _b .Is (_dga ,_a .EOF ){if _egb ==0{break ;};return _eg ;};};if _bgg {continue ;};
if _egb > 0{return _eg ;};break ;};if _bgg {return _a .EOF ;};_gfb ._cca .Reset ();return _dga ;};func _ecgb (_cdae int ,_afea bool )(code ,int ,bool ){if _cdae < 64{if _afea {return _gd [_cdae ],0,true ;};return _edb [_cdae ],0,true ;};_cbc :=_cdae /64;
if _cbc > 40{return _cb [2560],_cdae -2560,false ;};if _cbc > 27{return _cb [_cbc *64],_cdae -_cbc *64,false ;};if _afea {return _afg [_cbc *64],_cdae -_cbc *64,false ;};return _gbc [_cbc *64],_cdae -_cbc *64,false ;};func NewDecoder (data []byte ,options DecodeOptions )(*Decoder ,error ){_gdb :=&Decoder {_cca :_ef .NewReader (data ),_eeb :options .Columns ,_aef :options .Rows ,_aaa :options .DamagedRowsBeforeError ,_da :make ([]byte ,(options .Columns +7)/8),_ge :make ([]int ,options .Columns +2),_bba :make ([]int ,options .Columns +2),_ffc :options .EncodedByteAligned ,_def :options .BlackIsOne ,_aec :options .EndOfLine ,_ecc :options .EndOfBlock };
switch {case options .K ==0:_gdb ._cfe =_ab ;if len (data )< 20{return nil ,_b .New ("\u0074o\u006f\u0020\u0073\u0068o\u0072\u0074\u0020\u0063\u0063i\u0074t\u0066a\u0078\u0020\u0073\u0074\u0072\u0065\u0061m");};_bad :=data [:20];if _bad [0]!=0||(_bad [1]>>4!=1&&_bad [1]!=1){_gdb ._cfe =_de ;
_ga :=(uint16 (_bad [0])<<8+uint16 (_bad [1]&0xff))>>4;for _bbc :=12;_bbc < 160;_bbc ++{_ga =(_ga <<1)+uint16 ((_bad [_bbc /8]>>uint16 (7-(_bbc %8)))&0x01);if _ga &0xfff==1{_gdb ._cfe =_ab ;break ;};};};case options .K < 0:_gdb ._cfe =_beg ;case options .K > 0:_gdb ._cfe =_ab ;
_gdb ._eca =true ;};switch _gdb ._cfe {case _de ,_ab ,_beg :default:return nil ,_b .New ("\u0075\u006ek\u006e\u006f\u0077\u006e\u0020\u0063\u0063\u0069\u0074\u0074\u0066\u0061\u0078\u002e\u0044\u0065\u0063\u006f\u0064\u0065\u0072\u0020ty\u0070\u0065");
};return _gdb ,nil ;};var (_ec *treeNode ;_ea *treeNode ;_eaa *tree ;_c *tree ;_g *tree ;_f *tree ;_ed =-2000;_d =-1000;_aa =-3000;_efb =-4000;);func _fcfa (_dgg []byte ,_bda int )([]byte ,int ){return _fgce (_dgg ,_bda ,_cea )};