//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package ccittfax ;import (_c "errors";_cg "github.com/unidoc/unipdf/v3/internal/bitwise";_bg "io";_a "math";);type code struct{Code uint16 ;BitsWritten int ;};func init (){_f =&treeNode {_fddf :true ,_faa :_bd };_e =&treeNode {_faa :_ga ,_gceb :_f };_e ._fbe =_e ;
_ge =&tree {_fgcf :&treeNode {}};if _ffc :=_ge .fillWithNode (12,0,_e );_ffc !=nil {panic (_ffc .Error ());};if _ca :=_ge .fillWithNode (12,1,_f );_ca !=nil {panic (_ca .Error ());};_g =&tree {_fgcf :&treeNode {}};for _fa :=0;_fa < len (_ag );_fa ++{for _ba :=0;
_ba < len (_ag [_fa ]);_ba ++{if _ab :=_g .fill (_fa +2,int (_ag [_fa ][_ba ]),int (_bdc [_fa ][_ba ]));_ab !=nil {panic (_ab .Error ());};};};if _ec :=_g .fillWithNode (12,0,_e );_ec !=nil {panic (_ec .Error ());};if _ce :=_g .fillWithNode (12,1,_f );
_ce !=nil {panic (_ce .Error ());};_bc =&tree {_fgcf :&treeNode {}};for _fac :=0;_fac < len (_bb );_fac ++{for _ee :=0;_ee < len (_bb [_fac ]);_ee ++{if _cd :=_bc .fill (_fac +4,int (_bb [_fac ][_ee ]),int (_ffb [_fac ][_ee ]));_cd !=nil {panic (_cd .Error ());
};};};if _geb :=_bc .fillWithNode (12,0,_e );_geb !=nil {panic (_geb .Error ());};if _fe :=_bc .fillWithNode (12,1,_f );_fe !=nil {panic (_fe .Error ());};_gc =&tree {_fgcf :&treeNode {}};if _fd :=_gc .fill (4,1,_ff );_fd !=nil {panic (_fd .Error ());};
if _gae :=_gc .fill (3,1,_d );_gae !=nil {panic (_gae .Error ());};if _fec :=_gc .fill (1,1,0);_fec !=nil {panic (_fec .Error ());};if _be :=_gc .fill (3,3,1);_be !=nil {panic (_be .Error ());};if _cf :=_gc .fill (6,3,2);_cf !=nil {panic (_cf .Error ());
};if _cfd :=_gc .fill (7,3,3);_cfd !=nil {panic (_cfd .Error ());};if _bea :=_gc .fill (3,2,-1);_bea !=nil {panic (_bea .Error ());};if _eb :=_gc .fill (6,2,-2);_eb !=nil {panic (_eb .Error ());};if _ed :=_gc .fill (7,2,-3);_ed !=nil {panic (_ed .Error ());
};};func _gdd (_age ,_aeg []byte ,_fcbg int )int {_feac :=_ccbb (_aeg ,_fcbg );if _feac < len (_aeg )&&(_fcbg ==-1&&_aeg [_feac ]==_ada ||_fcbg >=0&&_fcbg < len (_age )&&_age [_fcbg ]==_aeg [_feac ]||_fcbg >=len (_age )&&_age [_fcbg -1]!=_aeg [_feac ]){_feac =_ccbb (_aeg ,_feac );
};return _feac ;};func (_gdb *treeNode )walk (_abgg bool )*treeNode {if _abgg {return _gdb ._gceb ;};return _gdb ._fbe ;};type Encoder struct{K int ;EndOfLine bool ;EncodedByteAlign bool ;Columns int ;Rows int ;EndOfBlock bool ;BlackIs1 bool ;DamagedRowsBeforeError int ;
};func (_fade *Decoder )decodeRun (_ccg *tree )(int ,error ){var _egfd int ;_cgf :=_ccg ._fgcf ;for {_ecb ,_fag :=_fade ._fbd .ReadBool ();if _fag !=nil {return 0,_fag ;};_cgf =_cgf .walk (_ecb );if _cgf ==nil {return 0,_c .New ("\u0075\u006e\u006bno\u0077\u006e\u0020\u0063\u006f\u0064\u0065\u0020\u0069n\u0020H\u0075f\u0066m\u0061\u006e\u0020\u0052\u004c\u0045\u0020\u0073\u0074\u0072\u0065\u0061\u006d");
};if _cgf ._fddf {_egfd +=_cgf ._faa ;switch {case _cgf ._faa >=64:_cgf =_ccg ._fgcf ;case _cgf ._faa >=0:return _egfd ,nil ;default:return _fade ._fc ,nil ;};};};};func _dccf (_dac []byte ,_dgb bool ,_eaca int )(int ,int ){_dfb :=0;for _eaca < len (_dac ){if _dgb {if _dac [_eaca ]!=_ada {break ;
};}else {if _dac [_eaca ]!=_ceaa {break ;};};_dfb ++;_eaca ++;};return _dfb ,_eaca ;};type tree struct{_fgcf *treeNode };func init (){_bf =make (map[int ]code );_bf [0]=code {Code :13<<8|3<<6,BitsWritten :10};_bf [1]=code {Code :2<<(5+8),BitsWritten :3};
_bf [2]=code {Code :3<<(6+8),BitsWritten :2};_bf [3]=code {Code :2<<(6+8),BitsWritten :2};_bf [4]=code {Code :3<<(5+8),BitsWritten :3};_bf [5]=code {Code :3<<(4+8),BitsWritten :4};_bf [6]=code {Code :2<<(4+8),BitsWritten :4};_bf [7]=code {Code :3<<(3+8),BitsWritten :5};
_bf [8]=code {Code :5<<(2+8),BitsWritten :6};_bf [9]=code {Code :4<<(2+8),BitsWritten :6};_bf [10]=code {Code :4<<(1+8),BitsWritten :7};_bf [11]=code {Code :5<<(1+8),BitsWritten :7};_bf [12]=code {Code :7<<(1+8),BitsWritten :7};_bf [13]=code {Code :4<<8,BitsWritten :8};
_bf [14]=code {Code :7<<8,BitsWritten :8};_bf [15]=code {Code :12<<8,BitsWritten :9};_bf [16]=code {Code :5<<8|3<<6,BitsWritten :10};_bf [17]=code {Code :6<<8,BitsWritten :10};_bf [18]=code {Code :2<<8,BitsWritten :10};_bf [19]=code {Code :12<<8|7<<5,BitsWritten :11};
_bf [20]=code {Code :13<<8,BitsWritten :11};_bf [21]=code {Code :13<<8|4<<5,BitsWritten :11};_bf [22]=code {Code :6<<8|7<<5,BitsWritten :11};_bf [23]=code {Code :5<<8,BitsWritten :11};_bf [24]=code {Code :2<<8|7<<5,BitsWritten :11};_bf [25]=code {Code :3<<8,BitsWritten :11};
_bf [26]=code {Code :12<<8|10<<4,BitsWritten :12};_bf [27]=code {Code :12<<8|11<<4,BitsWritten :12};_bf [28]=code {Code :12<<8|12<<4,BitsWritten :12};_bf [29]=code {Code :12<<8|13<<4,BitsWritten :12};_bf [30]=code {Code :6<<8|8<<4,BitsWritten :12};_bf [31]=code {Code :6<<8|9<<4,BitsWritten :12};
_bf [32]=code {Code :6<<8|10<<4,BitsWritten :12};_bf [33]=code {Code :6<<8|11<<4,BitsWritten :12};_bf [34]=code {Code :13<<8|2<<4,BitsWritten :12};_bf [35]=code {Code :13<<8|3<<4,BitsWritten :12};_bf [36]=code {Code :13<<8|4<<4,BitsWritten :12};_bf [37]=code {Code :13<<8|5<<4,BitsWritten :12};
_bf [38]=code {Code :13<<8|6<<4,BitsWritten :12};_bf [39]=code {Code :13<<8|7<<4,BitsWritten :12};_bf [40]=code {Code :6<<8|12<<4,BitsWritten :12};_bf [41]=code {Code :6<<8|13<<4,BitsWritten :12};_bf [42]=code {Code :13<<8|10<<4,BitsWritten :12};_bf [43]=code {Code :13<<8|11<<4,BitsWritten :12};
_bf [44]=code {Code :5<<8|4<<4,BitsWritten :12};_bf [45]=code {Code :5<<8|5<<4,BitsWritten :12};_bf [46]=code {Code :5<<8|6<<4,BitsWritten :12};_bf [47]=code {Code :5<<8|7<<4,BitsWritten :12};_bf [48]=code {Code :6<<8|4<<4,BitsWritten :12};_bf [49]=code {Code :6<<8|5<<4,BitsWritten :12};
_bf [50]=code {Code :5<<8|2<<4,BitsWritten :12};_bf [51]=code {Code :5<<8|3<<4,BitsWritten :12};_bf [52]=code {Code :2<<8|4<<4,BitsWritten :12};_bf [53]=code {Code :3<<8|7<<4,BitsWritten :12};_bf [54]=code {Code :3<<8|8<<4,BitsWritten :12};_bf [55]=code {Code :2<<8|7<<4,BitsWritten :12};
_bf [56]=code {Code :2<<8|8<<4,BitsWritten :12};_bf [57]=code {Code :5<<8|8<<4,BitsWritten :12};_bf [58]=code {Code :5<<8|9<<4,BitsWritten :12};_bf [59]=code {Code :2<<8|11<<4,BitsWritten :12};_bf [60]=code {Code :2<<8|12<<4,BitsWritten :12};_bf [61]=code {Code :5<<8|10<<4,BitsWritten :12};
_bf [62]=code {Code :6<<8|6<<4,BitsWritten :12};_bf [63]=code {Code :6<<8|7<<4,BitsWritten :12};_cb =make (map[int ]code );_cb [0]=code {Code :53<<8,BitsWritten :8};_cb [1]=code {Code :7<<(2+8),BitsWritten :6};_cb [2]=code {Code :7<<(4+8),BitsWritten :4};
_cb [3]=code {Code :8<<(4+8),BitsWritten :4};_cb [4]=code {Code :11<<(4+8),BitsWritten :4};_cb [5]=code {Code :12<<(4+8),BitsWritten :4};_cb [6]=code {Code :14<<(4+8),BitsWritten :4};_cb [7]=code {Code :15<<(4+8),BitsWritten :4};_cb [8]=code {Code :19<<(3+8),BitsWritten :5};
_cb [9]=code {Code :20<<(3+8),BitsWritten :5};_cb [10]=code {Code :7<<(3+8),BitsWritten :5};_cb [11]=code {Code :8<<(3+8),BitsWritten :5};_cb [12]=code {Code :8<<(2+8),BitsWritten :6};_cb [13]=code {Code :3<<(2+8),BitsWritten :6};_cb [14]=code {Code :52<<(2+8),BitsWritten :6};
_cb [15]=code {Code :53<<(2+8),BitsWritten :6};_cb [16]=code {Code :42<<(2+8),BitsWritten :6};_cb [17]=code {Code :43<<(2+8),BitsWritten :6};_cb [18]=code {Code :39<<(1+8),BitsWritten :7};_cb [19]=code {Code :12<<(1+8),BitsWritten :7};_cb [20]=code {Code :8<<(1+8),BitsWritten :7};
_cb [21]=code {Code :23<<(1+8),BitsWritten :7};_cb [22]=code {Code :3<<(1+8),BitsWritten :7};_cb [23]=code {Code :4<<(1+8),BitsWritten :7};_cb [24]=code {Code :40<<(1+8),BitsWritten :7};_cb [25]=code {Code :43<<(1+8),BitsWritten :7};_cb [26]=code {Code :19<<(1+8),BitsWritten :7};
_cb [27]=code {Code :36<<(1+8),BitsWritten :7};_cb [28]=code {Code :24<<(1+8),BitsWritten :7};_cb [29]=code {Code :2<<8,BitsWritten :8};_cb [30]=code {Code :3<<8,BitsWritten :8};_cb [31]=code {Code :26<<8,BitsWritten :8};_cb [32]=code {Code :27<<8,BitsWritten :8};
_cb [33]=code {Code :18<<8,BitsWritten :8};_cb [34]=code {Code :19<<8,BitsWritten :8};_cb [35]=code {Code :20<<8,BitsWritten :8};_cb [36]=code {Code :21<<8,BitsWritten :8};_cb [37]=code {Code :22<<8,BitsWritten :8};_cb [38]=code {Code :23<<8,BitsWritten :8};
_cb [39]=code {Code :40<<8,BitsWritten :8};_cb [40]=code {Code :41<<8,BitsWritten :8};_cb [41]=code {Code :42<<8,BitsWritten :8};_cb [42]=code {Code :43<<8,BitsWritten :8};_cb [43]=code {Code :44<<8,BitsWritten :8};_cb [44]=code {Code :45<<8,BitsWritten :8};
_cb [45]=code {Code :4<<8,BitsWritten :8};_cb [46]=code {Code :5<<8,BitsWritten :8};_cb [47]=code {Code :10<<8,BitsWritten :8};_cb [48]=code {Code :11<<8,BitsWritten :8};_cb [49]=code {Code :82<<8,BitsWritten :8};_cb [50]=code {Code :83<<8,BitsWritten :8};
_cb [51]=code {Code :84<<8,BitsWritten :8};_cb [52]=code {Code :85<<8,BitsWritten :8};_cb [53]=code {Code :36<<8,BitsWritten :8};_cb [54]=code {Code :37<<8,BitsWritten :8};_cb [55]=code {Code :88<<8,BitsWritten :8};_cb [56]=code {Code :89<<8,BitsWritten :8};
_cb [57]=code {Code :90<<8,BitsWritten :8};_cb [58]=code {Code :91<<8,BitsWritten :8};_cb [59]=code {Code :74<<8,BitsWritten :8};_cb [60]=code {Code :75<<8,BitsWritten :8};_cb [61]=code {Code :50<<8,BitsWritten :8};_cb [62]=code {Code :51<<8,BitsWritten :8};
_cb [63]=code {Code :52<<8,BitsWritten :8};_af =make (map[int ]code );_af [64]=code {Code :3<<8|3<<6,BitsWritten :10};_af [128]=code {Code :12<<8|8<<4,BitsWritten :12};_af [192]=code {Code :12<<8|9<<4,BitsWritten :12};_af [256]=code {Code :5<<8|11<<4,BitsWritten :12};
_af [320]=code {Code :3<<8|3<<4,BitsWritten :12};_af [384]=code {Code :3<<8|4<<4,BitsWritten :12};_af [448]=code {Code :3<<8|5<<4,BitsWritten :12};_af [512]=code {Code :3<<8|12<<3,BitsWritten :13};_af [576]=code {Code :3<<8|13<<3,BitsWritten :13};_af [640]=code {Code :2<<8|10<<3,BitsWritten :13};
_af [704]=code {Code :2<<8|11<<3,BitsWritten :13};_af [768]=code {Code :2<<8|12<<3,BitsWritten :13};_af [832]=code {Code :2<<8|13<<3,BitsWritten :13};_af [896]=code {Code :3<<8|18<<3,BitsWritten :13};_af [960]=code {Code :3<<8|19<<3,BitsWritten :13};_af [1024]=code {Code :3<<8|20<<3,BitsWritten :13};
_af [1088]=code {Code :3<<8|21<<3,BitsWritten :13};_af [1152]=code {Code :3<<8|22<<3,BitsWritten :13};_af [1216]=code {Code :119<<3,BitsWritten :13};_af [1280]=code {Code :2<<8|18<<3,BitsWritten :13};_af [1344]=code {Code :2<<8|19<<3,BitsWritten :13};_af [1408]=code {Code :2<<8|20<<3,BitsWritten :13};
_af [1472]=code {Code :2<<8|21<<3,BitsWritten :13};_af [1536]=code {Code :2<<8|26<<3,BitsWritten :13};_af [1600]=code {Code :2<<8|27<<3,BitsWritten :13};_af [1664]=code {Code :3<<8|4<<3,BitsWritten :13};_af [1728]=code {Code :3<<8|5<<3,BitsWritten :13};
_ae =make (map[int ]code );_ae [64]=code {Code :27<<(3+8),BitsWritten :5};_ae [128]=code {Code :18<<(3+8),BitsWritten :5};_ae [192]=code {Code :23<<(2+8),BitsWritten :6};_ae [256]=code {Code :55<<(1+8),BitsWritten :7};_ae [320]=code {Code :54<<8,BitsWritten :8};
_ae [384]=code {Code :55<<8,BitsWritten :8};_ae [448]=code {Code :100<<8,BitsWritten :8};_ae [512]=code {Code :101<<8,BitsWritten :8};_ae [576]=code {Code :104<<8,BitsWritten :8};_ae [640]=code {Code :103<<8,BitsWritten :8};_ae [704]=code {Code :102<<8,BitsWritten :9};
_ae [768]=code {Code :102<<8|1<<7,BitsWritten :9};_ae [832]=code {Code :105<<8,BitsWritten :9};_ae [896]=code {Code :105<<8|1<<7,BitsWritten :9};_ae [960]=code {Code :106<<8,BitsWritten :9};_ae [1024]=code {Code :106<<8|1<<7,BitsWritten :9};_ae [1088]=code {Code :107<<8,BitsWritten :9};
_ae [1152]=code {Code :107<<8|1<<7,BitsWritten :9};_ae [1216]=code {Code :108<<8,BitsWritten :9};_ae [1280]=code {Code :108<<8|1<<7,BitsWritten :9};_ae [1344]=code {Code :109<<8,BitsWritten :9};_ae [1408]=code {Code :109<<8|1<<7,BitsWritten :9};_ae [1472]=code {Code :76<<8,BitsWritten :9};
_ae [1536]=code {Code :76<<8|1<<7,BitsWritten :9};_ae [1600]=code {Code :77<<8,BitsWritten :9};_ae [1664]=code {Code :24<<(2+8),BitsWritten :6};_ae [1728]=code {Code :77<<8|1<<7,BitsWritten :9};_ffg =make (map[int ]code );_ffg [1792]=code {Code :1<<8,BitsWritten :11};
_ffg [1856]=code {Code :1<<8|4<<5,BitsWritten :11};_ffg [1920]=code {Code :1<<8|5<<5,BitsWritten :11};_ffg [1984]=code {Code :1<<8|2<<4,BitsWritten :12};_ffg [2048]=code {Code :1<<8|3<<4,BitsWritten :12};_ffg [2112]=code {Code :1<<8|4<<4,BitsWritten :12};
_ffg [2176]=code {Code :1<<8|5<<4,BitsWritten :12};_ffg [2240]=code {Code :1<<8|6<<4,BitsWritten :12};_ffg [2304]=code {Code :1<<8|7<<4,BitsWritten :12};_ffg [2368]=code {Code :1<<8|12<<4,BitsWritten :12};_ffg [2432]=code {Code :1<<8|13<<4,BitsWritten :12};
_ffg [2496]=code {Code :1<<8|14<<4,BitsWritten :12};_ffg [2560]=code {Code :1<<8|15<<4,BitsWritten :12};_ea =make (map[int ]byte );_ea [0]=0xFF;_ea [1]=0xFE;_ea [2]=0xFC;_ea [3]=0xF8;_ea [4]=0xF0;_ea [5]=0xE0;_ea [6]=0xC0;_ea [7]=0x80;_ea [8]=0x00;};func (_da *Decoder )decode2D ()error {_da ._ccc =_da ._cbe ;
_da ._bfc ,_da ._bac =_da ._bac ,_da ._bfc ;_egf :=true ;var (_bga bool ;_edd int ;_ebb error ;);_da ._cbe =0;_faff :for _edd < _da ._fc {_ebd :=_gc ._fgcf ;for {_bga ,_ebb =_da ._fbd .ReadBool ();if _ebb !=nil {return _ebb ;};_ebd =_ebd .walk (_bga );
if _ebd ==nil {continue _faff ;};if !_ebd ._fddf {continue ;};switch _ebd ._faa {case _d :var _gd int ;if _egf {_gd ,_ebb =_da .decodeRun (_bc );}else {_gd ,_ebb =_da .decodeRun (_g );};if _ebb !=nil {return _ebb ;};_edd +=_gd ;_da ._bfc [_da ._cbe ]=_edd ;
_da ._cbe ++;if _egf {_gd ,_ebb =_da .decodeRun (_g );}else {_gd ,_ebb =_da .decodeRun (_bc );};if _ebb !=nil {return _ebb ;};_edd +=_gd ;_da ._bfc [_da ._cbe ]=_edd ;_da ._cbe ++;case _ff :_aac :=_da .getNextChangingElement (_edd ,_egf )+1;if _aac >=_da ._ccc {_edd =_da ._fc ;
}else {_edd =_da ._bac [_aac ];};default:_bcbb :=_da .getNextChangingElement (_edd ,_egf );if _bcbb >=_da ._ccc ||_bcbb ==-1{_edd =_da ._fc +_ebd ._faa ;}else {_edd =_da ._bac [_bcbb ]+_ebd ._faa ;};_da ._bfc [_da ._cbe ]=_edd ;_da ._cbe ++;_egf =!_egf ;
};continue _faff ;};};return nil ;};type DecodeOptions struct{Columns int ;Rows int ;K int ;EncodedByteAligned bool ;BlackIsOne bool ;EndOfBlock bool ;EndOfLine bool ;DamagedRowsBeforeError int ;};func (_dfgd *Encoder )encodeG32D (_bfec [][]byte )[]byte {var _fccd []byte ;
var _gef int ;for _gag :=0;_gag < len (_bfec );_gag +=_dfgd .K {if _dfgd .Rows > 0&&!_dfgd .EndOfBlock &&_gag ==_dfgd .Rows {break ;};_gad ,_cbg :=_cgg (_bfec [_gag ],_gef ,_eda );_fccd =_dfgd .appendEncodedRow (_fccd ,_gad ,_gef );if _dfgd .EncodedByteAlign {_cbg =0;
};_gef =_cbg ;for _ffcf :=_gag +1;_ffcf < (_gag +_dfgd .K )&&_ffcf < len (_bfec );_ffcf ++{if _dfgd .Rows > 0&&!_dfgd .EndOfBlock &&_ffcf ==_dfgd .Rows {break ;};_daf ,_fdbc :=_cece (nil ,_gef ,_begf );var _cdc ,_ffbc ,_dbc int ;_beb :=-1;for _beb < len (_bfec [_ffcf ]){_cdc =_ccbb (_bfec [_ffcf ],_beb );
_ffbc =_gdd (_bfec [_ffcf ],_bfec [_ffcf -1],_beb );_dbc =_ccbb (_bfec [_ffcf -1],_ffbc );if _dbc < _cdc {_daf ,_fdbc =_ced (_daf ,_fdbc );_beb =_dbc ;}else {if _a .Abs (float64 (_ffbc -_cdc ))> 3{_daf ,_fdbc ,_beb =_ddgb (_bfec [_ffcf ],_daf ,_fdbc ,_beb ,_cdc );
}else {_daf ,_fdbc =_bbbd (_daf ,_fdbc ,_cdc ,_ffbc );_beb =_cdc ;};};};_fccd =_dfgd .appendEncodedRow (_fccd ,_daf ,_gef );if _dfgd .EncodedByteAlign {_fdbc =0;};_gef =_fdbc %8;};};if _dfgd .EndOfBlock {_ggf ,_ :=_fbf (_gef );_fccd =_dfgd .appendEncodedRow (_fccd ,_ggf ,_gef );
};return _fccd ;};func _eeeb (_dcca ,_bbcd int )code {var _efgf code ;switch _bbcd -_dcca {case -1:_efgf =_fea ;case -2:_efgf =_ad ;case -3:_efgf =_df ;case 0:_efgf =_eg ;case 1:_efgf =_fg ;case 2:_efgf =_bfe ;case 3:_efgf =_de ;};return _efgf ;};type Decoder struct{_fc int ;
_eeb int ;_cc int ;_fca []byte ;_gcd int ;_gcf bool ;_feb bool ;_afb bool ;_fdb bool ;_cba bool ;_db bool ;_gaeb bool ;_eebf int ;_gg int ;_bac []int ;_bfc []int ;_ccc int ;_cbe int ;_eac int ;_bfca int ;_fbd *_cg .Reader ;_egc tiffType ;_fad error ;};
func _gbb (_cdca int ,_eec bool )(code ,int ,bool ){if _cdca < 64{if _eec {return _cb [_cdca ],0,true ;};return _bf [_cdca ],0,true ;};_ffaf :=_cdca /64;if _ffaf > 40{return _ffg [2560],_cdca -2560,false ;};if _ffaf > 27{return _ffg [_ffaf *64],_cdca -_ffaf *64,false ;
};if _eec {return _ae [_ffaf *64],_cdca -_ffaf *64,false ;};return _af [_ffaf *64],_cdca -_ffaf *64,false ;};func (_bee *Decoder )decode1D ()error {var (_cbd int ;_eae error ;);_baac :=true ;_bee ._cbe =0;for {var _gb int ;if _baac {_gb ,_eae =_bee .decodeRun (_bc );
}else {_gb ,_eae =_bee .decodeRun (_g );};if _eae !=nil {return _eae ;};_cbd +=_gb ;_bee ._bfc [_bee ._cbe ]=_cbd ;_bee ._cbe ++;_baac =!_baac ;if _cbd >=_bee ._fc {break ;};};return nil ;};var _bdc =[...][]uint16 {{3,2},{1,4},{6,5},{7},{9,8},{10,11,12},{13,14},{15},{16,17,0,18,64},{24,25,23,22,19,20,21,1792,1856,1920},{1984,2048,2112,2176,2240,2304,2368,2432,2496,2560,52,55,56,59,60,320,384,448,53,54,50,51,44,45,46,47,57,58,61,256,48,49,62,63,30,31,32,33,40,41,128,192,26,27,28,29,34,35,36,37,38,39,42,43},{640,704,768,832,1280,1344,1408,1472,1536,1600,1664,1728,512,576,896,960,1024,1088,1152,1216}};
func (_fde *Encoder )appendEncodedRow (_ccf ,_gbc []byte ,_cfb int )[]byte {if len (_ccf )> 0&&_cfb !=0&&!_fde .EncodedByteAlign {_ccf [len (_ccf )-1]=_ccf [len (_ccf )-1]|_gbc [0];_ccf =append (_ccf ,_gbc [1:]...);}else {_ccf =append (_ccf ,_gbc ...);
};return _ccf ;};func (_abf *treeNode )set (_eaa bool ,_eed *treeNode ){if !_eaa {_abf ._fbe =_eed ;}else {_abf ._gceb =_eed ;};};func _ccbb (_fdd []byte ,_ddc int )int {if _ddc >=len (_fdd ){return _ddc ;};if _ddc < -1{_ddc =-1;};var _dec byte ;if _ddc > -1{_dec =_fdd [_ddc ];
}else {_dec =_ada ;};_decb :=_ddc +1;for _decb < len (_fdd ){if _fdd [_decb ]!=_dec {break ;};_decb ++;};return _decb ;};var _ffb =[...][]uint16 {{2,3,4,5,6,7},{128,8,9,64,10,11},{192,1664,16,17,13,14,15,1,12},{26,21,28,27,18,24,25,22,256,23,20,19},{33,34,35,36,37,38,31,32,29,53,54,39,40,41,42,43,44,30,61,62,63,0,320,384,45,59,60,46,49,50,51,52,55,56,57,58,448,512,640,576,47,48},{1472,1536,1600,1728,704,768,832,896,960,1024,1088,1152,1216,1280,1344,1408},{},{1792,1856,1920},{1984,2048,2112,2176,2240,2304,2368,2432,2496,2560}};
func (_ccb *Decoder )decodeRowType4 ()error {if !_ccb ._gcf {return _ccb .decoderRowType41D ();};if _ccb ._gaeb {_ccb ._fbd .Align ();};_ccb ._fbd .Mark ();_eba ,_bbe :=_ccb .tryFetchEOL ();if _bbe !=nil {return _bbe ;};if !_eba &&_ccb ._cba {_ccb ._eac ++;
if _ccb ._eac > _ccb ._gcd {return _ffa ;};_ccb ._fbd .Reset ();};if !_eba {_ccb ._fbd .Reset ();};_bab ,_bbe :=_ccb ._fbd .ReadBool ();if _bbe !=nil {return _bbe ;};if _bab {if _eba &&_ccb ._db {if _bbe =_ccb .tryFetchRTC2D ();_bbe !=nil {return _bbe ;
};};_bbe =_ccb .decode1D ();}else {_bbe =_ccb .decode2D ();};if _bbe !=nil {return _bbe ;};return nil ;};func _cece (_fadb []byte ,_gcc int ,_geec code )([]byte ,int ){_cbb :=0;for _cbb < _geec .BitsWritten {_fab :=_gcc /8;_dde :=_gcc %8;if _fab >=len (_fadb ){_fadb =append (_fadb ,0);
};_bbb :=8-_dde ;_fgfe :=_geec .BitsWritten -_cbb ;if _bbb > _fgfe {_bbb =_fgfe ;};if _cbb < 8{_fadb [_fab ]=_fadb [_fab ]|byte (_geec .Code >>uint (8+_dde -_cbb ))&_ea [8-_bbb -_dde ];}else {_fadb [_fab ]=_fadb [_fab ]|(byte (_geec .Code <<uint (_cbb -8))&_ea [8-_bbb ])>>uint (_dde );
};_gcc +=_bbb ;_cbb +=_bbb ;};return _fadb ,_gcc ;};func (_cda *Decoder )tryFetchEOL1 ()(bool ,error ){_cgb ,_bag :=_cda ._fbd .ReadBits (13);if _bag !=nil {return false ,_bag ;};return _cgb ==0x3,nil ;};func (_eee *Decoder )tryFetchEOL ()(bool ,error ){_aff ,_cad :=_eee ._fbd .ReadBits (12);
if _cad !=nil {return false ,_cad ;};return _aff ==0x1,nil ;};var (_aed =_c .New ("\u0063\u0063\u0069\u0074tf\u0061\u0078\u0020\u0063\u006f\u0072\u0072\u0075\u0070\u0074\u0065\u0064\u0020\u0052T\u0043");_ffa =_c .New ("\u0063\u0063\u0069\u0074tf\u0061\u0078\u0020\u0045\u004f\u004c\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075n\u0064");
);func (_baf *Decoder )decoderRowType41D ()error {if _baf ._gaeb {_baf ._fbd .Align ();};_baf ._fbd .Mark ();var (_fee bool ;_fba error ;);if _baf ._cba {_fee ,_fba =_baf .tryFetchEOL ();if _fba !=nil {return _fba ;};if !_fee {return _ffa ;};}else {_fee ,_fba =_baf .looseFetchEOL ();
if _fba !=nil {return _fba ;};};if !_fee {_baf ._fbd .Reset ();};if _fee &&_baf ._db {_baf ._fbd .Mark ();for _gaa :=0;_gaa < 5;_gaa ++{_fee ,_fba =_baf .tryFetchEOL ();if _fba !=nil {if _c .Is (_fba ,_bg .EOF ){if _gaa ==0{break ;};return _aed ;};};if _fee {continue ;
};if _gaa > 0{return _aed ;};break ;};if _fee {return _bg .EOF ;};_baf ._fbd .Reset ();};if _fba =_baf .decode1D ();_fba !=nil {return _fba ;};return nil ;};func (_dca *Decoder )getNextChangingElement (_dba int ,_fef bool )int {_ffcb :=0;if !_fef {_ffcb =1;
};_ef :=int (uint32 (_dca ._bfca )&0xFFFFFFFE)+_ffcb ;if _ef > 2{_ef -=2;};if _dba ==0{return _ef ;};for _bdcg :=_ef ;_bdcg < _dca ._ccc ;_bdcg +=2{if _dba < _dca ._bac [_bdcg ]{_dca ._bfca =_bdcg ;return _bdcg ;};};return -1;};func (_feab *Decoder )decodeG32D ()error {_feab ._ccc =_feab ._cbe ;
_feab ._bfc ,_feab ._bac =_feab ._bac ,_feab ._bfc ;_dcc :=true ;var (_dcg bool ;_adc int ;_dfc error ;);_feab ._cbe =0;_geg :for _adc < _feab ._fc {_dfg :=_gc ._fgcf ;for {_dcg ,_dfc =_feab ._fbd .ReadBool ();if _dfc !=nil {return _dfc ;};_dfg =_dfg .walk (_dcg );
if _dfg ==nil {continue _geg ;};if !_dfg ._fddf {continue ;};switch _dfg ._faa {case _d :var _gab int ;if _dcc {_gab ,_dfc =_feab .decodeRun (_bc );}else {_gab ,_dfc =_feab .decodeRun (_g );};if _dfc !=nil {return _dfc ;};_adc +=_gab ;_feab ._bfc [_feab ._cbe ]=_adc ;
_feab ._cbe ++;if _dcc {_gab ,_dfc =_feab .decodeRun (_g );}else {_gab ,_dfc =_feab .decodeRun (_bc );};if _dfc !=nil {return _dfc ;};_adc +=_gab ;_feab ._bfc [_feab ._cbe ]=_adc ;_feab ._cbe ++;case _ff :_ddg :=_feab .getNextChangingElement (_adc ,_dcc )+1;
if _ddg >=_feab ._ccc {_adc =_feab ._fc ;}else {_adc =_feab ._bac [_ddg ];};default:_ead :=_feab .getNextChangingElement (_adc ,_dcc );if _ead >=_feab ._ccc ||_ead ==-1{_adc =_feab ._fc +_dfg ._faa ;}else {_adc =_feab ._bac [_ead ]+_dfg ._faa ;};_feab ._bfc [_feab ._cbe ]=_adc ;
_feab ._cbe ++;_dcc =!_dcc ;};continue _geg ;};};return nil ;};func (_affb *Decoder )looseFetchEOL ()(bool ,error ){_ddf ,_fff :=_affb ._fbd .ReadBits (12);if _fff !=nil {return false ,_fff ;};switch _ddf {case 0x1:return true ,nil ;case 0x0:for {_eag ,_bfb :=_affb ._fbd .ReadBool ();
if _bfb !=nil {return false ,_bfb ;};if _eag {return true ,nil ;};};default:return false ,nil ;};};var (_ada byte =1;_ceaa byte =0;);func (_cga tiffType )String ()string {switch _cga {case _fdc :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u004d\u006f\u0064i\u0066\u0069\u0065\u0064\u0048\u0075\u0066\u0066\u006d\u0061n\u0052\u006c\u0065";
case _fb :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u0054\u0034";case _dfd :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u0054\u0036";default:return "\u0075n\u0064\u0065\u0066\u0069\u006e\u0065d";};};func _ced (_aafd []byte ,_fbb int )([]byte ,int ){return _cece (_aafd ,_fbb ,_gec )};
var (_f *treeNode ;_e *treeNode ;_g *tree ;_bc *tree ;_ge *tree ;_gc *tree ;_bd =-2000;_ga =-1000;_ff =-3000;_d =-4000;);func _ccgb (_dfce int )([]byte ,int ){var _gge []byte ;for _dfcc :=0;_dfcc < 2;_dfcc ++{_gge ,_dfce =_cece (_gge ,_dfce ,_beg );};return _gge ,_dfce %8;
};func _dbb (_gagc []byte ,_bbdf int ,_gdf int ,_cbaa bool )([]byte ,int ){var (_deb code ;_fae bool ;);for !_fae {_deb ,_gdf ,_fae =_gbb (_gdf ,_cbaa );_gagc ,_bbdf =_cece (_gagc ,_bbdf ,_deb );};return _gagc ,_bbdf ;};func (_dbab *Encoder )encodeG4 (_fge [][]byte )[]byte {_fdf :=make ([][]byte ,len (_fge ));
copy (_fdf ,_fge );_fdf =_gga (_fdf );var _bedc []byte ;var _acf int ;for _fgc :=1;_fgc < len (_fdf );_fgc ++{if _dbab .Rows > 0&&!_dbab .EndOfBlock &&_fgc ==(_dbab .Rows +1){break ;};var _ffcd []byte ;var _bbd ,_gefd ,_gegb int ;_bfecf :=_acf ;_ggb :=-1;
for _ggb < len (_fdf [_fgc ]){_bbd =_ccbb (_fdf [_fgc ],_ggb );_gefd =_gdd (_fdf [_fgc ],_fdf [_fgc -1],_ggb );_gegb =_ccbb (_fdf [_fgc -1],_gefd );if _gegb < _bbd {_ffcd ,_bfecf =_cece (_ffcd ,_bfecf ,_gec );_ggb =_gegb ;}else {if _a .Abs (float64 (_gefd -_bbd ))> 3{_ffcd ,_bfecf ,_ggb =_ddgb (_fdf [_fgc ],_ffcd ,_bfecf ,_ggb ,_bbd );
}else {_ffcd ,_bfecf =_bbbd (_ffcd ,_bfecf ,_bbd ,_gefd );_ggb =_bbd ;};};};_bedc =_dbab .appendEncodedRow (_bedc ,_ffcd ,_acf );if _dbab .EncodedByteAlign {_bfecf =0;};_acf =_bfecf %8;};if _dbab .EndOfBlock {_cec ,_ :=_ccgb (_acf );_bedc =_dbab .appendEncodedRow (_bedc ,_cec ,_acf );
};return _bedc ;};const (_ tiffType =iota ;_fdc ;_fb ;_dfd ;);func _gga (_cfc [][]byte )[][]byte {_bgbc :=make ([]byte ,len (_cfc [0]));for _geab :=range _bgbc {_bgbc [_geab ]=_ada ;};_cfc =append (_cfc ,[]byte {});for _bfg :=len (_cfc )-1;_bfg > 0;_bfg --{_cfc [_bfg ]=_cfc [_bfg -1];
};_cfc [0]=_bgbc ;return _cfc ;};var _ag =[...][]uint16 {{0x2,0x3},{0x2,0x3},{0x2,0x3},{0x3},{0x4,0x5},{0x4,0x5,0x7},{0x4,0x7},{0x18},{0x17,0x18,0x37,0x8,0xf},{0x17,0x18,0x28,0x37,0x67,0x68,0x6c,0x8,0xc,0xd},{0x12,0x13,0x14,0x15,0x16,0x17,0x1c,0x1d,0x1e,0x1f,0x24,0x27,0x28,0x2b,0x2c,0x33,0x34,0x35,0x37,0x38,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0xc8,0xc9,0xca,0xcb,0xcc,0xcd,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xda,0xdb},{0x4a,0x4b,0x4c,0x4d,0x52,0x53,0x54,0x55,0x5a,0x5b,0x64,0x65,0x6c,0x6d,0x72,0x73,0x74,0x75,0x76,0x77}};
func (_cgfd *tree )fill (_aafdc ,_bde ,_aae int )error {_ecc :=_cgfd ._fgcf ;for _bda :=0;_bda < _aafdc ;_bda ++{_abe :=_aafdc -1-_bda ;_fcfe :=((_bde >>uint (_abe ))&1)!=0;_dbd :=_ecc .walk (_fcfe );if _dbd !=nil {if _dbd ._fddf {return _c .New ("\u006e\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u006c\u0065\u0061\u0066\u002c\u0020\u006eo\u0020o\u0074\u0068\u0065\u0072\u0020\u0066\u006f\u006c\u006c\u006f\u0077\u0069\u006e\u0067");
};_ecc =_dbd ;continue ;};_dbd =&treeNode {};if _bda ==_aafdc -1{_dbd ._faa =_aae ;_dbd ._fddf =true ;};if _bde ==0{_dbd ._bfbf =true ;};_ecc .set (_fcfe ,_dbd );_ecc =_dbd ;};return nil ;};func (_gcde *Decoder )decodeRowType2 ()error {if _gcde ._gaeb {_gcde ._fbd .Align ();
};if _dcb :=_gcde .decode1D ();_dcb !=nil {return _dcb ;};return nil ;};func (_ebf *Decoder )tryFetchRTC2D ()(_agac error ){_ebf ._fbd .Mark ();var _bddb bool ;for _afc :=0;_afc < 5;_afc ++{_bddb ,_agac =_ebf .tryFetchEOL1 ();if _agac !=nil {if _c .Is (_agac ,_bg .EOF ){if _afc ==0{break ;
};return _aed ;};};if _bddb {continue ;};if _afc > 0{return _aed ;};break ;};if _bddb {return _bg .EOF ;};_ebf ._fbd .Reset ();return _agac ;};var (_bf map[int ]code ;_cb map[int ]code ;_af map[int ]code ;_ae map[int ]code ;_ffg map[int ]code ;_ea map[int ]byte ;
_beg =code {Code :1<<4,BitsWritten :12};_eda =code {Code :3<<3,BitsWritten :13};_begf =code {Code :2<<3,BitsWritten :13};_gec =code {Code :1<<12,BitsWritten :4};_ceb =code {Code :1<<13,BitsWritten :3};_eg =code {Code :1<<15,BitsWritten :1};_fea =code {Code :3<<13,BitsWritten :3};
_ad =code {Code :3<<10,BitsWritten :6};_df =code {Code :3<<9,BitsWritten :7};_fg =code {Code :2<<13,BitsWritten :3};_bfe =code {Code :2<<10,BitsWritten :6};_de =code {Code :2<<9,BitsWritten :7};);var _bb =[...][]uint16 {{0x7,0x8,0xb,0xc,0xe,0xf},{0x12,0x13,0x14,0x1b,0x7,0x8},{0x17,0x18,0x2a,0x2b,0x3,0x34,0x35,0x7,0x8},{0x13,0x17,0x18,0x24,0x27,0x28,0x2b,0x3,0x37,0x4,0x8,0xc},{0x12,0x13,0x14,0x15,0x16,0x17,0x1a,0x1b,0x2,0x24,0x25,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x3,0x32,0x33,0x34,0x35,0x36,0x37,0x4,0x4a,0x4b,0x5,0x52,0x53,0x54,0x55,0x58,0x59,0x5a,0x5b,0x64,0x65,0x67,0x68,0xa,0xb},{0x98,0x99,0x9a,0x9b,0xcc,0xcd,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8,0xd9,0xda,0xdb},{},{0x8,0xc,0xd},{0x12,0x13,0x14,0x15,0x16,0x17,0x1c,0x1d,0x1e,0x1f}};
func (_aa *Decoder )decodeRowType6 ()error {if _aa ._gaeb {_aa ._fbd .Align ();};if _aa ._db {_aa ._fbd .Mark ();_bgg ,_bfd :=_aa .tryFetchEOL ();if _bfd !=nil {return _bfd ;};if _bgg {_bgg ,_bfd =_aa .tryFetchEOL ();if _bfd !=nil {return _bfd ;};if _bgg {return _bg .EOF ;
};};_aa ._fbd .Reset ();};return _aa .decode2D ();};type treeNode struct{_fbe *treeNode ;_gceb *treeNode ;_faa int ;_bfbf bool ;_fddf bool ;};func NewDecoder (data []byte ,options DecodeOptions )(*Decoder ,error ){_fcc :=&Decoder {_fbd :_cg .NewReader (data ),_fc :options .Columns ,_eeb :options .Rows ,_gcd :options .DamagedRowsBeforeError ,_fca :make ([]byte ,(options .Columns +7)/8),_bac :make ([]int ,options .Columns +2),_bfc :make ([]int ,options .Columns +2),_gaeb :options .EncodedByteAligned ,_fdb :options .BlackIsOne ,_cba :options .EndOfLine ,_db :options .EndOfBlock };
switch {case options .K ==0:_fcc ._egc =_fb ;if len (data )< 20{return nil ,_c .New ("\u0074o\u006f\u0020\u0073\u0068o\u0072\u0074\u0020\u0063\u0063i\u0074t\u0066a\u0078\u0020\u0073\u0074\u0072\u0065\u0061m");};_ggc :=data [:20];if _ggc [0]!=0||(_ggc [1]>>4!=1&&_ggc [1]!=1){_fcc ._egc =_fdc ;
_gea :=(uint16 (_ggc [0])<<8+uint16 (_ggc [1]&0xff))>>4;for _aee :=12;_aee < 160;_aee ++{_gea =(_gea <<1)+uint16 ((_ggc [_aee /8]>>uint16 (7-(_aee %8)))&0x01);if _gea &0xfff==1{_fcc ._egc =_fb ;break ;};};};case options .K < 0:_fcc ._egc =_dfd ;case options .K > 0:_fcc ._egc =_fb ;
_fcc ._gcf =true ;};switch _fcc ._egc {case _fdc ,_fb ,_dfd :default:return nil ,_c .New ("\u0075\u006ek\u006e\u006f\u0077\u006e\u0020\u0063\u0063\u0069\u0074\u0074\u0066\u0061\u0078\u002e\u0044\u0065\u0063\u006f\u0064\u0065\u0072\u0020ty\u0070\u0065");
};return _fcc ,nil ;};func _ddb (_abg ,_acd []byte ,_bcg int ,_ece bool )int {_adag :=_ccbb (_acd ,_bcg );if _adag < len (_acd )&&(_bcg ==-1&&_acd [_adag ]==_ada ||_bcg >=0&&_bcg < len (_abg )&&_abg [_bcg ]==_acd [_adag ]||_bcg >=len (_abg )&&_ece &&_acd [_adag ]==_ada ||_bcg >=len (_abg )&&!_ece &&_acd [_adag ]==_ceaa ){_adag =_ccbb (_acd ,_adag );
};return _adag ;};func _agb (_eea int )([]byte ,int ){var _dee []byte ;for _ggff :=0;_ggff < 6;_ggff ++{_dee ,_eea =_cece (_dee ,_eea ,_beg );};return _dee ,_eea %8;};func (_cbda *Encoder )encodeG31D (_bead [][]byte )[]byte {var _efb []byte ;_baae :=0;
for _acc :=range _bead {if _cbda .Rows > 0&&!_cbda .EndOfBlock &&_acc ==_cbda .Rows {break ;};_ege ,_egg :=_cgg (_bead [_acc ],_baae ,_beg );_efb =_cbda .appendEncodedRow (_efb ,_ege ,_baae );if _cbda .EncodedByteAlign {_egg =0;};_baae =_egg ;};if _cbda .EndOfBlock {_aad ,_ :=_agb (_baae );
_efb =_cbda .appendEncodedRow (_efb ,_aad ,_baae );};return _efb ;};func (_cag *Encoder )Encode (pixels [][]byte )[]byte {if _cag .BlackIs1 {_ada =0;_ceaa =1;}else {_ada =1;_ceaa =0;};if _cag .K ==0{return _cag .encodeG31D (pixels );};if _cag .K > 0{return _cag .encodeG32D (pixels );
};if _cag .K < 0{return _cag .encodeG4 (pixels );};return nil ;};func (_ffbg *Decoder )decodeRow ()(_adg error ){if !_ffbg ._db &&_ffbg ._eeb > 0&&_ffbg ._eeb ==_ffbg ._cc {return _bg .EOF ;};switch _ffbg ._egc {case _fdc :_adg =_ffbg .decodeRowType2 ();
case _fb :_adg =_ffbg .decodeRowType4 ();case _dfd :_adg =_ffbg .decodeRowType6 ();};if _adg !=nil {return _adg ;};_fcb :=0;_gee :=true ;_ffbg ._bfca =0;for _fgd :=0;_fgd < _ffbg ._cbe ;_fgd ++{_gce :=_ffbg ._fc ;if _fgd !=_ffbg ._cbe {_gce =_ffbg ._bfc [_fgd ];
};if _gce > _ffbg ._fc {_gce =_ffbg ._fc ;};_def :=_fcb /8;for _fcb %8!=0&&_gce -_fcb > 0{var _agaf byte ;if !_gee {_agaf =1<<uint (7-(_fcb %8));};_ffbg ._fca [_def ]|=_agaf ;_fcb ++;};if _fcb %8==0{_def =_fcb /8;var _bed byte ;if !_gee {_bed =0xff;};for _gce -_fcb > 7{_ffbg ._fca [_def ]=_bed ;
_fcb +=8;_def ++;};};for _gce -_fcb > 0{if _fcb %8==0{_ffbg ._fca [_def ]=0;};var _bcb byte ;if !_gee {_bcb =1<<uint (7-(_fcb %8));};_ffbg ._fca [_def ]|=_bcb ;_fcb ++;};_gee =!_gee ;};if _fcb !=_ffbg ._fc {return _c .New ("\u0073\u0075\u006d\u0020\u006f\u0066 \u0072\u0075\u006e\u002d\u006c\u0065\u006e\u0067\u0074\u0068\u0073\u0020\u0064\u006f\u0065\u0073\u0020\u006e\u006f\u0074 \u0065\u0071\u0075\u0061\u006c\u0020\u0073\u0063\u0061\u006e\u0020\u006c\u0069\u006ee\u0020w\u0069\u0064\u0074\u0068");
};_ffbg ._eebf =(_fcb +7)/8;_ffbg ._cc ++;return nil ;};type tiffType int ;func (_cea *Decoder )Read (in []byte )(int ,error ){if _cea ._fad !=nil {return 0,_cea ._fad ;};_dg :=len (in );var (_dea int ;_faf int ;);for _dg !=0{if _cea ._gg >=_cea ._eebf {if _fgf :=_cea .fetch ();
_fgf !=nil {_cea ._fad =_fgf ;return 0,_fgf ;};};if _cea ._eebf ==-1{return _dea ,_bg .EOF ;};switch {case _dg <=_cea ._eebf -_cea ._gg :_cee :=_cea ._fca [_cea ._gg :_cea ._gg +_dg ];for _ ,_dc :=range _cee {if !_cea ._fdb {_dc =^_dc ;};in [_faf ]=_dc ;
_faf ++;};_dea +=len (_cee );_cea ._gg +=len (_cee );return _dea ,nil ;default:_baa :=_cea ._fca [_cea ._gg :];for _ ,_ac :=range _baa {if !_cea ._fdb {_ac =^_ac ;};in [_faf ]=_ac ;_faf ++;};_dea +=len (_baa );_cea ._gg +=len (_baa );_dg -=len (_baa );
};};return _dea ,nil ;};func (_ecg *tree )fillWithNode (_ddcd ,_dafc int ,_bfbc *treeNode )error {_afed :=_ecg ._fgcf ;for _ggbf :=0;_ggbf < _ddcd ;_ggbf ++{_gbce :=uint (_ddcd -1-_ggbf );_aea :=((_dafc >>_gbce )&1)!=0;_gbbg :=_afed .walk (_aea );if _gbbg !=nil {if _gbbg ._fddf {return _c .New ("\u006e\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u006c\u0065\u0061\u0066\u002c\u0020\u006eo\u0020o\u0074\u0068\u0065\u0072\u0020\u0066\u006f\u006c\u006c\u006f\u0077\u0069\u006e\u0067");
};_afed =_gbbg ;continue ;};if _ggbf ==_ddcd -1{_gbbg =_bfbc ;}else {_gbbg =&treeNode {};};if _dafc ==0{_gbbg ._bfbf =true ;};_afed .set (_aea ,_gbbg );_afed =_gbbg ;};return nil ;};func _fbf (_egde int )([]byte ,int ){var _eca []byte ;for _gfc :=0;_gfc < 6;
_gfc ++{_eca ,_egde =_cece (_eca ,_egde ,_eda );};return _eca ,_egde %8;};func _bbbd (_adgc []byte ,_bggd ,_adac ,_dfde int )([]byte ,int ){_cbba :=_eeeb (_adac ,_dfde );_adgc ,_bggd =_cece (_adgc ,_bggd ,_cbba );return _adgc ,_bggd ;};func _cgg (_affd []byte ,_fecg int ,_aaf code )([]byte ,int ){_bbg :=true ;
var _dae []byte ;_dae ,_fecg =_cece (nil ,_fecg ,_aaf );_acb :=0;var _facd int ;for _acb < len (_affd ){_facd ,_acb =_dccf (_affd ,_bbg ,_acb );_dae ,_fecg =_dbb (_dae ,_fecg ,_facd ,_bbg );_bbg =!_bbg ;};return _dae ,_fecg %8;};func (_eebd *Decoder )fetch ()error {if _eebd ._eebf ==-1{return nil ;
};if _eebd ._gg < _eebd ._eebf {return nil ;};_eebd ._eebf =0;_egd :=_eebd .decodeRow ();if _egd !=nil {if !_c .Is (_egd ,_bg .EOF ){return _egd ;};if _eebd ._eebf !=0{return _egd ;};_eebd ._eebf =-1;};_eebd ._gg =0;return nil ;};func _ddgb (_ede ,_accb []byte ,_bbc ,_bge ,_cgfe int )([]byte ,int ,int ){_bae :=_ccbb (_ede ,_cgfe );
_fcf :=_bge >=0&&_ede [_bge ]==_ada ||_bge ==-1;_accb ,_bbc =_cece (_accb ,_bbc ,_ceb );var _cbdc int ;if _bge > -1{_cbdc =_cgfe -_bge ;}else {_cbdc =_cgfe -_bge -1;};_accb ,_bbc =_dbb (_accb ,_bbc ,_cbdc ,_fcf );_fcf =!_fcf ;_fbfc :=_bae -_cgfe ;_accb ,_bbc =_dbb (_accb ,_bbc ,_fbfc ,_fcf );
_bge =_bae ;return _accb ,_bbc ,_bge ;};