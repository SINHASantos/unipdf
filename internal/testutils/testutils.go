//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package testutils ;import (_c "crypto/md5";_df "encoding/hex";_db "errors";_a "fmt";_cd "github.com/unidoc/unipdf/v3/common";_cg "github.com/unidoc/unipdf/v3/core";_fc "image";_gc "image/png";_dd "io";_b "os";_dc "os/exec";_f "path/filepath";_d "strings";
_g "testing";);func ComparePNGFiles (file1 ,file2 string )(bool ,error ){_dba ,_ad :=HashFile (file1 );if _ad !=nil {return false ,_ad ;};_cgf ,_ad :=HashFile (file2 );if _ad !=nil {return false ,_ad ;};if _dba ==_cgf {return true ,nil ;};_eg ,_ad :=ReadPNG (file1 );
if _ad !=nil {return false ,_ad ;};_ce ,_ad :=ReadPNG (file2 );if _ad !=nil {return false ,_ad ;};if _eg .Bounds ()!=_ce .Bounds (){return false ,nil ;};return CompareImages (_eg ,_ce );};var (ErrRenderNotSupported =_db .New ("\u0072\u0065\u006e\u0064\u0065r\u0069\u006e\u0067\u0020\u0050\u0044\u0046\u0020\u0066\u0069\u006c\u0065\u0073 \u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006f\u006e\u0020\u0074\u0068\u0069\u0073\u0020\u0073\u0079\u0073\u0074\u0065m");
);func HashFile (file string )(string ,error ){_eb ,_ge :=_b .Open (file );if _ge !=nil {return "",_ge ;};defer _eb .Close ();_gef :=_c .New ();if _ ,_ge =_dd .Copy (_gef ,_eb );_ge !=nil {return "",_ge ;};return _df .EncodeToString (_gef .Sum (nil )),nil ;
};func RenderPDFToPNGs (pdfPath string ,dpi int ,outpathTpl string )error {if dpi <=0{dpi =100;};if _ ,_dde :=_dc .LookPath ("\u0067\u0073");_dde !=nil {return ErrRenderNotSupported ;};return _dc .Command ("\u0067\u0073","\u002d\u0073\u0044\u0045\u0056\u0049\u0043\u0045\u003d\u0070\u006e\u0067a\u006c\u0070\u0068\u0061","\u002d\u006f",outpathTpl ,_a .Sprintf ("\u002d\u0072\u0025\u0064",dpi ),pdfPath ).Run ();
};func ReadPNG (file string )(_fc .Image ,error ){_dgb ,_gcc :=_b .Open (file );if _gcc !=nil {return nil ,_gcc ;};defer _dgb .Close ();return _gc .Decode (_dgb );};func CompareImages (img1 ,img2 _fc .Image )(bool ,error ){_ca :=img1 .Bounds ();_cc :=0;
for _fgg :=0;_fgg < _ca .Size ().X ;_fgg ++{for _dfg :=0;_dfg < _ca .Size ().Y ;_dfg ++{_dgf ,_dce ,_abb ,_ :=img1 .At (_fgg ,_dfg ).RGBA ();_fcc ,_ed ,_ae ,_ :=img2 .At (_fgg ,_dfg ).RGBA ();if _dgf !=_fcc ||_dce !=_ed ||_abb !=_ae {_cc ++;};};};_acb :=float64 (_cc )/float64 (_ca .Dx ()*_ca .Dy ());
if _acb > 0.0001{_a .Printf ("\u0064\u0069\u0066f \u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0076\u0020\u0028\u0025\u0064\u0029\u000a",_acb ,_cc );return false ,nil ;};return true ,nil ;};func CompareDictionariesDeep (d1 ,d2 *_cg .PdfObjectDictionary )bool {if len (d1 .Keys ())!=len (d2 .Keys ()){_cd .Log .Debug ("\u0044\u0069\u0063\u0074\u0020\u0065\u006e\u0074\u0072\u0069\u0065\u0073\u0020\u006d\u0069s\u006da\u0074\u0063\u0068\u0020\u0028\u0025\u0064\u0020\u0021\u003d\u0020\u0025\u0064\u0029",len (d1 .Keys ()),len (d2 .Keys ()));
_cd .Log .Debug ("\u0057\u0061s\u0020\u0027\u0025s\u0027\u0020\u0076\u0073\u0020\u0027\u0025\u0073\u0027",d1 .WriteString (),d2 .WriteString ());return false ;};for _ ,_gee :=range d1 .Keys (){if _gee =="\u0050\u0061\u0072\u0065\u006e\u0074"{continue ;
};_bag :=_cg .TraceToDirectObject (d1 .Get (_gee ));_dceg :=_cg .TraceToDirectObject (d2 .Get (_gee ));if _bag ==nil {_cd .Log .Debug ("\u00761\u0020\u0069\u0073\u0020\u006e\u0069l");return false ;};if _dceg ==nil {_cd .Log .Debug ("\u00762\u0020\u0069\u0073\u0020\u006e\u0069l");
return false ;};switch _dfc :=_bag .(type ){case *_cg .PdfObjectDictionary :_ega ,_ag :=_dceg .(*_cg .PdfObjectDictionary );if !_ag {_cd .Log .Debug ("\u0054\u0079\u0070\u0065 m\u0069\u0073\u006d\u0061\u0074\u0063\u0068\u0020\u0025\u0054\u0020\u0076\u0073\u0020%\u0054",_bag ,_dceg );
return false ;};if !CompareDictionariesDeep (_dfc ,_ega ){return false ;};continue ;case *_cg .PdfObjectArray :_acf ,_gdbd :=_dceg .(*_cg .PdfObjectArray );if !_gdbd {_cd .Log .Debug ("\u00762\u0020n\u006f\u0074\u0020\u0061\u006e\u0020\u0061\u0072\u0072\u0061\u0079");
return false ;};if _dfc .Len ()!=_acf .Len (){_cd .Log .Debug ("\u0061\u0072\u0072\u0061\u0079\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u006d\u0069s\u006da\u0074\u0063\u0068\u0020\u0028\u0025\u0064\u0020\u0021\u003d\u0020\u0025\u0064\u0029",_dfc .Len (),_acf .Len ());
return false ;};for _fgf :=0;_fgf < _dfc .Len ();_fgf ++{_gb :=_cg .TraceToDirectObject (_dfc .Get (_fgf ));_ceg :=_cg .TraceToDirectObject (_acf .Get (_fgf ));if _adca ,_fad :=_gb .(*_cg .PdfObjectDictionary );_fad {_ddd ,_bba :=_ceg .(*_cg .PdfObjectDictionary );
if !_bba {return false ;};if !CompareDictionariesDeep (_adca ,_ddd ){return false ;};}else {if _gb .WriteString ()!=_ceg .WriteString (){_cd .Log .Debug ("M\u0069\u0073\u006d\u0061tc\u0068 \u0027\u0025\u0073\u0027\u0020!\u003d\u0020\u0027\u0025\u0073\u0027",_gb .WriteString (),_ceg .WriteString ());
return false ;};};};continue ;};if _bag .String ()!=_dceg .String (){_cd .Log .Debug ("\u006b\u0065y\u003d\u0025\u0073\u0020\u004d\u0069\u0073\u006d\u0061\u0074\u0063\u0068\u0021\u0020\u0027\u0025\u0073\u0027\u0020\u0021\u003d\u0020'%\u0073\u0027",_gee ,_bag .String (),_dceg .String ());
_cd .Log .Debug ("\u0046o\u0072 \u0027\u0025\u0054\u0027\u0020\u002d\u0020\u0027\u0025\u0054\u0027",_bag ,_dceg );_cd .Log .Debug ("\u0046\u006f\u0072\u0020\u0027\u0025\u002b\u0076\u0027\u0020\u002d\u0020'\u0025\u002b\u0076\u0027",_bag ,_dceg );return false ;
};};return true ;};func ParseIndirectObjects (rawpdf string )(map[int64 ]_cg .PdfObject ,error ){_cgb :=_cg .NewParserFromString (rawpdf );_bbg :=map[int64 ]_cg .PdfObject {};for {_gaa ,_be :=_cgb .ParseIndirectObject ();if _be !=nil {if _be ==_dd .EOF {break ;
};return nil ,_be ;};switch _egg :=_gaa .(type ){case *_cg .PdfIndirectObject :_bbg [_egg .ObjectNumber ]=_gaa ;case *_cg .PdfObjectStream :_bbg [_egg .ObjectNumber ]=_gaa ;};};for _ ,_da :=range _bbg {_dcee (_da ,_bbg );};return _bbg ,nil ;};func CopyFile (src ,dst string )error {_ab ,_dg :=_b .Open (src );
if _dg !=nil {return _dg ;};defer _ab .Close ();_ac ,_dg :=_b .Create (dst );if _dg !=nil {return _dg ;};defer _ac .Close ();_ ,_dg =_dd .Copy (_ac ,_ab );return _dg ;};func _dcee (_eda _cg .PdfObject ,_bd map[int64 ]_cg .PdfObject )error {switch _fa :=_eda .(type ){case *_cg .PdfIndirectObject :_ef :=_fa ;
_dcee (_ef .PdfObject ,_bd );case *_cg .PdfObjectDictionary :_bbgd :=_fa ;for _ ,_acc :=range _bbgd .Keys (){_afgf :=_bbgd .Get (_acc );if _gd ,_fd :=_afgf .(*_cg .PdfObjectReference );_fd {_eag ,_dbg :=_bd [_gd .ObjectNumber ];if !_dbg {return _db .New ("r\u0065\u0066\u0065\u0072\u0065\u006ec\u0065\u0020\u0074\u006f\u0020\u006f\u0075\u0074\u0073i\u0064\u0065\u0020o\u0062j\u0065\u0063\u0074");
};_bbgd .Set (_acc ,_eag );}else {_dcee (_afgf ,_bd );};};case *_cg .PdfObjectArray :_eff :=_fa ;for _afd ,_fde :=range _eff .Elements (){if _fcd ,_gdb :=_fde .(*_cg .PdfObjectReference );_gdb {_bdd ,_dbac :=_bd [_fcd .ObjectNumber ];if !_dbac {return _db .New ("r\u0065\u0066\u0065\u0072\u0065\u006ec\u0065\u0020\u0074\u006f\u0020\u006f\u0075\u0074\u0073i\u0064\u0065\u0020o\u0062j\u0065\u0063\u0074");
};_eff .Set (_afd ,_bdd );}else {_dcee (_fde ,_bd );};};};return nil ;};func RunRenderTest (t *_g .T ,pdfPath ,outputDir ,baselineRenderPath string ,saveBaseline bool ){_adc :=_d .TrimSuffix (_f .Base (pdfPath ),_f .Ext (pdfPath ));t .Run ("\u0072\u0065\u006e\u0064\u0065\u0072",func (_ddf *_g .T ){_ddg :=_f .Join (outputDir ,_adc );
_edg :=_ddg +"\u002d%\u0064\u002e\u0070\u006e\u0067";if _add :=RenderPDFToPNGs (pdfPath ,0,_edg );_add !=nil {_ddf .Skip (_add );};for _ga :=1;true ;_ga ++{_deg :=_a .Sprintf ("\u0025s\u002d\u0025\u0064\u002e\u0070\u006eg",_ddg ,_ga );_dgd :=_f .Join (baselineRenderPath ,_a .Sprintf ("\u0025\u0073\u002d\u0025\u0064\u005f\u0065\u0078\u0070\u002e\u0070\u006e\u0067",_adc ,_ga ));
if _ ,_bb :=_b .Stat (_deg );_bb !=nil {break ;};_ddf .Logf ("\u0025\u0073",_dgd );if saveBaseline {_ddf .Logf ("\u0043\u006fp\u0079\u0069\u006eg\u0020\u0025\u0073\u0020\u002d\u003e\u0020\u0025\u0073",_deg ,_dgd );_af :=CopyFile (_deg ,_dgd );if _af !=nil {_ddf .Fatalf ("\u0045\u0052\u0052OR\u0020\u0063\u006f\u0070\u0079\u0069\u006e\u0067\u0020\u0074\u006f\u0020\u0025\u0073\u003a\u0020\u0025\u0076",_dgd ,_af );
};continue ;};_ddf .Run (_a .Sprintf ("\u0070\u0061\u0067\u0065\u0025\u0064",_ga ),func (_fe *_g .T ){_fe .Logf ("\u0043o\u006dp\u0061\u0072\u0069\u006e\u0067 \u0025\u0073 \u0076\u0073\u0020\u0025\u0073",_deg ,_dgd );_dec ,_ee :=ComparePNGFiles (_deg ,_dgd );
if _b .IsNotExist (_ee ){_fe .Fatal ("\u0069m\u0061g\u0065\u0020\u0066\u0069\u006ce\u0020\u006di\u0073\u0073\u0069\u006e\u0067");}else if !_dec {_fe .Fatal ("\u0077\u0072\u006f\u006eg \u0070\u0061\u0067\u0065\u0020\u0072\u0065\u006e\u0064\u0065\u0072\u0065\u0064");
};});};});};