//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package cmap ;import (_e "bufio";_de "bytes";_ce "encoding/hex";_ga "errors";_g "fmt";_eb "github.com/unidoc/unipdf/v4/common";_cg "github.com/unidoc/unipdf/v4/core";_ebg "github.com/unidoc/unipdf/v4/internal/cmap/bcmaps";_f "io";_cc "sort";_d "strconv";
_b "strings";_cd "unicode/utf16";);type cmapHexString struct{_ace int ;_gfe []byte ;};func (cmap *CMap )WMode ()(int ,bool ){return cmap ._gdb ._dfbg ,cmap ._gdb ._gcf };func (cmap *CMap )BytesToCharcodes (data []byte )([]CharCode ,bool ){var _df []CharCode ;
if cmap ._dac ==8{for _ ,_afg :=range data {_df =append (_df ,CharCode (_afg ));};return _df ,true ;};for _ccc :=0;_ccc < len (data );{_bfd ,_dcd ,_dfc :=cmap .matchCode (data [_ccc :]);if !_dfc {_eb .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0074\u0020\u0069\u003d\u0025\u0064\u0020\u0062\u0079\u0074\u0065\u0073\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d\u003d\u0025\u0023\u0071",_ccc ,data ,string (data ));
return _df ,false ;};_df =append (_df ,_bfd );_ccc +=_dcd ;};return _df ,true ;};type fbRange struct{_gd CharCode ;_cdc CharCode ;_cce string ;};type CMap struct{*cMapParser ;_deb string ;_dac int ;_ee int ;_ag string ;_ffd string ;_gad CIDSystemInfo ;
_db []Codespace ;_af map[CharCode ]CharCode ;_fd map[CharCode ]CharCode ;_gaa map[CharCode ]string ;_ba map[string ]CharCode ;_agd []byte ;_bg *_cg .PdfObjectStream ;_gdb integer ;};func IsPredefinedCMap (name string )bool {return _ebg .AssetExists (name )};
func (cmap *CMap )parseName ()error {_bca :="";_agec :=false ;for _dbdd :=0;_dbdd < 20&&!_agec ;_dbdd ++{_cgad ,_ebb :=cmap .parseObject ();if _ebb !=nil {return _ebb ;};switch _dfa :=_cgad .(type ){case cmapOperand :switch _dfa .Operand {case "\u0064\u0065\u0066":_agec =true ;
default:_eb .Log .Debug ("\u0070\u0061\u0072\u0073\u0065\u004e\u0061\u006d\u0065\u003a\u0020\u0053\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020o\u003d\u0025\u0023\u0076\u0020n\u0061\u006de\u003d\u0025\u0023\u0071",_cgad ,_bca );
if _bca !=""{_bca =_g .Sprintf ("\u0025\u0073\u0020%\u0073",_bca ,_dfa .Operand );};_eb .Log .Debug ("\u0070\u0061\u0072\u0073\u0065\u004e\u0061\u006d\u0065\u003a \u0052\u0065\u0063\u006f\u0076\u0065\u0072e\u0064\u002e\u0020\u006e\u0061\u006d\u0065\u003d\u0025\u0023\u0071",_bca );
};case cmapName :_bca =_dfa .Name ;};};if !_agec {_eb .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0070\u0061\u0072\u0073\u0065N\u0061m\u0065:\u0020\u004e\u006f\u0020\u0064\u0065\u0066 ");return ErrBadCMap ;};cmap ._deb =_bca ;return nil ;};func _ged (_acg []byte )*cMapParser {_dce :=cMapParser {};
_afgg :=_de .NewBuffer (_acg );_dce ._ffgb =_e .NewReader (_afgg );return &_dce ;};type cMapParser struct{_ffgb *_e .Reader };func _dbc (_eg string )(*CMap ,error ){_cec ,_fda :=_ebg .Asset (_eg );if _fda !=nil {return nil ,_fda ;};return LoadCmapFromDataCID (_cec );
};func (_cab *cMapParser )parseNumber ()(cmapObject ,error ){_aeb ,_bdbaa :=_cg .ParseNumber (_cab ._ffgb );if _bdbaa !=nil {return nil ,_bdbaa ;};switch _fdec :=_aeb .(type ){case *_cg .PdfObjectFloat :return cmapFloat {float64 (*_fdec )},nil ;case *_cg .PdfObjectInteger :return cmapInt {int64 (*_fdec )},nil ;
};return nil ,_g .Errorf ("\u0075n\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_aeb );};func (cmap *CMap )NBits ()int {return cmap ._dac };func _cdbgd (_gff cmapHexString )[]rune {if len (_gff ._gfe )==1{return []rune {rune (_gff ._gfe [0])};
};_fagg :=_gff ._gfe ;if len (_fagg )%2!=0{_fagg =append (_fagg ,0);_eb .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0068\u0065\u0078\u0054\u006f\u0052\u0075\u006e\u0065\u0073\u002e\u0020\u0050\u0061\u0064\u0064\u0069\u006e\u0067\u0020\u0073\u0068\u0065\u0078\u003d\u0025#\u0076\u0020\u0074\u006f\u0020\u0025\u002b\u0076",_gff ,_fagg );
};_aadd :=len (_fagg )>>1;_gdec :=make ([]uint16 ,_aadd );for _gaed :=0;_gaed < _aadd ;_gaed ++{_gdec [_gaed ]=uint16 (_fagg [_gaed <<1])<<8+uint16 (_fagg [_gaed <<1+1]);};_acba :=_cd .Decode (_gdec );return _acba ;};func (_gegc *cMapParser )parseComment ()(string ,error ){var _afa _de .Buffer ;
_ ,_cgcf :=_gegc .skipSpaces ();if _cgcf !=nil {return _afa .String (),_cgcf ;};_ebc :=true ;for {_aded ,_ggaf :=_gegc ._ffgb .Peek (1);if _ggaf !=nil {_eb .Log .Debug ("p\u0061r\u0073\u0065\u0043\u006f\u006d\u006d\u0065\u006et\u003a\u0020\u0065\u0072r=\u0025\u0076",_ggaf );
return _afa .String (),_ggaf ;};if _ebc &&_aded [0]!='%'{return _afa .String (),ErrBadCMapComment ;};_ebc =false ;if (_aded [0]!='\r')&&(_aded [0]!='\n'){_bfce ,_ :=_gegc ._ffgb .ReadByte ();_afa .WriteByte (_bfce );}else {break ;};};return _afa .String (),nil ;
};func _ae (_dba string )rune {_degg :=[]rune (_dba );return _degg [len (_degg )-1]};func (cmap *CMap )parseBfrange ()error {for {var _fag CharCode ;_eacb ,_ffgc :=cmap .parseObject ();if _ffgc !=nil {if _ffgc ==_f .EOF {break ;};return _ffgc ;};switch _efe :=_eacb .(type ){case cmapOperand :if _efe .Operand ==_eed {return nil ;
};return _ga .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");case cmapHexString :_fag =_afggf (_efe );default:return _ga .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065");
};var _bfba CharCode ;_eacb ,_ffgc =cmap .parseObject ();if _ffgc !=nil {if _ffgc ==_f .EOF {break ;};return _ffgc ;};switch _ggde :=_eacb .(type ){case cmapOperand :_eb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0049\u006e\u0063\u006f\u006d\u0070\u006c\u0065\u0074\u0065\u0020\u0062\u0066r\u0061\u006e\u0067\u0065\u0020\u0074\u0072i\u0070\u006c\u0065\u0074");
return ErrBadCMap ;case cmapHexString :_bfba =_afggf (_ggde );if _bfba > 0xffff{_bfba =0xffff;};default:_eb .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0055\u006e\u0065\u0078\u0070e\u0063t\u0065d\u0020\u0074\u0079\u0070\u0065\u0020\u0025T",_eacb );
return ErrBadCMap ;};_eacb ,_ffgc =cmap .parseObject ();if _ffgc !=nil {if _ffgc ==_f .EOF {break ;};return _ffgc ;};switch _aef :=_eacb .(type ){case cmapArray :if len (_aef .Array )!=int (_bfba -_fag )+1{_eb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u006f\u0066\u0020\u0069\u0074\u0065\u006d\u0073\u0020\u0069\u006e\u0020a\u0072\u0072\u0061\u0079");
return ErrBadCMap ;};for _eff :=_fag ;_eff <=_bfba ;_eff ++{_fac :=_aef .Array [_eff -_fag ];_fbef ,_bgfge :=_fac .(cmapHexString );if !_bgfge {return _ga .New ("\u006e\u006f\u006e-h\u0065\u0078\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0069\u006e\u0020\u0061\u0072\u0072\u0061\u0079");
};_bbac :=_cdbgd (_fbef );cmap ._gaa [_eff ]=string (_bbac );};case cmapHexString :_afc :=_cdbgd (_aef );_egd :=len (_afc );for _gga :=_fag ;_gga <=_bfba ;_gga ++{cmap ._gaa [_gga ]=string (_afc );if _egd > 0{_afc [_egd -1]++;}else {_eb .Log .Debug ("\u004e\u006f\u0020c\u006d\u0061\u0070\u0020\u0074\u0061\u0072\u0067\u0065\u0074\u0020\u0063\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0066\u006f\u0072\u0020\u0025\u0023\u0076",_gga );
};if _gga ==1<<32-1{break ;};};default:_eb .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0055\u006e\u0065\u0078\u0070e\u0063t\u0065d\u0020\u0074\u0079\u0070\u0065\u0020\u0025T",_eacb );return ErrBadCMap ;};};return nil ;};func LoadCmapFromDataCID (data []byte )(*CMap ,error ){return LoadCmapFromData (data ,false )};
func (cmap *CMap )parseType ()error {_gea :=0;_eeed :=false ;for _adc :=0;_adc < 3&&!_eeed ;_adc ++{_bfe ,_dcdg :=cmap .parseObject ();if _dcdg !=nil {return _dcdg ;};switch _dda :=_bfe .(type ){case cmapOperand :switch _dda .Operand {case "\u0064\u0065\u0066":_eeed =true ;
default:_eb .Log .Error ("\u0070\u0061r\u0073\u0065\u0054\u0079\u0070\u0065\u003a\u0020\u0073\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020\u006f=%\u0023\u0076",_bfe );return ErrBadCMap ;};case cmapInt :_gea =int (_dda ._eddb );
};};cmap ._ee =_gea ;return nil ;};func (cmap *CMap )CharcodeToCID (code CharCode )(CharCode ,bool ){_fgd ,_dbd :=cmap ._af [code ];return _fgd ,_dbd ;};func (cmap *CMap )String ()string {_bfag :=cmap ._gad ;_dg :=[]string {_g .Sprintf ("\u006e\u0062\u0069\u0074\u0073\u003a\u0025\u0064",cmap ._dac ),_g .Sprintf ("\u0074y\u0070\u0065\u003a\u0025\u0064",cmap ._ee )};
if cmap ._ag !=""{_dg =append (_dg ,_g .Sprintf ("\u0076\u0065\u0072\u0073\u0069\u006f\u006e\u003a\u0025\u0073",cmap ._ag ));};if cmap ._ffd !=""{_dg =append (_dg ,_g .Sprintf ("u\u0073\u0065\u0063\u006d\u0061\u0070\u003a\u0025\u0023\u0071",cmap ._ffd ));
};_dg =append (_dg ,_g .Sprintf ("\u0073\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f\u003a\u0025\u0073",_bfag .String ()));if len (cmap ._db )> 0{_dg =append (_dg ,_g .Sprintf ("\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u003a\u0025\u0064",len (cmap ._db )));
};if len (cmap ._gaa )> 0{_dg =append (_dg ,_g .Sprintf ("\u0063\u006fd\u0065\u0054\u006fU\u006e\u0069\u0063\u006f\u0064\u0065\u003a\u0025\u0064",len (cmap ._gaa )));};return _g .Sprintf ("\u0043\u004d\u0041P\u007b\u0025\u0023\u0071\u0020\u0025\u0073\u007d",cmap ._deb ,_b .Join (_dg ,"\u0020"));
};func (cmap *CMap )Stream ()(*_cg .PdfObjectStream ,error ){if cmap ._bg !=nil {return cmap ._bg ,nil ;};_gdbf ,_cea :=_cg .MakeStream (cmap .Bytes (),_cg .NewFlateEncoder ());if _cea !=nil {return nil ,_cea ;};cmap ._bg =_gdbf ;return cmap ._bg ,nil ;
};func (_edf *cMapParser )parseArray ()(cmapArray ,error ){_dgc :=cmapArray {};_dgc .Array =[]cmapObject {};_edf ._ffgb .ReadByte ();for {_edf .skipSpaces ();_edcg ,_baca :=_edf ._ffgb .Peek (1);if _baca !=nil {return _dgc ,_baca ;};if _edcg [0]==']'{_edf ._ffgb .ReadByte ();
break ;};_bdge ,_baca :=_edf .parseObject ();if _baca !=nil {return _dgc ,_baca ;};_dgc .Array =append (_dgc .Array ,_bdge );};return _dgc ,nil ;};func (_ebbbg *cMapParser )skipSpaces ()(int ,error ){_adcc :=0;for {_dbg ,_gca :=_ebbbg ._ffgb .Peek (1);
if _gca !=nil {return 0,_gca ;};if _cg .IsWhiteSpace (_dbg [0]){_ebbbg ._ffgb .ReadByte ();_adcc ++;}else {break ;};};return _adcc ,nil ;};const (_bcf =100;_fbf ="\u000a\u002f\u0043\u0049\u0044\u0049\u006e\u0069\u0074\u0020\u002f\u0050\u0072\u006fc\u0053\u0065\u0074\u0020\u0066\u0069\u006e\u0064\u0072es\u006fu\u0072c\u0065 \u0062\u0065\u0067\u0069\u006e\u000a\u0031\u0032\u0020\u0064\u0069\u0063\u0074\u0020\u0062\u0065\u0067\u0069n\u000a\u0062\u0065\u0067\u0069\u006e\u0063\u006d\u0061\u0070\n\u002f\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065m\u0049\u006e\u0066\u006f\u0020\u003c\u003c\u0020\u002f\u0052\u0065\u0067\u0069\u0073t\u0072\u0079\u0020\u0028\u0041\u0064\u006f\u0062\u0065\u0029\u0020\u002f\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067\u0020\u0028\u0055\u0043\u0053)\u0020\u002f\u0053\u0075\u0070p\u006c\u0065\u006d\u0065\u006et\u0020\u0030\u0020\u003e\u003e\u0020\u0064\u0065\u0066\u000a\u002f\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065\u0020\u002f\u0041\u0064\u006f\u0062\u0065-\u0049\u0064\u0065\u006e\u0074\u0069\u0074\u0079\u002d\u0055\u0043\u0053\u0020\u0064\u0065\u0066\u000a\u002fC\u004d\u0061\u0070\u0054\u0079\u0070\u0065\u0020\u0032\u0020\u0064\u0065\u0066\u000a\u0031\u0020\u0062\u0065\u0067\u0069\u006e\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063e\u0072\u0061n\u0067\u0065\n\u003c\u0030\u0030\u0030\u0030\u003e\u0020<\u0046\u0046\u0046\u0046\u003e\u000a\u0065\u006e\u0064\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065r\u0061\u006e\u0067\u0065\u000a";
_dfgd ="\u0065\u006e\u0064\u0063\u006d\u0061\u0070\u000a\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065\u0020\u0063ur\u0072e\u006e\u0074\u0064\u0069\u0063\u0074\u0020\u002f\u0043\u004d\u0061\u0070 \u0064\u0065\u0066\u0069\u006e\u0065\u0072\u0065\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0070\u006fp\u000a\u0065\u006e\u0064\u000a\u0065\u006e\u0064\u000a";
);type CIDSystemInfo struct{Registry string ;Ordering string ;Supplement int ;};func _fdb (_geea ,_fdg int )int {if _geea < _fdg {return _geea ;};return _fdg ;};func (_dddc *cMapParser )parseDict ()(cmapDict ,error ){_eb .Log .Trace ("\u0052\u0065\u0061\u0064\u0069\u006e\u0067\u0020\u0050\u0044\u0046\u0020D\u0069\u0063\u0074\u0021");
_acd :=_acge ();_edce ,_ :=_dddc ._ffgb .ReadByte ();if _edce !='<'{return _acd ,ErrBadCMapDict ;};_edce ,_ =_dddc ._ffgb .ReadByte ();if _edce !='<'{return _acd ,ErrBadCMapDict ;};for {_dddc .skipSpaces ();_fbd ,_acbc :=_dddc ._ffgb .Peek (2);if _acbc !=nil {return _acd ,_acbc ;
};if (_fbd [0]=='>')&&(_fbd [1]=='>'){_dddc ._ffgb .ReadByte ();_dddc ._ffgb .ReadByte ();break ;};_fge ,_acbc :=_dddc .parseName ();_eb .Log .Trace ("\u004be\u0079\u003a\u0020\u0025\u0073",_fge .Name );if _acbc !=nil {_eb .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0052\u0065\u0074\u0075\u0072\u006e\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u002e\u0020\u0065\u0072r=\u0025\u0076",_acbc );
return _acd ,_acbc ;};_dddc .skipSpaces ();_gae ,_acbc :=_dddc .parseObject ();if _acbc !=nil {return _acd ,_acbc ;};_acd .Dict [_fge .Name ]=_gae ;_dddc .skipSpaces ();_fbd ,_acbc =_dddc ._ffgb .Peek (3);if _acbc !=nil {return _acd ,_acbc ;};if string (_fbd )=="\u0064\u0065\u0066"{_dddc ._ffgb .Discard (3);
};};return _acd ,nil ;};func (cmap *CMap )CharcodeToUnicode (code CharCode )(string ,bool ){if _bb ,_gaf :=cmap ._gaa [code ];_gaf {return _bb ,true ;};return MissingCodeString ,false ;};func (cmap *CMap )parse ()error {var _cdd cmapObject ;for {_ef ,_gab :=cmap .parseObject ();
if _gab !=nil {if _gab ==_f .EOF {break ;};_eb .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u004d\u0061\u0070\u003a\u0020\u0025\u0076",_gab );return _gab ;};switch _fgdf :=_ef .(type ){case cmapOperand :_gee :=_fgdf ;
switch _gee .Operand {case _fdda :_bbf :=cmap .parseCodespaceRange ();if _bbf !=nil {return _bbf ;};case _ggdb :_gdc :=cmap .parseCIDRange ();if _gdc !=nil {return _gdc ;};case _afe :_afdb :=cmap .parseBfchar ();if _afdb !=nil {return _afdb ;};case _add :_fed :=cmap .parseBfrange ();
if _fed !=nil {return _fed ;};case _gbb :if _cdd ==nil {_eb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0075\u0073\u0065\u0063m\u0061\u0070\u0020\u0077\u0069\u0074\u0068\u0020\u006e\u006f \u0061\u0072\u0067");return ErrBadCMap ;};_egba ,_bdba :=_cdd .(cmapName );
if !_bdba {_eb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0075\u0073\u0065\u0063\u006d\u0061\u0070\u0020\u0061\u0072\u0067\u0020\u006eo\u0074\u0020\u0061\u0020\u006e\u0061\u006de\u0020\u0025\u0023\u0076",_cdd );return ErrBadCMap ;};cmap ._ffd =_egba .Name ;
case _cdec :_gde :=cmap .parseSystemInfo ();if _gde !=nil {return _gde ;};};case cmapName :_cdb :=_fgdf ;switch _cdb .Name {case _cdec :_deef :=cmap .parseSystemInfo ();if _deef !=nil {return _deef ;};case _dcf :_ggd :=cmap .parseName ();if _ggd !=nil {return _ggd ;
};case _daba :_cfc :=cmap .parseType ();if _cfc !=nil {return _cfc ;};case _bff :_cfbg :=cmap .parseVersion ();if _cfbg !=nil {return _cfbg ;};case _fec :if _gab =cmap .parseWMode ();_gab !=nil {return _gab ;};};};_cdd =_ef ;};return nil ;};func NewToUnicodeCMap (codeToRune map[CharCode ]rune )*CMap {_dc :=make (map[CharCode ]string ,len (codeToRune ));
for _dca ,_fc :=range codeToRune {_dc [_dca ]=string (_fc );};cmap :=&CMap {_deb :"\u0041d\u006fb\u0065\u002d\u0049\u0064\u0065n\u0074\u0069t\u0079\u002d\u0055\u0043\u0053",_ee :2,_dac :16,_gad :CIDSystemInfo {Registry :"\u0041\u0064\u006fb\u0065",Ordering :"\u0055\u0043\u0053",Supplement :0},_db :[]Codespace {{Low :0,High :0xffff}},_gaa :_dc ,_ba :make (map[string ]CharCode ,len (codeToRune )),_af :make (map[CharCode ]CharCode ,len (codeToRune )),_fd :make (map[CharCode ]CharCode ,len (codeToRune ))};
cmap .computeInverseMappings ();return cmap ;};type cmapObject interface{};func (cmap *CMap )matchCode (_fe []byte )(_egg CharCode ,_bba int ,_aaf bool ){for _abc :=0;_abc < _a ;_abc ++{if _abc < len (_fe ){_egg =_egg <<8|CharCode (_fe [_abc ]);_bba ++;
};_aaf =cmap .inCodespace (_egg ,_abc +1);if _aaf {return _egg ,_bba ,true ;};};_eb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063o\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0020m\u0061t\u0063\u0068\u0065\u0073\u0020\u0062\u0079\u0074\u0065\u0073\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d=\u0025\u0023\u0071\u0020\u0063\u006d\u0061\u0070\u003d\u0025\u0073",_fe ,string (_fe ),cmap );
return 0,0,false ;};func (cmap *CMap )StringToCID (s string )(CharCode ,bool ){_bdb ,_ffe :=cmap ._ba [s ];return _bdb ,_ffe ;};func NewCIDSystemInfo (obj _cg .PdfObject )(_gb CIDSystemInfo ,_da error ){_bf ,_ea :=_cg .GetDict (obj );if !_ea {return CIDSystemInfo {},_cg .ErrTypeError ;
};_cb ,_ea :=_cg .GetStringVal (_bf .Get ("\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079"));if !_ea {return CIDSystemInfo {},_cg .ErrTypeError ;};_cfb ,_ea :=_cg .GetStringVal (_bf .Get ("\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067"));if !_ea {return CIDSystemInfo {},_cg .ErrTypeError ;
};_cdg ,_ea :=_cg .GetIntVal (_bf .Get ("\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074"));if !_ea {return CIDSystemInfo {},_cg .ErrTypeError ;};return CIDSystemInfo {Registry :_cb ,Ordering :_cfb ,Supplement :_cdg },nil ;};type CharCode uint32 ;
func (cmap *CMap )parseWMode ()error {var _deed int ;_bed :=false ;for _gabf :=0;_gabf < 3&&!_bed ;_gabf ++{_ecf ,_fbc :=cmap .parseObject ();if _fbc !=nil {return _fbc ;};switch _dgg :=_ecf .(type ){case cmapOperand :switch _dgg .Operand {case "\u0064\u0065\u0066":_bed =true ;
default:_eb .Log .Error ("\u0070\u0061\u0072\u0073\u0065\u0057\u004d\u006f\u0064\u0065:\u0020\u0073\u0074\u0061\u0074\u0065\u0020e\u0072\u0072\u006f\u0072\u002e\u0020\u006f\u003d\u0025\u0023\u0076",_ecf );return ErrBadCMap ;};case cmapInt :_deed =int (_dgg ._eddb );
};};cmap ._gdb =integer {_gcf :true ,_dfbg :_deed };return nil ;};func (cmap *CMap )CIDSystemInfo ()CIDSystemInfo {return cmap ._gad };func _dge (_eebe string )string {_caga :=[]rune (_eebe );_dcag :=make ([]string ,len (_caga ));for _geb ,_abg :=range _caga {_dcag [_geb ]=_g .Sprintf ("\u0025\u0030\u0034\u0078",_abg );
};return _g .Sprintf ("\u003c\u0025\u0073\u003e",_b .Join (_dcag ,""));};func (cmap *CMap )parseBfchar ()error {for {_gge ,_bga :=cmap .parseObject ();if _bga !=nil {if _bga ==_f .EOF {break ;};return _bga ;};var _gdbce CharCode ;switch _aac :=_gge .(type ){case cmapOperand :if _aac .Operand ==_gf {return nil ;
};return _ga .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");case cmapHexString :_gdbce =_afggf (_aac );default:return _ga .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065");
};_gge ,_bga =cmap .parseObject ();if _bga !=nil {if _bga ==_f .EOF {break ;};return _bga ;};var _gadc []rune ;switch _abb :=_gge .(type ){case cmapOperand :if _abb .Operand ==_gf {return nil ;};_eb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0055\u006e\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020o\u0070\u0065\u0072\u0061\u006e\u0064\u002e\u0020\u0025\u0023\u0076",_abb );
return ErrBadCMap ;case cmapHexString :_gadc =_cdbgd (_abb );case cmapName :_eb .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064 \u006e\u0061\u006de\u002e \u0025\u0023\u0076",_abb );_gadc =[]rune {MissingCodeRune };
default:_eb .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064 \u0074\u0079\u0070e\u002e \u0025\u0023\u0076",_gge );return ErrBadCMap ;};cmap ._gaa [_gdbce ]=string (_gadc );};return nil ;};func (cmap *CMap )inCodespace (_fce CharCode ,_gaaf int )bool {for _ ,_ccce :=range cmap ._db {if _ccce .Low <=_fce &&_fce <=_ccce .High &&_gaaf ==_ccce .NumBytes {return true ;
};};return false ;};const (_cdec ="\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f";_cece ="\u0062e\u0067\u0069\u006e\u0063\u006d\u0061p";_ebd ="\u0065n\u0064\u0063\u006d\u0061\u0070";_fdda ="\u0062\u0065\u0067\u0069nc\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0072\u0061\u006e\u0067\u0065";
_fbcg ="\u0065\u006e\u0064\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065r\u0061\u006e\u0067\u0065";_afe ="b\u0065\u0067\u0069\u006e\u0062\u0066\u0063\u0068\u0061\u0072";_gf ="\u0065n\u0064\u0062\u0066\u0063\u0068\u0061r";_add ="\u0062\u0065\u0067i\u006e\u0062\u0066\u0072\u0061\u006e\u0067\u0065";
_eed ="\u0065\u006e\u0064\u0062\u0066\u0072\u0061\u006e\u0067\u0065";_ggdb ="\u0062\u0065\u0067\u0069\u006e\u0063\u0069\u0064\u0072\u0061\u006e\u0067\u0065";_cgg ="e\u006e\u0064\u0063\u0069\u0064\u0072\u0061\u006e\u0067\u0065";_gbb ="\u0075s\u0065\u0063\u006d\u0061\u0070";
_fec ="\u0057\u004d\u006fd\u0065";_dcf ="\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065";_daba ="\u0043\u004d\u0061\u0070\u0054\u0079\u0070\u0065";_bff ="C\u004d\u0061\u0070\u0056\u0065\u0072\u0073\u0069\u006f\u006e";);func (cmap *CMap )Bytes ()[]byte {_eb .Log .Trace ("\u0063\u006d\u0061\u0070.B\u0079\u0074\u0065\u0073\u003a\u0020\u0063\u006d\u0061\u0070\u003d\u0025\u0073",cmap .String ());
if len (cmap ._agd )> 0{return cmap ._agd ;};cmap ._agd =[]byte (_b .Join ([]string {_fbf ,cmap .toBfData (),_dfgd },"\u000a"));return cmap ._agd ;};func _afggf (_ecc cmapHexString )CharCode {_abd :=CharCode (0);for _ ,_eaeb :=range _ecc ._gfe {_abd <<=8;
_abd |=CharCode (_eaeb );};return _abd ;};func (cmap *CMap )computeInverseMappings (){for _afd ,_ebf :=range cmap ._af {if _ab ,_fb :=cmap ._fd [_ebf ];!_fb ||(_fb &&_ab > _afd ){cmap ._fd [_ebf ]=_afd ;};};for _dab ,_bd :=range cmap ._gaa {if _ccf ,_eeb :=cmap ._ba [_bd ];
!_eeb ||(_eeb &&_ccf > _dab ){cmap ._ba [_bd ]=_dab ;};};_cc .Slice (cmap ._db ,func (_ggb ,_ade int )bool {return cmap ._db [_ggb ].Low < cmap ._db [_ade ].Low });};var (ErrBadCMap =_ga .New ("\u0062\u0061\u0064\u0020\u0063\u006d\u0061\u0070");ErrBadCMapComment =_ga .New ("c\u006f\u006d\u006d\u0065\u006e\u0074 \u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0073\u0074a\u0072\u0074\u0020w\u0069t\u0068\u0020\u0025");
ErrBadCMapDict =_ga .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074"););func (_aab *cMapParser )parseName ()(cmapName ,error ){_dcfb :="";_aff :=false ;for {_bac ,_bgd :=_aab ._ffgb .Peek (1);if _bgd ==_f .EOF {break ;};if _bgd !=nil {return cmapName {_dcfb },_bgd ;
};if !_aff {if _bac [0]=='/'{_aff =true ;_aab ._ffgb .ReadByte ();}else {_eb .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u004e\u0061\u006d\u0065\u0020\u0073\u0074a\u0072t\u0069n\u0067 \u0077\u0069\u0074\u0068\u0020\u0025\u0073\u0020\u0028\u0025\u0020\u0078\u0029",_bac ,_bac );
return cmapName {_dcfb },_g .Errorf ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006ea\u006d\u0065:\u0020\u0028\u0025\u0063\u0029",_bac [0]);};}else {if _cg .IsWhiteSpace (_bac [0]){break ;}else if (_bac [0]=='/')||(_bac [0]=='[')||(_bac [0]=='(')||(_bac [0]==']')||(_bac [0]=='<')||(_bac [0]=='>'){break ;
}else if _bac [0]=='#'{_fbb ,_gce :=_aab ._ffgb .Peek (3);if _gce !=nil {return cmapName {_dcfb },_gce ;};_aab ._ffgb .Discard (3);_facb ,_gce :=_ce .DecodeString (string (_fbb [1:3]));if _gce !=nil {return cmapName {_dcfb },_gce ;};_dcfb +=string (_facb );
}else {_bag ,_ :=_aab ._ffgb .ReadByte ();_dcfb +=string (_bag );};};};return cmapName {_dcfb },nil ;};func (cmap *CMap )CIDToCharcode (cid CharCode )(CharCode ,bool ){_dbf ,_bfa :=cmap ._fd [cid ];return _dbf ,_bfa ;};func LoadCmapFromData (data []byte ,isSimple bool )(*CMap ,error ){_eb .Log .Trace ("\u004c\u006fa\u0064\u0043\u006d\u0061\u0070\u0046\u0072\u006f\u006d\u0044\u0061\u0074\u0061\u003a\u0020\u0069\u0073\u0053\u0069\u006d\u0070\u006ce=\u0025\u0074",isSimple );
cmap :=_ca (isSimple );cmap .cMapParser =_ged (data );_dd :=cmap .parse ();if _dd !=nil {return nil ,_dd ;};if len (cmap ._db )==0{if cmap ._ffd !=""{return cmap ,nil ;};_eb .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u002e\u0020\u0063\u006d\u0061p=\u0025\u0073",cmap );
};cmap .computeInverseMappings ();return cmap ,nil ;};func _acge ()cmapDict {return cmapDict {Dict :map[string ]cmapObject {}}};func _ca (_ec bool )*CMap {_cbd :=16;if _ec {_cbd =8;};return &CMap {_dac :_cbd ,_af :make (map[CharCode ]CharCode ),_fd :make (map[CharCode ]CharCode ),_gaa :make (map[CharCode ]string ),_ba :make (map[string ]CharCode )};
};func (cmap *CMap )Name ()string {return cmap ._deb };func (_ded *cMapParser )parseOperand ()(cmapOperand ,error ){_dbgc :=cmapOperand {};_gabg :=_de .Buffer {};for {_cdgb ,_cced :=_ded ._ffgb .Peek (1);if _cced !=nil {if _cced ==_f .EOF {break ;};return _dbgc ,_cced ;
};if _cg .IsDelimiter (_cdgb [0]){break ;};if _cg .IsWhiteSpace (_cdgb [0]){break ;};_cae ,_ :=_ded ._ffgb .ReadByte ();_gabg .WriteByte (_cae );};if _gabg .Len ()==0{return _dbgc ,_g .Errorf ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064\u0020\u0028\u0065\u006d\u0070\u0074\u0079\u0029");
};_dbgc .Operand =_gabg .String ();return _dbgc ,nil ;};func (cmap *CMap )parseCIDRange ()error {for {_abea ,_bgb :=cmap .parseObject ();if _bgb !=nil {if _bgb ==_f .EOF {break ;};return _bgb ;};_caa ,_ffg :=_abea .(cmapHexString );if !_ffg {if _ccd ,_afgd :=_abea .(cmapOperand );
_afgd {if _ccd .Operand ==_cgg {return nil ;};return _ga .New ("\u0063\u0069\u0064\u0020\u0069\u006e\u0074\u0065\u0072\u0076\u0061\u006c\u0020s\u0074\u0061\u0072\u0074\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0068\u0065\u0078\u0020\u0073t\u0072\u0069\u006e\u0067");
};};_gbe :=_afggf (_caa );_abea ,_bgb =cmap .parseObject ();if _bgb !=nil {if _bgb ==_f .EOF {break ;};return _bgb ;};_fdee ,_ffg :=_abea .(cmapHexString );if !_ffg {return _ga .New ("\u0063\u0069d\u0020\u0069\u006e\u0074e\u0072\u0076a\u006c\u0020\u0065\u006e\u0064\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0068\u0065\u0078\u0020\u0073t\u0072\u0069\u006e\u0067");
};if len (_caa ._gfe )!=len (_fdee ._gfe ){return _ga .New ("\u0075\u006e\u0065\u0071\u0075\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0062\u0079\u0074\u0065\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065");};_bafc :=_afggf (_fdee );
if _gbe > _bafc {_eb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0043\u0049\u0044\u0020\u0072\u0061\u006e\u0067\u0065\u002e\u0020\u0073t\u0061\u0072\u0074\u003d\u0030\u0078\u0025\u0030\u0032\u0078\u0020\u0065\u006e\u0064=\u0030x\u0025\u0030\u0032\u0078",_gbe ,_bafc );
return ErrBadCMap ;};_abea ,_bgb =cmap .parseObject ();if _bgb !=nil {if _bgb ==_f .EOF {break ;};return _bgb ;};_dged ,_ffg :=_abea .(cmapInt );if !_ffg {return _ga .New ("\u0063\u0069\u0064\u0020\u0073t\u0061\u0072\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u006e\u0020\u0064\u0065\u0063\u0069\u006d\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};if _dged ._eddb < 0{return _ga .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u0063\u0069\u0064\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0076\u0061\u006c\u0075\u0065");};_ac :=_dged ._eddb ;for _acb :=_gbe ;_acb <=_bafc ;_acb ++{cmap ._af [_acb ]=CharCode (_ac );
_ac ++;};_eb .Log .Trace ("C\u0049\u0044\u0020\u0072\u0061\u006eg\u0065\u003a\u0020\u003c\u0030\u0078\u0025\u0058\u003e \u003c\u0030\u0078%\u0058>\u0020\u0025\u0064",_gbe ,_bafc ,_dged ._eddb );};return nil ;};func (cmap *CMap )parseCodespaceRange ()error {for {_feg ,_gcd :=cmap .parseObject ();
if _gcd !=nil {if _gcd ==_f .EOF {break ;};return _gcd ;};_dfcd ,_egbc :=_feg .(cmapHexString );if !_egbc {if _gcb ,_bce :=_feg .(cmapOperand );_bce {if _gcb .Operand ==_fbcg {return nil ;};return _ga .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");
};};_feg ,_gcd =cmap .parseObject ();if _gcd !=nil {if _gcd ==_f .EOF {break ;};return _gcd ;};_cfg ,_egbc :=_feg .(cmapHexString );if !_egbc {return _ga .New ("\u006e\u006f\u006e-\u0068\u0065\u0078\u0020\u0068\u0069\u0067\u0068");};if len (_dfcd ._gfe )!=len (_cfg ._gfe ){return _ga .New ("\u0075\u006e\u0065\u0071\u0075\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0062\u0079\u0074\u0065\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065");
};_cdad :=_afggf (_dfcd );_dcbd :=_afggf (_cfg );if _dcbd < _cdad {_eb .Log .Debug ("\u0045R\u0052\u004fR\u003a\u0020\u0042\u0061d\u0020\u0063\u006fd\u0065\u0073\u0070\u0061\u0063\u0065\u002e\u0020\u006cow\u003d\u0030\u0078%\u0030\u0032x\u0020\u0068\u0069\u0067\u0068\u003d0\u0078\u00250\u0032\u0078",_cdad ,_dcbd );
return ErrBadCMap ;};_bdgf :=_cfg ._ace ;_cfa :=Codespace {NumBytes :_bdgf ,Low :_cdad ,High :_dcbd };cmap ._db =append (cmap ._db ,_cfa );_eb .Log .Trace ("\u0043\u006f\u0064e\u0073\u0070\u0061\u0063e\u0020\u006c\u006f\u0077\u003a\u0020\u0030x\u0025\u0058\u002c\u0020\u0068\u0069\u0067\u0068\u003a\u0020\u0030\u0078\u0025\u0058",_cdad ,_dcbd );
};if len (cmap ._db )==0{_eb .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u0020\u0069\u006e\u0020\u0063ma\u0070\u002e");return ErrBadCMap ;};return nil ;};type cmapDict struct{Dict map[string ]cmapObject ;
};const (_a =4;MissingCodeRune ='\ufffd';MissingCodeString =string (MissingCodeRune ););func (cmap *CMap )parseVersion ()error {_ceb :="";_aae :=false ;for _ed :=0;_ed < 3&&!_aae ;_ed ++{_baf ,_bef :=cmap .parseObject ();if _bef !=nil {return _bef ;};switch _dfd :=_baf .(type ){case cmapOperand :switch _dfd .Operand {case "\u0064\u0065\u0066":_aae =true ;
default:_eb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0070\u0061\u0072\u0073\u0065\u0056e\u0072\u0073\u0069\u006f\u006e\u003a \u0073\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020o\u003d\u0025\u0023\u0076",_baf );
return ErrBadCMap ;};case cmapInt :_ceb =_g .Sprintf ("\u0025\u0064",_dfd ._eddb );case cmapFloat :_ceb =_g .Sprintf ("\u0025\u0066",_dfd ._bbd );case cmapString :_ceb =_dfd .String ;default:_eb .Log .Debug ("\u0045\u0052RO\u0052\u003a\u0020p\u0061\u0072\u0073\u0065Ver\u0073io\u006e\u003a\u0020\u0042\u0061\u0064\u0020ty\u0070\u0065\u002e\u0020\u006f\u003d\u0025#\u0076",_baf );
};};cmap ._ag =_ceb ;return nil ;};func LoadPredefinedCMap (name string )(*CMap ,error ){cmap ,_cee :=_dbc (name );if _cee !=nil {return nil ,_cee ;};if cmap ._ffd ==""{cmap .computeInverseMappings ();return cmap ,nil ;};_fde ,_cee :=_dbc (cmap ._ffd );
if _cee !=nil {return nil ,_cee ;};for _cag ,_dbe :=range _fde ._af {if _ ,_gg :=cmap ._af [_cag ];!_gg {cmap ._af [_cag ]=_dbe ;};};cmap ._db =append (cmap ._db ,_fde ._db ...);cmap .computeInverseMappings ();return cmap ,nil ;};func (_caf *cMapParser )parseString ()(cmapString ,error ){_caf ._ffgb .ReadByte ();
_fgg :=_de .Buffer {};_ece :=1;for {_fgb ,_fab :=_caf ._ffgb .Peek (1);if _fab !=nil {return cmapString {_fgg .String ()},_fab ;};if _fgb [0]=='\\'{_caf ._ffgb .ReadByte ();_fgbd ,_beea :=_caf ._ffgb .ReadByte ();if _beea !=nil {return cmapString {_fgg .String ()},_beea ;
};if _cg .IsOctalDigit (_fgbd ){_gecb ,_eafb :=_caf ._ffgb .Peek (2);if _eafb !=nil {return cmapString {_fgg .String ()},_eafb ;};var _dbb []byte ;_dbb =append (_dbb ,_fgbd );for _ ,_egdb :=range _gecb {if _cg .IsOctalDigit (_egdb ){_dbb =append (_dbb ,_egdb );
}else {break ;};};_caf ._ffgb .Discard (len (_dbb )-1);_eb .Log .Trace ("\u004e\u0075\u006d\u0065ri\u0063\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0022\u0025\u0073\u0022",_dbb );_aad ,_eafb :=_d .ParseUint (string (_dbb ),8,32);if _eafb !=nil {return cmapString {_fgg .String ()},_eafb ;
};_fgg .WriteByte (byte (_aad ));continue ;};switch _fgbd {case 'n':_fgg .WriteByte ('\n');case 'r':_fgg .WriteByte ('\r');case 't':_fgg .WriteByte ('\t');case 'b':_fgg .WriteByte ('\b');case 'f':_fgg .WriteByte ('\f');case '(':_fgg .WriteByte ('(');case ')':_fgg .WriteByte (')');
case '\\':_fgg .WriteByte ('\\');};continue ;}else if _fgb [0]=='('{_ece ++;}else if _fgb [0]==')'{_ece --;if _ece ==0{_caf ._ffgb .ReadByte ();break ;};};_bfcf ,_ :=_caf ._ffgb .ReadByte ();_fgg .WriteByte (_bfcf );};return cmapString {_fgg .String ()},nil ;
};func (_dcba *cMapParser )parseHexString ()(cmapHexString ,error ){_dcba ._ffgb .ReadByte ();_acc :=[]byte ("\u0030\u0031\u0032\u003345\u0036\u0037\u0038\u0039\u0061\u0062\u0063\u0064\u0065\u0066\u0041\u0042\u0043\u0044E\u0046");_ffgf :=_de .Buffer {};
for {_dcba .skipSpaces ();_cdbg ,_cdge :=_dcba ._ffgb .Peek (1);if _cdge !=nil {return cmapHexString {},_cdge ;};if _cdbg [0]=='>'{_dcba ._ffgb .ReadByte ();break ;};_fad ,_ :=_dcba ._ffgb .ReadByte ();if _de .IndexByte (_acc ,_fad )>=0{_ffgf .WriteByte (_fad );
};};if _ffgf .Len ()%2==1{_eb .Log .Debug ("\u0070\u0061rs\u0065\u0048\u0065x\u0053\u0074\u0072\u0069ng:\u0020ap\u0070\u0065\u006e\u0064\u0069\u006e\u0067 '\u0030\u0027\u0020\u0074\u006f\u0020\u0025#\u0071",_ffgf .String ());_ffgf .WriteByte ('0');};_cfgbc :=_ffgf .Len ()/2;
_degd ,_ :=_ce .DecodeString (_ffgf .String ());return cmapHexString {_ace :_cfgbc ,_gfe :_degd },nil ;};type integer struct{_gcf bool ;_dfbg int ;};type cmapOperand struct{Operand string ;};func (cmap *CMap )CharcodeBytesToUnicode (data []byte )(string ,int ){_dcb ,_cfd :=cmap .BytesToCharcodes (data );
if !_cfd {_eb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0043\u0068\u0061\u0072\u0063\u006f\u0064\u0065\u0042\u0079\u0074\u0065s\u0054\u006f\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u002e\u0020\u004e\u006f\u0074\u0020\u0069n\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u002e\u0020\u0064\u0061\u0074\u0061\u003d\u005b\u0025\u0020\u0030\u0032\u0078]\u0020\u0063\u006d\u0061\u0070=\u0025\u0073",data ,cmap );
return "",0;};_eee :=make ([]string ,len (_dcb ));var _fdd []CharCode ;for _gdbc ,_ddc :=range _dcb {_cgc ,_aa :=cmap ._gaa [_ddc ];if !_aa {_fdd =append (_fdd ,_ddc );_cgc =MissingCodeString ;};_eee [_gdbc ]=_cgc ;};_bgg :=_b .Join (_eee ,"");if len (_fdd )> 0{_eb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020C\u0068\u0061\u0072c\u006f\u0064\u0065\u0042y\u0074\u0065\u0073\u0054\u006f\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u002e\u0020\u004e\u006f\u0074\u0020\u0069\u006e\u0020\u006d\u0061\u0070\u002e\u000a"+"\u0009d\u0061t\u0061\u003d\u005b\u0025\u00200\u0032\u0078]\u003d\u0025\u0023\u0071\u000a"+"\u0009\u0063h\u0061\u0072\u0063o\u0064\u0065\u0073\u003d\u0025\u0030\u0032\u0078\u000a"+"\u0009\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u003d\u0025\u0064\u0020%\u0030\u0032\u0078\u000a"+"\u0009\u0075\u006e\u0069\u0063\u006f\u0064\u0065\u003d`\u0025\u0073\u0060\u000a"+"\u0009\u0063\u006d\u0061\u0070\u003d\u0025\u0073",data ,string (data ),_dcb ,len (_fdd ),_fdd ,_bgg ,cmap );
};return _bgg ,len (_fdd );};type cmapFloat struct{_bbd float64 };func (_cdf *cMapParser )parseObject ()(cmapObject ,error ){_cdf .skipSpaces ();for {_fae ,_fdad :=_cdf ._ffgb .Peek (2);if _fdad !=nil {return nil ,_fdad ;};if _fae [0]=='%'{_cdf .parseComment ();
_cdf .skipSpaces ();continue ;}else if _fae [0]=='/'{_edd ,_aca :=_cdf .parseName ();return _edd ,_aca ;}else if _fae [0]=='('{_aed ,_edc :=_cdf .parseString ();return _aed ,_edc ;}else if _fae [0]=='['{_cfgb ,_effa :=_cdf .parseArray ();return _cfgb ,_effa ;
}else if (_fae [0]=='<')&&(_fae [1]=='<'){_gcdc ,_gcg :=_cdf .parseDict ();return _gcdc ,_gcg ;}else if _fae [0]=='<'{_bdbg ,_ffb :=_cdf .parseHexString ();return _bdbg ,_ffb ;}else if _cg .IsDecimalDigit (_fae [0])||(_fae [0]=='-'&&_cg .IsDecimalDigit (_fae [1])){_acaf ,_eage :=_cdf .parseNumber ();
if _eage !=nil {return nil ,_eage ;};return _acaf ,nil ;}else {_cecc ,_ddd :=_cdf .parseOperand ();if _ddd !=nil {return nil ,_ddd ;};return _cecc ,nil ;};};};func _bdd (_caed cmapHexString )rune {_fgdfb :=_cdbgd (_caed );if _adcf :=len (_fgdfb );_adcf ==0{_eb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0068\u0065\u0078\u0054o\u0052\u0075\u006e\u0065\u002e\u0020\u0045\u0078p\u0065c\u0074\u0065\u0064\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0072u\u006e\u0065\u0020\u0073\u0068\u0065\u0078\u003d\u0025\u0023\u0076",_caed );
return MissingCodeRune ;};if len (_fgdfb )> 1{_eb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0068\u0065\u0078\u0054\u006f\u0052\u0075\u006e\u0065\u002e\u0020\u0045\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0065\u0078\u0061\u0063\u0074\u006c\u0079\u0020\u006f\u006e\u0065\u0020\u0072\u0075\u006e\u0065\u0020\u0073\u0068\u0065\u0078\u003d\u0025\u0023v\u0020\u002d\u003e\u0020\u0025#\u0076",_caed ,_fgdfb );
};return _fgdfb [0];};type Codespace struct{NumBytes int ;Low CharCode ;High CharCode ;};func (cmap *CMap )Type ()int {return cmap ._ee };func (cmap *CMap )parseSystemInfo ()error {_ebfb :=false ;_fa :=false ;_daf :="";_abge :=false ;_bfcb :=CIDSystemInfo {};
for _cda :=0;_cda < 50&&!_abge ;_cda ++{_dea ,_bfg :=cmap .parseObject ();if _bfg !=nil {return _bfg ;};switch _ada :=_dea .(type ){case cmapDict :_cde :=_ada .Dict ;_dbaf ,_dff :=_cde ["\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079"];if !_dff {_eb .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");
return ErrBadCMap ;};_ecg ,_dff :=_dbaf .(cmapString );if !_dff {_eb .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_bfcb .Registry =_ecg .String ;
_dbaf ,_dff =_cde ["\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067"];if !_dff {_eb .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_ecg ,_dff =_dbaf .(cmapString );
if !_dff {_eb .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_bfcb .Ordering =_ecg .String ;_bgfg ,_dff :=_cde ["\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074"];
if !_dff {_eb .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_dcaga ,_dff :=_bgfg .(cmapInt );if !_dff {_eb .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");
return ErrBadCMap ;};_bfcb .Supplement =int (_dcaga ._eddb );_abge =true ;case cmapOperand :switch _ada .Operand {case "\u0062\u0065\u0067i\u006e":_ebfb =true ;case "\u0065\u006e\u0064":_abge =true ;case "\u0064\u0065\u0066":_fa =false ;};case cmapName :if _ebfb {_daf =_ada .Name ;
_fa =true ;};case cmapString :if _fa {switch _daf {case "\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079":_bfcb .Registry =_ada .String ;case "\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067":_bfcb .Ordering =_ada .String ;};};case cmapInt :if _fa {switch _daf {case "\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074":_bfcb .Supplement =int (_ada ._eddb );
};};};};if !_abge {_eb .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0050\u0061\u0072\u0073\u0065\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006e\u0066\u006f\u0020\u0064\u0069\u0063\u0074\u0020\u0069\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u006c\u0079");
return ErrBadCMap ;};cmap ._gad =_bfcb ;return nil ;};func (cmap *CMap )toBfData ()string {if len (cmap ._gaa )==0{return "";};_dcg :=make ([]CharCode ,0,len (cmap ._gaa ));for _fcf :=range cmap ._gaa {_dcg =append (_dcg ,_fcf );};_cc .Slice (_dcg ,func (_adg ,_dec int )bool {return _dcg [_adg ]< _dcg [_dec ]});
var _dded []charRange ;_bdg :=charRange {_dcg [0],_dcg [0]};_eaaa :=cmap ._gaa [_dcg [0]];for _ ,_fgf :=range _dcg [1:]{_agb :=cmap ._gaa [_fgf ];if _fgf ==_bdg ._cf +1&&_ae (_agb )==_ae (_eaaa )+1{_bdg ._cf =_fgf ;}else {_dded =append (_dded ,_bdg );_bdg ._ff ,_bdg ._cf =_fgf ,_fgf ;
};_eaaa =_agb ;};_dded =append (_dded ,_bdg );var _geg []CharCode ;var _ceca []fbRange ;for _ ,_eec :=range _dded {if _eec ._ff ==_eec ._cf {_geg =append (_geg ,_eec ._ff );}else {_ceca =append (_ceca ,fbRange {_gd :_eec ._ff ,_cdc :_eec ._cf ,_cce :cmap ._gaa [_eec ._ff ]});
};};_eb .Log .Trace ("\u0063\u0068ar\u0052\u0061\u006eg\u0065\u0073\u003d\u0025d f\u0062Ch\u0061\u0072\u0073\u003d\u0025\u0064\u0020fb\u0052\u0061\u006e\u0067\u0065\u0073\u003d%\u0064",len (_dded ),len (_geg ),len (_ceca ));var _dcbe []string ;if len (_geg )> 0{_dee :=(len (_geg )+_bcf -1)/_bcf ;
for _ceea :=0;_ceea < _dee ;_ceea ++{_ccec :=_fdb (len (_geg )-_ceea *_bcf ,_bcf );_dcbe =append (_dcbe ,_g .Sprintf ("\u0025\u0064\u0020\u0062\u0065\u0067\u0069\u006e\u0062f\u0063\u0068\u0061\u0072",_ccec ));for _dfg :=0;_dfg < _ccec ;_dfg ++{_ggf :=_geg [_ceea *_bcf +_dfg ];
_gdg :=cmap ._gaa [_ggf ];_dcbe =append (_dcbe ,_g .Sprintf ("\u003c%\u0030\u0034\u0078\u003e\u0020\u0025s",_ggf ,_dge (_gdg )));};_dcbe =append (_dcbe ,"\u0065n\u0064\u0062\u0066\u0063\u0068\u0061r");};};if len (_ceca )> 0{_bee :=(len (_ceca )+_bcf -1)/_bcf ;
for _cef :=0;_cef < _bee ;_cef ++{_gbg :=_fdb (len (_ceca )-_cef *_bcf ,_bcf );_dcbe =append (_dcbe ,_g .Sprintf ("\u0025d\u0020b\u0065\u0067\u0069\u006e\u0062\u0066\u0072\u0061\u006e\u0067\u0065",_gbg ));for _bgf :=0;_bgf < _gbg ;_bgf ++{_abe :=_ceca [_cef *_bcf +_bgf ];
_dcbe =append (_dcbe ,_g .Sprintf ("\u003c%\u00304\u0078\u003e\u003c\u0025\u0030\u0034\u0078\u003e\u0020\u0025\u0073",_abe ._gd ,_abe ._cdc ,_dge (_abe ._cce )));};_dcbe =append (_dcbe ,"\u0065\u006e\u0064\u0062\u0066\u0072\u0061\u006e\u0067\u0065");};
};return _b .Join (_dcbe ,"\u000a");};type charRange struct{_ff CharCode ;_cf CharCode ;};func (_fg *CIDSystemInfo )String ()string {return _g .Sprintf ("\u0025\u0073\u002d\u0025\u0073\u002d\u0025\u0030\u0033\u0064",_fg .Registry ,_fg .Ordering ,_fg .Supplement );
};type cmapArray struct{Array []cmapObject ;};type cmapInt struct{_eddb int64 };type cmapString struct{String string ;};type cmapName struct{Name string ;};