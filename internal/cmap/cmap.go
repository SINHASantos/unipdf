//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package cmap ;import (_a "bufio";_g "bytes";_fb "encoding/hex";_ce "errors";_f "fmt";_gc "github.com/unidoc/unipdf/v3/common";_gf "github.com/unidoc/unipdf/v3/core";_e "github.com/unidoc/unipdf/v3/internal/cmap/bcmaps";_cc "io";_fbb "sort";_fe "strconv";
_gd "strings";_c "unicode/utf16";);type cmapName struct{Name string ;};type cmapDict struct{Dict map[string ]cmapObject ;};func IsPredefinedCMap (name string )bool {return _e .AssetExists (name )};type cmapInt struct{_dgb int64 };type cmapObject interface{};
func (cmap *CMap )parseType ()error {_cgc :=0;_fbbe :=false ;for _aab :=0;_aab < 3&&!_fbbe ;_aab ++{_gbd ,_ddeb :=cmap .parseObject ();if _ddeb !=nil {return _ddeb ;};switch _egcc :=_gbd .(type ){case cmapOperand :switch _egcc .Operand {case "\u0064\u0065\u0066":_fbbe =true ;
default:_gc .Log .Error ("\u0070\u0061r\u0073\u0065\u0054\u0079\u0070\u0065\u003a\u0020\u0073\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020\u006f=%\u0023\u0076",_gbd );return ErrBadCMap ;};case cmapInt :_cgc =int (_egcc ._dgb );
};};cmap ._ee =_cgc ;return nil ;};func NewToUnicodeCMap (codeToRune map[CharCode ]rune )*CMap {_ccf :=make (map[CharCode ]string ,len (codeToRune ));for _cdf ,_gg :=range codeToRune {_ccf [_cdf ]=string (_gg );};cmap :=&CMap {_age :"\u0041d\u006fb\u0065\u002d\u0049\u0064\u0065n\u0074\u0069t\u0079\u002d\u0055\u0043\u0053",_ee :2,_ff :16,_gb :CIDSystemInfo {Registry :"\u0041\u0064\u006fb\u0065",Ordering :"\u0055\u0043\u0053",Supplement :0},_feb :[]Codespace {{Low :0,High :0xffff}},_ed :_ccf ,_dc :make (map[string ]CharCode ,len (codeToRune )),_cd :make (map[CharCode ]CharCode ,len (codeToRune )),_bc :make (map[CharCode ]CharCode ,len (codeToRune ))};
cmap .computeInverseMappings ();return cmap ;};func (cmap *CMap )matchCode (_bgg []byte )(_ebcee CharCode ,_fcd int ,_egfe bool ){for _dee :=0;_dee < _gcd ;_dee ++{if _dee < len (_bgg ){_ebcee =_ebcee <<8|CharCode (_bgg [_dee ]);_fcd ++;};_egfe =cmap .inCodespace (_ebcee ,_dee +1);
if _egfe {return _ebcee ,_fcd ,true ;};};_gc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063o\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0020m\u0061t\u0063\u0068\u0065\u0073\u0020\u0062\u0079\u0074\u0065\u0073\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d=\u0025\u0023\u0071\u0020\u0063\u006d\u0061\u0070\u003d\u0025\u0073",_bgg ,string (_bgg ),cmap );
return 0,0,false ;};func (cmap *CMap )Stream ()(*_gf .PdfObjectStream ,error ){if cmap ._gef !=nil {return cmap ._gef ,nil ;};_egf ,_gbg :=_gf .MakeStream (cmap .Bytes (),_gf .NewFlateEncoder ());if _gbg !=nil {return nil ,_gbg ;};cmap ._gef =_egf ;return cmap ._gef ,nil ;
};func (cmap *CMap )Type ()int {return cmap ._ee };func (cmap *CMap )Name ()string {return cmap ._age };func (cmap *CMap )parseBfchar ()error {for {_aac ,_fcc :=cmap .parseObject ();if _fcc !=nil {if _fcc ==_cc .EOF {break ;};return _fcc ;};var _afg CharCode ;
switch _eddf :=_aac .(type ){case cmapOperand :if _eddf .Operand ==_cagb {return nil ;};return _ce .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");case cmapHexString :_afg =_ebdf (_eddf );default:return _ce .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065");
};_aac ,_fcc =cmap .parseObject ();if _fcc !=nil {if _fcc ==_cc .EOF {break ;};return _fcc ;};var _bba []rune ;switch _gba :=_aac .(type ){case cmapOperand :if _gba .Operand ==_cagb {return nil ;};_gc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0055\u006e\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020o\u0070\u0065\u0072\u0061\u006e\u0064\u002e\u0020\u0025\u0023\u0076",_gba );
return ErrBadCMap ;case cmapHexString :_bba =_cbea (_gba );case cmapName :_gc .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064 \u006e\u0061\u006de\u002e \u0025\u0023\u0076",_gba );_bba =[]rune {MissingCodeRune };
default:_gc .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064 \u0074\u0079\u0070e\u002e \u0025\u0023\u0076",_aac );return ErrBadCMap ;};cmap ._ed [_afg ]=string (_bba );};return nil ;};type CIDSystemInfo struct{Registry string ;
Ordering string ;Supplement int ;};func (cmap *CMap )parseBfrange ()error {for {var _cdbd CharCode ;_gcf ,_egca :=cmap .parseObject ();if _egca !=nil {if _egca ==_cc .EOF {break ;};return _egca ;};switch _acc :=_gcf .(type ){case cmapOperand :if _acc .Operand ==_aea {return nil ;
};return _ce .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");case cmapHexString :_cdbd =_ebdf (_acc );default:return _ce .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065");
};var _egb CharCode ;_gcf ,_egca =cmap .parseObject ();if _egca !=nil {if _egca ==_cc .EOF {break ;};return _egca ;};switch _efb :=_gcf .(type ){case cmapOperand :_gc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0049\u006e\u0063\u006f\u006d\u0070\u006c\u0065\u0074\u0065\u0020\u0062\u0066r\u0061\u006e\u0067\u0065\u0020\u0074\u0072i\u0070\u006c\u0065\u0074");
return ErrBadCMap ;case cmapHexString :_egb =_ebdf (_efb );if _egb > 0xffff{_egb =0xffff;};default:_gc .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0055\u006e\u0065\u0078\u0070e\u0063t\u0065d\u0020\u0074\u0079\u0070\u0065\u0020\u0025T",_gcf );return ErrBadCMap ;
};_gcf ,_egca =cmap .parseObject ();if _egca !=nil {if _egca ==_cc .EOF {break ;};return _egca ;};switch _gbdb :=_gcf .(type ){case cmapArray :if len (_gbdb .Array )!=int (_egb -_cdbd )+1{_gc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u006f\u0066\u0020\u0069\u0074\u0065\u006d\u0073\u0020\u0069\u006e\u0020a\u0072\u0072\u0061\u0079");
return ErrBadCMap ;};for _dbdd :=_cdbd ;_dbdd <=_egb ;_dbdd ++{_gfd :=_gbdb .Array [_dbdd -_cdbd ];_cae ,_eed :=_gfd .(cmapHexString );if !_eed {return _ce .New ("\u006e\u006f\u006e-h\u0065\u0078\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0069\u006e\u0020\u0061\u0072\u0072\u0061\u0079");
};_ffb :=_cbea (_cae );cmap ._ed [_dbdd ]=string (_ffb );};case cmapHexString :_bda :=_cbea (_gbdb );_eecd :=len (_bda );for _cfd :=_cdbd ;_cfd <=_egb ;_cfd ++{cmap ._ed [_cfd ]=string (_bda );if _eecd > 0{_bda [_eecd -1]++;}else {_gc .Log .Debug ("\u004e\u006f\u0020c\u006d\u0061\u0070\u0020\u0074\u0061\u0072\u0067\u0065\u0074\u0020\u0063\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0066\u006f\u0072\u0020\u0025\u0023\u0076",_cfd );
};if _cfd ==1<<32-1{break ;};};default:_gc .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0055\u006e\u0065\u0078\u0070e\u0063t\u0065d\u0020\u0074\u0079\u0070\u0065\u0020\u0025T",_gcf );return ErrBadCMap ;};};return nil ;};type cmapHexString struct{_afa int ;
_gcde []byte ;};func _ggb (_cbbg cmapHexString )rune {_egcaa :=_cbea (_cbbg );if _bggb :=len (_egcaa );_bggb ==0{_gc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0068\u0065\u0078\u0054o\u0052\u0075\u006e\u0065\u002e\u0020\u0045\u0078p\u0065c\u0074\u0065\u0064\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0072u\u006e\u0065\u0020\u0073\u0068\u0065\u0078\u003d\u0025\u0023\u0076",_cbbg );
return MissingCodeRune ;};if len (_egcaa )> 1{_gc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0068\u0065\u0078\u0054\u006f\u0052\u0075\u006e\u0065\u002e\u0020\u0045\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0065\u0078\u0061\u0063\u0074\u006c\u0079\u0020\u006f\u006e\u0065\u0020\u0072\u0075\u006e\u0065\u0020\u0073\u0068\u0065\u0078\u003d\u0025\u0023v\u0020\u002d\u003e\u0020\u0025#\u0076",_cbbg ,_egcaa );
};return _egcaa [0];};func (cmap *CMap )parseVersion ()error {_caf :="";_ebda :=false ;for _fdab :=0;_fdab < 3&&!_ebda ;_fdab ++{_ebdd ,_cgge :=cmap .parseObject ();if _cgge !=nil {return _cgge ;};switch _def :=_ebdd .(type ){case cmapOperand :switch _def .Operand {case "\u0064\u0065\u0066":_ebda =true ;
default:_gc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0070\u0061\u0072\u0073\u0065\u0056e\u0072\u0073\u0069\u006f\u006e\u003a \u0073\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020o\u003d\u0025\u0023\u0076",_ebdd );
return ErrBadCMap ;};case cmapInt :_caf =_f .Sprintf ("\u0025\u0064",_def ._dgb );case cmapFloat :_caf =_f .Sprintf ("\u0025\u0066",_def ._caga );case cmapString :_caf =_def .String ;default:_gc .Log .Debug ("\u0045\u0052RO\u0052\u003a\u0020p\u0061\u0072\u0073\u0065Ver\u0073io\u006e\u003a\u0020\u0042\u0061\u0064\u0020ty\u0070\u0065\u002e\u0020\u006f\u003d\u0025#\u0076",_ebdd );
};};cmap ._fda =_caf ;return nil ;};func (cmap *CMap )parseSystemInfo ()error {_bad :=false ;_dcgc :=false ;_aaf :="";_beg :=false ;_dbg :=CIDSystemInfo {};for _eec :=0;_eec < 50&&!_beg ;_eec ++{_bcg ,_agc :=cmap .parseObject ();if _agc !=nil {return _agc ;
};switch _ccca :=_bcg .(type ){case cmapDict :_ggc :=_ccca .Dict ;_bbg ,_fed :=_ggc ["\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079"];if !_fed {_gc .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");
return ErrBadCMap ;};_cdbf ,_fed :=_bbg .(cmapString );if !_fed {_gc .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_dbg .Registry =_cdbf .String ;
_bbg ,_fed =_ggc ["\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067"];if !_fed {_gc .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_cdbf ,_fed =_bbg .(cmapString );
if !_fed {_gc .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_dbg .Ordering =_cdbf .String ;_agf ,_fed :=_ggc ["\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074"];
if !_fed {_gc .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_gfa ,_fed :=_agf .(cmapInt );if !_fed {_gc .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");
return ErrBadCMap ;};_dbg .Supplement =int (_gfa ._dgb );_beg =true ;case cmapOperand :switch _ccca .Operand {case "\u0062\u0065\u0067i\u006e":_bad =true ;case "\u0065\u006e\u0064":_beg =true ;case "\u0064\u0065\u0066":_dcgc =false ;};case cmapName :if _bad {_aaf =_ccca .Name ;
_dcgc =true ;};case cmapString :if _dcgc {switch _aaf {case "\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079":_dbg .Registry =_ccca .String ;case "\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067":_dbg .Ordering =_ccca .String ;};};case cmapInt :if _dcgc {switch _aaf {case "\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074":_dbg .Supplement =int (_ccca ._dgb );
};};};};if !_beg {_gc .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0050\u0061\u0072\u0073\u0065\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006e\u0066\u006f\u0020\u0064\u0069\u0063\u0074\u0020\u0069\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u006c\u0079");
return ErrBadCMap ;};cmap ._gb =_dbg ;return nil ;};func LoadCmapFromDataCID (data []byte )(*CMap ,error ){return LoadCmapFromData (data ,false )};type CMap struct{*cMapParser ;_age string ;_ff int ;_ee int ;_fda string ;_fab string ;_gb CIDSystemInfo ;
_feb []Codespace ;_cd map[CharCode ]CharCode ;_bc map[CharCode ]CharCode ;_ed map[CharCode ]string ;_dc map[string ]CharCode ;_dd []byte ;_gef *_gf .PdfObjectStream ;_af integer ;};type fbRange struct{_ge CharCode ;_be CharCode ;_cb string ;};func _gfc (_aag string )string {_baa :=[]rune (_aag );
_bbd :=make ([]string ,len (_baa ));for _ecf ,_dcg :=range _baa {_bbd [_ecf ]=_f .Sprintf ("\u0025\u0030\u0034\u0078",_dcg );};return _f .Sprintf ("\u003c\u0025\u0073\u003e",_gd .Join (_bbd ,""));};func (cmap *CMap )StringToCID (s string )(CharCode ,bool ){_fcf ,_ceg :=cmap ._dc [s ];
return _fcf ,_ceg ;};const (_gcd =4;MissingCodeRune ='\ufffd';MissingCodeString =string (MissingCodeRune ););func (_cbe *cMapParser )parseComment ()(string ,error ){var _ddcb _g .Buffer ;_ ,_bge :=_cbe .skipSpaces ();if _bge !=nil {return _ddcb .String (),_bge ;
};_bea :=true ;for {_ecce ,_eddfe :=_cbe ._dad .Peek (1);if _eddfe !=nil {_gc .Log .Debug ("p\u0061r\u0073\u0065\u0043\u006f\u006d\u006d\u0065\u006et\u003a\u0020\u0065\u0072r=\u0025\u0076",_eddfe );return _ddcb .String (),_eddfe ;};if _bea &&_ecce [0]!='%'{return _ddcb .String (),ErrBadCMapComment ;
};_bea =false ;if (_ecce [0]!='\r')&&(_ecce [0]!='\n'){_dgc ,_ :=_cbe ._dad .ReadByte ();_ddcb .WriteByte (_dgc );}else {break ;};};return _ddcb .String (),nil ;};func (_bedb *cMapParser )parseString ()(cmapString ,error ){_bedb ._dad .ReadByte ();_efg :=_g .Buffer {};
_fcdf :=1;for {_badd ,_gcec :=_bedb ._dad .Peek (1);if _gcec !=nil {return cmapString {_efg .String ()},_gcec ;};if _badd [0]=='\\'{_bedb ._dad .ReadByte ();_abfd ,_dadd :=_bedb ._dad .ReadByte ();if _dadd !=nil {return cmapString {_efg .String ()},_dadd ;
};if _gf .IsOctalDigit (_abfd ){_cga ,_acb :=_bedb ._dad .Peek (2);if _acb !=nil {return cmapString {_efg .String ()},_acb ;};var _eaa []byte ;_eaa =append (_eaa ,_abfd );for _ ,_gaf :=range _cga {if _gf .IsOctalDigit (_gaf ){_eaa =append (_eaa ,_gaf );
}else {break ;};};_bedb ._dad .Discard (len (_eaa )-1);_gc .Log .Trace ("\u004e\u0075\u006d\u0065ri\u0063\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0022\u0025\u0073\u0022",_eaa );_fcbb ,_acb :=_fe .ParseUint (string (_eaa ),8,32);if _acb !=nil {return cmapString {_efg .String ()},_acb ;
};_efg .WriteByte (byte (_fcbb ));continue ;};switch _abfd {case 'n':_efg .WriteByte ('\n');case 'r':_efg .WriteByte ('\r');case 't':_efg .WriteByte ('\t');case 'b':_efg .WriteByte ('\b');case 'f':_efg .WriteByte ('\f');case '(':_efg .WriteByte ('(');case ')':_efg .WriteByte (')');
case '\\':_efg .WriteByte ('\\');};continue ;}else if _badd [0]=='('{_fcdf ++;}else if _badd [0]==')'{_fcdf --;if _fcdf ==0{_bedb ._dad .ReadByte ();break ;};};_ccd ,_ :=_bedb ._dad .ReadByte ();_efg .WriteByte (_ccd );};return cmapString {_efg .String ()},nil ;
};func _ffdg (_dfc string )rune {_eefe :=[]rune (_dfc );return _eefe [len (_eefe )-1]};func (cmap *CMap )CharcodeBytesToUnicode (data []byte )(string ,int ){_cef ,_cdb :=cmap .BytesToCharcodes (data );if !_cdb {_gc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0043\u0068\u0061\u0072\u0063\u006f\u0064\u0065\u0042\u0079\u0074\u0065s\u0054\u006f\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u002e\u0020\u004e\u006f\u0074\u0020\u0069n\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u002e\u0020\u0064\u0061\u0074\u0061\u003d\u005b\u0025\u0020\u0030\u0032\u0078]\u0020\u0063\u006d\u0061\u0070=\u0025\u0073",data ,cmap );
return "",0;};_ffg :=make ([]string ,len (_cef ));var _bcab []CharCode ;for _fcg ,_ec :=range _cef {_bdd ,_ab :=cmap ._ed [_ec ];if !_ab {_bcab =append (_bcab ,_ec );_bdd =MissingCodeString ;};_ffg [_fcg ]=_bdd ;};_abe :=_gd .Join (_ffg ,"");if len (_bcab )> 0{_gc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020C\u0068\u0061\u0072c\u006f\u0064\u0065\u0042y\u0074\u0065\u0073\u0054\u006f\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u002e\u0020\u004e\u006f\u0074\u0020\u0069\u006e\u0020\u006d\u0061\u0070\u002e\u000a"+"\u0009d\u0061t\u0061\u003d\u005b\u0025\u00200\u0032\u0078]\u003d\u0025\u0023\u0071\u000a"+"\u0009\u0063h\u0061\u0072\u0063o\u0064\u0065\u0073\u003d\u0025\u0030\u0032\u0078\u000a"+"\u0009\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u003d\u0025\u0064\u0020%\u0030\u0032\u0078\u000a"+"\u0009\u0075\u006e\u0069\u0063\u006f\u0064\u0065\u003d`\u0025\u0073\u0060\u000a"+"\u0009\u0063\u006d\u0061\u0070\u003d\u0025\u0073",data ,string (data ),_cef ,len (_bcab ),_bcab ,_abe ,cmap );
};return _abe ,len (_bcab );};func (cmap *CMap )parseName ()error {_gad :="";_bab :=false ;for _gdab :=0;_gdab < 20&&!_bab ;_gdab ++{_efd ,_gdbe :=cmap .parseObject ();if _gdbe !=nil {return _gdbe ;};switch _bdc :=_efd .(type ){case cmapOperand :switch _bdc .Operand {case "\u0064\u0065\u0066":_bab =true ;
default:_gc .Log .Debug ("\u0070\u0061\u0072\u0073\u0065\u004e\u0061\u006d\u0065\u003a\u0020\u0053\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020o\u003d\u0025\u0023\u0076\u0020n\u0061\u006de\u003d\u0025\u0023\u0071",_efd ,_gad );
if _gad !=""{_gad =_f .Sprintf ("\u0025\u0073\u0020%\u0073",_gad ,_bdc .Operand );};_gc .Log .Debug ("\u0070\u0061\u0072\u0073\u0065\u004e\u0061\u006d\u0065\u003a \u0052\u0065\u0063\u006f\u0076\u0065\u0072e\u0064\u002e\u0020\u006e\u0061\u006d\u0065\u003d\u0025\u0023\u0071",_gad );
};case cmapName :_gad =_bdc .Name ;};};if !_bab {_gc .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0070\u0061\u0072\u0073\u0065N\u0061m\u0065:\u0020\u004e\u006f\u0020\u0064\u0065\u0066 ");return ErrBadCMap ;};cmap ._age =_gad ;return nil ;};type CharCode uint32 ;
func (cmap *CMap )toBfData ()string {if len (cmap ._ed )==0{return "";};_bac :=make ([]CharCode ,0,len (cmap ._ed ));for _ddc :=range cmap ._ed {_bac =append (_bac ,_ddc );};_fbb .Slice (_bac ,func (_aa ,_aee int )bool {return _bac [_aa ]< _bac [_aee ]});
var _ebd []charRange ;_cfe :=charRange {_bac [0],_bac [0]};_febe :=cmap ._ed [_bac [0]];for _ ,_edd :=range _bac [1:]{_cag :=cmap ._ed [_edd ];if _edd ==_cfe ._d +1&&_ffdg (_cag )==_ffdg (_febe )+1{_cfe ._d =_edd ;}else {_ebd =append (_ebd ,_cfe );_cfe ._fc ,_cfe ._d =_edd ,_edd ;
};_febe =_cag ;};_ebd =append (_ebd ,_cfe );var _cffd []CharCode ;var _ddea []fbRange ;for _ ,_dec :=range _ebd {if _dec ._fc ==_dec ._d {_cffd =append (_cffd ,_dec ._fc );}else {_ddea =append (_ddea ,fbRange {_ge :_dec ._fc ,_be :_dec ._d ,_cb :cmap ._ed [_dec ._fc ]});
};};_gc .Log .Trace ("\u0063\u0068ar\u0052\u0061\u006eg\u0065\u0073\u003d\u0025d f\u0062Ch\u0061\u0072\u0073\u003d\u0025\u0064\u0020fb\u0052\u0061\u006e\u0067\u0065\u0073\u003d%\u0064",len (_ebd ),len (_cffd ),len (_ddea ));var _eba []string ;if len (_cffd )> 0{_febc :=(len (_cffd )+_bdf -1)/_bdf ;
for _bb :=0;_bb < _febc ;_bb ++{_cge :=_eaea (len (_cffd )-_bb *_bdf ,_bdf );_eba =append (_eba ,_f .Sprintf ("\u0025\u0064\u0020\u0062\u0065\u0067\u0069\u006e\u0062f\u0063\u0068\u0061\u0072",_cge ));for _cdd :=0;_cdd < _cge ;_cdd ++{_eccc :=_cffd [_bb *_bdf +_cdd ];
_cbb :=cmap ._ed [_eccc ];_eba =append (_eba ,_f .Sprintf ("\u003c%\u0030\u0034\u0078\u003e\u0020\u0025s",_eccc ,_gfc (_cbb )));};_eba =append (_eba ,"\u0065n\u0064\u0062\u0066\u0063\u0068\u0061r");};};if len (_ddea )> 0{_daa :=(len (_ddea )+_bdf -1)/_bdf ;
for _ecccc :=0;_ecccc < _daa ;_ecccc ++{_fca :=_eaea (len (_ddea )-_ecccc *_bdf ,_bdf );_eba =append (_eba ,_f .Sprintf ("\u0025d\u0020b\u0065\u0067\u0069\u006e\u0062\u0066\u0072\u0061\u006e\u0067\u0065",_fca ));for _afe :=0;_afe < _fca ;_afe ++{_eef :=_ddea [_ecccc *_bdf +_afe ];
_eba =append (_eba ,_f .Sprintf ("\u003c%\u00304\u0078\u003e\u003c\u0025\u0030\u0034\u0078\u003e\u0020\u0025\u0073",_eef ._ge ,_eef ._be ,_gfc (_eef ._cb )));};_eba =append (_eba ,"\u0065\u006e\u0064\u0062\u0066\u0072\u0061\u006e\u0067\u0065");};};return _gd .Join (_eba ,"\u000a");
};func (cmap *CMap )CharcodeToUnicode (code CharCode )(string ,bool ){if _ccfc ,_cff :=cmap ._ed [code ];_cff {return _ccfc ,true ;};return MissingCodeString ,false ;};func _efc (_faba []byte )*cMapParser {_bed :=cMapParser {};_dged :=_g .NewBuffer (_faba );
_bed ._dad =_a .NewReader (_dged );return &_bed ;};type Codespace struct{NumBytes int ;Low CharCode ;High CharCode ;};type cmapOperand struct{Operand string ;};func (cmap *CMap )WMode ()(int ,bool ){return cmap ._af ._fdabb ,cmap ._af ._gec };func (cmap *CMap )parseCIDRange ()error {for {_egccg ,_dg :=cmap .parseObject ();
if _dg !=nil {if _dg ==_cc .EOF {break ;};return _dg ;};_bcaf ,_gede :=_egccg .(cmapHexString );if !_gede {if _ecfa ,_fgg :=_egccg .(cmapOperand );_fgg {if _ecfa .Operand ==_adbd {return nil ;};return _ce .New ("\u0063\u0069\u0064\u0020\u0069\u006e\u0074\u0065\u0072\u0076\u0061\u006c\u0020s\u0074\u0061\u0072\u0074\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0068\u0065\u0078\u0020\u0073t\u0072\u0069\u006e\u0067");
};};_egd :=_ebdf (_bcaf );_egccg ,_dg =cmap .parseObject ();if _dg !=nil {if _dg ==_cc .EOF {break ;};return _dg ;};_ccg ,_gede :=_egccg .(cmapHexString );if !_gede {return _ce .New ("\u0063\u0069d\u0020\u0069\u006e\u0074e\u0072\u0076a\u006c\u0020\u0065\u006e\u0064\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0068\u0065\u0078\u0020\u0073t\u0072\u0069\u006e\u0067");
};if len (_bcaf ._gcde )!=len (_ccg ._gcde ){return _ce .New ("\u0075\u006e\u0065\u0071\u0075\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0062\u0079\u0074\u0065\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065");};_ccee :=_ebdf (_ccg );
if _egd > _ccee {_gc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0043\u0049\u0044\u0020\u0072\u0061\u006e\u0067\u0065\u002e\u0020\u0073t\u0061\u0072\u0074\u003d\u0030\u0078\u0025\u0030\u0032\u0078\u0020\u0065\u006e\u0064=\u0030x\u0025\u0030\u0032\u0078",_egd ,_ccee );
return ErrBadCMap ;};_egccg ,_dg =cmap .parseObject ();if _dg !=nil {if _dg ==_cc .EOF {break ;};return _dg ;};_ade ,_gede :=_egccg .(cmapInt );if !_gede {return _ce .New ("\u0063\u0069\u0064\u0020\u0073t\u0061\u0072\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u006e\u0020\u0064\u0065\u0063\u0069\u006d\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};if _ade ._dgb < 0{return _ce .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u0063\u0069\u0064\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0076\u0061\u006c\u0075\u0065");};_cbfg :=_ade ._dgb ;for _cee :=_egd ;_cee <=_ccee ;_cee ++{cmap ._cd [_cee ]=CharCode (_cbfg );
_cbfg ++;};_gc .Log .Trace ("C\u0049\u0044\u0020\u0072\u0061\u006eg\u0065\u003a\u0020\u003c\u0030\u0078\u0025\u0058\u003e \u003c\u0030\u0078%\u0058>\u0020\u0025\u0064",_egd ,_ccee ,_ade ._dgb );};return nil ;};func (cmap *CMap )inCodespace (_gfb CharCode ,_abeb int )bool {for _ ,_faa :=range cmap ._feb {if _faa .Low <=_gfb &&_gfb <=_faa .High &&_abeb ==_faa .NumBytes {return true ;
};};return false ;};func _cbea (_dfcb cmapHexString )[]rune {if len (_dfcb ._gcde )==1{return []rune {rune (_dfcb ._gcde [0])};};_gceg :=_dfcb ._gcde ;if len (_gceg )%2!=0{_gceg =append (_gceg ,0);_gc .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0068\u0065\u0078\u0054\u006f\u0052\u0075\u006e\u0065\u0073\u002e\u0020\u0050\u0061\u0064\u0064\u0069\u006e\u0067\u0020\u0073\u0068\u0065\u0078\u003d\u0025#\u0076\u0020\u0074\u006f\u0020\u0025\u002b\u0076",_dfcb ,_gceg );
};_bgb :=len (_gceg )>>1;_geg :=make ([]uint16 ,_bgb );for _bgac :=0;_bgac < _bgb ;_bgac ++{_geg [_bgac ]=uint16 (_gceg [_bgac <<1])<<8+uint16 (_gceg [_bgac <<1+1]);};_dfa :=_c .Decode (_geg );return _dfa ;};func LoadPredefinedCMap (name string )(*CMap ,error ){cmap ,_bce :=_ac (name );
if _bce !=nil {return nil ,_bce ;};if cmap ._fab ==""{cmap .computeInverseMappings ();return cmap ,nil ;};_ebc ,_bce :=_ac (cmap ._fab );if _bce !=nil {return nil ,_bce ;};for _gge ,_bd :=range _ebc ._cd {if _ ,_ae :=cmap ._cd [_gge ];!_ae {cmap ._cd [_gge ]=_bd ;
};};cmap ._feb =append (cmap ._feb ,_ebc ._feb ...);cmap .computeInverseMappings ();return cmap ,nil ;};type cmapFloat struct{_caga float64 };func _ac (_ebg string )(*CMap ,error ){_ga ,_gaa :=_e .Asset (_ebg );if _gaa !=nil {return nil ,_gaa ;};return LoadCmapFromDataCID (_ga );
};func (_ebdda *cMapParser )parseName ()(cmapName ,error ){_efa :="";_eecf :=false ;for {_eeff ,_eddfd :=_ebdda ._dad .Peek (1);if _eddfd ==_cc .EOF {break ;};if _eddfd !=nil {return cmapName {_efa },_eddfd ;};if !_eecf {if _eeff [0]=='/'{_eecf =true ;
_ebdda ._dad .ReadByte ();}else {_gc .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u004e\u0061\u006d\u0065\u0020\u0073\u0074a\u0072t\u0069n\u0067 \u0077\u0069\u0074\u0068\u0020\u0025\u0073\u0020\u0028\u0025\u0020\u0078\u0029",_eeff ,_eeff );return cmapName {_efa },_f .Errorf ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006ea\u006d\u0065:\u0020\u0028\u0025\u0063\u0029",_eeff [0]);
};}else {if _gf .IsWhiteSpace (_eeff [0]){break ;}else if (_eeff [0]=='/')||(_eeff [0]=='[')||(_eeff [0]=='(')||(_eeff [0]==']')||(_eeff [0]=='<')||(_eeff [0]=='>'){break ;}else if _eeff [0]=='#'{_gab ,_aff :=_ebdda ._dad .Peek (3);if _aff !=nil {return cmapName {_efa },_aff ;
};_ebdda ._dad .Discard (3);_gebb ,_aff :=_fb .DecodeString (string (_gab [1:3]));if _aff !=nil {return cmapName {_efa },_aff ;};_efa +=string (_gebb );}else {_beac ,_ :=_ebdda ._dad .ReadByte ();_efa +=string (_beac );};};};return cmapName {_efa },nil ;
};func (cmap *CMap )parseWMode ()error {var _geb int ;_baad :=false ;for _geea :=0;_geea < 3&&!_baad ;_geea ++{_edc ,_abf :=cmap .parseObject ();if _abf !=nil {return _abf ;};switch _ad :=_edc .(type ){case cmapOperand :switch _ad .Operand {case "\u0064\u0065\u0066":_baad =true ;
default:_gc .Log .Error ("\u0070\u0061\u0072\u0073\u0065\u0057\u004d\u006f\u0064\u0065:\u0020\u0073\u0074\u0061\u0074\u0065\u0020e\u0072\u0072\u006f\u0072\u002e\u0020\u006f\u003d\u0025\u0023\u0076",_edc );return ErrBadCMap ;};case cmapInt :_geb =int (_ad ._dgb );
};};cmap ._af =integer {_gec :true ,_fdabb :_geb };return nil ;};const (_accb ="\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f";_ace ="\u0062e\u0067\u0069\u006e\u0063\u006d\u0061p";_fcb ="\u0065n\u0064\u0063\u006d\u0061\u0070";
_bfe ="\u0062\u0065\u0067\u0069nc\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0072\u0061\u006e\u0067\u0065";_afc ="\u0065\u006e\u0064\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065r\u0061\u006e\u0067\u0065";_gcbg ="b\u0065\u0067\u0069\u006e\u0062\u0066\u0063\u0068\u0061\u0072";
_cagb ="\u0065n\u0064\u0062\u0066\u0063\u0068\u0061r";_ebf ="\u0062\u0065\u0067i\u006e\u0062\u0066\u0072\u0061\u006e\u0067\u0065";_aea ="\u0065\u006e\u0064\u0062\u0066\u0072\u0061\u006e\u0067\u0065";_fcbf ="\u0062\u0065\u0067\u0069\u006e\u0063\u0069\u0064\u0072\u0061\u006e\u0067\u0065";
_adbd ="e\u006e\u0064\u0063\u0069\u0064\u0072\u0061\u006e\u0067\u0065";_dge ="\u0075s\u0065\u0063\u006d\u0061\u0070";_bcc ="\u0057\u004d\u006fd\u0065";_bga ="\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065";_bcf ="\u0043\u004d\u0061\u0070\u0054\u0079\u0070\u0065";
_gadd ="C\u004d\u0061\u0070\u0056\u0065\u0072\u0073\u0069\u006f\u006e";);func LoadCmapFromData (data []byte ,isSimple bool )(*CMap ,error ){_gc .Log .Trace ("\u004c\u006fa\u0064\u0043\u006d\u0061\u0070\u0046\u0072\u006f\u006d\u0044\u0061\u0074\u0061\u003a\u0020\u0069\u0073\u0053\u0069\u006d\u0070\u006ce=\u0025\u0074",isSimple );
cmap :=_ddf (isSimple );cmap .cMapParser =_efc (data );_gfe :=cmap .parse ();if _gfe !=nil {return nil ,_gfe ;};if len (cmap ._feb )==0{if cmap ._fab !=""{return cmap ,nil ;};_gc .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u002e\u0020\u0063\u006d\u0061p=\u0025\u0073",cmap );
};cmap .computeInverseMappings ();return cmap ,nil ;};func (cmap *CMap )parseCodespaceRange ()error {for {_cfc ,_aebb :=cmap .parseObject ();if _aebb !=nil {if _aebb ==_cc .EOF {break ;};return _aebb ;};_dbd ,_aaba :=_cfc .(cmapHexString );if !_aaba {if _aef ,_aebe :=_cfc .(cmapOperand );
_aebe {if _aef .Operand ==_afc {return nil ;};return _ce .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");};};_cfc ,_aebb =cmap .parseObject ();if _aebb !=nil {if _aebb ==_cc .EOF {break ;};return _aebb ;
};_cbd ,_aaba :=_cfc .(cmapHexString );if !_aaba {return _ce .New ("\u006e\u006f\u006e-\u0068\u0065\u0078\u0020\u0068\u0069\u0067\u0068");};if len (_dbd ._gcde )!=len (_cbd ._gcde ){return _ce .New ("\u0075\u006e\u0065\u0071\u0075\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0062\u0079\u0074\u0065\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065");
};_gade :=_ebdf (_dbd );_fabb :=_ebdf (_cbd );if _fabb < _gade {_gc .Log .Debug ("\u0045R\u0052\u004fR\u003a\u0020\u0042\u0061d\u0020\u0063\u006fd\u0065\u0073\u0070\u0061\u0063\u0065\u002e\u0020\u006cow\u003d\u0030\u0078%\u0030\u0032x\u0020\u0068\u0069\u0067\u0068\u003d0\u0078\u00250\u0032\u0078",_gade ,_fabb );
return ErrBadCMap ;};_eece :=_cbd ._afa ;_adb :=Codespace {NumBytes :_eece ,Low :_gade ,High :_fabb };cmap ._feb =append (cmap ._feb ,_adb );_gc .Log .Trace ("\u0043\u006f\u0064e\u0073\u0070\u0061\u0063e\u0020\u006c\u006f\u0077\u003a\u0020\u0030x\u0025\u0058\u002c\u0020\u0068\u0069\u0067\u0068\u003a\u0020\u0030\u0078\u0025\u0058",_gade ,_fabb );
};if len (cmap ._feb )==0{_gc .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u0020\u0069\u006e\u0020\u0063ma\u0070\u002e");return ErrBadCMap ;};return nil ;};func (_aae *cMapParser )parseObject ()(cmapObject ,error ){_aae .skipSpaces ();
for {_eae ,_cgeg :=_aae ._dad .Peek (2);if _cgeg !=nil {return nil ,_cgeg ;};if _eae [0]=='%'{_aae .parseComment ();_aae .skipSpaces ();continue ;}else if _eae [0]=='/'{_aec ,_cgga :=_aae .parseName ();return _aec ,_cgga ;}else if _eae [0]=='('{_fccg ,_gffe :=_aae .parseString ();
return _fccg ,_gffe ;}else if _eae [0]=='['{_dacb ,_ageg :=_aae .parseArray ();return _dacb ,_ageg ;}else if (_eae [0]=='<')&&(_eae [1]=='<'){_fgea ,_aedf :=_aae .parseDict ();return _fgea ,_aedf ;}else if _eae [0]=='<'{_caef ,_egbc :=_aae .parseHexString ();
return _caef ,_egbc ;}else if _gf .IsDecimalDigit (_eae [0])||(_eae [0]=='-'&&_gf .IsDecimalDigit (_eae [1])){_fdea ,_babf :=_aae .parseNumber ();if _babf !=nil {return nil ,_babf ;};return _fdea ,nil ;}else {_aacb ,_bbgg :=_aae .parseOperand ();if _bbgg !=nil {return nil ,_bbgg ;
};return _aacb ,nil ;};};};func (_gdf *cMapParser )parseHexString ()(cmapHexString ,error ){_gdf ._dad .ReadByte ();_bgca :=[]byte ("\u0030\u0031\u0032\u003345\u0036\u0037\u0038\u0039\u0061\u0062\u0063\u0064\u0065\u0066\u0041\u0042\u0043\u0044E\u0046");
_fcga :=_g .Buffer {};for {_gdf .skipSpaces ();_daac ,_fagd :=_gdf ._dad .Peek (1);if _fagd !=nil {return cmapHexString {},_fagd ;};if _daac [0]=='>'{_gdf ._dad .ReadByte ();break ;};_fdd ,_ :=_gdf ._dad .ReadByte ();if _g .IndexByte (_bgca ,_fdd )>=0{_fcga .WriteByte (_fdd );
};};if _fcga .Len ()%2==1{_gc .Log .Debug ("\u0070\u0061rs\u0065\u0048\u0065x\u0053\u0074\u0072\u0069ng:\u0020ap\u0070\u0065\u006e\u0064\u0069\u006e\u0067 '\u0030\u0027\u0020\u0074\u006f\u0020\u0025#\u0071",_fcga .String ());_fcga .WriteByte ('0');};_afcg :=_fcga .Len ()/2;
_bcgc ,_ :=_fb .DecodeString (_fcga .String ());return cmapHexString {_afa :_afcg ,_gcde :_bcgc },nil ;};func (cmap *CMap )NBits ()int {return cmap ._ff };func (_dbdg *cMapParser )parseNumber ()(cmapObject ,error ){_abbg ,_cbed :=_gf .ParseNumber (_dbdg ._dad );
if _cbed !=nil {return nil ,_cbed ;};switch _faab :=_abbg .(type ){case *_gf .PdfObjectFloat :return cmapFloat {float64 (*_faab )},nil ;case *_gf .PdfObjectInteger :return cmapInt {int64 (*_faab )},nil ;};return nil ,_f .Errorf ("\u0075n\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_abbg );
};func (_fbf *cMapParser )skipSpaces ()(int ,error ){_adc :=0;for {_beda ,_ead :=_fbf ._dad .Peek (1);if _ead !=nil {return 0,_ead ;};if _gf .IsWhiteSpace (_beda [0]){_fbf ._dad .ReadByte ();_adc ++;}else {break ;};};return _adc ,nil ;};func (cmap *CMap )CharcodeToCID (code CharCode )(CharCode ,bool ){_ba ,_dac :=cmap ._cd [code ];
return _ba ,_dac ;};var (ErrBadCMap =_ce .New ("\u0062\u0061\u0064\u0020\u0063\u006d\u0061\u0070");ErrBadCMapComment =_ce .New ("c\u006f\u006d\u006d\u0065\u006e\u0074 \u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0073\u0074a\u0072\u0074\u0020w\u0069t\u0068\u0020\u0025");
ErrBadCMapDict =_ce .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074"););func (cmap *CMap )CIDToCharcode (cid CharCode )(CharCode ,bool ){_fge ,_bf :=cmap ._bc [cid ];return _fge ,_bf ;};func (_fgc *cMapParser )parseDict ()(cmapDict ,error ){_gc .Log .Trace ("\u0052\u0065\u0061\u0064\u0069\u006e\u0067\u0020\u0050\u0044\u0046\u0020D\u0069\u0063\u0074\u0021");
_dbc :=_ceb ();_ccce ,_ :=_fgc ._dad .ReadByte ();if _ccce !='<'{return _dbc ,ErrBadCMapDict ;};_ccce ,_ =_fgc ._dad .ReadByte ();if _ccce !='<'{return _dbc ,ErrBadCMapDict ;};for {_fgc .skipSpaces ();_ebcg ,_ege :=_fgc ._dad .Peek (2);if _ege !=nil {return _dbc ,_ege ;
};if (_ebcg [0]=='>')&&(_ebcg [1]=='>'){_fgc ._dad .ReadByte ();_fgc ._dad .ReadByte ();break ;};_bee ,_ege :=_fgc .parseName ();_gc .Log .Trace ("\u004be\u0079\u003a\u0020\u0025\u0073",_bee .Name );if _ege !=nil {_gc .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0052\u0065\u0074\u0075\u0072\u006e\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u002e\u0020\u0065\u0072r=\u0025\u0076",_ege );
return _dbc ,_ege ;};_fgc .skipSpaces ();_ecca ,_ege :=_fgc .parseObject ();if _ege !=nil {return _dbc ,_ege ;};_dbc .Dict [_bee .Name ]=_ecca ;_fgc .skipSpaces ();_ebcg ,_ege =_fgc ._dad .Peek (3);if _ege !=nil {return _dbc ,_ege ;};if string (_ebcg )=="\u0064\u0065\u0066"{_fgc ._dad .Discard (3);
};};return _dbc ,nil ;};type cmapString struct{String string ;};func (cmap *CMap )CIDSystemInfo ()CIDSystemInfo {return cmap ._gb };func (cmap *CMap )BytesToCharcodes (data []byte )([]CharCode ,bool ){var _ffd []CharCode ;if cmap ._ff ==8{for _ ,_fgd :=range data {_ffd =append (_ffd ,CharCode (_fgd ));
};return _ffd ,true ;};for _febb :=0;_febb < len (data );{_ca ,_cdfb ,_cg :=cmap .matchCode (data [_febb :]);if !_cg {_gc .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0074\u0020\u0069\u003d\u0025\u0064\u0020\u0062\u0079\u0074\u0065\u0073\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d\u003d\u0025\u0023\u0071",_febb ,data ,string (data ));
return _ffd ,false ;};_ffd =append (_ffd ,_ca );_febb +=_cdfb ;};return _ffd ,true ;};type integer struct{_gec bool ;_fdabb int ;};func _ebdf (_aeca cmapHexString )CharCode {_fbd :=CharCode (0);for _ ,_gdd :=range _aeca ._gcde {_fbd <<=8;_fbd |=CharCode (_gdd );
};return _fbd ;};func (cmap *CMap )String ()string {_ecc :=cmap ._gb ;_bae :=[]string {_f .Sprintf ("\u006e\u0062\u0069\u0074\u0073\u003a\u0025\u0064",cmap ._ff ),_f .Sprintf ("\u0074y\u0070\u0065\u003a\u0025\u0064",cmap ._ee )};if cmap ._fda !=""{_bae =append (_bae ,_f .Sprintf ("\u0076\u0065\u0072\u0073\u0069\u006f\u006e\u003a\u0025\u0073",cmap ._fda ));
};if cmap ._fab !=""{_bae =append (_bae ,_f .Sprintf ("u\u0073\u0065\u0063\u006d\u0061\u0070\u003a\u0025\u0023\u0071",cmap ._fab ));};_bae =append (_bae ,_f .Sprintf ("\u0073\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f\u003a\u0025\u0073",_ecc .String ()));
if len (cmap ._feb )> 0{_bae =append (_bae ,_f .Sprintf ("\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u003a\u0025\u0064",len (cmap ._feb )));};if len (cmap ._ed )> 0{_bae =append (_bae ,_f .Sprintf ("\u0063\u006fd\u0065\u0054\u006fU\u006e\u0069\u0063\u006f\u0064\u0065\u003a\u0025\u0064",len (cmap ._ed )));
};return _f .Sprintf ("\u0043\u004d\u0041P\u007b\u0025\u0023\u0071\u0020\u0025\u0073\u007d",cmap ._age ,_gd .Join (_bae ,"\u0020"));};func _ddf (_fg bool )*CMap {_fag :=16;if _fg {_fag =8;};return &CMap {_ff :_fag ,_cd :make (map[CharCode ]CharCode ),_bc :make (map[CharCode ]CharCode ),_ed :make (map[CharCode ]string ),_dc :make (map[string ]CharCode )};
};func _eaea (_abec ,_ccea int )int {if _abec < _ccea {return _abec ;};return _ccea ;};func (cmap *CMap )Bytes ()[]byte {_gc .Log .Trace ("\u0063\u006d\u0061\u0070.B\u0079\u0074\u0065\u0073\u003a\u0020\u0063\u006d\u0061\u0070\u003d\u0025\u0073",cmap .String ());
if len (cmap ._dd )> 0{return cmap ._dd ;};cmap ._dd =[]byte (_gd .Join ([]string {_abb ,cmap .toBfData (),_gcc },"\u000a"));return cmap ._dd ;};func _ceb ()cmapDict {return cmapDict {Dict :map[string ]cmapObject {}}};func (_beae *cMapParser )parseOperand ()(cmapOperand ,error ){_ffa :=cmapOperand {};
_cfb :=_g .Buffer {};for {_dgd ,_gdg :=_beae ._dad .Peek (1);if _gdg !=nil {if _gdg ==_cc .EOF {break ;};return _ffa ,_gdg ;};if _gf .IsDelimiter (_dgd [0]){break ;};if _gf .IsWhiteSpace (_dgd [0]){break ;};_agg ,_ :=_beae ._dad .ReadByte ();_cfb .WriteByte (_agg );
};if _cfb .Len ()==0{return _ffa ,_f .Errorf ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064\u0020\u0028\u0065\u006d\u0070\u0074\u0079\u0029");};_ffa .Operand =_cfb .String ();return _ffa ,nil ;};func (_gaff *cMapParser )parseArray ()(cmapArray ,error ){_baadd :=cmapArray {};
_baadd .Array =[]cmapObject {};_gaff ._dad .ReadByte ();for {_gaff .skipSpaces ();_bbb ,_fdag :=_gaff ._dad .Peek (1);if _fdag !=nil {return _baadd ,_fdag ;};if _bbb [0]==']'{_gaff ._dad .ReadByte ();break ;};_ebdcf ,_fdag :=_gaff .parseObject ();if _fdag !=nil {return _baadd ,_fdag ;
};_baadd .Array =append (_baadd .Array ,_ebdcf );};return _baadd ,nil ;};type cMapParser struct{_dad *_a .Reader };type charRange struct{_fc CharCode ;_d CharCode ;};func (_gcg *CIDSystemInfo )String ()string {return _f .Sprintf ("\u0025\u0073\u002d\u0025\u0073\u002d\u0025\u0030\u0033\u0064",_gcg .Registry ,_gcg .Ordering ,_gcg .Supplement );
};func NewCIDSystemInfo (obj _gf .PdfObject )(_cbf CIDSystemInfo ,_bg error ){_eb ,_feg :=_gf .GetDict (obj );if !_feg {return CIDSystemInfo {},_gf .ErrTypeError ;};_fa ,_feg :=_gf .GetStringVal (_eb .Get ("\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079"));
if !_feg {return CIDSystemInfo {},_gf .ErrTypeError ;};_fd ,_feg :=_gf .GetStringVal (_eb .Get ("\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067"));if !_feg {return CIDSystemInfo {},_gf .ErrTypeError ;};_ag ,_feg :=_gf .GetIntVal (_eb .Get ("\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074"));
if !_feg {return CIDSystemInfo {},_gf .ErrTypeError ;};return CIDSystemInfo {Registry :_fa ,Ordering :_fd ,Supplement :_ag },nil ;};func (cmap *CMap )parse ()error {var _dba cmapObject ;for {_aebd ,_gda :=cmap .parseObject ();if _gda !=nil {if _gda ==_cc .EOF {break ;
};_gc .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u004d\u0061\u0070\u003a\u0020\u0025\u0076",_gda );return _gda ;};switch _ea :=_aebd .(type ){case cmapOperand :_ecdd :=_ea ;switch _ecdd .Operand {case _bfe :_deg :=cmap .parseCodespaceRange ();
if _deg !=nil {return _deg ;};case _fcbf :_fdg :=cmap .parseCIDRange ();if _fdg !=nil {return _fdg ;};case _gcbg :_cefd :=cmap .parseBfchar ();if _cefd !=nil {return _cefd ;};case _ebf :_aeg :=cmap .parseBfrange ();if _aeg !=nil {return _aeg ;};case _dge :if _dba ==nil {_gc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0075\u0073\u0065\u0063m\u0061\u0070\u0020\u0077\u0069\u0074\u0068\u0020\u006e\u006f \u0061\u0072\u0067");
return ErrBadCMap ;};_dcd ,_aed :=_dba .(cmapName );if !_aed {_gc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0075\u0073\u0065\u0063\u006d\u0061\u0070\u0020\u0061\u0072\u0067\u0020\u006eo\u0074\u0020\u0061\u0020\u006e\u0061\u006de\u0020\u0025\u0023\u0076",_dba );
return ErrBadCMap ;};cmap ._fab =_dcd .Name ;case _accb :_ece :=cmap .parseSystemInfo ();if _ece !=nil {return _ece ;};};case cmapName :_ffc :=_ea ;switch _ffc .Name {case _accb :_ecb :=cmap .parseSystemInfo ();if _ecb !=nil {return _ecb ;};case _bga :_cgg :=cmap .parseName ();
if _cgg !=nil {return _cgg ;};case _bcf :_cfg :=cmap .parseType ();if _cfg !=nil {return _cfg ;};case _gadd :_bgc :=cmap .parseVersion ();if _bgc !=nil {return _bgc ;};case _bcc :if _gda =cmap .parseWMode ();_gda !=nil {return _gda ;};};};_dba =_aebd ;
};return nil ;};const (_bdf =100;_abb ="\u000a\u002f\u0043\u0049\u0044\u0049\u006e\u0069\u0074\u0020\u002f\u0050\u0072\u006fc\u0053\u0065\u0074\u0020\u0066\u0069\u006e\u0064\u0072es\u006fu\u0072c\u0065 \u0062\u0065\u0067\u0069\u006e\u000a\u0031\u0032\u0020\u0064\u0069\u0063\u0074\u0020\u0062\u0065\u0067\u0069n\u000a\u0062\u0065\u0067\u0069\u006e\u0063\u006d\u0061\u0070\n\u002f\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065m\u0049\u006e\u0066\u006f\u0020\u003c\u003c\u0020\u002f\u0052\u0065\u0067\u0069\u0073t\u0072\u0079\u0020\u0028\u0041\u0064\u006f\u0062\u0065\u0029\u0020\u002f\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067\u0020\u0028\u0055\u0043\u0053)\u0020\u002f\u0053\u0075\u0070p\u006c\u0065\u006d\u0065\u006et\u0020\u0030\u0020\u003e\u003e\u0020\u0064\u0065\u0066\u000a\u002f\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065\u0020\u002f\u0041\u0064\u006f\u0062\u0065-\u0049\u0064\u0065\u006e\u0074\u0069\u0074\u0079\u002d\u0055\u0043\u0053\u0020\u0064\u0065\u0066\u000a\u002fC\u004d\u0061\u0070\u0054\u0079\u0070\u0065\u0020\u0032\u0020\u0064\u0065\u0066\u000a\u0031\u0020\u0062\u0065\u0067\u0069\u006e\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063e\u0072\u0061n\u0067\u0065\n\u003c\u0030\u0030\u0030\u0030\u003e\u0020<\u0046\u0046\u0046\u0046\u003e\u000a\u0065\u006e\u0064\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065r\u0061\u006e\u0067\u0065\u000a";
_gcc ="\u0065\u006e\u0064\u0063\u006d\u0061\u0070\u000a\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065\u0020\u0063ur\u0072e\u006e\u0074\u0064\u0069\u0063\u0074\u0020\u002f\u0043\u004d\u0061\u0070 \u0064\u0065\u0066\u0069\u006e\u0065\u0072\u0065\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0070\u006fp\u000a\u0065\u006e\u0064\u000a\u0065\u006e\u0064\u000a";
);func (cmap *CMap )computeInverseMappings (){for _bgd ,_dde :=range cmap ._cd {if _gee ,_eg :=cmap ._bc [_dde ];!_eg ||(_eg &&_gee > _bgd ){cmap ._bc [_dde ]=_bgd ;};};for _egc ,_gcb :=range cmap ._ed {if _cce ,_db :=cmap ._dc [_gcb ];!_db ||(_db &&_cce > _egc ){cmap ._dc [_gcb ]=_egc ;
};};_fbb .Slice (cmap ._feb ,func (_bca ,_ddfb int )bool {return cmap ._feb [_bca ].Low < cmap ._feb [_ddfb ].Low });};type cmapArray struct{Array []cmapObject ;};