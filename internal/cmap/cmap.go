//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package cmap ;import (_d "bufio";_fb "bytes";_ae "encoding/hex";_fa "errors";_a "fmt";_e "github.com/unidoc/unipdf/v3/common";_g "github.com/unidoc/unipdf/v3/core";_b "github.com/unidoc/unipdf/v3/internal/cmap/bcmaps";_da "io";_fea "sort";_ab "strconv";
_daa "strings";_fe "unicode/utf16";);func (cmap *CMap )BytesToCharcodes (data []byte )([]CharCode ,bool ){var _cg []CharCode ;if cmap ._de ==8{for _ ,_cgb :=range data {_cg =append (_cg ,CharCode (_cgb ));};return _cg ,true ;};for _fec :=0;_fec < len (data );
{_dd ,_bad ,_gge :=cmap .matchCode (data [_fec :]);if !_gge {_e .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0074\u0020\u0069\u003d\u0025\u0064\u0020\u0062\u0079\u0074\u0065\u0073\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d\u003d\u0025\u0023\u0071",_fec ,data ,string (data ));
return _cg ,false ;};_cg =append (_cg ,_dd );_fec +=_bad ;};return _cg ,true ;};func (_ca *CIDSystemInfo )String ()string {return _a .Sprintf ("\u0025\u0073\u002d\u0025\u0073\u002d\u0025\u0030\u0033\u0064",_ca .Registry ,_ca .Ordering ,_ca .Supplement );
};func _bf (_baec string )(*CMap ,error ){_bg ,_eb :=_b .Asset (_baec );if _eb !=nil {return nil ,_eb ;};return LoadCmapFromDataCID (_bg );};func (cmap *CMap )parseCIDRange ()error {for {_gbee ,_ebca :=cmap .parseObject ();if _ebca !=nil {if _ebca ==_da .EOF {break ;
};return _ebca ;};_bgb ,_cdff :=_gbee .(cmapHexString );if !_cdff {if _faa ,_faaf :=_gbee .(cmapOperand );_faaf {if _faa .Operand ==_cbf {return nil ;};return _fa .New ("\u0063\u0069\u0064\u0020\u0069\u006e\u0074\u0065\u0072\u0076\u0061\u006c\u0020s\u0074\u0061\u0072\u0074\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0068\u0065\u0078\u0020\u0073t\u0072\u0069\u006e\u0067");
};};_ffc :=_adbd (_bgb );_gbee ,_ebca =cmap .parseObject ();if _ebca !=nil {if _ebca ==_da .EOF {break ;};return _ebca ;};_cae ,_cdff :=_gbee .(cmapHexString );if !_cdff {return _fa .New ("\u0063\u0069d\u0020\u0069\u006e\u0074e\u0072\u0076a\u006c\u0020\u0065\u006e\u0064\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0068\u0065\u0078\u0020\u0073t\u0072\u0069\u006e\u0067");
};if len (_bgb ._fcc )!=len (_cae ._fcc ){return _fa .New ("\u0075\u006e\u0065\u0071\u0075\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0062\u0079\u0074\u0065\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065");};_afc :=_adbd (_cae );
if _ffc > _afc {_e .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0043\u0049\u0044\u0020\u0072\u0061\u006e\u0067\u0065\u002e\u0020\u0073t\u0061\u0072\u0074\u003d\u0030\u0078\u0025\u0030\u0032\u0078\u0020\u0065\u006e\u0064=\u0030x\u0025\u0030\u0032\u0078",_ffc ,_afc );
return ErrBadCMap ;};_gbee ,_ebca =cmap .parseObject ();if _ebca !=nil {if _ebca ==_da .EOF {break ;};return _ebca ;};_acb ,_cdff :=_gbee .(cmapInt );if !_cdff {return _fa .New ("\u0063\u0069\u0064\u0020\u0073t\u0061\u0072\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u006e\u0020\u0064\u0065\u0063\u0069\u006d\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};if _acb ._ggea < 0{return _fa .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u0063\u0069\u0064\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0076\u0061\u006c\u0075\u0065");};_feab :=_acb ._ggea ;for _gdc :=_ffc ;_gdc <=_afc ;_gdc ++{cmap ._fc [_gdc ]=CharCode (_feab );
_feab ++;};_e .Log .Trace ("C\u0049\u0044\u0020\u0072\u0061\u006eg\u0065\u003a\u0020\u003c\u0030\u0078\u0025\u0058\u003e \u003c\u0030\u0078%\u0058>\u0020\u0025\u0064",_ffc ,_afc ,_acb ._ggea );};return nil ;};type integer struct{_adbc bool ;_ccg int ;};
func (cmap *CMap )String ()string {_ged :=cmap ._fg ;_dbd :=[]string {_a .Sprintf ("\u006e\u0062\u0069\u0074\u0073\u003a\u0025\u0064",cmap ._de ),_a .Sprintf ("\u0074y\u0070\u0065\u003a\u0025\u0064",cmap ._ed )};if cmap ._fad !=""{_dbd =append (_dbd ,_a .Sprintf ("\u0076\u0065\u0072\u0073\u0069\u006f\u006e\u003a\u0025\u0073",cmap ._fad ));
};if cmap ._ba !=""{_dbd =append (_dbd ,_a .Sprintf ("u\u0073\u0065\u0063\u006d\u0061\u0070\u003a\u0025\u0023\u0071",cmap ._ba ));};_dbd =append (_dbd ,_a .Sprintf ("\u0073\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f\u003a\u0025\u0073",_ged .String ()));
if len (cmap ._fab )> 0{_dbd =append (_dbd ,_a .Sprintf ("\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u003a\u0025\u0064",len (cmap ._fab )));};if len (cmap ._feg )> 0{_dbd =append (_dbd ,_a .Sprintf ("\u0063\u006fd\u0065\u0054\u006fU\u006e\u0069\u0063\u006f\u0064\u0065\u003a\u0025\u0064",len (cmap ._feg )));
};return _a .Sprintf ("\u0043\u004d\u0041P\u007b\u0025\u0023\u0071\u0020\u0025\u0073\u007d",cmap ._cb ,_daa .Join (_dbd ,"\u0020"));};const (_dcb =100;_eggf ="\u000a\u002f\u0043\u0049\u0044\u0049\u006e\u0069\u0074\u0020\u002f\u0050\u0072\u006fc\u0053\u0065\u0074\u0020\u0066\u0069\u006e\u0064\u0072es\u006fu\u0072c\u0065 \u0062\u0065\u0067\u0069\u006e\u000a\u0031\u0032\u0020\u0064\u0069\u0063\u0074\u0020\u0062\u0065\u0067\u0069n\u000a\u0062\u0065\u0067\u0069\u006e\u0063\u006d\u0061\u0070\n\u002f\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065m\u0049\u006e\u0066\u006f\u0020\u003c\u003c\u0020\u002f\u0052\u0065\u0067\u0069\u0073t\u0072\u0079\u0020\u0028\u0041\u0064\u006f\u0062\u0065\u0029\u0020\u002f\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067\u0020\u0028\u0055\u0043\u0053)\u0020\u002f\u0053\u0075\u0070p\u006c\u0065\u006d\u0065\u006et\u0020\u0030\u0020\u003e\u003e\u0020\u0064\u0065\u0066\u000a\u002f\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065\u0020\u002f\u0041\u0064\u006f\u0062\u0065-\u0049\u0064\u0065\u006e\u0074\u0069\u0074\u0079\u002d\u0055\u0043\u0053\u0020\u0064\u0065\u0066\u000a\u002fC\u004d\u0061\u0070\u0054\u0079\u0070\u0065\u0020\u0032\u0020\u0064\u0065\u0066\u000a\u0031\u0020\u0062\u0065\u0067\u0069\u006e\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063e\u0072\u0061n\u0067\u0065\n\u003c\u0030\u0030\u0030\u0030\u003e\u0020<\u0046\u0046\u0046\u0046\u003e\u000a\u0065\u006e\u0064\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065r\u0061\u006e\u0067\u0065\u000a";
_gbe ="\u0065\u006e\u0064\u0063\u006d\u0061\u0070\u000a\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065\u0020\u0063ur\u0072e\u006e\u0074\u0064\u0069\u0063\u0074\u0020\u002f\u0043\u004d\u0061\u0070 \u0064\u0065\u0066\u0069\u006e\u0065\u0072\u0065\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0070\u006fp\u000a\u0065\u006e\u0064\u000a\u0065\u006e\u0064\u000a";
);func LoadPredefinedCMap (name string )(*CMap ,error ){cmap ,_bag :=_bf (name );if _bag !=nil {return nil ,_bag ;};if cmap ._ba ==""{cmap .computeInverseMappings ();return cmap ,nil ;};_ad ,_bag :=_bf (cmap ._ba );if _bag !=nil {return nil ,_bag ;};for _afe ,_bae :=range _ad ._fc {if _ ,_adf :=cmap ._fc [_afe ];
!_adf {cmap ._fc [_afe ]=_bae ;};};cmap ._fab =append (cmap ._fab ,_ad ._fab ...);cmap .computeInverseMappings ();return cmap ,nil ;};func _baf (_ga bool )*CMap {_ff :=16;if _ga {_ff =8;};return &CMap {_de :_ff ,_fc :make (map[CharCode ]CharCode ),_fd :make (map[CharCode ]CharCode ),_feg :make (map[CharCode ]string ),_ee :make (map[string ]CharCode )};
};func (cmap *CMap )Name ()string {return cmap ._cb };func LoadCmapFromDataCID (data []byte )(*CMap ,error ){return LoadCmapFromData (data ,false )};func (_cged *cMapParser )parseOperand ()(cmapOperand ,error ){_fegc :=cmapOperand {};_bbecb :=_fb .Buffer {};
for {_egff ,_gaea :=_cged ._bcec .Peek (1);if _gaea !=nil {if _gaea ==_da .EOF {break ;};return _fegc ,_gaea ;};if _g .IsDelimiter (_egff [0]){break ;};if _g .IsWhiteSpace (_egff [0]){break ;};_dfbg ,_ :=_cged ._bcec .ReadByte ();_bbecb .WriteByte (_dfbg );
};if _bbecb .Len ()==0{return _fegc ,_a .Errorf ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064\u0020\u0028\u0065\u006d\u0070\u0074\u0079\u0029");};_fegc .Operand =_bbecb .String ();return _fegc ,nil ;};func (_gce *cMapParser )parseNumber ()(cmapObject ,error ){_acgdb ,_bfd :=_g .ParseNumber (_gce ._bcec );
if _bfd !=nil {return nil ,_bfd ;};switch _gcf :=_acgdb .(type ){case *_g .PdfObjectFloat :return cmapFloat {float64 (*_gcf )},nil ;case *_g .PdfObjectInteger :return cmapInt {int64 (*_gcf )},nil ;};return nil ,_a .Errorf ("\u0075n\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_acgdb );
};func (_affc *cMapParser )parseObject ()(cmapObject ,error ){_affc .skipSpaces ();for {_eae ,_aafe :=_affc ._bcec .Peek (2);if _aafe !=nil {return nil ,_aafe ;};if _eae [0]=='%'{_affc .parseComment ();_affc .skipSpaces ();continue ;}else if _eae [0]=='/'{_egad ,_ecba :=_affc .parseName ();
return _egad ,_ecba ;}else if _eae [0]=='('{_fef ,_aade :=_affc .parseString ();return _fef ,_aade ;}else if _eae [0]=='['{_feb ,_aaff :=_affc .parseArray ();return _feb ,_aaff ;}else if (_eae [0]=='<')&&(_eae [1]=='<'){_cfg ,_ebf :=_affc .parseDict ();
return _cfg ,_ebf ;}else if _eae [0]=='<'{_dab ,_eeb :=_affc .parseHexString ();return _dab ,_eeb ;}else if _g .IsDecimalDigit (_eae [0])||(_eae [0]=='-'&&_g .IsDecimalDigit (_eae [1])){_caeg ,_dcdb :=_affc .parseNumber ();if _dcdb !=nil {return nil ,_dcdb ;
};return _caeg ,nil ;}else {_cfd ,_aeff :=_affc .parseOperand ();if _aeff !=nil {return nil ,_aeff ;};return _cfd ,nil ;};};};type cmapArray struct{Array []cmapObject ;};func NewCIDSystemInfo (obj _g .PdfObject )(_ac CIDSystemInfo ,_gc error ){_abc ,_ce :=_g .GetDict (obj );
if !_ce {return CIDSystemInfo {},_g .ErrTypeError ;};_eg ,_ce :=_g .GetStringVal (_abc .Get ("\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079"));if !_ce {return CIDSystemInfo {},_g .ErrTypeError ;};_fae ,_ce :=_g .GetStringVal (_abc .Get ("\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067"));
if !_ce {return CIDSystemInfo {},_g .ErrTypeError ;};_ge ,_ce :=_g .GetIntVal (_abc .Get ("\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074"));if !_ce {return CIDSystemInfo {},_g .ErrTypeError ;};return CIDSystemInfo {Registry :_eg ,Ordering :_fae ,Supplement :_ge },nil ;
};const (_gg =4;MissingCodeRune ='\ufffd';MissingCodeString =string (MissingCodeRune ););type cmapInt struct{_ggea int64 };type cMapParser struct{_bcec *_d .Reader };type cmapOperand struct{Operand string ;};func (cmap *CMap )matchCode (_beb []byte )(_adfe CharCode ,_abd int ,_ecg bool ){for _dbc :=0;
_dbc < _gg ;_dbc ++{if _dbc < len (_beb ){_adfe =_adfe <<8|CharCode (_beb [_dbc ]);_abd ++;};_ecg =cmap .inCodespace (_adfe ,_dbc +1);if _ecg {return _adfe ,_abd ,true ;};};_e .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063o\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0020m\u0061t\u0063\u0068\u0065\u0073\u0020\u0062\u0079\u0074\u0065\u0073\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d=\u0025\u0023\u0071\u0020\u0063\u006d\u0061\u0070\u003d\u0025\u0073",_beb ,string (_beb ),cmap );
return 0,0,false ;};func LoadCmapFromData (data []byte ,isSimple bool )(*CMap ,error ){_e .Log .Trace ("\u004c\u006fa\u0064\u0043\u006d\u0061\u0070\u0046\u0072\u006f\u006d\u0044\u0061\u0074\u0061\u003a\u0020\u0069\u0073\u0053\u0069\u006d\u0070\u006ce=\u0025\u0074",isSimple );
cmap :=_baf (isSimple );cmap .cMapParser =_gff (data );_ceb :=cmap .parse ();if _ceb !=nil {return nil ,_ceb ;};if len (cmap ._fab )==0{if cmap ._ba !=""{return cmap ,nil ;};_e .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u002e\u0020\u0063\u006d\u0061p=\u0025\u0073",cmap );
};cmap .computeInverseMappings ();return cmap ,nil ;};func (cmap *CMap )parseCodespaceRange ()error {for {_fcf ,_fcaa :=cmap .parseObject ();if _fcaa !=nil {if _fcaa ==_da .EOF {break ;};return _fcaa ;};_fcb ,_gfd :=_fcf .(cmapHexString );if !_gfd {if _fdga ,_aad :=_fcf .(cmapOperand );
_aad {if _fdga .Operand ==_bef {return nil ;};return _fa .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");};};_fcf ,_fcaa =cmap .parseObject ();if _fcaa !=nil {if _fcaa ==_da .EOF {break ;};return _fcaa ;
};_ega ,_gfd :=_fcf .(cmapHexString );if !_gfd {return _fa .New ("\u006e\u006f\u006e-\u0068\u0065\u0078\u0020\u0068\u0069\u0067\u0068");};if len (_fcb ._fcc )!=len (_ega ._fcc ){return _fa .New ("\u0075\u006e\u0065\u0071\u0075\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0062\u0079\u0074\u0065\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065");
};_eeaf :=_adbd (_fcb );_fba :=_adbd (_ega );if _fba < _eeaf {_e .Log .Debug ("\u0045R\u0052\u004fR\u003a\u0020\u0042\u0061d\u0020\u0063\u006fd\u0065\u0073\u0070\u0061\u0063\u0065\u002e\u0020\u006cow\u003d\u0030\u0078%\u0030\u0032x\u0020\u0068\u0069\u0067\u0068\u003d0\u0078\u00250\u0032\u0078",_eeaf ,_fba );
return ErrBadCMap ;};_ebc :=_ega ._ece ;_dbdc :=Codespace {NumBytes :_ebc ,Low :_eeaf ,High :_fba };cmap ._fab =append (cmap ._fab ,_dbdc );_e .Log .Trace ("\u0043\u006f\u0064e\u0073\u0070\u0061\u0063e\u0020\u006c\u006f\u0077\u003a\u0020\u0030x\u0025\u0058\u002c\u0020\u0068\u0069\u0067\u0068\u003a\u0020\u0030\u0078\u0025\u0058",_eeaf ,_fba );
};if len (cmap ._fab )==0{_e .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u0020\u0069\u006e\u0020\u0063ma\u0070\u002e");return ErrBadCMap ;};return nil ;};const (_gga ="\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f";
_ecb ="\u0062e\u0067\u0069\u006e\u0063\u006d\u0061p";_gcg ="\u0065n\u0064\u0063\u006d\u0061\u0070";_ddg ="\u0062\u0065\u0067\u0069nc\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0072\u0061\u006e\u0067\u0065";_bef ="\u0065\u006e\u0064\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065r\u0061\u006e\u0067\u0065";
_aff ="b\u0065\u0067\u0069\u006e\u0062\u0066\u0063\u0068\u0061\u0072";_dgb ="\u0065n\u0064\u0062\u0066\u0063\u0068\u0061r";_faed ="\u0062\u0065\u0067i\u006e\u0062\u0066\u0072\u0061\u006e\u0067\u0065";_bfcc ="\u0065\u006e\u0064\u0062\u0066\u0072\u0061\u006e\u0067\u0065";
_egc ="\u0062\u0065\u0067\u0069\u006e\u0063\u0069\u0064\u0072\u0061\u006e\u0067\u0065";_cbf ="e\u006e\u0064\u0063\u0069\u0064\u0072\u0061\u006e\u0067\u0065";_efc ="\u0075s\u0065\u0063\u006d\u0061\u0070";_aaf ="\u0057\u004d\u006fd\u0065";_bee ="\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065";
_bge ="\u0043\u004d\u0061\u0070\u0054\u0079\u0070\u0065";_cgff ="C\u004d\u0061\u0070\u0056\u0065\u0072\u0073\u0069\u006f\u006e";);func _bfe (_egd string )string {_bcga :=[]rune (_egd );_fff :=make ([]string ,len (_bcga ));for _ggf ,_aebf :=range _bcga {_fff [_ggf ]=_a .Sprintf ("\u0025\u0030\u0034\u0078",_aebf );
};return _a .Sprintf ("\u003c\u0025\u0073\u003e",_daa .Join (_fff ,""));};type CharCode uint32 ;func _ccgc (_gfe ,_fgb int )int {if _gfe < _fgb {return _gfe ;};return _fgb ;};func (_cabg *cMapParser )parseComment ()(string ,error ){var _bga _fb .Buffer ;
_ ,_cc :=_cabg .skipSpaces ();if _cc !=nil {return _bga .String (),_cc ;};_cbbb :=true ;for {_cadf ,_eec :=_cabg ._bcec .Peek (1);if _eec !=nil {_e .Log .Debug ("p\u0061r\u0073\u0065\u0043\u006f\u006d\u006d\u0065\u006et\u003a\u0020\u0065\u0072r=\u0025\u0076",_eec );
return _bga .String (),_eec ;};if _cbbb &&_cadf [0]!='%'{return _bga .String (),ErrBadCMapComment ;};_cbbb =false ;if (_cadf [0]!='\r')&&(_cadf [0]!='\n'){_cce ,_ :=_cabg ._bcec .ReadByte ();_bga .WriteByte (_cce );}else {break ;};};return _bga .String (),nil ;
};type cmapHexString struct{_ece int ;_fcc []byte ;};func (_fag *cMapParser )parseDict ()(cmapDict ,error ){_e .Log .Trace ("\u0052\u0065\u0061\u0064\u0069\u006e\u0067\u0020\u0050\u0044\u0046\u0020D\u0069\u0063\u0074\u0021");_fgfe :=_cdb ();_afge ,_ :=_fag ._bcec .ReadByte ();
if _afge !='<'{return _fgfe ,ErrBadCMapDict ;};_afge ,_ =_fag ._bcec .ReadByte ();if _afge !='<'{return _fgfe ,ErrBadCMapDict ;};for {_fag .skipSpaces ();_gda ,_cada :=_fag ._bcec .Peek (2);if _cada !=nil {return _fgfe ,_cada ;};if (_gda [0]=='>')&&(_gda [1]=='>'){_fag ._bcec .ReadByte ();
_fag ._bcec .ReadByte ();break ;};_eadga ,_cada :=_fag .parseName ();_e .Log .Trace ("\u004be\u0079\u003a\u0020\u0025\u0073",_eadga .Name );if _cada !=nil {_e .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0052\u0065\u0074\u0075\u0072\u006e\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u002e\u0020\u0065\u0072r=\u0025\u0076",_cada );
return _fgfe ,_cada ;};_fag .skipSpaces ();_bacf ,_cada :=_fag .parseObject ();if _cada !=nil {return _fgfe ,_cada ;};_fgfe .Dict [_eadga .Name ]=_bacf ;_fag .skipSpaces ();_gda ,_cada =_fag ._bcec .Peek (3);if _cada !=nil {return _fgfe ,_cada ;};if string (_gda )=="\u0064\u0065\u0066"{_fag ._bcec .Discard (3);
};};return _fgfe ,nil ;};func _gff (_bfeg []byte )*cMapParser {_gebd :=cMapParser {};_abdf :=_fb .NewBuffer (_bfeg );_gebd ._bcec =_d .NewReader (_abdf );return &_gebd ;};func (cmap *CMap )inCodespace (_eaa CharCode ,_eab int )bool {for _ ,_gaee :=range cmap ._fab {if _gaee .Low <=_eaa &&_eaa <=_gaee .High &&_eab ==_gaee .NumBytes {return true ;
};};return false ;};func (cmap *CMap )WMode ()(int ,bool ){return cmap ._af ._ccg ,cmap ._af ._adbc };func _dgf (_fdg string )rune {_aeb :=[]rune (_fdg );return _aeb [len (_aeb )-1]};func (cmap *CMap )Stream ()(*_g .PdfObjectStream ,error ){if cmap ._bc !=nil {return cmap ._bc ,nil ;
};_aag ,_bcc :=_g .MakeStream (cmap .Bytes (),_g .NewFlateEncoder ());if _bcc !=nil {return nil ,_bcc ;};cmap ._bc =_aag ;return cmap ._bc ,nil ;};func (cmap *CMap )parse ()error {var _adb cmapObject ;for {_dba ,_cdga :=cmap .parseObject ();if _cdga !=nil {if _cdga ==_da .EOF {break ;
};_e .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u004d\u0061\u0070\u003a\u0020\u0025\u0076",_cdga );return _cdga ;};switch _fgf :=_dba .(type ){case cmapOperand :_daf :=_fgf ;switch _daf .Operand {case _ddg :_gab :=cmap .parseCodespaceRange ();
if _gab !=nil {return _gab ;};case _egc :_dbe :=cmap .parseCIDRange ();if _dbe !=nil {return _dbe ;};case _aff :_cdce :=cmap .parseBfchar ();if _cdce !=nil {return _cdce ;};case _faed :_fbe :=cmap .parseBfrange ();if _fbe !=nil {return _fbe ;};case _efc :if _adb ==nil {_e .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0075\u0073\u0065\u0063m\u0061\u0070\u0020\u0077\u0069\u0074\u0068\u0020\u006e\u006f \u0061\u0072\u0067");
return ErrBadCMap ;};_gaf ,_cf :=_adb .(cmapName );if !_cf {_e .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0075\u0073\u0065\u0063\u006d\u0061\u0070\u0020\u0061\u0072\u0067\u0020\u006eo\u0074\u0020\u0061\u0020\u006e\u0061\u006de\u0020\u0025\u0023\u0076",_adb );
return ErrBadCMap ;};cmap ._ba =_gaf .Name ;case _gga :_bagf :=cmap .parseSystemInfo ();if _bagf !=nil {return _bagf ;};};case cmapName :_fade :=_fgf ;switch _fade .Name {case _gga :_geb :=cmap .parseSystemInfo ();if _geb !=nil {return _geb ;};case _bee :_eda :=cmap .parseName ();
if _eda !=nil {return _eda ;};case _bge :_edg :=cmap .parseType ();if _edg !=nil {return _edg ;};case _cgff :_ebd :=cmap .parseVersion ();if _ebd !=nil {return _ebd ;};case _aaf :if _cdga =cmap .parseWMode ();_cdga !=nil {return _cdga ;};};};_adb =_dba ;
};return nil ;};type cmapName struct{Name string ;};func (cmap *CMap )Bytes ()[]byte {_e .Log .Trace ("\u0063\u006d\u0061\u0070.B\u0079\u0074\u0065\u0073\u003a\u0020\u0063\u006d\u0061\u0070\u003d\u0025\u0073",cmap .String ());if len (cmap ._abe )> 0{return cmap ._abe ;
};cmap ._abe =[]byte (_daa .Join ([]string {_eggf ,cmap .toBfData (),_gbe },"\u000a"));return cmap ._abe ;};func (cmap *CMap )parseVersion ()error {_gfb :="";_ebb :=false ;for _cdcg :=0;_cdcg < 3&&!_ebb ;_cdcg ++{_dbg ,_bdba :=cmap .parseObject ();if _bdba !=nil {return _bdba ;
};switch _afee :=_dbg .(type ){case cmapOperand :switch _afee .Operand {case "\u0064\u0065\u0066":_ebb =true ;default:_e .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0070\u0061\u0072\u0073\u0065\u0056e\u0072\u0073\u0069\u006f\u006e\u003a \u0073\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020o\u003d\u0025\u0023\u0076",_dbg );
return ErrBadCMap ;};case cmapInt :_gfb =_a .Sprintf ("\u0025\u0064",_afee ._ggea );case cmapFloat :_gfb =_a .Sprintf ("\u0025\u0066",_afee ._egae );case cmapString :_gfb =_afee .String ;default:_e .Log .Debug ("\u0045\u0052RO\u0052\u003a\u0020p\u0061\u0072\u0073\u0065Ver\u0073io\u006e\u003a\u0020\u0042\u0061\u0064\u0020ty\u0070\u0065\u002e\u0020\u006f\u003d\u0025#\u0076",_dbg );
};};cmap ._fad =_gfb ;return nil ;};func (_gbad *cMapParser )parseString ()(cmapString ,error ){_gbad ._bcec .ReadByte ();_deee :=_fb .Buffer {};_eadg :=1;for {_acgd ,_ggfa :=_gbad ._bcec .Peek (1);if _ggfa !=nil {return cmapString {_deee .String ()},_ggfa ;
};if _acgd [0]=='\\'{_gbad ._bcec .ReadByte ();_ecfg ,_fgc :=_gbad ._bcec .ReadByte ();if _fgc !=nil {return cmapString {_deee .String ()},_fgc ;};if _g .IsOctalDigit (_ecfg ){_fabb ,_ecbb :=_gbad ._bcec .Peek (2);if _ecbb !=nil {return cmapString {_deee .String ()},_ecbb ;
};var _bcaf []byte ;_bcaf =append (_bcaf ,_ecfg );for _ ,_dfc :=range _fabb {if _g .IsOctalDigit (_dfc ){_bcaf =append (_bcaf ,_dfc );}else {break ;};};_gbad ._bcec .Discard (len (_bcaf )-1);_e .Log .Trace ("\u004e\u0075\u006d\u0065ri\u0063\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0022\u0025\u0073\u0022",_bcaf );
_fde ,_ecbb :=_ab .ParseUint (string (_bcaf ),8,32);if _ecbb !=nil {return cmapString {_deee .String ()},_ecbb ;};_deee .WriteByte (byte (_fde ));continue ;};switch _ecfg {case 'n':_deee .WriteByte ('\n');case 'r':_deee .WriteByte ('\r');case 't':_deee .WriteByte ('\t');
case 'b':_deee .WriteByte ('\b');case 'f':_deee .WriteByte ('\f');case '(':_deee .WriteByte ('(');case ')':_deee .WriteByte (')');case '\\':_deee .WriteByte ('\\');};continue ;}else if _acgd [0]=='('{_eadg ++;}else if _acgd [0]==')'{_eadg --;if _eadg ==0{_gbad ._bcec .ReadByte ();
break ;};};_abag ,_ :=_gbad ._bcec .ReadByte ();_deee .WriteByte (_abag );};return cmapString {_deee .String ()},nil ;};func (cmap *CMap )parseBfrange ()error {for {var _bbec CharCode ;_dgc ,_agb :=cmap .parseObject ();if _agb !=nil {if _agb ==_da .EOF {break ;
};return _agb ;};switch _bba :=_dgc .(type ){case cmapOperand :if _bba .Operand ==_bfcc {return nil ;};return _fa .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");case cmapHexString :_bbec =_adbd (_bba );
default:return _fa .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065");};var _cbb CharCode ;_dgc ,_agb =cmap .parseObject ();if _agb !=nil {if _agb ==_da .EOF {break ;};return _agb ;};switch _ada :=_dgc .(type ){case cmapOperand :_e .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0049\u006e\u0063\u006f\u006d\u0070\u006c\u0065\u0074\u0065\u0020\u0062\u0066r\u0061\u006e\u0067\u0065\u0020\u0074\u0072i\u0070\u006c\u0065\u0074");
return ErrBadCMap ;case cmapHexString :_cbb =_adbd (_ada );if _cbb > 0xffff{_cbb =0xffff;};default:_e .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0055\u006e\u0065\u0078\u0070e\u0063t\u0065d\u0020\u0074\u0079\u0070\u0065\u0020\u0025T",_dgc );return ErrBadCMap ;
};_dgc ,_agb =cmap .parseObject ();if _agb !=nil {if _agb ==_da .EOF {break ;};return _agb ;};switch _aec :=_dgc .(type ){case cmapArray :if len (_aec .Array )!=int (_cbb -_bbec )+1{_e .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u006f\u0066\u0020\u0069\u0074\u0065\u006d\u0073\u0020\u0069\u006e\u0020a\u0072\u0072\u0061\u0079");
return ErrBadCMap ;};for _ead :=_bbec ;_ead <=_cbb ;_ead ++{_gafg :=_aec .Array [_ead -_bbec ];_gba ,_aebbe :=_gafg .(cmapHexString );if !_aebbe {return _fa .New ("\u006e\u006f\u006e-h\u0065\u0078\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0069\u006e\u0020\u0061\u0072\u0072\u0061\u0079");
};_acg :=_ggec (_gba );cmap ._feg [_ead ]=string (_acg );};case cmapHexString :_egeb :=_ggec (_aec );_cdag :=len (_egeb );for _abg :=_bbec ;_abg <=_cbb ;_abg ++{cmap ._feg [_abg ]=string (_egeb );if _cdag > 0{_egeb [_cdag -1]++;}else {_e .Log .Debug ("\u004e\u006f\u0020c\u006d\u0061\u0070\u0020\u0074\u0061\u0072\u0067\u0065\u0074\u0020\u0063\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0066\u006f\u0072\u0020\u0025\u0023\u0076",_abg );
};if _abg ==1<<32-1{break ;};};default:_e .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0055\u006e\u0065\u0078\u0070e\u0063t\u0065d\u0020\u0074\u0079\u0070\u0065\u0020\u0025T",_dgc );return ErrBadCMap ;};};return nil ;};type cmapFloat struct{_egae float64 };
type cmapString struct{String string ;};func _ggec (_dfeec cmapHexString )[]rune {if len (_dfeec ._fcc )==1{return []rune {rune (_dfeec ._fcc [0])};};_edc :=_dfeec ._fcc ;if len (_edc )%2!=0{_edc =append (_edc ,0);_e .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0068\u0065\u0078\u0054\u006f\u0052\u0075\u006e\u0065\u0073\u002e\u0020\u0050\u0061\u0064\u0064\u0069\u006e\u0067\u0020\u0073\u0068\u0065\u0078\u003d\u0025#\u0076\u0020\u0074\u006f\u0020\u0025\u002b\u0076",_dfeec ,_edc );
};_eggb :=len (_edc )>>1;_gbeb :=make ([]uint16 ,_eggb );for _adbe :=0;_adbe < _eggb ;_adbe ++{_gbeb [_adbe ]=uint16 (_edc [_adbe <<1])<<8+uint16 (_edc [_adbe <<1+1]);};_aabc :=_fe .Decode (_gbeb );return _aabc ;};func (cmap *CMap )parseBfchar ()error {for {_bage ,_bbd :=cmap .parseObject ();
if _bbd !=nil {if _bbd ==_da .EOF {break ;};return _bbd ;};var _fgdg CharCode ;switch _cge :=_bage .(type ){case cmapOperand :if _cge .Operand ==_dgb {return nil ;};return _fa .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");
case cmapHexString :_fgdg =_adbd (_cge );default:return _fa .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065");};_bage ,_bbd =cmap .parseObject ();if _bbd !=nil {if _bbd ==_da .EOF {break ;};return _bbd ;};var _dfg []rune ;
switch _aef :=_bage .(type ){case cmapOperand :if _aef .Operand ==_dgb {return nil ;};_e .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0055\u006e\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020o\u0070\u0065\u0072\u0061\u006e\u0064\u002e\u0020\u0025\u0023\u0076",_aef );
return ErrBadCMap ;case cmapHexString :_dfg =_ggec (_aef );case cmapName :_e .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064 \u006e\u0061\u006de\u002e \u0025\u0023\u0076",_aef );_dfg =[]rune {MissingCodeRune };
default:_e .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064 \u0074\u0079\u0070e\u002e \u0025\u0023\u0076",_bage );return ErrBadCMap ;};cmap ._feg [_fgdg ]=string (_dfg );};return nil ;};var (ErrBadCMap =_fa .New ("\u0062\u0061\u0064\u0020\u0063\u006d\u0061\u0070");
ErrBadCMapComment =_fa .New ("c\u006f\u006d\u006d\u0065\u006e\u0074 \u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0073\u0074a\u0072\u0074\u0020w\u0069t\u0068\u0020\u0025");ErrBadCMapDict =_fa .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074");
);func (cmap *CMap )Type ()int {return cmap ._ed };func (cmap *CMap )CharcodeBytesToUnicode (data []byte )(string ,int ){_egf ,_fca :=cmap .BytesToCharcodes (data );if !_fca {_e .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0043\u0068\u0061\u0072\u0063\u006f\u0064\u0065\u0042\u0079\u0074\u0065s\u0054\u006f\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u002e\u0020\u004e\u006f\u0074\u0020\u0069n\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u002e\u0020\u0064\u0061\u0074\u0061\u003d\u005b\u0025\u0020\u0030\u0032\u0078]\u0020\u0063\u006d\u0061\u0070=\u0025\u0073",data ,cmap );
return "",0;};_fgd :=make ([]string ,len (_egf ));var _adg []CharCode ;for _adge ,_fcd :=range _egf {_dad ,_bcg :=cmap ._feg [_fcd ];if !_bcg {_adg =append (_adg ,_fcd );_dad =MissingCodeString ;};_fgd [_adge ]=_dad ;};_agf :=_daa .Join (_fgd ,"");if len (_adg )> 0{_e .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020C\u0068\u0061\u0072c\u006f\u0064\u0065\u0042y\u0074\u0065\u0073\u0054\u006f\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u002e\u0020\u004e\u006f\u0074\u0020\u0069\u006e\u0020\u006d\u0061\u0070\u002e\u000a"+"\u0009d\u0061t\u0061\u003d\u005b\u0025\u00200\u0032\u0078]\u003d\u0025\u0023\u0071\u000a"+"\u0009\u0063h\u0061\u0072\u0063o\u0064\u0065\u0073\u003d\u0025\u0030\u0032\u0078\u000a"+"\u0009\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u003d\u0025\u0064\u0020%\u0030\u0032\u0078\u000a"+"\u0009\u0075\u006e\u0069\u0063\u006f\u0064\u0065\u003d`\u0025\u0073\u0060\u000a"+"\u0009\u0063\u006d\u0061\u0070\u003d\u0025\u0073",data ,string (data ),_egf ,len (_adg ),_adg ,_agf ,cmap );
};return _agf ,len (_adg );};func (_cgd *cMapParser )parseName ()(cmapName ,error ){_affcf :="";_dddc :=false ;for {_bgeg ,_fbc :=_cgd ._bcec .Peek (1);if _fbc ==_da .EOF {break ;};if _fbc !=nil {return cmapName {_affcf },_fbc ;};if !_dddc {if _bgeg [0]=='/'{_dddc =true ;
_cgd ._bcec .ReadByte ();}else {_e .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u004e\u0061\u006d\u0065\u0020\u0073\u0074a\u0072t\u0069n\u0067 \u0077\u0069\u0074\u0068\u0020\u0025\u0073\u0020\u0028\u0025\u0020\u0078\u0029",_bgeg ,_bgeg );return cmapName {_affcf },_a .Errorf ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006ea\u006d\u0065:\u0020\u0028\u0025\u0063\u0029",_bgeg [0]);
};}else {if _g .IsWhiteSpace (_bgeg [0]){break ;}else if (_bgeg [0]=='/')||(_bgeg [0]=='[')||(_bgeg [0]=='(')||(_bgeg [0]==']')||(_bgeg [0]=='<')||(_bgeg [0]=='>'){break ;}else if _bgeg [0]=='#'{_bade ,_cbg :=_cgd ._bcec .Peek (3);if _cbg !=nil {return cmapName {_affcf },_cbg ;
};_cgd ._bcec .Discard (3);_afb ,_cbg :=_ae .DecodeString (string (_bade [1:3]));if _cbg !=nil {return cmapName {_affcf },_cbg ;};_affcf +=string (_afb );}else {_bcd ,_ :=_cgd ._bcec .ReadByte ();_affcf +=string (_bcd );};};};return cmapName {_affcf },nil ;
};func _cdb ()cmapDict {return cmapDict {Dict :map[string ]cmapObject {}}};func (cmap *CMap )CharcodeToUnicode (code CharCode )(string ,bool ){if _bd ,_dcd :=cmap ._feg [code ];_dcd {return _bd ,true ;};return MissingCodeString ,false ;};func NewToUnicodeCMap (codeToRune map[CharCode ]rune )*CMap {_gf :=make (map[CharCode ]string ,len (codeToRune ));
for _faef ,_fee :=range codeToRune {_gf [_faef ]=string (_fee );};cmap :=&CMap {_cb :"\u0041d\u006fb\u0065\u002d\u0049\u0064\u0065n\u0074\u0069t\u0079\u002d\u0055\u0043\u0053",_ed :2,_de :16,_fg :CIDSystemInfo {Registry :"\u0041\u0064\u006fb\u0065",Ordering :"\u0055\u0043\u0053",Supplement :0},_fab :[]Codespace {{Low :0,High :0xffff}},_feg :_gf ,_ee :make (map[string ]CharCode ,len (codeToRune )),_fc :make (map[CharCode ]CharCode ,len (codeToRune )),_fd :make (map[CharCode ]CharCode ,len (codeToRune ))};
cmap .computeInverseMappings ();return cmap ;};func _gabc (_agfe cmapHexString )rune {_fdc :=_ggec (_agfe );if _fbdf :=len (_fdc );_fbdf ==0{_e .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0068\u0065\u0078\u0054o\u0052\u0075\u006e\u0065\u002e\u0020\u0045\u0078p\u0065c\u0074\u0065\u0064\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0072u\u006e\u0065\u0020\u0073\u0068\u0065\u0078\u003d\u0025\u0023\u0076",_agfe );
return MissingCodeRune ;};if len (_fdc )> 1{_e .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0068\u0065\u0078\u0054\u006f\u0052\u0075\u006e\u0065\u002e\u0020\u0045\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0065\u0078\u0061\u0063\u0074\u006c\u0079\u0020\u006f\u006e\u0065\u0020\u0072\u0075\u006e\u0065\u0020\u0073\u0068\u0065\u0078\u003d\u0025\u0023v\u0020\u002d\u003e\u0020\u0025#\u0076",_agfe ,_fdc );
};return _fdc [0];};func (cmap *CMap )parseName ()error {_abcf :="";_gdbeb :=false ;for _cgca :=0;_cgca < 20&&!_gdbeb ;_cgca ++{_ffg ,_bdf :=cmap .parseObject ();if _bdf !=nil {return _bdf ;};switch _degf :=_ffg .(type ){case cmapOperand :switch _degf .Operand {case "\u0064\u0065\u0066":_gdbeb =true ;
default:_e .Log .Debug ("\u0070\u0061\u0072\u0073\u0065\u004e\u0061\u006d\u0065\u003a\u0020\u0053\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020o\u003d\u0025\u0023\u0076\u0020n\u0061\u006de\u003d\u0025\u0023\u0071",_ffg ,_abcf );
if _abcf !=""{_abcf =_a .Sprintf ("\u0025\u0073\u0020%\u0073",_abcf ,_degf .Operand );};_e .Log .Debug ("\u0070\u0061\u0072\u0073\u0065\u004e\u0061\u006d\u0065\u003a \u0052\u0065\u0063\u006f\u0076\u0065\u0072e\u0064\u002e\u0020\u006e\u0061\u006d\u0065\u003d\u0025\u0023\u0071",_abcf );
};case cmapName :_abcf =_degf .Name ;};};if !_gdbeb {_e .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0070\u0061\u0072\u0073\u0065N\u0061m\u0065:\u0020\u004e\u006f\u0020\u0064\u0065\u0066 ");return ErrBadCMap ;};cmap ._cb =_abcf ;return nil ;};func _adbd (_aeeb cmapHexString )CharCode {_deb :=CharCode (0);
for _ ,_acf :=range _aeeb ._fcc {_deb <<=8;_deb |=CharCode (_acf );};return _deb ;};func (_fdfe *cMapParser )skipSpaces ()(int ,error ){_aedb :=0;for {_dgg ,_cbd :=_fdfe ._bcec .Peek (1);if _cbd !=nil {return 0,_cbd ;};if _g .IsWhiteSpace (_dgg [0]){_fdfe ._bcec .ReadByte ();
_aedb ++;}else {break ;};};return _aedb ,nil ;};type CIDSystemInfo struct{Registry string ;Ordering string ;Supplement int ;};func (cmap *CMap )NBits ()int {return cmap ._de };type CMap struct{*cMapParser ;_cb string ;_de int ;_ed int ;_fad string ;_ba string ;
_fg CIDSystemInfo ;_fab []Codespace ;_fc map[CharCode ]CharCode ;_fd map[CharCode ]CharCode ;_feg map[CharCode ]string ;_ee map[string ]CharCode ;_abe []byte ;_bc *_g .PdfObjectStream ;_af integer ;};func (_aabf *cMapParser )parseHexString ()(cmapHexString ,error ){_aabf ._bcec .ReadByte ();
_aafd :=[]byte ("\u0030\u0031\u0032\u003345\u0036\u0037\u0038\u0039\u0061\u0062\u0063\u0064\u0065\u0066\u0041\u0042\u0043\u0044E\u0046");_dfa :=_fb .Buffer {};for {_aabf .skipSpaces ();_fdgg ,_cfgb :=_aabf ._bcec .Peek (1);if _cfgb !=nil {return cmapHexString {},_cfgb ;
};if _fdgg [0]=='>'{_aabf ._bcec .ReadByte ();break ;};_fdd ,_ :=_aabf ._bcec .ReadByte ();if _fb .IndexByte (_aafd ,_fdd )>=0{_dfa .WriteByte (_fdd );};};if _dfa .Len ()%2==1{_e .Log .Debug ("\u0070\u0061rs\u0065\u0048\u0065x\u0053\u0074\u0072\u0069ng:\u0020ap\u0070\u0065\u006e\u0064\u0069\u006e\u0067 '\u0030\u0027\u0020\u0074\u006f\u0020\u0025#\u0071",_dfa .String ());
_dfa .WriteByte ('0');};_ddaa :=_dfa .Len ()/2;_dbdf ,_ :=_ae .DecodeString (_dfa .String ());return cmapHexString {_ece :_ddaa ,_fcc :_dbdf },nil ;};type cmapObject interface{};type cmapDict struct{Dict map[string ]cmapObject ;};func (cmap *CMap )parseType ()error {_bce :=0;
_fbd :=false ;for _fdb :=0;_fdb < 3&&!_fbd ;_fdb ++{_fbdc ,_edde :=cmap .parseObject ();if _edde !=nil {return _edde ;};switch _cag :=_fbdc .(type ){case cmapOperand :switch _cag .Operand {case "\u0064\u0065\u0066":_fbd =true ;default:_e .Log .Error ("\u0070\u0061r\u0073\u0065\u0054\u0079\u0070\u0065\u003a\u0020\u0073\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020\u006f=%\u0023\u0076",_fbdc );
return ErrBadCMap ;};case cmapInt :_bce =int (_cag ._ggea );};};cmap ._ed =_bce ;return nil ;};type charRange struct{_gb CharCode ;_ggg CharCode ;};type Codespace struct{NumBytes int ;Low CharCode ;High CharCode ;};func (cmap *CMap )CIDToCharcode (cid CharCode )(CharCode ,bool ){_bgc ,_be :=cmap ._fd [cid ];
return _bgc ,_be ;};func (cmap *CMap )computeInverseMappings (){for _eba ,_ag :=range cmap ._fc {if _edd ,_fce :=cmap ._fd [_ag ];!_fce ||(_fce &&_edd > _eba ){cmap ._fd [_ag ]=_eba ;};};for _dg ,_db :=range cmap ._feg {if _cdc ,_daab :=cmap ._ee [_db ];
!_daab ||(_daab &&_cdc > _dg ){cmap ._ee [_db ]=_dg ;};};_fea .Slice (cmap ._fab ,func (_dc ,_gdb int )bool {return cmap ._fab [_dc ].Low < cmap ._fab [_gdb ].Low });};func (cmap *CMap )parseWMode ()error {var _ggdb int ;_ebad :=false ;for _aab :=0;_aab < 3&&!_ebad ;
_aab ++{_def ,_agg :=cmap .parseObject ();if _agg !=nil {return _agg ;};switch _gcd :=_def .(type ){case cmapOperand :switch _gcd .Operand {case "\u0064\u0065\u0066":_ebad =true ;default:_e .Log .Error ("\u0070\u0061\u0072\u0073\u0065\u0057\u004d\u006f\u0064\u0065:\u0020\u0073\u0074\u0061\u0074\u0065\u0020e\u0072\u0072\u006f\u0072\u002e\u0020\u006f\u003d\u0025\u0023\u0076",_def );
return ErrBadCMap ;};case cmapInt :_ggdb =int (_gcd ._ggea );};};cmap ._af =integer {_adbc :true ,_ccg :_ggdb };return nil ;};func (cmap *CMap )parseSystemInfo ()error {_bca :=false ;_dda :=false ;_aebb :="";_dgfc :=false ;_bcea :=CIDSystemInfo {};for _afgd :=0;
_afgd < 50&&!_dgfc ;_afgd ++{_gcb ,_gcbc :=cmap .parseObject ();if _gcbc !=nil {return _gcbc ;};switch _bdd :=_gcb .(type ){case cmapDict :_cdfd :=_bdd .Dict ;_fdgb ,_bac :=_cdfd ["\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079"];if !_bac {_e .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");
return ErrBadCMap ;};_dbea ,_bac :=_fdgb .(cmapString );if !_bac {_e .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_bcea .Registry =_dbea .String ;
_fdgb ,_bac =_cdfd ["\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067"];if !_bac {_e .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_dbea ,_bac =_fdgb .(cmapString );
if !_bac {_e .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_bcea .Ordering =_dbea .String ;_cad ,_bac :=_cdfd ["\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074"];
if !_bac {_e .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_aed ,_bac :=_cad .(cmapInt );if !_bac {_e .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");
return ErrBadCMap ;};_bcea .Supplement =int (_aed ._ggea );_dgfc =true ;case cmapOperand :switch _bdd .Operand {case "\u0062\u0065\u0067i\u006e":_bca =true ;case "\u0065\u006e\u0064":_dgfc =true ;case "\u0064\u0065\u0066":_dda =false ;};case cmapName :if _bca {_aebb =_bdd .Name ;
_dda =true ;};case cmapString :if _dda {switch _aebb {case "\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079":_bcea .Registry =_bdd .String ;case "\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067":_bcea .Ordering =_bdd .String ;};};case cmapInt :if _dda {switch _aebb {case "\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074":_bcea .Supplement =int (_bdd ._ggea );
};};};};if !_dgfc {_e .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0050\u0061\u0072\u0073\u0065\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006e\u0066\u006f\u0020\u0064\u0069\u0063\u0074\u0020\u0069\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u006c\u0079");
return ErrBadCMap ;};cmap ._fg =_bcea ;return nil ;};type fbRange struct{_gd CharCode ;_c CharCode ;_cd string ;};func (cmap *CMap )CIDSystemInfo ()CIDSystemInfo {return cmap ._fg };func (_dfbb *cMapParser )parseArray ()(cmapArray ,error ){_dggc :=cmapArray {};
_dggc .Array =[]cmapObject {};_dfbb ._bcec .ReadByte ();for {_dfbb .skipSpaces ();_dga ,_aaa :=_dfbb ._bcec .Peek (1);if _aaa !=nil {return _dggc ,_aaa ;};if _dga [0]==']'{_dfbb ._bcec .ReadByte ();break ;};_fbb ,_aaa :=_dfbb .parseObject ();if _aaa !=nil {return _dggc ,_aaa ;
};_dggc .Array =append (_dggc .Array ,_fbb );};return _dggc ,nil ;};func IsPredefinedCMap (name string )bool {return _b .AssetExists (name )};func (cmap *CMap )toBfData ()string {if len (cmap ._feg )==0{return "";};_afg :=make ([]CharCode ,0,len (cmap ._feg ));
for _fegg :=range cmap ._feg {_afg =append (_afg ,_fegg );};_fea .Slice (_afg ,func (_cab ,_fecf int )bool {return _afg [_cab ]< _afg [_fecf ]});var _gddc []charRange ;_caf :=charRange {_afg [0],_afg [0]};_ef :=cmap ._feg [_afg [0]];for _ ,_dfb :=range _afg [1:]{_ggd :=cmap ._feg [_dfb ];
if _dfb ==_caf ._ggg +1&&_dgf (_ggd )==_dgf (_ef )+1{_caf ._ggg =_dfb ;}else {_gddc =append (_gddc ,_caf );_caf ._gb ,_caf ._ggg =_dfb ,_dfb ;};_ef =_ggd ;};_gddc =append (_gddc ,_caf );var _dcc []CharCode ;var _aga []fbRange ;for _ ,_cdf :=range _gddc {if _cdf ._gb ==_cdf ._ggg {_dcc =append (_dcc ,_cdf ._gb );
}else {_aga =append (_aga ,fbRange {_gd :_cdf ._gb ,_c :_cdf ._ggg ,_cd :cmap ._feg [_cdf ._gb ]});};};_e .Log .Trace ("\u0063\u0068ar\u0052\u0061\u006eg\u0065\u0073\u003d\u0025d f\u0062Ch\u0061\u0072\u0073\u003d\u0025\u0064\u0020fb\u0052\u0061\u006e\u0067\u0065\u0073\u003d%\u0064",len (_gddc ),len (_dcc ),len (_aga ));
var _deg []string ;if len (_dcc )> 0{_gag :=(len (_dcc )+_dcb -1)/_dcb ;for _dee :=0;_dee < _gag ;_dee ++{_fabd :=_ccgc (len (_dcc )-_dee *_dcb ,_dcb );_deg =append (_deg ,_a .Sprintf ("\u0025\u0064\u0020\u0062\u0065\u0067\u0069\u006e\u0062f\u0063\u0068\u0061\u0072",_fabd ));
for _bdb :=0;_bdb < _fabd ;_bdb ++{_eggc :=_dcc [_dee *_dcb +_bdb ];_baga :=cmap ._feg [_eggc ];_deg =append (_deg ,_a .Sprintf ("\u003c%\u0030\u0034\u0078\u003e\u0020\u0025s",_eggc ,_bfe (_baga )));};_deg =append (_deg ,"\u0065n\u0064\u0062\u0066\u0063\u0068\u0061r");
};};if len (_aga )> 0{_cdg :=(len (_aga )+_dcb -1)/_dcb ;for _fdf :=0;_fdf < _cdg ;_fdf ++{_bbe :=_ccgc (len (_aga )-_fdf *_dcb ,_dcb );_deg =append (_deg ,_a .Sprintf ("\u0025d\u0020b\u0065\u0067\u0069\u006e\u0062\u0066\u0072\u0061\u006e\u0067\u0065",_bbe ));
for _afdc :=0;_afdc < _bbe ;_afdc ++{_cgbc :=_aga [_fdf *_dcb +_afdc ];_deg =append (_deg ,_a .Sprintf ("\u003c%\u00304\u0078\u003e\u003c\u0025\u0030\u0034\u0078\u003e\u0020\u0025\u0073",_cgbc ._gd ,_cgbc ._c ,_bfe (_cgbc ._cd )));};_deg =append (_deg ,"\u0065\u006e\u0064\u0062\u0066\u0072\u0061\u006e\u0067\u0065");
};};return _daa .Join (_deg ,"\u000a");};func (cmap *CMap )CharcodeToCID (code CharCode )(CharCode ,bool ){_ec ,_afa :=cmap ._fc [code ];return _ec ,_afa ;};func (cmap *CMap )StringToCID (s string )(CharCode ,bool ){_cbe ,_fadb :=cmap ._ee [s ];return _cbe ,_fadb ;
};