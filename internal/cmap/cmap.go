//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package cmap ;import (_e "bufio";_cd "bytes";_a "encoding/hex";_gb "errors";_c "fmt";_de "github.com/unidoc/unipdf/v3/common";_b "github.com/unidoc/unipdf/v3/core";_gf "github.com/unidoc/unipdf/v3/internal/cmap/bcmaps";_f "io";_af "sort";_d "strconv";_db "strings";
_ce "unicode/utf16";);func (_efgg *cMapParser )parseComment ()(string ,error ){var _bccd _cd .Buffer ;_ ,_abc :=_efgg .skipSpaces ();if _abc !=nil {return _bccd .String (),_abc ;};_eda :=true ;for {_caa ,_edeg :=_efgg ._efcfa .Peek (1);if _edeg !=nil {_de .Log .Debug ("p\u0061r\u0073\u0065\u0043\u006f\u006d\u006d\u0065\u006et\u003a\u0020\u0065\u0072r=\u0025\u0076",_edeg );
return _bccd .String (),_edeg ;};if _eda &&_caa [0]!='%'{return _bccd .String (),ErrBadCMapComment ;};_eda =false ;if (_caa [0]!='\r')&&(_caa [0]!='\n'){_cga ,_ :=_efgg ._efcfa .ReadByte ();_bccd .WriteByte (_cga );}else {break ;};};return _bccd .String (),nil ;
};func _dcf (_agbf string )rune {_abd :=[]rune (_agbf );return _abd [len (_abd )-1]};type fbRange struct{_cf CharCode ;_def CharCode ;_fg string ;};func (_dccg *cMapParser )parseOperand ()(cmapOperand ,error ){_degg :=cmapOperand {};_ege :=_cd .Buffer {};
for {_agg ,_ccb :=_dccg ._efcfa .Peek (1);if _ccb !=nil {if _ccb ==_f .EOF {break ;};return _degg ,_ccb ;};if _b .IsDelimiter (_agg [0]){break ;};if _b .IsWhiteSpace (_agg [0]){break ;};_bedcb ,_ :=_dccg ._efcfa .ReadByte ();_ege .WriteByte (_bedcb );};
if _ege .Len ()==0{return _degg ,_c .Errorf ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064\u0020\u0028\u0065\u006d\u0070\u0074\u0079\u0029");};_degg .Operand =_ege .String ();return _degg ,nil ;};type cmapDict struct{Dict map[string ]cmapObject ;
};func LoadCmapFromDataCID (data []byte )(*CMap ,error ){return LoadCmapFromData (data ,false )};func (cmap *CMap )Stream ()(*_b .PdfObjectStream ,error ){if cmap ._ace !=nil {return cmap ._ace ,nil ;};_aaf ,_ffbg :=_b .MakeStream (cmap .Bytes (),_b .NewFlateEncoder ());
if _ffbg !=nil {return nil ,_ffbg ;};cmap ._ace =_aaf ;return cmap ._ace ,nil ;};func (cmap *CMap )String ()string {_eeb :=cmap ._ec ;_bdg :=[]string {_c .Sprintf ("\u006e\u0062\u0069\u0074\u0073\u003a\u0025\u0064",cmap ._fge ),_c .Sprintf ("\u0074y\u0070\u0065\u003a\u0025\u0064",cmap ._eb )};
if cmap ._bgb !=""{_bdg =append (_bdg ,_c .Sprintf ("\u0076\u0065\u0072\u0073\u0069\u006f\u006e\u003a\u0025\u0073",cmap ._bgb ));};if cmap ._dd !=""{_bdg =append (_bdg ,_c .Sprintf ("u\u0073\u0065\u0063\u006d\u0061\u0070\u003a\u0025\u0023\u0071",cmap ._dd ));
};_bdg =append (_bdg ,_c .Sprintf ("\u0073\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f\u003a\u0025\u0073",_eeb .String ()));if len (cmap ._bc )> 0{_bdg =append (_bdg ,_c .Sprintf ("\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u003a\u0025\u0064",len (cmap ._bc )));
};if len (cmap ._ga )> 0{_bdg =append (_bdg ,_c .Sprintf ("\u0063\u006fd\u0065\u0054\u006fU\u006e\u0069\u0063\u006f\u0064\u0065\u003a\u0025\u0064",len (cmap ._ga )));};return _c .Sprintf ("\u0043\u004d\u0041P\u007b\u0025\u0023\u0071\u0020\u0025\u0073\u007d",cmap ._ee ,_db .Join (_bdg ,"\u0020"));
};func (_bb *CIDSystemInfo )String ()string {return _c .Sprintf ("\u0025\u0073\u002d\u0025\u0073\u002d\u0025\u0030\u0033\u0064",_bb .Registry ,_bb .Ordering ,_bb .Supplement );};func (cmap *CMap )CIDToCharcode (cid CharCode )(CharCode ,bool ){_caed ,_agb :=cmap ._dbd [cid ];
return _caed ,_agb ;};func (_ggd *cMapParser )parseDict ()(cmapDict ,error ){_de .Log .Trace ("\u0052\u0065\u0061\u0064\u0069\u006e\u0067\u0020\u0050\u0044\u0046\u0020D\u0069\u0063\u0074\u0021");_eaa :=_bgf ();_ddgc ,_ :=_ggd ._efcfa .ReadByte ();if _ddgc !='<'{return _eaa ,ErrBadCMapDict ;
};_ddgc ,_ =_ggd ._efcfa .ReadByte ();if _ddgc !='<'{return _eaa ,ErrBadCMapDict ;};for {_ggd .skipSpaces ();_accg ,_cbf :=_ggd ._efcfa .Peek (2);if _cbf !=nil {return _eaa ,_cbf ;};if (_accg [0]=='>')&&(_accg [1]=='>'){_ggd ._efcfa .ReadByte ();_ggd ._efcfa .ReadByte ();
break ;};_dea ,_cbf :=_ggd .parseName ();_de .Log .Trace ("\u004be\u0079\u003a\u0020\u0025\u0073",_dea .Name );if _cbf !=nil {_de .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0052\u0065\u0074\u0075\u0072\u006e\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u002e\u0020\u0065\u0072r=\u0025\u0076",_cbf );
return _eaa ,_cbf ;};_ggd .skipSpaces ();_dfff ,_cbf :=_ggd .parseObject ();if _cbf !=nil {return _eaa ,_cbf ;};_eaa .Dict [_dea .Name ]=_dfff ;_ggd .skipSpaces ();_accg ,_cbf =_ggd ._efcfa .Peek (3);if _cbf !=nil {return _eaa ,_cbf ;};if string (_accg )=="\u0064\u0065\u0066"{_ggd ._efcfa .Discard (3);
};};return _eaa ,nil ;};func (cmap *CMap )Type ()int {return cmap ._eb };func (cmap *CMap )parseVersion ()error {_bea :="";_ega :=false ;for _bfg :=0;_bfg < 3&&!_ega ;_bfg ++{_gea ,_cb :=cmap .parseObject ();if _cb !=nil {return _cb ;};switch _dceg :=_gea .(type ){case cmapOperand :switch _dceg .Operand {case "\u0064\u0065\u0066":_ega =true ;
default:_de .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0070\u0061\u0072\u0073\u0065\u0056e\u0072\u0073\u0069\u006f\u006e\u003a \u0073\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020o\u003d\u0025\u0023\u0076",_gea );
return ErrBadCMap ;};case cmapInt :_bea =_c .Sprintf ("\u0025\u0064",_dceg ._gdee );case cmapFloat :_bea =_c .Sprintf ("\u0025\u0066",_dceg ._ebdd );case cmapString :_bea =_dceg .String ;default:_de .Log .Debug ("\u0045\u0052RO\u0052\u003a\u0020p\u0061\u0072\u0073\u0065Ver\u0073io\u006e\u003a\u0020\u0042\u0061\u0064\u0020ty\u0070\u0065\u002e\u0020\u006f\u003d\u0025#\u0076",_gea );
};};cmap ._bgb =_bea ;return nil ;};type integer struct{_bgee bool ;_eabf int ;};const (_ff =4;MissingCodeRune ='\ufffd';MissingCodeString =string (MissingCodeRune ););const (_fbca ="\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f";
_eefa ="\u0062e\u0067\u0069\u006e\u0063\u006d\u0061p";_efcf ="\u0065n\u0064\u0063\u006d\u0061\u0070";_cade ="\u0062\u0065\u0067\u0069nc\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0072\u0061\u006e\u0067\u0065";_afaf ="\u0065\u006e\u0064\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065r\u0061\u006e\u0067\u0065";
_bade ="b\u0065\u0067\u0069\u006e\u0062\u0066\u0063\u0068\u0061\u0072";_ceec ="\u0065n\u0064\u0062\u0066\u0063\u0068\u0061r";_eada ="\u0062\u0065\u0067i\u006e\u0062\u0066\u0072\u0061\u006e\u0067\u0065";_aaab ="\u0065\u006e\u0064\u0062\u0066\u0072\u0061\u006e\u0067\u0065";
_dfbe ="\u0062\u0065\u0067\u0069\u006e\u0063\u0069\u0064\u0072\u0061\u006e\u0067\u0065";_fcga ="e\u006e\u0064\u0063\u0069\u0064\u0072\u0061\u006e\u0067\u0065";_gga ="\u0075s\u0065\u0063\u006d\u0061\u0070";_gdc ="\u0057\u004d\u006fd\u0065";_cgef ="\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065";
_acef ="\u0043\u004d\u0061\u0070\u0054\u0079\u0070\u0065";_bgaa ="C\u004d\u0061\u0070\u0056\u0065\u0072\u0073\u0069\u006f\u006e";);func (cmap *CMap )parseCIDRange ()error {for {_cee ,_gcag :=cmap .parseObject ();if _gcag !=nil {if _gcag ==_f .EOF {break ;
};return _gcag ;};_adb ,_aga :=_cee .(cmapHexString );if !_aga {if _dae ,_dbcg :=_cee .(cmapOperand );_dbcg {if _dae .Operand ==_fcga {return nil ;};return _gb .New ("\u0063\u0069\u0064\u0020\u0069\u006e\u0074\u0065\u0072\u0076\u0061\u006c\u0020s\u0074\u0061\u0072\u0074\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0068\u0065\u0078\u0020\u0073t\u0072\u0069\u006e\u0067");
};};_cec :=_geec (_adb );_cee ,_gcag =cmap .parseObject ();if _gcag !=nil {if _gcag ==_f .EOF {break ;};return _gcag ;};_ebd ,_aga :=_cee .(cmapHexString );if !_aga {return _gb .New ("\u0063\u0069d\u0020\u0069\u006e\u0074e\u0072\u0076a\u006c\u0020\u0065\u006e\u0064\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0068\u0065\u0078\u0020\u0073t\u0072\u0069\u006e\u0067");
};if len (_adb ._ddf )!=len (_ebd ._ddf ){return _gb .New ("\u0075\u006e\u0065\u0071\u0075\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0062\u0079\u0074\u0065\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065");};_acdc :=_geec (_ebd );
if _cec > _acdc {_de .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0043\u0049\u0044\u0020\u0072\u0061\u006e\u0067\u0065\u002e\u0020\u0073t\u0061\u0072\u0074\u003d\u0030\u0078\u0025\u0030\u0032\u0078\u0020\u0065\u006e\u0064=\u0030x\u0025\u0030\u0032\u0078",_cec ,_acdc );
return ErrBadCMap ;};_cee ,_gcag =cmap .parseObject ();if _gcag !=nil {if _gcag ==_f .EOF {break ;};return _gcag ;};_dfa ,_aga :=_cee .(cmapInt );if !_aga {return _gb .New ("\u0063\u0069\u0064\u0020\u0073t\u0061\u0072\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u006e\u0020\u0064\u0065\u0063\u0069\u006d\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};if _dfa ._gdee < 0{return _gb .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u0063\u0069\u0064\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0076\u0061\u006c\u0075\u0065");};_eefd :=_dfa ._gdee ;for _gee :=_cec ;_gee <=_acdc ;_gee ++{cmap ._ac [_gee ]=CharCode (_eefd );
_eefd ++;};_de .Log .Trace ("C\u0049\u0044\u0020\u0072\u0061\u006eg\u0065\u003a\u0020\u003c\u0030\u0078\u0025\u0058\u003e \u003c\u0030\u0078%\u0058>\u0020\u0025\u0064",_cec ,_acdc ,_dfa ._gdee );};return nil ;};func (_gdd *cMapParser )parseArray ()(cmapArray ,error ){_bce :=cmapArray {};
_bce .Array =[]cmapObject {};_gdd ._efcfa .ReadByte ();for {_gdd .skipSpaces ();_aabd ,_bdeb :=_gdd ._efcfa .Peek (1);if _bdeb !=nil {return _bce ,_bdeb ;};if _aabd [0]==']'{_gdd ._efcfa .ReadByte ();break ;};_bbf ,_bdeb :=_gdd .parseObject ();if _bdeb !=nil {return _bce ,_bdeb ;
};_bce .Array =append (_bce .Array ,_bbf );};return _bce ,nil ;};func (cmap *CMap )StringToCID (s string )(CharCode ,bool ){_gdb ,_gad :=cmap ._cg [s ];return _gdb ,_gad ;};func (cmap *CMap )parseSystemInfo ()error {_ebga :=false ;_bfge :=false ;_bfgf :="";
_afg :=false ;_bcf :=CIDSystemInfo {};for _dbb :=0;_dbb < 50&&!_afg ;_dbb ++{_agc ,_badd :=cmap .parseObject ();if _badd !=nil {return _badd ;};switch _bbg :=_agc .(type ){case cmapDict :_fed :=_bbg .Dict ;_gfg ,_gec :=_fed ["\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079"];
if !_gec {_de .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_feg ,_gec :=_gfg .(cmapString );if !_gec {_de .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");
return ErrBadCMap ;};_bcf .Registry =_feg .String ;_gfg ,_gec =_fed ["\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067"];if !_gec {_de .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");
return ErrBadCMap ;};_feg ,_gec =_gfg .(cmapString );if !_gec {_de .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_bcf .Ordering =_feg .String ;
_bgg ,_gec :=_fed ["\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074"];if !_gec {_de .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};
_ecgcf ,_gec :=_bgg .(cmapInt );if !_gec {_de .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_bcf .Supplement =int (_ecgcf ._gdee );_afg =true ;
case cmapOperand :switch _bbg .Operand {case "\u0062\u0065\u0067i\u006e":_ebga =true ;case "\u0065\u006e\u0064":_afg =true ;case "\u0064\u0065\u0066":_bfge =false ;};case cmapName :if _ebga {_bfgf =_bbg .Name ;_bfge =true ;};case cmapString :if _bfge {switch _bfgf {case "\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079":_bcf .Registry =_bbg .String ;
case "\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067":_bcf .Ordering =_bbg .String ;};};case cmapInt :if _bfge {switch _bfgf {case "\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074":_bcf .Supplement =int (_bbg ._gdee );};};};};if !_afg {_de .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0050\u0061\u0072\u0073\u0065\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006e\u0066\u006f\u0020\u0064\u0069\u0063\u0074\u0020\u0069\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u006c\u0079");
return ErrBadCMap ;};cmap ._ec =_bcf ;return nil ;};type Codespace struct{NumBytes int ;Low CharCode ;High CharCode ;};func (cmap *CMap )inCodespace (_eagf CharCode ,_fdg int )bool {for _ ,_cgf :=range cmap ._bc {if _cgf .Low <=_eagf &&_eagf <=_cgf .High &&_fdg ==_cgf .NumBytes {return true ;
};};return false ;};func (cmap *CMap )parseWMode ()error {var _age int ;_efc :=false ;for _fdgc :=0;_fdgc < 3&&!_efc ;_fdgc ++{_dfbg ,_cc :=cmap .parseObject ();if _cc !=nil {return _cc ;};switch _fee :=_dfbg .(type ){case cmapOperand :switch _fee .Operand {case "\u0064\u0065\u0066":_efc =true ;
default:_de .Log .Error ("\u0070\u0061\u0072\u0073\u0065\u0057\u004d\u006f\u0064\u0065:\u0020\u0073\u0074\u0061\u0074\u0065\u0020e\u0072\u0072\u006f\u0072\u002e\u0020\u006f\u003d\u0025\u0023\u0076",_dfbg );return ErrBadCMap ;};case cmapInt :_age =int (_fee ._gdee );
};};cmap ._efg =integer {_bgee :true ,_eabf :_age };return nil ;};func (cmap *CMap )parse ()error {var _fbb cmapObject ;for {_cdc ,_aaff :=cmap .parseObject ();if _aaff !=nil {if _aaff ==_f .EOF {break ;};_de .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u004d\u0061\u0070\u003a\u0020\u0025\u0076",_aaff );
return _aaff ;};switch _ddd :=_cdc .(type ){case cmapOperand :_eeba :=_ddd ;switch _eeba .Operand {case _cade :_dcc :=cmap .parseCodespaceRange ();if _dcc !=nil {return _dcc ;};case _dfbe :_dced :=cmap .parseCIDRange ();if _dced !=nil {return _dced ;};
case _bade :_fbe :=cmap .parseBfchar ();if _fbe !=nil {return _fbe ;};case _eada :_gbf :=cmap .parseBfrange ();if _gbf !=nil {return _gbf ;};case _gga :if _fbb ==nil {_de .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0075\u0073\u0065\u0063m\u0061\u0070\u0020\u0077\u0069\u0074\u0068\u0020\u006e\u006f \u0061\u0072\u0067");
return ErrBadCMap ;};_gbg ,_dad :=_fbb .(cmapName );if !_dad {_de .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0075\u0073\u0065\u0063\u006d\u0061\u0070\u0020\u0061\u0072\u0067\u0020\u006eo\u0074\u0020\u0061\u0020\u006e\u0061\u006de\u0020\u0025\u0023\u0076",_fbb );
return ErrBadCMap ;};cmap ._dd =_gbg .Name ;case _fbca :_dbc :=cmap .parseSystemInfo ();if _dbc !=nil {return _dbc ;};};case cmapName :_aeaf :=_ddd ;switch _aeaf .Name {case _fbca :_eab :=cmap .parseSystemInfo ();if _eab !=nil {return _eab ;};case _cgef :_bdeg :=cmap .parseName ();
if _bdeg !=nil {return _bdeg ;};case _acef :_ecc :=cmap .parseType ();if _ecc !=nil {return _ecc ;};case _bgaa :_cgb :=cmap .parseVersion ();if _cgb !=nil {return _cgb ;};case _gdc :if _aaff =cmap .parseWMode ();_aaff !=nil {return _aaff ;};};};_fbb =_cdc ;
};return nil ;};func _gac (_gcaa string )string {_bfe :=[]rune (_gcaa );_befe :=make ([]string ,len (_bfe ));for _cgg ,_gcd :=range _bfe {_befe [_cgg ]=_c .Sprintf ("\u0025\u0030\u0034\u0078",_gcd );};return _c .Sprintf ("\u003c\u0025\u0073\u003e",_db .Join (_befe ,""));
};func (_cecd *cMapParser )parseNumber ()(cmapObject ,error ){_fdd ,_fedd :=_b .ParseNumber (_cecd ._efcfa );if _fedd !=nil {return nil ,_fedd ;};switch _efdd :=_fdd .(type ){case *_b .PdfObjectFloat :return cmapFloat {float64 (*_efdd )},nil ;case *_b .PdfObjectInteger :return cmapInt {int64 (*_efdd )},nil ;
};return nil ,_c .Errorf ("\u0075n\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_fdd );};func (cmap *CMap )parseType ()error {_bac :=0;_bgc :=false ;for _gadg :=0;_gadg < 3&&!_bgc ;
_gadg ++{_fcca ,_gaab :=cmap .parseObject ();if _gaab !=nil {return _gaab ;};switch _fbeb :=_fcca .(type ){case cmapOperand :switch _fbeb .Operand {case "\u0064\u0065\u0066":_bgc =true ;default:_de .Log .Error ("\u0070\u0061r\u0073\u0065\u0054\u0079\u0070\u0065\u003a\u0020\u0073\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020\u006f=%\u0023\u0076",_fcca );
return ErrBadCMap ;};case cmapInt :_bac =int (_fbeb ._gdee );};};cmap ._eb =_bac ;return nil ;};func (cmap *CMap )parseName ()error {_egf :="";_deea :=false ;for _dddb :=0;_dddb < 20&&!_deea ;_dddb ++{_dff ,_eebc :=cmap .parseObject ();if _eebc !=nil {return _eebc ;
};switch _fdf :=_dff .(type ){case cmapOperand :switch _fdf .Operand {case "\u0064\u0065\u0066":_deea =true ;default:_de .Log .Debug ("\u0070\u0061\u0072\u0073\u0065\u004e\u0061\u006d\u0065\u003a\u0020\u0053\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020o\u003d\u0025\u0023\u0076\u0020n\u0061\u006de\u003d\u0025\u0023\u0071",_dff ,_egf );
if _egf !=""{_egf =_c .Sprintf ("\u0025\u0073\u0020%\u0073",_egf ,_fdf .Operand );};_de .Log .Debug ("\u0070\u0061\u0072\u0073\u0065\u004e\u0061\u006d\u0065\u003a \u0052\u0065\u0063\u006f\u0076\u0065\u0072e\u0064\u002e\u0020\u006e\u0061\u006d\u0065\u003d\u0025\u0023\u0071",_egf );
};case cmapName :_egf =_fdf .Name ;};};if !_deea {_de .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0070\u0061\u0072\u0073\u0065N\u0061m\u0065:\u0020\u004e\u006f\u0020\u0064\u0065\u0066 ");return ErrBadCMap ;};cmap ._ee =_egf ;return nil ;};func _bcbd (_caae cmapHexString )rune {_dgaa :=_fad (_caae );
if _bbbb :=len (_dgaa );_bbbb ==0{_de .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0068\u0065\u0078\u0054o\u0052\u0075\u006e\u0065\u002e\u0020\u0045\u0078p\u0065c\u0074\u0065\u0064\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0072u\u006e\u0065\u0020\u0073\u0068\u0065\u0078\u003d\u0025\u0023\u0076",_caae );
return MissingCodeRune ;};if len (_dgaa )> 1{_de .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0068\u0065\u0078\u0054\u006f\u0052\u0075\u006e\u0065\u002e\u0020\u0045\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0065\u0078\u0061\u0063\u0074\u006c\u0079\u0020\u006f\u006e\u0065\u0020\u0072\u0075\u006e\u0065\u0020\u0073\u0068\u0065\u0078\u003d\u0025\u0023v\u0020\u002d\u003e\u0020\u0025#\u0076",_caae ,_dgaa );
};return _dgaa [0];};func (_cde *cMapParser )parseString ()(cmapString ,error ){_cde ._efcfa .ReadByte ();_dbbf :=_cd .Buffer {};_dgce :=1;for {_bcgc ,_cgac :=_cde ._efcfa .Peek (1);if _cgac !=nil {return cmapString {_dbbf .String ()},_cgac ;};if _bcgc [0]=='\\'{_cde ._efcfa .ReadByte ();
_gfegc ,_dab :=_cde ._efcfa .ReadByte ();if _dab !=nil {return cmapString {_dbbf .String ()},_dab ;};if _b .IsOctalDigit (_gfegc ){_agcf ,_fegb :=_cde ._efcfa .Peek (2);if _fegb !=nil {return cmapString {_dbbf .String ()},_fegb ;};var _cebd []byte ;_cebd =append (_cebd ,_gfegc );
for _ ,_egff :=range _agcf {if _b .IsOctalDigit (_egff ){_cebd =append (_cebd ,_egff );}else {break ;};};_cde ._efcfa .Discard (len (_cebd )-1);_de .Log .Trace ("\u004e\u0075\u006d\u0065ri\u0063\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0022\u0025\u0073\u0022",_cebd );
_fbcf ,_fegb :=_d .ParseUint (string (_cebd ),8,32);if _fegb !=nil {return cmapString {_dbbf .String ()},_fegb ;};_dbbf .WriteByte (byte (_fbcf ));continue ;};switch _gfegc {case 'n':_dbbf .WriteByte ('\n');case 'r':_dbbf .WriteByte ('\r');case 't':_dbbf .WriteByte ('\t');
case 'b':_dbbf .WriteByte ('\b');case 'f':_dbbf .WriteByte ('\f');case '(':_dbbf .WriteByte ('(');case ')':_dbbf .WriteByte (')');case '\\':_dbbf .WriteByte ('\\');};continue ;}else if _bcgc [0]=='('{_dgce ++;}else if _bcgc [0]==')'{_dgce --;if _dgce ==0{_cde ._efcfa .ReadByte ();
break ;};};_gbde ,_ :=_cde ._efcfa .ReadByte ();_dbbf .WriteByte (_gbde );};return cmapString {_dbbf .String ()},nil ;};const (_cadf =100;_bcb ="\u000a\u002f\u0043\u0049\u0044\u0049\u006e\u0069\u0074\u0020\u002f\u0050\u0072\u006fc\u0053\u0065\u0074\u0020\u0066\u0069\u006e\u0064\u0072es\u006fu\u0072c\u0065 \u0062\u0065\u0067\u0069\u006e\u000a\u0031\u0032\u0020\u0064\u0069\u0063\u0074\u0020\u0062\u0065\u0067\u0069n\u000a\u0062\u0065\u0067\u0069\u006e\u0063\u006d\u0061\u0070\n\u002f\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065m\u0049\u006e\u0066\u006f\u0020\u003c\u003c\u0020\u002f\u0052\u0065\u0067\u0069\u0073t\u0072\u0079\u0020\u0028\u0041\u0064\u006f\u0062\u0065\u0029\u0020\u002f\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067\u0020\u0028\u0055\u0043\u0053)\u0020\u002f\u0053\u0075\u0070p\u006c\u0065\u006d\u0065\u006et\u0020\u0030\u0020\u003e\u003e\u0020\u0064\u0065\u0066\u000a\u002f\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065\u0020\u002f\u0041\u0064\u006f\u0062\u0065-\u0049\u0064\u0065\u006e\u0074\u0069\u0074\u0079\u002d\u0055\u0043\u0053\u0020\u0064\u0065\u0066\u000a\u002fC\u004d\u0061\u0070\u0054\u0079\u0070\u0065\u0020\u0032\u0020\u0064\u0065\u0066\u000a\u0031\u0020\u0062\u0065\u0067\u0069\u006e\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063e\u0072\u0061n\u0067\u0065\n\u003c\u0030\u0030\u0030\u0030\u003e\u0020<\u0046\u0046\u0046\u0046\u003e\u000a\u0065\u006e\u0064\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065r\u0061\u006e\u0067\u0065\u000a";
_bae ="\u0065\u006e\u0064\u0063\u006d\u0061\u0070\u000a\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065\u0020\u0063ur\u0072e\u006e\u0074\u0064\u0069\u0063\u0074\u0020\u002f\u0043\u004d\u0061\u0070 \u0064\u0065\u0066\u0069\u006e\u0065\u0072\u0065\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0070\u006fp\u000a\u0065\u006e\u0064\u000a\u0065\u006e\u0064\u000a";
);func NewToUnicodeCMap (codeToRune map[CharCode ]rune )*CMap {_eef :=make (map[CharCode ]string ,len (codeToRune ));for _ea ,_be :=range codeToRune {_eef [_ea ]=string (_be );};cmap :=&CMap {_ee :"\u0041d\u006fb\u0065\u002d\u0049\u0064\u0065n\u0074\u0069t\u0079\u002d\u0055\u0043\u0053",_eb :2,_fge :16,_ec :CIDSystemInfo {Registry :"\u0041\u0064\u006fb\u0065",Ordering :"\u0055\u0043\u0053",Supplement :0},_bc :[]Codespace {{Low :0,High :0xffff}},_ga :_eef ,_cg :make (map[string ]CharCode ,len (codeToRune )),_ac :make (map[CharCode ]CharCode ,len (codeToRune )),_dbd :make (map[CharCode ]CharCode ,len (codeToRune ))};
cmap .computeInverseMappings ();return cmap ;};func (cmap *CMap )CIDSystemInfo ()CIDSystemInfo {return cmap ._ec };func (cmap *CMap )CharcodeToCID (code CharCode )(CharCode ,bool ){_geg ,_eeg :=cmap ._ac [code ];return _geg ,_eeg ;};type cmapObject interface{};
func (cmap *CMap )Bytes ()[]byte {_de .Log .Trace ("\u0063\u006d\u0061\u0070.B\u0079\u0074\u0065\u0073\u003a\u0020\u0063\u006d\u0061\u0070\u003d\u0025\u0073",cmap .String ());if len (cmap ._acc )> 0{return cmap ._acc ;};cmap ._acc =[]byte (_db .Join ([]string {_bcb ,cmap .toBfData (),_bae },"\u000a"));
return cmap ._acc ;};func (_caf *cMapParser )parseObject ()(cmapObject ,error ){_caf .skipSpaces ();for {_gfeg ,_bgbd :=_caf ._efcfa .Peek (2);if _bgbd !=nil {return nil ,_bgbd ;};if _gfeg [0]=='%'{_caf .parseComment ();_caf .skipSpaces ();continue ;}else if _gfeg [0]=='/'{_bff ,_eaec :=_caf .parseName ();
return _bff ,_eaec ;}else if _gfeg [0]=='('{_cfgg ,_cbe :=_caf .parseString ();return _cfgg ,_cbe ;}else if _gfeg [0]=='['{_ggg ,_ggf :=_caf .parseArray ();return _ggg ,_ggf ;}else if (_gfeg [0]=='<')&&(_gfeg [1]=='<'){_ccc ,_bcc :=_caf .parseDict ();return _ccc ,_bcc ;
}else if _gfeg [0]=='<'{_fce ,_dfbaf :=_caf .parseHexString ();return _fce ,_dfbaf ;}else if _b .IsDecimalDigit (_gfeg [0])||(_gfeg [0]=='-'&&_b .IsDecimalDigit (_gfeg [1])){_ceeb ,_dgca :=_caf .parseNumber ();if _dgca !=nil {return nil ,_dgca ;};return _ceeb ,nil ;
}else {_bcgf ,_aad :=_caf .parseOperand ();if _aad !=nil {return nil ,_aad ;};return _bcgf ,nil ;};};};type CharCode uint32 ;func _bgf ()cmapDict {return cmapDict {Dict :map[string ]cmapObject {}}};func (_gfba *cMapParser )skipSpaces ()(int ,error ){_aee :=0;
for {_effe ,_gbgg :=_gfba ._efcfa .Peek (1);if _gbgg !=nil {return 0,_gbgg ;};if _b .IsWhiteSpace (_effe [0]){_gfba ._efcfa .ReadByte ();_aee ++;}else {break ;};};return _aee ,nil ;};type CIDSystemInfo struct{Registry string ;Ordering string ;Supplement int ;
};type cmapInt struct{_gdee int64 };func (cmap *CMap )WMode ()(int ,bool ){return cmap ._efg ._eabf ,cmap ._efg ._bgee };func LoadCmapFromData (data []byte ,isSimple bool )(*CMap ,error ){_de .Log .Trace ("\u004c\u006fa\u0064\u0043\u006d\u0061\u0070\u0046\u0072\u006f\u006d\u0044\u0061\u0074\u0061\u003a\u0020\u0069\u0073\u0053\u0069\u006d\u0070\u006ce=\u0025\u0074",isSimple );
cmap :=_da (isSimple );cmap .cMapParser =_cfgd (data );_bfd :=cmap .parse ();if _bfd !=nil {return nil ,_bfd ;};if len (cmap ._bc )==0{if cmap ._dd !=""{return cmap ,nil ;};_de .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u002e\u0020\u0063\u006d\u0061p=\u0025\u0073",cmap );
};cmap .computeInverseMappings ();return cmap ,nil ;};func NewCIDSystemInfo (obj _b .PdfObject )(_bd CIDSystemInfo ,_bg error ){_ae ,_fc :=_b .GetDict (obj );if !_fc {return CIDSystemInfo {},_b .ErrTypeError ;};_cfd ,_fc :=_b .GetStringVal (_ae .Get ("\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079"));
if !_fc {return CIDSystemInfo {},_b .ErrTypeError ;};_ced ,_fc :=_b .GetStringVal (_ae .Get ("\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067"));if !_fc {return CIDSystemInfo {},_b .ErrTypeError ;};_ge ,_fc :=_b .GetIntVal (_ae .Get ("\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074"));
if !_fc {return CIDSystemInfo {},_b .ErrTypeError ;};return CIDSystemInfo {Registry :_cfd ,Ordering :_ced ,Supplement :_ge },nil ;};func IsPredefinedCMap (name string )bool {return _gf .AssetExists (name )};type cmapFloat struct{_ebdd float64 };type cmapHexString struct{_eebe int ;
_ddf []byte ;};type cmapArray struct{Array []cmapObject ;};func (cmap *CMap )parseBfrange ()error {for {var _dgd CharCode ;_dgc ,_cba :=cmap .parseObject ();if _cba !=nil {if _cba ==_f .EOF {break ;};return _cba ;};switch _aaa :=_dgc .(type ){case cmapOperand :if _aaa .Operand ==_aaab {return nil ;
};return _gb .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");case cmapHexString :_dgd =_geec (_aaa );default:return _gb .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065");
};var _bbc CharCode ;_dgc ,_cba =cmap .parseObject ();if _cba !=nil {if _cba ==_f .EOF {break ;};return _cba ;};switch _bbbe :=_dgc .(type ){case cmapOperand :_de .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0049\u006e\u0063\u006f\u006d\u0070\u006c\u0065\u0074\u0065\u0020\u0062\u0066r\u0061\u006e\u0067\u0065\u0020\u0074\u0072i\u0070\u006c\u0065\u0074");
return ErrBadCMap ;case cmapHexString :_bbc =_geec (_bbbe );if _bbc > 0xffff{_bbc =0xffff;};default:_de .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0055\u006e\u0065\u0078\u0070e\u0063t\u0065d\u0020\u0074\u0079\u0070\u0065\u0020\u0025T",_dgc );return ErrBadCMap ;
};_dgc ,_cba =cmap .parseObject ();if _cba !=nil {if _cba ==_f .EOF {break ;};return _cba ;};switch _bggd :=_dgc .(type ){case cmapArray :if len (_bggd .Array )!=int (_bbc -_dgd )+1{_de .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u006f\u0066\u0020\u0069\u0074\u0065\u006d\u0073\u0020\u0069\u006e\u0020a\u0072\u0072\u0061\u0079");
return ErrBadCMap ;};for _gdg :=_dgd ;_gdg <=_bbc ;_gdg ++{_gfd :=_bggd .Array [_gdg -_dgd ];_ffc ,_gbfb :=_gfd .(cmapHexString );if !_gbfb {return _gb .New ("\u006e\u006f\u006e-h\u0065\u0078\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0069\u006e\u0020\u0061\u0072\u0072\u0061\u0079");
};_cfa :=_fad (_ffc );cmap ._ga [_gdg ]=string (_cfa );};case cmapHexString :_fdb :=_fad (_bggd );_bcg :=len (_fdb );for _gfde :=_dgd ;_gfde <=_bbc ;_gfde ++{cmap ._ga [_gfde ]=string (_fdb );if _bcg > 0{_fdb [_bcg -1]++;}else {_de .Log .Debug ("\u004e\u006f\u0020c\u006d\u0061\u0070\u0020\u0074\u0061\u0072\u0067\u0065\u0074\u0020\u0063\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0066\u006f\u0072\u0020\u0025\u0023\u0076",_gfde );
};if _gfde ==1<<32-1{break ;};};default:_de .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0055\u006e\u0065\u0078\u0070e\u0063t\u0065d\u0020\u0074\u0079\u0070\u0065\u0020\u0025T",_dgc );return ErrBadCMap ;};};return nil ;};func _da (_ba bool )*CMap {_fcc :=16;
if _ba {_fcc =8;};return &CMap {_fge :_fcc ,_ac :make (map[CharCode ]CharCode ),_dbd :make (map[CharCode ]CharCode ),_ga :make (map[CharCode ]string ),_cg :make (map[string ]CharCode )};};func (cmap *CMap )computeInverseMappings (){for _ed ,_cge :=range cmap ._ac {if _adg ,_bef :=cmap ._dbd [_cge ];
!_bef ||(_bef &&_adg > _ed ){cmap ._dbd [_cge ]=_ed ;};};for _aag ,_fgef :=range cmap ._ga {if _gd ,_dg :=cmap ._cg [_fgef ];!_dg ||(_dg &&_gd > _aag ){cmap ._cg [_fgef ]=_aag ;};};_af .Slice (cmap ._bc ,func (_defc ,_gg int )bool {return cmap ._bc [_defc ].Low < cmap ._bc [_gg ].Low });
};func (cmap *CMap )NBits ()int {return cmap ._fge };type cmapString struct{String string ;};func (cmap *CMap )toBfData ()string {if len (cmap ._ga )==0{return "";};_ceb :=make ([]CharCode ,0,len (cmap ._ga ));for _bde :=range cmap ._ga {_ceb =append (_ceb ,_bde );
};_af .Slice (_ceb ,func (_fef ,_efd int )bool {return _ceb [_fef ]< _ceb [_efd ]});var _deg []charRange ;_cfg :=charRange {_ceb [0],_ceb [0]};_dbe :=cmap ._ga [_ceb [0]];for _ ,_adc :=range _ceb [1:]{_gcc :=cmap ._ga [_adc ];if _adc ==_cfg ._eg +1&&_dcf (_gcc )==_dcf (_dbe )+1{_cfg ._eg =_adc ;
}else {_deg =append (_deg ,_cfg );_cfg ._ef ,_cfg ._eg =_adc ,_adc ;};_dbe =_gcc ;};_deg =append (_deg ,_cfg );var _fbc []CharCode ;var _ebg []fbRange ;for _ ,_gae :=range _deg {if _gae ._ef ==_gae ._eg {_fbc =append (_fbc ,_gae ._ef );}else {_ebg =append (_ebg ,fbRange {_cf :_gae ._ef ,_def :_gae ._eg ,_fg :cmap ._ga [_gae ._ef ]});
};};_de .Log .Trace ("\u0063\u0068ar\u0052\u0061\u006eg\u0065\u0073\u003d\u0025d f\u0062Ch\u0061\u0072\u0073\u003d\u0025\u0064\u0020fb\u0052\u0061\u006e\u0067\u0065\u0073\u003d%\u0064",len (_deg ),len (_fbc ),len (_ebg ));var _acdg []string ;if len (_fbc )> 0{_ecgc :=(len (_fbc )+_cadf -1)/_cadf ;
for _faa :=0;_faa < _ecgc ;_faa ++{_dce :=_edca (len (_fbc )-_faa *_cadf ,_cadf );_acdg =append (_acdg ,_c .Sprintf ("\u0025\u0064\u0020\u0062\u0065\u0067\u0069\u006e\u0062f\u0063\u0068\u0061\u0072",_dce ));for _cedd :=0;_cedd < _dce ;_cedd ++{_gde :=_fbc [_faa *_cadf +_cedd ];
_cgd :=cmap ._ga [_gde ];_acdg =append (_acdg ,_c .Sprintf ("\u003c%\u0030\u0034\u0078\u003e\u0020\u0025s",_gde ,_gac (_cgd )));};_acdg =append (_acdg ,"\u0065n\u0064\u0062\u0066\u0063\u0068\u0061r");};};if len (_ebg )> 0{_aab :=(len (_ebg )+_cadf -1)/_cadf ;
for _gfe :=0;_gfe < _aab ;_gfe ++{_gaa :=_edca (len (_ebg )-_gfe *_cadf ,_cadf );_acdg =append (_acdg ,_c .Sprintf ("\u0025d\u0020b\u0065\u0067\u0069\u006e\u0062\u0066\u0072\u0061\u006e\u0067\u0065",_gaa ));for _gff :=0;_gff < _gaa ;_gff ++{_fba :=_ebg [_gfe *_cadf +_gff ];
_acdg =append (_acdg ,_c .Sprintf ("\u003c%\u00304\u0078\u003e\u003c\u0025\u0030\u0034\u0078\u003e\u0020\u0025\u0073",_fba ._cf ,_fba ._def ,_gac (_fba ._fg )));};_acdg =append (_acdg ,"\u0065\u006e\u0064\u0062\u0066\u0072\u0061\u006e\u0067\u0065");};};
return _db .Join (_acdg ,"\u000a");};func _fcg (_ag string )(*CMap ,error ){_cfc ,_ad :=_gf .Asset (_ag );if _ad !=nil {return nil ,_ad ;};return LoadCmapFromDataCID (_cfc );};func _geec (_cbfa cmapHexString )CharCode {_bcgd :=CharCode (0);for _ ,_ddgb :=range _cbfa ._ddf {_bcgd <<=8;
_bcgd |=CharCode (_ddgb );};return _bcgd ;};func _cfgd (_fafa []byte )*cMapParser {_gfb :=cMapParser {};_cgga :=_cd .NewBuffer (_fafa );_gfb ._efcfa =_e .NewReader (_cgga );return &_gfb ;};var (ErrBadCMap =_gb .New ("\u0062\u0061\u0064\u0020\u0063\u006d\u0061\u0070");
ErrBadCMapComment =_gb .New ("c\u006f\u006d\u006d\u0065\u006e\u0074 \u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0073\u0074a\u0072\u0074\u0020w\u0069t\u0068\u0020\u0025");ErrBadCMapDict =_gb .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074");
);func (cmap *CMap )Name ()string {return cmap ._ee };type charRange struct{_ef CharCode ;_eg CharCode ;};func (cmap *CMap )BytesToCharcodes (data []byte )([]CharCode ,bool ){var _gfc []CharCode ;if cmap ._fge ==8{for _ ,_dfb :=range data {_gfc =append (_gfc ,CharCode (_dfb ));
};return _gfc ,true ;};for _agbc :=0;_agbc < len (data );{_faf ,_eac ,_eega :=cmap .matchCode (data [_agbc :]);if !_eega {_de .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0074\u0020\u0069\u003d\u0025\u0064\u0020\u0062\u0079\u0074\u0065\u0073\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d\u003d\u0025\u0023\u0071",_agbc ,data ,string (data ));
return _gfc ,false ;};_gfc =append (_gfc ,_faf );_agbc +=_eac ;};return _gfc ,true ;};type cmapOperand struct{Operand string ;};type cMapParser struct{_efcfa *_e .Reader };func (cmap *CMap )parseCodespaceRange ()error {for {_acge ,_ceg :=cmap .parseObject ();
if _ceg !=nil {if _ceg ==_f .EOF {break ;};return _ceg ;};_bfb ,_fca :=_acge .(cmapHexString );if !_fca {if _ada ,_bbb :=_acge .(cmapOperand );_bbb {if _ada .Operand ==_afaf {return nil ;};return _gb .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");
};};_acge ,_ceg =cmap .parseObject ();if _ceg !=nil {if _ceg ==_f .EOF {break ;};return _ceg ;};_ddg ,_fca :=_acge .(cmapHexString );if !_fca {return _gb .New ("\u006e\u006f\u006e-\u0068\u0065\u0078\u0020\u0068\u0069\u0067\u0068");};if len (_bfb ._ddf )!=len (_ddg ._ddf ){return _gb .New ("\u0075\u006e\u0065\u0071\u0075\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0062\u0079\u0074\u0065\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065");
};_gbed :=_geec (_bfb );_ede :=_geec (_ddg );if _ede < _gbed {_de .Log .Debug ("\u0045R\u0052\u004fR\u003a\u0020\u0042\u0061d\u0020\u0063\u006fd\u0065\u0073\u0070\u0061\u0063\u0065\u002e\u0020\u006cow\u003d\u0030\u0078%\u0030\u0032x\u0020\u0068\u0069\u0067\u0068\u003d0\u0078\u00250\u0032\u0078",_gbed ,_ede );
return ErrBadCMap ;};_fbee :=_ddg ._eebe ;_bdec :=Codespace {NumBytes :_fbee ,Low :_gbed ,High :_ede };cmap ._bc =append (cmap ._bc ,_bdec );_de .Log .Trace ("\u0043\u006f\u0064e\u0073\u0070\u0061\u0063e\u0020\u006c\u006f\u0077\u003a\u0020\u0030x\u0025\u0058\u002c\u0020\u0068\u0069\u0067\u0068\u003a\u0020\u0030\u0078\u0025\u0058",_gbed ,_ede );
};if len (cmap ._bc )==0{_de .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u0020\u0069\u006e\u0020\u0063ma\u0070\u002e");return ErrBadCMap ;};return nil ;};func _fad (_bfdb cmapHexString )[]rune {if len (_bfdb ._ddf )==1{return []rune {rune (_bfdb ._ddf [0])};
};_ade :=_bfdb ._ddf ;if len (_ade )%2!=0{_ade =append (_ade ,0);_de .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0068\u0065\u0078\u0054\u006f\u0052\u0075\u006e\u0065\u0073\u002e\u0020\u0050\u0061\u0064\u0064\u0069\u006e\u0067\u0020\u0073\u0068\u0065\u0078\u003d\u0025#\u0076\u0020\u0074\u006f\u0020\u0025\u002b\u0076",_bfdb ,_ade );
};_adf :=len (_ade )>>1;_bdc :=make ([]uint16 ,_adf );for _dfde :=0;_dfde < _adf ;_dfde ++{_bdc [_dfde ]=uint16 (_ade [_dfde <<1])<<8+uint16 (_ade [_dfde <<1+1]);};_bdf :=_ce .Decode (_bdc );return _bdf ;};func (cmap *CMap )CharcodeBytesToUnicode (data []byte )(string ,int ){_gc ,_eff :=cmap .BytesToCharcodes (data );
if !_eff {_de .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0043\u0068\u0061\u0072\u0063\u006f\u0064\u0065\u0042\u0079\u0074\u0065s\u0054\u006f\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u002e\u0020\u004e\u006f\u0074\u0020\u0069n\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u002e\u0020\u0064\u0061\u0074\u0061\u003d\u005b\u0025\u0020\u0030\u0032\u0078]\u0020\u0063\u006d\u0061\u0070=\u0025\u0073",data ,cmap );
return "",0;};_acg :=make ([]string ,len (_gc ));var _acce []CharCode ;for _eae ,_edf :=range _gc {_fa ,_dee :=cmap ._ga [_edf ];if !_dee {_acce =append (_acce ,_edf );_fa =MissingCodeString ;};_acg [_eae ]=_fa ;};_ab :=_db .Join (_acg ,"");if len (_acce )> 0{_de .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020C\u0068\u0061\u0072c\u006f\u0064\u0065\u0042y\u0074\u0065\u0073\u0054\u006f\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u002e\u0020\u004e\u006f\u0074\u0020\u0069\u006e\u0020\u006d\u0061\u0070\u002e\u000a"+"\u0009d\u0061t\u0061\u003d\u005b\u0025\u00200\u0032\u0078]\u003d\u0025\u0023\u0071\u000a"+"\u0009\u0063h\u0061\u0072\u0063o\u0064\u0065\u0073\u003d\u0025\u0030\u0032\u0078\u000a"+"\u0009\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u003d\u0025\u0064\u0020%\u0030\u0032\u0078\u000a"+"\u0009\u0075\u006e\u0069\u0063\u006f\u0064\u0065\u003d`\u0025\u0073\u0060\u000a"+"\u0009\u0063\u006d\u0061\u0070\u003d\u0025\u0073",data ,string (data ),_gc ,len (_acce ),_acce ,_ab ,cmap );
};return _ab ,len (_acce );};type CMap struct{*cMapParser ;_ee string ;_fge int ;_eb int ;_bgb string ;_dd string ;_ec CIDSystemInfo ;_bc []Codespace ;_ac map[CharCode ]CharCode ;_dbd map[CharCode ]CharCode ;_ga map[CharCode ]string ;_cg map[string ]CharCode ;
_acc []byte ;_ace *_b .PdfObjectStream ;_efg integer ;};func (cmap *CMap )matchCode (_fe []byte )(_gca CharCode ,_aba int ,_ffg bool ){for _gce :=0;_gce < _ff ;_gce ++{if _gce < len (_fe ){_gca =_gca <<8|CharCode (_fe [_gce ]);_aba ++;};_ffg =cmap .inCodespace (_gca ,_gce +1);
if _ffg {return _gca ,_aba ,true ;};};_de .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063o\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0020m\u0061t\u0063\u0068\u0065\u0073\u0020\u0062\u0079\u0074\u0065\u0073\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d=\u0025\u0023\u0071\u0020\u0063\u006d\u0061\u0070\u003d\u0025\u0073",_fe ,string (_fe ),cmap );
return 0,0,false ;};func (cmap *CMap )CharcodeToUnicode (code CharCode )(string ,bool ){if _baa ,_dbg :=cmap ._ga [code ];_dbg {return _baa ,true ;};return MissingCodeString ,false ;};func (_fcb *cMapParser )parseName ()(cmapName ,error ){_ccg :="";_ebe :=false ;
for {_gbc ,_fag :=_fcb ._efcfa .Peek (1);if _fag ==_f .EOF {break ;};if _fag !=nil {return cmapName {_ccg },_fag ;};if !_ebe {if _gbc [0]=='/'{_ebe =true ;_fcb ._efcfa .ReadByte ();}else {_de .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u004e\u0061\u006d\u0065\u0020\u0073\u0074a\u0072t\u0069n\u0067 \u0077\u0069\u0074\u0068\u0020\u0025\u0073\u0020\u0028\u0025\u0020\u0078\u0029",_gbc ,_gbc );
return cmapName {_ccg },_c .Errorf ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006ea\u006d\u0065:\u0020\u0028\u0025\u0063\u0029",_gbc [0]);};}else {if _b .IsWhiteSpace (_gbc [0]){break ;}else if (_gbc [0]=='/')||(_gbc [0]=='[')||(_gbc [0]=='(')||(_gbc [0]==']')||(_gbc [0]=='<')||(_gbc [0]=='>'){break ;
}else if _gbc [0]=='#'{_bedc ,_abg :=_fcb ._efcfa .Peek (3);if _abg !=nil {return cmapName {_ccg },_abg ;};_fcb ._efcfa .Discard (3);_gege ,_abg :=_a .DecodeString (string (_bedc [1:3]));if _abg !=nil {return cmapName {_ccg },_abg ;};_ccg +=string (_gege );
}else {_dgg ,_ :=_fcb ._efcfa .ReadByte ();_ccg +=string (_dgg );};};};return cmapName {_ccg },nil ;};func _edca (_fadd ,_cce int )int {if _fadd < _cce {return _fadd ;};return _cce ;};type cmapName struct{Name string ;};func LoadPredefinedCMap (name string )(*CMap ,error ){cmap ,_egc :=_fcg (name );
if _egc !=nil {return nil ,_egc ;};if cmap ._dd ==""{cmap .computeInverseMappings ();return cmap ,nil ;};_fd ,_egc :=_fcg (cmap ._dd );if _egc !=nil {return nil ,_egc ;};for _df ,_afa :=range _fd ._ac {if _ ,_ecg :=cmap ._ac [_df ];!_ecg {cmap ._ac [_df ]=_afa ;
};};cmap ._bc =append (cmap ._bc ,_fd ._bc ...);cmap .computeInverseMappings ();return cmap ,nil ;};func (_ebc *cMapParser )parseHexString ()(cmapHexString ,error ){_ebc ._efcfa .ReadByte ();_bdee :=[]byte ("\u0030\u0031\u0032\u003345\u0036\u0037\u0038\u0039\u0061\u0062\u0063\u0064\u0065\u0066\u0041\u0042\u0043\u0044E\u0046");
_adgd :=_cd .Buffer {};for {_ebc .skipSpaces ();_dfd ,_ece :=_ebc ._efcfa .Peek (1);if _ece !=nil {return cmapHexString {},_ece ;};if _dfd [0]=='>'{_ebc ._efcfa .ReadByte ();break ;};_dcfe ,_ :=_ebc ._efcfa .ReadByte ();if _cd .IndexByte (_bdee ,_dcfe )>=0{_adgd .WriteByte (_dcfe );
};};if _adgd .Len ()%2==1{_de .Log .Debug ("\u0070\u0061rs\u0065\u0048\u0065x\u0053\u0074\u0072\u0069ng:\u0020ap\u0070\u0065\u006e\u0064\u0069\u006e\u0067 '\u0030\u0027\u0020\u0074\u006f\u0020\u0025#\u0071",_adgd .String ());_adgd .WriteByte ('0');};_gced :=_adgd .Len ()/2;
_beg ,_ :=_a .DecodeString (_adgd .String ());return cmapHexString {_eebe :_gced ,_ddf :_beg },nil ;};func (cmap *CMap )parseBfchar ()error {for {_dfba ,_fefa :=cmap .parseObject ();if _fefa !=nil {if _fefa ==_f .EOF {break ;};return _fefa ;};var _aeg CharCode ;
switch _dga :=_dfba .(type ){case cmapOperand :if _dga .Operand ==_ceec {return nil ;};return _gb .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");case cmapHexString :_aeg =_geec (_dga );default:return _gb .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065");
};_dfba ,_fefa =cmap .parseObject ();if _fefa !=nil {if _fefa ==_f .EOF {break ;};return _fefa ;};var _daf []rune ;switch _bacc :=_dfba .(type ){case cmapOperand :if _bacc .Operand ==_ceec {return nil ;};_de .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0055\u006e\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020o\u0070\u0065\u0072\u0061\u006e\u0064\u002e\u0020\u0025\u0023\u0076",_bacc );
return ErrBadCMap ;case cmapHexString :_daf =_fad (_bacc );case cmapName :_de .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064 \u006e\u0061\u006de\u002e \u0025\u0023\u0076",_bacc );_daf =[]rune {MissingCodeRune };
default:_de .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064 \u0074\u0079\u0070e\u002e \u0025\u0023\u0076",_dfba );return ErrBadCMap ;};cmap ._ga [_aeg ]=string (_daf );};return nil ;};