//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package cmap ;import (_eb "bufio";_f "bytes";_d "encoding/hex";_fb "errors";_c "fmt";_ee "github.com/unidoc/unipdf/v4/common";_g "github.com/unidoc/unipdf/v4/core";_ea "github.com/unidoc/unipdf/v4/internal/cmap/bcmaps";_df "io";_a "sort";_cc "strconv";
_bc "strings";_b "unicode/utf16";);type cmapOperand struct{Operand string ;};func LoadCmapFromData (data []byte ,isSimple bool )(*CMap ,error ){_ee .Log .Trace ("\u004c\u006fa\u0064\u0043\u006d\u0061\u0070\u0046\u0072\u006f\u006d\u0044\u0061\u0074\u0061\u003a\u0020\u0069\u0073\u0053\u0069\u006d\u0070\u006ce=\u0025\u0074",isSimple );
cmap :=_adc (isSimple );cmap .cMapParser =_egaf (data );_ede :=cmap .parse ();if _ede !=nil {return nil ,_ede ;};if len (cmap ._gf )==0{if cmap ._cd !=""{return cmap ,nil ;};_ee .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u002e\u0020\u0063\u006d\u0061p=\u0025\u0073",cmap );
};cmap .computeInverseMappings ();return cmap ,nil ;};func (cmap *CMap )parseCIDRange ()error {for {_bcf ,_cfgb :=cmap .parseObject ();if _cfgb !=nil {if _cfgb ==_df .EOF {break ;};return _cfgb ;};_dgc ,_dgfg :=_bcf .(cmapHexString );if !_dgfg {if _ffde ,_gga :=_bcf .(cmapOperand );
_gga {if _ffde .Operand ==_begc {return nil ;};return _fb .New ("\u0063\u0069\u0064\u0020\u0069\u006e\u0074\u0065\u0072\u0076\u0061\u006c\u0020s\u0074\u0061\u0072\u0074\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0068\u0065\u0078\u0020\u0073t\u0072\u0069\u006e\u0067");
};};_bfa :=_bcdd (_dgc );_bcf ,_cfgb =cmap .parseObject ();if _cfgb !=nil {if _cfgb ==_df .EOF {break ;};return _cfgb ;};_cfab ,_dgfg :=_bcf .(cmapHexString );if !_dgfg {return _fb .New ("\u0063\u0069d\u0020\u0069\u006e\u0074e\u0072\u0076a\u006c\u0020\u0065\u006e\u0064\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0068\u0065\u0078\u0020\u0073t\u0072\u0069\u006e\u0067");
};if len (_dgc ._fcd )!=len (_cfab ._fcd ){return _fb .New ("\u0075\u006e\u0065\u0071\u0075\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0062\u0079\u0074\u0065\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065");};_aaf :=_bcdd (_cfab );
if _bfa > _aaf {_ee .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0043\u0049\u0044\u0020\u0072\u0061\u006e\u0067\u0065\u002e\u0020\u0073t\u0061\u0072\u0074\u003d\u0030\u0078\u0025\u0030\u0032\u0078\u0020\u0065\u006e\u0064=\u0030x\u0025\u0030\u0032\u0078",_bfa ,_aaf );
return ErrBadCMap ;};_bcf ,_cfgb =cmap .parseObject ();if _cfgb !=nil {if _cfgb ==_df .EOF {break ;};return _cfgb ;};_eag ,_dgfg :=_bcf .(cmapInt );if !_dgfg {return _fb .New ("\u0063\u0069\u0064\u0020\u0073t\u0061\u0072\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u006e\u0020\u0064\u0065\u0063\u0069\u006d\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};if _eag ._abbe < 0{return _fb .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u0063\u0069\u0064\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0076\u0061\u006c\u0075\u0065");};_fcfg :=_eag ._abbe ;for _bebe :=_bfa ;_bebe <=_aaf ;_bebe ++{cmap ._ac [_bebe ]=CharCode (_fcfg );
_fcfg ++;};_ee .Log .Trace ("C\u0049\u0044\u0020\u0072\u0061\u006eg\u0065\u003a\u0020\u003c\u0030\u0078\u0025\u0058\u003e \u003c\u0030\u0078%\u0058>\u0020\u0025\u0064",_bfa ,_aaf ,_eag ._abbe );};return nil ;};func (_ggbe *cMapParser )parseComment ()(string ,error ){var _gac _f .Buffer ;
_ ,_dgce :=_ggbe .skipSpaces ();if _dgce !=nil {return _gac .String (),_dgce ;};_aef :=true ;for {_fga ,_dge :=_ggbe ._dfgc .Peek (1);if _dge !=nil {_ee .Log .Debug ("p\u0061r\u0073\u0065\u0043\u006f\u006d\u006d\u0065\u006et\u003a\u0020\u0065\u0072r=\u0025\u0076",_dge );
return _gac .String (),_dge ;};if _aef &&_fga [0]!='%'{return _gac .String (),ErrBadCMapComment ;};_aef =false ;if (_fga [0]!='\r')&&(_fga [0]!='\n'){_eac ,_ :=_ggbe ._dfgc .ReadByte ();_gac .WriteByte (_eac );}else {break ;};};return _gac .String (),nil ;
};type integer struct{_aced bool ;_ddb int ;};func (cmap *CMap )NBits ()int {return cmap ._cg };type cmapDict struct{Dict map[string ]cmapObject ;};func (cmap *CMap )Bytes ()[]byte {_ee .Log .Trace ("\u0063\u006d\u0061\u0070.B\u0079\u0074\u0065\u0073\u003a\u0020\u0063\u006d\u0061\u0070\u003d\u0025\u0073",cmap .String ());
if len (cmap ._gc )> 0{return cmap ._gc ;};cmap ._gc =[]byte (_bc .Join ([]string {_eea ,cmap .toBfData (),_faa },"\u000a"));return cmap ._gc ;};func (cmap *CMap )parseWMode ()error {var _bdge int ;_fed :=false ;for _dgf :=0;_dgf < 3&&!_fed ;_dgf ++{_aab ,_dba :=cmap .parseObject ();
if _dba !=nil {return _dba ;};switch _gaf :=_aab .(type ){case cmapOperand :switch _gaf .Operand {case "\u0064\u0065\u0066":_fed =true ;default:_ee .Log .Error ("\u0070\u0061\u0072\u0073\u0065\u0057\u004d\u006f\u0064\u0065:\u0020\u0073\u0074\u0061\u0074\u0065\u0020e\u0072\u0072\u006f\u0072\u002e\u0020\u006f\u003d\u0025\u0023\u0076",_aab );
return ErrBadCMap ;};case cmapInt :_bdge =int (_gaf ._abbe );};};cmap ._bff =integer {_aced :true ,_ddb :_bdge };return nil ;};type Codespace struct{NumBytes int ;Low CharCode ;High CharCode ;};type cmapString struct{String string ;};type cMapParser struct{_dfgc *_eb .Reader };
func (cmap *CMap )parseVersion ()error {_bebfb :="";_agd :=false ;for _dca :=0;_dca < 3&&!_agd ;_dca ++{_gdb ,_dad :=cmap .parseObject ();if _dad !=nil {return _dad ;};switch _ffe :=_gdb .(type ){case cmapOperand :switch _ffe .Operand {case "\u0064\u0065\u0066":_agd =true ;
default:_ee .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0070\u0061\u0072\u0073\u0065\u0056e\u0072\u0073\u0069\u006f\u006e\u003a \u0073\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020o\u003d\u0025\u0023\u0076",_gdb );
return ErrBadCMap ;};case cmapInt :_bebfb =_c .Sprintf ("\u0025\u0064",_ffe ._abbe );case cmapFloat :_bebfb =_c .Sprintf ("\u0025\u0066",_ffe ._ggdc );case cmapString :_bebfb =_ffe .String ;default:_ee .Log .Debug ("\u0045\u0052RO\u0052\u003a\u0020p\u0061\u0072\u0073\u0065Ver\u0073io\u006e\u003a\u0020\u0042\u0061\u0064\u0020ty\u0070\u0065\u002e\u0020\u006f\u003d\u0025#\u0076",_gdb );
};};cmap ._dc =_bebfb ;return nil ;};const (_ade =100;_eea ="\u000a\u002f\u0043\u0049\u0044\u0049\u006e\u0069\u0074\u0020\u002f\u0050\u0072\u006fc\u0053\u0065\u0074\u0020\u0066\u0069\u006e\u0064\u0072es\u006fu\u0072c\u0065 \u0062\u0065\u0067\u0069\u006e\u000a\u0031\u0032\u0020\u0064\u0069\u0063\u0074\u0020\u0062\u0065\u0067\u0069n\u000a\u0062\u0065\u0067\u0069\u006e\u0063\u006d\u0061\u0070\n\u002f\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065m\u0049\u006e\u0066\u006f\u0020\u003c\u003c\u0020\u002f\u0052\u0065\u0067\u0069\u0073t\u0072\u0079\u0020\u0028\u0041\u0064\u006f\u0062\u0065\u0029\u0020\u002f\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067\u0020\u0028\u0055\u0043\u0053)\u0020\u002f\u0053\u0075\u0070p\u006c\u0065\u006d\u0065\u006et\u0020\u0030\u0020\u003e\u003e\u0020\u0064\u0065\u0066\u000a\u002f\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065\u0020\u002f\u0041\u0064\u006f\u0062\u0065-\u0049\u0064\u0065\u006e\u0074\u0069\u0074\u0079\u002d\u0055\u0043\u0053\u0020\u0064\u0065\u0066\u000a\u002fC\u004d\u0061\u0070\u0054\u0079\u0070\u0065\u0020\u0032\u0020\u0064\u0065\u0066\u000a\u0031\u0020\u0062\u0065\u0067\u0069\u006e\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063e\u0072\u0061n\u0067\u0065\n\u003c\u0030\u0030\u0030\u0030\u003e\u0020<\u0046\u0046\u0046\u0046\u003e\u000a\u0065\u006e\u0064\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065r\u0061\u006e\u0067\u0065\u000a";
_faa ="\u0065\u006e\u0064\u0063\u006d\u0061\u0070\u000a\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065\u0020\u0063ur\u0072e\u006e\u0074\u0064\u0069\u0063\u0074\u0020\u002f\u0043\u004d\u0061\u0070 \u0064\u0065\u0066\u0069\u006e\u0065\u0072\u0065\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0070\u006fp\u000a\u0065\u006e\u0064\u000a\u0065\u006e\u0064\u000a";
);func (_cf *CIDSystemInfo )String ()string {return _c .Sprintf ("\u0025\u0073\u002d\u0025\u0073\u002d\u0025\u0030\u0033\u0064",_cf .Registry ,_cf .Ordering ,_cf .Supplement );};func (cmap *CMap )CharcodeToCID (code CharCode )(CharCode ,bool ){_ebb ,_af :=cmap ._ac [code ];
return _ebb ,_af ;};func (_eebd *cMapParser )parseDict ()(cmapDict ,error ){_ee .Log .Trace ("\u0052\u0065\u0061\u0064\u0069\u006e\u0067\u0020\u0050\u0044\u0046\u0020D\u0069\u0063\u0074\u0021");_afeg :=_gfag ();_agg ,_ :=_eebd ._dfgc .ReadByte ();if _agg !='<'{return _afeg ,ErrBadCMapDict ;
};_agg ,_ =_eebd ._dfgc .ReadByte ();if _agg !='<'{return _afeg ,ErrBadCMapDict ;};for {_eebd .skipSpaces ();_ggd ,_beadc :=_eebd ._dfgc .Peek (2);if _beadc !=nil {return _afeg ,_beadc ;};if (_ggd [0]=='>')&&(_ggd [1]=='>'){_eebd ._dfgc .ReadByte ();_eebd ._dfgc .ReadByte ();
break ;};_gff ,_beadc :=_eebd .parseName ();_ee .Log .Trace ("\u004be\u0079\u003a\u0020\u0025\u0073",_gff .Name );if _beadc !=nil {_ee .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0052\u0065\u0074\u0075\u0072\u006e\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u002e\u0020\u0065\u0072r=\u0025\u0076",_beadc );
return _afeg ,_beadc ;};_eebd .skipSpaces ();_bgfa ,_beadc :=_eebd .parseObject ();if _beadc !=nil {return _afeg ,_beadc ;};_afeg .Dict [_gff .Name ]=_bgfa ;_eebd .skipSpaces ();_ggd ,_beadc =_eebd ._dfgc .Peek (3);if _beadc !=nil {return _afeg ,_beadc ;
};if string (_ggd )=="\u0064\u0065\u0066"{_eebd ._dfgc .Discard (3);};};return _afeg ,nil ;};func (cmap *CMap )parseName ()error {_aa :="";_cedg :=false ;for _cag :=0;_cag < 20&&!_cedg ;_cag ++{_aeb ,_gcg :=cmap .parseObject ();if _gcg !=nil {return _gcg ;
};switch _ece :=_aeb .(type ){case cmapOperand :switch _ece .Operand {case "\u0064\u0065\u0066":_cedg =true ;default:_ee .Log .Debug ("\u0070\u0061\u0072\u0073\u0065\u004e\u0061\u006d\u0065\u003a\u0020\u0053\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020o\u003d\u0025\u0023\u0076\u0020n\u0061\u006de\u003d\u0025\u0023\u0071",_aeb ,_aa );
if _aa !=""{_aa =_c .Sprintf ("\u0025\u0073\u0020%\u0073",_aa ,_ece .Operand );};_ee .Log .Debug ("\u0070\u0061\u0072\u0073\u0065\u004e\u0061\u006d\u0065\u003a \u0052\u0065\u0063\u006f\u0076\u0065\u0072e\u0064\u002e\u0020\u006e\u0061\u006d\u0065\u003d\u0025\u0023\u0071",_aa );
};case cmapName :_aa =_ece .Name ;};};if !_cedg {_ee .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0070\u0061\u0072\u0073\u0065N\u0061m\u0065:\u0020\u004e\u006f\u0020\u0064\u0065\u0066 ");return ErrBadCMap ;};cmap ._ca =_aa ;return nil ;};func (cmap *CMap )CharcodeBytesToUnicode (data []byte )(string ,int ){_fbfd ,_abe :=cmap .BytesToCharcodes (data );
if !_abe {_ee .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0043\u0068\u0061\u0072\u0063\u006f\u0064\u0065\u0042\u0079\u0074\u0065s\u0054\u006f\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u002e\u0020\u004e\u006f\u0074\u0020\u0069n\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u002e\u0020\u0064\u0061\u0074\u0061\u003d\u005b\u0025\u0020\u0030\u0032\u0078]\u0020\u0063\u006d\u0061\u0070=\u0025\u0073",data ,cmap );
return "",0;};_beb :=make ([]string ,len (_fbfd ));var _bfg []CharCode ;for _da ,_cb :=range _fbfd {_gab ,_gabf :=cmap ._bf [_cb ];if !_gabf {_bfg =append (_bfg ,_cb );_gab =MissingCodeString ;};_beb [_da ]=_gab ;};_eeb :=_bc .Join (_beb ,"");if len (_bfg )> 0{_ee .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020C\u0068\u0061\u0072c\u006f\u0064\u0065\u0042y\u0074\u0065\u0073\u0054\u006f\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u002e\u0020\u004e\u006f\u0074\u0020\u0069\u006e\u0020\u006d\u0061\u0070\u002e\u000a"+"\u0009d\u0061t\u0061\u003d\u005b\u0025\u00200\u0032\u0078]\u003d\u0025\u0023\u0071\u000a"+"\u0009\u0063h\u0061\u0072\u0063o\u0064\u0065\u0073\u003d\u0025\u0030\u0032\u0078\u000a"+"\u0009\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u003d\u0025\u0064\u0020%\u0030\u0032\u0078\u000a"+"\u0009\u0075\u006e\u0069\u0063\u006f\u0064\u0065\u003d`\u0025\u0073\u0060\u000a"+"\u0009\u0063\u006d\u0061\u0070\u003d\u0025\u0073",data ,string (data ),_fbfd ,len (_bfg ),_bfg ,_eeb ,cmap );
};return _eeb ,len (_bfg );};type CMap struct{*cMapParser ;_ca string ;_cg int ;_fe int ;_dc string ;_cd string ;_fc CIDSystemInfo ;_gf []Codespace ;_ac map[CharCode ]CharCode ;_dcc map[CharCode ]CharCode ;_bf map[CharCode ]string ;_dbd map[string ]CharCode ;
_gc []byte ;_adg *_g .PdfObjectStream ;_bff integer ;};func (cmap *CMap )Name ()string {return cmap ._ca };type cmapFloat struct{_ggdc float64 };func NewToUnicodeCMap (codeToRune map[CharCode ]rune )*CMap {_ec :=make (map[CharCode ]string ,len (codeToRune ));
for _ccd ,_eba :=range codeToRune {_ec [_ccd ]=string (_eba );};cmap :=&CMap {_ca :"\u0041d\u006fb\u0065\u002d\u0049\u0064\u0065n\u0074\u0069t\u0079\u002d\u0055\u0043\u0053",_fe :2,_cg :16,_fc :CIDSystemInfo {Registry :"\u0041\u0064\u006fb\u0065",Ordering :"\u0055\u0043\u0053",Supplement :0},_gf :[]Codespace {{Low :0,High :0xffff}},_bf :_ec ,_dbd :make (map[string ]CharCode ,len (codeToRune )),_ac :make (map[CharCode ]CharCode ,len (codeToRune )),_dcc :make (map[CharCode ]CharCode ,len (codeToRune ))};
cmap .computeInverseMappings ();return cmap ;};func _dgb (_dddc cmapHexString )[]rune {if len (_dddc ._fcd )==1{return []rune {rune (_dddc ._fcd [0])};};_bdgc :=_dddc ._fcd ;if len (_bdgc )%2!=0{_bdgc =append (_bdgc ,0);_ee .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0068\u0065\u0078\u0054\u006f\u0052\u0075\u006e\u0065\u0073\u002e\u0020\u0050\u0061\u0064\u0064\u0069\u006e\u0067\u0020\u0073\u0068\u0065\u0078\u003d\u0025#\u0076\u0020\u0074\u006f\u0020\u0025\u002b\u0076",_dddc ,_bdgc );
};_cfaf :=len (_bdgc )>>1;_dafe :=make ([]uint16 ,_cfaf );for _fbaa :=0;_fbaa < _cfaf ;_fbaa ++{_dafe [_fbaa ]=uint16 (_bdgc [_fbaa <<1])<<8+uint16 (_bdgc [_fbaa <<1+1]);};_dcfb :=_b .Decode (_dafe );return _dcfb ;};func _egaf (_aafg []byte )*cMapParser {_ecbc :=cMapParser {};
_ggg :=_f .NewBuffer (_aafg );_ecbc ._dfgc =_eb .NewReader (_ggg );return &_ecbc ;};func (cmap *CMap )parseCodespaceRange ()error {for {_fedb ,_fge :=cmap .parseObject ();if _fge !=nil {if _fge ==_df .EOF {break ;};return _fge ;};_fbcd ,_feg :=_fedb .(cmapHexString );
if !_feg {if _ggb ,_cagg :=_fedb .(cmapOperand );_cagg {if _ggb .Operand ==_egde {return nil ;};return _fb .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");};};_fedb ,_fge =cmap .parseObject ();if _fge !=nil {if _fge ==_df .EOF {break ;
};return _fge ;};_cdc ,_feg :=_fedb .(cmapHexString );if !_feg {return _fb .New ("\u006e\u006f\u006e-\u0068\u0065\u0078\u0020\u0068\u0069\u0067\u0068");};if len (_fbcd ._fcd )!=len (_cdc ._fcd ){return _fb .New ("\u0075\u006e\u0065\u0071\u0075\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0062\u0079\u0074\u0065\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065");
};_gaff :=_bcdd (_fbcd );_aag :=_bcdd (_cdc );if _aag < _gaff {_ee .Log .Debug ("\u0045R\u0052\u004fR\u003a\u0020\u0042\u0061d\u0020\u0063\u006fd\u0065\u0073\u0070\u0061\u0063\u0065\u002e\u0020\u006cow\u003d\u0030\u0078%\u0030\u0032x\u0020\u0068\u0069\u0067\u0068\u003d0\u0078\u00250\u0032\u0078",_gaff ,_aag );
return ErrBadCMap ;};_cgbd :=_cdc ._geg ;_cedd :=Codespace {NumBytes :_cgbd ,Low :_gaff ,High :_aag };cmap ._gf =append (cmap ._gf ,_cedd );_ee .Log .Trace ("\u0043\u006f\u0064e\u0073\u0070\u0061\u0063e\u0020\u006c\u006f\u0077\u003a\u0020\u0030x\u0025\u0058\u002c\u0020\u0068\u0069\u0067\u0068\u003a\u0020\u0030\u0078\u0025\u0058",_gaff ,_aag );
};if len (cmap ._gf )==0{_ee .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u0020\u0069\u006e\u0020\u0063ma\u0070\u002e");return ErrBadCMap ;};return nil ;};func (_fbcf *cMapParser )parseName ()(cmapName ,error ){_gbf :="";
_bddg :=false ;for {_bgc ,_bead :=_fbcf ._dfgc .Peek (1);if _bead ==_df .EOF {break ;};if _bead !=nil {return cmapName {_gbf },_bead ;};if !_bddg {if _bgc [0]=='/'{_bddg =true ;_fbcf ._dfgc .ReadByte ();}else {_ee .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u004e\u0061\u006d\u0065\u0020\u0073\u0074a\u0072t\u0069n\u0067 \u0077\u0069\u0074\u0068\u0020\u0025\u0073\u0020\u0028\u0025\u0020\u0078\u0029",_bgc ,_bgc );
return cmapName {_gbf },_c .Errorf ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006ea\u006d\u0065:\u0020\u0028\u0025\u0063\u0029",_bgc [0]);};}else {if _g .IsWhiteSpace (_bgc [0]){break ;}else if (_bgc [0]=='/')||(_bgc [0]=='[')||(_bgc [0]=='(')||(_bgc [0]==']')||(_bgc [0]=='<')||(_bgc [0]=='>'){break ;
}else if _bgc [0]=='#'{_bbd ,_cbc :=_fbcf ._dfgc .Peek (3);if _cbc !=nil {return cmapName {_gbf },_cbc ;};_fbcf ._dfgc .Discard (3);_cbg ,_cbc :=_d .DecodeString (string (_bbd [1:3]));if _cbc !=nil {return cmapName {_gbf },_cbc ;};_gbf +=string (_cbg );
}else {_aed ,_ :=_fbcf ._dfgc .ReadByte ();_gbf +=string (_aed );};};};return cmapName {_gbf },nil ;};type cmapName struct{Name string ;};type CIDSystemInfo struct{Registry string ;Ordering string ;Supplement int ;};func (_ddde *cMapParser )parseHexString ()(cmapHexString ,error ){_ddde ._dfgc .ReadByte ();
_fgag :=[]byte ("\u0030\u0031\u0032\u003345\u0036\u0037\u0038\u0039\u0061\u0062\u0063\u0064\u0065\u0066\u0041\u0042\u0043\u0044E\u0046");_aefb :=_f .Buffer {};for {_ddde .skipSpaces ();_gfc ,_ffed :=_ddde ._dfgc .Peek (1);if _ffed !=nil {return cmapHexString {},_ffed ;
};if _gfc [0]=='>'{_ddde ._dfgc .ReadByte ();break ;};_ebbf ,_ :=_ddde ._dfgc .ReadByte ();if _f .IndexByte (_fgag ,_ebbf )>=0{_aefb .WriteByte (_ebbf );};};if _aefb .Len ()%2==1{_ee .Log .Debug ("\u0070\u0061rs\u0065\u0048\u0065x\u0053\u0074\u0072\u0069ng:\u0020ap\u0070\u0065\u006e\u0064\u0069\u006e\u0067 '\u0030\u0027\u0020\u0074\u006f\u0020\u0025#\u0071",_aefb .String ());
_aefb .WriteByte ('0');};_abbg :=_aefb .Len ()/2;_gbge ,_ :=_d .DecodeString (_aefb .String ());return cmapHexString {_geg :_abbg ,_fcd :_gbge },nil ;};func (cmap *CMap )toBfData ()string {if len (cmap ._bf )==0{return "";};_ega :=make ([]CharCode ,0,len (cmap ._bf ));
for _fcf :=range cmap ._bf {_ega =append (_ega ,_fcf );};_a .Slice (_ega ,func (_fbd ,_egf int )bool {return _ega [_fbd ]< _ega [_egf ]});var _ebe []charRange ;_abg :=charRange {_ega [0],_ega [0]};_bgg :=cmap ._bf [_ega [0]];for _ ,_cea :=range _ega [1:]{_afb :=cmap ._bf [_cea ];
if _cea ==_abg ._ab +1&&_ffd (_afb )==_ffd (_bgg )+1{_abg ._ab =_cea ;}else {_ebe =append (_ebe ,_abg );_abg ._ba ,_abg ._ab =_cea ,_cea ;};_bgg =_afb ;};_ebe =append (_ebe ,_abg );var _fef []CharCode ;var _eafe []fbRange ;for _ ,_cdg :=range _ebe {if _cdg ._ba ==_cdg ._ab {_fef =append (_fef ,_cdg ._ba );
}else {_eafe =append (_eafe ,fbRange {_ad :_cdg ._ba ,_eg :_cdg ._ab ,_gd :cmap ._bf [_cdg ._ba ]});};};_ee .Log .Trace ("\u0063\u0068ar\u0052\u0061\u006eg\u0065\u0073\u003d\u0025d f\u0062Ch\u0061\u0072\u0073\u003d\u0025\u0064\u0020fb\u0052\u0061\u006e\u0067\u0065\u0073\u003d%\u0064",len (_ebe ),len (_fef ),len (_eafe ));
var _gcbb []string ;if len (_fef )> 0{_cfcg :=(len (_fef )+_ade -1)/_ade ;for _ddc :=0;_ddc < _cfcg ;_ddc ++{_bb :=_aggg (len (_fef )-_ddc *_ade ,_ade );_gcbb =append (_gcbb ,_c .Sprintf ("\u0025\u0064\u0020\u0062\u0065\u0067\u0069\u006e\u0062f\u0063\u0068\u0061\u0072",_bb ));
for _ddg :=0;_ddg < _bb ;_ddg ++{_bga :=_fef [_ddc *_ade +_ddg ];_fbe :=cmap ._bf [_bga ];_gcbb =append (_gcbb ,_c .Sprintf ("\u003c%\u0030\u0034\u0078\u003e\u0020\u0025s",_bga ,_dfg (_fbe )));};_gcbb =append (_gcbb ,"\u0065n\u0064\u0062\u0066\u0063\u0068\u0061r");
};};if len (_eafe )> 0{_ead :=(len (_eafe )+_ade -1)/_ade ;for _ae :=0;_ae < _ead ;_ae ++{_ff :=_aggg (len (_eafe )-_ae *_ade ,_ade );_gcbb =append (_gcbb ,_c .Sprintf ("\u0025d\u0020b\u0065\u0067\u0069\u006e\u0062\u0066\u0072\u0061\u006e\u0067\u0065",_ff ));
for _bcd :=0;_bcd < _ff ;_bcd ++{_ddd :=_eafe [_ae *_ade +_bcd ];_gcbb =append (_gcbb ,_c .Sprintf ("\u003c%\u00304\u0078\u003e\u003c\u0025\u0030\u0034\u0078\u003e\u0020\u0025\u0073",_ddd ._ad ,_ddd ._eg ,_dfg (_ddd ._gd )));};_gcbb =append (_gcbb ,"\u0065\u006e\u0064\u0062\u0066\u0072\u0061\u006e\u0067\u0065");
};};return _bc .Join (_gcbb ,"\u000a");};func (cmap *CMap )inCodespace (_dd CharCode ,_cga int )bool {for _ ,_bccb :=range cmap ._gf {if _bccb .Low <=_dd &&_dd <=_bccb .High &&_cga ==_bccb .NumBytes {return true ;};};return false ;};func _dfg (_dab string )string {_eafd :=[]rune (_dab );
_fee :=make ([]string ,len (_eafd ));for _edd ,_dfa :=range _eafd {_fee [_edd ]=_c .Sprintf ("\u0025\u0030\u0034\u0078",_dfa );};return _c .Sprintf ("\u003c\u0025\u0073\u003e",_bc .Join (_fee ,""));};func _ge (_bde string )(*CMap ,error ){_ecc ,_eda :=_ea .Asset (_bde );
if _eda !=nil {return nil ,_eda ;};return LoadCmapFromDataCID (_ecc );};func (cmap *CMap )String ()string {_fad :=cmap ._fc ;_acb :=[]string {_c .Sprintf ("\u006e\u0062\u0069\u0074\u0073\u003a\u0025\u0064",cmap ._cg ),_c .Sprintf ("\u0074y\u0070\u0065\u003a\u0025\u0064",cmap ._fe )};
if cmap ._dc !=""{_acb =append (_acb ,_c .Sprintf ("\u0076\u0065\u0072\u0073\u0069\u006f\u006e\u003a\u0025\u0073",cmap ._dc ));};if cmap ._cd !=""{_acb =append (_acb ,_c .Sprintf ("u\u0073\u0065\u0063\u006d\u0061\u0070\u003a\u0025\u0023\u0071",cmap ._cd ));
};_acb =append (_acb ,_c .Sprintf ("\u0073\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f\u003a\u0025\u0073",_fad .String ()));if len (cmap ._gf )> 0{_acb =append (_acb ,_c .Sprintf ("\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u003a\u0025\u0064",len (cmap ._gf )));
};if len (cmap ._bf )> 0{_acb =append (_acb ,_c .Sprintf ("\u0063\u006fd\u0065\u0054\u006fU\u006e\u0069\u0063\u006f\u0064\u0065\u003a\u0025\u0064",len (cmap ._bf )));};return _c .Sprintf ("\u0043\u004d\u0041P\u007b\u0025\u0023\u0071\u0020\u0025\u0073\u007d",cmap ._ca ,_bc .Join (_acb ,"\u0020"));
};func (cmap *CMap )CIDSystemInfo ()CIDSystemInfo {return cmap ._fc };func _adc (_bcc bool )*CMap {_bd :=16;if _bcc {_bd =8;};return &CMap {_cg :_bd ,_ac :make (map[CharCode ]CharCode ),_dcc :make (map[CharCode ]CharCode ),_bf :make (map[CharCode ]string ),_dbd :make (map[string ]CharCode )};
};func (cmap *CMap )computeInverseMappings (){for _eaf ,_dcg :=range cmap ._ac {if _fcbe ,_de :=cmap ._dcc [_dcg ];!_de ||(_de &&_fcbe > _eaf ){cmap ._dcc [_dcg ]=_eaf ;};};for _gg ,_cfc :=range cmap ._bf {if _ef ,_eeg :=cmap ._dbd [_cfc ];!_eeg ||(_eeg &&_ef > _gg ){cmap ._dbd [_cfc ]=_gg ;
};};_a .Slice (cmap ._gf ,func (_fcbc ,_fcc int )bool {return cmap ._gf [_fcbc ].Low < cmap ._gf [_fcc ].Low });};func (cmap *CMap )Type ()int {return cmap ._fe };func (cmap *CMap )parseSystemInfo ()error {_dag :=false ;_cfa :=false ;_efa :="";_egc :=false ;
_fgd :=CIDSystemInfo {};for _bgaf :=0;_bgaf < 50&&!_egc ;_bgaf ++{_ada ,_bdf :=cmap .parseObject ();if _bdf !=nil {return _bdf ;};switch _ddf :=_ada .(type ){case cmapDict :_bef :=_ddf .Dict ;_fab ,_gfgb :=_bef ["\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079"];
if !_gfgb {_ee .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_cda ,_gfgb :=_fab .(cmapString );if !_gfgb {_ee .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");
return ErrBadCMap ;};_fgd .Registry =_cda .String ;_fab ,_gfgb =_bef ["\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067"];if !_gfgb {_ee .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");
return ErrBadCMap ;};_cda ,_gfgb =_fab .(cmapString );if !_gfgb {_ee .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_fgd .Ordering =_cda .String ;
_gfa ,_gfgb :=_bef ["\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074"];if !_gfgb {_ee .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;
};_ccgg ,_gfgb :=_gfa .(cmapInt );if !_gfgb {_ee .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_fgd .Supplement =int (_ccgg ._abbe );_egc =true ;
case cmapOperand :switch _ddf .Operand {case "\u0062\u0065\u0067i\u006e":_dag =true ;case "\u0065\u006e\u0064":_egc =true ;case "\u0064\u0065\u0066":_cfa =false ;};case cmapName :if _dag {_efa =_ddf .Name ;_cfa =true ;};case cmapString :if _cfa {switch _efa {case "\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079":_fgd .Registry =_ddf .String ;
case "\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067":_fgd .Ordering =_ddf .String ;};};case cmapInt :if _cfa {switch _efa {case "\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074":_fgd .Supplement =int (_ddf ._abbe );};};};};if !_egc {_ee .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0050\u0061\u0072\u0073\u0065\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006e\u0066\u006f\u0020\u0064\u0069\u0063\u0074\u0020\u0069\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u006c\u0079");
return ErrBadCMap ;};cmap ._fc =_fgd ;return nil ;};type charRange struct{_ba CharCode ;_ab CharCode ;};func (cmap *CMap )Stream ()(*_g .PdfObjectStream ,error ){if cmap ._adg !=nil {return cmap ._adg ,nil ;};_ged ,_daf :=_g .MakeStream (cmap .Bytes (),_g .NewFlateEncoder ());
if _daf !=nil {return nil ,_daf ;};cmap ._adg =_ged ;return cmap ._adg ,nil ;};func (cmap *CMap )WMode ()(int ,bool ){return cmap ._bff ._ddb ,cmap ._bff ._aced };type cmapObject interface{};type cmapHexString struct{_geg int ;_fcd []byte ;};func (cmap *CMap )parseBfrange ()error {for {var _fegf CharCode ;
_gfd ,_eceg :=cmap .parseObject ();if _eceg !=nil {if _eceg ==_df .EOF {break ;};return _eceg ;};switch _bba :=_gfd .(type ){case cmapOperand :if _bba .Operand ==_ddcf {return nil ;};return _fb .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");
case cmapHexString :_fegf =_bcdd (_bba );default:return _fb .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065");};var _afe CharCode ;_gfd ,_eceg =cmap .parseObject ();if _eceg !=nil {if _eceg ==_df .EOF {break ;};return _eceg ;
};switch _age :=_gfd .(type ){case cmapOperand :_ee .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0049\u006e\u0063\u006f\u006d\u0070\u006c\u0065\u0074\u0065\u0020\u0062\u0066r\u0061\u006e\u0067\u0065\u0020\u0074\u0072i\u0070\u006c\u0065\u0074");
return ErrBadCMap ;case cmapHexString :_afe =_bcdd (_age );if _afe > 0xffff{_afe =0xffff;};default:_ee .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0055\u006e\u0065\u0078\u0070e\u0063t\u0065d\u0020\u0074\u0079\u0070\u0065\u0020\u0025T",_gfd );return ErrBadCMap ;
};_gfd ,_eceg =cmap .parseObject ();if _eceg !=nil {if _eceg ==_df .EOF {break ;};return _eceg ;};switch _def :=_gfd .(type ){case cmapArray :if len (_def .Array )!=int (_afe -_fegf )+1{_ee .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u006f\u0066\u0020\u0069\u0074\u0065\u006d\u0073\u0020\u0069\u006e\u0020a\u0072\u0072\u0061\u0079");
return ErrBadCMap ;};for _fda :=_fegf ;_fda <=_afe ;_fda ++{_eafg :=_def .Array [_fda -_fegf ];_cfbb ,_cba :=_eafg .(cmapHexString );if !_cba {return _fb .New ("\u006e\u006f\u006e-h\u0065\u0078\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0069\u006e\u0020\u0061\u0072\u0072\u0061\u0079");
};_edeg :=_dgb (_cfbb );cmap ._bf [_fda ]=string (_edeg );};case cmapHexString :_cge :=_dgb (_def );_cfag :=len (_cge );for _cfd :=_fegf ;_cfd <=_afe ;_cfd ++{cmap ._bf [_cfd ]=string (_cge );if _cfag > 0{_cge [_cfag -1]++;}else {_ee .Log .Debug ("\u004e\u006f\u0020c\u006d\u0061\u0070\u0020\u0074\u0061\u0072\u0067\u0065\u0074\u0020\u0063\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0066\u006f\u0072\u0020\u0025\u0023\u0076",_cfd );
};if _cfd ==1<<32-1{break ;};};default:_ee .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0055\u006e\u0065\u0078\u0070e\u0063t\u0065d\u0020\u0074\u0079\u0070\u0065\u0020\u0025T",_gfd );return ErrBadCMap ;};};return nil ;};func (_fdb *cMapParser )skipSpaces ()(int ,error ){_fcfe :=0;
for {_faac ,_dgcf :=_fdb ._dfgc .Peek (1);if _dgcf !=nil {return 0,_dgcf ;};if _g .IsWhiteSpace (_faac [0]){_fdb ._dfgc .ReadByte ();_fcfe ++;}else {break ;};};return _fcfe ,nil ;};func (_gae *cMapParser )parseObject ()(cmapObject ,error ){_gae .skipSpaces ();
for {_afd ,_fcfa :=_gae ._dfgc .Peek (2);if _fcfa !=nil {return nil ,_fcfa ;};if _afd [0]=='%'{_gae .parseComment ();_gae .skipSpaces ();continue ;}else if _afd [0]=='/'{_bec ,_efba :=_gae .parseName ();return _bec ,_efba ;}else if _afd [0]=='('{_dbb ,_dcga :=_gae .parseString ();
return _dbb ,_dcga ;}else if _afd [0]=='['{_gcbd ,_bae :=_gae .parseArray ();return _gcbd ,_bae ;}else if (_afd [0]=='<')&&(_afd [1]=='<'){_egef ,_ecg :=_gae .parseDict ();return _egef ,_ecg ;}else if _afd [0]=='<'{_gge ,_cgbb :=_gae .parseHexString ();
return _gge ,_cgbb ;}else if _g .IsDecimalDigit (_afd [0])||(_afd [0]=='-'&&_g .IsDecimalDigit (_afd [1])){_dfab ,_bccg :=_gae .parseNumber ();if _bccg !=nil {return nil ,_bccg ;};return _dfab ,nil ;}else {_cec ,_geb :=_gae .parseOperand ();if _geb !=nil {return nil ,_geb ;
};return _cec ,nil ;};};};func LoadPredefinedCMap (name string )(*CMap ,error ){cmap ,_fcb :=_ge (name );if _fcb !=nil {return nil ,_fcb ;};if cmap ._cd ==""{cmap .computeInverseMappings ();return cmap ,nil ;};_ecb ,_fcb :=_ge (cmap ._cd );if _fcb !=nil {return nil ,_fcb ;
};for _cca ,_bab :=range _ecb ._ac {if _ ,_edee :=cmap ._ac [_cca ];!_edee {cmap ._ac [_cca ]=_bab ;};};cmap ._gf =append (cmap ._gf ,_ecb ._gf ...);cmap .computeInverseMappings ();return cmap ,nil ;};func _bcdd (_abc cmapHexString )CharCode {_cbbc :=CharCode (0);
for _ ,_eebf :=range _abc ._fcd {_cbbc <<=8;_cbbc |=CharCode (_eebf );};return _cbbc ;};type cmapArray struct{Array []cmapObject ;};func (cmap *CMap )StringToCID (s string )(CharCode ,bool ){_gfg ,_fgb :=cmap ._dbd [s ];return _gfg ,_fgb ;};func NewCIDSystemInfo (obj _g .PdfObject )(_gda CIDSystemInfo ,_ce error ){_ed ,_be :=_g .GetDict (obj );
if !_be {return CIDSystemInfo {},_g .ErrTypeError ;};_fa ,_be :=_g .GetStringVal (_ed .Get ("\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079"));if !_be {return CIDSystemInfo {},_g .ErrTypeError ;};_ga ,_be :=_g .GetStringVal (_ed .Get ("\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067"));
if !_be {return CIDSystemInfo {},_g .ErrTypeError ;};_db ,_be :=_g .GetIntVal (_ed .Get ("\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074"));if !_be {return CIDSystemInfo {},_g .ErrTypeError ;};return CIDSystemInfo {Registry :_fa ,Ordering :_ga ,Supplement :_db },nil ;
};func (cmap *CMap )CIDToCharcode (cid CharCode )(CharCode ,bool ){_cfg ,_eeec :=cmap ._dcc [cid ];return _cfg ,_eeec ;};func (_acf *cMapParser )parseNumber ()(cmapObject ,error ){_cfe ,_ebd :=_g .ParseNumber (_acf ._dfgc );if _ebd !=nil {return nil ,_ebd ;
};switch _gbfa :=_cfe .(type ){case *_g .PdfObjectFloat :return cmapFloat {float64 (*_gbfa )},nil ;case *_g .PdfObjectInteger :return cmapInt {int64 (*_gbfa )},nil ;};return nil ,_c .Errorf ("\u0075n\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_cfe );
};func (_bfb *cMapParser )parseOperand ()(cmapOperand ,error ){_ggeg :=cmapOperand {};_fbad :=_f .Buffer {};for {_abaa ,_gdc :=_bfb ._dfgc .Peek (1);if _gdc !=nil {if _gdc ==_df .EOF {break ;};return _ggeg ,_gdc ;};if _g .IsDelimiter (_abaa [0]){break ;
};if _g .IsWhiteSpace (_abaa [0]){break ;};_dbdf ,_ :=_bfb ._dfgc .ReadByte ();_fbad .WriteByte (_dbdf );};if _fbad .Len ()==0{return _ggeg ,_c .Errorf ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064\u0020\u0028\u0065\u006d\u0070\u0074\u0079\u0029");
};_ggeg .Operand =_fbad .String ();return _ggeg ,nil ;};func (cmap *CMap )parseBfchar ()error {for {_efb ,_gcf :=cmap .parseObject ();if _gcf !=nil {if _gcf ==_df .EOF {break ;};return _gcf ;};var _beg CharCode ;switch _eca :=_efb .(type ){case cmapOperand :if _eca .Operand ==_bgb {return nil ;
};return _fb .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");case cmapHexString :_beg =_bcdd (_eca );default:return _fb .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065");
};_efb ,_gcf =cmap .parseObject ();if _gcf !=nil {if _gcf ==_df .EOF {break ;};return _gcf ;};var _cef []rune ;switch _deg :=_efb .(type ){case cmapOperand :if _deg .Operand ==_bgb {return nil ;};_ee .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0055\u006e\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020o\u0070\u0065\u0072\u0061\u006e\u0064\u002e\u0020\u0025\u0023\u0076",_deg );
return ErrBadCMap ;case cmapHexString :_cef =_dgb (_deg );case cmapName :_ee .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064 \u006e\u0061\u006de\u002e \u0025\u0023\u0076",_deg );_cef =[]rune {MissingCodeRune };
default:_ee .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064 \u0074\u0079\u0070e\u002e \u0025\u0023\u0076",_efb );return ErrBadCMap ;};cmap ._bf [_beg ]=string (_cef );};return nil ;};func (cmap *CMap )matchCode (_gea []byte )(_gabc CharCode ,_eef int ,_bdd bool ){for _bdaa :=0;
_bdaa < _bg ;_bdaa ++{if _bdaa < len (_gea ){_gabc =_gabc <<8|CharCode (_gea [_bdaa ]);_eef ++;};_bdd =cmap .inCodespace (_gabc ,_bdaa +1);if _bdd {return _gabc ,_eef ,true ;};};_ee .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063o\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0020m\u0061t\u0063\u0068\u0065\u0073\u0020\u0062\u0079\u0074\u0065\u0073\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d=\u0025\u0023\u0071\u0020\u0063\u006d\u0061\u0070\u003d\u0025\u0073",_gea ,string (_gea ),cmap );
return 0,0,false ;};func (cmap *CMap )parseType ()error {_cbd :=0;_dfaa :=false ;for _ccg :=0;_ccg < 3&&!_dfaa ;_ccg ++{_cgdb ,_bgfd :=cmap .parseObject ();if _bgfd !=nil {return _bgfd ;};switch _bbc :=_cgdb .(type ){case cmapOperand :switch _bbc .Operand {case "\u0064\u0065\u0066":_dfaa =true ;
default:_ee .Log .Error ("\u0070\u0061r\u0073\u0065\u0054\u0079\u0070\u0065\u003a\u0020\u0073\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020\u006f=%\u0023\u0076",_cgdb );return ErrBadCMap ;};case cmapInt :_cbd =int (_bbc ._abbe );
};};cmap ._fe =_cbd ;return nil ;};func LoadCmapFromDataCID (data []byte )(*CMap ,error ){return LoadCmapFromData (data ,false )};func _gfag ()cmapDict {return cmapDict {Dict :map[string ]cmapObject {}}};func (_gdd *cMapParser )parseArray ()(cmapArray ,error ){_bfcb :=cmapArray {};
_bfcb .Array =[]cmapObject {};_gdd ._dfgc .ReadByte ();for {_gdd .skipSpaces ();_efed ,_gcga :=_gdd ._dfgc .Peek (1);if _gcga !=nil {return _bfcb ,_gcga ;};if _efed [0]==']'{_gdd ._dfgc .ReadByte ();break ;};_fdf ,_gcga :=_gdd .parseObject ();if _gcga !=nil {return _bfcb ,_gcga ;
};_bfcb .Array =append (_bfcb .Array ,_fdf );};return _bfcb ,nil ;};func IsPredefinedCMap (name string )bool {return _ea .AssetExists (name )};func (cmap *CMap )CharcodeToUnicode (code CharCode )(string ,bool ){if _eee ,_gb :=cmap ._bf [code ];_gb {return _eee ,true ;
};return MissingCodeString ,false ;};type fbRange struct{_ad CharCode ;_eg CharCode ;_gd string ;};type cmapInt struct{_abbe int64 };var (ErrBadCMap =_fb .New ("\u0062\u0061\u0064\u0020\u0063\u006d\u0061\u0070");ErrBadCMapComment =_fb .New ("c\u006f\u006d\u006d\u0065\u006e\u0074 \u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0073\u0074a\u0072\u0074\u0020w\u0069t\u0068\u0020\u0025");
ErrBadCMapDict =_fb .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074"););func _bfag (_dacb cmapHexString )rune {_gdbe :=_dgb (_dacb );if _gfca :=len (_gdbe );_gfca ==0{_ee .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0068\u0065\u0078\u0054o\u0052\u0075\u006e\u0065\u002e\u0020\u0045\u0078p\u0065c\u0074\u0065\u0064\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0072u\u006e\u0065\u0020\u0073\u0068\u0065\u0078\u003d\u0025\u0023\u0076",_dacb );
return MissingCodeRune ;};if len (_gdbe )> 1{_ee .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0068\u0065\u0078\u0054\u006f\u0052\u0075\u006e\u0065\u002e\u0020\u0045\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0065\u0078\u0061\u0063\u0074\u006c\u0079\u0020\u006f\u006e\u0065\u0020\u0072\u0075\u006e\u0065\u0020\u0073\u0068\u0065\u0078\u003d\u0025\u0023v\u0020\u002d\u003e\u0020\u0025#\u0076",_dacb ,_gdbe );
};return _gdbe [0];};func (cmap *CMap )parse ()error {var _fd cmapObject ;for {_egd ,_dea :=cmap .parseObject ();if _dea !=nil {if _dea ==_df .EOF {break ;};_ee .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u004d\u0061\u0070\u003a\u0020\u0025\u0076",_dea );
return _dea ;};switch _eddc :=_egd .(type ){case cmapOperand :_ced :=_eddc ;switch _ced .Operand {case _bee :_abb :=cmap .parseCodespaceRange ();if _abb !=nil {return _abb ;};case _dfc :_cgad :=cmap .parseCIDRange ();if _cgad !=nil {return _cgad ;};case _gef :_efd :=cmap .parseBfchar ();
if _efd !=nil {return _efd ;};case _fcff :_dcca :=cmap .parseBfrange ();if _dcca !=nil {return _dcca ;};case _babg :if _fd ==nil {_ee .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0075\u0073\u0065\u0063m\u0061\u0070\u0020\u0077\u0069\u0074\u0068\u0020\u006e\u006f \u0061\u0072\u0067");
return ErrBadCMap ;};_bgf ,_bdg :=_fd .(cmapName );if !_bdg {_ee .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0075\u0073\u0065\u0063\u006d\u0061\u0070\u0020\u0061\u0072\u0067\u0020\u006eo\u0074\u0020\u0061\u0020\u006e\u0061\u006de\u0020\u0025\u0023\u0076",_fd );
return ErrBadCMap ;};cmap ._cd =_bgf .Name ;case _bbf :_gabb :=cmap .parseSystemInfo ();if _gabb !=nil {return _gabb ;};};case cmapName :_cfcf :=_eddc ;switch _cfcf .Name {case _bbf :_cgbg :=cmap .parseSystemInfo ();if _cgbg !=nil {return _cgbg ;};case _aba :_dbfe :=cmap .parseName ();
if _dbfe !=nil {return _dbfe ;};case _bfd :_efc :=cmap .parseType ();if _efc !=nil {return _efc ;};case _efe :_aceb :=cmap .parseVersion ();if _aceb !=nil {return _aceb ;};case _bfc :if _dea =cmap .parseWMode ();_dea !=nil {return _dea ;};};};_fd =_egd ;
};return nil ;};func (_dac *cMapParser )parseString ()(cmapString ,error ){_dac ._dfgc .ReadByte ();_adb :=_f .Buffer {};_afa :=1;for {_fdg ,_gfdg :=_dac ._dfgc .Peek (1);if _gfdg !=nil {return cmapString {_adb .String ()},_gfdg ;};if _fdg [0]=='\\'{_dac ._dfgc .ReadByte ();
_ebf ,_bgd :=_dac ._dfgc .ReadByte ();if _bgd !=nil {return cmapString {_adb .String ()},_bgd ;};if _g .IsOctalDigit (_ebf ){_ebag ,_cbb :=_dac ._dfgc .Peek (2);if _cbb !=nil {return cmapString {_adb .String ()},_cbb ;};var _fba []byte ;_fba =append (_fba ,_ebf );
for _ ,_edbe :=range _ebag {if _g .IsOctalDigit (_edbe ){_fba =append (_fba ,_edbe );}else {break ;};};_dac ._dfgc .Discard (len (_fba )-1);_ee .Log .Trace ("\u004e\u0075\u006d\u0065ri\u0063\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0022\u0025\u0073\u0022",_fba );
_gag ,_cbb :=_cc .ParseUint (string (_fba ),8,32);if _cbb !=nil {return cmapString {_adb .String ()},_cbb ;};_adb .WriteByte (byte (_gag ));continue ;};switch _ebf {case 'n':_adb .WriteByte ('\n');case 'r':_adb .WriteByte ('\r');case 't':_adb .WriteByte ('\t');
case 'b':_adb .WriteByte ('\b');case 'f':_adb .WriteByte ('\f');case '(':_adb .WriteByte ('(');case ')':_adb .WriteByte (')');case '\\':_adb .WriteByte ('\\');};continue ;}else if _fdg [0]=='('{_afa ++;}else if _fdg [0]==')'{_afa --;if _afa ==0{_dac ._dfgc .ReadByte ();
break ;};};_ggad ,_ :=_dac ._dfgc .ReadByte ();_adb .WriteByte (_ggad );};return cmapString {_adb .String ()},nil ;};const (_bbf ="\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f";_bfe ="\u0062e\u0067\u0069\u006e\u0063\u006d\u0061p";
_gcgg ="\u0065n\u0064\u0063\u006d\u0061\u0070";_bee ="\u0062\u0065\u0067\u0069nc\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0072\u0061\u006e\u0067\u0065";_egde ="\u0065\u006e\u0064\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065r\u0061\u006e\u0067\u0065";
_gef ="b\u0065\u0067\u0069\u006e\u0062\u0066\u0063\u0068\u0061\u0072";_bgb ="\u0065n\u0064\u0062\u0066\u0063\u0068\u0061r";_fcff ="\u0062\u0065\u0067i\u006e\u0062\u0066\u0072\u0061\u006e\u0067\u0065";_ddcf ="\u0065\u006e\u0064\u0062\u0066\u0072\u0061\u006e\u0067\u0065";
_dfc ="\u0062\u0065\u0067\u0069\u006e\u0063\u0069\u0064\u0072\u0061\u006e\u0067\u0065";_begc ="e\u006e\u0064\u0063\u0069\u0064\u0072\u0061\u006e\u0067\u0065";_babg ="\u0075s\u0065\u0063\u006d\u0061\u0070";_bfc ="\u0057\u004d\u006fd\u0065";_aba ="\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065";
_bfd ="\u0043\u004d\u0061\u0070\u0054\u0079\u0070\u0065";_efe ="C\u004d\u0061\u0070\u0056\u0065\u0072\u0073\u0069\u006f\u006e";);func _ffd (_edb string )rune {_cfgc :=[]rune (_edb );return _cfgc [len (_cfgc )-1]};const (_bg =4;MissingCodeRune ='\ufffd';
MissingCodeString =string (MissingCodeRune ););func (cmap *CMap )BytesToCharcodes (data []byte )([]CharCode ,bool ){var _bebf []CharCode ;if cmap ._cg ==8{for _ ,_cbe :=range data {_bebf =append (_bebf ,CharCode (_cbe ));};return _bebf ,true ;};for _efg :=0;
_efg < len (data );{_afc ,_agf ,_bda :=cmap .matchCode (data [_efg :]);if !_bda {_ee .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0074\u0020\u0069\u003d\u0025\u0064\u0020\u0062\u0079\u0074\u0065\u0073\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d\u003d\u0025\u0023\u0071",_efg ,data ,string (data ));
return _bebf ,false ;};_bebf =append (_bebf ,_afc );_efg +=_agf ;};return _bebf ,true ;};type CharCode uint32 ;func _aggg (_abaf ,_aae int )int {if _abaf < _aae {return _abaf ;};return _aae ;};