//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package cmap ;import (_ec "bufio";_d "bytes";_c "encoding/hex";_f "errors";_e "fmt";_cb "github.com/unidoc/unipdf/v3/common";_cbc "github.com/unidoc/unipdf/v3/core";_fd "github.com/unidoc/unipdf/v3/internal/cmap/bcmaps";_cg "io";_ff "sort";_g "strconv";
_cc "strings";_b "unicode/utf16";);type cmapHexString struct{_fefa int ;_cbe []byte ;};func (cmap *CMap )parseType ()error {_beb :=0;_cedb :=false ;for _bddd :=0;_bddd < 3&&!_cedb ;_bddd ++{_fec ,_adf :=cmap .parseObject ();if _adf !=nil {return _adf ;
};switch _bade :=_fec .(type ){case cmapOperand :switch _bade .Operand {case "\u0064\u0065\u0066":_cedb =true ;default:_cb .Log .Error ("\u0070\u0061r\u0073\u0065\u0054\u0079\u0070\u0065\u003a\u0020\u0073\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020\u006f=%\u0023\u0076",_fec );
return ErrBadCMap ;};case cmapInt :_beb =int (_bade ._egcb );};};cmap ._bg =_beb ;return nil ;};func NewToUnicodeCMap (codeToRune map[CharCode ]rune )*CMap {_cbg :=make (map[CharCode ]string ,len (codeToRune ));for _af ,_ce :=range codeToRune {_cbg [_af ]=string (_ce );
};cmap :=&CMap {_aa :"\u0041d\u006fb\u0065\u002d\u0049\u0064\u0065n\u0074\u0069t\u0079\u002d\u0055\u0043\u0053",_bg :2,_db :16,_aag :CIDSystemInfo {Registry :"\u0041\u0064\u006fb\u0065",Ordering :"\u0055\u0043\u0053",Supplement :0},_bf :[]Codespace {{Low :0,High :0xffff}},_cbf :_cbg ,_ge :make (map[string ]CharCode ,len (codeToRune )),_faf :make (map[CharCode ]CharCode ,len (codeToRune )),_cf :make (map[CharCode ]CharCode ,len (codeToRune ))};
cmap .computeInverseMappings ();return cmap ;};func IsPredefinedCMap (name string )bool {return _fd .AssetExists (name )};func (cmap *CMap )inCodespace (_fgdb CharCode ,_afd int )bool {for _ ,_egge :=range cmap ._bf {if _egge .Low <=_fgdb &&_fgdb <=_egge .High &&_afd ==_egge .NumBytes {return true ;
};};return false ;};func (_bbca *cMapParser )parseArray ()(cmapArray ,error ){_fgfb :=cmapArray {};_fgfb .Array =[]cmapObject {};_bbca ._gage .ReadByte ();for {_bbca .skipSpaces ();_cgf ,_cbce :=_bbca ._gage .Peek (1);if _cbce !=nil {return _fgfb ,_cbce ;
};if _cgf [0]==']'{_bbca ._gage .ReadByte ();break ;};_gbcf ,_cbce :=_bbca .parseObject ();if _cbce !=nil {return _fgfb ,_cbce ;};_fgfb .Array =append (_fgfb .Array ,_gbcf );};return _fgfb ,nil ;};func (cmap *CMap )WMode ()(int ,bool ){return cmap ._gea ._caed ,cmap ._gea ._eag };
func _fcfc ()cmapDict {return cmapDict {Dict :map[string ]cmapObject {}}};func (cmap *CMap )parseCodespaceRange ()error {for {_ffba ,_cgb :=cmap .parseObject ();if _cgb !=nil {if _cgb ==_cg .EOF {break ;};return _cgb ;};_cbgg ,_gdb :=_ffba .(cmapHexString );
if !_gdb {if _eecg ,_dcg :=_ffba .(cmapOperand );_dcg {if _eecg .Operand ==_aab {return nil ;};return _f .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");};};_ffba ,_cgb =cmap .parseObject ();if _cgb !=nil {if _cgb ==_cg .EOF {break ;
};return _cgb ;};_ffe ,_gdb :=_ffba .(cmapHexString );if !_gdb {return _f .New ("\u006e\u006f\u006e-\u0068\u0065\u0078\u0020\u0068\u0069\u0067\u0068");};if len (_cbgg ._cbe )!=len (_ffe ._cbe ){return _f .New ("\u0075\u006e\u0065\u0071\u0075\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0062\u0079\u0074\u0065\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065");
};_fgag :=_gda (_cbgg );_cbda :=_gda (_ffe );if _cbda < _fgag {_cb .Log .Debug ("\u0045R\u0052\u004fR\u003a\u0020\u0042\u0061d\u0020\u0063\u006fd\u0065\u0073\u0070\u0061\u0063\u0065\u002e\u0020\u006cow\u003d\u0030\u0078%\u0030\u0032x\u0020\u0068\u0069\u0067\u0068\u003d0\u0078\u00250\u0032\u0078",_fgag ,_cbda );
return ErrBadCMap ;};_faa :=_ffe ._fefa ;_bde :=Codespace {NumBytes :_faa ,Low :_fgag ,High :_cbda };cmap ._bf =append (cmap ._bf ,_bde );_cb .Log .Trace ("\u0043\u006f\u0064e\u0073\u0070\u0061\u0063e\u0020\u006c\u006f\u0077\u003a\u0020\u0030x\u0025\u0058\u002c\u0020\u0068\u0069\u0067\u0068\u003a\u0020\u0030\u0078\u0025\u0058",_fgag ,_cbda );
};if len (cmap ._bf )==0{_cb .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u0020\u0069\u006e\u0020\u0063ma\u0070\u002e");return ErrBadCMap ;};return nil ;};const (_edde ="\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f";
_ebg ="\u0062e\u0067\u0069\u006e\u0063\u006d\u0061p";_eaf ="\u0065n\u0064\u0063\u006d\u0061\u0070";_bcd ="\u0062\u0065\u0067\u0069nc\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0072\u0061\u006e\u0067\u0065";_aab ="\u0065\u006e\u0064\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065r\u0061\u006e\u0067\u0065";
_gdcb ="b\u0065\u0067\u0069\u006e\u0062\u0066\u0063\u0068\u0061\u0072";_bfg ="\u0065n\u0064\u0062\u0066\u0063\u0068\u0061r";_abg ="\u0062\u0065\u0067i\u006e\u0062\u0066\u0072\u0061\u006e\u0067\u0065";_gef ="\u0065\u006e\u0064\u0062\u0066\u0072\u0061\u006e\u0067\u0065";
_fdd ="\u0062\u0065\u0067\u0069\u006e\u0063\u0069\u0064\u0072\u0061\u006e\u0067\u0065";_bagc ="e\u006e\u0064\u0063\u0069\u0064\u0072\u0061\u006e\u0067\u0065";_cbad ="\u0075s\u0065\u0063\u006d\u0061\u0070";_fdf ="\u0057\u004d\u006fd\u0065";_cbdb ="\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065";
_ggeb ="\u0043\u004d\u0061\u0070\u0054\u0079\u0070\u0065";_cdba ="C\u004d\u0061\u0070\u0056\u0065\u0072\u0073\u0069\u006f\u006e";);func NewCIDSystemInfo (obj _cbc .PdfObject )(_ba CIDSystemInfo ,_bc error ){_cge ,_ag :=_cbc .GetDict (obj );if !_ag {return CIDSystemInfo {},_cbc .ErrTypeError ;
};_bd ,_ag :=_cbc .GetStringVal (_cge .Get ("\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079"));if !_ag {return CIDSystemInfo {},_cbc .ErrTypeError ;};_ea ,_ag :=_cbc .GetStringVal (_cge .Get ("\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067"));if !_ag {return CIDSystemInfo {},_cbc .ErrTypeError ;
};_ffb ,_ag :=_cbc .GetIntVal (_cge .Get ("\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074"));if !_ag {return CIDSystemInfo {},_cbc .ErrTypeError ;};return CIDSystemInfo {Registry :_bd ,Ordering :_ea ,Supplement :_ffb },nil ;};func (_fgdbb *cMapParser )parseNumber ()(cmapObject ,error ){_bdfd ,_bcgd :=_cbc .ParseNumber (_fgdbb ._gage );
if _bcgd !=nil {return nil ,_bcgd ;};switch _gce :=_bdfd .(type ){case *_cbc .PdfObjectFloat :return cmapFloat {float64 (*_gce )},nil ;case *_cbc .PdfObjectInteger :return cmapInt {int64 (*_gce )},nil ;};return nil ,_e .Errorf ("\u0075n\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_bdfd );
};func _gebc (_cdg string )string {_ged :=[]rune (_cdg );_bab :=make ([]string ,len (_ged ));for _cag ,_eggef :=range _ged {_bab [_cag ]=_e .Sprintf ("\u0025\u0030\u0034\u0078",_eggef );};return _e .Sprintf ("\u003c\u0025\u0073\u003e",_cc .Join (_bab ,""));
};type CIDSystemInfo struct{Registry string ;Ordering string ;Supplement int ;};func (cmap *CMap )Stream ()(*_cbc .PdfObjectStream ,error ){if cmap ._be !=nil {return cmap ._be ,nil ;};_gee ,_agd :=_cbc .MakeStream (cmap .Bytes (),_cbc .NewFlateEncoder ());
if _agd !=nil {return nil ,_agd ;};cmap ._be =_gee ;return cmap ._be ,nil ;};func (cmap *CMap )matchCode (_gac []byte )(_dbe CharCode ,_gaf int ,_fgc bool ){for _bbe :=0;_bbe < _dd ;_bbe ++{if _bbe < len (_gac ){_dbe =_dbe <<8|CharCode (_gac [_bbe ]);_gaf ++;
};_fgc =cmap .inCodespace (_dbe ,_bbe +1);if _fgc {return _dbe ,_gaf ,true ;};};_cb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063o\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0020m\u0061t\u0063\u0068\u0065\u0073\u0020\u0062\u0079\u0074\u0065\u0073\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d=\u0025\u0023\u0071\u0020\u0063\u006d\u0061\u0070\u003d\u0025\u0073",_gac ,string (_gac ),cmap );
return 0,0,false ;};type cmapArray struct{Array []cmapObject ;};func (_ebc *cMapParser )parseObject ()(cmapObject ,error ){_ebc .skipSpaces ();for {_cgc ,_dab :=_ebc ._gage .Peek (2);if _dab !=nil {return nil ,_dab ;};if _cgc [0]=='%'{_ebc .parseComment ();
_ebc .skipSpaces ();continue ;}else if _cgc [0]=='/'{_ac ,_fcd :=_ebc .parseName ();return _ac ,_fcd ;}else if _cgc [0]=='('{_fcdb ,_fdb :=_ebc .parseString ();return _fcdb ,_fdb ;}else if _cgc [0]=='['{_baeb ,_eggg :=_ebc .parseArray ();return _baeb ,_eggg ;
}else if (_cgc [0]=='<')&&(_cgc [1]=='<'){_gdfc ,_dag :=_ebc .parseDict ();return _gdfc ,_dag ;}else if _cgc [0]=='<'{_fefd ,_dce :=_ebc .parseHexString ();return _fefd ,_dce ;}else if _cbc .IsDecimalDigit (_cgc [0])||(_cgc [0]=='-'&&_cbc .IsDecimalDigit (_cgc [1])){_egce ,_acf :=_ebc .parseNumber ();
if _acf !=nil {return nil ,_acf ;};return _egce ,nil ;}else {_feb ,_bbc :=_ebc .parseOperand ();if _bbc !=nil {return nil ,_bbc ;};return _feb ,nil ;};};};func (cmap *CMap )parseBfchar ()error {for {_fcf ,_dgc :=cmap .parseObject ();if _dgc !=nil {if _dgc ==_cg .EOF {break ;
};return _dgc ;};var _bgeb CharCode ;switch _ggc :=_fcf .(type ){case cmapOperand :if _ggc .Operand ==_bfg {return nil ;};return _f .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");case cmapHexString :_bgeb =_gda (_ggc );
default:return _f .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065");};_fcf ,_dgc =cmap .parseObject ();if _dgc !=nil {if _dgc ==_cg .EOF {break ;};return _dgc ;};var _gdf []rune ;switch _cccg :=_fcf .(type ){case cmapOperand :if _cccg .Operand ==_bfg {return nil ;
};_cb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0055\u006e\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020o\u0070\u0065\u0072\u0061\u006e\u0064\u002e\u0020\u0025\u0023\u0076",_cccg );return ErrBadCMap ;case cmapHexString :_gdf =_cfa (_cccg );
case cmapName :_cb .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064 \u006e\u0061\u006de\u002e \u0025\u0023\u0076",_cccg );_gdf =[]rune {MissingCodeRune };default:_cb .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064 \u0074\u0079\u0070e\u002e \u0025\u0023\u0076",_fcf );
return ErrBadCMap ;};cmap ._cbf [_bgeb ]=string (_gdf );};return nil ;};type cmapName struct{Name string ;};func (cmap *CMap )NBits ()int {return cmap ._db };func _gda (_eged cmapHexString )CharCode {_dde :=CharCode (0);for _ ,_ebga :=range _eged ._cbe {_dde <<=8;
_dde |=CharCode (_ebga );};return _dde ;};func (cmap *CMap )CharcodeToUnicode (code CharCode )(string ,bool ){if _agc ,_gad :=cmap ._cbf [code ];_gad {return _agc ,true ;};return MissingCodeString ,false ;};func (cmap *CMap )StringToCID (s string )(CharCode ,bool ){_aee ,_ccc :=cmap ._ge [s ];
return _aee ,_ccc ;};func (_cfd *cMapParser )parseDict ()(cmapDict ,error ){_cb .Log .Trace ("\u0052\u0065\u0061\u0064\u0069\u006e\u0067\u0020\u0050\u0044\u0046\u0020D\u0069\u0063\u0074\u0021");_cae :=_fcfc ();_bed ,_ :=_cfd ._gage .ReadByte ();if _bed !='<'{return _cae ,ErrBadCMapDict ;
};_bed ,_ =_cfd ._gage .ReadByte ();if _bed !='<'{return _cae ,ErrBadCMapDict ;};for {_cfd .skipSpaces ();_dacc ,_dba :=_cfd ._gage .Peek (2);if _dba !=nil {return _cae ,_dba ;};if (_dacc [0]=='>')&&(_dacc [1]=='>'){_cfd ._gage .ReadByte ();_cfd ._gage .ReadByte ();
break ;};_cedc ,_dba :=_cfd .parseName ();_cb .Log .Trace ("\u004be\u0079\u003a\u0020\u0025\u0073",_cedc .Name );if _dba !=nil {_cb .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0052\u0065\u0074\u0075\u0072\u006e\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u002e\u0020\u0065\u0072r=\u0025\u0076",_dba );
return _cae ,_dba ;};_cfd .skipSpaces ();_ada ,_dba :=_cfd .parseObject ();if _dba !=nil {return _cae ,_dba ;};_cae .Dict [_cedc .Name ]=_ada ;_cfd .skipSpaces ();_dacc ,_dba =_cfd ._gage .Peek (3);if _dba !=nil {return _cae ,_dba ;};if string (_dacc )=="\u0064\u0065\u0066"{_cfd ._gage .Discard (3);
};};return _cae ,nil ;};type cMapParser struct{_gage *_ec .Reader };func (_gccb *cMapParser )skipSpaces ()(int ,error ){_dcag :=0;for {_abag ,_gae :=_gccb ._gage .Peek (1);if _gae !=nil {return 0,_gae ;};if _cbc .IsWhiteSpace (_abag [0]){_gccb ._gage .ReadByte ();
_dcag ++;}else {break ;};};return _dcag ,nil ;};type Codespace struct{NumBytes int ;Low CharCode ;High CharCode ;};func LoadCmapFromData (data []byte ,isSimple bool )(*CMap ,error ){_cb .Log .Trace ("\u004c\u006fa\u0064\u0043\u006d\u0061\u0070\u0046\u0072\u006f\u006d\u0044\u0061\u0074\u0061\u003a\u0020\u0069\u0073\u0053\u0069\u006d\u0070\u006ce=\u0025\u0074",isSimple );
cmap :=_afg (isSimple );cmap .cMapParser =_eefa (data );_cef :=cmap .parse ();if _cef !=nil {return nil ,_cef ;};if len (cmap ._bf )==0{if cmap ._ae !=""{return cmap ,nil ;};_cb .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u002e\u0020\u0063\u006d\u0061p=\u0025\u0073",cmap );
};cmap .computeInverseMappings ();return cmap ,nil ;};type cmapString struct{String string ;};type CMap struct{*cMapParser ;_aa string ;_db int ;_bg int ;_gd string ;_ae string ;_aag CIDSystemInfo ;_bf []Codespace ;_faf map[CharCode ]CharCode ;_cf map[CharCode ]CharCode ;
_cbf map[CharCode ]string ;_ge map[string ]CharCode ;_ecf []byte ;_be *_cbc .PdfObjectStream ;_gea integer ;};type cmapObject interface{};func (_ab *CIDSystemInfo )String ()string {return _e .Sprintf ("\u0025\u0073\u002d\u0025\u0073\u002d\u0025\u0030\u0033\u0064",_ab .Registry ,_ab .Ordering ,_ab .Supplement );
};func (_cedf *cMapParser )parseName ()(cmapName ,error ){_aaae :="";_afa :=false ;for {_cdcd ,_eab :=_cedf ._gage .Peek (1);if _eab ==_cg .EOF {break ;};if _eab !=nil {return cmapName {_aaae },_eab ;};if !_afa {if _cdcd [0]=='/'{_afa =true ;_cedf ._gage .ReadByte ();
}else {_cb .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u004e\u0061\u006d\u0065\u0020\u0073\u0074a\u0072t\u0069n\u0067 \u0077\u0069\u0074\u0068\u0020\u0025\u0073\u0020\u0028\u0025\u0020\u0078\u0029",_cdcd ,_cdcd );return cmapName {_aaae },_e .Errorf ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006ea\u006d\u0065:\u0020\u0028\u0025\u0063\u0029",_cdcd [0]);
};}else {if _cbc .IsWhiteSpace (_cdcd [0]){break ;}else if (_cdcd [0]=='/')||(_cdcd [0]=='[')||(_cdcd [0]=='(')||(_cdcd [0]==']')||(_cdcd [0]=='<')||(_cdcd [0]=='>'){break ;}else if _cdcd [0]=='#'{_geca ,_cab :=_cedf ._gage .Peek (3);if _cab !=nil {return cmapName {_aaae },_cab ;
};_cedf ._gage .Discard (3);_cagd ,_cab :=_c .DecodeString (string (_geca [1:3]));if _cab !=nil {return cmapName {_aaae },_cab ;};_aaae +=string (_cagd );}else {_fecb ,_ :=_cedf ._gage .ReadByte ();_aaae +=string (_fecb );};};};return cmapName {_aaae },nil ;
};func _eefa (_ega []byte )*cMapParser {_gbc :=cMapParser {};_gged :=_d .NewBuffer (_ega );_gbc ._gage =_ec .NewReader (_gged );return &_gbc ;};func (cmap *CMap )toBfData ()string {if len (cmap ._cbf )==0{return "";};_eef :=make ([]CharCode ,0,len (cmap ._cbf ));
for _ecgb :=range cmap ._cbf {_eef =append (_eef ,_ecgb );};_ff .Slice (_eef ,func (_egcf ,_agf int )bool {return _eef [_egcf ]< _eef [_agf ]});var _bae []charRange ;_ded :=charRange {_eef [0],_eef [0]};_ceg :=cmap ._cbf [_eef [0]];for _ ,_aba :=range _eef [1:]{_cgd :=cmap ._cbf [_aba ];
if _aba ==_ded ._ccd +1&&_abe (_cgd )==_abe (_ceg )+1{_ded ._ccd =_aba ;}else {_bae =append (_bae ,_ded );_ded ._ga ,_ded ._ccd =_aba ,_aba ;};_ceg =_cgd ;};_bae =append (_bae ,_ded );var _fbe []CharCode ;var _efa []fbRange ;for _ ,_eb :=range _bae {if _eb ._ga ==_eb ._ccd {_fbe =append (_fbe ,_eb ._ga );
}else {_efa =append (_efa ,fbRange {_eg :_eb ._ga ,_fa :_eb ._ccd ,_dg :cmap ._cbf [_eb ._ga ]});};};_cb .Log .Trace ("\u0063\u0068ar\u0052\u0061\u006eg\u0065\u0073\u003d\u0025d f\u0062Ch\u0061\u0072\u0073\u003d\u0025\u0064\u0020fb\u0052\u0061\u006e\u0067\u0065\u0073\u003d%\u0064",len (_bae ),len (_fbe ),len (_efa ));
var _ege []string ;if len (_fbe )> 0{_fbg :=(len (_fbe )+_egf -1)/_egf ;for _cccc :=0;_cccc < _fbg ;_cccc ++{_cff :=_gcee (len (_fbe )-_cccc *_egf ,_egf );_ege =append (_ege ,_e .Sprintf ("\u0025\u0064\u0020\u0062\u0065\u0067\u0069\u006e\u0062f\u0063\u0068\u0061\u0072",_cff ));
for _ad :=0;_ad < _cff ;_ad ++{_fcc :=_fbe [_cccc *_egf +_ad ];_efc :=cmap ._cbf [_fcc ];_ege =append (_ege ,_e .Sprintf ("\u003c%\u0030\u0034\u0078\u003e\u0020\u0025s",_fcc ,_gebc (_efc )));};_ege =append (_ege ,"\u0065n\u0064\u0062\u0066\u0063\u0068\u0061r");
};};if len (_efa )> 0{_gba :=(len (_efa )+_egf -1)/_egf ;for _gge :=0;_gge < _gba ;_gge ++{_fga :=_gcee (len (_efa )-_gge *_egf ,_egf );_ege =append (_ege ,_e .Sprintf ("\u0025d\u0020b\u0065\u0067\u0069\u006e\u0062\u0066\u0072\u0061\u006e\u0067\u0065",_fga ));
for _aaa :=0;_aaa < _fga ;_aaa ++{_bdb :=_efa [_gge *_egf +_aaa ];_ege =append (_ege ,_e .Sprintf ("\u003c%\u00304\u0078\u003e\u003c\u0025\u0030\u0034\u0078\u003e\u0020\u0025\u0073",_bdb ._eg ,_bdb ._fa ,_gebc (_bdb ._dg )));};_ege =append (_ege ,"\u0065\u006e\u0064\u0062\u0066\u0072\u0061\u006e\u0067\u0065");
};};return _cc .Join (_ege ,"\u000a");};func (cmap *CMap )Name ()string {return cmap ._aa };func (_agba *cMapParser )parseComment ()(string ,error ){var _fbea _d .Buffer ;_ ,_fac :=_agba .skipSpaces ();if _fac !=nil {return _fbea .String (),_fac ;};_afcd :=true ;
for {_egfg ,_gdbb :=_agba ._gage .Peek (1);if _gdbb !=nil {_cb .Log .Debug ("p\u0061r\u0073\u0065\u0043\u006f\u006d\u006d\u0065\u006et\u003a\u0020\u0065\u0072r=\u0025\u0076",_gdbb );return _fbea .String (),_gdbb ;};if _afcd &&_egfg [0]!='%'{return _fbea .String (),ErrBadCMapComment ;
};_afcd =false ;if (_egfg [0]!='\r')&&(_egfg [0]!='\n'){_febd ,_ :=_agba ._gage .ReadByte ();_fbea .WriteByte (_febd );}else {break ;};};return _fbea .String (),nil ;};func (cmap *CMap )CIDToCharcode (cid CharCode )(CharCode ,bool ){_fgf ,_abd :=cmap ._cf [cid ];
return _fgf ,_abd ;};func (cmap *CMap )String ()string {_ee :=cmap ._aag ;_cgaeg :=[]string {_e .Sprintf ("\u006e\u0062\u0069\u0074\u0073\u003a\u0025\u0064",cmap ._db ),_e .Sprintf ("\u0074y\u0070\u0065\u003a\u0025\u0064",cmap ._bg )};if cmap ._gd !=""{_cgaeg =append (_cgaeg ,_e .Sprintf ("\u0076\u0065\u0072\u0073\u0069\u006f\u006e\u003a\u0025\u0073",cmap ._gd ));
};if cmap ._ae !=""{_cgaeg =append (_cgaeg ,_e .Sprintf ("u\u0073\u0065\u0063\u006d\u0061\u0070\u003a\u0025\u0023\u0071",cmap ._ae ));};_cgaeg =append (_cgaeg ,_e .Sprintf ("\u0073\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f\u003a\u0025\u0073",_ee .String ()));
if len (cmap ._bf )> 0{_cgaeg =append (_cgaeg ,_e .Sprintf ("\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u003a\u0025\u0064",len (cmap ._bf )));};if len (cmap ._cbf )> 0{_cgaeg =append (_cgaeg ,_e .Sprintf ("\u0063\u006fd\u0065\u0054\u006fU\u006e\u0069\u0063\u006f\u0064\u0065\u003a\u0025\u0064",len (cmap ._cbf )));
};return _e .Sprintf ("\u0043\u004d\u0041P\u007b\u0025\u0023\u0071\u0020\u0025\u0073\u007d",cmap ._aa ,_cc .Join (_cgaeg ,"\u0020"));};func (cmap *CMap )Bytes ()[]byte {_cb .Log .Trace ("\u0063\u006d\u0061\u0070.B\u0079\u0074\u0065\u0073\u003a\u0020\u0063\u006d\u0061\u0070\u003d\u0025\u0073",cmap .String ());
if len (cmap ._ecf )> 0{return cmap ._ecf ;};cmap ._ecf =[]byte (_cc .Join ([]string {_ggec ,cmap .toBfData (),_afb },"\u000a"));return cmap ._ecf ;};type cmapInt struct{_egcb int64 };func (cmap *CMap )parseCIDRange ()error {for {_bef ,_dfdf :=cmap .parseObject ();
if _dfdf !=nil {if _dfdf ==_cg .EOF {break ;};return _dfdf ;};_ecb ,_ggfa :=_bef .(cmapHexString );if !_ggfa {if _afdf ,_cde :=_bef .(cmapOperand );_cde {if _afdf .Operand ==_bagc {return nil ;};return _f .New ("\u0063\u0069\u0064\u0020\u0069\u006e\u0074\u0065\u0072\u0076\u0061\u006c\u0020s\u0074\u0061\u0072\u0074\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0068\u0065\u0078\u0020\u0073t\u0072\u0069\u006e\u0067");
};};_dea :=_gda (_ecb );_bef ,_dfdf =cmap .parseObject ();if _dfdf !=nil {if _dfdf ==_cg .EOF {break ;};return _dfdf ;};_abda ,_ggfa :=_bef .(cmapHexString );if !_ggfa {return _f .New ("\u0063\u0069d\u0020\u0069\u006e\u0074e\u0072\u0076a\u006c\u0020\u0065\u006e\u0064\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0068\u0065\u0078\u0020\u0073t\u0072\u0069\u006e\u0067");
};if len (_ecb ._cbe )!=len (_abda ._cbe ){return _f .New ("\u0075\u006e\u0065\u0071\u0075\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0062\u0079\u0074\u0065\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065");};_bbag :=_gda (_abda );
if _dea > _bbag {_cb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0043\u0049\u0044\u0020\u0072\u0061\u006e\u0067\u0065\u002e\u0020\u0073t\u0061\u0072\u0074\u003d\u0030\u0078\u0025\u0030\u0032\u0078\u0020\u0065\u006e\u0064=\u0030x\u0025\u0030\u0032\u0078",_dea ,_bbag );
return ErrBadCMap ;};_bef ,_dfdf =cmap .parseObject ();if _dfdf !=nil {if _dfdf ==_cg .EOF {break ;};return _dfdf ;};_dca ,_ggfa :=_bef .(cmapInt );if !_ggfa {return _f .New ("\u0063\u0069\u0064\u0020\u0073t\u0061\u0072\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u006e\u0020\u0064\u0065\u0063\u0069\u006d\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};if _dca ._egcb < 0{return _f .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u0063\u0069\u0064\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0076\u0061\u006c\u0075\u0065");};_bdc :=_dca ._egcb ;for _cfea :=_dea ;_cfea <=_bbag ;_cfea ++{cmap ._faf [_cfea ]=CharCode (_bdc );
_bdc ++;};_cb .Log .Trace ("C\u0049\u0044\u0020\u0072\u0061\u006eg\u0065\u003a\u0020\u003c\u0030\u0078\u0025\u0058\u003e \u003c\u0030\u0078%\u0058>\u0020\u0025\u0064",_dea ,_bbag ,_dca ._egcb );};return nil ;};func _bda (_gfa string )(*CMap ,error ){_aea ,_fc :=_fd .Asset (_gfa );
if _fc !=nil {return nil ,_fc ;};return LoadCmapFromDataCID (_aea );};type cmapDict struct{Dict map[string ]cmapObject ;};var (ErrBadCMap =_f .New ("\u0062\u0061\u0064\u0020\u0063\u006d\u0061\u0070");ErrBadCMapComment =_f .New ("c\u006f\u006d\u006d\u0065\u006e\u0074 \u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0073\u0074a\u0072\u0074\u0020w\u0069t\u0068\u0020\u0025");
ErrBadCMapDict =_f .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074"););func (cmap *CMap )parse ()error {var _dcf cmapObject ;for {_bfe ,_ebe :=cmap .parseObject ();if _ebe !=nil {if _ebe ==_cg .EOF {break ;};_cb .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u004d\u0061\u0070\u003a\u0020\u0025\u0076",_ebe );
return _ebe ;};switch _aae :=_bfe .(type ){case cmapOperand :_gcc :=_aae ;switch _gcc .Operand {case _bcd :_agde :=cmap .parseCodespaceRange ();if _agde !=nil {return _agde ;};case _fdd :_ade :=cmap .parseCIDRange ();if _ade !=nil {return _ade ;};case _gdcb :_ggf :=cmap .parseBfchar ();
if _ggf !=nil {return _ggf ;};case _abg :_dbeg :=cmap .parseBfrange ();if _dbeg !=nil {return _dbeg ;};case _cbad :if _dcf ==nil {_cb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0075\u0073\u0065\u0063m\u0061\u0070\u0020\u0077\u0069\u0074\u0068\u0020\u006e\u006f \u0061\u0072\u0067");
return ErrBadCMap ;};_caa ,_bdd :=_dcf .(cmapName );if !_bdd {_cb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0075\u0073\u0065\u0063\u006d\u0061\u0070\u0020\u0061\u0072\u0067\u0020\u006eo\u0074\u0020\u0061\u0020\u006e\u0061\u006de\u0020\u0025\u0023\u0076",_dcf );
return ErrBadCMap ;};cmap ._ae =_caa .Name ;case _edde :_gec :=cmap .parseSystemInfo ();if _gec !=nil {return _gec ;};};case cmapName :_fafg :=_aae ;switch _fafg .Name {case _edde :_gfg :=cmap .parseSystemInfo ();if _gfg !=nil {return _gfg ;};case _cbdb :_fae :=cmap .parseName ();
if _fae !=nil {return _fae ;};case _ggeb :_aef :=cmap .parseType ();if _aef !=nil {return _aef ;};case _cdba :_bgg :=cmap .parseVersion ();if _bgg !=nil {return _bgg ;};case _fdf :if _ebe =cmap .parseWMode ();_ebe !=nil {return _ebe ;};};};_dcf =_bfe ;
};return nil ;};func _gcee (_befa ,_fad int )int {if _befa < _fad {return _befa ;};return _fad ;};func (cmap *CMap )CharcodeBytesToUnicode (data []byte )(string ,int ){_cga ,_bagd :=cmap .BytesToCharcodes (data );if !_bagd {_cb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0043\u0068\u0061\u0072\u0063\u006f\u0064\u0065\u0042\u0079\u0074\u0065s\u0054\u006f\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u002e\u0020\u004e\u006f\u0074\u0020\u0069n\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u002e\u0020\u0064\u0061\u0074\u0061\u003d\u005b\u0025\u0020\u0030\u0032\u0078]\u0020\u0063\u006d\u0061\u0070=\u0025\u0073",data ,cmap );
return "",0;};_da :=make ([]string ,len (_cga ));var _gb []CharCode ;for _gbe ,_df :=range _cga {_geb ,_fe :=cmap ._cbf [_df ];if !_fe {_gb =append (_gb ,_df );_geb =MissingCodeString ;};_da [_gbe ]=_geb ;};_ef :=_cc .Join (_da ,"");if len (_gb )> 0{_cb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020C\u0068\u0061\u0072c\u006f\u0064\u0065\u0042y\u0074\u0065\u0073\u0054\u006f\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u002e\u0020\u004e\u006f\u0074\u0020\u0069\u006e\u0020\u006d\u0061\u0070\u002e\u000a"+"\u0009d\u0061t\u0061\u003d\u005b\u0025\u00200\u0032\u0078]\u003d\u0025\u0023\u0071\u000a"+"\u0009\u0063h\u0061\u0072\u0063o\u0064\u0065\u0073\u003d\u0025\u0030\u0032\u0078\u000a"+"\u0009\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u003d\u0025\u0064\u0020%\u0030\u0032\u0078\u000a"+"\u0009\u0075\u006e\u0069\u0063\u006f\u0064\u0065\u003d`\u0025\u0073\u0060\u000a"+"\u0009\u0063\u006d\u0061\u0070\u003d\u0025\u0073",data ,string (data ),_cga ,len (_gb ),_gb ,_ef ,cmap );
};return _ef ,len (_gb );};func (_bbeb *cMapParser )parseOperand ()(cmapOperand ,error ){_befc :=cmapOperand {};_bfgf :=_d .Buffer {};for {_adaa ,_gcca :=_bbeb ._gage .Peek (1);if _gcca !=nil {if _gcca ==_cg .EOF {break ;};return _befc ,_gcca ;};if _cbc .IsDelimiter (_adaa [0]){break ;
};if _cbc .IsWhiteSpace (_adaa [0]){break ;};_geef ,_ :=_bbeb ._gage .ReadByte ();_bfgf .WriteByte (_geef );};if _bfgf .Len ()==0{return _befc ,_e .Errorf ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064\u0020\u0028\u0065\u006d\u0070\u0074\u0079\u0029");
};_befc .Operand =_bfgf .String ();return _befc ,nil ;};func (cmap *CMap )BytesToCharcodes (data []byte )([]CharCode ,bool ){var _gff []CharCode ;if cmap ._db ==8{for _ ,_dff :=range data {_gff =append (_gff ,CharCode (_dff ));};return _gff ,true ;};for _gag :=0;
_gag < len (data );{_cec ,_aec ,_bdfe :=cmap .matchCode (data [_gag :]);if !_bdfe {_cb .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0074\u0020\u0069\u003d\u0025\u0064\u0020\u0062\u0079\u0074\u0065\u0073\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d\u003d\u0025\u0023\u0071",_gag ,data ,string (data ));
return _gff ,false ;};_gff =append (_gff ,_cec );_gag +=_aec ;};return _gff ,true ;};func (_fdag *cMapParser )parseHexString ()(cmapHexString ,error ){_fdag ._gage .ReadByte ();_fafe :=[]byte ("\u0030\u0031\u0032\u003345\u0036\u0037\u0038\u0039\u0061\u0062\u0063\u0064\u0065\u0066\u0041\u0042\u0043\u0044E\u0046");
_bgfe :=_d .Buffer {};for {_fdag .skipSpaces ();_acb ,_abc :=_fdag ._gage .Peek (1);if _abc !=nil {return cmapHexString {},_abc ;};if _acb [0]=='>'{_fdag ._gage .ReadByte ();break ;};_aefc ,_ :=_fdag ._gage .ReadByte ();if _d .IndexByte (_fafe ,_aefc )>=0{_bgfe .WriteByte (_aefc );
};};if _bgfe .Len ()%2==1{_cb .Log .Debug ("\u0070\u0061rs\u0065\u0048\u0065x\u0053\u0074\u0072\u0069ng:\u0020ap\u0070\u0065\u006e\u0064\u0069\u006e\u0067 '\u0030\u0027\u0020\u0074\u006f\u0020\u0025#\u0071",_bgfe .String ());_bgfe .WriteByte ('0');};_badd :=_bgfe .Len ()/2;
_bcf ,_ :=_c .DecodeString (_bgfe .String ());return cmapHexString {_fefa :_badd ,_cbe :_bcf },nil ;};func LoadCmapFromDataCID (data []byte )(*CMap ,error ){return LoadCmapFromData (data ,false )};type integer struct{_eag bool ;_caed int ;};func (cmap *CMap )parseName ()error {_cbd :="";
_edd :=false ;for _fdg :=0;_fdg < 20&&!_edd ;_fdg ++{_gadf ,_eeg :=cmap .parseObject ();if _eeg !=nil {return _eeg ;};switch _ffd :=_gadf .(type ){case cmapOperand :switch _ffd .Operand {case "\u0064\u0065\u0066":_edd =true ;default:_cb .Log .Debug ("\u0070\u0061\u0072\u0073\u0065\u004e\u0061\u006d\u0065\u003a\u0020\u0053\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020o\u003d\u0025\u0023\u0076\u0020n\u0061\u006de\u003d\u0025\u0023\u0071",_gadf ,_cbd );
if _cbd !=""{_cbd =_e .Sprintf ("\u0025\u0073\u0020%\u0073",_cbd ,_ffd .Operand );};_cb .Log .Debug ("\u0070\u0061\u0072\u0073\u0065\u004e\u0061\u006d\u0065\u003a \u0052\u0065\u0063\u006f\u0076\u0065\u0072e\u0064\u002e\u0020\u006e\u0061\u006d\u0065\u003d\u0025\u0023\u0071",_cbd );
};case cmapName :_cbd =_ffd .Name ;};};if !_edd {_cb .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0070\u0061\u0072\u0073\u0065N\u0061m\u0065:\u0020\u004e\u006f\u0020\u0064\u0065\u0066 ");return ErrBadCMap ;};cmap ._aa =_cbd ;return nil ;};func (cmap *CMap )parseSystemInfo ()error {_cgg :=false ;
_cfb :=false ;_gecg :="";_ecgc :=false ;_fce :=CIDSystemInfo {};for _dae :=0;_dae < 50&&!_ecgc ;_dae ++{_gaca ,_eac :=cmap .parseObject ();if _eac !=nil {return _eac ;};switch _bdbb :=_gaca .(type ){case cmapDict :_eec :=_bdbb .Dict ;_fcbb ,_dbea :=_eec ["\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079"];
if !_dbea {_cb .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_agda ,_dbea :=_fcbb .(cmapString );if !_dbea {_cb .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");
return ErrBadCMap ;};_fce .Registry =_agda .String ;_fcbb ,_dbea =_eec ["\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067"];if !_dbea {_cb .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");
return ErrBadCMap ;};_agda ,_dbea =_fcbb .(cmapString );if !_dbea {_cb .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_fce .Ordering =_agda .String ;
_dbb ,_dbea :=_eec ["\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074"];if !_dbea {_cb .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;
};_bgba ,_dbea :=_dbb .(cmapInt );if !_dbea {_cb .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_fce .Supplement =int (_bgba ._egcb );_ecgc =true ;
case cmapOperand :switch _bdbb .Operand {case "\u0062\u0065\u0067i\u006e":_cgg =true ;case "\u0065\u006e\u0064":_ecgc =true ;case "\u0064\u0065\u0066":_cfb =false ;};case cmapName :if _cgg {_gecg =_bdbb .Name ;_cfb =true ;};case cmapString :if _cfb {switch _gecg {case "\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079":_fce .Registry =_bdbb .String ;
case "\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067":_fce .Ordering =_bdbb .String ;};};case cmapInt :if _cfb {switch _gecg {case "\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074":_fce .Supplement =int (_bdbb ._egcb );};};};};if !_ecgc {_cb .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0050\u0061\u0072\u0073\u0065\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006e\u0066\u006f\u0020\u0064\u0069\u0063\u0074\u0020\u0069\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u006c\u0079");
return ErrBadCMap ;};cmap ._aag =_fce ;return nil ;};func (_add *cMapParser )parseString ()(cmapString ,error ){_add ._gage .ReadByte ();_ccb :=_d .Buffer {};_cbaa :=1;for {_bfgd ,_cece :=_add ._gage .Peek (1);if _cece !=nil {return cmapString {_ccb .String ()},_cece ;
};if _bfgd [0]=='\\'{_add ._gage .ReadByte ();_cbgc ,_aefd :=_add ._gage .ReadByte ();if _aefd !=nil {return cmapString {_ccb .String ()},_aefd ;};if _cbc .IsOctalDigit (_cbgc ){_dgce ,_agdg :=_add ._gage .Peek (2);if _agdg !=nil {return cmapString {_ccb .String ()},_agdg ;
};var _baa []byte ;_baa =append (_baa ,_cbgc );for _ ,_afec :=range _dgce {if _cbc .IsOctalDigit (_afec ){_baa =append (_baa ,_afec );}else {break ;};};_add ._gage .Discard (len (_baa )-1);_cb .Log .Trace ("\u004e\u0075\u006d\u0065ri\u0063\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0022\u0025\u0073\u0022",_baa );
_fbc ,_agdg :=_g .ParseUint (string (_baa ),8,32);if _agdg !=nil {return cmapString {_ccb .String ()},_agdg ;};_ccb .WriteByte (byte (_fbc ));continue ;};switch _cbgc {case 'n':_ccb .WriteByte ('\n');case 'r':_ccb .WriteByte ('\r');case 't':_ccb .WriteByte ('\t');
case 'b':_ccb .WriteByte ('\b');case 'f':_ccb .WriteByte ('\f');case '(':_ccb .WriteByte ('(');case ')':_ccb .WriteByte (')');case '\\':_ccb .WriteByte ('\\');};continue ;}else if _bfgd [0]=='('{_cbaa ++;}else if _bfgd [0]==')'{_cbaa --;if _cbaa ==0{_add ._gage .ReadByte ();
break ;};};_fcg ,_ :=_add ._gage .ReadByte ();_ccb .WriteByte (_fcg );};return cmapString {_ccb .String ()},nil ;};func (cmap *CMap )computeInverseMappings (){for _ca ,_gfc :=range cmap ._faf {if _gc ,_bcg :=cmap ._cf [_gfc ];!_bcg ||(_bcg &&_gc > _ca ){cmap ._cf [_gfc ]=_ca ;
};};for _fg ,_fgd :=range cmap ._cbf {if _cfe ,_bdf :=cmap ._ge [_fgd ];!_bdf ||(_bdf &&_cfe > _fg ){cmap ._ge [_fgd ]=_fg ;};};_ff .Slice (cmap ._bf ,func (_cdc ,_ffg int )bool {return cmap ._bf [_cdc ].Low < cmap ._bf [_ffg ].Low });};type cmapOperand struct{Operand string ;
};type cmapFloat struct{_agg float64 };const (_dd =4;MissingCodeRune ='\ufffd';MissingCodeString =string (MissingCodeRune ););func _eaae (_eca cmapHexString )rune {_eae :=_cfa (_eca );if _edc :=len (_eae );_edc ==0{_cb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0068\u0065\u0078\u0054o\u0052\u0075\u006e\u0065\u002e\u0020\u0045\u0078p\u0065c\u0074\u0065\u0064\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0072u\u006e\u0065\u0020\u0073\u0068\u0065\u0078\u003d\u0025\u0023\u0076",_eca );
return MissingCodeRune ;};if len (_eae )> 1{_cb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0068\u0065\u0078\u0054\u006f\u0052\u0075\u006e\u0065\u002e\u0020\u0045\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0065\u0078\u0061\u0063\u0074\u006c\u0079\u0020\u006f\u006e\u0065\u0020\u0072\u0075\u006e\u0065\u0020\u0073\u0068\u0065\u0078\u003d\u0025\u0023v\u0020\u002d\u003e\u0020\u0025#\u0076",_eca ,_eae );
};return _eae [0];};func _afg (_bag bool )*CMap {_de :=16;if _bag {_de =8;};return &CMap {_db :_de ,_faf :make (map[CharCode ]CharCode ),_cf :make (map[CharCode ]CharCode ),_cbf :make (map[CharCode ]string ),_ge :make (map[string ]CharCode )};};func (cmap *CMap )parseBfrange ()error {for {var _aaeb CharCode ;
_edg ,_gdc :=cmap .parseObject ();if _gdc !=nil {if _gdc ==_cg .EOF {break ;};return _gdc ;};switch _bdcd :=_edg .(type ){case cmapOperand :if _bdcd .Operand ==_gef {return nil ;};return _f .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");
case cmapHexString :_aaeb =_gda (_bdcd );default:return _f .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065");};var _bebc CharCode ;_edg ,_gdc =cmap .parseObject ();if _gdc !=nil {if _gdc ==_cg .EOF {break ;};return _gdc ;
};switch _dac :=_edg .(type ){case cmapOperand :_cb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0049\u006e\u0063\u006f\u006d\u0070\u006c\u0065\u0074\u0065\u0020\u0062\u0066r\u0061\u006e\u0067\u0065\u0020\u0074\u0072i\u0070\u006c\u0065\u0074");
return ErrBadCMap ;case cmapHexString :_bebc =_gda (_dac );if _bebc > 0xffff{_bebc =0xffff;};default:_cb .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0055\u006e\u0065\u0078\u0070e\u0063t\u0065d\u0020\u0074\u0079\u0070\u0065\u0020\u0025T",_edg );return ErrBadCMap ;
};_edg ,_gdc =cmap .parseObject ();if _gdc !=nil {if _gdc ==_cg .EOF {break ;};return _gdc ;};switch _adeb :=_edg .(type ){case cmapArray :if len (_adeb .Array )!=int (_bebc -_aaeb )+1{_cb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u006f\u0066\u0020\u0069\u0074\u0065\u006d\u0073\u0020\u0069\u006e\u0020a\u0072\u0072\u0061\u0079");
return ErrBadCMap ;};for _ccg :=_aaeb ;_ccg <=_bebc ;_ccg ++{_fda :=_adeb .Array [_ccg -_aaeb ];_bfa ,_cbb :=_fda .(cmapHexString );if !_cbb {return _f .New ("\u006e\u006f\u006e-h\u0065\u0078\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0069\u006e\u0020\u0061\u0072\u0072\u0061\u0079");
};_bgf :=_cfa (_bfa );cmap ._cbf [_ccg ]=string (_bgf );};case cmapHexString :_afc :=_cfa (_adeb );_bfag :=len (_afc );for _gdbc :=_aaeb ;_gdbc <=_bebc ;_gdbc ++{cmap ._cbf [_gdbc ]=string (_afc );if _bfag > 0{_afc [_bfag -1]++;}else {_cb .Log .Debug ("\u004e\u006f\u0020c\u006d\u0061\u0070\u0020\u0074\u0061\u0072\u0067\u0065\u0074\u0020\u0063\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0066\u006f\u0072\u0020\u0025\u0023\u0076",_gdbc );
};if _gdbc ==1<<32-1{break ;};};default:_cb .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0055\u006e\u0065\u0078\u0070e\u0063t\u0065d\u0020\u0074\u0079\u0070\u0065\u0020\u0025T",_edg );return ErrBadCMap ;};};return nil ;};func (cmap *CMap )CharcodeToCID (code CharCode )(CharCode ,bool ){_fcb ,_bea :=cmap ._faf [code ];
return _fcb ,_bea ;};func LoadPredefinedCMap (name string )(*CMap ,error ){cmap ,_afe :=_bda (name );if _afe !=nil {return nil ,_afe ;};if cmap ._ae ==""{cmap .computeInverseMappings ();return cmap ,nil ;};_gf ,_afe :=_bda (cmap ._ae );if _afe !=nil {return nil ,_afe ;
};for _ed ,_ddb :=range _gf ._faf {if _ ,_ede :=cmap ._faf [_ed ];!_ede {cmap ._faf [_ed ]=_ddb ;};};cmap ._bf =append (cmap ._bf ,_gf ._bf ...);cmap .computeInverseMappings ();return cmap ,nil ;};func (cmap *CMap )CIDSystemInfo ()CIDSystemInfo {return cmap ._aag };
func (cmap *CMap )Type ()int {return cmap ._bg };func _cfa (_fcbe cmapHexString )[]rune {if len (_fcbe ._cbe )==1{return []rune {rune (_fcbe ._cbe [0])};};_eff :=_fcbe ._cbe ;if len (_eff )%2!=0{_eff =append (_eff ,0);_cb .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0068\u0065\u0078\u0054\u006f\u0052\u0075\u006e\u0065\u0073\u002e\u0020\u0050\u0061\u0064\u0064\u0069\u006e\u0067\u0020\u0073\u0068\u0065\u0078\u003d\u0025#\u0076\u0020\u0074\u006f\u0020\u0025\u002b\u0076",_fcbe ,_eff );
};_bce :=len (_eff )>>1;_efce :=make ([]uint16 ,_bce );for _eeca :=0;_eeca < _bce ;_eeca ++{_efce [_eeca ]=uint16 (_eff [_eeca <<1])<<8+uint16 (_eff [_eeca <<1+1]);};_dfda :=_b .Decode (_efce );return _dfda ;};const (_egf =100;_ggec ="\u000a\u002f\u0043\u0049\u0044\u0049\u006e\u0069\u0074\u0020\u002f\u0050\u0072\u006fc\u0053\u0065\u0074\u0020\u0066\u0069\u006e\u0064\u0072es\u006fu\u0072c\u0065 \u0062\u0065\u0067\u0069\u006e\u000a\u0031\u0032\u0020\u0064\u0069\u0063\u0074\u0020\u0062\u0065\u0067\u0069n\u000a\u0062\u0065\u0067\u0069\u006e\u0063\u006d\u0061\u0070\n\u002f\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065m\u0049\u006e\u0066\u006f\u0020\u003c\u003c\u0020\u002f\u0052\u0065\u0067\u0069\u0073t\u0072\u0079\u0020\u0028\u0041\u0064\u006f\u0062\u0065\u0029\u0020\u002f\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067\u0020\u0028\u0055\u0043\u0053)\u0020\u002f\u0053\u0075\u0070p\u006c\u0065\u006d\u0065\u006et\u0020\u0030\u0020\u003e\u003e\u0020\u0064\u0065\u0066\u000a\u002f\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065\u0020\u002f\u0041\u0064\u006f\u0062\u0065-\u0049\u0064\u0065\u006e\u0074\u0069\u0074\u0079\u002d\u0055\u0043\u0053\u0020\u0064\u0065\u0066\u000a\u002fC\u004d\u0061\u0070\u0054\u0079\u0070\u0065\u0020\u0032\u0020\u0064\u0065\u0066\u000a\u0031\u0020\u0062\u0065\u0067\u0069\u006e\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063e\u0072\u0061n\u0067\u0065\n\u003c\u0030\u0030\u0030\u0030\u003e\u0020<\u0046\u0046\u0046\u0046\u003e\u000a\u0065\u006e\u0064\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065r\u0061\u006e\u0067\u0065\u000a";
_afb ="\u0065\u006e\u0064\u0063\u006d\u0061\u0070\u000a\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065\u0020\u0063ur\u0072e\u006e\u0074\u0064\u0069\u0063\u0074\u0020\u002f\u0043\u004d\u0061\u0070 \u0064\u0065\u0066\u0069\u006e\u0065\u0072\u0065\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0070\u006fp\u000a\u0065\u006e\u0064\u000a\u0065\u006e\u0064\u000a";
);type fbRange struct{_eg CharCode ;_fa CharCode ;_dg string ;};func (cmap *CMap )parseVersion ()error {_adb :="";_cfed :=false ;for _bgd :=0;_bgd < 3&&!_cfed ;_bgd ++{_fgbb ,_geac :=cmap .parseObject ();if _geac !=nil {return _geac ;};switch _dfb :=_fgbb .(type ){case cmapOperand :switch _dfb .Operand {case "\u0064\u0065\u0066":_cfed =true ;
default:_cb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0070\u0061\u0072\u0073\u0065\u0056e\u0072\u0073\u0069\u006f\u006e\u003a \u0073\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020o\u003d\u0025\u0023\u0076",_fgbb );
return ErrBadCMap ;};case cmapInt :_adb =_e .Sprintf ("\u0025\u0064",_dfb ._egcb );case cmapFloat :_adb =_e .Sprintf ("\u0025\u0066",_dfb ._agg );case cmapString :_adb =_dfb .String ;default:_cb .Log .Debug ("\u0045\u0052RO\u0052\u003a\u0020p\u0061\u0072\u0073\u0065Ver\u0073io\u006e\u003a\u0020\u0042\u0061\u0064\u0020ty\u0070\u0065\u002e\u0020\u006f\u003d\u0025#\u0076",_fgbb );
};};cmap ._gd =_adb ;return nil ;};type CharCode uint32 ;func (cmap *CMap )parseWMode ()error {var _efaf int ;_cba :=false ;for _fgb :=0;_fgb < 3&&!_cba ;_fgb ++{_cdb ,_aefe :=cmap .parseObject ();if _aefe !=nil {return _aefe ;};switch _ecc :=_cdb .(type ){case cmapOperand :switch _ecc .Operand {case "\u0064\u0065\u0066":_cba =true ;
default:_cb .Log .Error ("\u0070\u0061\u0072\u0073\u0065\u0057\u004d\u006f\u0064\u0065:\u0020\u0073\u0074\u0061\u0074\u0065\u0020e\u0072\u0072\u006f\u0072\u002e\u0020\u006f\u003d\u0025\u0023\u0076",_cdb );return ErrBadCMap ;};case cmapInt :_efaf =int (_ecc ._egcb );
};};cmap ._gea =integer {_eag :true ,_caed :_efaf };return nil ;};func _abe (_bgb string )rune {_fef :=[]rune (_bgb );return _fef [len (_fef )-1]};type charRange struct{_ga CharCode ;_ccd CharCode ;};