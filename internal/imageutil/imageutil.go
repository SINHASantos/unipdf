//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package imageutil ;import (_gg "encoding/binary";_c "errors";_fd "fmt";_ce "github.com/unidoc/unipdf/v4/common";_gd "github.com/unidoc/unipdf/v4/internal/bitwise";_bb "image";_b "image/color";_a "image/draw";_g "math";);func (_cefe *ImageBase )setByte (_ccb int ,_geda byte )error {if _ccb > len (_cefe .Data )-1{return _c .New ("\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_cefe .Data [_ccb ]=_geda ;return nil ;};func (_fbde *NRGBA64 )ColorAt (x ,y int )(_b .Color ,error ){return ColorAtNRGBA64 (x ,y ,_fbde .Width ,_fbde .Data ,_fbde .Alpha ,_fbde .Decode );};func _acb (_ead _b .Gray )_b .RGBA {return _b .RGBA {R :_ead .Y ,G :_ead .Y ,B :_ead .Y ,A :0xff}};
func (_gcfa *Gray2 )Copy ()Image {return &Gray2 {ImageBase :_gcfa .copy ()}};func ColorAtRGBA32 (x ,y ,width int ,data ,alpha []byte ,decode []float64 )(_b .RGBA ,error ){_baced :=y *width +x ;_fdcdb :=3*_baced ;if _fdcdb +2>=len (data ){return _b .RGBA {},_fd .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_dcbb :=uint8 (0xff);if alpha !=nil &&len (alpha )> _baced {_dcbb =alpha [_baced ];};_bbddb ,_adfd ,_ebee :=data [_fdcdb ],data [_fdcdb +1],data [_fdcdb +2];if len (decode )==6{_bbddb =uint8 (uint32 (LinearInterpolate (float64 (_bbddb ),0,255,decode [0],decode [1]))&0xff);
_adfd =uint8 (uint32 (LinearInterpolate (float64 (_adfd ),0,255,decode [2],decode [3]))&0xff);_ebee =uint8 (uint32 (LinearInterpolate (float64 (_ebee ),0,255,decode [4],decode [5]))&0xff);};return _b .RGBA {R :_bbddb ,G :_adfd ,B :_ebee ,A :_dcbb },nil ;
};func (_afb *Monochrome )copy ()*Monochrome {_cfbb :=_cfbd (_afb .Width ,_afb .Height );_cfbb .ModelThreshold =_afb .ModelThreshold ;_cfbb .Data =make ([]byte ,len (_afb .Data ));copy (_cfbb .Data ,_afb .Data );if len (_afb .Decode )!=0{_cfbb .Decode =make ([]float64 ,len (_afb .Decode ));
copy (_cfbb .Decode ,_afb .Decode );};if len (_afb .Alpha )!=0{_cfbb .Alpha =make ([]byte ,len (_afb .Alpha ));copy (_cfbb .Alpha ,_afb .Alpha );};return _cfbb ;};func _bbgaa (_fbga *_bb .Gray16 ,_cbfg uint8 )*_bb .Gray {_ceef :=_fbga .Bounds ();_gffbf :=_bb .NewGray (_ceef );
for _abeec :=0;_abeec < _ceef .Dx ();_abeec ++{for _decc :=0;_decc < _ceef .Dy ();_decc ++{_fgdd :=_fbga .Gray16At (_abeec ,_decc );_gffbf .SetGray (_abeec ,_decc ,_b .Gray {Y :_cgfe (uint8 (_fgdd .Y /256),_cbfg )});};};return _gffbf ;};func (_abaa *Monochrome )Set (x ,y int ,c _b .Color ){_gbfc :=y *_abaa .BytesPerLine +x >>3;
if _gbfc > len (_abaa .Data )-1{return ;};_beeb :=_abaa .ColorModel ().Convert (c ).(_b .Gray );_abaa .setGray (x ,_beeb ,_gbfc );};func _bace (_cegd *Monochrome ,_fbdc ,_cadc ,_eea ,_edcc int ,_efda RasterOperator ,_bfgbc *Monochrome ,_fggca ,_aaba int )error {var (_gdac bool ;
_edcd bool ;_dgebg int ;_cdda int ;_gfag int ;_age bool ;_gfdd byte ;_bgfd int ;_dgaa int ;_gcfb int ;_bceg ,_efef int ;);_cccff :=8-(_fbdc &7);_gbff :=_caef [_cccff ];_gcgd :=_cegd .BytesPerLine *_cadc +(_fbdc >>3);_cbcf :=_bfgbc .BytesPerLine *_aaba +(_fggca >>3);
if _eea < _cccff {_gdac =true ;_gbff &=_ebgg [8-_cccff +_eea ];};if !_gdac {_dgebg =(_eea -_cccff )>>3;if _dgebg > 0{_edcd =true ;_cdda =_gcgd +1;_gfag =_cbcf +1;};};_bgfd =(_fbdc +_eea )&7;if !(_gdac ||_bgfd ==0){_age =true ;_gfdd =_ebgg [_bgfd ];_dgaa =_gcgd +1+_dgebg ;
_gcfb =_cbcf +1+_dgebg ;};switch _efda {case PixSrc :for _bceg =0;_bceg < _edcc ;_bceg ++{_cegd .Data [_gcgd ]=_ddfd (_cegd .Data [_gcgd ],_bfgbc .Data [_cbcf ],_gbff );_gcgd +=_cegd .BytesPerLine ;_cbcf +=_bfgbc .BytesPerLine ;};if _edcd {for _bceg =0;
_bceg < _edcc ;_bceg ++{for _efef =0;_efef < _dgebg ;_efef ++{_cegd .Data [_cdda +_efef ]=_bfgbc .Data [_gfag +_efef ];};_cdda +=_cegd .BytesPerLine ;_gfag +=_bfgbc .BytesPerLine ;};};if _age {for _bceg =0;_bceg < _edcc ;_bceg ++{_cegd .Data [_dgaa ]=_ddfd (_cegd .Data [_dgaa ],_bfgbc .Data [_gcfb ],_gfdd );
_dgaa +=_cegd .BytesPerLine ;_gcfb +=_bfgbc .BytesPerLine ;};};case PixNotSrc :for _bceg =0;_bceg < _edcc ;_bceg ++{_cegd .Data [_gcgd ]=_ddfd (_cegd .Data [_gcgd ],^_bfgbc .Data [_cbcf ],_gbff );_gcgd +=_cegd .BytesPerLine ;_cbcf +=_bfgbc .BytesPerLine ;
};if _edcd {for _bceg =0;_bceg < _edcc ;_bceg ++{for _efef =0;_efef < _dgebg ;_efef ++{_cegd .Data [_cdda +_efef ]=^_bfgbc .Data [_gfag +_efef ];};_cdda +=_cegd .BytesPerLine ;_gfag +=_bfgbc .BytesPerLine ;};};if _age {for _bceg =0;_bceg < _edcc ;_bceg ++{_cegd .Data [_dgaa ]=_ddfd (_cegd .Data [_dgaa ],^_bfgbc .Data [_gcfb ],_gfdd );
_dgaa +=_cegd .BytesPerLine ;_gcfb +=_bfgbc .BytesPerLine ;};};case PixSrcOrDst :for _bceg =0;_bceg < _edcc ;_bceg ++{_cegd .Data [_gcgd ]=_ddfd (_cegd .Data [_gcgd ],_bfgbc .Data [_cbcf ]|_cegd .Data [_gcgd ],_gbff );_gcgd +=_cegd .BytesPerLine ;_cbcf +=_bfgbc .BytesPerLine ;
};if _edcd {for _bceg =0;_bceg < _edcc ;_bceg ++{for _efef =0;_efef < _dgebg ;_efef ++{_cegd .Data [_cdda +_efef ]|=_bfgbc .Data [_gfag +_efef ];};_cdda +=_cegd .BytesPerLine ;_gfag +=_bfgbc .BytesPerLine ;};};if _age {for _bceg =0;_bceg < _edcc ;_bceg ++{_cegd .Data [_dgaa ]=_ddfd (_cegd .Data [_dgaa ],_bfgbc .Data [_gcfb ]|_cegd .Data [_dgaa ],_gfdd );
_dgaa +=_cegd .BytesPerLine ;_gcfb +=_bfgbc .BytesPerLine ;};};case PixSrcAndDst :for _bceg =0;_bceg < _edcc ;_bceg ++{_cegd .Data [_gcgd ]=_ddfd (_cegd .Data [_gcgd ],_bfgbc .Data [_cbcf ]&_cegd .Data [_gcgd ],_gbff );_gcgd +=_cegd .BytesPerLine ;_cbcf +=_bfgbc .BytesPerLine ;
};if _edcd {for _bceg =0;_bceg < _edcc ;_bceg ++{for _efef =0;_efef < _dgebg ;_efef ++{_cegd .Data [_cdda +_efef ]&=_bfgbc .Data [_gfag +_efef ];};_cdda +=_cegd .BytesPerLine ;_gfag +=_bfgbc .BytesPerLine ;};};if _age {for _bceg =0;_bceg < _edcc ;_bceg ++{_cegd .Data [_dgaa ]=_ddfd (_cegd .Data [_dgaa ],_bfgbc .Data [_gcfb ]&_cegd .Data [_dgaa ],_gfdd );
_dgaa +=_cegd .BytesPerLine ;_gcfb +=_bfgbc .BytesPerLine ;};};case PixSrcXorDst :for _bceg =0;_bceg < _edcc ;_bceg ++{_cegd .Data [_gcgd ]=_ddfd (_cegd .Data [_gcgd ],_bfgbc .Data [_cbcf ]^_cegd .Data [_gcgd ],_gbff );_gcgd +=_cegd .BytesPerLine ;_cbcf +=_bfgbc .BytesPerLine ;
};if _edcd {for _bceg =0;_bceg < _edcc ;_bceg ++{for _efef =0;_efef < _dgebg ;_efef ++{_cegd .Data [_cdda +_efef ]^=_bfgbc .Data [_gfag +_efef ];};_cdda +=_cegd .BytesPerLine ;_gfag +=_bfgbc .BytesPerLine ;};};if _age {for _bceg =0;_bceg < _edcc ;_bceg ++{_cegd .Data [_dgaa ]=_ddfd (_cegd .Data [_dgaa ],_bfgbc .Data [_gcfb ]^_cegd .Data [_dgaa ],_gfdd );
_dgaa +=_cegd .BytesPerLine ;_gcfb +=_bfgbc .BytesPerLine ;};};case PixNotSrcOrDst :for _bceg =0;_bceg < _edcc ;_bceg ++{_cegd .Data [_gcgd ]=_ddfd (_cegd .Data [_gcgd ],^(_bfgbc .Data [_cbcf ])|_cegd .Data [_gcgd ],_gbff );_gcgd +=_cegd .BytesPerLine ;
_cbcf +=_bfgbc .BytesPerLine ;};if _edcd {for _bceg =0;_bceg < _edcc ;_bceg ++{for _efef =0;_efef < _dgebg ;_efef ++{_cegd .Data [_cdda +_efef ]|=^(_bfgbc .Data [_gfag +_efef ]);};_cdda +=_cegd .BytesPerLine ;_gfag +=_bfgbc .BytesPerLine ;};};if _age {for _bceg =0;
_bceg < _edcc ;_bceg ++{_cegd .Data [_dgaa ]=_ddfd (_cegd .Data [_dgaa ],^(_bfgbc .Data [_gcfb ])|_cegd .Data [_dgaa ],_gfdd );_dgaa +=_cegd .BytesPerLine ;_gcfb +=_bfgbc .BytesPerLine ;};};case PixNotSrcAndDst :for _bceg =0;_bceg < _edcc ;_bceg ++{_cegd .Data [_gcgd ]=_ddfd (_cegd .Data [_gcgd ],^(_bfgbc .Data [_cbcf ])&_cegd .Data [_gcgd ],_gbff );
_gcgd +=_cegd .BytesPerLine ;_cbcf +=_bfgbc .BytesPerLine ;};if _edcd {for _bceg =0;_bceg < _edcc ;_bceg ++{for _efef =0;_efef < _dgebg ;_efef ++{_cegd .Data [_cdda +_efef ]&=^_bfgbc .Data [_gfag +_efef ];};_cdda +=_cegd .BytesPerLine ;_gfag +=_bfgbc .BytesPerLine ;
};};if _age {for _bceg =0;_bceg < _edcc ;_bceg ++{_cegd .Data [_dgaa ]=_ddfd (_cegd .Data [_dgaa ],^(_bfgbc .Data [_gcfb ])&_cegd .Data [_dgaa ],_gfdd );_dgaa +=_cegd .BytesPerLine ;_gcfb +=_bfgbc .BytesPerLine ;};};case PixSrcOrNotDst :for _bceg =0;_bceg < _edcc ;
_bceg ++{_cegd .Data [_gcgd ]=_ddfd (_cegd .Data [_gcgd ],_bfgbc .Data [_cbcf ]|^(_cegd .Data [_gcgd ]),_gbff );_gcgd +=_cegd .BytesPerLine ;_cbcf +=_bfgbc .BytesPerLine ;};if _edcd {for _bceg =0;_bceg < _edcc ;_bceg ++{for _efef =0;_efef < _dgebg ;_efef ++{_cegd .Data [_cdda +_efef ]=_bfgbc .Data [_gfag +_efef ]|^(_cegd .Data [_cdda +_efef ]);
};_cdda +=_cegd .BytesPerLine ;_gfag +=_bfgbc .BytesPerLine ;};};if _age {for _bceg =0;_bceg < _edcc ;_bceg ++{_cegd .Data [_dgaa ]=_ddfd (_cegd .Data [_dgaa ],_bfgbc .Data [_gcfb ]|^(_cegd .Data [_dgaa ]),_gfdd );_dgaa +=_cegd .BytesPerLine ;_gcfb +=_bfgbc .BytesPerLine ;
};};case PixSrcAndNotDst :for _bceg =0;_bceg < _edcc ;_bceg ++{_cegd .Data [_gcgd ]=_ddfd (_cegd .Data [_gcgd ],_bfgbc .Data [_cbcf ]&^(_cegd .Data [_gcgd ]),_gbff );_gcgd +=_cegd .BytesPerLine ;_cbcf +=_bfgbc .BytesPerLine ;};if _edcd {for _bceg =0;_bceg < _edcc ;
_bceg ++{for _efef =0;_efef < _dgebg ;_efef ++{_cegd .Data [_cdda +_efef ]=_bfgbc .Data [_gfag +_efef ]&^(_cegd .Data [_cdda +_efef ]);};_cdda +=_cegd .BytesPerLine ;_gfag +=_bfgbc .BytesPerLine ;};};if _age {for _bceg =0;_bceg < _edcc ;_bceg ++{_cegd .Data [_dgaa ]=_ddfd (_cegd .Data [_dgaa ],_bfgbc .Data [_gcfb ]&^(_cegd .Data [_dgaa ]),_gfdd );
_dgaa +=_cegd .BytesPerLine ;_gcfb +=_bfgbc .BytesPerLine ;};};case PixNotPixSrcOrDst :for _bceg =0;_bceg < _edcc ;_bceg ++{_cegd .Data [_gcgd ]=_ddfd (_cegd .Data [_gcgd ],^(_bfgbc .Data [_cbcf ]|_cegd .Data [_gcgd ]),_gbff );_gcgd +=_cegd .BytesPerLine ;
_cbcf +=_bfgbc .BytesPerLine ;};if _edcd {for _bceg =0;_bceg < _edcc ;_bceg ++{for _efef =0;_efef < _dgebg ;_efef ++{_cegd .Data [_cdda +_efef ]=^(_bfgbc .Data [_gfag +_efef ]|_cegd .Data [_cdda +_efef ]);};_cdda +=_cegd .BytesPerLine ;_gfag +=_bfgbc .BytesPerLine ;
};};if _age {for _bceg =0;_bceg < _edcc ;_bceg ++{_cegd .Data [_dgaa ]=_ddfd (_cegd .Data [_dgaa ],^(_bfgbc .Data [_gcfb ]|_cegd .Data [_dgaa ]),_gfdd );_dgaa +=_cegd .BytesPerLine ;_gcfb +=_bfgbc .BytesPerLine ;};};case PixNotPixSrcAndDst :for _bceg =0;
_bceg < _edcc ;_bceg ++{_cegd .Data [_gcgd ]=_ddfd (_cegd .Data [_gcgd ],^(_bfgbc .Data [_cbcf ]&_cegd .Data [_gcgd ]),_gbff );_gcgd +=_cegd .BytesPerLine ;_cbcf +=_bfgbc .BytesPerLine ;};if _edcd {for _bceg =0;_bceg < _edcc ;_bceg ++{for _efef =0;_efef < _dgebg ;
_efef ++{_cegd .Data [_cdda +_efef ]=^(_bfgbc .Data [_gfag +_efef ]&_cegd .Data [_cdda +_efef ]);};_cdda +=_cegd .BytesPerLine ;_gfag +=_bfgbc .BytesPerLine ;};};if _age {for _bceg =0;_bceg < _edcc ;_bceg ++{_cegd .Data [_dgaa ]=_ddfd (_cegd .Data [_dgaa ],^(_bfgbc .Data [_gcfb ]&_cegd .Data [_dgaa ]),_gfdd );
_dgaa +=_cegd .BytesPerLine ;_gcfb +=_bfgbc .BytesPerLine ;};};case PixNotPixSrcXorDst :for _bceg =0;_bceg < _edcc ;_bceg ++{_cegd .Data [_gcgd ]=_ddfd (_cegd .Data [_gcgd ],^(_bfgbc .Data [_cbcf ]^_cegd .Data [_gcgd ]),_gbff );_gcgd +=_cegd .BytesPerLine ;
_cbcf +=_bfgbc .BytesPerLine ;};if _edcd {for _bceg =0;_bceg < _edcc ;_bceg ++{for _efef =0;_efef < _dgebg ;_efef ++{_cegd .Data [_cdda +_efef ]=^(_bfgbc .Data [_gfag +_efef ]^_cegd .Data [_cdda +_efef ]);};_cdda +=_cegd .BytesPerLine ;_gfag +=_bfgbc .BytesPerLine ;
};};if _age {for _bceg =0;_bceg < _edcc ;_bceg ++{_cegd .Data [_dgaa ]=_ddfd (_cegd .Data [_dgaa ],^(_bfgbc .Data [_gcfb ]^_cegd .Data [_dgaa ]),_gfdd );_dgaa +=_cegd .BytesPerLine ;_gcfb +=_bfgbc .BytesPerLine ;};};default:_ce .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070e\u0072\u0061\u0074o\u0072:\u0020\u0025\u0064",_efda );
return _c .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");};return nil ;};func _gfdca (_aeg _b .CMYK )_b .RGBA {_aabg ,_gfde ,_eb :=_b .CMYKToRGB (_aeg .C ,_aeg .M ,_aeg .Y ,_aeg .K );
return _b .RGBA {R :_aabg ,G :_gfde ,B :_eb ,A :0xff};};func (_fgeg *monochromeThresholdConverter )Convert (img _bb .Image )(Image ,error ){if _abba ,_dfca :=img .(*Monochrome );_dfca {return _abba .Copy (),nil ;};_add :=img .Bounds ();_adca ,_acgg :=NewImage (_add .Max .X ,_add .Max .Y ,1,1,nil ,nil ,nil );
if _acgg !=nil {return nil ,_acgg ;};_adca .(*Monochrome ).ModelThreshold =_fgeg .Threshold ;for _gcf :=0;_gcf < _add .Max .X ;_gcf ++{for _fadc :=0;_fadc < _add .Max .Y ;_fadc ++{_efdc :=img .At (_gcf ,_fadc );_adca .Set (_gcf ,_fadc ,_efdc );};};return _adca ,nil ;
};func _fgga (_fcae _b .Gray ,_adbd monochromeModel )_b .Gray {if _fcae .Y > uint8 (_adbd ){return _b .Gray {Y :_g .MaxUint8 };};return _b .Gray {};};func (_gfae *Gray8 )Set (x ,y int ,c _b .Color ){_ddfc :=y *_gfae .BytesPerLine +x ;if _ddfc > len (_gfae .Data )-1{return ;
};_cbaa :=_b .GrayModel .Convert (c );_gfae .Data [_ddfc ]=_cbaa .(_b .Gray ).Y ;};func _dagcb (_gdba _bb .Image )(Image ,error ){if _cbad ,_gde :=_gdba .(*Gray2 );_gde {return _cbad .Copy (),nil ;};_acd :=_gdba .Bounds ();_eba ,_faca :=NewImage (_acd .Max .X ,_acd .Max .Y ,2,1,nil ,nil ,nil );
if _faca !=nil {return nil ,_faca ;};_abfa (_gdba ,_eba ,_acd );return _eba ,nil ;};func _dba (_da ,_efd *Monochrome ,_ggf []byte ,_gdg int )(_cfc error ){var (_eeee ,_dfa ,_dgfa ,_gcda ,_ddc ,_ggb ,_acg ,_bafc int ;_gbcb ,_bfb uint32 ;_acc ,_dge byte ;
_fba uint16 ;);_egg :=make ([]byte ,4);_gbg :=make ([]byte ,4);for _dgfa =0;_dgfa < _da .Height -1;_dgfa ,_gcda =_dgfa +2,_gcda +1{_eeee =_dgfa *_da .BytesPerLine ;_dfa =_gcda *_efd .BytesPerLine ;for _ddc ,_ggb =0,0;_ddc < _gdg ;_ddc ,_ggb =_ddc +4,_ggb +1{for _acg =0;
_acg < 4;_acg ++{_bafc =_eeee +_ddc +_acg ;if _bafc <=len (_da .Data )-1&&_bafc < _eeee +_da .BytesPerLine {_egg [_acg ]=_da .Data [_bafc ];}else {_egg [_acg ]=0x00;};_bafc =_eeee +_da .BytesPerLine +_ddc +_acg ;if _bafc <=len (_da .Data )-1&&_bafc < _eeee +(2*_da .BytesPerLine ){_gbg [_acg ]=_da .Data [_bafc ];
}else {_gbg [_acg ]=0x00;};};_gbcb =_gg .BigEndian .Uint32 (_egg );_bfb =_gg .BigEndian .Uint32 (_gbg );_bfb |=_gbcb ;_bfb |=_bfb <<1;_bfb &=0xaaaaaaaa;_gbcb =_bfb |(_bfb <<7);_acc =byte (_gbcb >>24);_dge =byte ((_gbcb >>8)&0xff);_bafc =_dfa +_ggb ;if _bafc +1==len (_efd .Data )-1||_bafc +1>=_dfa +_efd .BytesPerLine {_efd .Data [_bafc ]=_ggf [_acc ];
}else {_fba =(uint16 (_ggf [_acc ])<<8)|uint16 (_ggf [_dge ]);if _cfc =_efd .setTwoBytes (_bafc ,_fba );_cfc !=nil {return _fd .Errorf ("s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_bafc );
};_ggb ++;};};};return nil ;};func _ccec (_dgdb NRGBA ,_dgfaa Gray ,_cccdb _bb .Rectangle ){for _fbe :=0;_fbe < _cccdb .Max .X ;_fbe ++{for _dbcb :=0;_dbcb < _cccdb .Max .Y ;_dbcb ++{_ccee :=_dbff (_dgdb .NRGBAAt (_fbe ,_dbcb ));_dgfaa .SetGray (_fbe ,_dbcb ,_ccee );
};};};func _aebc (_cba _b .NRGBA )_b .CMYK {_bec ,_aebf ,_abf ,_ :=_cba .RGBA ();_debea ,_fae ,_gad ,_fab :=_b .RGBToCMYK (uint8 (_bec >>8),uint8 (_aebf >>8),uint8 (_abf >>8));return _b .CMYK {C :_debea ,M :_fae ,Y :_gad ,K :_fab };};func _dcfa (_fdg int )[]uint {var _egec []uint ;
_bad :=_fdg ;_edf :=_bad /8;if _edf !=0{for _feb :=0;_feb < _edf ;_feb ++{_egec =append (_egec ,8);};_gee :=_bad %8;_bad =0;if _gee !=0{_bad =_gee ;};};_dfg :=_bad /4;if _dfg !=0{for _dddg :=0;_dddg < _dfg ;_dddg ++{_egec =append (_egec ,4);};_ea :=_bad %4;
_bad =0;if _ea !=0{_bad =_ea ;};};_dcc :=_bad /2;if _dcc !=0{for _bfa :=0;_bfa < _dcc ;_bfa ++{_egec =append (_egec ,2);};};return _egec ;};func (_dfbe *Gray2 )Validate ()error {if len (_dfbe .Data )!=_dfbe .Height *_dfbe .BytesPerLine {return ErrInvalidImage ;
};return nil ;};func _bdag (_adbdc _b .Color )_b .Color {_cdbg :=_b .GrayModel .Convert (_adbdc ).(_b .Gray );return _egcc (_cdbg );};func RasterOperation (dest *Monochrome ,dx ,dy ,dw ,dh int ,op RasterOperator ,src *Monochrome ,sx ,sy int )error {return _acfda (dest ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );
};func GrayHistogram (g Gray )(_gcbef [256]int ){switch _cgfa :=g .(type ){case Histogramer :return _cgfa .Histogram ();case _bb .Image :_adcaf :=_cgfa .Bounds ();for _cafb :=0;_cafb < _adcaf .Max .X ;_cafb ++{for _cbge :=0;_cbge < _adcaf .Max .Y ;_cbge ++{_gcbef [g .GrayAt (_cafb ,_cbge ).Y ]++;
};};return _gcbef ;default:return [256]int {};};};func _gef (_dede ,_gcde *Monochrome ,_eaa []byte ,_fegc int )(_fge error ){var (_gf ,_dfaa ,_dgd ,_fdgf ,_gfg ,_gbf ,_dfgg ,_dea int ;_cfe ,_dbf ,_adc ,_fgb uint32 ;_cdf ,_cgcf byte ;_efe uint16 ;);_gcdg :=make ([]byte ,4);
_agf :=make ([]byte ,4);for _dgd =0;_dgd < _dede .Height -1;_dgd ,_fdgf =_dgd +2,_fdgf +1{_gf =_dgd *_dede .BytesPerLine ;_dfaa =_fdgf *_gcde .BytesPerLine ;for _gfg ,_gbf =0,0;_gfg < _fegc ;_gfg ,_gbf =_gfg +4,_gbf +1{for _dfgg =0;_dfgg < 4;_dfgg ++{_dea =_gf +_gfg +_dfgg ;
if _dea <=len (_dede .Data )-1&&_dea < _gf +_dede .BytesPerLine {_gcdg [_dfgg ]=_dede .Data [_dea ];}else {_gcdg [_dfgg ]=0x00;};_dea =_gf +_dede .BytesPerLine +_gfg +_dfgg ;if _dea <=len (_dede .Data )-1&&_dea < _gf +(2*_dede .BytesPerLine ){_agf [_dfgg ]=_dede .Data [_dea ];
}else {_agf [_dfgg ]=0x00;};};_cfe =_gg .BigEndian .Uint32 (_gcdg );_dbf =_gg .BigEndian .Uint32 (_agf );_adc =_cfe &_dbf ;_adc |=_adc <<1;_fgb =_cfe |_dbf ;_fgb &=_fgb <<1;_dbf =_adc |_fgb ;_dbf &=0xaaaaaaaa;_cfe =_dbf |(_dbf <<7);_cdf =byte (_cfe >>24);
_cgcf =byte ((_cfe >>8)&0xff);_dea =_dfaa +_gbf ;if _dea +1==len (_gcde .Data )-1||_dea +1>=_dfaa +_gcde .BytesPerLine {if _fge =_gcde .setByte (_dea ,_eaa [_cdf ]);_fge !=nil {return _fd .Errorf ("\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_dea );};
}else {_efe =(uint16 (_eaa [_cdf ])<<8)|uint16 (_eaa [_cgcf ]);if _fge =_gcde .setTwoBytes (_dea ,_efe );_fge !=nil {return _fd .Errorf ("s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_dea );
};_gbf ++;};};};return nil ;};func (_cfd colorConverter )Convert (src _bb .Image )(Image ,error ){return _cfd ._dfee (src )};func (_dad *Gray2 )ColorModel ()_b .Model {return Gray2Model };func (_bde *NRGBA32 )SetNRGBA (x ,y int ,c _b .NRGBA ){_afde :=y *_bde .Width +x ;
_fefg :=3*_afde ;if _fefg +2>=len (_bde .Data ){return ;};_bde .setRGBA (_afde ,c );};func _ggca (_eec RGBA ,_dgfc CMYK ,_aec _bb .Rectangle ){for _cbg :=0;_cbg < _aec .Max .X ;_cbg ++{for _gfc :=0;_gfc < _aec .Max .Y ;_gfc ++{_dcdb :=_eec .RGBAAt (_cbg ,_gfc );
_dgfc .SetCMYK (_cbg ,_gfc ,_ceg (_dcdb ));};};};func _eafg (_fbbf _b .Color )_b .Color {_agag :=_b .NRGBAModel .Convert (_fbbf ).(_b .NRGBA );return _dccaa (_agag );};func (_gbed *ImageBase )MakeAlpha (){_gbed .newAlpha ()};var (_ebgg =[]byte {0x00,0x80,0xC0,0xE0,0xF0,0xF8,0xFC,0xFE,0xFF};
_caef =[]byte {0x00,0x01,0x03,0x07,0x0F,0x1F,0x3F,0x7F,0xFF};);func _fe ()(_deb [256]uint16 ){for _cde :=0;_cde < 256;_cde ++{if _cde &0x01!=0{_deb [_cde ]|=0x3;};if _cde &0x02!=0{_deb [_cde ]|=0xc;};if _cde &0x04!=0{_deb [_cde ]|=0x30;};if _cde &0x08!=0{_deb [_cde ]|=0xc0;
};if _cde &0x10!=0{_deb [_cde ]|=0x300;};if _cde &0x20!=0{_deb [_cde ]|=0xc00;};if _cde &0x40!=0{_deb [_cde ]|=0x3000;};if _cde &0x80!=0{_deb [_cde ]|=0xc000;};};return _deb ;};func _facbg (_agdb *Monochrome ,_ceea ,_abcb ,_fbed ,_efaba int ,_edfb RasterOperator ){if _ceea < 0{_fbed +=_ceea ;
_ceea =0;};_dgba :=_ceea +_fbed -_agdb .Width ;if _dgba > 0{_fbed -=_dgba ;};if _abcb < 0{_efaba +=_abcb ;_abcb =0;};_fbac :=_abcb +_efaba -_agdb .Height ;if _fbac > 0{_efaba -=_fbac ;};if _fbed <=0||_efaba <=0{return ;};if (_ceea &7)==0{_ecc (_agdb ,_ceea ,_abcb ,_fbed ,_efaba ,_edfb );
}else {_gadc (_agdb ,_ceea ,_abcb ,_fbed ,_efaba ,_edfb );};};func _dcgab (_fgdg CMYK ,_dgfac NRGBA ,_gadb _bb .Rectangle ){for _gacd :=0;_gacd < _gadb .Max .X ;_gacd ++{for _edda :=0;_edda < _gadb .Max .Y ;_edda ++{_aacg :=_fgdg .CMYKAt (_gacd ,_edda );
_dgfac .SetNRGBA (_gacd ,_edda ,_fbaf (_aacg ));};};};func ColorAtGray4BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_b .Gray ,error ){_caf :=y *bytesPerLine +x >>1;if _caf >=len (data ){return _b .Gray {},_fd .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_fafd :=data [_caf ]>>uint (4-(x &1)*4)&0xf;if len (decode )==2{_fafd =uint8 (uint32 (LinearInterpolate (float64 (_fafd ),0,15,decode [0],decode [1]))&0xf);};return _b .Gray {Y :_fafd *17&0xff},nil ;};func _cgc (_ced *Monochrome ,_adf ...int )(_bdc *Monochrome ,_agc error ){if _ced ==nil {return nil ,_c .New ("\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");
};if len (_adf )==0{return nil ,_c .New ("\u0074h\u0065\u0072e\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020o\u006e\u0065\u0020\u006c\u0065\u0076\u0065\u006c\u0020\u006f\u0066 \u0072\u0065\u0064\u0075\u0063\u0074\u0069\u006f\u006e");
};_ec :=_fgc ();_bdc =_ced ;for _ ,_bfd :=range _adf {if _bfd <=0{break ;};_bdc ,_agc =_bef (_bdc ,_bfd ,_ec );if _agc !=nil {return nil ,_agc ;};};return _bdc ,nil ;};func (_ggcd *NRGBA32 )ColorAt (x ,y int )(_b .Color ,error ){return ColorAtNRGBA32 (x ,y ,_ggcd .Width ,_ggcd .Data ,_ggcd .Alpha ,_ggcd .Decode );
};func _ccbc (_efg *Monochrome ,_dccg ,_bgbg int ,_afgb ,_bbbg int ,_fgaa RasterOperator ,_cdbc *Monochrome ,_ddebc ,_gdce int )error {var _ecd ,_efee ,_cgaf ,_dege int ;if _dccg < 0{_ddebc -=_dccg ;_afgb +=_dccg ;_dccg =0;};if _ddebc < 0{_dccg -=_ddebc ;
_afgb +=_ddebc ;_ddebc =0;};_ecd =_dccg +_afgb -_efg .Width ;if _ecd > 0{_afgb -=_ecd ;};_efee =_ddebc +_afgb -_cdbc .Width ;if _efee > 0{_afgb -=_efee ;};if _bgbg < 0{_gdce -=_bgbg ;_bbbg +=_bgbg ;_bgbg =0;};if _gdce < 0{_bgbg -=_gdce ;_bbbg +=_gdce ;
_gdce =0;};_cgaf =_bgbg +_bbbg -_efg .Height ;if _cgaf > 0{_bbbg -=_cgaf ;};_dege =_gdce +_bbbg -_cdbc .Height ;if _dege > 0{_bbbg -=_dege ;};if _afgb <=0||_bbbg <=0{return nil ;};var _eacc error ;switch {case _dccg &7==0&&_ddebc &7==0:_eacc =_eeed (_efg ,_dccg ,_bgbg ,_afgb ,_bbbg ,_fgaa ,_cdbc ,_ddebc ,_gdce );
case _dccg &7==_ddebc &7:_eacc =_bace (_efg ,_dccg ,_bgbg ,_afgb ,_bbbg ,_fgaa ,_cdbc ,_ddebc ,_gdce );default:_eacc =_afac (_efg ,_dccg ,_bgbg ,_afgb ,_bbbg ,_fgaa ,_cdbc ,_ddebc ,_gdce );};if _eacc !=nil {return _eacc ;};return nil ;};func _faed (_gbeb _b .NRGBA64 )_b .NRGBA {return _b .NRGBA {R :uint8 (_gbeb .R >>8),G :uint8 (_gbeb .G >>8),B :uint8 (_gbeb .B >>8),A :uint8 (_gbeb .A >>8)};
};func _dgf ()(_dce [256]uint64 ){for _ega :=0;_ega < 256;_ega ++{if _ega &0x01!=0{_dce [_ega ]|=0xff;};if _ega &0x02!=0{_dce [_ega ]|=0xff00;};if _ega &0x04!=0{_dce [_ega ]|=0xff0000;};if _ega &0x08!=0{_dce [_ega ]|=0xff000000;};if _ega &0x10!=0{_dce [_ega ]|=0xff00000000;
};if _ega &0x20!=0{_dce [_ega ]|=0xff0000000000;};if _ega &0x40!=0{_dce [_ega ]|=0xff000000000000;};if _ega &0x80!=0{_dce [_ega ]|=0xff00000000000000;};};return _dce ;};func (_ffda *CMYK32 )ColorModel ()_b .Model {return _b .CMYKModel };func AutoThresholdTriangle (histogram [256]int )uint8 {var _baaa ,_dagbg ,_dded ,_ceab int ;
for _cgab :=0;_cgab < len (histogram );_cgab ++{if histogram [_cgab ]> 0{_baaa =_cgab ;break ;};};if _baaa > 0{_baaa --;};for _febg :=255;_febg > 0;_febg --{if histogram [_febg ]> 0{_ceab =_febg ;break ;};};if _ceab < 255{_ceab ++;};for _cbce :=0;_cbce < 256;
_cbce ++{if histogram [_cbce ]> _dagbg {_dded =_cbce ;_dagbg =histogram [_cbce ];};};var _ddee bool ;if (_dded -_baaa )< (_ceab -_dded ){_ddee =true ;var _geac int ;_ddgd :=255;for _geac < _ddgd {_gfbdf :=histogram [_geac ];histogram [_geac ]=histogram [_ddgd ];
histogram [_ddgd ]=_gfbdf ;_geac ++;_ddgd --;};_baaa =255-_ceab ;_dded =255-_dded ;};if _baaa ==_dded {return uint8 (_baaa );};_cgafg :=float64 (histogram [_dded ]);_dfeed :=float64 (_baaa -_dded );_dadga :=_g .Sqrt (_cgafg *_cgafg +_dfeed *_dfeed );_cgafg /=_dadga ;
_dfeed /=_dadga ;_dadga =_cgafg *float64 (_baaa )+_dfeed *float64 (histogram [_baaa ]);_abga :=_baaa ;var _effg float64 ;for _bggb :=_baaa +1;_bggb <=_dded ;_bggb ++{_gdbf :=_cgafg *float64 (_bggb )+_dfeed *float64 (histogram [_bggb ])-_dadga ;if _gdbf > _effg {_abga =_bggb ;
_effg =_gdbf ;};};_abga --;if _ddee {var _cgdb int ;_gfca :=255;for _cgdb < _gfca {_baecg :=histogram [_cgdb ];histogram [_cgdb ]=histogram [_gfca ];histogram [_gfca ]=_baecg ;_cgdb ++;_gfca --;};return uint8 (255-_abga );};return uint8 (_abga );};var _ _bb .Image =&NRGBA16 {};
func _bdb (_gbbc Gray ,_facb CMYK ,_fdf _bb .Rectangle ){for _dbe :=0;_dbe < _fdf .Max .X ;_dbe ++{for _bfdg :=0;_bfdg < _fdf .Max .Y ;_bfdg ++{_agcg :=_gbbc .GrayAt (_dbe ,_bfdg );_facb .SetCMYK (_dbe ,_bfdg ,_aecf (_agcg ));};};};func InDelta (expected ,current ,delta float64 )bool {_eege :=expected -current ;
if _eege <=-delta ||_eege >=delta {return false ;};return true ;};func _ecc (_baae *Monochrome ,_adba ,_bbgef int ,_dcgfc ,_eaff int ,_gdge RasterOperator ){var (_ddcea int ;_abeb byte ;_aegabb ,_geg int ;_bcce int ;);_badf :=_dcgfc >>3;_aaec :=_dcgfc &7;
if _aaec > 0{_abeb =_ebgg [_aaec ];};_ddcea =_baae .BytesPerLine *_bbgef +(_adba >>3);switch _gdge {case PixClr :for _aegabb =0;_aegabb < _eaff ;_aegabb ++{_bcce =_ddcea +_aegabb *_baae .BytesPerLine ;for _geg =0;_geg < _badf ;_geg ++{_baae .Data [_bcce ]=0x0;
_bcce ++;};if _aaec > 0{_baae .Data [_bcce ]=_ddfd (_baae .Data [_bcce ],0x0,_abeb );};};case PixSet :for _aegabb =0;_aegabb < _eaff ;_aegabb ++{_bcce =_ddcea +_aegabb *_baae .BytesPerLine ;for _geg =0;_geg < _badf ;_geg ++{_baae .Data [_bcce ]=0xff;_bcce ++;
};if _aaec > 0{_baae .Data [_bcce ]=_ddfd (_baae .Data [_bcce ],0xff,_abeb );};};case PixNotDst :for _aegabb =0;_aegabb < _eaff ;_aegabb ++{_bcce =_ddcea +_aegabb *_baae .BytesPerLine ;for _geg =0;_geg < _badf ;_geg ++{_baae .Data [_bcce ]=^_baae .Data [_bcce ];
_bcce ++;};if _aaec > 0{_baae .Data [_bcce ]=_ddfd (_baae .Data [_bcce ],^_baae .Data [_bcce ],_abeb );};};};};func (_fca *Monochrome )ResolveDecode ()error {if len (_fca .Decode )!=2{return nil ;};if _fca .Decode [0]==1&&_fca .Decode [1]==0{if _fafc :=_fca .InverseData ();
_fafc !=nil {return _fafc ;};_fca .Decode =nil ;};return nil ;};func _cabdd (_gabaa nrgba64 ,_dbcef RGBA ,_bddff _bb .Rectangle ){for _gffb :=0;_gffb < _bddff .Max .X ;_gffb ++{for _cgbd :=0;_cgbd < _bddff .Max .Y ;_cgbd ++{_bcdcb :=_gabaa .NRGBA64At (_gffb ,_cgbd );
_dbcef .SetRGBA (_gffb ,_cgbd ,_gecfa (_bcdcb ));};};};func (_beg *CMYK32 )At (x ,y int )_b .Color {_cca ,_ :=_beg .ColorAt (x ,y );return _cca };func (_agad *Gray16 )At (x ,y int )_b .Color {_bfgg ,_ :=_agad .ColorAt (x ,y );return _bfgg };func (_cgeg *NRGBA16 )Validate ()error {if len (_cgeg .Data )!=3*_cgeg .Width *_cgeg .Height /2{return _c .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};var _ Image =&Gray4 {};func _cgfe (_fbfb ,_dcbd uint8 )uint8 {if _fbfb < _dcbd {return 255;};return 0;};func (_fcdg *NRGBA16 )NRGBAAt (x ,y int )_b .NRGBA {_bbec ,_ :=ColorAtNRGBA16 (x ,y ,_fcdg .Width ,_fcdg .BytesPerLine ,_fcdg .Data ,_fcdg .Alpha ,_fcdg .Decode );
return _bbec ;};func MonochromeThresholdConverter (threshold uint8 )ColorConverter {return &monochromeThresholdConverter {Threshold :threshold };};var ErrInvalidImage =_c .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
func (_feec *RGBA32 )At (x ,y int )_b .Color {_eedff ,_ :=_feec .ColorAt (x ,y );return _eedff };func _fefb (_befc _bb .Image )(Image ,error ){if _adab ,_bbee :=_befc .(*Gray4 );_bbee {return _adab .Copy (),nil ;};_dbfd :=_befc .Bounds ();_cedc ,_agge :=NewImage (_dbfd .Max .X ,_dbfd .Max .Y ,4,1,nil ,nil ,nil );
if _agge !=nil {return nil ,_agge ;};_abfa (_befc ,_cedc ,_dbfd );return _cedc ,nil ;};var (Gray2Model =_b .ModelFunc (_ffac );Gray4Model =_b .ModelFunc (_bdag );NRGBA16Model =_b .ModelFunc (_eafg ););type ImageBase struct{Width ,Height int ;BitsPerComponent ,ColorComponents int ;
Data ,Alpha []byte ;Decode []float64 ;BytesPerLine int ;};func (_eaef *Monochrome )setGray (_aegab int ,_edeb _b .Gray ,_egc int ){if _edeb .Y ==0{_eaef .clearBit (_egc ,_aegab );}else {_eaef .setGrayBit (_egc ,_aegab );};};func _fgc ()(_eag []byte ){_eag =make ([]byte ,256);
for _agfb :=0;_agfb < 256;_agfb ++{_ddde :=byte (_agfb );_eag [_ddde ]=(_ddde &0x01)|((_ddde &0x04)>>1)|((_ddde &0x10)>>2)|((_ddde &0x40)>>3)|((_ddde &0x02)<<3)|((_ddde &0x08)<<2)|((_ddde &0x20)<<1)|(_ddde &0x80);};return _eag ;};var _ _bb .Image =&Monochrome {};
func _ae (_gb *Monochrome ,_gdc int )(*Monochrome ,error ){if _gb ==nil {return nil ,_c .New ("\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _gdc ==1{return _gb .copy (),nil ;};if !IsPowerOf2 (uint (_gdc )){return nil ,_fd .Errorf ("\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006ci\u0064 \u0065x\u0070a\u006e\u0064\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020\u0025\u0064",_gdc );
};_af :=_dcfa (_gdc );return _cb (_gb ,_gdc ,_af );};func (_bbc *Monochrome )AddPadding ()(_cce error ){if _bfec :=((_bbc .Width *_bbc .Height )+7)>>3;len (_bbc .Data )< _bfec {return _fd .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064a\u0074\u0061\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u003a\u0020\u0027\u0025\u0064\u0027\u002e\u0020\u0054\u0068\u0065\u0020\u0064\u0061t\u0061\u0020s\u0068\u006fu\u006c\u0064\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 l\u0065\u0061\u0073\u0074\u003a\u0020\u0027\u0025\u0064'\u0020\u0062\u0079\u0074\u0065\u0073",len (_bbc .Data ),_bfec );
};_beae :=_bbc .Width %8;if _beae ==0{return nil ;};_fgg :=_bbc .Width /8;_cgcc :=_gd .NewReader (_bbc .Data );_baff :=make ([]byte ,_bbc .Height *_bbc .BytesPerLine );_beb :=_gd .NewWriterMSB (_baff );_eab :=make ([]byte ,_fgg );var (_gce int ;_bfga uint64 ;
);for _gce =0;_gce < _bbc .Height ;_gce ++{if _ ,_cce =_cgcc .Read (_eab );_cce !=nil {return _cce ;};if _ ,_cce =_beb .Write (_eab );_cce !=nil {return _cce ;};if _bfga ,_cce =_cgcc .ReadBits (byte (_beae ));_cce !=nil {return _cce ;};if _cce =_beb .WriteByte (byte (_bfga )<<uint (8-_beae ));
_cce !=nil {return _cce ;};};_bbc .Data =_beb .Data ();return nil ;};type Image interface{_a .Image ;Base ()*ImageBase ;Copy ()Image ;Pix ()[]byte ;ColorAt (_aeff ,_ddae int )(_b .Color ,error );Validate ()error ;};func (_bbd *Gray4 )Set (x ,y int ,c _b .Color ){if x >=_bbd .Width ||y >=_bbd .Height {return ;
};_faag :=Gray4Model .Convert (c ).(_b .Gray );_bbd .setGray (x ,y ,_faag );};func (_fdffd *Gray4 )Base ()*ImageBase {return &_fdffd .ImageBase };var _ NRGBA =&NRGBA32 {};func (_fffef *NRGBA16 )Bounds ()_bb .Rectangle {return _bb .Rectangle {Max :_bb .Point {X :_fffef .Width ,Y :_fffef .Height }};
};func init (){_eaggb ()};func _ecfc (_eda CMYK ,_dabd Gray ,_gcfeb _bb .Rectangle ){for _afgeg :=0;_afgeg < _gcfeb .Max .X ;_afgeg ++{for _bag :=0;_bag < _gcfeb .Max .Y ;_bag ++{_bbgg :=_caa (_eda .CMYKAt (_afgeg ,_bag ));_dabd .SetGray (_afgeg ,_bag ,_bbgg );
};};};func (_cfdf *Monochrome )Validate ()error {if len (_cfdf .Data )!=_cfdf .Height *_cfdf .BytesPerLine {return ErrInvalidImage ;};return nil ;};func (_egge *ImageBase )GetAlpha ()[]byte {return _egge .Alpha };type Gray4 struct{ImageBase };func LinearInterpolate (x ,xmin ,xmax ,ymin ,ymax float64 )float64 {if _g .Abs (xmax -xmin )< 0.000001{return ymin ;
};_fgba :=ymin +(x -xmin )*(ymax -ymin )/(xmax -xmin );return _fgba ;};func _cd (_ab ,_edg *Monochrome )(_cee error ){_ac :=_edg .BytesPerLine ;_gc :=_ab .BytesPerLine ;_dcb :=_edg .BytesPerLine *4-_ab .BytesPerLine ;var (_dd ,_bf byte ;_cg uint32 ;_be ,_ge ,_fgd ,_dda ,_ca ,_bed ,_fag int ;
);for _fgd =0;_fgd < _edg .Height ;_fgd ++{_be =_fgd *_ac ;_ge =4*_fgd *_gc ;for _dda =0;_dda < _ac ;_dda ++{_dd =_edg .Data [_be +_dda ];_cg =_adb [_dd ];_bed =_ge +_dda *4;if _dcb !=0&&(_dda +1)*4> _ab .BytesPerLine {for _ca =_dcb ;_ca > 0;_ca --{_bf =byte ((_cg >>uint (_ca *8))&0xff);
_fag =_bed +(_dcb -_ca );if _cee =_ab .setByte (_fag ,_bf );_cee !=nil {return _cee ;};};}else if _cee =_ab .setFourBytes (_bed ,_cg );_cee !=nil {return _cee ;};if _cee =_ab .setFourBytes (_ge +_dda *4,_adb [_edg .Data [_be +_dda ]]);_cee !=nil {return _cee ;
};};for _ca =1;_ca < 4;_ca ++{for _dda =0;_dda < _gc ;_dda ++{if _cee =_ab .setByte (_ge +_ca *_gc +_dda ,_ab .Data [_ge +_dda ]);_cee !=nil {return _cee ;};};};};return nil ;};func ColorAtGray16BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_b .Gray16 ,error ){_bdgf :=(y *bytesPerLine /2+x )*2;
if _bdgf +1>=len (data ){return _b .Gray16 {},_fd .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_gbaf :=uint16 (data [_bdgf ])<<8|uint16 (data [_bdgf +1]);if len (decode )==2{_gbaf =uint16 (uint64 (LinearInterpolate (float64 (_gbaf ),0,65535,decode [0],decode [1])));};return _b .Gray16 {Y :_gbaf },nil ;};func (_ggd *Monochrome )ReduceBinary (factor float64 )(*Monochrome ,error ){_gadd :=_beaee (uint (factor ));
if !IsPowerOf2 (uint (factor )){_gadd ++;};_fded :=make ([]int ,_gadd );for _dff :=range _fded {_fded [_dff ]=4;};_fgeb ,_acaf :=_cgc (_ggd ,_fded ...);if _acaf !=nil {return nil ,_acaf ;};return _fgeb ,nil ;};func (_adcbf *Gray16 )ColorAt (x ,y int )(_b .Color ,error ){return ColorAtGray16BPC (x ,y ,_adcbf .BytesPerLine ,_adcbf .Data ,_adcbf .Decode );
};type CMYK32 struct{ImageBase };var _ Gray =&Gray8 {};func (_ffdc *CMYK32 )Validate ()error {if len (_ffdc .Data )!=4*_ffdc .Width *_ffdc .Height {return _c .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};func _bef (_dfc *Monochrome ,_dcgf int ,_afg []byte )(_db *Monochrome ,_fagf error ){const _cfg ="\u0072\u0065d\u0075\u0063\u0065R\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079";if _dfc ==nil {return nil ,_c .New ("\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");
};if _dcgf < 1||_dcgf > 4{return nil ,_c .New ("\u006c\u0065\u0076\u0065\u006c\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0069\u006e\u0020\u0073e\u0074\u0020\u007b\u0031\u002c\u0032\u002c\u0033\u002c\u0034\u007d");};if _dfc .Height <=1{return nil ,_c .New ("\u0073\u006f\u0075rc\u0065\u0020\u0068\u0065\u0069\u0067\u0068\u0074\u0020m\u0075s\u0074 \u0062e\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0027\u0032\u0027");
};_db =_cfbd (_dfc .Width /2,_dfc .Height /2);if _afg ==nil {_afg =_fgc ();};_bbbf :=_dgec (_dfc .BytesPerLine ,2*_db .BytesPerLine );switch _dcgf {case 1:_fagf =_dba (_dfc ,_db ,_afg ,_bbbf );case 2:_fagf =_gef (_dfc ,_db ,_afg ,_bbbf );case 3:_fagf =_fgdf (_dfc ,_db ,_afg ,_bbbf );
case 4:_fagf =_gfd (_dfc ,_db ,_afg ,_bbbf );};if _fagf !=nil {return nil ,_fagf ;};return _db ,nil ;};var _befa [256]uint8 ;func (_acdda *NRGBA32 )NRGBAAt (x ,y int )_b .NRGBA {_bdde ,_ :=ColorAtNRGBA32 (x ,y ,_acdda .Width ,_acdda .Data ,_acdda .Alpha ,_acdda .Decode );
return _bdde ;};func FromGoImage (i _bb .Image )(Image ,error ){switch _eaf :=i .(type ){case Image :return _eaf .Copy (),nil ;case Gray :return GrayConverter .Convert (i );case *_bb .Gray16 :return Gray16Converter .Convert (i );case CMYK :return CMYKConverter .Convert (i );
case *_bb .NRGBA64 :return NRGBA64Converter .Convert (i );default:return NRGBAConverter .Convert (i );};};const (_gaef shift =iota ;_babd ;);func _eeae (_bcad _bb .Image )(Image ,error ){if _aaff ,_gac :=_bcad .(*NRGBA32 );_gac {return _aaff .Copy (),nil ;
};_fccc ,_cbag ,_dfaf :=_dbfc (_bcad ,1);_afdg ,_gdebc :=NewImage (_fccc .Max .X ,_fccc .Max .Y ,8,3,nil ,_dfaf ,nil );if _gdebc !=nil {return nil ,_gdebc ;};_geed (_bcad ,_afdg ,_fccc );if len (_dfaf )!=0&&!_cbag {if _dgecd :=_abee (_dfaf ,_afdg );_dgecd !=nil {return nil ,_dgecd ;
};};return _afdg ,nil ;};type RGBA interface{RGBAAt (_fccb ,_abcf int )_b .RGBA ;SetRGBA (_bfed ,_ebgb int ,_cace _b .RGBA );};func _abd ()(_edb [256]uint32 ){for _ddd :=0;_ddd < 256;_ddd ++{if _ddd &0x01!=0{_edb [_ddd ]|=0xf;};if _ddd &0x02!=0{_edb [_ddd ]|=0xf0;
};if _ddd &0x04!=0{_edb [_ddd ]|=0xf00;};if _ddd &0x08!=0{_edb [_ddd ]|=0xf000;};if _ddd &0x10!=0{_edb [_ddd ]|=0xf0000;};if _ddd &0x20!=0{_edb [_ddd ]|=0xf00000;};if _ddd &0x40!=0{_edb [_ddd ]|=0xf000000;};if _ddd &0x80!=0{_edb [_ddd ]|=0xf0000000;};};
return _edb ;};func _dbff (_eeeb _b .NRGBA )_b .Gray {_ceaa ,_gab ,_ggba ,_ :=_eeeb .RGBA ();_agg :=(19595*_ceaa +38470*_gab +7471*_ggba +1<<15)>>24;return _b .Gray {Y :uint8 (_agg )};};func AddDataPadding (width ,height ,bitsPerComponent ,colorComponents int ,data []byte )([]byte ,error ){_dgg :=BytesPerLine (width ,bitsPerComponent ,colorComponents );
if _dgg ==width *colorComponents *bitsPerComponent /8{return data ,nil ;};_cgcfg :=width *colorComponents *bitsPerComponent ;_gefa :=_dgg *8;_fgfb :=8-(_gefa -_cgcfg );_abfd :=_gd .NewReader (data );_dgbf :=_dgg -1;_bbef :=make ([]byte ,_dgbf );_adgg :=make ([]byte ,height *_dgg );
_cgag :=_gd .NewWriterMSB (_adgg );var _bdbg uint64 ;var _ccd error ;for _feffe :=0;_feffe < height ;_feffe ++{_ ,_ccd =_abfd .Read (_bbef );if _ccd !=nil {return nil ,_ccd ;};_ ,_ccd =_cgag .Write (_bbef );if _ccd !=nil {return nil ,_ccd ;};_bdbg ,_ccd =_abfd .ReadBits (byte (_fgfb ));
if _ccd !=nil {return nil ,_ccd ;};_ ,_ccd =_cgag .WriteBits (_bdbg ,_fgfb );if _ccd !=nil {return nil ,_ccd ;};_cgag .FinishByte ();};return _adgg ,nil ;};type NRGBA64 struct{ImageBase };func (_fdcd *NRGBA32 )Base ()*ImageBase {return &_fdcd .ImageBase };
func (_cbdf *Gray4 )At (x ,y int )_b .Color {_ddbc ,_ :=_cbdf .ColorAt (x ,y );return _ddbc };type Gray interface{GrayAt (_cgad ,_gecd int )_b .Gray ;SetGray (_ffeb ,_ede int ,_cfa _b .Gray );};func ColorAtNRGBA32 (x ,y ,width int ,data ,alpha []byte ,decode []float64 )(_b .NRGBA ,error ){_ecab :=y *width +x ;
_cgf :=3*_ecab ;if _cgf +2>=len (data ){return _b .NRGBA {},_fd .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_cff :=uint8 (0xff);if alpha !=nil &&len (alpha )> _ecab {_cff =alpha [_ecab ];};_ecad ,_affd ,_cbcfd :=data [_cgf ],data [_cgf +1],data [_cgf +2];if len (decode )==6{_eabgf :=LinearInterpolate (float64 (_ecad ),0,255.0,decode [0],decode [1]);_fffa :=LinearInterpolate (float64 (_affd ),0,255.0,decode [2],decode [3]);
_eebd :=LinearInterpolate (float64 (_cbcfd ),0,255.0,decode [4],decode [5]);if _eabgf <=1.0&&_fffa <=1.0&&_eebd <=1.0{_eabgf *=255.0;_fffa *=255.0;_eebd *=255.0;};_ecad =uint8 (_eabgf )&0xff;_affd =uint8 (_fffa )&0xff;_cbcfd =uint8 (_eebd )&0xff;};return _b .NRGBA {R :_ecad ,G :_affd ,B :_cbcfd ,A :_cff },nil ;
};func _agcge (_cgccb *_bb .NYCbCrA ,_cbde NRGBA ,_ceeag _bb .Rectangle ){for _gff :=0;_gff < _ceeag .Max .X ;_gff ++{for _eeag :=0;_eeag < _ceeag .Max .Y ;_eeag ++{_edab :=_cgccb .NYCbCrAAt (_gff ,_eeag );_cbde .SetNRGBA (_gff ,_eeag ,_ggbd (_edab ));
};};};func _ddaed (_ebeef CMYK ,_egee RGBA ,_gagg _bb .Rectangle ){for _dfga :=0;_dfga < _gagg .Max .X ;_dfga ++{for _cadde :=0;_cadde < _gagg .Max .Y ;_cadde ++{_afc :=_ebeef .CMYKAt (_dfga ,_cadde );_egee .SetRGBA (_dfga ,_cadde ,_gfdca (_afc ));};};
};func (_cdfa *CMYK32 )Set (x ,y int ,c _b .Color ){_gbe :=4*(y *_cdfa .Width +x );if _gbe +3>=len (_cdfa .Data ){return ;};_ffd :=_b .CMYKModel .Convert (c ).(_b .CMYK );_cdfa .Data [_gbe ]=_ffd .C ;_cdfa .Data [_gbe +1]=_ffd .M ;_cdfa .Data [_gbe +2]=_ffd .Y ;
_cdfa .Data [_gbe +3]=_ffd .K ;};type monochromeModel uint8 ;func (_eeegf *ImageBase )setEightPartlyBytes (_ggcaa ,_fagd int ,_gfeg uint64 )(_fbfe error ){var (_cfeca byte ;_dcgff int ;);for _adgb :=1;_adgb <=_fagd ;_adgb ++{_dcgff =64-_adgb *8;_cfeca =byte (_gfeg >>uint (_dcgff )&0xff);
if _fbfe =_eeegf .setByte (_ggcaa +_adgb -1,_cfeca );_fbfe !=nil {return _fbfe ;};};_fcdb :=_eeegf .BytesPerLine *8-_eeegf .Width ;if _fcdb ==0{return nil ;};_dcgff -=8;_cfeca =byte (_gfeg >>uint (_dcgff )&0xff)<<uint (_fcdb );if _fbfe =_eeegf .setByte (_ggcaa +_fagd ,_cfeca );
_fbfe !=nil {return _fbfe ;};return nil ;};type NRGBA32 struct{ImageBase };func _cb (_bd *Monochrome ,_ba int ,_cf []uint )(*Monochrome ,error ){_fg :=_ba *_bd .Width ;_fc :=_ba *_bd .Height ;_ed :=_cfbd (_fg ,_fc );for _dc ,_bab :=range _cf {var _agd error ;
switch _bab {case 2:_agd =_cbd (_ed ,_bd );case 4:_agd =_cd (_ed ,_bd );case 8:_agd =_de (_ed ,_bd );};if _agd !=nil {return nil ,_agd ;};if _dc !=len (_cf )-1{_bd =_ed .copy ();};};return _ed ,nil ;};type NRGBA interface{NRGBAAt (_gaa ,_fdc int )_b .NRGBA ;
SetNRGBA (_dbeg ,_cdae int ,_debg _b .NRGBA );};func (_bddf *NRGBA64 )Copy ()Image {return &NRGBA64 {ImageBase :_bddf .copy ()}};func NewImageBase (width int ,height int ,bitsPerComponent int ,colorComponents int ,data []byte ,alpha []byte ,decode []float64 )ImageBase {_gdae :=ImageBase {Width :width ,Height :height ,BitsPerComponent :bitsPerComponent ,ColorComponents :colorComponents ,Data :data ,Alpha :alpha ,Decode :decode ,BytesPerLine :BytesPerLine (width ,bitsPerComponent ,colorComponents )};
if data ==nil {_gdae .Data =make ([]byte ,height *_gdae .BytesPerLine );};return _gdae ;};func ColorAtGray8BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_b .Gray ,error ){_eeceg :=y *bytesPerLine +x ;if _eeceg >=len (data ){return _b .Gray {},_fd .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_bdf :=data [_eeceg ];if len (decode )==2{_bdf =uint8 (uint32 (LinearInterpolate (float64 (_bdf ),0,255,decode [0],decode [1]))&0xff);};return _b .Gray {Y :_bdf },nil ;};func (_dcdc *Gray2 )SetGray (x ,y int ,gray _b .Gray ){_dfag :=_bade (gray );_bdgb :=y *_dcdc .BytesPerLine ;
_eedf :=_bdgb +(x >>2);if _eedf >=len (_dcdc .Data ){return ;};_cdaa :=_dfag .Y >>6;_dcdc .Data [_eedf ]=(_dcdc .Data [_eedf ]&(^(0xc0>>uint (2*((x )&3)))))|(_cdaa <<uint (6-2*(x &3)));};func (_aga *CMYK32 )Copy ()Image {return &CMYK32 {ImageBase :_aga .copy ()}};
func (_aaa *Gray16 )Validate ()error {if len (_aaa .Data )!=_aaa .Height *_aaa .BytesPerLine {return ErrInvalidImage ;};return nil ;};func _aecf (_fbd _b .Gray )_b .CMYK {return _b .CMYK {K :0xff-_fbd .Y }};func _abfa (_fcfe _bb .Image ,_bcc Image ,_becd _bb .Rectangle ){switch _cfec :=_fcfe .(type ){case Gray :_caff (_cfec ,_bcc .(Gray ),_becd );
case NRGBA :_ccec (_cfec ,_bcc .(Gray ),_becd );case CMYK :_ecfc (_cfec ,_bcc .(Gray ),_becd );case RGBA :_facba (_cfec ,_bcc .(Gray ),_becd );default:_cgd (_fcfe ,_bcc ,_becd );};};func (_dgfcb *Monochrome )ColorAt (x ,y int )(_b .Color ,error ){return ColorAtGray1BPC (x ,y ,_dgfcb .BytesPerLine ,_dgfcb .Data ,_dgfcb .Decode );
};func _dafc (_bbf _bb .Image )(Image ,error ){if _afgg ,_dgfe :=_bbf .(*Monochrome );_dgfe {return _afgg ,nil ;};_gfe :=_bbf .Bounds ();var _ecf Gray ;switch _deed :=_bbf .(type ){case Gray :_ecf =_deed ;case NRGBA :_ecf =&Gray8 {ImageBase :NewImageBase (_gfe .Max .X ,_gfe .Max .Y ,8,1,nil ,nil ,nil )};
_dbc (_ecf ,_deed ,_gfe );case nrgba64 :_ecf =&Gray8 {ImageBase :NewImageBase (_gfe .Max .X ,_gfe .Max .Y ,8,1,nil ,nil ,nil )};_dab (_ecf ,_deed ,_gfe );default:_ceb ,_acf :=GrayConverter .Convert (_bbf );if _acf !=nil {return nil ,_acf ;};_ecf =_ceb .(Gray );
};_cgde ,_eece :=NewImage (_gfe .Max .X ,_gfe .Max .Y ,1,1,nil ,nil ,nil );if _eece !=nil {return nil ,_eece ;};_abdd :=_cgde .(*Monochrome );_bfe :=AutoThresholdTriangle (GrayHistogram (_ecf ));for _dag :=0;_dag < _gfe .Max .X ;_dag ++{for _dcga :=0;_dcga < _gfe .Max .Y ;
_dcga ++{_eeg :=_fgga (_ecf .GrayAt (_dag ,_dcga ),monochromeModel (_bfe ));_abdd .SetGray (_dag ,_dcga ,_eeg );};};return _cgde ,nil ;};func _ggbd (_fbfd _b .NYCbCrA )_b .NRGBA {_bcgb :=int32 (_fbfd .Y )*0x10101;_edbf :=int32 (_fbfd .Cb )-128;_gbcf :=int32 (_fbfd .Cr )-128;
_cbc :=_bcgb +91881*_gbcf ;if uint32 (_cbc )&0xff000000==0{_cbc >>=8;}else {_cbc =^(_cbc >>31)&0xffff;};_ddeb :=_bcgb -22554*_edbf -46802*_gbcf ;if uint32 (_ddeb )&0xff000000==0{_ddeb >>=8;}else {_ddeb =^(_ddeb >>31)&0xffff;};_bbg :=_bcgb +116130*_edbf ;
if uint32 (_bbg )&0xff000000==0{_bbg >>=8;}else {_bbg =^(_bbg >>31)&0xffff;};return _b .NRGBA {R :uint8 (_cbc >>8),G :uint8 (_ddeb >>8),B :uint8 (_bbg >>8),A :_fbfd .A };};var (_dcbe =_fe ();_adb =_abd ();_gcb =_dgf (););func ColorAtNRGBA16 (x ,y ,width ,bytesPerLine int ,data ,alpha []byte ,decode []float64 )(_b .NRGBA ,error ){_fgec :=y *bytesPerLine +x *3/2;
if _fgec +1>=len (data ){return _b .NRGBA {},_fea (x ,y );};const (_ccab =0xf;_bfge =uint8 (0xff););_abcfg :=_bfge ;if alpha !=nil {_ggbc :=y *BytesPerLine (width ,4,1);if _ggbc < len (alpha ){if x %2==0{_abcfg =(alpha [_ggbc ]>>uint (4))&_ccab ;}else {_abcfg =alpha [_ggbc ]&_ccab ;
};_abcfg |=_abcfg <<4;};};var _ddfdb ,_cgbc ,_fgeff uint8 ;if x *3%2==0{_ddfdb =(data [_fgec ]>>uint (4))&_ccab ;_cgbc =data [_fgec ]&_ccab ;_fgeff =(data [_fgec +1]>>uint (4))&_ccab ;}else {_ddfdb =data [_fgec ]&_ccab ;_cgbc =(data [_fgec +1]>>uint (4))&_ccab ;
_fgeff =data [_fgec +1]&_ccab ;};if len (decode )==6{_ddfdb =uint8 (uint32 (LinearInterpolate (float64 (_ddfdb ),0,15,decode [0],decode [1]))&0xf);_cgbc =uint8 (uint32 (LinearInterpolate (float64 (_cgbc ),0,15,decode [2],decode [3]))&0xf);_fgeff =uint8 (uint32 (LinearInterpolate (float64 (_fgeff ),0,15,decode [4],decode [5]))&0xf);
};return _b .NRGBA {R :(_ddfdb <<4)|(_ddfdb &0xf),G :(_cgbc <<4)|(_cgbc &0xf),B :(_fgeff <<4)|(_fgeff &0xf),A :_abcfg },nil ;};type colorConverter struct{_dfee func (_gcce _bb .Image )(Image ,error );};func NewImage (width ,height ,bitsPerComponent ,colorComponents int ,data ,alpha []byte ,decode []float64 )(Image ,error ){_agda :=NewImageBase (width ,height ,bitsPerComponent ,colorComponents ,data ,alpha ,decode );
var _cgdea Image ;switch colorComponents {case 1:switch bitsPerComponent {case 1:_cgdea =&Monochrome {ImageBase :_agda ,ModelThreshold :0x0f};case 2:_cgdea =&Gray2 {ImageBase :_agda };case 4:_cgdea =&Gray4 {ImageBase :_agda };case 8:_cgdea =&Gray8 {ImageBase :_agda };
case 16:_cgdea =&Gray16 {ImageBase :_agda };};case 3:switch bitsPerComponent {case 4:_cgdea =&NRGBA16 {ImageBase :_agda };case 8:_cgdea =&NRGBA32 {ImageBase :_agda };case 16:_cgdea =&NRGBA64 {ImageBase :_agda };};case 4:_cgdea =&CMYK32 {ImageBase :_agda };
};if _cgdea ==nil {return nil ,ErrInvalidImage ;};return _cgdea ,nil ;};func _geed (_caec _bb .Image ,_ceda Image ,_bbcf _bb .Rectangle ){if _bedg ,_gbdd :=_caec .(SMasker );_gbdd &&_bedg .HasAlpha (){_ceda .(SMasker ).MakeAlpha ();};switch _cgge :=_caec .(type ){case Gray :_bddfb (_cgge ,_ceda .(NRGBA ),_bbcf );
case NRGBA :_fbbd (_cgge ,_ceda .(NRGBA ),_bbcf );case *_bb .NYCbCrA :_agcge (_cgge ,_ceda .(NRGBA ),_bbcf );case CMYK :_dcgab (_cgge ,_ceda .(NRGBA ),_bbcf );case RGBA :_acdg (_cgge ,_ceda .(NRGBA ),_bbcf );case nrgba64 :_afgga (_cgge ,_ceda .(NRGBA ),_bbcf );
default:_cgd (_caec ,_ceda ,_bbcf );};};var _ Image =&RGBA32 {};func (_acfg *NRGBA64 )Bounds ()_bb .Rectangle {return _bb .Rectangle {Max :_bb .Point {X :_acfg .Width ,Y :_acfg .Height }};};func (_cccd *Gray8 )Base ()*ImageBase {return &_cccd .ImageBase };
func (_adcb *Gray2 )Histogram ()(_beac [256]int ){for _edba :=0;_edba < _adcb .Width ;_edba ++{for _edd :=0;_edd < _adcb .Height ;_edd ++{_beac [_adcb .GrayAt (_edba ,_edd ).Y ]++;};};return _beac ;};var _ Image =&NRGBA64 {};func _dgc (_ged ,_gecg CMYK ,_aba _bb .Rectangle ){for _gbcg :=0;
_gbcg < _aba .Max .X ;_gbcg ++{for _dee :=0;_dee < _aba .Max .Y ;_dee ++{_gecg .SetCMYK (_gbcg ,_dee ,_ged .CMYKAt (_gbcg ,_dee ));};};};func _dbc (_gfec Gray ,_ebb NRGBA ,_gabe _bb .Rectangle ){for _cda :=0;_cda < _gabe .Max .X ;_cda ++{for _ddf :=0;_ddf < _gabe .Max .Y ;
_ddf ++{_ebg :=_gbce (_ebb .NRGBAAt (_cda ,_ddf ));_gfec .SetGray (_cda ,_ddf ,_ebg );};};};var _ Image =&CMYK32 {};func _ffac (_faee _b .Color )_b .Color {_caaf :=_b .GrayModel .Convert (_faee ).(_b .Gray );return _bade (_caaf );};type Histogramer interface{Histogram ()[256]int ;
};func _adaf (_daaf *_bb .NYCbCrA ,_gaacc RGBA ,_ffdae _bb .Rectangle ){for _cceb :=0;_cceb < _ffdae .Max .X ;_cceb ++{for _fade :=0;_fade < _ffdae .Max .Y ;_fade ++{_ddbb :=_daaf .NYCbCrAAt (_cceb ,_fade );_gaacc .SetRGBA (_cceb ,_fade ,_fdff (_ddbb ));
};};};func (_cdb *Monochrome )Copy ()Image {return &Monochrome {ImageBase :_cdb .ImageBase .copy (),ModelThreshold :_cdb .ModelThreshold };};func _afac (_bbfb *Monochrome ,_fbgf ,_dbdg ,_acbf ,_egaf int ,_gebg RasterOperator ,_edef *Monochrome ,_ggcc ,_dfgd int )error {var (_gbd bool ;
_fgege bool ;_dadg byte ;_fcaae int ;_cgg int ;_fcag int ;_adbb int ;_bbae bool ;_abgg int ;_ebbg int ;_bfgc int ;_fdb bool ;_ffge byte ;_bdcb int ;_ffgf int ;_ccdc int ;_cabc byte ;_cccc int ;_dfad int ;_fffd uint ;_affa uint ;_acfb byte ;_cgef shift ;
_edgg bool ;_cfbbf bool ;_eef ,_bbda int ;);if _ggcc &7!=0{_dfad =8-(_ggcc &7);};if _fbgf &7!=0{_cgg =8-(_fbgf &7);};if _dfad ==0&&_cgg ==0{_acfb =_caef [0];}else {if _cgg > _dfad {_fffd =uint (_cgg -_dfad );}else {_fffd =uint (8-(_dfad -_cgg ));};_affa =8-_fffd ;
_acfb =_caef [_fffd ];};if (_fbgf &7)!=0{_gbd =true ;_fcaae =8-(_fbgf &7);_dadg =_caef [_fcaae ];_fcag =_bbfb .BytesPerLine *_dbdg +(_fbgf >>3);_adbb =_edef .BytesPerLine *_dfgd +(_ggcc >>3);_cccc =8-(_ggcc &7);if _fcaae > _cccc {_cgef =_gaef ;if _acbf >=_dfad {_edgg =true ;
};}else {_cgef =_babd ;};};if _acbf < _fcaae {_fgege =true ;_dadg &=_ebgg [8-_fcaae +_acbf ];};if !_fgege {_abgg =(_acbf -_fcaae )>>3;if _abgg !=0{_bbae =true ;_ebbg =_bbfb .BytesPerLine *_dbdg +((_fbgf +_cgg )>>3);_bfgc =_edef .BytesPerLine *_dfgd +((_ggcc +_cgg )>>3);
};};_bdcb =(_fbgf +_acbf )&7;if !(_fgege ||_bdcb ==0){_fdb =true ;_ffge =_ebgg [_bdcb ];_ffgf =_bbfb .BytesPerLine *_dbdg +((_fbgf +_cgg )>>3)+_abgg ;_ccdc =_edef .BytesPerLine *_dfgd +((_ggcc +_cgg )>>3)+_abgg ;if _bdcb > int (_affa ){_cfbbf =true ;};
};switch _gebg {case PixSrc :if _gbd {for _eef =0;_eef < _egaf ;_eef ++{if _cgef ==_gaef {_cabc =_edef .Data [_adbb ]<<_fffd ;if _edgg {_cabc =_ddfd (_cabc ,_edef .Data [_adbb +1]>>_affa ,_acfb );};}else {_cabc =_edef .Data [_adbb ]>>_affa ;};_bbfb .Data [_fcag ]=_ddfd (_bbfb .Data [_fcag ],_cabc ,_dadg );
_fcag +=_bbfb .BytesPerLine ;_adbb +=_edef .BytesPerLine ;};};if _bbae {for _eef =0;_eef < _egaf ;_eef ++{for _bbda =0;_bbda < _abgg ;_bbda ++{_cabc =_ddfd (_edef .Data [_bfgc +_bbda ]<<_fffd ,_edef .Data [_bfgc +_bbda +1]>>_affa ,_acfb );_bbfb .Data [_ebbg +_bbda ]=_cabc ;
};_ebbg +=_bbfb .BytesPerLine ;_bfgc +=_edef .BytesPerLine ;};};if _fdb {for _eef =0;_eef < _egaf ;_eef ++{_cabc =_edef .Data [_ccdc ]<<_fffd ;if _cfbbf {_cabc =_ddfd (_cabc ,_edef .Data [_ccdc +1]>>_affa ,_acfb );};_bbfb .Data [_ffgf ]=_ddfd (_bbfb .Data [_ffgf ],_cabc ,_ffge );
_ffgf +=_bbfb .BytesPerLine ;_ccdc +=_edef .BytesPerLine ;};};case PixNotSrc :if _gbd {for _eef =0;_eef < _egaf ;_eef ++{if _cgef ==_gaef {_cabc =_edef .Data [_adbb ]<<_fffd ;if _edgg {_cabc =_ddfd (_cabc ,_edef .Data [_adbb +1]>>_affa ,_acfb );};}else {_cabc =_edef .Data [_adbb ]>>_affa ;
};_bbfb .Data [_fcag ]=_ddfd (_bbfb .Data [_fcag ],^_cabc ,_dadg );_fcag +=_bbfb .BytesPerLine ;_adbb +=_edef .BytesPerLine ;};};if _bbae {for _eef =0;_eef < _egaf ;_eef ++{for _bbda =0;_bbda < _abgg ;_bbda ++{_cabc =_ddfd (_edef .Data [_bfgc +_bbda ]<<_fffd ,_edef .Data [_bfgc +_bbda +1]>>_affa ,_acfb );
_bbfb .Data [_ebbg +_bbda ]=^_cabc ;};_ebbg +=_bbfb .BytesPerLine ;_bfgc +=_edef .BytesPerLine ;};};if _fdb {for _eef =0;_eef < _egaf ;_eef ++{_cabc =_edef .Data [_ccdc ]<<_fffd ;if _cfbbf {_cabc =_ddfd (_cabc ,_edef .Data [_ccdc +1]>>_affa ,_acfb );};
_bbfb .Data [_ffgf ]=_ddfd (_bbfb .Data [_ffgf ],^_cabc ,_ffge );_ffgf +=_bbfb .BytesPerLine ;_ccdc +=_edef .BytesPerLine ;};};case PixSrcOrDst :if _gbd {for _eef =0;_eef < _egaf ;_eef ++{if _cgef ==_gaef {_cabc =_edef .Data [_adbb ]<<_fffd ;if _edgg {_cabc =_ddfd (_cabc ,_edef .Data [_adbb +1]>>_affa ,_acfb );
};}else {_cabc =_edef .Data [_adbb ]>>_affa ;};_bbfb .Data [_fcag ]=_ddfd (_bbfb .Data [_fcag ],_cabc |_bbfb .Data [_fcag ],_dadg );_fcag +=_bbfb .BytesPerLine ;_adbb +=_edef .BytesPerLine ;};};if _bbae {for _eef =0;_eef < _egaf ;_eef ++{for _bbda =0;_bbda < _abgg ;
_bbda ++{_cabc =_ddfd (_edef .Data [_bfgc +_bbda ]<<_fffd ,_edef .Data [_bfgc +_bbda +1]>>_affa ,_acfb );_bbfb .Data [_ebbg +_bbda ]|=_cabc ;};_ebbg +=_bbfb .BytesPerLine ;_bfgc +=_edef .BytesPerLine ;};};if _fdb {for _eef =0;_eef < _egaf ;_eef ++{_cabc =_edef .Data [_ccdc ]<<_fffd ;
if _cfbbf {_cabc =_ddfd (_cabc ,_edef .Data [_ccdc +1]>>_affa ,_acfb );};_bbfb .Data [_ffgf ]=_ddfd (_bbfb .Data [_ffgf ],_cabc |_bbfb .Data [_ffgf ],_ffge );_ffgf +=_bbfb .BytesPerLine ;_ccdc +=_edef .BytesPerLine ;};};case PixSrcAndDst :if _gbd {for _eef =0;
_eef < _egaf ;_eef ++{if _cgef ==_gaef {_cabc =_edef .Data [_adbb ]<<_fffd ;if _edgg {_cabc =_ddfd (_cabc ,_edef .Data [_adbb +1]>>_affa ,_acfb );};}else {_cabc =_edef .Data [_adbb ]>>_affa ;};_bbfb .Data [_fcag ]=_ddfd (_bbfb .Data [_fcag ],_cabc &_bbfb .Data [_fcag ],_dadg );
_fcag +=_bbfb .BytesPerLine ;_adbb +=_edef .BytesPerLine ;};};if _bbae {for _eef =0;_eef < _egaf ;_eef ++{for _bbda =0;_bbda < _abgg ;_bbda ++{_cabc =_ddfd (_edef .Data [_bfgc +_bbda ]<<_fffd ,_edef .Data [_bfgc +_bbda +1]>>_affa ,_acfb );_bbfb .Data [_ebbg +_bbda ]&=_cabc ;
};_ebbg +=_bbfb .BytesPerLine ;_bfgc +=_edef .BytesPerLine ;};};if _fdb {for _eef =0;_eef < _egaf ;_eef ++{_cabc =_edef .Data [_ccdc ]<<_fffd ;if _cfbbf {_cabc =_ddfd (_cabc ,_edef .Data [_ccdc +1]>>_affa ,_acfb );};_bbfb .Data [_ffgf ]=_ddfd (_bbfb .Data [_ffgf ],_cabc &_bbfb .Data [_ffgf ],_ffge );
_ffgf +=_bbfb .BytesPerLine ;_ccdc +=_edef .BytesPerLine ;};};case PixSrcXorDst :if _gbd {for _eef =0;_eef < _egaf ;_eef ++{if _cgef ==_gaef {_cabc =_edef .Data [_adbb ]<<_fffd ;if _edgg {_cabc =_ddfd (_cabc ,_edef .Data [_adbb +1]>>_affa ,_acfb );};}else {_cabc =_edef .Data [_adbb ]>>_affa ;
};_bbfb .Data [_fcag ]=_ddfd (_bbfb .Data [_fcag ],_cabc ^_bbfb .Data [_fcag ],_dadg );_fcag +=_bbfb .BytesPerLine ;_adbb +=_edef .BytesPerLine ;};};if _bbae {for _eef =0;_eef < _egaf ;_eef ++{for _bbda =0;_bbda < _abgg ;_bbda ++{_cabc =_ddfd (_edef .Data [_bfgc +_bbda ]<<_fffd ,_edef .Data [_bfgc +_bbda +1]>>_affa ,_acfb );
_bbfb .Data [_ebbg +_bbda ]^=_cabc ;};_ebbg +=_bbfb .BytesPerLine ;_bfgc +=_edef .BytesPerLine ;};};if _fdb {for _eef =0;_eef < _egaf ;_eef ++{_cabc =_edef .Data [_ccdc ]<<_fffd ;if _cfbbf {_cabc =_ddfd (_cabc ,_edef .Data [_ccdc +1]>>_affa ,_acfb );};
_bbfb .Data [_ffgf ]=_ddfd (_bbfb .Data [_ffgf ],_cabc ^_bbfb .Data [_ffgf ],_ffge );_ffgf +=_bbfb .BytesPerLine ;_ccdc +=_edef .BytesPerLine ;};};case PixNotSrcOrDst :if _gbd {for _eef =0;_eef < _egaf ;_eef ++{if _cgef ==_gaef {_cabc =_edef .Data [_adbb ]<<_fffd ;
if _edgg {_cabc =_ddfd (_cabc ,_edef .Data [_adbb +1]>>_affa ,_acfb );};}else {_cabc =_edef .Data [_adbb ]>>_affa ;};_bbfb .Data [_fcag ]=_ddfd (_bbfb .Data [_fcag ],^_cabc |_bbfb .Data [_fcag ],_dadg );_fcag +=_bbfb .BytesPerLine ;_adbb +=_edef .BytesPerLine ;
};};if _bbae {for _eef =0;_eef < _egaf ;_eef ++{for _bbda =0;_bbda < _abgg ;_bbda ++{_cabc =_ddfd (_edef .Data [_bfgc +_bbda ]<<_fffd ,_edef .Data [_bfgc +_bbda +1]>>_affa ,_acfb );_bbfb .Data [_ebbg +_bbda ]|=^_cabc ;};_ebbg +=_bbfb .BytesPerLine ;_bfgc +=_edef .BytesPerLine ;
};};if _fdb {for _eef =0;_eef < _egaf ;_eef ++{_cabc =_edef .Data [_ccdc ]<<_fffd ;if _cfbbf {_cabc =_ddfd (_cabc ,_edef .Data [_ccdc +1]>>_affa ,_acfb );};_bbfb .Data [_ffgf ]=_ddfd (_bbfb .Data [_ffgf ],^_cabc |_bbfb .Data [_ffgf ],_ffge );_ffgf +=_bbfb .BytesPerLine ;
_ccdc +=_edef .BytesPerLine ;};};case PixNotSrcAndDst :if _gbd {for _eef =0;_eef < _egaf ;_eef ++{if _cgef ==_gaef {_cabc =_edef .Data [_adbb ]<<_fffd ;if _edgg {_cabc =_ddfd (_cabc ,_edef .Data [_adbb +1]>>_affa ,_acfb );};}else {_cabc =_edef .Data [_adbb ]>>_affa ;
};_bbfb .Data [_fcag ]=_ddfd (_bbfb .Data [_fcag ],^_cabc &_bbfb .Data [_fcag ],_dadg );_fcag +=_bbfb .BytesPerLine ;_adbb +=_edef .BytesPerLine ;};};if _bbae {for _eef =0;_eef < _egaf ;_eef ++{for _bbda =0;_bbda < _abgg ;_bbda ++{_cabc =_ddfd (_edef .Data [_bfgc +_bbda ]<<_fffd ,_edef .Data [_bfgc +_bbda +1]>>_affa ,_acfb );
_bbfb .Data [_ebbg +_bbda ]&=^_cabc ;};_ebbg +=_bbfb .BytesPerLine ;_bfgc +=_edef .BytesPerLine ;};};if _fdb {for _eef =0;_eef < _egaf ;_eef ++{_cabc =_edef .Data [_ccdc ]<<_fffd ;if _cfbbf {_cabc =_ddfd (_cabc ,_edef .Data [_ccdc +1]>>_affa ,_acfb );};
_bbfb .Data [_ffgf ]=_ddfd (_bbfb .Data [_ffgf ],^_cabc &_bbfb .Data [_ffgf ],_ffge );_ffgf +=_bbfb .BytesPerLine ;_ccdc +=_edef .BytesPerLine ;};};case PixSrcOrNotDst :if _gbd {for _eef =0;_eef < _egaf ;_eef ++{if _cgef ==_gaef {_cabc =_edef .Data [_adbb ]<<_fffd ;
if _edgg {_cabc =_ddfd (_cabc ,_edef .Data [_adbb +1]>>_affa ,_acfb );};}else {_cabc =_edef .Data [_adbb ]>>_affa ;};_bbfb .Data [_fcag ]=_ddfd (_bbfb .Data [_fcag ],_cabc |^_bbfb .Data [_fcag ],_dadg );_fcag +=_bbfb .BytesPerLine ;_adbb +=_edef .BytesPerLine ;
};};if _bbae {for _eef =0;_eef < _egaf ;_eef ++{for _bbda =0;_bbda < _abgg ;_bbda ++{_cabc =_ddfd (_edef .Data [_bfgc +_bbda ]<<_fffd ,_edef .Data [_bfgc +_bbda +1]>>_affa ,_acfb );_bbfb .Data [_ebbg +_bbda ]=_cabc |^_bbfb .Data [_ebbg +_bbda ];};_ebbg +=_bbfb .BytesPerLine ;
_bfgc +=_edef .BytesPerLine ;};};if _fdb {for _eef =0;_eef < _egaf ;_eef ++{_cabc =_edef .Data [_ccdc ]<<_fffd ;if _cfbbf {_cabc =_ddfd (_cabc ,_edef .Data [_ccdc +1]>>_affa ,_acfb );};_bbfb .Data [_ffgf ]=_ddfd (_bbfb .Data [_ffgf ],_cabc |^_bbfb .Data [_ffgf ],_ffge );
_ffgf +=_bbfb .BytesPerLine ;_ccdc +=_edef .BytesPerLine ;};};case PixSrcAndNotDst :if _gbd {for _eef =0;_eef < _egaf ;_eef ++{if _cgef ==_gaef {_cabc =_edef .Data [_adbb ]<<_fffd ;if _edgg {_cabc =_ddfd (_cabc ,_edef .Data [_adbb +1]>>_affa ,_acfb );};
}else {_cabc =_edef .Data [_adbb ]>>_affa ;};_bbfb .Data [_fcag ]=_ddfd (_bbfb .Data [_fcag ],_cabc &^_bbfb .Data [_fcag ],_dadg );_fcag +=_bbfb .BytesPerLine ;_adbb +=_edef .BytesPerLine ;};};if _bbae {for _eef =0;_eef < _egaf ;_eef ++{for _bbda =0;_bbda < _abgg ;
_bbda ++{_cabc =_ddfd (_edef .Data [_bfgc +_bbda ]<<_fffd ,_edef .Data [_bfgc +_bbda +1]>>_affa ,_acfb );_bbfb .Data [_ebbg +_bbda ]=_cabc &^_bbfb .Data [_ebbg +_bbda ];};_ebbg +=_bbfb .BytesPerLine ;_bfgc +=_edef .BytesPerLine ;};};if _fdb {for _eef =0;
_eef < _egaf ;_eef ++{_cabc =_edef .Data [_ccdc ]<<_fffd ;if _cfbbf {_cabc =_ddfd (_cabc ,_edef .Data [_ccdc +1]>>_affa ,_acfb );};_bbfb .Data [_ffgf ]=_ddfd (_bbfb .Data [_ffgf ],_cabc &^_bbfb .Data [_ffgf ],_ffge );_ffgf +=_bbfb .BytesPerLine ;_ccdc +=_edef .BytesPerLine ;
};};case PixNotPixSrcOrDst :if _gbd {for _eef =0;_eef < _egaf ;_eef ++{if _cgef ==_gaef {_cabc =_edef .Data [_adbb ]<<_fffd ;if _edgg {_cabc =_ddfd (_cabc ,_edef .Data [_adbb +1]>>_affa ,_acfb );};}else {_cabc =_edef .Data [_adbb ]>>_affa ;};_bbfb .Data [_fcag ]=_ddfd (_bbfb .Data [_fcag ],^(_cabc |_bbfb .Data [_fcag ]),_dadg );
_fcag +=_bbfb .BytesPerLine ;_adbb +=_edef .BytesPerLine ;};};if _bbae {for _eef =0;_eef < _egaf ;_eef ++{for _bbda =0;_bbda < _abgg ;_bbda ++{_cabc =_ddfd (_edef .Data [_bfgc +_bbda ]<<_fffd ,_edef .Data [_bfgc +_bbda +1]>>_affa ,_acfb );_bbfb .Data [_ebbg +_bbda ]=^(_cabc |_bbfb .Data [_ebbg +_bbda ]);
};_ebbg +=_bbfb .BytesPerLine ;_bfgc +=_edef .BytesPerLine ;};};if _fdb {for _eef =0;_eef < _egaf ;_eef ++{_cabc =_edef .Data [_ccdc ]<<_fffd ;if _cfbbf {_cabc =_ddfd (_cabc ,_edef .Data [_ccdc +1]>>_affa ,_acfb );};_bbfb .Data [_ffgf ]=_ddfd (_bbfb .Data [_ffgf ],^(_cabc |_bbfb .Data [_ffgf ]),_ffge );
_ffgf +=_bbfb .BytesPerLine ;_ccdc +=_edef .BytesPerLine ;};};case PixNotPixSrcAndDst :if _gbd {for _eef =0;_eef < _egaf ;_eef ++{if _cgef ==_gaef {_cabc =_edef .Data [_adbb ]<<_fffd ;if _edgg {_cabc =_ddfd (_cabc ,_edef .Data [_adbb +1]>>_affa ,_acfb );
};}else {_cabc =_edef .Data [_adbb ]>>_affa ;};_bbfb .Data [_fcag ]=_ddfd (_bbfb .Data [_fcag ],^(_cabc &_bbfb .Data [_fcag ]),_dadg );_fcag +=_bbfb .BytesPerLine ;_adbb +=_edef .BytesPerLine ;};};if _bbae {for _eef =0;_eef < _egaf ;_eef ++{for _bbda =0;
_bbda < _abgg ;_bbda ++{_cabc =_ddfd (_edef .Data [_bfgc +_bbda ]<<_fffd ,_edef .Data [_bfgc +_bbda +1]>>_affa ,_acfb );_bbfb .Data [_ebbg +_bbda ]=^(_cabc &_bbfb .Data [_ebbg +_bbda ]);};_ebbg +=_bbfb .BytesPerLine ;_bfgc +=_edef .BytesPerLine ;};};if _fdb {for _eef =0;
_eef < _egaf ;_eef ++{_cabc =_edef .Data [_ccdc ]<<_fffd ;if _cfbbf {_cabc =_ddfd (_cabc ,_edef .Data [_ccdc +1]>>_affa ,_acfb );};_bbfb .Data [_ffgf ]=_ddfd (_bbfb .Data [_ffgf ],^(_cabc &_bbfb .Data [_ffgf ]),_ffge );_ffgf +=_bbfb .BytesPerLine ;_ccdc +=_edef .BytesPerLine ;
};};case PixNotPixSrcXorDst :if _gbd {for _eef =0;_eef < _egaf ;_eef ++{if _cgef ==_gaef {_cabc =_edef .Data [_adbb ]<<_fffd ;if _edgg {_cabc =_ddfd (_cabc ,_edef .Data [_adbb +1]>>_affa ,_acfb );};}else {_cabc =_edef .Data [_adbb ]>>_affa ;};_bbfb .Data [_fcag ]=_ddfd (_bbfb .Data [_fcag ],^(_cabc ^_bbfb .Data [_fcag ]),_dadg );
_fcag +=_bbfb .BytesPerLine ;_adbb +=_edef .BytesPerLine ;};};if _bbae {for _eef =0;_eef < _egaf ;_eef ++{for _bbda =0;_bbda < _abgg ;_bbda ++{_cabc =_ddfd (_edef .Data [_bfgc +_bbda ]<<_fffd ,_edef .Data [_bfgc +_bbda +1]>>_affa ,_acfb );_bbfb .Data [_ebbg +_bbda ]=^(_cabc ^_bbfb .Data [_ebbg +_bbda ]);
};_ebbg +=_bbfb .BytesPerLine ;_bfgc +=_edef .BytesPerLine ;};};if _fdb {for _eef =0;_eef < _egaf ;_eef ++{_cabc =_edef .Data [_ccdc ]<<_fffd ;if _cfbbf {_cabc =_ddfd (_cabc ,_edef .Data [_ccdc +1]>>_affa ,_acfb );};_bbfb .Data [_ffgf ]=_ddfd (_bbfb .Data [_ffgf ],^(_cabc ^_bbfb .Data [_ffgf ]),_ffge );
_ffgf +=_bbfb .BytesPerLine ;_ccdc +=_edef .BytesPerLine ;};};default:_ce .Log .Debug ("\u004f\u0070e\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0074\u0020\u0070\u0065\u0072\u006d\u0069tt\u0065\u0064",_gebg );
return _c .New ("\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065r\u0061\u0074\u0069\u006f\u006e\u0020\u006eo\u0074\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074\u0065\u0064");};return nil ;};type nrgba64 interface{NRGBA64At (_aeaeg ,_debgg int )_b .NRGBA64 ;
SetNRGBA64 (_edee ,_babg int ,_gdccg _b .NRGBA64 );};func (_badeb *ImageBase )newAlpha (){_aecd :=BytesPerLine (_badeb .Width ,_badeb .BitsPerComponent ,1);_badeb .Alpha =make ([]byte ,_badeb .Height *_aecd );};func (_ebd *NRGBA32 )setRGBA (_ggbe int ,_eacb _b .NRGBA ){_gcbe :=3*_ggbe ;
_ebd .Data [_gcbe ]=_eacb .R ;_ebd .Data [_gcbe +1]=_eacb .G ;_ebd .Data [_gcbe +2]=_eacb .B ;if _ggbe < len (_ebd .Alpha ){_ebd .Alpha [_ggbe ]=_eacb .A ;};};func (_egbdb *Gray4 )SetGray (x ,y int ,g _b .Gray ){if x >=_egbdb .Width ||y >=_egbdb .Height {return ;
};g =_egcc (g );_egbdb .setGray (x ,y ,g );};func _ddfd (_aeae ,_ceae ,_febe byte )byte {return (_aeae &^(_febe ))|(_ceae &_febe )};var _ NRGBA =&NRGBA16 {};var _ _bb .Image =&RGBA32 {};func ColorAtGray2BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_b .Gray ,error ){_aceb :=y *bytesPerLine +x >>2;
if _aceb >=len (data ){return _b .Gray {},_fd .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_bbeb :=data [_aceb ]>>uint (6-(x &3)*2)&3;if len (decode )==2{_bbeb =uint8 (uint32 (LinearInterpolate (float64 (_bbeb ),0,3.0,decode [0],decode [1]))&3);};return _b .Gray {Y :_bbeb *85},nil ;};func ConverterFunc (converterFunc func (_afee _bb .Image )(Image ,error ))ColorConverter {return colorConverter {_dfee :converterFunc };
};func GetConverter (bitsPerComponent ,colorComponents int )(ColorConverter ,error ){switch colorComponents {case 1:switch bitsPerComponent {case 1:return MonochromeConverter ,nil ;case 2:return Gray2Converter ,nil ;case 4:return Gray4Converter ,nil ;case 8:return GrayConverter ,nil ;
case 16:return Gray16Converter ,nil ;};case 3:switch bitsPerComponent {case 4:return NRGBA16Converter ,nil ;case 8:return NRGBAConverter ,nil ;case 16:return NRGBA64Converter ,nil ;};case 4:return CMYKConverter ,nil ;};return nil ,_fd .Errorf ("\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0043o\u006e\u0076\u0065\u0072\u0074\u0065\u0072\u0020\u0070\u0061\u0072\u0061\u006d\u0065t\u0065\u0072\u0073\u002e\u0020\u0042\u0069\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u003a\u0020\u0025\u0064\u002c\u0020\u0043\u006f\u006co\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006et\u0073\u003a \u0025\u0064",bitsPerComponent ,colorComponents );
};func (_gdff *RGBA32 )ColorModel ()_b .Model {return _b .NRGBAModel };func (_feef *NRGBA64 )NRGBA64At (x ,y int )_b .NRGBA64 {_dgge ,_ :=ColorAtNRGBA64 (x ,y ,_feef .Width ,_feef .Data ,_feef .Alpha ,_feef .Decode );return _dgge ;};func _deged (_dddee *_bb .Gray ,_dceea uint8 )*_bb .Gray {_efca :=_dddee .Bounds ();
_bafdc :=_bb .NewGray (_efca );for _abde :=0;_abde < _efca .Dx ();_abde ++{for _acdb :=0;_acdb < _efca .Dy ();_acdb ++{_fcad :=_dddee .GrayAt (_abde ,_acdb );_bafdc .SetGray (_abde ,_acdb ,_b .Gray {Y :_cgfe (_fcad .Y ,_dceea )});};};return _bafdc ;};func (_bffc *NRGBA32 )Validate ()error {if len (_bffc .Data )!=3*_bffc .Width *_bffc .Height {return _c .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};func (_fffe *Gray8 )GrayAt (x ,y int )_b .Gray {_bba ,_ :=ColorAtGray8BPC (x ,y ,_fffe .BytesPerLine ,_fffe .Data ,_fffe .Decode );return _bba ;};func (_eegca *NRGBA64 )ColorModel ()_b .Model {return _b .NRGBA64Model };func _egcc (_bfgb _b .Gray )_b .Gray {_bfgb .Y >>=4;
_bfgb .Y |=_bfgb .Y <<4;return _bfgb };var _ Image =&NRGBA16 {};func ColorAt (x ,y ,width ,bitsPerColor ,colorComponents ,bytesPerLine int ,data ,alpha []byte ,decode []float64 )(_b .Color ,error ){switch colorComponents {case 1:return ColorAtGrayscale (x ,y ,bitsPerColor ,bytesPerLine ,data ,decode );
case 3:return ColorAtNRGBA (x ,y ,width ,bytesPerLine ,bitsPerColor ,data ,alpha ,decode );case 4:return ColorAtCMYK (x ,y ,width ,data ,decode );default:return nil ,_fd .Errorf ("\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063o\u006c\u006f\u0072\u0020\u0063\u006f\u006dp\u006f\u006e\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0074h\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0064",colorComponents );
};};func _bddfb (_dfd Gray ,_efea NRGBA ,_bedgc _bb .Rectangle ){for _ebdd :=0;_ebdd < _bedgc .Max .X ;_ebdd ++{for _cbf :=0;_cbf < _bedgc .Max .Y ;_cbf ++{_bbdg :=_dfd .GrayAt (_ebdd ,_cbf );_efea .SetNRGBA (_ebdd ,_cbf ,_fbag (_bbdg ));};};};func (_cdef *Monochrome )At (x ,y int )_b .Color {_geff ,_ :=_cdef .ColorAt (x ,y );
return _geff };func _fgae (_ddff _bb .Image ,_dagcc Image ,_eecf _bb .Rectangle ){if _egca ,_eccg :=_ddff .(SMasker );_eccg &&_egca .HasAlpha (){_dagcc .(SMasker ).MakeAlpha ();};_cgd (_ddff ,_dagcc ,_eecf );};func (_dfcbb *RGBA32 )Validate ()error {if len (_dfcbb .Data )!=3*_dfcbb .Width *_dfcbb .Height {return _c .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};func (_bbbe *NRGBA16 )ColorModel ()_b .Model {return NRGBA16Model };func (_dfge *NRGBA16 )Set (x ,y int ,c _b .Color ){_badc :=y *_dfge .BytesPerLine +x *3/2;if _badc +1>=len (_dfge .Data ){return ;};_abbd :=NRGBA16Model .Convert (c ).(_b .NRGBA );
_dfge .setNRGBA (x ,y ,_badc ,_abbd );};func (_cfde *RGBA32 )Base ()*ImageBase {return &_cfde .ImageBase };type monochromeThresholdConverter struct{Threshold uint8 ;};type Gray2 struct{ImageBase };func (_dbde *Monochrome )IsUnpadded ()bool {return (_dbde .Width *_dbde .Height )==len (_dbde .Data )};
func (_bcag *NRGBA64 )Base ()*ImageBase {return &_bcag .ImageBase };func _cfae (_edfd _bb .Image )(Image ,error ){if _ggdd ,_agfba :=_edfd .(*Gray8 );_agfba {return _ggdd .Copy (),nil ;};_egf :=_edfd .Bounds ();_fdeda ,_bcdc :=NewImage (_egf .Max .X ,_egf .Max .Y ,8,1,nil ,nil ,nil );
if _bcdc !=nil {return nil ,_bcdc ;};_abfa (_edfd ,_fdeda ,_egf );return _fdeda ,nil ;};func (_bgda *Gray2 )Set (x ,y int ,c _b .Color ){if x >=_bgda .Width ||y >=_bgda .Height {return ;};_egbd :=Gray2Model .Convert (c ).(_b .Gray );_ccaa :=y *_bgda .BytesPerLine ;
_fdgd :=_ccaa +(x >>2);_fggd :=_egbd .Y >>6;_bgda .Data [_fdgd ]=(_bgda .Data [_fdgd ]&(^(0xc0>>uint (2*((x )&3)))))|(_fggd <<uint (6-2*(x &3)));};func _gfbgg (_dfgge _bb .Image ,_gdgf Image ,_dgbfg _bb .Rectangle ){if _gecdf ,_dccf :=_dfgge .(SMasker );
_dccf &&_gecdf .HasAlpha (){_gdgf .(SMasker ).MakeAlpha ();};switch _gbdf :=_dfgge .(type ){case Gray :_ffaa (_gbdf ,_gdgf .(RGBA ),_dgbfg );case NRGBA :_edgb (_gbdf ,_gdgf .(RGBA ),_dgbfg );case *_bb .NYCbCrA :_adaf (_gbdf ,_gdgf .(RGBA ),_dgbfg );case CMYK :_ddaed (_gbdf ,_gdgf .(RGBA ),_dgbfg );
case RGBA :_aedgc (_gbdf ,_gdgf .(RGBA ),_dgbfg );case nrgba64 :_cabdd (_gbdf ,_gdgf .(RGBA ),_dgbfg );default:_cgd (_dfgge ,_gdgf ,_dgbfg );};};var _ _bb .Image =&Gray16 {};func (_ddbf *Gray4 )Copy ()Image {return &Gray4 {ImageBase :_ddbf .copy ()}};func (_eac *Gray8 )Validate ()error {if len (_eac .Data )!=_eac .Height *_eac .BytesPerLine {return ErrInvalidImage ;
};return nil ;};func (_gdf *NRGBA32 )Bounds ()_bb .Rectangle {return _bb .Rectangle {Max :_bb .Point {X :_gdf .Width ,Y :_gdf .Height }};};var _ Gray =&Gray16 {};var (MonochromeConverter =ConverterFunc (_dafc );Gray2Converter =ConverterFunc (_dagcb );Gray4Converter =ConverterFunc (_fefb );
GrayConverter =ConverterFunc (_cfae );Gray16Converter =ConverterFunc (_abca );NRGBA16Converter =ConverterFunc (_fcaee );NRGBAConverter =ConverterFunc (_eeae );NRGBA64Converter =ConverterFunc (_cceeb );RGBAConverter =ConverterFunc (_fafaa );CMYKConverter =ConverterFunc (_gfdc );
);func (_fgdbf *Gray8 )ColorAt (x ,y int )(_b .Color ,error ){return ColorAtGray8BPC (x ,y ,_fgdbf .BytesPerLine ,_fgdbf .Data ,_fgdbf .Decode );};var _ _bb .Image =&NRGBA64 {};func _ded (_bfg *Monochrome ,_abe ,_cfb int )(*Monochrome ,error ){if _bfg ==nil {return nil ,_c .New ("\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _abe <=0||_cfb <=0{return nil ,_c .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0073\u0063\u0061l\u0065\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020<\u003d\u0020\u0030");};if _abe ==_cfb {if _abe ==1{return _bfg .copy (),nil ;};
if _abe ==2||_abe ==4||_abe ==8{_gcd ,_cga :=_ae (_bfg ,_abe );if _cga !=nil {return nil ,_cga ;};return _gcd ,nil ;};};_eee :=_abe *_bfg .Width ;_fcf :=_cfb *_bfg .Height ;_eeb :=_cfbd (_eee ,_fcf );_dcg :=_eeb .BytesPerLine ;var (_fde ,_dcf ,_cgb ,_fcc ,_bg int ;
_fga byte ;_gbc error ;);for _dcf =0;_dcf < _bfg .Height ;_dcf ++{_fde =_cfb *_dcf *_dcg ;for _cgb =0;_cgb < _bfg .Width ;_cgb ++{if _ef :=_bfg .getBitAt (_cgb ,_dcf );_ef {_bg =_abe *_cgb ;for _fcc =0;_fcc < _abe ;_fcc ++{_eeb .setIndexedBit (_fde *8+_bg +_fcc );
};};};for _fcc =1;_fcc < _cfb ;_fcc ++{_faa :=_fde +_fcc *_dcg ;for _gbb :=0;_gbb < _dcg ;_gbb ++{if _fga ,_gbc =_eeb .getByte (_fde +_gbb );_gbc !=nil {return nil ,_gbc ;};if _gbc =_eeb .setByte (_faa +_gbb ,_fga );_gbc !=nil {return nil ,_gbc ;};};};
};return _eeb ,nil ;};func (_dccd *Monochrome )Histogram ()(_bbbb [256]int ){for _ ,_cebf :=range _dccd .Data {_bbbb [0xff]+=int (_befa [_dccd .Data [_cebf ]]);};return _bbbb ;};func ColorAtGrayscale (x ,y ,bitsPerColor ,bytesPerLine int ,data []byte ,decode []float64 )(_b .Color ,error ){switch bitsPerColor {case 1:return ColorAtGray1BPC (x ,y ,bytesPerLine ,data ,decode );
case 2:return ColorAtGray2BPC (x ,y ,bytesPerLine ,data ,decode );case 4:return ColorAtGray4BPC (x ,y ,bytesPerLine ,data ,decode );case 8:return ColorAtGray8BPC (x ,y ,bytesPerLine ,data ,decode );case 16:return ColorAtGray16BPC (x ,y ,bytesPerLine ,data ,decode );
default:return nil ,_fd .Errorf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0067\u0072\u0061\u0079\u0020\u0073c\u0061\u006c\u0065\u0020\u0062\u0069\u0074s\u0020\u0070\u0065\u0072\u0020\u0063\u006f\u006c\u006f\u0072\u0020a\u006d\u006f\u0075\u006e\u0074\u003a\u0020\u0027\u0025\u0064\u0027",bitsPerColor );
};};func NextPowerOf2 (n uint )uint {if IsPowerOf2 (n ){return n ;};return 1<<(_beaee (n )+1);};func (_dcbef *Gray8 )ColorModel ()_b .Model {return _b .GrayModel };func (_eedg *NRGBA16 )ColorAt (x ,y int )(_b .Color ,error ){return ColorAtNRGBA16 (x ,y ,_eedg .Width ,_eedg .BytesPerLine ,_eedg .Data ,_eedg .Alpha ,_eedg .Decode );
};func (_dcca *Gray4 )Bounds ()_bb .Rectangle {return _bb .Rectangle {Max :_bb .Point {X :_dcca .Width ,Y :_dcca .Height }};};func (_addd *NRGBA16 )At (x ,y int )_b .Color {_fbb ,_ :=_addd .ColorAt (x ,y );return _fbb };func (_aecc *Gray8 )SetGray (x ,y int ,g _b .Gray ){_acdd :=y *_aecc .BytesPerLine +x ;
if _acdd > len (_aecc .Data )-1{return ;};_aecc .Data [_acdd ]=g .Y ;};func (_afbc *Gray16 )GrayAt (x ,y int )_b .Gray {_fcb ,_ :=_afbc .ColorAt (x ,y );return _b .Gray {Y :uint8 (_fcb .(_b .Gray16 ).Y >>8)};};func (_fda *ImageBase )setEightFullBytes (_bdd int ,_baa uint64 )error {if _bdd +7> len (_fda .Data )-1{return _c .New ("\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_fda .Data [_bdd ]=byte ((_baa &0xff00000000000000)>>56);_fda .Data [_bdd +1]=byte ((_baa &0xff000000000000)>>48);_fda .Data [_bdd +2]=byte ((_baa &0xff0000000000)>>40);_fda .Data [_bdd +3]=byte ((_baa &0xff00000000)>>32);_fda .Data [_bdd +4]=byte ((_baa &0xff000000)>>24);
_fda .Data [_bdd +5]=byte ((_baa &0xff0000)>>16);_fda .Data [_bdd +6]=byte ((_baa &0xff00)>>8);_fda .Data [_bdd +7]=byte (_baa &0xff);return nil ;};func (_eggf *Gray8 )Bounds ()_bb .Rectangle {return _bb .Rectangle {Max :_bb .Point {X :_eggf .Width ,Y :_eggf .Height }};
};func _fgdf (_cdg ,_bc *Monochrome ,_bea []byte ,_cdfd int )(_gge error ){var (_daf ,_dcd ,_eae ,_dbab ,_fddd ,_gea ,_cac ,_abg int ;_cab ,_cea ,_fec ,_cdgc uint32 ;_gec ,_gga byte ;_dcdg uint16 ;);_debe :=make ([]byte ,4);_eeeg :=make ([]byte ,4);for _eae =0;
_eae < _cdg .Height -1;_eae ,_dbab =_eae +2,_dbab +1{_daf =_eae *_cdg .BytesPerLine ;_dcd =_dbab *_bc .BytesPerLine ;for _fddd ,_gea =0,0;_fddd < _cdfd ;_fddd ,_gea =_fddd +4,_gea +1{for _cac =0;_cac < 4;_cac ++{_abg =_daf +_fddd +_cac ;if _abg <=len (_cdg .Data )-1&&_abg < _daf +_cdg .BytesPerLine {_debe [_cac ]=_cdg .Data [_abg ];
}else {_debe [_cac ]=0x00;};_abg =_daf +_cdg .BytesPerLine +_fddd +_cac ;if _abg <=len (_cdg .Data )-1&&_abg < _daf +(2*_cdg .BytesPerLine ){_eeeg [_cac ]=_cdg .Data [_abg ];}else {_eeeg [_cac ]=0x00;};};_cab =_gg .BigEndian .Uint32 (_debe );_cea =_gg .BigEndian .Uint32 (_eeeg );
_fec =_cab &_cea ;_fec |=_fec <<1;_cdgc =_cab |_cea ;_cdgc &=_cdgc <<1;_cea =_fec &_cdgc ;_cea &=0xaaaaaaaa;_cab =_cea |(_cea <<7);_gec =byte (_cab >>24);_gga =byte ((_cab >>8)&0xff);_abg =_dcd +_gea ;if _abg +1==len (_bc .Data )-1||_abg +1>=_dcd +_bc .BytesPerLine {if _gge =_bc .setByte (_abg ,_bea [_gec ]);
_gge !=nil {return _fd .Errorf ("\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_abg );};}else {_dcdg =(uint16 (_bea [_gec ])<<8)|uint16 (_bea [_gga ]);if _gge =_bc .setTwoBytes (_abg ,_dcdg );_gge !=nil {return _fd .Errorf ("s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_abg );
};_gea ++;};};};return nil ;};type shift int ;func (_cag *RGBA32 )Set (x ,y int ,c _b .Color ){_fecb :=y *_cag .Width +x ;_gage :=3*_fecb ;if _gage +2>=len (_cag .Data ){return ;};_aebd :=_b .RGBAModel .Convert (c ).(_b .RGBA );_cag .setRGBA (_fecb ,_aebd );
};type RasterOperator int ;var _ Gray =&Gray2 {};func (_efb *Monochrome )SetGray (x ,y int ,g _b .Gray ){_bce :=y *_efb .BytesPerLine +x >>3;if _bce > len (_efb .Data )-1{return ;};g =_fgga (g ,monochromeModel (_efb .ModelThreshold ));_efb .setGray (x ,g ,_bce );
};func (_debc *Gray16 )Bounds ()_bb .Rectangle {return _bb .Rectangle {Max :_bb .Point {X :_debc .Width ,Y :_debc .Height }};};func ColorAtGray1BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_b .Gray ,error ){_dfcb :=y *bytesPerLine +x >>3;
if _dfcb >=len (data ){return _b .Gray {},_fd .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_efab :=data [_dfcb ]>>uint (7-(x &7))&1;if len (decode )==2{_efab =uint8 (LinearInterpolate (float64 (_efab ),0.0,1.0,decode [0],decode [1]))&1;};return _b .Gray {Y :_efab *255},nil ;};func _afeg (_agdd _bb .Image ,_dabdb uint8 )*_bb .Gray {_fedc :=_agdd .Bounds ();
_ecfcf :=_bb .NewGray (_fedc );var (_fdee _b .Color ;_edec _b .Gray ;);for _fabb :=0;_fabb < _fedc .Max .X ;_fabb ++{for _gbbf :=0;_gbbf < _fedc .Max .Y ;_gbbf ++{_fdee =_agdd .At (_fabb ,_gbbf );_ecfcf .Set (_fabb ,_gbbf ,_fdee );_edec =_ecfcf .GrayAt (_fabb ,_gbbf );
_ecfcf .SetGray (_fabb ,_gbbf ,_b .Gray {Y :_cgfe (_edec .Y ,_dabdb )});};};return _ecfcf ;};func _cgd (_dgb _bb .Image ,_egb Image ,_ace _bb .Rectangle ){for _gccd :=0;_gccd < _ace .Max .X ;_gccd ++{for _dfed :=0;_dfed < _ace .Max .Y ;_dfed ++{_cabd :=_dgb .At (_gccd ,_dfed );
_egb .Set (_gccd ,_dfed ,_cabd );};};};func _edgb (_ccff NRGBA ,_agga RGBA ,_dead _bb .Rectangle ){for _cabf :=0;_cabf < _dead .Max .X ;_cabf ++{for _bdeb :=0;_bdeb < _dead .Max .Y ;_bdeb ++{_ebbga :=_ccff .NRGBAAt (_cabf ,_bdeb );_agga .SetRGBA (_cabf ,_bdeb ,_bcg (_ebbga ));
};};};func ColorAtNRGBA (x ,y ,width ,bytesPerLine ,bitsPerColor int ,data ,alpha []byte ,decode []float64 )(_b .Color ,error ){switch bitsPerColor {case 4:return ColorAtNRGBA16 (x ,y ,width ,bytesPerLine ,data ,alpha ,decode );case 8:return ColorAtNRGBA32 (x ,y ,width ,data ,alpha ,decode );
case 16:return ColorAtNRGBA64 (x ,y ,width ,data ,alpha ,decode );default:return nil ,_fd .Errorf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064 \u0072\u0067\u0062\u0020b\u0069\u0074\u0073\u0020\u0070\u0065\u0072\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u0061\u006d\u006f\u0075\u006e\u0074\u003a\u0020\u0027\u0025\u0064\u0027",bitsPerColor );
};};func _beaee (_gfac uint )uint {var _addb uint ;for _gfac !=0{_gfac >>=1;_addb ++;};return _addb -1;};func _fea (_ecga int ,_febca int )error {return _fd .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",_ecga ,_febca );
};func (_eed *CMYK32 )Base ()*ImageBase {return &_eed .ImageBase };func (_eafe *RGBA32 )RGBAAt (x ,y int )_b .RGBA {_ffea ,_ :=ColorAtRGBA32 (x ,y ,_eafe .Width ,_eafe .Data ,_eafe .Alpha ,_eafe .Decode );return _ffea ;};func _abca (_afa _bb .Image )(Image ,error ){if _decg ,_eadf :=_afa .(*Gray16 );
_eadf {return _decg .Copy (),nil ;};_gfba :=_afa .Bounds ();_ggge ,_baef :=NewImage (_gfba .Max .X ,_gfba .Max .Y ,16,1,nil ,nil ,nil );if _baef !=nil {return nil ,_baef ;};_abfa (_afa ,_ggge ,_gfba );return _ggge ,nil ;};func (_ebgf *Monochrome )ColorModel ()_b .Model {return MonochromeModel (_ebgf .ModelThreshold )};
func _dgec (_egaa int ,_ade int )int {if _egaa < _ade {return _egaa ;};return _ade ;};type NRGBA16 struct{ImageBase };func (_ecag *RGBA32 )setRGBA (_aeac int ,_gecfb _b .RGBA ){_ebfd :=3*_aeac ;_ecag .Data [_ebfd ]=_gecfb .R ;_ecag .Data [_ebfd +1]=_gecfb .G ;
_ecag .Data [_ebfd +2]=_gecfb .B ;if _aeac < len (_ecag .Alpha ){_ecag .Alpha [_aeac ]=_gecfb .A ;};};func _eaggb (){for _dagcbc :=0;_dagcbc < 256;_dagcbc ++{_befa [_dagcbc ]=uint8 (_dagcbc &0x1)+(uint8 (_dagcbc >>1)&0x1)+(uint8 (_dagcbc >>2)&0x1)+(uint8 (_dagcbc >>3)&0x1)+(uint8 (_dagcbc >>4)&0x1)+(uint8 (_dagcbc >>5)&0x1)+(uint8 (_dagcbc >>6)&0x1)+(uint8 (_dagcbc >>7)&0x1);
};};func (_cfcc *Gray2 )Base ()*ImageBase {return &_cfcc .ImageBase };func _abee (_eggfc []byte ,_bfee Image )error {_dgda :=true ;for _effc :=0;_effc < len (_eggfc );_effc ++{if _eggfc [_effc ]!=0xff{_dgda =false ;break ;};};if _dgda {switch _ecaf :=_bfee .(type ){case *NRGBA32 :_ecaf .Alpha =nil ;
case *NRGBA64 :_ecaf .Alpha =nil ;default:return _fd .Errorf ("i\u006ete\u0072n\u0061l\u0020\u0065\u0072\u0072\u006fr\u0020\u002d\u0020i\u006d\u0061\u0067\u0065\u0020s\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070e\u0020\u002a\u004eRGB\u0041\u0033\u0032\u0020\u006f\u0072 \u002a\u004e\u0052\u0047\u0042\u0041\u0036\u0034\u0020\u0062\u0075\u0074 \u0069s\u003a\u0020\u0025\u0054",_bfee );
};};return nil ;};func (_ddb *Gray2 )At (x ,y int )_b .Color {_cddd ,_ :=_ddb .ColorAt (x ,y );return _cddd };func _dab (_dagc Gray ,_dfae nrgba64 ,_bff _bb .Rectangle ){for _efdd :=0;_efdd < _bff .Max .X ;_efdd ++{for _aabf :=0;_aabf < _bff .Max .Y ;_aabf ++{_aecfb :=_ddcf (_dfae .NRGBA64At (_efdd ,_aabf ));
_dagc .SetGray (_efdd ,_aabf ,_aecfb );};};};type Gray16 struct{ImageBase };func (_ggg *Monochrome )clearBit (_ecfd ,_aae int ){_ggg .Data [_ecfd ]&=^(0x80>>uint (_aae &7))};func _ffaa (_dagb Gray ,_gbfd RGBA ,_bbba _bb .Rectangle ){for _gdfc :=0;_gdfc < _bbba .Max .X ;
_gdfc ++{for _gbdfc :=0;_gbdfc < _bbba .Max .Y ;_gbdfc ++{_aeabb :=_dagb .GrayAt (_gdfc ,_gbdfc );_gbfd .SetRGBA (_gdfc ,_gbdfc ,_acb (_aeabb ));};};};var _ Gray =&Monochrome {};func (_badfa *NRGBA64 )At (x ,y int )_b .Color {_aedb ,_ :=_badfa .ColorAt (x ,y );
return _aedb };func _bade (_eada _b .Gray )_b .Gray {_bgf :=_eada .Y >>6;_bgf |=_bgf <<2;_eada .Y =_bgf |_bgf <<4;return _eada ;};func BytesPerLine (width ,bitsPerComponent ,colorComponents int )int {return ((width *bitsPerComponent )*colorComponents +7)>>3;
};func (_aeag *RGBA32 )ColorAt (x ,y int )(_b .Color ,error ){return ColorAtRGBA32 (x ,y ,_aeag .Width ,_aeag .Data ,_aeag .Alpha ,_aeag .Decode );};var _ RGBA =&RGBA32 {};func (_befca *Gray16 )ColorModel ()_b .Model {return _b .Gray16Model };func (_dcea *NRGBA16 )Base ()*ImageBase {return &_dcea .ImageBase };
func (_faf *CMYK32 )CMYKAt (x ,y int )_b .CMYK {_fcd ,_ :=ColorAtCMYK (x ,y ,_faf .Width ,_faf .Data ,_faf .Decode );return _fcd ;};func _cfbd (_gdd ,_gcc int )*Monochrome {return &Monochrome {ImageBase :NewImageBase (_gdd ,_gcc ,1,1,nil ,nil ,nil ),ModelThreshold :0x0f};
};func (_fggc *Gray4 )Histogram ()(_cddbc [256]int ){for _gaf :=0;_gaf < _fggc .Width ;_gaf ++{for _dfcc :=0;_dfcc < _fggc .Height ;_dfcc ++{_cddbc [_fggc .GrayAt (_gaf ,_dfcc ).Y ]++;};};return _cddbc ;};func (_geee *ImageBase )copy ()ImageBase {_eagb :=*_geee ;
_eagb .Data =make ([]byte ,len (_geee .Data ));copy (_eagb .Data ,_geee .Data );return _eagb ;};func (_dgfb *NRGBA32 )Copy ()Image {return &NRGBA32 {ImageBase :_dgfb .copy ()}};func (_afge *Gray4 )ColorAt (x ,y int )(_b .Color ,error ){return ColorAtGray4BPC (x ,y ,_afge .BytesPerLine ,_afge .Data ,_afge .Decode );
};func _fbc (_deaa NRGBA ,_cae CMYK ,_afga _bb .Rectangle ){for _aedf :=0;_aedf < _afga .Max .X ;_aedf ++{for _dbfa :=0;_dbfa < _afga .Max .Y ;_dbfa ++{_ccc :=_deaa .NRGBAAt (_aedf ,_dbfa );_cae .SetCMYK (_aedf ,_dbfa ,_aebc (_ccc ));};};};func (_fagc *Monochrome )getBit (_dddge ,_cdgg int )uint8 {return _fagc .Data [_dddge +(_cdgg >>3)]>>uint (7-(_cdgg &7))&1;
};func (_bafdg *Monochrome )setIndexedBit (_eaegc int ){_bafdg .Data [(_eaegc >>3)]|=0x80>>uint (_eaegc &7);};func (_acfd *ImageBase )getByte (_gagc int )(byte ,error ){if _gagc > len (_acfd .Data )-1||_gagc < 0{return 0,_fd .Errorf ("\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",_gagc );
};return _acfd .Data [_gagc ],nil ;};type RGBA32 struct{ImageBase };func ColorAtNRGBA64 (x ,y ,width int ,data ,alpha []byte ,decode []float64 )(_b .NRGBA64 ,error ){_baga :=(y *width +x )*2;_ccfa :=_baga *3;if _ccfa +5>=len (data ){return _b .NRGBA64 {},_fd .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};const _fbba =0xffff;_bgea :=uint16 (_fbba );if alpha !=nil &&len (alpha )> _baga +1{_bgea =uint16 (alpha [_baga ])<<8|uint16 (alpha [_baga +1]);};_egcg :=uint16 (data [_ccfa ])<<8|uint16 (data [_ccfa +1]);_edfg :=uint16 (data [_ccfa +2])<<8|uint16 (data [_ccfa +3]);
_dbdga :=uint16 (data [_ccfa +4])<<8|uint16 (data [_ccfa +5]);if len (decode )==6{_egcg =uint16 (uint64 (LinearInterpolate (float64 (_egcg ),0,65535,decode [0],decode [1]))&_fbba );_edfg =uint16 (uint64 (LinearInterpolate (float64 (_edfg ),0,65535,decode [2],decode [3]))&_fbba );
_dbdga =uint16 (uint64 (LinearInterpolate (float64 (_dbdga ),0,65535,decode [4],decode [5]))&_fbba );};return _b .NRGBA64 {R :_egcg ,G :_edfg ,B :_dbdga ,A :_bgea },nil ;};func ImgToGray (i _bb .Image )*_bb .Gray {if _agba ,_abag :=i .(*_bb .Gray );_abag {return _agba ;
};_acae :=i .Bounds ();_aabga :=_bb .NewGray (_acae );for _edaf :=0;_edaf < _acae .Max .X ;_edaf ++{for _acfdg :=0;_acfdg < _acae .Max .Y ;_acfdg ++{_fccg :=i .At (_edaf ,_acfdg );_aabga .Set (_edaf ,_acfdg ,_fccg );};};return _aabga ;};func (_ffc *ImageBase )Pix ()[]byte {return _ffc .Data };
func (_gcdaf *Gray2 )GrayAt (x ,y int )_b .Gray {_gedd ,_ :=ColorAtGray2BPC (x ,y ,_gcdaf .BytesPerLine ,_gcdaf .Data ,_gcdaf .Decode );return _gedd ;};func (_fcfa *CMYK32 )ColorAt (x ,y int )(_b .Color ,error ){return ColorAtCMYK (x ,y ,_fcfa .Width ,_fcfa .Data ,_fcfa .Decode );
};func (_aggb *NRGBA32 )ColorModel ()_b .Model {return _b .NRGBAModel };func (_eaeg monochromeModel )Convert (c _b .Color )_b .Color {_fgdb :=_b .GrayModel .Convert (c ).(_b .Gray );return _fgga (_fgdb ,_eaeg );};var _ Image =&NRGBA32 {};func _afgga (_fdfce nrgba64 ,_fbgg NRGBA ,_afab _bb .Rectangle ){for _ggdf :=0;
_ggdf < _afab .Max .X ;_ggdf ++{for _caafd :=0;_caafd < _afab .Max .Y ;_caafd ++{_faac :=_fdfce .NRGBA64At (_ggdf ,_caafd );_fbgg .SetNRGBA (_ggdf ,_caafd ,_faed (_faac ));};};};func _gbce (_fgf _b .NRGBA )_b .Gray {var _gabb _b .NRGBA ;if _fgf ==_gabb {return _b .Gray {Y :0xff};
};_fdde ,_dec ,_afdc ,_ :=_fgf .RGBA ();_agfbe :=(19595*_fdde +38470*_dec +7471*_afdc +1<<15)>>24;return _b .Gray {Y :uint8 (_agfbe )};};var _ Image =&Gray2 {};func (_dgad *NRGBA32 )At (x ,y int )_b .Color {_eafc ,_ :=_dgad .ColorAt (x ,y );return _eafc };
func _fbaf (_aeb _b .CMYK )_b .NRGBA {_ada ,_aac ,_bbe :=_b .CMYKToRGB (_aeb .C ,_aeb .M ,_aeb .Y ,_aeb .K );return _b .NRGBA {R :_ada ,G :_aac ,B :_bbe ,A :0xff};};func _cceeb (_befeb _bb .Image )(Image ,error ){if _fgda ,_gaac :=_befeb .(*NRGBA64 );_gaac {return _fgda .Copy (),nil ;
};_dcdbd ,_fbfa ,_eceff :=_dbfc (_befeb ,2);_dabb ,_gege :=NewImage (_dcdbd .Max .X ,_dcdbd .Max .Y ,16,3,nil ,_eceff ,nil );if _gege !=nil {return nil ,_gege ;};_fgae (_befeb ,_dabb ,_dcdbd );if len (_eceff )!=0&&!_fbfa {if _dbbef :=_abee (_eceff ,_dabb );
_dbbef !=nil {return nil ,_dbbef ;};};return _dabb ,nil ;};func (_cdefa *NRGBA64 )Set (x ,y int ,c _b .Color ){_bebc :=(y *_cdefa .Width +x )*2;_cegad :=_bebc *3;if _cegad +5>=len (_cdefa .Data ){return ;};_gcef :=_b .NRGBA64Model .Convert (c ).(_b .NRGBA64 );
_cdefa .setNRGBA64 (_cegad ,_gcef ,_bebc );};func (_bada *ImageBase )setFourBytes (_bca int ,_bfeg uint32 )error {if _bca +3> len (_bada .Data )-1{return _fd .Errorf ("\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_bca );
};_bada .Data [_bca ]=byte ((_bfeg &0xff000000)>>24);_bada .Data [_bca +1]=byte ((_bfeg &0xff0000)>>16);_bada .Data [_bca +2]=byte ((_bfeg &0xff00)>>8);_bada .Data [_bca +3]=byte (_bfeg &0xff);return nil ;};var _ Gray =&Gray4 {};type Monochrome struct{ImageBase ;
ModelThreshold uint8 ;};func ImgToBinary (i _bb .Image ,threshold uint8 )*_bb .Gray {switch _acbd :=i .(type ){case *_bb .Gray :if _cbcg (_acbd ){return _acbd ;};return _deged (_acbd ,threshold );case *_bb .Gray16 :return _bbgaa (_acbd ,threshold );default:return _afeg (_acbd ,threshold );
};};var _ Image =&Gray16 {};func (_aefac *NRGBA32 )Set (x ,y int ,c _b .Color ){_bgbe :=y *_aefac .Width +x ;_bfad :=3*_bgbe ;if _bfad +2>=len (_aefac .Data ){return ;};_fbaff :=_b .NRGBAModel .Convert (c ).(_b .NRGBA );_aefac .setRGBA (_bgbe ,_fbaff );
};func _eeed (_abgf *Monochrome ,_dcdf ,_bgeg ,_abda ,_gcdea int ,_cefd RasterOperator ,_deaac *Monochrome ,_aaea ,_cdc int )error {var (_gcgcg byte ;_ccg int ;_dca int ;_cfda ,_cdde int ;_ggad ,_ecda int ;);_fdge :=_abda >>3;_baaf :=_abda &7;if _baaf > 0{_gcgcg =_ebgg [_baaf ];
};_ccg =_deaac .BytesPerLine *_cdc +(_aaea >>3);_dca =_abgf .BytesPerLine *_bgeg +(_dcdf >>3);switch _cefd {case PixSrc :for _ggad =0;_ggad < _gcdea ;_ggad ++{_cfda =_ccg +_ggad *_deaac .BytesPerLine ;_cdde =_dca +_ggad *_abgf .BytesPerLine ;for _ecda =0;
_ecda < _fdge ;_ecda ++{_abgf .Data [_cdde ]=_deaac .Data [_cfda ];_cdde ++;_cfda ++;};if _baaf > 0{_abgf .Data [_cdde ]=_ddfd (_abgf .Data [_cdde ],_deaac .Data [_cfda ],_gcgcg );};};case PixNotSrc :for _ggad =0;_ggad < _gcdea ;_ggad ++{_cfda =_ccg +_ggad *_deaac .BytesPerLine ;
_cdde =_dca +_ggad *_abgf .BytesPerLine ;for _ecda =0;_ecda < _fdge ;_ecda ++{_abgf .Data [_cdde ]=^(_deaac .Data [_cfda ]);_cdde ++;_cfda ++;};if _baaf > 0{_abgf .Data [_cdde ]=_ddfd (_abgf .Data [_cdde ],^_deaac .Data [_cfda ],_gcgcg );};};case PixSrcOrDst :for _ggad =0;
_ggad < _gcdea ;_ggad ++{_cfda =_ccg +_ggad *_deaac .BytesPerLine ;_cdde =_dca +_ggad *_abgf .BytesPerLine ;for _ecda =0;_ecda < _fdge ;_ecda ++{_abgf .Data [_cdde ]|=_deaac .Data [_cfda ];_cdde ++;_cfda ++;};if _baaf > 0{_abgf .Data [_cdde ]=_ddfd (_abgf .Data [_cdde ],_deaac .Data [_cfda ]|_abgf .Data [_cdde ],_gcgcg );
};};case PixSrcAndDst :for _ggad =0;_ggad < _gcdea ;_ggad ++{_cfda =_ccg +_ggad *_deaac .BytesPerLine ;_cdde =_dca +_ggad *_abgf .BytesPerLine ;for _ecda =0;_ecda < _fdge ;_ecda ++{_abgf .Data [_cdde ]&=_deaac .Data [_cfda ];_cdde ++;_cfda ++;};if _baaf > 0{_abgf .Data [_cdde ]=_ddfd (_abgf .Data [_cdde ],_deaac .Data [_cfda ]&_abgf .Data [_cdde ],_gcgcg );
};};case PixSrcXorDst :for _ggad =0;_ggad < _gcdea ;_ggad ++{_cfda =_ccg +_ggad *_deaac .BytesPerLine ;_cdde =_dca +_ggad *_abgf .BytesPerLine ;for _ecda =0;_ecda < _fdge ;_ecda ++{_abgf .Data [_cdde ]^=_deaac .Data [_cfda ];_cdde ++;_cfda ++;};if _baaf > 0{_abgf .Data [_cdde ]=_ddfd (_abgf .Data [_cdde ],_deaac .Data [_cfda ]^_abgf .Data [_cdde ],_gcgcg );
};};case PixNotSrcOrDst :for _ggad =0;_ggad < _gcdea ;_ggad ++{_cfda =_ccg +_ggad *_deaac .BytesPerLine ;_cdde =_dca +_ggad *_abgf .BytesPerLine ;for _ecda =0;_ecda < _fdge ;_ecda ++{_abgf .Data [_cdde ]|=^(_deaac .Data [_cfda ]);_cdde ++;_cfda ++;};if _baaf > 0{_abgf .Data [_cdde ]=_ddfd (_abgf .Data [_cdde ],^(_deaac .Data [_cfda ])|_abgf .Data [_cdde ],_gcgcg );
};};case PixNotSrcAndDst :for _ggad =0;_ggad < _gcdea ;_ggad ++{_cfda =_ccg +_ggad *_deaac .BytesPerLine ;_cdde =_dca +_ggad *_abgf .BytesPerLine ;for _ecda =0;_ecda < _fdge ;_ecda ++{_abgf .Data [_cdde ]&=^(_deaac .Data [_cfda ]);_cdde ++;_cfda ++;};if _baaf > 0{_abgf .Data [_cdde ]=_ddfd (_abgf .Data [_cdde ],^(_deaac .Data [_cfda ])&_abgf .Data [_cdde ],_gcgcg );
};};case PixSrcOrNotDst :for _ggad =0;_ggad < _gcdea ;_ggad ++{_cfda =_ccg +_ggad *_deaac .BytesPerLine ;_cdde =_dca +_ggad *_abgf .BytesPerLine ;for _ecda =0;_ecda < _fdge ;_ecda ++{_abgf .Data [_cdde ]=_deaac .Data [_cfda ]|^(_abgf .Data [_cdde ]);_cdde ++;
_cfda ++;};if _baaf > 0{_abgf .Data [_cdde ]=_ddfd (_abgf .Data [_cdde ],_deaac .Data [_cfda ]|^(_abgf .Data [_cdde ]),_gcgcg );};};case PixSrcAndNotDst :for _ggad =0;_ggad < _gcdea ;_ggad ++{_cfda =_ccg +_ggad *_deaac .BytesPerLine ;_cdde =_dca +_ggad *_abgf .BytesPerLine ;
for _ecda =0;_ecda < _fdge ;_ecda ++{_abgf .Data [_cdde ]=_deaac .Data [_cfda ]&^(_abgf .Data [_cdde ]);_cdde ++;_cfda ++;};if _baaf > 0{_abgf .Data [_cdde ]=_ddfd (_abgf .Data [_cdde ],_deaac .Data [_cfda ]&^(_abgf .Data [_cdde ]),_gcgcg );};};case PixNotPixSrcOrDst :for _ggad =0;
_ggad < _gcdea ;_ggad ++{_cfda =_ccg +_ggad *_deaac .BytesPerLine ;_cdde =_dca +_ggad *_abgf .BytesPerLine ;for _ecda =0;_ecda < _fdge ;_ecda ++{_abgf .Data [_cdde ]=^(_deaac .Data [_cfda ]|_abgf .Data [_cdde ]);_cdde ++;_cfda ++;};if _baaf > 0{_abgf .Data [_cdde ]=_ddfd (_abgf .Data [_cdde ],^(_deaac .Data [_cfda ]|_abgf .Data [_cdde ]),_gcgcg );
};};case PixNotPixSrcAndDst :for _ggad =0;_ggad < _gcdea ;_ggad ++{_cfda =_ccg +_ggad *_deaac .BytesPerLine ;_cdde =_dca +_ggad *_abgf .BytesPerLine ;for _ecda =0;_ecda < _fdge ;_ecda ++{_abgf .Data [_cdde ]=^(_deaac .Data [_cfda ]&_abgf .Data [_cdde ]);
_cdde ++;_cfda ++;};if _baaf > 0{_abgf .Data [_cdde ]=_ddfd (_abgf .Data [_cdde ],^(_deaac .Data [_cfda ]&_abgf .Data [_cdde ]),_gcgcg );};};case PixNotPixSrcXorDst :for _ggad =0;_ggad < _gcdea ;_ggad ++{_cfda =_ccg +_ggad *_deaac .BytesPerLine ;_cdde =_dca +_ggad *_abgf .BytesPerLine ;
for _ecda =0;_ecda < _fdge ;_ecda ++{_abgf .Data [_cdde ]=^(_deaac .Data [_cfda ]^_abgf .Data [_cdde ]);_cdde ++;_cfda ++;};if _baaf > 0{_abgf .Data [_cdde ]=_ddfd (_abgf .Data [_cdde ],^(_deaac .Data [_cfda ]^_abgf .Data [_cdde ]),_gcgcg );};};default:_ce .Log .Debug ("\u0050\u0072ov\u0069\u0064\u0065d\u0020\u0069\u006e\u0076ali\u0064 r\u0061\u0073\u0074\u0065\u0072\u0020\u006fpe\u0072\u0061\u0074\u006f\u0072\u003a\u0020%\u0076",_cefd );
return _c .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");};return nil ;};func IsGrayImgBlackAndWhite (i *_bb .Gray )bool {return _cbcg (i )};func (_dgeg *NRGBA64 )setNRGBA64 (_cecd int ,_fgcgg _b .NRGBA64 ,_bafeg int ){_dgeg .Data [_cecd ]=uint8 (_fgcgg .R >>8);
_dgeg .Data [_cecd +1]=uint8 (_fgcgg .R &0xff);_dgeg .Data [_cecd +2]=uint8 (_fgcgg .G >>8);_dgeg .Data [_cecd +3]=uint8 (_fgcgg .G &0xff);_dgeg .Data [_cecd +4]=uint8 (_fgcgg .B >>8);_dgeg .Data [_cecd +5]=uint8 (_fgcgg .B &0xff);if _bafeg +1< len (_dgeg .Alpha ){_dgeg .Alpha [_bafeg ]=uint8 (_fgcgg .A >>8);
_dgeg .Alpha [_bafeg +1]=uint8 (_fgcgg .A &0xff);};};func _cfbde (_ebe _b .RGBA )_b .Gray {_fef :=(19595*uint32 (_ebe .R )+38470*uint32 (_ebe .G )+7471*uint32 (_ebe .B )+1<<7)>>16;return _b .Gray {Y :uint8 (_fef )};};func (_aea *Gray2 )ColorAt (x ,y int )(_b .Color ,error ){return ColorAtGray2BPC (x ,y ,_aea .BytesPerLine ,_aea .Data ,_aea .Decode );
};func _dccaa (_fbaeb _b .NRGBA )_b .NRGBA {_fbaeb .R =_fbaeb .R >>4|(_fbaeb .R >>4)<<4;_fbaeb .G =_fbaeb .G >>4|(_fbaeb .G >>4)<<4;_fbaeb .B =_fbaeb .B >>4|(_fbaeb .B >>4)<<4;return _fbaeb ;};func _aceag (_ggddf uint8 )bool {if _ggddf ==0||_ggddf ==255{return true ;
};return false ;};func (_fgef *Monochrome )GrayAt (x ,y int )_b .Gray {_geea ,_ :=ColorAtGray1BPC (x ,y ,_fgef .BytesPerLine ,_fgef .Data ,_fgef .Decode );return _geea ;};func (_adg *Gray4 )setGray (_deae int ,_geb int ,_gdbae _b .Gray ){_fged :=_geb *_adg .BytesPerLine ;
_dbca :=_fged +(_deae >>1);if _dbca >=len (_adg .Data ){return ;};_dbaf :=_gdbae .Y >>4;_adg .Data [_dbca ]=(_adg .Data [_dbca ]&(^(0xf0>>uint (4*(_deae &1)))))|(_dbaf <<uint (4-4*(_deae &1)));};func (_aebce *Gray4 )Validate ()error {if len (_aebce .Data )!=_aebce .Height *_aebce .BytesPerLine {return ErrInvalidImage ;
};return nil ;};func (_caag *Monochrome )setBit (_dffg ,_gdcc int ){_caag .Data [_dffg +(_gdcc >>3)]|=0x80>>uint (_gdcc &7);};func (_eff *Monochrome )ScaleLow (width ,height int )(*Monochrome ,error ){if width < 0||height < 0{return nil ,_c .New ("\u0070\u0072\u006f\u0076\u0069\u0064e\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0077\u0069\u0064t\u0068\u0020\u0061\u006e\u0064\u0020\u0068e\u0069\u0067\u0068\u0074");
};_gcfe :=_cfbd (width ,height );_gcec :=make ([]int ,height );_dcba :=make ([]int ,width );_fdgab :=float64 (_eff .Width )/float64 (width );_daad :=float64 (_eff .Height )/float64 (height );for _bebf :=0;_bebf < height ;_bebf ++{_gcec [_bebf ]=int (_g .Min (_daad *float64 (_bebf )+0.5,float64 (_eff .Height -1)));
};for _bda :=0;_bda < width ;_bda ++{_dcba [_bda ]=int (_g .Min (_fdgab *float64 (_bda )+0.5,float64 (_eff .Width -1)));};_gfbg :=-1;_aega :=byte (0);for _abfb :=0;_abfb < height ;_abfb ++{_cad :=_gcec [_abfb ]*_eff .BytesPerLine ;_dbfab :=_abfb *_gcfe .BytesPerLine ;
for _aag :=0;_aag < width ;_aag ++{_deda :=_dcba [_aag ];if _deda !=_gfbg {_aega =_eff .getBit (_cad ,_deda );if _aega !=0{_gcfe .setBit (_dbfab ,_aag );};_gfbg =_deda ;}else {if _aega !=0{_gcfe .setBit (_dbfab ,_aag );};};};};return _gcfe ,nil ;};func (_gfbd *Gray8 )Copy ()Image {return &Gray8 {ImageBase :_gfbd .copy ()}};
var _ Image =&Gray8 {};func _ceg (_agfd _b .RGBA )_b .CMYK {_cbe ,_abc ,_faea ,_feff :=_b .RGBToCMYK (_agfd .R ,_agfd .G ,_agfd .B );return _b .CMYK {C :_cbe ,M :_abc ,Y :_faea ,K :_feff };};func _bede (_feg ,_dde int ,_bgd []byte )*Monochrome {_cfgd :=_cfbd (_feg ,_dde );
_cfgd .Data =_bgd ;return _cfgd ;};func (_aecfc *NRGBA64 )SetNRGBA64 (x ,y int ,c _b .NRGBA64 ){_gbbg :=(y *_aecfc .Width +x )*2;_efec :=_gbbg *3;if _efec +5>=len (_aecfc .Data ){return ;};_aecfc .setNRGBA64 (_efec ,c ,_gbbg );};func _caff (_deeb ,_cefg Gray ,_aeee _bb .Rectangle ){for _deg :=0;
_deg < _aeee .Max .X ;_deg ++{for _bfc :=0;_bfc < _aeee .Max .Y ;_bfc ++{_cefg .SetGray (_deg ,_bfc ,_deeb .GrayAt (_deg ,_bfc ));};};};func _fcaee (_cada _bb .Image )(Image ,error ){if _cddee ,_gefaa :=_cada .(*NRGBA16 );_gefaa {return _cddee .Copy (),nil ;
};_fddc :=_cada .Bounds ();_bdfb ,_egad :=NewImage (_fddc .Max .X ,_fddc .Max .Y ,4,3,nil ,nil ,nil );if _egad !=nil {return nil ,_egad ;};_geed (_cada ,_bdfb ,_fddc );return _bdfb ,nil ;};type Gray8 struct{ImageBase };func ScaleAlphaToMonochrome (data []byte ,width ,height int )([]byte ,error ){_d :=BytesPerLine (width ,8,1);
if len (data )< _d *height {return nil ,nil ;};_gda :=&Gray8 {NewImageBase (width ,height ,8,1,data ,nil ,nil )};_ag ,_e :=MonochromeConverter .Convert (_gda );if _e !=nil {return nil ,_e ;};return _ag .Base ().Data ,nil ;};func (_dcdgg *ImageBase )setEightBytes (_dbdee int ,_gcgc uint64 )error {_abab :=_dcdgg .BytesPerLine -(_dbdee %_dcdgg .BytesPerLine );
if _dcdgg .BytesPerLine !=_dcdgg .Width >>3{_abab --;};if _abab >=8{return _dcdgg .setEightFullBytes (_dbdee ,_gcgc );};return _dcdgg .setEightPartlyBytes (_dbdee ,_abab ,_gcgc );};func (_bdbe *ImageBase )setTwoBytes (_gfcg int ,_fbg uint16 )error {if _gfcg +1> len (_bdbe .Data )-1{return _c .New ("\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_bdbe .Data [_gfcg ]=byte ((_fbg &0xff00)>>8);_bdbe .Data [_gfcg +1]=byte (_fbg &0xff);return nil ;};type CMYK interface{CMYKAt (_abb ,_gcg int )_b .CMYK ;SetCMYK (_fege ,_cc int ,_bfbf _b .CMYK );};func _facba (_agbb RGBA ,_def Gray ,_cge _bb .Rectangle ){for _fafa :=0;
_fafa < _cge .Max .X ;_fafa ++{for _gfaeb :=0;_gfaeb < _cge .Max .Y ;_gfaeb ++{_dbbe :=_cfbde (_agbb .RGBAAt (_fafa ,_gfaeb ));_def .SetGray (_fafa ,_gfaeb ,_dbbe );};};};var _ _bb .Image =&Gray4 {};func _fbbd (_cgbb ,_fdcdf NRGBA ,_caea _bb .Rectangle ){for _aacb :=0;
_aacb < _caea .Max .X ;_aacb ++{for _edfe :=0;_edfe < _caea .Max .Y ;_edfe ++{_fdcdf .SetNRGBA (_aacb ,_edfe ,_cgbb .NRGBAAt (_aacb ,_edfe ));};};};func (_afgab *Monochrome )ExpandBinary (factor int )(*Monochrome ,error ){if !IsPowerOf2 (uint (factor )){return nil ,_fd .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0065\u0078\u0070\u0061\u006e\u0064\u0020b\u0069n\u0061\u0072\u0079\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020\u0025\u0064",factor );
};return _ae (_afgab ,factor );};const (PixSrc RasterOperator =0xc;PixDst RasterOperator =0xa;PixNotSrc RasterOperator =0x3;PixNotDst RasterOperator =0x5;PixClr RasterOperator =0x0;PixSet RasterOperator =0xf;PixSrcOrDst RasterOperator =0xe;PixSrcAndDst RasterOperator =0x8;
PixSrcXorDst RasterOperator =0x6;PixNotSrcOrDst RasterOperator =0xb;PixNotSrcAndDst RasterOperator =0x2;PixSrcOrNotDst RasterOperator =0xd;PixSrcAndNotDst RasterOperator =0x4;PixNotPixSrcOrDst RasterOperator =0x1;PixNotPixSrcAndDst RasterOperator =0x7;
PixNotPixSrcXorDst RasterOperator =0x9;PixPaint =PixSrcOrDst ;PixSubtract =PixNotSrcAndDst ;PixMask =PixSrcAndDst ;);func _acdg (_bbdgb RGBA ,_afdf NRGBA ,_fbcb _bb .Rectangle ){for _eacg :=0;_eacg < _fbcb .Max .X ;_eacg ++{for _edbc :=0;_edbc < _fbcb .Max .Y ;
_edbc ++{_abfag :=_bbdgb .RGBAAt (_eacg ,_edbc );_afdf .SetNRGBA (_eacg ,_edbc ,_beee (_abfag ));};};};func _fbag (_efa _b .Gray )_b .NRGBA {return _b .NRGBA {R :_efa .Y ,G :_efa .Y ,B :_efa .Y ,A :0xff}};type ColorConverter interface{Convert (_efdf _bb .Image )(Image ,error );
};func (_aab *CMYK32 )Bounds ()_bb .Rectangle {return _bb .Rectangle {Max :_bb .Point {X :_aab .Width ,Y :_aab .Height }};};func _cbd (_afd ,_fa *Monochrome )(_baf error ){_aef :=_fa .BytesPerLine ;_afdd :=_afd .BytesPerLine ;var (_aa byte ;_ee uint16 ;
_fdd ,_ad ,_ff ,_cec ,_ffa int ;);for _ff =0;_ff < _fa .Height ;_ff ++{_fdd =_ff *_aef ;_ad =2*_ff *_afdd ;for _cec =0;_cec < _aef ;_cec ++{_aa =_fa .Data [_fdd +_cec ];_ee =_dcbe [_aa ];_ffa =_ad +_cec *2;if _afd .BytesPerLine !=_fa .BytesPerLine *2&&(_cec +1)*2> _afd .BytesPerLine {_baf =_afd .setByte (_ffa ,byte (_ee >>8));
}else {_baf =_afd .setTwoBytes (_ffa ,_ee );};if _baf !=nil {return _baf ;};};for _cec =0;_cec < _afdd ;_cec ++{_ffa =_ad +_afdd +_cec ;_aa =_afd .Data [_ad +_cec ];if _baf =_afd .setByte (_ffa ,_aa );_baf !=nil {return _baf ;};};};return nil ;};func (_edc *Gray16 )Histogram ()(_eca [256]int ){for _fdfc :=0;
_fdfc < _edc .Width ;_fdfc ++{for _cadd :=0;_cadd < _edc .Height ;_cadd ++{_eca [_edc .GrayAt (_fdfc ,_cadd ).Y ]++;};};return _eca ;};func (_cdbf *RGBA32 )Copy ()Image {return &RGBA32 {ImageBase :_cdbf .copy ()}};var _ _bb .Image =&Gray8 {};func _gfdc (_dddf _bb .Image )(Image ,error ){if _cdd ,_aff :=_dddf .(*CMYK32 );
_aff {return _cdd .Copy (),nil ;};_aedg :=_dddf .Bounds ();_ddce ,_cbdc :=NewImage (_aedg .Max .X ,_aedg .Max .Y ,8,4,nil ,nil ,nil );if _cbdc !=nil {return nil ,_cbdc ;};switch _dcfg :=_dddf .(type ){case CMYK :_dgc (_dcfg ,_ddce .(CMYK ),_aedg );case Gray :_bdb (_dcfg ,_ddce .(CMYK ),_aedg );
case NRGBA :_fbc (_dcfg ,_ddce .(CMYK ),_aedg );case RGBA :_ggca (_dcfg ,_ddce .(CMYK ),_aedg );default:_cgd (_dddf ,_ddce ,_aedg );};return _ddce ,nil ;};func (_adaa *ImageBase )HasAlpha ()bool {if _adaa .Alpha ==nil {return false ;};for _afgf :=range _adaa .Alpha {if _adaa .Alpha [_afgf ]!=0xff{return true ;
};};return false ;};type SMasker interface{HasAlpha ()bool ;GetAlpha ()[]byte ;MakeAlpha ();};func (_fcdd *CMYK32 )SetCMYK (x ,y int ,c _b .CMYK ){_ffdac :=4*(y *_fcdd .Width +x );if _ffdac +3>=len (_fcdd .Data ){return ;};_fcdd .Data [_ffdac ]=c .C ;_fcdd .Data [_ffdac +1]=c .M ;
_fcdd .Data [_ffdac +2]=c .Y ;_fcdd .Data [_ffdac +3]=c .K ;};func _caa (_cedf _b .CMYK )_b .Gray {_cefc ,_babc ,_eagg :=_b .CMYKToRGB (_cedf .C ,_cedf .M ,_cedf .Y ,_cedf .K );_aefa :=(19595*uint32 (_cefc )+38470*uint32 (_babc )+7471*uint32 (_eagg )+1<<7)>>16;
return _b .Gray {Y :uint8 (_aefa )};};func _de (_aca ,_df *Monochrome )(_dg error ){_eg :=_df .BytesPerLine ;_cef :=_aca .BytesPerLine ;var _aed ,_bbb ,_ege ,_dga ,_fb int ;for _ege =0;_ege < _df .Height ;_ege ++{_aed =_ege *_eg ;_bbb =8*_ege *_cef ;for _dga =0;
_dga < _eg ;_dga ++{if _dg =_aca .setEightBytes (_bbb +_dga *8,_gcb [_df .Data [_aed +_dga ]]);_dg !=nil {return _dg ;};};for _fb =1;_fb < 8;_fb ++{for _dga =0;_dga < _cef ;_dga ++{if _dg =_aca .setByte (_bbb +_fb *_cef +_dga ,_aca .Data [_bbb +_dga ]);
_dg !=nil {return _dg ;};};};};return nil ;};func (_gfcf *NRGBA16 )SetNRGBA (x ,y int ,c _b .NRGBA ){_bgdad :=y *_gfcf .BytesPerLine +x *3/2;if _bgdad +1>=len (_gfcf .Data ){return ;};c =_dccaa (c );_gfcf .setNRGBA (x ,y ,_bgdad ,c );};func (_dbda *NRGBA16 )Copy ()Image {return &NRGBA16 {ImageBase :_dbda .copy ()}};
func _acfda (_bga *Monochrome ,_fgebe ,_ccf ,_dcee ,_gdgg int ,_gdag RasterOperator ,_bbge *Monochrome ,_gfbgf ,_cgec int )error {if _bga ==nil {return _c .New ("\u006e\u0069\u006c\u0020\u0027\u0064\u0065\u0073\u0074\u0027\u0020\u0042i\u0074\u006d\u0061\u0070");
};if _gdag ==PixDst {return nil ;};switch _gdag {case PixClr ,PixSet ,PixNotDst :_facbg (_bga ,_fgebe ,_ccf ,_dcee ,_gdgg ,_gdag );return nil ;};if _bbge ==nil {_ce .Log .Debug ("\u0052a\u0073\u0074e\u0072\u004f\u0070\u0065r\u0061\u0074\u0069o\u006e\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020bi\u0074\u006d\u0061p\u0020\u0069s\u0020\u006e\u006f\u0074\u0020\u0064e\u0066\u0069n\u0065\u0064");
return _c .New ("\u006e\u0069l\u0020\u0027\u0073r\u0063\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _cccbg :=_ccbc (_bga ,_fgebe ,_ccf ,_dcee ,_gdgg ,_gdag ,_bbge ,_gfbgf ,_cgec );_cccbg !=nil {return _cccbg ;};return nil ;};func (_dbdec *Monochrome )getBitAt (_dae ,_gdb int )bool {_abfe :=_gdb *_dbdec .BytesPerLine +(_dae >>3);
_cdfdf :=_dae &0x07;_fdgfb :=uint (7-_cdfdf );if _abfe > len (_dbdec .Data )-1{return false ;};if (_dbdec .Data [_abfe ]>>_fdgfb )&0x01>=1{return true ;};return false ;};func (_abec *RGBA32 )SetRGBA (x ,y int ,c _b .RGBA ){_eedd :=y *_abec .Width +x ;_daec :=3*_eedd ;
if _daec +2>=len (_abec .Data ){return ;};_abec .setRGBA (_eedd ,c );};func (_bffb *Gray16 )SetGray (x ,y int ,g _b .Gray ){_ecef :=(y *_bffb .BytesPerLine /2+x )*2;if _ecef +1>=len (_bffb .Data ){return ;};_bffb .Data [_ecef ]=g .Y ;_bffb .Data [_ecef +1]=g .Y ;
};func (_cdab *Monochrome )Scale (scale float64 )(*Monochrome ,error ){var _agcf bool ;_gcca :=scale ;if scale < 1{_gcca =1/scale ;_agcf =true ;};_dbbb :=NextPowerOf2 (uint (_gcca ));if InDelta (float64 (_dbbb ),_gcca ,0.001){if _agcf {return _cdab .ReduceBinary (_gcca );
};return _cdab .ExpandBinary (int (_dbbb ));};_gaba :=int (_g .RoundToEven (float64 (_cdab .Width )*scale ));_efac :=int (_g .RoundToEven (float64 (_cdab .Height )*scale ));return _cdab .ScaleLow (_gaba ,_efac );};var _ _bb .Image =&NRGBA32 {};func _gfd (_bee ,_dfe *Monochrome ,_fdga []byte ,_agb int )(_fad error ){var (_afe ,_bae ,_fed ,_gba ,_egae ,_dcef ,_abdc ,_ggc int ;
_gfgc ,_egeg uint32 ;_ga ,_cgbf byte ;_bcd uint16 ;);_gecf :=make ([]byte ,4);_cdfc :=make ([]byte ,4);for _fed =0;_fed < _bee .Height -1;_fed ,_gba =_fed +2,_gba +1{_afe =_fed *_bee .BytesPerLine ;_bae =_gba *_dfe .BytesPerLine ;for _egae ,_dcef =0,0;
_egae < _agb ;_egae ,_dcef =_egae +4,_dcef +1{for _abdc =0;_abdc < 4;_abdc ++{_ggc =_afe +_egae +_abdc ;if _ggc <=len (_bee .Data )-1&&_ggc < _afe +_bee .BytesPerLine {_gecf [_abdc ]=_bee .Data [_ggc ];}else {_gecf [_abdc ]=0x00;};_ggc =_afe +_bee .BytesPerLine +_egae +_abdc ;
if _ggc <=len (_bee .Data )-1&&_ggc < _afe +(2*_bee .BytesPerLine ){_cdfc [_abdc ]=_bee .Data [_ggc ];}else {_cdfc [_abdc ]=0x00;};};_gfgc =_gg .BigEndian .Uint32 (_gecf );_egeg =_gg .BigEndian .Uint32 (_cdfc );_egeg &=_gfgc ;_egeg &=_egeg <<1;_egeg &=0xaaaaaaaa;
_gfgc =_egeg |(_egeg <<7);_ga =byte (_gfgc >>24);_cgbf =byte ((_gfgc >>8)&0xff);_ggc =_bae +_dcef ;if _ggc +1==len (_dfe .Data )-1||_ggc +1>=_bae +_dfe .BytesPerLine {_dfe .Data [_ggc ]=_fdga [_ga ];if _fad =_dfe .setByte (_ggc ,_fdga [_ga ]);_fad !=nil {return _fd .Errorf ("\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_ggc );
};}else {_bcd =(uint16 (_fdga [_ga ])<<8)|uint16 (_fdga [_cgbf ]);if _fad =_dfe .setTwoBytes (_ggc ,_bcd );_fad !=nil {return _fd .Errorf ("s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_ggc );
};_dcef ++;};};};return nil ;};func (_aced *RGBA32 )Bounds ()_bb .Rectangle {return _bb .Rectangle {Max :_bb .Point {X :_aced .Width ,Y :_aced .Height }};};func IsPowerOf2 (n uint )bool {return n > 0&&(n &(n -1))==0};func (_ebc *NRGBA16 )setNRGBA (_dfeg ,_bbga ,_afgc int ,_cecg _b .NRGBA ){if _dfeg *3%2==0{_ebc .Data [_afgc ]=(_cecg .R >>4)<<4|(_cecg .G >>4);
_ebc .Data [_afgc +1]=(_cecg .B >>4)<<4|(_ebc .Data [_afgc +1]&0xf);}else {_ebc .Data [_afgc ]=(_ebc .Data [_afgc ]&0xf0)|(_cecg .R >>4);_ebc .Data [_afgc +1]=(_cecg .G >>4)<<4|(_cecg .B >>4);};if _ebc .Alpha !=nil {_egab :=_bbga *BytesPerLine (_ebc .Width ,4,1);
if _egab < len (_ebc .Alpha ){if _dfeg %2==0{_ebc .Alpha [_egab ]=(_cecg .A >>uint (4))<<uint (4)|(_ebc .Alpha [_afgc ]&0xf);}else {_ebc .Alpha [_egab ]=(_ebc .Alpha [_egab ]&0xf0)|(_cecg .A >>uint (4));};};};};func _cbcg (_facbb *_bb .Gray )bool {for _edefb :=0;
_edefb < len (_facbb .Pix );_edefb ++{if !_aceag (_facbb .Pix [_edefb ]){return false ;};};return true ;};func (_adgd *Gray16 )Base ()*ImageBase {return &_adgd .ImageBase };func ColorAtCMYK (x ,y ,width int ,data []byte ,decode []float64 )(_b .CMYK ,error ){_gecfc :=4*(y *width +x );
if _gecfc +3>=len (data ){return _b .CMYK {},_fd .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};C :=data [_gecfc ]&0xff;M :=data [_gecfc +1]&0xff;Y :=data [_gecfc +2]&0xff;K :=data [_gecfc +3]&0xff;if len (decode )==8{C =uint8 (uint32 (LinearInterpolate (float64 (C ),0,255,decode [0],decode [1]))&0xff);M =uint8 (uint32 (LinearInterpolate (float64 (M ),0,255,decode [2],decode [3]))&0xff);
Y =uint8 (uint32 (LinearInterpolate (float64 (Y ),0,255,decode [4],decode [5]))&0xff);K =uint8 (uint32 (LinearInterpolate (float64 (K ),0,255,decode [6],decode [7]))&0xff);};return _b .CMYK {C :C ,M :M ,Y :Y ,K :K },nil ;};func (_ffgd *Monochrome )RasterOperation (dx ,dy ,dw ,dh int ,op RasterOperator ,src *Monochrome ,sx ,sy int )error {return _acfda (_ffgd ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );
};func (_beef *Gray2 )Bounds ()_bb .Rectangle {return _bb .Rectangle {Max :_bb .Point {X :_beef .Width ,Y :_beef .Height }};};func _aedgc (_cafe ,_eecb RGBA ,_bgcc _bb .Rectangle ){for _dedd :=0;_dedd < _bgcc .Max .X ;_dedd ++{for _ecde :=0;_ecde < _bgcc .Max .Y ;
_ecde ++{_eecb .SetRGBA (_dedd ,_ecde ,_cafe .RGBAAt (_dedd ,_ecde ));};};};func (_gagf *Monochrome )Base ()*ImageBase {return &_gagf .ImageBase };func (_fgafc *Gray16 )Set (x ,y int ,c _b .Color ){_ebf :=(y *_fgafc .BytesPerLine /2+x )*2;if _ebf +1>=len (_fgafc .Data ){return ;
};_aeab :=_b .Gray16Model .Convert (c ).(_b .Gray16 );_fgafc .Data [_ebf ],_fgafc .Data [_ebf +1]=uint8 (_aeab .Y >>8),uint8 (_aeab .Y &0xff);};func (_eaee *Gray4 )GrayAt (x ,y int )_b .Gray {_gfded ,_ :=ColorAtGray4BPC (x ,y ,_eaee .BytesPerLine ,_eaee .Data ,_eaee .Decode );
return _gfded ;};func _dbfc (_eegc _bb .Image ,_ffcg int )(_bb .Rectangle ,bool ,[]byte ){_bbdd :=_eegc .Bounds ();var (_dedc bool ;_gcba []byte ;);switch _fgab :=_eegc .(type ){case SMasker :_dedc =_fgab .HasAlpha ();case NRGBA ,RGBA ,*_bb .RGBA64 ,nrgba64 ,*_bb .NYCbCrA :_gcba =make ([]byte ,_bbdd .Max .X *_bbdd .Max .Y *_ffcg );
case *_bb .Paletted :if !_fgab .Opaque (){_gcba =make ([]byte ,_bbdd .Max .X *_bbdd .Max .Y *_ffcg );};};return _bbdd ,_dedc ,_gcba ;};func _gecfa (_eebf _b .NRGBA64 )_b .RGBA {_cdee ,_cddb ,_dbd ,_egac :=_eebf .RGBA ();return _b .RGBA {R :uint8 (_cdee >>8),G :uint8 (_cddb >>8),B :uint8 (_dbd >>8),A :uint8 (_egac >>8)};
};func _fdff (_dbb _b .NYCbCrA )_b .RGBA {_bac ,_ffe ,_dfb ,_cfgdd :=_ggbd (_dbb ).RGBA ();return _b .RGBA {R :uint8 (_bac >>8),G :uint8 (_ffe >>8),B :uint8 (_dfb >>8),A :uint8 (_cfgdd >>8)};};func (_fgaf *Monochrome )setGrayBit (_fedb ,_dgeb int ){_fgaf .Data [_fedb ]|=0x80>>uint (_dgeb &7)};
func _bcg (_cabb _b .NRGBA )_b .RGBA {_bcf ,_ecb ,_aabe ,_cgaa :=_cabb .RGBA ();return _b .RGBA {R :uint8 (_bcf >>8),G :uint8 (_ecb >>8),B :uint8 (_aabe >>8),A :uint8 (_cgaa >>8)};};var _ Image =&Monochrome {};func _gadc (_aeaa *Monochrome ,_cdbcf ,_bgg int ,_ccfe ,_dbfabb int ,_gedae RasterOperator ){var (_beab bool ;
_dagg bool ;_cdgb int ;_baec int ;_bfgbf int ;_fgbg int ;_ecac bool ;_cdggd byte ;);_ddg :=8-(_cdbcf &7);_bbgf :=_caef [_ddg ];_bcdb :=_aeaa .BytesPerLine *_bgg +(_cdbcf >>3);if _ccfe < _ddg {_beab =true ;_bbgf &=_ebgg [8-_ddg +_ccfe ];};if !_beab {_cdgb =(_ccfe -_ddg )>>3;
if _cdgb !=0{_dagg =true ;_baec =_bcdb +1;};};_bfgbf =(_cdbcf +_ccfe )&7;if !(_beab ||_bfgbf ==0){_ecac =true ;_cdggd =_ebgg [_bfgbf ];_fgbg =_bcdb +1+_cdgb ;};var _dffe ,_eaca int ;switch _gedae {case PixClr :for _dffe =0;_dffe < _dbfabb ;_dffe ++{_aeaa .Data [_bcdb ]=_ddfd (_aeaa .Data [_bcdb ],0x0,_bbgf );
_bcdb +=_aeaa .BytesPerLine ;};if _dagg {for _dffe =0;_dffe < _dbfabb ;_dffe ++{for _eaca =0;_eaca < _cdgb ;_eaca ++{_aeaa .Data [_baec +_eaca ]=0x0;};_baec +=_aeaa .BytesPerLine ;};};if _ecac {for _dffe =0;_dffe < _dbfabb ;_dffe ++{_aeaa .Data [_fgbg ]=_ddfd (_aeaa .Data [_fgbg ],0x0,_cdggd );
_fgbg +=_aeaa .BytesPerLine ;};};case PixSet :for _dffe =0;_dffe < _dbfabb ;_dffe ++{_aeaa .Data [_bcdb ]=_ddfd (_aeaa .Data [_bcdb ],0xff,_bbgf );_bcdb +=_aeaa .BytesPerLine ;};if _dagg {for _dffe =0;_dffe < _dbfabb ;_dffe ++{for _eaca =0;_eaca < _cdgb ;
_eaca ++{_aeaa .Data [_baec +_eaca ]=0xff;};_baec +=_aeaa .BytesPerLine ;};};if _ecac {for _dffe =0;_dffe < _dbfabb ;_dffe ++{_aeaa .Data [_fgbg ]=_ddfd (_aeaa .Data [_fgbg ],0xff,_cdggd );_fgbg +=_aeaa .BytesPerLine ;};};case PixNotDst :for _dffe =0;_dffe < _dbfabb ;
_dffe ++{_aeaa .Data [_bcdb ]=_ddfd (_aeaa .Data [_bcdb ],^_aeaa .Data [_bcdb ],_bbgf );_bcdb +=_aeaa .BytesPerLine ;};if _dagg {for _dffe =0;_dffe < _dbfabb ;_dffe ++{for _eaca =0;_eaca < _cdgb ;_eaca ++{_aeaa .Data [_baec +_eaca ]=^(_aeaa .Data [_baec +_eaca ]);
};_baec +=_aeaa .BytesPerLine ;};};if _ecac {for _dffe =0;_dffe < _dbfabb ;_dffe ++{_aeaa .Data [_fgbg ]=_ddfd (_aeaa .Data [_fgbg ],^_aeaa .Data [_fgbg ],_cdggd );_fgbg +=_aeaa .BytesPerLine ;};};};};func (_cfgb *Monochrome )InverseData ()error {return _cfgb .RasterOperation (0,0,_cfgb .Width ,_cfgb .Height ,PixNotDst ,nil ,0,0);
};func (_efc *Gray8 )Histogram ()(_fbcf [256]int ){for _aaf :=0;_aaf < len (_efc .Data );_aaf ++{_fbcf [_efc .Data [_aaf ]]++;};return _fbcf ;};func MonochromeModel (threshold uint8 )_b .Model {return monochromeModel (threshold )};func (_acea *Gray4 )ColorModel ()_b .Model {return Gray4Model };
func (_aacd *Gray16 )Copy ()Image {return &Gray16 {ImageBase :_aacd .copy ()}};func (_eabg *Monochrome )Bounds ()_bb .Rectangle {return _bb .Rectangle {Max :_bb .Point {X :_eabg .Width ,Y :_eabg .Height }};};func _beee (_abbb _b .RGBA )_b .NRGBA {switch _abbb .A {case 0xff:return _b .NRGBA {R :_abbb .R ,G :_abbb .G ,B :_abbb .B ,A :0xff};
case 0x00:return _b .NRGBA {};default:_egbe ,_ffg ,_gae ,_cccb :=_abbb .RGBA ();_egbe =(_egbe *0xffff)/_cccb ;_ffg =(_ffg *0xffff)/_cccb ;_gae =(_gae *0xffff)/_cccb ;return _b .NRGBA {R :uint8 (_egbe >>8),G :uint8 (_ffg >>8),B :uint8 (_gae >>8),A :uint8 (_cccb >>8)};
};};var _ _bb .Image =&Gray2 {};func _fafaa (_dbce _bb .Image )(Image ,error ){if _bdcg ,_ageb :=_dbce .(*RGBA32 );_ageb {return _bdcg .Copy (),nil ;};_ecdf ,_ddgb ,_adcad :=_dbfc (_dbce ,1);_dgbd :=&RGBA32 {ImageBase :NewImageBase (_ecdf .Max .X ,_ecdf .Max .Y ,8,3,nil ,_adcad ,nil )};
_gfbgg (_dbce ,_dgbd ,_ecdf );if len (_adcad )!=0&&!_ddgb {if _degc :=_abee (_adcad ,_dgbd );_degc !=nil {return nil ,_degc ;};};return _dgbd ,nil ;};func (_bcbf *NRGBA64 )Validate ()error {if len (_bcbf .Data )!=3*2*_bcbf .Width *_bcbf .Height {return _c .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};func (_gbab *Gray8 )At (x ,y int )_b .Color {_bedc ,_ :=_gbab .ColorAt (x ,y );return _bedc };func _ddcf (_fbf _b .NRGBA64 )_b .Gray {var _gag _b .NRGBA64 ;if _fbf ==_gag {return _b .Gray {Y :0xff};};_bdg ,_gfb ,_bcb ,_ :=_fbf .RGBA ();
_gfdb :=(19595*_bdg +38470*_gfb +7471*_bcb +1<<15)>>24;return _b .Gray {Y :uint8 (_gfdb )};};