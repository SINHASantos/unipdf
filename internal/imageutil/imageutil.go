//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package imageutil ;import (_bc "encoding/binary";_f "errors";_cf "fmt";_e "github.com/unidoc/unipdf/v3/common";_ff "github.com/unidoc/unipdf/v3/internal/bitwise";_be "image";_cg "image/color";_cgf "image/draw";_b "math";);func RasterOperation (dest *Monochrome ,dx ,dy ,dw ,dh int ,op RasterOperator ,src *Monochrome ,sx ,sy int )error {return _bfce (dest ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );
};func (_efba *Gray8 )At (x ,y int )_cg .Color {_daga ,_ :=_efba .ColorAt (x ,y );return _daga };func (_fdaf *RGBA32 )At (x ,y int )_cg .Color {_cffgf ,_ :=_fdaf .ColorAt (x ,y );return _cffgf };func _dgdc (_adeb _cg .Gray )_cg .Gray {_bge :=_adeb .Y >>6;
_bge |=_bge <<2;_adeb .Y =_bge |_bge <<4;return _adeb ;};func _bddge (_dgac RGBA ,_gcad Gray ,_cbegc _be .Rectangle ){for _dffb :=0;_dffb < _cbegc .Max .X ;_dffb ++{for _fcbg :=0;_fcbg < _cbegc .Max .Y ;_fcbg ++{_befb :=_gbd (_dgac .RGBAAt (_dffb ,_fcbg ));
_gcad .SetGray (_dffb ,_fcbg ,_befb );};};};func ColorAtNRGBA32 (x ,y ,width int ,data ,alpha []byte ,decode []float64 )(_cg .NRGBA ,error ){_bebc :=y *width +x ;_afff :=3*_bebc ;if _afff +2>=len (data ){return _cg .NRGBA {},_cf .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_afdda :=uint8 (0xff);if alpha !=nil &&len (alpha )> _bebc {_afdda =alpha [_bebc ];};_cccfe ,_agbc ,_cgfc :=data [_afff ],data [_afff +1],data [_afff +2];if len (decode )==6{_cafe :=LinearInterpolate (float64 (_cccfe ),0,255.0,decode [0],decode [1]);
_fffb :=LinearInterpolate (float64 (_agbc ),0,255.0,decode [2],decode [3]);_dfeg :=LinearInterpolate (float64 (_cgfc ),0,255.0,decode [4],decode [5]);if _cafe <=1.0&&_fffb <=1.0&&_dfeg <=1.0{_cafe *=255.0;_fffb *=255.0;_dfeg *=255.0;};_cccfe =uint8 (_cafe )&0xff;
_agbc =uint8 (_fffb )&0xff;_cgfc =uint8 (_dfeg )&0xff;};return _cg .NRGBA {R :_cccfe ,G :_agbc ,B :_cgfc ,A :_afdda },nil ;};func (_cfgc *Gray2 )Validate ()error {if len (_cfgc .Data )!=_cfgc .Height *_cfgc .BytesPerLine {return ErrInvalidImage ;};return nil ;
};const (_dedc shift =iota ;_ccgf ;);func (_cfdb *Gray4 )GrayAt (x ,y int )_cg .Gray {_fedf ,_ :=ColorAtGray4BPC (x ,y ,_cfdb .BytesPerLine ,_cfdb .Data ,_cfdb .Decode );return _fedf ;};var _ Image =&NRGBA16 {};type NRGBA64 struct{ImageBase };func (_aedc *Monochrome )Set (x ,y int ,c _cg .Color ){_egg :=y *_aedc .BytesPerLine +x >>3;
if _egg > len (_aedc .Data )-1{return ;};_bbbd :=_aedc .ColorModel ().Convert (c ).(_cg .Gray );_aedc .setGray (x ,_bbbd ,_egg );};func ColorAtRGBA32 (x ,y ,width int ,data ,alpha []byte ,decode []float64 )(_cg .RGBA ,error ){_deda :=y *width +x ;_ccfgc :=3*_deda ;
if _ccfgc +2>=len (data ){return _cg .RGBA {},_cf .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_dbgf :=uint8 (0xff);if alpha !=nil &&len (alpha )> _deda {_dbgf =alpha [_deda ];};_gcade ,_baaag ,_ccdcb :=data [_ccfgc ],data [_ccfgc +1],data [_ccfgc +2];if len (decode )==6{_gcade =uint8 (uint32 (LinearInterpolate (float64 (_gcade ),0,255,decode [0],decode [1]))&0xff);
_baaag =uint8 (uint32 (LinearInterpolate (float64 (_baaag ),0,255,decode [2],decode [3]))&0xff);_ccdcb =uint8 (uint32 (LinearInterpolate (float64 (_ccdcb ),0,255,decode [4],decode [5]))&0xff);};return _cg .RGBA {R :_gcade ,G :_baaag ,B :_ccdcb ,A :_dbgf },nil ;
};func (_eefgf *NRGBA32 )At (x ,y int )_cg .Color {_fbgdc ,_ :=_eefgf .ColorAt (x ,y );return _fbgdc };func (_gggb *Gray8 )ColorModel ()_cg .Model {return _cg .GrayModel };func _bdgb (_bdbg _be .Image )(Image ,error ){if _gecd ,_dggd :=_bdbg .(*Gray16 );
_dggd {return _gecd .Copy (),nil ;};_abbc :=_bdbg .Bounds ();_eggc ,_gaccf :=NewImage (_abbc .Max .X ,_abbc .Max .Y ,16,1,nil ,nil ,nil );if _gaccf !=nil {return nil ,_gaccf ;};_fdgc (_bdbg ,_eggc ,_abbc );return _eggc ,nil ;};func _eba (_deg int )[]uint {var _ebgb []uint ;
_bdg :=_deg ;_gb :=_bdg /8;if _gb !=0{for _bcb :=0;_bcb < _gb ;_bcb ++{_ebgb =append (_ebgb ,8);};_gd :=_bdg %8;_bdg =0;if _gd !=0{_bdg =_gd ;};};_aca :=_bdg /4;if _aca !=0{for _dgg :=0;_dgg < _aca ;_dgg ++{_ebgb =append (_ebgb ,4);};_ebag :=_bdg %4;_bdg =0;
if _ebag !=0{_bdg =_ebag ;};};_dc :=_bdg /2;if _dc !=0{for _aad :=0;_aad < _dc ;_aad ++{_ebgb =append (_ebgb ,2);};};return _ebgb ;};var _ Gray =&Gray16 {};func (_bcde *Gray4 )Validate ()error {if len (_bcde .Data )!=_bcde .Height *_bcde .BytesPerLine {return ErrInvalidImage ;
};return nil ;};func (_dbe *CMYK32 )ColorModel ()_cg .Model {return _cg .CMYKModel };func _bbce (_ebdb _cg .RGBA )_cg .CMYK {_fca ,_fcfc ,_gdgg ,_eaag :=_cg .RGBToCMYK (_ebdb .R ,_ebdb .G ,_ebdb .B );return _cg .CMYK {C :_fca ,M :_fcfc ,Y :_gdgg ,K :_eaag };
};func (_dgab *Monochrome )SetGray (x ,y int ,g _cg .Gray ){_gade :=y *_dgab .BytesPerLine +x >>3;if _gade > len (_dgab .Data )-1{return ;};g =_ffdg (g ,monochromeModel (_dgab .ModelThreshold ));_dgab .setGray (x ,g ,_gade );};func (_fcbe *Gray16 )ColorAt (x ,y int )(_cg .Color ,error ){return ColorAtGray16BPC (x ,y ,_fcbe .BytesPerLine ,_fcbe .Data ,_fcbe .Decode );
};func (_cbdba *ImageBase )setEightPartlyBytes (_edc ,_bbff int ,_dab uint64 )(_eaaa error ){var (_gcff byte ;_gbdba int ;);for _dcfb :=1;_dcfb <=_bbff ;_dcfb ++{_gbdba =64-_dcfb *8;_gcff =byte (_dab >>uint (_gbdba )&0xff);if _eaaa =_cbdba .setByte (_edc +_dcfb -1,_gcff );
_eaaa !=nil {return _eaaa ;};};_fggg :=_cbdba .BytesPerLine *8-_cbdba .Width ;if _fggg ==0{return nil ;};_gbdba -=8;_gcff =byte (_dab >>uint (_gbdba )&0xff)<<uint (_fggg );if _eaaa =_cbdba .setByte (_edc +_bbff ,_gcff );_eaaa !=nil {return _eaaa ;};return nil ;
};func _ggf (_bdga _be .Image )(Image ,error ){if _fde ,_dbd :=_bdga .(*Gray2 );_dbd {return _fde .Copy (),nil ;};_bbef :=_bdga .Bounds ();_fcde ,_cgaf :=NewImage (_bbef .Max .X ,_bbef .Max .Y ,2,1,nil ,nil ,nil );if _cgaf !=nil {return nil ,_cgaf ;};_fdgc (_bdga ,_fcde ,_bbef );
return _fcde ,nil ;};type NRGBA16 struct{ImageBase };func _dgba (_fabg NRGBA ,_gee Gray ,_fbgdb _be .Rectangle ){for _acge :=0;_acge < _fbgdb .Max .X ;_acge ++{for _afge :=0;_afge < _fbgdb .Max .Y ;_afge ++{_edd :=_bdf (_fabg .NRGBAAt (_acge ,_afge ));
_gee .SetGray (_acge ,_afge ,_edd );};};};var _ _be .Image =&NRGBA16 {};var ErrInvalidImage =_f .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
func _cdb (_gad _be .Image )(Image ,error ){if _bfg ,_bac :=_gad .(*CMYK32 );_bac {return _bfg .Copy (),nil ;};_fgee :=_gad .Bounds ();_bec ,_gfbg :=NewImage (_fgee .Max .X ,_fgee .Max .Y ,8,4,nil ,nil ,nil );if _gfbg !=nil {return nil ,_gfbg ;};switch _eaeb :=_gad .(type ){case CMYK :_dea (_eaeb ,_bec .(CMYK ),_fgee );
case Gray :_dbce (_eaeb ,_bec .(CMYK ),_fgee );case NRGBA :_ebc (_eaeb ,_bec .(CMYK ),_fgee );case RGBA :_cee (_eaeb ,_bec .(CMYK ),_fgee );default:_cdd (_gad ,_bec ,_fgee );};return _bec ,nil ;};func ColorAt (x ,y ,width ,bitsPerColor ,colorComponents ,bytesPerLine int ,data ,alpha []byte ,decode []float64 )(_cg .Color ,error ){switch colorComponents {case 1:return ColorAtGrayscale (x ,y ,bitsPerColor ,bytesPerLine ,data ,decode );
case 3:return ColorAtNRGBA (x ,y ,width ,bytesPerLine ,bitsPerColor ,data ,alpha ,decode );case 4:return ColorAtCMYK (x ,y ,width ,data ,decode );default:return nil ,_cf .Errorf ("\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063o\u006c\u006f\u0072\u0020\u0063\u006f\u006dp\u006f\u006e\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0074h\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0064",colorComponents );
};};func _ffdg (_adfg _cg .Gray ,_ggddc monochromeModel )_cg .Gray {if _adfg .Y > uint8 (_ggddc ){return _cg .Gray {Y :_b .MaxUint8 };};return _cg .Gray {};};func (_daf *Gray8 )Copy ()Image {return &Gray8 {ImageBase :_daf .copy ()}};var _ RGBA =&RGBA32 {};
func (_eefg *Gray2 )Base ()*ImageBase {return &_eefg .ImageBase };func _cfbb (_gbb _cg .Gray )_cg .RGBA {return _cg .RGBA {R :_gbb .Y ,G :_gbb .Y ,B :_gbb .Y ,A :0xff}};func (_gcae *NRGBA64 )SetNRGBA64 (x ,y int ,c _cg .NRGBA64 ){_efgd :=(y *_gcae .Width +x )*2;
_bbced :=_efgd *3;if _bbced +5>=len (_gcae .Data ){return ;};_gcae .setNRGBA64 (_bbced ,c ,_efgd );};func (_fgb colorConverter )Convert (src _be .Image )(Image ,error ){return _fgb ._acbe (src )};func _ddfd (_fbc uint )uint {var _dadc uint ;for _fbc !=0{_fbc >>=1;
_dadc ++;};return _dadc -1;};func _abgge (_aeafg nrgba64 ,_bdeg NRGBA ,_aecf _be .Rectangle ){for _baaa :=0;_baaa < _aecf .Max .X ;_baaa ++{for _gbbdb :=0;_gbbdb < _aecf .Max .Y ;_gbbdb ++{_deaa :=_aeafg .NRGBA64At (_baaa ,_gbbdb );_bdeg .SetNRGBA (_baaa ,_gbbdb ,_ceec (_deaa ));
};};};func (_cedg *RGBA32 )Base ()*ImageBase {return &_cedg .ImageBase };func _cgec (_dfbea int ,_aegg int )error {return _cf .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",_dfbea ,_aegg );
};func (_adfea *RGBA32 )Copy ()Image {return &RGBA32 {ImageBase :_adfea .copy ()}};func _gca (_gaf ,_aga *Monochrome )(_cbd error ){_eec :=_aga .BytesPerLine ;_ae :=_gaf .BytesPerLine ;var _cdg ,_gg ,_eg ,_ega ,_aaa int ;for _eg =0;_eg < _aga .Height ;
_eg ++{_cdg =_eg *_eec ;_gg =8*_eg *_ae ;for _ega =0;_ega < _eec ;_ega ++{if _cbd =_gaf .setEightBytes (_gg +_ega *8,_dbb [_aga .Data [_cdg +_ega ]]);_cbd !=nil {return _cbd ;};};for _aaa =1;_aaa < 8;_aaa ++{for _ega =0;_ega < _ae ;_ega ++{if _cbd =_gaf .setByte (_gg +_aaa *_ae +_ega ,_gaf .Data [_gg +_ega ]);
_cbd !=nil {return _cbd ;};};};};return nil ;};func _aef (_geff ,_feb *Monochrome ,_fbgd []byte ,_agag int )(_cbe error ){var (_dgeg ,_dfd ,_ace ,_aafa ,_gefe ,_afdc ,_bdd ,_eaf int ;_deb ,_adg uint32 ;_cga ,_gdc byte ;_bdaf uint16 ;);_bfd :=make ([]byte ,4);
_ddg :=make ([]byte ,4);for _ace =0;_ace < _geff .Height -1;_ace ,_aafa =_ace +2,_aafa +1{_dgeg =_ace *_geff .BytesPerLine ;_dfd =_aafa *_feb .BytesPerLine ;for _gefe ,_afdc =0,0;_gefe < _agag ;_gefe ,_afdc =_gefe +4,_afdc +1{for _bdd =0;_bdd < 4;_bdd ++{_eaf =_dgeg +_gefe +_bdd ;
if _eaf <=len (_geff .Data )-1&&_eaf < _dgeg +_geff .BytesPerLine {_bfd [_bdd ]=_geff .Data [_eaf ];}else {_bfd [_bdd ]=0x00;};_eaf =_dgeg +_geff .BytesPerLine +_gefe +_bdd ;if _eaf <=len (_geff .Data )-1&&_eaf < _dgeg +(2*_geff .BytesPerLine ){_ddg [_bdd ]=_geff .Data [_eaf ];
}else {_ddg [_bdd ]=0x00;};};_deb =_bc .BigEndian .Uint32 (_bfd );_adg =_bc .BigEndian .Uint32 (_ddg );_adg &=_deb ;_adg &=_adg <<1;_adg &=0xaaaaaaaa;_deb =_adg |(_adg <<7);_cga =byte (_deb >>24);_gdc =byte ((_deb >>8)&0xff);_eaf =_dfd +_afdc ;if _eaf +1==len (_feb .Data )-1||_eaf +1>=_dfd +_feb .BytesPerLine {_feb .Data [_eaf ]=_fbgd [_cga ];
if _cbe =_feb .setByte (_eaf ,_fbgd [_cga ]);_cbe !=nil {return _cf .Errorf ("\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_eaf );};}else {_bdaf =(uint16 (_fbgd [_cga ])<<8)|uint16 (_fbgd [_gdc ]);if _cbe =_feb .setTwoBytes (_eaf ,_bdaf );_cbe !=nil {return _cf .Errorf ("s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_eaf );
};_afdc ++;};};};return nil ;};func _bfce (_gbdd *Monochrome ,_bdfd ,_adgd ,_cacb ,_gabg int ,_ddcff RasterOperator ,_eed *Monochrome ,_bfcf ,_dbgc int )error {if _gbdd ==nil {return _f .New ("\u006e\u0069\u006c\u0020\u0027\u0064\u0065\u0073\u0074\u0027\u0020\u0042i\u0074\u006d\u0061\u0070");
};if _ddcff ==PixDst {return nil ;};switch _ddcff {case PixClr ,PixSet ,PixNotDst :_ebe (_gbdd ,_bdfd ,_adgd ,_cacb ,_gabg ,_ddcff );return nil ;};if _eed ==nil {_e .Log .Debug ("\u0052a\u0073\u0074e\u0072\u004f\u0070\u0065r\u0061\u0074\u0069o\u006e\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020bi\u0074\u006d\u0061p\u0020\u0069s\u0020\u006e\u006f\u0074\u0020\u0064e\u0066\u0069n\u0065\u0064");
return _f .New ("\u006e\u0069l\u0020\u0027\u0073r\u0063\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _cgbb :=_caac (_gbdd ,_bdfd ,_adgd ,_cacb ,_gabg ,_ddcff ,_eed ,_bfcf ,_dbgc );_cgbb !=nil {return _cgbb ;};return nil ;};var _ Image =&Monochrome {};
func _ebfe (_fgbe _cg .NRGBA64 )_cg .RGBA {_acg ,_fbeb ,_eafe ,_gbf :=_fgbe .RGBA ();return _cg .RGBA {R :uint8 (_acg >>8),G :uint8 (_fbeb >>8),B :uint8 (_eafe >>8),A :uint8 (_gbf >>8)};};func AddDataPadding (width ,height ,bitsPerComponent ,colorComponents int ,data []byte )([]byte ,error ){_gbbb :=BytesPerLine (width ,bitsPerComponent ,colorComponents );
if _gbbb ==width *colorComponents *bitsPerComponent /8{return data ,nil ;};_geac :=width *colorComponents *bitsPerComponent ;_abcc :=_gbbb *8;_eebag :=8-(_abcc -_geac );_dcfd :=_ff .NewReader (data );_cegd :=_gbbb -1;_fgbge :=make ([]byte ,_cegd );_edec :=make ([]byte ,height *_gbbb );
_gfgd :=_ff .NewWriterMSB (_edec );var _eddg uint64 ;var _cfgca error ;for _ceac :=0;_ceac < height ;_ceac ++{_ ,_cfgca =_dcfd .Read (_fgbge );if _cfgca !=nil {return nil ,_cfgca ;};_ ,_cfgca =_gfgd .Write (_fgbge );if _cfgca !=nil {return nil ,_cfgca ;
};_eddg ,_cfgca =_dcfd .ReadBits (byte (_eebag ));if _cfgca !=nil {return nil ,_cfgca ;};_ ,_cfgca =_gfgd .WriteBits (_eddg ,_eebag );if _cfgca !=nil {return nil ,_cfgca ;};_gfgd .FinishByte ();};return _edec ,nil ;};var (_bcg =_cc ();_cea =_egc ();_dbb =_dbbd ();
);func ColorAtNRGBA64 (x ,y ,width int ,data ,alpha []byte ,decode []float64 )(_cg .NRGBA64 ,error ){_agefa :=(y *width +x )*2;_gedf :=_agefa *3;if _gedf +5>=len (data ){return _cg .NRGBA64 {},_cf .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};const _edaeg =0xffff;_abeb :=uint16 (_edaeg );if alpha !=nil &&len (alpha )> _agefa +1{_abeb =uint16 (alpha [_agefa ])<<8|uint16 (alpha [_agefa +1]);};_bffe :=uint16 (data [_gedf ])<<8|uint16 (data [_gedf +1]);_eebda :=uint16 (data [_gedf +2])<<8|uint16 (data [_gedf +3]);
_dcfa :=uint16 (data [_gedf +4])<<8|uint16 (data [_gedf +5]);if len (decode )==6{_bffe =uint16 (uint64 (LinearInterpolate (float64 (_bffe ),0,65535,decode [0],decode [1]))&_edaeg );_eebda =uint16 (uint64 (LinearInterpolate (float64 (_eebda ),0,65535,decode [2],decode [3]))&_edaeg );
_dcfa =uint16 (uint64 (LinearInterpolate (float64 (_dcfa ),0,65535,decode [4],decode [5]))&_edaeg );};return _cg .NRGBA64 {R :_bffe ,G :_eebda ,B :_dcfa ,A :_abeb },nil ;};func _fdgg (_cdec RGBA ,_gafdb NRGBA ,_geeg _be .Rectangle ){for _eefgc :=0;_eefgc < _geeg .Max .X ;
_eefgc ++{for _ecgbf :=0;_ecgbf < _geeg .Max .Y ;_ecgbf ++{_cgab :=_cdec .RGBAAt (_eefgc ,_ecgbf );_gafdb .SetNRGBA (_eefgc ,_ecgbf ,_ggg (_cgab ));};};};func _bcgd (_bfb _cg .NYCbCrA )_cg .RGBA {_fede ,_ccbg ,_faag ,_gcc :=_fgef (_bfb ).RGBA ();return _cg .RGBA {R :uint8 (_fede >>8),G :uint8 (_ccbg >>8),B :uint8 (_faag >>8),A :uint8 (_gcc >>8)};
};type nrgba64 interface{NRGBA64At (_gbeeg ,_ccfgf int )_cg .NRGBA64 ;SetNRGBA64 (_egggg ,_ecfe int ,_gaa _cg .NRGBA64 );};func _ggef (_acce _cg .Gray )_cg .NRGBA {return _cg .NRGBA {R :_acce .Y ,G :_acce .Y ,B :_acce .Y ,A :0xff}};func ColorAtGray1BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_cg .Gray ,error ){_feg :=y *bytesPerLine +x >>3;
if _feg >=len (data ){return _cg .Gray {},_cf .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_def :=data [_feg ]>>uint (7-(x &7))&1;if len (decode )==2{_def =uint8 (LinearInterpolate (float64 (_def ),0.0,1.0,decode [0],decode [1]))&1;};return _cg .Gray {Y :_def *255},nil ;};func (_eacf *NRGBA64 )Validate ()error {if len (_eacf .Data )!=3*2*_eacf .Width *_eacf .Height {return _f .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};func _dbbd ()(_ca [256]uint64 ){for _afb :=0;_afb < 256;_afb ++{if _afb &0x01!=0{_ca [_afb ]|=0xff;};if _afb &0x02!=0{_ca [_afb ]|=0xff00;};if _afb &0x04!=0{_ca [_afb ]|=0xff0000;};if _afb &0x08!=0{_ca [_afb ]|=0xff000000;};if _afb &0x10!=0{_ca [_afb ]|=0xff00000000;
};if _afb &0x20!=0{_ca [_afb ]|=0xff0000000000;};if _afb &0x40!=0{_ca [_afb ]|=0xff000000000000;};if _afb &0x80!=0{_ca [_afb ]|=0xff00000000000000;};};return _ca ;};func (_dgbe *ImageBase )copy ()ImageBase {_cedb :=*_dgbe ;_cedb .Data =make ([]byte ,len (_dgbe .Data ));
copy (_cedb .Data ,_dgbe .Data );return _cedb ;};func (_eeg *Gray2 )At (x ,y int )_cg .Color {_eda ,_ :=_eeg .ColorAt (x ,y );return _eda };func (_cged *RGBA32 )Validate ()error {if len (_cged .Data )!=3*_cged .Width *_cged .Height {return _f .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};func _dbad (_bdgd _be .Image )(Image ,error ){if _gggd ,_edagg :=_bdgd .(*NRGBA64 );_edagg {return _gggd .Copy (),nil ;};_efae ,_dbaa ,_ecfd :=_fbce (_bdgd ,2);_cebfd ,_ecbg :=NewImage (_efae .Max .X ,_efae .Max .Y ,16,3,nil ,_ecfd ,nil );
if _ecbg !=nil {return nil ,_ecbg ;};_decba (_bdgd ,_cebfd ,_efae );if len (_ecfd )!=0&&!_dbaa {if _gadb :=_aega (_ecfd ,_cebfd );_gadb !=nil {return nil ,_gadb ;};};return _cebfd ,nil ;};func _cee (_geb RGBA ,_ccge CMYK ,_cgfac _be .Rectangle ){for _eecag :=0;
_eecag < _cgfac .Max .X ;_eecag ++{for _aed :=0;_aed < _cgfac .Max .Y ;_aed ++{_dbcf :=_geb .RGBAAt (_eecag ,_aed );_ccge .SetCMYK (_eecag ,_aed ,_bbce (_dbcf ));};};};func (_bgcd *Gray2 )Copy ()Image {return &Gray2 {ImageBase :_bgcd .copy ()}};var _ Gray =&Gray8 {};
func _bgba (_gdb _cg .Color )_cg .Color {_agc :=_cg .GrayModel .Convert (_gdb ).(_cg .Gray );return _dgdc (_agc );};func (_fccc *ImageBase )GetAlpha ()[]byte {return _fccc .Alpha };func (_cdbe *Gray4 )ColorAt (x ,y int )(_cg .Color ,error ){return ColorAtGray4BPC (x ,y ,_cdbe .BytesPerLine ,_cdbe .Data ,_cdbe .Decode );
};func NewImageBase (width int ,height int ,bitsPerComponent int ,colorComponents int ,data []byte ,alpha []byte ,decode []float64 )ImageBase {_cgb :=ImageBase {Width :width ,Height :height ,BitsPerComponent :bitsPerComponent ,ColorComponents :colorComponents ,Data :data ,Alpha :alpha ,Decode :decode ,BytesPerLine :BytesPerLine (width ,bitsPerComponent ,colorComponents )};
if data ==nil {_cgb .Data =make ([]byte ,height *_cgb .BytesPerLine );};return _cgb ;};func init (){_ffab ()};var _ _be .Image =&Gray16 {};func (_dgge *Gray4 )Copy ()Image {return &Gray4 {ImageBase :_dgge .copy ()}};func _agdd (_fdf _cg .NRGBA )_cg .NRGBA {_fdf .R =_fdf .R >>4|(_fdf .R >>4)<<4;
_fdf .G =_fdf .G >>4|(_fdf .G >>4)<<4;_fdf .B =_fdf .B >>4|(_fdf .B >>4)<<4;return _fdf ;};func MonochromeModel (threshold uint8 )_cg .Model {return monochromeModel (threshold )};func (_dfcd *Gray16 )At (x ,y int )_cg .Color {_ecbf ,_ :=_dfcd .ColorAt (x ,y );
return _ecbf };func _bb (_eeb ,_fgfc *Monochrome ,_bcge []byte ,_dde int )(_gae error ){var (_cfbc ,_dggb ,_dcg ,_dcb ,_dgd ,_acb ,_gec ,_aee int ;_ed ,_fe uint32 ;_afg ,_ebb byte ;_ffb uint16 ;);_bbf :=make ([]byte ,4);_dcbd :=make ([]byte ,4);for _dcg =0;
_dcg < _eeb .Height -1;_dcg ,_dcb =_dcg +2,_dcb +1{_cfbc =_dcg *_eeb .BytesPerLine ;_dggb =_dcb *_fgfc .BytesPerLine ;for _dgd ,_acb =0,0;_dgd < _dde ;_dgd ,_acb =_dgd +4,_acb +1{for _gec =0;_gec < 4;_gec ++{_aee =_cfbc +_dgd +_gec ;if _aee <=len (_eeb .Data )-1&&_aee < _cfbc +_eeb .BytesPerLine {_bbf [_gec ]=_eeb .Data [_aee ];
}else {_bbf [_gec ]=0x00;};_aee =_cfbc +_eeb .BytesPerLine +_dgd +_gec ;if _aee <=len (_eeb .Data )-1&&_aee < _cfbc +(2*_eeb .BytesPerLine ){_dcbd [_gec ]=_eeb .Data [_aee ];}else {_dcbd [_gec ]=0x00;};};_ed =_bc .BigEndian .Uint32 (_bbf );_fe =_bc .BigEndian .Uint32 (_dcbd );
_fe |=_ed ;_fe |=_fe <<1;_fe &=0xaaaaaaaa;_ed =_fe |(_fe <<7);_afg =byte (_ed >>24);_ebb =byte ((_ed >>8)&0xff);_aee =_dggb +_acb ;if _aee +1==len (_fgfc .Data )-1||_aee +1>=_dggb +_fgfc .BytesPerLine {_fgfc .Data [_aee ]=_bcge [_afg ];}else {_ffb =(uint16 (_bcge [_afg ])<<8)|uint16 (_bcge [_ebb ]);
if _gae =_fgfc .setTwoBytes (_aee ,_ffb );_gae !=nil {return _cf .Errorf ("s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_aee );
};_acb ++;};};};return nil ;};func (_edaf *ImageBase )setByte (_bbcf int ,_abca byte )error {if _bbcf > len (_edaf .Data )-1{return _f .New ("\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");};_edaf .Data [_bbcf ]=_abca ;
return nil ;};type monochromeThresholdConverter struct{Threshold uint8 ;};func (_ccfag *ImageBase )Pix ()[]byte {return _ccfag .Data };const (PixSrc RasterOperator =0xc;PixDst RasterOperator =0xa;PixNotSrc RasterOperator =0x3;PixNotDst RasterOperator =0x5;
PixClr RasterOperator =0x0;PixSet RasterOperator =0xf;PixSrcOrDst RasterOperator =0xe;PixSrcAndDst RasterOperator =0x8;PixSrcXorDst RasterOperator =0x6;PixNotSrcOrDst RasterOperator =0xb;PixNotSrcAndDst RasterOperator =0x2;PixSrcOrNotDst RasterOperator =0xd;
PixSrcAndNotDst RasterOperator =0x4;PixNotPixSrcOrDst RasterOperator =0x1;PixNotPixSrcAndDst RasterOperator =0x7;PixNotPixSrcXorDst RasterOperator =0x9;PixPaint =PixSrcOrDst ;PixSubtract =PixNotSrcAndDst ;PixMask =PixSrcAndDst ;);func _aea (_add _cg .NRGBA )_cg .Gray {var _bgdd _cg .NRGBA ;
if _add ==_bgdd {return _cg .Gray {Y :0xff};};_acfd ,_dec ,_cdcb ,_ :=_add .RGBA ();_dcd :=(19595*_acfd +38470*_dec +7471*_cdcb +1<<15)>>24;return _cg .Gray {Y :uint8 (_dcd )};};func _dfda (_efbd ,_bcbc RGBA ,_ffcg _be .Rectangle ){for _cdadg :=0;_cdadg < _ffcg .Max .X ;
_cdadg ++{for _ffcb :=0;_ffcb < _ffcg .Max .Y ;_ffcb ++{_bcbc .SetRGBA (_cdadg ,_ffcb ,_efbd .RGBAAt (_cdadg ,_ffcb ));};};};func _fbe ()(_cfee []byte ){_cfee =make ([]byte ,256);for _gdfd :=0;_gdfd < 256;_gdfd ++{_fad :=byte (_gdfd );_cfee [_fad ]=(_fad &0x01)|((_fad &0x04)>>1)|((_fad &0x10)>>2)|((_fad &0x40)>>3)|((_fad &0x02)<<3)|((_fad &0x08)<<2)|((_fad &0x20)<<1)|(_fad &0x80);
};return _cfee ;};type RGBA32 struct{ImageBase };func (_fbga *NRGBA16 )NRGBAAt (x ,y int )_cg .NRGBA {_efd ,_ :=ColorAtNRGBA16 (x ,y ,_fbga .Width ,_fbga .BytesPerLine ,_fbga .Data ,_fbga .Alpha ,_fbga .Decode );return _efd ;};var _ _be .Image =&Monochrome {};
func _ecffd (_fgfe *Monochrome ,_afgf ,_ecgb ,_eege ,_cefad int ,_ggfc RasterOperator ,_daaa *Monochrome ,_bcafb ,_fedc int )error {var (_facf bool ;_dadcb bool ;_aceg int ;_aefg int ;_ddac int ;_aafb bool ;_egcfd byte ;_dbdc int ;_bgab int ;_feba int ;
_gggf ,_efcg int ;);_fdag :=8-(_afgf &7);_afac :=_febcg [_fdag ];_cbdf :=_fgfe .BytesPerLine *_ecgb +(_afgf >>3);_fadfd :=_daaa .BytesPerLine *_fedc +(_bcafb >>3);if _eege < _fdag {_facf =true ;_afac &=_cdcf [8-_fdag +_eege ];};if !_facf {_aceg =(_eege -_fdag )>>3;
if _aceg > 0{_dadcb =true ;_aefg =_cbdf +1;_ddac =_fadfd +1;};};_dbdc =(_afgf +_eege )&7;if !(_facf ||_dbdc ==0){_aafb =true ;_egcfd =_cdcf [_dbdc ];_bgab =_cbdf +1+_aceg ;_feba =_fadfd +1+_aceg ;};switch _ggfc {case PixSrc :for _gggf =0;_gggf < _cefad ;
_gggf ++{_fgfe .Data [_cbdf ]=_bbegf (_fgfe .Data [_cbdf ],_daaa .Data [_fadfd ],_afac );_cbdf +=_fgfe .BytesPerLine ;_fadfd +=_daaa .BytesPerLine ;};if _dadcb {for _gggf =0;_gggf < _cefad ;_gggf ++{for _efcg =0;_efcg < _aceg ;_efcg ++{_fgfe .Data [_aefg +_efcg ]=_daaa .Data [_ddac +_efcg ];
};_aefg +=_fgfe .BytesPerLine ;_ddac +=_daaa .BytesPerLine ;};};if _aafb {for _gggf =0;_gggf < _cefad ;_gggf ++{_fgfe .Data [_bgab ]=_bbegf (_fgfe .Data [_bgab ],_daaa .Data [_feba ],_egcfd );_bgab +=_fgfe .BytesPerLine ;_feba +=_daaa .BytesPerLine ;};
};case PixNotSrc :for _gggf =0;_gggf < _cefad ;_gggf ++{_fgfe .Data [_cbdf ]=_bbegf (_fgfe .Data [_cbdf ],^_daaa .Data [_fadfd ],_afac );_cbdf +=_fgfe .BytesPerLine ;_fadfd +=_daaa .BytesPerLine ;};if _dadcb {for _gggf =0;_gggf < _cefad ;_gggf ++{for _efcg =0;
_efcg < _aceg ;_efcg ++{_fgfe .Data [_aefg +_efcg ]=^_daaa .Data [_ddac +_efcg ];};_aefg +=_fgfe .BytesPerLine ;_ddac +=_daaa .BytesPerLine ;};};if _aafb {for _gggf =0;_gggf < _cefad ;_gggf ++{_fgfe .Data [_bgab ]=_bbegf (_fgfe .Data [_bgab ],^_daaa .Data [_feba ],_egcfd );
_bgab +=_fgfe .BytesPerLine ;_feba +=_daaa .BytesPerLine ;};};case PixSrcOrDst :for _gggf =0;_gggf < _cefad ;_gggf ++{_fgfe .Data [_cbdf ]=_bbegf (_fgfe .Data [_cbdf ],_daaa .Data [_fadfd ]|_fgfe .Data [_cbdf ],_afac );_cbdf +=_fgfe .BytesPerLine ;_fadfd +=_daaa .BytesPerLine ;
};if _dadcb {for _gggf =0;_gggf < _cefad ;_gggf ++{for _efcg =0;_efcg < _aceg ;_efcg ++{_fgfe .Data [_aefg +_efcg ]|=_daaa .Data [_ddac +_efcg ];};_aefg +=_fgfe .BytesPerLine ;_ddac +=_daaa .BytesPerLine ;};};if _aafb {for _gggf =0;_gggf < _cefad ;_gggf ++{_fgfe .Data [_bgab ]=_bbegf (_fgfe .Data [_bgab ],_daaa .Data [_feba ]|_fgfe .Data [_bgab ],_egcfd );
_bgab +=_fgfe .BytesPerLine ;_feba +=_daaa .BytesPerLine ;};};case PixSrcAndDst :for _gggf =0;_gggf < _cefad ;_gggf ++{_fgfe .Data [_cbdf ]=_bbegf (_fgfe .Data [_cbdf ],_daaa .Data [_fadfd ]&_fgfe .Data [_cbdf ],_afac );_cbdf +=_fgfe .BytesPerLine ;_fadfd +=_daaa .BytesPerLine ;
};if _dadcb {for _gggf =0;_gggf < _cefad ;_gggf ++{for _efcg =0;_efcg < _aceg ;_efcg ++{_fgfe .Data [_aefg +_efcg ]&=_daaa .Data [_ddac +_efcg ];};_aefg +=_fgfe .BytesPerLine ;_ddac +=_daaa .BytesPerLine ;};};if _aafb {for _gggf =0;_gggf < _cefad ;_gggf ++{_fgfe .Data [_bgab ]=_bbegf (_fgfe .Data [_bgab ],_daaa .Data [_feba ]&_fgfe .Data [_bgab ],_egcfd );
_bgab +=_fgfe .BytesPerLine ;_feba +=_daaa .BytesPerLine ;};};case PixSrcXorDst :for _gggf =0;_gggf < _cefad ;_gggf ++{_fgfe .Data [_cbdf ]=_bbegf (_fgfe .Data [_cbdf ],_daaa .Data [_fadfd ]^_fgfe .Data [_cbdf ],_afac );_cbdf +=_fgfe .BytesPerLine ;_fadfd +=_daaa .BytesPerLine ;
};if _dadcb {for _gggf =0;_gggf < _cefad ;_gggf ++{for _efcg =0;_efcg < _aceg ;_efcg ++{_fgfe .Data [_aefg +_efcg ]^=_daaa .Data [_ddac +_efcg ];};_aefg +=_fgfe .BytesPerLine ;_ddac +=_daaa .BytesPerLine ;};};if _aafb {for _gggf =0;_gggf < _cefad ;_gggf ++{_fgfe .Data [_bgab ]=_bbegf (_fgfe .Data [_bgab ],_daaa .Data [_feba ]^_fgfe .Data [_bgab ],_egcfd );
_bgab +=_fgfe .BytesPerLine ;_feba +=_daaa .BytesPerLine ;};};case PixNotSrcOrDst :for _gggf =0;_gggf < _cefad ;_gggf ++{_fgfe .Data [_cbdf ]=_bbegf (_fgfe .Data [_cbdf ],^(_daaa .Data [_fadfd ])|_fgfe .Data [_cbdf ],_afac );_cbdf +=_fgfe .BytesPerLine ;
_fadfd +=_daaa .BytesPerLine ;};if _dadcb {for _gggf =0;_gggf < _cefad ;_gggf ++{for _efcg =0;_efcg < _aceg ;_efcg ++{_fgfe .Data [_aefg +_efcg ]|=^(_daaa .Data [_ddac +_efcg ]);};_aefg +=_fgfe .BytesPerLine ;_ddac +=_daaa .BytesPerLine ;};};if _aafb {for _gggf =0;
_gggf < _cefad ;_gggf ++{_fgfe .Data [_bgab ]=_bbegf (_fgfe .Data [_bgab ],^(_daaa .Data [_feba ])|_fgfe .Data [_bgab ],_egcfd );_bgab +=_fgfe .BytesPerLine ;_feba +=_daaa .BytesPerLine ;};};case PixNotSrcAndDst :for _gggf =0;_gggf < _cefad ;_gggf ++{_fgfe .Data [_cbdf ]=_bbegf (_fgfe .Data [_cbdf ],^(_daaa .Data [_fadfd ])&_fgfe .Data [_cbdf ],_afac );
_cbdf +=_fgfe .BytesPerLine ;_fadfd +=_daaa .BytesPerLine ;};if _dadcb {for _gggf =0;_gggf < _cefad ;_gggf ++{for _efcg =0;_efcg < _aceg ;_efcg ++{_fgfe .Data [_aefg +_efcg ]&=^_daaa .Data [_ddac +_efcg ];};_aefg +=_fgfe .BytesPerLine ;_ddac +=_daaa .BytesPerLine ;
};};if _aafb {for _gggf =0;_gggf < _cefad ;_gggf ++{_fgfe .Data [_bgab ]=_bbegf (_fgfe .Data [_bgab ],^(_daaa .Data [_feba ])&_fgfe .Data [_bgab ],_egcfd );_bgab +=_fgfe .BytesPerLine ;_feba +=_daaa .BytesPerLine ;};};case PixSrcOrNotDst :for _gggf =0;
_gggf < _cefad ;_gggf ++{_fgfe .Data [_cbdf ]=_bbegf (_fgfe .Data [_cbdf ],_daaa .Data [_fadfd ]|^(_fgfe .Data [_cbdf ]),_afac );_cbdf +=_fgfe .BytesPerLine ;_fadfd +=_daaa .BytesPerLine ;};if _dadcb {for _gggf =0;_gggf < _cefad ;_gggf ++{for _efcg =0;
_efcg < _aceg ;_efcg ++{_fgfe .Data [_aefg +_efcg ]=_daaa .Data [_ddac +_efcg ]|^(_fgfe .Data [_aefg +_efcg ]);};_aefg +=_fgfe .BytesPerLine ;_ddac +=_daaa .BytesPerLine ;};};if _aafb {for _gggf =0;_gggf < _cefad ;_gggf ++{_fgfe .Data [_bgab ]=_bbegf (_fgfe .Data [_bgab ],_daaa .Data [_feba ]|^(_fgfe .Data [_bgab ]),_egcfd );
_bgab +=_fgfe .BytesPerLine ;_feba +=_daaa .BytesPerLine ;};};case PixSrcAndNotDst :for _gggf =0;_gggf < _cefad ;_gggf ++{_fgfe .Data [_cbdf ]=_bbegf (_fgfe .Data [_cbdf ],_daaa .Data [_fadfd ]&^(_fgfe .Data [_cbdf ]),_afac );_cbdf +=_fgfe .BytesPerLine ;
_fadfd +=_daaa .BytesPerLine ;};if _dadcb {for _gggf =0;_gggf < _cefad ;_gggf ++{for _efcg =0;_efcg < _aceg ;_efcg ++{_fgfe .Data [_aefg +_efcg ]=_daaa .Data [_ddac +_efcg ]&^(_fgfe .Data [_aefg +_efcg ]);};_aefg +=_fgfe .BytesPerLine ;_ddac +=_daaa .BytesPerLine ;
};};if _aafb {for _gggf =0;_gggf < _cefad ;_gggf ++{_fgfe .Data [_bgab ]=_bbegf (_fgfe .Data [_bgab ],_daaa .Data [_feba ]&^(_fgfe .Data [_bgab ]),_egcfd );_bgab +=_fgfe .BytesPerLine ;_feba +=_daaa .BytesPerLine ;};};case PixNotPixSrcOrDst :for _gggf =0;
_gggf < _cefad ;_gggf ++{_fgfe .Data [_cbdf ]=_bbegf (_fgfe .Data [_cbdf ],^(_daaa .Data [_fadfd ]|_fgfe .Data [_cbdf ]),_afac );_cbdf +=_fgfe .BytesPerLine ;_fadfd +=_daaa .BytesPerLine ;};if _dadcb {for _gggf =0;_gggf < _cefad ;_gggf ++{for _efcg =0;
_efcg < _aceg ;_efcg ++{_fgfe .Data [_aefg +_efcg ]=^(_daaa .Data [_ddac +_efcg ]|_fgfe .Data [_aefg +_efcg ]);};_aefg +=_fgfe .BytesPerLine ;_ddac +=_daaa .BytesPerLine ;};};if _aafb {for _gggf =0;_gggf < _cefad ;_gggf ++{_fgfe .Data [_bgab ]=_bbegf (_fgfe .Data [_bgab ],^(_daaa .Data [_feba ]|_fgfe .Data [_bgab ]),_egcfd );
_bgab +=_fgfe .BytesPerLine ;_feba +=_daaa .BytesPerLine ;};};case PixNotPixSrcAndDst :for _gggf =0;_gggf < _cefad ;_gggf ++{_fgfe .Data [_cbdf ]=_bbegf (_fgfe .Data [_cbdf ],^(_daaa .Data [_fadfd ]&_fgfe .Data [_cbdf ]),_afac );_cbdf +=_fgfe .BytesPerLine ;
_fadfd +=_daaa .BytesPerLine ;};if _dadcb {for _gggf =0;_gggf < _cefad ;_gggf ++{for _efcg =0;_efcg < _aceg ;_efcg ++{_fgfe .Data [_aefg +_efcg ]=^(_daaa .Data [_ddac +_efcg ]&_fgfe .Data [_aefg +_efcg ]);};_aefg +=_fgfe .BytesPerLine ;_ddac +=_daaa .BytesPerLine ;
};};if _aafb {for _gggf =0;_gggf < _cefad ;_gggf ++{_fgfe .Data [_bgab ]=_bbegf (_fgfe .Data [_bgab ],^(_daaa .Data [_feba ]&_fgfe .Data [_bgab ]),_egcfd );_bgab +=_fgfe .BytesPerLine ;_feba +=_daaa .BytesPerLine ;};};case PixNotPixSrcXorDst :for _gggf =0;
_gggf < _cefad ;_gggf ++{_fgfe .Data [_cbdf ]=_bbegf (_fgfe .Data [_cbdf ],^(_daaa .Data [_fadfd ]^_fgfe .Data [_cbdf ]),_afac );_cbdf +=_fgfe .BytesPerLine ;_fadfd +=_daaa .BytesPerLine ;};if _dadcb {for _gggf =0;_gggf < _cefad ;_gggf ++{for _efcg =0;
_efcg < _aceg ;_efcg ++{_fgfe .Data [_aefg +_efcg ]=^(_daaa .Data [_ddac +_efcg ]^_fgfe .Data [_aefg +_efcg ]);};_aefg +=_fgfe .BytesPerLine ;_ddac +=_daaa .BytesPerLine ;};};if _aafb {for _gggf =0;_gggf < _cefad ;_gggf ++{_fgfe .Data [_bgab ]=_bbegf (_fgfe .Data [_bgab ],^(_daaa .Data [_feba ]^_fgfe .Data [_bgab ]),_egcfd );
_bgab +=_fgfe .BytesPerLine ;_feba +=_daaa .BytesPerLine ;};};default:_e .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070e\u0072\u0061\u0074o\u0072:\u0020\u0025\u0064",_ggfc );return _f .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");
};return nil ;};func (_egde *Monochrome )Validate ()error {if len (_egde .Data )!=_egde .Height *_egde .BytesPerLine {return ErrInvalidImage ;};return nil ;};func (_afaa monochromeModel )Convert (c _cg .Color )_cg .Color {_cca :=_cg .GrayModel .Convert (c ).(_cg .Gray );
return _ffdg (_cca ,_afaa );};func (_ddcc *NRGBA32 )ColorAt (x ,y int )(_cg .Color ,error ){return ColorAtNRGBA32 (x ,y ,_ddcc .Width ,_ddcc .Data ,_ddcc .Alpha ,_ddcc .Decode );};func (_ddacd *NRGBA32 )Base ()*ImageBase {return &_ddacd .ImageBase };type Gray8 struct{ImageBase };
func (_ecae *Monochrome )ColorAt (x ,y int )(_cg .Color ,error ){return ColorAtGray1BPC (x ,y ,_ecae .BytesPerLine ,_ecae .Data ,_ecae .Decode );};func _eag (_degd ,_deeee *Monochrome ,_ecd []byte ,_ddc int )(_gef error ){var (_fda ,_bcgc ,_fcf ,_gcb ,_geg ,_fggd ,_aac ,_ccf int ;
_cbc ,_dgf ,_cfde ,_cce uint32 ;_cfdg ,_cec byte ;_baff uint16 ;);_gag :=make ([]byte ,4);_dga :=make ([]byte ,4);for _fcf =0;_fcf < _degd .Height -1;_fcf ,_gcb =_fcf +2,_gcb +1{_fda =_fcf *_degd .BytesPerLine ;_bcgc =_gcb *_deeee .BytesPerLine ;for _geg ,_fggd =0,0;
_geg < _ddc ;_geg ,_fggd =_geg +4,_fggd +1{for _aac =0;_aac < 4;_aac ++{_ccf =_fda +_geg +_aac ;if _ccf <=len (_degd .Data )-1&&_ccf < _fda +_degd .BytesPerLine {_gag [_aac ]=_degd .Data [_ccf ];}else {_gag [_aac ]=0x00;};_ccf =_fda +_degd .BytesPerLine +_geg +_aac ;
if _ccf <=len (_degd .Data )-1&&_ccf < _fda +(2*_degd .BytesPerLine ){_dga [_aac ]=_degd .Data [_ccf ];}else {_dga [_aac ]=0x00;};};_cbc =_bc .BigEndian .Uint32 (_gag );_dgf =_bc .BigEndian .Uint32 (_dga );_cfde =_cbc &_dgf ;_cfde |=_cfde <<1;_cce =_cbc |_dgf ;
_cce &=_cce <<1;_dgf =_cfde &_cce ;_dgf &=0xaaaaaaaa;_cbc =_dgf |(_dgf <<7);_cfdg =byte (_cbc >>24);_cec =byte ((_cbc >>8)&0xff);_ccf =_bcgc +_fggd ;if _ccf +1==len (_deeee .Data )-1||_ccf +1>=_bcgc +_deeee .BytesPerLine {if _gef =_deeee .setByte (_ccf ,_ecd [_cfdg ]);
_gef !=nil {return _cf .Errorf ("\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_ccf );};}else {_baff =(uint16 (_ecd [_cfdg ])<<8)|uint16 (_ecd [_cec ]);if _gef =_deeee .setTwoBytes (_ccf ,_baff );_gef !=nil {return _cf .Errorf ("s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_ccf );
};_fggd ++;};};};return nil ;};func (_adgg *Monochrome )RasterOperation (dx ,dy ,dw ,dh int ,op RasterOperator ,src *Monochrome ,sx ,sy int )error {return _bfce (_adgg ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );};var _ NRGBA =&NRGBA32 {};func _dfff (_egaa *Monochrome ,_gcbc ,_fdaea int ,_adge ,_gfbd int ,_eab RasterOperator ){var (_cfdgc int ;
_aeab byte ;_ggbf ,_affa int ;_baffe int ;);_cae :=_adge >>3;_bccc :=_adge &7;if _bccc > 0{_aeab =_cdcf [_bccc ];};_cfdgc =_egaa .BytesPerLine *_fdaea +(_gcbc >>3);switch _eab {case PixClr :for _ggbf =0;_ggbf < _gfbd ;_ggbf ++{_baffe =_cfdgc +_ggbf *_egaa .BytesPerLine ;
for _affa =0;_affa < _cae ;_affa ++{_egaa .Data [_baffe ]=0x0;_baffe ++;};if _bccc > 0{_egaa .Data [_baffe ]=_bbegf (_egaa .Data [_baffe ],0x0,_aeab );};};case PixSet :for _ggbf =0;_ggbf < _gfbd ;_ggbf ++{_baffe =_cfdgc +_ggbf *_egaa .BytesPerLine ;for _affa =0;
_affa < _cae ;_affa ++{_egaa .Data [_baffe ]=0xff;_baffe ++;};if _bccc > 0{_egaa .Data [_baffe ]=_bbegf (_egaa .Data [_baffe ],0xff,_aeab );};};case PixNotDst :for _ggbf =0;_ggbf < _gfbd ;_ggbf ++{_baffe =_cfdgc +_ggbf *_egaa .BytesPerLine ;for _affa =0;
_affa < _cae ;_affa ++{_egaa .Data [_baffe ]=^_egaa .Data [_baffe ];_baffe ++;};if _bccc > 0{_egaa .Data [_baffe ]=_bbegf (_egaa .Data [_baffe ],^_egaa .Data [_baffe ],_aeab );};};};};func GetConverter (bitsPerComponent ,colorComponents int )(ColorConverter ,error ){switch colorComponents {case 1:switch bitsPerComponent {case 1:return MonochromeConverter ,nil ;
case 2:return Gray2Converter ,nil ;case 4:return Gray4Converter ,nil ;case 8:return GrayConverter ,nil ;case 16:return Gray16Converter ,nil ;};case 3:switch bitsPerComponent {case 4:return NRGBA16Converter ,nil ;case 8:return NRGBAConverter ,nil ;case 16:return NRGBA64Converter ,nil ;
};case 4:return CMYKConverter ,nil ;};return nil ,_cf .Errorf ("\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0043o\u006e\u0076\u0065\u0072\u0074\u0065\u0072\u0020\u0070\u0061\u0072\u0061\u006d\u0065t\u0065\u0072\u0073\u002e\u0020\u0042\u0069\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u003a\u0020\u0025\u0064\u002c\u0020\u0043\u006f\u006co\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006et\u0073\u003a \u0025\u0064",bitsPerComponent ,colorComponents );
};var _ _be .Image =&RGBA32 {};func (_fgac *ImageBase )setEightBytes (_cagf int ,_gff uint64 )error {_gdcf :=_fgac .BytesPerLine -(_cagf %_fgac .BytesPerLine );if _fgac .BytesPerLine !=_fgac .Width >>3{_gdcf --;};if _gdcf >=8{return _fgac .setEightFullBytes (_cagf ,_gff );
};return _fgac .setEightPartlyBytes (_cagf ,_gdcf ,_gff );};var _ _be .Image =&Gray4 {};func ColorAtGray2BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_cg .Gray ,error ){_baa :=y *bytesPerLine +x >>2;if _baa >=len (data ){return _cg .Gray {},_cf .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_gecb :=data [_baa ]>>uint (6-(x &3)*2)&3;if len (decode )==2{_gecb =uint8 (uint32 (LinearInterpolate (float64 (_gecb ),0,3.0,decode [0],decode [1]))&3);};return _cg .Gray {Y :_gecb *85},nil ;};func _cffc (_effg _be .Image )(Image ,error ){if _bbfc ,_bbcg :=_effg .(*Gray4 );
_bbcg {return _bbfc .Copy (),nil ;};_bgbf :=_effg .Bounds ();_febc ,_bbcc :=NewImage (_bgbf .Max .X ,_bgbf .Max .Y ,4,1,nil ,nil ,nil );if _bbcc !=nil {return nil ,_bbcc ;};_fdgc (_effg ,_febc ,_bgbf );return _febc ,nil ;};func _dgee (_eaba ,_ggbb uint8 )uint8 {if _eaba < _ggbb {return 255;
};return 0;};func _fdgc (_addg _be .Image ,_afag Image ,_egb _be .Rectangle ){switch _gbad :=_addg .(type ){case Gray :_efg (_gbad ,_afag .(Gray ),_egb );case NRGBA :_dgba (_gbad ,_afag .(Gray ),_egb );case CMYK :_cccc (_gbad ,_afag .(Gray ),_egb );case RGBA :_bddge (_gbad ,_afag .(Gray ),_egb );
default:_cdd (_addg ,_afag ,_egb );};};func (_cddd *Monochrome )setGray (_gbcf int ,_gacb _cg .Gray ,_fccb int ){if _gacb .Y ==0{_cddd .clearBit (_fccb ,_gbcf );}else {_cddd .setGrayBit (_fccb ,_gbcf );};};func (_afe *Gray16 )Copy ()Image {return &Gray16 {ImageBase :_afe .copy ()}};
func _cc ()(_afd [256]uint16 ){for _gfb :=0;_gfb < 256;_gfb ++{if _gfb &0x01!=0{_afd [_gfb ]|=0x3;};if _gfb &0x02!=0{_afd [_gfb ]|=0xc;};if _gfb &0x04!=0{_afd [_gfb ]|=0x30;};if _gfb &0x08!=0{_afd [_gfb ]|=0xc0;};if _gfb &0x10!=0{_afd [_gfb ]|=0x300;};
if _gfb &0x20!=0{_afd [_gfb ]|=0xc00;};if _gfb &0x40!=0{_afd [_gfb ]|=0x3000;};if _gfb &0x80!=0{_afd [_gfb ]|=0xc000;};};return _afd ;};func _caac (_faaf *Monochrome ,_caabe ,_eac int ,_acgb ,_dcbc int ,_bddda RasterOperator ,_fag *Monochrome ,_bgbc ,_gfda int )error {var _gdcg ,_ccfg ,_cage ,_egcf int ;
if _caabe < 0{_bgbc -=_caabe ;_acgb +=_caabe ;_caabe =0;};if _bgbc < 0{_caabe -=_bgbc ;_acgb +=_bgbc ;_bgbc =0;};_gdcg =_caabe +_acgb -_faaf .Width ;if _gdcg > 0{_acgb -=_gdcg ;};_ccfg =_bgbc +_acgb -_fag .Width ;if _ccfg > 0{_acgb -=_ccfg ;};if _eac < 0{_gfda -=_eac ;
_dcbc +=_eac ;_eac =0;};if _gfda < 0{_eac -=_gfda ;_dcbc +=_gfda ;_gfda =0;};_cage =_eac +_dcbc -_faaf .Height ;if _cage > 0{_dcbc -=_cage ;};_egcf =_gfda +_dcbc -_fag .Height ;if _egcf > 0{_dcbc -=_egcf ;};if _acgb <=0||_dcbc <=0{return nil ;};var _bgg error ;
switch {case _caabe &7==0&&_bgbc &7==0:_bgg =_eedg (_faaf ,_caabe ,_eac ,_acgb ,_dcbc ,_bddda ,_fag ,_bgbc ,_gfda );case _caabe &7==_bgbc &7:_bgg =_ecffd (_faaf ,_caabe ,_eac ,_acgb ,_dcbc ,_bddda ,_fag ,_bgbc ,_gfda );default:_bgg =_efcd (_faaf ,_caabe ,_eac ,_acgb ,_dcbc ,_bddda ,_fag ,_bgbc ,_gfda );
};if _bgg !=nil {return _bgg ;};return nil ;};func (_fgd *NRGBA64 )ColorAt (x ,y int )(_cg .Color ,error ){return ColorAtNRGBA64 (x ,y ,_fgd .Width ,_fgd .Data ,_fgd .Alpha ,_fgd .Decode );};func _abgg (_eafd *Monochrome ,_aafbd ,_deab int ,_edag ,_gdab int ,_abgb RasterOperator ){var (_bgf bool ;
_acff bool ;_ggbfe int ;_cffg int ;_agcg int ;_acba int ;_egff bool ;_gabe byte ;);_egab :=8-(_aafbd &7);_adc :=_febcg [_egab ];_cgfaf :=_eafd .BytesPerLine *_deab +(_aafbd >>3);if _edag < _egab {_bgf =true ;_adc &=_cdcf [8-_egab +_edag ];};if !_bgf {_ggbfe =(_edag -_egab )>>3;
if _ggbfe !=0{_acff =true ;_cffg =_cgfaf +1;};};_agcg =(_aafbd +_edag )&7;if !(_bgf ||_agcg ==0){_egff =true ;_gabe =_cdcf [_agcg ];_acba =_cgfaf +1+_ggbfe ;};var _ecfg ,_fabb int ;switch _abgb {case PixClr :for _ecfg =0;_ecfg < _gdab ;_ecfg ++{_eafd .Data [_cgfaf ]=_bbegf (_eafd .Data [_cgfaf ],0x0,_adc );
_cgfaf +=_eafd .BytesPerLine ;};if _acff {for _ecfg =0;_ecfg < _gdab ;_ecfg ++{for _fabb =0;_fabb < _ggbfe ;_fabb ++{_eafd .Data [_cffg +_fabb ]=0x0;};_cffg +=_eafd .BytesPerLine ;};};if _egff {for _ecfg =0;_ecfg < _gdab ;_ecfg ++{_eafd .Data [_acba ]=_bbegf (_eafd .Data [_acba ],0x0,_gabe );
_acba +=_eafd .BytesPerLine ;};};case PixSet :for _ecfg =0;_ecfg < _gdab ;_ecfg ++{_eafd .Data [_cgfaf ]=_bbegf (_eafd .Data [_cgfaf ],0xff,_adc );_cgfaf +=_eafd .BytesPerLine ;};if _acff {for _ecfg =0;_ecfg < _gdab ;_ecfg ++{for _fabb =0;_fabb < _ggbfe ;
_fabb ++{_eafd .Data [_cffg +_fabb ]=0xff;};_cffg +=_eafd .BytesPerLine ;};};if _egff {for _ecfg =0;_ecfg < _gdab ;_ecfg ++{_eafd .Data [_acba ]=_bbegf (_eafd .Data [_acba ],0xff,_gabe );_acba +=_eafd .BytesPerLine ;};};case PixNotDst :for _ecfg =0;_ecfg < _gdab ;
_ecfg ++{_eafd .Data [_cgfaf ]=_bbegf (_eafd .Data [_cgfaf ],^_eafd .Data [_cgfaf ],_adc );_cgfaf +=_eafd .BytesPerLine ;};if _acff {for _ecfg =0;_ecfg < _gdab ;_ecfg ++{for _fabb =0;_fabb < _ggbfe ;_fabb ++{_eafd .Data [_cffg +_fabb ]=^(_eafd .Data [_cffg +_fabb ]);
};_cffg +=_eafd .BytesPerLine ;};};if _egff {for _ecfg =0;_ecfg < _gdab ;_ecfg ++{_eafd .Data [_acba ]=_bbegf (_eafd .Data [_acba ],^_eafd .Data [_acba ],_gabe );_acba +=_eafd .BytesPerLine ;};};};};func (_dede *NRGBA32 )Set (x ,y int ,c _cg .Color ){_ccba :=y *_dede .Width +x ;
_ffgd :=3*_ccba ;if _ffgd +2>=len (_dede .Data ){return ;};_dged :=_cg .NRGBAModel .Convert (c ).(_cg .NRGBA );_dede .setRGBA (_ccba ,_dged );};func (_dfgc *NRGBA16 )At (x ,y int )_cg .Color {_face ,_ :=_dfgc .ColorAt (x ,y );return _face };func (_eeef *Gray2 )Bounds ()_be .Rectangle {return _be .Rectangle {Max :_be .Point {X :_eeef .Width ,Y :_eeef .Height }};
};func ScaleAlphaToMonochrome (data []byte ,width ,height int )([]byte ,error ){_bg :=BytesPerLine (width ,8,1);if len (data )< _bg *height {return nil ,nil ;};_d :=&Gray8 {NewImageBase (width ,height ,8,1,data ,nil ,nil )};_a ,_cd :=MonochromeConverter .Convert (_d );
if _cd !=nil {return nil ,_cd ;};return _a .Base ().Data ,nil ;};type RGBA interface{RGBAAt (_abag ,_acfc int )_cg .RGBA ;SetRGBA (_eebd ,_cefb int ,_affaa _cg .RGBA );};var _ Image =&Gray4 {};func (_dad *Monochrome )setIndexedBit (_aace int ){_dad .Data [(_aace >>3)]|=0x80>>uint (_aace &7)};
func (_gbef *Gray8 )Base ()*ImageBase {return &_gbef .ImageBase };func (_fcdf *Gray16 )Base ()*ImageBase {return &_fcdf .ImageBase };func _afacc (_bdgg _be .Image )(Image ,error ){if _defg ,_dagc :=_bdgg .(*RGBA32 );_dagc {return _defg .Copy (),nil ;};
_feca ,_ecdd ,_dffa :=_fbce (_bdgg ,1);_dcad :=&RGBA32 {ImageBase :NewImageBase (_feca .Max .X ,_feca .Max .Y ,8,3,nil ,_dffa ,nil )};_acdf (_bdgg ,_dcad ,_feca );if len (_dffa )!=0&&!_ecdd {if _cdggf :=_aega (_dffa ,_dcad );_cdggf !=nil {return nil ,_cdggf ;
};};return _dcad ,nil ;};func (_fgbd *NRGBA32 )Validate ()error {if len (_fgbd .Data )!=3*_fgbd .Width *_fgbd .Height {return _f .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};var _ _be .Image =&NRGBA64 {};type Gray16 struct{ImageBase };func _fgg (_afc *Monochrome ,_fgf ,_bce int )(*Monochrome ,error ){if _afc ==nil {return nil ,_f .New ("\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _fgf <=0||_bce <=0{return nil ,_f .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0073\u0063\u0061l\u0065\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020<\u003d\u0020\u0030");};if _fgf ==_bce {if _fgf ==1{return _afc .copy (),nil ;};
if _fgf ==2||_fgf ==4||_fgf ==8{_cfb ,_ecag :=_ee (_afc ,_fgf );if _ecag !=nil {return nil ,_ecag ;};return _cfb ,nil ;};};_bcc :=_fgf *_afc .Width ;_ge :=_bce *_afc .Height ;_fbg :=_aab (_bcc ,_ge );_baf :=_fbg .BytesPerLine ;var (_ebg ,_cfd ,_acc ,_fbd ,_cef int ;
_bfe byte ;_db error ;);for _cfd =0;_cfd < _afc .Height ;_cfd ++{_ebg =_bce *_cfd *_baf ;for _acc =0;_acc < _afc .Width ;_acc ++{if _ceb :=_afc .getBitAt (_acc ,_cfd );_ceb {_cef =_fgf *_acc ;for _fbd =0;_fbd < _fgf ;_fbd ++{_fbg .setIndexedBit (_ebg *8+_cef +_fbd );
};};};for _fbd =1;_fbd < _bce ;_fbd ++{_bca :=_ebg +_fbd *_baf ;for _ffa :=0;_ffa < _baf ;_ffa ++{if _bfe ,_db =_fbg .getByte (_ebg +_ffa );_db !=nil {return nil ,_db ;};if _db =_fbg .setByte (_bca +_ffa ,_bfe );_db !=nil {return nil ,_db ;};};};};return _fbg ,nil ;
};func _ceec (_gdg _cg .NRGBA64 )_cg .NRGBA {return _cg .NRGBA {R :uint8 (_gdg .R >>8),G :uint8 (_gdg .G >>8),B :uint8 (_gdg .B >>8),A :uint8 (_gdg .A >>8)};};func _bbe (_fac ,_gfg *Monochrome ,_abc []byte ,_dge int )(_cbde error ){var (_eae ,_bde ,_fdb ,_fbdb ,_dce ,_ggd ,_ggcd ,_cac int ;
_fgfg ,_gfec ,_fbda ,_bag uint32 ;_gdeg ,_cfc byte ;_bbc uint16 ;);_bae :=make ([]byte ,4);_ade :=make ([]byte ,4);for _fdb =0;_fdb < _fac .Height -1;_fdb ,_fbdb =_fdb +2,_fbdb +1{_eae =_fdb *_fac .BytesPerLine ;_bde =_fbdb *_gfg .BytesPerLine ;for _dce ,_ggd =0,0;
_dce < _dge ;_dce ,_ggd =_dce +4,_ggd +1{for _ggcd =0;_ggcd < 4;_ggcd ++{_cac =_eae +_dce +_ggcd ;if _cac <=len (_fac .Data )-1&&_cac < _eae +_fac .BytesPerLine {_bae [_ggcd ]=_fac .Data [_cac ];}else {_bae [_ggcd ]=0x00;};_cac =_eae +_fac .BytesPerLine +_dce +_ggcd ;
if _cac <=len (_fac .Data )-1&&_cac < _eae +(2*_fac .BytesPerLine ){_ade [_ggcd ]=_fac .Data [_cac ];}else {_ade [_ggcd ]=0x00;};};_fgfg =_bc .BigEndian .Uint32 (_bae );_gfec =_bc .BigEndian .Uint32 (_ade );_fbda =_fgfg &_gfec ;_fbda |=_fbda <<1;_bag =_fgfg |_gfec ;
_bag &=_bag <<1;_gfec =_fbda |_bag ;_gfec &=0xaaaaaaaa;_fgfg =_gfec |(_gfec <<7);_gdeg =byte (_fgfg >>24);_cfc =byte ((_fgfg >>8)&0xff);_cac =_bde +_ggd ;if _cac +1==len (_gfg .Data )-1||_cac +1>=_bde +_gfg .BytesPerLine {if _cbde =_gfg .setByte (_cac ,_abc [_gdeg ]);
_cbde !=nil {return _cf .Errorf ("\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_cac );};}else {_bbc =(uint16 (_abc [_gdeg ])<<8)|uint16 (_abc [_cfc ]);if _cbde =_gfg .setTwoBytes (_cac ,_bbc );_cbde !=nil {return _cf .Errorf ("s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_cac );
};_ggd ++;};};};return nil ;};var _ NRGBA =&NRGBA16 {};func NewImage (width ,height ,bitsPerComponent ,colorComponents int ,data ,alpha []byte ,decode []float64 )(Image ,error ){_gdbg :=NewImageBase (width ,height ,bitsPerComponent ,colorComponents ,data ,alpha ,decode );
var _eccf Image ;switch colorComponents {case 1:switch bitsPerComponent {case 1:_eccf =&Monochrome {ImageBase :_gdbg ,ModelThreshold :0x0f};case 2:_eccf =&Gray2 {ImageBase :_gdbg };case 4:_eccf =&Gray4 {ImageBase :_gdbg };case 8:_eccf =&Gray8 {ImageBase :_gdbg };
case 16:_eccf =&Gray16 {ImageBase :_gdbg };};case 3:switch bitsPerComponent {case 4:_eccf =&NRGBA16 {ImageBase :_gdbg };case 8:_eccf =&NRGBA32 {ImageBase :_gdbg };case 16:_eccf =&NRGBA64 {ImageBase :_gdbg };};case 4:_eccf =&CMYK32 {ImageBase :_gdbg };};
if _eccf ==nil {return nil ,ErrInvalidImage ;};return _eccf ,nil ;};func (_adfd *Monochrome )InverseData ()error {return _adfd .RasterOperation (0,0,_adfd .Width ,_adfd .Height ,PixNotDst ,nil ,0,0);};var (Gray2Model =_cg .ModelFunc (_bgba );Gray4Model =_cg .ModelFunc (_bdgab );
NRGBA16Model =_cg .ModelFunc (_abf ););func (_adfec *ImageBase )MakeAlpha (){_adfec .newAlpha ()};func _abf (_cfeg _cg .Color )_cg .Color {_gfeb :=_cg .NRGBAModel .Convert (_cfeg ).(_cg .NRGBA );return _agdd (_gfeb );};func (_gcea *Monochrome )Copy ()Image {return &Monochrome {ImageBase :_gcea .ImageBase .copy (),ModelThreshold :_gcea .ModelThreshold };
};func InDelta (expected ,current ,delta float64 )bool {_ggb :=expected -current ;if _ggb <=-delta ||_ggb >=delta {return false ;};return true ;};func (_fdae *Gray4 )Set (x ,y int ,c _cg .Color ){if x >=_fdae .Width ||y >=_fdae .Height {return ;};_cecb :=Gray4Model .Convert (c ).(_cg .Gray );
_fdae .setGray (x ,y ,_cecb );};func _bdbf (_fcaa Gray ,_cdaa NRGBA ,_decc _be .Rectangle ){for _bea :=0;_bea < _decc .Max .X ;_bea ++{for _caf :=0;_caf < _decc .Max .Y ;_caf ++{_fcae :=_aea (_cdaa .NRGBAAt (_bea ,_caf ));_fcaa .SetGray (_bea ,_caf ,_fcae );
};};};func (_ceg *Gray2 )Histogram ()(_bfgg [256]int ){for _ccff :=0;_ccff < _ceg .Width ;_ccff ++{for _fcfg :=0;_fcfg < _ceg .Height ;_fcfg ++{_bfgg [_ceg .GrayAt (_ccff ,_fcfg ).Y ]++;};};return _bfgg ;};func _gbd (_gga _cg .RGBA )_cg .Gray {_bccg :=(19595*uint32 (_gga .R )+38470*uint32 (_gga .G )+7471*uint32 (_gga .B )+1<<7)>>16;
return _cg .Gray {Y :uint8 (_bccg )};};func _abe (_ccd *Monochrome ,_aff ...int )(_bef *Monochrome ,_dbc error ){if _ccd ==nil {return nil ,_f .New ("\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");
};if len (_aff )==0{return nil ,_f .New ("\u0074h\u0065\u0072e\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020o\u006e\u0065\u0020\u006c\u0065\u0076\u0065\u006c\u0020\u006f\u0066 \u0072\u0065\u0064\u0075\u0063\u0074\u0069\u006f\u006e");
};_gde :=_fbe ();_bef =_ccd ;for _ ,_gdf :=range _aff {if _gdf <=0{break ;};_bef ,_dbc =_ceaa (_bef ,_gdf ,_gde );if _dbc !=nil {return nil ,_dbc ;};};return _bef ,nil ;};func _eea (_dbceg Gray ,_fcc nrgba64 ,_afa _be .Rectangle ){for _agb :=0;_agb < _afa .Max .X ;
_agb ++{for _ffd :=0;_ffd < _afa .Max .Y ;_ffd ++{_ddgg :=_bcgec (_fcc .NRGBA64At (_agb ,_ffd ));_dbceg .SetGray (_agb ,_ffd ,_ddgg );};};};func (_dfdeb *NRGBA32 )SetNRGBA (x ,y int ,c _cg .NRGBA ){_faf :=y *_dfdeb .Width +x ;_fcfbb :=3*_faf ;if _fcfbb +2>=len (_dfdeb .Data ){return ;
};_dfdeb .setRGBA (_faf ,c );};func _dcec (_cbgb int ,_ddcf int )int {if _cbgb < _ddcf {return _cbgb ;};return _ddcf ;};func (_dcge *Monochrome )ExpandBinary (factor int )(*Monochrome ,error ){if !IsPowerOf2 (uint (factor )){return nil ,_cf .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0065\u0078\u0070\u0061\u006e\u0064\u0020b\u0069n\u0061\u0072\u0079\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020\u0025\u0064",factor );
};return _ee (_dcge ,factor );};func (_aag *monochromeThresholdConverter )Convert (img _be .Image )(Image ,error ){if _adaa ,_dbcd :=img .(*Monochrome );_dbcd {return _adaa .Copy (),nil ;};_ddd :=img .Bounds ();_bee ,_dfg :=NewImage (_ddd .Max .X ,_ddd .Max .Y ,1,1,nil ,nil ,nil );
if _dfg !=nil {return nil ,_dfg ;};_bee .(*Monochrome ).ModelThreshold =_aag .Threshold ;for _dac :=0;_dac < _ddd .Max .X ;_dac ++{for _abeg :=0;_abeg < _ddd .Max .Y ;_abeg ++{_ceaab :=img .At (_dac ,_abeg );_bee .Set (_dac ,_abeg ,_ceaab );};};return _bee ,nil ;
};var (_cdcf =[]byte {0x00,0x80,0xC0,0xE0,0xF0,0xF8,0xFC,0xFE,0xFF};_febcg =[]byte {0x00,0x01,0x03,0x07,0x0F,0x1F,0x3F,0x7F,0xFF};);func _aaeg (_agfc nrgba64 ,_eacg RGBA ,_aaff _be .Rectangle ){for _edef :=0;_edef < _aaff .Max .X ;_edef ++{for _edad :=0;
_edad < _aaff .Max .Y ;_edad ++{_baad :=_agfc .NRGBA64At (_edef ,_edad );_eacg .SetRGBA (_edef ,_edad ,_ebfe (_baad ));};};};var _ Image =&Gray16 {};func _dbce (_dgad Gray ,_dgde CMYK ,_ccb _be .Rectangle ){for _bba :=0;_bba < _ccb .Max .X ;_bba ++{for _ddb :=0;
_ddb < _ccb .Max .Y ;_ddb ++{_bbd :=_dgad .GrayAt (_bba ,_ddb );_dgde .SetCMYK (_bba ,_ddb ,_cdgg (_bbd ));};};};var _ Image =&NRGBA32 {};func (_gbfa *NRGBA16 )ColorAt (x ,y int )(_cg .Color ,error ){return ColorAtNRGBA16 (x ,y ,_gbfa .Width ,_gbfa .BytesPerLine ,_gbfa .Data ,_gbfa .Alpha ,_gbfa .Decode );
};func _ffab (){for _cadd :=0;_cadd < 256;_cadd ++{_agde [_cadd ]=uint8 (_cadd &0x1)+(uint8 (_cadd >>1)&0x1)+(uint8 (_cadd >>2)&0x1)+(uint8 (_cadd >>3)&0x1)+(uint8 (_cadd >>4)&0x1)+(uint8 (_cadd >>5)&0x1)+(uint8 (_cadd >>6)&0x1)+(uint8 (_cadd >>7)&0x1);
};};func (_cebd *Gray8 )ColorAt (x ,y int )(_cg .Color ,error ){return ColorAtGray8BPC (x ,y ,_cebd .BytesPerLine ,_cebd .Data ,_cebd .Decode );};func _gfaf (_baae *_be .Gray )bool {for _egbf :=0;_egbf < len (_baae .Pix );_egbf ++{if !_edeb (_baae .Pix [_egbf ]){return false ;
};};return true ;};func _cccc (_efbb CMYK ,_bgdc Gray ,_ffc _be .Rectangle ){for _fdbc :=0;_fdbc < _ffc .Max .X ;_fdbc ++{for _fcg :=0;_fcg < _ffc .Max .Y ;_fcg ++{_eaaf :=_bbg (_efbb .CMYKAt (_fdbc ,_fcg ));_bgdc .SetGray (_fdbc ,_fcg ,_eaaf );};};};type colorConverter struct{_acbe func (_cbeb _be .Image )(Image ,error );
};func (_aabbb *Monochrome )ResolveDecode ()error {if len (_aabbb .Decode )!=2{return nil ;};if _aabbb .Decode [0]==1&&_aabbb .Decode [1]==0{if _caab :=_aabbb .InverseData ();_caab !=nil {return _caab ;};_aabbb .Decode =nil ;};return nil ;};func (_cde *Monochrome )AddPadding ()(_dcfea error ){if _fffg :=((_cde .Width *_cde .Height )+7)>>3;
len (_cde .Data )< _fffg {return _cf .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064a\u0074\u0061\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u003a\u0020\u0027\u0025\u0064\u0027\u002e\u0020\u0054\u0068\u0065\u0020\u0064\u0061t\u0061\u0020s\u0068\u006fu\u006c\u0064\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 l\u0065\u0061\u0073\u0074\u003a\u0020\u0027\u0025\u0064'\u0020\u0062\u0079\u0074\u0065\u0073",len (_cde .Data ),_fffg );
};_gacd :=_cde .Width %8;if _gacd ==0{return nil ;};_ddec :=_cde .Width /8;_ebfa :=_ff .NewReader (_cde .Data );_aade :=make ([]byte ,_cde .Height *_cde .BytesPerLine );_ddgd :=_ff .NewWriterMSB (_aade );_eff :=make ([]byte ,_ddec );var (_fdbd int ;_ecff uint64 ;
);for _fdbd =0;_fdbd < _cde .Height ;_fdbd ++{if _ ,_dcfea =_ebfa .Read (_eff );_dcfea !=nil {return _dcfea ;};if _ ,_dcfea =_ddgd .Write (_eff );_dcfea !=nil {return _dcfea ;};if _ecff ,_dcfea =_ebfa .ReadBits (byte (_gacd ));_dcfea !=nil {return _dcfea ;
};if _dcfea =_ddgd .WriteByte (byte (_ecff )<<uint (8-_gacd ));_dcfea !=nil {return _dcfea ;};};_cde .Data =_ddgd .Data ();return nil ;};type Histogramer interface{Histogram ()[256]int ;};func _eabd (_gdaag _be .Image ,_fgbgb Image ,_fdfd _be .Rectangle ){if _fgde ,_fcgg :=_gdaag .(SMasker );
_fcgg &&_fgde .HasAlpha (){_fgbgb .(SMasker ).MakeAlpha ();};switch _cgea :=_gdaag .(type ){case Gray :_bfdbc (_cgea ,_fgbgb .(NRGBA ),_fdfd );case NRGBA :_gdbb (_cgea ,_fgbgb .(NRGBA ),_fdfd );case *_be .NYCbCrA :_efag (_cgea ,_fgbgb .(NRGBA ),_fdfd );
case CMYK :_edac (_cgea ,_fgbgb .(NRGBA ),_fdfd );case RGBA :_fdgg (_cgea ,_fgbgb .(NRGBA ),_fdfd );case nrgba64 :_abgge (_cgea ,_fgbgb .(NRGBA ),_fdfd );default:_cdd (_gdaag ,_fgbgb ,_fdfd );};};var _ _be .Image =&NRGBA32 {};func (_bbcea *Monochrome )Histogram ()(_gced [256]int ){for _ ,_egca :=range _bbcea .Data {_gced [0xff]+=int (_agde [_bbcea .Data [_egca ]]);
};return _gced ;};func ConverterFunc (converterFunc func (_egfc _be .Image )(Image ,error ))ColorConverter {return colorConverter {_acbe :converterFunc };};func _aab (_aaf ,_cbdb int )*Monochrome {return &Monochrome {ImageBase :NewImageBase (_aaf ,_cbdb ,1,1,nil ,nil ,nil ),ModelThreshold :0x0f};
};func (_cgag *Gray16 )Set (x ,y int ,c _cg .Color ){_gafc :=(y *_cgag .BytesPerLine /2+x )*2;if _gafc +1>=len (_cgag .Data ){return ;};_efc :=_cg .Gray16Model .Convert (c ).(_cg .Gray16 );_cgag .Data [_gafc ],_cgag .Data [_gafc +1]=uint8 (_efc .Y >>8),uint8 (_efc .Y &0xff);
};func _ebe (_gafg *Monochrome ,_daff ,_fagg ,_acae ,_gdcd int ,_gafgf RasterOperator ){if _daff < 0{_acae +=_daff ;_daff =0;};_dcda :=_daff +_acae -_gafg .Width ;if _dcda > 0{_acae -=_dcda ;};if _fagg < 0{_gdcd +=_fagg ;_fagg =0;};_eebca :=_fagg +_gdcd -_gafg .Height ;
if _eebca > 0{_gdcd -=_eebca ;};if _acae <=0||_gdcd <=0{return ;};if (_daff &7)==0{_dfff (_gafg ,_daff ,_fagg ,_acae ,_gdcd ,_gafgf );}else {_abgg (_gafg ,_daff ,_fagg ,_acae ,_gdcd ,_gafgf );};};func _egc ()(_gcd [256]uint32 ){for _ece :=0;_ece < 256;
_ece ++{if _ece &0x01!=0{_gcd [_ece ]|=0xf;};if _ece &0x02!=0{_gcd [_ece ]|=0xf0;};if _ece &0x04!=0{_gcd [_ece ]|=0xf00;};if _ece &0x08!=0{_gcd [_ece ]|=0xf000;};if _ece &0x10!=0{_gcd [_ece ]|=0xf0000;};if _ece &0x20!=0{_gcd [_ece ]|=0xf00000;};if _ece &0x40!=0{_gcd [_ece ]|=0xf000000;
};if _ece &0x80!=0{_gcd [_ece ]|=0xf0000000;};};return _gcd ;};func (_cbebg *NRGBA16 )ColorModel ()_cg .Model {return NRGBA16Model };func _bfdbc (_aagd Gray ,_gcdd NRGBA ,_dcfde _be .Rectangle ){for _bgdfe :=0;_bgdfe < _dcfde .Max .X ;_bgdfe ++{for _badc :=0;
_badc < _dcfde .Max .Y ;_badc ++{_afcf :=_aagd .GrayAt (_bgdfe ,_badc );_gcdd .SetNRGBA (_bgdfe ,_badc ,_ggef (_afcf ));};};};type ImageBase struct{Width ,Height int ;BitsPerComponent ,ColorComponents int ;Data ,Alpha []byte ;Decode []float64 ;BytesPerLine int ;
};func (_cace *NRGBA64 )At (x ,y int )_cg .Color {_dba ,_ :=_cace .ColorAt (x ,y );return _dba };func _dea (_edb ,_gaed CMYK ,_dggg _be .Rectangle ){for _gbg :=0;_gbg < _dggg .Max .X ;_gbg ++{for _ebf :=0;_ebf < _dggg .Max .Y ;_ebf ++{_gaed .SetCMYK (_gbg ,_ebf ,_edb .CMYKAt (_gbg ,_ebf ));
};};};func _abg (_decf _be .Image )(Image ,error ){if _agd ,_ecfca :=_decf .(*Gray8 );_ecfca {return _agd .Copy (),nil ;};_bdcb :=_decf .Bounds ();_fgbg ,_fcfb :=NewImage (_bdcb .Max .X ,_bdcb .Max .Y ,8,1,nil ,nil ,nil );if _fcfb !=nil {return nil ,_fcfb ;
};_fdgc (_decf ,_fgbg ,_bdcb );return _fgbg ,nil ;};var _ Image =&Gray8 {};func (_dbcg *ImageBase )newAlpha (){_gdac :=BytesPerLine (_dbcg .Width ,_dbcg .BitsPerComponent ,1);_dbcg .Alpha =make ([]byte ,_dbcg .Height *_gdac );};func (_ddcfe *RGBA32 )setRGBA (_fcccd int ,_cegf _cg .RGBA ){_adfga :=3*_fcccd ;
_ddcfe .Data [_adfga ]=_cegf .R ;_ddcfe .Data [_adfga +1]=_cegf .G ;_ddcfe .Data [_adfga +2]=_cegf .B ;if _fcccd < len (_ddcfe .Alpha ){_ddcfe .Alpha [_fcccd ]=_cegf .A ;};};func ColorAtNRGBA16 (x ,y ,width ,bytesPerLine int ,data ,alpha []byte ,decode []float64 )(_cg .NRGBA ,error ){_gedc :=y *bytesPerLine +x *3/2;
if _gedc +1>=len (data ){return _cg .NRGBA {},_cgec (x ,y );};const (_ebaa =0xf;_fgfgc =uint8 (0xff););_afcb :=_fgfgc ;if alpha !=nil {_bgaa :=y *BytesPerLine (width ,4,1);if _bgaa < len (alpha ){if x %2==0{_afcb =(alpha [_bgaa ]>>uint (4))&_ebaa ;}else {_afcb =alpha [_bgaa ]&_ebaa ;
};_afcb |=_afcb <<4;};};var _dcbe ,_defa ,_cgdb uint8 ;if x *3%2==0{_dcbe =(data [_gedc ]>>uint (4))&_ebaa ;_defa =data [_gedc ]&_ebaa ;_cgdb =(data [_gedc +1]>>uint (4))&_ebaa ;}else {_dcbe =data [_gedc ]&_ebaa ;_defa =(data [_gedc +1]>>uint (4))&_ebaa ;
_cgdb =data [_gedc +1]&_ebaa ;};if len (decode )==6{_dcbe =uint8 (uint32 (LinearInterpolate (float64 (_dcbe ),0,15,decode [0],decode [1]))&0xf);_defa =uint8 (uint32 (LinearInterpolate (float64 (_defa ),0,15,decode [2],decode [3]))&0xf);_cgdb =uint8 (uint32 (LinearInterpolate (float64 (_cgdb ),0,15,decode [4],decode [5]))&0xf);
};return _cg .NRGBA {R :(_dcbe <<4)|(_dcbe &0xf),G :(_defa <<4)|(_defa &0xf),B :(_cgdb <<4)|(_cgdb &0xf),A :_afcb },nil ;};func (_cgaed *Gray4 )SetGray (x ,y int ,g _cg .Gray ){if x >=_cgaed .Width ||y >=_cgaed .Height {return ;};g =_fdbb (g );_cgaed .setGray (x ,y ,g );
};var _ Image =&Gray2 {};func _efcd (_cbdbb *Monochrome ,_gcde ,_dbfd ,_cbebb ,_bcgcb int ,_acbdg RasterOperator ,_bbeee *Monochrome ,_agae ,_dfea int )error {var (_aeca bool ;_gdgd bool ;_aadg byte ;_cfcc int ;_bdac int ;_gaec int ;_fbgf int ;_dcfeb bool ;
_fce int ;_agec int ;_cdce int ;_adda bool ;_bgdf byte ;_fdcc int ;_cagb int ;_eddb int ;_cefe byte ;_bcbf int ;_edde int ;_degf uint ;_aagf uint ;_eebaa byte ;_gdae shift ;_gcab bool ;_dadg bool ;_cccf ,_cgg int ;);if _agae &7!=0{_edde =8-(_agae &7);};
if _gcde &7!=0{_bdac =8-(_gcde &7);};if _edde ==0&&_bdac ==0{_eebaa =_febcg [0];}else {if _bdac > _edde {_degf =uint (_bdac -_edde );}else {_degf =uint (8-(_edde -_bdac ));};_aagf =8-_degf ;_eebaa =_febcg [_degf ];};if (_gcde &7)!=0{_aeca =true ;_cfcc =8-(_gcde &7);
_aadg =_febcg [_cfcc ];_gaec =_cbdbb .BytesPerLine *_dbfd +(_gcde >>3);_fbgf =_bbeee .BytesPerLine *_dfea +(_agae >>3);_bcbf =8-(_agae &7);if _cfcc > _bcbf {_gdae =_dedc ;if _cbebb >=_edde {_gcab =true ;};}else {_gdae =_ccgf ;};};if _cbebb < _cfcc {_gdgd =true ;
_aadg &=_cdcf [8-_cfcc +_cbebb ];};if !_gdgd {_fce =(_cbebb -_cfcc )>>3;if _fce !=0{_dcfeb =true ;_agec =_cbdbb .BytesPerLine *_dbfd +((_gcde +_bdac )>>3);_cdce =_bbeee .BytesPerLine *_dfea +((_agae +_bdac )>>3);};};_fdcc =(_gcde +_cbebb )&7;if !(_gdgd ||_fdcc ==0){_adda =true ;
_bgdf =_cdcf [_fdcc ];_cagb =_cbdbb .BytesPerLine *_dbfd +((_gcde +_bdac )>>3)+_fce ;_eddb =_bbeee .BytesPerLine *_dfea +((_agae +_bdac )>>3)+_fce ;if _fdcc > int (_aagf ){_dadg =true ;};};switch _acbdg {case PixSrc :if _aeca {for _cccf =0;_cccf < _bcgcb ;
_cccf ++{if _gdae ==_dedc {_cefe =_bbeee .Data [_fbgf ]<<_degf ;if _gcab {_cefe =_bbegf (_cefe ,_bbeee .Data [_fbgf +1]>>_aagf ,_eebaa );};}else {_cefe =_bbeee .Data [_fbgf ]>>_aagf ;};_cbdbb .Data [_gaec ]=_bbegf (_cbdbb .Data [_gaec ],_cefe ,_aadg );
_gaec +=_cbdbb .BytesPerLine ;_fbgf +=_bbeee .BytesPerLine ;};};if _dcfeb {for _cccf =0;_cccf < _bcgcb ;_cccf ++{for _cgg =0;_cgg < _fce ;_cgg ++{_cefe =_bbegf (_bbeee .Data [_cdce +_cgg ]<<_degf ,_bbeee .Data [_cdce +_cgg +1]>>_aagf ,_eebaa );_cbdbb .Data [_agec +_cgg ]=_cefe ;
};_agec +=_cbdbb .BytesPerLine ;_cdce +=_bbeee .BytesPerLine ;};};if _adda {for _cccf =0;_cccf < _bcgcb ;_cccf ++{_cefe =_bbeee .Data [_eddb ]<<_degf ;if _dadg {_cefe =_bbegf (_cefe ,_bbeee .Data [_eddb +1]>>_aagf ,_eebaa );};_cbdbb .Data [_cagb ]=_bbegf (_cbdbb .Data [_cagb ],_cefe ,_bgdf );
_cagb +=_cbdbb .BytesPerLine ;_eddb +=_bbeee .BytesPerLine ;};};case PixNotSrc :if _aeca {for _cccf =0;_cccf < _bcgcb ;_cccf ++{if _gdae ==_dedc {_cefe =_bbeee .Data [_fbgf ]<<_degf ;if _gcab {_cefe =_bbegf (_cefe ,_bbeee .Data [_fbgf +1]>>_aagf ,_eebaa );
};}else {_cefe =_bbeee .Data [_fbgf ]>>_aagf ;};_cbdbb .Data [_gaec ]=_bbegf (_cbdbb .Data [_gaec ],^_cefe ,_aadg );_gaec +=_cbdbb .BytesPerLine ;_fbgf +=_bbeee .BytesPerLine ;};};if _dcfeb {for _cccf =0;_cccf < _bcgcb ;_cccf ++{for _cgg =0;_cgg < _fce ;
_cgg ++{_cefe =_bbegf (_bbeee .Data [_cdce +_cgg ]<<_degf ,_bbeee .Data [_cdce +_cgg +1]>>_aagf ,_eebaa );_cbdbb .Data [_agec +_cgg ]=^_cefe ;};_agec +=_cbdbb .BytesPerLine ;_cdce +=_bbeee .BytesPerLine ;};};if _adda {for _cccf =0;_cccf < _bcgcb ;_cccf ++{_cefe =_bbeee .Data [_eddb ]<<_degf ;
if _dadg {_cefe =_bbegf (_cefe ,_bbeee .Data [_eddb +1]>>_aagf ,_eebaa );};_cbdbb .Data [_cagb ]=_bbegf (_cbdbb .Data [_cagb ],^_cefe ,_bgdf );_cagb +=_cbdbb .BytesPerLine ;_eddb +=_bbeee .BytesPerLine ;};};case PixSrcOrDst :if _aeca {for _cccf =0;_cccf < _bcgcb ;
_cccf ++{if _gdae ==_dedc {_cefe =_bbeee .Data [_fbgf ]<<_degf ;if _gcab {_cefe =_bbegf (_cefe ,_bbeee .Data [_fbgf +1]>>_aagf ,_eebaa );};}else {_cefe =_bbeee .Data [_fbgf ]>>_aagf ;};_cbdbb .Data [_gaec ]=_bbegf (_cbdbb .Data [_gaec ],_cefe |_cbdbb .Data [_gaec ],_aadg );
_gaec +=_cbdbb .BytesPerLine ;_fbgf +=_bbeee .BytesPerLine ;};};if _dcfeb {for _cccf =0;_cccf < _bcgcb ;_cccf ++{for _cgg =0;_cgg < _fce ;_cgg ++{_cefe =_bbegf (_bbeee .Data [_cdce +_cgg ]<<_degf ,_bbeee .Data [_cdce +_cgg +1]>>_aagf ,_eebaa );_cbdbb .Data [_agec +_cgg ]|=_cefe ;
};_agec +=_cbdbb .BytesPerLine ;_cdce +=_bbeee .BytesPerLine ;};};if _adda {for _cccf =0;_cccf < _bcgcb ;_cccf ++{_cefe =_bbeee .Data [_eddb ]<<_degf ;if _dadg {_cefe =_bbegf (_cefe ,_bbeee .Data [_eddb +1]>>_aagf ,_eebaa );};_cbdbb .Data [_cagb ]=_bbegf (_cbdbb .Data [_cagb ],_cefe |_cbdbb .Data [_cagb ],_bgdf );
_cagb +=_cbdbb .BytesPerLine ;_eddb +=_bbeee .BytesPerLine ;};};case PixSrcAndDst :if _aeca {for _cccf =0;_cccf < _bcgcb ;_cccf ++{if _gdae ==_dedc {_cefe =_bbeee .Data [_fbgf ]<<_degf ;if _gcab {_cefe =_bbegf (_cefe ,_bbeee .Data [_fbgf +1]>>_aagf ,_eebaa );
};}else {_cefe =_bbeee .Data [_fbgf ]>>_aagf ;};_cbdbb .Data [_gaec ]=_bbegf (_cbdbb .Data [_gaec ],_cefe &_cbdbb .Data [_gaec ],_aadg );_gaec +=_cbdbb .BytesPerLine ;_fbgf +=_bbeee .BytesPerLine ;};};if _dcfeb {for _cccf =0;_cccf < _bcgcb ;_cccf ++{for _cgg =0;
_cgg < _fce ;_cgg ++{_cefe =_bbegf (_bbeee .Data [_cdce +_cgg ]<<_degf ,_bbeee .Data [_cdce +_cgg +1]>>_aagf ,_eebaa );_cbdbb .Data [_agec +_cgg ]&=_cefe ;};_agec +=_cbdbb .BytesPerLine ;_cdce +=_bbeee .BytesPerLine ;};};if _adda {for _cccf =0;_cccf < _bcgcb ;
_cccf ++{_cefe =_bbeee .Data [_eddb ]<<_degf ;if _dadg {_cefe =_bbegf (_cefe ,_bbeee .Data [_eddb +1]>>_aagf ,_eebaa );};_cbdbb .Data [_cagb ]=_bbegf (_cbdbb .Data [_cagb ],_cefe &_cbdbb .Data [_cagb ],_bgdf );_cagb +=_cbdbb .BytesPerLine ;_eddb +=_bbeee .BytesPerLine ;
};};case PixSrcXorDst :if _aeca {for _cccf =0;_cccf < _bcgcb ;_cccf ++{if _gdae ==_dedc {_cefe =_bbeee .Data [_fbgf ]<<_degf ;if _gcab {_cefe =_bbegf (_cefe ,_bbeee .Data [_fbgf +1]>>_aagf ,_eebaa );};}else {_cefe =_bbeee .Data [_fbgf ]>>_aagf ;};_cbdbb .Data [_gaec ]=_bbegf (_cbdbb .Data [_gaec ],_cefe ^_cbdbb .Data [_gaec ],_aadg );
_gaec +=_cbdbb .BytesPerLine ;_fbgf +=_bbeee .BytesPerLine ;};};if _dcfeb {for _cccf =0;_cccf < _bcgcb ;_cccf ++{for _cgg =0;_cgg < _fce ;_cgg ++{_cefe =_bbegf (_bbeee .Data [_cdce +_cgg ]<<_degf ,_bbeee .Data [_cdce +_cgg +1]>>_aagf ,_eebaa );_cbdbb .Data [_agec +_cgg ]^=_cefe ;
};_agec +=_cbdbb .BytesPerLine ;_cdce +=_bbeee .BytesPerLine ;};};if _adda {for _cccf =0;_cccf < _bcgcb ;_cccf ++{_cefe =_bbeee .Data [_eddb ]<<_degf ;if _dadg {_cefe =_bbegf (_cefe ,_bbeee .Data [_eddb +1]>>_aagf ,_eebaa );};_cbdbb .Data [_cagb ]=_bbegf (_cbdbb .Data [_cagb ],_cefe ^_cbdbb .Data [_cagb ],_bgdf );
_cagb +=_cbdbb .BytesPerLine ;_eddb +=_bbeee .BytesPerLine ;};};case PixNotSrcOrDst :if _aeca {for _cccf =0;_cccf < _bcgcb ;_cccf ++{if _gdae ==_dedc {_cefe =_bbeee .Data [_fbgf ]<<_degf ;if _gcab {_cefe =_bbegf (_cefe ,_bbeee .Data [_fbgf +1]>>_aagf ,_eebaa );
};}else {_cefe =_bbeee .Data [_fbgf ]>>_aagf ;};_cbdbb .Data [_gaec ]=_bbegf (_cbdbb .Data [_gaec ],^_cefe |_cbdbb .Data [_gaec ],_aadg );_gaec +=_cbdbb .BytesPerLine ;_fbgf +=_bbeee .BytesPerLine ;};};if _dcfeb {for _cccf =0;_cccf < _bcgcb ;_cccf ++{for _cgg =0;
_cgg < _fce ;_cgg ++{_cefe =_bbegf (_bbeee .Data [_cdce +_cgg ]<<_degf ,_bbeee .Data [_cdce +_cgg +1]>>_aagf ,_eebaa );_cbdbb .Data [_agec +_cgg ]|=^_cefe ;};_agec +=_cbdbb .BytesPerLine ;_cdce +=_bbeee .BytesPerLine ;};};if _adda {for _cccf =0;_cccf < _bcgcb ;
_cccf ++{_cefe =_bbeee .Data [_eddb ]<<_degf ;if _dadg {_cefe =_bbegf (_cefe ,_bbeee .Data [_eddb +1]>>_aagf ,_eebaa );};_cbdbb .Data [_cagb ]=_bbegf (_cbdbb .Data [_cagb ],^_cefe |_cbdbb .Data [_cagb ],_bgdf );_cagb +=_cbdbb .BytesPerLine ;_eddb +=_bbeee .BytesPerLine ;
};};case PixNotSrcAndDst :if _aeca {for _cccf =0;_cccf < _bcgcb ;_cccf ++{if _gdae ==_dedc {_cefe =_bbeee .Data [_fbgf ]<<_degf ;if _gcab {_cefe =_bbegf (_cefe ,_bbeee .Data [_fbgf +1]>>_aagf ,_eebaa );};}else {_cefe =_bbeee .Data [_fbgf ]>>_aagf ;};_cbdbb .Data [_gaec ]=_bbegf (_cbdbb .Data [_gaec ],^_cefe &_cbdbb .Data [_gaec ],_aadg );
_gaec +=_cbdbb .BytesPerLine ;_fbgf +=_bbeee .BytesPerLine ;};};if _dcfeb {for _cccf =0;_cccf < _bcgcb ;_cccf ++{for _cgg =0;_cgg < _fce ;_cgg ++{_cefe =_bbegf (_bbeee .Data [_cdce +_cgg ]<<_degf ,_bbeee .Data [_cdce +_cgg +1]>>_aagf ,_eebaa );_cbdbb .Data [_agec +_cgg ]&=^_cefe ;
};_agec +=_cbdbb .BytesPerLine ;_cdce +=_bbeee .BytesPerLine ;};};if _adda {for _cccf =0;_cccf < _bcgcb ;_cccf ++{_cefe =_bbeee .Data [_eddb ]<<_degf ;if _dadg {_cefe =_bbegf (_cefe ,_bbeee .Data [_eddb +1]>>_aagf ,_eebaa );};_cbdbb .Data [_cagb ]=_bbegf (_cbdbb .Data [_cagb ],^_cefe &_cbdbb .Data [_cagb ],_bgdf );
_cagb +=_cbdbb .BytesPerLine ;_eddb +=_bbeee .BytesPerLine ;};};case PixSrcOrNotDst :if _aeca {for _cccf =0;_cccf < _bcgcb ;_cccf ++{if _gdae ==_dedc {_cefe =_bbeee .Data [_fbgf ]<<_degf ;if _gcab {_cefe =_bbegf (_cefe ,_bbeee .Data [_fbgf +1]>>_aagf ,_eebaa );
};}else {_cefe =_bbeee .Data [_fbgf ]>>_aagf ;};_cbdbb .Data [_gaec ]=_bbegf (_cbdbb .Data [_gaec ],_cefe |^_cbdbb .Data [_gaec ],_aadg );_gaec +=_cbdbb .BytesPerLine ;_fbgf +=_bbeee .BytesPerLine ;};};if _dcfeb {for _cccf =0;_cccf < _bcgcb ;_cccf ++{for _cgg =0;
_cgg < _fce ;_cgg ++{_cefe =_bbegf (_bbeee .Data [_cdce +_cgg ]<<_degf ,_bbeee .Data [_cdce +_cgg +1]>>_aagf ,_eebaa );_cbdbb .Data [_agec +_cgg ]=_cefe |^_cbdbb .Data [_agec +_cgg ];};_agec +=_cbdbb .BytesPerLine ;_cdce +=_bbeee .BytesPerLine ;};};if _adda {for _cccf =0;
_cccf < _bcgcb ;_cccf ++{_cefe =_bbeee .Data [_eddb ]<<_degf ;if _dadg {_cefe =_bbegf (_cefe ,_bbeee .Data [_eddb +1]>>_aagf ,_eebaa );};_cbdbb .Data [_cagb ]=_bbegf (_cbdbb .Data [_cagb ],_cefe |^_cbdbb .Data [_cagb ],_bgdf );_cagb +=_cbdbb .BytesPerLine ;
_eddb +=_bbeee .BytesPerLine ;};};case PixSrcAndNotDst :if _aeca {for _cccf =0;_cccf < _bcgcb ;_cccf ++{if _gdae ==_dedc {_cefe =_bbeee .Data [_fbgf ]<<_degf ;if _gcab {_cefe =_bbegf (_cefe ,_bbeee .Data [_fbgf +1]>>_aagf ,_eebaa );};}else {_cefe =_bbeee .Data [_fbgf ]>>_aagf ;
};_cbdbb .Data [_gaec ]=_bbegf (_cbdbb .Data [_gaec ],_cefe &^_cbdbb .Data [_gaec ],_aadg );_gaec +=_cbdbb .BytesPerLine ;_fbgf +=_bbeee .BytesPerLine ;};};if _dcfeb {for _cccf =0;_cccf < _bcgcb ;_cccf ++{for _cgg =0;_cgg < _fce ;_cgg ++{_cefe =_bbegf (_bbeee .Data [_cdce +_cgg ]<<_degf ,_bbeee .Data [_cdce +_cgg +1]>>_aagf ,_eebaa );
_cbdbb .Data [_agec +_cgg ]=_cefe &^_cbdbb .Data [_agec +_cgg ];};_agec +=_cbdbb .BytesPerLine ;_cdce +=_bbeee .BytesPerLine ;};};if _adda {for _cccf =0;_cccf < _bcgcb ;_cccf ++{_cefe =_bbeee .Data [_eddb ]<<_degf ;if _dadg {_cefe =_bbegf (_cefe ,_bbeee .Data [_eddb +1]>>_aagf ,_eebaa );
};_cbdbb .Data [_cagb ]=_bbegf (_cbdbb .Data [_cagb ],_cefe &^_cbdbb .Data [_cagb ],_bgdf );_cagb +=_cbdbb .BytesPerLine ;_eddb +=_bbeee .BytesPerLine ;};};case PixNotPixSrcOrDst :if _aeca {for _cccf =0;_cccf < _bcgcb ;_cccf ++{if _gdae ==_dedc {_cefe =_bbeee .Data [_fbgf ]<<_degf ;
if _gcab {_cefe =_bbegf (_cefe ,_bbeee .Data [_fbgf +1]>>_aagf ,_eebaa );};}else {_cefe =_bbeee .Data [_fbgf ]>>_aagf ;};_cbdbb .Data [_gaec ]=_bbegf (_cbdbb .Data [_gaec ],^(_cefe |_cbdbb .Data [_gaec ]),_aadg );_gaec +=_cbdbb .BytesPerLine ;_fbgf +=_bbeee .BytesPerLine ;
};};if _dcfeb {for _cccf =0;_cccf < _bcgcb ;_cccf ++{for _cgg =0;_cgg < _fce ;_cgg ++{_cefe =_bbegf (_bbeee .Data [_cdce +_cgg ]<<_degf ,_bbeee .Data [_cdce +_cgg +1]>>_aagf ,_eebaa );_cbdbb .Data [_agec +_cgg ]=^(_cefe |_cbdbb .Data [_agec +_cgg ]);};
_agec +=_cbdbb .BytesPerLine ;_cdce +=_bbeee .BytesPerLine ;};};if _adda {for _cccf =0;_cccf < _bcgcb ;_cccf ++{_cefe =_bbeee .Data [_eddb ]<<_degf ;if _dadg {_cefe =_bbegf (_cefe ,_bbeee .Data [_eddb +1]>>_aagf ,_eebaa );};_cbdbb .Data [_cagb ]=_bbegf (_cbdbb .Data [_cagb ],^(_cefe |_cbdbb .Data [_cagb ]),_bgdf );
_cagb +=_cbdbb .BytesPerLine ;_eddb +=_bbeee .BytesPerLine ;};};case PixNotPixSrcAndDst :if _aeca {for _cccf =0;_cccf < _bcgcb ;_cccf ++{if _gdae ==_dedc {_cefe =_bbeee .Data [_fbgf ]<<_degf ;if _gcab {_cefe =_bbegf (_cefe ,_bbeee .Data [_fbgf +1]>>_aagf ,_eebaa );
};}else {_cefe =_bbeee .Data [_fbgf ]>>_aagf ;};_cbdbb .Data [_gaec ]=_bbegf (_cbdbb .Data [_gaec ],^(_cefe &_cbdbb .Data [_gaec ]),_aadg );_gaec +=_cbdbb .BytesPerLine ;_fbgf +=_bbeee .BytesPerLine ;};};if _dcfeb {for _cccf =0;_cccf < _bcgcb ;_cccf ++{for _cgg =0;
_cgg < _fce ;_cgg ++{_cefe =_bbegf (_bbeee .Data [_cdce +_cgg ]<<_degf ,_bbeee .Data [_cdce +_cgg +1]>>_aagf ,_eebaa );_cbdbb .Data [_agec +_cgg ]=^(_cefe &_cbdbb .Data [_agec +_cgg ]);};_agec +=_cbdbb .BytesPerLine ;_cdce +=_bbeee .BytesPerLine ;};};if _adda {for _cccf =0;
_cccf < _bcgcb ;_cccf ++{_cefe =_bbeee .Data [_eddb ]<<_degf ;if _dadg {_cefe =_bbegf (_cefe ,_bbeee .Data [_eddb +1]>>_aagf ,_eebaa );};_cbdbb .Data [_cagb ]=_bbegf (_cbdbb .Data [_cagb ],^(_cefe &_cbdbb .Data [_cagb ]),_bgdf );_cagb +=_cbdbb .BytesPerLine ;
_eddb +=_bbeee .BytesPerLine ;};};case PixNotPixSrcXorDst :if _aeca {for _cccf =0;_cccf < _bcgcb ;_cccf ++{if _gdae ==_dedc {_cefe =_bbeee .Data [_fbgf ]<<_degf ;if _gcab {_cefe =_bbegf (_cefe ,_bbeee .Data [_fbgf +1]>>_aagf ,_eebaa );};}else {_cefe =_bbeee .Data [_fbgf ]>>_aagf ;
};_cbdbb .Data [_gaec ]=_bbegf (_cbdbb .Data [_gaec ],^(_cefe ^_cbdbb .Data [_gaec ]),_aadg );_gaec +=_cbdbb .BytesPerLine ;_fbgf +=_bbeee .BytesPerLine ;};};if _dcfeb {for _cccf =0;_cccf < _bcgcb ;_cccf ++{for _cgg =0;_cgg < _fce ;_cgg ++{_cefe =_bbegf (_bbeee .Data [_cdce +_cgg ]<<_degf ,_bbeee .Data [_cdce +_cgg +1]>>_aagf ,_eebaa );
_cbdbb .Data [_agec +_cgg ]=^(_cefe ^_cbdbb .Data [_agec +_cgg ]);};_agec +=_cbdbb .BytesPerLine ;_cdce +=_bbeee .BytesPerLine ;};};if _adda {for _cccf =0;_cccf < _bcgcb ;_cccf ++{_cefe =_bbeee .Data [_eddb ]<<_degf ;if _dadg {_cefe =_bbegf (_cefe ,_bbeee .Data [_eddb +1]>>_aagf ,_eebaa );
};_cbdbb .Data [_cagb ]=_bbegf (_cbdbb .Data [_cagb ],^(_cefe ^_cbdbb .Data [_cagb ]),_bgdf );_cagb +=_cbdbb .BytesPerLine ;_eddb +=_bbeee .BytesPerLine ;};};default:_e .Log .Debug ("\u004f\u0070e\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0074\u0020\u0070\u0065\u0072\u006d\u0069tt\u0065\u0064",_acbdg );
return _f .New ("\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065r\u0061\u0074\u0069\u006f\u006e\u0020\u006eo\u0074\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074\u0065\u0064");};return nil ;};func (_eefe *NRGBA32 )setRGBA (_geaa int ,_adb _cg .NRGBA ){_edfd :=3*_geaa ;
_eefe .Data [_edfd ]=_adb .R ;_eefe .Data [_edfd +1]=_adb .G ;_eefe .Data [_edfd +2]=_adb .B ;if _geaa < len (_eefe .Alpha ){_eefe .Alpha [_geaa ]=_adb .A ;};};func (_dcgc *Monochrome )Scale (scale float64 )(*Monochrome ,error ){var _dbfc bool ;_ddab :=scale ;
if scale < 1{_ddab =1/scale ;_dbfc =true ;};_cfea :=NextPowerOf2 (uint (_ddab ));if InDelta (float64 (_cfea ),_ddab ,0.001){if _dbfc {return _dcgc .ReduceBinary (_ddab );};return _dcgc .ExpandBinary (int (_cfea ));};_bbbc :=int (_b .RoundToEven (float64 (_dcgc .Width )*scale ));
_gda :=int (_b .RoundToEven (float64 (_dcgc .Height )*scale ));return _dcgc .ScaleLow (_bbbc ,_gda );};func _decba (_debbb _be .Image ,_acd Image ,_dffe _be .Rectangle ){if _fcee ,_fbbb :=_debbb .(SMasker );_fbbb &&_fcee .HasAlpha (){_acd .(SMasker ).MakeAlpha ();
};_cdd (_debbb ,_acd ,_dffe );};func _fbeg (_feee _be .Image ,_adfb uint8 )*_be .Gray {_bdbfb :=_feee .Bounds ();_gaeca :=_be .NewGray (_bdbfb );var (_ffee _cg .Color ;_fggge _cg .Gray ;);for _fbdf :=0;_fbdf < _bdbfb .Max .X ;_fbdf ++{for _edadf :=0;_edadf < _bdbfb .Max .Y ;
_edadf ++{_ffee =_feee .At (_fbdf ,_edadf );_gaeca .Set (_fbdf ,_edadf ,_ffee );_fggge =_gaeca .GrayAt (_fbdf ,_edadf );_gaeca .SetGray (_fbdf ,_edadf ,_cg .Gray {Y :_dgee (_fggge .Y ,_adfb )});};};return _gaeca ;};func (_gdd *Gray16 )Validate ()error {if len (_gdd .Data )!=_gdd .Height *_gdd .BytesPerLine {return ErrInvalidImage ;
};return nil ;};func (_gba *Monochrome )IsUnpadded ()bool {return (_gba .Width *_gba .Height )==len (_gba .Data )};func _age (_cbbf _cg .NRGBA )_cg .CMYK {_adfe ,_fcb ,_bfdc ,_ :=_cbbf .RGBA ();_ggcf ,_bcd ,_ecg ,_faab :=_cg .RGBToCMYK (uint8 (_adfe >>8),uint8 (_fcb >>8),uint8 (_bfdc >>8));
return _cg .CMYK {C :_ggcf ,M :_bcd ,Y :_ecg ,K :_faab };};func (_gbdf *Monochrome )At (x ,y int )_cg .Color {_fdbe ,_ :=_gbdf .ColorAt (x ,y );return _fdbe };func _fdbb (_bfec _cg .Gray )_cg .Gray {_bfec .Y >>=4;_bfec .Y |=_bfec .Y <<4;return _bfec };
func (_cffe *Monochrome )GrayAt (x ,y int )_cg .Gray {_gdaa ,_ :=ColorAtGray1BPC (x ,y ,_cffe .BytesPerLine ,_cffe .Data ,_cffe .Decode );return _gdaa ;};func _fgef (_cbdee _cg .NYCbCrA )_cg .NRGBA {_debc :=int32 (_cbdee .Y )*0x10101;_bcda :=int32 (_cbdee .Cb )-128;
_ggdd :=int32 (_cbdee .Cr )-128;_fadf :=_debc +91881*_ggdd ;if uint32 (_fadf )&0xff000000==0{_fadf >>=8;}else {_fadf =^(_fadf >>31)&0xffff;};_dff :=_debc -22554*_bcda -46802*_ggdd ;if uint32 (_dff )&0xff000000==0{_dff >>=8;}else {_dff =^(_dff >>31)&0xffff;
};_gab :=_debc +116130*_bcda ;if uint32 (_gab )&0xff000000==0{_gab >>=8;}else {_gab =^(_gab >>31)&0xffff;};return _cg .NRGBA {R :uint8 (_fadf >>8),G :uint8 (_dff >>8),B :uint8 (_gab >>8),A :_cbdee .A };};var _ Image =&RGBA32 {};func FromGoImage (i _be .Image )(Image ,error ){switch _fbea :=i .(type ){case Image :return _fbea .Copy (),nil ;
case Gray :return GrayConverter .Convert (i );case *_be .Gray16 :return Gray16Converter .Convert (i );case CMYK :return CMYKConverter .Convert (i );case *_be .NRGBA64 :return NRGBA64Converter .Convert (i );default:return NRGBAConverter .Convert (i );};
};func (_bga *CMYK32 )Copy ()Image {return &CMYK32 {ImageBase :_bga .copy ()}};func _daad (_ggfe NRGBA ,_bedg RGBA ,_abd _be .Rectangle ){for _afdf :=0;_afdf < _abd .Max .X ;_afdf ++{for _cgad :=0;_cgad < _abd .Max .Y ;_cgad ++{_ffeg :=_ggfe .NRGBAAt (_afdf ,_cgad );
_bedg .SetRGBA (_afdf ,_cgad ,_eaa (_ffeg ));};};};type SMasker interface{HasAlpha ()bool ;GetAlpha ()[]byte ;MakeAlpha ();};func _bbegf (_dfba ,_eaga ,_cgafd byte )byte {return (_dfba &^(_cgafd ))|(_eaga &_cgafd )};func (_faff *RGBA32 )SetRGBA (x ,y int ,c _cg .RGBA ){_edgbg :=y *_faff .Width +x ;
_dgc :=3*_edgbg ;if _dgc +2>=len (_faff .Data ){return ;};_faff .setRGBA (_edgbg ,c );};func _bbg (_dccc _cg .CMYK )_cg .Gray {_gbe ,_cgd ,_adeg :=_cg .CMYKToRGB (_dccc .C ,_dccc .M ,_dccc .Y ,_dccc .K );_aced :=(19595*uint32 (_gbe )+38470*uint32 (_cgd )+7471*uint32 (_adeg )+1<<7)>>16;
return _cg .Gray {Y :uint8 (_aced )};};var _ Image =&CMYK32 {};func _efag (_fgefg *_be .NYCbCrA ,_dccb NRGBA ,_afgb _be .Rectangle ){for _aadb :=0;_aadb < _afgb .Max .X ;_aadb ++{for _agecb :=0;_agecb < _afgb .Max .Y ;_agecb ++{_gcfd :=_fgefg .NYCbCrAAt (_aadb ,_agecb );
_dccb .SetNRGBA (_aadb ,_agecb ,_fgef (_gcfd ));};};};func (_ebca *ImageBase )setEightFullBytes (_cfed int ,_bcac uint64 )error {if _cfed +7> len (_ebca .Data )-1{return _f .New ("\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_ebca .Data [_cfed ]=byte ((_bcac &0xff00000000000000)>>56);_ebca .Data [_cfed +1]=byte ((_bcac &0xff000000000000)>>48);_ebca .Data [_cfed +2]=byte ((_bcac &0xff0000000000)>>40);_ebca .Data [_cfed +3]=byte ((_bcac &0xff00000000)>>32);_ebca .Data [_cfed +4]=byte ((_bcac &0xff000000)>>24);
_ebca .Data [_cfed +5]=byte ((_bcac &0xff0000)>>16);_ebca .Data [_cfed +6]=byte ((_bcac &0xff00)>>8);_ebca .Data [_cfed +7]=byte (_bcac &0xff);return nil ;};func NextPowerOf2 (n uint )uint {if IsPowerOf2 (n ){return n ;};return 1<<(_ddfd (n )+1);};func (_ddba *NRGBA16 )setNRGBA (_fgfcc ,_dgdeg ,_cebb int ,_dfcf _cg .NRGBA ){if _fgfcc *3%2==0{_ddba .Data [_cebb ]=(_dfcf .R >>4)<<4|(_dfcf .G >>4);
_ddba .Data [_cebb +1]=(_dfcf .B >>4)<<4|(_ddba .Data [_cebb +1]&0xf);}else {_ddba .Data [_cebb ]=(_ddba .Data [_cebb ]&0xf0)|(_dfcf .R >>4);_ddba .Data [_cebb +1]=(_dfcf .G >>4)<<4|(_dfcf .B >>4);};if _ddba .Alpha !=nil {_edce :=_dgdeg *BytesPerLine (_ddba .Width ,4,1);
if _edce < len (_ddba .Alpha ){if _fgfcc %2==0{_ddba .Alpha [_edce ]=(_dfcf .A >>uint (4))<<uint (4)|(_ddba .Alpha [_cebb ]&0xf);}else {_ddba .Alpha [_edce ]=(_ddba .Alpha [_edce ]&0xf0)|(_dfcf .A >>uint (4));};};};};var (MonochromeConverter =ConverterFunc (_egcb );
Gray2Converter =ConverterFunc (_ggf );Gray4Converter =ConverterFunc (_cffc );GrayConverter =ConverterFunc (_abg );Gray16Converter =ConverterFunc (_bdgb );NRGBA16Converter =ConverterFunc (_feff );NRGBAConverter =ConverterFunc (_gfdf );NRGBA64Converter =ConverterFunc (_dbad );
RGBAConverter =ConverterFunc (_afacc );CMYKConverter =ConverterFunc (_cdb ););func (_cgae *Gray4 )Bounds ()_be .Rectangle {return _be .Rectangle {Max :_be .Point {X :_cgae .Width ,Y :_cgae .Height }};};func (_bacd *Monochrome )Bounds ()_be .Rectangle {return _be .Rectangle {Max :_be .Point {X :_bacd .Width ,Y :_bacd .Height }};
};var _ Gray =&Gray4 {};type RasterOperator int ;func (_cge *Gray16 )GrayAt (x ,y int )_cg .Gray {_dgegf ,_ :=_cge .ColorAt (x ,y );return _cg .Gray {Y :uint8 (_dgegf .(_cg .Gray16 ).Y >>8)};};func BytesPerLine (width ,bitsPerComponent ,colorComponents int )int {return ((width *bitsPerComponent )*colorComponents +7)>>3;
};func ColorAtGrayscale (x ,y ,bitsPerColor ,bytesPerLine int ,data []byte ,decode []float64 )(_cg .Color ,error ){switch bitsPerColor {case 1:return ColorAtGray1BPC (x ,y ,bytesPerLine ,data ,decode );case 2:return ColorAtGray2BPC (x ,y ,bytesPerLine ,data ,decode );
case 4:return ColorAtGray4BPC (x ,y ,bytesPerLine ,data ,decode );case 8:return ColorAtGray8BPC (x ,y ,bytesPerLine ,data ,decode );case 16:return ColorAtGray16BPC (x ,y ,bytesPerLine ,data ,decode );default:return nil ,_cf .Errorf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0067\u0072\u0061\u0079\u0020\u0073c\u0061\u006c\u0065\u0020\u0062\u0069\u0074s\u0020\u0070\u0065\u0072\u0020\u0063\u006f\u006c\u006f\u0072\u0020a\u006d\u006f\u0075\u006e\u0074\u003a\u0020\u0027\u0025\u0064\u0027",bitsPerColor );
};};type Gray2 struct{ImageBase };func _edac (_baeg CMYK ,_gdgb NRGBA ,_gedfg _be .Rectangle ){for _ecbd :=0;_ecbd < _gedfg .Max .X ;_ecbd ++{for _fgc :=0;_fgc < _gedfg .Max .Y ;_fgc ++{_cbbfa :=_baeg .CMYKAt (_ecbd ,_fgc );_gdgb .SetNRGBA (_ecbd ,_fgc ,_dfde (_cbbfa ));
};};};func (_cgfa *CMYK32 )SetCMYK (x ,y int ,c _cg .CMYK ){_bafb :=4*(y *_cgfa .Width +x );if _bafb +3>=len (_cgfa .Data ){return ;};_cgfa .Data [_bafb ]=c .C ;_cgfa .Data [_bafb +1]=c .M ;_cgfa .Data [_bafb +2]=c .Y ;_cgfa .Data [_bafb +3]=c .K ;};func (_bbffd *RGBA32 )ColorAt (x ,y int )(_cg .Color ,error ){return ColorAtRGBA32 (x ,y ,_bbffd .Width ,_bbffd .Data ,_bbffd .Alpha ,_bbffd .Decode );
};func _bd (_eef ,_fb *Monochrome )(_ce error ){_bgb :=_fb .BytesPerLine ;_cdc :=_eef .BytesPerLine ;var (_gcg byte ;_dee uint16 ;_ag ,_bcf ,_ab ,_af ,_ba int ;);for _ab =0;_ab < _fb .Height ;_ab ++{_ag =_ab *_bgb ;_bcf =2*_ab *_cdc ;for _af =0;_af < _bgb ;
_af ++{_gcg =_fb .Data [_ag +_af ];_dee =_bcg [_gcg ];_ba =_bcf +_af *2;if _eef .BytesPerLine !=_fb .BytesPerLine *2&&(_af +1)*2> _eef .BytesPerLine {_ce =_eef .setByte (_ba ,byte (_dee >>8));}else {_ce =_eef .setTwoBytes (_ba ,_dee );};if _ce !=nil {return _ce ;
};};for _af =0;_af < _cdc ;_af ++{_ba =_bcf +_cdc +_af ;_gcg =_eef .Data [_bcf +_af ];if _ce =_eef .setByte (_ba ,_gcg );_ce !=nil {return _ce ;};};};return nil ;};func (_cbeg *Gray4 )At (x ,y int )_cg .Color {_ggda ,_ :=_cbeg .ColorAt (x ,y );return _ggda };
func (_eeff *ImageBase )setFourBytes (_cecd int ,_fbb uint32 )error {if _cecd +3> len (_eeff .Data )-1{return _cf .Errorf ("\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_cecd );
};_eeff .Data [_cecd ]=byte ((_fbb &0xff000000)>>24);_eeff .Data [_cecd +1]=byte ((_fbb &0xff0000)>>16);_eeff .Data [_cecd +2]=byte ((_fbb &0xff00)>>8);_eeff .Data [_cecd +3]=byte (_fbb &0xff);return nil ;};func _cgfd (_gcbd *_be .Gray ,_cded uint8 )*_be .Gray {_aece :=_gcbd .Bounds ();
_fgga :=_be .NewGray (_aece );for _fgbf :=0;_fgbf < _aece .Dx ();_fgbf ++{for _afcg :=0;_afcg < _aece .Dy ();_afcg ++{_bfcc :=_gcbd .GrayAt (_fgbf ,_afcg );_fgga .SetGray (_fgbf ,_afcg ,_cg .Gray {Y :_dgee (_bfcc .Y ,_cded )});};};return _fgga ;};type ColorConverter interface{Convert (_gge _be .Image )(Image ,error );
};func (_bffb *NRGBA64 )ColorModel ()_cg .Model {return _cg .NRGBA64Model };type shift int ;func _daae (_fada *_be .NYCbCrA ,_egdc RGBA ,_eefga _be .Rectangle ){for _fefb :=0;_fefb < _eefga .Max .X ;_fefb ++{for _fee :=0;_fee < _eefga .Max .Y ;_fee ++{_ggdf :=_fada .NYCbCrAAt (_fefb ,_fee );
_egdc .SetRGBA (_fefb ,_fee ,_bcgd (_ggdf ));};};};func _ggg (_bdda _cg .RGBA )_cg .NRGBA {switch _bdda .A {case 0xff:return _cg .NRGBA {R :_bdda .R ,G :_bdda .G ,B :_bdda .B ,A :0xff};case 0x00:return _cg .NRGBA {};default:_efa ,_cffb ,_cdf ,_cba :=_bdda .RGBA ();
_efa =(_efa *0xffff)/_cba ;_cffb =(_cffb *0xffff)/_cba ;_cdf =(_cdf *0xffff)/_cba ;return _cg .NRGBA {R :uint8 (_efa >>8),G :uint8 (_cffb >>8),B :uint8 (_cdf >>8),A :uint8 (_cba >>8)};};};func ImgToGray (i _be .Image )*_be .Gray {if _gfef ,_cadc :=i .(*_be .Gray );
_cadc {return _gfef ;};_efgeb :=i .Bounds ();_cbgg :=_be .NewGray (_efgeb );for _bddc :=0;_bddc < _efgeb .Max .X ;_bddc ++{for _acga :=0;_acga < _efgeb .Max .Y ;_acga ++{_dgbfg :=i .At (_bddc ,_acga );_cbgg .Set (_bddc ,_acga ,_dgbfg );};};return _cbgg ;
};func (_ecef *RGBA32 )Bounds ()_be .Rectangle {return _be .Rectangle {Max :_be .Point {X :_ecef .Width ,Y :_ecef .Height }};};func _edeb (_fgbaf uint8 )bool {if _fgbaf ==0||_fgbaf ==255{return true ;};return false ;};func (_cbcc *Monochrome )setGrayBit (_adafd ,_cbae int ){_cbcc .Data [_adafd ]|=0x80>>uint (_cbae &7)};
func IsPowerOf2 (n uint )bool {return n > 0&&(n &(n -1))==0};func (_dcfe *CMYK32 )Set (x ,y int ,c _cg .Color ){_afdd :=4*(y *_dcfe .Width +x );if _afdd +3>=len (_dcfe .Data ){return ;};_aabb :=_cg .CMYKModel .Convert (c ).(_cg .CMYK );_dcfe .Data [_afdd ]=_aabb .C ;
_dcfe .Data [_afdd +1]=_aabb .M ;_dcfe .Data [_afdd +2]=_aabb .Y ;_dcfe .Data [_afdd +3]=_aabb .K ;};var _ Gray =&Gray2 {};func _dcga (_agddg CMYK ,_deccc RGBA ,_dfbf _be .Rectangle ){for _fbgc :=0;_fbgc < _dfbf .Max .X ;_fbgc ++{for _edbbc :=0;_edbbc < _dfbf .Max .Y ;
_edbbc ++{_aefd :=_agddg .CMYKAt (_fbgc ,_edbbc );_deccc .SetRGBA (_fbgc ,_edbbc ,_bgcc (_aefd ));};};};func _feff (_geaff _be .Image )(Image ,error ){if _addeb ,_edbba :=_geaff .(*NRGBA16 );_edbba {return _addeb .Copy (),nil ;};_fcac :=_geaff .Bounds ();
_gadg ,_bfdb :=NewImage (_fcac .Max .X ,_fcac .Max .Y ,4,3,nil ,nil ,nil );if _bfdb !=nil {return nil ,_bfdb ;};_eabd (_geaff ,_gadg ,_fcac );return _gadg ,nil ;};func (_gbee *Monochrome )setBit (_bad ,_gfa int ){_gbee .Data [_bad +(_gfa >>3)]|=0x80>>uint (_gfa &7)};
func (_eggg *NRGBA16 )SetNRGBA (x ,y int ,c _cg .NRGBA ){_fec :=y *_eggg .BytesPerLine +x *3/2;if _fec +1>=len (_eggg .Data ){return ;};c =_agdd (c );_eggg .setNRGBA (x ,y ,_fec ,c );};func (_cbbb *NRGBA64 )Set (x ,y int ,c _cg .Color ){_bcbfg :=(y *_cbbb .Width +x )*2;
_ffgb :=_bcbfg *3;if _ffgb +5>=len (_cbbb .Data ){return ;};_ceae :=_cg .NRGBA64Model .Convert (c ).(_cg .NRGBA64 );_cbbb .setNRGBA64 (_ffgb ,_ceae ,_bcbfg );};func ColorAtNRGBA (x ,y ,width ,bytesPerLine ,bitsPerColor int ,data ,alpha []byte ,decode []float64 )(_cg .Color ,error ){switch bitsPerColor {case 4:return ColorAtNRGBA16 (x ,y ,width ,bytesPerLine ,data ,alpha ,decode );
case 8:return ColorAtNRGBA32 (x ,y ,width ,data ,alpha ,decode );case 16:return ColorAtNRGBA64 (x ,y ,width ,data ,alpha ,decode );default:return nil ,_cf .Errorf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064 \u0072\u0067\u0062\u0020b\u0069\u0074\u0073\u0020\u0070\u0065\u0072\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u0061\u006d\u006f\u0075\u006e\u0074\u003a\u0020\u0027\u0025\u0064\u0027",bitsPerColor );
};};func (_dgadb *NRGBA16 )Set (x ,y int ,c _cg .Color ){_aagfe :=y *_dgadb .BytesPerLine +x *3/2;if _aagfe +1>=len (_dgadb .Data ){return ;};_bbcd :=NRGBA16Model .Convert (c ).(_cg .NRGBA );_dgadb .setNRGBA (x ,y ,_aagfe ,_bbcd );};func _acdf (_ggcc _be .Image ,_aabf Image ,_adgef _be .Rectangle ){if _bbfe ,_ddebb :=_ggcc .(SMasker );
_ddebb &&_bbfe .HasAlpha (){_aabf .(SMasker ).MakeAlpha ();};switch _aacg :=_ggcc .(type ){case Gray :_ecda (_aacg ,_aabf .(RGBA ),_adgef );case NRGBA :_daad (_aacg ,_aabf .(RGBA ),_adgef );case *_be .NYCbCrA :_daae (_aacg ,_aabf .(RGBA ),_adgef );case CMYK :_dcga (_aacg ,_aabf .(RGBA ),_adgef );
case RGBA :_dfda (_aacg ,_aabf .(RGBA ),_adgef );case nrgba64 :_aaeg (_aacg ,_aabf .(RGBA ),_adgef );default:_cdd (_ggcc ,_aabf ,_adgef );};};func _ecda (_ccdd Gray ,_gbadf RGBA ,_fdagb _be .Rectangle ){for _dfdca :=0;_dfdca < _fdagb .Max .X ;_dfdca ++{for _cdfd :=0;
_cdfd < _fdagb .Max .Y ;_cdfd ++{_aeaa :=_ccdd .GrayAt (_dfdca ,_cdfd );_gbadf .SetRGBA (_dfdca ,_cdfd ,_cfbb (_aeaa ));};};};func _eaa (_baba _cg .NRGBA )_cg .RGBA {_fdd ,_dca ,_afde ,_cfg :=_baba .RGBA ();return _cg .RGBA {R :uint8 (_fdd >>8),G :uint8 (_dca >>8),B :uint8 (_afde >>8),A :uint8 (_cfg >>8)};
};func (_fbdc *NRGBA16 )Base ()*ImageBase {return &_fbdc .ImageBase };func ColorAtGray8BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_cg .Gray ,error ){_bdee :=y *bytesPerLine +x ;if _bdee >=len (data ){return _cg .Gray {},_cf .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_gbdb :=data [_bdee ];if len (decode )==2{_gbdb =uint8 (uint32 (LinearInterpolate (float64 (_gbdb ),0,255,decode [0],decode [1]))&0xff);};return _cg .Gray {Y :_gbdb },nil ;};func (_afdg *NRGBA32 )Bounds ()_be .Rectangle {return _be .Rectangle {Max :_be .Point {X :_afdg .Width ,Y :_afdg .Height }};
};func (_fed *CMYK32 )Bounds ()_be .Rectangle {return _be .Rectangle {Max :_be .Point {X :_fed .Width ,Y :_fed .Height }};};func MonochromeThresholdConverter (threshold uint8 )ColorConverter {return &monochromeThresholdConverter {Threshold :threshold };
};func (_dgbf *NRGBA32 )NRGBAAt (x ,y int )_cg .NRGBA {_befbd ,_ :=ColorAtNRGBA32 (x ,y ,_dgbf .Width ,_dgbf .Data ,_dgbf .Alpha ,_dgbf .Decode );return _befbd ;};func (_daac *NRGBA64 )Base ()*ImageBase {return &_daac .ImageBase };func IsGrayImgBlackAndWhite (i *_be .Gray )bool {return _gfaf (i )};
func _gfe (_ac ,_eb *Monochrome )(_fff error ){_aa :=_eb .BytesPerLine ;_ad :=_ac .BytesPerLine ;_fg :=_eb .BytesPerLine *4-_ac .BytesPerLine ;var (_dg ,_fge byte ;_bdc uint32 ;_ga ,_dfb ,_dda ,_eca ,_bff ,_acf ,_bda int ;);for _dda =0;_dda < _eb .Height ;
_dda ++{_ga =_dda *_aa ;_dfb =4*_dda *_ad ;for _eca =0;_eca < _aa ;_eca ++{_dg =_eb .Data [_ga +_eca ];_bdc =_cea [_dg ];_acf =_dfb +_eca *4;if _fg !=0&&(_eca +1)*4> _ac .BytesPerLine {for _bff =_fg ;_bff > 0;_bff --{_fge =byte ((_bdc >>uint (_bff *8))&0xff);
_bda =_acf +(_fg -_bff );if _fff =_ac .setByte (_bda ,_fge );_fff !=nil {return _fff ;};};}else if _fff =_ac .setFourBytes (_acf ,_bdc );_fff !=nil {return _fff ;};if _fff =_ac .setFourBytes (_dfb +_eca *4,_cea [_eb .Data [_ga +_eca ]]);_fff !=nil {return _fff ;
};};for _bff =1;_bff < 4;_bff ++{for _eca =0;_eca < _ad ;_eca ++{if _fff =_ac .setByte (_dfb +_bff *_ad +_eca ,_ac .Data [_dfb +_eca ]);_fff !=nil {return _fff ;};};};};return nil ;};func ColorAtGray16BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_cg .Gray16 ,error ){_edf :=(y *bytesPerLine /2+x )*2;
if _edf +1>=len (data ){return _cg .Gray16 {},_cf .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_baeb :=uint16 (data [_edf ])<<8|uint16 (data [_edf +1]);if len (decode )==2{_baeb =uint16 (uint64 (LinearInterpolate (float64 (_baeb ),0,65535,decode [0],decode [1])));};return _cg .Gray16 {Y :_baeb },nil ;};func _ee (_cb *Monochrome ,_g int )(*Monochrome ,error ){if _cb ==nil {return nil ,_f .New ("\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _g ==1{return _cb .copy (),nil ;};if !IsPowerOf2 (uint (_g )){return nil ,_cf .Errorf ("\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006ci\u0064 \u0065x\u0070a\u006e\u0064\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020\u0025\u0064",_g );
};_de :=_eba (_g );return _dd (_cb ,_g ,_de );};func _cdgg (_cebg _cg .Gray )_cg .CMYK {return _cg .CMYK {K :0xff-_cebg .Y }};func (_bbee *Monochrome )copy ()*Monochrome {_adfgf :=_aab (_bbee .Width ,_bbee .Height );_adfgf .ModelThreshold =_bbee .ModelThreshold ;
_adfgf .Data =make ([]byte ,len (_bbee .Data ));copy (_adfgf .Data ,_bbee .Data );if len (_bbee .Decode )!=0{_adfgf .Decode =make ([]float64 ,len (_bbee .Decode ));copy (_adfgf .Decode ,_bbee .Decode );};if len (_bbee .Alpha )!=0{_adfgf .Alpha =make ([]byte ,len (_bbee .Alpha ));
copy (_adfgf .Alpha ,_bbee .Alpha );};return _adfgf ;};func (_cfa *CMYK32 )ColorAt (x ,y int )(_cg .Color ,error ){return ColorAtCMYK (x ,y ,_cfa .Width ,_cfa .Data ,_cfa .Decode );};func (_aeed *Gray8 )Set (x ,y int ,c _cg .Color ){_dcdc :=y *_aeed .BytesPerLine +x ;
if _dcdc > len (_aeed .Data )-1{return ;};_fegb :=_cg .GrayModel .Convert (c );_aeed .Data [_dcdc ]=_fegb .(_cg .Gray ).Y ;};func (_gdcfc *RGBA32 )ColorModel ()_cg .Model {return _cg .NRGBAModel };func (_cdad *Gray8 )Validate ()error {if len (_cdad .Data )!=_cdad .Height *_cdad .BytesPerLine {return ErrInvalidImage ;
};return nil ;};func AutoThresholdTriangle (histogram [256]int )uint8 {var _agfe ,_afbf ,_gadbf ,_dcgg int ;for _fffga :=0;_fffga < len (histogram );_fffga ++{if histogram [_fffga ]> 0{_agfe =_fffga ;break ;};};if _agfe > 0{_agfe --;};for _gcaa :=255;_gcaa > 0;
_gcaa --{if histogram [_gcaa ]> 0{_dcgg =_gcaa ;break ;};};if _dcgg < 255{_dcgg ++;};for _bagf :=0;_bagf < 256;_bagf ++{if histogram [_bagf ]> _afbf {_gadbf =_bagf ;_afbf =histogram [_bagf ];};};var _gccc bool ;if (_gadbf -_agfe )< (_dcgg -_gadbf ){_gccc =true ;
var _cgage int ;_fffd :=255;for _cgage < _fffd {_eedec :=histogram [_cgage ];histogram [_cgage ]=histogram [_fffd ];histogram [_fffd ]=_eedec ;_cgage ++;_fffd --;};_agfe =255-_dcgg ;_gadbf =255-_gadbf ;};if _agfe ==_gadbf {return uint8 (_agfe );};_bdfb :=float64 (histogram [_gadbf ]);
_bede :=float64 (_agfe -_gadbf );_gece :=_b .Sqrt (_bdfb *_bdfb +_bede *_bede );_bdfb /=_gece ;_bede /=_gece ;_gece =_bdfb *float64 (_agfe )+_bede *float64 (histogram [_agfe ]);_dfbg :=_agfe ;var _facff float64 ;for _geccd :=_agfe +1;_geccd <=_gadbf ;_geccd ++{_egcfe :=_bdfb *float64 (_geccd )+_bede *float64 (histogram [_geccd ])-_gece ;
if _egcfe > _facff {_dfbg =_geccd ;_facff =_egcfe ;};};_dfbg --;if _gccc {var _fbcf int ;_afba :=255;for _fbcf < _afba {_bgac :=histogram [_fbcf ];histogram [_fbcf ]=histogram [_afba ];histogram [_afba ]=_bgac ;_fbcf ++;_afba --;};return uint8 (255-_dfbg );
};return uint8 (_dfbg );};func (_aagb *NRGBA64 )NRGBA64At (x ,y int )_cg .NRGBA64 {_affe ,_ :=ColorAtNRGBA64 (x ,y ,_aagb .Width ,_aagb .Data ,_aagb .Alpha ,_aagb .Decode );return _affe ;};type Image interface{_cgf .Image ;Base ()*ImageBase ;Copy ()Image ;
Pix ()[]byte ;ColorAt (_dbg ,_edg int )(_cg .Color ,error );Validate ()error ;};func _bdgab (_ded _cg .Color )_cg .Color {_ecfc :=_cg .GrayModel .Convert (_ded ).(_cg .Gray );return _fdbb (_ecfc );};func LinearInterpolate (x ,xmin ,xmax ,ymin ,ymax float64 )float64 {if _b .Abs (xmax -xmin )< 0.000001{return ymin ;
};_edgb :=ymin +(x -xmin )*(ymax -ymin )/(xmax -xmin );return _edgb ;};func _ceaa (_fa *Monochrome ,_ea int ,_ccg []byte )(_ada *Monochrome ,_bgc error ){const _cbg ="\u0072\u0065d\u0075\u0063\u0065R\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079";
if _fa ==nil {return nil ,_f .New ("\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _ea < 1||_ea > 4{return nil ,_f .New ("\u006c\u0065\u0076\u0065\u006c\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0069\u006e\u0020\u0073e\u0074\u0020\u007b\u0031\u002c\u0032\u002c\u0033\u002c\u0034\u007d");
};if _fa .Height <=1{return nil ,_f .New ("\u0073\u006f\u0075rc\u0065\u0020\u0068\u0065\u0069\u0067\u0068\u0074\u0020m\u0075s\u0074 \u0062e\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0027\u0032\u0027");};_ada =_aab (_fa .Width /2,_fa .Height /2);
if _ccg ==nil {_ccg =_fbe ();};_egd :=_dcec (_fa .BytesPerLine ,2*_ada .BytesPerLine );switch _ea {case 1:_bgc =_bb (_fa ,_ada ,_ccg ,_egd );case 2:_bgc =_bbe (_fa ,_ada ,_ccg ,_egd );case 3:_bgc =_eag (_fa ,_ada ,_ccg ,_egd );case 4:_bgc =_aef (_fa ,_ada ,_ccg ,_egd );
};if _bgc !=nil {return nil ,_bgc ;};return _ada ,nil ;};func (_ede *ImageBase )getByte (_ggff int )(byte ,error ){if _ggff > len (_ede .Data )-1||_ggff < 0{return 0,_cf .Errorf ("\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",_ggff );
};return _ede .Data [_ggff ],nil ;};func _egcb (_gcf _be .Image )(Image ,error ){if _fbddf ,_cbad :=_gcf .(*Monochrome );_cbad {return _fbddf ,nil ;};_bgca :=_gcf .Bounds ();var _edbd Gray ;switch _bddg :=_gcf .(type ){case Gray :_edbd =_bddg ;case NRGBA :_edbd =&Gray8 {ImageBase :NewImageBase (_bgca .Max .X ,_bgca .Max .Y ,8,1,nil ,nil ,nil )};
_bdbf (_edbd ,_bddg ,_bgca );case nrgba64 :_edbd =&Gray8 {ImageBase :NewImageBase (_bgca .Max .X ,_bgca .Max .Y ,8,1,nil ,nil ,nil )};_eea (_edbd ,_bddg ,_bgca );default:_dfdg ,_accb :=GrayConverter .Convert (_gcf );if _accb !=nil {return nil ,_accb ;};
_edbd =_dfdg .(Gray );};_bfdce ,_gacc :=NewImage (_bgca .Max .X ,_bgca .Max .Y ,1,1,nil ,nil ,nil );if _gacc !=nil {return nil ,_gacc ;};_gea :=_bfdce .(*Monochrome );_bdb :=AutoThresholdTriangle (GrayHistogram (_edbd ));for _decb :=0;_decb < _bgca .Max .X ;
_decb ++{for _daa :=0;_daa < _bgca .Max .Y ;_daa ++{_bbb :=_ffdg (_edbd .GrayAt (_decb ,_daa ),monochromeModel (_bdb ));_gea .SetGray (_decb ,_daa ,_bbb );};};return _bfdce ,nil ;};func _eedg (_bdfe *Monochrome ,_dcbb ,_befbb ,_caaf ,_cbaa int ,_bdgac RasterOperator ,_eede *Monochrome ,_edae ,_befbg int )error {var (_cbbg byte ;
_fbeaf int ;_eebc int ;_geec ,_gffc int ;_dcea ,_fagd int ;);_acea :=_caaf >>3;_fbef :=_caaf &7;if _fbef > 0{_cbbg =_cdcf [_fbef ];};_fbeaf =_eede .BytesPerLine *_befbg +(_edae >>3);_eebc =_bdfe .BytesPerLine *_befbb +(_dcbb >>3);switch _bdgac {case PixSrc :for _dcea =0;
_dcea < _cbaa ;_dcea ++{_geec =_fbeaf +_dcea *_eede .BytesPerLine ;_gffc =_eebc +_dcea *_bdfe .BytesPerLine ;for _fagd =0;_fagd < _acea ;_fagd ++{_bdfe .Data [_gffc ]=_eede .Data [_geec ];_gffc ++;_geec ++;};if _fbef > 0{_bdfe .Data [_gffc ]=_bbegf (_bdfe .Data [_gffc ],_eede .Data [_geec ],_cbbg );
};};case PixNotSrc :for _dcea =0;_dcea < _cbaa ;_dcea ++{_geec =_fbeaf +_dcea *_eede .BytesPerLine ;_gffc =_eebc +_dcea *_bdfe .BytesPerLine ;for _fagd =0;_fagd < _acea ;_fagd ++{_bdfe .Data [_gffc ]=^(_eede .Data [_geec ]);_gffc ++;_geec ++;};if _fbef > 0{_bdfe .Data [_gffc ]=_bbegf (_bdfe .Data [_gffc ],^_eede .Data [_geec ],_cbbg );
};};case PixSrcOrDst :for _dcea =0;_dcea < _cbaa ;_dcea ++{_geec =_fbeaf +_dcea *_eede .BytesPerLine ;_gffc =_eebc +_dcea *_bdfe .BytesPerLine ;for _fagd =0;_fagd < _acea ;_fagd ++{_bdfe .Data [_gffc ]|=_eede .Data [_geec ];_gffc ++;_geec ++;};if _fbef > 0{_bdfe .Data [_gffc ]=_bbegf (_bdfe .Data [_gffc ],_eede .Data [_geec ]|_bdfe .Data [_gffc ],_cbbg );
};};case PixSrcAndDst :for _dcea =0;_dcea < _cbaa ;_dcea ++{_geec =_fbeaf +_dcea *_eede .BytesPerLine ;_gffc =_eebc +_dcea *_bdfe .BytesPerLine ;for _fagd =0;_fagd < _acea ;_fagd ++{_bdfe .Data [_gffc ]&=_eede .Data [_geec ];_gffc ++;_geec ++;};if _fbef > 0{_bdfe .Data [_gffc ]=_bbegf (_bdfe .Data [_gffc ],_eede .Data [_geec ]&_bdfe .Data [_gffc ],_cbbg );
};};case PixSrcXorDst :for _dcea =0;_dcea < _cbaa ;_dcea ++{_geec =_fbeaf +_dcea *_eede .BytesPerLine ;_gffc =_eebc +_dcea *_bdfe .BytesPerLine ;for _fagd =0;_fagd < _acea ;_fagd ++{_bdfe .Data [_gffc ]^=_eede .Data [_geec ];_gffc ++;_geec ++;};if _fbef > 0{_bdfe .Data [_gffc ]=_bbegf (_bdfe .Data [_gffc ],_eede .Data [_geec ]^_bdfe .Data [_gffc ],_cbbg );
};};case PixNotSrcOrDst :for _dcea =0;_dcea < _cbaa ;_dcea ++{_geec =_fbeaf +_dcea *_eede .BytesPerLine ;_gffc =_eebc +_dcea *_bdfe .BytesPerLine ;for _fagd =0;_fagd < _acea ;_fagd ++{_bdfe .Data [_gffc ]|=^(_eede .Data [_geec ]);_gffc ++;_geec ++;};if _fbef > 0{_bdfe .Data [_gffc ]=_bbegf (_bdfe .Data [_gffc ],^(_eede .Data [_geec ])|_bdfe .Data [_gffc ],_cbbg );
};};case PixNotSrcAndDst :for _dcea =0;_dcea < _cbaa ;_dcea ++{_geec =_fbeaf +_dcea *_eede .BytesPerLine ;_gffc =_eebc +_dcea *_bdfe .BytesPerLine ;for _fagd =0;_fagd < _acea ;_fagd ++{_bdfe .Data [_gffc ]&=^(_eede .Data [_geec ]);_gffc ++;_geec ++;};if _fbef > 0{_bdfe .Data [_gffc ]=_bbegf (_bdfe .Data [_gffc ],^(_eede .Data [_geec ])&_bdfe .Data [_gffc ],_cbbg );
};};case PixSrcOrNotDst :for _dcea =0;_dcea < _cbaa ;_dcea ++{_geec =_fbeaf +_dcea *_eede .BytesPerLine ;_gffc =_eebc +_dcea *_bdfe .BytesPerLine ;for _fagd =0;_fagd < _acea ;_fagd ++{_bdfe .Data [_gffc ]=_eede .Data [_geec ]|^(_bdfe .Data [_gffc ]);_gffc ++;
_geec ++;};if _fbef > 0{_bdfe .Data [_gffc ]=_bbegf (_bdfe .Data [_gffc ],_eede .Data [_geec ]|^(_bdfe .Data [_gffc ]),_cbbg );};};case PixSrcAndNotDst :for _dcea =0;_dcea < _cbaa ;_dcea ++{_geec =_fbeaf +_dcea *_eede .BytesPerLine ;_gffc =_eebc +_dcea *_bdfe .BytesPerLine ;
for _fagd =0;_fagd < _acea ;_fagd ++{_bdfe .Data [_gffc ]=_eede .Data [_geec ]&^(_bdfe .Data [_gffc ]);_gffc ++;_geec ++;};if _fbef > 0{_bdfe .Data [_gffc ]=_bbegf (_bdfe .Data [_gffc ],_eede .Data [_geec ]&^(_bdfe .Data [_gffc ]),_cbbg );};};case PixNotPixSrcOrDst :for _dcea =0;
_dcea < _cbaa ;_dcea ++{_geec =_fbeaf +_dcea *_eede .BytesPerLine ;_gffc =_eebc +_dcea *_bdfe .BytesPerLine ;for _fagd =0;_fagd < _acea ;_fagd ++{_bdfe .Data [_gffc ]=^(_eede .Data [_geec ]|_bdfe .Data [_gffc ]);_gffc ++;_geec ++;};if _fbef > 0{_bdfe .Data [_gffc ]=_bbegf (_bdfe .Data [_gffc ],^(_eede .Data [_geec ]|_bdfe .Data [_gffc ]),_cbbg );
};};case PixNotPixSrcAndDst :for _dcea =0;_dcea < _cbaa ;_dcea ++{_geec =_fbeaf +_dcea *_eede .BytesPerLine ;_gffc =_eebc +_dcea *_bdfe .BytesPerLine ;for _fagd =0;_fagd < _acea ;_fagd ++{_bdfe .Data [_gffc ]=^(_eede .Data [_geec ]&_bdfe .Data [_gffc ]);
_gffc ++;_geec ++;};if _fbef > 0{_bdfe .Data [_gffc ]=_bbegf (_bdfe .Data [_gffc ],^(_eede .Data [_geec ]&_bdfe .Data [_gffc ]),_cbbg );};};case PixNotPixSrcXorDst :for _dcea =0;_dcea < _cbaa ;_dcea ++{_geec =_fbeaf +_dcea *_eede .BytesPerLine ;_gffc =_eebc +_dcea *_bdfe .BytesPerLine ;
for _fagd =0;_fagd < _acea ;_fagd ++{_bdfe .Data [_gffc ]=^(_eede .Data [_geec ]^_bdfe .Data [_gffc ]);_gffc ++;_geec ++;};if _fbef > 0{_bdfe .Data [_gffc ]=_bbegf (_bdfe .Data [_gffc ],^(_eede .Data [_geec ]^_bdfe .Data [_gffc ]),_cbbg );};};default:_e .Log .Debug ("\u0050\u0072ov\u0069\u0064\u0065d\u0020\u0069\u006e\u0076ali\u0064 r\u0061\u0073\u0074\u0065\u0072\u0020\u006fpe\u0072\u0061\u0074\u006f\u0072\u003a\u0020%\u0076",_bdgac );
return _f .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");};return nil ;};func _dd (_cfe *Monochrome ,_df int ,_bf []uint )(*Monochrome ,error ){_bgd :=_df *_cfe .Width ;
_fc :=_df *_cfe .Height ;_gc :=_aab (_bgd ,_fc );for _gf ,_ec :=range _bf {var _ef error ;switch _ec {case 2:_ef =_bd (_gc ,_cfe );case 4:_ef =_gfe (_gc ,_cfe );case 8:_ef =_gca (_gc ,_cfe );};if _ef !=nil {return nil ,_ef ;};if _gf !=len (_bf )-1{_cfe =_gc .copy ();
};};return _gc ,nil ;};type Gray4 struct{ImageBase };func ColorAtCMYK (x ,y ,width int ,data []byte ,decode []float64 )(_cg .CMYK ,error ){_dbf :=4*(y *width +x );if _dbf +3>=len (data ){return _cg .CMYK {},_cf .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};C :=data [_dbf ]&0xff;M :=data [_dbf +1]&0xff;Y :=data [_dbf +2]&0xff;K :=data [_dbf +3]&0xff;if len (decode )==8{C =uint8 (uint32 (LinearInterpolate (float64 (C ),0,255,decode [0],decode [1]))&0xff);M =uint8 (uint32 (LinearInterpolate (float64 (M ),0,255,decode [2],decode [3]))&0xff);
Y =uint8 (uint32 (LinearInterpolate (float64 (Y ),0,255,decode [4],decode [5]))&0xff);K =uint8 (uint32 (LinearInterpolate (float64 (K ),0,255,decode [6],decode [7]))&0xff);};return _cg .CMYK {C :C ,M :M ,Y :Y ,K :K },nil ;};func (_eebde *NRGBA64 )setNRGBA64 (_bfde int ,_gbbd _cg .NRGBA64 ,_eccb int ){_eebde .Data [_bfde ]=uint8 (_gbbd .R >>8);
_eebde .Data [_bfde +1]=uint8 (_gbbd .R &0xff);_eebde .Data [_bfde +2]=uint8 (_gbbd .G >>8);_eebde .Data [_bfde +3]=uint8 (_gbbd .G &0xff);_eebde .Data [_bfde +4]=uint8 (_gbbd .B >>8);_eebde .Data [_bfde +5]=uint8 (_gbbd .B &0xff);if _eccb +1< len (_eebde .Alpha ){_eebde .Alpha [_eccb ]=uint8 (_gbbd .A >>8);
_eebde .Alpha [_eccb +1]=uint8 (_gbbd .A &0xff);};};func (_dbca *Gray8 )Bounds ()_be .Rectangle {return _be .Rectangle {Max :_be .Point {X :_dbca .Width ,Y :_dbca .Height }};};func _ebc (_eeca NRGBA ,_bab CMYK ,_cda _be .Rectangle ){for _ebd :=0;_ebd < _cda .Max .X ;
_ebd ++{for _cab :=0;_cab < _cda .Max .Y ;_cab ++{_ddeb :=_eeca .NRGBAAt (_ebd ,_cab );_bab .SetCMYK (_ebd ,_cab ,_age (_ddeb ));};};};func (_gcac *Monochrome )clearBit (_cebgc ,_egac int ){_gcac .Data [_cebgc ]&=^(0x80>>uint (_egac &7))};func (_agef *Monochrome )ColorModel ()_cg .Model {return MonochromeModel (_agef .ModelThreshold )};
type CMYK interface{CMYKAt (_aba ,_dcf int )_cg .CMYK ;SetCMYK (_abb ,_debb int ,_ebagg _cg .CMYK );};func (_bgge *NRGBA32 )ColorModel ()_cg .Model {return _cg .NRGBAModel };func (_cbbe *NRGBA16 )Validate ()error {if len (_cbbe .Data )!=3*_cbbe .Width *_cbbe .Height /2{return _f .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};func _aacd (_dfeac *_be .Gray16 ,_gcba uint8 )*_be .Gray {_decbc :=_dfeac .Bounds ();_aedg :=_be .NewGray (_decbc );for _eddeg :=0;_eddeg < _decbc .Dx ();_eddeg ++{for _gbgf :=0;_gbgf < _decbc .Dy ();_gbgf ++{_ggbg :=_dfeac .Gray16At (_eddeg ,_gbgf );
_aedg .SetGray (_eddeg ,_gbgf ,_cg .Gray {Y :_dgee (uint8 (_ggbg .Y /256),_gcba )});};};return _aedg ;};func _bdf (_adeae _cg .NRGBA )_cg .Gray {_dfbe ,_bafbe ,_dfa ,_ :=_adeae .RGBA ();_cbb :=(19595*_dfbe +38470*_bafbe +7471*_dfa +1<<15)>>24;return _cg .Gray {Y :uint8 (_cbb )};
};func (_gdaaf *Gray16 )Bounds ()_be .Rectangle {return _be .Rectangle {Max :_be .Point {X :_gdaaf .Width ,Y :_gdaaf .Height }};};func (_eaagf *NRGBA64 )Copy ()Image {return &NRGBA64 {ImageBase :_eaagf .copy ()}};func (_aadd *Gray16 )Histogram ()(_ecdg [256]int ){for _ffea :=0;
_ffea < _aadd .Width ;_ffea ++{for _fded :=0;_fded < _aadd .Height ;_fded ++{_ecdg [_aadd .GrayAt (_ffea ,_fded ).Y ]++;};};return _ecdg ;};type Gray interface{GrayAt (_ecb ,_bbed int )_cg .Gray ;SetGray (_ecc ,_aeg int ,_fga _cg .Gray );};var _ _be .Image =&Gray8 {};
func (_eebe *NRGBA64 )Bounds ()_be .Rectangle {return _be .Rectangle {Max :_be .Point {X :_eebe .Width ,Y :_eebe .Height }};};func (_ddag *Gray8 )Histogram ()(_bcaf [256]int ){for _ccbd :=0;_ccbd < len (_ddag .Data );_ccbd ++{_bcaf [_ddag .Data [_ccbd ]]++;
};return _bcaf ;};func _aega (_ddgc []byte ,_caad Image )error {_egbe :=true ;for _bcbbg :=0;_bcbbg < len (_ddgc );_bcbbg ++{if _ddgc [_bcbbg ]!=0xff{_egbe =false ;break ;};};if _egbe {switch _ggffe :=_caad .(type ){case *NRGBA32 :_ggffe .Alpha =nil ;case *NRGBA64 :_ggffe .Alpha =nil ;
default:return _cf .Errorf ("i\u006ete\u0072n\u0061l\u0020\u0065\u0072\u0072\u006fr\u0020\u002d\u0020i\u006d\u0061\u0067\u0065\u0020s\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070e\u0020\u002a\u004eRGB\u0041\u0033\u0032\u0020\u006f\u0072 \u002a\u004e\u0052\u0047\u0042\u0041\u0036\u0034\u0020\u0062\u0075\u0074 \u0069s\u003a\u0020\u0025\u0054",_caad );
};};return nil ;};func _gdbb (_fedfa ,_agdf NRGBA ,_cfeec _be .Rectangle ){for _ceed :=0;_ceed < _cfeec .Max .X ;_ceed ++{for _dbdf :=0;_dbdf < _cfeec .Max .Y ;_dbdf ++{_agdf .SetNRGBA (_ceed ,_dbdf ,_fedfa .NRGBAAt (_ceed ,_dbdf ));};};};func (_agbg *Gray4 )ColorModel ()_cg .Model {return Gray4Model };
func (_cecc *CMYK32 )Base ()*ImageBase {return &_cecc .ImageBase };func (_dgb *Monochrome )getBitAt (_dcefb ,_cag int )bool {_fab :=_cag *_dgb .BytesPerLine +(_dcefb >>3);_faba :=_dcefb &0x07;_eebaf :=uint (7-_faba );if _fab > len (_dgb .Data )-1{return false ;
};if (_dgb .Data [_fab ]>>_eebaf )&0x01>=1{return true ;};return false ;};func (_efge *ImageBase )HasAlpha ()bool {if _efge .Alpha ==nil {return false ;};for _gecc :=range _efge .Alpha {if _efge .Alpha [_gecc ]!=0xff{return true ;};};return false ;};func ColorAtGray4BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_cg .Gray ,error ){_ddbb :=y *bytesPerLine +x >>1;
if _ddbb >=len (data ){return _cg .Gray {},_cf .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_eecb :=data [_ddbb ]>>uint (4-(x &1)*4)&0xf;if len (decode )==2{_eecb =uint8 (uint32 (LinearInterpolate (float64 (_eecb ),0,15,decode [0],decode [1]))&0xf);};return _cg .Gray {Y :_eecb *17&0xff},nil ;};func (_baca *Gray4 )Base ()*ImageBase {return &_baca .ImageBase };
func (_dgdf *Gray2 )SetGray (x ,y int ,gray _cg .Gray ){_dae :=_dgdc (gray );_bcbb :=y *_dgdf .BytesPerLine ;_cbdd :=_bcbb +(x >>2);if _cbdd >=len (_dgdf .Data ){return ;};_dcac :=_dae .Y >>6;_dgdf .Data [_cbdd ]=(_dgdf .Data [_cbdd ]&(^(0xc0>>uint (2*((x )&3)))))|(_dcac <<uint (6-2*(x &3)));
};type NRGBA32 struct{ImageBase };func (_badg *Gray2 )ColorAt (x ,y int )(_cg .Color ,error ){return ColorAtGray2BPC (x ,y ,_badg .BytesPerLine ,_badg .Data ,_badg .Decode );};func (_cbebd *Gray8 )SetGray (x ,y int ,g _cg .Gray ){_cabg :=y *_cbebd .BytesPerLine +x ;
if _cabg > len (_cbebd .Data )-1{return ;};_cbebd .Data [_cabg ]=g .Y ;};func (_ageb *Monochrome )Base ()*ImageBase {return &_ageb .ImageBase };func (_cbda *Gray8 )GrayAt (x ,y int )_cg .Gray {_eefc ,_ :=ColorAtGray8BPC (x ,y ,_cbda .BytesPerLine ,_cbda .Data ,_cbda .Decode );
return _eefc ;};func _dfde (_gce _cg .CMYK )_cg .NRGBA {_ecf ,_dfdc ,_ced :=_cg .CMYKToRGB (_gce .C ,_gce .M ,_gce .Y ,_gce .K );return _cg .NRGBA {R :_ecf ,G :_dfdc ,B :_ced ,A :0xff};};func (_bdgacc *NRGBA32 )Copy ()Image {return &NRGBA32 {ImageBase :_bdgacc .copy ()}};
func (_ddea *ImageBase )setTwoBytes (_egba int ,_cada uint16 )error {if _egba +1> len (_ddea .Data )-1{return _f .New ("\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");};_ddea .Data [_egba ]=byte ((_cada &0xff00)>>8);
_ddea .Data [_egba +1]=byte (_cada &0xff);return nil ;};func (_cdfc *Gray16 )SetGray (x ,y int ,g _cg .Gray ){_ccea :=(y *_cdfc .BytesPerLine /2+x )*2;if _ccea +1>=len (_cdfc .Data ){return ;};_cdfc .Data [_ccea ]=g .Y ;_cdfc .Data [_ccea +1]=g .Y ;};func _bgcc (_adaf _cg .CMYK )_cg .RGBA {_dcef ,_debba ,_faa :=_cg .CMYKToRGB (_adaf .C ,_adaf .M ,_adaf .Y ,_adaf .K );
return _cg .RGBA {R :_dcef ,G :_debba ,B :_faa ,A :0xff};};type NRGBA interface{NRGBAAt (_eedd ,_ebab int )_cg .NRGBA ;SetNRGBA (_bbdd ,_dfaa int ,_febcf _cg .NRGBA );};func (_cbf *Gray2 )Set (x ,y int ,c _cg .Color ){if x >=_cbf .Width ||y >=_cbf .Height {return ;
};_ffe :=Gray2Model .Convert (c ).(_cg .Gray );_dfga :=y *_cbf .BytesPerLine ;_ddad :=_dfga +(x >>2);_eee :=_ffe .Y >>6;_cbf .Data [_ddad ]=(_cbf .Data [_ddad ]&(^(0xc0>>uint (2*((x )&3)))))|(_eee <<uint (6-2*(x &3)));};func (_ccbga *RGBA32 )Set (x ,y int ,c _cg .Color ){_fgba :=y *_ccbga .Width +x ;
_fefge :=3*_fgba ;if _fefge +2>=len (_ccbga .Data ){return ;};_ffdb :=_cg .RGBAModel .Convert (c ).(_cg .RGBA );_ccbga .setRGBA (_fgba ,_ffdb );};func (_ggdc *Monochrome )getBit (_ebga ,_fbf int )uint8 {return _ggdc .Data [_ebga +(_fbf >>3)]>>uint (7-(_fbf &7))&1;
};func (_dgdeb *Gray16 )ColorModel ()_cg .Model {return _cg .Gray16Model };func (_bed *Gray2 )GrayAt (x ,y int )_cg .Gray {_fcd ,_ :=ColorAtGray2BPC (x ,y ,_bed .BytesPerLine ,_bed .Data ,_bed .Decode );return _fcd ;};func (_bgda *NRGBA16 )Bounds ()_be .Rectangle {return _be .Rectangle {Max :_be .Point {X :_bgda .Width ,Y :_bgda .Height }};
};type CMYK32 struct{ImageBase };func _gfdf (_adbg _be .Image )(Image ,error ){if _agbga ,_eefa :=_adbg .(*NRGBA32 );_eefa {return _agbga .Copy (),nil ;};_cdee ,_fega ,_fcgb :=_fbce (_adbg ,1);_bbcgc ,_fabbd :=NewImage (_cdee .Max .X ,_cdee .Max .Y ,8,3,nil ,_fcgb ,nil );
if _fabbd !=nil {return nil ,_fabbd ;};_eabd (_adbg ,_bbcgc ,_cdee );if len (_fcgb )!=0&&!_fega {if _gfde :=_aega (_fcgb ,_bbcgc );_gfde !=nil {return nil ,_gfde ;};};return _bbcgc ,nil ;};var _agde [256]uint8 ;func (_eeba *CMYK32 )Validate ()error {if len (_eeba .Data )!=4*_eeba .Width *_eeba .Height {return _f .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};var _ _be .Image =&Gray2 {};type Monochrome struct{ImageBase ;ModelThreshold uint8 ;};func (_ged *Gray4 )Histogram ()(_agbe [256]int ){for _cgdg :=0;_cgdg < _ged .Width ;_cgdg ++{for _febe :=0;_febe < _ged .Height ;_febe ++{_agbe [_ged .GrayAt (_cgdg ,_febe ).Y ]++;
};};return _agbe ;};func _bcgec (_ccc _cg .NRGBA64 )_cg .Gray {var _gbc _cg .NRGBA64 ;if _ccc ==_gbc {return _cg .Gray {Y :0xff};};_fcfd ,_ggdb ,_acbb ,_ :=_ccc .RGBA ();_fdc :=(19595*_fcfd +38470*_ggdb +7471*_acbb +1<<15)>>24;return _cg .Gray {Y :uint8 (_fdc )};
};func (_gfc *RGBA32 )RGBAAt (x ,y int )_cg .RGBA {_dbdg ,_ :=ColorAtRGBA32 (x ,y ,_gfc .Width ,_gfc .Data ,_gfc .Alpha ,_gfc .Decode );return _dbdg ;};func (_abcd *Gray2 )ColorModel ()_cg .Model {return Gray2Model };func GrayHistogram (g Gray )(_eebg [256]int ){switch _ddfa :=g .(type ){case Histogramer :return _ddfa .Histogram ();
case _be .Image :_dccd :=_ddfa .Bounds ();for _ggefc :=0;_ggefc < _dccd .Max .X ;_ggefc ++{for _caec :=0;_caec < _dccd .Max .Y ;_caec ++{_eebg [g .GrayAt (_ggefc ,_caec ).Y ]++;};};return _eebg ;default:return [256]int {};};};var _ Gray =&Monochrome {};
func (_adff *Gray4 )setGray (_adde int ,_aec int ,_bdba _cg .Gray ){_babag :=_aec *_adff .BytesPerLine ;_edbdg :=_babag +(_adde >>1);if _edbdg >=len (_adff .Data ){return ;};_dag :=_bdba .Y >>4;_adff .Data [_edbdg ]=(_adff .Data [_edbdg ]&(^(0xf0>>uint (4*(_adde &1)))))|(_dag <<uint (4-4*(_adde &1)));
};func ImgToBinary (i _be .Image ,threshold uint8 )*_be .Gray {switch _ebbg :=i .(type ){case *_be .Gray :if _gfaf (_ebbg ){return _ebbg ;};return _cgfd (_ebbg ,threshold );case *_be .Gray16 :return _aacd (_ebbg ,threshold );default:return _fbeg (_ebbg ,threshold );
};};func _fbce (_ddecd _be .Image ,_cdff int )(_be .Rectangle ,bool ,[]byte ){_dfag :=_ddecd .Bounds ();var (_gebb bool ;_ceeca []byte ;);switch _gefeb :=_ddecd .(type ){case SMasker :_gebb =_gefeb .HasAlpha ();case NRGBA ,RGBA ,*_be .RGBA64 ,nrgba64 ,*_be .NYCbCrA :_ceeca =make ([]byte ,_dfag .Max .X *_dfag .Max .Y *_cdff );
case *_be .Paletted :if !_gefeb .Opaque (){_ceeca =make ([]byte ,_dfag .Max .X *_dfag .Max .Y *_cdff );};};return _dfag ,_gebb ,_ceeca ;};func _cdd (_bfa _be .Image ,_dcff Image ,_dfc _be .Rectangle ){for _adf :=0;_adf < _dfc .Max .X ;_adf ++{for _adea :=0;
_adea < _dfc .Max .Y ;_adea ++{_bddd :=_bfa .At (_adf ,_adea );_dcff .Set (_adf ,_adea ,_bddd );};};};func (_gac *CMYK32 )CMYKAt (x ,y int )_cg .CMYK {_agaf ,_ :=ColorAtCMYK (x ,y ,_gac .Width ,_gac .Data ,_gac .Decode );return _agaf ;};func _gfd (_fd ,_fbdd int ,_deee []byte )*Monochrome {_egf :=_aab (_fd ,_fbdd );
_egf .Data =_deee ;return _egf ;};var _ Image =&NRGBA64 {};func (_cad *Monochrome )ScaleLow (width ,height int )(*Monochrome ,error ){if width < 0||height < 0{return nil ,_f .New ("\u0070\u0072\u006f\u0076\u0069\u0064e\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0077\u0069\u0064t\u0068\u0020\u0061\u006e\u0064\u0020\u0068e\u0069\u0067\u0068\u0074");
};_ffbf :=_aab (width ,height );_faaa :=make ([]int ,height );_gafd :=make ([]int ,width );_geaf :=float64 (_cad .Width )/float64 (width );_cebf :=float64 (_cad .Height )/float64 (height );for _dddb :=0;_dddb < height ;_dddb ++{_faaa [_dddb ]=int (_b .Min (_cebf *float64 (_dddb )+0.5,float64 (_cad .Height -1)));
};for _fedd :=0;_fedd < width ;_fedd ++{_gafd [_fedd ]=int (_b .Min (_geaf *float64 (_fedd )+0.5,float64 (_cad .Width -1)));};_fccd :=-1;_cdef :=byte (0);for _gdaf :=0;_gdaf < height ;_gdaf ++{_ccgg :=_faaa [_gdaf ]*_cad .BytesPerLine ;_cefc :=_gdaf *_ffbf .BytesPerLine ;
for _cbge :=0;_cbge < width ;_cbge ++{_acbd :=_gafd [_cbge ];if _acbd !=_fccd {_cdef =_cad .getBit (_ccgg ,_acbd );if _cdef !=0{_ffbf .setBit (_cefc ,_cbge );};_fccd =_acbd ;}else {if _cdef !=0{_ffbf .setBit (_cefc ,_cbge );};};};};return _ffbf ,nil ;};
func (_cff *CMYK32 )At (x ,y int )_cg .Color {_deec ,_ :=_cff .ColorAt (x ,y );return _deec };func _efg (_badgd ,_cefa Gray ,_eefgb _be .Rectangle ){for _cadg :=0;_cadg < _eefgb .Max .X ;_cadg ++{for _cfce :=0;_cfce < _eefgb .Max .Y ;_cfce ++{_cefa .SetGray (_cadg ,_cfce ,_badgd .GrayAt (_cadg ,_cfce ));
};};};type monochromeModel uint8 ;func (_dggc *Monochrome )ReduceBinary (factor float64 )(*Monochrome ,error ){_gcgb :=_ddfd (uint (factor ));if !IsPowerOf2 (uint (factor )){_gcgb ++;};_aae :=make ([]int ,_gcgb );for _ebad :=range _aae {_aae [_ebad ]=4;
};_bbfb ,_fdg :=_abe (_dggc ,_aae ...);if _fdg !=nil {return nil ,_fdg ;};return _bbfb ,nil ;};func (_ddaa *NRGBA16 )Copy ()Image {return &NRGBA16 {ImageBase :_ddaa .copy ()}};