//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package imageutil ;import (_d "encoding/binary";_bb "errors";_fb "fmt";_c "github.com/unidoc/unipdf/v3/common";_bba "github.com/unidoc/unipdf/v3/internal/bitwise";_bff "image";_bg "image/color";_bf "image/draw";_f "math";);func (_gdcac *NRGBA16 )SetNRGBA (x ,y int ,c _bg .NRGBA ){_ffcgd :=y *_gdcac .BytesPerLine +x *3/2;
if _ffcgd +1>=len (_gdcac .Data ){return ;};c =_gccb (c );_gdcac .setNRGBA (x ,y ,_ffcgd ,c );};func _eed (_ddd *Monochrome ,_gecg ...int )(_eedd *Monochrome ,_cg error ){if _ddd ==nil {return nil ,_bb .New ("\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");
};if len (_gecg )==0{return nil ,_bb .New ("\u0074h\u0065\u0072e\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020o\u006e\u0065\u0020\u006c\u0065\u0076\u0065\u006c\u0020\u006f\u0066 \u0072\u0065\u0064\u0075\u0063\u0074\u0069\u006f\u006e");
};_gdca :=_gefg ();_eedd =_ddd ;for _ ,_daf :=range _gecg {if _daf <=0{break ;};_eedd ,_cg =_eee (_eedd ,_daf ,_gdca );if _cg !=nil {return nil ,_cg ;};};return _eedd ,nil ;};func (_cadcd *Monochrome )Set (x ,y int ,c _bg .Color ){_fbfg :=y *_cadcd .BytesPerLine +x >>3;
if _fbfg > len (_cadcd .Data )-1{return ;};_ace :=_cadcd .ColorModel ().Convert (c ).(_bg .Gray );_cadcd .setGray (x ,_ace ,_fbfg );};var _ _bff .Image =&Gray16 {};func (_bdg *Monochrome )IsUnpadded ()bool {return (_bdg .Width *_bdg .Height )==len (_bdg .Data )};
func (_gfbb *Gray16 )Bounds ()_bff .Rectangle {return _bff .Rectangle {Max :_bff .Point {X :_gfbb .Width ,Y :_gfbb .Height }};};func (_bcc *Monochrome )clearBit (_baea ,_caad int ){_bcc .Data [_baea ]&=^(0x80>>uint (_caad &7))};func _gfbe (_cfc *Monochrome ,_aafa ,_fbdg ,_eegbd ,_cacb int ,_debbd RasterOperator ){if _aafa < 0{_eegbd +=_aafa ;
_aafa =0;};_abae :=_aafa +_eegbd -_cfc .Width ;if _abae > 0{_eegbd -=_abae ;};if _fbdg < 0{_cacb +=_fbdg ;_fbdg =0;};_fdea :=_fbdg +_cacb -_cfc .Height ;if _fdea > 0{_cacb -=_fdea ;};if _eegbd <=0||_cacb <=0{return ;};if (_aafa &7)==0{_cfeb (_cfc ,_aafa ,_fbdg ,_eegbd ,_cacb ,_debbd );
}else {_ffdc (_cfc ,_aafa ,_fbdg ,_eegbd ,_cacb ,_debbd );};};func _eace (_egbc *_bff .Gray ,_bgfc uint8 )*_bff .Gray {_eeed :=_egbc .Bounds ();_fac :=_bff .NewGray (_eeed );for _gdgd :=0;_gdgd < _eeed .Dx ();_gdgd ++{for _aea :=0;_aea < _eeed .Dy ();_aea ++{_egfd :=_egbc .GrayAt (_gdgd ,_aea );
_fac .SetGray (_gdgd ,_aea ,_bg .Gray {Y :_dadaf (_egfd .Y ,_bgfc )});};};return _fac ;};func (_cebe *Monochrome )setGray (_bga int ,_gdeeca _bg .Gray ,_gadc int ){if _gdeeca .Y ==0{_cebe .clearBit (_gadc ,_bga );}else {_cebe .setGrayBit (_gadc ,_bga );
};};func (_fdd *NRGBA16 )ColorAt (x ,y int )(_bg .Color ,error ){return ColorAtNRGBA16 (x ,y ,_fdd .Width ,_fdd .BytesPerLine ,_fdd .Data ,_fdd .Alpha ,_fdd .Decode );};func _fbbb (_fcb _bg .NRGBA )_bg .Gray {_faa ,_cef ,_dcde ,_ :=_fcb .RGBA ();_cbdf :=(19595*_faa +38470*_cef +7471*_dcde +1<<15)>>24;
return _bg .Gray {Y :uint8 (_cbdf )};};var _ Gray =&Gray4 {};func _cfeb (_cafd *Monochrome ,_gcage ,_gdaf int ,_acbd ,_gbfa int ,_ecfd RasterOperator ){var (_affb int ;_aagg byte ;_cfef ,_caga int ;_dgcda int ;);_dbgef :=_acbd >>3;_bgdd :=_acbd &7;if _bgdd > 0{_aagg =_adeg [_bgdd ];
};_affb =_cafd .BytesPerLine *_gdaf +(_gcage >>3);switch _ecfd {case PixClr :for _cfef =0;_cfef < _gbfa ;_cfef ++{_dgcda =_affb +_cfef *_cafd .BytesPerLine ;for _caga =0;_caga < _dbgef ;_caga ++{_cafd .Data [_dgcda ]=0x0;_dgcda ++;};if _bgdd > 0{_cafd .Data [_dgcda ]=_gdcga (_cafd .Data [_dgcda ],0x0,_aagg );
};};case PixSet :for _cfef =0;_cfef < _gbfa ;_cfef ++{_dgcda =_affb +_cfef *_cafd .BytesPerLine ;for _caga =0;_caga < _dbgef ;_caga ++{_cafd .Data [_dgcda ]=0xff;_dgcda ++;};if _bgdd > 0{_cafd .Data [_dgcda ]=_gdcga (_cafd .Data [_dgcda ],0xff,_aagg );
};};case PixNotDst :for _cfef =0;_cfef < _gbfa ;_cfef ++{_dgcda =_affb +_cfef *_cafd .BytesPerLine ;for _caga =0;_caga < _dbgef ;_caga ++{_cafd .Data [_dgcda ]=^_cafd .Data [_dgcda ];_dgcda ++;};if _bgdd > 0{_cafd .Data [_dgcda ]=_gdcga (_cafd .Data [_dgcda ],^_cafd .Data [_dgcda ],_aagg );
};};};};func (_dgag *Gray4 )setGray (_fbea int ,_afdf int ,_bbbg _bg .Gray ){_gcef :=_afdf *_dgag .BytesPerLine ;_ffg :=_gcef +(_fbea >>1);if _ffg >=len (_dgag .Data ){return ;};_cag :=_bbbg .Y >>4;_dgag .Data [_ffg ]=(_dgag .Data [_ffg ]&(^(0xf0>>uint (4*(_fbea &1)))))|(_cag <<uint (4-4*(_fbea &1)));
};func _cd (_eba int )[]uint {var _bd []uint ;_dde :=_eba ;_ggfg :=_dde /8;if _ggfg !=0{for _cac :=0;_cac < _ggfg ;_cac ++{_bd =append (_bd ,8);};_gb :=_dde %8;_dde =0;if _gb !=0{_dde =_gb ;};};_ade :=_dde /4;if _ade !=0{for _eeb :=0;_eeb < _ade ;_eeb ++{_bd =append (_bd ,4);
};_agd :=_dde %4;_dde =0;if _agd !=0{_dde =_agd ;};};_gge :=_dde /2;if _gge !=0{for _fga :=0;_fga < _gge ;_fga ++{_bd =append (_bd ,2);};};return _bd ;};func (_eegd *Gray2 )Set (x ,y int ,c _bg .Color ){if x >=_eegd .Width ||y >=_eegd .Height {return ;
};_gfgb :=Gray2Model .Convert (c ).(_bg .Gray );_ddae :=y *_eegd .BytesPerLine ;_aaf :=_ddae +(x >>2);_ece :=_gfgb .Y >>6;_eegd .Data [_aaf ]=(_eegd .Data [_aaf ]&(^(0xc0>>uint (2*((x )&3)))))|(_ece <<uint (6-2*(x &3)));};func (_gdfg *Gray2 )ColorModel ()_bg .Model {return Gray2Model };
func (_gdffg *NRGBA16 )Copy ()Image {return &NRGBA16 {ImageBase :_gdffg .copy ()}};func ConverterFunc (converterFunc func (_gfda _bff .Image )(Image ,error ))ColorConverter {return colorConverter {_fafd :converterFunc };};func (_egcd *RGBA32 )ColorModel ()_bg .Model {return _bg .NRGBAModel };
func _dfcd (_fgbdgc *_bff .NYCbCrA ,_acdg NRGBA ,_fcfb _bff .Rectangle ){for _fcgc :=0;_fcgc < _fcfb .Max .X ;_fcgc ++{for _daggc :=0;_daggc < _fcfb .Max .Y ;_daggc ++{_acee :=_fgbdgc .NYCbCrAAt (_fcgc ,_daggc );_acdg .SetNRGBA (_fcgc ,_daggc ,_ebee (_acee ));
};};};func _afe (_ccfb *Monochrome ,_dccg ,_befc ,_ffaa ,_ddfc int ,_dcdgg RasterOperator ,_ffdf *Monochrome ,_afgc ,_gfc int )error {if _ccfb ==nil {return _bb .New ("\u006e\u0069\u006c\u0020\u0027\u0064\u0065\u0073\u0074\u0027\u0020\u0042i\u0074\u006d\u0061\u0070");
};if _dcdgg ==PixDst {return nil ;};switch _dcdgg {case PixClr ,PixSet ,PixNotDst :_gfbe (_ccfb ,_dccg ,_befc ,_ffaa ,_ddfc ,_dcdgg );return nil ;};if _ffdf ==nil {_c .Log .Debug ("\u0052a\u0073\u0074e\u0072\u004f\u0070\u0065r\u0061\u0074\u0069o\u006e\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020bi\u0074\u006d\u0061p\u0020\u0069s\u0020\u006e\u006f\u0074\u0020\u0064e\u0066\u0069n\u0065\u0064");
return _bb .New ("\u006e\u0069l\u0020\u0027\u0073r\u0063\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _cbaf :=_ccac (_ccfb ,_dccg ,_befc ,_ffaa ,_ddfc ,_dcdgg ,_ffdf ,_afgc ,_gfc );_cbaf !=nil {return _cbaf ;};return nil ;};func _bbbb (_eeff _bg .Color )_bg .Color {_fbab :=_bg .GrayModel .Convert (_eeff ).(_bg .Gray );
return _bfgb (_fbab );};func (_cddb *Gray8 )ColorAt (x ,y int )(_bg .Color ,error ){return ColorAtGray8BPC (x ,y ,_cddb .BytesPerLine ,_cddb .Data ,_cddb .Decode );};func (_baa *Monochrome )setBit (_dbgg ,_gbfe int ){_baa .Data [_dbgg +(_gbfe >>3)]|=0x80>>uint (_gbfe &7);
};func ColorAtNRGBA16 (x ,y ,width ,bytesPerLine int ,data ,alpha []byte ,decode []float64 )(_bg .NRGBA ,error ){_abf :=y *bytesPerLine +x *3/2;if _abf +1>=len (data ){return _bg .NRGBA {},_eaba (x ,y );};const (_cdagd =0xf;_bcfd =uint8 (0xff););_fbbee :=_bcfd ;
if alpha !=nil {_abfb :=y *BytesPerLine (width ,4,1);if _abfb < len (alpha ){if x %2==0{_fbbee =(alpha [_abfb ]>>uint (4))&_cdagd ;}else {_fbbee =alpha [_abfb ]&_cdagd ;};_fbbee |=_fbbee <<4;};};var _ebca ,_gfaf ,_ddgbf uint8 ;if x *3%2==0{_ebca =(data [_abf ]>>uint (4))&_cdagd ;
_gfaf =data [_abf ]&_cdagd ;_ddgbf =(data [_abf +1]>>uint (4))&_cdagd ;}else {_ebca =data [_abf ]&_cdagd ;_gfaf =(data [_abf +1]>>uint (4))&_cdagd ;_ddgbf =data [_abf +1]&_cdagd ;};if len (decode )==6{_ebca =uint8 (uint32 (LinearInterpolate (float64 (_ebca ),0,15,decode [0],decode [1]))&0xf);
_gfaf =uint8 (uint32 (LinearInterpolate (float64 (_gfaf ),0,15,decode [2],decode [3]))&0xf);_ddgbf =uint8 (uint32 (LinearInterpolate (float64 (_ddgbf ),0,15,decode [4],decode [5]))&0xf);};return _bg .NRGBA {R :(_ebca <<4)|(_ebca &0xf),G :(_gfaf <<4)|(_gfaf &0xf),B :(_ddgbf <<4)|(_ddgbf &0xf),A :_fbbee },nil ;
};func (_caaf *ImageBase )setEightPartlyBytes (_fdcf ,_fbef int ,_fgddf uint64 )(_bbga error ){var (_gbfd byte ;_fbae int ;);for _cgcda :=1;_cgcda <=_fbef ;_cgcda ++{_fbae =64-_cgcda *8;_gbfd =byte (_fgddf >>uint (_fbae )&0xff);if _bbga =_caaf .setByte (_fdcf +_cgcda -1,_gbfd );
_bbga !=nil {return _bbga ;};};_bebeb :=_caaf .BytesPerLine *8-_caaf .Width ;if _bebeb ==0{return nil ;};_fbae -=8;_gbfd =byte (_fgddf >>uint (_fbae )&0xff)<<uint (_bebeb );if _bbga =_caaf .setByte (_fdcf +_fbef ,_gbfd );_bbga !=nil {return _bbga ;};return nil ;
};const (PixSrc RasterOperator =0xc;PixDst RasterOperator =0xa;PixNotSrc RasterOperator =0x3;PixNotDst RasterOperator =0x5;PixClr RasterOperator =0x0;PixSet RasterOperator =0xf;PixSrcOrDst RasterOperator =0xe;PixSrcAndDst RasterOperator =0x8;PixSrcXorDst RasterOperator =0x6;
PixNotSrcOrDst RasterOperator =0xb;PixNotSrcAndDst RasterOperator =0x2;PixSrcOrNotDst RasterOperator =0xd;PixSrcAndNotDst RasterOperator =0x4;PixNotPixSrcOrDst RasterOperator =0x1;PixNotPixSrcAndDst RasterOperator =0x7;PixNotPixSrcXorDst RasterOperator =0x9;
PixPaint =PixSrcOrDst ;PixSubtract =PixNotSrcAndDst ;PixMask =PixSrcAndDst ;);func (_efced *Gray4 )GrayAt (x ,y int )_bg .Gray {_egag ,_ :=ColorAtGray4BPC (x ,y ,_efced .BytesPerLine ,_efced .Data ,_efced .Decode );return _egag ;};func (_bffb *ImageBase )copy ()ImageBase {_gcea :=*_bffb ;
_gcea .Data =make ([]byte ,len (_bffb .Data ));copy (_gcea .Data ,_bffb .Data );return _gcea ;};func (_bbdd *RGBA32 )Base ()*ImageBase {return &_bbdd .ImageBase };func ColorAtGray4BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_bg .Gray ,error ){_adca :=y *bytesPerLine +x >>1;
if _adca >=len (data ){return _bg .Gray {},_fb .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_cffa :=data [_adca ]>>uint (4-(x &1)*4)&0xf;if len (decode )==2{_cffa =uint8 (uint32 (LinearInterpolate (float64 (_cffa ),0,15,decode [0],decode [1]))&0xf);};return _bg .Gray {Y :_cffa *17&0xff},nil ;};var (Gray2Model =_bg .ModelFunc (_bbbb );Gray4Model =_bg .ModelFunc (_caae );
NRGBA16Model =_bg .ModelFunc (_fff ););func (_eea *CMYK32 )Copy ()Image {return &CMYK32 {ImageBase :_eea .copy ()}};func ColorAtNRGBA (x ,y ,width ,bytesPerLine ,bitsPerColor int ,data ,alpha []byte ,decode []float64 )(_bg .Color ,error ){switch bitsPerColor {case 4:return ColorAtNRGBA16 (x ,y ,width ,bytesPerLine ,data ,alpha ,decode );
case 8:return ColorAtNRGBA32 (x ,y ,width ,data ,alpha ,decode );case 16:return ColorAtNRGBA64 (x ,y ,width ,data ,alpha ,decode );default:return nil ,_fb .Errorf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064 \u0072\u0067\u0062\u0020b\u0069\u0074\u0073\u0020\u0070\u0065\u0072\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u0061\u006d\u006f\u0075\u006e\u0074\u003a\u0020\u0027\u0025\u0064\u0027",bitsPerColor );
};};func (_cadda *ImageBase )setTwoBytes (_acg int ,_fbabb uint16 )error {if _acg +1> len (_cadda .Data )-1{return _bb .New ("\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");};_cadda .Data [_acg ]=byte ((_fbabb &0xff00)>>8);
_cadda .Data [_acg +1]=byte (_fbabb &0xff);return nil ;};func (_dbag *Gray2 )Bounds ()_bff .Rectangle {return _bff .Rectangle {Max :_bff .Point {X :_dbag .Width ,Y :_dbag .Height }};};func (_debg *Gray16 )ColorModel ()_bg .Model {return _bg .Gray16Model };
func (_gaca *NRGBA32 )NRGBAAt (x ,y int )_bg .NRGBA {_agaag ,_ :=ColorAtNRGBA32 (x ,y ,_gaca .Width ,_gaca .Data ,_gaca .Alpha ,_gaca .Decode );return _agaag ;};func _fdeb (_efbg ,_cbed CMYK ,_fda _bff .Rectangle ){for _acc :=0;_acc < _fda .Max .X ;_acc ++{for _beg :=0;
_beg < _fda .Max .Y ;_beg ++{_cbed .SetCMYK (_acc ,_beg ,_efbg .CMYKAt (_acc ,_beg ));};};};func (_gcfd *Gray16 )ColorAt (x ,y int )(_bg .Color ,error ){return ColorAtGray16BPC (x ,y ,_gcfd .BytesPerLine ,_gcfd .Data ,_gcfd .Decode );};func (_dafe *Monochrome )ResolveDecode ()error {if len (_dafe .Decode )!=2{return nil ;
};if _dafe .Decode [0]==1&&_dafe .Decode [1]==0{if _dbgc :=_dafe .InverseData ();_dbgc !=nil {return _dbgc ;};_dafe .Decode =nil ;};return nil ;};func (_ecdf *ImageBase )newAlpha (){_ccba :=BytesPerLine (_ecdf .Width ,_ecdf .BitsPerComponent ,1);_ecdf .Alpha =make ([]byte ,_ecdf .Height *_ccba );
};func _cdc (_eab NRGBA ,_bbaa CMYK ,_feb _bff .Rectangle ){for _gag :=0;_gag < _feb .Max .X ;_gag ++{for _dcc :=0;_dcc < _feb .Max .Y ;_dcc ++{_aac :=_eab .NRGBAAt (_gag ,_dcc );_bbaa .SetCMYK (_gag ,_dcc ,_gfg (_aac ));};};};func _egaf (_ccgaf int ,_bfea int )int {if _ccgaf < _bfea {return _ccgaf ;
};return _bfea ;};func _dadaf (_bdfgdg ,_ecdgg uint8 )uint8 {if _bdfgdg < _ecdgg {return 255;};return 0;};func _dcfg (_cbfe _bg .Gray ,_dfcc monochromeModel )_bg .Gray {if _cbfe .Y > uint8 (_dfcc ){return _bg .Gray {Y :_f .MaxUint8 };};return _bg .Gray {};
};func (_cbeg *RGBA32 )ColorAt (x ,y int )(_bg .Color ,error ){return ColorAtRGBA32 (x ,y ,_cbeg .Width ,_cbeg .Data ,_cbeg .Alpha ,_cbeg .Decode );};func (_gfae *Gray16 )Base ()*ImageBase {return &_gfae .ImageBase };func (_aadf *ImageBase )GetAlpha ()[]byte {return _aadf .Alpha };
func ColorAtNRGBA64 (x ,y ,width int ,data ,alpha []byte ,decode []float64 )(_bg .NRGBA64 ,error ){_daeg :=(y *width +x )*2;_dedd :=_daeg *3;if _dedd +5>=len (data ){return _bg .NRGBA64 {},_fb .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};const _dcbe =0xffff;_dage :=uint16 (_dcbe );if alpha !=nil &&len (alpha )> _daeg +1{_dage =uint16 (alpha [_daeg ])<<8|uint16 (alpha [_daeg +1]);};_ebfa :=uint16 (data [_dedd ])<<8|uint16 (data [_dedd +1]);_cccf :=uint16 (data [_dedd +2])<<8|uint16 (data [_dedd +3]);
_bee :=uint16 (data [_dedd +4])<<8|uint16 (data [_dedd +5]);if len (decode )==6{_ebfa =uint16 (uint64 (LinearInterpolate (float64 (_ebfa ),0,65535,decode [0],decode [1]))&_dcbe );_cccf =uint16 (uint64 (LinearInterpolate (float64 (_cccf ),0,65535,decode [2],decode [3]))&_dcbe );
_bee =uint16 (uint64 (LinearInterpolate (float64 (_bee ),0,65535,decode [4],decode [5]))&_dcbe );};return _bg .NRGBA64 {R :_ebfa ,G :_cccf ,B :_bee ,A :_dage },nil ;};func _dagg (_gcb _bff .Image )(Image ,error ){if _ffb ,_ebfda :=_gcb .(*Gray16 );_ebfda {return _ffb .Copy (),nil ;
};_ddfe :=_gcb .Bounds ();_bffcd ,_abcbe :=NewImage (_ddfe .Max .X ,_ddfe .Max .Y ,16,1,nil ,nil ,nil );if _abcbe !=nil {return nil ,_abcbe ;};_ccc (_gcb ,_bffcd ,_ddfe );return _bffcd ,nil ;};func _eaba (_bbgf int ,_dgeg int )error {return _fb .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",_bbgf ,_dgeg );
};func _dcfa (_ecce ,_aaad Gray ,_dfce _bff .Rectangle ){for _fcad :=0;_fcad < _dfce .Max .X ;_fcad ++{for _aagc :=0;_aagc < _dfce .Max .Y ;_aagc ++{_aaad .SetGray (_fcad ,_aagc ,_ecce .GrayAt (_fcad ,_aagc ));};};};func (_dcdg *Monochrome )ColorAt (x ,y int )(_bg .Color ,error ){return ColorAtGray1BPC (x ,y ,_dcdg .BytesPerLine ,_dcdg .Data ,_dcdg .Decode );
};func _dedf (_bfc _bg .NRGBA64 )_bg .NRGBA {return _bg .NRGBA {R :uint8 (_bfc .R >>8),G :uint8 (_bfc .G >>8),B :uint8 (_bfc .B >>8),A :uint8 (_bfc .A >>8)};};func (_cdde *NRGBA64 )NRGBA64At (x ,y int )_bg .NRGBA64 {_acbg ,_ :=ColorAtNRGBA64 (x ,y ,_cdde .Width ,_cdde .Data ,_cdde .Alpha ,_cdde .Decode );
return _acbg ;};func (_eeaa *Gray4 )Base ()*ImageBase {return &_eeaa .ImageBase };func _ccb (_acd ,_cca *Monochrome )(_gf error ){_gec :=_cca .BytesPerLine ;_dbab :=_acd .BytesPerLine ;_gef :=_cca .BytesPerLine *4-_acd .BytesPerLine ;var (_bce ,_ad byte ;
_dca uint32 ;_cbc ,_gd ,_ba ,_gcc ,_bcf ,_ee ,_da int ;);for _ba =0;_ba < _cca .Height ;_ba ++{_cbc =_ba *_gec ;_gd =4*_ba *_dbab ;for _gcc =0;_gcc < _gec ;_gcc ++{_bce =_cca .Data [_cbc +_gcc ];_dca =_abb [_bce ];_ee =_gd +_gcc *4;if _gef !=0&&(_gcc +1)*4> _acd .BytesPerLine {for _bcf =_gef ;
_bcf > 0;_bcf --{_ad =byte ((_dca >>uint (_bcf *8))&0xff);_da =_ee +(_gef -_bcf );if _gf =_acd .setByte (_da ,_ad );_gf !=nil {return _gf ;};};}else if _gf =_acd .setFourBytes (_ee ,_dca );_gf !=nil {return _gf ;};if _gf =_acd .setFourBytes (_gd +_gcc *4,_abb [_cca .Data [_cbc +_gcc ]]);
_gf !=nil {return _gf ;};};for _bcf =1;_bcf < 4;_bcf ++{for _gcc =0;_gcc < _dbab ;_gcc ++{if _gf =_acd .setByte (_gd +_bcf *_dbab +_gcc ,_acd .Data [_gd +_gcc ]);_gf !=nil {return _gf ;};};};};return nil ;};func (_gdda *ImageBase )setByte (_dagc int ,_ecdg byte )error {if _dagc > len (_gdda .Data )-1{return _bb .New ("\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_gdda .Data [_dagc ]=_ecdg ;return nil ;};func (_bbef *CMYK32 )ColorAt (x ,y int )(_bg .Color ,error ){return ColorAtCMYK (x ,y ,_bbef .Width ,_bbef .Data ,_bbef .Decode );};func (_fgba *CMYK32 )CMYKAt (x ,y int )_bg .CMYK {_aege ,_ :=ColorAtCMYK (x ,y ,_fgba .Width ,_fgba .Data ,_fgba .Decode );
return _aege ;};func _cead (_aeb _bg .CMYK )_bg .NRGBA {_dbae ,_fefd ,_edba :=_bg .CMYKToRGB (_aeb .C ,_aeb .M ,_aeb .Y ,_aeb .K );return _bg .NRGBA {R :_dbae ,G :_fefd ,B :_edba ,A :0xff};};func _deda (_gagfg _bff .Image ,_bfeb Image ,_fecef _bff .Rectangle ){if _feffa ,_cbgd :=_gagfg .(SMasker );
_cbgd &&_feffa .HasAlpha (){_bfeb .(SMasker ).MakeAlpha ();};_cde (_gagfg ,_bfeb ,_fecef );};func (_dbg *Monochrome )AddPadding ()(_ceff error ){if _bab :=((_dbg .Width *_dbg .Height )+7)>>3;len (_dbg .Data )< _bab {return _fb .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064a\u0074\u0061\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u003a\u0020\u0027\u0025\u0064\u0027\u002e\u0020\u0054\u0068\u0065\u0020\u0064\u0061t\u0061\u0020s\u0068\u006fu\u006c\u0064\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 l\u0065\u0061\u0073\u0074\u003a\u0020\u0027\u0025\u0064'\u0020\u0062\u0079\u0074\u0065\u0073",len (_dbg .Data ),_bab );
};_gfa :=_dbg .Width %8;if _gfa ==0{return nil ;};_fdb :=_dbg .Width /8;_cdad :=_bba .NewReader (_dbg .Data );_eebf :=make ([]byte ,_dbg .Height *_dbg .BytesPerLine );_eagf :=_bba .NewWriterMSB (_eebf );_gdce :=make ([]byte ,_fdb );var (_bgba int ;_gffb uint64 ;
);for _bgba =0;_bgba < _dbg .Height ;_bgba ++{if _ ,_ceff =_cdad .Read (_gdce );_ceff !=nil {return _ceff ;};if _ ,_ceff =_eagf .Write (_gdce );_ceff !=nil {return _ceff ;};if _gffb ,_ceff =_cdad .ReadBits (byte (_gfa ));_ceff !=nil {return _ceff ;};if _ceff =_eagf .WriteByte (byte (_gffb )<<uint (8-_gfa ));
_ceff !=nil {return _ceff ;};};_dbg .Data =_eagf .Data ();return nil ;};func (_adbe *Gray16 )SetGray (x ,y int ,g _bg .Gray ){_bdfd :=(y *_adbe .BytesPerLine /2+x )*2;if _bdfd +1>=len (_adbe .Data ){return ;};_adbe .Data [_bdfd ]=g .Y ;_adbe .Data [_bdfd +1]=g .Y ;
};func LinearInterpolate (x ,xmin ,xmax ,ymin ,ymax float64 )float64 {if _f .Abs (xmax -xmin )< 0.000001{return ymin ;};_gfee :=ymin +(x -xmin )*(ymax -ymin )/(xmax -xmin );return _gfee ;};type Gray interface{GrayAt (_dded ,_fecd int )_bg .Gray ;SetGray (_dcga ,_cbgg int ,_fbbe _bg .Gray );
};func init (){_bbf ()};func BytesPerLine (width ,bitsPerComponent ,colorComponents int )int {return ((width *bitsPerComponent )*colorComponents +7)>>3;};func (_bbec *Monochrome )Histogram ()(_ebb [256]int ){for _ ,_gagc :=range _bbec .Data {_ebb [0xff]+=int (_eddd [_bbec .Data [_gagc ]]);
};return _ebb ;};func (_gab *Gray8 )Validate ()error {if len (_gab .Data )!=_gab .Height *_gab .BytesPerLine {return ErrInvalidImage ;};return nil ;};var _ Image =&NRGBA32 {};var (_fde =_efd ();_abb =_abbc ();_gee =_ada (););func _cbd (_fge *Monochrome ,_edb ,_fd int )(*Monochrome ,error ){if _fge ==nil {return nil ,_bb .New ("\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _edb <=0||_fd <=0{return nil ,_bb .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0073\u0063\u0061l\u0065\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020<\u003d\u0020\u0030");};if _edb ==_fd {if _edb ==1{return _fge .copy (),nil ;};
if _edb ==2||_edb ==4||_edb ==8{_bffe ,_ffc :=_bc (_fge ,_edb );if _ffc !=nil {return nil ,_ffc ;};return _bffe ,nil ;};};_eef :=_edb *_fge .Width ;_efb :=_fd *_fge .Height ;_cbbc :=_dfg (_eef ,_efb );_af :=_cbbc .BytesPerLine ;var (_gde ,_bag ,_ea ,_edf ,_fgb int ;
_dcf byte ;_edfc error ;);for _bag =0;_bag < _fge .Height ;_bag ++{_gde =_fd *_bag *_af ;for _ea =0;_ea < _fge .Width ;_ea ++{if _fgbd :=_fge .getBitAt (_ea ,_bag );_fgbd {_fgb =_edb *_ea ;for _edf =0;_edf < _edb ;_edf ++{_cbbc .setIndexedBit (_gde *8+_fgb +_edf );
};};};for _edf =1;_edf < _fd ;_edf ++{_dd :=_gde +_edf *_af ;for _ag :=0;_ag < _af ;_ag ++{if _dcf ,_edfc =_cbbc .getByte (_gde +_ag );_edfc !=nil {return nil ,_edfc ;};if _edfc =_cbbc .setByte (_dd +_ag ,_dcf );_edfc !=nil {return nil ,_edfc ;};};};};
return _cbbc ,nil ;};func (_dec *Monochrome )Bounds ()_bff .Rectangle {return _bff .Rectangle {Max :_bff .Point {X :_dec .Width ,Y :_dec .Height }};};func ColorAtGray1BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_bg .Gray ,error ){_gbff :=y *bytesPerLine +x >>3;
if _gbff >=len (data ){return _bg .Gray {},_fb .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_bdfgd :=data [_gbff ]>>uint (7-(x &7))&1;if len (decode )==2{_bdfgd =uint8 (LinearInterpolate (float64 (_bdfgd ),0.0,1.0,decode [0],decode [1]))&1;};return _bg .Gray {Y :_bdfgd *255},nil ;};func ColorAtGray2BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_bg .Gray ,error ){_cgb :=y *bytesPerLine +x >>2;
if _cgb >=len (data ){return _bg .Gray {},_fb .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_gcee :=data [_cgb ]>>uint (6-(x &3)*2)&3;if len (decode )==2{_gcee =uint8 (uint32 (LinearInterpolate (float64 (_gcee ),0,3.0,decode [0],decode [1]))&3);};return _bg .Gray {Y :_gcee *85},nil ;};func (_agacg *Monochrome )InverseData ()error {return _agacg .RasterOperation (0,0,_agacg .Width ,_agacg .Height ,PixNotDst ,nil ,0,0);
};func NewImage (width ,height ,bitsPerComponent ,colorComponents int ,data ,alpha []byte ,decode []float64 )(Image ,error ){_eedb :=NewImageBase (width ,height ,bitsPerComponent ,colorComponents ,data ,alpha ,decode );var _ffgg Image ;switch colorComponents {case 1:switch bitsPerComponent {case 1:_ffgg =&Monochrome {ImageBase :_eedb ,ModelThreshold :0x0f};
case 2:_ffgg =&Gray2 {ImageBase :_eedb };case 4:_ffgg =&Gray4 {ImageBase :_eedb };case 8:_ffgg =&Gray8 {ImageBase :_eedb };case 16:_ffgg =&Gray16 {ImageBase :_eedb };};case 3:switch bitsPerComponent {case 4:_ffgg =&NRGBA16 {ImageBase :_eedb };case 8:_ffgg =&NRGBA32 {ImageBase :_eedb };
case 16:_ffgg =&NRGBA64 {ImageBase :_eedb };};case 4:_ffgg =&CMYK32 {ImageBase :_eedb };};if _ffgg ==nil {return nil ,ErrInvalidImage ;};return _ffgg ,nil ;};func _fdca (_adege RGBA ,_bgcf NRGBA ,_cfcd _bff .Rectangle ){for _aacd :=0;_aacd < _cfcd .Max .X ;
_aacd ++{for _eccgc :=0;_eccgc < _cfcd .Max .Y ;_eccgc ++{_efbfe :=_adege .RGBAAt (_aacd ,_eccgc );_bgcf .SetNRGBA (_aacd ,_eccgc ,_gagba (_efbfe ));};};};type NRGBA64 struct{ImageBase };func (_ebgd *NRGBA64 )At (x ,y int )_bg .Color {_cegf ,_ :=_ebgd .ColorAt (x ,y );
return _cegf };func _agec (_eedg CMYK ,_fee NRGBA ,_egbeb _bff .Rectangle ){for _ecceg :=0;_ecceg < _egbeb .Max .X ;_ecceg ++{for _cefg :=0;_cefg < _egbeb .Max .Y ;_cefg ++{_agdf :=_eedg .CMYKAt (_ecceg ,_cefg );_fee .SetNRGBA (_ecceg ,_cefg ,_cead (_agdf ));
};};};type Image interface{_bf .Image ;Base ()*ImageBase ;Copy ()Image ;Pix ()[]byte ;ColorAt (_dgf ,_ddgb int )(_bg .Color ,error );Validate ()error ;};func _eee (_gca *Monochrome ,_bea int ,_gbf []byte )(_ec *Monochrome ,_ccaa error ){const _ecg ="\u0072\u0065d\u0075\u0063\u0065R\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079";
if _gca ==nil {return nil ,_bb .New ("\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _bea < 1||_bea > 4{return nil ,_bb .New ("\u006c\u0065\u0076\u0065\u006c\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0069\u006e\u0020\u0073e\u0074\u0020\u007b\u0031\u002c\u0032\u002c\u0033\u002c\u0034\u007d");
};if _gca .Height <=1{return nil ,_bb .New ("\u0073\u006f\u0075rc\u0065\u0020\u0068\u0065\u0069\u0067\u0068\u0074\u0020m\u0075s\u0074 \u0062e\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0027\u0032\u0027");};_ec =_dfg (_gca .Width /2,_gca .Height /2);
if _gbf ==nil {_gbf =_gefg ();};_df :=_egaf (_gca .BytesPerLine ,2*_ec .BytesPerLine );switch _bea {case 1:_ccaa =_cacg (_gca ,_ec ,_gbf ,_df );case 2:_ccaa =_gged (_gca ,_ec ,_gbf ,_df );case 3:_ccaa =_faf (_gca ,_ec ,_gbf ,_df );case 4:_ccaa =_eege (_gca ,_ec ,_gbf ,_df );
};if _ccaa !=nil {return nil ,_ccaa ;};return _ec ,nil ;};func (_cggb *Gray4 )ColorAt (x ,y int )(_bg .Color ,error ){return ColorAtGray4BPC (x ,y ,_cggb .BytesPerLine ,_cggb .Data ,_cggb .Decode );};func (_eade *ImageBase )HasAlpha ()bool {if _eade .Alpha ==nil {return false ;
};for _fdge :=range _eade .Alpha {if _eade .Alpha [_fdge ]!=0xff{return true ;};};return false ;};func (_fcc *Gray16 )GrayAt (x ,y int )_bg .Gray {_ebfd ,_ :=_fcc .ColorAt (x ,y );return _bg .Gray {Y :uint8 (_ebfd .(_bg .Gray16 ).Y >>8)};};func _gged (_bed ,_ecd *Monochrome ,_ebe []byte ,_dcg int )(_fbf error ){var (_afa ,_cadca ,_dfc ,_ega ,_eff ,_fcg ,_eac ,_cbba int ;
_bffc ,_dddg ,_gbd ,_eca uint32 ;_bfa ,_gda byte ;_gcd uint16 ;);_cada :=make ([]byte ,4);_dea :=make ([]byte ,4);for _dfc =0;_dfc < _bed .Height -1;_dfc ,_ega =_dfc +2,_ega +1{_afa =_dfc *_bed .BytesPerLine ;_cadca =_ega *_ecd .BytesPerLine ;for _eff ,_fcg =0,0;
_eff < _dcg ;_eff ,_fcg =_eff +4,_fcg +1{for _eac =0;_eac < 4;_eac ++{_cbba =_afa +_eff +_eac ;if _cbba <=len (_bed .Data )-1&&_cbba < _afa +_bed .BytesPerLine {_cada [_eac ]=_bed .Data [_cbba ];}else {_cada [_eac ]=0x00;};_cbba =_afa +_bed .BytesPerLine +_eff +_eac ;
if _cbba <=len (_bed .Data )-1&&_cbba < _afa +(2*_bed .BytesPerLine ){_dea [_eac ]=_bed .Data [_cbba ];}else {_dea [_eac ]=0x00;};};_bffc =_d .BigEndian .Uint32 (_cada );_dddg =_d .BigEndian .Uint32 (_dea );_gbd =_bffc &_dddg ;_gbd |=_gbd <<1;_eca =_bffc |_dddg ;
_eca &=_eca <<1;_dddg =_gbd |_eca ;_dddg &=0xaaaaaaaa;_bffc =_dddg |(_dddg <<7);_bfa =byte (_bffc >>24);_gda =byte ((_bffc >>8)&0xff);_cbba =_cadca +_fcg ;if _cbba +1==len (_ecd .Data )-1||_cbba +1>=_cadca +_ecd .BytesPerLine {if _fbf =_ecd .setByte (_cbba ,_ebe [_bfa ]);
_fbf !=nil {return _fb .Errorf ("\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_cbba );};}else {_gcd =(uint16 (_ebe [_bfa ])<<8)|uint16 (_ebe [_gda ]);if _fbf =_ecd .setTwoBytes (_cbba ,_gcd );_fbf !=nil {return _fb .Errorf ("s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_cbba );
};_fcg ++;};};};return nil ;};func _efce (_ccbc _bg .NRGBA64 )_bg .RGBA {_ced ,_gcaf ,_fbg ,_gga :=_ccbc .RGBA ();return _bg .RGBA {R :uint8 (_ced >>8),G :uint8 (_gcaf >>8),B :uint8 (_fbg >>8),A :uint8 (_gga >>8)};};func _dbee (_dbeeb *_bff .Gray16 ,_edagg uint8 )*_bff .Gray {_bbbba :=_dbeeb .Bounds ();
_cbcf :=_bff .NewGray (_bbbba );for _bcgd :=0;_bcgd < _bbbba .Dx ();_bcgd ++{for _bbfg :=0;_bbfg < _bbbba .Dy ();_bbfg ++{_gafd :=_dbeeb .Gray16At (_bcgd ,_bbfg );_cbcf .SetGray (_bcgd ,_bbfg ,_bg .Gray {Y :_dadaf (uint8 (_gafd .Y /256),_edagg )});};};
return _cbcf ;};func (_fed *NRGBA16 )NRGBAAt (x ,y int )_bg .NRGBA {_bebbc ,_ :=ColorAtNRGBA16 (x ,y ,_fed .Width ,_fed .BytesPerLine ,_fed .Data ,_fed .Alpha ,_fed .Decode );return _bebbc ;};func (_ddab *Gray2 )At (x ,y int )_bg .Color {_gdfd ,_ :=_ddab .ColorAt (x ,y );
return _gdfd };func ColorAtGrayscale (x ,y ,bitsPerColor ,bytesPerLine int ,data []byte ,decode []float64 )(_bg .Color ,error ){switch bitsPerColor {case 1:return ColorAtGray1BPC (x ,y ,bytesPerLine ,data ,decode );case 2:return ColorAtGray2BPC (x ,y ,bytesPerLine ,data ,decode );
case 4:return ColorAtGray4BPC (x ,y ,bytesPerLine ,data ,decode );case 8:return ColorAtGray8BPC (x ,y ,bytesPerLine ,data ,decode );case 16:return ColorAtGray16BPC (x ,y ,bytesPerLine ,data ,decode );default:return nil ,_fb .Errorf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0067\u0072\u0061\u0079\u0020\u0073c\u0061\u006c\u0065\u0020\u0062\u0069\u0074s\u0020\u0070\u0065\u0072\u0020\u0063\u006f\u006c\u006f\u0072\u0020a\u006d\u006f\u0075\u006e\u0074\u003a\u0020\u0027\u0025\u0064\u0027",bitsPerColor );
};};type CMYK interface{CMYKAt (_dfd ,_ddaa int )_bg .CMYK ;SetCMYK (_gbe ,_gfd int ,_agf _bg .CMYK );};func (_abgg *Monochrome )ReduceBinary (factor float64 )(*Monochrome ,error ){_cdac :=_ffce (uint (factor ));if !IsPowerOf2 (uint (factor )){_cdac ++;
};_ecb :=make ([]int ,_cdac );for _fafc :=range _ecb {_ecb [_fafc ]=4;};_cae ,_dafef :=_eed (_abgg ,_ecb ...);if _dafef !=nil {return nil ,_dafef ;};return _cae ,nil ;};func (_bec *Gray2 )Base ()*ImageBase {return &_bec .ImageBase };func _gfg (_cebf _bg .NRGBA )_bg .CMYK {_edda ,_gaf ,_cec ,_ :=_cebf .RGBA ();
_ede ,_dafa ,_eadf ,_eebd :=_bg .RGBToCMYK (uint8 (_edda >>8),uint8 (_gaf >>8),uint8 (_cec >>8));return _bg .CMYK {C :_ede ,M :_dafa ,Y :_eadf ,K :_eebd };};func (_bfec *Gray8 )GrayAt (x ,y int )_bg .Gray {_fbaa ,_ :=ColorAtGray8BPC (x ,y ,_bfec .BytesPerLine ,_bfec .Data ,_bfec .Decode );
return _fbaa ;};func _bc (_ca *Monochrome ,_eg int )(*Monochrome ,error ){if _ca ==nil {return nil ,_bb .New ("\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _eg ==1{return _ca .copy (),nil ;};if !IsPowerOf2 (uint (_eg )){return nil ,_fb .Errorf ("\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006ci\u0064 \u0065x\u0070a\u006e\u0064\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020\u0025\u0064",_eg );
};_db :=_cd (_eg );return _gc (_ca ,_eg ,_db );};func _bac (_bagc Gray ,_ggdf NRGBA ,_dada _bff .Rectangle ){for _cgee :=0;_cgee < _dada .Max .X ;_cgee ++{for _cfb :=0;_cfb < _dada .Max .Y ;_cfb ++{_fcba :=_ecc (_ggdf .NRGBAAt (_cgee ,_cfb ));_bagc .SetGray (_cgee ,_cfb ,_fcba );
};};};func (_ebaa *Monochrome )Copy ()Image {return &Monochrome {ImageBase :_ebaa .ImageBase .copy (),ModelThreshold :_ebaa .ModelThreshold };};func _ccc (_bbaac _bff .Image ,_fbgf Image ,_ccfd _bff .Rectangle ){switch _eedfg :=_bbaac .(type ){case Gray :_dcfa (_eedfg ,_fbgf .(Gray ),_ccfd );
case NRGBA :_cccd (_eedfg ,_fbgf .(Gray ),_ccfd );case CMYK :_gedf (_eedfg ,_fbgf .(Gray ),_ccfd );case RGBA :_bgf (_eedfg ,_fbgf .(Gray ),_ccfd );default:_cde (_bbaac ,_fbgf ,_ccfd );};};func (_agdc *CMYK32 )Set (x ,y int ,c _bg .Color ){_gff :=4*(y *_agdc .Width +x );
if _gff +3>=len (_agdc .Data ){return ;};_bgb :=_bg .CMYKModel .Convert (c ).(_bg .CMYK );_agdc .Data [_gff ]=_bgb .C ;_agdc .Data [_gff +1]=_bgb .M ;_agdc .Data [_gff +2]=_bgb .Y ;_agdc .Data [_gff +3]=_bgb .K ;};func _gcff (_fedae Gray ,_aegc NRGBA ,_ebcb _bff .Rectangle ){for _bgbe :=0;
_bgbe < _ebcb .Max .X ;_bgbe ++{for _cadf :=0;_cadf < _ebcb .Max .Y ;_cadf ++{_ecca :=_fedae .GrayAt (_bgbe ,_cadf );_aegc .SetNRGBA (_bgbe ,_cadf ,_fbdc (_ecca ));};};};func InDelta (expected ,current ,delta float64 )bool {_bdef :=expected -current ;if _bdef <=-delta ||_bdef >=delta {return false ;
};return true ;};func _ada ()(_dbe [256]uint64 ){for _fa :=0;_fa < 256;_fa ++{if _fa &0x01!=0{_dbe [_fa ]|=0xff;};if _fa &0x02!=0{_dbe [_fa ]|=0xff00;};if _fa &0x04!=0{_dbe [_fa ]|=0xff0000;};if _fa &0x08!=0{_dbe [_fa ]|=0xff000000;};if _fa &0x10!=0{_dbe [_fa ]|=0xff00000000;
};if _fa &0x20!=0{_dbe [_fa ]|=0xff0000000000;};if _fa &0x40!=0{_dbe [_fa ]|=0xff000000000000;};if _fa &0x80!=0{_dbe [_fa ]|=0xff00000000000000;};};return _dbe ;};type SMasker interface{HasAlpha ()bool ;GetAlpha ()[]byte ;MakeAlpha ();};func (_ebf *Monochrome )copy ()*Monochrome {_cgde :=_dfg (_ebf .Width ,_ebf .Height );
_cgde .ModelThreshold =_ebf .ModelThreshold ;_cgde .Data =make ([]byte ,len (_ebf .Data ));copy (_cgde .Data ,_ebf .Data );if len (_ebf .Decode )!=0{_cgde .Decode =make ([]float64 ,len (_ebf .Decode ));copy (_cgde .Decode ,_ebf .Decode );};if len (_ebf .Alpha )!=0{_cgde .Alpha =make ([]byte ,len (_ebf .Alpha ));
copy (_cgde .Alpha ,_ebf .Alpha );};return _cgde ;};var _ Gray =&Gray2 {};func _cfee (_effd *Monochrome ,_gcac ,_cege ,_geefc ,_dafad int ,_fdaa RasterOperator ,_eaee *Monochrome ,_gaa ,_bdfgf int )error {var (_aee byte ;_cccc int ;_efeb int ;_cddd ,_eaag int ;
_cabc ,_ceeg int ;);_eeef :=_geefc >>3;_dgfd :=_geefc &7;if _dgfd > 0{_aee =_adeg [_dgfd ];};_cccc =_eaee .BytesPerLine *_bdfgf +(_gaa >>3);_efeb =_effd .BytesPerLine *_cege +(_gcac >>3);switch _fdaa {case PixSrc :for _cabc =0;_cabc < _dafad ;_cabc ++{_cddd =_cccc +_cabc *_eaee .BytesPerLine ;
_eaag =_efeb +_cabc *_effd .BytesPerLine ;for _ceeg =0;_ceeg < _eeef ;_ceeg ++{_effd .Data [_eaag ]=_eaee .Data [_cddd ];_eaag ++;_cddd ++;};if _dgfd > 0{_effd .Data [_eaag ]=_gdcga (_effd .Data [_eaag ],_eaee .Data [_cddd ],_aee );};};case PixNotSrc :for _cabc =0;
_cabc < _dafad ;_cabc ++{_cddd =_cccc +_cabc *_eaee .BytesPerLine ;_eaag =_efeb +_cabc *_effd .BytesPerLine ;for _ceeg =0;_ceeg < _eeef ;_ceeg ++{_effd .Data [_eaag ]=^(_eaee .Data [_cddd ]);_eaag ++;_cddd ++;};if _dgfd > 0{_effd .Data [_eaag ]=_gdcga (_effd .Data [_eaag ],^_eaee .Data [_cddd ],_aee );
};};case PixSrcOrDst :for _cabc =0;_cabc < _dafad ;_cabc ++{_cddd =_cccc +_cabc *_eaee .BytesPerLine ;_eaag =_efeb +_cabc *_effd .BytesPerLine ;for _ceeg =0;_ceeg < _eeef ;_ceeg ++{_effd .Data [_eaag ]|=_eaee .Data [_cddd ];_eaag ++;_cddd ++;};if _dgfd > 0{_effd .Data [_eaag ]=_gdcga (_effd .Data [_eaag ],_eaee .Data [_cddd ]|_effd .Data [_eaag ],_aee );
};};case PixSrcAndDst :for _cabc =0;_cabc < _dafad ;_cabc ++{_cddd =_cccc +_cabc *_eaee .BytesPerLine ;_eaag =_efeb +_cabc *_effd .BytesPerLine ;for _ceeg =0;_ceeg < _eeef ;_ceeg ++{_effd .Data [_eaag ]&=_eaee .Data [_cddd ];_eaag ++;_cddd ++;};if _dgfd > 0{_effd .Data [_eaag ]=_gdcga (_effd .Data [_eaag ],_eaee .Data [_cddd ]&_effd .Data [_eaag ],_aee );
};};case PixSrcXorDst :for _cabc =0;_cabc < _dafad ;_cabc ++{_cddd =_cccc +_cabc *_eaee .BytesPerLine ;_eaag =_efeb +_cabc *_effd .BytesPerLine ;for _ceeg =0;_ceeg < _eeef ;_ceeg ++{_effd .Data [_eaag ]^=_eaee .Data [_cddd ];_eaag ++;_cddd ++;};if _dgfd > 0{_effd .Data [_eaag ]=_gdcga (_effd .Data [_eaag ],_eaee .Data [_cddd ]^_effd .Data [_eaag ],_aee );
};};case PixNotSrcOrDst :for _cabc =0;_cabc < _dafad ;_cabc ++{_cddd =_cccc +_cabc *_eaee .BytesPerLine ;_eaag =_efeb +_cabc *_effd .BytesPerLine ;for _ceeg =0;_ceeg < _eeef ;_ceeg ++{_effd .Data [_eaag ]|=^(_eaee .Data [_cddd ]);_eaag ++;_cddd ++;};if _dgfd > 0{_effd .Data [_eaag ]=_gdcga (_effd .Data [_eaag ],^(_eaee .Data [_cddd ])|_effd .Data [_eaag ],_aee );
};};case PixNotSrcAndDst :for _cabc =0;_cabc < _dafad ;_cabc ++{_cddd =_cccc +_cabc *_eaee .BytesPerLine ;_eaag =_efeb +_cabc *_effd .BytesPerLine ;for _ceeg =0;_ceeg < _eeef ;_ceeg ++{_effd .Data [_eaag ]&=^(_eaee .Data [_cddd ]);_eaag ++;_cddd ++;};if _dgfd > 0{_effd .Data [_eaag ]=_gdcga (_effd .Data [_eaag ],^(_eaee .Data [_cddd ])&_effd .Data [_eaag ],_aee );
};};case PixSrcOrNotDst :for _cabc =0;_cabc < _dafad ;_cabc ++{_cddd =_cccc +_cabc *_eaee .BytesPerLine ;_eaag =_efeb +_cabc *_effd .BytesPerLine ;for _ceeg =0;_ceeg < _eeef ;_ceeg ++{_effd .Data [_eaag ]=_eaee .Data [_cddd ]|^(_effd .Data [_eaag ]);_eaag ++;
_cddd ++;};if _dgfd > 0{_effd .Data [_eaag ]=_gdcga (_effd .Data [_eaag ],_eaee .Data [_cddd ]|^(_effd .Data [_eaag ]),_aee );};};case PixSrcAndNotDst :for _cabc =0;_cabc < _dafad ;_cabc ++{_cddd =_cccc +_cabc *_eaee .BytesPerLine ;_eaag =_efeb +_cabc *_effd .BytesPerLine ;
for _ceeg =0;_ceeg < _eeef ;_ceeg ++{_effd .Data [_eaag ]=_eaee .Data [_cddd ]&^(_effd .Data [_eaag ]);_eaag ++;_cddd ++;};if _dgfd > 0{_effd .Data [_eaag ]=_gdcga (_effd .Data [_eaag ],_eaee .Data [_cddd ]&^(_effd .Data [_eaag ]),_aee );};};case PixNotPixSrcOrDst :for _cabc =0;
_cabc < _dafad ;_cabc ++{_cddd =_cccc +_cabc *_eaee .BytesPerLine ;_eaag =_efeb +_cabc *_effd .BytesPerLine ;for _ceeg =0;_ceeg < _eeef ;_ceeg ++{_effd .Data [_eaag ]=^(_eaee .Data [_cddd ]|_effd .Data [_eaag ]);_eaag ++;_cddd ++;};if _dgfd > 0{_effd .Data [_eaag ]=_gdcga (_effd .Data [_eaag ],^(_eaee .Data [_cddd ]|_effd .Data [_eaag ]),_aee );
};};case PixNotPixSrcAndDst :for _cabc =0;_cabc < _dafad ;_cabc ++{_cddd =_cccc +_cabc *_eaee .BytesPerLine ;_eaag =_efeb +_cabc *_effd .BytesPerLine ;for _ceeg =0;_ceeg < _eeef ;_ceeg ++{_effd .Data [_eaag ]=^(_eaee .Data [_cddd ]&_effd .Data [_eaag ]);
_eaag ++;_cddd ++;};if _dgfd > 0{_effd .Data [_eaag ]=_gdcga (_effd .Data [_eaag ],^(_eaee .Data [_cddd ]&_effd .Data [_eaag ]),_aee );};};case PixNotPixSrcXorDst :for _cabc =0;_cabc < _dafad ;_cabc ++{_cddd =_cccc +_cabc *_eaee .BytesPerLine ;_eaag =_efeb +_cabc *_effd .BytesPerLine ;
for _ceeg =0;_ceeg < _eeef ;_ceeg ++{_effd .Data [_eaag ]=^(_eaee .Data [_cddd ]^_effd .Data [_eaag ]);_eaag ++;_cddd ++;};if _dgfd > 0{_effd .Data [_eaag ]=_gdcga (_effd .Data [_eaag ],^(_eaee .Data [_cddd ]^_effd .Data [_eaag ]),_aee );};};default:_c .Log .Debug ("\u0050\u0072ov\u0069\u0064\u0065d\u0020\u0069\u006e\u0076ali\u0064 r\u0061\u0073\u0074\u0065\u0072\u0020\u006fpe\u0072\u0061\u0074\u006f\u0072\u003a\u0020%\u0076",_fdaa );
return _bb .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");};return nil ;};func _gagba (_fdec _bg .RGBA )_bg .NRGBA {switch _fdec .A {case 0xff:return _bg .NRGBA {R :_fdec .R ,G :_fdec .G ,B :_fdec .B ,A :0xff};
case 0x00:return _bg .NRGBA {};default:_eaeb ,_gea ,_dbaf ,_fec :=_fdec .RGBA ();_eaeb =(_eaeb *0xffff)/_fec ;_gea =(_gea *0xffff)/_fec ;_dbaf =(_dbaf *0xffff)/_fec ;return _bg .NRGBA {R :uint8 (_eaeb >>8),G :uint8 (_gea >>8),B :uint8 (_dbaf >>8),A :uint8 (_fec >>8)};
};};func _ecc (_agac _bg .NRGBA )_bg .Gray {var _geff _bg .NRGBA ;if _agac ==_geff {return _bg .Gray {Y :0xff};};_fdef ,_efcc ,_gceb ,_ :=_agac .RGBA ();_aada :=(19595*_fdef +38470*_efcc +7471*_gceb +1<<15)>>24;return _bg .Gray {Y :uint8 (_aada )};};var _ Image =&NRGBA64 {};
func _dade (_beaec _bff .Image ,_gdec uint8 )*_bff .Gray {_bgfcb :=_beaec .Bounds ();_aaddb :=_bff .NewGray (_bgfcb );var (_gbdf _bg .Color ;_bdff _bg .Gray ;);for _agag :=0;_agag < _bgfcb .Max .X ;_agag ++{for _bfbee :=0;_bfbee < _bgfcb .Max .Y ;_bfbee ++{_gbdf =_beaec .At (_agag ,_bfbee );
_aaddb .Set (_agag ,_bfbee ,_gbdf );_bdff =_aaddb .GrayAt (_agag ,_bfbee );_aaddb .SetGray (_agag ,_bfbee ,_bg .Gray {Y :_dadaf (_bdff .Y ,_gdec )});};};return _aaddb ;};func _dfg (_efg ,_fae int )*Monochrome {return &Monochrome {ImageBase :NewImageBase (_efg ,_fae ,1,1,nil ,nil ,nil ),ModelThreshold :0x0f};
};func (_fagb *NRGBA64 )SetNRGBA64 (x ,y int ,c _bg .NRGBA64 ){_dcfgf :=(y *_fagb .Width +x )*2;_agbg :=_dcfgf *3;if _agbg +5>=len (_fagb .Data ){return ;};_fagb .setNRGBA64 (_agbg ,c ,_dcfgf );};type Gray8 struct{ImageBase };type monochromeModel uint8 ;
func (_egf *Gray16 )Copy ()Image {return &Gray16 {ImageBase :_egf .copy ()}};func _ggdbd (_dce _bg .Gray )_bg .RGBA {return _bg .RGBA {R :_dce .Y ,G :_dce .Y ,B :_dce .Y ,A :0xff}};func _fff (_bddc _bg .Color )_bg .Color {_cabe :=_bg .NRGBAModel .Convert (_bddc ).(_bg .NRGBA );
return _gccb (_cabe );};func (_bceg *Monochrome )ScaleLow (width ,height int )(*Monochrome ,error ){if width < 0||height < 0{return nil ,_bb .New ("\u0070\u0072\u006f\u0076\u0069\u0064e\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0077\u0069\u0064t\u0068\u0020\u0061\u006e\u0064\u0020\u0068e\u0069\u0067\u0068\u0074");
};_gba :=_dfg (width ,height );_ccef :=make ([]int ,height );_cfbb :=make ([]int ,width );_fcd :=float64 (_bceg .Width )/float64 (width );_fba :=float64 (_bceg .Height )/float64 (height );for _dafb :=0;_dafb < height ;_dafb ++{_ccef [_dafb ]=int (_f .Min (_fba *float64 (_dafb )+0.5,float64 (_bceg .Height -1)));
};for _ecbe :=0;_ecbe < width ;_ecbe ++{_cfbb [_ecbe ]=int (_f .Min (_fcd *float64 (_ecbe )+0.5,float64 (_bceg .Width -1)));};_cecc :=-1;_bdc :=byte (0);for _cfdc :=0;_cfdc < height ;_cfdc ++{_bcg :=_ccef [_cfdc ]*_bceg .BytesPerLine ;_bbb :=_cfdc *_gba .BytesPerLine ;
for _cgg :=0;_cgg < width ;_cgg ++{_dgc :=_cfbb [_cgg ];if _dgc !=_cecc {_bdc =_bceg .getBit (_bcg ,_dgc );if _bdc !=0{_gba .setBit (_bbb ,_cgg );};_cecc =_dgc ;}else {if _bdc !=0{_gba .setBit (_bbb ,_cgg );};};};};return _gba ,nil ;};var _ Image =&Gray16 {};
func _cfcg (_babd CMYK ,_eggf RGBA ,_bcfa _bff .Rectangle ){for _fgfdd :=0;_fgfdd < _bcfa .Max .X ;_fgfdd ++{for _gbbf :=0;_gbbf < _bcfa .Max .Y ;_gbbf ++{_cedf :=_babd .CMYKAt (_fgfdd ,_gbbf );_eggf .SetRGBA (_fgfdd ,_gbbf ,_gdee (_cedf ));};};};func _ddde (_dfdb _bff .Image ,_cagae int )(_bff .Rectangle ,bool ,[]byte ){_acga :=_dfdb .Bounds ();
var (_gcge bool ;_gdea []byte ;);switch _gdcef :=_dfdb .(type ){case SMasker :_gcge =_gdcef .HasAlpha ();case NRGBA ,RGBA ,*_bff .RGBA64 ,nrgba64 ,*_bff .NYCbCrA :_gdea =make ([]byte ,_acga .Max .X *_acga .Max .Y *_cagae );case *_bff .Paletted :if !_gdcef .Opaque (){_gdea =make ([]byte ,_acga .Max .X *_acga .Max .Y *_cagae );
};};return _acga ,_gcge ,_gdea ;};func (_acbc *NRGBA16 )At (x ,y int )_bg .Color {_adaf ,_ :=_acbc .ColorAt (x ,y );return _adaf };var _ _bff .Image =&Gray2 {};type ColorConverter interface{Convert (_adee _bff .Image )(Image ,error );};var _ Image =&RGBA32 {};
func (_eadc *ImageBase )Pix ()[]byte {return _eadc .Data };func (_ecdd *Gray8 )Base ()*ImageBase {return &_ecdd .ImageBase };var _ Gray =&Gray8 {};func _fbdc (_geef _bg .Gray )_bg .NRGBA {return _bg .NRGBA {R :_geef .Y ,G :_geef .Y ,B :_geef .Y ,A :0xff}};
func (_egaa *Gray4 )Bounds ()_bff .Rectangle {return _bff .Rectangle {Max :_bff .Point {X :_egaa .Width ,Y :_egaa .Height }};};func FromGoImage (i _bff .Image )(Image ,error ){switch _fafe :=i .(type ){case Image :return _fafe .Copy (),nil ;case Gray :return GrayConverter .Convert (i );
case *_bff .Gray16 :return Gray16Converter .Convert (i );case CMYK :return CMYKConverter .Convert (i );case *_bff .NRGBA64 :return NRGBA64Converter .Convert (i );default:return NRGBAConverter .Convert (i );};};type Monochrome struct{ImageBase ;ModelThreshold uint8 ;
};func _faf (_fbb ,_ddc *Monochrome ,_egae []byte ,_gdb int )(_effb error ){var (_fbda ,_dda ,_cbfb ,_dbd ,_aa ,_cfg ,_dcd ,_ded int ;_cbe ,_cbga ,_eag ,_fgae uint32 ;_gdeb ,_edd byte ;_abge uint16 ;);_gad :=make ([]byte ,4);_ddb :=make ([]byte ,4);for _cbfb =0;
_cbfb < _fbb .Height -1;_cbfb ,_dbd =_cbfb +2,_dbd +1{_fbda =_cbfb *_fbb .BytesPerLine ;_dda =_dbd *_ddc .BytesPerLine ;for _aa ,_cfg =0,0;_aa < _gdb ;_aa ,_cfg =_aa +4,_cfg +1{for _dcd =0;_dcd < 4;_dcd ++{_ded =_fbda +_aa +_dcd ;if _ded <=len (_fbb .Data )-1&&_ded < _fbda +_fbb .BytesPerLine {_gad [_dcd ]=_fbb .Data [_ded ];
}else {_gad [_dcd ]=0x00;};_ded =_fbda +_fbb .BytesPerLine +_aa +_dcd ;if _ded <=len (_fbb .Data )-1&&_ded < _fbda +(2*_fbb .BytesPerLine ){_ddb [_dcd ]=_fbb .Data [_ded ];}else {_ddb [_dcd ]=0x00;};};_cbe =_d .BigEndian .Uint32 (_gad );_cbga =_d .BigEndian .Uint32 (_ddb );
_eag =_cbe &_cbga ;_eag |=_eag <<1;_fgae =_cbe |_cbga ;_fgae &=_fgae <<1;_cbga =_eag &_fgae ;_cbga &=0xaaaaaaaa;_cbe =_cbga |(_cbga <<7);_gdeb =byte (_cbe >>24);_edd =byte ((_cbe >>8)&0xff);_ded =_dda +_cfg ;if _ded +1==len (_ddc .Data )-1||_ded +1>=_dda +_ddc .BytesPerLine {if _effb =_ddc .setByte (_ded ,_egae [_gdeb ]);
_effb !=nil {return _fb .Errorf ("\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_ded );};}else {_abge =(uint16 (_egae [_gdeb ])<<8)|uint16 (_egae [_edd ]);if _effb =_ddc .setTwoBytes (_ded ,_abge );_effb !=nil {return _fb .Errorf ("s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_ded );
};_cfg ++;};};};return nil ;};func _bgf (_degg RGBA ,_dbbc Gray ,_afce _bff .Rectangle ){for _debb :=0;_debb < _afce .Max .X ;_debb ++{for _cbca :=0;_cbca < _afce .Max .Y ;_cbca ++{_gdd :=_fgfd (_degg .RGBAAt (_debb ,_cbca ));_dbbc .SetGray (_debb ,_cbca ,_gdd );
};};};func _fgfd (_bae _bg .RGBA )_bg .Gray {_gfdag :=(19595*uint32 (_bae .R )+38470*uint32 (_bae .G )+7471*uint32 (_bae .B )+1<<7)>>16;return _bg .Gray {Y :uint8 (_gfdag )};};func _ffdc (_dgg *Monochrome ,_eeac ,_cacge int ,_ebdd ,_dgdc int ,_dcgf RasterOperator ){var (_cgbc bool ;
_bfaa bool ;_bfeef int ;_fbdag int ;_afec int ;_bgea int ;_bbed bool ;_cabb byte ;);_adcd :=8-(_eeac &7);_dcdc :=_aced [_adcd ];_gggc :=_dgg .BytesPerLine *_cacge +(_eeac >>3);if _ebdd < _adcd {_cgbc =true ;_dcdc &=_adeg [8-_adcd +_ebdd ];};if !_cgbc {_bfeef =(_ebdd -_adcd )>>3;
if _bfeef !=0{_bfaa =true ;_fbdag =_gggc +1;};};_afec =(_eeac +_ebdd )&7;if !(_cgbc ||_afec ==0){_bbed =true ;_cabb =_adeg [_afec ];_bgea =_gggc +1+_bfeef ;};var _bgac ,_gfbd int ;switch _dcgf {case PixClr :for _bgac =0;_bgac < _dgdc ;_bgac ++{_dgg .Data [_gggc ]=_gdcga (_dgg .Data [_gggc ],0x0,_dcdc );
_gggc +=_dgg .BytesPerLine ;};if _bfaa {for _bgac =0;_bgac < _dgdc ;_bgac ++{for _gfbd =0;_gfbd < _bfeef ;_gfbd ++{_dgg .Data [_fbdag +_gfbd ]=0x0;};_fbdag +=_dgg .BytesPerLine ;};};if _bbed {for _bgac =0;_bgac < _dgdc ;_bgac ++{_dgg .Data [_bgea ]=_gdcga (_dgg .Data [_bgea ],0x0,_cabb );
_bgea +=_dgg .BytesPerLine ;};};case PixSet :for _bgac =0;_bgac < _dgdc ;_bgac ++{_dgg .Data [_gggc ]=_gdcga (_dgg .Data [_gggc ],0xff,_dcdc );_gggc +=_dgg .BytesPerLine ;};if _bfaa {for _bgac =0;_bgac < _dgdc ;_bgac ++{for _gfbd =0;_gfbd < _bfeef ;_gfbd ++{_dgg .Data [_fbdag +_gfbd ]=0xff;
};_fbdag +=_dgg .BytesPerLine ;};};if _bbed {for _bgac =0;_bgac < _dgdc ;_bgac ++{_dgg .Data [_bgea ]=_gdcga (_dgg .Data [_bgea ],0xff,_cabb );_bgea +=_dgg .BytesPerLine ;};};case PixNotDst :for _bgac =0;_bgac < _dgdc ;_bgac ++{_dgg .Data [_gggc ]=_gdcga (_dgg .Data [_gggc ],^_dgg .Data [_gggc ],_dcdc );
_gggc +=_dgg .BytesPerLine ;};if _bfaa {for _bgac =0;_bgac < _dgdc ;_bgac ++{for _gfbd =0;_gfbd < _bfeef ;_gfbd ++{_dgg .Data [_fbdag +_gfbd ]=^(_dgg .Data [_fbdag +_gfbd ]);};_fbdag +=_dgg .BytesPerLine ;};};if _bbed {for _bgac =0;_bgac < _dgdc ;_bgac ++{_dgg .Data [_bgea ]=_gdcga (_dgg .Data [_bgea ],^_dgg .Data [_bgea ],_cabb );
_bgea +=_dgg .BytesPerLine ;};};};};var _ Image =&CMYK32 {};func (_bdba *Gray8 )Set (x ,y int ,c _bg .Color ){_aaa :=y *_bdba .BytesPerLine +x ;if _aaa > len (_bdba .Data )-1{return ;};_cdab :=_bg .GrayModel .Convert (c );_bdba .Data [_aaa ]=_cdab .(_bg .Gray ).Y ;
};var _ Image =&Monochrome {};func _ebcg (_cfff *_bff .NYCbCrA ,_gfdcd RGBA ,_ccbg _bff .Rectangle ){for _fgbag :=0;_fgbag < _ccbg .Max .X ;_fgbag ++{for _fcag :=0;_fcag < _ccbg .Max .Y ;_fcag ++{_eaeea :=_cfff .NYCbCrAAt (_fgbag ,_fcag );_gfdcd .SetRGBA (_fgbag ,_fcag ,_fgfg (_eaeea ));
};};};type shift int ;func (_gfec *NRGBA64 )setNRGBA64 (_eedfb int ,_abcbd _bg .NRGBA64 ,_bgab int ){_gfec .Data [_eedfb ]=uint8 (_abcbd .R >>8);_gfec .Data [_eedfb +1]=uint8 (_abcbd .R &0xff);_gfec .Data [_eedfb +2]=uint8 (_abcbd .G >>8);_gfec .Data [_eedfb +3]=uint8 (_abcbd .G &0xff);
_gfec .Data [_eedfb +4]=uint8 (_abcbd .B >>8);_gfec .Data [_eedfb +5]=uint8 (_abcbd .B &0xff);if _bgab +1< len (_gfec .Alpha ){_gfec .Alpha [_bgab ]=uint8 (_abcbd .A >>8);_gfec .Alpha [_bgab +1]=uint8 (_abcbd .A &0xff);};};func (_gacf *Gray2 )SetGray (x ,y int ,gray _bg .Gray ){_fcfa :=_bfgb (gray );
_agae :=y *_gacf .BytesPerLine ;_aadd :=_agae +(x >>2);if _aadd >=len (_gacf .Data ){return ;};_fbdf :=_fcfa .Y >>6;_gacf .Data [_aadd ]=(_gacf .Data [_aadd ]&(^(0xc0>>uint (2*((x )&3)))))|(_fbdf <<uint (6-2*(x &3)));};func _bfag (_cfbd _bff .Image ,_ddba Image ,_gcca _bff .Rectangle ){if _abcf ,_ccbae :=_cfbd .(SMasker );
_ccbae &&_abcf .HasAlpha (){_ddba .(SMasker ).MakeAlpha ();};switch _ddcb :=_cfbd .(type ){case Gray :_cccdf (_ddcb ,_ddba .(RGBA ),_gcca );case NRGBA :_gadg (_ddcb ,_ddba .(RGBA ),_gcca );case *_bff .NYCbCrA :_ebcg (_ddcb ,_ddba .(RGBA ),_gcca );case CMYK :_cfcg (_ddcb ,_ddba .(RGBA ),_gcca );
case RGBA :_cegbf (_ddcb ,_ddba .(RGBA ),_gcca );case nrgba64 :_fcfc (_ddcb ,_ddba .(RGBA ),_gcca );default:_cde (_cfbd ,_ddba ,_gcca );};};func IsGrayImgBlackAndWhite (i *_bff .Gray )bool {return _ebfb (i )};type CMYK32 struct{ImageBase };func (_ccaaf *NRGBA64 )Validate ()error {if len (_ccaaf .Data )!=3*2*_ccaaf .Width *_ccaaf .Height {return _bb .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};func _ccd (_ceb Gray ,_gbdc CMYK ,_dfgd _bff .Rectangle ){for _bde :=0;_bde < _dfgd .Max .X ;_bde ++{for _aab :=0;_aab < _dfgd .Max .Y ;_aab ++{_effc :=_ceb .GrayAt (_bde ,_aab );_gbdc .SetCMYK (_bde ,_aab ,_afd (_effc ));};};};func AutoThresholdTriangle (histogram [256]int )uint8 {var _cdcad ,_egdb ,_dece ,_bebg int ;
for _acfc :=0;_acfc < len (histogram );_acfc ++{if histogram [_acfc ]> 0{_cdcad =_acfc ;break ;};};if _cdcad > 0{_cdcad --;};for _edaba :=255;_edaba > 0;_edaba --{if histogram [_edaba ]> 0{_bebg =_edaba ;break ;};};if _bebg < 255{_bebg ++;};for _eagfb :=0;
_eagfb < 256;_eagfb ++{if histogram [_eagfb ]> _egdb {_dece =_eagfb ;_egdb =histogram [_eagfb ];};};var _bbcff bool ;if (_dece -_cdcad )< (_bebg -_dece ){_bbcff =true ;var _bgad int ;_cbecf :=255;for _bgad < _cbecf {_egbed :=histogram [_bgad ];histogram [_bgad ]=histogram [_cbecf ];
histogram [_cbecf ]=_egbed ;_bgad ++;_cbecf --;};_cdcad =255-_bebg ;_dece =255-_dece ;};if _cdcad ==_dece {return uint8 (_cdcad );};_agcb :=float64 (histogram [_dece ]);_acde :=float64 (_cdcad -_dece );_gbg :=_f .Sqrt (_agcb *_agcb +_acde *_acde );_agcb /=_gbg ;
_acde /=_gbg ;_gbg =_agcb *float64 (_cdcad )+_acde *float64 (histogram [_cdcad ]);_cbafg :=_cdcad ;var _cddbd float64 ;for _cacaf :=_cdcad +1;_cacaf <=_dece ;_cacaf ++{_dggfd :=_agcb *float64 (_cacaf )+_acde *float64 (histogram [_cacaf ])-_gbg ;if _dggfd > _cddbd {_cbafg =_cacaf ;
_cddbd =_dggfd ;};};_cbafg --;if _bbcff {var _edbe int ;_bfcfg :=255;for _edbe < _bfcfg {_acdf :=histogram [_edbe ];histogram [_edbe ]=histogram [_bfcfg ];histogram [_bfcfg ]=_acdf ;_edbe ++;_bfcfg --;};return uint8 (255-_cbafg );};return uint8 (_cbafg );
};func (_agcc *NRGBA32 )Copy ()Image {return &NRGBA32 {ImageBase :_agcc .copy ()}};func _geed (_dgabe _bff .Image ,_egfe Image ,_dggf _bff .Rectangle ){if _cafde ,_gcdb :=_dgabe .(SMasker );_gcdb &&_cafde .HasAlpha (){_egfe .(SMasker ).MakeAlpha ();};switch _efbca :=_dgabe .(type ){case Gray :_gcff (_efbca ,_egfe .(NRGBA ),_dggf );
case NRGBA :_ggfe (_efbca ,_egfe .(NRGBA ),_dggf );case *_bff .NYCbCrA :_dfcd (_efbca ,_egfe .(NRGBA ),_dggf );case CMYK :_agec (_efbca ,_egfe .(NRGBA ),_dggf );case RGBA :_fdca (_efbca ,_egfe .(NRGBA ),_dggf );case nrgba64 :_afbb (_efbca ,_egfe .(NRGBA ),_dggf );
default:_cde (_dgabe ,_egfe ,_dggf );};};func (_ccab *NRGBA64 )Copy ()Image {return &NRGBA64 {ImageBase :_ccab .copy ()}};func ImgToBinary (i _bff .Image ,threshold uint8 )*_bff .Gray {switch _eebb :=i .(type ){case *_bff .Gray :if _ebfb (_eebb ){return _eebb ;
};return _eace (_eebb ,threshold );case *_bff .Gray16 :return _dbee (_eebb ,threshold );default:return _dade (_eebb ,threshold );};};var _ _bff .Image =&Gray4 {};var _ RGBA =&RGBA32 {};func (_eedf *Gray8 )SetGray (x ,y int ,g _bg .Gray ){_gfdf :=y *_eedf .BytesPerLine +x ;
if _gfdf > len (_eedf .Data )-1{return ;};_eedf .Data [_gfdf ]=g .Y ;};func (_fad colorConverter )Convert (src _bff .Image )(Image ,error ){return _fad ._fafd (src )};func (_efecb *Monochrome )RasterOperation (dx ,dy ,dw ,dh int ,op RasterOperator ,src *Monochrome ,sx ,sy int )error {return _afe (_efecb ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );
};func (_fag *CMYK32 )Bounds ()_bff .Rectangle {return _bff .Rectangle {Max :_bff .Point {X :_fag .Width ,Y :_fag .Height }};};func _ccac (_bfdf *Monochrome ,_egaee ,_aacg int ,_ebeb ,_bdcc int ,_gddd RasterOperator ,_cebed *Monochrome ,_ccff ,_caed int )error {var _faga ,_acge ,_fagf ,_eaeg int ;
if _egaee < 0{_ccff -=_egaee ;_ebeb +=_egaee ;_egaee =0;};if _ccff < 0{_egaee -=_ccff ;_ebeb +=_ccff ;_ccff =0;};_faga =_egaee +_ebeb -_bfdf .Width ;if _faga > 0{_ebeb -=_faga ;};_acge =_ccff +_ebeb -_cebed .Width ;if _acge > 0{_ebeb -=_acge ;};if _aacg < 0{_caed -=_aacg ;
_bdcc +=_aacg ;_aacg =0;};if _caed < 0{_aacg -=_caed ;_bdcc +=_caed ;_caed =0;};_fagf =_aacg +_bdcc -_bfdf .Height ;if _fagf > 0{_bdcc -=_fagf ;};_eaeg =_caed +_bdcc -_cebed .Height ;if _eaeg > 0{_bdcc -=_eaeg ;};if _ebeb <=0||_bdcc <=0{return nil ;};var _fbcf error ;
switch {case _egaee &7==0&&_ccff &7==0:_fbcf =_cfee (_bfdf ,_egaee ,_aacg ,_ebeb ,_bdcc ,_gddd ,_cebed ,_ccff ,_caed );case _egaee &7==_ccff &7:_fbcf =_cgadg (_bfdf ,_egaee ,_aacg ,_ebeb ,_bdcc ,_gddd ,_cebed ,_ccff ,_caed );default:_fbcf =_acef (_bfdf ,_egaee ,_aacg ,_ebeb ,_bdcc ,_gddd ,_cebed ,_ccff ,_caed );
};if _fbcf !=nil {return _fbcf ;};return nil ;};var _ Gray =&Gray16 {};var _ Image =&NRGBA16 {};var _ _bff .Image =&NRGBA32 {};func (_bfbc *NRGBA32 )Set (x ,y int ,c _bg .Color ){_ccdf :=y *_bfbc .Width +x ;_bgdb :=3*_ccdf ;if _bgdb +2>=len (_bfbc .Data ){return ;
};_cdfb :=_bg .NRGBAModel .Convert (c ).(_bg .NRGBA );_bfbc .setRGBA (_ccdf ,_cdfb );};const (_fadf shift =iota ;_ageb ;);func (_daae *Gray8 )Bounds ()_bff .Rectangle {return _bff .Rectangle {Max :_bff .Point {X :_daae .Width ,Y :_daae .Height }};};func (_dgdaa *Monochrome )setGrayBit (_cfgf ,_fgda int ){_dgdaa .Data [_cfgf ]|=0x80>>uint (_fgda &7)};
func _efd ()(_ged [256]uint16 ){for _ggd :=0;_ggd < 256;_ggd ++{if _ggd &0x01!=0{_ged [_ggd ]|=0x3;};if _ggd &0x02!=0{_ged [_ggd ]|=0xc;};if _ggd &0x04!=0{_ged [_ggd ]|=0x30;};if _ggd &0x08!=0{_ged [_ggd ]|=0xc0;};if _ggd &0x10!=0{_ged [_ggd ]|=0x300;};
if _ggd &0x20!=0{_ged [_ggd ]|=0xc00;};if _ggd &0x40!=0{_ged [_ggd ]|=0x3000;};if _ggd &0x80!=0{_ged [_ggd ]|=0xc000;};};return _ged ;};func (_feg *Gray16 )Histogram ()(_bdbc [256]int ){for _cebfc :=0;_cebfc < _feg .Width ;_cebfc ++{for _bdad :=0;_bdad < _feg .Height ;
_bdad ++{_bdbc [_feg .GrayAt (_cebfc ,_bdad ).Y ]++;};};return _bdbc ;};func (_aagf *NRGBA16 )setNRGBA (_gbdd ,_bbeff ,_ddcg int ,_ccec _bg .NRGBA ){if _gbdd *3%2==0{_aagf .Data [_ddcg ]=(_ccec .R >>4)<<4|(_ccec .G >>4);_aagf .Data [_ddcg +1]=(_ccec .B >>4)<<4|(_aagf .Data [_ddcg +1]&0xf);
}else {_aagf .Data [_ddcg ]=(_aagf .Data [_ddcg ]&0xf0)|(_ccec .R >>4);_aagf .Data [_ddcg +1]=(_ccec .G >>4)<<4|(_ccec .B >>4);};if _aagf .Alpha !=nil {_bagf :=_bbeff *BytesPerLine (_aagf .Width ,4,1);if _bagf < len (_aagf .Alpha ){if _gbdd %2==0{_aagf .Alpha [_bagf ]=(_ccec .A >>uint (4))<<uint (4)|(_aagf .Alpha [_ddcg ]&0xf);
}else {_aagf .Alpha [_bagf ]=(_aagf .Alpha [_bagf ]&0xf0)|(_ccec .A >>uint (4));};};};};func _cccd (_eega NRGBA ,_bced Gray ,_ffgd _bff .Rectangle ){for _aebf :=0;_aebf < _ffgd .Max .X ;_aebf ++{for _gebe :=0;_gebe < _ffgd .Max .Y ;_gebe ++{_dff :=_fbbb (_eega .NRGBAAt (_aebf ,_gebe ));
_bced .SetGray (_aebf ,_gebe ,_dff );};};};func _cge (_gdf _bg .NRGBA64 )_bg .Gray {var _efed _bg .NRGBA64 ;if _gdf ==_efed {return _bg .Gray {Y :0xff};};_aed ,_cff ,_eegbe ,_ :=_gdf .RGBA ();_bgbb :=(19595*_aed +38470*_cff +7471*_eegbe +1<<15)>>24;return _bg .Gray {Y :uint8 (_bgbb )};
};func (_dbbb *ImageBase )getByte (_cddf int )(byte ,error ){if _cddf > len (_dbbb .Data )-1||_cddf < 0{return 0,_fb .Errorf ("\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",_cddf );
};return _dbbb .Data [_cddf ],nil ;};func (_bda *Gray2 )Histogram ()(_fcge [256]int ){for _cdg :=0;_cdg < _bda .Width ;_cdg ++{for _defe :=0;_defe < _bda .Height ;_defe ++{_fcge [_bda .GrayAt (_cdg ,_defe ).Y ]++;};};return _fcge ;};func (_acfb *Gray16 )At (x ,y int )_bg .Color {_bfd ,_ :=_acfb .ColorAt (x ,y );
return _bfd };func _abbc ()(_dgd [256]uint32 ){for _ga :=0;_ga < 256;_ga ++{if _ga &0x01!=0{_dgd [_ga ]|=0xf;};if _ga &0x02!=0{_dgd [_ga ]|=0xf0;};if _ga &0x04!=0{_dgd [_ga ]|=0xf00;};if _ga &0x08!=0{_dgd [_ga ]|=0xf000;};if _ga &0x10!=0{_dgd [_ga ]|=0xf0000;
};if _ga &0x20!=0{_dgd [_ga ]|=0xf00000;};if _ga &0x40!=0{_dgd [_ga ]|=0xf000000;};if _ga &0x80!=0{_dgd [_ga ]|=0xf0000000;};};return _dgd ;};func GetConverter (bitsPerComponent ,colorComponents int )(ColorConverter ,error ){switch colorComponents {case 1:switch bitsPerComponent {case 1:return MonochromeConverter ,nil ;
case 2:return Gray2Converter ,nil ;case 4:return Gray4Converter ,nil ;case 8:return GrayConverter ,nil ;case 16:return Gray16Converter ,nil ;};case 3:switch bitsPerComponent {case 4:return NRGBA16Converter ,nil ;case 8:return NRGBAConverter ,nil ;case 16:return NRGBA64Converter ,nil ;
};case 4:return CMYKConverter ,nil ;};return nil ,_fb .Errorf ("\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0043o\u006e\u0076\u0065\u0072\u0074\u0065\u0072\u0020\u0070\u0061\u0072\u0061\u006d\u0065t\u0065\u0072\u0073\u002e\u0020\u0042\u0069\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u003a\u0020\u0025\u0064\u002c\u0020\u0043\u006f\u006co\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006et\u0073\u003a \u0025\u0064",bitsPerComponent ,colorComponents );
};func _acef (_cfeg *Monochrome ,_bbcd ,_ecac ,_aebc ,_bbbf int ,_gcg RasterOperator ,_egbg *Monochrome ,_dcfgc ,_ecbg int )error {var (_ebd bool ;_fbca bool ;_dae byte ;_bgca int ;_dfgc int ;_fead int ;_edee int ;_ebc bool ;_gcfc int ;_bbecc int ;_cabf int ;
_deea bool ;_afacg byte ;_geab int ;_befb int ;_eced int ;_fdabg byte ;_bged int ;_dddc int ;_ffcg uint ;_aecce uint ;_bcd byte ;_defg shift ;_edag bool ;_bagg bool ;_dccb ,_agff int ;);if _dcfgc &7!=0{_dddc =8-(_dcfgc &7);};if _bbcd &7!=0{_dfgc =8-(_bbcd &7);
};if _dddc ==0&&_dfgc ==0{_bcd =_aced [0];}else {if _dfgc > _dddc {_ffcg =uint (_dfgc -_dddc );}else {_ffcg =uint (8-(_dddc -_dfgc ));};_aecce =8-_ffcg ;_bcd =_aced [_ffcg ];};if (_bbcd &7)!=0{_ebd =true ;_bgca =8-(_bbcd &7);_dae =_aced [_bgca ];_fead =_cfeg .BytesPerLine *_ecac +(_bbcd >>3);
_edee =_egbg .BytesPerLine *_ecbg +(_dcfgc >>3);_bged =8-(_dcfgc &7);if _bgca > _bged {_defg =_fadf ;if _aebc >=_dddc {_edag =true ;};}else {_defg =_ageb ;};};if _aebc < _bgca {_fbca =true ;_dae &=_adeg [8-_bgca +_aebc ];};if !_fbca {_gcfc =(_aebc -_bgca )>>3;
if _gcfc !=0{_ebc =true ;_bbecc =_cfeg .BytesPerLine *_ecac +((_bbcd +_dfgc )>>3);_cabf =_egbg .BytesPerLine *_ecbg +((_dcfgc +_dfgc )>>3);};};_geab =(_bbcd +_aebc )&7;if !(_fbca ||_geab ==0){_deea =true ;_afacg =_adeg [_geab ];_befb =_cfeg .BytesPerLine *_ecac +((_bbcd +_dfgc )>>3)+_gcfc ;
_eced =_egbg .BytesPerLine *_ecbg +((_dcfgc +_dfgc )>>3)+_gcfc ;if _geab > int (_aecce ){_bagg =true ;};};switch _gcg {case PixSrc :if _ebd {for _dccb =0;_dccb < _bbbf ;_dccb ++{if _defg ==_fadf {_fdabg =_egbg .Data [_edee ]<<_ffcg ;if _edag {_fdabg =_gdcga (_fdabg ,_egbg .Data [_edee +1]>>_aecce ,_bcd );
};}else {_fdabg =_egbg .Data [_edee ]>>_aecce ;};_cfeg .Data [_fead ]=_gdcga (_cfeg .Data [_fead ],_fdabg ,_dae );_fead +=_cfeg .BytesPerLine ;_edee +=_egbg .BytesPerLine ;};};if _ebc {for _dccb =0;_dccb < _bbbf ;_dccb ++{for _agff =0;_agff < _gcfc ;_agff ++{_fdabg =_gdcga (_egbg .Data [_cabf +_agff ]<<_ffcg ,_egbg .Data [_cabf +_agff +1]>>_aecce ,_bcd );
_cfeg .Data [_bbecc +_agff ]=_fdabg ;};_bbecc +=_cfeg .BytesPerLine ;_cabf +=_egbg .BytesPerLine ;};};if _deea {for _dccb =0;_dccb < _bbbf ;_dccb ++{_fdabg =_egbg .Data [_eced ]<<_ffcg ;if _bagg {_fdabg =_gdcga (_fdabg ,_egbg .Data [_eced +1]>>_aecce ,_bcd );
};_cfeg .Data [_befb ]=_gdcga (_cfeg .Data [_befb ],_fdabg ,_afacg );_befb +=_cfeg .BytesPerLine ;_eced +=_egbg .BytesPerLine ;};};case PixNotSrc :if _ebd {for _dccb =0;_dccb < _bbbf ;_dccb ++{if _defg ==_fadf {_fdabg =_egbg .Data [_edee ]<<_ffcg ;if _edag {_fdabg =_gdcga (_fdabg ,_egbg .Data [_edee +1]>>_aecce ,_bcd );
};}else {_fdabg =_egbg .Data [_edee ]>>_aecce ;};_cfeg .Data [_fead ]=_gdcga (_cfeg .Data [_fead ],^_fdabg ,_dae );_fead +=_cfeg .BytesPerLine ;_edee +=_egbg .BytesPerLine ;};};if _ebc {for _dccb =0;_dccb < _bbbf ;_dccb ++{for _agff =0;_agff < _gcfc ;_agff ++{_fdabg =_gdcga (_egbg .Data [_cabf +_agff ]<<_ffcg ,_egbg .Data [_cabf +_agff +1]>>_aecce ,_bcd );
_cfeg .Data [_bbecc +_agff ]=^_fdabg ;};_bbecc +=_cfeg .BytesPerLine ;_cabf +=_egbg .BytesPerLine ;};};if _deea {for _dccb =0;_dccb < _bbbf ;_dccb ++{_fdabg =_egbg .Data [_eced ]<<_ffcg ;if _bagg {_fdabg =_gdcga (_fdabg ,_egbg .Data [_eced +1]>>_aecce ,_bcd );
};_cfeg .Data [_befb ]=_gdcga (_cfeg .Data [_befb ],^_fdabg ,_afacg );_befb +=_cfeg .BytesPerLine ;_eced +=_egbg .BytesPerLine ;};};case PixSrcOrDst :if _ebd {for _dccb =0;_dccb < _bbbf ;_dccb ++{if _defg ==_fadf {_fdabg =_egbg .Data [_edee ]<<_ffcg ;if _edag {_fdabg =_gdcga (_fdabg ,_egbg .Data [_edee +1]>>_aecce ,_bcd );
};}else {_fdabg =_egbg .Data [_edee ]>>_aecce ;};_cfeg .Data [_fead ]=_gdcga (_cfeg .Data [_fead ],_fdabg |_cfeg .Data [_fead ],_dae );_fead +=_cfeg .BytesPerLine ;_edee +=_egbg .BytesPerLine ;};};if _ebc {for _dccb =0;_dccb < _bbbf ;_dccb ++{for _agff =0;
_agff < _gcfc ;_agff ++{_fdabg =_gdcga (_egbg .Data [_cabf +_agff ]<<_ffcg ,_egbg .Data [_cabf +_agff +1]>>_aecce ,_bcd );_cfeg .Data [_bbecc +_agff ]|=_fdabg ;};_bbecc +=_cfeg .BytesPerLine ;_cabf +=_egbg .BytesPerLine ;};};if _deea {for _dccb =0;_dccb < _bbbf ;
_dccb ++{_fdabg =_egbg .Data [_eced ]<<_ffcg ;if _bagg {_fdabg =_gdcga (_fdabg ,_egbg .Data [_eced +1]>>_aecce ,_bcd );};_cfeg .Data [_befb ]=_gdcga (_cfeg .Data [_befb ],_fdabg |_cfeg .Data [_befb ],_afacg );_befb +=_cfeg .BytesPerLine ;_eced +=_egbg .BytesPerLine ;
};};case PixSrcAndDst :if _ebd {for _dccb =0;_dccb < _bbbf ;_dccb ++{if _defg ==_fadf {_fdabg =_egbg .Data [_edee ]<<_ffcg ;if _edag {_fdabg =_gdcga (_fdabg ,_egbg .Data [_edee +1]>>_aecce ,_bcd );};}else {_fdabg =_egbg .Data [_edee ]>>_aecce ;};_cfeg .Data [_fead ]=_gdcga (_cfeg .Data [_fead ],_fdabg &_cfeg .Data [_fead ],_dae );
_fead +=_cfeg .BytesPerLine ;_edee +=_egbg .BytesPerLine ;};};if _ebc {for _dccb =0;_dccb < _bbbf ;_dccb ++{for _agff =0;_agff < _gcfc ;_agff ++{_fdabg =_gdcga (_egbg .Data [_cabf +_agff ]<<_ffcg ,_egbg .Data [_cabf +_agff +1]>>_aecce ,_bcd );_cfeg .Data [_bbecc +_agff ]&=_fdabg ;
};_bbecc +=_cfeg .BytesPerLine ;_cabf +=_egbg .BytesPerLine ;};};if _deea {for _dccb =0;_dccb < _bbbf ;_dccb ++{_fdabg =_egbg .Data [_eced ]<<_ffcg ;if _bagg {_fdabg =_gdcga (_fdabg ,_egbg .Data [_eced +1]>>_aecce ,_bcd );};_cfeg .Data [_befb ]=_gdcga (_cfeg .Data [_befb ],_fdabg &_cfeg .Data [_befb ],_afacg );
_befb +=_cfeg .BytesPerLine ;_eced +=_egbg .BytesPerLine ;};};case PixSrcXorDst :if _ebd {for _dccb =0;_dccb < _bbbf ;_dccb ++{if _defg ==_fadf {_fdabg =_egbg .Data [_edee ]<<_ffcg ;if _edag {_fdabg =_gdcga (_fdabg ,_egbg .Data [_edee +1]>>_aecce ,_bcd );
};}else {_fdabg =_egbg .Data [_edee ]>>_aecce ;};_cfeg .Data [_fead ]=_gdcga (_cfeg .Data [_fead ],_fdabg ^_cfeg .Data [_fead ],_dae );_fead +=_cfeg .BytesPerLine ;_edee +=_egbg .BytesPerLine ;};};if _ebc {for _dccb =0;_dccb < _bbbf ;_dccb ++{for _agff =0;
_agff < _gcfc ;_agff ++{_fdabg =_gdcga (_egbg .Data [_cabf +_agff ]<<_ffcg ,_egbg .Data [_cabf +_agff +1]>>_aecce ,_bcd );_cfeg .Data [_bbecc +_agff ]^=_fdabg ;};_bbecc +=_cfeg .BytesPerLine ;_cabf +=_egbg .BytesPerLine ;};};if _deea {for _dccb =0;_dccb < _bbbf ;
_dccb ++{_fdabg =_egbg .Data [_eced ]<<_ffcg ;if _bagg {_fdabg =_gdcga (_fdabg ,_egbg .Data [_eced +1]>>_aecce ,_bcd );};_cfeg .Data [_befb ]=_gdcga (_cfeg .Data [_befb ],_fdabg ^_cfeg .Data [_befb ],_afacg );_befb +=_cfeg .BytesPerLine ;_eced +=_egbg .BytesPerLine ;
};};case PixNotSrcOrDst :if _ebd {for _dccb =0;_dccb < _bbbf ;_dccb ++{if _defg ==_fadf {_fdabg =_egbg .Data [_edee ]<<_ffcg ;if _edag {_fdabg =_gdcga (_fdabg ,_egbg .Data [_edee +1]>>_aecce ,_bcd );};}else {_fdabg =_egbg .Data [_edee ]>>_aecce ;};_cfeg .Data [_fead ]=_gdcga (_cfeg .Data [_fead ],^_fdabg |_cfeg .Data [_fead ],_dae );
_fead +=_cfeg .BytesPerLine ;_edee +=_egbg .BytesPerLine ;};};if _ebc {for _dccb =0;_dccb < _bbbf ;_dccb ++{for _agff =0;_agff < _gcfc ;_agff ++{_fdabg =_gdcga (_egbg .Data [_cabf +_agff ]<<_ffcg ,_egbg .Data [_cabf +_agff +1]>>_aecce ,_bcd );_cfeg .Data [_bbecc +_agff ]|=^_fdabg ;
};_bbecc +=_cfeg .BytesPerLine ;_cabf +=_egbg .BytesPerLine ;};};if _deea {for _dccb =0;_dccb < _bbbf ;_dccb ++{_fdabg =_egbg .Data [_eced ]<<_ffcg ;if _bagg {_fdabg =_gdcga (_fdabg ,_egbg .Data [_eced +1]>>_aecce ,_bcd );};_cfeg .Data [_befb ]=_gdcga (_cfeg .Data [_befb ],^_fdabg |_cfeg .Data [_befb ],_afacg );
_befb +=_cfeg .BytesPerLine ;_eced +=_egbg .BytesPerLine ;};};case PixNotSrcAndDst :if _ebd {for _dccb =0;_dccb < _bbbf ;_dccb ++{if _defg ==_fadf {_fdabg =_egbg .Data [_edee ]<<_ffcg ;if _edag {_fdabg =_gdcga (_fdabg ,_egbg .Data [_edee +1]>>_aecce ,_bcd );
};}else {_fdabg =_egbg .Data [_edee ]>>_aecce ;};_cfeg .Data [_fead ]=_gdcga (_cfeg .Data [_fead ],^_fdabg &_cfeg .Data [_fead ],_dae );_fead +=_cfeg .BytesPerLine ;_edee +=_egbg .BytesPerLine ;};};if _ebc {for _dccb =0;_dccb < _bbbf ;_dccb ++{for _agff =0;
_agff < _gcfc ;_agff ++{_fdabg =_gdcga (_egbg .Data [_cabf +_agff ]<<_ffcg ,_egbg .Data [_cabf +_agff +1]>>_aecce ,_bcd );_cfeg .Data [_bbecc +_agff ]&=^_fdabg ;};_bbecc +=_cfeg .BytesPerLine ;_cabf +=_egbg .BytesPerLine ;};};if _deea {for _dccb =0;_dccb < _bbbf ;
_dccb ++{_fdabg =_egbg .Data [_eced ]<<_ffcg ;if _bagg {_fdabg =_gdcga (_fdabg ,_egbg .Data [_eced +1]>>_aecce ,_bcd );};_cfeg .Data [_befb ]=_gdcga (_cfeg .Data [_befb ],^_fdabg &_cfeg .Data [_befb ],_afacg );_befb +=_cfeg .BytesPerLine ;_eced +=_egbg .BytesPerLine ;
};};case PixSrcOrNotDst :if _ebd {for _dccb =0;_dccb < _bbbf ;_dccb ++{if _defg ==_fadf {_fdabg =_egbg .Data [_edee ]<<_ffcg ;if _edag {_fdabg =_gdcga (_fdabg ,_egbg .Data [_edee +1]>>_aecce ,_bcd );};}else {_fdabg =_egbg .Data [_edee ]>>_aecce ;};_cfeg .Data [_fead ]=_gdcga (_cfeg .Data [_fead ],_fdabg |^_cfeg .Data [_fead ],_dae );
_fead +=_cfeg .BytesPerLine ;_edee +=_egbg .BytesPerLine ;};};if _ebc {for _dccb =0;_dccb < _bbbf ;_dccb ++{for _agff =0;_agff < _gcfc ;_agff ++{_fdabg =_gdcga (_egbg .Data [_cabf +_agff ]<<_ffcg ,_egbg .Data [_cabf +_agff +1]>>_aecce ,_bcd );_cfeg .Data [_bbecc +_agff ]=_fdabg |^_cfeg .Data [_bbecc +_agff ];
};_bbecc +=_cfeg .BytesPerLine ;_cabf +=_egbg .BytesPerLine ;};};if _deea {for _dccb =0;_dccb < _bbbf ;_dccb ++{_fdabg =_egbg .Data [_eced ]<<_ffcg ;if _bagg {_fdabg =_gdcga (_fdabg ,_egbg .Data [_eced +1]>>_aecce ,_bcd );};_cfeg .Data [_befb ]=_gdcga (_cfeg .Data [_befb ],_fdabg |^_cfeg .Data [_befb ],_afacg );
_befb +=_cfeg .BytesPerLine ;_eced +=_egbg .BytesPerLine ;};};case PixSrcAndNotDst :if _ebd {for _dccb =0;_dccb < _bbbf ;_dccb ++{if _defg ==_fadf {_fdabg =_egbg .Data [_edee ]<<_ffcg ;if _edag {_fdabg =_gdcga (_fdabg ,_egbg .Data [_edee +1]>>_aecce ,_bcd );
};}else {_fdabg =_egbg .Data [_edee ]>>_aecce ;};_cfeg .Data [_fead ]=_gdcga (_cfeg .Data [_fead ],_fdabg &^_cfeg .Data [_fead ],_dae );_fead +=_cfeg .BytesPerLine ;_edee +=_egbg .BytesPerLine ;};};if _ebc {for _dccb =0;_dccb < _bbbf ;_dccb ++{for _agff =0;
_agff < _gcfc ;_agff ++{_fdabg =_gdcga (_egbg .Data [_cabf +_agff ]<<_ffcg ,_egbg .Data [_cabf +_agff +1]>>_aecce ,_bcd );_cfeg .Data [_bbecc +_agff ]=_fdabg &^_cfeg .Data [_bbecc +_agff ];};_bbecc +=_cfeg .BytesPerLine ;_cabf +=_egbg .BytesPerLine ;};
};if _deea {for _dccb =0;_dccb < _bbbf ;_dccb ++{_fdabg =_egbg .Data [_eced ]<<_ffcg ;if _bagg {_fdabg =_gdcga (_fdabg ,_egbg .Data [_eced +1]>>_aecce ,_bcd );};_cfeg .Data [_befb ]=_gdcga (_cfeg .Data [_befb ],_fdabg &^_cfeg .Data [_befb ],_afacg );_befb +=_cfeg .BytesPerLine ;
_eced +=_egbg .BytesPerLine ;};};case PixNotPixSrcOrDst :if _ebd {for _dccb =0;_dccb < _bbbf ;_dccb ++{if _defg ==_fadf {_fdabg =_egbg .Data [_edee ]<<_ffcg ;if _edag {_fdabg =_gdcga (_fdabg ,_egbg .Data [_edee +1]>>_aecce ,_bcd );};}else {_fdabg =_egbg .Data [_edee ]>>_aecce ;
};_cfeg .Data [_fead ]=_gdcga (_cfeg .Data [_fead ],^(_fdabg |_cfeg .Data [_fead ]),_dae );_fead +=_cfeg .BytesPerLine ;_edee +=_egbg .BytesPerLine ;};};if _ebc {for _dccb =0;_dccb < _bbbf ;_dccb ++{for _agff =0;_agff < _gcfc ;_agff ++{_fdabg =_gdcga (_egbg .Data [_cabf +_agff ]<<_ffcg ,_egbg .Data [_cabf +_agff +1]>>_aecce ,_bcd );
_cfeg .Data [_bbecc +_agff ]=^(_fdabg |_cfeg .Data [_bbecc +_agff ]);};_bbecc +=_cfeg .BytesPerLine ;_cabf +=_egbg .BytesPerLine ;};};if _deea {for _dccb =0;_dccb < _bbbf ;_dccb ++{_fdabg =_egbg .Data [_eced ]<<_ffcg ;if _bagg {_fdabg =_gdcga (_fdabg ,_egbg .Data [_eced +1]>>_aecce ,_bcd );
};_cfeg .Data [_befb ]=_gdcga (_cfeg .Data [_befb ],^(_fdabg |_cfeg .Data [_befb ]),_afacg );_befb +=_cfeg .BytesPerLine ;_eced +=_egbg .BytesPerLine ;};};case PixNotPixSrcAndDst :if _ebd {for _dccb =0;_dccb < _bbbf ;_dccb ++{if _defg ==_fadf {_fdabg =_egbg .Data [_edee ]<<_ffcg ;
if _edag {_fdabg =_gdcga (_fdabg ,_egbg .Data [_edee +1]>>_aecce ,_bcd );};}else {_fdabg =_egbg .Data [_edee ]>>_aecce ;};_cfeg .Data [_fead ]=_gdcga (_cfeg .Data [_fead ],^(_fdabg &_cfeg .Data [_fead ]),_dae );_fead +=_cfeg .BytesPerLine ;_edee +=_egbg .BytesPerLine ;
};};if _ebc {for _dccb =0;_dccb < _bbbf ;_dccb ++{for _agff =0;_agff < _gcfc ;_agff ++{_fdabg =_gdcga (_egbg .Data [_cabf +_agff ]<<_ffcg ,_egbg .Data [_cabf +_agff +1]>>_aecce ,_bcd );_cfeg .Data [_bbecc +_agff ]=^(_fdabg &_cfeg .Data [_bbecc +_agff ]);
};_bbecc +=_cfeg .BytesPerLine ;_cabf +=_egbg .BytesPerLine ;};};if _deea {for _dccb =0;_dccb < _bbbf ;_dccb ++{_fdabg =_egbg .Data [_eced ]<<_ffcg ;if _bagg {_fdabg =_gdcga (_fdabg ,_egbg .Data [_eced +1]>>_aecce ,_bcd );};_cfeg .Data [_befb ]=_gdcga (_cfeg .Data [_befb ],^(_fdabg &_cfeg .Data [_befb ]),_afacg );
_befb +=_cfeg .BytesPerLine ;_eced +=_egbg .BytesPerLine ;};};case PixNotPixSrcXorDst :if _ebd {for _dccb =0;_dccb < _bbbf ;_dccb ++{if _defg ==_fadf {_fdabg =_egbg .Data [_edee ]<<_ffcg ;if _edag {_fdabg =_gdcga (_fdabg ,_egbg .Data [_edee +1]>>_aecce ,_bcd );
};}else {_fdabg =_egbg .Data [_edee ]>>_aecce ;};_cfeg .Data [_fead ]=_gdcga (_cfeg .Data [_fead ],^(_fdabg ^_cfeg .Data [_fead ]),_dae );_fead +=_cfeg .BytesPerLine ;_edee +=_egbg .BytesPerLine ;};};if _ebc {for _dccb =0;_dccb < _bbbf ;_dccb ++{for _agff =0;
_agff < _gcfc ;_agff ++{_fdabg =_gdcga (_egbg .Data [_cabf +_agff ]<<_ffcg ,_egbg .Data [_cabf +_agff +1]>>_aecce ,_bcd );_cfeg .Data [_bbecc +_agff ]=^(_fdabg ^_cfeg .Data [_bbecc +_agff ]);};_bbecc +=_cfeg .BytesPerLine ;_cabf +=_egbg .BytesPerLine ;
};};if _deea {for _dccb =0;_dccb < _bbbf ;_dccb ++{_fdabg =_egbg .Data [_eced ]<<_ffcg ;if _bagg {_fdabg =_gdcga (_fdabg ,_egbg .Data [_eced +1]>>_aecce ,_bcd );};_cfeg .Data [_befb ]=_gdcga (_cfeg .Data [_befb ],^(_fdabg ^_cfeg .Data [_befb ]),_afacg );
_befb +=_cfeg .BytesPerLine ;_eced +=_egbg .BytesPerLine ;};};default:_c .Log .Debug ("\u004f\u0070e\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0074\u0020\u0070\u0065\u0072\u006d\u0069tt\u0065\u0064",_gcg );
return _bb .New ("\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065r\u0061\u0074\u0069\u006f\u006e\u0020\u006eo\u0074\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074\u0065\u0064");};return nil ;};type nrgba64 interface{NRGBA64At (_edgb ,_egbe int )_bg .NRGBA64 ;
SetNRGBA64 (_cecge ,_caadg int ,_ebbcf _bg .NRGBA64 );};func _fbdcg (_ddfb _bff .Image )(Image ,error ){if _edfb ,_deag :=_ddfb .(*NRGBA16 );_deag {return _edfb .Copy (),nil ;};_ddcf :=_ddfb .Bounds ();_ffgb ,_adgd :=NewImage (_ddcf .Max .X ,_ddcf .Max .Y ,4,3,nil ,nil ,nil );
if _adgd !=nil {return nil ,_adgd ;};_geed (_ddfb ,_ffgb ,_ddcf );return _ffgb ,nil ;};func _gdc (_efe ,_ccg *Monochrome )(_fc error ){_ggf :=_ccg .BytesPerLine ;_ab :=_efe .BytesPerLine ;var _bcb ,_eeg ,_gefc ,_eegb ,_eb int ;for _gefc =0;_gefc < _ccg .Height ;
_gefc ++{_bcb =_gefc *_ggf ;_eeg =8*_gefc *_ab ;for _eegb =0;_eegb < _ggf ;_eegb ++{if _fc =_efe .setEightBytes (_eeg +_eegb *8,_gee [_ccg .Data [_bcb +_eegb ]]);_fc !=nil {return _fc ;};};for _eb =1;_eb < 8;_eb ++{for _eegb =0;_eegb < _ab ;_eegb ++{if _fc =_efe .setByte (_eeg +_eb *_ab +_eegb ,_efe .Data [_eeg +_eegb ]);
_fc !=nil {return _fc ;};};};};return nil ;};func (_aggd *Gray2 )Validate ()error {if len (_aggd .Data )!=_aggd .Height *_aggd .BytesPerLine {return ErrInvalidImage ;};return nil ;};var _ Image =&Gray8 {};func (_bffd *Gray4 )Copy ()Image {return &Gray4 {ImageBase :_bffd .copy ()}};
var _ NRGBA =&NRGBA16 {};func (_efag *Gray4 )Histogram ()(_cefe [256]int ){for _bgd :=0;_bgd < _efag .Width ;_bgd ++{for _ddaf :=0;_ddaf < _efag .Height ;_ddaf ++{_cefe [_efag .GrayAt (_bgd ,_ddaf ).Y ]++;};};return _cefe ;};func (_bccd *NRGBA32 )Bounds ()_bff .Rectangle {return _bff .Rectangle {Max :_bff .Point {X :_bccd .Width ,Y :_bccd .Height }};
};func _gdcga (_bddg ,_gfag ,_aggb byte )byte {return (_bddg &^(_aggb ))|(_gfag &_aggb )};type RasterOperator int ;type monochromeThresholdConverter struct{Threshold uint8 ;};func (_ggbb *NRGBA64 )Base ()*ImageBase {return &_ggbb .ImageBase };func _cdfbe (_bdfga _bff .Image )(Image ,error ){if _ebgb ,_edgg :=_bdfga .(*NRGBA32 );
_edgg {return _ebgb .Copy (),nil ;};_dbff ,_cgfg ,_bbedb :=_ddde (_bdfga ,1);_accg ,_ggbe :=NewImage (_dbff .Max .X ,_dbff .Max .Y ,8,3,nil ,_bbedb ,nil );if _ggbe !=nil {return nil ,_ggbe ;};_geed (_bdfga ,_accg ,_dbff );if len (_bbedb )!=0&&!_cgfg {if _baag :=_cede (_bbedb ,_accg );
_baag !=nil {return nil ,_baag ;};};return _accg ,nil ;};func (_dbbe *Gray16 )Validate ()error {if len (_dbbe .Data )!=_dbbe .Height *_dbbe .BytesPerLine {return ErrInvalidImage ;};return nil ;};func _ebee (_beag _bg .NYCbCrA )_bg .NRGBA {_ggb :=int32 (_beag .Y )*0x10101;
_bdd :=int32 (_beag .Cb )-128;_edfcc :=int32 (_beag .Cr )-128;_cgae :=_ggb +91881*_edfcc ;if uint32 (_cgae )&0xff000000==0{_cgae >>=8;}else {_cgae =^(_cgae >>31)&0xffff;};_eda :=_ggb -22554*_bdd -46802*_edfcc ;if uint32 (_eda )&0xff000000==0{_eda >>=8;
}else {_eda =^(_eda >>31)&0xffff;};_fca :=_ggb +116130*_bdd ;if uint32 (_fca )&0xff000000==0{_fca >>=8;}else {_fca =^(_fca >>31)&0xffff;};return _bg .NRGBA {R :uint8 (_cgae >>8),G :uint8 (_eda >>8),B :uint8 (_fca >>8),A :_beag .A };};type RGBA interface{RGBAAt (_dbfg ,_ebg int )_bg .RGBA ;
SetRGBA (_eaagb ,_cafdb int ,_eddag _bg .RGBA );};func (_ceaa *NRGBA16 )ColorModel ()_bg .Model {return NRGBA16Model };func (_gddg *NRGBA32 )Base ()*ImageBase {return &_gddg .ImageBase };func _dcca (_fdg _bg .RGBA )_bg .CMYK {_eebg ,_badb ,_agca ,_fbe :=_bg .RGBToCMYK (_fdg .R ,_fdg .G ,_fdg .B );
return _bg .CMYK {C :_eebg ,M :_badb ,Y :_agca ,K :_fbe };};func IsPowerOf2 (n uint )bool {return n > 0&&(n &(n -1))==0};func (_cdag *Gray4 )At (x ,y int )_bg .Color {_ffa ,_ :=_cdag .ColorAt (x ,y );return _ffa };var _ Gray =&Monochrome {};func (_eegbc *Monochrome )getBit (_deb ,_bfe int )uint8 {return _eegbc .Data [_deb +(_bfe >>3)]>>uint (7-(_bfe &7))&1;
};func (_cbbe *RGBA32 )Bounds ()_bff .Rectangle {return _bff .Rectangle {Max :_bff .Point {X :_cbbe .Width ,Y :_cbbe .Height }};};func (_gcgf *RGBA32 )setRGBA (_acff int ,_ecda _bg .RGBA ){_ffbf :=3*_acff ;_gcgf .Data [_ffbf ]=_ecda .R ;_gcgf .Data [_ffbf +1]=_ecda .G ;
_gcgf .Data [_ffbf +2]=_ecda .B ;if _acff < len (_gcgf .Alpha ){_gcgf .Alpha [_acff ]=_ecda .A ;};};func (_ggec *NRGBA16 )Set (x ,y int ,c _bg .Color ){_bfcf :=y *_ggec .BytesPerLine +x *3/2;if _bfcf +1>=len (_ggec .Data ){return ;};_egg :=NRGBA16Model .Convert (c ).(_bg .NRGBA );
_ggec .setNRGBA (x ,y ,_bfcf ,_egg );};func (_eece *NRGBA32 )setRGBA (_affdf int ,_geegc _bg .NRGBA ){_gddc :=3*_affdf ;_eece .Data [_gddc ]=_geegc .R ;_eece .Data [_gddc +1]=_geegc .G ;_eece .Data [_gddc +2]=_geegc .B ;if _affdf < len (_eece .Alpha ){_eece .Alpha [_affdf ]=_geegc .A ;
};};func ColorAtNRGBA32 (x ,y ,width int ,data ,alpha []byte ,decode []float64 )(_bg .NRGBA ,error ){_agb :=y *width +x ;_eafa :=3*_agb ;if _eafa +2>=len (data ){return _bg .NRGBA {},_fb .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_ffbg :=uint8 (0xff);if alpha !=nil &&len (alpha )> _agb {_ffbg =alpha [_agb ];};_dbgb ,_afdab ,_ffag :=data [_eafa ],data [_eafa +1],data [_eafa +2];if len (decode )==6{_dbgb =uint8 (uint32 (LinearInterpolate (float64 (_dbgb ),0,255,decode [0],decode [1]))&0xff);
_afdab =uint8 (uint32 (LinearInterpolate (float64 (_afdab ),0,255,decode [2],decode [3]))&0xff);_ffag =uint8 (uint32 (LinearInterpolate (float64 (_ffag ),0,255,decode [4],decode [5]))&0xff);};return _bg .NRGBA {R :_dbgb ,G :_afdab ,B :_ffag ,A :_ffbg },nil ;
};func (_dceb *NRGBA32 )At (x ,y int )_bg .Color {_cfde ,_ :=_dceb .ColorAt (x ,y );return _cfde };func (_efae *ImageBase )setFourBytes (_edbb int ,_bede uint32 )error {if _edbb +3> len (_efae .Data )-1{return _fb .Errorf ("\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_edbb );
};_efae .Data [_edbb ]=byte ((_bede &0xff000000)>>24);_efae .Data [_edbb +1]=byte ((_bede &0xff0000)>>16);_efae .Data [_edbb +2]=byte ((_bede &0xff00)>>8);_efae .Data [_edbb +3]=byte (_bede &0xff);return nil ;};func MonochromeThresholdConverter (threshold uint8 )ColorConverter {return &monochromeThresholdConverter {Threshold :threshold };
};func _gdcge (_affd _bg .Gray )_bg .Gray {_affd .Y >>=4;_affd .Y |=_affd .Y <<4;return _affd };func (_gbfc *NRGBA64 )ColorModel ()_bg .Model {return _bg .NRGBA64Model };func (_ceg *Monochrome )At (x ,y int )_bg .Color {_gccg ,_ :=_ceg .ColorAt (x ,y );
return _gccg };type NRGBA16 struct{ImageBase };func _cgadg (_abad *Monochrome ,_ccgd ,_bffce ,_bdcg ,_aecd int ,_edab RasterOperator ,_aaaf *Monochrome ,_fdaad ,_dccae int )error {var (_aecc bool ;_fab bool ;_cegb int ;_bdga int ;_dfbf int ;_ddgf bool ;
_cbce byte ;_dgcd int ;_dab int ;_cggd int ;_eaccc ,_deee int ;);_eefg :=8-(_ccgd &7);_fagc :=_aced [_eefg ];_bdab :=_abad .BytesPerLine *_bffce +(_ccgd >>3);_feff :=_aaaf .BytesPerLine *_dccae +(_fdaad >>3);if _bdcg < _eefg {_aecc =true ;_fagc &=_adeg [8-_eefg +_bdcg ];
};if !_aecc {_cegb =(_bdcg -_eefg )>>3;if _cegb > 0{_fab =true ;_bdga =_bdab +1;_dfbf =_feff +1;};};_dgcd =(_ccgd +_bdcg )&7;if !(_aecc ||_dgcd ==0){_ddgf =true ;_cbce =_adeg [_dgcd ];_dab =_bdab +1+_cegb ;_cggd =_feff +1+_cegb ;};switch _edab {case PixSrc :for _eaccc =0;
_eaccc < _aecd ;_eaccc ++{_abad .Data [_bdab ]=_gdcga (_abad .Data [_bdab ],_aaaf .Data [_feff ],_fagc );_bdab +=_abad .BytesPerLine ;_feff +=_aaaf .BytesPerLine ;};if _fab {for _eaccc =0;_eaccc < _aecd ;_eaccc ++{for _deee =0;_deee < _cegb ;_deee ++{_abad .Data [_bdga +_deee ]=_aaaf .Data [_dfbf +_deee ];
};_bdga +=_abad .BytesPerLine ;_dfbf +=_aaaf .BytesPerLine ;};};if _ddgf {for _eaccc =0;_eaccc < _aecd ;_eaccc ++{_abad .Data [_dab ]=_gdcga (_abad .Data [_dab ],_aaaf .Data [_cggd ],_cbce );_dab +=_abad .BytesPerLine ;_cggd +=_aaaf .BytesPerLine ;};};
case PixNotSrc :for _eaccc =0;_eaccc < _aecd ;_eaccc ++{_abad .Data [_bdab ]=_gdcga (_abad .Data [_bdab ],^_aaaf .Data [_feff ],_fagc );_bdab +=_abad .BytesPerLine ;_feff +=_aaaf .BytesPerLine ;};if _fab {for _eaccc =0;_eaccc < _aecd ;_eaccc ++{for _deee =0;
_deee < _cegb ;_deee ++{_abad .Data [_bdga +_deee ]=^_aaaf .Data [_dfbf +_deee ];};_bdga +=_abad .BytesPerLine ;_dfbf +=_aaaf .BytesPerLine ;};};if _ddgf {for _eaccc =0;_eaccc < _aecd ;_eaccc ++{_abad .Data [_dab ]=_gdcga (_abad .Data [_dab ],^_aaaf .Data [_cggd ],_cbce );
_dab +=_abad .BytesPerLine ;_cggd +=_aaaf .BytesPerLine ;};};case PixSrcOrDst :for _eaccc =0;_eaccc < _aecd ;_eaccc ++{_abad .Data [_bdab ]=_gdcga (_abad .Data [_bdab ],_aaaf .Data [_feff ]|_abad .Data [_bdab ],_fagc );_bdab +=_abad .BytesPerLine ;_feff +=_aaaf .BytesPerLine ;
};if _fab {for _eaccc =0;_eaccc < _aecd ;_eaccc ++{for _deee =0;_deee < _cegb ;_deee ++{_abad .Data [_bdga +_deee ]|=_aaaf .Data [_dfbf +_deee ];};_bdga +=_abad .BytesPerLine ;_dfbf +=_aaaf .BytesPerLine ;};};if _ddgf {for _eaccc =0;_eaccc < _aecd ;_eaccc ++{_abad .Data [_dab ]=_gdcga (_abad .Data [_dab ],_aaaf .Data [_cggd ]|_abad .Data [_dab ],_cbce );
_dab +=_abad .BytesPerLine ;_cggd +=_aaaf .BytesPerLine ;};};case PixSrcAndDst :for _eaccc =0;_eaccc < _aecd ;_eaccc ++{_abad .Data [_bdab ]=_gdcga (_abad .Data [_bdab ],_aaaf .Data [_feff ]&_abad .Data [_bdab ],_fagc );_bdab +=_abad .BytesPerLine ;_feff +=_aaaf .BytesPerLine ;
};if _fab {for _eaccc =0;_eaccc < _aecd ;_eaccc ++{for _deee =0;_deee < _cegb ;_deee ++{_abad .Data [_bdga +_deee ]&=_aaaf .Data [_dfbf +_deee ];};_bdga +=_abad .BytesPerLine ;_dfbf +=_aaaf .BytesPerLine ;};};if _ddgf {for _eaccc =0;_eaccc < _aecd ;_eaccc ++{_abad .Data [_dab ]=_gdcga (_abad .Data [_dab ],_aaaf .Data [_cggd ]&_abad .Data [_dab ],_cbce );
_dab +=_abad .BytesPerLine ;_cggd +=_aaaf .BytesPerLine ;};};case PixSrcXorDst :for _eaccc =0;_eaccc < _aecd ;_eaccc ++{_abad .Data [_bdab ]=_gdcga (_abad .Data [_bdab ],_aaaf .Data [_feff ]^_abad .Data [_bdab ],_fagc );_bdab +=_abad .BytesPerLine ;_feff +=_aaaf .BytesPerLine ;
};if _fab {for _eaccc =0;_eaccc < _aecd ;_eaccc ++{for _deee =0;_deee < _cegb ;_deee ++{_abad .Data [_bdga +_deee ]^=_aaaf .Data [_dfbf +_deee ];};_bdga +=_abad .BytesPerLine ;_dfbf +=_aaaf .BytesPerLine ;};};if _ddgf {for _eaccc =0;_eaccc < _aecd ;_eaccc ++{_abad .Data [_dab ]=_gdcga (_abad .Data [_dab ],_aaaf .Data [_cggd ]^_abad .Data [_dab ],_cbce );
_dab +=_abad .BytesPerLine ;_cggd +=_aaaf .BytesPerLine ;};};case PixNotSrcOrDst :for _eaccc =0;_eaccc < _aecd ;_eaccc ++{_abad .Data [_bdab ]=_gdcga (_abad .Data [_bdab ],^(_aaaf .Data [_feff ])|_abad .Data [_bdab ],_fagc );_bdab +=_abad .BytesPerLine ;
_feff +=_aaaf .BytesPerLine ;};if _fab {for _eaccc =0;_eaccc < _aecd ;_eaccc ++{for _deee =0;_deee < _cegb ;_deee ++{_abad .Data [_bdga +_deee ]|=^(_aaaf .Data [_dfbf +_deee ]);};_bdga +=_abad .BytesPerLine ;_dfbf +=_aaaf .BytesPerLine ;};};if _ddgf {for _eaccc =0;
_eaccc < _aecd ;_eaccc ++{_abad .Data [_dab ]=_gdcga (_abad .Data [_dab ],^(_aaaf .Data [_cggd ])|_abad .Data [_dab ],_cbce );_dab +=_abad .BytesPerLine ;_cggd +=_aaaf .BytesPerLine ;};};case PixNotSrcAndDst :for _eaccc =0;_eaccc < _aecd ;_eaccc ++{_abad .Data [_bdab ]=_gdcga (_abad .Data [_bdab ],^(_aaaf .Data [_feff ])&_abad .Data [_bdab ],_fagc );
_bdab +=_abad .BytesPerLine ;_feff +=_aaaf .BytesPerLine ;};if _fab {for _eaccc =0;_eaccc < _aecd ;_eaccc ++{for _deee =0;_deee < _cegb ;_deee ++{_abad .Data [_bdga +_deee ]&=^_aaaf .Data [_dfbf +_deee ];};_bdga +=_abad .BytesPerLine ;_dfbf +=_aaaf .BytesPerLine ;
};};if _ddgf {for _eaccc =0;_eaccc < _aecd ;_eaccc ++{_abad .Data [_dab ]=_gdcga (_abad .Data [_dab ],^(_aaaf .Data [_cggd ])&_abad .Data [_dab ],_cbce );_dab +=_abad .BytesPerLine ;_cggd +=_aaaf .BytesPerLine ;};};case PixSrcOrNotDst :for _eaccc =0;_eaccc < _aecd ;
_eaccc ++{_abad .Data [_bdab ]=_gdcga (_abad .Data [_bdab ],_aaaf .Data [_feff ]|^(_abad .Data [_bdab ]),_fagc );_bdab +=_abad .BytesPerLine ;_feff +=_aaaf .BytesPerLine ;};if _fab {for _eaccc =0;_eaccc < _aecd ;_eaccc ++{for _deee =0;_deee < _cegb ;_deee ++{_abad .Data [_bdga +_deee ]=_aaaf .Data [_dfbf +_deee ]|^(_abad .Data [_bdga +_deee ]);
};_bdga +=_abad .BytesPerLine ;_dfbf +=_aaaf .BytesPerLine ;};};if _ddgf {for _eaccc =0;_eaccc < _aecd ;_eaccc ++{_abad .Data [_dab ]=_gdcga (_abad .Data [_dab ],_aaaf .Data [_cggd ]|^(_abad .Data [_dab ]),_cbce );_dab +=_abad .BytesPerLine ;_cggd +=_aaaf .BytesPerLine ;
};};case PixSrcAndNotDst :for _eaccc =0;_eaccc < _aecd ;_eaccc ++{_abad .Data [_bdab ]=_gdcga (_abad .Data [_bdab ],_aaaf .Data [_feff ]&^(_abad .Data [_bdab ]),_fagc );_bdab +=_abad .BytesPerLine ;_feff +=_aaaf .BytesPerLine ;};if _fab {for _eaccc =0;
_eaccc < _aecd ;_eaccc ++{for _deee =0;_deee < _cegb ;_deee ++{_abad .Data [_bdga +_deee ]=_aaaf .Data [_dfbf +_deee ]&^(_abad .Data [_bdga +_deee ]);};_bdga +=_abad .BytesPerLine ;_dfbf +=_aaaf .BytesPerLine ;};};if _ddgf {for _eaccc =0;_eaccc < _aecd ;
_eaccc ++{_abad .Data [_dab ]=_gdcga (_abad .Data [_dab ],_aaaf .Data [_cggd ]&^(_abad .Data [_dab ]),_cbce );_dab +=_abad .BytesPerLine ;_cggd +=_aaaf .BytesPerLine ;};};case PixNotPixSrcOrDst :for _eaccc =0;_eaccc < _aecd ;_eaccc ++{_abad .Data [_bdab ]=_gdcga (_abad .Data [_bdab ],^(_aaaf .Data [_feff ]|_abad .Data [_bdab ]),_fagc );
_bdab +=_abad .BytesPerLine ;_feff +=_aaaf .BytesPerLine ;};if _fab {for _eaccc =0;_eaccc < _aecd ;_eaccc ++{for _deee =0;_deee < _cegb ;_deee ++{_abad .Data [_bdga +_deee ]=^(_aaaf .Data [_dfbf +_deee ]|_abad .Data [_bdga +_deee ]);};_bdga +=_abad .BytesPerLine ;
_dfbf +=_aaaf .BytesPerLine ;};};if _ddgf {for _eaccc =0;_eaccc < _aecd ;_eaccc ++{_abad .Data [_dab ]=_gdcga (_abad .Data [_dab ],^(_aaaf .Data [_cggd ]|_abad .Data [_dab ]),_cbce );_dab +=_abad .BytesPerLine ;_cggd +=_aaaf .BytesPerLine ;};};case PixNotPixSrcAndDst :for _eaccc =0;
_eaccc < _aecd ;_eaccc ++{_abad .Data [_bdab ]=_gdcga (_abad .Data [_bdab ],^(_aaaf .Data [_feff ]&_abad .Data [_bdab ]),_fagc );_bdab +=_abad .BytesPerLine ;_feff +=_aaaf .BytesPerLine ;};if _fab {for _eaccc =0;_eaccc < _aecd ;_eaccc ++{for _deee =0;_deee < _cegb ;
_deee ++{_abad .Data [_bdga +_deee ]=^(_aaaf .Data [_dfbf +_deee ]&_abad .Data [_bdga +_deee ]);};_bdga +=_abad .BytesPerLine ;_dfbf +=_aaaf .BytesPerLine ;};};if _ddgf {for _eaccc =0;_eaccc < _aecd ;_eaccc ++{_abad .Data [_dab ]=_gdcga (_abad .Data [_dab ],^(_aaaf .Data [_cggd ]&_abad .Data [_dab ]),_cbce );
_dab +=_abad .BytesPerLine ;_cggd +=_aaaf .BytesPerLine ;};};case PixNotPixSrcXorDst :for _eaccc =0;_eaccc < _aecd ;_eaccc ++{_abad .Data [_bdab ]=_gdcga (_abad .Data [_bdab ],^(_aaaf .Data [_feff ]^_abad .Data [_bdab ]),_fagc );_bdab +=_abad .BytesPerLine ;
_feff +=_aaaf .BytesPerLine ;};if _fab {for _eaccc =0;_eaccc < _aecd ;_eaccc ++{for _deee =0;_deee < _cegb ;_deee ++{_abad .Data [_bdga +_deee ]=^(_aaaf .Data [_dfbf +_deee ]^_abad .Data [_bdga +_deee ]);};_bdga +=_abad .BytesPerLine ;_dfbf +=_aaaf .BytesPerLine ;
};};if _ddgf {for _eaccc =0;_eaccc < _aecd ;_eaccc ++{_abad .Data [_dab ]=_gdcga (_abad .Data [_dab ],^(_aaaf .Data [_cggd ]^_abad .Data [_dab ]),_cbce );_dab +=_abad .BytesPerLine ;_cggd +=_aaaf .BytesPerLine ;};};default:_c .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070e\u0072\u0061\u0074o\u0072:\u0020\u0025\u0064",_edab );
return _bb .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");};return nil ;};func (_bbge *RGBA32 )Copy ()Image {return &RGBA32 {ImageBase :_bbge .copy ()}};func _ggfe (_gcgg ,_fagbc NRGBA ,_cdcc _bff .Rectangle ){for _cdef :=0;
_cdef < _cdcc .Max .X ;_cdef ++{for _febc :=0;_febc < _cdcc .Max .Y ;_febc ++{_fagbc .SetNRGBA (_cdef ,_febc ,_gcgg .NRGBAAt (_cdef ,_febc ));};};};func ColorAtGray16BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_bg .Gray16 ,error ){_cegc :=(y *bytesPerLine /2+x )*2;
if _cegc +1>=len (data ){return _bg .Gray16 {},_fb .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_efec :=uint16 (data [_cegc ])<<8|uint16 (data [_cegc +1]);if len (decode )==2{_efec =uint16 (uint64 (LinearInterpolate (float64 (_efec ),0,65535,decode [0],decode [1])));};return _bg .Gray16 {Y :_efec },nil ;};func _ccdd (_aceb _bff .Image )(Image ,error ){if _caegd ,_gadb :=_aceb .(*NRGBA64 );
_gadb {return _caegd .Copy (),nil ;};_cbaga ,_fbeac ,_agda :=_ddde (_aceb ,2);_cdca ,_fbdcf :=NewImage (_cbaga .Max .X ,_cbaga .Max .Y ,16,3,nil ,_agda ,nil );if _fbdcf !=nil {return nil ,_fbdcf ;};_deda (_aceb ,_cdca ,_cbaga );if len (_agda )!=0&&!_fbeac {if _beae :=_cede (_agda ,_cdca );
_beae !=nil {return nil ,_beae ;};};return _cdca ,nil ;};func _abgda (_ecf _bff .Image )(Image ,error ){if _cdgg ,_ggg :=_ecf .(*Gray2 );_ggg {return _cdgg .Copy (),nil ;};_accb :=_ecf .Bounds ();_deab ,_dbed :=NewImage (_accb .Max .X ,_accb .Max .Y ,2,1,nil ,nil ,nil );
if _dbed !=nil {return nil ,_dbed ;};_ccc (_ecf ,_deab ,_accb );return _deab ,nil ;};func (_dcac *RGBA32 )At (x ,y int )_bg .Color {_gfdc ,_ :=_dcac .ColorAt (x ,y );return _gfdc };var _eddd [256]uint8 ;func ColorAtRGBA32 (x ,y ,width int ,data ,alpha []byte ,decode []float64 )(_bg .RGBA ,error ){_gaeg :=y *width +x ;
_ddaaf :=3*_gaeg ;if _ddaaf +2>=len (data ){return _bg .RGBA {},_fb .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_bgbef :=uint8 (0xff);if alpha !=nil &&len (alpha )> _gaeg {_bgbef =alpha [_gaeg ];};_cdadc ,_dgae ,_gcefd :=data [_ddaaf ],data [_ddaaf +1],data [_ddaaf +2];if len (decode )==6{_cdadc =uint8 (uint32 (LinearInterpolate (float64 (_cdadc ),0,255,decode [0],decode [1]))&0xff);
_dgae =uint8 (uint32 (LinearInterpolate (float64 (_dgae ),0,255,decode [2],decode [3]))&0xff);_gcefd =uint8 (uint32 (LinearInterpolate (float64 (_gcefd ),0,255,decode [4],decode [5]))&0xff);};return _bg .RGBA {R :_cdadc ,G :_dgae ,B :_gcefd ,A :_bgbef },nil ;
};func ColorAtCMYK (x ,y ,width int ,data []byte ,decode []float64 )(_bg .CMYK ,error ){_cdd :=4*(y *width +x );if _cdd +3>=len (data ){return _bg .CMYK {},_fb .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};C :=data [_cdd ]&0xff;M :=data [_cdd +1]&0xff;Y :=data [_cdd +2]&0xff;K :=data [_cdd +3]&0xff;if len (decode )==8{C =uint8 (uint32 (LinearInterpolate (float64 (C ),0,255,decode [0],decode [1]))&0xff);M =uint8 (uint32 (LinearInterpolate (float64 (M ),0,255,decode [2],decode [3]))&0xff);
Y =uint8 (uint32 (LinearInterpolate (float64 (Y ),0,255,decode [4],decode [5]))&0xff);K =uint8 (uint32 (LinearInterpolate (float64 (K ),0,255,decode [6],decode [7]))&0xff);};return _bg .CMYK {C :C ,M :M ,Y :Y ,K :K },nil ;};func (_gebg *NRGBA32 )Validate ()error {if len (_gebg .Data )!=3*_gebg .Width *_gebg .Height {return _bb .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};func MonochromeModel (threshold uint8 )_bg .Model {return monochromeModel (threshold )};func (_eggc *NRGBA64 )Bounds ()_bff .Rectangle {return _bff .Rectangle {Max :_bff .Point {X :_eggc .Width ,Y :_eggc .Height }};};func (_cbec *Monochrome )Scale (scale float64 )(*Monochrome ,error ){var _faed bool ;
_cafa :=scale ;if scale < 1{_cafa =1/scale ;_faed =true ;};_aadab :=NextPowerOf2 (uint (_cafa ));if InDelta (float64 (_aadab ),_cafa ,0.001){if _faed {return _cbec .ReduceBinary (_cafa );};return _cbec .ExpandBinary (int (_aadab ));};_ddgg :=int (_f .RoundToEven (float64 (_cbec .Width )*scale ));
_cadd :=int (_f .RoundToEven (float64 (_cbec .Height )*scale ));return _cbec .ScaleLow (_ddgg ,_cadd );};func ImgToGray (i _bff .Image )*_bff .Gray {if _cbage ,_ebed :=i .(*_bff .Gray );_ebed {return _cbage ;};_afbg :=i .Bounds ();_fgcd :=_bff .NewGray (_afbg );
for _abd :=0;_abd < _afbg .Max .X ;_abd ++{for _fedd :=0;_fedd < _afbg .Max .Y ;_fedd ++{_agfc :=i .At (_abd ,_fedd );_fgcd .Set (_abd ,_fedd ,_agfc );};};return _fgcd ;};type NRGBA interface{NRGBAAt (_adcc ,_egeg int )_bg .NRGBA ;SetNRGBA (_efbf ,_gbee int ,_cadcdb _bg .NRGBA );
};var _ _bff .Image =&NRGBA16 {};var _ Image =&Gray2 {};func (_addc *NRGBA32 )ColorModel ()_bg .Model {return _bg .NRGBAModel };func _bfgb (_bfge _bg .Gray )_bg .Gray {_cbeda :=_bfge .Y >>6;_cbeda |=_cbeda <<2;_bfge .Y =_cbeda |_cbeda <<4;return _bfge ;
};var _ NRGBA =&NRGBA32 {};func (_fgca *CMYK32 )SetCMYK (x ,y int ,c _bg .CMYK ){_dcb :=4*(y *_fgca .Width +x );if _dcb +3>=len (_fgca .Data ){return ;};_fgca .Data [_dcb ]=c .C ;_fgca .Data [_dcb +1]=c .M ;_fgca .Data [_dcb +2]=c .Y ;_fgca .Data [_dcb +3]=c .K ;
};func _afd (_ddeb _bg .Gray )_bg .CMYK {return _bg .CMYK {K :0xff-_ddeb .Y }};func (_dadac *ImageBase )setEightFullBytes (_ffgdf int ,_acb uint64 )error {if _ffgdf +7> len (_dadac .Data )-1{return _bb .New ("\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_dadac .Data [_ffgdf ]=byte ((_acb &0xff00000000000000)>>56);_dadac .Data [_ffgdf +1]=byte ((_acb &0xff000000000000)>>48);_dadac .Data [_ffgdf +2]=byte ((_acb &0xff0000000000)>>40);_dadac .Data [_ffgdf +3]=byte ((_acb &0xff00000000)>>32);_dadac .Data [_ffgdf +4]=byte ((_acb &0xff000000)>>24);
_dadac .Data [_ffgdf +5]=byte ((_acb &0xff0000)>>16);_dadac .Data [_ffgdf +6]=byte ((_acb &0xff00)>>8);_dadac .Data [_ffgdf +7]=byte (_acb &0xff);return nil ;};func (_fdc *CMYK32 )ColorModel ()_bg .Model {return _bg .CMYKModel };type RGBA32 struct{ImageBase };
func _fcfc (_edce nrgba64 ,_cdaf RGBA ,_dfga _bff .Rectangle ){for _ddcgc :=0;_ddcgc < _dfga .Max .X ;_ddcgc ++{for _ccaaa :=0;_ccaaa < _dfga .Max .Y ;_ccaaa ++{_bbecd :=_edce .NRGBA64At (_ddcgc ,_ccaaa );_cdaf .SetRGBA (_ddcgc ,_ccaaa ,_efce (_bbecd ));
};};};func (_caec *Gray8 )ColorModel ()_bg .Model {return _bg .GrayModel };func ColorAtGray8BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_bg .Gray ,error ){_ffe :=y *bytesPerLine +x ;if _ffe >=len (data ){return _bg .Gray {},_fb .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_ddgd :=data [_ffe ];if len (decode )==2{_ddgd =uint8 (uint32 (LinearInterpolate (float64 (_ddgd ),0,255,decode [0],decode [1]))&0xff);};return _bg .Gray {Y :_ddgd },nil ;};func _caae (_ebbe _bg .Color )_bg .Color {_afb :=_bg .GrayModel .Convert (_ebbe ).(_bg .Gray );
return _gdcge (_afb );};func _beb (_geb _bff .Image )(Image ,error ){if _adc ,_dfb :=_geb .(*CMYK32 );_dfb {return _adc .Copy (),nil ;};_dddf :=_geb .Bounds ();_fbc ,_fef :=NewImage (_dddf .Max .X ,_dddf .Max .Y ,8,4,nil ,nil ,nil );if _fef !=nil {return nil ,_fef ;
};switch _eae :=_geb .(type ){case CMYK :_fdeb (_eae ,_fbc .(CMYK ),_dddf );case Gray :_ccd (_eae ,_fbc .(CMYK ),_dddf );case NRGBA :_cdc (_eae ,_fbc .(CMYK ),_dddf );case RGBA :_dbaa (_eae ,_fbc .(CMYK ),_dddf );default:_cde (_geb ,_fbc ,_dddf );};return _fbc ,nil ;
};func AddDataPadding (width ,height ,bitsPerComponent ,colorComponents int ,data []byte )([]byte ,error ){_ecfc :=BytesPerLine (width ,bitsPerComponent ,colorComponents );if _ecfc ==width *colorComponents *bitsPerComponent /8{return data ,nil ;};_bfce :=width *colorComponents *bitsPerComponent ;
_gcag :=_ecfc *8;_edeb :=8-(_gcag -_bfce );_cdf :=_bba .NewReader (data );_geec :=_ecfc -1;_cfe :=make ([]byte ,_geec );_gfde :=make ([]byte ,height *_ecfc );_caea :=_bba .NewWriterMSB (_gfde );var _ffd uint64 ;var _ecag error ;for _gagcc :=0;_gagcc < height ;
_gagcc ++{_ ,_ecag =_cdf .Read (_cfe );if _ecag !=nil {return nil ,_ecag ;};_ ,_ecag =_caea .Write (_cfe );if _ecag !=nil {return nil ,_ecag ;};_ffd ,_ecag =_cdf .ReadBits (byte (_edeb ));if _ecag !=nil {return nil ,_ecag ;};_ ,_ecag =_caea .WriteBits (_ffd ,_edeb );
if _ecag !=nil {return nil ,_ecag ;};_caea .FinishByte ();};return _gfde ,nil ;};type NRGBA32 struct{ImageBase };func (_aegg *ImageBase )setEightBytes (_fgdd int ,_geeg uint64 )error {_fagg :=_aegg .BytesPerLine -(_fgdd %_aegg .BytesPerLine );if _aegg .BytesPerLine !=_aegg .Width >>3{_fagg --;
};if _fagg >=8{return _aegg .setEightFullBytes (_fgdd ,_geeg );};return _aegg .setEightPartlyBytes (_fgdd ,_fagg ,_geeg );};func _fgfg (_ccdb _bg .NYCbCrA )_bg .RGBA {_afaa ,_dcec ,_afg ,_eaf :=_ebee (_ccdb ).RGBA ();return _bg .RGBA {R :uint8 (_afaa >>8),G :uint8 (_dcec >>8),B :uint8 (_afg >>8),A :uint8 (_eaf >>8)};
};func (_cgd *Monochrome )setIndexedBit (_aag int ){_cgd .Data [(_aag >>3)]|=0x80>>uint (_aag &7)};type Histogramer interface{Histogram ()[256]int ;};func _gccb (_ggcc _bg .NRGBA )_bg .NRGBA {_ggcc .R =_ggcc .R >>4|(_ggcc .R >>4)<<4;_ggcc .G =_ggcc .G >>4|(_ggcc .G >>4)<<4;
_ggcc .B =_ggcc .B >>4|(_ggcc .B >>4)<<4;return _ggcc ;};var _ _bff .Image =&Gray8 {};func (_ggacc *NRGBA16 )Base ()*ImageBase {return &_ggacc .ImageBase };func (_afeb *RGBA32 )RGBAAt (x ,y int )_bg .RGBA {_gead ,_ :=ColorAtRGBA32 (x ,y ,_afeb .Width ,_afeb .Data ,_afeb .Alpha ,_afeb .Decode );
return _gead ;};func (_gacg *RGBA32 )Set (x ,y int ,c _bg .Color ){_efdg :=y *_gacg .Width +x ;_fgeed :=3*_efdg ;if _fgeed +2>=len (_gacg .Data ){return ;};_ggeg :=_bg .RGBAModel .Convert (c ).(_bg .RGBA );_gacg .setRGBA (_efdg ,_ggeg );};func _dbaa (_cea RGBA ,_acf CMYK ,_gfb _bff .Rectangle ){for _gagf :=0;
_gagf < _gfb .Max .X ;_gagf ++{for _ecad :=0;_ecad < _gfb .Max .Y ;_ecad ++{_fbbg :=_cea .RGBAAt (_gagf ,_ecad );_acf .SetCMYK (_gagf ,_ecad ,_dcca (_fbbg ));};};};func (_egb *monochromeThresholdConverter )Convert (img _bff .Image )(Image ,error ){if _fcac ,_ccga :=img .(*Monochrome );
_ccga {return _fcac .Copy (),nil ;};_ceag :=img .Bounds ();_eeec ,_ceadf :=NewImage (_ceag .Max .X ,_ceag .Max .Y ,1,1,nil ,nil ,nil );if _ceadf !=nil {return nil ,_ceadf ;};_eeec .(*Monochrome ).ModelThreshold =_egb .Threshold ;for _cbab :=0;_cbab < _ceag .Max .X ;
_cbab ++{for _cbbg :=0;_cbbg < _ceag .Max .Y ;_cbbg ++{_afdg :=img .At (_cbab ,_cbbg );_eeec .Set (_cbab ,_cbbg ,_afdg );};};return _eeec ,nil ;};func (_cceg *Gray8 )At (x ,y int )_bg .Color {_aegf ,_ :=_cceg .ColorAt (x ,y );return _aegf };func _fece (_caca _bff .Image )(Image ,error ){if _dcaa ,_fadc :=_caca .(*Monochrome );
_fadc {return _dcaa ,nil ;};_fbeb :=_caca .Bounds ();var _bfbe Gray ;switch _ggac :=_caca .(type ){case Gray :_bfbe =_ggac ;case NRGBA :_bfbe =&Gray8 {ImageBase :NewImageBase (_fbeb .Max .X ,_fbeb .Max .Y ,8,1,nil ,nil ,nil )};_bac (_bfbe ,_ggac ,_fbeb );
case nrgba64 :_bfbe =&Gray8 {ImageBase :NewImageBase (_fbeb .Max .X ,_fbeb .Max .Y ,8,1,nil ,nil ,nil )};_fdab (_bfbe ,_ggac ,_fbeb );default:_cecg ,_cgcd :=GrayConverter .Convert (_caca );if _cgcd !=nil {return nil ,_cgcd ;};_bfbe =_cecg .(Gray );};_dgaf ,_afac :=NewImage (_fbeb .Max .X ,_fbeb .Max .Y ,1,1,nil ,nil ,nil );
if _afac !=nil {return nil ,_afac ;};_abgd :=_dgaf .(*Monochrome );_daaa :=AutoThresholdTriangle (GrayHistogram (_bfbe ));for _aadad :=0;_aadad < _fbeb .Max .X ;_aadad ++{for _fdcg :=0;_fdcg < _fbeb .Max .Y ;_fdcg ++{_ceeb :=_dcfg (_bfbe .GrayAt (_aadad ,_fdcg ),monochromeModel (_daaa ));
_abgd .SetGray (_aadad ,_fdcg ,_ceeb );};};return _dgaf ,nil ;};func _cde (_afff _bff .Image ,_eec Image ,_ead _bff .Rectangle ){for _aga :=0;_aga < _ead .Max .X ;_aga ++{for _aad :=0;_aad < _ead .Max .Y ;_aad ++{_caa :=_afff .At (_aga ,_aad );_eec .Set (_aga ,_aad ,_caa );
};};};type Gray16 struct{ImageBase };func RasterOperation (dest *Monochrome ,dx ,dy ,dw ,dh int ,op RasterOperator ,src *Monochrome ,sx ,sy int )error {return _afe (dest ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );};func _gedf (_afda CMYK ,_ccbf Gray ,_aec _bff .Rectangle ){for _bgc :=0;
_bgc < _aec .Max .X ;_bgc ++{for _ecdc :=0;_ecdc < _aec .Max .Y ;_ecdc ++{_afgb :=_acaa (_afda .CMYKAt (_bgc ,_ecdc ));_ccbf .SetGray (_bgc ,_ecdc ,_afgb );};};};func (_fadd *Monochrome )Base ()*ImageBase {return &_fadd .ImageBase };func _eege (_ege ,_bad *Monochrome ,_aca []byte ,_cce int )(_bca error ){var (_fgde ,_aeg ,_bgge ,_aff ,_gedc ,_fgc ,_bfg ,_bdb int ;
_agc ,_dac uint32 ;_gac ,_bcee byte ;_dga uint16 ;);_egc :=make ([]byte ,4);_fbfa :=make ([]byte ,4);for _bgge =0;_bgge < _ege .Height -1;_bgge ,_aff =_bgge +2,_aff +1{_fgde =_bgge *_ege .BytesPerLine ;_aeg =_aff *_bad .BytesPerLine ;for _gedc ,_fgc =0,0;
_gedc < _cce ;_gedc ,_fgc =_gedc +4,_fgc +1{for _bfg =0;_bfg < 4;_bfg ++{_bdb =_fgde +_gedc +_bfg ;if _bdb <=len (_ege .Data )-1&&_bdb < _fgde +_ege .BytesPerLine {_egc [_bfg ]=_ege .Data [_bdb ];}else {_egc [_bfg ]=0x00;};_bdb =_fgde +_ege .BytesPerLine +_gedc +_bfg ;
if _bdb <=len (_ege .Data )-1&&_bdb < _fgde +(2*_ege .BytesPerLine ){_fbfa [_bfg ]=_ege .Data [_bdb ];}else {_fbfa [_bfg ]=0x00;};};_agc =_d .BigEndian .Uint32 (_egc );_dac =_d .BigEndian .Uint32 (_fbfa );_dac &=_agc ;_dac &=_dac <<1;_dac &=0xaaaaaaaa;
_agc =_dac |(_dac <<7);_gac =byte (_agc >>24);_bcee =byte ((_agc >>8)&0xff);_bdb =_aeg +_fgc ;if _bdb +1==len (_bad .Data )-1||_bdb +1>=_aeg +_bad .BytesPerLine {_bad .Data [_bdb ]=_aca [_gac ];if _bca =_bad .setByte (_bdb ,_aca [_gac ]);_bca !=nil {return _fb .Errorf ("\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_bdb );
};}else {_dga =(uint16 (_aca [_gac ])<<8)|uint16 (_aca [_bcee ]);if _bca =_bad .setTwoBytes (_bdb ,_dga );_bca !=nil {return _fb .Errorf ("s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_bdb );
};_fgc ++;};};};return nil ;};func NewImageBase (width int ,height int ,bitsPerComponent int ,colorComponents int ,data []byte ,alpha []byte ,decode []float64 )ImageBase {_bfga :=ImageBase {Width :width ,Height :height ,BitsPerComponent :bitsPerComponent ,ColorComponents :colorComponents ,Data :data ,Alpha :alpha ,Decode :decode ,BytesPerLine :BytesPerLine (width ,bitsPerComponent ,colorComponents )};
if data ==nil {_bfga .Data =make ([]byte ,height *_bfga .BytesPerLine );};return _bfga ;};func (_fegf *RGBA32 )SetRGBA (x ,y int ,c _bg .RGBA ){_fbefg :=y *_fegf .Width +x ;_bgbd :=3*_fbefg ;if _bgbd +2>=len (_fegf .Data ){return ;};_fegf .setRGBA (_fbefg ,c );
};var _ _bff .Image =&Monochrome {};type Gray2 struct{ImageBase };func _cad (_dc ,_ac *Monochrome )(_ce error ){_cee :=_ac .BytesPerLine ;_be :=_dc .BytesPerLine ;var (_dg byte ;_fg uint16 ;_fe ,_ge ,_gce ,_bfb ,_cbb int ;);for _gce =0;_gce < _ac .Height ;
_gce ++{_fe =_gce *_cee ;_ge =2*_gce *_be ;for _bfb =0;_bfb < _cee ;_bfb ++{_dg =_ac .Data [_fe +_bfb ];_fg =_fde [_dg ];_cbb =_ge +_bfb *2;if _dc .BytesPerLine !=_ac .BytesPerLine *2&&(_bfb +1)*2> _dc .BytesPerLine {_ce =_dc .setByte (_cbb ,byte (_fg >>8));
}else {_ce =_dc .setTwoBytes (_cbb ,_fg );};if _ce !=nil {return _ce ;};};for _bfb =0;_bfb < _be ;_bfb ++{_cbb =_ge +_be +_bfb ;_dg =_dc .Data [_ge +_bfb ];if _ce =_dc .setByte (_cbb ,_dg );_ce !=nil {return _ce ;};};};return nil ;};func (_fdf *NRGBA32 )ColorAt (x ,y int )(_bg .Color ,error ){return ColorAtNRGBA32 (x ,y ,_fdf .Width ,_fdf .Data ,_fdf .Alpha ,_fdf .Decode );
};var _ _bff .Image =&NRGBA64 {};func _gdee (_eccd _bg .CMYK )_bg .RGBA {_fea ,_gdeec ,_cba :=_bg .CMYKToRGB (_eccd .C ,_eccd .M ,_eccd .Y ,_eccd .K );return _bg .RGBA {R :_fea ,G :_gdeec ,B :_cba ,A :0xff};};func (_ggfd *CMYK32 )Base ()*ImageBase {return &_ggfd .ImageBase };
func NextPowerOf2 (n uint )uint {if IsPowerOf2 (n ){return n ;};return 1<<(_ffce (n )+1);};func ColorAt (x ,y ,width ,bitsPerColor ,colorComponents ,bytesPerLine int ,data ,alpha []byte ,decode []float64 )(_bg .Color ,error ){switch colorComponents {case 1:return ColorAtGrayscale (x ,y ,bitsPerColor ,bytesPerLine ,data ,decode );
case 3:return ColorAtNRGBA (x ,y ,width ,bytesPerLine ,bitsPerColor ,data ,alpha ,decode );case 4:return ColorAtCMYK (x ,y ,width ,data ,decode );default:return nil ,_fb .Errorf ("\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063o\u006c\u006f\u0072\u0020\u0063\u006f\u006dp\u006f\u006e\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0074h\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0064",colorComponents );
};};func _gefg ()(_gdcg []byte ){_gdcg =make ([]byte ,256);for _eaa :=0;_eaa < 256;_eaa ++{_cab :=byte (_eaa );_gdcg [_cab ]=(_cab &0x01)|((_cab &0x04)>>1)|((_cab &0x10)>>2)|((_cab &0x40)>>3)|((_cab &0x02)<<3)|((_cab &0x08)<<2)|((_cab &0x20)<<1)|(_cab &0x80);
};return _gdcg ;};func (_ggc *NRGBA16 )Validate ()error {if len (_ggc .Data )!=3*_ggc .Width *_ggc .Height /2{return _bb .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};func (_edg *NRGBA16 )Bounds ()_bff .Rectangle {return _bff .Rectangle {Max :_bff .Point {X :_edg .Width ,Y :_edg .Height }};};func _cga (_fgee _bg .NRGBA )_bg .RGBA {_ccag ,_ddbc ,_cfd ,_cbgf :=_fgee .RGBA ();return _bg .RGBA {R :uint8 (_ccag >>8),G :uint8 (_ddbc >>8),B :uint8 (_cfd >>8),A :uint8 (_cbgf >>8)};
};var (_adeg =[]byte {0x00,0x80,0xC0,0xE0,0xF0,0xF8,0xFC,0xFE,0xFF};_aced =[]byte {0x00,0x01,0x03,0x07,0x0F,0x1F,0x3F,0x7F,0xFF};);func _cegbf (_cgeb ,_faec RGBA ,_edaf _bff .Rectangle ){for _agaef :=0;_agaef < _edaf .Max .X ;_agaef ++{for _dcdgga :=0;
_dcdgga < _edaf .Max .Y ;_dcdgga ++{_faec .SetRGBA (_agaef ,_dcdgga ,_cgeb .RGBAAt (_agaef ,_dcdgga ));};};};func GrayHistogram (g Gray )(_acgc [256]int ){switch _ggcf :=g .(type ){case Histogramer :return _ggcf .Histogram ();case _bff .Image :_deec :=_ggcf .Bounds ();
for _bdce :=0;_bdce < _deec .Max .X ;_bdce ++{for _gecga :=0;_gecga < _deec .Max .Y ;_gecga ++{_acgc [g .GrayAt (_bdce ,_gecga ).Y ]++;};};return _acgc ;default:return [256]int {};};};type colorConverter struct{_fafd func (_def _bff .Image )(Image ,error );
};func _abcb (_agaa _bff .Image )(Image ,error ){if _agce ,_dge :=_agaa .(*Gray4 );_dge {return _agce .Copy (),nil ;};_dedbd :=_agaa .Bounds ();_aba ,_dbbg :=NewImage (_dedbd .Max .X ,_dedbd .Max .Y ,4,1,nil ,nil ,nil );if _dbbg !=nil {return nil ,_dbbg ;
};_ccc (_agaa ,_aba ,_dedbd );return _aba ,nil ;};type ImageBase struct{Width ,Height int ;BitsPerComponent ,ColorComponents int ;Data ,Alpha []byte ;Decode []float64 ;BytesPerLine int ;};func _fdab (_cbag Gray ,_bdfg nrgba64 ,_dgab _bff .Rectangle ){for _cbcd :=0;
_cbcd < _dgab .Max .X ;_cbcd ++{for _geg :=0;_geg < _dgab .Max .Y ;_geg ++{_feag :=_cge (_bdfg .NRGBA64At (_cbcd ,_geg ));_cbag .SetGray (_cbcd ,_geg ,_feag );};};};func _acaa (_bebe _bg .CMYK )_bg .Gray {_egef ,_gagb ,_dad :=_bg .CMYKToRGB (_bebe .C ,_bebe .M ,_bebe .Y ,_bebe .K );
_eccde :=(19595*uint32 (_egef )+38470*uint32 (_gagb )+7471*uint32 (_dad )+1<<7)>>16;return _bg .Gray {Y :uint8 (_eccde )};};func (_cagaf *RGBA32 )Validate ()error {if len (_cagaf .Data )!=3*_cagaf .Width *_cagaf .Height {return _bb .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};func (_efbc *NRGBA64 )Set (x ,y int ,c _bg .Color ){_bbcf :=(y *_efbc .Width +x )*2;_cdda :=_bbcf *3;if _cdda +5>=len (_efbc .Data ){return ;};_cfege :=_bg .NRGBA64Model .Convert (c ).(_bg .NRGBA64 );_efbc .setNRGBA64 (_cdda ,_cfege ,_bbcf );
};func (_caeg *Gray4 )SetGray (x ,y int ,g _bg .Gray ){if x >=_caeg .Width ||y >=_caeg .Height {return ;};g =_gdcge (g );_caeg .setGray (x ,y ,g );};func (_bbd *Gray4 )ColorModel ()_bg .Model {return Gray4Model };var _ Image =&Gray4 {};func (_afc *CMYK32 )Validate ()error {if len (_afc .Data )!=4*_afc .Width *_afc .Height {return _bb .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};type Gray4 struct{ImageBase };func _gc (_cb *Monochrome ,_a int ,_dba []uint )(*Monochrome ,error ){_gg :=_a *_cb .Width ;_cbg :=_a *_cb .Height ;_ff :=_dfg (_gg ,_cbg );for _ed ,_de :=range _dba {var _dee error ;switch _de {case 2:_dee =_cad (_ff ,_cb );
case 4:_dee =_ccb (_ff ,_cb );case 8:_dee =_gdc (_ff ,_cb );};if _dee !=nil {return nil ,_dee ;};if _ed !=len (_dba )-1{_cb =_ff .copy ();};};return _ff ,nil ;};func _agg (_ggdb ,_abg int ,_cf []byte )*Monochrome {_abc :=_dfg (_ggdb ,_abg );_abc .Data =_cf ;
return _abc ;};func (_faef *Gray4 )Validate ()error {if len (_faef .Data )!=_faef .Height *_faef .BytesPerLine {return ErrInvalidImage ;};return nil ;};func (_dbaaf *Gray16 )Set (x ,y int ,c _bg .Color ){_fgbdg :=(y *_dbaaf .BytesPerLine /2+x )*2;if _fgbdg +1>=len (_dbaaf .Data ){return ;
};_adf :=_bg .Gray16Model .Convert (c ).(_bg .Gray16 );_dbaaf .Data [_fgbdg ],_dbaaf .Data [_fgbdg +1]=uint8 (_adf .Y >>8),uint8 (_adf .Y &0xff);};func _dbcf (_aaaff _bff .Image )(Image ,error ){if _cabg ,_ecde :=_aaaff .(*RGBA32 );_ecde {return _cabg .Copy (),nil ;
};_edddb ,_cceff ,_cggf :=_ddde (_aaaff ,1);_fcce :=&RGBA32 {ImageBase :NewImageBase (_edddb .Max .X ,_edddb .Max .Y ,8,3,nil ,_cggf ,nil )};_bfag (_aaaff ,_fcce ,_edddb );if len (_cggf )!=0&&!_cceff {if _ecab :=_cede (_cggf ,_fcce );_ecab !=nil {return nil ,_ecab ;
};};return _fcce ,nil ;};func (_cdgge *Gray8 )Histogram ()(_gace [256]int ){for _egba :=0;_egba < len (_cdgge .Data );_egba ++{_gace [_cdgge .Data [_egba ]]++;};return _gace ;};func _cede (_bdfgag []byte ,_fedg Image )error {_adccf :=true ;for _eedbg :=0;
_eedbg < len (_bdfgag );_eedbg ++{if _bdfgag [_eedbg ]!=0xff{_adccf =false ;break ;};};if _adccf {switch _cacc :=_fedg .(type ){case *NRGBA32 :_cacc .Alpha =nil ;case *NRGBA64 :_cacc .Alpha =nil ;default:return _fb .Errorf ("i\u006ete\u0072n\u0061l\u0020\u0065\u0072\u0072\u006fr\u0020\u002d\u0020i\u006d\u0061\u0067\u0065\u0020s\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070e\u0020\u002a\u004eRGB\u0041\u0033\u0032\u0020\u006f\u0072 \u002a\u004e\u0052\u0047\u0042\u0041\u0036\u0034\u0020\u0062\u0075\u0074 \u0069s\u003a\u0020\u0025\u0054",_fedg );
};};return nil ;};func (_bbg *Monochrome )Validate ()error {if len (_bbg .Data )!=_bbg .Height *_bbg .BytesPerLine {return ErrInvalidImage ;};return nil ;};func ScaleAlphaToMonochrome (data []byte ,width ,height int )([]byte ,error ){_e :=BytesPerLine (width ,8,1);
if len (data )< _e *height {return nil ,nil ;};_cc :=&Gray8 {NewImageBase (width ,height ,8,1,data ,nil ,nil )};_g ,_ef :=MonochromeConverter .Convert (_cc );if _ef !=nil {return nil ,_ef ;};return _g .Base ().Data ,nil ;};func _cccdf (_gagbg Gray ,_gfcb RGBA ,_dgfe _bff .Rectangle ){for _cbff :=0;
_cbff < _dgfe .Max .X ;_cbff ++{for _adfd :=0;_adfd < _dgfe .Max .Y ;_adfd ++{_dfe :=_gagbg .GrayAt (_cbff ,_adfd );_gfcb .SetRGBA (_cbff ,_adfd ,_ggdbd (_dfe ));};};};func (_cgad monochromeModel )Convert (c _bg .Color )_bg .Color {_cced :=_bg .GrayModel .Convert (c ).(_bg .Gray );
return _dcfg (_cced ,_cgad );};func (_gbb *Gray2 )ColorAt (x ,y int )(_bg .Color ,error ){return ColorAtGray2BPC (x ,y ,_gbb .BytesPerLine ,_gbb .Data ,_gbb .Decode );};func (_feda *NRGBA32 )SetNRGBA (x ,y int ,c _bg .NRGBA ){_egd :=y *_feda .Width +x ;
_dcfb :=3*_egd ;if _dcfb +2>=len (_feda .Data ){return ;};_feda .setRGBA (_egd ,c );};func (_decg *Monochrome )GrayAt (x ,y int )_bg .Gray {_dedb ,_ :=ColorAtGray1BPC (x ,y ,_decg .BytesPerLine ,_decg .Data ,_decg .Decode );return _dedb ;};var (MonochromeConverter =ConverterFunc (_fece );
Gray2Converter =ConverterFunc (_abgda );Gray4Converter =ConverterFunc (_abcb );GrayConverter =ConverterFunc (_cacgg );Gray16Converter =ConverterFunc (_dagg );NRGBA16Converter =ConverterFunc (_fbdcg );NRGBAConverter =ConverterFunc (_cdfbe );NRGBA64Converter =ConverterFunc (_ccdd );
RGBAConverter =ConverterFunc (_dbcf );CMYKConverter =ConverterFunc (_beb ););func (_dfa *Gray2 )GrayAt (x ,y int )_bg .Gray {_adba ,_ :=ColorAtGray2BPC (x ,y ,_dfa .BytesPerLine ,_dfa .Data ,_dfa .Decode );return _adba ;};func (_ccbff *ImageBase )MakeAlpha (){_ccbff .newAlpha ()};
func (_eacc *Gray8 )Copy ()Image {return &Gray8 {ImageBase :_eacc .copy ()}};func (_gae *Gray2 )Copy ()Image {return &Gray2 {ImageBase :_gae .copy ()}};func _afbb (_gaac nrgba64 ,_caef NRGBA ,_baggd _bff .Rectangle ){for _fdcfg :=0;_fdcfg < _baggd .Max .X ;
_fdcfg ++{for _fega :=0;_fega < _baggd .Max .Y ;_fega ++{_befcg :=_gaac .NRGBA64At (_fdcfg ,_fega );_caef .SetNRGBA (_fdcfg ,_fega ,_dedf (_befcg ));};};};func _cacg (_daa ,_cbf *Monochrome ,_cgc []byte ,_efc int )(_abbf error ){var (_bef ,_gdg ,_bge ,_dgda ,_fgf ,_bgg ,_efa ,_cadc int ;
_fbd ,_ddg uint32 ;_bbe ,_dbc byte ;_fgd uint16 ;);_age :=make ([]byte ,4);_gfe :=make ([]byte ,4);for _bge =0;_bge < _daa .Height -1;_bge ,_dgda =_bge +2,_dgda +1{_bef =_bge *_daa .BytesPerLine ;_gdg =_dgda *_cbf .BytesPerLine ;for _fgf ,_bgg =0,0;_fgf < _efc ;
_fgf ,_bgg =_fgf +4,_bgg +1{for _efa =0;_efa < 4;_efa ++{_cadc =_bef +_fgf +_efa ;if _cadc <=len (_daa .Data )-1&&_cadc < _bef +_daa .BytesPerLine {_age [_efa ]=_daa .Data [_cadc ];}else {_age [_efa ]=0x00;};_cadc =_bef +_daa .BytesPerLine +_fgf +_efa ;
if _cadc <=len (_daa .Data )-1&&_cadc < _bef +(2*_daa .BytesPerLine ){_gfe [_efa ]=_daa .Data [_cadc ];}else {_gfe [_efa ]=0x00;};};_fbd =_d .BigEndian .Uint32 (_age );_ddg =_d .BigEndian .Uint32 (_gfe );_ddg |=_fbd ;_ddg |=_ddg <<1;_ddg &=0xaaaaaaaa;_fbd =_ddg |(_ddg <<7);
_bbe =byte (_fbd >>24);_dbc =byte ((_fbd >>8)&0xff);_cadc =_gdg +_bgg ;if _cadc +1==len (_cbf .Data )-1||_cadc +1>=_gdg +_cbf .BytesPerLine {_cbf .Data [_cadc ]=_cgc [_bbe ];}else {_fgd =(uint16 (_cgc [_bbe ])<<8)|uint16 (_cgc [_dbc ]);if _abbf =_cbf .setTwoBytes (_cadc ,_fgd );
_abbf !=nil {return _fb .Errorf ("s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_cadc );};_bgg ++;};};};return nil ;
};func _ffce (_cefd uint )uint {var _gfge uint ;for _cefd !=0{_cefd >>=1;_gfge ++;};return _gfge -1;};func (_deg *Gray4 )Set (x ,y int ,c _bg .Color ){if x >=_deg .Width ||y >=_deg .Height {return ;};_gcf :=Gray4Model .Convert (c ).(_bg .Gray );_deg .setGray (x ,y ,_gcf );
};func _bbcb (_daca uint8 )bool {if _daca ==0||_daca ==255{return true ;};return false ;};func (_gdff *Monochrome )ColorModel ()_bg .Model {return MonochromeModel (_gdff .ModelThreshold )};func _bbf (){for _bfdg :=0;_bfdg < 256;_bfdg ++{_eddd [_bfdg ]=uint8 (_bfdg &0x1)+(uint8 (_bfdg >>1)&0x1)+(uint8 (_bfdg >>2)&0x1)+(uint8 (_bfdg >>3)&0x1)+(uint8 (_bfdg >>4)&0x1)+(uint8 (_bfdg >>5)&0x1)+(uint8 (_bfdg >>6)&0x1)+(uint8 (_bfdg >>7)&0x1);
};};func _cacgg (_ddf _bff .Image )(Image ,error ){if _edad ,_geffc :=_ddf .(*Gray8 );_geffc {return _edad .Copy (),nil ;};_adg :=_ddf .Bounds ();_ccegg ,_ccf :=NewImage (_adg .Max .X ,_adg .Max .Y ,8,1,nil ,nil ,nil );if _ccf !=nil {return nil ,_ccf ;
};_ccc (_ddf ,_ccegg ,_adg );return _ccegg ,nil ;};func (_cbfc *NRGBA64 )ColorAt (x ,y int )(_bg .Color ,error ){return ColorAtNRGBA64 (x ,y ,_cbfc .Width ,_cbfc .Data ,_cbfc .Alpha ,_cbfc .Decode );};func _ebfb (_deeb *_bff .Gray )bool {for _bdgg :=0;
_bdgg < len (_deeb .Pix );_bdgg ++{if !_bbcb (_deeb .Pix [_bdgg ]){return false ;};};return true ;};func (_fdag *Monochrome )ExpandBinary (factor int )(*Monochrome ,error ){if !IsPowerOf2 (uint (factor )){return nil ,_fb .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0065\u0078\u0070\u0061\u006e\u0064\u0020b\u0069n\u0061\u0072\u0079\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020\u0025\u0064",factor );
};return _bc (_fdag ,factor );};func (_edfg *Monochrome )getBitAt (_eecf ,_dag int )bool {_gfac :=_dag *_edfg .BytesPerLine +(_eecf >>3);_bbc :=_eecf &0x07;_dbge :=uint (7-_bbc );if _gfac > len (_edfg .Data )-1{return false ;};if (_edfg .Data [_gfac ]>>_dbge )&0x01>=1{return true ;
};return false ;};var ErrInvalidImage =_bb .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
func (_eacf *CMYK32 )At (x ,y int )_bg .Color {_abba ,_ :=_eacf .ColorAt (x ,y );return _abba };func (_cgadc *Monochrome )SetGray (x ,y int ,g _bg .Gray ){_gecb :=y *_cgadc .BytesPerLine +x >>3;if _gecb > len (_cgadc .Data )-1{return ;};g =_dcfg (g ,monochromeModel (_cgadc .ModelThreshold ));
_cgadc .setGray (x ,g ,_gecb );};var _ _bff .Image =&RGBA32 {};func _gadg (_baef NRGBA ,_ccfg RGBA ,_gbae _bff .Rectangle ){for _adcb :=0;_adcb < _gbae .Max .X ;_adcb ++{for _baaa :=0;_baaa < _gbae .Max .Y ;_baaa ++{_fdbg :=_baef .NRGBAAt (_adcb ,_baaa );
_ccfg .SetRGBA (_adcb ,_baaa ,_cga (_fdbg ));};};};