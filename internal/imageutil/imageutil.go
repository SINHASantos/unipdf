//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package imageutil ;import (_bf "encoding/binary";_f "errors";_df "fmt";_e "github.com/unidoc/unipdf/v3/common";_g "github.com/unidoc/unipdf/v3/internal/bitwise";_ab "image";_b "image/color";_bd "image/draw";_d "math";);func _gdg (_fbgf *_ab .Gray16 ,_aabe uint8 )*_ab .Gray {_aebd :=_fbgf .Bounds ();
_abdba :=_ab .NewGray (_aebd );for _daaa :=0;_daaa < _aebd .Dx ();_daaa ++{for _baca :=0;_baca < _aebd .Dy ();_baca ++{_ggca :=_fbgf .Gray16At (_daaa ,_baca );_abdba .SetGray (_daaa ,_baca ,_b .Gray {Y :_edgf (uint8 (_ggca .Y /256),_aabe )});};};return _abdba ;
};func _adaac (_cbec RGBA ,_beff NRGBA ,_bfeee _ab .Rectangle ){for _dceg :=0;_dceg < _bfeee .Max .X ;_dceg ++{for _facb :=0;_facb < _bfeee .Max .Y ;_facb ++{_efga :=_cbec .RGBAAt (_dceg ,_facb );_beff .SetNRGBA (_dceg ,_facb ,_ggae (_efga ));};};};func (_ccae *NRGBA64 )ColorModel ()_b .Model {return _b .NRGBA64Model };
func (_abbd *Gray2 )SetGray (x ,y int ,gray _b .Gray ){_edb :=_bgdc (gray );_fgc :=y *_abbd .BytesPerLine ;_cgcc :=_fgc +(x >>2);if _cgcc >=len (_abbd .Data ){return ;};_cegf :=_edb .Y >>6;_abbd .Data [_cgcc ]=(_abbd .Data [_cgcc ]&(^(0xc0>>uint (2*((x )&3)))))|(_cegf <<uint (6-2*(x &3)));
};func (_cbd *CMYK32 )At (x ,y int )_b .Color {_cfa ,_ :=_cbd .ColorAt (x ,y );return _cfa };func _ceb (_ddd ,_ccf *Monochrome ,_ffff []byte ,_gdcd int )(_fdec error ){var (_efda ,_eag ,_cea ,_dfdg ,_deb ,_ceac ,_gfe ,_cffa int ;_ebc ,_agb ,_bdaf ,_dfa uint32 ;
_gc ,_bcdf byte ;_cad uint16 ;);_cdb :=make ([]byte ,4);_cga :=make ([]byte ,4);for _cea =0;_cea < _ddd .Height -1;_cea ,_dfdg =_cea +2,_dfdg +1{_efda =_cea *_ddd .BytesPerLine ;_eag =_dfdg *_ccf .BytesPerLine ;for _deb ,_ceac =0,0;_deb < _gdcd ;_deb ,_ceac =_deb +4,_ceac +1{for _gfe =0;
_gfe < 4;_gfe ++{_cffa =_efda +_deb +_gfe ;if _cffa <=len (_ddd .Data )-1&&_cffa < _efda +_ddd .BytesPerLine {_cdb [_gfe ]=_ddd .Data [_cffa ];}else {_cdb [_gfe ]=0x00;};_cffa =_efda +_ddd .BytesPerLine +_deb +_gfe ;if _cffa <=len (_ddd .Data )-1&&_cffa < _efda +(2*_ddd .BytesPerLine ){_cga [_gfe ]=_ddd .Data [_cffa ];
}else {_cga [_gfe ]=0x00;};};_ebc =_bf .BigEndian .Uint32 (_cdb );_agb =_bf .BigEndian .Uint32 (_cga );_bdaf =_ebc &_agb ;_bdaf |=_bdaf <<1;_dfa =_ebc |_agb ;_dfa &=_dfa <<1;_agb =_bdaf &_dfa ;_agb &=0xaaaaaaaa;_ebc =_agb |(_agb <<7);_gc =byte (_ebc >>24);
_bcdf =byte ((_ebc >>8)&0xff);_cffa =_eag +_ceac ;if _cffa +1==len (_ccf .Data )-1||_cffa +1>=_eag +_ccf .BytesPerLine {if _fdec =_ccf .setByte (_cffa ,_ffff [_gc ]);_fdec !=nil {return _df .Errorf ("\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_cffa );
};}else {_cad =(uint16 (_ffff [_gc ])<<8)|uint16 (_ffff [_bcdf ]);if _fdec =_ccf .setTwoBytes (_cffa ,_cad );_fdec !=nil {return _df .Errorf ("s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_cffa );
};_ceac ++;};};};return nil ;};func (_dgg *Monochrome )GrayAt (x ,y int )_b .Gray {_acegd ,_ :=ColorAtGray1BPC (x ,y ,_dgg .BytesPerLine ,_dgg .Data ,_dgg .Decode );return _acegd ;};func _cacg (_ffffc _b .Gray ,_dfdc monochromeModel )_b .Gray {if _ffffc .Y > uint8 (_dfdc ){return _b .Gray {Y :_d .MaxUint8 };
};return _b .Gray {};};func ScaleAlphaToMonochrome (data []byte ,width ,height int )([]byte ,error ){_c :=BytesPerLine (width ,8,1);if len (data )< _c *height {return nil ,nil ;};_dd :=&Gray8 {NewImageBase (width ,height ,8,1,data ,nil ,nil )};_ec ,_gd :=MonochromeConverter .Convert (_dd );
if _gd !=nil {return nil ,_gd ;};return _ec .Base ().Data ,nil ;};func _edag (_fcdc ,_ggcg Gray ,_agec _ab .Rectangle ){for _fdbe :=0;_fdbe < _agec .Max .X ;_fdbe ++{for _gdbe :=0;_gdbe < _agec .Max .Y ;_gdbe ++{_ggcg .SetGray (_fdbe ,_gdbe ,_fcdc .GrayAt (_fdbe ,_gdbe ));
};};};func (_bgee *NRGBA32 )Copy ()Image {return &NRGBA32 {ImageBase :_bgee .copy ()}};func (_aeea *Gray2 )Copy ()Image {return &Gray2 {ImageBase :_aeea .copy ()}};func (_agd *CMYK32 )ColorModel ()_b .Model {return _b .CMYKModel };type NRGBA64 struct{ImageBase };
var _ _ab .Image =&Gray8 {};var (_aac =[]byte {0x00,0x80,0xC0,0xE0,0xF0,0xF8,0xFC,0xFE,0xFF};_fgef =[]byte {0x00,0x01,0x03,0x07,0x0F,0x1F,0x3F,0x7F,0xFF};);func (_cgadf *Gray4 )Bounds ()_ab .Rectangle {return _ab .Rectangle {Max :_ab .Point {X :_cgadf .Width ,Y :_cgadf .Height }};
};var _ _ab .Image =&Gray16 {};func _gdf (_cddc _b .NRGBA64 )_b .NRGBA {return _b .NRGBA {R :uint8 (_cddc .R >>8),G :uint8 (_cddc .G >>8),B :uint8 (_cddc .B >>8),A :uint8 (_cddc .A >>8)};};type shift int ;var _ Gray =&Gray8 {};func GetConverter (bitsPerComponent ,colorComponents int )(ColorConverter ,error ){switch colorComponents {case 1:switch bitsPerComponent {case 1:return MonochromeConverter ,nil ;
case 2:return Gray2Converter ,nil ;case 4:return Gray4Converter ,nil ;case 8:return GrayConverter ,nil ;case 16:return Gray16Converter ,nil ;};case 3:switch bitsPerComponent {case 4:return NRGBA16Converter ,nil ;case 8:return NRGBAConverter ,nil ;case 16:return NRGBA64Converter ,nil ;
};case 4:return CMYKConverter ,nil ;};return nil ,_df .Errorf ("\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0043o\u006e\u0076\u0065\u0072\u0074\u0065\u0072\u0020\u0070\u0061\u0072\u0061\u006d\u0065t\u0065\u0072\u0073\u002e\u0020\u0042\u0069\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u003a\u0020\u0025\u0064\u002c\u0020\u0043\u006f\u006co\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006et\u0073\u003a \u0025\u0064",bitsPerComponent ,colorComponents );
};func _fada (_ddgfa _b .NRGBA )_b .NRGBA {_ddgfa .R =_ddgfa .R >>4|(_ddgfa .R >>4)<<4;_ddgfa .G =_ddgfa .G >>4|(_ddgfa .G >>4)<<4;_ddgfa .B =_ddgfa .B >>4|(_ddgfa .B >>4)<<4;return _ddgfa ;};func _efe (_cgb NRGBA ,_fae CMYK ,_aabb _ab .Rectangle ){for _bdc :=0;
_bdc < _aabb .Max .X ;_bdc ++{for _beb :=0;_beb < _aabb .Max .Y ;_beb ++{_bcaf :=_cgb .NRGBAAt (_bdc ,_beb );_fae .SetCMYK (_bdc ,_beb ,_facg (_bcaf ));};};};func _cbc (_aec ,_cgc *Monochrome ,_dbae []byte ,_gbge int )(_bcda error ){var (_eeb ,_cce ,_gac ,_bcc ,_bafg ,_bbd ,_bda ,_aeb int ;
_eff ,_aab uint32 ;_dfb ,_fga byte ;_ccg uint16 ;);_gbc :=make ([]byte ,4);_bdg :=make ([]byte ,4);for _gac =0;_gac < _aec .Height -1;_gac ,_bcc =_gac +2,_bcc +1{_eeb =_gac *_aec .BytesPerLine ;_cce =_bcc *_cgc .BytesPerLine ;for _bafg ,_bbd =0,0;_bafg < _gbge ;
_bafg ,_bbd =_bafg +4,_bbd +1{for _bda =0;_bda < 4;_bda ++{_aeb =_eeb +_bafg +_bda ;if _aeb <=len (_aec .Data )-1&&_aeb < _eeb +_aec .BytesPerLine {_gbc [_bda ]=_aec .Data [_aeb ];}else {_gbc [_bda ]=0x00;};_aeb =_eeb +_aec .BytesPerLine +_bafg +_bda ;
if _aeb <=len (_aec .Data )-1&&_aeb < _eeb +(2*_aec .BytesPerLine ){_bdg [_bda ]=_aec .Data [_aeb ];}else {_bdg [_bda ]=0x00;};};_eff =_bf .BigEndian .Uint32 (_gbc );_aab =_bf .BigEndian .Uint32 (_bdg );_aab |=_eff ;_aab |=_aab <<1;_aab &=0xaaaaaaaa;_eff =_aab |(_aab <<7);
_dfb =byte (_eff >>24);_fga =byte ((_eff >>8)&0xff);_aeb =_cce +_bbd ;if _aeb +1==len (_cgc .Data )-1||_aeb +1>=_cce +_cgc .BytesPerLine {_cgc .Data [_aeb ]=_dbae [_dfb ];}else {_ccg =(uint16 (_dbae [_dfb ])<<8)|uint16 (_dbae [_fga ]);if _bcda =_cgc .setTwoBytes (_aeb ,_ccg );
_bcda !=nil {return _df .Errorf ("s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_aeb );};_bbd ++;};};};return nil ;
};type SMasker interface{HasAlpha ()bool ;GetAlpha ()[]byte ;MakeAlpha ();};func (_beg *CMYK32 )Base ()*ImageBase {return &_beg .ImageBase };var _ Gray =&Gray2 {};func _bbdb (_gdbf _b .Gray )_b .Gray {_gdbf .Y >>=4;_gdbf .Y |=_gdbf .Y <<4;return _gdbf };
func (_ddcc *Monochrome )setGrayBit (_ccef ,_gef int ){_ddcc .Data [_ccef ]|=0x80>>uint (_gef &7)};type Gray interface{GrayAt (_fbdc ,_bfec int )_b .Gray ;SetGray (_ffeb ,_debg int ,_facf _b .Gray );};func (_fdfd *NRGBA32 )ColorModel ()_b .Model {return _b .NRGBAModel };
func (_ccbed *Monochrome )RasterOperation (dx ,dy ,dw ,dh int ,op RasterOperator ,src *Monochrome ,sx ,sy int )error {return _efbb (_ccbed ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );};func _ceeb (_gebb _ab .Image )(Image ,error ){if _fece ,_ffgb :=_gebb .(*Gray2 );
_ffgb {return _fece .Copy (),nil ;};_cbbee :=_gebb .Bounds ();_fceg ,_bgfe :=NewImage (_cbbee .Max .X ,_cbbee .Max .Y ,2,1,nil ,nil ,nil );if _bgfe !=nil {return nil ,_bgfe ;};_gfc (_gebb ,_fceg ,_cbbee );return _fceg ,nil ;};type NRGBA32 struct{ImageBase };
func NewImageBase (width int ,height int ,bitsPerComponent int ,colorComponents int ,data []byte ,alpha []byte ,decode []float64 )ImageBase {_dbag :=ImageBase {Width :width ,Height :height ,BitsPerComponent :bitsPerComponent ,ColorComponents :colorComponents ,Data :data ,Alpha :alpha ,Decode :decode ,BytesPerLine :BytesPerLine (width ,bitsPerComponent ,colorComponents )};
if data ==nil {_dbag .Data =make ([]byte ,height *_dbag .BytesPerLine );};return _dbag ;};func _badf (_aada _b .Color )_b .Color {_bgbb :=_b .GrayModel .Convert (_aada ).(_b .Gray );return _bbdb (_bgbb );};func (_cec *Monochrome )ColorAt (x ,y int )(_b .Color ,error ){return ColorAtGray1BPC (x ,y ,_cec .BytesPerLine ,_cec .Data ,_cec .Decode );
};type Gray4 struct{ImageBase };func _cfad (_eef _ab .Image )(Image ,error ){if _cgcg ,_edf :=_eef .(*CMYK32 );_edf {return _cgcg .Copy (),nil ;};_eab :=_eef .Bounds ();_fbe ,_ggc :=NewImage (_eab .Max .X ,_eab .Max .Y ,8,4,nil ,nil ,nil );if _ggc !=nil {return nil ,_ggc ;
};switch _fac :=_eef .(type ){case CMYK :_cbcd (_fac ,_fbe .(CMYK ),_eab );case Gray :_fabe (_fac ,_fbe .(CMYK ),_eab );case NRGBA :_efe (_fac ,_fbe .(CMYK ),_eab );case RGBA :_bdd (_fac ,_fbe .(CMYK ),_eab );default:_eadc (_eef ,_fbe ,_eab );};return _fbe ,nil ;
};func _gff ()(_fab [256]uint32 ){for _beaf :=0;_beaf < 256;_beaf ++{if _beaf &0x01!=0{_fab [_beaf ]|=0xf;};if _beaf &0x02!=0{_fab [_beaf ]|=0xf0;};if _beaf &0x04!=0{_fab [_beaf ]|=0xf00;};if _beaf &0x08!=0{_fab [_beaf ]|=0xf000;};if _beaf &0x10!=0{_fab [_beaf ]|=0xf0000;
};if _beaf &0x20!=0{_fab [_beaf ]|=0xf00000;};if _beaf &0x40!=0{_fab [_beaf ]|=0xf000000;};if _beaf &0x80!=0{_fab [_beaf ]|=0xf0000000;};};return _fab ;};func _ebag (_eace *Monochrome ,_gbga ,_agba ,_edfd ,_dca int ,_eefg RasterOperator ){if _gbga < 0{_edfd +=_gbga ;
_gbga =0;};_gdbeg :=_gbga +_edfd -_eace .Width ;if _gdbeg > 0{_edfd -=_gdbeg ;};if _agba < 0{_dca +=_agba ;_agba =0;};_abcfc :=_agba +_dca -_eace .Height ;if _abcfc > 0{_dca -=_abcfc ;};if _edfd <=0||_dca <=0{return ;};if (_gbga &7)==0{_aecca (_eace ,_gbga ,_agba ,_edfd ,_dca ,_eefg );
}else {_cbcf (_eace ,_gbga ,_agba ,_edfd ,_dca ,_eefg );};};func (_fef *Gray4 )GrayAt (x ,y int )_b .Gray {_gbaa ,_ :=ColorAtGray4BPC (x ,y ,_fef .BytesPerLine ,_fef .Data ,_fef .Decode );return _gbaa ;};func (_dga *Monochrome )ResolveDecode ()error {if len (_dga .Decode )!=2{return nil ;
};if _dga .Decode [0]==1&&_dga .Decode [1]==0{if _dabe :=_dga .InverseData ();_dabe !=nil {return _dabe ;};_dga .Decode =nil ;};return nil ;};func _aga ()(_cbe [256]uint16 ){for _fc :=0;_fc < 256;_fc ++{if _fc &0x01!=0{_cbe [_fc ]|=0x3;};if _fc &0x02!=0{_cbe [_fc ]|=0xc;
};if _fc &0x04!=0{_cbe [_fc ]|=0x30;};if _fc &0x08!=0{_cbe [_fc ]|=0xc0;};if _fc &0x10!=0{_cbe [_fc ]|=0x300;};if _fc &0x20!=0{_cbe [_fc ]|=0xc00;};if _fc &0x40!=0{_cbe [_fc ]|=0x3000;};if _fc &0x80!=0{_cbe [_fc ]|=0xc000;};};return _cbe ;};func _abeb (_gdff _ab .Image )(Image ,error ){if _gfdce ,_agdg :=_gdff .(*RGBA32 );
_agdg {return _gfdce .Copy (),nil ;};_dgag ,_fdfc ,_gfcd :=_dgda (_gdff ,1);_ecae :=&RGBA32 {ImageBase :NewImageBase (_dgag .Max .X ,_dgag .Max .Y ,8,3,nil ,_gfcd ,nil )};_efcc (_gdff ,_ecae ,_dgag );if len (_gfcd )!=0&&!_fdfc {if _bagfc :=_bfac (_gfcd ,_ecae );
_bagfc !=nil {return nil ,_bagfc ;};};return _ecae ,nil ;};func (_bdcgf *NRGBA16 )Base ()*ImageBase {return &_bdcgf .ImageBase };func IsPowerOf2 (n uint )bool {return n > 0&&(n &(n -1))==0};func RasterOperation (dest *Monochrome ,dx ,dy ,dw ,dh int ,op RasterOperator ,src *Monochrome ,sx ,sy int )error {return _efbb (dest ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );
};func _bba (_ffdg _b .Gray )_b .NRGBA {return _b .NRGBA {R :_ffdg .Y ,G :_ffdg .Y ,B :_ffdg .Y ,A :0xff}};func (_gfef *Gray4 )ColorModel ()_b .Model {return Gray4Model };func (_bcfad *Gray2 )At (x ,y int )_b .Color {_ggb ,_ :=_bcfad .ColorAt (x ,y );return _ggb };
func _gfc (_gca _ab .Image ,_cag Image ,_badb _ab .Rectangle ){switch _ecea :=_gca .(type ){case Gray :_edag (_ecea ,_cag .(Gray ),_badb );case NRGBA :_efc (_ecea ,_cag .(Gray ),_badb );case CMYK :_gbccg (_ecea ,_cag .(Gray ),_badb );case RGBA :_ffee (_ecea ,_cag .(Gray ),_badb );
default:_eadc (_gca ,_cag ,_badb );};};type colorConverter struct{_ecce func (_fbcb _ab .Image )(Image ,error );};var _ Image =&Gray8 {};func (_aceg *Monochrome )ExpandBinary (factor int )(*Monochrome ,error ){if !IsPowerOf2 (uint (factor )){return nil ,_df .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0065\u0078\u0070\u0061\u006e\u0064\u0020b\u0069n\u0061\u0072\u0079\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020\u0025\u0064",factor );
};return _bc (_aceg ,factor );};func (_def *Gray4 )SetGray (x ,y int ,g _b .Gray ){if x >=_def .Width ||y >=_def .Height {return ;};g =_bbdb (g );_def .setGray (x ,y ,g );};func (_ebgb *Gray8 )ColorAt (x ,y int )(_b .Color ,error ){return ColorAtGray8BPC (x ,y ,_ebgb .BytesPerLine ,_ebgb .Data ,_ebgb .Decode );
};type RGBA interface{RGBAAt (_gffc ,_ggac int )_b .RGBA ;SetRGBA (_fddge ,_cabd int ,_egfd _b .RGBA );};func _efcc (_fdbea _ab .Image ,_caedg Image ,_abbc _ab .Rectangle ){if _ffef ,_cbf :=_fdbea .(SMasker );_cbf &&_ffef .HasAlpha (){_caedg .(SMasker ).MakeAlpha ();
};switch _aafc :=_fdbea .(type ){case Gray :_ffc (_aafc ,_caedg .(RGBA ),_abbc );case NRGBA :_ddbb (_aafc ,_caedg .(RGBA ),_abbc );case *_ab .NYCbCrA :_acadd (_aafc ,_caedg .(RGBA ),_abbc );case CMYK :_affgb (_aafc ,_caedg .(RGBA ),_abbc );case RGBA :_bfagc (_aafc ,_caedg .(RGBA ),_abbc );
case nrgba64 :_cbfe (_aafc ,_caedg .(RGBA ),_abbc );default:_eadc (_fdbea ,_caedg ,_abbc );};};type Histogramer interface{Histogram ()[256]int ;};func (_cebgc *NRGBA16 )NRGBAAt (x ,y int )_b .NRGBA {_gaad ,_ :=ColorAtNRGBA16 (x ,y ,_cebgc .Width ,_cebgc .BytesPerLine ,_cebgc .Data ,_cebgc .Alpha ,_cebgc .Decode );
return _gaad ;};func (_ebfd *Gray16 )ColorAt (x ,y int )(_b .Color ,error ){return ColorAtGray16BPC (x ,y ,_ebfd .BytesPerLine ,_ebfd .Data ,_ebfd .Decode );};func (_dggf *Gray8 )SetGray (x ,y int ,g _b .Gray ){_aba :=y *_dggf .BytesPerLine +x ;if _aba > len (_dggf .Data )-1{return ;
};_dggf .Data [_aba ]=g .Y ;};func (_bbbf *NRGBA16 )ColorModel ()_b .Model {return NRGBA16Model };func _facd (_aged _ab .Image )(Image ,error ){if _agad ,_gbdf :=_aged .(*Gray16 );_gbdf {return _agad .Copy (),nil ;};_adfb :=_aged .Bounds ();_gacaf ,_aeafg :=NewImage (_adfb .Max .X ,_adfb .Max .Y ,16,1,nil ,nil ,nil );
if _aeafg !=nil {return nil ,_aeafg ;};_gfc (_aged ,_gacaf ,_adfb );return _gacaf ,nil ;};type Gray2 struct{ImageBase };func ColorAtGray16BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_b .Gray16 ,error ){_ffdc :=(y *bytesPerLine /2+x )*2;
if _ffdc +1>=len (data ){return _b .Gray16 {},_df .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_fbag :=uint16 (data [_ffdc ])<<8|uint16 (data [_ffdc +1]);if len (decode )==2{_fbag =uint16 (uint64 (LinearInterpolate (float64 (_fbag ),0,65535,decode [0],decode [1])));};return _b .Gray16 {Y :_fbag },nil ;};func (_fbfc *NRGBA16 )Set (x ,y int ,c _b .Color ){_aedg :=y *_fbfc .BytesPerLine +x *3/2;
if _aedg +1>=len (_fbfc .Data ){return ;};_bcgfc :=NRGBA16Model .Convert (c ).(_b .NRGBA );_fbfc .setNRGBA (x ,y ,_aedg ,_bcgfc );};func init (){_cabb ()};func _bgdc (_fdfg _b .Gray )_b .Gray {_decd :=_fdfg .Y >>6;_decd |=_decd <<2;_fdfg .Y =_decd |_decd <<4;
return _fdfg ;};func (_gbcgg *NRGBA32 )At (x ,y int )_b .Color {_egfc ,_ :=_gbcgg .ColorAt (x ,y );return _egfc };func (_egg *Gray16 )Base ()*ImageBase {return &_egg .ImageBase };func (_addb *Gray2 )Base ()*ImageBase {return &_addb .ImageBase };var _ _ab .Image =&NRGBA16 {};
func ColorAtGray4BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_b .Gray ,error ){_ggeb :=y *bytesPerLine +x >>1;if _ggeb >=len (data ){return _b .Gray {},_df .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_bafga :=data [_ggeb ]>>uint (4-(x &1)*4)&0xf;if len (decode )==2{_bafga =uint8 (uint32 (LinearInterpolate (float64 (_bafga ),0,15,decode [0],decode [1]))&0xf);};return _b .Gray {Y :_bafga *17&0xff},nil ;};func LinearInterpolate (x ,xmin ,xmax ,ymin ,ymax float64 )float64 {if _d .Abs (xmax -xmin )< 0.000001{return ymin ;
};_ecca :=ymin +(x -xmin )*(ymax -ymin )/(xmax -xmin );return _ecca ;};func ColorAtGray2BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_b .Gray ,error ){_eefa :=y *bytesPerLine +x >>2;if _eefa >=len (data ){return _b .Gray {},_df .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_bga :=data [_eefa ]>>uint (6-(x &3)*2)&3;if len (decode )==2{_bga =uint8 (uint32 (LinearInterpolate (float64 (_bga ),0,3.0,decode [0],decode [1]))&3);};return _b .Gray {Y :_bga *85},nil ;};func _gaf (_dfac _b .NRGBA64 )_b .RGBA {_gbcg ,_fbb ,_daad ,_bdae :=_dfac .RGBA ();
return _b .RGBA {R :uint8 (_gbcg >>8),G :uint8 (_fbb >>8),B :uint8 (_daad >>8),A :uint8 (_bdae >>8)};};func _efc (_adgc NRGBA ,_efgd Gray ,_bdcd _ab .Rectangle ){for _abca :=0;_abca < _bdcd .Max .X ;_abca ++{for _ebcf :=0;_ebcf < _bdcd .Max .Y ;_ebcf ++{_gcc :=_bfa (_adgc .NRGBAAt (_abca ,_ebcf ));
_efgd .SetGray (_abca ,_ebcf ,_gcc );};};};func (_ccb *monochromeThresholdConverter )Convert (img _ab .Image )(Image ,error ){if _ega ,_cbae :=img .(*Monochrome );_cbae {return _ega .Copy (),nil ;};_ccgdg :=img .Bounds ();_gbde ,_dce :=NewImage (_ccgdg .Max .X ,_ccgdg .Max .Y ,1,1,nil ,nil ,nil );
if _dce !=nil {return nil ,_dce ;};_gbde .(*Monochrome ).ModelThreshold =_ccb .Threshold ;for _ebda :=0;_ebda < _ccgdg .Max .X ;_ebda ++{for _ffbc :=0;_ffbc < _ccgdg .Max .Y ;_ffbc ++{_aeaf :=img .At (_ebda ,_ffbc );_gbde .Set (_ebda ,_ffbc ,_aeaf );};
};return _gbde ,nil ;};func FromGoImage (i _ab .Image )(Image ,error ){switch _fbaf :=i .(type ){case Image :return _fbaf .Copy (),nil ;case Gray :return GrayConverter .Convert (i );case *_ab .Gray16 :return Gray16Converter .Convert (i );case CMYK :return CMYKConverter .Convert (i );
case *_ab .NRGBA64 :return NRGBA64Converter .Convert (i );default:return NRGBAConverter .Convert (i );};};func (_aeafa *RGBA32 )setRGBA (_dcbc int ,_dcgd _b .RGBA ){_ccgb :=3*_dcbc ;_aeafa .Data [_ccgb ]=_dcgd .R ;_aeafa .Data [_ccgb +1]=_dcgd .G ;_aeafa .Data [_ccgb +2]=_dcgd .B ;
if _dcbc < len (_aeafa .Alpha ){_aeafa .Alpha [_dcbc ]=_dcgd .A ;};};func _affgb (_acbb CMYK ,_aeeb RGBA ,_aeafd _ab .Rectangle ){for _egcc :=0;_egcc < _aeafd .Max .X ;_egcc ++{for _fgae :=0;_fgae < _aeafd .Max .Y ;_fgae ++{_aafde :=_acbb .CMYKAt (_egcc ,_fgae );
_aeeb .SetRGBA (_egcc ,_fgae ,_fgddb (_aafde ));};};};func (_aaacd *NRGBA64 )Base ()*ImageBase {return &_aaacd .ImageBase };func (_bad *Gray4 )Set (x ,y int ,c _b .Color ){if x >=_bad .Width ||y >=_bad .Height {return ;};_fdc :=Gray4Model .Convert (c ).(_b .Gray );
_bad .setGray (x ,y ,_fdc );};func _dfdae (_cddcf nrgba64 ,_afed NRGBA ,_efgde _ab .Rectangle ){for _ccdg :=0;_ccdg < _efgde .Max .X ;_ccdg ++{for _affa :=0;_affa < _efgde .Max .Y ;_affa ++{_efbeg :=_cddcf .NRGBA64At (_ccdg ,_affa );_afed .SetNRGBA (_ccdg ,_affa ,_gdf (_efbeg ));
};};};func (_ffggg *NRGBA32 )Base ()*ImageBase {return &_ffggg .ImageBase };type ImageBase struct{Width ,Height int ;BitsPerComponent ,ColorComponents int ;Data ,Alpha []byte ;Decode []float64 ;BytesPerLine int ;};func (_gfab *Gray8 )GrayAt (x ,y int )_b .Gray {_bafgc ,_ :=ColorAtGray8BPC (x ,y ,_gfab .BytesPerLine ,_gfab .Data ,_gfab .Decode );
return _bafgc ;};func _gafg (_gggb _ab .Image ,_decdf uint8 )*_ab .Gray {_bdfg :=_gggb .Bounds ();_bffg :=_ab .NewGray (_bdfg );var (_dddf _b .Color ;_gbe _b .Gray ;);for _daec :=0;_daec < _bdfg .Max .X ;_daec ++{for _cdga :=0;_cdga < _bdfg .Max .Y ;_cdga ++{_dddf =_gggb .At (_daec ,_cdga );
_bffg .Set (_daec ,_cdga ,_dddf );_gbe =_bffg .GrayAt (_daec ,_cdga );_bffg .SetGray (_daec ,_cdga ,_b .Gray {Y :_edgf (_gbe .Y ,_decdf )});};};return _bffg ;};func (_dcc *Gray2 )Bounds ()_ab .Rectangle {return _ab .Rectangle {Max :_ab .Point {X :_dcc .Width ,Y :_dcc .Height }};
};var _ NRGBA =&NRGBA16 {};type ColorConverter interface{Convert (_ddf _ab .Image )(Image ,error );};func _db (_ded ,_dec *Monochrome )(_gb error ){_eg :=_dec .BytesPerLine ;_ac :=_ded .BytesPerLine ;var (_bcg byte ;_bb uint16 ;_ae ,_aa ,_faf ,_ea ,_ad int ;
);for _faf =0;_faf < _dec .Height ;_faf ++{_ae =_faf *_eg ;_aa =2*_faf *_ac ;for _ea =0;_ea < _eg ;_ea ++{_bcg =_dec .Data [_ae +_ea ];_bb =_aegc [_bcg ];_ad =_aa +_ea *2;if _ded .BytesPerLine !=_dec .BytesPerLine *2&&(_ea +1)*2> _ded .BytesPerLine {_gb =_ded .setByte (_ad ,byte (_bb >>8));
}else {_gb =_ded .setTwoBytes (_ad ,_bb );};if _gb !=nil {return _gb ;};};for _ea =0;_ea < _ac ;_ea ++{_ad =_aa +_ac +_ea ;_bcg =_ded .Data [_aa +_ea ];if _gb =_ded .setByte (_ad ,_bcg );_gb !=nil {return _gb ;};};};return nil ;};func _dbe (_dfg *Monochrome ,_dfe ,_daa int )(*Monochrome ,error ){if _dfg ==nil {return nil ,_f .New ("\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _dfe <=0||_daa <=0{return nil ,_f .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0073\u0063\u0061l\u0065\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020<\u003d\u0020\u0030");};if _dfe ==_daa {if _dfe ==1{return _dfg .copy (),nil ;};
if _dfe ==2||_dfe ==4||_dfe ==8{_bfd ,_efd :=_bc (_dfg ,_dfe );if _efd !=nil {return nil ,_efd ;};return _bfd ,nil ;};};_dac :=_dfe *_dfg .Width ;_aae :=_daa *_dfg .Height ;_dfd :=_cdc (_dac ,_aae );_acg :=_dfd .BytesPerLine ;var (_ba ,_ca ,_adca ,_ecc ,_abb int ;
_afe byte ;_daf error ;);for _ca =0;_ca < _dfg .Height ;_ca ++{_ba =_daa *_ca *_acg ;for _adca =0;_adca < _dfg .Width ;_adca ++{if _ee :=_dfg .getBitAt (_adca ,_ca );_ee {_abb =_dfe *_adca ;for _ecc =0;_ecc < _dfe ;_ecc ++{_dfd .setIndexedBit (_ba *8+_abb +_ecc );
};};};for _ecc =1;_ecc < _daa ;_ecc ++{_egb :=_ba +_ecc *_acg ;for _eba :=0;_eba < _acg ;_eba ++{if _afe ,_daf =_dfd .getByte (_ba +_eba );_daf !=nil {return nil ,_daf ;};if _daf =_dfd .setByte (_egb +_eba ,_afe );_daf !=nil {return nil ,_daf ;};};};};
return _dfd ,nil ;};func GrayHistogram (g Gray )(_gfag [256]int ){switch _gaaf :=g .(type ){case Histogramer :return _gaaf .Histogram ();case _ab .Image :_dbea :=_gaaf .Bounds ();for _dbef :=0;_dbef < _dbea .Max .X ;_dbef ++{for _aeff :=0;_aeff < _dbea .Max .Y ;
_aeff ++{_gfag [g .GrayAt (_dbef ,_aeff ).Y ]++;};};return _gfag ;default:return [256]int {};};};func (_dge *Monochrome )setGray (_ebbb int ,_efgc _b .Gray ,_gfa int ){if _efgc .Y ==0{_dge .clearBit (_gfa ,_ebbb );}else {_dge .setGrayBit (_gfa ,_ebbb );
};};func (_cae *Gray8 )Copy ()Image {return &Gray8 {ImageBase :_cae .copy ()}};func (_fdbd *Gray4 )setGray (_dcbd int ,_aadd int ,_fegf _b .Gray ){_fage :=_aadd *_fdbd .BytesPerLine ;_fbgc :=_fage +(_dcbd >>1);if _fbgc >=len (_fdbd .Data ){return ;};_dbc :=_fegf .Y >>4;
_fdbd .Data [_fbgc ]=(_fdbd .Data [_fbgc ]&(^(0xf0>>uint (4*(_dcbd &1)))))|(_dbc <<uint (4-4*(_dcbd &1)));};func (_acbf *Monochrome )copy ()*Monochrome {_ccfe :=_cdc (_acbf .Width ,_acbf .Height );_ccfe .ModelThreshold =_acbf .ModelThreshold ;_ccfe .Data =make ([]byte ,len (_acbf .Data ));
copy (_ccfe .Data ,_acbf .Data );if len (_acbf .Decode )!=0{_ccfe .Decode =make ([]float64 ,len (_acbf .Decode ));copy (_ccfe .Decode ,_acbf .Decode );};if len (_acbf .Alpha )!=0{_ccfe .Alpha =make ([]byte ,len (_acbf .Alpha ));copy (_ccfe .Alpha ,_acbf .Alpha );
};return _ccfe ;};var ErrInvalidImage =_f .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
var _ RGBA =&RGBA32 {};func (_bdaa *RGBA32 )Copy ()Image {return &RGBA32 {ImageBase :_bdaa .copy ()}};func _aee (_cdf _b .CMYK )_b .NRGBA {_afb ,_cfe ,_fcf :=_b .CMYKToRGB (_cdf .C ,_cdf .M ,_cdf .Y ,_cdf .K );return _b .NRGBA {R :_afb ,G :_cfe ,B :_fcf ,A :0xff};
};type RGBA32 struct{ImageBase };func (_becf *NRGBA64 )ColorAt (x ,y int )(_b .Color ,error ){return ColorAtNRGBA64 (x ,y ,_becf .Width ,_becf .Data ,_becf .Alpha ,_becf .Decode );};type CMYK32 struct{ImageBase };func (_ecge *Gray2 )GrayAt (x ,y int )_b .Gray {_eaac ,_ :=ColorAtGray2BPC (x ,y ,_ecge .BytesPerLine ,_ecge .Data ,_ecge .Decode );
return _eaac ;};func _edfe (_eefc Gray ,_faec NRGBA ,_abg _ab .Rectangle ){for _faecd :=0;_faecd < _abg .Max .X ;_faecd ++{for _gegg :=0;_gegg < _abg .Max .Y ;_gegg ++{_adcf :=_egbc (_faec .NRGBAAt (_faecd ,_gegg ));_eefc .SetGray (_faecd ,_gegg ,_adcf );
};};};func (_cbeg *Gray2 )ColorModel ()_b .Model {return Gray2Model };func (_afegf *NRGBA64 )Copy ()Image {return &NRGBA64 {ImageBase :_afegf .copy ()}};func _agaf (_edfc _b .Gray )_b .CMYK {return _b .CMYK {K :0xff-_edfc .Y }};func ColorAtCMYK (x ,y ,width int ,data []byte ,decode []float64 )(_b .CMYK ,error ){_cfcc :=4*(y *width +x );
if _cfcc +3>=len (data ){return _b .CMYK {},_df .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};C :=data [_cfcc ]&0xff;M :=data [_cfcc +1]&0xff;Y :=data [_cfcc +2]&0xff;K :=data [_cfcc +3]&0xff;if len (decode )==8{C =uint8 (uint32 (LinearInterpolate (float64 (C ),0,255,decode [0],decode [1]))&0xff);M =uint8 (uint32 (LinearInterpolate (float64 (M ),0,255,decode [2],decode [3]))&0xff);
Y =uint8 (uint32 (LinearInterpolate (float64 (Y ),0,255,decode [4],decode [5]))&0xff);K =uint8 (uint32 (LinearInterpolate (float64 (K ),0,255,decode [6],decode [7]))&0xff);};return _b .CMYK {C :C ,M :M ,Y :Y ,K :K },nil ;};func _bfagc (_faga ,_bbdec RGBA ,_defd _ab .Rectangle ){for _cecc :=0;
_cecc < _defd .Max .X ;_cecc ++{for _cgeb :=0;_cgeb < _defd .Max .Y ;_cgeb ++{_bbdec .SetRGBA (_cecc ,_cgeb ,_faga .RGBAAt (_cecc ,_cgeb ));};};};func AddDataPadding (width ,height ,bitsPerComponent ,colorComponents int ,data []byte )([]byte ,error ){_egga :=BytesPerLine (width ,bitsPerComponent ,colorComponents );
if _egga ==width *colorComponents *bitsPerComponent /8{return data ,nil ;};_afdf :=width *colorComponents *bitsPerComponent ;_eeag :=_egga *8;_adabd :=8-(_eeag -_afdf );_eeea :=_g .NewReader (data );_cdaa :=_egga -1;_acac :=make ([]byte ,_cdaa );_cdbg :=make ([]byte ,height *_egga );
_cfccb :=_g .NewWriterMSB (_cdbg );var _bccg uint64 ;var _eggc error ;for _bdcgd :=0;_bdcgd < height ;_bdcgd ++{_ ,_eggc =_eeea .Read (_acac );if _eggc !=nil {return nil ,_eggc ;};_ ,_eggc =_cfccb .Write (_acac );if _eggc !=nil {return nil ,_eggc ;};_bccg ,_eggc =_eeea .ReadBits (byte (_adabd ));
if _eggc !=nil {return nil ,_eggc ;};_ ,_eggc =_cfccb .WriteBits (_bccg ,_adabd );if _eggc !=nil {return nil ,_eggc ;};_cfccb .FinishByte ();};return _cdbg ,nil ;};func (_acdg *NRGBA16 )SetNRGBA (x ,y int ,c _b .NRGBA ){_bcff :=y *_acdg .BytesPerLine +x *3/2;
if _bcff +1>=len (_acdg .Data ){return ;};c =_fada (c );_acdg .setNRGBA (x ,y ,_bcff ,c );};func (_ccbe *Monochrome )getBit (_bgbga ,_ccbb int )uint8 {return _ccbe .Data [_bgbga +(_ccbb >>3)]>>uint (7-(_ccbb &7))&1;};func (_dbg *Monochrome )Base ()*ImageBase {return &_dbg .ImageBase };
func _abd (_ece _b .NYCbCrA )_b .RGBA {_eede ,_dff ,_aef ,_gaa :=_ege (_ece ).RGBA ();return _b .RGBA {R :uint8 (_eede >>8),G :uint8 (_dff >>8),B :uint8 (_aef >>8),A :uint8 (_gaa >>8)};};var _ Gray =&Monochrome {};func (_ecg *Monochrome )Histogram ()(_gfd [256]int ){for _ ,_cfec :=range _ecg .Data {_gfd [0xff]+=int (_ffggb [_ecg .Data [_cfec ]]);
};return _gfd ;};var (Gray2Model =_b .ModelFunc (_gcfb );Gray4Model =_b .ModelFunc (_badf );NRGBA16Model =_b .ModelFunc (_defe ););func _ggae (_acb _b .RGBA )_b .NRGBA {switch _acb .A {case 0xff:return _b .NRGBA {R :_acb .R ,G :_acb .G ,B :_acb .B ,A :0xff};
case 0x00:return _b .NRGBA {};default:_fdb ,_afge ,_ggda ,_add :=_acb .RGBA ();_fdb =(_fdb *0xffff)/_add ;_afge =(_afge *0xffff)/_add ;_ggda =(_ggda *0xffff)/_add ;return _b .NRGBA {R :uint8 (_fdb >>8),G :uint8 (_afge >>8),B :uint8 (_ggda >>8),A :uint8 (_add >>8)};
};};func _aecca (_dffb *Monochrome ,_ecad ,_edbe int ,_bbcf ,_cfcg int ,_aaf RasterOperator ){var (_aaddf int ;_fcge byte ;_cbde ,_geab int ;_fcaa int ;);_caca :=_bbcf >>3;_ccgf :=_bbcf &7;if _ccgf > 0{_fcge =_aac [_ccgf ];};_aaddf =_dffb .BytesPerLine *_edbe +(_ecad >>3);
switch _aaf {case PixClr :for _cbde =0;_cbde < _cfcg ;_cbde ++{_fcaa =_aaddf +_cbde *_dffb .BytesPerLine ;for _geab =0;_geab < _caca ;_geab ++{_dffb .Data [_fcaa ]=0x0;_fcaa ++;};if _ccgf > 0{_dffb .Data [_fcaa ]=_dbdg (_dffb .Data [_fcaa ],0x0,_fcge );
};};case PixSet :for _cbde =0;_cbde < _cfcg ;_cbde ++{_fcaa =_aaddf +_cbde *_dffb .BytesPerLine ;for _geab =0;_geab < _caca ;_geab ++{_dffb .Data [_fcaa ]=0xff;_fcaa ++;};if _ccgf > 0{_dffb .Data [_fcaa ]=_dbdg (_dffb .Data [_fcaa ],0xff,_fcge );};};case PixNotDst :for _cbde =0;
_cbde < _cfcg ;_cbde ++{_fcaa =_aaddf +_cbde *_dffb .BytesPerLine ;for _geab =0;_geab < _caca ;_geab ++{_dffb .Data [_fcaa ]=^_dffb .Data [_fcaa ];_fcaa ++;};if _ccgf > 0{_dffb .Data [_fcaa ]=_dbdg (_dffb .Data [_fcaa ],^_dffb .Data [_fcaa ],_fcge );};
};};};func (_efgb *Monochrome )Validate ()error {if len (_efgb .Data )!=_efgb .Height *_efgb .BytesPerLine {return ErrInvalidImage ;};return nil ;};func _bcde (_fbdea _ab .Image ,_bgbd Image ,_dbge _ab .Rectangle ){if _cbbc ,_ddba :=_fbdea .(SMasker );
_ddba &&_cbbc .HasAlpha (){_bgbd .(SMasker ).MakeAlpha ();};switch _abcfb :=_fbdea .(type ){case Gray :_ffag (_abcfb ,_bgbd .(NRGBA ),_dbge );case NRGBA :_ebfdg (_abcfb ,_bgbd .(NRGBA ),_dbge );case *_ab .NYCbCrA :_fddbb (_abcfb ,_bgbd .(NRGBA ),_dbge );
case CMYK :_fegb (_abcfb ,_bgbd .(NRGBA ),_dbge );case RGBA :_adaac (_abcfb ,_bgbd .(NRGBA ),_dbge );case nrgba64 :_dfdae (_abcfb ,_bgbd .(NRGBA ),_dbge );default:_eadc (_fbdea ,_bgbd ,_dbge );};};func (_bbeg *Monochrome )setBit (_fgfd ,_fec int ){_bbeg .Data [_fgfd +(_fec >>3)]|=0x80>>uint (_fec &7)};
func _fag (_adf int )[]uint {var _bg []uint ;_cge :=_adf ;_dafb :=_cge /8;if _dafb !=0{for _aad :=0;_aad < _dafb ;_aad ++{_bg =append (_bg ,8);};_dfgc :=_cge %8;_cge =0;if _dfgc !=0{_cge =_dfgc ;};};_dag :=_cge /4;if _dag !=0{for _bge :=0;_bge < _dag ;
_bge ++{_bg =append (_bg ,4);};_bbca :=_cge %4;_cge =0;if _bbca !=0{_cge =_bbca ;};};_ffb :=_cge /2;if _ffb !=0{for _aed :=0;_aed < _ffb ;_aed ++{_bg =append (_bg ,2);};};return _bg ;};func ColorAt (x ,y ,width ,bitsPerColor ,colorComponents ,bytesPerLine int ,data ,alpha []byte ,decode []float64 )(_b .Color ,error ){switch colorComponents {case 1:return ColorAtGrayscale (x ,y ,bitsPerColor ,bytesPerLine ,data ,decode );
case 3:return ColorAtNRGBA (x ,y ,width ,bytesPerLine ,bitsPerColor ,data ,alpha ,decode );case 4:return ColorAtCMYK (x ,y ,width ,data ,decode );default:return nil ,_df .Errorf ("\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063o\u006c\u006f\u0072\u0020\u0063\u006f\u006dp\u006f\u006e\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0074h\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0064",colorComponents );
};};func (_ebca *ImageBase )setTwoBytes (_cdbd int ,_agfc uint16 )error {if _cdbd +1> len (_ebca .Data )-1{return _f .New ("\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");};_ebca .Data [_cdbd ]=byte ((_agfc &0xff00)>>8);
_ebca .Data [_cdbd +1]=byte (_agfc &0xff);return nil ;};func _eggbd (_ceacf *_ab .Gray ,_efdab uint8 )*_ab .Gray {_dcaf :=_ceacf .Bounds ();_bgag :=_ab .NewGray (_dcaf );for _gacgc :=0;_gacgc < _dcaf .Dx ();_gacgc ++{for _gaed :=0;_gaed < _dcaf .Dy ();
_gaed ++{_befe :=_ceacf .GrayAt (_gacgc ,_gaed );_bgag .SetGray (_gacgc ,_gaed ,_b .Gray {Y :_edgf (_befe .Y ,_efdab )});};};return _bgag ;};func (_fdag *Gray8 )Validate ()error {if len (_fdag .Data )!=_fdag .Height *_fdag .BytesPerLine {return ErrInvalidImage ;
};return nil ;};func ColorAtNRGBA (x ,y ,width ,bytesPerLine ,bitsPerColor int ,data ,alpha []byte ,decode []float64 )(_b .Color ,error ){switch bitsPerColor {case 4:return ColorAtNRGBA16 (x ,y ,width ,bytesPerLine ,data ,alpha ,decode );case 8:return ColorAtNRGBA32 (x ,y ,width ,data ,alpha ,decode );
case 16:return ColorAtNRGBA64 (x ,y ,width ,data ,alpha ,decode );default:return nil ,_df .Errorf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064 \u0072\u0067\u0062\u0020b\u0069\u0074\u0073\u0020\u0070\u0065\u0072\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u0061\u006d\u006f\u0075\u006e\u0074\u003a\u0020\u0027\u0025\u0064\u0027",bitsPerColor );
};};func (_eed colorConverter )Convert (src _ab .Image )(Image ,error ){return _eed ._ecce (src )};func (_dea *Gray8 )ColorModel ()_b .Model {return _b .GrayModel };func (_fgeg *Gray2 )Validate ()error {if len (_fgeg .Data )!=_fgeg .Height *_fgeg .BytesPerLine {return ErrInvalidImage ;
};return nil ;};var _ Image =&NRGBA64 {};var _ Image =&RGBA32 {};func (_efac *Monochrome )ScaleLow (width ,height int )(*Monochrome ,error ){if width < 0||height < 0{return nil ,_f .New ("\u0070\u0072\u006f\u0076\u0069\u0064e\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0077\u0069\u0064t\u0068\u0020\u0061\u006e\u0064\u0020\u0068e\u0069\u0067\u0068\u0074");
};_adac :=_cdc (width ,height );_eccg :=make ([]int ,height );_fdbg :=make ([]int ,width );_aeab :=float64 (_efac .Width )/float64 (width );_afcg :=float64 (_efac .Height )/float64 (height );for _eadcb :=0;_eadcb < height ;_eadcb ++{_eccg [_eadcb ]=int (_d .Min (_afcg *float64 (_eadcb )+0.5,float64 (_efac .Height -1)));
};for _bgec :=0;_bgec < width ;_bgec ++{_fdbg [_bgec ]=int (_d .Min (_aeab *float64 (_bgec )+0.5,float64 (_efac .Width -1)));};_efgg :=-1;_bcfa :=byte (0);for _agc :=0;_agc < height ;_agc ++{_eac :=_eccg [_agc ]*_efac .BytesPerLine ;_gag :=_agc *_adac .BytesPerLine ;
for _aadf :=0;_aadf < width ;_aadf ++{_fbde :=_fdbg [_aadf ];if _fbde !=_efgg {_bcfa =_efac .getBit (_eac ,_fbde );if _bcfa !=0{_adac .setBit (_gag ,_aadf );};_efgg =_fbde ;}else {if _bcfa !=0{_adac .setBit (_gag ,_aadf );};};};};return _adac ,nil ;};func _dbdg (_abab ,_bae ,_aaac byte )byte {return (_abab &^(_aaac ))|(_bae &_aaac )};
func _cffb (_efba _b .RGBA )_b .CMYK {_afc ,_debb ,_cdgg ,_gadd :=_b .RGBToCMYK (_efba .R ,_efba .G ,_efba .B );return _b .CMYK {C :_afc ,M :_debb ,Y :_cdgg ,K :_gadd };};var _ _ab .Image =&Gray4 {};func (_afeg *Gray16 )ColorModel ()_b .Model {return _b .Gray16Model };
func (_fdba *Gray16 )Set (x ,y int ,c _b .Color ){_dgef :=(y *_fdba .BytesPerLine /2+x )*2;if _dgef +1>=len (_fdba .Data ){return ;};_aefb :=_b .Gray16Model .Convert (c ).(_b .Gray16 );_fdba .Data [_dgef ],_fdba .Data [_dgef +1]=uint8 (_aefb .Y >>8),uint8 (_aefb .Y &0xff);
};var _ _ab .Image =&Gray2 {};func (_cfeb *Gray2 )Histogram ()(_dbac [256]int ){for _aedd :=0;_aedd < _cfeb .Width ;_aedd ++{for _afd :=0;_afd < _cfeb .Height ;_afd ++{_dbac [_cfeb .GrayAt (_aedd ,_afd ).Y ]++;};};return _dbac ;};func (_debd *Gray8 )At (x ,y int )_b .Color {_gdbfa ,_ :=_debd .ColorAt (x ,y );
return _gdbfa };func ColorAtGray1BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_b .Gray ,error ){_gfdc :=y *bytesPerLine +x >>3;if _gfdc >=len (data ){return _b .Gray {},_df .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_aaag :=data [_gfdc ]>>uint (7-(x &7))&1;if len (decode )==2{_aaag =uint8 (LinearInterpolate (float64 (_aaag ),0.0,1.0,decode [0],decode [1]))&1;};return _b .Gray {Y :_aaag *255},nil ;};func IsGrayImgBlackAndWhite (i *_ab .Gray )bool {return _feca (i )};
func MonochromeThresholdConverter (threshold uint8 )ColorConverter {return &monochromeThresholdConverter {Threshold :threshold };};const (_dae shift =iota ;_bcdc ;);func (_bbde *RGBA32 )ColorAt (x ,y int )(_b .Color ,error ){return ColorAtRGBA32 (x ,y ,_bbde .Width ,_bbde .Data ,_bbde .Alpha ,_bbde .Decode );
};func _dfaa (_bcef _b .Gray )_b .RGBA {return _b .RGBA {R :_bcef .Y ,G :_bcef .Y ,B :_bcef .Y ,A :0xff}};func _fgf (_adg Gray ,_dgf nrgba64 ,_aadc _ab .Rectangle ){for _fcdd :=0;_fcdd < _aadc .Max .X ;_fcdd ++{for _gdee :=0;_gdee < _aadc .Max .Y ;_gdee ++{_gddd :=_cfg (_dgf .NRGBA64At (_fcdd ,_gdee ));
_adg .SetGray (_fcdd ,_gdee ,_gddd );};};};type RasterOperator int ;func BytesPerLine (width ,bitsPerComponent ,colorComponents int )int {return ((width *bitsPerComponent )*colorComponents +7)>>3;};func (_aafe *NRGBA64 )setNRGBA64 (_efbef int ,_adefa _b .NRGBA64 ,_ccdc int ){_aafe .Data [_efbef ]=uint8 (_adefa .R >>8);
_aafe .Data [_efbef +1]=uint8 (_adefa .R &0xff);_aafe .Data [_efbef +2]=uint8 (_adefa .G >>8);_aafe .Data [_efbef +3]=uint8 (_adefa .G &0xff);_aafe .Data [_efbef +4]=uint8 (_adefa .B >>8);_aafe .Data [_efbef +5]=uint8 (_adefa .B &0xff);if _ccdc +1< len (_aafe .Alpha ){_aafe .Alpha [_ccdc ]=uint8 (_adefa .A >>8);
_aafe .Alpha [_ccdc +1]=uint8 (_adefa .A &0xff);};};const (PixSrc RasterOperator =0xc;PixDst RasterOperator =0xa;PixNotSrc RasterOperator =0x3;PixNotDst RasterOperator =0x5;PixClr RasterOperator =0x0;PixSet RasterOperator =0xf;PixSrcOrDst RasterOperator =0xe;
PixSrcAndDst RasterOperator =0x8;PixSrcXorDst RasterOperator =0x6;PixNotSrcOrDst RasterOperator =0xb;PixNotSrcAndDst RasterOperator =0x2;PixSrcOrNotDst RasterOperator =0xd;PixSrcAndNotDst RasterOperator =0x4;PixNotPixSrcOrDst RasterOperator =0x1;PixNotPixSrcAndDst RasterOperator =0x7;
PixNotPixSrcXorDst RasterOperator =0x9;PixPaint =PixSrcOrDst ;PixSubtract =PixNotSrcAndDst ;PixMask =PixSrcAndDst ;);func _efbb (_eae *Monochrome ,_cef ,_bbcg ,_gcgb ,_eec int ,_bdbc RasterOperator ,_afafc *Monochrome ,_ggad ,_gcbe int )error {if _eae ==nil {return _f .New ("\u006e\u0069\u006c\u0020\u0027\u0064\u0065\u0073\u0074\u0027\u0020\u0042i\u0074\u006d\u0061\u0070");
};if _bdbc ==PixDst {return nil ;};switch _bdbc {case PixClr ,PixSet ,PixNotDst :_ebag (_eae ,_cef ,_bbcg ,_gcgb ,_eec ,_bdbc );return nil ;};if _afafc ==nil {_e .Log .Debug ("\u0052a\u0073\u0074e\u0072\u004f\u0070\u0065r\u0061\u0074\u0069o\u006e\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020bi\u0074\u006d\u0061p\u0020\u0069s\u0020\u006e\u006f\u0074\u0020\u0064e\u0066\u0069n\u0065\u0064");
return _f .New ("\u006e\u0069l\u0020\u0027\u0073r\u0063\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _babf :=_fgeb (_eae ,_cef ,_bbcg ,_gcgb ,_eec ,_bdbc ,_afafc ,_ggad ,_gcbe );_babf !=nil {return _babf ;};return nil ;};func (_fbef *Gray16 )Bounds ()_ab .Rectangle {return _ab .Rectangle {Max :_ab .Point {X :_fbef .Width ,Y :_fbef .Height }};
};func (_gefgb *NRGBA32 )SetNRGBA (x ,y int ,c _b .NRGBA ){_bdebc :=y *_gefgb .Width +x ;_gab :=3*_bdebc ;if _gab +2>=len (_gefgb .Data ){return ;};_gefgb .setRGBA (_bdebc ,c );};func (_ddga *Monochrome )getBitAt (_cffd ,_egaf int )bool {_cgfe :=_egaf *_ddga .BytesPerLine +(_cffd >>3);
_cbbe :=_cffd &0x07;_eccee :=uint (7-_cbbe );if _cgfe > len (_ddga .Data )-1{return false ;};if (_ddga .Data [_cgfe ]>>_eccee )&0x01>=1{return true ;};return false ;};func (_cbcdf *Monochrome )Set (x ,y int ,c _b .Color ){_fcg :=y *_cbcdf .BytesPerLine +x >>3;
if _fcg > len (_cbcdf .Data )-1{return ;};_bbcae :=_cbcdf .ColorModel ().Convert (c ).(_b .Gray );_cbcdf .setGray (x ,_bbcae ,_fcg );};type Monochrome struct{ImageBase ;ModelThreshold uint8 ;};func (_gedb *Gray4 )Copy ()Image {return &Gray4 {ImageBase :_gedb .copy ()}};
func (_afac *NRGBA32 )Set (x ,y int ,c _b .Color ){_dbb :=y *_afac .Width +x ;_bfeec :=3*_dbb ;if _bfeec +2>=len (_afac .Data ){return ;};_cedab :=_b .NRGBAModel .Convert (c ).(_b .NRGBA );_afac .setRGBA (_dbb ,_cedab );};func _fgeb (_gbf *Monochrome ,_fbaa ,_ade int ,_cead ,_gcd int ,_gfce RasterOperator ,_gbae *Monochrome ,_gfaf ,_afbc int )error {var _dcdd ,_cega ,_adb ,_cca int ;
if _fbaa < 0{_gfaf -=_fbaa ;_cead +=_fbaa ;_fbaa =0;};if _gfaf < 0{_fbaa -=_gfaf ;_cead +=_gfaf ;_gfaf =0;};_dcdd =_fbaa +_cead -_gbf .Width ;if _dcdd > 0{_cead -=_dcdd ;};_cega =_gfaf +_cead -_gbae .Width ;if _cega > 0{_cead -=_cega ;};if _ade < 0{_afbc -=_ade ;
_gcd +=_ade ;_ade =0;};if _afbc < 0{_ade -=_afbc ;_gcd +=_afbc ;_afbc =0;};_adb =_ade +_gcd -_gbf .Height ;if _adb > 0{_gcd -=_adb ;};_cca =_afbc +_gcd -_gbae .Height ;if _cca > 0{_gcd -=_cca ;};if _cead <=0||_gcd <=0{return nil ;};var _fcgb error ;switch {case _fbaa &7==0&&_gfaf &7==0:_fcgb =_dfab (_gbf ,_fbaa ,_ade ,_cead ,_gcd ,_gfce ,_gbae ,_gfaf ,_afbc );
case _fbaa &7==_gfaf &7:_fcgb =_feef (_gbf ,_fbaa ,_ade ,_cead ,_gcd ,_gfce ,_gbae ,_gfaf ,_afbc );default:_fcgb =_bfb (_gbf ,_fbaa ,_ade ,_cead ,_gcd ,_gfce ,_gbae ,_gfaf ,_afbc );};if _fcgb !=nil {return _fcgb ;};return nil ;};func ColorAtNRGBA16 (x ,y ,width ,bytesPerLine int ,data ,alpha []byte ,decode []float64 )(_b .NRGBA ,error ){_dfbb :=y *bytesPerLine +x *3/2;
if _dfbb +1>=len (data ){return _b .NRGBA {},_cdfb (x ,y );};const (_fbcc =0xf;_gcdg =uint8 (0xff););_dgfe :=_gcdg ;if alpha !=nil {_adgb :=y *BytesPerLine (width ,4,1);if _adgb < len (alpha ){if x %2==0{_dgfe =(alpha [_adgb ]>>uint (4))&_fbcc ;}else {_dgfe =alpha [_adgb ]&_fbcc ;
};_dgfe |=_dgfe <<4;};};var _agdb ,_gfge ,_ebdab uint8 ;if x *3%2==0{_agdb =(data [_dfbb ]>>uint (4))&_fbcc ;_gfge =data [_dfbb ]&_fbcc ;_ebdab =(data [_dfbb +1]>>uint (4))&_fbcc ;}else {_agdb =data [_dfbb ]&_fbcc ;_gfge =(data [_dfbb +1]>>uint (4))&_fbcc ;
_ebdab =data [_dfbb +1]&_fbcc ;};if len (decode )==6{_agdb =uint8 (uint32 (LinearInterpolate (float64 (_agdb ),0,15,decode [0],decode [1]))&0xf);_gfge =uint8 (uint32 (LinearInterpolate (float64 (_gfge ),0,15,decode [2],decode [3]))&0xf);_ebdab =uint8 (uint32 (LinearInterpolate (float64 (_ebdab ),0,15,decode [4],decode [5]))&0xf);
};return _b .NRGBA {R :(_agdb <<4)|(_agdb &0xf),G :(_gfge <<4)|(_gfge &0xf),B :(_ebdab <<4)|(_ebdab &0xf),A :_dgfe },nil ;};func _bbgd (_feeg _b .CMYK )_b .Gray {_bcag ,_bfe ,_geg :=_b .CMYKToRGB (_feeg .C ,_feeg .M ,_feeg .Y ,_feeg .K );_eaae :=(19595*uint32 (_bcag )+38470*uint32 (_bfe )+7471*uint32 (_geg )+1<<7)>>16;
return _b .Gray {Y :uint8 (_eaae )};};func (_fgdd *CMYK32 )CMYKAt (x ,y int )_b .CMYK {_feaa ,_ :=ColorAtCMYK (x ,y ,_fgdd .Width ,_fgdd .Data ,_fgdd .Decode );return _feaa ;};func (_baa *Gray4 )Validate ()error {if len (_baa .Data )!=_baa .Height *_baa .BytesPerLine {return ErrInvalidImage ;
};return nil ;};type nrgba64 interface{NRGBA64At (_afda ,_gbacf int )_b .NRGBA64 ;SetNRGBA64 (_bfg ,_gade int ,_gadg _b .NRGBA64 );};func ImgToGray (i _ab .Image )*_ab .Gray {if _ccgc ,_fdgee :=i .(*_ab .Gray );_fdgee {return _ccgc ;};_fcec :=i .Bounds ();
_bbeb :=_ab .NewGray (_fcec );for _feffc :=0;_feffc < _fcec .Max .X ;_feffc ++{for _gegb :=0;_gegb < _fcec .Max .Y ;_gegb ++{_dbgea :=i .At (_feffc ,_gegb );_bbeb .Set (_feffc ,_gegb ,_dbgea );};};return _bbeb ;};type NRGBA interface{NRGBAAt (_ccfeb ,_dgab int )_b .NRGBA ;
SetNRGBA (_dacf ,_bac int ,_ggbc _b .NRGBA );};func _aag (_feab ,_fbg *Monochrome ,_cbb []byte ,_dace int )(_afaf error ){var (_fgd ,_bff ,_ecd ,_edg ,_cgf ,_bdb ,_cdg ,_cfc int ;_ccga ,_eebf ,_gba ,_ccec uint32 ;_bggb ,_ffg byte ;_fgdf uint16 ;);_bfff :=make ([]byte ,4);
_bgf :=make ([]byte ,4);for _ecd =0;_ecd < _feab .Height -1;_ecd ,_edg =_ecd +2,_edg +1{_fgd =_ecd *_feab .BytesPerLine ;_bff =_edg *_fbg .BytesPerLine ;for _cgf ,_bdb =0,0;_cgf < _dace ;_cgf ,_bdb =_cgf +4,_bdb +1{for _cdg =0;_cdg < 4;_cdg ++{_cfc =_fgd +_cgf +_cdg ;
if _cfc <=len (_feab .Data )-1&&_cfc < _fgd +_feab .BytesPerLine {_bfff [_cdg ]=_feab .Data [_cfc ];}else {_bfff [_cdg ]=0x00;};_cfc =_fgd +_feab .BytesPerLine +_cgf +_cdg ;if _cfc <=len (_feab .Data )-1&&_cfc < _fgd +(2*_feab .BytesPerLine ){_bgf [_cdg ]=_feab .Data [_cfc ];
}else {_bgf [_cdg ]=0x00;};};_ccga =_bf .BigEndian .Uint32 (_bfff );_eebf =_bf .BigEndian .Uint32 (_bgf );_gba =_ccga &_eebf ;_gba |=_gba <<1;_ccec =_ccga |_eebf ;_ccec &=_ccec <<1;_eebf =_gba |_ccec ;_eebf &=0xaaaaaaaa;_ccga =_eebf |(_eebf <<7);_bggb =byte (_ccga >>24);
_ffg =byte ((_ccga >>8)&0xff);_cfc =_bff +_bdb ;if _cfc +1==len (_fbg .Data )-1||_cfc +1>=_bff +_fbg .BytesPerLine {if _afaf =_fbg .setByte (_cfc ,_cbb [_bggb ]);_afaf !=nil {return _df .Errorf ("\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_cfc );};}else {_fgdf =(uint16 (_cbb [_bggb ])<<8)|uint16 (_cbb [_ffg ]);
if _afaf =_fbg .setTwoBytes (_cfc ,_fgdf );_afaf !=nil {return _df .Errorf ("s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_cfc );
};_bdb ++;};};};return nil ;};var (_aegc =_aga ();_gf =_gff ();_fde =_bde (););func (_aede *Gray4 )Histogram ()(_fdbb [256]int ){for _debga :=0;_debga < _aede .Width ;_debga ++{for _bead :=0;_bead < _aede .Height ;_bead ++{_fdbb [_aede .GrayAt (_debga ,_bead ).Y ]++;
};};return _fdbb ;};var _ Image =&Gray4 {};func (_gdb *Monochrome )Bounds ()_ab .Rectangle {return _ab .Rectangle {Max :_ab .Point {X :_gdb .Width ,Y :_gdb .Height }};};func _cabb (){for _cgbc :=0;_cgbc < 256;_cgbc ++{_ffggb [_cgbc ]=uint8 (_cgbc &0x1)+(uint8 (_cgbc >>1)&0x1)+(uint8 (_cgbc >>2)&0x1)+(uint8 (_cgbc >>3)&0x1)+(uint8 (_cgbc >>4)&0x1)+(uint8 (_cgbc >>5)&0x1)+(uint8 (_cgbc >>6)&0x1)+(uint8 (_cgbc >>7)&0x1);
};};func _cbcf (_cfgec *Monochrome ,_fagf ,_gdeg int ,_fbab ,_bdcc int ,_fabg RasterOperator ){var (_gfb bool ;_gcfd bool ;_ffbb int ;_cded int ;_ceadc int ;_adef int ;_bdeg bool ;_bcdag byte ;);_ccde :=8-(_fagf &7);_ddbc :=_fgef [_ccde ];_eggaf :=_cfgec .BytesPerLine *_gdeg +(_fagf >>3);
if _fbab < _ccde {_gfb =true ;_ddbc &=_aac [8-_ccde +_fbab ];};if !_gfb {_ffbb =(_fbab -_ccde )>>3;if _ffbb !=0{_gcfd =true ;_cded =_eggaf +1;};};_ceadc =(_fagf +_fbab )&7;if !(_gfb ||_ceadc ==0){_bdeg =true ;_bcdag =_aac [_ceadc ];_adef =_eggaf +1+_ffbb ;
};var _bgcb ,_cbafa int ;switch _fabg {case PixClr :for _bgcb =0;_bgcb < _bdcc ;_bgcb ++{_cfgec .Data [_eggaf ]=_dbdg (_cfgec .Data [_eggaf ],0x0,_ddbc );_eggaf +=_cfgec .BytesPerLine ;};if _gcfd {for _bgcb =0;_bgcb < _bdcc ;_bgcb ++{for _cbafa =0;_cbafa < _ffbb ;
_cbafa ++{_cfgec .Data [_cded +_cbafa ]=0x0;};_cded +=_cfgec .BytesPerLine ;};};if _bdeg {for _bgcb =0;_bgcb < _bdcc ;_bgcb ++{_cfgec .Data [_adef ]=_dbdg (_cfgec .Data [_adef ],0x0,_bcdag );_adef +=_cfgec .BytesPerLine ;};};case PixSet :for _bgcb =0;_bgcb < _bdcc ;
_bgcb ++{_cfgec .Data [_eggaf ]=_dbdg (_cfgec .Data [_eggaf ],0xff,_ddbc );_eggaf +=_cfgec .BytesPerLine ;};if _gcfd {for _bgcb =0;_bgcb < _bdcc ;_bgcb ++{for _cbafa =0;_cbafa < _ffbb ;_cbafa ++{_cfgec .Data [_cded +_cbafa ]=0xff;};_cded +=_cfgec .BytesPerLine ;
};};if _bdeg {for _bgcb =0;_bgcb < _bdcc ;_bgcb ++{_cfgec .Data [_adef ]=_dbdg (_cfgec .Data [_adef ],0xff,_bcdag );_adef +=_cfgec .BytesPerLine ;};};case PixNotDst :for _bgcb =0;_bgcb < _bdcc ;_bgcb ++{_cfgec .Data [_eggaf ]=_dbdg (_cfgec .Data [_eggaf ],^_cfgec .Data [_eggaf ],_ddbc );
_eggaf +=_cfgec .BytesPerLine ;};if _gcfd {for _bgcb =0;_bgcb < _bdcc ;_bgcb ++{for _cbafa =0;_cbafa < _ffbb ;_cbafa ++{_cfgec .Data [_cded +_cbafa ]=^(_cfgec .Data [_cded +_cbafa ]);};_cded +=_cfgec .BytesPerLine ;};};if _bdeg {for _bgcb =0;_bgcb < _bdcc ;
_bgcb ++{_cfgec .Data [_adef ]=_dbdg (_cfgec .Data [_adef ],^_cfgec .Data [_adef ],_bcdag );_adef +=_cfgec .BytesPerLine ;};};};};func _defe (_gfea _b .Color )_b .Color {_dadd :=_b .NRGBAModel .Convert (_gfea ).(_b .NRGBA );return _fada (_dadd );};func _cdc (_agf ,_fb int )*Monochrome {return &Monochrome {ImageBase :NewImageBase (_agf ,_fb ,1,1,nil ,nil ,nil ),ModelThreshold :0x0f};
};func (_afaa *Gray16 )At (x ,y int )_b .Color {_fdgd ,_ :=_afaa .ColorAt (x ,y );return _fdgd };func (_befg *ImageBase )getByte (_ddea int )(byte ,error ){if _ddea > len (_befg .Data )-1||_ddea < 0{return 0,_df .Errorf ("\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",_ddea );
};return _befg .Data [_ddea ],nil ;};func ColorAtGrayscale (x ,y ,bitsPerColor ,bytesPerLine int ,data []byte ,decode []float64 )(_b .Color ,error ){switch bitsPerColor {case 1:return ColorAtGray1BPC (x ,y ,bytesPerLine ,data ,decode );case 2:return ColorAtGray2BPC (x ,y ,bytesPerLine ,data ,decode );
case 4:return ColorAtGray4BPC (x ,y ,bytesPerLine ,data ,decode );case 8:return ColorAtGray8BPC (x ,y ,bytesPerLine ,data ,decode );case 16:return ColorAtGray16BPC (x ,y ,bytesPerLine ,data ,decode );default:return nil ,_df .Errorf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0067\u0072\u0061\u0079\u0020\u0073c\u0061\u006c\u0065\u0020\u0062\u0069\u0074s\u0020\u0070\u0065\u0072\u0020\u0063\u006f\u006c\u006f\u0072\u0020a\u006d\u006f\u0075\u006e\u0074\u003a\u0020\u0027\u0025\u0064\u0027",bitsPerColor );
};};func (_cgba *NRGBA32 )NRGBAAt (x ,y int )_b .NRGBA {_cgfeg ,_ :=ColorAtNRGBA32 (x ,y ,_cgba .Width ,_cgba .Data ,_cgba .Alpha ,_cgba .Decode );return _cgfeg ;};func _gbab (_bbcaeg uint8 )bool {if _bbcaeg ==0||_bbcaeg ==255{return true ;};return false ;
};func ConverterFunc (converterFunc func (_fbf _ab .Image )(Image ,error ))ColorConverter {return colorConverter {_ecce :converterFunc };};func _ebfdg (_aecd ,_bcdd NRGBA ,_babb _ab .Rectangle ){for _fdfa :=0;_fdfa < _babb .Max .X ;_fdfa ++{for _acba :=0;
_acba < _babb .Max .Y ;_acba ++{_bcdd .SetNRGBA (_fdfa ,_acba ,_aecd .NRGBAAt (_fdfa ,_acba ));};};};func (_affg *RGBA32 )Bounds ()_ab .Rectangle {return _ab .Rectangle {Max :_ab .Point {X :_affg .Width ,Y :_affg .Height }};};func (_fbd *CMYK32 )Copy ()Image {return &CMYK32 {ImageBase :_fbd .copy ()}};
func (_ceda *ImageBase )Pix ()[]byte {return _ceda .Data };func _ff (_fe *Monochrome ,_ag int ,_cff []uint )(*Monochrome ,error ){_fd :=_ag *_fe .Width ;_ef :=_ag *_fe .Height ;_fdd :=_cdc (_fd ,_ef );for _cffg ,_eb :=range _cff {var _ebg error ;switch _eb {case 2:_ebg =_db (_fdd ,_fe );
case 4:_ebg =_gg (_fdd ,_fe );case 8:_ebg =_bbb (_fdd ,_fe );};if _ebg !=nil {return nil ,_ebg ;};if _cffg !=len (_cff )-1{_fe =_fdd .copy ();};};return _fdd ,nil ;};func _dbbc (_ggabf _ab .Image )(Image ,error ){if _afag ,_eeg :=_ggabf .(*NRGBA32 );_eeg {return _afag .Copy (),nil ;
};_cfecf ,_egc ,_eebe :=_dgda (_ggabf ,1);_bfba ,_bbec :=NewImage (_cfecf .Max .X ,_cfecf .Max .Y ,8,3,nil ,_eebe ,nil );if _bbec !=nil {return nil ,_bbec ;};_bcde (_ggabf ,_bfba ,_cfecf );if len (_eebe )!=0&&!_egc {if _badc :=_bfac (_eebe ,_bfba );_badc !=nil {return nil ,_badc ;
};};return _bfba ,nil ;};func (_acad *ImageBase )setEightBytes (_fafb int ,_adfbf uint64 )error {_ebfa :=_acad .BytesPerLine -(_fafb %_acad .BytesPerLine );if _acad .BytesPerLine !=_acad .Width >>3{_ebfa --;};if _ebfa >=8{return _acad .setEightFullBytes (_fafb ,_adfbf );
};return _acad .setEightPartlyBytes (_fafb ,_ebfa ,_adfbf );};func (_gfg *Monochrome )Scale (scale float64 )(*Monochrome ,error ){var _cbad bool ;_bcf :=scale ;if scale < 1{_bcf =1/scale ;_cbad =true ;};_adaa :=NextPowerOf2 (uint (_bcf ));if InDelta (float64 (_adaa ),_bcf ,0.001){if _cbad {return _gfg .ReduceBinary (_bcf );
};return _gfg .ExpandBinary (int (_adaa ));};_gbgee :=int (_d .RoundToEven (float64 (_gfg .Width )*scale ));_fcae :=int (_d .RoundToEven (float64 (_gfg .Height )*scale ));return _gfg .ScaleLow (_gbgee ,_fcae );};func _bde ()(_bcd [256]uint64 ){for _ebaf :=0;
_ebaf < 256;_ebaf ++{if _ebaf &0x01!=0{_bcd [_ebaf ]|=0xff;};if _ebaf &0x02!=0{_bcd [_ebaf ]|=0xff00;};if _ebaf &0x04!=0{_bcd [_ebaf ]|=0xff0000;};if _ebaf &0x08!=0{_bcd [_ebaf ]|=0xff000000;};if _ebaf &0x10!=0{_bcd [_ebaf ]|=0xff00000000;};if _ebaf &0x20!=0{_bcd [_ebaf ]|=0xff0000000000;
};if _ebaf &0x40!=0{_bcd [_ebaf ]|=0xff000000000000;};if _ebaf &0x80!=0{_bcd [_ebaf ]|=0xff00000000000000;};};return _bcd ;};func (_geb *Monochrome )AddPadding ()(_fbgd error ){if _efg :=((_geb .Width *_geb .Height )+7)>>3;len (_geb .Data )< _efg {return _df .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064a\u0074\u0061\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u003a\u0020\u0027\u0025\u0064\u0027\u002e\u0020\u0054\u0068\u0065\u0020\u0064\u0061t\u0061\u0020s\u0068\u006fu\u006c\u0064\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 l\u0065\u0061\u0073\u0074\u003a\u0020\u0027\u0025\u0064'\u0020\u0062\u0079\u0074\u0065\u0073",len (_geb .Data ),_efg );
};_addd :=_geb .Width %8;if _addd ==0{return nil ;};_fagc :=_geb .Width /8;_ffffb :=_g .NewReader (_geb .Data );_gbgg :=make ([]byte ,_geb .Height *_geb .BytesPerLine );_aagg :=_g .NewWriterMSB (_gbgg );_fge :=make ([]byte ,_fagc );var (_gcec int ;_beca uint64 ;
);for _gcec =0;_gcec < _geb .Height ;_gcec ++{if _ ,_fbgd =_ffffb .Read (_fge );_fbgd !=nil {return _fbgd ;};if _ ,_fbgd =_aagg .Write (_fge );_fbgd !=nil {return _fbgd ;};if _beca ,_fbgd =_ffffb .ReadBits (byte (_addd ));_fbgd !=nil {return _fbgd ;};if _fbgd =_aagg .WriteByte (byte (_beca )<<uint (8-_addd ));
_fbgd !=nil {return _fbgd ;};};_geb .Data =_aagg .Data ();return nil ;};func (_ddgd *Gray16 )GrayAt (x ,y int )_b .Gray {_gaca ,_ :=_ddgd .ColorAt (x ,y );return _b .Gray {Y :uint8 (_gaca .(_b .Gray16 ).Y >>8)};};func (_fcdg *NRGBA64 )SetNRGBA64 (x ,y int ,c _b .NRGBA64 ){_gcef :=(y *_fcdg .Width +x )*2;
_edcc :=_gcef *3;if _edcc +5>=len (_fcdg .Data ){return ;};_fcdg .setNRGBA64 (_edcc ,c ,_gcef );};func (_cebd *CMYK32 )Validate ()error {if len (_cebd .Data )!=4*_cebd .Width *_cebd .Height {return _f .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};func (_ccce *RGBA32 )RGBAAt (x ,y int )_b .RGBA {_gbgad ,_ :=ColorAtRGBA32 (x ,y ,_ccce .Width ,_ccce .Data ,_ccce .Alpha ,_ccce .Decode );return _gbgad ;};func (_aaeg *CMYK32 )SetCMYK (x ,y int ,c _b .CMYK ){_gacg :=4*(y *_aaeg .Width +x );
if _gacg +3>=len (_aaeg .Data ){return ;};_aaeg .Data [_gacg ]=c .C ;_aaeg .Data [_gacg +1]=c .M ;_aaeg .Data [_gacg +2]=c .Y ;_aaeg .Data [_gacg +3]=c .K ;};func _cbcd (_fgg ,_ddgg CMYK ,_egd _ab .Rectangle ){for _gcb :=0;_gcb < _egd .Max .X ;_gcb ++{for _ecb :=0;
_ecb < _egd .Max .Y ;_ecb ++{_ddgg .SetCMYK (_gcb ,_ecb ,_fgg .CMYKAt (_gcb ,_ecb ));};};};func (_feac *NRGBA64 )Bounds ()_ab .Rectangle {return _ab .Rectangle {Max :_ab .Point {X :_feac .Width ,Y :_feac .Height }};};func (_dbf *ImageBase )HasAlpha ()bool {if _dbf .Alpha ==nil {return false ;
};for _gcge :=range _dbf .Alpha {if _dbf .Alpha [_gcge ]!=0xff{return true ;};};return false ;};func (_cfbde *NRGBA32 )Bounds ()_ab .Rectangle {return _ab .Rectangle {Max :_ab .Point {X :_cfbde .Width ,Y :_cfbde .Height }};};func (_abgc monochromeModel )Convert (c _b .Color )_b .Color {_eca :=_b .GrayModel .Convert (c ).(_b .Gray );
return _cacg (_eca ,_abgc );};func AutoThresholdTriangle (histogram [256]int )uint8 {var _adaaf ,_dbgb ,_cfce ,_gdfc int ;for _cegb :=0;_cegb < len (histogram );_cegb ++{if histogram [_cegb ]> 0{_adaaf =_cegb ;break ;};};if _adaaf > 0{_adaaf --;};for _fcab :=255;
_fcab > 0;_fcab --{if histogram [_fcab ]> 0{_gdfc =_fcab ;break ;};};if _gdfc < 255{_gdfc ++;};for _gdad :=0;_gdad < 256;_gdad ++{if histogram [_gdad ]> _dbgb {_cfce =_gdad ;_dbgb =histogram [_gdad ];};};var _fced bool ;if (_cfce -_adaaf )< (_gdfc -_cfce ){_fced =true ;
var _aface int ;_bcdee :=255;for _aface < _bcdee {_bdfea :=histogram [_aface ];histogram [_aface ]=histogram [_bcdee ];histogram [_bcdee ]=_bdfea ;_aface ++;_bcdee --;};_adaaf =255-_gdfc ;_cfce =255-_cfce ;};if _adaaf ==_cfce {return uint8 (_adaaf );};
_adeg :=float64 (histogram [_cfce ]);_ggcc :=float64 (_adaaf -_cfce );_abef :=_d .Sqrt (_adeg *_adeg +_ggcc *_ggcc );_adeg /=_abef ;_ggcc /=_abef ;_abef =_adeg *float64 (_adaaf )+_ggcc *float64 (histogram [_adaaf ]);_gadc :=_adaaf ;var _ffcd float64 ;for _egbg :=_adaaf +1;
_egbg <=_cfce ;_egbg ++{_bdgg :=_adeg *float64 (_egbg )+_ggcc *float64 (histogram [_egbg ])-_abef ;if _bdgg > _ffcd {_gadc =_egbg ;_ffcd =_bdgg ;};};_gadc --;if _fced {var _befc int ;_gceec :=255;for _befc < _gceec {_efggf :=histogram [_befc ];histogram [_befc ]=histogram [_gceec ];
histogram [_gceec ]=_efggf ;_befc ++;_gceec --;};return uint8 (255-_gadc );};return uint8 (_gadc );};func (_gdfa *Monochrome )SetGray (x ,y int ,g _b .Gray ){_fddb :=y *_gdfa .BytesPerLine +x >>3;if _fddb > len (_gdfa .Data )-1{return ;};g =_cacg (g ,monochromeModel (_gdfa .ModelThreshold ));
_gdfa .setGray (x ,g ,_fddb );};func _cbfe (_fafd nrgba64 ,_fade RGBA ,_aadbe _ab .Rectangle ){for _ceaab :=0;_ceaab < _aadbe .Max .X ;_ceaab ++{for _aega :=0;_aega < _aadbe .Max .Y ;_aega ++{_cceb :=_fafd .NRGBA64At (_ceaab ,_aega );_fade .SetRGBA (_ceaab ,_aega ,_gaf (_cceb ));
};};};func InDelta (expected ,current ,delta float64 )bool {_acd :=expected -current ;if _acd <=-delta ||_acd >=delta {return false ;};return true ;};func _bc (_fa *Monochrome ,_cf int )(*Monochrome ,error ){if _fa ==nil {return nil ,_f .New ("\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _cf ==1{return _fa .copy (),nil ;};if !IsPowerOf2 (uint (_cf )){return nil ,_df .Errorf ("\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006ci\u0064 \u0065x\u0070a\u006e\u0064\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020\u0025\u0064",_cf );
};_de :=_fag (_cf );return _ff (_fa ,_cf ,_de );};func (_bcb *Monochrome )InverseData ()error {return _bcb .RasterOperation (0,0,_bcb .Width ,_bcb .Height ,PixNotDst ,nil ,0,0);};type monochromeModel uint8 ;func (_bdeb *Gray16 )Copy ()Image {return &Gray16 {ImageBase :_bdeb .copy ()}};
func _fgff (_ddee int ,_dede int )int {if _ddee < _dede {return _ddee ;};return _dede ;};func _feca (_adeff *_ab .Gray )bool {for _gbbd :=0;_gbbd < len (_adeff .Pix );_gbbd ++{if !_gbab (_adeff .Pix [_gbbd ]){return false ;};};return true ;};func _facg (_cdfd _b .NRGBA )_b .CMYK {_dad ,_cdd ,_gbd ,_ :=_cdfd .RGBA ();
_gacb ,_dee ,_fca ,_fafa :=_b .RGBToCMYK (uint8 (_dad >>8),uint8 (_cdd >>8),uint8 (_gbd >>8));return _b .CMYK {C :_gacb ,M :_dee ,Y :_fca ,K :_fafa };};func (_bcgf *Gray4 )Base ()*ImageBase {return &_bcgf .ImageBase };func _acadd (_ffbg *_ab .NYCbCrA ,_bdbd RGBA ,_afdc _ab .Rectangle ){for _gcgcc :=0;
_gcgcc < _afdc .Max .X ;_gcgcc ++{for _dcegd :=0;_dcegd < _afdc .Max .Y ;_dcegd ++{_cbac :=_ffbg .NYCbCrAAt (_gcgcc ,_dcegd );_bdbd .SetRGBA (_gcgcc ,_dcegd ,_abd (_cbac ));};};};func _feef (_ecbd *Monochrome ,_beab ,_dbce ,_aabd ,_dgce int ,_ggcgg RasterOperator ,_acedb *Monochrome ,_aceda ,_cbced int )error {var (_ffgf bool ;
_ceace bool ;_daadc int ;_bbadf int ;_cdcb int ;_fad bool ;_ffac byte ;_ddeeb int ;_cddd int ;_ecda int ;_agfca ,_abcf int ;);_fbaad :=8-(_beab &7);_dfgcd :=_fgef [_fbaad ];_gegf :=_ecbd .BytesPerLine *_dbce +(_beab >>3);_fgda :=_acedb .BytesPerLine *_cbced +(_aceda >>3);
if _aabd < _fbaad {_ffgf =true ;_dfgcd &=_aac [8-_fbaad +_aabd ];};if !_ffgf {_daadc =(_aabd -_fbaad )>>3;if _daadc > 0{_ceace =true ;_bbadf =_gegf +1;_cdcb =_fgda +1;};};_ddeeb =(_beab +_aabd )&7;if !(_ffgf ||_ddeeb ==0){_fad =true ;_ffac =_aac [_ddeeb ];
_cddd =_gegf +1+_daadc ;_ecda =_fgda +1+_daadc ;};switch _ggcgg {case PixSrc :for _agfca =0;_agfca < _dgce ;_agfca ++{_ecbd .Data [_gegf ]=_dbdg (_ecbd .Data [_gegf ],_acedb .Data [_fgda ],_dfgcd );_gegf +=_ecbd .BytesPerLine ;_fgda +=_acedb .BytesPerLine ;
};if _ceace {for _agfca =0;_agfca < _dgce ;_agfca ++{for _abcf =0;_abcf < _daadc ;_abcf ++{_ecbd .Data [_bbadf +_abcf ]=_acedb .Data [_cdcb +_abcf ];};_bbadf +=_ecbd .BytesPerLine ;_cdcb +=_acedb .BytesPerLine ;};};if _fad {for _agfca =0;_agfca < _dgce ;
_agfca ++{_ecbd .Data [_cddd ]=_dbdg (_ecbd .Data [_cddd ],_acedb .Data [_ecda ],_ffac );_cddd +=_ecbd .BytesPerLine ;_ecda +=_acedb .BytesPerLine ;};};case PixNotSrc :for _agfca =0;_agfca < _dgce ;_agfca ++{_ecbd .Data [_gegf ]=_dbdg (_ecbd .Data [_gegf ],^_acedb .Data [_fgda ],_dfgcd );
_gegf +=_ecbd .BytesPerLine ;_fgda +=_acedb .BytesPerLine ;};if _ceace {for _agfca =0;_agfca < _dgce ;_agfca ++{for _abcf =0;_abcf < _daadc ;_abcf ++{_ecbd .Data [_bbadf +_abcf ]=^_acedb .Data [_cdcb +_abcf ];};_bbadf +=_ecbd .BytesPerLine ;_cdcb +=_acedb .BytesPerLine ;
};};if _fad {for _agfca =0;_agfca < _dgce ;_agfca ++{_ecbd .Data [_cddd ]=_dbdg (_ecbd .Data [_cddd ],^_acedb .Data [_ecda ],_ffac );_cddd +=_ecbd .BytesPerLine ;_ecda +=_acedb .BytesPerLine ;};};case PixSrcOrDst :for _agfca =0;_agfca < _dgce ;_agfca ++{_ecbd .Data [_gegf ]=_dbdg (_ecbd .Data [_gegf ],_acedb .Data [_fgda ]|_ecbd .Data [_gegf ],_dfgcd );
_gegf +=_ecbd .BytesPerLine ;_fgda +=_acedb .BytesPerLine ;};if _ceace {for _agfca =0;_agfca < _dgce ;_agfca ++{for _abcf =0;_abcf < _daadc ;_abcf ++{_ecbd .Data [_bbadf +_abcf ]|=_acedb .Data [_cdcb +_abcf ];};_bbadf +=_ecbd .BytesPerLine ;_cdcb +=_acedb .BytesPerLine ;
};};if _fad {for _agfca =0;_agfca < _dgce ;_agfca ++{_ecbd .Data [_cddd ]=_dbdg (_ecbd .Data [_cddd ],_acedb .Data [_ecda ]|_ecbd .Data [_cddd ],_ffac );_cddd +=_ecbd .BytesPerLine ;_ecda +=_acedb .BytesPerLine ;};};case PixSrcAndDst :for _agfca =0;_agfca < _dgce ;
_agfca ++{_ecbd .Data [_gegf ]=_dbdg (_ecbd .Data [_gegf ],_acedb .Data [_fgda ]&_ecbd .Data [_gegf ],_dfgcd );_gegf +=_ecbd .BytesPerLine ;_fgda +=_acedb .BytesPerLine ;};if _ceace {for _agfca =0;_agfca < _dgce ;_agfca ++{for _abcf =0;_abcf < _daadc ;
_abcf ++{_ecbd .Data [_bbadf +_abcf ]&=_acedb .Data [_cdcb +_abcf ];};_bbadf +=_ecbd .BytesPerLine ;_cdcb +=_acedb .BytesPerLine ;};};if _fad {for _agfca =0;_agfca < _dgce ;_agfca ++{_ecbd .Data [_cddd ]=_dbdg (_ecbd .Data [_cddd ],_acedb .Data [_ecda ]&_ecbd .Data [_cddd ],_ffac );
_cddd +=_ecbd .BytesPerLine ;_ecda +=_acedb .BytesPerLine ;};};case PixSrcXorDst :for _agfca =0;_agfca < _dgce ;_agfca ++{_ecbd .Data [_gegf ]=_dbdg (_ecbd .Data [_gegf ],_acedb .Data [_fgda ]^_ecbd .Data [_gegf ],_dfgcd );_gegf +=_ecbd .BytesPerLine ;
_fgda +=_acedb .BytesPerLine ;};if _ceace {for _agfca =0;_agfca < _dgce ;_agfca ++{for _abcf =0;_abcf < _daadc ;_abcf ++{_ecbd .Data [_bbadf +_abcf ]^=_acedb .Data [_cdcb +_abcf ];};_bbadf +=_ecbd .BytesPerLine ;_cdcb +=_acedb .BytesPerLine ;};};if _fad {for _agfca =0;
_agfca < _dgce ;_agfca ++{_ecbd .Data [_cddd ]=_dbdg (_ecbd .Data [_cddd ],_acedb .Data [_ecda ]^_ecbd .Data [_cddd ],_ffac );_cddd +=_ecbd .BytesPerLine ;_ecda +=_acedb .BytesPerLine ;};};case PixNotSrcOrDst :for _agfca =0;_agfca < _dgce ;_agfca ++{_ecbd .Data [_gegf ]=_dbdg (_ecbd .Data [_gegf ],^(_acedb .Data [_fgda ])|_ecbd .Data [_gegf ],_dfgcd );
_gegf +=_ecbd .BytesPerLine ;_fgda +=_acedb .BytesPerLine ;};if _ceace {for _agfca =0;_agfca < _dgce ;_agfca ++{for _abcf =0;_abcf < _daadc ;_abcf ++{_ecbd .Data [_bbadf +_abcf ]|=^(_acedb .Data [_cdcb +_abcf ]);};_bbadf +=_ecbd .BytesPerLine ;_cdcb +=_acedb .BytesPerLine ;
};};if _fad {for _agfca =0;_agfca < _dgce ;_agfca ++{_ecbd .Data [_cddd ]=_dbdg (_ecbd .Data [_cddd ],^(_acedb .Data [_ecda ])|_ecbd .Data [_cddd ],_ffac );_cddd +=_ecbd .BytesPerLine ;_ecda +=_acedb .BytesPerLine ;};};case PixNotSrcAndDst :for _agfca =0;
_agfca < _dgce ;_agfca ++{_ecbd .Data [_gegf ]=_dbdg (_ecbd .Data [_gegf ],^(_acedb .Data [_fgda ])&_ecbd .Data [_gegf ],_dfgcd );_gegf +=_ecbd .BytesPerLine ;_fgda +=_acedb .BytesPerLine ;};if _ceace {for _agfca =0;_agfca < _dgce ;_agfca ++{for _abcf =0;
_abcf < _daadc ;_abcf ++{_ecbd .Data [_bbadf +_abcf ]&=^_acedb .Data [_cdcb +_abcf ];};_bbadf +=_ecbd .BytesPerLine ;_cdcb +=_acedb .BytesPerLine ;};};if _fad {for _agfca =0;_agfca < _dgce ;_agfca ++{_ecbd .Data [_cddd ]=_dbdg (_ecbd .Data [_cddd ],^(_acedb .Data [_ecda ])&_ecbd .Data [_cddd ],_ffac );
_cddd +=_ecbd .BytesPerLine ;_ecda +=_acedb .BytesPerLine ;};};case PixSrcOrNotDst :for _agfca =0;_agfca < _dgce ;_agfca ++{_ecbd .Data [_gegf ]=_dbdg (_ecbd .Data [_gegf ],_acedb .Data [_fgda ]|^(_ecbd .Data [_gegf ]),_dfgcd );_gegf +=_ecbd .BytesPerLine ;
_fgda +=_acedb .BytesPerLine ;};if _ceace {for _agfca =0;_agfca < _dgce ;_agfca ++{for _abcf =0;_abcf < _daadc ;_abcf ++{_ecbd .Data [_bbadf +_abcf ]=_acedb .Data [_cdcb +_abcf ]|^(_ecbd .Data [_bbadf +_abcf ]);};_bbadf +=_ecbd .BytesPerLine ;_cdcb +=_acedb .BytesPerLine ;
};};if _fad {for _agfca =0;_agfca < _dgce ;_agfca ++{_ecbd .Data [_cddd ]=_dbdg (_ecbd .Data [_cddd ],_acedb .Data [_ecda ]|^(_ecbd .Data [_cddd ]),_ffac );_cddd +=_ecbd .BytesPerLine ;_ecda +=_acedb .BytesPerLine ;};};case PixSrcAndNotDst :for _agfca =0;
_agfca < _dgce ;_agfca ++{_ecbd .Data [_gegf ]=_dbdg (_ecbd .Data [_gegf ],_acedb .Data [_fgda ]&^(_ecbd .Data [_gegf ]),_dfgcd );_gegf +=_ecbd .BytesPerLine ;_fgda +=_acedb .BytesPerLine ;};if _ceace {for _agfca =0;_agfca < _dgce ;_agfca ++{for _abcf =0;
_abcf < _daadc ;_abcf ++{_ecbd .Data [_bbadf +_abcf ]=_acedb .Data [_cdcb +_abcf ]&^(_ecbd .Data [_bbadf +_abcf ]);};_bbadf +=_ecbd .BytesPerLine ;_cdcb +=_acedb .BytesPerLine ;};};if _fad {for _agfca =0;_agfca < _dgce ;_agfca ++{_ecbd .Data [_cddd ]=_dbdg (_ecbd .Data [_cddd ],_acedb .Data [_ecda ]&^(_ecbd .Data [_cddd ]),_ffac );
_cddd +=_ecbd .BytesPerLine ;_ecda +=_acedb .BytesPerLine ;};};case PixNotPixSrcOrDst :for _agfca =0;_agfca < _dgce ;_agfca ++{_ecbd .Data [_gegf ]=_dbdg (_ecbd .Data [_gegf ],^(_acedb .Data [_fgda ]|_ecbd .Data [_gegf ]),_dfgcd );_gegf +=_ecbd .BytesPerLine ;
_fgda +=_acedb .BytesPerLine ;};if _ceace {for _agfca =0;_agfca < _dgce ;_agfca ++{for _abcf =0;_abcf < _daadc ;_abcf ++{_ecbd .Data [_bbadf +_abcf ]=^(_acedb .Data [_cdcb +_abcf ]|_ecbd .Data [_bbadf +_abcf ]);};_bbadf +=_ecbd .BytesPerLine ;_cdcb +=_acedb .BytesPerLine ;
};};if _fad {for _agfca =0;_agfca < _dgce ;_agfca ++{_ecbd .Data [_cddd ]=_dbdg (_ecbd .Data [_cddd ],^(_acedb .Data [_ecda ]|_ecbd .Data [_cddd ]),_ffac );_cddd +=_ecbd .BytesPerLine ;_ecda +=_acedb .BytesPerLine ;};};case PixNotPixSrcAndDst :for _agfca =0;
_agfca < _dgce ;_agfca ++{_ecbd .Data [_gegf ]=_dbdg (_ecbd .Data [_gegf ],^(_acedb .Data [_fgda ]&_ecbd .Data [_gegf ]),_dfgcd );_gegf +=_ecbd .BytesPerLine ;_fgda +=_acedb .BytesPerLine ;};if _ceace {for _agfca =0;_agfca < _dgce ;_agfca ++{for _abcf =0;
_abcf < _daadc ;_abcf ++{_ecbd .Data [_bbadf +_abcf ]=^(_acedb .Data [_cdcb +_abcf ]&_ecbd .Data [_bbadf +_abcf ]);};_bbadf +=_ecbd .BytesPerLine ;_cdcb +=_acedb .BytesPerLine ;};};if _fad {for _agfca =0;_agfca < _dgce ;_agfca ++{_ecbd .Data [_cddd ]=_dbdg (_ecbd .Data [_cddd ],^(_acedb .Data [_ecda ]&_ecbd .Data [_cddd ]),_ffac );
_cddd +=_ecbd .BytesPerLine ;_ecda +=_acedb .BytesPerLine ;};};case PixNotPixSrcXorDst :for _agfca =0;_agfca < _dgce ;_agfca ++{_ecbd .Data [_gegf ]=_dbdg (_ecbd .Data [_gegf ],^(_acedb .Data [_fgda ]^_ecbd .Data [_gegf ]),_dfgcd );_gegf +=_ecbd .BytesPerLine ;
_fgda +=_acedb .BytesPerLine ;};if _ceace {for _agfca =0;_agfca < _dgce ;_agfca ++{for _abcf =0;_abcf < _daadc ;_abcf ++{_ecbd .Data [_bbadf +_abcf ]=^(_acedb .Data [_cdcb +_abcf ]^_ecbd .Data [_bbadf +_abcf ]);};_bbadf +=_ecbd .BytesPerLine ;_cdcb +=_acedb .BytesPerLine ;
};};if _fad {for _agfca =0;_agfca < _dgce ;_agfca ++{_ecbd .Data [_cddd ]=_dbdg (_ecbd .Data [_cddd ],^(_acedb .Data [_ecda ]^_ecbd .Data [_cddd ]),_ffac );_cddd +=_ecbd .BytesPerLine ;_ecda +=_acedb .BytesPerLine ;};};default:_e .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070e\u0072\u0061\u0074o\u0072:\u0020\u0025\u0064",_ggcgg );
return _f .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");};return nil ;};var _ Image =&NRGBA32 {};type Image interface{_bd .Image ;Base ()*ImageBase ;Copy ()Image ;
Pix ()[]byte ;ColorAt (_afea ,_gbdb int )(_b .Color ,error );Validate ()error ;};var _ Image =&NRGBA16 {};func (_bggf *Gray16 )Histogram ()(_ddad [256]int ){for _ggab :=0;_ggab < _bggf .Width ;_ggab ++{for _gee :=0;_gee < _bggf .Height ;_gee ++{_ddad [_bggf .GrayAt (_ggab ,_gee ).Y ]++;
};};return _ddad ;};func ColorAtNRGBA64 (x ,y ,width int ,data ,alpha []byte ,decode []float64 )(_b .NRGBA64 ,error ){_bcfd :=(y *width +x )*2;_bcbd :=_bcfd *3;if _bcbd +5>=len (data ){return _b .NRGBA64 {},_df .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};const _dece =0xffff;_abe :=uint16 (_dece );if alpha !=nil &&len (alpha )> _bcfd +1{_abe =uint16 (alpha [_bcfd ])<<8|uint16 (alpha [_bcfd +1]);};_ffacd :=uint16 (data [_bcbd ])<<8|uint16 (data [_bcbd +1]);_cfcda :=uint16 (data [_bcbd +2])<<8|uint16 (data [_bcbd +3]);
_gfca :=uint16 (data [_bcbd +4])<<8|uint16 (data [_bcbd +5]);if len (decode )==6{_ffacd =uint16 (uint64 (LinearInterpolate (float64 (_ffacd ),0,65535,decode [0],decode [1]))&_dece );_cfcda =uint16 (uint64 (LinearInterpolate (float64 (_cfcda ),0,65535,decode [2],decode [3]))&_dece );
_gfca =uint16 (uint64 (LinearInterpolate (float64 (_gfca ),0,65535,decode [4],decode [5]))&_dece );};return _b .NRGBA64 {R :_ffacd ,G :_cfcda ,B :_gfca ,A :_abe },nil ;};func (_afbe *ImageBase )GetAlpha ()[]byte {return _afbe .Alpha };func ColorAtRGBA32 (x ,y ,width int ,data ,alpha []byte ,decode []float64 )(_b .RGBA ,error ){_cegfb :=y *width +x ;
_ggba :=3*_cegfb ;if _ggba +2>=len (data ){return _b .RGBA {},_df .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_acdb :=uint8 (0xff);if alpha !=nil &&len (alpha )> _cegfb {_acdb =alpha [_cegfb ];};_cade ,_fcef ,_dcfb :=data [_ggba ],data [_ggba +1],data [_ggba +2];if len (decode )==6{_cade =uint8 (uint32 (LinearInterpolate (float64 (_cade ),0,255,decode [0],decode [1]))&0xff);
_fcef =uint8 (uint32 (LinearInterpolate (float64 (_fcef ),0,255,decode [2],decode [3]))&0xff);_dcfb =uint8 (uint32 (LinearInterpolate (float64 (_dcfb ),0,255,decode [4],decode [5]))&0xff);};return _b .RGBA {R :_cade ,G :_fcef ,B :_dcfb ,A :_acdb },nil ;
};func (_cgg *NRGBA32 )setRGBA (_cebe int ,_daeg _b .NRGBA ){_abdg :=3*_cebe ;_cgg .Data [_abdg ]=_daeg .R ;_cgg .Data [_abdg +1]=_daeg .G ;_cgg .Data [_abdg +2]=_daeg .B ;if _cebe < len (_cgg .Alpha ){_cgg .Alpha [_cebe ]=_daeg .A ;};};type Gray8 struct{ImageBase };
func (_fcga *ImageBase )setEightPartlyBytes (_dacc ,_adcff int ,_cbba uint64 )(_bfdb error ){var (_deda byte ;_cbca int ;);for _ffdb :=1;_ffdb <=_adcff ;_ffdb ++{_cbca =64-_ffdb *8;_deda =byte (_cbba >>uint (_cbca )&0xff);if _bfdb =_fcga .setByte (_dacc +_ffdb -1,_deda );
_bfdb !=nil {return _bfdb ;};};_fgfdd :=_fcga .BytesPerLine *8-_fcga .Width ;if _fgfdd ==0{return nil ;};_cbca -=8;_deda =byte (_cbba >>uint (_cbca )&0xff)<<uint (_fgfdd );if _bfdb =_fcga .setByte (_dacc +_adcff ,_deda );_bfdb !=nil {return _bfdb ;};return nil ;
};func (_gcg *Monochrome )IsUnpadded ()bool {return (_gcg .Width *_gcg .Height )==len (_gcg .Data )};func (_bcga *CMYK32 )Set (x ,y int ,c _b .Color ){_bab :=4*(y *_bcga .Width +x );if _bab +3>=len (_bcga .Data ){return ;};_abc :=_b .CMYKModel .Convert (c ).(_b .CMYK );
_bcga .Data [_bab ]=_abc .C ;_bcga .Data [_bab +1]=_abc .M ;_bcga .Data [_bab +2]=_abc .Y ;_bcga .Data [_bab +3]=_abc .K ;};func (_baea *NRGBA16 )At (x ,y int )_b .Color {_abbb ,_ :=_baea .ColorAt (x ,y );return _abbb };func (_bdef *ImageBase )MakeAlpha (){_bdef .newAlpha ()};
func (_efcf *NRGBA32 )Validate ()error {if len (_efcf .Data )!=3*_efcf .Width *_efcf .Height {return _f .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};func (_gbda *NRGBA64 )At (x ,y int )_b .Color {_ebgf ,_ :=_gbda .ColorAt (x ,y );return _ebgf };func (_feff *NRGBA64 )Set (x ,y int ,c _b .Color ){_acc :=(y *_feff .Width +x )*2;_caeb :=_acc *3;if _caeb +5>=len (_feff .Data ){return ;};
_bafe :=_b .NRGBA64Model .Convert (c ).(_b .NRGBA64 );_feff .setNRGBA64 (_caeb ,_bafe ,_acc );};func (_beae *Gray8 )Histogram ()(_abgb [256]int ){for _fdfb :=0;_fdfb < len (_beae .Data );_fdfb ++{_abgb [_beae .Data [_fdfb ]]++;};return _abgb ;};func _fgddb (_aecc _b .CMYK )_b .RGBA {_bgbf ,_gda ,_bag :=_b .CMYKToRGB (_aecc .C ,_aecc .M ,_aecc .Y ,_aecc .K );
return _b .RGBA {R :_bgbf ,G :_gda ,B :_bag ,A :0xff};};func (_cbag *Gray2 )ColorAt (x ,y int )(_b .Color ,error ){return ColorAtGray2BPC (x ,y ,_cbag .BytesPerLine ,_cbag .Data ,_cbag .Decode );};func (_fafac *Gray2 )Set (x ,y int ,c _b .Color ){if x >=_fafac .Width ||y >=_fafac .Height {return ;
};_gbdc :=Gray2Model .Convert (c ).(_b .Gray );_gdfg :=y *_fafac .BytesPerLine ;_eee :=_gdfg +(x >>2);_gcgg :=_gbdc .Y >>6;_fafac .Data [_eee ]=(_fafac .Data [_eee ]&(^(0xc0>>uint (2*((x )&3)))))|(_gcgg <<uint (6-2*(x &3)));};func (_bcaa *RGBA32 )SetRGBA (x ,y int ,c _b .RGBA ){_gabf :=y *_bcaa .Width +x ;
_ebafb :=3*_gabf ;if _ebafb +2>=len (_bcaa .Data ){return ;};_bcaa .setRGBA (_gabf ,c );};func (_gcee *NRGBA64 )NRGBA64At (x ,y int )_b .NRGBA64 {_dccfe ,_ :=ColorAtNRGBA64 (x ,y ,_gcee .Width ,_gcee .Data ,_gcee .Alpha ,_gcee .Decode );return _dccfe ;
};func _cdfb (_bagd int ,_gcdgg int )error {return _df .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",_bagd ,_gcdgg );
};func (_gbcgf *RGBA32 )Validate ()error {if len (_gbcgf .Data )!=3*_gbcgf .Width *_gbcgf .Height {return _f .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};type monochromeThresholdConverter struct{Threshold uint8 ;};var _ _ab .Image =&NRGBA32 {};func (_caf *NRGBA16 )Bounds ()_ab .Rectangle {return _ab .Rectangle {Max :_ab .Point {X :_caf .Width ,Y :_caf .Height }};};func _gdcf ()(_bce []byte ){_bce =make ([]byte ,256);
for _feg :=0;_feg < 256;_feg ++{_ace :=byte (_feg );_bce [_ace ]=(_ace &0x01)|((_ace &0x04)>>1)|((_ace &0x10)>>2)|((_ace &0x40)>>3)|((_ace &0x02)<<3)|((_ace &0x08)<<2)|((_ace &0x20)<<1)|(_ace &0x80);};return _bce ;};func _ebb (_gad _b .RGBA )_b .Gray {_gde :=(19595*uint32 (_gad .R )+38470*uint32 (_gad .G )+7471*uint32 (_gad .B )+1<<7)>>16;
return _b .Gray {Y :uint8 (_gde )};};func _dgda (_daee _ab .Image ,_agcc int )(_ab .Rectangle ,bool ,[]byte ){_afdd :=_daee .Bounds ();var (_ede bool ;_cbed []byte ;);switch _gagb :=_daee .(type ){case SMasker :_ede =_gagb .HasAlpha ();case NRGBA ,RGBA ,*_ab .RGBA64 ,nrgba64 ,*_ab .NYCbCrA :_cbed =make ([]byte ,_afdd .Max .X *_afdd .Max .Y *_agcc );
case *_ab .Paletted :if !_gagb .Opaque (){_cbed =make ([]byte ,_afdd .Max .X *_afdd .Max .Y *_agcc );};};return _afdd ,_ede ,_cbed ;};func (_adad *ImageBase )setByte (_cfbd int ,_eccba byte )error {if _cfbd > len (_adad .Data )-1{return _f .New ("\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_adad .Data [_cfbd ]=_eccba ;return nil ;};type NRGBA16 struct{ImageBase };func (_fddgee *NRGBA64 )Validate ()error {if len (_fddgee .Data )!=3*2*_fddgee .Width *_fddgee .Height {return _f .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};func _gea (_ebad _b .NRGBA )_b .RGBA {_dfdb ,_ddaa ,_fdeg ,_dcg :=_ebad .RGBA ();return _b .RGBA {R :uint8 (_dfdb >>8),G :uint8 (_ddaa >>8),B :uint8 (_fdeg >>8),A :uint8 (_dcg >>8)};};func _egbc (_gdd _b .NRGBA )_b .Gray {var _ggd _b .NRGBA ;
if _gdd ==_ggd {return _b .Gray {Y :0xff};};_baba ,_dgd ,_fggb ,_ :=_gdd .RGBA ();_gcf :=(19595*_baba +38470*_dgd +7471*_fggb +1<<15)>>24;return _b .Gray {Y :uint8 (_gcf )};};func _eadc (_bgbg _ab .Image ,_agbe Image ,_cgad _ab .Rectangle ){for _bbg :=0;
_bbg < _cgad .Max .X ;_bbg ++{for _efed :=0;_efed < _cgad .Max .Y ;_efed ++{_cgbg :=_bgbg .At (_bbg ,_efed );_agbe .Set (_bbg ,_efed ,_cgbg );};};};func _gbccg (_ecdc CMYK ,_afff Gray ,_fed _ab .Rectangle ){for _ccbg :=0;_ccbg < _fed .Max .X ;_ccbg ++{for _cage :=0;
_cage < _fed .Max .Y ;_cage ++{_deab :=_bbgd (_ecdc .CMYKAt (_ccbg ,_cage ));_afff .SetGray (_ccbg ,_cage ,_deab );};};};var _ Gray =&Gray4 {};func (_fcee *NRGBA16 )Copy ()Image {return &NRGBA16 {ImageBase :_fcee .copy ()}};func _eda (_fdf _ab .Image )(Image ,error ){if _gbgb ,_dab :=_fdf .(*Monochrome );
_dab {return _gbgb ,nil ;};_cfgg :=_fdf .Bounds ();var _bddd Gray ;switch _cba :=_fdf .(type ){case Gray :_bddd =_cba ;case NRGBA :_bddd =&Gray8 {ImageBase :NewImageBase (_cfgg .Max .X ,_cfgg .Max .Y ,8,1,nil ,nil ,nil )};_edfe (_bddd ,_cba ,_cfgg );case nrgba64 :_bddd =&Gray8 {ImageBase :NewImageBase (_cfgg .Max .X ,_cfgg .Max .Y ,8,1,nil ,nil ,nil )};
_fgf (_bddd ,_cba ,_cfgg );default:_fce ,_efbe :=GrayConverter .Convert (_fdf );if _efbe !=nil {return nil ,_efbe ;};_bddd =_fce .(Gray );};_dfgf ,_gbgc :=NewImage (_cfgg .Max .X ,_cfgg .Max .Y ,1,1,nil ,nil ,nil );if _gbgc !=nil {return nil ,_gbgc ;};
_bef :=_dfgf .(*Monochrome );_bdgb :=AutoThresholdTriangle (GrayHistogram (_bddd ));for _cegc :=0;_cegc < _cfgg .Max .X ;_cegc ++{for _ecbg :=0;_ecbg < _cfgg .Max .Y ;_ecbg ++{_bgd :=_cacg (_bddd .GrayAt (_cegc ,_ecbg ),monochromeModel (_bdgb ));_bef .SetGray (_cegc ,_ecbg ,_bgd );
};};return _dfgf ,nil ;};func (_ggg *ImageBase )copy ()ImageBase {_dcd :=*_ggg ;_dcd .Data =make ([]byte ,len (_ggg .Data ));copy (_dcd .Data ,_ggg .Data );return _dcd ;};func NextPowerOf2 (n uint )uint {if IsPowerOf2 (n ){return n ;};return 1<<(_gdag (n )+1);
};func (_gcfe *ImageBase )setEightFullBytes (_effb int ,_ccbf uint64 )error {if _effb +7> len (_gcfe .Data )-1{return _f .New ("\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");};_gcfe .Data [_effb ]=byte ((_ccbf &0xff00000000000000)>>56);
_gcfe .Data [_effb +1]=byte ((_ccbf &0xff000000000000)>>48);_gcfe .Data [_effb +2]=byte ((_ccbf &0xff0000000000)>>40);_gcfe .Data [_effb +3]=byte ((_ccbf &0xff00000000)>>32);_gcfe .Data [_effb +4]=byte ((_ccbf &0xff000000)>>24);_gcfe .Data [_effb +5]=byte ((_ccbf &0xff0000)>>16);
_gcfe .Data [_effb +6]=byte ((_ccbf &0xff00)>>8);_gcfe .Data [_effb +7]=byte (_ccbf &0xff);return nil ;};var _ NRGBA =&NRGBA32 {};func _bdd (_ebe RGBA ,_ffgg CMYK ,_bgb _ab .Rectangle ){for _ccgd :=0;_ccgd < _bgb .Max .X ;_ccgd ++{for _eebg :=0;_eebg < _bgb .Max .Y ;
_eebg ++{_fbc :=_ebe .RGBAAt (_ccgd ,_eebg );_ffgg .SetCMYK (_ccgd ,_eebg ,_cffb (_fbc ));};};};func (_gbb *RGBA32 )Base ()*ImageBase {return &_gbb .ImageBase };func (_effc *NRGBA16 )ColorAt (x ,y int )(_b .Color ,error ){return ColorAtNRGBA16 (x ,y ,_effc .Width ,_effc .BytesPerLine ,_effc .Data ,_effc .Alpha ,_effc .Decode );
};var _ Image =&CMYK32 {};func (_ggada *RGBA32 )Set (x ,y int ,c _b .Color ){_adea :=y *_ggada .Width +x ;_cfdc :=3*_adea ;if _cfdc +2>=len (_ggada .Data ){return ;};_bcbb :=_b .RGBAModel .Convert (c ).(_b .RGBA );_ggada .setRGBA (_adea ,_bcbb );};func (_ffd *CMYK32 )Bounds ()_ab .Rectangle {return _ab .Rectangle {Max :_ab .Point {X :_ffd .Width ,Y :_ffd .Height }};
};func (_agbb *Gray4 )At (x ,y int )_b .Color {_ebff ,_ :=_agbb .ColorAt (x ,y );return _ebff };func _dfab (_aaaa *Monochrome ,_ecec ,_gaab ,_efag ,_beaa int ,_gcaf RasterOperator ,_dbca *Monochrome ,_fdcf ,_fdce int )error {var (_efaa byte ;_adga int ;
_dcf int ;_ggdf ,_cfge int ;_cdbe ,_ggdg int ;);_dbaea :=_efag >>3;_efbec :=_efag &7;if _efbec > 0{_efaa =_aac [_efbec ];};_adga =_dbca .BytesPerLine *_fdce +(_fdcf >>3);_dcf =_aaaa .BytesPerLine *_gaab +(_ecec >>3);switch _gcaf {case PixSrc :for _cdbe =0;
_cdbe < _beaa ;_cdbe ++{_ggdf =_adga +_cdbe *_dbca .BytesPerLine ;_cfge =_dcf +_cdbe *_aaaa .BytesPerLine ;for _ggdg =0;_ggdg < _dbaea ;_ggdg ++{_aaaa .Data [_cfge ]=_dbca .Data [_ggdf ];_cfge ++;_ggdf ++;};if _efbec > 0{_aaaa .Data [_cfge ]=_dbdg (_aaaa .Data [_cfge ],_dbca .Data [_ggdf ],_efaa );
};};case PixNotSrc :for _cdbe =0;_cdbe < _beaa ;_cdbe ++{_ggdf =_adga +_cdbe *_dbca .BytesPerLine ;_cfge =_dcf +_cdbe *_aaaa .BytesPerLine ;for _ggdg =0;_ggdg < _dbaea ;_ggdg ++{_aaaa .Data [_cfge ]=^(_dbca .Data [_ggdf ]);_cfge ++;_ggdf ++;};if _efbec > 0{_aaaa .Data [_cfge ]=_dbdg (_aaaa .Data [_cfge ],^_dbca .Data [_ggdf ],_efaa );
};};case PixSrcOrDst :for _cdbe =0;_cdbe < _beaa ;_cdbe ++{_ggdf =_adga +_cdbe *_dbca .BytesPerLine ;_cfge =_dcf +_cdbe *_aaaa .BytesPerLine ;for _ggdg =0;_ggdg < _dbaea ;_ggdg ++{_aaaa .Data [_cfge ]|=_dbca .Data [_ggdf ];_cfge ++;_ggdf ++;};if _efbec > 0{_aaaa .Data [_cfge ]=_dbdg (_aaaa .Data [_cfge ],_dbca .Data [_ggdf ]|_aaaa .Data [_cfge ],_efaa );
};};case PixSrcAndDst :for _cdbe =0;_cdbe < _beaa ;_cdbe ++{_ggdf =_adga +_cdbe *_dbca .BytesPerLine ;_cfge =_dcf +_cdbe *_aaaa .BytesPerLine ;for _ggdg =0;_ggdg < _dbaea ;_ggdg ++{_aaaa .Data [_cfge ]&=_dbca .Data [_ggdf ];_cfge ++;_ggdf ++;};if _efbec > 0{_aaaa .Data [_cfge ]=_dbdg (_aaaa .Data [_cfge ],_dbca .Data [_ggdf ]&_aaaa .Data [_cfge ],_efaa );
};};case PixSrcXorDst :for _cdbe =0;_cdbe < _beaa ;_cdbe ++{_ggdf =_adga +_cdbe *_dbca .BytesPerLine ;_cfge =_dcf +_cdbe *_aaaa .BytesPerLine ;for _ggdg =0;_ggdg < _dbaea ;_ggdg ++{_aaaa .Data [_cfge ]^=_dbca .Data [_ggdf ];_cfge ++;_ggdf ++;};if _efbec > 0{_aaaa .Data [_cfge ]=_dbdg (_aaaa .Data [_cfge ],_dbca .Data [_ggdf ]^_aaaa .Data [_cfge ],_efaa );
};};case PixNotSrcOrDst :for _cdbe =0;_cdbe < _beaa ;_cdbe ++{_ggdf =_adga +_cdbe *_dbca .BytesPerLine ;_cfge =_dcf +_cdbe *_aaaa .BytesPerLine ;for _ggdg =0;_ggdg < _dbaea ;_ggdg ++{_aaaa .Data [_cfge ]|=^(_dbca .Data [_ggdf ]);_cfge ++;_ggdf ++;};if _efbec > 0{_aaaa .Data [_cfge ]=_dbdg (_aaaa .Data [_cfge ],^(_dbca .Data [_ggdf ])|_aaaa .Data [_cfge ],_efaa );
};};case PixNotSrcAndDst :for _cdbe =0;_cdbe < _beaa ;_cdbe ++{_ggdf =_adga +_cdbe *_dbca .BytesPerLine ;_cfge =_dcf +_cdbe *_aaaa .BytesPerLine ;for _ggdg =0;_ggdg < _dbaea ;_ggdg ++{_aaaa .Data [_cfge ]&=^(_dbca .Data [_ggdf ]);_cfge ++;_ggdf ++;};if _efbec > 0{_aaaa .Data [_cfge ]=_dbdg (_aaaa .Data [_cfge ],^(_dbca .Data [_ggdf ])&_aaaa .Data [_cfge ],_efaa );
};};case PixSrcOrNotDst :for _cdbe =0;_cdbe < _beaa ;_cdbe ++{_ggdf =_adga +_cdbe *_dbca .BytesPerLine ;_cfge =_dcf +_cdbe *_aaaa .BytesPerLine ;for _ggdg =0;_ggdg < _dbaea ;_ggdg ++{_aaaa .Data [_cfge ]=_dbca .Data [_ggdf ]|^(_aaaa .Data [_cfge ]);_cfge ++;
_ggdf ++;};if _efbec > 0{_aaaa .Data [_cfge ]=_dbdg (_aaaa .Data [_cfge ],_dbca .Data [_ggdf ]|^(_aaaa .Data [_cfge ]),_efaa );};};case PixSrcAndNotDst :for _cdbe =0;_cdbe < _beaa ;_cdbe ++{_ggdf =_adga +_cdbe *_dbca .BytesPerLine ;_cfge =_dcf +_cdbe *_aaaa .BytesPerLine ;
for _ggdg =0;_ggdg < _dbaea ;_ggdg ++{_aaaa .Data [_cfge ]=_dbca .Data [_ggdf ]&^(_aaaa .Data [_cfge ]);_cfge ++;_ggdf ++;};if _efbec > 0{_aaaa .Data [_cfge ]=_dbdg (_aaaa .Data [_cfge ],_dbca .Data [_ggdf ]&^(_aaaa .Data [_cfge ]),_efaa );};};case PixNotPixSrcOrDst :for _cdbe =0;
_cdbe < _beaa ;_cdbe ++{_ggdf =_adga +_cdbe *_dbca .BytesPerLine ;_cfge =_dcf +_cdbe *_aaaa .BytesPerLine ;for _ggdg =0;_ggdg < _dbaea ;_ggdg ++{_aaaa .Data [_cfge ]=^(_dbca .Data [_ggdf ]|_aaaa .Data [_cfge ]);_cfge ++;_ggdf ++;};if _efbec > 0{_aaaa .Data [_cfge ]=_dbdg (_aaaa .Data [_cfge ],^(_dbca .Data [_ggdf ]|_aaaa .Data [_cfge ]),_efaa );
};};case PixNotPixSrcAndDst :for _cdbe =0;_cdbe < _beaa ;_cdbe ++{_ggdf =_adga +_cdbe *_dbca .BytesPerLine ;_cfge =_dcf +_cdbe *_aaaa .BytesPerLine ;for _ggdg =0;_ggdg < _dbaea ;_ggdg ++{_aaaa .Data [_cfge ]=^(_dbca .Data [_ggdf ]&_aaaa .Data [_cfge ]);
_cfge ++;_ggdf ++;};if _efbec > 0{_aaaa .Data [_cfge ]=_dbdg (_aaaa .Data [_cfge ],^(_dbca .Data [_ggdf ]&_aaaa .Data [_cfge ]),_efaa );};};case PixNotPixSrcXorDst :for _cdbe =0;_cdbe < _beaa ;_cdbe ++{_ggdf =_adga +_cdbe *_dbca .BytesPerLine ;_cfge =_dcf +_cdbe *_aaaa .BytesPerLine ;
for _ggdg =0;_ggdg < _dbaea ;_ggdg ++{_aaaa .Data [_cfge ]=^(_dbca .Data [_ggdf ]^_aaaa .Data [_cfge ]);_cfge ++;_ggdf ++;};if _efbec > 0{_aaaa .Data [_cfge ]=_dbdg (_aaaa .Data [_cfge ],^(_dbca .Data [_ggdf ]^_aaaa .Data [_cfge ]),_efaa );};};default:_e .Log .Debug ("\u0050\u0072ov\u0069\u0064\u0065d\u0020\u0069\u006e\u0076ali\u0064 r\u0061\u0073\u0074\u0065\u0072\u0020\u006fpe\u0072\u0061\u0074\u006f\u0072\u003a\u0020%\u0076",_gcaf );
return _f .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");};return nil ;};func _deca (_ead *Monochrome ,_bgg ...int )(_adff *Monochrome ,_fg error ){if _ead ==nil {return nil ,_f .New ("\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");
};if len (_bgg )==0{return nil ,_f .New ("\u0074h\u0065\u0072e\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020o\u006e\u0065\u0020\u006c\u0065\u0076\u0065\u006c\u0020\u006f\u0066 \u0072\u0065\u0064\u0075\u0063\u0074\u0069\u006f\u006e");
};_gae :=_gdcf ();_adff =_ead ;for _ ,_cgd :=range _bgg {if _cgd <=0{break ;};_adff ,_fg =_cda (_adff ,_cgd ,_gae );if _fg !=nil {return nil ,_fg ;};};return _adff ,nil ;};func _ffee (_acfd RGBA ,_efdg Gray ,_bgeg _ab .Rectangle ){for _daff :=0;_daff < _bgeg .Max .X ;
_daff ++{for _adaf :=0;_adaf < _bgeg .Max .Y ;_adaf ++{_deg :=_ebb (_acfd .RGBAAt (_daff ,_adaf ));_efdg .SetGray (_daff ,_adaf ,_deg );};};};func (_ddfd *Monochrome )ReduceBinary (factor float64 )(*Monochrome ,error ){_efa :=_gdag (uint (factor ));if !IsPowerOf2 (uint (factor )){_efa ++;
};_ddge :=make ([]int ,_efa );for _ddgf :=range _ddge {_ddge [_ddgf ]=4;};_dcb ,_dfda :=_deca (_ddfd ,_ddge ...);if _dfda !=nil {return nil ,_dfda ;};return _dcb ,nil ;};var _ffggb [256]uint8 ;func _fbaff (_cdbc _ab .Image ,_bdbb Image ,_caa _ab .Rectangle ){if _dfbe ,_ccecd :=_cdbc .(SMasker );
_ccecd &&_dfbe .HasAlpha (){_bdbb .(SMasker ).MakeAlpha ();};_eadc (_cdbc ,_bdbb ,_caa );};func _ege (_eccb _b .NYCbCrA )_b .NRGBA {_bbf :=int32 (_eccb .Y )*0x10101;_bbdd :=int32 (_eccb .Cb )-128;_acf :=int32 (_eccb .Cr )-128;_edge :=_bbf +91881*_acf ;
if uint32 (_edge )&0xff000000==0{_edge >>=8;}else {_edge =^(_edge >>31)&0xffff;};_adab :=_bbf -22554*_bbdd -46802*_acf ;if uint32 (_adab )&0xff000000==0{_adab >>=8;}else {_adab =^(_adab >>31)&0xffff;};_bagb :=_bbf +116130*_bbdd ;if uint32 (_bagb )&0xff000000==0{_bagb >>=8;
}else {_bagb =^(_bagb >>31)&0xffff;};return _b .NRGBA {R :uint8 (_edge >>8),G :uint8 (_adab >>8),B :uint8 (_bagb >>8),A :_eccb .A };};func _gg (_be ,_bea *Monochrome )(_ga error ){_cg :=_bea .BytesPerLine ;_gbg :=_be .BytesPerLine ;_cd :=_bea .BytesPerLine *4-_be .BytesPerLine ;
var (_cc ,_ddg byte ;_cb uint32 ;_age ,_af ,_da ,_ed ,_fda ,_aeg ,_bbc int ;);for _da =0;_da < _bea .Height ;_da ++{_age =_da *_cg ;_af =4*_da *_gbg ;for _ed =0;_ed < _cg ;_ed ++{_cc =_bea .Data [_age +_ed ];_cb =_gf [_cc ];_aeg =_af +_ed *4;if _cd !=0&&(_ed +1)*4> _be .BytesPerLine {for _fda =_cd ;
_fda > 0;_fda --{_ddg =byte ((_cb >>uint (_fda *8))&0xff);_bbc =_aeg +(_cd -_fda );if _ga =_be .setByte (_bbc ,_ddg );_ga !=nil {return _ga ;};};}else if _ga =_be .setFourBytes (_aeg ,_cb );_ga !=nil {return _ga ;};if _ga =_be .setFourBytes (_af +_ed *4,_gf [_bea .Data [_age +_ed ]]);
_ga !=nil {return _ga ;};};for _fda =1;_fda < 4;_fda ++{for _ed =0;_ed < _gbg ;_ed ++{if _ga =_be .setByte (_af +_fda *_gbg +_ed ,_be .Data [_af +_ed ]);_ga !=nil {return _ga ;};};};};return nil ;};func (_eded *RGBA32 )ColorModel ()_b .Model {return _b .NRGBAModel };
func _acbc (_bggc _ab .Image )(Image ,error ){if _bceb ,_cfbg :=_bggc .(*Gray4 );_cfbg {return _bceb .Copy (),nil ;};_gdcb :=_bggc .Bounds ();_cfcd ,_ffed :=NewImage (_gdcb .Max .X ,_gdcb .Max .Y ,4,1,nil ,nil ,nil );if _ffed !=nil {return nil ,_ffed ;
};_gfc (_bggc ,_cfcd ,_gdcb );return _cfcd ,nil ;};type Gray16 struct{ImageBase };func (_acfac *NRGBA16 )Validate ()error {if len (_acfac .Data )!=3*_acfac .Width *_acfac .Height /2{return _f .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};func _ddbb (_fafc NRGBA ,_dgbab RGBA ,_bbaa _ab .Rectangle ){for _fggbe :=0;_fggbe < _bbaa .Max .X ;_fggbe ++{for _agbd :=0;_agbd < _bbaa .Max .Y ;_agbd ++{_gcgc :=_fafc .NRGBAAt (_fggbe ,_agbd );_dgbab .SetRGBA (_fggbe ,_agbd ,_gea (_gcgc ));
};};};func _bfac (_feb []byte ,_eabf Image )error {_aege :=true ;for _ffbf :=0;_ffbf < len (_feb );_ffbf ++{if _feb [_ffbf ]!=0xff{_aege =false ;break ;};};if _aege {switch _ddac :=_eabf .(type ){case *NRGBA32 :_ddac .Alpha =nil ;case *NRGBA64 :_ddac .Alpha =nil ;
default:return _df .Errorf ("i\u006ete\u0072n\u0061l\u0020\u0065\u0072\u0072\u006fr\u0020\u002d\u0020i\u006d\u0061\u0067\u0065\u0020s\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070e\u0020\u002a\u004eRGB\u0041\u0033\u0032\u0020\u006f\u0072 \u002a\u004e\u0052\u0047\u0042\u0041\u0036\u0034\u0020\u0062\u0075\u0074 \u0069s\u003a\u0020\u0025\u0054",_eabf );
};};return nil ;};func _cda (_gdc *Monochrome ,_ffa int ,_abf []byte )(_ffe *Monochrome ,_fea error ){const _bca ="\u0072\u0065d\u0075\u0063\u0065R\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079";if _gdc ==nil {return nil ,_f .New ("\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");
};if _ffa < 1||_ffa > 4{return nil ,_f .New ("\u006c\u0065\u0076\u0065\u006c\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0069\u006e\u0020\u0073e\u0074\u0020\u007b\u0031\u002c\u0032\u002c\u0033\u002c\u0034\u007d");};if _gdc .Height <=1{return nil ,_f .New ("\u0073\u006f\u0075rc\u0065\u0020\u0068\u0065\u0069\u0067\u0068\u0074\u0020m\u0075s\u0074 \u0062e\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0027\u0032\u0027");
};_ffe =_cdc (_gdc .Width /2,_gdc .Height /2);if _abf ==nil {_abf =_gdcf ();};_aadb :=_fgff (_gdc .BytesPerLine ,2*_ffe .BytesPerLine );switch _ffa {case 1:_fea =_cbc (_gdc ,_ffe ,_abf ,_aadb );case 2:_fea =_aag (_gdc ,_ffe ,_abf ,_aadb );case 3:_fea =_ceb (_gdc ,_ffe ,_abf ,_aadb );
case 4:_fea =_cde (_gdc ,_ffe ,_abf ,_aadb );};if _fea !=nil {return nil ,_fea ;};return _ffe ,nil ;};var _ _ab .Image =&Monochrome {};func _fabe (_aceb Gray ,_cacc CMYK ,_fcd _ab .Rectangle ){for _fgdfc :=0;_fgdfc < _fcd .Max .X ;_fgdfc ++{for _egf :=0;
_egf < _fcd .Max .Y ;_egf ++{_dda :=_aceb .GrayAt (_fgdfc ,_egf );_cacc .SetCMYK (_fgdfc ,_egf ,_agaf (_dda ));};};};func (_fdgb *Gray8 )Set (x ,y int ,c _b .Color ){_eeeb :=y *_fdgb .BytesPerLine +x ;if _eeeb > len (_fdgb .Data )-1{return ;};_gacc :=_b .GrayModel .Convert (c );
_fdgb .Data [_eeeb ]=_gacc .(_b .Gray ).Y ;};func MonochromeModel (threshold uint8 )_b .Model {return monochromeModel (threshold )};var _ Image =&Gray2 {};func (_gfgb *Gray16 )SetGray (x ,y int ,g _b .Gray ){_adde :=(y *_gfgb .BytesPerLine /2+x )*2;if _adde +1>=len (_gfgb .Data ){return ;
};_gfgb .Data [_adde ]=g .Y ;_gfgb .Data [_adde +1]=g .Y ;};func (_edc *NRGBA16 )setNRGBA (_begb ,_ggcd ,_bdac int ,_bgdb _b .NRGBA ){if _begb *3%2==0{_edc .Data [_bdac ]=(_bgdb .R >>4)<<4|(_bgdb .G >>4);_edc .Data [_bdac +1]=(_bgdb .B >>4)<<4|(_edc .Data [_bdac +1]&0xf);
}else {_edc .Data [_bdac ]=(_edc .Data [_bdac ]&0xf0)|(_bgdb .R >>4);_edc .Data [_bdac +1]=(_bgdb .G >>4)<<4|(_bgdb .B >>4);};if _edc .Alpha !=nil {_abbdg :=_ggcd *BytesPerLine (_edc .Width ,4,1);if _abbdg < len (_edc .Alpha ){if _begb %2==0{_edc .Alpha [_abbdg ]=(_bgdb .A >>uint (4))<<uint (4)|(_edc .Alpha [_bdac ]&0xf);
}else {_edc .Alpha [_abbdg ]=(_edc .Alpha [_abbdg ]&0xf0)|(_bgdb .A >>uint (4));};};};};func _fddbb (_cgda *_ab .NYCbCrA ,_dgcc NRGBA ,_cebf _ab .Rectangle ){for _bfga :=0;_bfga < _cebf .Max .X ;_bfga ++{for _bebe :=0;_bebe < _cebf .Max .Y ;_bebe ++{_gdfe :=_cgda .NYCbCrAAt (_bfga ,_bebe );
_dgcc .SetNRGBA (_bfga ,_bebe ,_ege (_gdfe ));};};};func _bfa (_cbce _b .NRGBA )_b .Gray {_aced ,_bgc ,_cebda ,_ :=_cbce .RGBA ();_efb :=(19595*_aced +38470*_bgc +7471*_cebda +1<<15)>>24;return _b .Gray {Y :uint8 (_efb )};};func _agda (_dada _ab .Image )(Image ,error ){if _eea ,_fafg :=_dada .(*Gray8 );
_fafg {return _eea .Copy (),nil ;};_dde :=_dada .Bounds ();_eaf ,_edgd :=NewImage (_dde .Max .X ,_dde .Max .Y ,8,1,nil ,nil ,nil );if _edgd !=nil {return nil ,_edgd ;};_gfc (_dada ,_eaf ,_dde );return _eaf ,nil ;};func ImgToBinary (i _ab .Image ,threshold uint8 )*_ab .Gray {switch _cfcee :=i .(type ){case *_ab .Gray :if _feca (_cfcee ){return _cfcee ;
};return _eggbd (_cfcee ,threshold );case *_ab .Gray16 :return _gdg (_cfcee ,threshold );default:return _gafg (_cfcee ,threshold );};};var _ Image =&Gray16 {};func ColorAtNRGBA32 (x ,y ,width int ,data ,alpha []byte ,decode []float64 )(_b .NRGBA ,error ){_fgdag :=y *width +x ;
_dcgf :=3*_fgdag ;if _dcgf +2>=len (data ){return _b .NRGBA {},_df .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_bage :=uint8 (0xff);if alpha !=nil &&len (alpha )> _fgdag {_bage =alpha [_fgdag ];};_cbbab ,_gbfe ,_eggb :=data [_dcgf ],data [_dcgf +1],data [_dcgf +2];if len (decode )==6{_cbbab =uint8 (uint32 (LinearInterpolate (float64 (_cbbab ),0,255,decode [0],decode [1]))&0xff);
_gbfe =uint8 (uint32 (LinearInterpolate (float64 (_gbfe ),0,255,decode [2],decode [3]))&0xff);_eggb =uint8 (uint32 (LinearInterpolate (float64 (_eggb ),0,255,decode [4],decode [5]))&0xff);};return _b .NRGBA {R :_cbbab ,G :_gbfe ,B :_eggb ,A :_bage },nil ;
};func _ffag (_adee Gray ,_aaae NRGBA ,_adacc _ab .Rectangle ){for _bafec :=0;_bafec < _adacc .Max .X ;_bafec ++{for _ebage :=0;_ebage < _adacc .Max .Y ;_ebage ++{_fdgg :=_adee .GrayAt (_bafec ,_ebage );_aaae .SetNRGBA (_bafec ,_ebage ,_bba (_fdgg ));};
};};func (_fcff *Monochrome )Copy ()Image {return &Monochrome {ImageBase :_fcff .ImageBase .copy (),ModelThreshold :_fcff .ModelThreshold };};var _ _ab .Image =&NRGBA64 {};func _cgbb (_dgaa _ab .Image )(Image ,error ){if _cebb ,_caed :=_dgaa .(*NRGBA16 );
_caed {return _cebb .Copy (),nil ;};_bfee :=_dgaa .Bounds ();_cbg ,_ggfc :=NewImage (_bfee .Max .X ,_bfee .Max .Y ,4,3,nil ,nil ,nil );if _ggfc !=nil {return nil ,_ggfc ;};_bcde (_dgaa ,_cbg ,_bfee );return _cbg ,nil ;};func (_cedd *RGBA32 )At (x ,y int )_b .Color {_dabf ,_ :=_cedd .ColorAt (x ,y );
return _dabf };func _bfb (_adadg *Monochrome ,_fcgba ,_efbba ,_deae ,_ddcd int ,_bada RasterOperator ,_cffc *Monochrome ,_dggg ,_ebcd int )error {var (_abdf bool ;_cdab bool ;_cccg byte ;_efaac int ;_dbec int ;_ebcfd int ;_gefg int ;_dcea bool ;_aaggb int ;
_cdce int ;_bagf int ;_dgdf bool ;_geca byte ;_cebg int ;_cgcb int ;_ecag int ;_abfe byte ;_ggaeg int ;_fecg int ;_ebfb uint ;_dcba uint ;_cfada byte ;_ebfg shift ;_ggf bool ;_fdbf bool ;_ceaa ,_cfebg int ;);if _dggg &7!=0{_fecg =8-(_dggg &7);};if _fcgba &7!=0{_dbec =8-(_fcgba &7);
};if _fecg ==0&&_dbec ==0{_cfada =_fgef [0];}else {if _dbec > _fecg {_ebfb =uint (_dbec -_fecg );}else {_ebfb =uint (8-(_fecg -_dbec ));};_dcba =8-_ebfb ;_cfada =_fgef [_ebfb ];};if (_fcgba &7)!=0{_abdf =true ;_efaac =8-(_fcgba &7);_cccg =_fgef [_efaac ];
_ebcfd =_adadg .BytesPerLine *_efbba +(_fcgba >>3);_gefg =_cffc .BytesPerLine *_ebcd +(_dggg >>3);_ggaeg =8-(_dggg &7);if _efaac > _ggaeg {_ebfg =_dae ;if _deae >=_fecg {_ggf =true ;};}else {_ebfg =_bcdc ;};};if _deae < _efaac {_cdab =true ;_cccg &=_aac [8-_efaac +_deae ];
};if !_cdab {_aaggb =(_deae -_efaac )>>3;if _aaggb !=0{_dcea =true ;_cdce =_adadg .BytesPerLine *_efbba +((_fcgba +_dbec )>>3);_bagf =_cffc .BytesPerLine *_ebcd +((_dggg +_dbec )>>3);};};_cebg =(_fcgba +_deae )&7;if !(_cdab ||_cebg ==0){_dgdf =true ;_geca =_aac [_cebg ];
_cgcb =_adadg .BytesPerLine *_efbba +((_fcgba +_dbec )>>3)+_aaggb ;_ecag =_cffc .BytesPerLine *_ebcd +((_dggg +_dbec )>>3)+_aaggb ;if _cebg > int (_dcba ){_fdbf =true ;};};switch _bada {case PixSrc :if _abdf {for _ceaa =0;_ceaa < _ddcd ;_ceaa ++{if _ebfg ==_dae {_abfe =_cffc .Data [_gefg ]<<_ebfb ;
if _ggf {_abfe =_dbdg (_abfe ,_cffc .Data [_gefg +1]>>_dcba ,_cfada );};}else {_abfe =_cffc .Data [_gefg ]>>_dcba ;};_adadg .Data [_ebcfd ]=_dbdg (_adadg .Data [_ebcfd ],_abfe ,_cccg );_ebcfd +=_adadg .BytesPerLine ;_gefg +=_cffc .BytesPerLine ;};};if _dcea {for _ceaa =0;
_ceaa < _ddcd ;_ceaa ++{for _cfebg =0;_cfebg < _aaggb ;_cfebg ++{_abfe =_dbdg (_cffc .Data [_bagf +_cfebg ]<<_ebfb ,_cffc .Data [_bagf +_cfebg +1]>>_dcba ,_cfada );_adadg .Data [_cdce +_cfebg ]=_abfe ;};_cdce +=_adadg .BytesPerLine ;_bagf +=_cffc .BytesPerLine ;
};};if _dgdf {for _ceaa =0;_ceaa < _ddcd ;_ceaa ++{_abfe =_cffc .Data [_ecag ]<<_ebfb ;if _fdbf {_abfe =_dbdg (_abfe ,_cffc .Data [_ecag +1]>>_dcba ,_cfada );};_adadg .Data [_cgcb ]=_dbdg (_adadg .Data [_cgcb ],_abfe ,_geca );_cgcb +=_adadg .BytesPerLine ;
_ecag +=_cffc .BytesPerLine ;};};case PixNotSrc :if _abdf {for _ceaa =0;_ceaa < _ddcd ;_ceaa ++{if _ebfg ==_dae {_abfe =_cffc .Data [_gefg ]<<_ebfb ;if _ggf {_abfe =_dbdg (_abfe ,_cffc .Data [_gefg +1]>>_dcba ,_cfada );};}else {_abfe =_cffc .Data [_gefg ]>>_dcba ;
};_adadg .Data [_ebcfd ]=_dbdg (_adadg .Data [_ebcfd ],^_abfe ,_cccg );_ebcfd +=_adadg .BytesPerLine ;_gefg +=_cffc .BytesPerLine ;};};if _dcea {for _ceaa =0;_ceaa < _ddcd ;_ceaa ++{for _cfebg =0;_cfebg < _aaggb ;_cfebg ++{_abfe =_dbdg (_cffc .Data [_bagf +_cfebg ]<<_ebfb ,_cffc .Data [_bagf +_cfebg +1]>>_dcba ,_cfada );
_adadg .Data [_cdce +_cfebg ]=^_abfe ;};_cdce +=_adadg .BytesPerLine ;_bagf +=_cffc .BytesPerLine ;};};if _dgdf {for _ceaa =0;_ceaa < _ddcd ;_ceaa ++{_abfe =_cffc .Data [_ecag ]<<_ebfb ;if _fdbf {_abfe =_dbdg (_abfe ,_cffc .Data [_ecag +1]>>_dcba ,_cfada );
};_adadg .Data [_cgcb ]=_dbdg (_adadg .Data [_cgcb ],^_abfe ,_geca );_cgcb +=_adadg .BytesPerLine ;_ecag +=_cffc .BytesPerLine ;};};case PixSrcOrDst :if _abdf {for _ceaa =0;_ceaa < _ddcd ;_ceaa ++{if _ebfg ==_dae {_abfe =_cffc .Data [_gefg ]<<_ebfb ;if _ggf {_abfe =_dbdg (_abfe ,_cffc .Data [_gefg +1]>>_dcba ,_cfada );
};}else {_abfe =_cffc .Data [_gefg ]>>_dcba ;};_adadg .Data [_ebcfd ]=_dbdg (_adadg .Data [_ebcfd ],_abfe |_adadg .Data [_ebcfd ],_cccg );_ebcfd +=_adadg .BytesPerLine ;_gefg +=_cffc .BytesPerLine ;};};if _dcea {for _ceaa =0;_ceaa < _ddcd ;_ceaa ++{for _cfebg =0;
_cfebg < _aaggb ;_cfebg ++{_abfe =_dbdg (_cffc .Data [_bagf +_cfebg ]<<_ebfb ,_cffc .Data [_bagf +_cfebg +1]>>_dcba ,_cfada );_adadg .Data [_cdce +_cfebg ]|=_abfe ;};_cdce +=_adadg .BytesPerLine ;_bagf +=_cffc .BytesPerLine ;};};if _dgdf {for _ceaa =0;
_ceaa < _ddcd ;_ceaa ++{_abfe =_cffc .Data [_ecag ]<<_ebfb ;if _fdbf {_abfe =_dbdg (_abfe ,_cffc .Data [_ecag +1]>>_dcba ,_cfada );};_adadg .Data [_cgcb ]=_dbdg (_adadg .Data [_cgcb ],_abfe |_adadg .Data [_cgcb ],_geca );_cgcb +=_adadg .BytesPerLine ;_ecag +=_cffc .BytesPerLine ;
};};case PixSrcAndDst :if _abdf {for _ceaa =0;_ceaa < _ddcd ;_ceaa ++{if _ebfg ==_dae {_abfe =_cffc .Data [_gefg ]<<_ebfb ;if _ggf {_abfe =_dbdg (_abfe ,_cffc .Data [_gefg +1]>>_dcba ,_cfada );};}else {_abfe =_cffc .Data [_gefg ]>>_dcba ;};_adadg .Data [_ebcfd ]=_dbdg (_adadg .Data [_ebcfd ],_abfe &_adadg .Data [_ebcfd ],_cccg );
_ebcfd +=_adadg .BytesPerLine ;_gefg +=_cffc .BytesPerLine ;};};if _dcea {for _ceaa =0;_ceaa < _ddcd ;_ceaa ++{for _cfebg =0;_cfebg < _aaggb ;_cfebg ++{_abfe =_dbdg (_cffc .Data [_bagf +_cfebg ]<<_ebfb ,_cffc .Data [_bagf +_cfebg +1]>>_dcba ,_cfada );_adadg .Data [_cdce +_cfebg ]&=_abfe ;
};_cdce +=_adadg .BytesPerLine ;_bagf +=_cffc .BytesPerLine ;};};if _dgdf {for _ceaa =0;_ceaa < _ddcd ;_ceaa ++{_abfe =_cffc .Data [_ecag ]<<_ebfb ;if _fdbf {_abfe =_dbdg (_abfe ,_cffc .Data [_ecag +1]>>_dcba ,_cfada );};_adadg .Data [_cgcb ]=_dbdg (_adadg .Data [_cgcb ],_abfe &_adadg .Data [_cgcb ],_geca );
_cgcb +=_adadg .BytesPerLine ;_ecag +=_cffc .BytesPerLine ;};};case PixSrcXorDst :if _abdf {for _ceaa =0;_ceaa < _ddcd ;_ceaa ++{if _ebfg ==_dae {_abfe =_cffc .Data [_gefg ]<<_ebfb ;if _ggf {_abfe =_dbdg (_abfe ,_cffc .Data [_gefg +1]>>_dcba ,_cfada );
};}else {_abfe =_cffc .Data [_gefg ]>>_dcba ;};_adadg .Data [_ebcfd ]=_dbdg (_adadg .Data [_ebcfd ],_abfe ^_adadg .Data [_ebcfd ],_cccg );_ebcfd +=_adadg .BytesPerLine ;_gefg +=_cffc .BytesPerLine ;};};if _dcea {for _ceaa =0;_ceaa < _ddcd ;_ceaa ++{for _cfebg =0;
_cfebg < _aaggb ;_cfebg ++{_abfe =_dbdg (_cffc .Data [_bagf +_cfebg ]<<_ebfb ,_cffc .Data [_bagf +_cfebg +1]>>_dcba ,_cfada );_adadg .Data [_cdce +_cfebg ]^=_abfe ;};_cdce +=_adadg .BytesPerLine ;_bagf +=_cffc .BytesPerLine ;};};if _dgdf {for _ceaa =0;
_ceaa < _ddcd ;_ceaa ++{_abfe =_cffc .Data [_ecag ]<<_ebfb ;if _fdbf {_abfe =_dbdg (_abfe ,_cffc .Data [_ecag +1]>>_dcba ,_cfada );};_adadg .Data [_cgcb ]=_dbdg (_adadg .Data [_cgcb ],_abfe ^_adadg .Data [_cgcb ],_geca );_cgcb +=_adadg .BytesPerLine ;_ecag +=_cffc .BytesPerLine ;
};};case PixNotSrcOrDst :if _abdf {for _ceaa =0;_ceaa < _ddcd ;_ceaa ++{if _ebfg ==_dae {_abfe =_cffc .Data [_gefg ]<<_ebfb ;if _ggf {_abfe =_dbdg (_abfe ,_cffc .Data [_gefg +1]>>_dcba ,_cfada );};}else {_abfe =_cffc .Data [_gefg ]>>_dcba ;};_adadg .Data [_ebcfd ]=_dbdg (_adadg .Data [_ebcfd ],^_abfe |_adadg .Data [_ebcfd ],_cccg );
_ebcfd +=_adadg .BytesPerLine ;_gefg +=_cffc .BytesPerLine ;};};if _dcea {for _ceaa =0;_ceaa < _ddcd ;_ceaa ++{for _cfebg =0;_cfebg < _aaggb ;_cfebg ++{_abfe =_dbdg (_cffc .Data [_bagf +_cfebg ]<<_ebfb ,_cffc .Data [_bagf +_cfebg +1]>>_dcba ,_cfada );_adadg .Data [_cdce +_cfebg ]|=^_abfe ;
};_cdce +=_adadg .BytesPerLine ;_bagf +=_cffc .BytesPerLine ;};};if _dgdf {for _ceaa =0;_ceaa < _ddcd ;_ceaa ++{_abfe =_cffc .Data [_ecag ]<<_ebfb ;if _fdbf {_abfe =_dbdg (_abfe ,_cffc .Data [_ecag +1]>>_dcba ,_cfada );};_adadg .Data [_cgcb ]=_dbdg (_adadg .Data [_cgcb ],^_abfe |_adadg .Data [_cgcb ],_geca );
_cgcb +=_adadg .BytesPerLine ;_ecag +=_cffc .BytesPerLine ;};};case PixNotSrcAndDst :if _abdf {for _ceaa =0;_ceaa < _ddcd ;_ceaa ++{if _ebfg ==_dae {_abfe =_cffc .Data [_gefg ]<<_ebfb ;if _ggf {_abfe =_dbdg (_abfe ,_cffc .Data [_gefg +1]>>_dcba ,_cfada );
};}else {_abfe =_cffc .Data [_gefg ]>>_dcba ;};_adadg .Data [_ebcfd ]=_dbdg (_adadg .Data [_ebcfd ],^_abfe &_adadg .Data [_ebcfd ],_cccg );_ebcfd +=_adadg .BytesPerLine ;_gefg +=_cffc .BytesPerLine ;};};if _dcea {for _ceaa =0;_ceaa < _ddcd ;_ceaa ++{for _cfebg =0;
_cfebg < _aaggb ;_cfebg ++{_abfe =_dbdg (_cffc .Data [_bagf +_cfebg ]<<_ebfb ,_cffc .Data [_bagf +_cfebg +1]>>_dcba ,_cfada );_adadg .Data [_cdce +_cfebg ]&=^_abfe ;};_cdce +=_adadg .BytesPerLine ;_bagf +=_cffc .BytesPerLine ;};};if _dgdf {for _ceaa =0;
_ceaa < _ddcd ;_ceaa ++{_abfe =_cffc .Data [_ecag ]<<_ebfb ;if _fdbf {_abfe =_dbdg (_abfe ,_cffc .Data [_ecag +1]>>_dcba ,_cfada );};_adadg .Data [_cgcb ]=_dbdg (_adadg .Data [_cgcb ],^_abfe &_adadg .Data [_cgcb ],_geca );_cgcb +=_adadg .BytesPerLine ;
_ecag +=_cffc .BytesPerLine ;};};case PixSrcOrNotDst :if _abdf {for _ceaa =0;_ceaa < _ddcd ;_ceaa ++{if _ebfg ==_dae {_abfe =_cffc .Data [_gefg ]<<_ebfb ;if _ggf {_abfe =_dbdg (_abfe ,_cffc .Data [_gefg +1]>>_dcba ,_cfada );};}else {_abfe =_cffc .Data [_gefg ]>>_dcba ;
};_adadg .Data [_ebcfd ]=_dbdg (_adadg .Data [_ebcfd ],_abfe |^_adadg .Data [_ebcfd ],_cccg );_ebcfd +=_adadg .BytesPerLine ;_gefg +=_cffc .BytesPerLine ;};};if _dcea {for _ceaa =0;_ceaa < _ddcd ;_ceaa ++{for _cfebg =0;_cfebg < _aaggb ;_cfebg ++{_abfe =_dbdg (_cffc .Data [_bagf +_cfebg ]<<_ebfb ,_cffc .Data [_bagf +_cfebg +1]>>_dcba ,_cfada );
_adadg .Data [_cdce +_cfebg ]=_abfe |^_adadg .Data [_cdce +_cfebg ];};_cdce +=_adadg .BytesPerLine ;_bagf +=_cffc .BytesPerLine ;};};if _dgdf {for _ceaa =0;_ceaa < _ddcd ;_ceaa ++{_abfe =_cffc .Data [_ecag ]<<_ebfb ;if _fdbf {_abfe =_dbdg (_abfe ,_cffc .Data [_ecag +1]>>_dcba ,_cfada );
};_adadg .Data [_cgcb ]=_dbdg (_adadg .Data [_cgcb ],_abfe |^_adadg .Data [_cgcb ],_geca );_cgcb +=_adadg .BytesPerLine ;_ecag +=_cffc .BytesPerLine ;};};case PixSrcAndNotDst :if _abdf {for _ceaa =0;_ceaa < _ddcd ;_ceaa ++{if _ebfg ==_dae {_abfe =_cffc .Data [_gefg ]<<_ebfb ;
if _ggf {_abfe =_dbdg (_abfe ,_cffc .Data [_gefg +1]>>_dcba ,_cfada );};}else {_abfe =_cffc .Data [_gefg ]>>_dcba ;};_adadg .Data [_ebcfd ]=_dbdg (_adadg .Data [_ebcfd ],_abfe &^_adadg .Data [_ebcfd ],_cccg );_ebcfd +=_adadg .BytesPerLine ;_gefg +=_cffc .BytesPerLine ;
};};if _dcea {for _ceaa =0;_ceaa < _ddcd ;_ceaa ++{for _cfebg =0;_cfebg < _aaggb ;_cfebg ++{_abfe =_dbdg (_cffc .Data [_bagf +_cfebg ]<<_ebfb ,_cffc .Data [_bagf +_cfebg +1]>>_dcba ,_cfada );_adadg .Data [_cdce +_cfebg ]=_abfe &^_adadg .Data [_cdce +_cfebg ];
};_cdce +=_adadg .BytesPerLine ;_bagf +=_cffc .BytesPerLine ;};};if _dgdf {for _ceaa =0;_ceaa < _ddcd ;_ceaa ++{_abfe =_cffc .Data [_ecag ]<<_ebfb ;if _fdbf {_abfe =_dbdg (_abfe ,_cffc .Data [_ecag +1]>>_dcba ,_cfada );};_adadg .Data [_cgcb ]=_dbdg (_adadg .Data [_cgcb ],_abfe &^_adadg .Data [_cgcb ],_geca );
_cgcb +=_adadg .BytesPerLine ;_ecag +=_cffc .BytesPerLine ;};};case PixNotPixSrcOrDst :if _abdf {for _ceaa =0;_ceaa < _ddcd ;_ceaa ++{if _ebfg ==_dae {_abfe =_cffc .Data [_gefg ]<<_ebfb ;if _ggf {_abfe =_dbdg (_abfe ,_cffc .Data [_gefg +1]>>_dcba ,_cfada );
};}else {_abfe =_cffc .Data [_gefg ]>>_dcba ;};_adadg .Data [_ebcfd ]=_dbdg (_adadg .Data [_ebcfd ],^(_abfe |_adadg .Data [_ebcfd ]),_cccg );_ebcfd +=_adadg .BytesPerLine ;_gefg +=_cffc .BytesPerLine ;};};if _dcea {for _ceaa =0;_ceaa < _ddcd ;_ceaa ++{for _cfebg =0;
_cfebg < _aaggb ;_cfebg ++{_abfe =_dbdg (_cffc .Data [_bagf +_cfebg ]<<_ebfb ,_cffc .Data [_bagf +_cfebg +1]>>_dcba ,_cfada );_adadg .Data [_cdce +_cfebg ]=^(_abfe |_adadg .Data [_cdce +_cfebg ]);};_cdce +=_adadg .BytesPerLine ;_bagf +=_cffc .BytesPerLine ;
};};if _dgdf {for _ceaa =0;_ceaa < _ddcd ;_ceaa ++{_abfe =_cffc .Data [_ecag ]<<_ebfb ;if _fdbf {_abfe =_dbdg (_abfe ,_cffc .Data [_ecag +1]>>_dcba ,_cfada );};_adadg .Data [_cgcb ]=_dbdg (_adadg .Data [_cgcb ],^(_abfe |_adadg .Data [_cgcb ]),_geca );_cgcb +=_adadg .BytesPerLine ;
_ecag +=_cffc .BytesPerLine ;};};case PixNotPixSrcAndDst :if _abdf {for _ceaa =0;_ceaa < _ddcd ;_ceaa ++{if _ebfg ==_dae {_abfe =_cffc .Data [_gefg ]<<_ebfb ;if _ggf {_abfe =_dbdg (_abfe ,_cffc .Data [_gefg +1]>>_dcba ,_cfada );};}else {_abfe =_cffc .Data [_gefg ]>>_dcba ;
};_adadg .Data [_ebcfd ]=_dbdg (_adadg .Data [_ebcfd ],^(_abfe &_adadg .Data [_ebcfd ]),_cccg );_ebcfd +=_adadg .BytesPerLine ;_gefg +=_cffc .BytesPerLine ;};};if _dcea {for _ceaa =0;_ceaa < _ddcd ;_ceaa ++{for _cfebg =0;_cfebg < _aaggb ;_cfebg ++{_abfe =_dbdg (_cffc .Data [_bagf +_cfebg ]<<_ebfb ,_cffc .Data [_bagf +_cfebg +1]>>_dcba ,_cfada );
_adadg .Data [_cdce +_cfebg ]=^(_abfe &_adadg .Data [_cdce +_cfebg ]);};_cdce +=_adadg .BytesPerLine ;_bagf +=_cffc .BytesPerLine ;};};if _dgdf {for _ceaa =0;_ceaa < _ddcd ;_ceaa ++{_abfe =_cffc .Data [_ecag ]<<_ebfb ;if _fdbf {_abfe =_dbdg (_abfe ,_cffc .Data [_ecag +1]>>_dcba ,_cfada );
};_adadg .Data [_cgcb ]=_dbdg (_adadg .Data [_cgcb ],^(_abfe &_adadg .Data [_cgcb ]),_geca );_cgcb +=_adadg .BytesPerLine ;_ecag +=_cffc .BytesPerLine ;};};case PixNotPixSrcXorDst :if _abdf {for _ceaa =0;_ceaa < _ddcd ;_ceaa ++{if _ebfg ==_dae {_abfe =_cffc .Data [_gefg ]<<_ebfb ;
if _ggf {_abfe =_dbdg (_abfe ,_cffc .Data [_gefg +1]>>_dcba ,_cfada );};}else {_abfe =_cffc .Data [_gefg ]>>_dcba ;};_adadg .Data [_ebcfd ]=_dbdg (_adadg .Data [_ebcfd ],^(_abfe ^_adadg .Data [_ebcfd ]),_cccg );_ebcfd +=_adadg .BytesPerLine ;_gefg +=_cffc .BytesPerLine ;
};};if _dcea {for _ceaa =0;_ceaa < _ddcd ;_ceaa ++{for _cfebg =0;_cfebg < _aaggb ;_cfebg ++{_abfe =_dbdg (_cffc .Data [_bagf +_cfebg ]<<_ebfb ,_cffc .Data [_bagf +_cfebg +1]>>_dcba ,_cfada );_adadg .Data [_cdce +_cfebg ]=^(_abfe ^_adadg .Data [_cdce +_cfebg ]);
};_cdce +=_adadg .BytesPerLine ;_bagf +=_cffc .BytesPerLine ;};};if _dgdf {for _ceaa =0;_ceaa < _ddcd ;_ceaa ++{_abfe =_cffc .Data [_ecag ]<<_ebfb ;if _fdbf {_abfe =_dbdg (_abfe ,_cffc .Data [_ecag +1]>>_dcba ,_cfada );};_adadg .Data [_cgcb ]=_dbdg (_adadg .Data [_cgcb ],^(_abfe ^_adadg .Data [_cgcb ]),_geca );
_cgcb +=_adadg .BytesPerLine ;_ecag +=_cffc .BytesPerLine ;};};default:_e .Log .Debug ("\u004f\u0070e\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0074\u0020\u0070\u0065\u0072\u006d\u0069tt\u0065\u0064",_bada );
return _f .New ("\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065r\u0061\u0074\u0069\u006f\u006e\u0020\u006eo\u0074\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074\u0065\u0064");};return nil ;};var _ Gray =&Gray16 {};func (_bdcg *Monochrome )At (x ,y int )_b .Color {_aeafb ,_ :=_bdcg .ColorAt (x ,y );
return _aeafb };func NewImage (width ,height ,bitsPerComponent ,colorComponents int ,data ,alpha []byte ,decode []float64 )(Image ,error ){_bgae :=NewImageBase (width ,height ,bitsPerComponent ,colorComponents ,data ,alpha ,decode );var _cdgd Image ;switch colorComponents {case 1:switch bitsPerComponent {case 1:_cdgd =&Monochrome {ImageBase :_bgae ,ModelThreshold :0x0f};
case 2:_cdgd =&Gray2 {ImageBase :_bgae };case 4:_cdgd =&Gray4 {ImageBase :_bgae };case 8:_cdgd =&Gray8 {ImageBase :_bgae };case 16:_cdgd =&Gray16 {ImageBase :_bgae };};case 3:switch bitsPerComponent {case 4:_cdgd =&NRGBA16 {ImageBase :_bgae };case 8:_cdgd =&NRGBA32 {ImageBase :_bgae };
case 16:_cdgd =&NRGBA64 {ImageBase :_bgae };};case 4:_cdgd =&CMYK32 {ImageBase :_bgae };};if _cdgd ==nil {return nil ,ErrInvalidImage ;};return _cdgd ,nil ;};func _gdag (_dfeb uint )uint {var _gccc uint ;for _dfeb !=0{_dfeb >>=1;_gccc ++;};return _gccc -1;
};func (_fbge *CMYK32 )ColorAt (x ,y int )(_b .Color ,error ){return ColorAtCMYK (x ,y ,_fbge .Width ,_fbge .Data ,_fbge .Decode );};func (_cddcd *ImageBase )newAlpha (){_ageg :=BytesPerLine (_cddcd .Width ,_cddcd .BitsPerComponent ,1);_cddcd .Alpha =make ([]byte ,_cddcd .Height *_ageg );
};func (_gebe *Monochrome )ColorModel ()_b .Model {return MonochromeModel (_gebe .ModelThreshold )};func _cde (_cfb ,_ge *Monochrome ,_cgae []byte ,_aea int )(_ddc error ){var (_cac ,_cfd ,_ccgae ,_ebd ,_cfbc ,_eagf ,_eaga ,_dg int ;_ebdc ,_ebaff uint32 ;
_dfge ,_bafgd byte ;_aeca uint16 ;);_eaa :=make ([]byte ,4);_gce :=make ([]byte ,4);for _ccgae =0;_ccgae < _cfb .Height -1;_ccgae ,_ebd =_ccgae +2,_ebd +1{_cac =_ccgae *_cfb .BytesPerLine ;_cfd =_ebd *_ge .BytesPerLine ;for _cfbc ,_eagf =0,0;_cfbc < _aea ;
_cfbc ,_eagf =_cfbc +4,_eagf +1{for _eaga =0;_eaga < 4;_eaga ++{_dg =_cac +_cfbc +_eaga ;if _dg <=len (_cfb .Data )-1&&_dg < _cac +_cfb .BytesPerLine {_eaa [_eaga ]=_cfb .Data [_dg ];}else {_eaa [_eaga ]=0x00;};_dg =_cac +_cfb .BytesPerLine +_cfbc +_eaga ;
if _dg <=len (_cfb .Data )-1&&_dg < _cac +(2*_cfb .BytesPerLine ){_gce [_eaga ]=_cfb .Data [_dg ];}else {_gce [_eaga ]=0x00;};};_ebdc =_bf .BigEndian .Uint32 (_eaa );_ebaff =_bf .BigEndian .Uint32 (_gce );_ebaff &=_ebdc ;_ebaff &=_ebaff <<1;_ebaff &=0xaaaaaaaa;
_ebdc =_ebaff |(_ebaff <<7);_dfge =byte (_ebdc >>24);_bafgd =byte ((_ebdc >>8)&0xff);_dg =_cfd +_eagf ;if _dg +1==len (_ge .Data )-1||_dg +1>=_cfd +_ge .BytesPerLine {_ge .Data [_dg ]=_cgae [_dfge ];if _ddc =_ge .setByte (_dg ,_cgae [_dfge ]);_ddc !=nil {return _df .Errorf ("\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_dg );
};}else {_aeca =(uint16 (_cgae [_dfge ])<<8)|uint16 (_cgae [_bafgd ]);if _ddc =_ge .setTwoBytes (_dg ,_aeca );_ddc !=nil {return _df .Errorf ("s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_dg );
};_eagf ++;};};};return nil ;};var (MonochromeConverter =ConverterFunc (_eda );Gray2Converter =ConverterFunc (_ceeb );Gray4Converter =ConverterFunc (_acbc );GrayConverter =ConverterFunc (_agda );Gray16Converter =ConverterFunc (_facd );NRGBA16Converter =ConverterFunc (_cgbb );
NRGBAConverter =ConverterFunc (_dbbc );NRGBA64Converter =ConverterFunc (_gfcaf );RGBAConverter =ConverterFunc (_abeb );CMYKConverter =ConverterFunc (_cfad ););func (_efde *Gray8 )Base ()*ImageBase {return &_efde .ImageBase };func _cfg (_fba _b .NRGBA64 )_b .Gray {var _fddg _b .NRGBA64 ;
if _fba ==_fddg {return _b .Gray {Y :0xff};};_ebge ,_dgba ,_afg ,_ :=_fba .RGBA ();_acebc :=(19595*_ebge +38470*_dgba +7471*_afg +1<<15)>>24;return _b .Gray {Y :uint8 (_acebc )};};var _ Image =&Monochrome {};func _gcfb (_fdg _b .Color )_b .Color {_egbcd :=_b .GrayModel .Convert (_fdg ).(_b .Gray );
return _bgdc (_egbcd );};type CMYK interface{CMYKAt (_aca ,_ebf int )_b .CMYK ;SetCMYK (_cab ,_bec int ,_ged _b .CMYK );};func _gfcaf (_fdge _ab .Image )(Image ,error ){if _fcdb ,_aagc :=_fdge .(*NRGBA64 );_aagc {return _fcdb .Copy (),nil ;};_bccd ,_cabc ,_eafc :=_dgda (_fdge ,2);
_fcdf ,_dbdf :=NewImage (_bccd .Max .X ,_bccd .Max .Y ,16,3,nil ,_eafc ,nil );if _dbdf !=nil {return nil ,_dbdf ;};_fbaff (_fdge ,_fcdf ,_bccd );if len (_eafc )!=0&&!_cabc {if _dfdga :=_bfac (_eafc ,_fcdf );_dfdga !=nil {return nil ,_dfdga ;};};return _fcdf ,nil ;
};func (_gcfa *Gray16 )Validate ()error {if len (_gcfa .Data )!=_gcfa .Height *_gcfa .BytesPerLine {return ErrInvalidImage ;};return nil ;};func _edgf (_babc ,_agef uint8 )uint8 {if _babc < _agef {return 255;};return 0;};func _fegb (_ebbe CMYK ,_eabe NRGBA ,_adfa _ab .Rectangle ){for _ebcfda :=0;
_ebcfda < _adfa .Max .X ;_ebcfda ++{for _dbcae :=0;_dbcae < _adfa .Max .Y ;_dbcae ++{_agbc :=_ebbe .CMYKAt (_ebcfda ,_dbcae );_eabe .SetNRGBA (_ebcfda ,_dbcae ,_aee (_agbc ));};};};func (_efdb *Monochrome )clearBit (_gbac ,_efaf int ){_efdb .Data [_gbac ]&=^(0x80>>uint (_efaf &7))};
var _ _ab .Image =&RGBA32 {};func _bbb (_ada ,_gbgf *Monochrome )(_adc error ){_gge :=_gbgf .BytesPerLine ;_fafe :=_ada .BytesPerLine ;var _ce ,_afa ,_fee ,_cee ,_dc int ;for _fee =0;_fee < _gbgf .Height ;_fee ++{_ce =_fee *_gge ;_afa =8*_fee *_fafe ;for _cee =0;
_cee < _gge ;_cee ++{if _adc =_ada .setEightBytes (_afa +_cee *8,_fde [_gbgf .Data [_ce +_cee ]]);_adc !=nil {return _adc ;};};for _dc =1;_dc < 8;_dc ++{for _cee =0;_cee < _fafe ;_cee ++{if _adc =_ada .setByte (_afa +_dc *_fafe +_cee ,_ada .Data [_afa +_cee ]);
_adc !=nil {return _adc ;};};};};return nil ;};func (_ccc *Gray8 )Bounds ()_ab .Rectangle {return _ab .Rectangle {Max :_ab .Point {X :_ccc .Width ,Y :_ccc .Height }};};func ColorAtGray8BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_b .Gray ,error ){_dbd :=y *bytesPerLine +x ;
if _dbd >=len (data ){return _b .Gray {},_df .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_gbcc :=data [_dbd ];if len (decode )==2{_gbcc =uint8 (uint32 (LinearInterpolate (float64 (_gbcc ),0,255,decode [0],decode [1]))&0xff);};return _b .Gray {Y :_gbcc },nil ;};func (_dccf *ImageBase )setFourBytes (_ddcb int ,_edbf uint32 )error {if _ddcb +3> len (_dccf .Data )-1{return _df .Errorf ("\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_ddcb );
};_dccf .Data [_ddcb ]=byte ((_edbf &0xff000000)>>24);_dccf .Data [_ddcb +1]=byte ((_edbf &0xff0000)>>16);_dccf .Data [_ddcb +2]=byte ((_edbf &0xff00)>>8);_dccf .Data [_ddcb +3]=byte (_edbf &0xff);return nil ;};func (_acfa *Gray4 )ColorAt (x ,y int )(_b .Color ,error ){return ColorAtGray4BPC (x ,y ,_acfa .BytesPerLine ,_acfa .Data ,_acfa .Decode );
};func _bed (_fff ,_gga int ,_bbe []byte )*Monochrome {_baf :=_cdc (_fff ,_gga );_baf .Data =_bbe ;return _baf ;};func _ffc (_dcce Gray ,_gcff RGBA ,_gbdbc _ab .Rectangle ){for _beabd :=0;_beabd < _gbdbc .Max .X ;_beabd ++{for _ebga :=0;_ebga < _gbdbc .Max .Y ;
_ebga ++{_fgea :=_dcce .GrayAt (_beabd ,_ebga );_gcff .SetRGBA (_beabd ,_ebga ,_dfaa (_fgea ));};};};func (_bcge *NRGBA32 )ColorAt (x ,y int )(_b .Color ,error ){return ColorAtNRGBA32 (x ,y ,_bcge .Width ,_bcge .Data ,_bcge .Alpha ,_bcge .Decode );};func (_acgb *Monochrome )setIndexedBit (_cfbb int ){_acgb .Data [(_cfbb >>3)]|=0x80>>uint (_cfbb &7)};
