//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package imageutil ;import (_c "encoding/binary";_e "errors";_be "fmt";_gc "github.com/unidoc/unipdf/v4/common";_dg "github.com/unidoc/unipdf/v4/internal/bitwise";_b "image";_f "image/color";_d "image/draw";_ge "math";);type NRGBA interface{NRGBAAt (_ffdc ,_bfdg int )_f .NRGBA ;
SetNRGBA (_dfac ,_ccbd int ,_cafa _f .NRGBA );};type Monochrome struct{ImageBase ;ModelThreshold uint8 ;};func (_gadc *ImageBase )setFourBytes (_bace int ,_cbfb uint32 )error {if _bace +3> len (_gadc .Data )-1{return _be .Errorf ("\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_bace );
};_gadc .Data [_bace ]=byte ((_cbfb &0xff000000)>>24);_gadc .Data [_bace +1]=byte ((_cbfb &0xff0000)>>16);_gadc .Data [_bace +2]=byte ((_cbfb &0xff00)>>8);_gadc .Data [_bace +3]=byte (_cbfb &0xff);return nil ;};func (_bfbf *ImageBase )HasAlpha ()bool {if _bfbf .Alpha ==nil {return false ;
};for _ffca :=range _bfbf .Alpha {if _bfbf .Alpha [_ffca ]!=0xff{return true ;};};return false ;};func (_eefe *NRGBA64 )Copy ()Image {return &NRGBA64 {ImageBase :_eefe .copy ()}};func _gfafd (_fbabg _b .Image ,_adgag Image ,_bfed _b .Rectangle ){if _geee ,_defe :=_fbabg .(SMasker );
_defe &&_geee .HasAlpha (){_adgag .(SMasker ).MakeAlpha ();};switch _dcca :=_fbabg .(type ){case Gray :_aded (_dcca ,_adgag .(NRGBA ),_bfed );case NRGBA :_daac (_dcca ,_adgag .(NRGBA ),_bfed );case *_b .NYCbCrA :_bbdd (_dcca ,_adgag .(NRGBA ),_bfed );case CMYK :_cada (_dcca ,_adgag .(NRGBA ),_bfed );
case RGBA :_babb (_dcca ,_adgag .(NRGBA ),_bfed );case nrgba64 :_bggc (_dcca ,_adgag .(NRGBA ),_bfed );default:_bagf (_fbabg ,_adgag ,_bfed );};};func _cgfeg (_eaad ,_cfc int ,_fefc []byte )*Monochrome {_gca :=_gad (_eaad ,_cfc );_gca .Data =_fefc ;return _gca ;
};func (_fcdf *NRGBA64 )ColorModel ()_f .Model {return _f .NRGBA64Model };func (_cgcb *NRGBA32 )Set (x ,y int ,c _f .Color ){_ecbf :=y *_cgcb .Width +x ;_egfd :=3*_ecbf ;if _egfd +2>=len (_cgcb .Data ){return ;};_cgeb :=_f .NRGBAModel .Convert (c ).(_f .NRGBA );
_cgcb .setRGBA (_ecbf ,_cgeb );};func (_eafe *NRGBA32 )NRGBAAt (x ,y int )_f .NRGBA {_cfdf ,_ :=ColorAtNRGBA32 (x ,y ,_eafe .Width ,_eafe .Data ,_eafe .Alpha ,_eafe .Decode );return _cfdf ;};func (_ebgc *Monochrome )getBit (_afce ,_gecg int )uint8 {return _ebgc .Data [_afce +(_gecg >>3)]>>uint (7-(_gecg &7))&1;
};func (_gdfb *ImageBase )setTwoBytes (_dbfff int ,_gfecc uint16 )error {if _dbfff +1> len (_gdfb .Data )-1{return _e .New ("\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");};_gdfb .Data [_dbfff ]=byte ((_gfecc &0xff00)>>8);
_gdfb .Data [_dbfff +1]=byte (_gfecc &0xff);return nil ;};func (_fadg *ImageBase )MakeAlpha (){_fadg .newAlpha ()};type Histogramer interface{Histogram ()[256]int ;};func _dge (_cced _f .Gray )_f .RGBA {return _f .RGBA {R :_cced .Y ,G :_cced .Y ,B :_cced .Y ,A :0xff}};
func _bbcc (_cfaa _f .NRGBA64 )_f .Gray {var _dgdf _f .NRGBA64 ;if _cfaa ==_dgdf {return _f .Gray {Y :0xff};};_bfd ,_ffaa ,_fcgd ,_ :=_cfaa .RGBA ();_gdc :=(19595*_bfd +38470*_ffaa +7471*_fcgd +1<<15)>>24;return _f .Gray {Y :uint8 (_gdc )};};func (_dffbg *RGBA32 )setRGBA (_dadd int ,_abff _f .RGBA ){_agbe :=3*_dadd ;
_dffbg .Data [_agbe ]=_abff .R ;_dffbg .Data [_agbe +1]=_abff .G ;_dffbg .Data [_agbe +2]=_abff .B ;if _dadd < len (_dffbg .Alpha ){_dffbg .Alpha [_dadd ]=_abff .A ;};};func ColorAtNRGBA32 (x ,y ,width int ,data ,alpha []byte ,decode []float64 )(_f .NRGBA ,error ){_egdf :=y *width +x ;
_fegde :=3*_egdf ;if _fegde +2>=len (data ){return _f .NRGBA {},_be .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_ebcc :=uint8 (0xff);if alpha !=nil &&len (alpha )> _egdf {_ebcc =alpha [_egdf ];};_feecf ,_fbcb ,_cecbb :=data [_fegde ],data [_fegde +1],data [_fegde +2];if len (decode )==6{_ccegf :=LinearInterpolate (float64 (_feecf ),0,255.0,decode [0],decode [1]);
_aaaea :=LinearInterpolate (float64 (_fbcb ),0,255.0,decode [2],decode [3]);_badb :=LinearInterpolate (float64 (_cecbb ),0,255.0,decode [4],decode [5]);if _ccegf <=1.0&&_aaaea <=1.0&&_badb <=1.0{_ccegf *=255.0;_aaaea *=255.0;_badb *=255.0;};_feecf =uint8 (_ccegf )&0xff;
_fbcb =uint8 (_aaaea )&0xff;_cecbb =uint8 (_badb )&0xff;};return _f .NRGBA {R :_feecf ,G :_fbcb ,B :_cecbb ,A :_ebcc },nil ;};type NRGBA32 struct{ImageBase };func (_cdfd *ImageBase )setEightPartlyBytes (_ecfg ,_gcbce int ,_dage uint64 )(_dcb error ){var (_cfcdc byte ;
_egdb int ;);for _ggce :=1;_ggce <=_gcbce ;_ggce ++{_egdb =64-_ggce *8;_cfcdc =byte (_dage >>uint (_egdb )&0xff);if _dcb =_cdfd .setByte (_ecfg +_ggce -1,_cfcdc );_dcb !=nil {return _dcb ;};};_fffd :=_cdfd .BytesPerLine *8-_cdfd .Width ;if _fffd ==0{return nil ;
};_egdb -=8;_cfcdc =byte (_dage >>uint (_egdb )&0xff)<<uint (_fffd );if _dcb =_cdfd .setByte (_ecfg +_gcbce ,_cfcdc );_dcb !=nil {return _dcb ;};return nil ;};var (MonochromeConverter =ConverterFunc (_gccf );Gray2Converter =ConverterFunc (_bec );Gray4Converter =ConverterFunc (_bbgb );
GrayConverter =ConverterFunc (_cdgf );Gray16Converter =ConverterFunc (_cfaf );NRGBA16Converter =ConverterFunc (_cgdb );NRGBAConverter =ConverterFunc (_egag );NRGBA64Converter =ConverterFunc (_bfbe );RGBAConverter =ConverterFunc (_bfdf );CMYKConverter =ConverterFunc (_dedg );
);var _ Image =&Gray8 {};func _baa (_efcb _f .NYCbCrA )_f .RGBA {_dced ,_fed ,_beee ,_fbgf :=_fada (_efcb ).RGBA ();return _f .RGBA {R :uint8 (_dced >>8),G :uint8 (_fed >>8),B :uint8 (_beee >>8),A :uint8 (_fbgf >>8)};};func _cfgb (_cded _b .Image ,_accg Image ,_gcbbd _b .Rectangle ){if _eebb ,_afcfb :=_cded .(SMasker );
_afcfb &&_eebb .HasAlpha (){_accg .(SMasker ).MakeAlpha ();};switch _fgcc :=_cded .(type ){case Gray :_edbb (_fgcc ,_accg .(RGBA ),_gcbbd );case NRGBA :_faeag (_fgcc ,_accg .(RGBA ),_gcbbd );case *_b .NYCbCrA :_fffc (_fgcc ,_accg .(RGBA ),_gcbbd );case CMYK :_cagb (_fgcc ,_accg .(RGBA ),_gcbbd );
case RGBA :_fbgaf (_fgcc ,_accg .(RGBA ),_gcbbd );case nrgba64 :_gebb (_fgcc ,_accg .(RGBA ),_gcbbd );default:_bagf (_cded ,_accg ,_gcbbd );};};func _bgg (_faba _f .RGBA )_f .NRGBA {switch _faba .A {case 0xff:return _f .NRGBA {R :_faba .R ,G :_faba .G ,B :_faba .B ,A :0xff};
case 0x00:return _f .NRGBA {};default:_eba ,_bdga ,_bdd ,_aab :=_faba .RGBA ();_eba =(_eba *0xffff)/_aab ;_bdga =(_bdga *0xffff)/_aab ;_bdd =(_bdd *0xffff)/_aab ;return _f .NRGBA {R :uint8 (_eba >>8),G :uint8 (_bdga >>8),B :uint8 (_bdd >>8),A :uint8 (_aab >>8)};
};};func (_dfea *Gray2 )Set (x ,y int ,c _f .Color ){if x >=_dfea .Width ||y >=_dfea .Height {return ;};_bdc :=Gray2Model .Convert (c ).(_f .Gray );_bfb :=y *_dfea .BytesPerLine ;_ecgc :=_bfb +(x >>2);_aea :=_bdc .Y >>6;_dfea .Data [_ecgc ]=(_dfea .Data [_ecgc ]&(^(0xc0>>uint (2*((x )&3)))))|(_aea <<uint (6-2*(x &3)));
};func (_abd *Gray4 )Copy ()Image {return &Gray4 {ImageBase :_abd .copy ()}};func (_dbdd *Gray16 )Copy ()Image {return &Gray16 {ImageBase :_dbdd .copy ()}};func _ffcg (_aff _f .RGBA )_f .Gray {_dbd :=(19595*uint32 (_aff .R )+38470*uint32 (_aff .G )+7471*uint32 (_aff .B )+1<<7)>>16;
return _f .Gray {Y :uint8 (_dbd )};};var _ Image =&NRGBA16 {};const (PixSrc RasterOperator =0xc;PixDst RasterOperator =0xa;PixNotSrc RasterOperator =0x3;PixNotDst RasterOperator =0x5;PixClr RasterOperator =0x0;PixSet RasterOperator =0xf;PixSrcOrDst RasterOperator =0xe;
PixSrcAndDst RasterOperator =0x8;PixSrcXorDst RasterOperator =0x6;PixNotSrcOrDst RasterOperator =0xb;PixNotSrcAndDst RasterOperator =0x2;PixSrcOrNotDst RasterOperator =0xd;PixSrcAndNotDst RasterOperator =0x4;PixNotPixSrcOrDst RasterOperator =0x1;PixNotPixSrcAndDst RasterOperator =0x7;
PixNotPixSrcXorDst RasterOperator =0x9;PixPaint =PixSrcOrDst ;PixSubtract =PixNotSrcAndDst ;PixMask =PixSrcAndDst ;);func (_egf *NRGBA16 )ColorAt (x ,y int )(_f .Color ,error ){return ColorAtNRGBA16 (x ,y ,_egf .Width ,_egf .BytesPerLine ,_egf .Data ,_egf .Alpha ,_egf .Decode );
};func (_bag *CMYK32 )Base ()*ImageBase {return &_bag .ImageBase };var _ Image =&Monochrome {};func _gad (_gaec ,_fbc int )*Monochrome {return &Monochrome {ImageBase :NewImageBase (_gaec ,_fbc ,1,1,nil ,nil ,nil ),ModelThreshold :0x0f};};func (_ffec *NRGBA32 )Base ()*ImageBase {return &_ffec .ImageBase };
func (_gdecb *NRGBA64 )NRGBA64At (x ,y int )_f .NRGBA64 {_bfda ,_ :=ColorAtNRGBA64 (x ,y ,_gdecb .Width ,_gdecb .Data ,_gdecb .Alpha ,_gdecb .Decode );return _bfda ;};func ImgToGray (i _b .Image )*_b .Gray {if _baegf ,_ffff :=i .(*_b .Gray );_ffff {return _baegf ;
};_eede :=i .Bounds ();_fdfbd :=_b .NewGray (_eede );for _abbd :=0;_abbd < _eede .Max .X ;_abbd ++{for _caad :=0;_caad < _eede .Max .Y ;_caad ++{_bagfd :=i .At (_abbd ,_caad );_fdfbd .Set (_abbd ,_caad ,_bagfd );};};return _fdfbd ;};func _fgf (_bg *Monochrome ,_gfa ,_aga int )(*Monochrome ,error ){if _bg ==nil {return nil ,_e .New ("\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _gfa <=0||_aga <=0{return nil ,_e .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0073\u0063\u0061l\u0065\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020<\u003d\u0020\u0030");};if _gfa ==_aga {if _gfa ==1{return _bg .copy (),nil ;};
if _gfa ==2||_gfa ==4||_gfa ==8{_gbc ,_bgb :=_af (_bg ,_gfa );if _bgb !=nil {return nil ,_bgb ;};return _gbc ,nil ;};};_cf :=_gfa *_bg .Width ;_fgfa :=_aga *_bg .Height ;_ba :=_gad (_cf ,_fgfa );_fbab :=_ba .BytesPerLine ;var (_agd ,_de ,_db ,_edg ,_def int ;
_aa byte ;_aac error ;);for _de =0;_de < _bg .Height ;_de ++{_agd =_aga *_de *_fbab ;for _db =0;_db < _bg .Width ;_db ++{if _gae :=_bg .getBitAt (_db ,_de );_gae {_def =_gfa *_db ;for _edg =0;_edg < _gfa ;_edg ++{_ba .setIndexedBit (_agd *8+_def +_edg );
};};};for _edg =1;_edg < _aga ;_edg ++{_eae :=_agd +_edg *_fbab ;for _acb :=0;_acb < _fbab ;_acb ++{if _aa ,_aac =_ba .getByte (_agd +_acb );_aac !=nil {return nil ,_aac ;};if _aac =_ba .setByte (_eae +_acb ,_aa );_aac !=nil {return nil ,_aac ;};};};};
return _ba ,nil ;};var _ _b .Image =&Gray16 {};func (_gfgff *NRGBA16 )ColorModel ()_f .Model {return NRGBA16Model };func _cacc (_eage int ,_dccfe int )int {if _eage < _dccfe {return _eage ;};return _dccfe ;};func (_cdb *Gray4 )ColorAt (x ,y int )(_f .Color ,error ){return ColorAtGray4BPC (x ,y ,_cdb .BytesPerLine ,_cdb .Data ,_cdb .Decode );
};var _ _b .Image =&Gray4 {};func _aefbe (_cdgd RGBA ,_ddcfb Gray ,_gaa _b .Rectangle ){for _gggdf :=0;_gggdf < _gaa .Max .X ;_gggdf ++{for _eedb :=0;_eedb < _gaa .Max .Y ;_eedb ++{_caeb :=_ffcg (_cdgd .RGBAAt (_gggdf ,_eedb ));_ddcfb .SetGray (_gggdf ,_eedb ,_caeb );
};};};func (_eeef *Monochrome )Scale (scale float64 )(*Monochrome ,error ){var _ebfe bool ;_ada :=scale ;if scale < 1{_ada =1/scale ;_ebfe =true ;};_gafd :=NextPowerOf2 (uint (_ada ));if InDelta (float64 (_gafd ),_ada ,0.001){if _ebfe {return _eeef .ReduceBinary (_ada );
};return _eeef .ExpandBinary (int (_gafd ));};_fbge :=int (_ge .RoundToEven (float64 (_eeef .Width )*scale ));_gedb :=int (_ge .RoundToEven (float64 (_eeef .Height )*scale ));return _eeef .ScaleLow (_fbge ,_gedb );};func (_gfae *Gray4 )Set (x ,y int ,c _f .Color ){if x >=_gfae .Width ||y >=_gfae .Height {return ;
};_eagc :=Gray4Model .Convert (c ).(_f .Gray );_gfae .setGray (x ,y ,_eagc );};func (_gfgg *Monochrome )setBit (_gfeec ,_babff int ){_gfgg .Data [_gfeec +(_babff >>3)]|=0x80>>uint (_babff &7);};func (_fagd *RGBA32 )Base ()*ImageBase {return &_fagd .ImageBase };
var (_ffdb =[]byte {0x00,0x80,0xC0,0xE0,0xF0,0xF8,0xFC,0xFE,0xFF};_cbcg =[]byte {0x00,0x01,0x03,0x07,0x0F,0x1F,0x3F,0x7F,0xFF};);func _af (_gf *Monochrome ,_gg int )(*Monochrome ,error ){if _gf ==nil {return nil ,_e .New ("\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _gg ==1{return _gf .copy (),nil ;};if !IsPowerOf2 (uint (_gg )){return nil ,_be .Errorf ("\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006ci\u0064 \u0065x\u0070a\u006e\u0064\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020\u0025\u0064",_gg );
};_fef :=_cc (_gg );return _cg (_gf ,_gg ,_fef );};func _ccabf (_fcea ,_cdbg ,_ggdb byte )byte {return (_fcea &^(_ggdb ))|(_cdbg &_ggdb )};func (_bbg *Monochrome )IsUnpadded ()bool {return (_bbg .Width *_bbg .Height )==len (_bbg .Data )};func (_dbed *Gray4 )At (x ,y int )_f .Color {_ffce ,_ :=_dbed .ColorAt (x ,y );
return _ffce };func _ddf (_bbf _f .NRGBA )_f .Gray {_afaa ,_age ,_ecag ,_ :=_bbf .RGBA ();_afad :=(19595*_afaa +38470*_age +7471*_ecag +1<<15)>>24;return _f .Gray {Y :uint8 (_afad )};};func (_aecg *Gray2 )SetGray (x ,y int ,gray _f .Gray ){_efcg :=_fbdad (gray );
_bdgf :=y *_aecg .BytesPerLine ;_fbdc :=_bdgf +(x >>2);if _fbdc >=len (_aecg .Data ){return ;};_acg :=_efcg .Y >>6;_aecg .Data [_fbdc ]=(_aecg .Data [_fbdc ]&(^(0xc0>>uint (2*((x )&3)))))|(_acg <<uint (6-2*(x &3)));};func (_eceed *RGBA32 )Bounds ()_b .Rectangle {return _b .Rectangle {Max :_b .Point {X :_eceed .Width ,Y :_eceed .Height }};
};func (_adgf *Monochrome )Bounds ()_b .Rectangle {return _b .Rectangle {Max :_b .Point {X :_adgf .Width ,Y :_adgf .Height }};};func (_fea *NRGBA16 )Base ()*ImageBase {return &_fea .ImageBase };func (_ebga *Gray4 )Bounds ()_b .Rectangle {return _b .Rectangle {Max :_b .Point {X :_ebga .Width ,Y :_ebga .Height }};
};func (_fafb *Gray8 )Base ()*ImageBase {return &_fafb .ImageBase };func _ffcf (_eagd _f .CMYK )_f .NRGBA {_bdf ,_babf ,_dca :=_f .CMYKToRGB (_eagd .C ,_eagd .M ,_eagd .Y ,_eagd .K );return _f .NRGBA {R :_bdf ,G :_babf ,B :_dca ,A :0xff};};func (_cbc *CMYK32 )Bounds ()_b .Rectangle {return _b .Rectangle {Max :_b .Point {X :_cbc .Width ,Y :_cbc .Height }};
};func (_dfcd *Gray2 )Bounds ()_b .Rectangle {return _b .Rectangle {Max :_b .Point {X :_dfcd .Width ,Y :_dfcd .Height }};};func ImgToBinary (i _b .Image ,threshold uint8 )*_b .Gray {switch _fdgb :=i .(type ){case *_b .Gray :if _bebe (_fdgb ){return _fdgb ;
};return _facfa (_fdgb ,threshold );case *_b .Gray16 :return _agdf (_fdgb ,threshold );default:return _fafa (_fdgb ,threshold );};};func MonochromeThresholdConverter (threshold uint8 )ColorConverter {return &monochromeThresholdConverter {Threshold :threshold };
};func (_dafg *Gray16 )Base ()*ImageBase {return &_dafg .ImageBase };var _ NRGBA =&NRGBA32 {};func _gdb (_babe _f .NRGBA64 )_f .NRGBA {return _f .NRGBA {R :uint8 (_babe .R >>8),G :uint8 (_babe .G >>8),B :uint8 (_babe .B >>8),A :uint8 (_babe .A >>8)};};
func init (){_fefa ()};func ColorAtRGBA32 (x ,y ,width int ,data ,alpha []byte ,decode []float64 )(_f .RGBA ,error ){_gbgad :=y *width +x ;_fgfde :=3*_gbgad ;if _fgfde +2>=len (data ){return _f .RGBA {},_be .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_gdbf :=uint8 (0xff);if alpha !=nil &&len (alpha )> _gbgad {_gdbf =alpha [_gbgad ];};_gfc ,_edcc ,_ebbd :=data [_fgfde ],data [_fgfde +1],data [_fgfde +2];if len (decode )==6{_gfc =uint8 (uint32 (LinearInterpolate (float64 (_gfc ),0,255,decode [0],decode [1]))&0xff);
_edcc =uint8 (uint32 (LinearInterpolate (float64 (_edcc ),0,255,decode [2],decode [3]))&0xff);_ebbd =uint8 (uint32 (LinearInterpolate (float64 (_ebbd ),0,255,decode [4],decode [5]))&0xff);};return _f .RGBA {R :_gfc ,G :_edcc ,B :_ebbd ,A :_gdbf },nil ;
};var _ Image =&NRGBA32 {};func ColorAt (x ,y ,width ,bitsPerColor ,colorComponents ,bytesPerLine int ,data ,alpha []byte ,decode []float64 )(_f .Color ,error ){switch colorComponents {case 1:return ColorAtGrayscale (x ,y ,bitsPerColor ,bytesPerLine ,data ,decode );
case 3:return ColorAtNRGBA (x ,y ,width ,bytesPerLine ,bitsPerColor ,data ,alpha ,decode );case 4:return ColorAtCMYK (x ,y ,width ,data ,decode );default:return nil ,_be .Errorf ("\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063o\u006c\u006f\u0072\u0020\u0063\u006f\u006dp\u006f\u006e\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0074h\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0064",colorComponents );
};};func (_bdfa *Gray16 )Histogram ()(_cafb [256]int ){for _fdbg :=0;_fdbg < _bdfa .Width ;_fdbg ++{for _aeae :=0;_aeae < _bdfa .Height ;_aeae ++{_cafb [_bdfa .GrayAt (_fdbg ,_aeae ).Y ]++;};};return _cafb ;};func _edc ()(_cfa []byte ){_cfa =make ([]byte ,256);
for _fab :=0;_fab < 256;_fab ++{_cfd :=byte (_fab );_cfa [_cfd ]=(_cfd &0x01)|((_cfd &0x04)>>1)|((_cfd &0x10)>>2)|((_cfd &0x40)>>3)|((_cfd &0x02)<<3)|((_cfd &0x08)<<2)|((_cfd &0x20)<<1)|(_cfd &0x80);};return _cfa ;};func _cfcd (_gbga _f .Color )_f .Color {_abfb :=_f .GrayModel .Convert (_gbga ).(_f .Gray );
return _fbdad (_abfb );};func (_fcf *Gray8 )ColorAt (x ,y int )(_f .Color ,error ){return ColorAtGray8BPC (x ,y ,_fcf .BytesPerLine ,_fcf .Data ,_fcf .Decode );};func _fffc (_fbbg *_b .NYCbCrA ,_cabd RGBA ,_afgdg _b .Rectangle ){for _cfcca :=0;_cfcca < _afgdg .Max .X ;
_cfcca ++{for _dgcg :=0;_dgcg < _afgdg .Max .Y ;_dgcg ++{_bbgcb :=_fbbg .NYCbCrAAt (_cfcca ,_dgcg );_cabd .SetRGBA (_cfcca ,_dgcg ,_baa (_bbgcb ));};};};type Gray2 struct{ImageBase };func _aded (_dfba Gray ,_bdb NRGBA ,_bdgfb _b .Rectangle ){for _effc :=0;
_effc < _bdgfb .Max .X ;_effc ++{for _dgcd :=0;_dgcd < _bdgfb .Max .Y ;_dgcd ++{_aeg :=_dfba .GrayAt (_effc ,_dgcd );_bdb .SetNRGBA (_effc ,_dgcd ,_dacd (_aeg ));};};};func _gccf (_cccc _b .Image )(Image ,error ){if _fde ,_bgge :=_cccc .(*Monochrome );
_bgge {return _fde ,nil ;};_agca :=_cccc .Bounds ();var _bfac Gray ;switch _cecc :=_cccc .(type ){case Gray :_bfac =_cecc ;case NRGBA :_bfac =&Gray8 {ImageBase :NewImageBase (_agca .Max .X ,_agca .Max .Y ,8,1,nil ,nil ,nil )};_acce (_bfac ,_cecc ,_agca );
case nrgba64 :_bfac =&Gray8 {ImageBase :NewImageBase (_agca .Max .X ,_agca .Max .Y ,8,1,nil ,nil ,nil )};_egdg (_bfac ,_cecc ,_agca );default:_fefefd ,_dbe :=GrayConverter .Convert (_cccc );if _dbe !=nil {return nil ,_dbe ;};_bfac =_fefefd .(Gray );};_agaf ,_cfca :=NewImage (_agca .Max .X ,_agca .Max .Y ,1,1,nil ,nil ,nil );
if _cfca !=nil {return nil ,_cfca ;};_bebd :=_agaf .(*Monochrome );_daf :=AutoThresholdTriangle (GrayHistogram (_bfac ));for _abb :=0;_abb < _agca .Max .X ;_abb ++{for _cdce :=0;_cdce < _agca .Max .Y ;_cdce ++{_deda :=_cda (_bfac .GrayAt (_abb ,_cdce ),monochromeModel (_daf ));
_bebd .SetGray (_abb ,_cdce ,_deda );};};return _agaf ,nil ;};func (_agdc *Gray4 )Histogram ()(_dbgf [256]int ){for _dcd :=0;_dcd < _agdc .Width ;_dcd ++{for _cgg :=0;_cgg < _agdc .Height ;_cgg ++{_dbgf [_agdc .GrayAt (_dcd ,_cgg ).Y ]++;};};return _dbgf ;
};type CMYK interface{CMYKAt (_eacf ,_fac int )_f .CMYK ;SetCMYK (_fbcfd ,_edf int ,_aee _f .CMYK );};func (_cacb *Gray16 )At (x ,y int )_f .Color {_agge ,_ :=_cacb .ColorAt (x ,y );return _agge };func _babb (_gebe RGBA ,_febg NRGBA ,_afbd _b .Rectangle ){for _addd :=0;
_addd < _afbd .Max .X ;_addd ++{for _eggbd :=0;_eggbd < _afbd .Max .Y ;_eggbd ++{_afbg :=_gebe .RGBAAt (_addd ,_eggbd );_febg .SetNRGBA (_addd ,_eggbd ,_bgg (_afbg ));};};};func _abfbc (_eaac ,_fbca uint8 )uint8 {if _eaac < _fbca {return 255;};return 0;
};type colorConverter struct{_ffa func (_fdae _b .Image )(Image ,error );};func _gebb (_dfceb nrgba64 ,_bfedb RGBA ,_eafbe _b .Rectangle ){for _gcge :=0;_gcge < _eafbe .Max .X ;_gcge ++{for _dgggf :=0;_dgggf < _eafbe .Max .Y ;_dgggf ++{_effg :=_dfceb .NRGBA64At (_gcge ,_dgggf );
_bfedb .SetRGBA (_gcge ,_dgggf ,_fcba (_effg ));};};};var _ _b .Image =&Monochrome {};var _ Image =&Gray16 {};var _ _b .Image =&Gray2 {};func (_dbgbf *RGBA32 )Validate ()error {if len (_dbgbf .Data )!=3*_dbgbf .Width *_dbgbf .Height {return _e .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};func (_cae *Monochrome )setGrayBit (_fgeg ,_ffaac int ){_cae .Data [_fgeg ]|=0x80>>uint (_ffaac &7)};func _cfaf (_fgg _b .Image )(Image ,error ){if _gdf ,_ebda :=_fgg .(*Gray16 );_ebda {return _gdf .Copy (),nil ;};_abea :=_fgg .Bounds ();
_gagd ,_ggeg :=NewImage (_abea .Max .X ,_abea .Max .Y ,16,1,nil ,nil ,nil );if _ggeg !=nil {return nil ,_ggeg ;};_bfg (_fgg ,_gagd ,_abea );return _gagd ,nil ;};func (_dddc *Monochrome )Set (x ,y int ,c _f .Color ){_ecd :=y *_dddc .BytesPerLine +x >>3;
if _ecd > len (_dddc .Data )-1{return ;};_fegd :=_dddc .ColorModel ().Convert (c ).(_f .Gray );_dddc .setGray (x ,_fegd ,_ecd );};func (_agf *Monochrome )getBitAt (_deaf ,_eab int )bool {_cbgg :=_eab *_agf .BytesPerLine +(_deaf >>3);_affa :=_deaf &0x07;
_ecba :=uint (7-_affa );if _cbgg > len (_agf .Data )-1{return false ;};if (_agf .Data [_cbgg ]>>_ecba )&0x01>=1{return true ;};return false ;};func (_ccgf *NRGBA16 )At (x ,y int )_f .Color {_cfgc ,_ :=_ccgf .ColorAt (x ,y );return _cfgc };func _daac (_fcdfc ,_egae NRGBA ,_dde _b .Rectangle ){for _acbce :=0;
_acbce < _dde .Max .X ;_acbce ++{for _gada :=0;_gada < _dde .Max .Y ;_gada ++{_egae .SetNRGBA (_acbce ,_gada ,_fcdfc .NRGBAAt (_acbce ,_gada ));};};};func ColorAtGray2BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_f .Gray ,error ){_badd :=y *bytesPerLine +x >>2;
if _badd >=len (data ){return _f .Gray {},_be .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_cdag :=data [_badd ]>>uint (6-(x &3)*2)&3;if len (decode )==2{_cdag =uint8 (uint32 (LinearInterpolate (float64 (_cdag ),0,3.0,decode [0],decode [1]))&3);};return _f .Gray {Y :_cdag *85},nil ;};func (_abbe *NRGBA16 )SetNRGBA (x ,y int ,c _f .NRGBA ){_fbgfb :=y *_abbe .BytesPerLine +x *3/2;
if _fbgfb +1>=len (_abbe .Data ){return ;};c =_dffba (c );_abbe .setNRGBA (x ,y ,_fbgfb ,c );};func _bagf (_bcg _b .Image ,_cbb Image ,_fbe _b .Rectangle ){for _bcba :=0;_bcba < _fbe .Max .X ;_bcba ++{for _efc :=0;_efc < _fbe .Max .Y ;_efc ++{_ccbf :=_bcg .At (_bcba ,_efc );
_cbb .Set (_bcba ,_efc ,_ccbf );};};};func _bbae (_dffb Gray ,_gace CMYK ,_dggg _b .Rectangle ){for _fdf :=0;_fdf < _dggg .Max .X ;_fdf ++{for _dec :=0;_dec < _dggg .Max .Y ;_dec ++{_edce :=_dffb .GrayAt (_fdf ,_dec );_gace .SetCMYK (_fdf ,_dec ,_gab (_edce ));
};};};func (_gadf *NRGBA32 )SetNRGBA (x ,y int ,c _f .NRGBA ){_geac :=y *_gadf .Width +x ;_bfcc :=3*_geac ;if _bfcc +2>=len (_gadf .Data ){return ;};_gadf .setRGBA (_geac ,c );};func InDelta (expected ,current ,delta float64 )bool {_gdff :=expected -current ;
if _gdff <=-delta ||_gdff >=delta {return false ;};return true ;};var (Gray2Model =_f .ModelFunc (_cfcd );Gray4Model =_f .ModelFunc (_cbgf );NRGBA16Model =_f .ModelFunc (_cacg ););func ColorAtNRGBA64 (x ,y ,width int ,data ,alpha []byte ,decode []float64 )(_f .NRGBA64 ,error ){_acff :=(y *width +x )*2;
_cfgcg :=_acff *3;if _cfgcg +5>=len (data ){return _f .NRGBA64 {},_be .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};const _gceb =0xffff;_bbff :=uint16 (_gceb );if alpha !=nil &&len (alpha )> _acff +1{_bbff =uint16 (alpha [_acff ])<<8|uint16 (alpha [_acff +1]);};_aefc :=uint16 (data [_cfgcg ])<<8|uint16 (data [_cfgcg +1]);_dffg :=uint16 (data [_cfgcg +2])<<8|uint16 (data [_cfgcg +3]);
_ebdg :=uint16 (data [_cfgcg +4])<<8|uint16 (data [_cfgcg +5]);if len (decode )==6{_aefc =uint16 (uint64 (LinearInterpolate (float64 (_aefc ),0,65535,decode [0],decode [1]))&_gceb );_dffg =uint16 (uint64 (LinearInterpolate (float64 (_dffg ),0,65535,decode [2],decode [3]))&_gceb );
_ebdg =uint16 (uint64 (LinearInterpolate (float64 (_ebdg ),0,65535,decode [4],decode [5]))&_gceb );};return _f .NRGBA64 {R :_aefc ,G :_dffg ,B :_ebdg ,A :_bbff },nil ;};func (_fdb *Monochrome )clearBit (_fbce ,_gdba int ){_fdb .Data [_fbce ]&=^(0x80>>uint (_gdba &7))};
func (_afcd *Gray2 )GrayAt (x ,y int )_f .Gray {_cac ,_ :=ColorAtGray2BPC (x ,y ,_afcd .BytesPerLine ,_afcd .Data ,_afcd .Decode );return _cac ;};var _ RGBA =&RGBA32 {};func _cacg (_aaeg _f .Color )_f .Color {_aecf :=_f .NRGBAModel .Convert (_aaeg ).(_f .NRGBA );
return _dffba (_aecf );};func (_cde *Gray8 )Copy ()Image {return &Gray8 {ImageBase :_cde .copy ()}};func GrayHistogram (g Gray )(_bcbc [256]int ){switch _ffdd :=g .(type ){case Histogramer :return _ffdd .Histogram ();case _b .Image :_ddde :=_ffdd .Bounds ();
for _dffgf :=0;_dffgf < _ddde .Max .X ;_dffgf ++{for _cgae :=0;_cgae < _ddde .Max .Y ;_cgae ++{_bcbc [g .GrayAt (_dffgf ,_cgae ).Y ]++;};};return _bcbc ;default:return [256]int {};};};func _fddea (_ebb uint )uint {var _aggg uint ;for _ebb !=0{_ebb >>=1;
_aggg ++;};return _aggg -1;};func (_dcga *Monochrome )InverseData ()error {return _dcga .RasterOperation (0,0,_dcga .Width ,_dcga .Height ,PixNotDst ,nil ,0,0);};func _bfg (_caga _b .Image ,_edbd Image ,_dgc _b .Rectangle ){switch _gffb :=_caga .(type ){case Gray :_gegf (_gffb ,_edbd .(Gray ),_dgc );
case NRGBA :_debe (_gffb ,_edbd .(Gray ),_dgc );case CMYK :_dafb (_gffb ,_edbd .(Gray ),_dgc );case RGBA :_aefbe (_gffb ,_edbd .(Gray ),_dgc );default:_bagf (_caga ,_edbd ,_dgc );};};var _ _b .Image =&Gray8 {};func _dgf ()(_fegg [256]uint32 ){for _fcg :=0;
_fcg < 256;_fcg ++{if _fcg &0x01!=0{_fegg [_fcg ]|=0xf;};if _fcg &0x02!=0{_fegg [_fcg ]|=0xf0;};if _fcg &0x04!=0{_fegg [_fcg ]|=0xf00;};if _fcg &0x08!=0{_fegg [_fcg ]|=0xf000;};if _fcg &0x10!=0{_fegg [_fcg ]|=0xf0000;};if _fcg &0x20!=0{_fegg [_fcg ]|=0xf00000;
};if _fcg &0x40!=0{_fegg [_fcg ]|=0xf000000;};if _fcg &0x80!=0{_fegg [_fcg ]|=0xf0000000;};};return _fegg ;};func (_agce *Gray4 )SetGray (x ,y int ,g _f .Gray ){if x >=_agce .Width ||y >=_agce .Height {return ;};g =_acge (g );_agce .setGray (x ,y ,g );
};type NRGBA64 struct{ImageBase };func (_daba *Monochrome )Base ()*ImageBase {return &_daba .ImageBase };func (_defa *ImageBase )GetAlpha ()[]byte {return _defa .Alpha };func (_aece *Monochrome )GrayAt (x ,y int )_f .Gray {_gfdf ,_ :=ColorAtGray1BPC (x ,y ,_aece .BytesPerLine ,_aece .Data ,_aece .Decode );
return _gfdf ;};type monochromeModel uint8 ;type nrgba64 interface{NRGBA64At (_abac ,_gcdff int )_f .NRGBA64 ;SetNRGBA64 (_bbge ,_abbc int ,_febf _f .NRGBA64 );};func _cgdb (_beaa _b .Image )(Image ,error ){if _gdbd ,_gega :=_beaa .(*NRGBA16 );_gega {return _gdbd .Copy (),nil ;
};_dgdde :=_beaa .Bounds ();_ggbe ,_acca :=NewImage (_dgdde .Max .X ,_dgdde .Max .Y ,4,3,nil ,nil ,nil );if _acca !=nil {return nil ,_acca ;};_gfafd (_beaa ,_ggbe ,_dgdde );return _ggbe ,nil ;};var _ _b .Image =&NRGBA64 {};func (_eacfg *Monochrome )Histogram ()(_dafc [256]int ){for _ ,_fgc :=range _eacfg .Data {_dafc [0xff]+=int (_ccf [_eacfg .Data [_fgc ]]);
};return _dafc ;};func (_fccb *Gray4 )Base ()*ImageBase {return &_fccb .ImageBase };func (_abbg *ImageBase )setEightBytes (_dbbe int ,_fddg uint64 )error {_ffcfa :=_abbg .BytesPerLine -(_dbbe %_abbg .BytesPerLine );if _abbg .BytesPerLine !=_abbg .Width >>3{_ffcfa --;
};if _ffcfa >=8{return _abbg .setEightFullBytes (_dbbe ,_fddg );};return _abbg .setEightPartlyBytes (_dbbe ,_ffcfa ,_fddg );};func ColorAtGray4BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_f .Gray ,error ){_gff :=y *bytesPerLine +x >>1;
if _gff >=len (data ){return _f .Gray {},_be .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_gfbd :=data [_gff ]>>uint (4-(x &1)*4)&0xf;if len (decode )==2{_gfbd =uint8 (uint32 (LinearInterpolate (float64 (_gfbd ),0,15,decode [0],decode [1]))&0xf);};return _f .Gray {Y :_gfbd *17&0xff},nil ;};var _ Gray =&Monochrome {};func _eec (_ffcc *Monochrome ,_aada ,_beffc ,_deef ,_bcee int ,_cafc RasterOperator ){if _aada < 0{_deef +=_aada ;
_aada =0;};_fbdg :=_aada +_deef -_ffcc .Width ;if _fbdg > 0{_deef -=_fbdg ;};if _beffc < 0{_bcee +=_beffc ;_beffc =0;};_cgce :=_beffc +_bcee -_ffcc .Height ;if _cgce > 0{_bcee -=_cgce ;};if _deef <=0||_bcee <=0{return ;};if (_aada &7)==0{_ebgf (_ffcc ,_aada ,_beffc ,_deef ,_bcee ,_cafc );
}else {_gfbdd (_ffcc ,_aada ,_beffc ,_deef ,_bcee ,_cafc );};};func _ageg (_egd _f .NRGBA )_f .Gray {var _feea _f .NRGBA ;if _egd ==_feea {return _f .Gray {Y :0xff};};_efa ,_fbee ,_cbf ,_ :=_egd .RGBA ();_abca :=(19595*_efa +38470*_fbee +7471*_cbf +1<<15)>>24;
return _f .Gray {Y :uint8 (_abca )};};func _daef (_eafbf uint8 )bool {if _eafbf ==0||_eafbf ==255{return true ;};return false ;};type Gray4 struct{ImageBase };func (_fca *NRGBA64 )Set (x ,y int ,c _f .Color ){_cbeg :=(y *_fca .Width +x )*2;_fefgc :=_cbeg *3;
if _fefgc +5>=len (_fca .Data ){return ;};_ffag :=_f .NRGBA64Model .Convert (c ).(_f .NRGBA64 );_fca .setNRGBA64 (_fefgc ,_ffag ,_cbeg );};func (_bff *Gray2 )Histogram ()(_bbgc [256]int ){for _efb :=0;_efb < _bff .Width ;_efb ++{for _bfc :=0;_bfc < _bff .Height ;
_bfc ++{_bbgc [_bff .GrayAt (_efb ,_bfc ).Y ]++;};};return _bbgc ;};func _dafb (_gaee CMYK ,_adga Gray ,_gagda _b .Rectangle ){for _cbfe :=0;_cbfe < _gagda .Max .X ;_cbfe ++{for _bfae :=0;_bfae < _gagda .Max .Y ;_bfae ++{_eeb :=_ggb (_gaee .CMYKAt (_cbfe ,_bfae ));
_adga .SetGray (_cbfe ,_bfae ,_eeb );};};};func _gfbdd (_bfgg *Monochrome ,_cbca ,_ccdd int ,_dedc ,_becc int ,_acba RasterOperator ){var (_cgac bool ;_bbd bool ;_adgdg int ;_fgff int ;_fdcg int ;_bfge int ;_ecab bool ;_afdb byte ;);_eacd :=8-(_cbca &7);
_eadb :=_cbcg [_eacd ];_eacc :=_bfgg .BytesPerLine *_ccdd +(_cbca >>3);if _dedc < _eacd {_cgac =true ;_eadb &=_ffdb [8-_eacd +_dedc ];};if !_cgac {_adgdg =(_dedc -_eacd )>>3;if _adgdg !=0{_bbd =true ;_fgff =_eacc +1;};};_fdcg =(_cbca +_dedc )&7;if !(_cgac ||_fdcg ==0){_ecab =true ;
_afdb =_ffdb [_fdcg ];_bfge =_eacc +1+_adgdg ;};var _efba ,_afff int ;switch _acba {case PixClr :for _efba =0;_efba < _becc ;_efba ++{_bfgg .Data [_eacc ]=_ccabf (_bfgg .Data [_eacc ],0x0,_eadb );_eacc +=_bfgg .BytesPerLine ;};if _bbd {for _efba =0;_efba < _becc ;
_efba ++{for _afff =0;_afff < _adgdg ;_afff ++{_bfgg .Data [_fgff +_afff ]=0x0;};_fgff +=_bfgg .BytesPerLine ;};};if _ecab {for _efba =0;_efba < _becc ;_efba ++{_bfgg .Data [_bfge ]=_ccabf (_bfgg .Data [_bfge ],0x0,_afdb );_bfge +=_bfgg .BytesPerLine ;
};};case PixSet :for _efba =0;_efba < _becc ;_efba ++{_bfgg .Data [_eacc ]=_ccabf (_bfgg .Data [_eacc ],0xff,_eadb );_eacc +=_bfgg .BytesPerLine ;};if _bbd {for _efba =0;_efba < _becc ;_efba ++{for _afff =0;_afff < _adgdg ;_afff ++{_bfgg .Data [_fgff +_afff ]=0xff;
};_fgff +=_bfgg .BytesPerLine ;};};if _ecab {for _efba =0;_efba < _becc ;_efba ++{_bfgg .Data [_bfge ]=_ccabf (_bfgg .Data [_bfge ],0xff,_afdb );_bfge +=_bfgg .BytesPerLine ;};};case PixNotDst :for _efba =0;_efba < _becc ;_efba ++{_bfgg .Data [_eacc ]=_ccabf (_bfgg .Data [_eacc ],^_bfgg .Data [_eacc ],_eadb );
_eacc +=_bfgg .BytesPerLine ;};if _bbd {for _efba =0;_efba < _becc ;_efba ++{for _afff =0;_afff < _adgdg ;_afff ++{_bfgg .Data [_fgff +_afff ]=^(_bfgg .Data [_fgff +_afff ]);};_fgff +=_bfgg .BytesPerLine ;};};if _ecab {for _efba =0;_efba < _becc ;_efba ++{_bfgg .Data [_bfge ]=_ccabf (_bfgg .Data [_bfge ],^_bfgg .Data [_bfge ],_afdb );
_bfge +=_bfgg .BytesPerLine ;};};};};func (_cfgg *Gray16 )Set (x ,y int ,c _f .Color ){_gaca :=(y *_cfgg .BytesPerLine /2+x )*2;if _gaca +1>=len (_cfgg .Data ){return ;};_dbff :=_f .Gray16Model .Convert (c ).(_f .Gray16 );_cfgg .Data [_gaca ],_cfgg .Data [_gaca +1]=uint8 (_dbff .Y >>8),uint8 (_dbff .Y &0xff);
};type monochromeThresholdConverter struct{Threshold uint8 ;};func (_abcg *Gray8 )Histogram ()(_fbac [256]int ){for _ffd :=0;_ffd < len (_abcg .Data );_ffd ++{_fbac [_abcg .Data [_ffd ]]++;};return _fbac ;};func (_bbbb *NRGBA16 )setNRGBA (_dadg ,_bge ,_bcad int ,_ddgg _f .NRGBA ){if _dadg *3%2==0{_bbbb .Data [_bcad ]=(_ddgg .R >>4)<<4|(_ddgg .G >>4);
_bbbb .Data [_bcad +1]=(_ddgg .B >>4)<<4|(_bbbb .Data [_bcad +1]&0xf);}else {_bbbb .Data [_bcad ]=(_bbbb .Data [_bcad ]&0xf0)|(_ddgg .R >>4);_bbbb .Data [_bcad +1]=(_ddgg .G >>4)<<4|(_ddgg .B >>4);};if _bbbb .Alpha !=nil {_fefee :=_bge *BytesPerLine (_bbbb .Width ,4,1);
if _fefee < len (_bbbb .Alpha ){if _dadg %2==0{_bbbb .Alpha [_fefee ]=(_ddgg .A >>uint (4))<<uint (4)|(_bbbb .Alpha [_bcad ]&0xf);}else {_bbbb .Alpha [_fefee ]=(_bbbb .Alpha [_fefee ]&0xf0)|(_ddgg .A >>uint (4));};};};};var _ Gray =&Gray16 {};const (_bgda shift =iota ;
_acaga ;);func _dffba (_fced _f .NRGBA )_f .NRGBA {_fced .R =_fced .R >>4|(_fced .R >>4)<<4;_fced .G =_fced .G >>4|(_fced .G >>4)<<4;_fced .B =_fced .B >>4|(_fced .B >>4)<<4;return _fced ;};func ScaleAlphaToMonochrome (data []byte ,width ,height int )([]byte ,error ){_a :=BytesPerLine (width ,8,1);
if len (data )< _a *height {return nil ,nil ;};_fe :=&Gray8 {NewImageBase (width ,height ,8,1,data ,nil ,nil )};_ad ,_bee :=MonochromeConverter .Convert (_fe );if _bee !=nil {return nil ,_bee ;};return _ad .Base ().Data ,nil ;};func (_edfg *Gray4 )Validate ()error {if len (_edfg .Data )!=_edfg .Height *_edfg .BytesPerLine {return ErrInvalidImage ;
};return nil ;};func (_abag *Monochrome )ColorModel ()_f .Model {return MonochromeModel (_abag .ModelThreshold )};func _gbdg (_ebdfc _b .Image ,_cecce Image ,_face _b .Rectangle ){if _abcf ,_afcdd :=_ebdfc .(SMasker );_afcdd &&_abcf .HasAlpha (){_cecce .(SMasker ).MakeAlpha ();
};_bagf (_ebdfc ,_cecce ,_face );};func (_cgec *Gray2 )ColorAt (x ,y int )(_f .Color ,error ){return ColorAtGray2BPC (x ,y ,_cgec .BytesPerLine ,_cgec .Data ,_cgec .Decode );};func _cda (_dea _f .Gray ,_dgbe monochromeModel )_f .Gray {if _dea .Y > uint8 (_dgbe ){return _f .Gray {Y :_ge .MaxUint8 };
};return _f .Gray {};};func _fbgaf (_cbd ,_gbbc RGBA ,_cgced _b .Rectangle ){for _gaed :=0;_gaed < _cgced .Max .X ;_gaed ++{for _gfag :=0;_gfag < _cgced .Max .Y ;_gfag ++{_gbbc .SetRGBA (_gaed ,_gfag ,_cbd .RGBAAt (_gaed ,_gfag ));};};};func _bfdf (_dgge _b .Image )(Image ,error ){if _fcgdf ,_edcce :=_dgge .(*RGBA32 );
_edcce {return _fcgdf .Copy (),nil ;};_egadb ,_bacb ,_bagb :=_gcfb (_dgge ,1);_fdad :=&RGBA32 {ImageBase :NewImageBase (_egadb .Max .X ,_egadb .Max .Y ,8,3,nil ,_bagb ,nil )};_cfgb (_dgge ,_fdad ,_egadb );if len (_bagb )!=0&&!_bacb {if _bbgeg :=_fege (_bagb ,_fdad );
_bbgeg !=nil {return nil ,_bbgeg ;};};return _fdad ,nil ;};func _fafa (_gggf _b .Image ,_eabde uint8 )*_b .Gray {_affc :=_gggf .Bounds ();_eefc :=_b .NewGray (_affc );var (_dcggb _f .Color ;_dedb _f .Gray ;);for _cfgcgd :=0;_cfgcgd < _affc .Max .X ;_cfgcgd ++{for _bceb :=0;
_bceb < _affc .Max .Y ;_bceb ++{_dcggb =_gggf .At (_cfgcgd ,_bceb );_eefc .Set (_cfgcgd ,_bceb ,_dcggb );_dedb =_eefc .GrayAt (_cfgcgd ,_bceb );_eefc .SetGray (_cfgcgd ,_bceb ,_f .Gray {Y :_abfbc (_dedb .Y ,_eabde )});};};return _eefc ;};func (_cbg *CMYK32 )Copy ()Image {return &CMYK32 {ImageBase :_cbg .copy ()}};
type ImageBase struct{Width ,Height int ;BitsPerComponent ,ColorComponents int ;Data ,Alpha []byte ;Decode []float64 ;BytesPerLine int ;};type Gray16 struct{ImageBase };func _agdf (_ccfd *_b .Gray16 ,_dfgg uint8 )*_b .Gray {_baff :=_ccfd .Bounds ();_aggcf :=_b .NewGray (_baff );
for _ccgg :=0;_ccgg < _baff .Dx ();_ccgg ++{for _abgg :=0;_abgg < _baff .Dy ();_abgg ++{_aeee :=_ccfd .Gray16At (_ccgg ,_abgg );_aggcf .SetGray (_ccgg ,_abgg ,_f .Gray {Y :_abfbc (uint8 (_aeee .Y /256),_dfgg )});};};return _aggcf ;};func (_bgbad *NRGBA32 )Validate ()error {if len (_bgbad .Data )!=3*_bgbad .Width *_bgbad .Height {return _e .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};func _fefa (){for _fgfbb :=0;_fgfbb < 256;_fgfbb ++{_ccf [_fgfbb ]=uint8 (_fgfbb &0x1)+(uint8 (_fgfbb >>1)&0x1)+(uint8 (_fgfbb >>2)&0x1)+(uint8 (_fgfbb >>3)&0x1)+(uint8 (_fgfbb >>4)&0x1)+(uint8 (_fgfbb >>5)&0x1)+(uint8 (_fgfbb >>6)&0x1)+(uint8 (_fgfbb >>7)&0x1);
};};func (_faee *NRGBA64 )SetNRGBA64 (x ,y int ,c _f .NRGBA64 ){_gecb :=(y *_faee .Width +x )*2;_cccg :=_gecb *3;if _cccg +5>=len (_faee .Data ){return ;};_faee .setNRGBA64 (_cccg ,c ,_gecb );};var _ Gray =&Gray4 {};func _edbb (_dga Gray ,_dagga RGBA ,_dcfc _b .Rectangle ){for _cdfb :=0;
_cdfb < _dcfc .Max .X ;_cdfb ++{for _cggc :=0;_cggc < _dcfc .Max .Y ;_cggc ++{_fdfg :=_dga .GrayAt (_cdfb ,_cggc );_dagga .SetRGBA (_cdfb ,_cggc ,_dge (_fdfg ));};};};func _egb (_bad ,_acag *Monochrome ,_ded []byte ,_faeb int )(_ggd error ){var (_gef ,_dee ,_aacee ,_bgf ,_fcd ,_gcbb ,_ced ,_beg int ;
_adef ,_ecbg uint32 ;_fdc ,_fda byte ;_ddg uint16 ;);_beac :=make ([]byte ,4);_afd :=make ([]byte ,4);for _aacee =0;_aacee < _bad .Height -1;_aacee ,_bgf =_aacee +2,_bgf +1{_gef =_aacee *_bad .BytesPerLine ;_dee =_bgf *_acag .BytesPerLine ;for _fcd ,_gcbb =0,0;
_fcd < _faeb ;_fcd ,_gcbb =_fcd +4,_gcbb +1{for _ced =0;_ced < 4;_ced ++{_beg =_gef +_fcd +_ced ;if _beg <=len (_bad .Data )-1&&_beg < _gef +_bad .BytesPerLine {_beac [_ced ]=_bad .Data [_beg ];}else {_beac [_ced ]=0x00;};_beg =_gef +_bad .BytesPerLine +_fcd +_ced ;
if _beg <=len (_bad .Data )-1&&_beg < _gef +(2*_bad .BytesPerLine ){_afd [_ced ]=_bad .Data [_beg ];}else {_afd [_ced ]=0x00;};};_adef =_c .BigEndian .Uint32 (_beac );_ecbg =_c .BigEndian .Uint32 (_afd );_ecbg &=_adef ;_ecbg &=_ecbg <<1;_ecbg &=0xaaaaaaaa;
_adef =_ecbg |(_ecbg <<7);_fdc =byte (_adef >>24);_fda =byte ((_adef >>8)&0xff);_beg =_dee +_gcbb ;if _beg +1==len (_acag .Data )-1||_beg +1>=_dee +_acag .BytesPerLine {_acag .Data [_beg ]=_ded [_fdc ];if _ggd =_acag .setByte (_beg ,_ded [_fdc ]);_ggd !=nil {return _be .Errorf ("\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_beg );
};}else {_ddg =(uint16 (_ded [_fdc ])<<8)|uint16 (_ded [_fda ]);if _ggd =_acag .setTwoBytes (_beg ,_ddg );_ggd !=nil {return _be .Errorf ("s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_beg );
};_gcbb ++;};};};return nil ;};func (_dceg *ImageBase )Pix ()[]byte {return _dceg .Data };func (_baag *Gray16 )Bounds ()_b .Rectangle {return _b .Rectangle {Max :_b .Point {X :_baag .Width ,Y :_baag .Height }};};func (_geag *NRGBA32 )Bounds ()_b .Rectangle {return _b .Rectangle {Max :_b .Point {X :_geag .Width ,Y :_geag .Height }};
};func (_adad *Gray8 )GrayAt (x ,y int )_f .Gray {_abe ,_ :=ColorAtGray8BPC (x ,y ,_adad .BytesPerLine ,_adad .Data ,_adad .Decode );return _abe ;};func _gegf (_cbcf ,_dbbc Gray ,_cbaa _b .Rectangle ){for _fdbc :=0;_fdbc < _cbaa .Max .X ;_fdbc ++{for _dbdg :=0;
_dbdg < _cbaa .Max .Y ;_dbdg ++{_dbbc .SetGray (_fdbc ,_dbdg ,_cbcf .GrayAt (_fdbc ,_dbdg ));};};};func _fbd ()(_eag [256]uint16 ){for _ecg :=0;_ecg < 256;_ecg ++{if _ecg &0x01!=0{_eag [_ecg ]|=0x3;};if _ecg &0x02!=0{_eag [_ecg ]|=0xc;};if _ecg &0x04!=0{_eag [_ecg ]|=0x30;
};if _ecg &0x08!=0{_eag [_ecg ]|=0xc0;};if _ecg &0x10!=0{_eag [_ecg ]|=0x300;};if _ecg &0x20!=0{_eag [_ecg ]|=0xc00;};if _ecg &0x40!=0{_eag [_ecg ]|=0x3000;};if _ecg &0x80!=0{_eag [_ecg ]|=0xc000;};};return _eag ;};func FromGoImage (i _b .Image )(Image ,error ){switch _egga :=i .(type ){case Image :return _egga .Copy (),nil ;
case Gray :return GrayConverter .Convert (i );case *_b .Gray16 :return Gray16Converter .Convert (i );case CMYK :return CMYKConverter .Convert (i );case *_b .NRGBA64 :return NRGBA64Converter .Convert (i );default:return NRGBAConverter .Convert (i );};};
func (_fbec *ImageBase )setEightFullBytes (_eeae int ,_gffg uint64 )error {if _eeae +7> len (_fbec .Data )-1{return _e .New ("\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");};_fbec .Data [_eeae ]=byte ((_gffg &0xff00000000000000)>>56);
_fbec .Data [_eeae +1]=byte ((_gffg &0xff000000000000)>>48);_fbec .Data [_eeae +2]=byte ((_gffg &0xff0000000000)>>40);_fbec .Data [_eeae +3]=byte ((_gffg &0xff00000000)>>32);_fbec .Data [_eeae +4]=byte ((_gffg &0xff000000)>>24);_fbec .Data [_eeae +5]=byte ((_gffg &0xff0000)>>16);
_fbec .Data [_eeae +6]=byte ((_gffg &0xff00)>>8);_fbec .Data [_eeae +7]=byte (_gffg &0xff);return nil ;};func (_ddfe *Gray16 )GrayAt (x ,y int )_f .Gray {_fbb ,_ :=_ddfe .ColorAt (x ,y );return _f .Gray {Y :uint8 (_fbb .(_f .Gray16 ).Y >>8)};};var _ _b .Image =&NRGBA16 {};
var ErrInvalidImage =_e .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
func (_dbc *CMYK32 )Set (x ,y int ,c _f .Color ){_gcbc :=4*(y *_dbc .Width +x );if _gcbc +3>=len (_dbc .Data ){return ;};_ggda :=_f .CMYKModel .Convert (c ).(_f .CMYK );_dbc .Data [_gcbc ]=_ggda .C ;_dbc .Data [_gcbc +1]=_ggda .M ;_dbc .Data [_gcbc +2]=_ggda .Y ;
_dbc .Data [_gcbc +3]=_ggda .K ;};func (_geae *RGBA32 )RGBAAt (x ,y int )_f .RGBA {_cfgfg ,_ :=ColorAtRGBA32 (x ,y ,_geae .Width ,_geae .Data ,_geae .Alpha ,_geae .Decode );return _cfgfg ;};func (_bced *Gray4 )setGray (_ceda int ,_deff int ,_gafb _f .Gray ){_bgdc :=_deff *_bced .BytesPerLine ;
_cbaf :=_bgdc +(_ceda >>1);if _cbaf >=len (_bced .Data ){return ;};_cdd :=_gafb .Y >>4;_bced .Data [_cbaf ]=(_bced .Data [_cbaf ]&(^(0xf0>>uint (4*(_ceda &1)))))|(_cdd <<uint (4-4*(_ceda &1)));};func _bde (_bbc NRGBA ,_ecgb CMYK ,_aefb _b .Rectangle ){for _agda :=0;
_agda < _aefb .Max .X ;_agda ++{for _fdde :=0;_fdde < _aefb .Max .Y ;_fdde ++{_acc :=_bbc .NRGBAAt (_agda ,_fdde );_ecgb .SetCMYK (_agda ,_fdde ,_cec (_acc ));};};};func (_fabd *NRGBA32 )Copy ()Image {return &NRGBA32 {ImageBase :_fabd .copy ()}};func (_bcff *Monochrome )RasterOperation (dx ,dy ,dw ,dh int ,op RasterOperator ,src *Monochrome ,sx ,sy int )error {return _gggg (_bcff ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );
};func (_gdd *Gray8 )SetGray (x ,y int ,g _f .Gray ){_aaff :=y *_gdd .BytesPerLine +x ;if _aaff > len (_gdd .Data )-1{return ;};_gdd .Data [_aaff ]=g .Y ;};var _ Image =&Gray4 {};func (_eggb *Gray2 )Base ()*ImageBase {return &_eggb .ImageBase };func _cc (_ab int )[]uint {var _afc []uint ;
_aace :=_ab ;_gbd :=_aace /8;if _gbd !=0{for _cgfe :=0;_cgfe < _gbd ;_cgfe ++{_afc =append (_afc ,8);};_aad :=_aace %8;_aace =0;if _aad !=0{_aace =_aad ;};};_ddc :=_aace /4;if _ddc !=0{for _bed :=0;_bed < _ddc ;_bed ++{_afc =append (_afc ,4);};_fae :=_aace %4;
_aace =0;if _fae !=0{_aace =_fae ;};};_agb :=_aace /2;if _agb !=0{for _gfad :=0;_gfad < _agb ;_gfad ++{_afc =append (_afc ,2);};};return _afc ;};func _dedg (_ecf _b .Image )(Image ,error ){if _gda ,_dcg :=_ecf .(*CMYK32 );_dcg {return _gda .Copy (),nil ;
};_begd :=_ecf .Bounds ();_cbga ,_cgd :=NewImage (_begd .Max .X ,_begd .Max .Y ,8,4,nil ,nil ,nil );if _cgd !=nil {return nil ,_cgd ;};switch _gbb :=_ecf .(type ){case CMYK :_dagg (_gbb ,_cbga .(CMYK ),_begd );case Gray :_bbae (_gbb ,_cbga .(CMYK ),_begd );
case NRGBA :_bde (_gbb ,_cbga .(CMYK ),_begd );case RGBA :_eca (_gbb ,_cbga .(CMYK ),_begd );default:_bagf (_ecf ,_cbga ,_begd );};return _cbga ,nil ;};func _ebgf (_gcdd *Monochrome ,_dgfb ,_caae int ,_aae ,_eff int ,_bbgbg RasterOperator ){var (_bbaa int ;
_fgd byte ;_ffe ,_faea int ;_ccab int ;);_gbac :=_aae >>3;_fecf :=_aae &7;if _fecf > 0{_fgd =_ffdb [_fecf ];};_bbaa =_gcdd .BytesPerLine *_caae +(_dgfb >>3);switch _bbgbg {case PixClr :for _ffe =0;_ffe < _eff ;_ffe ++{_ccab =_bbaa +_ffe *_gcdd .BytesPerLine ;
for _faea =0;_faea < _gbac ;_faea ++{_gcdd .Data [_ccab ]=0x0;_ccab ++;};if _fecf > 0{_gcdd .Data [_ccab ]=_ccabf (_gcdd .Data [_ccab ],0x0,_fgd );};};case PixSet :for _ffe =0;_ffe < _eff ;_ffe ++{_ccab =_bbaa +_ffe *_gcdd .BytesPerLine ;for _faea =0;_faea < _gbac ;
_faea ++{_gcdd .Data [_ccab ]=0xff;_ccab ++;};if _fecf > 0{_gcdd .Data [_ccab ]=_ccabf (_gcdd .Data [_ccab ],0xff,_fgd );};};case PixNotDst :for _ffe =0;_ffe < _eff ;_ffe ++{_ccab =_bbaa +_ffe *_gcdd .BytesPerLine ;for _faea =0;_faea < _gbac ;_faea ++{_gcdd .Data [_ccab ]=^_gcdd .Data [_ccab ];
_ccab ++;};if _fecf > 0{_gcdd .Data [_ccab ]=_ccabf (_gcdd .Data [_ccab ],^_gcdd .Data [_ccab ],_fgd );};};};};func _eca (_fag RGBA ,_gbbg CMYK ,_afe _b .Rectangle ){for _egad :=0;_egad < _afe .Max .X ;_egad ++{for _fbabf :=0;_fbabf < _afe .Max .Y ;_fbabf ++{_cga :=_fag .RGBAAt (_egad ,_fbabf );
_gbbg .SetCMYK (_egad ,_fbabf ,_baad (_cga ));};};};func (_dgfa *Monochrome )ExpandBinary (factor int )(*Monochrome ,error ){if !IsPowerOf2 (uint (factor )){return nil ,_be .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0065\u0078\u0070\u0061\u006e\u0064\u0020b\u0069n\u0061\u0072\u0079\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020\u0025\u0064",factor );
};return _af (_dgfa ,factor );};func (_bfa *CMYK32 )ColorModel ()_f .Model {return _f .CMYKModel };func _ag (_cad ,_gcb *Monochrome )(_bb error ){_afg :=_gcb .BytesPerLine ;_dgb :=_cad .BytesPerLine ;var (_ff byte ;_ed uint16 ;_ffc ,_fg ,_bea ,_da ,_cge int ;
);for _bea =0;_bea < _gcb .Height ;_bea ++{_ffc =_bea *_afg ;_fg =2*_bea *_dgb ;for _da =0;_da < _afg ;_da ++{_ff =_gcb .Data [_ffc +_da ];_ed =_fefe [_ff ];_cge =_fg +_da *2;if _cad .BytesPerLine !=_gcb .BytesPerLine *2&&(_da +1)*2> _cad .BytesPerLine {_bb =_cad .setByte (_cge ,byte (_ed >>8));
}else {_bb =_cad .setTwoBytes (_cge ,_ed );};if _bb !=nil {return _bb ;};};for _da =0;_da < _dgb ;_da ++{_cge =_fg +_dgb +_da ;_ff =_cad .Data [_fg +_da ];if _bb =_cad .setByte (_cge ,_ff );_bb !=nil {return _bb ;};};};return nil ;};func (_ffgc *RGBA32 )ColorAt (x ,y int )(_f .Color ,error ){return ColorAtRGBA32 (x ,y ,_ffgc .Width ,_ffgc .Data ,_ffgc .Alpha ,_ffgc .Decode );
};var _ _b .Image =&NRGBA32 {};type ColorConverter interface{Convert (_ged _b .Image )(Image ,error );};func _gea (_caf ,_ef *Monochrome )(_df error ){_fba :=_ef .BytesPerLine ;_ac :=_caf .BytesPerLine ;var _ea ,_dgg ,_fa ,_feg ,_fefg int ;for _fa =0;_fa < _ef .Height ;
_fa ++{_ea =_fa *_fba ;_dgg =8*_fa *_ac ;for _feg =0;_feg < _fba ;_feg ++{if _df =_caf .setEightBytes (_dgg +_feg *8,_dgba [_ef .Data [_ea +_feg ]]);_df !=nil {return _df ;};};for _fefg =1;_fefg < 8;_fefg ++{for _feg =0;_feg < _ac ;_feg ++{if _df =_caf .setByte (_dgg +_fefg *_ac +_feg ,_caf .Data [_dgg +_feg ]);
_df !=nil {return _df ;};};};};return nil ;};func ColorAtGray1BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_f .Gray ,error ){_dbg :=y *bytesPerLine +x >>3;if _dbg >=len (data ){return _f .Gray {},_be .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_gefe :=data [_dbg ]>>uint (7-(x &7))&1;if len (decode )==2{_gefe =uint8 (LinearInterpolate (float64 (_gefe ),0.0,1.0,decode [0],decode [1]))&1;};return _f .Gray {Y :_gefe *255},nil ;};func (_ggbg *RGBA32 )SetRGBA (x ,y int ,c _f .RGBA ){_fdga :=y *_ggbg .Width +x ;
_bcdd :=3*_fdga ;if _bcdd +2>=len (_ggbg .Data ){return ;};_ggbg .setRGBA (_fdga ,c );};func (_cfcc colorConverter )Convert (src _b .Image )(Image ,error ){return _cfcc ._ffa (src )};func (_gfbeg *Gray8 )At (x ,y int )_f .Color {_eegb ,_ :=_gfbeg .ColorAt (x ,y );
return _eegb };func _egdg (_bacc Gray ,_abge nrgba64 ,_ceb _b .Rectangle ){for _dgbb :=0;_dgbb < _ceb .Max .X ;_dgbb ++{for _fff :=0;_fff < _ceb .Max .Y ;_fff ++{_dega :=_bbcc (_abge .NRGBA64At (_dgbb ,_fff ));_bacc .SetGray (_dgbb ,_fff ,_dega );};};};
func _acge (_aadb _f .Gray )_f .Gray {_aadb .Y >>=4;_aadb .Y |=_aadb .Y <<4;return _aadb };var _ Gray =&Gray2 {};func _fcba (_dbca _f .NRGBA64 )_f .RGBA {_geg ,_ddcf ,_fage ,_daggf :=_dbca .RGBA ();return _f .RGBA {R :uint8 (_geg >>8),G :uint8 (_ddcf >>8),B :uint8 (_fage >>8),A :uint8 (_daggf >>8)};
};func (_gfbdf *Gray8 )Bounds ()_b .Rectangle {return _b .Rectangle {Max :_b .Point {X :_gfbdf .Width ,Y :_gfbdf .Height }};};func _cbe ()(_dfd [256]uint64 ){for _eaf :=0;_eaf < 256;_eaf ++{if _eaf &0x01!=0{_dfd [_eaf ]|=0xff;};if _eaf &0x02!=0{_dfd [_eaf ]|=0xff00;
};if _eaf &0x04!=0{_dfd [_eaf ]|=0xff0000;};if _eaf &0x08!=0{_dfd [_eaf ]|=0xff000000;};if _eaf &0x10!=0{_dfd [_eaf ]|=0xff00000000;};if _eaf &0x20!=0{_dfd [_eaf ]|=0xff0000000000;};if _eaf &0x40!=0{_dfd [_eaf ]|=0xff000000000000;};if _eaf &0x80!=0{_dfd [_eaf ]|=0xff00000000000000;
};};return _dfd ;};func (_eb *CMYK32 )CMYKAt (x ,y int )_f .CMYK {_acaf ,_ :=ColorAtCMYK (x ,y ,_eb .Width ,_eb .Data ,_eb .Decode );return _acaf ;};func ColorAtGray16BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_f .Gray16 ,error ){_eedd :=(y *bytesPerLine /2+x )*2;
if _eedd +1>=len (data ){return _f .Gray16 {},_be .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_egc :=uint16 (data [_eedd ])<<8|uint16 (data [_eedd +1]);if len (decode )==2{_egc =uint16 (uint64 (LinearInterpolate (float64 (_egc ),0,65535,decode [0],decode [1])));};return _f .Gray16 {Y :_egc },nil ;};func (_dbea *NRGBA64 )setNRGBA64 (_ebgcg int ,_fbacc _f .NRGBA64 ,_febb int ){_dbea .Data [_ebgcg ]=uint8 (_fbacc .R >>8);
_dbea .Data [_ebgcg +1]=uint8 (_fbacc .R &0xff);_dbea .Data [_ebgcg +2]=uint8 (_fbacc .G >>8);_dbea .Data [_ebgcg +3]=uint8 (_fbacc .G &0xff);_dbea .Data [_ebgcg +4]=uint8 (_fbacc .B >>8);_dbea .Data [_ebgcg +5]=uint8 (_fbacc .B &0xff);if _febb +1< len (_dbea .Alpha ){_dbea .Alpha [_febb ]=uint8 (_fbacc .A >>8);
_dbea .Alpha [_febb +1]=uint8 (_fbacc .A &0xff);};};func NewImage (width ,height ,bitsPerComponent ,colorComponents int ,data ,alpha []byte ,decode []float64 )(Image ,error ){_bede :=NewImageBase (width ,height ,bitsPerComponent ,colorComponents ,data ,alpha ,decode );
var _edbg Image ;switch colorComponents {case 1:switch bitsPerComponent {case 1:_edbg =&Monochrome {ImageBase :_bede ,ModelThreshold :0x0f};case 2:_edbg =&Gray2 {ImageBase :_bede };case 4:_edbg =&Gray4 {ImageBase :_bede };case 8:_edbg =&Gray8 {ImageBase :_bede };
case 16:_edbg =&Gray16 {ImageBase :_bede };};case 3:switch bitsPerComponent {case 4:_edbg =&NRGBA16 {ImageBase :_bede };case 8:_edbg =&NRGBA32 {ImageBase :_bede };case 16:_edbg =&NRGBA64 {ImageBase :_bede };};case 4:_edbg =&CMYK32 {ImageBase :_bede };};
if _edbg ==nil {return nil ,ErrInvalidImage ;};return _edbg ,nil ;};func GetConverter (bitsPerComponent ,colorComponents int )(ColorConverter ,error ){switch colorComponents {case 1:switch bitsPerComponent {case 1:return MonochromeConverter ,nil ;case 2:return Gray2Converter ,nil ;
case 4:return Gray4Converter ,nil ;case 8:return GrayConverter ,nil ;case 16:return Gray16Converter ,nil ;};case 3:switch bitsPerComponent {case 4:return NRGBA16Converter ,nil ;case 8:return NRGBAConverter ,nil ;case 16:return NRGBA64Converter ,nil ;};
case 4:return CMYKConverter ,nil ;};return nil ,_be .Errorf ("\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0043o\u006e\u0076\u0065\u0072\u0074\u0065\u0072\u0020\u0070\u0061\u0072\u0061\u006d\u0065t\u0065\u0072\u0073\u002e\u0020\u0042\u0069\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u003a\u0020\u0025\u0064\u002c\u0020\u0043\u006f\u006co\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006et\u0073\u003a \u0025\u0064",bitsPerComponent ,colorComponents );
};func (_cgdc *Monochrome )AddPadding ()(_fcc error ){if _gcf :=((_cgdc .Width *_cgdc .Height )+7)>>3;len (_cgdc .Data )< _gcf {return _be .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064a\u0074\u0061\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u003a\u0020\u0027\u0025\u0064\u0027\u002e\u0020\u0054\u0068\u0065\u0020\u0064\u0061t\u0061\u0020s\u0068\u006fu\u006c\u0064\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 l\u0065\u0061\u0073\u0074\u003a\u0020\u0027\u0025\u0064'\u0020\u0062\u0079\u0074\u0065\u0073",len (_cgdc .Data ),_gcf );
};_fgfb :=_cgdc .Width %8;if _fgfb ==0{return nil ;};_agcg :=_cgdc .Width /8;_dfce :=_dg .NewReader (_cgdc .Data );_dbfd :=make ([]byte ,_cgdc .Height *_cgdc .BytesPerLine );_afec :=_dg .NewWriterMSB (_dbfd );_add :=make ([]byte ,_agcg );var (_aba int ;
_ffcfe uint64 ;);for _aba =0;_aba < _cgdc .Height ;_aba ++{if _ ,_fcc =_dfce .Read (_add );_fcc !=nil {return _fcc ;};if _ ,_fcc =_afec .Write (_add );_fcc !=nil {return _fcc ;};if _ffcfe ,_fcc =_dfce .ReadBits (byte (_fgfb ));_fcc !=nil {return _fcc ;
};if _fcc =_afec .WriteByte (byte (_ffcfe )<<uint (8-_fgfb ));_fcc !=nil {return _fcc ;};};_cgdc .Data =_afec .Data ();return nil ;};func _beff (_eegc *Monochrome ,_fccbb ,_fcfc ,_aaab ,_feggf int ,_ecda RasterOperator ,_abed *Monochrome ,_cffd ,_egdc int )error {var (_cbcfb bool ;
_cbbfg bool ;_dgce byte ;_bbcf int ;_ebba int ;_bfee int ;_faebd int ;_eagda bool ;_fce int ;_bbfe int ;_gdeb int ;_cdad bool ;_gagf byte ;_fdgf int ;_ggfd int ;_dddcc int ;_bfaa byte ;_dgga int ;_bacg int ;_aggc uint ;_dfg uint ;_cebd byte ;_dbgb shift ;
_ffabc bool ;_dggbg bool ;_ecdb ,_cafbe int ;);if _cffd &7!=0{_bacg =8-(_cffd &7);};if _fccbb &7!=0{_ebba =8-(_fccbb &7);};if _bacg ==0&&_ebba ==0{_cebd =_cbcg [0];}else {if _ebba > _bacg {_aggc =uint (_ebba -_bacg );}else {_aggc =uint (8-(_bacg -_ebba ));
};_dfg =8-_aggc ;_cebd =_cbcg [_aggc ];};if (_fccbb &7)!=0{_cbcfb =true ;_bbcf =8-(_fccbb &7);_dgce =_cbcg [_bbcf ];_bfee =_eegc .BytesPerLine *_fcfc +(_fccbb >>3);_faebd =_abed .BytesPerLine *_egdc +(_cffd >>3);_dgga =8-(_cffd &7);if _bbcf > _dgga {_dbgb =_bgda ;
if _aaab >=_bacg {_ffabc =true ;};}else {_dbgb =_acaga ;};};if _aaab < _bbcf {_cbbfg =true ;_dgce &=_ffdb [8-_bbcf +_aaab ];};if !_cbbfg {_fce =(_aaab -_bbcf )>>3;if _fce !=0{_eagda =true ;_bbfe =_eegc .BytesPerLine *_fcfc +((_fccbb +_ebba )>>3);_gdeb =_abed .BytesPerLine *_egdc +((_cffd +_ebba )>>3);
};};_fdgf =(_fccbb +_aaab )&7;if !(_cbbfg ||_fdgf ==0){_cdad =true ;_gagf =_ffdb [_fdgf ];_ggfd =_eegc .BytesPerLine *_fcfc +((_fccbb +_ebba )>>3)+_fce ;_dddcc =_abed .BytesPerLine *_egdc +((_cffd +_ebba )>>3)+_fce ;if _fdgf > int (_dfg ){_dggbg =true ;
};};switch _ecda {case PixSrc :if _cbcfb {for _ecdb =0;_ecdb < _feggf ;_ecdb ++{if _dbgb ==_bgda {_bfaa =_abed .Data [_faebd ]<<_aggc ;if _ffabc {_bfaa =_ccabf (_bfaa ,_abed .Data [_faebd +1]>>_dfg ,_cebd );};}else {_bfaa =_abed .Data [_faebd ]>>_dfg ;
};_eegc .Data [_bfee ]=_ccabf (_eegc .Data [_bfee ],_bfaa ,_dgce );_bfee +=_eegc .BytesPerLine ;_faebd +=_abed .BytesPerLine ;};};if _eagda {for _ecdb =0;_ecdb < _feggf ;_ecdb ++{for _cafbe =0;_cafbe < _fce ;_cafbe ++{_bfaa =_ccabf (_abed .Data [_gdeb +_cafbe ]<<_aggc ,_abed .Data [_gdeb +_cafbe +1]>>_dfg ,_cebd );
_eegc .Data [_bbfe +_cafbe ]=_bfaa ;};_bbfe +=_eegc .BytesPerLine ;_gdeb +=_abed .BytesPerLine ;};};if _cdad {for _ecdb =0;_ecdb < _feggf ;_ecdb ++{_bfaa =_abed .Data [_dddcc ]<<_aggc ;if _dggbg {_bfaa =_ccabf (_bfaa ,_abed .Data [_dddcc +1]>>_dfg ,_cebd );
};_eegc .Data [_ggfd ]=_ccabf (_eegc .Data [_ggfd ],_bfaa ,_gagf );_ggfd +=_eegc .BytesPerLine ;_dddcc +=_abed .BytesPerLine ;};};case PixNotSrc :if _cbcfb {for _ecdb =0;_ecdb < _feggf ;_ecdb ++{if _dbgb ==_bgda {_bfaa =_abed .Data [_faebd ]<<_aggc ;if _ffabc {_bfaa =_ccabf (_bfaa ,_abed .Data [_faebd +1]>>_dfg ,_cebd );
};}else {_bfaa =_abed .Data [_faebd ]>>_dfg ;};_eegc .Data [_bfee ]=_ccabf (_eegc .Data [_bfee ],^_bfaa ,_dgce );_bfee +=_eegc .BytesPerLine ;_faebd +=_abed .BytesPerLine ;};};if _eagda {for _ecdb =0;_ecdb < _feggf ;_ecdb ++{for _cafbe =0;_cafbe < _fce ;
_cafbe ++{_bfaa =_ccabf (_abed .Data [_gdeb +_cafbe ]<<_aggc ,_abed .Data [_gdeb +_cafbe +1]>>_dfg ,_cebd );_eegc .Data [_bbfe +_cafbe ]=^_bfaa ;};_bbfe +=_eegc .BytesPerLine ;_gdeb +=_abed .BytesPerLine ;};};if _cdad {for _ecdb =0;_ecdb < _feggf ;_ecdb ++{_bfaa =_abed .Data [_dddcc ]<<_aggc ;
if _dggbg {_bfaa =_ccabf (_bfaa ,_abed .Data [_dddcc +1]>>_dfg ,_cebd );};_eegc .Data [_ggfd ]=_ccabf (_eegc .Data [_ggfd ],^_bfaa ,_gagf );_ggfd +=_eegc .BytesPerLine ;_dddcc +=_abed .BytesPerLine ;};};case PixSrcOrDst :if _cbcfb {for _ecdb =0;_ecdb < _feggf ;
_ecdb ++{if _dbgb ==_bgda {_bfaa =_abed .Data [_faebd ]<<_aggc ;if _ffabc {_bfaa =_ccabf (_bfaa ,_abed .Data [_faebd +1]>>_dfg ,_cebd );};}else {_bfaa =_abed .Data [_faebd ]>>_dfg ;};_eegc .Data [_bfee ]=_ccabf (_eegc .Data [_bfee ],_bfaa |_eegc .Data [_bfee ],_dgce );
_bfee +=_eegc .BytesPerLine ;_faebd +=_abed .BytesPerLine ;};};if _eagda {for _ecdb =0;_ecdb < _feggf ;_ecdb ++{for _cafbe =0;_cafbe < _fce ;_cafbe ++{_bfaa =_ccabf (_abed .Data [_gdeb +_cafbe ]<<_aggc ,_abed .Data [_gdeb +_cafbe +1]>>_dfg ,_cebd );_eegc .Data [_bbfe +_cafbe ]|=_bfaa ;
};_bbfe +=_eegc .BytesPerLine ;_gdeb +=_abed .BytesPerLine ;};};if _cdad {for _ecdb =0;_ecdb < _feggf ;_ecdb ++{_bfaa =_abed .Data [_dddcc ]<<_aggc ;if _dggbg {_bfaa =_ccabf (_bfaa ,_abed .Data [_dddcc +1]>>_dfg ,_cebd );};_eegc .Data [_ggfd ]=_ccabf (_eegc .Data [_ggfd ],_bfaa |_eegc .Data [_ggfd ],_gagf );
_ggfd +=_eegc .BytesPerLine ;_dddcc +=_abed .BytesPerLine ;};};case PixSrcAndDst :if _cbcfb {for _ecdb =0;_ecdb < _feggf ;_ecdb ++{if _dbgb ==_bgda {_bfaa =_abed .Data [_faebd ]<<_aggc ;if _ffabc {_bfaa =_ccabf (_bfaa ,_abed .Data [_faebd +1]>>_dfg ,_cebd );
};}else {_bfaa =_abed .Data [_faebd ]>>_dfg ;};_eegc .Data [_bfee ]=_ccabf (_eegc .Data [_bfee ],_bfaa &_eegc .Data [_bfee ],_dgce );_bfee +=_eegc .BytesPerLine ;_faebd +=_abed .BytesPerLine ;};};if _eagda {for _ecdb =0;_ecdb < _feggf ;_ecdb ++{for _cafbe =0;
_cafbe < _fce ;_cafbe ++{_bfaa =_ccabf (_abed .Data [_gdeb +_cafbe ]<<_aggc ,_abed .Data [_gdeb +_cafbe +1]>>_dfg ,_cebd );_eegc .Data [_bbfe +_cafbe ]&=_bfaa ;};_bbfe +=_eegc .BytesPerLine ;_gdeb +=_abed .BytesPerLine ;};};if _cdad {for _ecdb =0;_ecdb < _feggf ;
_ecdb ++{_bfaa =_abed .Data [_dddcc ]<<_aggc ;if _dggbg {_bfaa =_ccabf (_bfaa ,_abed .Data [_dddcc +1]>>_dfg ,_cebd );};_eegc .Data [_ggfd ]=_ccabf (_eegc .Data [_ggfd ],_bfaa &_eegc .Data [_ggfd ],_gagf );_ggfd +=_eegc .BytesPerLine ;_dddcc +=_abed .BytesPerLine ;
};};case PixSrcXorDst :if _cbcfb {for _ecdb =0;_ecdb < _feggf ;_ecdb ++{if _dbgb ==_bgda {_bfaa =_abed .Data [_faebd ]<<_aggc ;if _ffabc {_bfaa =_ccabf (_bfaa ,_abed .Data [_faebd +1]>>_dfg ,_cebd );};}else {_bfaa =_abed .Data [_faebd ]>>_dfg ;};_eegc .Data [_bfee ]=_ccabf (_eegc .Data [_bfee ],_bfaa ^_eegc .Data [_bfee ],_dgce );
_bfee +=_eegc .BytesPerLine ;_faebd +=_abed .BytesPerLine ;};};if _eagda {for _ecdb =0;_ecdb < _feggf ;_ecdb ++{for _cafbe =0;_cafbe < _fce ;_cafbe ++{_bfaa =_ccabf (_abed .Data [_gdeb +_cafbe ]<<_aggc ,_abed .Data [_gdeb +_cafbe +1]>>_dfg ,_cebd );_eegc .Data [_bbfe +_cafbe ]^=_bfaa ;
};_bbfe +=_eegc .BytesPerLine ;_gdeb +=_abed .BytesPerLine ;};};if _cdad {for _ecdb =0;_ecdb < _feggf ;_ecdb ++{_bfaa =_abed .Data [_dddcc ]<<_aggc ;if _dggbg {_bfaa =_ccabf (_bfaa ,_abed .Data [_dddcc +1]>>_dfg ,_cebd );};_eegc .Data [_ggfd ]=_ccabf (_eegc .Data [_ggfd ],_bfaa ^_eegc .Data [_ggfd ],_gagf );
_ggfd +=_eegc .BytesPerLine ;_dddcc +=_abed .BytesPerLine ;};};case PixNotSrcOrDst :if _cbcfb {for _ecdb =0;_ecdb < _feggf ;_ecdb ++{if _dbgb ==_bgda {_bfaa =_abed .Data [_faebd ]<<_aggc ;if _ffabc {_bfaa =_ccabf (_bfaa ,_abed .Data [_faebd +1]>>_dfg ,_cebd );
};}else {_bfaa =_abed .Data [_faebd ]>>_dfg ;};_eegc .Data [_bfee ]=_ccabf (_eegc .Data [_bfee ],^_bfaa |_eegc .Data [_bfee ],_dgce );_bfee +=_eegc .BytesPerLine ;_faebd +=_abed .BytesPerLine ;};};if _eagda {for _ecdb =0;_ecdb < _feggf ;_ecdb ++{for _cafbe =0;
_cafbe < _fce ;_cafbe ++{_bfaa =_ccabf (_abed .Data [_gdeb +_cafbe ]<<_aggc ,_abed .Data [_gdeb +_cafbe +1]>>_dfg ,_cebd );_eegc .Data [_bbfe +_cafbe ]|=^_bfaa ;};_bbfe +=_eegc .BytesPerLine ;_gdeb +=_abed .BytesPerLine ;};};if _cdad {for _ecdb =0;_ecdb < _feggf ;
_ecdb ++{_bfaa =_abed .Data [_dddcc ]<<_aggc ;if _dggbg {_bfaa =_ccabf (_bfaa ,_abed .Data [_dddcc +1]>>_dfg ,_cebd );};_eegc .Data [_ggfd ]=_ccabf (_eegc .Data [_ggfd ],^_bfaa |_eegc .Data [_ggfd ],_gagf );_ggfd +=_eegc .BytesPerLine ;_dddcc +=_abed .BytesPerLine ;
};};case PixNotSrcAndDst :if _cbcfb {for _ecdb =0;_ecdb < _feggf ;_ecdb ++{if _dbgb ==_bgda {_bfaa =_abed .Data [_faebd ]<<_aggc ;if _ffabc {_bfaa =_ccabf (_bfaa ,_abed .Data [_faebd +1]>>_dfg ,_cebd );};}else {_bfaa =_abed .Data [_faebd ]>>_dfg ;};_eegc .Data [_bfee ]=_ccabf (_eegc .Data [_bfee ],^_bfaa &_eegc .Data [_bfee ],_dgce );
_bfee +=_eegc .BytesPerLine ;_faebd +=_abed .BytesPerLine ;};};if _eagda {for _ecdb =0;_ecdb < _feggf ;_ecdb ++{for _cafbe =0;_cafbe < _fce ;_cafbe ++{_bfaa =_ccabf (_abed .Data [_gdeb +_cafbe ]<<_aggc ,_abed .Data [_gdeb +_cafbe +1]>>_dfg ,_cebd );_eegc .Data [_bbfe +_cafbe ]&=^_bfaa ;
};_bbfe +=_eegc .BytesPerLine ;_gdeb +=_abed .BytesPerLine ;};};if _cdad {for _ecdb =0;_ecdb < _feggf ;_ecdb ++{_bfaa =_abed .Data [_dddcc ]<<_aggc ;if _dggbg {_bfaa =_ccabf (_bfaa ,_abed .Data [_dddcc +1]>>_dfg ,_cebd );};_eegc .Data [_ggfd ]=_ccabf (_eegc .Data [_ggfd ],^_bfaa &_eegc .Data [_ggfd ],_gagf );
_ggfd +=_eegc .BytesPerLine ;_dddcc +=_abed .BytesPerLine ;};};case PixSrcOrNotDst :if _cbcfb {for _ecdb =0;_ecdb < _feggf ;_ecdb ++{if _dbgb ==_bgda {_bfaa =_abed .Data [_faebd ]<<_aggc ;if _ffabc {_bfaa =_ccabf (_bfaa ,_abed .Data [_faebd +1]>>_dfg ,_cebd );
};}else {_bfaa =_abed .Data [_faebd ]>>_dfg ;};_eegc .Data [_bfee ]=_ccabf (_eegc .Data [_bfee ],_bfaa |^_eegc .Data [_bfee ],_dgce );_bfee +=_eegc .BytesPerLine ;_faebd +=_abed .BytesPerLine ;};};if _eagda {for _ecdb =0;_ecdb < _feggf ;_ecdb ++{for _cafbe =0;
_cafbe < _fce ;_cafbe ++{_bfaa =_ccabf (_abed .Data [_gdeb +_cafbe ]<<_aggc ,_abed .Data [_gdeb +_cafbe +1]>>_dfg ,_cebd );_eegc .Data [_bbfe +_cafbe ]=_bfaa |^_eegc .Data [_bbfe +_cafbe ];};_bbfe +=_eegc .BytesPerLine ;_gdeb +=_abed .BytesPerLine ;};};
if _cdad {for _ecdb =0;_ecdb < _feggf ;_ecdb ++{_bfaa =_abed .Data [_dddcc ]<<_aggc ;if _dggbg {_bfaa =_ccabf (_bfaa ,_abed .Data [_dddcc +1]>>_dfg ,_cebd );};_eegc .Data [_ggfd ]=_ccabf (_eegc .Data [_ggfd ],_bfaa |^_eegc .Data [_ggfd ],_gagf );_ggfd +=_eegc .BytesPerLine ;
_dddcc +=_abed .BytesPerLine ;};};case PixSrcAndNotDst :if _cbcfb {for _ecdb =0;_ecdb < _feggf ;_ecdb ++{if _dbgb ==_bgda {_bfaa =_abed .Data [_faebd ]<<_aggc ;if _ffabc {_bfaa =_ccabf (_bfaa ,_abed .Data [_faebd +1]>>_dfg ,_cebd );};}else {_bfaa =_abed .Data [_faebd ]>>_dfg ;
};_eegc .Data [_bfee ]=_ccabf (_eegc .Data [_bfee ],_bfaa &^_eegc .Data [_bfee ],_dgce );_bfee +=_eegc .BytesPerLine ;_faebd +=_abed .BytesPerLine ;};};if _eagda {for _ecdb =0;_ecdb < _feggf ;_ecdb ++{for _cafbe =0;_cafbe < _fce ;_cafbe ++{_bfaa =_ccabf (_abed .Data [_gdeb +_cafbe ]<<_aggc ,_abed .Data [_gdeb +_cafbe +1]>>_dfg ,_cebd );
_eegc .Data [_bbfe +_cafbe ]=_bfaa &^_eegc .Data [_bbfe +_cafbe ];};_bbfe +=_eegc .BytesPerLine ;_gdeb +=_abed .BytesPerLine ;};};if _cdad {for _ecdb =0;_ecdb < _feggf ;_ecdb ++{_bfaa =_abed .Data [_dddcc ]<<_aggc ;if _dggbg {_bfaa =_ccabf (_bfaa ,_abed .Data [_dddcc +1]>>_dfg ,_cebd );
};_eegc .Data [_ggfd ]=_ccabf (_eegc .Data [_ggfd ],_bfaa &^_eegc .Data [_ggfd ],_gagf );_ggfd +=_eegc .BytesPerLine ;_dddcc +=_abed .BytesPerLine ;};};case PixNotPixSrcOrDst :if _cbcfb {for _ecdb =0;_ecdb < _feggf ;_ecdb ++{if _dbgb ==_bgda {_bfaa =_abed .Data [_faebd ]<<_aggc ;
if _ffabc {_bfaa =_ccabf (_bfaa ,_abed .Data [_faebd +1]>>_dfg ,_cebd );};}else {_bfaa =_abed .Data [_faebd ]>>_dfg ;};_eegc .Data [_bfee ]=_ccabf (_eegc .Data [_bfee ],^(_bfaa |_eegc .Data [_bfee ]),_dgce );_bfee +=_eegc .BytesPerLine ;_faebd +=_abed .BytesPerLine ;
};};if _eagda {for _ecdb =0;_ecdb < _feggf ;_ecdb ++{for _cafbe =0;_cafbe < _fce ;_cafbe ++{_bfaa =_ccabf (_abed .Data [_gdeb +_cafbe ]<<_aggc ,_abed .Data [_gdeb +_cafbe +1]>>_dfg ,_cebd );_eegc .Data [_bbfe +_cafbe ]=^(_bfaa |_eegc .Data [_bbfe +_cafbe ]);
};_bbfe +=_eegc .BytesPerLine ;_gdeb +=_abed .BytesPerLine ;};};if _cdad {for _ecdb =0;_ecdb < _feggf ;_ecdb ++{_bfaa =_abed .Data [_dddcc ]<<_aggc ;if _dggbg {_bfaa =_ccabf (_bfaa ,_abed .Data [_dddcc +1]>>_dfg ,_cebd );};_eegc .Data [_ggfd ]=_ccabf (_eegc .Data [_ggfd ],^(_bfaa |_eegc .Data [_ggfd ]),_gagf );
_ggfd +=_eegc .BytesPerLine ;_dddcc +=_abed .BytesPerLine ;};};case PixNotPixSrcAndDst :if _cbcfb {for _ecdb =0;_ecdb < _feggf ;_ecdb ++{if _dbgb ==_bgda {_bfaa =_abed .Data [_faebd ]<<_aggc ;if _ffabc {_bfaa =_ccabf (_bfaa ,_abed .Data [_faebd +1]>>_dfg ,_cebd );
};}else {_bfaa =_abed .Data [_faebd ]>>_dfg ;};_eegc .Data [_bfee ]=_ccabf (_eegc .Data [_bfee ],^(_bfaa &_eegc .Data [_bfee ]),_dgce );_bfee +=_eegc .BytesPerLine ;_faebd +=_abed .BytesPerLine ;};};if _eagda {for _ecdb =0;_ecdb < _feggf ;_ecdb ++{for _cafbe =0;
_cafbe < _fce ;_cafbe ++{_bfaa =_ccabf (_abed .Data [_gdeb +_cafbe ]<<_aggc ,_abed .Data [_gdeb +_cafbe +1]>>_dfg ,_cebd );_eegc .Data [_bbfe +_cafbe ]=^(_bfaa &_eegc .Data [_bbfe +_cafbe ]);};_bbfe +=_eegc .BytesPerLine ;_gdeb +=_abed .BytesPerLine ;};
};if _cdad {for _ecdb =0;_ecdb < _feggf ;_ecdb ++{_bfaa =_abed .Data [_dddcc ]<<_aggc ;if _dggbg {_bfaa =_ccabf (_bfaa ,_abed .Data [_dddcc +1]>>_dfg ,_cebd );};_eegc .Data [_ggfd ]=_ccabf (_eegc .Data [_ggfd ],^(_bfaa &_eegc .Data [_ggfd ]),_gagf );_ggfd +=_eegc .BytesPerLine ;
_dddcc +=_abed .BytesPerLine ;};};case PixNotPixSrcXorDst :if _cbcfb {for _ecdb =0;_ecdb < _feggf ;_ecdb ++{if _dbgb ==_bgda {_bfaa =_abed .Data [_faebd ]<<_aggc ;if _ffabc {_bfaa =_ccabf (_bfaa ,_abed .Data [_faebd +1]>>_dfg ,_cebd );};}else {_bfaa =_abed .Data [_faebd ]>>_dfg ;
};_eegc .Data [_bfee ]=_ccabf (_eegc .Data [_bfee ],^(_bfaa ^_eegc .Data [_bfee ]),_dgce );_bfee +=_eegc .BytesPerLine ;_faebd +=_abed .BytesPerLine ;};};if _eagda {for _ecdb =0;_ecdb < _feggf ;_ecdb ++{for _cafbe =0;_cafbe < _fce ;_cafbe ++{_bfaa =_ccabf (_abed .Data [_gdeb +_cafbe ]<<_aggc ,_abed .Data [_gdeb +_cafbe +1]>>_dfg ,_cebd );
_eegc .Data [_bbfe +_cafbe ]=^(_bfaa ^_eegc .Data [_bbfe +_cafbe ]);};_bbfe +=_eegc .BytesPerLine ;_gdeb +=_abed .BytesPerLine ;};};if _cdad {for _ecdb =0;_ecdb < _feggf ;_ecdb ++{_bfaa =_abed .Data [_dddcc ]<<_aggc ;if _dggbg {_bfaa =_ccabf (_bfaa ,_abed .Data [_dddcc +1]>>_dfg ,_cebd );
};_eegc .Data [_ggfd ]=_ccabf (_eegc .Data [_ggfd ],^(_bfaa ^_eegc .Data [_ggfd ]),_gagf );_ggfd +=_eegc .BytesPerLine ;_dddcc +=_abed .BytesPerLine ;};};default:_gc .Log .Debug ("\u004f\u0070e\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0074\u0020\u0070\u0065\u0072\u006d\u0069tt\u0065\u0064",_ecda );
return _e .New ("\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065r\u0061\u0074\u0069\u006f\u006e\u0020\u006eo\u0074\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074\u0065\u0064");};return nil ;};var _ccf [256]uint8 ;func _gbcc (_ddcb ,_ce *Monochrome ,_bcb []byte ,_dgd int )(_edaf error ){var (_bfe ,_bead ,_dggb ,_deg ,_gaf ,_faa ,_eggf ,_fgb int ;
_cee ,_cd uint32 ;_aag ,_gbf byte ;_gaff uint16 ;);_dce :=make ([]byte ,4);_dgdd :=make ([]byte ,4);for _dggb =0;_dggb < _ddcb .Height -1;_dggb ,_deg =_dggb +2,_deg +1{_bfe =_dggb *_ddcb .BytesPerLine ;_bead =_deg *_ce .BytesPerLine ;for _gaf ,_faa =0,0;
_gaf < _dgd ;_gaf ,_faa =_gaf +4,_faa +1{for _eggf =0;_eggf < 4;_eggf ++{_fgb =_bfe +_gaf +_eggf ;if _fgb <=len (_ddcb .Data )-1&&_fgb < _bfe +_ddcb .BytesPerLine {_dce [_eggf ]=_ddcb .Data [_fgb ];}else {_dce [_eggf ]=0x00;};_fgb =_bfe +_ddcb .BytesPerLine +_gaf +_eggf ;
if _fgb <=len (_ddcb .Data )-1&&_fgb < _bfe +(2*_ddcb .BytesPerLine ){_dgdd [_eggf ]=_ddcb .Data [_fgb ];}else {_dgdd [_eggf ]=0x00;};};_cee =_c .BigEndian .Uint32 (_dce );_cd =_c .BigEndian .Uint32 (_dgdd );_cd |=_cee ;_cd |=_cd <<1;_cd &=0xaaaaaaaa;_cee =_cd |(_cd <<7);
_aag =byte (_cee >>24);_gbf =byte ((_cee >>8)&0xff);_fgb =_bead +_faa ;if _fgb +1==len (_ce .Data )-1||_fgb +1>=_bead +_ce .BytesPerLine {_ce .Data [_fgb ]=_bcb [_aag ];}else {_gaff =(uint16 (_bcb [_aag ])<<8)|uint16 (_bcb [_gbf ]);if _edaf =_ce .setTwoBytes (_fgb ,_gaff );
_edaf !=nil {return _be .Errorf ("s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_fgb );};_faa ++;};};};return nil ;
};var _ Image =&NRGBA64 {};func _cbgf (_gbgf _f .Color )_f .Color {_efg :=_f .GrayModel .Convert (_gbgf ).(_f .Gray );return _acge (_efg );};func (_aef *CMYK32 )ColorAt (x ,y int )(_f .Color ,error ){return ColorAtCMYK (x ,y ,_aef .Width ,_aef .Data ,_aef .Decode );
};func (_cagaf *ImageBase )getByte (_ege int )(byte ,error ){if _ege > len (_cagaf .Data )-1||_ege < 0{return 0,_be .Errorf ("\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",_ege );
};return _cagaf .Data [_ege ],nil ;};type CMYK32 struct{ImageBase };func _beeea (_eabg *Monochrome ,_ffcgg ,_ccd ,_dagda ,_baaf int ,_acgea RasterOperator ,_fgba *Monochrome ,_gfab ,_facf int )error {var (_cfag bool ;_eaadd bool ;_gfaee int ;_dgea int ;
_baeg int ;_efbc bool ;_cggb byte ;_gcdf int ;_daaa int ;_egaf int ;_dcfb ,_cff int ;);_fadb :=8-(_ffcgg &7);_dfdc :=_cbcg [_fadb ];_dabb :=_eabg .BytesPerLine *_ccd +(_ffcgg >>3);_bgfdf :=_fgba .BytesPerLine *_facf +(_gfab >>3);if _dagda < _fadb {_cfag =true ;
_dfdc &=_ffdb [8-_fadb +_dagda ];};if !_cfag {_gfaee =(_dagda -_fadb )>>3;if _gfaee > 0{_eaadd =true ;_dgea =_dabb +1;_baeg =_bgfdf +1;};};_gcdf =(_ffcgg +_dagda )&7;if !(_cfag ||_gcdf ==0){_efbc =true ;_cggb =_ffdb [_gcdf ];_daaa =_dabb +1+_gfaee ;_egaf =_bgfdf +1+_gfaee ;
};switch _acgea {case PixSrc :for _dcfb =0;_dcfb < _baaf ;_dcfb ++{_eabg .Data [_dabb ]=_ccabf (_eabg .Data [_dabb ],_fgba .Data [_bgfdf ],_dfdc );_dabb +=_eabg .BytesPerLine ;_bgfdf +=_fgba .BytesPerLine ;};if _eaadd {for _dcfb =0;_dcfb < _baaf ;_dcfb ++{for _cff =0;
_cff < _gfaee ;_cff ++{_eabg .Data [_dgea +_cff ]=_fgba .Data [_baeg +_cff ];};_dgea +=_eabg .BytesPerLine ;_baeg +=_fgba .BytesPerLine ;};};if _efbc {for _dcfb =0;_dcfb < _baaf ;_dcfb ++{_eabg .Data [_daaa ]=_ccabf (_eabg .Data [_daaa ],_fgba .Data [_egaf ],_cggb );
_daaa +=_eabg .BytesPerLine ;_egaf +=_fgba .BytesPerLine ;};};case PixNotSrc :for _dcfb =0;_dcfb < _baaf ;_dcfb ++{_eabg .Data [_dabb ]=_ccabf (_eabg .Data [_dabb ],^_fgba .Data [_bgfdf ],_dfdc );_dabb +=_eabg .BytesPerLine ;_bgfdf +=_fgba .BytesPerLine ;
};if _eaadd {for _dcfb =0;_dcfb < _baaf ;_dcfb ++{for _cff =0;_cff < _gfaee ;_cff ++{_eabg .Data [_dgea +_cff ]=^_fgba .Data [_baeg +_cff ];};_dgea +=_eabg .BytesPerLine ;_baeg +=_fgba .BytesPerLine ;};};if _efbc {for _dcfb =0;_dcfb < _baaf ;_dcfb ++{_eabg .Data [_daaa ]=_ccabf (_eabg .Data [_daaa ],^_fgba .Data [_egaf ],_cggb );
_daaa +=_eabg .BytesPerLine ;_egaf +=_fgba .BytesPerLine ;};};case PixSrcOrDst :for _dcfb =0;_dcfb < _baaf ;_dcfb ++{_eabg .Data [_dabb ]=_ccabf (_eabg .Data [_dabb ],_fgba .Data [_bgfdf ]|_eabg .Data [_dabb ],_dfdc );_dabb +=_eabg .BytesPerLine ;_bgfdf +=_fgba .BytesPerLine ;
};if _eaadd {for _dcfb =0;_dcfb < _baaf ;_dcfb ++{for _cff =0;_cff < _gfaee ;_cff ++{_eabg .Data [_dgea +_cff ]|=_fgba .Data [_baeg +_cff ];};_dgea +=_eabg .BytesPerLine ;_baeg +=_fgba .BytesPerLine ;};};if _efbc {for _dcfb =0;_dcfb < _baaf ;_dcfb ++{_eabg .Data [_daaa ]=_ccabf (_eabg .Data [_daaa ],_fgba .Data [_egaf ]|_eabg .Data [_daaa ],_cggb );
_daaa +=_eabg .BytesPerLine ;_egaf +=_fgba .BytesPerLine ;};};case PixSrcAndDst :for _dcfb =0;_dcfb < _baaf ;_dcfb ++{_eabg .Data [_dabb ]=_ccabf (_eabg .Data [_dabb ],_fgba .Data [_bgfdf ]&_eabg .Data [_dabb ],_dfdc );_dabb +=_eabg .BytesPerLine ;_bgfdf +=_fgba .BytesPerLine ;
};if _eaadd {for _dcfb =0;_dcfb < _baaf ;_dcfb ++{for _cff =0;_cff < _gfaee ;_cff ++{_eabg .Data [_dgea +_cff ]&=_fgba .Data [_baeg +_cff ];};_dgea +=_eabg .BytesPerLine ;_baeg +=_fgba .BytesPerLine ;};};if _efbc {for _dcfb =0;_dcfb < _baaf ;_dcfb ++{_eabg .Data [_daaa ]=_ccabf (_eabg .Data [_daaa ],_fgba .Data [_egaf ]&_eabg .Data [_daaa ],_cggb );
_daaa +=_eabg .BytesPerLine ;_egaf +=_fgba .BytesPerLine ;};};case PixSrcXorDst :for _dcfb =0;_dcfb < _baaf ;_dcfb ++{_eabg .Data [_dabb ]=_ccabf (_eabg .Data [_dabb ],_fgba .Data [_bgfdf ]^_eabg .Data [_dabb ],_dfdc );_dabb +=_eabg .BytesPerLine ;_bgfdf +=_fgba .BytesPerLine ;
};if _eaadd {for _dcfb =0;_dcfb < _baaf ;_dcfb ++{for _cff =0;_cff < _gfaee ;_cff ++{_eabg .Data [_dgea +_cff ]^=_fgba .Data [_baeg +_cff ];};_dgea +=_eabg .BytesPerLine ;_baeg +=_fgba .BytesPerLine ;};};if _efbc {for _dcfb =0;_dcfb < _baaf ;_dcfb ++{_eabg .Data [_daaa ]=_ccabf (_eabg .Data [_daaa ],_fgba .Data [_egaf ]^_eabg .Data [_daaa ],_cggb );
_daaa +=_eabg .BytesPerLine ;_egaf +=_fgba .BytesPerLine ;};};case PixNotSrcOrDst :for _dcfb =0;_dcfb < _baaf ;_dcfb ++{_eabg .Data [_dabb ]=_ccabf (_eabg .Data [_dabb ],^(_fgba .Data [_bgfdf ])|_eabg .Data [_dabb ],_dfdc );_dabb +=_eabg .BytesPerLine ;
_bgfdf +=_fgba .BytesPerLine ;};if _eaadd {for _dcfb =0;_dcfb < _baaf ;_dcfb ++{for _cff =0;_cff < _gfaee ;_cff ++{_eabg .Data [_dgea +_cff ]|=^(_fgba .Data [_baeg +_cff ]);};_dgea +=_eabg .BytesPerLine ;_baeg +=_fgba .BytesPerLine ;};};if _efbc {for _dcfb =0;
_dcfb < _baaf ;_dcfb ++{_eabg .Data [_daaa ]=_ccabf (_eabg .Data [_daaa ],^(_fgba .Data [_egaf ])|_eabg .Data [_daaa ],_cggb );_daaa +=_eabg .BytesPerLine ;_egaf +=_fgba .BytesPerLine ;};};case PixNotSrcAndDst :for _dcfb =0;_dcfb < _baaf ;_dcfb ++{_eabg .Data [_dabb ]=_ccabf (_eabg .Data [_dabb ],^(_fgba .Data [_bgfdf ])&_eabg .Data [_dabb ],_dfdc );
_dabb +=_eabg .BytesPerLine ;_bgfdf +=_fgba .BytesPerLine ;};if _eaadd {for _dcfb =0;_dcfb < _baaf ;_dcfb ++{for _cff =0;_cff < _gfaee ;_cff ++{_eabg .Data [_dgea +_cff ]&=^_fgba .Data [_baeg +_cff ];};_dgea +=_eabg .BytesPerLine ;_baeg +=_fgba .BytesPerLine ;
};};if _efbc {for _dcfb =0;_dcfb < _baaf ;_dcfb ++{_eabg .Data [_daaa ]=_ccabf (_eabg .Data [_daaa ],^(_fgba .Data [_egaf ])&_eabg .Data [_daaa ],_cggb );_daaa +=_eabg .BytesPerLine ;_egaf +=_fgba .BytesPerLine ;};};case PixSrcOrNotDst :for _dcfb =0;_dcfb < _baaf ;
_dcfb ++{_eabg .Data [_dabb ]=_ccabf (_eabg .Data [_dabb ],_fgba .Data [_bgfdf ]|^(_eabg .Data [_dabb ]),_dfdc );_dabb +=_eabg .BytesPerLine ;_bgfdf +=_fgba .BytesPerLine ;};if _eaadd {for _dcfb =0;_dcfb < _baaf ;_dcfb ++{for _cff =0;_cff < _gfaee ;_cff ++{_eabg .Data [_dgea +_cff ]=_fgba .Data [_baeg +_cff ]|^(_eabg .Data [_dgea +_cff ]);
};_dgea +=_eabg .BytesPerLine ;_baeg +=_fgba .BytesPerLine ;};};if _efbc {for _dcfb =0;_dcfb < _baaf ;_dcfb ++{_eabg .Data [_daaa ]=_ccabf (_eabg .Data [_daaa ],_fgba .Data [_egaf ]|^(_eabg .Data [_daaa ]),_cggb );_daaa +=_eabg .BytesPerLine ;_egaf +=_fgba .BytesPerLine ;
};};case PixSrcAndNotDst :for _dcfb =0;_dcfb < _baaf ;_dcfb ++{_eabg .Data [_dabb ]=_ccabf (_eabg .Data [_dabb ],_fgba .Data [_bgfdf ]&^(_eabg .Data [_dabb ]),_dfdc );_dabb +=_eabg .BytesPerLine ;_bgfdf +=_fgba .BytesPerLine ;};if _eaadd {for _dcfb =0;
_dcfb < _baaf ;_dcfb ++{for _cff =0;_cff < _gfaee ;_cff ++{_eabg .Data [_dgea +_cff ]=_fgba .Data [_baeg +_cff ]&^(_eabg .Data [_dgea +_cff ]);};_dgea +=_eabg .BytesPerLine ;_baeg +=_fgba .BytesPerLine ;};};if _efbc {for _dcfb =0;_dcfb < _baaf ;_dcfb ++{_eabg .Data [_daaa ]=_ccabf (_eabg .Data [_daaa ],_fgba .Data [_egaf ]&^(_eabg .Data [_daaa ]),_cggb );
_daaa +=_eabg .BytesPerLine ;_egaf +=_fgba .BytesPerLine ;};};case PixNotPixSrcOrDst :for _dcfb =0;_dcfb < _baaf ;_dcfb ++{_eabg .Data [_dabb ]=_ccabf (_eabg .Data [_dabb ],^(_fgba .Data [_bgfdf ]|_eabg .Data [_dabb ]),_dfdc );_dabb +=_eabg .BytesPerLine ;
_bgfdf +=_fgba .BytesPerLine ;};if _eaadd {for _dcfb =0;_dcfb < _baaf ;_dcfb ++{for _cff =0;_cff < _gfaee ;_cff ++{_eabg .Data [_dgea +_cff ]=^(_fgba .Data [_baeg +_cff ]|_eabg .Data [_dgea +_cff ]);};_dgea +=_eabg .BytesPerLine ;_baeg +=_fgba .BytesPerLine ;
};};if _efbc {for _dcfb =0;_dcfb < _baaf ;_dcfb ++{_eabg .Data [_daaa ]=_ccabf (_eabg .Data [_daaa ],^(_fgba .Data [_egaf ]|_eabg .Data [_daaa ]),_cggb );_daaa +=_eabg .BytesPerLine ;_egaf +=_fgba .BytesPerLine ;};};case PixNotPixSrcAndDst :for _dcfb =0;
_dcfb < _baaf ;_dcfb ++{_eabg .Data [_dabb ]=_ccabf (_eabg .Data [_dabb ],^(_fgba .Data [_bgfdf ]&_eabg .Data [_dabb ]),_dfdc );_dabb +=_eabg .BytesPerLine ;_bgfdf +=_fgba .BytesPerLine ;};if _eaadd {for _dcfb =0;_dcfb < _baaf ;_dcfb ++{for _cff =0;_cff < _gfaee ;
_cff ++{_eabg .Data [_dgea +_cff ]=^(_fgba .Data [_baeg +_cff ]&_eabg .Data [_dgea +_cff ]);};_dgea +=_eabg .BytesPerLine ;_baeg +=_fgba .BytesPerLine ;};};if _efbc {for _dcfb =0;_dcfb < _baaf ;_dcfb ++{_eabg .Data [_daaa ]=_ccabf (_eabg .Data [_daaa ],^(_fgba .Data [_egaf ]&_eabg .Data [_daaa ]),_cggb );
_daaa +=_eabg .BytesPerLine ;_egaf +=_fgba .BytesPerLine ;};};case PixNotPixSrcXorDst :for _dcfb =0;_dcfb < _baaf ;_dcfb ++{_eabg .Data [_dabb ]=_ccabf (_eabg .Data [_dabb ],^(_fgba .Data [_bgfdf ]^_eabg .Data [_dabb ]),_dfdc );_dabb +=_eabg .BytesPerLine ;
_bgfdf +=_fgba .BytesPerLine ;};if _eaadd {for _dcfb =0;_dcfb < _baaf ;_dcfb ++{for _cff =0;_cff < _gfaee ;_cff ++{_eabg .Data [_dgea +_cff ]=^(_fgba .Data [_baeg +_cff ]^_eabg .Data [_dgea +_cff ]);};_dgea +=_eabg .BytesPerLine ;_baeg +=_fgba .BytesPerLine ;
};};if _efbc {for _dcfb =0;_dcfb < _baaf ;_dcfb ++{_eabg .Data [_daaa ]=_ccabf (_eabg .Data [_daaa ],^(_fgba .Data [_egaf ]^_eabg .Data [_daaa ]),_cggb );_daaa +=_eabg .BytesPerLine ;_egaf +=_fgba .BytesPerLine ;};};default:_gc .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070e\u0072\u0061\u0074o\u0072:\u0020\u0025\u0064",_acgea );
return _e .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");};return nil ;};func ColorAtGrayscale (x ,y ,bitsPerColor ,bytesPerLine int ,data []byte ,decode []float64 )(_f .Color ,error ){switch bitsPerColor {case 1:return ColorAtGray1BPC (x ,y ,bytesPerLine ,data ,decode );
case 2:return ColorAtGray2BPC (x ,y ,bytesPerLine ,data ,decode );case 4:return ColorAtGray4BPC (x ,y ,bytesPerLine ,data ,decode );case 8:return ColorAtGray8BPC (x ,y ,bytesPerLine ,data ,decode );case 16:return ColorAtGray16BPC (x ,y ,bytesPerLine ,data ,decode );
default:return nil ,_be .Errorf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0067\u0072\u0061\u0079\u0020\u0073c\u0061\u006c\u0065\u0020\u0062\u0069\u0074s\u0020\u0070\u0065\u0072\u0020\u0063\u006f\u006c\u006f\u0072\u0020a\u006d\u006f\u0075\u006e\u0074\u003a\u0020\u0027\u0025\u0064\u0027",bitsPerColor );
};};func ColorAtNRGBA (x ,y ,width ,bytesPerLine ,bitsPerColor int ,data ,alpha []byte ,decode []float64 )(_f .Color ,error ){switch bitsPerColor {case 4:return ColorAtNRGBA16 (x ,y ,width ,bytesPerLine ,data ,alpha ,decode );case 8:return ColorAtNRGBA32 (x ,y ,width ,data ,alpha ,decode );
case 16:return ColorAtNRGBA64 (x ,y ,width ,data ,alpha ,decode );default:return nil ,_be .Errorf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064 \u0072\u0067\u0062\u0020b\u0069\u0074\u0073\u0020\u0070\u0065\u0072\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u0061\u006d\u006f\u0075\u006e\u0074\u003a\u0020\u0027\u0025\u0064\u0027",bitsPerColor );
};};func _ega (_cfe *Monochrome ,_ccc int ,_gcc []byte )(_eac *Monochrome ,_afb error ){const _fbg ="\u0072\u0065d\u0075\u0063\u0065R\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079";if _cfe ==nil {return nil ,_e .New ("\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");
};if _ccc < 1||_ccc > 4{return nil ,_e .New ("\u006c\u0065\u0076\u0065\u006c\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0069\u006e\u0020\u0073e\u0074\u0020\u007b\u0031\u002c\u0032\u002c\u0033\u002c\u0034\u007d");};if _cfe .Height <=1{return nil ,_e .New ("\u0073\u006f\u0075rc\u0065\u0020\u0068\u0065\u0069\u0067\u0068\u0074\u0020m\u0075s\u0074 \u0062e\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0027\u0032\u0027");
};_eac =_gad (_cfe .Width /2,_cfe .Height /2);if _gcc ==nil {_gcc =_edc ();};_bca :=_cacc (_cfe .BytesPerLine ,2*_eac .BytesPerLine );switch _ccc {case 1:_afb =_gbcc (_cfe ,_eac ,_gcc ,_bca );case 2:_afb =_fbcf (_cfe ,_eac ,_gcc ,_bca );case 3:_afb =_cea (_cfe ,_eac ,_gcc ,_bca );
case 4:_afb =_egb (_cfe ,_eac ,_gcc ,_bca );};if _afb !=nil {return nil ,_afb ;};return _eac ,nil ;};func _dcc (_eda ,_bf *Monochrome )(_bc error ){_ec :=_bf .BytesPerLine ;_ee :=_eda .BytesPerLine ;_ga :=_bf .BytesPerLine *4-_eda .BytesPerLine ;var (_cb ,_ffg byte ;
_ecb uint32 ;_bef ,_agc ,_cgf ,_fc ,_adg ,_bcd ,_dag int ;);for _cgf =0;_cgf < _bf .Height ;_cgf ++{_bef =_cgf *_ec ;_agc =4*_cgf *_ee ;for _fc =0;_fc < _ec ;_fc ++{_cb =_bf .Data [_bef +_fc ];_ecb =_bd [_cb ];_bcd =_agc +_fc *4;if _ga !=0&&(_fc +1)*4> _eda .BytesPerLine {for _adg =_ga ;
_adg > 0;_adg --{_ffg =byte ((_ecb >>uint (_adg *8))&0xff);_dag =_bcd +(_ga -_adg );if _bc =_eda .setByte (_dag ,_ffg );_bc !=nil {return _bc ;};};}else if _bc =_eda .setFourBytes (_bcd ,_ecb );_bc !=nil {return _bc ;};if _bc =_eda .setFourBytes (_agc +_fc *4,_bd [_bf .Data [_bef +_fc ]]);
_bc !=nil {return _bc ;};};for _adg =1;_adg < 4;_adg ++{for _fc =0;_fc < _ee ;_fc ++{if _bc =_eda .setByte (_agc +_adg *_ee +_fc ,_eda .Data [_agc +_fc ]);_bc !=nil {return _bc ;};};};};return nil ;};func (_cbgaa *NRGBA16 )Set (x ,y int ,c _f .Color ){_cagg :=y *_cbgaa .BytesPerLine +x *3/2;
if _cagg +1>=len (_cbgaa .Data ){return ;};_abdcc :=NRGBA16Model .Convert (c ).(_f .NRGBA );_cbgaa .setNRGBA (x ,y ,_cagg ,_abdcc );};var _ Image =&RGBA32 {};func _bbdd (_egbf *_b .NYCbCrA ,_fbf NRGBA ,_ddcd _b .Rectangle ){for _efdb :=0;_efdb < _ddcd .Max .X ;
_efdb ++{for _efcd :=0;_efcd < _ddcd .Max .Y ;_efcd ++{_cfga :=_egbf .NYCbCrAAt (_efdb ,_efcd );_fbf .SetNRGBA (_efdb ,_efcd ,_fada (_cfga ));};};};func _gab (_begg _f .Gray )_f .CMYK {return _f .CMYK {K :0xff-_begg .Y }};func AddDataPadding (width ,height ,bitsPerComponent ,colorComponents int ,data []byte )([]byte ,error ){_ecfb :=BytesPerLine (width ,bitsPerComponent ,colorComponents );
if _ecfb ==width *colorComponents *bitsPerComponent /8{return data ,nil ;};_caab :=width *colorComponents *bitsPerComponent ;_adgdc :=_ecfb *8;_ddfd :=8-(_adgdc -_caab );_bgbd :=_dg .NewReader (data );_fged :=_ecfb -1;_ccfc :=make ([]byte ,_fged );_gce :=make ([]byte ,height *_ecfb );
_afge :=_dg .NewWriterMSB (_gce );var _cgcd uint64 ;var _gfgf error ;for _eaaa :=0;_eaaa < height ;_eaaa ++{_ ,_gfgf =_bgbd .Read (_ccfc );if _gfgf !=nil {return nil ,_gfgf ;};_ ,_gfgf =_afge .Write (_ccfc );if _gfgf !=nil {return nil ,_gfgf ;};_cgcd ,_gfgf =_bgbd .ReadBits (byte (_ddfd ));
if _gfgf !=nil {return nil ,_gfgf ;};_ ,_gfgf =_afge .WriteBits (_cgcd ,_ddfd );if _gfgf !=nil {return nil ,_gfgf ;};_afge .FinishByte ();};return _gce ,nil ;};func IsGrayImgBlackAndWhite (i *_b .Gray )bool {return _bebe (i )};func _debe (_cgc NRGBA ,_adgc Gray ,_agfe _b .Rectangle ){for _dcdd :=0;
_dcdd < _agfe .Max .X ;_dcdd ++{for _dada :=0;_dada < _agfe .Max .Y ;_dada ++{_dgbec :=_ddf (_cgc .NRGBAAt (_dcdd ,_dada ));_adgc .SetGray (_dcdd ,_dada ,_dgbec );};};};func (_eea *Gray2 )At (x ,y int )_f .Color {_dcf ,_ :=_eea .ColorAt (x ,y );return _dcf };
func NewImageBase (width int ,height int ,bitsPerComponent int ,colorComponents int ,data []byte ,alpha []byte ,decode []float64 )ImageBase {_fccf :=ImageBase {Width :width ,Height :height ,BitsPerComponent :bitsPerComponent ,ColorComponents :colorComponents ,Data :data ,Alpha :alpha ,Decode :decode ,BytesPerLine :BytesPerLine (width ,bitsPerComponent ,colorComponents )};
if data ==nil {_fccf .Data =make ([]byte ,height *_fccf .BytesPerLine );};return _fccf ;};type SMasker interface{HasAlpha ()bool ;GetAlpha ()[]byte ;MakeAlpha ();};func (_gbff *RGBA32 )Set (x ,y int ,c _f .Color ){_cbfg :=y *_gbff .Width +x ;_agbf :=3*_cbfg ;
if _agbf +2>=len (_gbff .Data ){return ;};_acfc :=_f .RGBAModel .Convert (c ).(_f .RGBA );_gbff .setRGBA (_cbfg ,_acfc );};func (_fge *monochromeThresholdConverter )Convert (img _b .Image )(Image ,error ){if _dccd ,_cbfd :=img .(*Monochrome );_cbfd {return _dccd .Copy (),nil ;
};_ddga :=img .Bounds ();_gfbe ,_decf :=NewImage (_ddga .Max .X ,_ddga .Max .Y ,1,1,nil ,nil ,nil );if _decf !=nil {return nil ,_decf ;};_gfbe .(*Monochrome ).ModelThreshold =_fge .Threshold ;for _cbbc :=0;_cbbc < _ddga .Max .X ;_cbbc ++{for _ebd :=0;_ebd < _ddga .Max .Y ;
_ebd ++{_cbbcg :=img .At (_cbbc ,_ebd );_gfbe .Set (_cbbc ,_ebd ,_cbbcg );};};return _gfbe ,nil ;};func ColorAtGray8BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_f .Gray ,error ){_dafd :=y *bytesPerLine +x ;if _dafd >=len (data ){return _f .Gray {},_be .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_efbf :=data [_dafd ];if len (decode )==2{_efbf =uint8 (uint32 (LinearInterpolate (float64 (_efbf ),0,255,decode [0],decode [1]))&0xff);};return _f .Gray {Y :_efbf },nil ;};func (_cega *RGBA32 )ColorModel ()_f .Model {return _f .NRGBAModel };func _fcfa (_cecd *Monochrome ,_deba ,_ddda ,_baddd ,_eabd int ,_ebbe RasterOperator ,_ebee *Monochrome ,_cddb ,_fdec int )error {var (_fgaf byte ;
_ggff int ;_bga int ;_egadf ,_cbfa int ;_bfca ,_bdcf int ;);_cbfc :=_baddd >>3;_ggfa :=_baddd &7;if _ggfa > 0{_fgaf =_ffdb [_ggfa ];};_ggff =_ebee .BytesPerLine *_fdec +(_cddb >>3);_bga =_cecd .BytesPerLine *_ddda +(_deba >>3);switch _ebbe {case PixSrc :for _bfca =0;
_bfca < _eabd ;_bfca ++{_egadf =_ggff +_bfca *_ebee .BytesPerLine ;_cbfa =_bga +_bfca *_cecd .BytesPerLine ;for _bdcf =0;_bdcf < _cbfc ;_bdcf ++{_cecd .Data [_cbfa ]=_ebee .Data [_egadf ];_cbfa ++;_egadf ++;};if _ggfa > 0{_cecd .Data [_cbfa ]=_ccabf (_cecd .Data [_cbfa ],_ebee .Data [_egadf ],_fgaf );
};};case PixNotSrc :for _bfca =0;_bfca < _eabd ;_bfca ++{_egadf =_ggff +_bfca *_ebee .BytesPerLine ;_cbfa =_bga +_bfca *_cecd .BytesPerLine ;for _bdcf =0;_bdcf < _cbfc ;_bdcf ++{_cecd .Data [_cbfa ]=^(_ebee .Data [_egadf ]);_cbfa ++;_egadf ++;};if _ggfa > 0{_cecd .Data [_cbfa ]=_ccabf (_cecd .Data [_cbfa ],^_ebee .Data [_egadf ],_fgaf );
};};case PixSrcOrDst :for _bfca =0;_bfca < _eabd ;_bfca ++{_egadf =_ggff +_bfca *_ebee .BytesPerLine ;_cbfa =_bga +_bfca *_cecd .BytesPerLine ;for _bdcf =0;_bdcf < _cbfc ;_bdcf ++{_cecd .Data [_cbfa ]|=_ebee .Data [_egadf ];_cbfa ++;_egadf ++;};if _ggfa > 0{_cecd .Data [_cbfa ]=_ccabf (_cecd .Data [_cbfa ],_ebee .Data [_egadf ]|_cecd .Data [_cbfa ],_fgaf );
};};case PixSrcAndDst :for _bfca =0;_bfca < _eabd ;_bfca ++{_egadf =_ggff +_bfca *_ebee .BytesPerLine ;_cbfa =_bga +_bfca *_cecd .BytesPerLine ;for _bdcf =0;_bdcf < _cbfc ;_bdcf ++{_cecd .Data [_cbfa ]&=_ebee .Data [_egadf ];_cbfa ++;_egadf ++;};if _ggfa > 0{_cecd .Data [_cbfa ]=_ccabf (_cecd .Data [_cbfa ],_ebee .Data [_egadf ]&_cecd .Data [_cbfa ],_fgaf );
};};case PixSrcXorDst :for _bfca =0;_bfca < _eabd ;_bfca ++{_egadf =_ggff +_bfca *_ebee .BytesPerLine ;_cbfa =_bga +_bfca *_cecd .BytesPerLine ;for _bdcf =0;_bdcf < _cbfc ;_bdcf ++{_cecd .Data [_cbfa ]^=_ebee .Data [_egadf ];_cbfa ++;_egadf ++;};if _ggfa > 0{_cecd .Data [_cbfa ]=_ccabf (_cecd .Data [_cbfa ],_ebee .Data [_egadf ]^_cecd .Data [_cbfa ],_fgaf );
};};case PixNotSrcOrDst :for _bfca =0;_bfca < _eabd ;_bfca ++{_egadf =_ggff +_bfca *_ebee .BytesPerLine ;_cbfa =_bga +_bfca *_cecd .BytesPerLine ;for _bdcf =0;_bdcf < _cbfc ;_bdcf ++{_cecd .Data [_cbfa ]|=^(_ebee .Data [_egadf ]);_cbfa ++;_egadf ++;};if _ggfa > 0{_cecd .Data [_cbfa ]=_ccabf (_cecd .Data [_cbfa ],^(_ebee .Data [_egadf ])|_cecd .Data [_cbfa ],_fgaf );
};};case PixNotSrcAndDst :for _bfca =0;_bfca < _eabd ;_bfca ++{_egadf =_ggff +_bfca *_ebee .BytesPerLine ;_cbfa =_bga +_bfca *_cecd .BytesPerLine ;for _bdcf =0;_bdcf < _cbfc ;_bdcf ++{_cecd .Data [_cbfa ]&=^(_ebee .Data [_egadf ]);_cbfa ++;_egadf ++;};
if _ggfa > 0{_cecd .Data [_cbfa ]=_ccabf (_cecd .Data [_cbfa ],^(_ebee .Data [_egadf ])&_cecd .Data [_cbfa ],_fgaf );};};case PixSrcOrNotDst :for _bfca =0;_bfca < _eabd ;_bfca ++{_egadf =_ggff +_bfca *_ebee .BytesPerLine ;_cbfa =_bga +_bfca *_cecd .BytesPerLine ;
for _bdcf =0;_bdcf < _cbfc ;_bdcf ++{_cecd .Data [_cbfa ]=_ebee .Data [_egadf ]|^(_cecd .Data [_cbfa ]);_cbfa ++;_egadf ++;};if _ggfa > 0{_cecd .Data [_cbfa ]=_ccabf (_cecd .Data [_cbfa ],_ebee .Data [_egadf ]|^(_cecd .Data [_cbfa ]),_fgaf );};};case PixSrcAndNotDst :for _bfca =0;
_bfca < _eabd ;_bfca ++{_egadf =_ggff +_bfca *_ebee .BytesPerLine ;_cbfa =_bga +_bfca *_cecd .BytesPerLine ;for _bdcf =0;_bdcf < _cbfc ;_bdcf ++{_cecd .Data [_cbfa ]=_ebee .Data [_egadf ]&^(_cecd .Data [_cbfa ]);_cbfa ++;_egadf ++;};if _ggfa > 0{_cecd .Data [_cbfa ]=_ccabf (_cecd .Data [_cbfa ],_ebee .Data [_egadf ]&^(_cecd .Data [_cbfa ]),_fgaf );
};};case PixNotPixSrcOrDst :for _bfca =0;_bfca < _eabd ;_bfca ++{_egadf =_ggff +_bfca *_ebee .BytesPerLine ;_cbfa =_bga +_bfca *_cecd .BytesPerLine ;for _bdcf =0;_bdcf < _cbfc ;_bdcf ++{_cecd .Data [_cbfa ]=^(_ebee .Data [_egadf ]|_cecd .Data [_cbfa ]);
_cbfa ++;_egadf ++;};if _ggfa > 0{_cecd .Data [_cbfa ]=_ccabf (_cecd .Data [_cbfa ],^(_ebee .Data [_egadf ]|_cecd .Data [_cbfa ]),_fgaf );};};case PixNotPixSrcAndDst :for _bfca =0;_bfca < _eabd ;_bfca ++{_egadf =_ggff +_bfca *_ebee .BytesPerLine ;_cbfa =_bga +_bfca *_cecd .BytesPerLine ;
for _bdcf =0;_bdcf < _cbfc ;_bdcf ++{_cecd .Data [_cbfa ]=^(_ebee .Data [_egadf ]&_cecd .Data [_cbfa ]);_cbfa ++;_egadf ++;};if _ggfa > 0{_cecd .Data [_cbfa ]=_ccabf (_cecd .Data [_cbfa ],^(_ebee .Data [_egadf ]&_cecd .Data [_cbfa ]),_fgaf );};};case PixNotPixSrcXorDst :for _bfca =0;
_bfca < _eabd ;_bfca ++{_egadf =_ggff +_bfca *_ebee .BytesPerLine ;_cbfa =_bga +_bfca *_cecd .BytesPerLine ;for _bdcf =0;_bdcf < _cbfc ;_bdcf ++{_cecd .Data [_cbfa ]=^(_ebee .Data [_egadf ]^_cecd .Data [_cbfa ]);_cbfa ++;_egadf ++;};if _ggfa > 0{_cecd .Data [_cbfa ]=_ccabf (_cecd .Data [_cbfa ],^(_ebee .Data [_egadf ]^_cecd .Data [_cbfa ]),_fgaf );
};};default:_gc .Log .Debug ("\u0050\u0072ov\u0069\u0064\u0065d\u0020\u0069\u006e\u0076ali\u0064 r\u0061\u0073\u0074\u0065\u0072\u0020\u006fpe\u0072\u0061\u0074\u006f\u0072\u003a\u0020%\u0076",_ebbe );return _e .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");
};return nil ;};func (_eaca *Gray4 )ColorModel ()_f .Model {return Gray4Model };func _bfbe (_aecb _b .Image )(Image ,error ){if _fggc ,_efcc :=_aecb .(*NRGBA64 );_efcc {return _fggc .Copy (),nil ;};_cabac ,_adf ,_ace :=_gcfb (_aecb ,2);_edbc ,_gcee :=NewImage (_cabac .Max .X ,_cabac .Max .Y ,16,3,nil ,_ace ,nil );
if _gcee !=nil {return nil ,_gcee ;};_gbdg (_aecb ,_edbc ,_cabac );if len (_ace )!=0&&!_adf {if _cebdb :=_fege (_ace ,_edbc );_cebdb !=nil {return nil ,_cebdb ;};};return _edbc ,nil ;};type NRGBA16 struct{ImageBase };func _bebe (_bacf *_b .Gray )bool {for _gbfc :=0;
_gbfc < len (_bacf .Pix );_gbfc ++{if !_daef (_bacf .Pix [_gbfc ]){return false ;};};return true ;};func (_gbe *CMYK32 )Validate ()error {if len (_gbe .Data )!=4*_gbe .Width *_gbe .Height {return _e .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};func IsPowerOf2 (n uint )bool {return n > 0&&(n &(n -1))==0};func LinearInterpolate (x ,xmin ,xmax ,ymin ,ymax float64 )float64 {if _ge .Abs (xmax -xmin )< 0.000001{return ymin ;};_caef :=ymin +(x -xmin )*(ymax -ymin )/(xmax -xmin );return _caef ;
};func _cada (_febdc CMYK ,_ede NRGBA ,_bbgf _b .Rectangle ){for _facff :=0;_facff < _bbgf .Max .X ;_facff ++{for _cfb :=0;_cfb < _bbgf .Max .Y ;_cfb ++{_dcad :=_febdc .CMYKAt (_facff ,_cfb );_ede .SetNRGBA (_facff ,_cfb ,_ffcf (_dcad ));};};};func (_afdc *NRGBA16 )Copy ()Image {return &NRGBA16 {ImageBase :_afdc .copy ()}};
func (_ddec *RGBA32 )Copy ()Image {return &RGBA32 {ImageBase :_ddec .copy ()}};func _gggg (_bbfc *Monochrome ,_bbb ,_ffb ,_cbba ,_gcga int ,_gfbf RasterOperator ,_dgcb *Monochrome ,_befa ,_abdc int )error {if _bbfc ==nil {return _e .New ("\u006e\u0069\u006c\u0020\u0027\u0064\u0065\u0073\u0074\u0027\u0020\u0042i\u0074\u006d\u0061\u0070");
};if _gfbf ==PixDst {return nil ;};switch _gfbf {case PixClr ,PixSet ,PixNotDst :_eec (_bbfc ,_bbb ,_ffb ,_cbba ,_gcga ,_gfbf );return nil ;};if _dgcb ==nil {_gc .Log .Debug ("\u0052a\u0073\u0074e\u0072\u004f\u0070\u0065r\u0061\u0074\u0069o\u006e\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020bi\u0074\u006d\u0061p\u0020\u0069s\u0020\u006e\u006f\u0074\u0020\u0064e\u0066\u0069n\u0065\u0064");
return _e .New ("\u006e\u0069l\u0020\u0027\u0073r\u0063\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _bfce :=_bgc (_bbfc ,_bbb ,_ffb ,_cbba ,_gcga ,_gfbf ,_dgcb ,_befa ,_abdc );_bfce !=nil {return _bfce ;};return nil ;};func (_deeb *Monochrome )copy ()*Monochrome {_bcgd :=_gad (_deeb .Width ,_deeb .Height );
_bcgd .ModelThreshold =_deeb .ModelThreshold ;_bcgd .Data =make ([]byte ,len (_deeb .Data ));copy (_bcgd .Data ,_deeb .Data );if len (_deeb .Decode )!=0{_bcgd .Decode =make ([]float64 ,len (_deeb .Decode ));copy (_bcgd .Decode ,_deeb .Decode );};if len (_deeb .Alpha )!=0{_bcgd .Alpha =make ([]byte ,len (_deeb .Alpha ));
copy (_bcgd .Alpha ,_deeb .Alpha );};return _bcgd ;};func _gcfb (_eedde _b .Image ,_ebdd int )(_b .Rectangle ,bool ,[]byte ){_dcgg :=_eedde .Bounds ();var (_gaeb bool ;_fgbd []byte ;);switch _gbgac :=_eedde .(type ){case SMasker :_gaeb =_gbgac .HasAlpha ();
case NRGBA ,RGBA ,*_b .RGBA64 ,nrgba64 ,*_b .NYCbCrA :_fgbd =make ([]byte ,_dcgg .Max .X *_dcgg .Max .Y *_ebdd );case *_b .Paletted :if !_gbgac .Opaque (){_fgbd =make ([]byte ,_dcgg .Max .X *_dcgg .Max .Y *_ebdd );};};return _dcgg ,_gaeb ,_fgbd ;};func (_cecb *NRGBA16 )Validate ()error {if len (_cecb .Data )!=3*_cecb .Width *_cecb .Height /2{return _e .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};func _fege (_bgfa []byte ,_bgaa Image )error {_cfcda :=true ;for _ecbad :=0;_ecbad < len (_bgfa );_ecbad ++{if _bgfa [_ecbad ]!=0xff{_cfcda =false ;break ;};};if _cfcda {switch _febd :=_bgaa .(type ){case *NRGBA32 :_febd .Alpha =nil ;case *NRGBA64 :_febd .Alpha =nil ;
default:return _be .Errorf ("i\u006ete\u0072n\u0061l\u0020\u0065\u0072\u0072\u006fr\u0020\u002d\u0020i\u006d\u0061\u0067\u0065\u0020s\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070e\u0020\u002a\u004eRGB\u0041\u0033\u0032\u0020\u006f\u0072 \u002a\u004e\u0052\u0047\u0042\u0041\u0036\u0034\u0020\u0062\u0075\u0074 \u0069s\u003a\u0020\u0025\u0054",_bgaa );
};};return nil ;};func (_fgde *NRGBA64 )Validate ()error {if len (_fgde .Data )!=3*2*_fgde .Width *_fgde .Height {return _e .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};var _ NRGBA =&NRGBA16 {};func _fada (_bgbc _f .NYCbCrA )_f .NRGBA {_dbf :=int32 (_bgbc .Y )*0x10101;_dgec :=int32 (_bgbc .Cb )-128;_aec :=int32 (_bgbc .Cr )-128;_cca :=_dbf +91881*_aec ;if uint32 (_cca )&0xff000000==0{_cca >>=8;}else {_cca =^(_cca >>31)&0xffff;
};_dda :=_dbf -22554*_dgec -46802*_aec ;if uint32 (_dda )&0xff000000==0{_dda >>=8;}else {_dda =^(_dda >>31)&0xffff;};_ebg :=_dbf +116130*_dgec ;if uint32 (_ebg )&0xff000000==0{_ebg >>=8;}else {_ebg =^(_ebg >>31)&0xffff;};return _f .NRGBA {R :uint8 (_cca >>8),G :uint8 (_dda >>8),B :uint8 (_ebg >>8),A :_bgbc .A };
};func (_gegc *NRGBA64 )Bounds ()_b .Rectangle {return _b .Rectangle {Max :_b .Point {X :_gegc .Width ,Y :_gegc .Height }};};func (_aaag *NRGBA32 )At (x ,y int )_f .Color {_fcec ,_ :=_aaag .ColorAt (x ,y );return _fcec };func (_gafc *Monochrome )ResolveDecode ()error {if len (_gafc .Decode )!=2{return nil ;
};if _gafc .Decode [0]==1&&_gafc .Decode [1]==0{if _ggfc :=_gafc .InverseData ();_ggfc !=nil {return _ggfc ;};_gafc .Decode =nil ;};return nil ;};func (_agbb *Monochrome )ColorAt (x ,y int )(_f .Color ,error ){return ColorAtGray1BPC (x ,y ,_agbb .BytesPerLine ,_agbb .Data ,_agbb .Decode );
};type shift int ;func _cdgf (_fdaa _b .Image )(Image ,error ){if _accb ,_ffab :=_fdaa .(*Gray8 );_ffab {return _accb .Copy (),nil ;};_dfef :=_fdaa .Bounds ();_ccad ,_ecaf :=NewImage (_dfef .Max .X ,_dfef .Max .Y ,8,1,nil ,nil ,nil );if _ecaf !=nil {return nil ,_ecaf ;
};_bfg (_fdaa ,_ccad ,_dfef );return _ccad ,nil ;};func MonochromeModel (threshold uint8 )_f .Model {return monochromeModel (threshold )};func (_defag *NRGBA32 )ColorModel ()_f .Model {return _f .NRGBAModel };func _faeag (_gbba NRGBA ,_cfafb RGBA ,_agcf _b .Rectangle ){for _afbfb :=0;
_afbfb < _agcf .Max .X ;_afbfb ++{for _cead :=0;_cead < _agcf .Max .Y ;_cead ++{_daaf :=_gbba .NRGBAAt (_afbfb ,_cead );_cfafb .SetRGBA (_afbfb ,_cead ,_bfde (_daaf ));};};};func _ggb (_gfee _f .CMYK )_f .Gray {_bgd ,_acbg ,_cdgc :=_f .CMYKToRGB (_gfee .C ,_gfee .M ,_gfee .Y ,_gfee .K );
_abgf :=(19595*uint32 (_bgd )+38470*uint32 (_acbg )+7471*uint32 (_cdgc )+1<<7)>>16;return _f .Gray {Y :uint8 (_abgf )};};type RGBA32 struct{ImageBase };func _dacd (_gfb _f .Gray )_f .NRGBA {return _f .NRGBA {R :_gfb .Y ,G :_gfb .Y ,B :_gfb .Y ,A :0xff}};
func (_ddcfd *NRGBA16 )Bounds ()_b .Rectangle {return _b .Rectangle {Max :_b .Point {X :_ddcfd .Width ,Y :_ddcfd .Height }};};func (_eefd *NRGBA64 )Base ()*ImageBase {return &_eefd .ImageBase };func ColorAtNRGBA16 (x ,y ,width ,bytesPerLine int ,data ,alpha []byte ,decode []float64 )(_f .NRGBA ,error ){_gabb :=y *bytesPerLine +x *3/2;
if _gabb +1>=len (data ){return _f .NRGBA {},_dacg (x ,y );};const (_daeeb =0xf;_ddac =uint8 (0xff););_bacgb :=_ddac ;if alpha !=nil {_cadb :=y *BytesPerLine (width ,4,1);if _cadb < len (alpha ){if x %2==0{_bacgb =(alpha [_cadb ]>>uint (4))&_daeeb ;}else {_bacgb =alpha [_cadb ]&_daeeb ;
};_bacgb |=_bacgb <<4;};};var _acbd ,_efbe ,_eabc uint8 ;if x *3%2==0{_acbd =(data [_gabb ]>>uint (4))&_daeeb ;_efbe =data [_gabb ]&_daeeb ;_eabc =(data [_gabb +1]>>uint (4))&_daeeb ;}else {_acbd =data [_gabb ]&_daeeb ;_efbe =(data [_gabb +1]>>uint (4))&_daeeb ;
_eabc =data [_gabb +1]&_daeeb ;};if len (decode )==6{_acbd =uint8 (uint32 (LinearInterpolate (float64 (_acbd ),0,15,decode [0],decode [1]))&0xf);_efbe =uint8 (uint32 (LinearInterpolate (float64 (_efbe ),0,15,decode [2],decode [3]))&0xf);_eabc =uint8 (uint32 (LinearInterpolate (float64 (_eabc ),0,15,decode [4],decode [5]))&0xf);
};return _f .NRGBA {R :(_acbd <<4)|(_acbd &0xf),G :(_efbe <<4)|(_efbe &0xf),B :(_eabc <<4)|(_eabc &0xf),A :_bacgb },nil ;};func (_acbc *NRGBA64 )ColorAt (x ,y int )(_f .Color ,error ){return ColorAtNRGBA64 (x ,y ,_acbc .Width ,_acbc .Data ,_acbc .Alpha ,_acbc .Decode );
};func _cec (_ggf _f .NRGBA )_f .CMYK {_gfg ,_ebe ,_bbe ,_ :=_ggf .RGBA ();_cceg ,_dgggd ,_gde ,_fad :=_f .RGBToCMYK (uint8 (_gfg >>8),uint8 (_ebe >>8),uint8 (_bbe >>8));return _f .CMYK {C :_cceg ,M :_dgggd ,Y :_gde ,K :_fad };};func _acce (_gdad Gray ,_ead NRGBA ,_bcdc _b .Rectangle ){for _edac :=0;
_edac < _bcdc .Max .X ;_edac ++{for _dfab :=0;_dfab < _bcdc .Max .Y ;_dfab ++{_dcae :=_ageg (_ead .NRGBAAt (_edac ,_dfab ));_gdad .SetGray (_edac ,_dfab ,_dcae );};};};func (_fbcc *Gray8 )ColorModel ()_f .Model {return _f .GrayModel };func _bbgb (_ccbfb _b .Image )(Image ,error ){if _cegf ,_gged :=_ccbfb .(*Gray4 );
_gged {return _cegf .Copy (),nil ;};_fbga :=_ccbfb .Bounds ();_agg ,_deafb :=NewImage (_fbga .Max .X ,_fbga .Max .Y ,4,1,nil ,nil ,nil );if _deafb !=nil {return nil ,_deafb ;};_bfg (_ccbfb ,_agg ,_fbga );return _agg ,nil ;};func (_ceca *NRGBA32 )setRGBA (_geaaa int ,_cffe _f .NRGBA ){_bdgc :=3*_geaaa ;
_ceca .Data [_bdgc ]=_cffe .R ;_ceca .Data [_bdgc +1]=_cffe .G ;_ceca .Data [_bdgc +2]=_cffe .B ;if _geaaa < len (_ceca .Alpha ){_ceca .Alpha [_geaaa ]=_cffe .A ;};};func (_cdc *CMYK32 )At (x ,y int )_f .Color {_bgbg ,_ :=_cdc .ColorAt (x ,y );return _bgbg };
var _ _b .Image =&RGBA32 {};func (_gbg *Gray2 )Validate ()error {if len (_gbg .Data )!=_gbg .Height *_gbg .BytesPerLine {return ErrInvalidImage ;};return nil ;};func ColorAtCMYK (x ,y ,width int ,data []byte ,decode []float64 )(_f .CMYK ,error ){_gac :=4*(y *width +x );
if _gac +3>=len (data ){return _f .CMYK {},_be .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};C :=data [_gac ]&0xff;M :=data [_gac +1]&0xff;Y :=data [_gac +2]&0xff;K :=data [_gac +3]&0xff;if len (decode )==8{C =uint8 (uint32 (LinearInterpolate (float64 (C ),0,255,decode [0],decode [1]))&0xff);M =uint8 (uint32 (LinearInterpolate (float64 (M ),0,255,decode [2],decode [3]))&0xff);
Y =uint8 (uint32 (LinearInterpolate (float64 (Y ),0,255,decode [4],decode [5]))&0xff);K =uint8 (uint32 (LinearInterpolate (float64 (K ),0,255,decode [6],decode [7]))&0xff);};return _f .CMYK {C :C ,M :M ,Y :Y ,K :K },nil ;};func (_edb *Monochrome )At (x ,y int )_f .Color {_ebff ,_ :=_edb .ColorAt (x ,y );
return _ebff };func _bec (_cgbc _b .Image )(Image ,error ){if _dfabd ,_bcca :=_cgbc .(*Gray2 );_bcca {return _dfabd .Copy (),nil ;};_egbg :=_cgbc .Bounds ();_begb ,_dcag :=NewImage (_egbg .Max .X ,_egbg .Max .Y ,2,1,nil ,nil ,nil );if _dcag !=nil {return nil ,_dcag ;
};_bfg (_cgbc ,_begb ,_egbg );return _begb ,nil ;};func (_fbaf *Monochrome )Copy ()Image {return &Monochrome {ImageBase :_fbaf .ImageBase .copy (),ModelThreshold :_fbaf .ModelThreshold };};func (_gbgfe *ImageBase )copy ()ImageBase {_eagdc :=*_gbgfe ;_eagdc .Data =make ([]byte ,len (_gbgfe .Data ));
copy (_eagdc .Data ,_gbgfe .Data );return _eagdc ;};func (_ggc *Gray16 )SetGray (x ,y int ,g _f .Gray ){_dcac :=(y *_ggc .BytesPerLine /2+x )*2;if _dcac +1>=len (_ggc .Data ){return ;};_ggc .Data [_dcac ]=g .Y ;_ggc .Data [_dcac +1]=g .Y ;};type RGBA interface{RGBAAt (_egaa ,_ecdg int )_f .RGBA ;
SetRGBA (_gbca ,_dcbe int ,_cfed _f .RGBA );};var _ Image =&CMYK32 {};func (_dcec *Gray8 )Validate ()error {if len (_dcec .Data )!=_dcec .Height *_dcec .BytesPerLine {return ErrInvalidImage ;};return nil ;};func (_abedd *NRGBA32 )ColorAt (x ,y int )(_f .Color ,error ){return ColorAtNRGBA32 (x ,y ,_abedd .Width ,_abedd .Data ,_abedd .Alpha ,_abedd .Decode );
};var _ Gray =&Gray8 {};var _ Image =&Gray2 {};func (_dcaeg *Gray16 )ColorModel ()_f .Model {return _f .Gray16Model };func _dagg (_cabf ,_abg CMYK ,_feff _b .Rectangle ){for _beb :=0;_beb < _feff .Max .X ;_beb ++{for _eed :=0;_eed < _feff .Max .Y ;_eed ++{_abg .SetCMYK (_beb ,_eed ,_cabf .CMYKAt (_beb ,_eed ));
};};};func _cg (_feb *Monochrome ,_ae int ,_dd []uint )(*Monochrome ,error ){_ca :=_ae *_feb .Width ;_fd :=_ae *_feb .Height ;_gb :=_gad (_ca ,_fd );for _dc ,_fb :=range _dd {var _geb error ;switch _fb {case 2:_geb =_ag (_gb ,_feb );case 4:_geb =_dcc (_gb ,_feb );
case 8:_geb =_gea (_gb ,_feb );};if _geb !=nil {return nil ,_geb ;};if _dc !=len (_dd )-1{_feb =_gb .copy ();};};return _gb ,nil ;};func _bfde (_eeeb _f .NRGBA )_f .RGBA {_fefef ,_daa ,_bac ,_fec :=_eeeb .RGBA ();return _f .RGBA {R :uint8 (_fefef >>8),G :uint8 (_daa >>8),B :uint8 (_bac >>8),A :uint8 (_fec >>8)};
};func (_fece *Gray16 )ColorAt (x ,y int )(_f .Color ,error ){return ColorAtGray16BPC (x ,y ,_fece .BytesPerLine ,_fece .Data ,_fece .Decode );};func (_dad *Monochrome )SetGray (x ,y int ,g _f .Gray ){_fdg :=y *_dad .BytesPerLine +x >>3;if _fdg > len (_dad .Data )-1{return ;
};g =_cda (g ,monochromeModel (_dad .ModelThreshold ));_dad .setGray (x ,g ,_fdg );};type Image interface{_d .Image ;Base ()*ImageBase ;Copy ()Image ;Pix ()[]byte ;ColorAt (_caec ,_cfcg int )(_f .Color ,error );Validate ()error ;};func _cagb (_cfecf CMYK ,_ecaa RGBA ,_afcb _b .Rectangle ){for _edfgf :=0;
_edfgf < _afcb .Max .X ;_edfgf ++{for _gddd :=0;_gddd < _afcb .Max .Y ;_gddd ++{_deac :=_cfecf .CMYKAt (_edfgf ,_gddd );_ecaa .SetRGBA (_edfgf ,_gddd ,_edfc (_deac ));};};};func _egag (_dedgc _b .Image )(Image ,error ){if _fadaf ,_fdfb :=_dedgc .(*NRGBA32 );
_fdfb {return _fadaf .Copy (),nil ;};_dbbcc ,_ddb ,_afbf :=_gcfb (_dedgc ,1);_acf ,_afgec :=NewImage (_dbbcc .Max .X ,_dbbcc .Max .Y ,8,3,nil ,_afbf ,nil );if _afgec !=nil {return nil ,_afgec ;};_gfafd (_dedgc ,_acf ,_dbbcc );if len (_afbf )!=0&&!_ddb {if _bcef :=_fege (_afbf ,_acf );
_bcef !=nil {return nil ,_bcef ;};};return _acf ,nil ;};type Gray8 struct{ImageBase };func (_agbg monochromeModel )Convert (c _f .Color )_f .Color {_aaf :=_f .GrayModel .Convert (c ).(_f .Gray );return _cda (_aaf ,_agbg );};func _eg (_dfdg *Monochrome ,_gd ...int )(_cce *Monochrome ,_eaa error ){if _dfdg ==nil {return nil ,_e .New ("\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");
};if len (_gd )==0{return nil ,_e .New ("\u0074h\u0065\u0072e\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020o\u006e\u0065\u0020\u006c\u0065\u0076\u0065\u006c\u0020\u006f\u0066 \u0072\u0065\u0064\u0075\u0063\u0074\u0069\u006f\u006e");
};_dfb :=_edc ();_cce =_dfdg ;for _ ,_bba :=range _gd {if _bba <=0{break ;};_cce ,_eaa =_ega (_cce ,_bba ,_dfb );if _eaa !=nil {return nil ,_eaa ;};};return _cce ,nil ;};func (_bega *Monochrome )setIndexedBit (_ceg int ){_bega .Data [(_ceg >>3)]|=0x80>>uint (_ceg &7)};
func _baad (_ebf _f .RGBA )_f .CMYK {_caa ,_faf ,_cbea ,_dbb :=_f .RGBToCMYK (_ebf .R ,_ebf .G ,_ebf .B );return _f .CMYK {C :_caa ,M :_faf ,Y :_cbea ,K :_dbb };};func _facfa (_ccda *_b .Gray ,_ggbb uint8 )*_b .Gray {_agfee :=_ccda .Bounds ();_gggda :=_b .NewGray (_agfee );
for _cece :=0;_cece < _agfee .Dx ();_cece ++{for _agdg :=0;_agdg < _agfee .Dy ();_agdg ++{_cbbe :=_ccda .GrayAt (_cece ,_agdg );_gggda .SetGray (_cece ,_agdg ,_f .Gray {Y :_abfbc (_cbbe .Y ,_ggbb )});};};return _gggda ;};func (_gee *NRGBA64 )At (x ,y int )_f .Color {_fdcf ,_ :=_gee .ColorAt (x ,y );
return _fdcf };func (_fdgd *Gray16 )Validate ()error {if len (_fdgd .Data )!=_fdgd .Height *_fdgd .BytesPerLine {return ErrInvalidImage ;};return nil ;};func (_fdfa *Monochrome )ReduceBinary (factor float64 )(*Monochrome ,error ){_dcee :=_fddea (uint (factor ));
if !IsPowerOf2 (uint (factor )){_dcee ++;};_fabc :=make ([]int ,_dcee );for _dfe :=range _fabc {_fabc [_dfe ]=4;};_gga ,_gcg :=_eg (_fdfa ,_fabc ...);if _gcg !=nil {return nil ,_gcg ;};return _gga ,nil ;};var (_fefe =_fbd ();_bd =_dgf ();_dgba =_cbe ();
);type Gray interface{GrayAt (_dfag ,_cba int )_f .Gray ;SetGray (_gfaf ,_fgfe int ,_dfc _f .Gray );};func ConverterFunc (converterFunc func (_baf _b .Image )(Image ,error ))ColorConverter {return colorConverter {_ffa :converterFunc };};func _fbcf (_cab ,_aaa *Monochrome ,_aca []byte ,_bab int )(_fgfab error ){var (_ece ,_aade ,_dae ,_bfec ,_daee ,_bcab ,_fcb ,_aagd int ;
_efd ,_gfe ,_adc ,_cgff uint32 ;_cdg ,_ccb byte ;_dab uint16 ;);_cfg :=make ([]byte ,4);_gag :=make ([]byte ,4);for _dae =0;_dae < _cab .Height -1;_dae ,_bfec =_dae +2,_bfec +1{_ece =_dae *_cab .BytesPerLine ;_aade =_bfec *_aaa .BytesPerLine ;for _daee ,_bcab =0,0;
_daee < _bab ;_daee ,_bcab =_daee +4,_bcab +1{for _fcb =0;_fcb < 4;_fcb ++{_aagd =_ece +_daee +_fcb ;if _aagd <=len (_cab .Data )-1&&_aagd < _ece +_cab .BytesPerLine {_cfg [_fcb ]=_cab .Data [_aagd ];}else {_cfg [_fcb ]=0x00;};_aagd =_ece +_cab .BytesPerLine +_daee +_fcb ;
if _aagd <=len (_cab .Data )-1&&_aagd < _ece +(2*_cab .BytesPerLine ){_gag [_fcb ]=_cab .Data [_aagd ];}else {_gag [_fcb ]=0x00;};};_efd =_c .BigEndian .Uint32 (_cfg );_gfe =_c .BigEndian .Uint32 (_gag );_adc =_efd &_gfe ;_adc |=_adc <<1;_cgff =_efd |_gfe ;
_cgff &=_cgff <<1;_gfe =_adc |_cgff ;_gfe &=0xaaaaaaaa;_efd =_gfe |(_gfe <<7);_cdg =byte (_efd >>24);_ccb =byte ((_efd >>8)&0xff);_aagd =_aade +_bcab ;if _aagd +1==len (_aaa .Data )-1||_aagd +1>=_aade +_aaa .BytesPerLine {if _fgfab =_aaa .setByte (_aagd ,_aca [_cdg ]);
_fgfab !=nil {return _be .Errorf ("\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_aagd );};}else {_dab =(uint16 (_aca [_cdg ])<<8)|uint16 (_aca [_ccb ]);if _fgfab =_aaa .setTwoBytes (_aagd ,_dab );_fgfab !=nil {return _be .Errorf ("s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_aagd );
};_bcab ++;};};};return nil ;};func (_befg *Gray8 )Set (x ,y int ,c _f .Color ){_gfde :=y *_befg .BytesPerLine +x ;if _gfde > len (_befg .Data )-1{return ;};_deea :=_f .GrayModel .Convert (c );_befg .Data [_gfde ]=_deea .(_f .Gray ).Y ;};func (_gfec *Gray2 )ColorModel ()_f .Model {return Gray2Model };
func (_gcd *ImageBase )newAlpha (){_afgd :=BytesPerLine (_gcd .Width ,_gcd .BitsPerComponent ,1);_gcd .Alpha =make ([]byte ,_gcd .Height *_afgd );};func (_dgeb *ImageBase )setByte (_ebdf int ,_acd byte )error {if _ebdf > len (_dgeb .Data )-1{return _e .New ("\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_dgeb .Data [_ebdf ]=_acd ;return nil ;};func (_gdec *Gray4 )GrayAt (x ,y int )_f .Gray {_dgbg ,_ :=ColorAtGray4BPC (x ,y ,_gdec .BytesPerLine ,_gdec .Data ,_gdec .Decode );return _dgbg ;};func (_geaa *Monochrome )Validate ()error {if len (_geaa .Data )!=_geaa .Height *_geaa .BytesPerLine {return ErrInvalidImage ;
};return nil ;};func _fbdad (_dccf _f .Gray )_f .Gray {_feec :=_dccf .Y >>6;_feec |=_feec <<2;_dccf .Y =_feec |_feec <<4;return _dccf ;};func (_fafc *Monochrome )setGray (_caba int ,_cbbf _f .Gray ,_abgd int ){if _cbbf .Y ==0{_fafc .clearBit (_abgd ,_caba );
}else {_fafc .setGrayBit (_abgd ,_caba );};};func NextPowerOf2 (n uint )uint {if IsPowerOf2 (n ){return n ;};return 1<<(_fddea (n )+1);};func _edfc (_aeff _f .CMYK )_f .RGBA {_gfd ,_ffaf ,_bedf :=_f .CMYKToRGB (_aeff .C ,_aeff .M ,_aeff .Y ,_aeff .K );
return _f .RGBA {R :_gfd ,G :_ffaf ,B :_bedf ,A :0xff};};func (_addf *Monochrome )ScaleLow (width ,height int )(*Monochrome ,error ){if width < 0||height < 0{return nil ,_e .New ("\u0070\u0072\u006f\u0076\u0069\u0064e\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0077\u0069\u0064t\u0068\u0020\u0061\u006e\u0064\u0020\u0068e\u0069\u0067\u0068\u0074");
};_ecgg :=_gad (width ,height );_adgd :=make ([]int ,height );_gba :=make ([]int ,width );_gfeb :=float64 (_addf .Width )/float64 (width );_gfadd :=float64 (_addf .Height )/float64 (height );for _agcad :=0;_agcad < height ;_agcad ++{_adgd [_agcad ]=int (_ge .Min (_gfadd *float64 (_agcad )+0.5,float64 (_addf .Height -1)));
};for _gbfg :=0;_gbfg < width ;_gbfg ++{_gba [_gbfg ]=int (_ge .Min (_gfeb *float64 (_gbfg )+0.5,float64 (_addf .Width -1)));};_efda :=-1;_eeg :=byte (0);for _bbaf :=0;_bbaf < height ;_bbaf ++{_ceba :=_adgd [_bbaf ]*_addf .BytesPerLine ;_cef :=_bbaf *_ecgg .BytesPerLine ;
for _cag :=0;_cag < width ;_cag ++{_ccac :=_gba [_cag ];if _ccac !=_efda {_eeg =_addf .getBit (_ceba ,_ccac );if _eeg !=0{_ecgg .setBit (_cef ,_cag );};_efda =_ccac ;}else {if _eeg !=0{_ecgg .setBit (_cef ,_cag );};};};};return _ecgg ,nil ;};func _bggc (_ggfdc nrgba64 ,_deaec NRGBA ,_eeebe _b .Rectangle ){for _ecbc :=0;
_ecbc < _eeebe .Max .X ;_ecbc ++{for _abfbb :=0;_abfbb < _eeebe .Max .Y ;_abfbb ++{_bfga :=_ggfdc .NRGBA64At (_ecbc ,_abfbb );_deaec .SetNRGBA (_ecbc ,_abfbb ,_gdb (_bfga ));};};};func (_eeee *Gray2 )Copy ()Image {return &Gray2 {ImageBase :_eeee .copy ()}};
func _cea (_fdd ,_edge *Monochrome ,_bcf []byte ,_gbdd int )(_cfge error ){var (_ddd ,_bce ,_eee ,_dff ,_beea ,_cdf ,_dfa ,_bcda int ;_deb ,_afa ,_bcdac ,_ade uint32 ;_fee ,_fbda byte ;_abc uint16 ;);_fga :=make ([]byte ,4);_bgba :=make ([]byte ,4);for _eee =0;
_eee < _fdd .Height -1;_eee ,_dff =_eee +2,_dff +1{_ddd =_eee *_fdd .BytesPerLine ;_bce =_dff *_edge .BytesPerLine ;for _beea ,_cdf =0,0;_beea < _gbdd ;_beea ,_cdf =_beea +4,_cdf +1{for _dfa =0;_dfa < 4;_dfa ++{_bcda =_ddd +_beea +_dfa ;if _bcda <=len (_fdd .Data )-1&&_bcda < _ddd +_fdd .BytesPerLine {_fga [_dfa ]=_fdd .Data [_bcda ];
}else {_fga [_dfa ]=0x00;};_bcda =_ddd +_fdd .BytesPerLine +_beea +_dfa ;if _bcda <=len (_fdd .Data )-1&&_bcda < _ddd +(2*_fdd .BytesPerLine ){_bgba [_dfa ]=_fdd .Data [_bcda ];}else {_bgba [_dfa ]=0x00;};};_deb =_c .BigEndian .Uint32 (_fga );_afa =_c .BigEndian .Uint32 (_bgba );
_bcdac =_deb &_afa ;_bcdac |=_bcdac <<1;_ade =_deb |_afa ;_ade &=_ade <<1;_afa =_bcdac &_ade ;_afa &=0xaaaaaaaa;_deb =_afa |(_afa <<7);_fee =byte (_deb >>24);_fbda =byte ((_deb >>8)&0xff);_bcda =_bce +_cdf ;if _bcda +1==len (_edge .Data )-1||_bcda +1>=_bce +_edge .BytesPerLine {if _cfge =_edge .setByte (_bcda ,_bcf [_fee ]);
_cfge !=nil {return _be .Errorf ("\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_bcda );};}else {_abc =(uint16 (_bcf [_fee ])<<8)|uint16 (_bcf [_fbda ]);if _cfge =_edge .setTwoBytes (_bcda ,_abc );_cfge !=nil {return _be .Errorf ("s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_bcda );
};_cdf ++;};};};return nil ;};func (_dac *CMYK32 )SetCMYK (x ,y int ,c _f .CMYK ){_adgg :=4*(y *_dac .Width +x );if _adgg +3>=len (_dac .Data ){return ;};_dac .Data [_adgg ]=c .C ;_dac .Data [_adgg +1]=c .M ;_dac .Data [_adgg +2]=c .Y ;_dac .Data [_adgg +3]=c .K ;
};func (_adaf *RGBA32 )At (x ,y int )_f .Color {_bcgdg ,_ :=_adaf .ColorAt (x ,y );return _bcgdg };func _bgc (_efad *Monochrome ,_cdfe ,_fbeg int ,_eef ,_cdeb int ,_feee RasterOperator ,_cccb *Monochrome ,_ecee ,_dbeg int )error {var _fgag ,_gafbg ,_cfgf ,_dcaa int ;
if _cdfe < 0{_ecee -=_cdfe ;_eef +=_cdfe ;_cdfe =0;};if _ecee < 0{_cdfe -=_ecee ;_eef +=_ecee ;_ecee =0;};_fgag =_cdfe +_eef -_efad .Width ;if _fgag > 0{_eef -=_fgag ;};_gafbg =_ecee +_eef -_cccb .Width ;if _gafbg > 0{_eef -=_gafbg ;};if _fbeg < 0{_dbeg -=_fbeg ;
_cdeb +=_fbeg ;_fbeg =0;};if _dbeg < 0{_fbeg -=_dbeg ;_cdeb +=_dbeg ;_dbeg =0;};_cfgf =_fbeg +_cdeb -_efad .Height ;if _cfgf > 0{_cdeb -=_cfgf ;};_dcaa =_dbeg +_cdeb -_cccb .Height ;if _dcaa > 0{_cdeb -=_dcaa ;};if _eef <=0||_cdeb <=0{return nil ;};var _cadd error ;
switch {case _cdfe &7==0&&_ecee &7==0:_cadd =_fcfa (_efad ,_cdfe ,_fbeg ,_eef ,_cdeb ,_feee ,_cccb ,_ecee ,_dbeg );case _cdfe &7==_ecee &7:_cadd =_beeea (_efad ,_cdfe ,_fbeg ,_eef ,_cdeb ,_feee ,_cccb ,_ecee ,_dbeg );default:_cadd =_beff (_efad ,_cdfe ,_fbeg ,_eef ,_cdeb ,_feee ,_cccb ,_ecee ,_dbeg );
};if _cadd !=nil {return _cadd ;};return nil ;};type RasterOperator int ;func BytesPerLine (width ,bitsPerComponent ,colorComponents int )int {return ((width *bitsPerComponent )*colorComponents +7)>>3;};func _dacg (_cdde int ,_cfdg int )error {return _be .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",_cdde ,_cfdg );
};func RasterOperation (dest *Monochrome ,dx ,dy ,dw ,dh int ,op RasterOperator ,src *Monochrome ,sx ,sy int )error {return _gggg (dest ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );};func (_edga *NRGBA16 )NRGBAAt (x ,y int )_f .NRGBA {_afcf ,_ :=ColorAtNRGBA16 (x ,y ,_edga .Width ,_edga .BytesPerLine ,_edga .Data ,_edga .Alpha ,_edga .Decode );
return _afcf ;};func AutoThresholdTriangle (histogram [256]int )uint8 {var _bged ,_ffceg ,_fgagd ,_egfa int ;for _ecdae :=0;_ecdae < len (histogram );_ecdae ++{if histogram [_ecdae ]> 0{_bged =_ecdae ;break ;};};if _bged > 0{_bged --;};for _gdg :=255;_gdg > 0;
_gdg --{if histogram [_gdg ]> 0{_egfa =_gdg ;break ;};};if _egfa < 255{_egfa ++;};for _fcce :=0;_fcce < 256;_fcce ++{if histogram [_fcce ]> _ffceg {_fgagd =_fcce ;_ffceg =histogram [_fcce ];};};var _bbfd bool ;if (_fgagd -_bged )< (_egfa -_fgagd ){_bbfd =true ;
var _ddee int ;_bceg :=255;for _ddee < _bceg {_bacce :=histogram [_ddee ];histogram [_ddee ]=histogram [_bceg ];histogram [_bceg ]=_bacce ;_ddee ++;_bceg --;};_bged =255-_egfa ;_fgagd =255-_fgagd ;};if _bged ==_fgagd {return uint8 (_bged );};_bfeca :=float64 (histogram [_fgagd ]);
_fedc :=float64 (_bged -_fgagd );_cfgbd :=_ge .Sqrt (_bfeca *_bfeca +_fedc *_fedc );_bfeca /=_cfgbd ;_fedc /=_cfgbd ;_cfgbd =_bfeca *float64 (_bged )+_fedc *float64 (histogram [_bged ]);_efgb :=_bged ;var _ccbda float64 ;for _ggfg :=_bged +1;_ggfg <=_fgagd ;
_ggfg ++{_bebg :=_bfeca *float64 (_ggfg )+_fedc *float64 (histogram [_ggfg ])-_cfgbd ;if _bebg > _ccbda {_efgb =_ggfg ;_ccbda =_bebg ;};};_efgb --;if _bbfd {var _ccacd int ;_fadc :=255;for _ccacd < _fadc {_dedf :=histogram [_ccacd ];histogram [_ccacd ]=histogram [_fadc ];
histogram [_fadc ]=_dedf ;_ccacd ++;_fadc --;};return uint8 (255-_efgb );};return uint8 (_efgb );};