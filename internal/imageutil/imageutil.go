//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package imageutil ;import (_g "encoding/binary";_f "errors";_b "fmt";_ab "github.com/unidoc/unipdf/v3/common";_fgd "github.com/unidoc/unipdf/v3/internal/bitwise";_fg "image";_fd "image/color";_a "image/draw";_d "math";);func (_ebb *NRGBA32 )SetNRGBA (x ,y int ,c _fd .NRGBA ){_eccde :=y *_ebb .Width +x ;
_deeg :=3*_eccde ;if _deeg +2>=len (_ebb .Data ){return ;};_ebb .setRGBA (_eccde ,c );};func _fgfa (_ccf ,_aga CMYK ,_fdc _fg .Rectangle ){for _add :=0;_add < _fdc .Max .X ;_add ++{for _ecg :=0;_ecg < _fdc .Max .Y ;_ecg ++{_aga .SetCMYK (_add ,_ecg ,_ccf .CMYKAt (_add ,_ecg ));
};};};func _fcfe (_gbega uint8 )bool {if _gbega ==0||_gbega ==255{return true ;};return false ;};func (_eeebe *ImageBase )copy ()ImageBase {_dfgd :=*_eeebe ;_dfgd .Data =make ([]byte ,len (_eeebe .Data ));copy (_dfgd .Data ,_eeebe .Data );return _dfgd ;
};func (_fgcf *RGBA32 )ColorModel ()_fd .Model {return _fd .NRGBAModel };func ColorAtNRGBA64 (x ,y ,width int ,data ,alpha []byte ,decode []float64 )(_fd .NRGBA64 ,error ){_baee :=(y *width +x )*2;_abaf :=_baee *3;if _abaf +5>=len (data ){return _fd .NRGBA64 {},_b .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};const _faddfd =0xffff;_aabe :=uint16 (_faddfd );if alpha !=nil &&len (alpha )> _baee +1{_aabe =uint16 (alpha [_baee ])<<8|uint16 (alpha [_baee +1]);};_fdadf :=uint16 (data [_abaf ])<<8|uint16 (data [_abaf +1]);_afga :=uint16 (data [_abaf +2])<<8|uint16 (data [_abaf +3]);
_ceaf :=uint16 (data [_abaf +4])<<8|uint16 (data [_abaf +5]);if len (decode )==6{_fdadf =uint16 (uint64 (LinearInterpolate (float64 (_fdadf ),0,65535,decode [0],decode [1]))&_faddfd );_afga =uint16 (uint64 (LinearInterpolate (float64 (_afga ),0,65535,decode [2],decode [3]))&_faddfd );
_ceaf =uint16 (uint64 (LinearInterpolate (float64 (_ceaf ),0,65535,decode [4],decode [5]))&_faddfd );};return _fd .NRGBA64 {R :_fdadf ,G :_afga ,B :_ceaf ,A :_aabe },nil ;};func _ebff (_ffe _fg .Image )(Image ,error ){if _gfeg ,_gfca :=_ffe .(*Gray2 );
_gfca {return _gfeg .Copy (),nil ;};_fbfc :=_ffe .Bounds ();_defe ,_eecb :=NewImage (_fbfc .Max .X ,_fbfc .Max .Y ,2,1,nil ,nil ,nil );if _eecb !=nil {return nil ,_eecb ;};_efef (_ffe ,_defe ,_fbfc );return _defe ,nil ;};func (_fcfd *Gray4 )ColorModel ()_fd .Model {return Gray4Model };
func (_cddga *NRGBA16 )Copy ()Image {return &NRGBA16 {ImageBase :_cddga .copy ()}};func _dbabd (_aced _fg .Image ,_cgeg Image ,_bdgg _fg .Rectangle ){if _gbff ,_fbce :=_aced .(SMasker );_fbce &&_gbff .HasAlpha (){_cgeg .(SMasker ).MakeAlpha ();};switch _bgbf :=_aced .(type ){case Gray :_cgbfe (_bgbf ,_cgeg .(NRGBA ),_bdgg );
case NRGBA :_gdbe (_bgbf ,_cgeg .(NRGBA ),_bdgg );case *_fg .NYCbCrA :_eddb (_bgbf ,_cgeg .(NRGBA ),_bdgg );case CMYK :_agafe (_bgbf ,_cgeg .(NRGBA ),_bdgg );case RGBA :_gdcc (_bgbf ,_cgeg .(NRGBA ),_bdgg );case nrgba64 :_agcaa (_bgbf ,_cgeg .(NRGBA ),_bdgg );
default:_ebga (_aced ,_cgeg ,_bdgg );};};func BytesPerLine (width ,bitsPerComponent ,colorComponents int )int {return ((width *bitsPerComponent )*colorComponents +7)>>3;};func (_bbef *Gray4 )Set (x ,y int ,c _fd .Color ){if x >=_bbef .Width ||y >=_bbef .Height {return ;
};_bffg :=Gray4Model .Convert (c ).(_fd .Gray );_bbef .setGray (x ,y ,_bffg );};func (_ddfd *Monochrome )getBitAt (_ffd ,_fabc int )bool {_gfe :=_fabc *_ddfd .BytesPerLine +(_ffd >>3);_eadb :=_ffd &0x07;_agf :=uint (7-_eadb );if _gfe > len (_ddfd .Data )-1{return false ;
};if (_ddfd .Data [_gfe ]>>_agf )&0x01>=1{return true ;};return false ;};func (_fdcc *Gray4 )Copy ()Image {return &Gray4 {ImageBase :_fdcc .copy ()}};func _bdca (_acf _fg .Image )(Image ,error ){if _egcbf ,_ddad :=_acf .(*Gray4 );_ddad {return _egcbf .Copy (),nil ;
};_cgcc :=_acf .Bounds ();_gdca ,_cegg :=NewImage (_cgcc .Max .X ,_cgcc .Max .Y ,4,1,nil ,nil ,nil );if _cegg !=nil {return nil ,_cegg ;};_efef (_acf ,_gdca ,_cgcc );return _gdca ,nil ;};func _afee (_feb _fd .NRGBA64 )_fd .Gray {var _abc _fd .NRGBA64 ;
if _feb ==_abc {return _fd .Gray {Y :0xff};};_gdc ,_eeeb ,_efdd ,_ :=_feb .RGBA ();_ddcc :=(19595*_gdc +38470*_eeeb +7471*_efdd +1<<15)>>24;return _fd .Gray {Y :uint8 (_ddcc )};};func (_agga *Monochrome )GrayAt (x ,y int )_fd .Gray {_cbgb ,_ :=ColorAtGray1BPC (x ,y ,_agga .BytesPerLine ,_agga .Data ,_agga .Decode );
return _cbgb ;};func (_ceab *Gray2 )ColorModel ()_fd .Model {return Gray2Model };func (_acfc *RGBA32 )RGBAAt (x ,y int )_fd .RGBA {_dbd ,_ :=ColorAtRGBA32 (x ,y ,_acfc .Width ,_acfc .Data ,_acfc .Alpha ,_acfc .Decode );return _dbd ;};func (_cbge *monochromeThresholdConverter )Convert (img _fg .Image )(Image ,error ){if _ggbg ,_dgd :=img .(*Monochrome );
_dgd {return _ggbg .Copy (),nil ;};_fdgb :=img .Bounds ();_eccf ,_dedge :=NewImage (_fdgb .Max .X ,_fdgb .Max .Y ,1,1,nil ,nil ,nil );if _dedge !=nil {return nil ,_dedge ;};_eccf .(*Monochrome ).ModelThreshold =_cbge .Threshold ;for _dde :=0;_dde < _fdgb .Max .X ;
_dde ++{for _eefc :=0;_eefc < _fdgb .Max .Y ;_eefc ++{_fgdd :=img .At (_dde ,_eefc );_eccf .Set (_dde ,_eefc ,_fgdd );};};return _eccf ,nil ;};func GetConverter (bitsPerComponent ,colorComponents int )(ColorConverter ,error ){switch colorComponents {case 1:switch bitsPerComponent {case 1:return MonochromeConverter ,nil ;
case 2:return Gray2Converter ,nil ;case 4:return Gray4Converter ,nil ;case 8:return GrayConverter ,nil ;case 16:return Gray16Converter ,nil ;};case 3:switch bitsPerComponent {case 4:return NRGBA16Converter ,nil ;case 8:return NRGBAConverter ,nil ;case 16:return NRGBA64Converter ,nil ;
};case 4:return CMYKConverter ,nil ;};return nil ,_b .Errorf ("\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0043o\u006e\u0076\u0065\u0072\u0074\u0065\u0072\u0020\u0070\u0061\u0072\u0061\u006d\u0065t\u0065\u0072\u0073\u002e\u0020\u0042\u0069\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u003a\u0020\u0025\u0064\u002c\u0020\u0043\u006f\u006co\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006et\u0073\u003a \u0025\u0064",bitsPerComponent ,colorComponents );
};func _cddd (_ggda _fg .Image )(Image ,error ){if _efca ,_fafg :=_ggda .(*NRGBA64 );_fafg {return _efca .Copy (),nil ;};_begb ,_debda ,_gdgb :=_dbbb (_ggda ,2);_egcdb ,_dgbe :=NewImage (_begb .Max .X ,_begb .Max .Y ,16,3,nil ,_gdgb ,nil );if _dgbe !=nil {return nil ,_dgbe ;
};_acgg (_ggda ,_egcdb ,_begb );if len (_gdgb )!=0&&!_debda {if _abbce :=_ebgb (_gdgb ,_egcdb );_abbce !=nil {return nil ,_abbce ;};};return _egcdb ,nil ;};func (_cabfc *ImageBase )setEightPartlyBytes (_bce ,_cce int ,_cgcba uint64 )(_cgaag error ){var (_dcb byte ;
_aafd int ;);for _dgcb :=1;_dgcb <=_cce ;_dgcb ++{_aafd =64-_dgcb *8;_dcb =byte (_cgcba >>uint (_aafd )&0xff);if _cgaag =_cabfc .setByte (_bce +_dgcb -1,_dcb );_cgaag !=nil {return _cgaag ;};};_acg :=_cabfc .BytesPerLine *8-_cabfc .Width ;if _acg ==0{return nil ;
};_aafd -=8;_dcb =byte (_cgcba >>uint (_aafd )&0xff)<<uint (_acg );if _cgaag =_cabfc .setByte (_bce +_cce ,_dcb );_cgaag !=nil {return _cgaag ;};return nil ;};func _fcg (_bbgf _fd .RGBA )_fd .CMYK {_fdg ,_dgf ,_gdf ,_dfe :=_fd .RGBToCMYK (_bbgf .R ,_bbgf .G ,_bbgf .B );
return _fd .CMYK {C :_fdg ,M :_dgf ,Y :_gdf ,K :_dfe };};func ColorAt (x ,y ,width ,bitsPerColor ,colorComponents ,bytesPerLine int ,data ,alpha []byte ,decode []float64 )(_fd .Color ,error ){switch colorComponents {case 1:return ColorAtGrayscale (x ,y ,bitsPerColor ,bytesPerLine ,data ,decode );
case 3:return ColorAtNRGBA (x ,y ,width ,bytesPerLine ,bitsPerColor ,data ,alpha ,decode );case 4:return ColorAtCMYK (x ,y ,width ,data ,decode );default:return nil ,_b .Errorf ("\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063o\u006c\u006f\u0072\u0020\u0063\u006f\u006dp\u006f\u006e\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0074h\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0064",colorComponents );
};};func LinearInterpolate (x ,xmin ,xmax ,ymin ,ymax float64 )float64 {if _d .Abs (xmax -xmin )< 0.000001{return ymin ;};_fga :=ymin +(x -xmin )*(ymax -ymin )/(xmax -xmin );return _fga ;};func (_efaf *Monochrome )ColorModel ()_fd .Model {return MonochromeModel (_efaf .ModelThreshold )};
func _fega (_aacf *Monochrome ,_geg ,_dafgb ,_deaf ,_agaf int ,_aecf RasterOperator ,_gcgf *Monochrome ,_cafc ,_cafe int )error {if _aacf ==nil {return _f .New ("\u006e\u0069\u006c\u0020\u0027\u0064\u0065\u0073\u0074\u0027\u0020\u0042i\u0074\u006d\u0061\u0070");
};if _aecf ==PixDst {return nil ;};switch _aecf {case PixClr ,PixSet ,PixNotDst :_eccfd (_aacf ,_geg ,_dafgb ,_deaf ,_agaf ,_aecf );return nil ;};if _gcgf ==nil {_ab .Log .Debug ("\u0052a\u0073\u0074e\u0072\u004f\u0070\u0065r\u0061\u0074\u0069o\u006e\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020bi\u0074\u006d\u0061p\u0020\u0069s\u0020\u006e\u006f\u0074\u0020\u0064e\u0066\u0069n\u0065\u0064");
return _f .New ("\u006e\u0069l\u0020\u0027\u0073r\u0063\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _cbgc :=_ddeg (_aacf ,_geg ,_dafgb ,_deaf ,_agaf ,_aecf ,_gcgf ,_cafc ,_cafe );_cbgc !=nil {return _cbgc ;};return nil ;};func (_agbf *Gray16 )Bounds ()_fg .Rectangle {return _fg .Rectangle {Max :_fg .Point {X :_agbf .Width ,Y :_agbf .Height }};
};func (_cddec *Gray8 )Histogram ()(_bfge [256]int ){for _gccd :=0;_gccd < len (_cddec .Data );_gccd ++{_bfge [_cddec .Data [_gccd ]]++;};return _bfge ;};func (_becfb *Monochrome )Scale (scale float64 )(*Monochrome ,error ){var _bac bool ;_dgg :=scale ;
if scale < 1{_dgg =1/scale ;_bac =true ;};_bddfg :=NextPowerOf2 (uint (_dgg ));if InDelta (float64 (_bddfg ),_dgg ,0.001){if _bac {return _becfb .ReduceBinary (_dgg );};return _becfb .ExpandBinary (int (_bddfg ));};_gab :=int (_d .RoundToEven (float64 (_becfb .Width )*scale ));
_gefg :=int (_d .RoundToEven (float64 (_becfb .Height )*scale ));return _becfb .ScaleLow (_gab ,_gefg );};func (_gbbc *CMYK32 )ColorAt (x ,y int )(_fd .Color ,error ){return ColorAtCMYK (x ,y ,_gbbc .Width ,_gbbc .Data ,_gbbc .Decode );};func (_cgae *NRGBA64 )At (x ,y int )_fd .Color {_ccedc ,_ :=_cgae .ColorAt (x ,y );
return _ccedc };func _dge ()(_ad [256]uint16 ){for _df :=0;_df < 256;_df ++{if _df &0x01!=0{_ad [_df ]|=0x3;};if _df &0x02!=0{_ad [_df ]|=0xc;};if _df &0x04!=0{_ad [_df ]|=0x30;};if _df &0x08!=0{_ad [_df ]|=0xc0;};if _df &0x10!=0{_ad [_df ]|=0x300;};if _df &0x20!=0{_ad [_df ]|=0xc00;
};if _df &0x40!=0{_ad [_df ]|=0x3000;};if _df &0x80!=0{_ad [_df ]|=0xc000;};};return _ad ;};var _ _fg .Image =&Monochrome {};func (_abf *Monochrome )setBit (_efg ,_bfad int ){_abf .Data [_efg +(_bfad >>3)]|=0x80>>uint (_bfad &7)};func (_fgc *CMYK32 )Validate ()error {if len (_fgc .Data )!=4*_fgc .Width *_fgc .Height {return _f .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};func _egdf (_ggba _fg .Image )(Image ,error ){if _dgdg ,_bged :=_ggba .(*Gray8 );_bged {return _dgdg .Copy (),nil ;};_affc :=_ggba .Bounds ();_gdcg ,_aage :=NewImage (_affc .Max .X ,_affc .Max .Y ,8,1,nil ,nil ,nil );if _aage !=nil {return nil ,_aage ;
};_efef (_ggba ,_gdcg ,_affc );return _gdcg ,nil ;};func _acef (_adg int )[]uint {var _dedg []uint ;_bf :=_adg ;_ee :=_bf /8;if _ee !=0{for _dfg :=0;_dfg < _ee ;_dfg ++{_dedg =append (_dedg ,8);};_ea :=_bf %8;_bf =0;if _ea !=0{_bf =_ea ;};};_aeeg :=_bf /4;
if _aeeg !=0{for _bfd :=0;_bfd < _aeeg ;_bfd ++{_dedg =append (_dedg ,4);};_bcd :=_bf %4;_bf =0;if _bcd !=0{_bf =_bcd ;};};_dea :=_bf /2;if _dea !=0{for _eef :=0;_eef < _dea ;_eef ++{_dedg =append (_dedg ,2);};};return _dedg ;};func (_baga *Gray4 )Histogram ()(_bbcc [256]int ){for _efeg :=0;
_efeg < _baga .Width ;_efeg ++{for _cbaf :=0;_cbaf < _baga .Height ;_cbaf ++{_bbcc [_baga .GrayAt (_efeg ,_cbaf ).Y ]++;};};return _bbcc ;};var _ Image =&Monochrome {};func _fbgb ()(_dcfd []byte ){_dcfd =make ([]byte ,256);for _cgdc :=0;_cgdc < 256;_cgdc ++{_cgc :=byte (_cgdc );
_dcfd [_cgc ]=(_cgc &0x01)|((_cgc &0x04)>>1)|((_cgc &0x10)>>2)|((_cgc &0x40)>>3)|((_cgc &0x02)<<3)|((_cgc &0x08)<<2)|((_cgc &0x20)<<1)|(_cgc &0x80);};return _dcfd ;};func _eddb (_acbc *_fg .NYCbCrA ,_cbag NRGBA ,_agdfa _fg .Rectangle ){for _ffba :=0;_ffba < _agdfa .Max .X ;
_ffba ++{for _edfa :=0;_edfa < _agdfa .Max .Y ;_edfa ++{_dded :=_acbc .NYCbCrAAt (_ffba ,_edfa );_cbag .SetNRGBA (_ffba ,_edfa ,_fbf (_dded ));};};};func (_fade *Monochrome )AddPadding ()(_cccb error ){if _gbd :=((_fade .Width *_fade .Height )+7)>>3;len (_fade .Data )< _gbd {return _b .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064a\u0074\u0061\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u003a\u0020\u0027\u0025\u0064\u0027\u002e\u0020\u0054\u0068\u0065\u0020\u0064\u0061t\u0061\u0020s\u0068\u006fu\u006c\u0064\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 l\u0065\u0061\u0073\u0074\u003a\u0020\u0027\u0025\u0064'\u0020\u0062\u0079\u0074\u0065\u0073",len (_fade .Data ),_gbd );
};_deca :=_fade .Width %8;if _deca ==0{return nil ;};_cgcb :=_fade .Width /8;_dfeg :=_fgd .NewReader (_fade .Data );_aag :=make ([]byte ,_fade .Height *_fade .BytesPerLine );_bfb :=_fgd .NewWriterMSB (_aag );_becf :=make ([]byte ,_cgcb );var (_bbd int ;
_fbec uint64 ;);for _bbd =0;_bbd < _fade .Height ;_bbd ++{if _ ,_cccb =_dfeg .Read (_becf );_cccb !=nil {return _cccb ;};if _ ,_cccb =_bfb .Write (_becf );_cccb !=nil {return _cccb ;};if _fbec ,_cccb =_dfeg .ReadBits (byte (_deca ));_cccb !=nil {return _cccb ;
};if _cccb =_bfb .WriteByte (byte (_fbec )<<uint (8-_deca ));_cccb !=nil {return _cccb ;};};_fade .Data =_bfb .Data ();return nil ;};func (_ggbd *Gray8 )Bounds ()_fg .Rectangle {return _fg .Rectangle {Max :_fg .Point {X :_ggbd .Width ,Y :_ggbd .Height }};
};func _bccb (_cgeb ,_afgd Gray ,_bgag _fg .Rectangle ){for _fef :=0;_fef < _bgag .Max .X ;_fef ++{for _fabg :=0;_fabg < _bgag .Max .Y ;_fabg ++{_afgd .SetGray (_fef ,_fabg ,_cgeb .GrayAt (_fef ,_fabg ));};};};func (_fbag *NRGBA32 )setRGBA (_ccac int ,_fdef _fd .NRGBA ){_ccgda :=3*_ccac ;
_fbag .Data [_ccgda ]=_fdef .R ;_fbag .Data [_ccgda +1]=_fdef .G ;_fbag .Data [_ccgda +2]=_fdef .B ;if _ccac < len (_fbag .Alpha ){_fbag .Alpha [_ccac ]=_fdef .A ;};};func (_gadb *NRGBA16 )SetNRGBA (x ,y int ,c _fd .NRGBA ){_bbcg :=y *_gadb .BytesPerLine +x *3/2;
if _bbcg +1>=len (_gadb .Data ){return ;};c =_dgdf (c );_gadb .setNRGBA (x ,y ,_bbcg ,c );};func (_degg *Monochrome )At (x ,y int )_fd .Color {_ddbf ,_ :=_degg .ColorAt (x ,y );return _ddbf };var _ Image =&CMYK32 {};type Gray16 struct{ImageBase };func (_bbeg *Gray16 )Validate ()error {if len (_bbeg .Data )!=_bbeg .Height *_bbeg .BytesPerLine {return ErrInvalidImage ;
};return nil ;};func (_cec monochromeModel )Convert (c _fd .Color )_fd .Color {_bbgc :=_fd .GrayModel .Convert (c ).(_fd .Gray );return _aea (_bbgc ,_cec );};func (_eebf *Gray16 )ColorAt (x ,y int )(_fd .Color ,error ){return ColorAtGray16BPC (x ,y ,_eebf .BytesPerLine ,_eebf .Data ,_eebf .Decode );
};func _ffdf (_eccg uint )uint {var _bafb uint ;for _eccg !=0{_eccg >>=1;_bafb ++;};return _bafb -1;};func (_ceea *Gray8 )GrayAt (x ,y int )_fd .Gray {_dfcfc ,_ :=ColorAtGray8BPC (x ,y ,_ceea .BytesPerLine ,_ceea .Data ,_ceea .Decode );return _dfcfc ;};
func _ddgc (_dfef _fg .Image )(Image ,error ){if _cbe ,_cfag :=_dfef .(*Gray16 );_cfag {return _cbe .Copy (),nil ;};_dcga :=_dfef .Bounds ();_ecccf ,_gbfb :=NewImage (_dcga .Max .X ,_dcga .Max .Y ,16,1,nil ,nil ,nil );if _gbfb !=nil {return nil ,_gbfb ;
};_efef (_dfef ,_ecccf ,_dcga );return _ecccf ,nil ;};func ConverterFunc (converterFunc func (_ccc _fg .Image )(Image ,error ))ColorConverter {return colorConverter {_dcd :converterFunc };};func (_dgfg *NRGBA64 )SetNRGBA64 (x ,y int ,c _fd .NRGBA64 ){_ddegf :=(y *_dgfg .Width +x )*2;
_ebefd :=_ddegf *3;if _ebefd +5>=len (_dgfg .Data ){return ;};_dgfg .setNRGBA64 (_ebefd ,c ,_ddegf );};func (_gefb *NRGBA16 )Set (x ,y int ,c _fd .Color ){_fadda :=y *_gefb .BytesPerLine +x *3/2;if _fadda +1>=len (_gefb .Data ){return ;};_fgff :=NRGBA16Model .Convert (c ).(_fd .NRGBA );
_gefb .setNRGBA (x ,y ,_fadda ,_fgff );};func (_aafb *Monochrome )Validate ()error {if len (_aafb .Data )!=_aafb .Height *_aafb .BytesPerLine {return ErrInvalidImage ;};return nil ;};func _afeb (_gbdb _fg .Image )(Image ,error ){if _fegcd ,_dfbee :=_gbdb .(*RGBA32 );
_dfbee {return _fegcd .Copy (),nil ;};_ccafd ,_gfac ,_efgb :=_dbbb (_gbdb ,1);_abac :=&RGBA32 {ImageBase :NewImageBase (_ccafd .Max .X ,_ccafd .Max .Y ,8,3,nil ,_efgb ,nil )};_bdggd (_gbdb ,_abac ,_ccafd );if len (_efgb )!=0&&!_gfac {if _bgff :=_ebgb (_efgb ,_abac );
_bgff !=nil {return nil ,_bgff ;};};return _abac ,nil ;};func (_ffaff *Gray4 )Validate ()error {if len (_ffaff .Data )!=_ffaff .Height *_ffaff .BytesPerLine {return ErrInvalidImage ;};return nil ;};var _ _fg .Image =&NRGBA16 {};func (_gggb *Gray2 )ColorAt (x ,y int )(_fd .Color ,error ){return ColorAtGray2BPC (x ,y ,_gggb .BytesPerLine ,_gggb .Data ,_gggb .Decode );
};func _fbga (_gbeb int ,_feba int )error {return _b .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",_gbeb ,_feba );
};func (_gecg *ImageBase )newAlpha (){_egcde :=BytesPerLine (_gecg .Width ,_gecg .BitsPerComponent ,1);_gecg .Alpha =make ([]byte ,_gecg .Height *_egcde );};func (_fadd *Gray4 )At (x ,y int )_fd .Color {_ecdb ,_ :=_fadd .ColorAt (x ,y );return _ecdb };
func (_gba *Monochrome )getBit (_dbfa ,_dfed int )uint8 {return _gba .Data [_dbfa +(_dfed >>3)]>>uint (7-(_dfed &7))&1;};func init (){_acfe ()};func _feg (_dbgf _fd .CMYK )_fd .RGBA {_fdad ,_cbda ,_gcfb :=_fd .CMYKToRGB (_dbgf .C ,_dbgf .M ,_dbgf .Y ,_dbgf .K );
return _fd .RGBA {R :_fdad ,G :_cbda ,B :_gcfb ,A :0xff};};func _bee (_gf ,_gbf *Monochrome ,_dba []byte ,_bdbe int )(_ddc error ){var (_bfac ,_efcb ,_dacc ,_bff ,_adc ,_gecc ,_aca ,_gef int ;_eag ,_cbd uint32 ;_ced ,_fgg byte ;_degf uint16 ;);_cgf :=make ([]byte ,4);
_eff :=make ([]byte ,4);for _dacc =0;_dacc < _gf .Height -1;_dacc ,_bff =_dacc +2,_bff +1{_bfac =_dacc *_gf .BytesPerLine ;_efcb =_bff *_gbf .BytesPerLine ;for _adc ,_gecc =0,0;_adc < _bdbe ;_adc ,_gecc =_adc +4,_gecc +1{for _aca =0;_aca < 4;_aca ++{_gef =_bfac +_adc +_aca ;
if _gef <=len (_gf .Data )-1&&_gef < _bfac +_gf .BytesPerLine {_cgf [_aca ]=_gf .Data [_gef ];}else {_cgf [_aca ]=0x00;};_gef =_bfac +_gf .BytesPerLine +_adc +_aca ;if _gef <=len (_gf .Data )-1&&_gef < _bfac +(2*_gf .BytesPerLine ){_eff [_aca ]=_gf .Data [_gef ];
}else {_eff [_aca ]=0x00;};};_eag =_g .BigEndian .Uint32 (_cgf );_cbd =_g .BigEndian .Uint32 (_eff );_cbd |=_eag ;_cbd |=_cbd <<1;_cbd &=0xaaaaaaaa;_eag =_cbd |(_cbd <<7);_ced =byte (_eag >>24);_fgg =byte ((_eag >>8)&0xff);_gef =_efcb +_gecc ;if _gef +1==len (_gbf .Data )-1||_gef +1>=_efcb +_gbf .BytesPerLine {_gbf .Data [_gef ]=_dba [_ced ];
}else {_degf =(uint16 (_dba [_ced ])<<8)|uint16 (_dba [_fgg ]);if _ddc =_gbf .setTwoBytes (_gef ,_degf );_ddc !=nil {return _b .Errorf ("s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_gef );
};_gecc ++;};};};return nil ;};func (_eded *RGBA32 )SetRGBA (x ,y int ,c _fd .RGBA ){_fbega :=y *_eded .Width +x ;_cfde :=3*_fbega ;if _cfde +2>=len (_eded .Data ){return ;};_eded .setRGBA (_fbega ,c );};func _bfgf (_fgec CMYK ,_ffac Gray ,_bcfg _fg .Rectangle ){for _fdag :=0;
_fdag < _bcfg .Max .X ;_fdag ++{for _fbbd :=0;_fbbd < _bcfg .Max .Y ;_fbbd ++{_feed :=_fbgg (_fgec .CMYKAt (_fdag ,_fbbd ));_ffac .SetGray (_fdag ,_fbbd ,_feed );};};};func (_ddfe *NRGBA64 )ColorAt (x ,y int )(_fd .Color ,error ){return ColorAtNRGBA64 (x ,y ,_ddfe .Width ,_ddfe .Data ,_ddfe .Alpha ,_ddfe .Decode );
};var _ Image =&Gray4 {};func (_ddcf *Gray16 )ColorModel ()_fd .Model {return _fd .Gray16Model };func (_gdee *RGBA32 )Base ()*ImageBase {return &_gdee .ImageBase };func _efbf (_afg NRGBA ,_begd CMYK ,_begg _fg .Rectangle ){for _fgfad :=0;_fgfad < _begg .Max .X ;
_fgfad ++{for _aec :=0;_aec < _begg .Max .Y ;_aec ++{_bfag :=_afg .NRGBAAt (_fgfad ,_aec );_begd .SetCMYK (_fgfad ,_aec ,_edag (_bfag ));};};};type Histogramer interface{Histogram ()[256]int ;};func ColorAtNRGBA (x ,y ,width ,bytesPerLine ,bitsPerColor int ,data ,alpha []byte ,decode []float64 )(_fd .Color ,error ){switch bitsPerColor {case 4:return ColorAtNRGBA16 (x ,y ,width ,bytesPerLine ,data ,alpha ,decode );
case 8:return ColorAtNRGBA32 (x ,y ,width ,data ,alpha ,decode );case 16:return ColorAtNRGBA64 (x ,y ,width ,data ,alpha ,decode );default:return nil ,_b .Errorf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064 \u0072\u0067\u0062\u0020b\u0069\u0074\u0073\u0020\u0070\u0065\u0072\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u0061\u006d\u006f\u0075\u006e\u0074\u003a\u0020\u0027\u0025\u0064\u0027",bitsPerColor );
};};func (_cfda *Gray8 )ColorAt (x ,y int )(_fd .Color ,error ){return ColorAtGray8BPC (x ,y ,_cfda .BytesPerLine ,_cfda .Data ,_cfda .Decode );};func (_ccbg *Gray4 )Bounds ()_fg .Rectangle {return _fg .Rectangle {Max :_fg .Point {X :_ccbg .Width ,Y :_ccbg .Height }};
};func _ce (_aae ,_efb int )*Monochrome {return &Monochrome {ImageBase :NewImageBase (_aae ,_efb ,1,1,nil ,nil ,nil ),ModelThreshold :0x0f};};func _beca (_dace _fd .NRGBA )_fd .Gray {var _afeg _fd .NRGBA ;if _dace ==_afeg {return _fd .Gray {Y :0xff};};
_bfgb ,_cddg ,_affg ,_ :=_dace .RGBA ();_fffc :=(19595*_bfgb +38470*_cddg +7471*_affg +1<<15)>>24;return _fd .Gray {Y :uint8 (_fffc )};};func (_ecdbd *Gray8 )Set (x ,y int ,c _fd .Color ){_cad :=y *_ecdbd .BytesPerLine +x ;if _cad > len (_ecdbd .Data )-1{return ;
};_bege :=_fd .GrayModel .Convert (c );_ecdbd .Data [_cad ]=_bege .(_fd .Gray ).Y ;};func (_gaa *CMYK32 )Base ()*ImageBase {return &_gaa .ImageBase };func IsPowerOf2 (n uint )bool {return n > 0&&(n &(n -1))==0};func (_gag *ImageBase )setFourBytes (_bbea int ,_eecg uint32 )error {if _bbea +3> len (_gag .Data )-1{return _b .Errorf ("\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_bbea );
};_gag .Data [_bbea ]=byte ((_eecg &0xff000000)>>24);_gag .Data [_bbea +1]=byte ((_eecg &0xff0000)>>16);_gag .Data [_bbea +2]=byte ((_eecg &0xff00)>>8);_gag .Data [_bbea +3]=byte (_eecg &0xff);return nil ;};func _cbfd (_affb *Monochrome ,_bgbc ,_ffdb ,_deeb ,_dafd int ,_baba RasterOperator ,_dgfa *Monochrome ,_cbdb ,_effa int )error {var (_eagfg bool ;
_efbb bool ;_eeff byte ;_bcab int ;_eea int ;_bbfb int ;_ccadd int ;_fbeg bool ;_ggaed int ;_cegf int ;_gbaf int ;_cfee bool ;_bgdb byte ;_dbab int ;_fece int ;_fdf int ;_agdd byte ;_abbg int ;_gfed int ;_ece uint ;_gfea uint ;_bbdf byte ;_cecf shift ;
_bgc bool ;_fbfd bool ;_cegd ,_ccca int ;);if _cbdb &7!=0{_gfed =8-(_cbdb &7);};if _bgbc &7!=0{_eea =8-(_bgbc &7);};if _gfed ==0&&_eea ==0{_bbdf =_gaee [0];}else {if _eea > _gfed {_ece =uint (_eea -_gfed );}else {_ece =uint (8-(_gfed -_eea ));};_gfea =8-_ece ;
_bbdf =_gaee [_ece ];};if (_bgbc &7)!=0{_eagfg =true ;_bcab =8-(_bgbc &7);_eeff =_gaee [_bcab ];_bbfb =_affb .BytesPerLine *_ffdb +(_bgbc >>3);_ccadd =_dgfa .BytesPerLine *_effa +(_cbdb >>3);_abbg =8-(_cbdb &7);if _bcab > _abbg {_cecf =_ggaedb ;if _deeb >=_gfed {_bgc =true ;
};}else {_cecf =_ggfe ;};};if _deeb < _bcab {_efbb =true ;_eeff &=_fgbf [8-_bcab +_deeb ];};if !_efbb {_ggaed =(_deeb -_bcab )>>3;if _ggaed !=0{_fbeg =true ;_cegf =_affb .BytesPerLine *_ffdb +((_bgbc +_eea )>>3);_gbaf =_dgfa .BytesPerLine *_effa +((_cbdb +_eea )>>3);
};};_dbab =(_bgbc +_deeb )&7;if !(_efbb ||_dbab ==0){_cfee =true ;_bgdb =_fgbf [_dbab ];_fece =_affb .BytesPerLine *_ffdb +((_bgbc +_eea )>>3)+_ggaed ;_fdf =_dgfa .BytesPerLine *_effa +((_cbdb +_eea )>>3)+_ggaed ;if _dbab > int (_gfea ){_fbfd =true ;};
};switch _baba {case PixSrc :if _eagfg {for _cegd =0;_cegd < _dafd ;_cegd ++{if _cecf ==_ggaedb {_agdd =_dgfa .Data [_ccadd ]<<_ece ;if _bgc {_agdd =_cgdd (_agdd ,_dgfa .Data [_ccadd +1]>>_gfea ,_bbdf );};}else {_agdd =_dgfa .Data [_ccadd ]>>_gfea ;};_affb .Data [_bbfb ]=_cgdd (_affb .Data [_bbfb ],_agdd ,_eeff );
_bbfb +=_affb .BytesPerLine ;_ccadd +=_dgfa .BytesPerLine ;};};if _fbeg {for _cegd =0;_cegd < _dafd ;_cegd ++{for _ccca =0;_ccca < _ggaed ;_ccca ++{_agdd =_cgdd (_dgfa .Data [_gbaf +_ccca ]<<_ece ,_dgfa .Data [_gbaf +_ccca +1]>>_gfea ,_bbdf );_affb .Data [_cegf +_ccca ]=_agdd ;
};_cegf +=_affb .BytesPerLine ;_gbaf +=_dgfa .BytesPerLine ;};};if _cfee {for _cegd =0;_cegd < _dafd ;_cegd ++{_agdd =_dgfa .Data [_fdf ]<<_ece ;if _fbfd {_agdd =_cgdd (_agdd ,_dgfa .Data [_fdf +1]>>_gfea ,_bbdf );};_affb .Data [_fece ]=_cgdd (_affb .Data [_fece ],_agdd ,_bgdb );
_fece +=_affb .BytesPerLine ;_fdf +=_dgfa .BytesPerLine ;};};case PixNotSrc :if _eagfg {for _cegd =0;_cegd < _dafd ;_cegd ++{if _cecf ==_ggaedb {_agdd =_dgfa .Data [_ccadd ]<<_ece ;if _bgc {_agdd =_cgdd (_agdd ,_dgfa .Data [_ccadd +1]>>_gfea ,_bbdf );};
}else {_agdd =_dgfa .Data [_ccadd ]>>_gfea ;};_affb .Data [_bbfb ]=_cgdd (_affb .Data [_bbfb ],^_agdd ,_eeff );_bbfb +=_affb .BytesPerLine ;_ccadd +=_dgfa .BytesPerLine ;};};if _fbeg {for _cegd =0;_cegd < _dafd ;_cegd ++{for _ccca =0;_ccca < _ggaed ;_ccca ++{_agdd =_cgdd (_dgfa .Data [_gbaf +_ccca ]<<_ece ,_dgfa .Data [_gbaf +_ccca +1]>>_gfea ,_bbdf );
_affb .Data [_cegf +_ccca ]=^_agdd ;};_cegf +=_affb .BytesPerLine ;_gbaf +=_dgfa .BytesPerLine ;};};if _cfee {for _cegd =0;_cegd < _dafd ;_cegd ++{_agdd =_dgfa .Data [_fdf ]<<_ece ;if _fbfd {_agdd =_cgdd (_agdd ,_dgfa .Data [_fdf +1]>>_gfea ,_bbdf );};
_affb .Data [_fece ]=_cgdd (_affb .Data [_fece ],^_agdd ,_bgdb );_fece +=_affb .BytesPerLine ;_fdf +=_dgfa .BytesPerLine ;};};case PixSrcOrDst :if _eagfg {for _cegd =0;_cegd < _dafd ;_cegd ++{if _cecf ==_ggaedb {_agdd =_dgfa .Data [_ccadd ]<<_ece ;if _bgc {_agdd =_cgdd (_agdd ,_dgfa .Data [_ccadd +1]>>_gfea ,_bbdf );
};}else {_agdd =_dgfa .Data [_ccadd ]>>_gfea ;};_affb .Data [_bbfb ]=_cgdd (_affb .Data [_bbfb ],_agdd |_affb .Data [_bbfb ],_eeff );_bbfb +=_affb .BytesPerLine ;_ccadd +=_dgfa .BytesPerLine ;};};if _fbeg {for _cegd =0;_cegd < _dafd ;_cegd ++{for _ccca =0;
_ccca < _ggaed ;_ccca ++{_agdd =_cgdd (_dgfa .Data [_gbaf +_ccca ]<<_ece ,_dgfa .Data [_gbaf +_ccca +1]>>_gfea ,_bbdf );_affb .Data [_cegf +_ccca ]|=_agdd ;};_cegf +=_affb .BytesPerLine ;_gbaf +=_dgfa .BytesPerLine ;};};if _cfee {for _cegd =0;_cegd < _dafd ;
_cegd ++{_agdd =_dgfa .Data [_fdf ]<<_ece ;if _fbfd {_agdd =_cgdd (_agdd ,_dgfa .Data [_fdf +1]>>_gfea ,_bbdf );};_affb .Data [_fece ]=_cgdd (_affb .Data [_fece ],_agdd |_affb .Data [_fece ],_bgdb );_fece +=_affb .BytesPerLine ;_fdf +=_dgfa .BytesPerLine ;
};};case PixSrcAndDst :if _eagfg {for _cegd =0;_cegd < _dafd ;_cegd ++{if _cecf ==_ggaedb {_agdd =_dgfa .Data [_ccadd ]<<_ece ;if _bgc {_agdd =_cgdd (_agdd ,_dgfa .Data [_ccadd +1]>>_gfea ,_bbdf );};}else {_agdd =_dgfa .Data [_ccadd ]>>_gfea ;};_affb .Data [_bbfb ]=_cgdd (_affb .Data [_bbfb ],_agdd &_affb .Data [_bbfb ],_eeff );
_bbfb +=_affb .BytesPerLine ;_ccadd +=_dgfa .BytesPerLine ;};};if _fbeg {for _cegd =0;_cegd < _dafd ;_cegd ++{for _ccca =0;_ccca < _ggaed ;_ccca ++{_agdd =_cgdd (_dgfa .Data [_gbaf +_ccca ]<<_ece ,_dgfa .Data [_gbaf +_ccca +1]>>_gfea ,_bbdf );_affb .Data [_cegf +_ccca ]&=_agdd ;
};_cegf +=_affb .BytesPerLine ;_gbaf +=_dgfa .BytesPerLine ;};};if _cfee {for _cegd =0;_cegd < _dafd ;_cegd ++{_agdd =_dgfa .Data [_fdf ]<<_ece ;if _fbfd {_agdd =_cgdd (_agdd ,_dgfa .Data [_fdf +1]>>_gfea ,_bbdf );};_affb .Data [_fece ]=_cgdd (_affb .Data [_fece ],_agdd &_affb .Data [_fece ],_bgdb );
_fece +=_affb .BytesPerLine ;_fdf +=_dgfa .BytesPerLine ;};};case PixSrcXorDst :if _eagfg {for _cegd =0;_cegd < _dafd ;_cegd ++{if _cecf ==_ggaedb {_agdd =_dgfa .Data [_ccadd ]<<_ece ;if _bgc {_agdd =_cgdd (_agdd ,_dgfa .Data [_ccadd +1]>>_gfea ,_bbdf );
};}else {_agdd =_dgfa .Data [_ccadd ]>>_gfea ;};_affb .Data [_bbfb ]=_cgdd (_affb .Data [_bbfb ],_agdd ^_affb .Data [_bbfb ],_eeff );_bbfb +=_affb .BytesPerLine ;_ccadd +=_dgfa .BytesPerLine ;};};if _fbeg {for _cegd =0;_cegd < _dafd ;_cegd ++{for _ccca =0;
_ccca < _ggaed ;_ccca ++{_agdd =_cgdd (_dgfa .Data [_gbaf +_ccca ]<<_ece ,_dgfa .Data [_gbaf +_ccca +1]>>_gfea ,_bbdf );_affb .Data [_cegf +_ccca ]^=_agdd ;};_cegf +=_affb .BytesPerLine ;_gbaf +=_dgfa .BytesPerLine ;};};if _cfee {for _cegd =0;_cegd < _dafd ;
_cegd ++{_agdd =_dgfa .Data [_fdf ]<<_ece ;if _fbfd {_agdd =_cgdd (_agdd ,_dgfa .Data [_fdf +1]>>_gfea ,_bbdf );};_affb .Data [_fece ]=_cgdd (_affb .Data [_fece ],_agdd ^_affb .Data [_fece ],_bgdb );_fece +=_affb .BytesPerLine ;_fdf +=_dgfa .BytesPerLine ;
};};case PixNotSrcOrDst :if _eagfg {for _cegd =0;_cegd < _dafd ;_cegd ++{if _cecf ==_ggaedb {_agdd =_dgfa .Data [_ccadd ]<<_ece ;if _bgc {_agdd =_cgdd (_agdd ,_dgfa .Data [_ccadd +1]>>_gfea ,_bbdf );};}else {_agdd =_dgfa .Data [_ccadd ]>>_gfea ;};_affb .Data [_bbfb ]=_cgdd (_affb .Data [_bbfb ],^_agdd |_affb .Data [_bbfb ],_eeff );
_bbfb +=_affb .BytesPerLine ;_ccadd +=_dgfa .BytesPerLine ;};};if _fbeg {for _cegd =0;_cegd < _dafd ;_cegd ++{for _ccca =0;_ccca < _ggaed ;_ccca ++{_agdd =_cgdd (_dgfa .Data [_gbaf +_ccca ]<<_ece ,_dgfa .Data [_gbaf +_ccca +1]>>_gfea ,_bbdf );_affb .Data [_cegf +_ccca ]|=^_agdd ;
};_cegf +=_affb .BytesPerLine ;_gbaf +=_dgfa .BytesPerLine ;};};if _cfee {for _cegd =0;_cegd < _dafd ;_cegd ++{_agdd =_dgfa .Data [_fdf ]<<_ece ;if _fbfd {_agdd =_cgdd (_agdd ,_dgfa .Data [_fdf +1]>>_gfea ,_bbdf );};_affb .Data [_fece ]=_cgdd (_affb .Data [_fece ],^_agdd |_affb .Data [_fece ],_bgdb );
_fece +=_affb .BytesPerLine ;_fdf +=_dgfa .BytesPerLine ;};};case PixNotSrcAndDst :if _eagfg {for _cegd =0;_cegd < _dafd ;_cegd ++{if _cecf ==_ggaedb {_agdd =_dgfa .Data [_ccadd ]<<_ece ;if _bgc {_agdd =_cgdd (_agdd ,_dgfa .Data [_ccadd +1]>>_gfea ,_bbdf );
};}else {_agdd =_dgfa .Data [_ccadd ]>>_gfea ;};_affb .Data [_bbfb ]=_cgdd (_affb .Data [_bbfb ],^_agdd &_affb .Data [_bbfb ],_eeff );_bbfb +=_affb .BytesPerLine ;_ccadd +=_dgfa .BytesPerLine ;};};if _fbeg {for _cegd =0;_cegd < _dafd ;_cegd ++{for _ccca =0;
_ccca < _ggaed ;_ccca ++{_agdd =_cgdd (_dgfa .Data [_gbaf +_ccca ]<<_ece ,_dgfa .Data [_gbaf +_ccca +1]>>_gfea ,_bbdf );_affb .Data [_cegf +_ccca ]&=^_agdd ;};_cegf +=_affb .BytesPerLine ;_gbaf +=_dgfa .BytesPerLine ;};};if _cfee {for _cegd =0;_cegd < _dafd ;
_cegd ++{_agdd =_dgfa .Data [_fdf ]<<_ece ;if _fbfd {_agdd =_cgdd (_agdd ,_dgfa .Data [_fdf +1]>>_gfea ,_bbdf );};_affb .Data [_fece ]=_cgdd (_affb .Data [_fece ],^_agdd &_affb .Data [_fece ],_bgdb );_fece +=_affb .BytesPerLine ;_fdf +=_dgfa .BytesPerLine ;
};};case PixSrcOrNotDst :if _eagfg {for _cegd =0;_cegd < _dafd ;_cegd ++{if _cecf ==_ggaedb {_agdd =_dgfa .Data [_ccadd ]<<_ece ;if _bgc {_agdd =_cgdd (_agdd ,_dgfa .Data [_ccadd +1]>>_gfea ,_bbdf );};}else {_agdd =_dgfa .Data [_ccadd ]>>_gfea ;};_affb .Data [_bbfb ]=_cgdd (_affb .Data [_bbfb ],_agdd |^_affb .Data [_bbfb ],_eeff );
_bbfb +=_affb .BytesPerLine ;_ccadd +=_dgfa .BytesPerLine ;};};if _fbeg {for _cegd =0;_cegd < _dafd ;_cegd ++{for _ccca =0;_ccca < _ggaed ;_ccca ++{_agdd =_cgdd (_dgfa .Data [_gbaf +_ccca ]<<_ece ,_dgfa .Data [_gbaf +_ccca +1]>>_gfea ,_bbdf );_affb .Data [_cegf +_ccca ]=_agdd |^_affb .Data [_cegf +_ccca ];
};_cegf +=_affb .BytesPerLine ;_gbaf +=_dgfa .BytesPerLine ;};};if _cfee {for _cegd =0;_cegd < _dafd ;_cegd ++{_agdd =_dgfa .Data [_fdf ]<<_ece ;if _fbfd {_agdd =_cgdd (_agdd ,_dgfa .Data [_fdf +1]>>_gfea ,_bbdf );};_affb .Data [_fece ]=_cgdd (_affb .Data [_fece ],_agdd |^_affb .Data [_fece ],_bgdb );
_fece +=_affb .BytesPerLine ;_fdf +=_dgfa .BytesPerLine ;};};case PixSrcAndNotDst :if _eagfg {for _cegd =0;_cegd < _dafd ;_cegd ++{if _cecf ==_ggaedb {_agdd =_dgfa .Data [_ccadd ]<<_ece ;if _bgc {_agdd =_cgdd (_agdd ,_dgfa .Data [_ccadd +1]>>_gfea ,_bbdf );
};}else {_agdd =_dgfa .Data [_ccadd ]>>_gfea ;};_affb .Data [_bbfb ]=_cgdd (_affb .Data [_bbfb ],_agdd &^_affb .Data [_bbfb ],_eeff );_bbfb +=_affb .BytesPerLine ;_ccadd +=_dgfa .BytesPerLine ;};};if _fbeg {for _cegd =0;_cegd < _dafd ;_cegd ++{for _ccca =0;
_ccca < _ggaed ;_ccca ++{_agdd =_cgdd (_dgfa .Data [_gbaf +_ccca ]<<_ece ,_dgfa .Data [_gbaf +_ccca +1]>>_gfea ,_bbdf );_affb .Data [_cegf +_ccca ]=_agdd &^_affb .Data [_cegf +_ccca ];};_cegf +=_affb .BytesPerLine ;_gbaf +=_dgfa .BytesPerLine ;};};if _cfee {for _cegd =0;
_cegd < _dafd ;_cegd ++{_agdd =_dgfa .Data [_fdf ]<<_ece ;if _fbfd {_agdd =_cgdd (_agdd ,_dgfa .Data [_fdf +1]>>_gfea ,_bbdf );};_affb .Data [_fece ]=_cgdd (_affb .Data [_fece ],_agdd &^_affb .Data [_fece ],_bgdb );_fece +=_affb .BytesPerLine ;_fdf +=_dgfa .BytesPerLine ;
};};case PixNotPixSrcOrDst :if _eagfg {for _cegd =0;_cegd < _dafd ;_cegd ++{if _cecf ==_ggaedb {_agdd =_dgfa .Data [_ccadd ]<<_ece ;if _bgc {_agdd =_cgdd (_agdd ,_dgfa .Data [_ccadd +1]>>_gfea ,_bbdf );};}else {_agdd =_dgfa .Data [_ccadd ]>>_gfea ;};_affb .Data [_bbfb ]=_cgdd (_affb .Data [_bbfb ],^(_agdd |_affb .Data [_bbfb ]),_eeff );
_bbfb +=_affb .BytesPerLine ;_ccadd +=_dgfa .BytesPerLine ;};};if _fbeg {for _cegd =0;_cegd < _dafd ;_cegd ++{for _ccca =0;_ccca < _ggaed ;_ccca ++{_agdd =_cgdd (_dgfa .Data [_gbaf +_ccca ]<<_ece ,_dgfa .Data [_gbaf +_ccca +1]>>_gfea ,_bbdf );_affb .Data [_cegf +_ccca ]=^(_agdd |_affb .Data [_cegf +_ccca ]);
};_cegf +=_affb .BytesPerLine ;_gbaf +=_dgfa .BytesPerLine ;};};if _cfee {for _cegd =0;_cegd < _dafd ;_cegd ++{_agdd =_dgfa .Data [_fdf ]<<_ece ;if _fbfd {_agdd =_cgdd (_agdd ,_dgfa .Data [_fdf +1]>>_gfea ,_bbdf );};_affb .Data [_fece ]=_cgdd (_affb .Data [_fece ],^(_agdd |_affb .Data [_fece ]),_bgdb );
_fece +=_affb .BytesPerLine ;_fdf +=_dgfa .BytesPerLine ;};};case PixNotPixSrcAndDst :if _eagfg {for _cegd =0;_cegd < _dafd ;_cegd ++{if _cecf ==_ggaedb {_agdd =_dgfa .Data [_ccadd ]<<_ece ;if _bgc {_agdd =_cgdd (_agdd ,_dgfa .Data [_ccadd +1]>>_gfea ,_bbdf );
};}else {_agdd =_dgfa .Data [_ccadd ]>>_gfea ;};_affb .Data [_bbfb ]=_cgdd (_affb .Data [_bbfb ],^(_agdd &_affb .Data [_bbfb ]),_eeff );_bbfb +=_affb .BytesPerLine ;_ccadd +=_dgfa .BytesPerLine ;};};if _fbeg {for _cegd =0;_cegd < _dafd ;_cegd ++{for _ccca =0;
_ccca < _ggaed ;_ccca ++{_agdd =_cgdd (_dgfa .Data [_gbaf +_ccca ]<<_ece ,_dgfa .Data [_gbaf +_ccca +1]>>_gfea ,_bbdf );_affb .Data [_cegf +_ccca ]=^(_agdd &_affb .Data [_cegf +_ccca ]);};_cegf +=_affb .BytesPerLine ;_gbaf +=_dgfa .BytesPerLine ;};};if _cfee {for _cegd =0;
_cegd < _dafd ;_cegd ++{_agdd =_dgfa .Data [_fdf ]<<_ece ;if _fbfd {_agdd =_cgdd (_agdd ,_dgfa .Data [_fdf +1]>>_gfea ,_bbdf );};_affb .Data [_fece ]=_cgdd (_affb .Data [_fece ],^(_agdd &_affb .Data [_fece ]),_bgdb );_fece +=_affb .BytesPerLine ;_fdf +=_dgfa .BytesPerLine ;
};};case PixNotPixSrcXorDst :if _eagfg {for _cegd =0;_cegd < _dafd ;_cegd ++{if _cecf ==_ggaedb {_agdd =_dgfa .Data [_ccadd ]<<_ece ;if _bgc {_agdd =_cgdd (_agdd ,_dgfa .Data [_ccadd +1]>>_gfea ,_bbdf );};}else {_agdd =_dgfa .Data [_ccadd ]>>_gfea ;};_affb .Data [_bbfb ]=_cgdd (_affb .Data [_bbfb ],^(_agdd ^_affb .Data [_bbfb ]),_eeff );
_bbfb +=_affb .BytesPerLine ;_ccadd +=_dgfa .BytesPerLine ;};};if _fbeg {for _cegd =0;_cegd < _dafd ;_cegd ++{for _ccca =0;_ccca < _ggaed ;_ccca ++{_agdd =_cgdd (_dgfa .Data [_gbaf +_ccca ]<<_ece ,_dgfa .Data [_gbaf +_ccca +1]>>_gfea ,_bbdf );_affb .Data [_cegf +_ccca ]=^(_agdd ^_affb .Data [_cegf +_ccca ]);
};_cegf +=_affb .BytesPerLine ;_gbaf +=_dgfa .BytesPerLine ;};};if _cfee {for _cegd =0;_cegd < _dafd ;_cegd ++{_agdd =_dgfa .Data [_fdf ]<<_ece ;if _fbfd {_agdd =_cgdd (_agdd ,_dgfa .Data [_fdf +1]>>_gfea ,_bbdf );};_affb .Data [_fece ]=_cgdd (_affb .Data [_fece ],^(_agdd ^_affb .Data [_fece ]),_bgdb );
_fece +=_affb .BytesPerLine ;_fdf +=_dgfa .BytesPerLine ;};};default:_ab .Log .Debug ("\u004f\u0070e\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0074\u0020\u0070\u0065\u0072\u006d\u0069tt\u0065\u0064",_baba );
return _f .New ("\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065r\u0061\u0074\u0069\u006f\u006e\u0020\u006eo\u0074\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074\u0065\u0064");};return nil ;};func RasterOperation (dest *Monochrome ,dx ,dy ,dw ,dh int ,op RasterOperator ,src *Monochrome ,sx ,sy int )error {return _fega (dest ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );
};func ColorAtGray1BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_fd .Gray ,error ){_dcde :=y *bytesPerLine +x >>3;if _dcde >=len (data ){return _fd .Gray {},_b .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_dae :=data [_dcde ]>>uint (7-(x &7))&1;if len (decode )==2{_dae =uint8 (LinearInterpolate (float64 (_dae ),0.0,1.0,decode [0],decode [1]))&1;};return _fd .Gray {Y :_dae *255},nil ;};func _bfeg (_egd _fg .Image )(Image ,error ){if _cgfa ,_cge :=_egd .(*CMYK32 );
_cge {return _cgfa .Copy (),nil ;};_eda :=_egd .Bounds ();_dcg ,_dga :=NewImage (_eda .Max .X ,_eda .Max .Y ,8,4,nil ,nil ,nil );if _dga !=nil {return nil ,_dga ;};switch _dccb :=_egd .(type ){case CMYK :_fgfa (_dccb ,_dcg .(CMYK ),_eda );case Gray :_fee (_dccb ,_dcg .(CMYK ),_eda );
case NRGBA :_efbf (_dccb ,_dcg .(CMYK ),_eda );case RGBA :_cac (_dccb ,_dcg .(CMYK ),_eda );default:_ebga (_egd ,_dcg ,_eda );};return _dcg ,nil ;};func _eccfd (_dede *Monochrome ,_acefc ,_gfcf ,_afedc ,_ecdbdg int ,_dgde RasterOperator ){if _acefc < 0{_afedc +=_acefc ;
_acefc =0;};_ddbae :=_acefc +_afedc -_dede .Width ;if _ddbae > 0{_afedc -=_ddbae ;};if _gfcf < 0{_ecdbdg +=_gfcf ;_gfcf =0;};_afca :=_gfcf +_ecdbdg -_dede .Height ;if _afca > 0{_ecdbdg -=_afca ;};if _afedc <=0||_ecdbdg <=0{return ;};if (_acefc &7)==0{_dbfc (_dede ,_acefc ,_gfcf ,_afedc ,_ecdbdg ,_dgde );
}else {_cbbf (_dede ,_acefc ,_gfcf ,_afedc ,_ecdbdg ,_dgde );};};var (Gray2Model =_fd .ModelFunc (_egf );Gray4Model =_fd .ModelFunc (_fbfg );NRGBA16Model =_fd .ModelFunc (_bedg ););func (_gcge *Monochrome )ScaleLow (width ,height int )(*Monochrome ,error ){if width < 0||height < 0{return nil ,_f .New ("\u0070\u0072\u006f\u0076\u0069\u0064e\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0077\u0069\u0064t\u0068\u0020\u0061\u006e\u0064\u0020\u0068e\u0069\u0067\u0068\u0074");
};_fadg :=_ce (width ,height );_becc :=make ([]int ,height );_bga :=make ([]int ,width );_gff :=float64 (_gcge .Width )/float64 (width );_cfd :=float64 (_gcge .Height )/float64 (height );for _gbfc :=0;_gbfc < height ;_gbfc ++{_becc [_gbfc ]=int (_d .Min (_cfd *float64 (_gbfc )+0.5,float64 (_gcge .Height -1)));
};for _dcfc :=0;_dcfc < width ;_dcfc ++{_bga [_dcfc ]=int (_d .Min (_gff *float64 (_dcfc )+0.5,float64 (_gcge .Width -1)));};_faa :=-1;_ggae :=byte (0);for _bdf :=0;_bdf < height ;_bdf ++{_gcc :=_becc [_bdf ]*_gcge .BytesPerLine ;_dbfe :=_bdf *_fadg .BytesPerLine ;
for _ggdcg :=0;_ggdcg < width ;_ggdcg ++{_bdfe :=_bga [_ggdcg ];if _bdfe !=_faa {_ggae =_gcge .getBit (_gcc ,_bdfe );if _ggae !=0{_fadg .setBit (_dbfe ,_ggdcg );};_faa =_bdfe ;}else {if _ggae !=0{_fadg .setBit (_dbfe ,_ggdcg );};};};};return _fadg ,nil ;
};func _adfa (_fffe _fg .Image )(Image ,error ){if _fcfg ,_ccfg :=_fffe .(*NRGBA16 );_ccfg {return _fcfg .Copy (),nil ;};_fcfb :=_fffe .Bounds ();_fbad ,_cffc :=NewImage (_fcfb .Max .X ,_fcfb .Max .Y ,4,3,nil ,nil ,nil );if _cffc !=nil {return nil ,_cffc ;
};_dbabd (_fffe ,_fbad ,_fcfb );return _fbad ,nil ;};var _ Gray =&Gray8 {};func (_fdadc *Gray2 )Validate ()error {if len (_fdadc .Data )!=_fdadc .Height *_fdadc .BytesPerLine {return ErrInvalidImage ;};return nil ;};func (_ddcg *CMYK32 )ColorModel ()_fd .Model {return _fd .CMYKModel };
var _ _fg .Image =&Gray16 {};func FromGoImage (i _fg .Image )(Image ,error ){switch _cbfg :=i .(type ){case Image :return _cbfg .Copy (),nil ;case Gray :return GrayConverter .Convert (i );case *_fg .Gray16 :return Gray16Converter .Convert (i );case CMYK :return CMYKConverter .Convert (i );
case *_fg .NRGBA64 :return NRGBA64Converter .Convert (i );default:return NRGBAConverter .Convert (i );};};func _ddbc (_fce _fd .Gray )_fd .NRGBA {return _fd .NRGBA {R :_fce .Y ,G :_fce .Y ,B :_fce .Y ,A :0xff}};func _bdggd (_cbggb _fg .Image ,_gcgfg Image ,_ecff _fg .Rectangle ){if _egec ,_aadc :=_cbggb .(SMasker );
_aadc &&_egec .HasAlpha (){_gcgfg .(SMasker ).MakeAlpha ();};switch _cgbb :=_cbggb .(type ){case Gray :_aecea (_cgbb ,_gcgfg .(RGBA ),_ecff );case NRGBA :_dgdcc (_cgbb ,_gcgfg .(RGBA ),_ecff );case *_fg .NYCbCrA :_bgeee (_cgbb ,_gcgfg .(RGBA ),_ecff );
case CMYK :_ceff (_cgbb ,_gcgfg .(RGBA ),_ecff );case RGBA :_acedg (_cgbb ,_gcgfg .(RGBA ),_ecff );case nrgba64 :_bbegb (_cgbb ,_gcgfg .(RGBA ),_ecff );default:_ebga (_cbggb ,_gcgfg ,_ecff );};};func _gdbe (_dbgb ,_bceaa NRGBA ,_egcce _fg .Rectangle ){for _egac :=0;
_egac < _egcce .Max .X ;_egac ++{for _aeeff :=0;_aeeff < _egcce .Max .Y ;_aeeff ++{_bceaa .SetNRGBA (_egac ,_aeeff ,_dbgb .NRGBAAt (_egac ,_aeeff ));};};};func AutoThresholdTriangle (histogram [256]int )uint8 {var _agab ,_affa ,_ccgaa ,_fcb int ;for _beag :=0;
_beag < len (histogram );_beag ++{if histogram [_beag ]> 0{_agab =_beag ;break ;};};if _agab > 0{_agab --;};for _dece :=255;_dece > 0;_dece --{if histogram [_dece ]> 0{_fcb =_dece ;break ;};};if _fcb < 255{_fcb ++;};for _bdgf :=0;_bdgf < 256;_bdgf ++{if histogram [_bdgf ]> _affa {_ccgaa =_bdgf ;
_affa =histogram [_bdgf ];};};var _dfgce bool ;if (_ccgaa -_agab )< (_fcb -_ccgaa ){_dfgce =true ;var _baac int ;_gbbdg :=255;for _baac < _gbbdg {_cedf :=histogram [_baac ];histogram [_baac ]=histogram [_gbbdg ];histogram [_gbbdg ]=_cedf ;_baac ++;_gbbdg --;
};_agab =255-_fcb ;_ccgaa =255-_ccgaa ;};if _agab ==_ccgaa {return uint8 (_agab );};_acee :=float64 (histogram [_ccgaa ]);_egadf :=float64 (_agab -_ccgaa );_gffb :=_d .Sqrt (_acee *_acee +_egadf *_egadf );_acee /=_gffb ;_egadf /=_gffb ;_gffb =_acee *float64 (_agab )+_egadf *float64 (histogram [_agab ]);
_gbce :=_agab ;var _bgae float64 ;for _efcdc :=_agab +1;_efcdc <=_ccgaa ;_efcdc ++{_ddedg :=_acee *float64 (_efcdc )+_egadf *float64 (histogram [_efcdc ])-_gffb ;if _ddedg > _bgae {_gbce =_efcdc ;_bgae =_ddedg ;};};_gbce --;if _dfgce {var _bfde int ;_fcac :=255;
for _bfde < _fcac {_gbdg :=histogram [_bfde ];histogram [_bfde ]=histogram [_fcac ];histogram [_fcac ]=_gbdg ;_bfde ++;_fcac --;};return uint8 (255-_gbce );};return uint8 (_gbce );};var _ _fg .Image =&NRGBA64 {};func _afc (_fefe RGBA ,_fec Gray ,_cddcg _fg .Rectangle ){for _aaaf :=0;
_aaaf < _cddcg .Max .X ;_aaaf ++{for _ffga :=0;_ffga < _cddcg .Max .Y ;_ffga ++{_fea :=_cefb (_fefe .RGBAAt (_aaaf ,_ffga ));_fec .SetGray (_aaaf ,_ffga ,_fea );};};};func (_gbcc *NRGBA64 )Bounds ()_fg .Rectangle {return _fg .Rectangle {Max :_fg .Point {X :_gbcc .Width ,Y :_gbcc .Height }};
};func _cbf (_dab _fg .Image )(Image ,error ){if _dfc ,_eage :=_dab .(*Monochrome );_eage {return _dfc ,nil ;};_ceg :=_dab .Bounds ();var _bcb Gray ;switch _dda :=_dab .(type ){case Gray :_bcb =_dda ;case NRGBA :_bcb =&Gray8 {ImageBase :NewImageBase (_ceg .Max .X ,_ceg .Max .Y ,8,1,nil ,nil ,nil )};
_eaa (_bcb ,_dda ,_ceg );case nrgba64 :_bcb =&Gray8 {ImageBase :NewImageBase (_ceg .Max .X ,_ceg .Max .Y ,8,1,nil ,nil ,nil )};_bfeb (_bcb ,_dda ,_ceg );default:_ecgf ,_eade :=GrayConverter .Convert (_dab );if _eade !=nil {return nil ,_eade ;};_bcb =_ecgf .(Gray );
};_agca ,_bbee :=NewImage (_ceg .Max .X ,_ceg .Max .Y ,1,1,nil ,nil ,nil );if _bbee !=nil {return nil ,_bbee ;};_bbgb :=_agca .(*Monochrome );_ccb :=AutoThresholdTriangle (GrayHistogram (_bcb ));for _ecge :=0;_ecge < _ceg .Max .X ;_ecge ++{for _egdg :=0;
_egdg < _ceg .Max .Y ;_egdg ++{_bed :=_aea (_bcb .GrayAt (_ecge ,_egdg ),monochromeModel (_ccb ));_bbgb .SetGray (_ecge ,_egdg ,_bed );};};return _agca ,nil ;};func ColorAtGrayscale (x ,y ,bitsPerColor ,bytesPerLine int ,data []byte ,decode []float64 )(_fd .Color ,error ){switch bitsPerColor {case 1:return ColorAtGray1BPC (x ,y ,bytesPerLine ,data ,decode );
case 2:return ColorAtGray2BPC (x ,y ,bytesPerLine ,data ,decode );case 4:return ColorAtGray4BPC (x ,y ,bytesPerLine ,data ,decode );case 8:return ColorAtGray8BPC (x ,y ,bytesPerLine ,data ,decode );case 16:return ColorAtGray16BPC (x ,y ,bytesPerLine ,data ,decode );
default:return nil ,_b .Errorf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0067\u0072\u0061\u0079\u0020\u0073c\u0061\u006c\u0065\u0020\u0062\u0069\u0074s\u0020\u0070\u0065\u0072\u0020\u0063\u006f\u006c\u006f\u0072\u0020a\u006d\u006f\u0075\u006e\u0074\u003a\u0020\u0027\u0025\u0064\u0027",bitsPerColor );
};};func (_edf *Gray8 )Base ()*ImageBase {return &_edf .ImageBase };func _ebga (_ddg _fg .Image ,_ebc Image ,_dad _fg .Rectangle ){for _agad :=0;_agad < _dad .Max .X ;_agad ++{for _aab :=0;_aab < _dad .Max .Y ;_aab ++{_cae :=_ddg .At (_agad ,_aab );_ebc .Set (_agad ,_aab ,_cae );
};};};func _cdb (_efc ,_fa *Monochrome )(_ac error ){_fff :=_fa .BytesPerLine ;_ca :=_efc .BytesPerLine ;_fbd :=_fa .BytesPerLine *4-_efc .BytesPerLine ;var (_ec ,_cdg byte ;_ffg uint32 ;_ged ,_cg ,_fda ,_gcf ,_deg ,_cga ,_dcc int ;);for _fda =0;_fda < _fa .Height ;
_fda ++{_ged =_fda *_fff ;_cg =4*_fda *_ca ;for _gcf =0;_gcf < _fff ;_gcf ++{_ec =_fa .Data [_ged +_gcf ];_ffg =_caf [_ec ];_cga =_cg +_gcf *4;if _fbd !=0&&(_gcf +1)*4> _efc .BytesPerLine {for _deg =_fbd ;_deg > 0;_deg --{_cdg =byte ((_ffg >>uint (_deg *8))&0xff);
_dcc =_cga +(_fbd -_deg );if _ac =_efc .setByte (_dcc ,_cdg );_ac !=nil {return _ac ;};};}else if _ac =_efc .setFourBytes (_cga ,_ffg );_ac !=nil {return _ac ;};if _ac =_efc .setFourBytes (_cg +_gcf *4,_caf [_fa .Data [_ged +_gcf ]]);_ac !=nil {return _ac ;
};};for _deg =1;_deg < 4;_deg ++{for _gcf =0;_gcf < _ca ;_gcf ++{if _ac =_efc .setByte (_cg +_deg *_ca +_gcf ,_efc .Data [_cg +_gcf ]);_ac !=nil {return _ac ;};};};};return nil ;};var _ Gray =&Gray2 {};func (_feaf *NRGBA64 )ColorModel ()_fd .Model {return _fd .NRGBA64Model };
func (_acbb *NRGBA32 )Validate ()error {if len (_acbb .Data )!=3*_acbb .Width *_acbb .Height {return _f .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};var _ Image =&Gray2 {};func _bfeb (_fbdg Gray ,_fcda nrgba64 ,_dfcf _fg .Rectangle ){for _cega :=0;_cega < _dfcf .Max .X ;_cega ++{for _ggb :=0;_ggb < _dfcf .Max .Y ;_ggb ++{_edb :=_afee (_fcda .NRGBA64At (_cega ,_ggb ));_fbdg .SetGray (_cega ,_ggb ,_edb );
};};};type RGBA interface{RGBAAt (_ggbab ,_bebd int )_fd .RGBA ;SetRGBA (_dedad ,_cgcg int ,_fede _fd .RGBA );};func (_eadg *Monochrome )copy ()*Monochrome {_daad :=_ce (_eadg .Width ,_eadg .Height );_daad .ModelThreshold =_eadg .ModelThreshold ;_daad .Data =make ([]byte ,len (_eadg .Data ));
copy (_daad .Data ,_eadg .Data );if len (_eadg .Decode )!=0{_daad .Decode =make ([]float64 ,len (_eadg .Decode ));copy (_daad .Decode ,_eadg .Decode );};if len (_eadg .Alpha )!=0{_daad .Alpha =make ([]byte ,len (_eadg .Alpha ));copy (_daad .Alpha ,_eadg .Alpha );
};return _daad ;};type nrgba64 interface{NRGBA64At (_fedd ,_bcagb int )_fd .NRGBA64 ;SetNRGBA64 (_agce ,_ggfgd int ,_dccf _fd .NRGBA64 );};func (_bada *Gray16 )Set (x ,y int ,c _fd .Color ){_eedbg :=(y *_bada .BytesPerLine /2+x )*2;if _eedbg +1>=len (_bada .Data ){return ;
};_gdac :=_fd .Gray16Model .Convert (c ).(_fd .Gray16 );_bada .Data [_eedbg ],_bada .Data [_eedbg +1]=uint8 (_gdac .Y >>8),uint8 (_gdac .Y &0xff);};func (_cecfg *NRGBA32 )ColorModel ()_fd .Model {return _fd .NRGBAModel };func (_adcd *NRGBA16 )NRGBAAt (x ,y int )_fd .NRGBA {_bbca ,_ :=ColorAtNRGBA16 (x ,y ,_adcd .Width ,_adcd .BytesPerLine ,_adcd .Data ,_adcd .Alpha ,_adcd .Decode );
return _bbca ;};var _ _fg .Image =&NRGBA32 {};func (_fcee *Monochrome )Copy ()Image {return &Monochrome {ImageBase :_fcee .ImageBase .copy (),ModelThreshold :_fcee .ModelThreshold };};var ErrInvalidImage =_f .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
func ColorAtGray2BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_fd .Gray ,error ){_ffaf :=y *bytesPerLine +x >>2;if _ffaf >=len (data ){return _fd .Gray {},_b .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_gggd :=data [_ffaf ]>>uint (6-(x &3)*2)&3;if len (decode )==2{_gggd =uint8 (uint32 (LinearInterpolate (float64 (_gggd ),0,3.0,decode [0],decode [1]))&3);};return _fd .Gray {Y :_gggd *85},nil ;};type RGBA32 struct{ImageBase };func _cac (_bdcfa RGBA ,_gbg CMYK ,_ggf _fg .Rectangle ){for _deae :=0;
_deae < _ggf .Max .X ;_deae ++{for _edee :=0;_edee < _ggf .Max .Y ;_edee ++{_cbg :=_bdcfa .RGBAAt (_deae ,_edee );_gbg .SetCMYK (_deae ,_edee ,_fcg (_cbg ));};};};func (_baad *NRGBA64 )Copy ()Image {return &NRGBA64 {ImageBase :_baad .copy ()}};type NRGBA16 struct{ImageBase };
func _ddba (_cef _fd .NRGBA )_fd .Gray {_ecgb ,_bdg ,_bea ,_ :=_cef .RGBA ();_fgee :=(19595*_ecgb +38470*_bdg +7471*_bea +1<<15)>>24;return _fd .Gray {Y :uint8 (_fgee )};};func (_ceda *NRGBA32 )Set (x ,y int ,c _fd .Color ){_agdac :=y *_ceda .Width +x ;
_fcga :=3*_agdac ;if _fcga +2>=len (_ceda .Data ){return ;};_dedc :=_fd .NRGBAModel .Convert (c ).(_fd .NRGBA );_ceda .setRGBA (_agdac ,_dedc );};func (_aeccg *RGBA32 )setRGBA (_cdaf int ,_ffbg _fd .RGBA ){_deggb :=3*_cdaf ;_aeccg .Data [_deggb ]=_ffbg .R ;
_aeccg .Data [_deggb +1]=_ffbg .G ;_aeccg .Data [_deggb +2]=_ffbg .B ;if _cdaf < len (_aeccg .Alpha ){_aeccg .Alpha [_cdaf ]=_ffbg .A ;};};func (_geb *Monochrome )InverseData ()error {return _geb .RasterOperation (0,0,_geb .Width ,_geb .Height ,PixNotDst ,nil ,0,0);
};func (_cda *Gray16 )Base ()*ImageBase {return &_cda .ImageBase };func (_cggb *ImageBase )setTwoBytes (_abgd int ,_gedc uint16 )error {if _abgd +1> len (_cggb .Data )-1{return _f .New ("\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_cggb .Data [_abgd ]=byte ((_gedc &0xff00)>>8);_cggb .Data [_abgd +1]=byte (_gedc &0xff);return nil ;};type colorConverter struct{_dcd func (_efcdd _fg .Image )(Image ,error );};func (_aeb *Monochrome )Histogram ()(_addf [256]int ){for _ ,_gbca :=range _aeb .Data {_addf [0xff]+=int (_fgfab [_aeb .Data [_gbca ]]);
};return _addf ;};func _bgeee (_bbag *_fg .NYCbCrA ,_ecbc RGBA ,_fgdb _fg .Rectangle ){for _afag :=0;_afag < _fgdb .Max .X ;_afag ++{for _ggeb :=0;_ggeb < _fgdb .Max .Y ;_ggeb ++{_gcged :=_bbag .NYCbCrAAt (_afag ,_ggeb );_ecbc .SetRGBA (_afag ,_ggeb ,_beb (_gcged ));
};};};func (_cfea *Gray4 )SetGray (x ,y int ,g _fd .Gray ){if x >=_cfea .Width ||y >=_cfea .Height {return ;};g =_bba (g );_cfea .setGray (x ,y ,g );};func _bba (_ffdg _fd .Gray )_fd .Gray {_ffdg .Y >>=4;_ffdg .Y |=_ffdg .Y <<4;return _ffdg };type Image interface{_a .Image ;
Base ()*ImageBase ;Copy ()Image ;Pix ()[]byte ;ColorAt (_edba ,_dgce int )(_fd .Color ,error );Validate ()error ;};func _acb ()(_bdc [256]uint64 ){for _ggd :=0;_ggd < 256;_ggd ++{if _ggd &0x01!=0{_bdc [_ggd ]|=0xff;};if _ggd &0x02!=0{_bdc [_ggd ]|=0xff00;
};if _ggd &0x04!=0{_bdc [_ggd ]|=0xff0000;};if _ggd &0x08!=0{_bdc [_ggd ]|=0xff000000;};if _ggd &0x10!=0{_bdc [_ggd ]|=0xff00000000;};if _ggd &0x20!=0{_bdc [_ggd ]|=0xff0000000000;};if _ggd &0x40!=0{_bdc [_ggd ]|=0xff000000000000;};if _ggd &0x80!=0{_bdc [_ggd ]|=0xff00000000000000;
};};return _bdc ;};func (_agdc *Monochrome )clearBit (_adag ,_agec int ){_agdc .Data [_adag ]&=^(0x80>>uint (_agec &7))};func (_cgge *NRGBA16 )At (x ,y int )_fd .Color {_afege ,_ :=_cgge .ColorAt (x ,y );return _afege };func (_aaga *Gray8 )At (x ,y int )_fd .Color {_ecfg ,_ :=_aaga .ColorAt (x ,y );
return _ecfg };func _fge (_fggc _fd .Gray )_fd .RGBA {return _fd .RGBA {R :_fggc .Y ,G :_fggc .Y ,B :_fggc .Y ,A :0xff}};func ColorAtGray4BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_fd .Gray ,error ){_bgg :=y *bytesPerLine +x >>1;if _bgg >=len (data ){return _fd .Gray {},_b .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_afa :=data [_bgg ]>>uint (4-(x &1)*4)&0xf;if len (decode )==2{_afa =uint8 (uint32 (LinearInterpolate (float64 (_afa ),0,15,decode [0],decode [1]))&0xf);};return _fd .Gray {Y :_afa *17&0xff},nil ;};func (_ecce *ImageBase )getByte (_cafg int )(byte ,error ){if _cafg > len (_ecce .Data )-1||_cafg < 0{return 0,_b .Errorf ("\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",_cafg );
};return _ecce .Data [_cafg ],nil ;};type shift int ;func NewImageBase (width int ,height int ,bitsPerComponent int ,colorComponents int ,data []byte ,alpha []byte ,decode []float64 )ImageBase {_cced :=ImageBase {Width :width ,Height :height ,BitsPerComponent :bitsPerComponent ,ColorComponents :colorComponents ,Data :data ,Alpha :alpha ,Decode :decode ,BytesPerLine :BytesPerLine (width ,bitsPerComponent ,colorComponents )};
if data ==nil {_cced .Data =make ([]byte ,height *_cced .BytesPerLine );};return _cced ;};func (_fagfb *ImageBase )MakeAlpha (){_fagfb .newAlpha ()};func (_efcdb *Gray4 )ColorAt (x ,y int )(_fd .Color ,error ){return ColorAtGray4BPC (x ,y ,_efcdb .BytesPerLine ,_efcdb .Data ,_efcdb .Decode );
};func (_fegc *NRGBA64 )Set (x ,y int ,c _fd .Color ){_deafg :=(y *_fegc .Width +x )*2;_adee :=_deafg *3;if _adee +5>=len (_fegc .Data ){return ;};_decb :=_fd .NRGBA64Model .Convert (c ).(_fd .NRGBA64 );_fegc .setNRGBA64 (_adee ,_decb ,_deafg );};func _aea (_bcdg _fd .Gray ,_ccgd monochromeModel )_fd .Gray {if _bcdg .Y > uint8 (_ccgd ){return _fd .Gray {Y :_d .MaxUint8 };
};return _fd .Gray {};};func (_gbgg *Monochrome )ReduceBinary (factor float64 )(*Monochrome ,error ){_eed :=_ffdf (uint (factor ));if !IsPowerOf2 (uint (factor )){_eed ++;};_abag :=make ([]int ,_eed );for _aac :=range _abag {_abag [_aac ]=4;};_adcc ,_fdbf :=_fbdb (_gbgg ,_abag ...);
if _fdbf !=nil {return nil ,_fdbf ;};return _adcc ,nil ;};func (_eeeba *ImageBase )GetAlpha ()[]byte {return _eeeba .Alpha };func _fed (_efcc _fd .NRGBA64 )_fd .NRGBA {return _fd .NRGBA {R :uint8 (_efcc .R >>8),G :uint8 (_efcc .G >>8),B :uint8 (_efcc .B >>8),A :uint8 (_efcc .A >>8)};
};func (_dgec *Gray8 )Copy ()Image {return &Gray8 {ImageBase :_dgec .copy ()}};func _fgf (_gg *Monochrome ,_de int )(*Monochrome ,error ){if _gg ==nil {return nil ,_f .New ("\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _de ==1{return _gg .copy (),nil ;};if !IsPowerOf2 (uint (_de )){return nil ,_b .Errorf ("\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006ci\u0064 \u0065x\u0070a\u006e\u0064\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020\u0025\u0064",_de );
};_gec :=_acef (_de );return _fb (_gg ,_de ,_gec );};func (_cgb colorConverter )Convert (src _fg .Image )(Image ,error ){return _cgb ._dcd (src )};var _ Image =&NRGBA64 {};type Gray8 struct{ImageBase };type NRGBA32 struct{ImageBase };func _cefb (_acbf _fd .RGBA )_fd .Gray {_cfeg :=(19595*uint32 (_acbf .R )+38470*uint32 (_acbf .G )+7471*uint32 (_acbf .B )+1<<7)>>16;
return _fd .Gray {Y :uint8 (_cfeg )};};func _bedg (_dfgg _fd .Color )_fd .Color {_fcae :=_fd .NRGBAModel .Convert (_dfgg ).(_fd .NRGBA );return _dgdf (_fcae );};const (_ggaedb shift =iota ;_ggfe ;);func _beb (_bgee _fd .NYCbCrA )_fd .RGBA {_aeg ,_feeg ,_efcg ,_aecg :=_fbf (_bgee ).RGBA ();
return _fd .RGBA {R :uint8 (_aeg >>8),G :uint8 (_feeg >>8),B :uint8 (_efcg >>8),A :uint8 (_aecg >>8)};};func (_dacg *Monochrome )Set (x ,y int ,c _fd .Color ){_deda :=y *_dacg .BytesPerLine +x >>3;if _deda > len (_dacg .Data )-1{return ;};_ecgg :=_dacg .ColorModel ().Convert (c ).(_fd .Gray );
_dacg .setGray (x ,_ecgg ,_deda );};func (_cfeea *NRGBA16 )ColorModel ()_fd .Model {return NRGBA16Model };func (_ffce *NRGBA16 )Validate ()error {if len (_ffce .Data )!=3*_ffce .Width *_ffce .Height /2{return _f .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};func InDelta (expected ,current ,delta float64 )bool {_ebef :=expected -current ;if _ebef <=-delta ||_ebef >=delta {return false ;};return true ;};func (_eedb *Monochrome )Bounds ()_fg .Rectangle {return _fg .Rectangle {Max :_fg .Point {X :_eedb .Width ,Y :_eedb .Height }};
};func (_cadb *RGBA32 )ColorAt (x ,y int )(_fd .Color ,error ){return ColorAtRGBA32 (x ,y ,_cadb .Width ,_cadb .Data ,_cadb .Alpha ,_cadb .Decode );};func _dgdcc (_cdbe NRGBA ,_deee RGBA ,_ddfb _fg .Rectangle ){for _dagge :=0;_dagge < _ddfb .Max .X ;_dagge ++{for _acbfc :=0;
_acbfc < _ddfb .Max .Y ;_acbfc ++{_bddec :=_cdbe .NRGBAAt (_dagge ,_acbfc );_deee .SetRGBA (_dagge ,_acbfc ,_dafa (_bddec ));};};};func (_feab *NRGBA32 )At (x ,y int )_fd .Color {_cfab ,_ :=_feab .ColorAt (x ,y );return _cfab };func _acfe (){for _abaa :=0;
_abaa < 256;_abaa ++{_fgfab [_abaa ]=uint8 (_abaa &0x1)+(uint8 (_abaa >>1)&0x1)+(uint8 (_abaa >>2)&0x1)+(uint8 (_abaa >>3)&0x1)+(uint8 (_abaa >>4)&0x1)+(uint8 (_abaa >>5)&0x1)+(uint8 (_abaa >>6)&0x1)+(uint8 (_abaa >>7)&0x1);};};func _agcaa (_gfgb nrgba64 ,_egde NRGBA ,_cagd _fg .Rectangle ){for _dgcee :=0;
_dgcee < _cagd .Max .X ;_dgcee ++{for _cggce :=0;_cggce < _cagd .Max .Y ;_cggce ++{_gfbd :=_gfgb .NRGBA64At (_dgcee ,_cggce );_egde .SetNRGBA (_dgcee ,_cggce ,_fed (_gfbd ));};};};func _gebd (_dcfda *Monochrome ,_eccge ,_ceeaf ,_afd ,_fac int ,_gcaa RasterOperator ,_abccf *Monochrome ,_ebfd ,_ecgbg int )error {var (_aagaf byte ;
_bbfd int ;_bda int ;_adcg ,_cdfa int ;_gebe ,_ddec int ;);_ccfa :=_afd >>3;_cgfd :=_afd &7;if _cgfd > 0{_aagaf =_fgbf [_cgfd ];};_bbfd =_abccf .BytesPerLine *_ecgbg +(_ebfd >>3);_bda =_dcfda .BytesPerLine *_ceeaf +(_eccge >>3);switch _gcaa {case PixSrc :for _gebe =0;
_gebe < _fac ;_gebe ++{_adcg =_bbfd +_gebe *_abccf .BytesPerLine ;_cdfa =_bda +_gebe *_dcfda .BytesPerLine ;for _ddec =0;_ddec < _ccfa ;_ddec ++{_dcfda .Data [_cdfa ]=_abccf .Data [_adcg ];_cdfa ++;_adcg ++;};if _cgfd > 0{_dcfda .Data [_cdfa ]=_cgdd (_dcfda .Data [_cdfa ],_abccf .Data [_adcg ],_aagaf );
};};case PixNotSrc :for _gebe =0;_gebe < _fac ;_gebe ++{_adcg =_bbfd +_gebe *_abccf .BytesPerLine ;_cdfa =_bda +_gebe *_dcfda .BytesPerLine ;for _ddec =0;_ddec < _ccfa ;_ddec ++{_dcfda .Data [_cdfa ]=^(_abccf .Data [_adcg ]);_cdfa ++;_adcg ++;};if _cgfd > 0{_dcfda .Data [_cdfa ]=_cgdd (_dcfda .Data [_cdfa ],^_abccf .Data [_adcg ],_aagaf );
};};case PixSrcOrDst :for _gebe =0;_gebe < _fac ;_gebe ++{_adcg =_bbfd +_gebe *_abccf .BytesPerLine ;_cdfa =_bda +_gebe *_dcfda .BytesPerLine ;for _ddec =0;_ddec < _ccfa ;_ddec ++{_dcfda .Data [_cdfa ]|=_abccf .Data [_adcg ];_cdfa ++;_adcg ++;};if _cgfd > 0{_dcfda .Data [_cdfa ]=_cgdd (_dcfda .Data [_cdfa ],_abccf .Data [_adcg ]|_dcfda .Data [_cdfa ],_aagaf );
};};case PixSrcAndDst :for _gebe =0;_gebe < _fac ;_gebe ++{_adcg =_bbfd +_gebe *_abccf .BytesPerLine ;_cdfa =_bda +_gebe *_dcfda .BytesPerLine ;for _ddec =0;_ddec < _ccfa ;_ddec ++{_dcfda .Data [_cdfa ]&=_abccf .Data [_adcg ];_cdfa ++;_adcg ++;};if _cgfd > 0{_dcfda .Data [_cdfa ]=_cgdd (_dcfda .Data [_cdfa ],_abccf .Data [_adcg ]&_dcfda .Data [_cdfa ],_aagaf );
};};case PixSrcXorDst :for _gebe =0;_gebe < _fac ;_gebe ++{_adcg =_bbfd +_gebe *_abccf .BytesPerLine ;_cdfa =_bda +_gebe *_dcfda .BytesPerLine ;for _ddec =0;_ddec < _ccfa ;_ddec ++{_dcfda .Data [_cdfa ]^=_abccf .Data [_adcg ];_cdfa ++;_adcg ++;};if _cgfd > 0{_dcfda .Data [_cdfa ]=_cgdd (_dcfda .Data [_cdfa ],_abccf .Data [_adcg ]^_dcfda .Data [_cdfa ],_aagaf );
};};case PixNotSrcOrDst :for _gebe =0;_gebe < _fac ;_gebe ++{_adcg =_bbfd +_gebe *_abccf .BytesPerLine ;_cdfa =_bda +_gebe *_dcfda .BytesPerLine ;for _ddec =0;_ddec < _ccfa ;_ddec ++{_dcfda .Data [_cdfa ]|=^(_abccf .Data [_adcg ]);_cdfa ++;_adcg ++;};if _cgfd > 0{_dcfda .Data [_cdfa ]=_cgdd (_dcfda .Data [_cdfa ],^(_abccf .Data [_adcg ])|_dcfda .Data [_cdfa ],_aagaf );
};};case PixNotSrcAndDst :for _gebe =0;_gebe < _fac ;_gebe ++{_adcg =_bbfd +_gebe *_abccf .BytesPerLine ;_cdfa =_bda +_gebe *_dcfda .BytesPerLine ;for _ddec =0;_ddec < _ccfa ;_ddec ++{_dcfda .Data [_cdfa ]&=^(_abccf .Data [_adcg ]);_cdfa ++;_adcg ++;};
if _cgfd > 0{_dcfda .Data [_cdfa ]=_cgdd (_dcfda .Data [_cdfa ],^(_abccf .Data [_adcg ])&_dcfda .Data [_cdfa ],_aagaf );};};case PixSrcOrNotDst :for _gebe =0;_gebe < _fac ;_gebe ++{_adcg =_bbfd +_gebe *_abccf .BytesPerLine ;_cdfa =_bda +_gebe *_dcfda .BytesPerLine ;
for _ddec =0;_ddec < _ccfa ;_ddec ++{_dcfda .Data [_cdfa ]=_abccf .Data [_adcg ]|^(_dcfda .Data [_cdfa ]);_cdfa ++;_adcg ++;};if _cgfd > 0{_dcfda .Data [_cdfa ]=_cgdd (_dcfda .Data [_cdfa ],_abccf .Data [_adcg ]|^(_dcfda .Data [_cdfa ]),_aagaf );};};case PixSrcAndNotDst :for _gebe =0;
_gebe < _fac ;_gebe ++{_adcg =_bbfd +_gebe *_abccf .BytesPerLine ;_cdfa =_bda +_gebe *_dcfda .BytesPerLine ;for _ddec =0;_ddec < _ccfa ;_ddec ++{_dcfda .Data [_cdfa ]=_abccf .Data [_adcg ]&^(_dcfda .Data [_cdfa ]);_cdfa ++;_adcg ++;};if _cgfd > 0{_dcfda .Data [_cdfa ]=_cgdd (_dcfda .Data [_cdfa ],_abccf .Data [_adcg ]&^(_dcfda .Data [_cdfa ]),_aagaf );
};};case PixNotPixSrcOrDst :for _gebe =0;_gebe < _fac ;_gebe ++{_adcg =_bbfd +_gebe *_abccf .BytesPerLine ;_cdfa =_bda +_gebe *_dcfda .BytesPerLine ;for _ddec =0;_ddec < _ccfa ;_ddec ++{_dcfda .Data [_cdfa ]=^(_abccf .Data [_adcg ]|_dcfda .Data [_cdfa ]);
_cdfa ++;_adcg ++;};if _cgfd > 0{_dcfda .Data [_cdfa ]=_cgdd (_dcfda .Data [_cdfa ],^(_abccf .Data [_adcg ]|_dcfda .Data [_cdfa ]),_aagaf );};};case PixNotPixSrcAndDst :for _gebe =0;_gebe < _fac ;_gebe ++{_adcg =_bbfd +_gebe *_abccf .BytesPerLine ;_cdfa =_bda +_gebe *_dcfda .BytesPerLine ;
for _ddec =0;_ddec < _ccfa ;_ddec ++{_dcfda .Data [_cdfa ]=^(_abccf .Data [_adcg ]&_dcfda .Data [_cdfa ]);_cdfa ++;_adcg ++;};if _cgfd > 0{_dcfda .Data [_cdfa ]=_cgdd (_dcfda .Data [_cdfa ],^(_abccf .Data [_adcg ]&_dcfda .Data [_cdfa ]),_aagaf );};};case PixNotPixSrcXorDst :for _gebe =0;
_gebe < _fac ;_gebe ++{_adcg =_bbfd +_gebe *_abccf .BytesPerLine ;_cdfa =_bda +_gebe *_dcfda .BytesPerLine ;for _ddec =0;_ddec < _ccfa ;_ddec ++{_dcfda .Data [_cdfa ]=^(_abccf .Data [_adcg ]^_dcfda .Data [_cdfa ]);_cdfa ++;_adcg ++;};if _cgfd > 0{_dcfda .Data [_cdfa ]=_cgdd (_dcfda .Data [_cdfa ],^(_abccf .Data [_adcg ]^_dcfda .Data [_cdfa ]),_aagaf );
};};default:_ab .Log .Debug ("\u0050\u0072ov\u0069\u0064\u0065d\u0020\u0069\u006e\u0076ali\u0064 r\u0061\u0073\u0074\u0065\u0072\u0020\u006fpe\u0072\u0061\u0074\u006f\u0072\u003a\u0020%\u0076",_gcaa );return _f .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");
};return nil ;};func AddDataPadding (width ,height ,bitsPerComponent ,colorComponents int ,data []byte )([]byte ,error ){_effca :=BytesPerLine (width ,bitsPerComponent ,colorComponents );if _effca ==width *colorComponents *bitsPerComponent /8{return data ,nil ;
};_fdca :=width *colorComponents *bitsPerComponent ;_cfdf :=_effca *8;_dfa :=8-(_cfdf -_fdca );_ebcb :=_fgd .NewReader (data );_caba :=_effca -1;_acaa :=make ([]byte ,_caba );_ggfc :=make ([]byte ,height *_effca );_cdc :=_fgd .NewWriterMSB (_ggfc );var _dfad uint64 ;
var _gbbd error ;for _ageaa :=0;_ageaa < height ;_ageaa ++{_ ,_gbbd =_ebcb .Read (_acaa );if _gbbd !=nil {return nil ,_gbbd ;};_ ,_gbbd =_cdc .Write (_acaa );if _gbbd !=nil {return nil ,_gbbd ;};_dfad ,_gbbd =_ebcb .ReadBits (byte (_dfa ));if _gbbd !=nil {return nil ,_gbbd ;
};_ ,_gbbd =_cdc .WriteBits (_dfad ,_dfa );if _gbbd !=nil {return nil ,_gbbd ;};_cdc .FinishByte ();};return _ggfc ,nil ;};type Monochrome struct{ImageBase ;ModelThreshold uint8 ;};func (_cedg *Gray4 )setGray (_dbfeb int ,_gdfe int ,_ceag _fd .Gray ){_efddc :=_gdfe *_cedg .BytesPerLine ;
_eagf :=_efddc +(_dbfeb >>1);if _eagf >=len (_cedg .Data ){return ;};_faga :=_ceag .Y >>4;_cedg .Data [_eagf ]=(_cedg .Data [_eagf ]&(^(0xf0>>uint (4*(_dbfeb &1)))))|(_faga <<uint (4-4*(_dbfeb &1)));};func ColorAtGray16BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_fd .Gray16 ,error ){_gfaf :=(y *bytesPerLine /2+x )*2;
if _gfaf +1>=len (data ){return _fd .Gray16 {},_b .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_dbec :=uint16 (data [_gfaf ])<<8|uint16 (data [_gfaf +1]);if len (decode )==2{_dbec =uint16 (uint64 (LinearInterpolate (float64 (_dbec ),0,65535,decode [0],decode [1])));};return _fd .Gray16 {Y :_dbec },nil ;};func _bg (_fgda ,_cde *Monochrome ,_effc []byte ,_abbc int )(_cdfb error ){var (_dbga ,_fbg ,_ega ,_ead ,_afe ,_bbc ,_dcf ,_fca int ;
_gbe ,_bddbd ,_agb ,_cbde uint32 ;_cddc ,_adb byte ;_aaf uint16 ;);_dec :=make ([]byte ,4);_egc :=make ([]byte ,4);for _ega =0;_ega < _fgda .Height -1;_ega ,_ead =_ega +2,_ead +1{_dbga =_ega *_fgda .BytesPerLine ;_fbg =_ead *_cde .BytesPerLine ;for _afe ,_bbc =0,0;
_afe < _abbc ;_afe ,_bbc =_afe +4,_bbc +1{for _dcf =0;_dcf < 4;_dcf ++{_fca =_dbga +_afe +_dcf ;if _fca <=len (_fgda .Data )-1&&_fca < _dbga +_fgda .BytesPerLine {_dec [_dcf ]=_fgda .Data [_fca ];}else {_dec [_dcf ]=0x00;};_fca =_dbga +_fgda .BytesPerLine +_afe +_dcf ;
if _fca <=len (_fgda .Data )-1&&_fca < _dbga +(2*_fgda .BytesPerLine ){_egc [_dcf ]=_fgda .Data [_fca ];}else {_egc [_dcf ]=0x00;};};_gbe =_g .BigEndian .Uint32 (_dec );_bddbd =_g .BigEndian .Uint32 (_egc );_agb =_gbe &_bddbd ;_agb |=_agb <<1;_cbde =_gbe |_bddbd ;
_cbde &=_cbde <<1;_bddbd =_agb |_cbde ;_bddbd &=0xaaaaaaaa;_gbe =_bddbd |(_bddbd <<7);_cddc =byte (_gbe >>24);_adb =byte ((_gbe >>8)&0xff);_fca =_fbg +_bbc ;if _fca +1==len (_cde .Data )-1||_fca +1>=_fbg +_cde .BytesPerLine {if _cdfb =_cde .setByte (_fca ,_effc [_cddc ]);
_cdfb !=nil {return _b .Errorf ("\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_fca );};}else {_aaf =(uint16 (_effc [_cddc ])<<8)|uint16 (_effc [_adb ]);if _cdfb =_cde .setTwoBytes (_fca ,_aaf );_cdfb !=nil {return _b .Errorf ("s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_fca );
};_bbc ++;};};};return nil ;};func (_gdaf *Monochrome )ColorAt (x ,y int )(_fd .Color ,error ){return ColorAtGray1BPC (x ,y ,_gdaf .BytesPerLine ,_gdaf .Data ,_gdaf .Decode );};type ImageBase struct{Width ,Height int ;BitsPerComponent ,ColorComponents int ;
Data ,Alpha []byte ;Decode []float64 ;BytesPerLine int ;};func (_fdbb *NRGBA16 )Base ()*ImageBase {return &_fdbb .ImageBase };func (_dggg *NRGBA64 )NRGBA64At (x ,y int )_fd .NRGBA64 {_bfba ,_ :=ColorAtNRGBA64 (x ,y ,_dggg .Width ,_dggg .Data ,_dggg .Alpha ,_dggg .Decode );
return _bfba ;};type NRGBA interface{NRGBAAt (_facf ,_ffcd int )_fd .NRGBA ;SetNRGBA (_cagc ,_gefd int ,_ebfe _fd .NRGBA );};func ColorAtNRGBA16 (x ,y ,width ,bytesPerLine int ,data ,alpha []byte ,decode []float64 )(_fd .NRGBA ,error ){_cegfa :=y *bytesPerLine +x *3/2;
if _cegfa +1>=len (data ){return _fd .NRGBA {},_fbga (x ,y );};const (_eeag =0xf;_fffd =uint8 (0xff););_gaab :=_fffd ;if alpha !=nil {_caeg :=y *BytesPerLine (width ,4,1);if _caeg < len (alpha ){if x %2==0{_gaab =(alpha [_caeg ]>>uint (4))&_eeag ;}else {_gaab =alpha [_caeg ]&_eeag ;
};_gaab |=_gaab <<4;};};var _cceb ,_dcba ,_gcaf uint8 ;if x *3%2==0{_cceb =(data [_cegfa ]>>uint (4))&_eeag ;_dcba =data [_cegfa ]&_eeag ;_gcaf =(data [_cegfa +1]>>uint (4))&_eeag ;}else {_cceb =data [_cegfa ]&_eeag ;_dcba =(data [_cegfa +1]>>uint (4))&_eeag ;
_gcaf =data [_cegfa +1]&_eeag ;};if len (decode )==6{_cceb =uint8 (uint32 (LinearInterpolate (float64 (_cceb ),0,15,decode [0],decode [1]))&0xf);_dcba =uint8 (uint32 (LinearInterpolate (float64 (_dcba ),0,15,decode [2],decode [3]))&0xf);_gcaf =uint8 (uint32 (LinearInterpolate (float64 (_gcaf ),0,15,decode [4],decode [5]))&0xf);
};return _fd .NRGBA {R :(_cceb <<4)|(_cceb &0xf),G :(_dcba <<4)|(_dcba &0xf),B :(_gcaf <<4)|(_gcaf &0xf),A :_gaab },nil ;};func ImgToGray (i _fg .Image )*_fg .Gray {if _fddb ,_begc :=i .(*_fg .Gray );_begc {return _fddb ;};_dfac :=i .Bounds ();_facb :=_fg .NewGray (_dfac );
for _ggff :=0;_ggff < _dfac .Max .X ;_ggff ++{for _fgaa :=0;_fgaa < _dfac .Max .Y ;_fgaa ++{_cfecb :=i .At (_ggff ,_fgaa );_facb .Set (_ggff ,_fgaa ,_cfecb );};};return _facb ;};func ImgToBinary (i _fg .Image ,threshold uint8 )*_fg .Gray {switch _dfgb :=i .(type ){case *_fg .Gray :if _dgecd (_dfgb ){return _dfgb ;
};return _dbbd (_dfgb ,threshold );case *_fg .Gray16 :return _eabe (_dfgb ,threshold );default:return _dagc (_dfgb ,threshold );};};func IsGrayImgBlackAndWhite (i *_fg .Gray )bool {return _dgecd (i )};func _dafa (_cgg _fd .NRGBA )_fd .RGBA {_aba ,_gbee ,_cea ,_fba :=_cgg .RGBA ();
return _fd .RGBA {R :uint8 (_aba >>8),G :uint8 (_gbee >>8),B :uint8 (_cea >>8),A :uint8 (_fba >>8)};};var _ RGBA =&RGBA32 {};func (_cecg *Gray8 )SetGray (x ,y int ,g _fd .Gray ){_bbff :=y *_cecg .BytesPerLine +x ;if _bbff > len (_cecg .Data )-1{return ;
};_cecg .Data [_bbff ]=g .Y ;};func (_edge *ImageBase )setByte (_dgfb int ,_ccfc byte )error {if _dgfb > len (_edge .Data )-1{return _f .New ("\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");};_edge .Data [_dgfb ]=_ccfc ;
return nil ;};func (_feega *RGBA32 )Bounds ()_fg .Rectangle {return _fg .Rectangle {Max :_fg .Point {X :_feega .Width ,Y :_feega .Height }};};func _cgbfe (_gdda Gray ,_bccdc NRGBA ,_gdbeg _fg .Rectangle ){for _bfdf :=0;_bfdf < _gdbeg .Max .X ;_bfdf ++{for _bdde :=0;
_bdde < _gdbeg .Max .Y ;_bdde ++{_caa :=_gdda .GrayAt (_bfdf ,_bdde );_bccdc .SetNRGBA (_bfdf ,_bdde ,_ddbc (_caa ));};};};func (_adaa *NRGBA16 )Bounds ()_fg .Rectangle {return _fg .Rectangle {Max :_fg .Point {X :_adaa .Width ,Y :_adaa .Height }};};func (_ebf *CMYK32 )CMYKAt (x ,y int )_fd .CMYK {_cfb ,_ :=ColorAtCMYK (x ,y ,_ebf .Width ,_ebf .Data ,_ebf .Decode );
return _cfb ;};func (_acfea *NRGBA32 )NRGBAAt (x ,y int )_fd .NRGBA {_bafbe ,_ :=ColorAtNRGBA32 (x ,y ,_acfea .Width ,_acfea .Data ,_acfea .Alpha ,_acfea .Decode );return _bafbe ;};func _eaa (_ebfc Gray ,_dag NRGBA ,_gad _fg .Rectangle ){for _ecf :=0;_ecf < _gad .Max .X ;
_ecf ++{for _fdbd :=0;_fdbd < _gad .Max .Y ;_fdbd ++{_eccc :=_beca (_dag .NRGBAAt (_ecf ,_fdbd ));_ebfc .SetGray (_ecf ,_fdbd ,_eccc );};};};func _fbdb (_cfe *Monochrome ,_bfe ...int )(_gga *Monochrome ,_fagf error ){if _cfe ==nil {return nil ,_f .New ("\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");
};if len (_bfe )==0{return nil ,_f .New ("\u0074h\u0065\u0072e\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020o\u006e\u0065\u0020\u006c\u0065\u0076\u0065\u006c\u0020\u006f\u0066 \u0072\u0065\u0064\u0075\u0063\u0074\u0069\u006f\u006e");
};_agda :=_fbgb ();_gga =_cfe ;for _ ,_ggg :=range _bfe {if _ggg <=0{break ;};_gga ,_fagf =_bddb (_gga ,_ggg ,_agda );if _fagf !=nil {return nil ,_fagf ;};};return _gga ,nil ;};func _gdcc (_abcg RGBA ,_cffe NRGBA ,_acd _fg .Rectangle ){for _dbc :=0;_dbc < _acd .Max .X ;
_dbc ++{for _bdcfd :=0;_bdcfd < _acd .Max .Y ;_bdcfd ++{_fagb :=_abcg .RGBAAt (_dbc ,_bdcfd );_cffe .SetNRGBA (_dbc ,_bdcfd ,_dbe (_fagb ));};};};func (_eba *ImageBase )setEightFullBytes (_dbfab int ,_cggc uint64 )error {if _dbfab +7> len (_eba .Data )-1{return _f .New ("\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_eba .Data [_dbfab ]=byte ((_cggc &0xff00000000000000)>>56);_eba .Data [_dbfab +1]=byte ((_cggc &0xff000000000000)>>48);_eba .Data [_dbfab +2]=byte ((_cggc &0xff0000000000)>>40);_eba .Data [_dbfab +3]=byte ((_cggc &0xff00000000)>>32);_eba .Data [_dbfab +4]=byte ((_cggc &0xff000000)>>24);
_eba .Data [_dbfab +5]=byte ((_cggc &0xff0000)>>16);_eba .Data [_dbfab +6]=byte ((_cggc &0xff00)>>8);_eba .Data [_dbfab +7]=byte (_cggc &0xff);return nil ;};var _ Image =&Gray16 {};var (_fgbf =[]byte {0x00,0x80,0xC0,0xE0,0xF0,0xF8,0xFC,0xFE,0xFF};_gaee =[]byte {0x00,0x01,0x03,0x07,0x0F,0x1F,0x3F,0x7F,0xFF};
);func (_ccbb *RGBA32 )Copy ()Image {return &RGBA32 {ImageBase :_ccbb .copy ()}};func (_beg *CMYK32 )Copy ()Image {return &CMYK32 {ImageBase :_beg .copy ()}};func (_fagc *Monochrome )setGray (_acad int ,_decf _fd .Gray ,_effb int ){if _decf .Y ==0{_fagc .clearBit (_effb ,_acad );
}else {_fagc .setGrayBit (_effb ,_acad );};};func (_fcd *CMYK32 )Bounds ()_fg .Rectangle {return _fg .Rectangle {Max :_fg .Point {X :_fcd .Width ,Y :_fcd .Height }};};func ScaleAlphaToMonochrome (data []byte ,width ,height int )([]byte ,error ){_ff :=BytesPerLine (width ,8,1);
if len (data )< _ff *height {return nil ,nil ;};_ge :=&Gray8 {NewImageBase (width ,height ,8,1,data ,nil ,nil )};_e ,_cf :=MonochromeConverter .Convert (_ge );if _cf !=nil {return nil ,_cf ;};return _e .Base ().Data ,nil ;};func MonochromeModel (threshold uint8 )_fd .Model {return monochromeModel (threshold )};
func (_eaf *Gray2 )Set (x ,y int ,c _fd .Color ){if x >=_eaf .Width ||y >=_eaf .Height {return ;};_faag :=Gray2Model .Convert (c ).(_fd .Gray );_cfbg :=y *_eaf .BytesPerLine ;_bcc :=_cfbg +(x >>2);_aaa :=_faag .Y >>6;_eaf .Data [_bcc ]=(_eaf .Data [_bcc ]&(^(0xc0>>uint (2*((x )&3)))))|(_aaa <<uint (6-2*(x &3)));
};func (_aeec *Gray4 )Base ()*ImageBase {return &_aeec .ImageBase };func (_cba *Gray4 )GrayAt (x ,y int )_fd .Gray {_fgea ,_ :=ColorAtGray4BPC (x ,y ,_cba .BytesPerLine ,_cba .Data ,_cba .Decode );return _fgea ;};var _ Image =&RGBA32 {};func (_fggg *NRGBA32 )Copy ()Image {return &NRGBA32 {ImageBase :_fggg .copy ()}};
func _gdb (_egcc ,_dgea *Monochrome ,_ccg []byte ,_cag int )(_agg error ){var (_gcfa ,_bgd ,_gbb ,_ggdc ,_bcdb ,_agc ,_eae ,_efa int ;_efd ,_fad uint32 ;_ada ,_age byte ;_ebed uint16 ;);_bfdg :=make ([]byte ,4);_ebge :=make ([]byte ,4);for _gbb =0;_gbb < _egcc .Height -1;
_gbb ,_ggdc =_gbb +2,_ggdc +1{_gcfa =_gbb *_egcc .BytesPerLine ;_bgd =_ggdc *_dgea .BytesPerLine ;for _bcdb ,_agc =0,0;_bcdb < _cag ;_bcdb ,_agc =_bcdb +4,_agc +1{for _eae =0;_eae < 4;_eae ++{_efa =_gcfa +_bcdb +_eae ;if _efa <=len (_egcc .Data )-1&&_efa < _gcfa +_egcc .BytesPerLine {_bfdg [_eae ]=_egcc .Data [_efa ];
}else {_bfdg [_eae ]=0x00;};_efa =_gcfa +_egcc .BytesPerLine +_bcdb +_eae ;if _efa <=len (_egcc .Data )-1&&_efa < _gcfa +(2*_egcc .BytesPerLine ){_ebge [_eae ]=_egcc .Data [_efa ];}else {_ebge [_eae ]=0x00;};};_efd =_g .BigEndian .Uint32 (_bfdg );_fad =_g .BigEndian .Uint32 (_ebge );
_fad &=_efd ;_fad &=_fad <<1;_fad &=0xaaaaaaaa;_efd =_fad |(_fad <<7);_ada =byte (_efd >>24);_age =byte ((_efd >>8)&0xff);_efa =_bgd +_agc ;if _efa +1==len (_dgea .Data )-1||_efa +1>=_bgd +_dgea .BytesPerLine {_dgea .Data [_efa ]=_ccg [_ada ];if _agg =_dgea .setByte (_efa ,_ccg [_ada ]);
_agg !=nil {return _b .Errorf ("\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_efa );};}else {_ebed =(uint16 (_ccg [_ada ])<<8)|uint16 (_ccg [_age ]);if _agg =_dgea .setTwoBytes (_efa ,_ebed );_agg !=nil {return _b .Errorf ("s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_efa );
};_agc ++;};};};return nil ;};func (_dfd *Monochrome )IsUnpadded ()bool {return (_dfd .Width *_dfd .Height )==len (_dfd .Data )};func _ded ()(_aef [256]uint32 ){for _cdde :=0;_cdde < 256;_cdde ++{if _cdde &0x01!=0{_aef [_cdde ]|=0xf;};if _cdde &0x02!=0{_aef [_cdde ]|=0xf0;
};if _cdde &0x04!=0{_aef [_cdde ]|=0xf00;};if _cdde &0x08!=0{_aef [_cdde ]|=0xf000;};if _cdde &0x10!=0{_aef [_cdde ]|=0xf0000;};if _cdde &0x20!=0{_aef [_cdde ]|=0xf00000;};if _cdde &0x40!=0{_aef [_cdde ]|=0xf000000;};if _cdde &0x80!=0{_aef [_cdde ]|=0xf0000000;
};};return _aef ;};func _bge (_cfa _fd .Gray )_fd .CMYK {return _fd .CMYK {K :0xff-_cfa .Y }};type ColorConverter interface{Convert (_bgf _fg .Image )(Image ,error );};func _gda (_ege _fd .CMYK )_fd .NRGBA {_ddge ,_bae ,_bbe :=_fd .CMYKToRGB (_ege .C ,_ege .M ,_ege .Y ,_ege .K );
return _fd .NRGBA {R :_ddge ,G :_bae ,B :_bbe ,A :0xff};};func (_ddee *NRGBA32 )Bounds ()_fg .Rectangle {return _fg .Rectangle {Max :_fg .Point {X :_ddee .Width ,Y :_ddee .Height }};};func _eabe (_degd *_fg .Gray16 ,_aggda uint8 )*_fg .Gray {_gcgg :=_degd .Bounds ();
_cdddc :=_fg .NewGray (_gcgg );for _ggbgf :=0;_ggbgf < _gcgg .Dx ();_ggbgf ++{for _defa :=0;_defa < _gcgg .Dy ();_defa ++{_fcde :=_degd .Gray16At (_ggbgf ,_defa );_cdddc .SetGray (_ggbgf ,_defa ,_fd .Gray {Y :_bef (uint8 (_fcde .Y /256),_aggda )});};};
return _cdddc ;};var _ Image =&NRGBA16 {};func _fbfg (_gdbg _fd .Color )_fd .Color {_ggab :=_fd .GrayModel .Convert (_gdbg ).(_fd .Gray );return _bba (_ggab );};func (_cfed *NRGBA32 )Base ()*ImageBase {return &_cfed .ImageBase };func (_gade *Gray16 )SetGray (x ,y int ,g _fd .Gray ){_ffea :=(y *_gade .BytesPerLine /2+x )*2;
if _ffea +1>=len (_gade .Data ){return ;};_gade .Data [_ffea ]=g .Y ;_gade .Data [_ffea +1]=g .Y ;};type Gray interface{GrayAt (_dgac ,_ecc int )_fd .Gray ;SetGray (_aece ,_afff int ,_eccb _fd .Gray );};func _bfae (_cbgg _fd .Gray )_fd .Gray {_efge :=_cbgg .Y >>6;
_efge |=_efge <<2;_cbgg .Y =_efge |_efge <<4;return _cbgg ;};type CMYK interface{CMYKAt (_gfc ,_fde int )_fd .CMYK ;SetCMYK (_babe ,_efcf int ,_gde _fd .CMYK );};func ColorAtNRGBA32 (x ,y ,width int ,data ,alpha []byte ,decode []float64 )(_fd .NRGBA ,error ){_gaeee :=y *width +x ;
_bebg :=3*_gaeee ;if _bebg +2>=len (data ){return _fd .NRGBA {},_b .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_bbbc :=uint8 (0xff);if alpha !=nil &&len (alpha )> _gaeee {_bbbc =alpha [_gaeee ];};_gead ,_gbab ,_eabg :=data [_bebg ],data [_bebg +1],data [_bebg +2];if len (decode )==6{_bffa :=LinearInterpolate (float64 (_gead ),0,255.0,decode [0],decode [1]);_badb :=LinearInterpolate (float64 (_gbab ),0,255.0,decode [2],decode [3]);
_cadc :=LinearInterpolate (float64 (_eabg ),0,255.0,decode [4],decode [5]);if _bffa <=1.0&&_badb <=1.0&&_cadc <=1.0{_bffa *=255.0;_badb *=255.0;_cadc *=255.0;};_gead =uint8 (_bffa )&0xff;_gbab =uint8 (_badb )&0xff;_eabg =uint8 (_cadc )&0xff;};return _fd .NRGBA {R :_gead ,G :_gbab ,B :_eabg ,A :_bbbc },nil ;
};var _ NRGBA =&NRGBA16 {};var _ Gray =&Monochrome {};func _cbbf (_fdcg *Monochrome ,_cfeag ,_gadg int ,_fgfc ,_efda int ,_edeb RasterOperator ){var (_aeaf bool ;_cff bool ;_egff int ;_febb int ;_gecd int ;_gae int ;_gbcg bool ;_dcgaf byte ;);_caea :=8-(_cfeag &7);
_aed :=_gaee [_caea ];_dfgc :=_fdcg .BytesPerLine *_gadg +(_cfeag >>3);if _fgfc < _caea {_aeaf =true ;_aed &=_fgbf [8-_caea +_fgfc ];};if !_aeaf {_egff =(_fgfc -_caea )>>3;if _egff !=0{_cff =true ;_febb =_dfgc +1;};};_gecd =(_cfeag +_fgfc )&7;if !(_aeaf ||_gecd ==0){_gbcg =true ;
_dcgaf =_fgbf [_gecd ];_gae =_dfgc +1+_egff ;};var _cdffc ,_cfge int ;switch _edeb {case PixClr :for _cdffc =0;_cdffc < _efda ;_cdffc ++{_fdcg .Data [_dfgc ]=_cgdd (_fdcg .Data [_dfgc ],0x0,_aed );_dfgc +=_fdcg .BytesPerLine ;};if _cff {for _cdffc =0;_cdffc < _efda ;
_cdffc ++{for _cfge =0;_cfge < _egff ;_cfge ++{_fdcg .Data [_febb +_cfge ]=0x0;};_febb +=_fdcg .BytesPerLine ;};};if _gbcg {for _cdffc =0;_cdffc < _efda ;_cdffc ++{_fdcg .Data [_gae ]=_cgdd (_fdcg .Data [_gae ],0x0,_dcgaf );_gae +=_fdcg .BytesPerLine ;
};};case PixSet :for _cdffc =0;_cdffc < _efda ;_cdffc ++{_fdcg .Data [_dfgc ]=_cgdd (_fdcg .Data [_dfgc ],0xff,_aed );_dfgc +=_fdcg .BytesPerLine ;};if _cff {for _cdffc =0;_cdffc < _efda ;_cdffc ++{for _cfge =0;_cfge < _egff ;_cfge ++{_fdcg .Data [_febb +_cfge ]=0xff;
};_febb +=_fdcg .BytesPerLine ;};};if _gbcg {for _cdffc =0;_cdffc < _efda ;_cdffc ++{_fdcg .Data [_gae ]=_cgdd (_fdcg .Data [_gae ],0xff,_dcgaf );_gae +=_fdcg .BytesPerLine ;};};case PixNotDst :for _cdffc =0;_cdffc < _efda ;_cdffc ++{_fdcg .Data [_dfgc ]=_cgdd (_fdcg .Data [_dfgc ],^_fdcg .Data [_dfgc ],_aed );
_dfgc +=_fdcg .BytesPerLine ;};if _cff {for _cdffc =0;_cdffc < _efda ;_cdffc ++{for _cfge =0;_cfge < _egff ;_cfge ++{_fdcg .Data [_febb +_cfge ]=^(_fdcg .Data [_febb +_cfge ]);};_febb +=_fdcg .BytesPerLine ;};};if _gbcg {for _cdffc =0;_cdffc < _efda ;_cdffc ++{_fdcg .Data [_gae ]=_cgdd (_fdcg .Data [_gae ],^_fdcg .Data [_gae ],_dcgaf );
_gae +=_fdcg .BytesPerLine ;};};};};func GrayHistogram (g Gray )(_abfe [256]int ){switch _gbef :=g .(type ){case Histogramer :return _gbef .Histogram ();case _fg .Image :_eebc :=_gbef .Bounds ();for _edfb :=0;_edfb < _eebc .Max .X ;_edfb ++{for _ceca :=0;
_ceca < _eebc .Max .Y ;_ceca ++{_abfe [g .GrayAt (_edfb ,_ceca ).Y ]++;};};return _abfe ;default:return [256]int {};};};func _dbfc (_fgag *Monochrome ,_eeef ,_dce int ,_dfff ,_eddf int ,_gbdf RasterOperator ){var (_fdba int ;_eccd byte ;_ccge ,_gdd int ;
_eac int ;);_cbgd :=_dfff >>3;_gefaf :=_dfff &7;if _gefaf > 0{_eccd =_fgbf [_gefaf ];};_fdba =_fgag .BytesPerLine *_dce +(_eeef >>3);switch _gbdf {case PixClr :for _ccge =0;_ccge < _eddf ;_ccge ++{_eac =_fdba +_ccge *_fgag .BytesPerLine ;for _gdd =0;_gdd < _cbgd ;
_gdd ++{_fgag .Data [_eac ]=0x0;_eac ++;};if _gefaf > 0{_fgag .Data [_eac ]=_cgdd (_fgag .Data [_eac ],0x0,_eccd );};};case PixSet :for _ccge =0;_ccge < _eddf ;_ccge ++{_eac =_fdba +_ccge *_fgag .BytesPerLine ;for _gdd =0;_gdd < _cbgd ;_gdd ++{_fgag .Data [_eac ]=0xff;
_eac ++;};if _gefaf > 0{_fgag .Data [_eac ]=_cgdd (_fgag .Data [_eac ],0xff,_eccd );};};case PixNotDst :for _ccge =0;_ccge < _eddf ;_ccge ++{_eac =_fdba +_ccge *_fgag .BytesPerLine ;for _gdd =0;_gdd < _cbgd ;_gdd ++{_fgag .Data [_eac ]=^_fgag .Data [_eac ];
_eac ++;};if _gefaf > 0{_fgag .Data [_eac ]=_cgdd (_fgag .Data [_eac ],^_fgag .Data [_eac ],_eccd );};};};};func _aecea (_caga Gray ,_eegc RGBA ,_aagf _fg .Rectangle ){for _abd :=0;_abd < _aagf .Max .X ;_abd ++{for _cffcb :=0;_cffcb < _aagf .Max .Y ;_cffcb ++{_dafdb :=_caga .GrayAt (_abd ,_cffcb );
_eegc .SetRGBA (_abd ,_cffcb ,_fge (_dafdb ));};};};func (_afgc *Gray16 )Histogram ()(_dgab [256]int ){for _ffgf :=0;_ffgf < _afgc .Width ;_ffgf ++{for _ddfa :=0;_ddfa < _afgc .Height ;_ddfa ++{_dgab [_afgc .GrayAt (_ffgf ,_ddfa ).Y ]++;};};return _dgab ;
};func ColorAtCMYK (x ,y ,width int ,data []byte ,decode []float64 )(_fd .CMYK ,error ){_bde :=4*(y *width +x );if _bde +3>=len (data ){return _fd .CMYK {},_b .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};C :=data [_bde ]&0xff;M :=data [_bde +1]&0xff;Y :=data [_bde +2]&0xff;K :=data [_bde +3]&0xff;if len (decode )==8{C =uint8 (uint32 (LinearInterpolate (float64 (C ),0,255,decode [0],decode [1]))&0xff);M =uint8 (uint32 (LinearInterpolate (float64 (M ),0,255,decode [2],decode [3]))&0xff);
Y =uint8 (uint32 (LinearInterpolate (float64 (Y ),0,255,decode [4],decode [5]))&0xff);K =uint8 (uint32 (LinearInterpolate (float64 (K ),0,255,decode [6],decode [7]))&0xff);};return _fd .CMYK {C :C ,M :M ,Y :Y ,K :K },nil ;};func _gbeg (_cbgga _fg .Image )(Image ,error ){if _cbcd ,_afaf :=_cbgga .(*NRGBA32 );
_afaf {return _cbcd .Copy (),nil ;};_bffd ,_edae ,_gfdc :=_dbbb (_cbgga ,1);_egg ,_bbbe :=NewImage (_bffd .Max .X ,_bffd .Max .Y ,8,3,nil ,_gfdc ,nil );if _bbbe !=nil {return nil ,_bbbe ;};_dbabd (_cbgga ,_egg ,_bffd );if len (_gfdc )!=0&&!_edae {if _cffg :=_ebgb (_gfdc ,_egg );
_cffg !=nil {return nil ,_cffg ;};};return _egg ,nil ;};func (_bdgb *Gray8 )ColorModel ()_fd .Model {return _fd .GrayModel };func (_bgga *ImageBase )HasAlpha ()bool {if _bgga .Alpha ==nil {return false ;};for _bgec :=range _bgga .Alpha {if _bgga .Alpha [_bgec ]!=0xff{return true ;
};};return false ;};type monochromeModel uint8 ;func _dbbd (_cgec *_fg .Gray ,_faff uint8 )*_fg .Gray {_gdaac :=_cgec .Bounds ();_fbdf :=_fg .NewGray (_gdaac );for _faeg :=0;_faeg < _gdaac .Dx ();_faeg ++{for _begdg :=0;_begdg < _gdaac .Dy ();_begdg ++{_faad :=_cgec .GrayAt (_faeg ,_begdg );
_fbdf .SetGray (_faeg ,_begdg ,_fd .Gray {Y :_bef (_faad .Y ,_faff )});};};return _fbdf ;};type Gray2 struct{ImageBase };func _fbf (_debd _fd .NYCbCrA )_fd .NRGBA {_cdfg :=int32 (_debd .Y )*0x10101;_cabf :=int32 (_debd .Cb )-128;_bgeb :=int32 (_debd .Cr )-128;
_cgfe :=_cdfg +91881*_bgeb ;if uint32 (_cgfe )&0xff000000==0{_cgfe >>=8;}else {_cgfe =^(_cgfe >>31)&0xffff;};_dbf :=_cdfg -22554*_cabf -46802*_bgeb ;if uint32 (_dbf )&0xff000000==0{_dbf >>=8;}else {_dbf =^(_dbf >>31)&0xffff;};_abgg :=_cdfg +116130*_cabf ;
if uint32 (_abgg )&0xff000000==0{_abgg >>=8;}else {_abgg =^(_abgg >>31)&0xffff;};return _fd .NRGBA {R :uint8 (_cgfe >>8),G :uint8 (_dbf >>8),B :uint8 (_abgg >>8),A :_debd .A };};func (_debe *Gray16 )Copy ()Image {return &Gray16 {ImageBase :_debe .copy ()}};
func (_bag *CMYK32 )At (x ,y int )_fd .Color {_cbdfc ,_ :=_bag .ColorAt (x ,y );return _cbdfc };func _cfca (_baa ,_ebg *Monochrome ,_ffa []byte ,_bfg int )(_gaf error ){var (_gfd ,_efcd ,_gcg ,_aeef ,_cdff ,_cbdf ,_beeg ,_bec int ;_gfa ,_ebe ,_fab ,_eca uint32 ;
_bdcf ,_cfgb byte ;_aff uint16 ;);_gd :=make ([]byte ,4);_cgd :=make ([]byte ,4);for _gcg =0;_gcg < _baa .Height -1;_gcg ,_aeef =_gcg +2,_aeef +1{_gfd =_gcg *_baa .BytesPerLine ;_efcd =_aeef *_ebg .BytesPerLine ;for _cdff ,_cbdf =0,0;_cdff < _bfg ;_cdff ,_cbdf =_cdff +4,_cbdf +1{for _beeg =0;
_beeg < 4;_beeg ++{_bec =_gfd +_cdff +_beeg ;if _bec <=len (_baa .Data )-1&&_bec < _gfd +_baa .BytesPerLine {_gd [_beeg ]=_baa .Data [_bec ];}else {_gd [_beeg ]=0x00;};_bec =_gfd +_baa .BytesPerLine +_cdff +_beeg ;if _bec <=len (_baa .Data )-1&&_bec < _gfd +(2*_baa .BytesPerLine ){_cgd [_beeg ]=_baa .Data [_bec ];
}else {_cgd [_beeg ]=0x00;};};_gfa =_g .BigEndian .Uint32 (_gd );_ebe =_g .BigEndian .Uint32 (_cgd );_fab =_gfa &_ebe ;_fab |=_fab <<1;_eca =_gfa |_ebe ;_eca &=_eca <<1;_ebe =_fab &_eca ;_ebe &=0xaaaaaaaa;_gfa =_ebe |(_ebe <<7);_bdcf =byte (_gfa >>24);
_cfgb =byte ((_gfa >>8)&0xff);_bec =_efcd +_cbdf ;if _bec +1==len (_ebg .Data )-1||_bec +1>=_efcd +_ebg .BytesPerLine {if _gaf =_ebg .setByte (_bec ,_ffa [_bdcf ]);_gaf !=nil {return _b .Errorf ("\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_bec );};}else {_aff =(uint16 (_ffa [_bdcf ])<<8)|uint16 (_ffa [_cfgb ]);
if _gaf =_ebg .setTwoBytes (_bec ,_aff );_gaf !=nil {return _b .Errorf ("s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_bec );
};_cbdf ++;};};};return nil ;};func _bbegb (_fdga nrgba64 ,_bbgcb RGBA ,_bbege _fg .Rectangle ){for _bcbe :=0;_bcbe < _bbege .Max .X ;_bcbe ++{for _bfdb :=0;_bfdb < _bbege .Max .Y ;_bfdb ++{_bcca :=_fdga .NRGBA64At (_bcbe ,_bfdb );_bbgcb .SetRGBA (_bcbe ,_bfdb ,_eec (_bcca ));
};};};func (_dagg *Gray2 )At (x ,y int )_fd .Color {_cggg ,_ :=_dagg .ColorAt (x ,y );return _cggg };func _ddeg (_bcag *Monochrome ,_cage ,_ggad int ,_bcea ,_bfce int ,_gabd RasterOperator ,_bgdc *Monochrome ,_adf ,_dcbf int )error {var _gfegg ,_dgfe ,_dfgdb ,_dgbd int ;
if _cage < 0{_adf -=_cage ;_bcea +=_cage ;_cage =0;};if _adf < 0{_cage -=_adf ;_bcea +=_adf ;_adf =0;};_gfegg =_cage +_bcea -_bcag .Width ;if _gfegg > 0{_bcea -=_gfegg ;};_dgfe =_adf +_bcea -_bgdc .Width ;if _dgfe > 0{_bcea -=_dgfe ;};if _ggad < 0{_dcbf -=_ggad ;
_bfce +=_ggad ;_ggad =0;};if _dcbf < 0{_ggad -=_dcbf ;_bfce +=_dcbf ;_dcbf =0;};_dfgdb =_ggad +_bfce -_bcag .Height ;if _dfgdb > 0{_bfce -=_dfgdb ;};_dgbd =_dcbf +_bfce -_bgdc .Height ;if _dgbd > 0{_bfce -=_dgbd ;};if _bcea <=0||_bfce <=0{return nil ;};
var _aaec error ;switch {case _cage &7==0&&_adf &7==0:_aaec =_gebd (_bcag ,_cage ,_ggad ,_bcea ,_bfce ,_gabd ,_bgdc ,_adf ,_dcbf );case _cage &7==_adf &7:_aaec =_ddea (_bcag ,_cage ,_ggad ,_bcea ,_bfce ,_gabd ,_bgdc ,_adf ,_dcbf );default:_aaec =_cbfd (_bcag ,_cage ,_ggad ,_bcea ,_bfce ,_gabd ,_bgdc ,_adf ,_dcbf );
};if _aaec !=nil {return _aaec ;};return nil ;};func (_bafg *NRGBA16 )ColorAt (x ,y int )(_fd .Color ,error ){return ColorAtNRGBA16 (x ,y ,_bafg .Width ,_bafg .BytesPerLine ,_bafg .Data ,_bafg .Alpha ,_bafg .Decode );};var _fgfab [256]uint8 ;type monochromeThresholdConverter struct{Threshold uint8 ;
};func (_dacf *Monochrome )Base ()*ImageBase {return &_dacf .ImageBase };var _ _fg .Image =&Gray8 {};func ColorAtRGBA32 (x ,y ,width int ,data ,alpha []byte ,decode []float64 )(_fd .RGBA ,error ){_edcb :=y *width +x ;_ebeb :=3*_edcb ;if _ebeb +2>=len (data ){return _fd .RGBA {},_b .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_defea :=uint8 (0xff);if alpha !=nil &&len (alpha )> _edcb {_defea =alpha [_edcb ];};_ecda ,_fadb ,_cdbg :=data [_ebeb ],data [_ebeb +1],data [_ebeb +2];if len (decode )==6{_ecda =uint8 (uint32 (LinearInterpolate (float64 (_ecda ),0,255,decode [0],decode [1]))&0xff);
_fadb =uint8 (uint32 (LinearInterpolate (float64 (_fadb ),0,255,decode [2],decode [3]))&0xff);_cdbg =uint8 (uint32 (LinearInterpolate (float64 (_cdbg ),0,255,decode [4],decode [5]))&0xff);};return _fd .RGBA {R :_ecda ,G :_fadb ,B :_cdbg ,A :_defea },nil ;
};func (_fdcae *NRGBA16 )setNRGBA (_ceef ,_dceb ,_ddd int ,_aade _fd .NRGBA ){if _ceef *3%2==0{_fdcae .Data [_ddd ]=(_aade .R >>4)<<4|(_aade .G >>4);_fdcae .Data [_ddd +1]=(_aade .B >>4)<<4|(_fdcae .Data [_ddd +1]&0xf);}else {_fdcae .Data [_ddd ]=(_fdcae .Data [_ddd ]&0xf0)|(_aade .R >>4);
_fdcae .Data [_ddd +1]=(_aade .G >>4)<<4|(_aade .B >>4);};if _fdcae .Alpha !=nil {_dgdc :=_dceb *BytesPerLine (_fdcae .Width ,4,1);if _dgdc < len (_fdcae .Alpha ){if _ceef %2==0{_fdcae .Alpha [_dgdc ]=(_aade .A >>uint (4))<<uint (4)|(_fdcae .Alpha [_ddd ]&0xf);
}else {_fdcae .Alpha [_dgdc ]=(_fdcae .Alpha [_dgdc ]&0xf0)|(_aade .A >>uint (4));};};};};func _dbbb (_ccbf _fg .Image ,_fbee int )(_fg .Rectangle ,bool ,[]byte ){_afcd :=_ccbf .Bounds ();var (_dbfd bool ;_fadcc []byte ;);switch _dbecb :=_ccbf .(type ){case SMasker :_dbfd =_dbecb .HasAlpha ();
case NRGBA ,RGBA ,*_fg .RGBA64 ,nrgba64 ,*_fg .NYCbCrA :_fadcc =make ([]byte ,_afcd .Max .X *_afcd .Max .Y *_fbee );case *_fg .Paletted :if !_dbecb .Opaque (){_fadcc =make ([]byte ,_afcd .Max .X *_afcd .Max .Y *_fbee );};};return _afcd ,_dbfd ,_fadcc ;
};func (_cgbf *NRGBA64 )Base ()*ImageBase {return &_cgbf .ImageBase };func _egf (_bad _fd .Color )_fd .Color {_faee :=_fd .GrayModel .Convert (_bad ).(_fd .Gray );return _bfae (_faee );};var _ Gray =&Gray4 {};func (_bbf *Gray2 )SetGray (x ,y int ,gray _fd .Gray ){_edd :=_bfae (gray );
_ddgg :=y *_bbf .BytesPerLine ;_bcf :=_ddgg +(x >>2);if _bcf >=len (_bbf .Data ){return ;};_bdcb :=_edd .Y >>6;_bbf .Data [_bcf ]=(_bbf .Data [_bcf ]&(^(0xc0>>uint (2*((x )&3)))))|(_bdcb <<uint (6-2*(x &3)));};func NewImage (width ,height ,bitsPerComponent ,colorComponents int ,data ,alpha []byte ,decode []float64 )(Image ,error ){_cdaa :=NewImageBase (width ,height ,bitsPerComponent ,colorComponents ,data ,alpha ,decode );
var _ddadf Image ;switch colorComponents {case 1:switch bitsPerComponent {case 1:_ddadf =&Monochrome {ImageBase :_cdaa ,ModelThreshold :0x0f};case 2:_ddadf =&Gray2 {ImageBase :_cdaa };case 4:_ddadf =&Gray4 {ImageBase :_cdaa };case 8:_ddadf =&Gray8 {ImageBase :_cdaa };
case 16:_ddadf =&Gray16 {ImageBase :_cdaa };};case 3:switch bitsPerComponent {case 4:_ddadf =&NRGBA16 {ImageBase :_cdaa };case 8:_ddadf =&NRGBA32 {ImageBase :_cdaa };case 16:_ddadf =&NRGBA64 {ImageBase :_cdaa };};case 4:_ddadf =&CMYK32 {ImageBase :_cdaa };
};if _ddadf ==nil {return nil ,ErrInvalidImage ;};return _ddadf ,nil ;};func (_gfg *Gray2 )Bounds ()_fg .Rectangle {return _fg .Rectangle {Max :_fg .Point {X :_gfg .Width ,Y :_gfg .Height }};};func _dgdf (_bbcf _fd .NRGBA )_fd .NRGBA {_bbcf .R =_bbcf .R >>4|(_bbcf .R >>4)<<4;
_bbcf .G =_bbcf .G >>4|(_bbcf .G >>4)<<4;_bbcf .B =_bbcf .B >>4|(_bbcf .B >>4)<<4;return _bbcf ;};func (_ddaa *Monochrome )ExpandBinary (factor int )(*Monochrome ,error ){if !IsPowerOf2 (uint (factor )){return nil ,_b .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0065\u0078\u0070\u0061\u006e\u0064\u0020b\u0069n\u0061\u0072\u0079\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020\u0025\u0064",factor );
};return _fgf (_ddaa ,factor );};func (_dgb *Gray16 )At (x ,y int )_fd .Color {_cebc ,_ :=_dgb .ColorAt (x ,y );return _cebc };func _dac (_dg *Monochrome ,_db ,_dbg int )(*Monochrome ,error ){if _dg ==nil {return nil ,_f .New ("\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _db <=0||_dbg <=0{return nil ,_f .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0073\u0063\u0061l\u0065\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020<\u003d\u0020\u0030");};if _db ==_dbg {if _db ==1{return _dg .copy (),nil ;};if _db ==2||_db ==4||_db ==8{_ace ,_daf :=_fgf (_dg ,_db );
if _daf !=nil {return nil ,_daf ;};return _ace ,nil ;};};_bbg :=_db *_dg .Width ;_cca :=_dbg *_dg .Height ;_ae :=_ce (_bbg ,_cca );_fgbg :=_ae .BytesPerLine ;var (_ffb ,_agd ,_be ,_aee ,_eg int ;_fc byte ;_bc error ;);for _agd =0;_agd < _dg .Height ;_agd ++{_ffb =_dbg *_agd *_fgbg ;
for _be =0;_be < _dg .Width ;_be ++{if _bdd :=_dg .getBitAt (_be ,_agd );_bdd {_eg =_db *_be ;for _aee =0;_aee < _db ;_aee ++{_ae .setIndexedBit (_ffb *8+_eg +_aee );};};};for _aee =1;_aee < _dbg ;_aee ++{_bbb :=_ffb +_aee *_fgbg ;for _faf :=0;_faf < _fgbg ;
_faf ++{if _fc ,_bc =_ae .getByte (_ffb +_faf );_bc !=nil {return nil ,_bc ;};if _bc =_ae .setByte (_bbb +_faf ,_fc );_bc !=nil {return nil ,_bc ;};};};};return _ae ,nil ;};func (_cdae *Gray16 )GrayAt (x ,y int )_fd .Gray {_faagb ,_ :=_cdae .ColorAt (x ,y );
return _fd .Gray {Y :uint8 (_faagb .(_fd .Gray16 ).Y >>8)};};func (_abba *Monochrome )ResolveDecode ()error {if len (_abba .Decode )!=2{return nil ;};if _abba .Decode [0]==1&&_abba .Decode [1]==0{if _aecc :=_abba .InverseData ();_aecc !=nil {return _aecc ;
};_abba .Decode =nil ;};return nil ;};var _ Image =&Gray8 {};func (_edfc *NRGBA64 )setNRGBA64 (_cbged int ,_cggf _fd .NRGBA64 ,_fcag int ){_edfc .Data [_cbged ]=uint8 (_cggf .R >>8);_edfc .Data [_cbged +1]=uint8 (_cggf .R &0xff);_edfc .Data [_cbged +2]=uint8 (_cggf .G >>8);
_edfc .Data [_cbged +3]=uint8 (_cggf .G &0xff);_edfc .Data [_cbged +4]=uint8 (_cggf .B >>8);_edfc .Data [_cbged +5]=uint8 (_cggf .B &0xff);if _fcag +1< len (_edfc .Alpha ){_edfc .Alpha [_fcag ]=uint8 (_cggf .A >>8);_edfc .Alpha [_fcag +1]=uint8 (_cggf .A &0xff);
};};var (_ga =_dge ();_caf =_ded ();_gb =_acb (););func _ceff (_aggd CMYK ,_badf RGBA ,_eggb _fg .Rectangle ){for _daeba :=0;_daeba < _eggb .Max .X ;_daeba ++{for _bfegg :=0;_bfegg < _eggb .Max .Y ;_bfegg ++{_dafdg :=_aggd .CMYKAt (_daeba ,_bfegg );_badf .SetRGBA (_daeba ,_bfegg ,_feg (_dafdg ));
};};};func _agafe (_bbec CMYK ,_bbcfg NRGBA ,_cfgbd _fg .Rectangle ){for _agcf :=0;_agcf < _cfgbd .Max .X ;_agcf ++{for _cgee :=0;_cgee < _cfgbd .Max .Y ;_cgee ++{_ecfa :=_bbec .CMYKAt (_agcf ,_cgee );_bbcfg .SetNRGBA (_agcf ,_cgee ,_gda (_ecfa ));};};
};type RasterOperator int ;func (_adea *Gray8 )Validate ()error {if len (_adea .Data )!=_adea .Height *_adea .BytesPerLine {return ErrInvalidImage ;};return nil ;};func (_aefb *ImageBase )setEightBytes (_eadf int ,_cfbe uint64 )error {_cddb :=_aefb .BytesPerLine -(_eadf %_aefb .BytesPerLine );
if _aefb .BytesPerLine !=_aefb .Width >>3{_cddb --;};if _cddb >=8{return _aefb .setEightFullBytes (_eadf ,_cfbe );};return _aefb .setEightPartlyBytes (_eadf ,_cddb ,_cfbe );};func (_cbdff *NRGBA32 )ColorAt (x ,y int )(_fd .Color ,error ){return ColorAtNRGBA32 (x ,y ,_cbdff .Width ,_cbdff .Data ,_cbdff .Alpha ,_cbdff .Decode );
};type CMYK32 struct{ImageBase };func _ba (_fdd ,_cfg *Monochrome )(_cab error ){_fae :=_cfg .BytesPerLine ;_bab :=_fdd .BytesPerLine ;var _edg ,_cb ,_fag ,_efe ,_daa int ;for _fag =0;_fag < _cfg .Height ;_fag ++{_edg =_fag *_fae ;_cb =8*_fag *_bab ;for _efe =0;
_efe < _fae ;_efe ++{if _cab =_fdd .setEightBytes (_cb +_efe *8,_gb [_cfg .Data [_edg +_efe ]]);_cab !=nil {return _cab ;};};for _daa =1;_daa < 8;_daa ++{for _efe =0;_efe < _bab ;_efe ++{if _cab =_fdd .setByte (_cb +_daa *_bab +_efe ,_fdd .Data [_cb +_efe ]);
_cab !=nil {return _cab ;};};};};return nil ;};func (_cbc *CMYK32 )Set (x ,y int ,c _fd .Color ){_egcb :=4*(y *_cbc .Width +x );if _egcb +3>=len (_cbc .Data ){return ;};_fcf :=_fd .CMYKModel .Convert (c ).(_fd .CMYK );_cbc .Data [_egcb ]=_fcf .C ;_cbc .Data [_egcb +1]=_fcf .M ;
_cbc .Data [_egcb +2]=_fcf .Y ;_cbc .Data [_egcb +3]=_fcf .K ;};func _fee (_bfc Gray ,_fdb CMYK ,_dee _fg .Rectangle ){for _gdeg :=0;_gdeg < _dee .Max .X ;_gdeg ++{for _ddb :=0;_ddb < _dee .Max .Y ;_ddb ++{_edc :=_bfc .GrayAt (_gdeg ,_ddb );_fdb .SetCMYK (_gdeg ,_ddb ,_bge (_edc ));
};};};func (_edagd *Gray2 )Copy ()Image {return &Gray2 {ImageBase :_edagd .copy ()}};var _ Gray =&Gray16 {};func _fb (_eb *Monochrome ,_da int ,_ed []uint )(*Monochrome ,error ){_fgb :=_da *_eb .Width ;_dd :=_da *_eb .Height ;_def :=_ce (_fgb ,_dd );for _dc ,_cd :=range _ed {var _deb error ;
switch _cd {case 2:_deb =_gc (_def ,_eb );case 4:_deb =_cdb (_def ,_eb );case 8:_deb =_ba (_def ,_eb );};if _deb !=nil {return nil ,_deb ;};if _dc !=len (_ed )-1{_eb =_def .copy ();};};return _def ,nil ;};func (_bcfge *RGBA32 )Set (x ,y int ,c _fd .Color ){_dcbad :=y *_bcfge .Width +x ;
_gbde :=3*_dcbad ;if _gbde +2>=len (_bcfge .Data ){return ;};_dddg :=_fd .RGBAModel .Convert (c ).(_fd .RGBA );_bcfge .setRGBA (_dcbad ,_dddg );};func (_ceba *ImageBase )Pix ()[]byte {return _ceba .Data };type SMasker interface{HasAlpha ()bool ;GetAlpha ()[]byte ;
MakeAlpha ();};func (_agdda *RGBA32 )At (x ,y int )_fd .Color {_cacb ,_ :=_agdda .ColorAt (x ,y );return _cacb };func (_afed *Monochrome )setIndexedBit (_acefb int ){_afed .Data [(_acefb >>3)]|=0x80>>uint (_acefb &7);};func (_agea *Gray2 )Histogram ()(_edbd [256]int ){for _cgaa :=0;
_cgaa < _agea .Width ;_cgaa ++{for _acbg :=0;_acbg < _agea .Height ;_acbg ++{_edbd [_agea .GrayAt (_cgaa ,_acbg ).Y ]++;};};return _edbd ;};func _eec (_gbc _fd .NRGBA64 )_fd .RGBA {_egcd ,_egcf ,_eeeg ,_ggfa :=_gbc .RGBA ();return _fd .RGBA {R :uint8 (_egcd >>8),G :uint8 (_egcf >>8),B :uint8 (_eeeg >>8),A :uint8 (_ggfa >>8)};
};func (_fafd *CMYK32 )SetCMYK (x ,y int ,c _fd .CMYK ){_fbb :=4*(y *_fafd .Width +x );if _fbb +3>=len (_fafd .Data ){return ;};_fafd .Data [_fbb ]=c .C ;_fafd .Data [_fbb +1]=c .M ;_fafd .Data [_fbb +2]=c .Y ;_fafd .Data [_fbb +3]=c .K ;};func _dbe (_geccb _fd .RGBA )_fd .NRGBA {switch _geccb .A {case 0xff:return _fd .NRGBA {R :_geccb .R ,G :_geccb .G ,B :_geccb .B ,A :0xff};
case 0x00:return _fd .NRGBA {};default:_ccga ,_deab ,_cee ,_abg :=_geccb .RGBA ();_ccga =(_ccga *0xffff)/_abg ;_deab =(_deab *0xffff)/_abg ;_cee =(_cee *0xffff)/_abg ;return _fd .NRGBA {R :uint8 (_ccga >>8),G :uint8 (_deab >>8),B :uint8 (_cee >>8),A :uint8 (_abg >>8)};
};};func (_gedba *Monochrome )RasterOperation (dx ,dy ,dw ,dh int ,op RasterOperator ,src *Monochrome ,sx ,sy int )error {return _fega (_gedba ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );};func _acedg (_cfgd ,_dacd RGBA ,_efafe _fg .Rectangle ){for _cgba :=0;_cgba < _efafe .Max .X ;
_cgba ++{for _ffff :=0;_ffff < _efafe .Max .Y ;_ffff ++{_dacd .SetRGBA (_cgba ,_ffff ,_cfgd .RGBAAt (_cgba ,_ffff ));};};};func (_eeb *Gray2 )GrayAt (x ,y int )_fd .Gray {_bbda ,_ :=ColorAtGray2BPC (x ,y ,_eeb .BytesPerLine ,_eeb .Data ,_eeb .Decode );
return _bbda ;};func ColorAtGray8BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_fd .Gray ,error ){_eecf :=y *bytesPerLine +x ;if _eecf >=len (data ){return _fd .Gray {},_b .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_ffc :=data [_eecf ];if len (decode )==2{_ffc =uint8 (uint32 (LinearInterpolate (float64 (_ffc ),0,255,decode [0],decode [1]))&0xff);};return _fd .Gray {Y :_ffc },nil ;};func (_bacc *NRGBA64 )Validate ()error {if len (_bacc .Data )!=3*2*_bacc .Width *_bacc .Height {return _f .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};func (_abcc *Monochrome )SetGray (x ,y int ,g _fd .Gray ){_daac :=y *_abcc .BytesPerLine +x >>3;if _daac > len (_abcc .Data )-1{return ;};g =_aea (g ,monochromeModel (_abcc .ModelThreshold ));_abcc .setGray (x ,g ,_daac );};type Gray4 struct{ImageBase };
func _dagc (_ffgc _fg .Image ,_afab uint8 )*_fg .Gray {_ecffe :=_ffgc .Bounds ();_fgde :=_fg .NewGray (_ecffe );var (_fgdf _fd .Color ;_cfgdc _fd .Gray ;);for _gbbg :=0;_gbbg < _ecffe .Max .X ;_gbbg ++{for _cdgg :=0;_cdgg < _ecffe .Max .Y ;_cdgg ++{_fgdf =_ffgc .At (_gbbg ,_cdgg );
_fgde .Set (_gbbg ,_cdgg ,_fgdf );_cfgdc =_fgde .GrayAt (_gbbg ,_cdgg );_fgde .SetGray (_gbbg ,_cdgg ,_fd .Gray {Y :_bef (_cfgdc .Y ,_afab )});};};return _fgde ;};func _ddea (_beae *Monochrome ,_gggde ,_egae ,_gafe ,_ebeg int ,_bccd RasterOperator ,_cgea *Monochrome ,_fadc ,_egaf int )error {var (_cfbea bool ;
_aded bool ;_gegd int ;_cfaa int ;_bcff int ;_gge bool ;_efbg byte ;_aaba int ;_ecb int ;_daeb int ;_dfga ,_ageag int ;);_bfcf :=8-(_gggde &7);_fefa :=_gaee [_bfcf ];_bace :=_beae .BytesPerLine *_egae +(_gggde >>3);_aefa :=_cgea .BytesPerLine *_egaf +(_fadc >>3);
if _gafe < _bfcf {_cfbea =true ;_fefa &=_fgbf [8-_bfcf +_gafe ];};if !_cfbea {_gegd =(_gafe -_bfcf )>>3;if _gegd > 0{_aded =true ;_cfaa =_bace +1;_bcff =_aefa +1;};};_aaba =(_gggde +_gafe )&7;if !(_cfbea ||_aaba ==0){_gge =true ;_efbg =_fgbf [_aaba ];_ecb =_bace +1+_gegd ;
_daeb =_aefa +1+_gegd ;};switch _bccd {case PixSrc :for _dfga =0;_dfga < _ebeg ;_dfga ++{_beae .Data [_bace ]=_cgdd (_beae .Data [_bace ],_cgea .Data [_aefa ],_fefa );_bace +=_beae .BytesPerLine ;_aefa +=_cgea .BytesPerLine ;};if _aded {for _dfga =0;_dfga < _ebeg ;
_dfga ++{for _ageag =0;_ageag < _gegd ;_ageag ++{_beae .Data [_cfaa +_ageag ]=_cgea .Data [_bcff +_ageag ];};_cfaa +=_beae .BytesPerLine ;_bcff +=_cgea .BytesPerLine ;};};if _gge {for _dfga =0;_dfga < _ebeg ;_dfga ++{_beae .Data [_ecb ]=_cgdd (_beae .Data [_ecb ],_cgea .Data [_daeb ],_efbg );
_ecb +=_beae .BytesPerLine ;_daeb +=_cgea .BytesPerLine ;};};case PixNotSrc :for _dfga =0;_dfga < _ebeg ;_dfga ++{_beae .Data [_bace ]=_cgdd (_beae .Data [_bace ],^_cgea .Data [_aefa ],_fefa );_bace +=_beae .BytesPerLine ;_aefa +=_cgea .BytesPerLine ;};
if _aded {for _dfga =0;_dfga < _ebeg ;_dfga ++{for _ageag =0;_ageag < _gegd ;_ageag ++{_beae .Data [_cfaa +_ageag ]=^_cgea .Data [_bcff +_ageag ];};_cfaa +=_beae .BytesPerLine ;_bcff +=_cgea .BytesPerLine ;};};if _gge {for _dfga =0;_dfga < _ebeg ;_dfga ++{_beae .Data [_ecb ]=_cgdd (_beae .Data [_ecb ],^_cgea .Data [_daeb ],_efbg );
_ecb +=_beae .BytesPerLine ;_daeb +=_cgea .BytesPerLine ;};};case PixSrcOrDst :for _dfga =0;_dfga < _ebeg ;_dfga ++{_beae .Data [_bace ]=_cgdd (_beae .Data [_bace ],_cgea .Data [_aefa ]|_beae .Data [_bace ],_fefa );_bace +=_beae .BytesPerLine ;_aefa +=_cgea .BytesPerLine ;
};if _aded {for _dfga =0;_dfga < _ebeg ;_dfga ++{for _ageag =0;_ageag < _gegd ;_ageag ++{_beae .Data [_cfaa +_ageag ]|=_cgea .Data [_bcff +_ageag ];};_cfaa +=_beae .BytesPerLine ;_bcff +=_cgea .BytesPerLine ;};};if _gge {for _dfga =0;_dfga < _ebeg ;_dfga ++{_beae .Data [_ecb ]=_cgdd (_beae .Data [_ecb ],_cgea .Data [_daeb ]|_beae .Data [_ecb ],_efbg );
_ecb +=_beae .BytesPerLine ;_daeb +=_cgea .BytesPerLine ;};};case PixSrcAndDst :for _dfga =0;_dfga < _ebeg ;_dfga ++{_beae .Data [_bace ]=_cgdd (_beae .Data [_bace ],_cgea .Data [_aefa ]&_beae .Data [_bace ],_fefa );_bace +=_beae .BytesPerLine ;_aefa +=_cgea .BytesPerLine ;
};if _aded {for _dfga =0;_dfga < _ebeg ;_dfga ++{for _ageag =0;_ageag < _gegd ;_ageag ++{_beae .Data [_cfaa +_ageag ]&=_cgea .Data [_bcff +_ageag ];};_cfaa +=_beae .BytesPerLine ;_bcff +=_cgea .BytesPerLine ;};};if _gge {for _dfga =0;_dfga < _ebeg ;_dfga ++{_beae .Data [_ecb ]=_cgdd (_beae .Data [_ecb ],_cgea .Data [_daeb ]&_beae .Data [_ecb ],_efbg );
_ecb +=_beae .BytesPerLine ;_daeb +=_cgea .BytesPerLine ;};};case PixSrcXorDst :for _dfga =0;_dfga < _ebeg ;_dfga ++{_beae .Data [_bace ]=_cgdd (_beae .Data [_bace ],_cgea .Data [_aefa ]^_beae .Data [_bace ],_fefa );_bace +=_beae .BytesPerLine ;_aefa +=_cgea .BytesPerLine ;
};if _aded {for _dfga =0;_dfga < _ebeg ;_dfga ++{for _ageag =0;_ageag < _gegd ;_ageag ++{_beae .Data [_cfaa +_ageag ]^=_cgea .Data [_bcff +_ageag ];};_cfaa +=_beae .BytesPerLine ;_bcff +=_cgea .BytesPerLine ;};};if _gge {for _dfga =0;_dfga < _ebeg ;_dfga ++{_beae .Data [_ecb ]=_cgdd (_beae .Data [_ecb ],_cgea .Data [_daeb ]^_beae .Data [_ecb ],_efbg );
_ecb +=_beae .BytesPerLine ;_daeb +=_cgea .BytesPerLine ;};};case PixNotSrcOrDst :for _dfga =0;_dfga < _ebeg ;_dfga ++{_beae .Data [_bace ]=_cgdd (_beae .Data [_bace ],^(_cgea .Data [_aefa ])|_beae .Data [_bace ],_fefa );_bace +=_beae .BytesPerLine ;_aefa +=_cgea .BytesPerLine ;
};if _aded {for _dfga =0;_dfga < _ebeg ;_dfga ++{for _ageag =0;_ageag < _gegd ;_ageag ++{_beae .Data [_cfaa +_ageag ]|=^(_cgea .Data [_bcff +_ageag ]);};_cfaa +=_beae .BytesPerLine ;_bcff +=_cgea .BytesPerLine ;};};if _gge {for _dfga =0;_dfga < _ebeg ;
_dfga ++{_beae .Data [_ecb ]=_cgdd (_beae .Data [_ecb ],^(_cgea .Data [_daeb ])|_beae .Data [_ecb ],_efbg );_ecb +=_beae .BytesPerLine ;_daeb +=_cgea .BytesPerLine ;};};case PixNotSrcAndDst :for _dfga =0;_dfga < _ebeg ;_dfga ++{_beae .Data [_bace ]=_cgdd (_beae .Data [_bace ],^(_cgea .Data [_aefa ])&_beae .Data [_bace ],_fefa );
_bace +=_beae .BytesPerLine ;_aefa +=_cgea .BytesPerLine ;};if _aded {for _dfga =0;_dfga < _ebeg ;_dfga ++{for _ageag =0;_ageag < _gegd ;_ageag ++{_beae .Data [_cfaa +_ageag ]&=^_cgea .Data [_bcff +_ageag ];};_cfaa +=_beae .BytesPerLine ;_bcff +=_cgea .BytesPerLine ;
};};if _gge {for _dfga =0;_dfga < _ebeg ;_dfga ++{_beae .Data [_ecb ]=_cgdd (_beae .Data [_ecb ],^(_cgea .Data [_daeb ])&_beae .Data [_ecb ],_efbg );_ecb +=_beae .BytesPerLine ;_daeb +=_cgea .BytesPerLine ;};};case PixSrcOrNotDst :for _dfga =0;_dfga < _ebeg ;
_dfga ++{_beae .Data [_bace ]=_cgdd (_beae .Data [_bace ],_cgea .Data [_aefa ]|^(_beae .Data [_bace ]),_fefa );_bace +=_beae .BytesPerLine ;_aefa +=_cgea .BytesPerLine ;};if _aded {for _dfga =0;_dfga < _ebeg ;_dfga ++{for _ageag =0;_ageag < _gegd ;_ageag ++{_beae .Data [_cfaa +_ageag ]=_cgea .Data [_bcff +_ageag ]|^(_beae .Data [_cfaa +_ageag ]);
};_cfaa +=_beae .BytesPerLine ;_bcff +=_cgea .BytesPerLine ;};};if _gge {for _dfga =0;_dfga < _ebeg ;_dfga ++{_beae .Data [_ecb ]=_cgdd (_beae .Data [_ecb ],_cgea .Data [_daeb ]|^(_beae .Data [_ecb ]),_efbg );_ecb +=_beae .BytesPerLine ;_daeb +=_cgea .BytesPerLine ;
};};case PixSrcAndNotDst :for _dfga =0;_dfga < _ebeg ;_dfga ++{_beae .Data [_bace ]=_cgdd (_beae .Data [_bace ],_cgea .Data [_aefa ]&^(_beae .Data [_bace ]),_fefa );_bace +=_beae .BytesPerLine ;_aefa +=_cgea .BytesPerLine ;};if _aded {for _dfga =0;_dfga < _ebeg ;
_dfga ++{for _ageag =0;_ageag < _gegd ;_ageag ++{_beae .Data [_cfaa +_ageag ]=_cgea .Data [_bcff +_ageag ]&^(_beae .Data [_cfaa +_ageag ]);};_cfaa +=_beae .BytesPerLine ;_bcff +=_cgea .BytesPerLine ;};};if _gge {for _dfga =0;_dfga < _ebeg ;_dfga ++{_beae .Data [_ecb ]=_cgdd (_beae .Data [_ecb ],_cgea .Data [_daeb ]&^(_beae .Data [_ecb ]),_efbg );
_ecb +=_beae .BytesPerLine ;_daeb +=_cgea .BytesPerLine ;};};case PixNotPixSrcOrDst :for _dfga =0;_dfga < _ebeg ;_dfga ++{_beae .Data [_bace ]=_cgdd (_beae .Data [_bace ],^(_cgea .Data [_aefa ]|_beae .Data [_bace ]),_fefa );_bace +=_beae .BytesPerLine ;
_aefa +=_cgea .BytesPerLine ;};if _aded {for _dfga =0;_dfga < _ebeg ;_dfga ++{for _ageag =0;_ageag < _gegd ;_ageag ++{_beae .Data [_cfaa +_ageag ]=^(_cgea .Data [_bcff +_ageag ]|_beae .Data [_cfaa +_ageag ]);};_cfaa +=_beae .BytesPerLine ;_bcff +=_cgea .BytesPerLine ;
};};if _gge {for _dfga =0;_dfga < _ebeg ;_dfga ++{_beae .Data [_ecb ]=_cgdd (_beae .Data [_ecb ],^(_cgea .Data [_daeb ]|_beae .Data [_ecb ]),_efbg );_ecb +=_beae .BytesPerLine ;_daeb +=_cgea .BytesPerLine ;};};case PixNotPixSrcAndDst :for _dfga =0;_dfga < _ebeg ;
_dfga ++{_beae .Data [_bace ]=_cgdd (_beae .Data [_bace ],^(_cgea .Data [_aefa ]&_beae .Data [_bace ]),_fefa );_bace +=_beae .BytesPerLine ;_aefa +=_cgea .BytesPerLine ;};if _aded {for _dfga =0;_dfga < _ebeg ;_dfga ++{for _ageag =0;_ageag < _gegd ;_ageag ++{_beae .Data [_cfaa +_ageag ]=^(_cgea .Data [_bcff +_ageag ]&_beae .Data [_cfaa +_ageag ]);
};_cfaa +=_beae .BytesPerLine ;_bcff +=_cgea .BytesPerLine ;};};if _gge {for _dfga =0;_dfga < _ebeg ;_dfga ++{_beae .Data [_ecb ]=_cgdd (_beae .Data [_ecb ],^(_cgea .Data [_daeb ]&_beae .Data [_ecb ]),_efbg );_ecb +=_beae .BytesPerLine ;_daeb +=_cgea .BytesPerLine ;
};};case PixNotPixSrcXorDst :for _dfga =0;_dfga < _ebeg ;_dfga ++{_beae .Data [_bace ]=_cgdd (_beae .Data [_bace ],^(_cgea .Data [_aefa ]^_beae .Data [_bace ]),_fefa );_bace +=_beae .BytesPerLine ;_aefa +=_cgea .BytesPerLine ;};if _aded {for _dfga =0;_dfga < _ebeg ;
_dfga ++{for _ageag =0;_ageag < _gegd ;_ageag ++{_beae .Data [_cfaa +_ageag ]=^(_cgea .Data [_bcff +_ageag ]^_beae .Data [_cfaa +_ageag ]);};_cfaa +=_beae .BytesPerLine ;_bcff +=_cgea .BytesPerLine ;};};if _gge {for _dfga =0;_dfga < _ebeg ;_dfga ++{_beae .Data [_ecb ]=_cgdd (_beae .Data [_ecb ],^(_cgea .Data [_daeb ]^_beae .Data [_ecb ]),_efbg );
_ecb +=_beae .BytesPerLine ;_daeb +=_cgea .BytesPerLine ;};};default:_ab .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070e\u0072\u0061\u0074o\u0072:\u0020\u0025\u0064",_bccd );return _f .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");
};return nil ;};func _efef (_cddgb _fg .Image ,_dfbe Image ,_fcdaf _fg .Rectangle ){switch _bcfa :=_cddgb .(type ){case Gray :_bccb (_bcfa ,_dfbe .(Gray ),_fcdaf );case NRGBA :_eeg (_bcfa ,_dfbe .(Gray ),_fcdaf );case CMYK :_bfgf (_bcfa ,_dfbe .(Gray ),_fcdaf );
case RGBA :_afc (_bcfa ,_dfbe .(Gray ),_fcdaf );default:_ebga (_cddgb ,_dfbe ,_fcdaf );};};var _ Image =&NRGBA32 {};func (_dgeae *Gray2 )Base ()*ImageBase {return &_dgeae .ImageBase };func _dbeb (_dafg int ,_fagab int )int {if _dafg < _fagab {return _dafg ;
};return _fagab ;};func _eee (_cfc ,_abb int ,_adgg []byte )*Monochrome {_cbb :=_ce (_cfc ,_abb );_cbb .Data =_adgg ;return _cbb ;};func _ebgb (_ebfdc []byte ,_bdbc Image )error {_acaaf :=true ;for _daea :=0;_daea < len (_ebfdc );_daea ++{if _ebfdc [_daea ]!=0xff{_acaaf =false ;
break ;};};if _acaaf {switch _eadfg :=_bdbc .(type ){case *NRGBA32 :_eadfg .Alpha =nil ;case *NRGBA64 :_eadfg .Alpha =nil ;default:return _b .Errorf ("i\u006ete\u0072n\u0061l\u0020\u0065\u0072\u0072\u006fr\u0020\u002d\u0020i\u006d\u0061\u0067\u0065\u0020s\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070e\u0020\u002a\u004eRGB\u0041\u0033\u0032\u0020\u006f\u0072 \u002a\u004e\u0052\u0047\u0042\u0041\u0036\u0034\u0020\u0062\u0075\u0074 \u0069s\u003a\u0020\u0025\u0054",_bdbc );
};};return nil ;};var _ _fg .Image =&Gray2 {};var _ _fg .Image =&Gray4 {};func _dgecd (_efea *_fg .Gray )bool {for _bcfb :=0;_bcfb < len (_efea .Pix );_bcfb ++{if !_fcfe (_efea .Pix [_bcfb ]){return false ;};};return true ;};func _eeg (_ceec NRGBA ,_gdaa Gray ,_ddac _fg .Rectangle ){for _cbafe :=0;
_cbafe < _ddac .Max .X ;_cbafe ++{for _babd :=0;_babd < _ddac .Max .Y ;_babd ++{_eab :=_ddba (_ceec .NRGBAAt (_cbafe ,_babd ));_gdaa .SetGray (_cbafe ,_babd ,_eab );};};};func _cgdd (_dggd ,_fbge ,_gaeg byte )byte {return (_dggd &^(_gaeg ))|(_fbge &_gaeg )};
const (PixSrc RasterOperator =0xc;PixDst RasterOperator =0xa;PixNotSrc RasterOperator =0x3;PixNotDst RasterOperator =0x5;PixClr RasterOperator =0x0;PixSet RasterOperator =0xf;PixSrcOrDst RasterOperator =0xe;PixSrcAndDst RasterOperator =0x8;PixSrcXorDst RasterOperator =0x6;
PixNotSrcOrDst RasterOperator =0xb;PixNotSrcAndDst RasterOperator =0x2;PixSrcOrNotDst RasterOperator =0xd;PixSrcAndNotDst RasterOperator =0x4;PixNotPixSrcOrDst RasterOperator =0x1;PixNotPixSrcAndDst RasterOperator =0x7;PixNotPixSrcXorDst RasterOperator =0x9;
PixPaint =PixSrcOrDst ;PixSubtract =PixNotSrcAndDst ;PixMask =PixSrcAndDst ;);func _fbgg (_efcbb _fd .CMYK )_fd .Gray {_gdcf ,_agdf ,_gedb :=_fd .CMYKToRGB (_efcbb .C ,_efcbb .M ,_efcbb .Y ,_efcbb .K );_gfb :=(19595*uint32 (_gdcf )+38470*uint32 (_agdf )+7471*uint32 (_gedb )+1<<7)>>16;
return _fd .Gray {Y :uint8 (_gfb )};};func (_ccfgd *RGBA32 )Validate ()error {if len (_ccfgd .Data )!=3*_ccfgd .Width *_ccfgd .Height {return _f .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};func _bef (_bcg ,_gbgc uint8 )uint8 {if _bcg < _gbgc {return 255;};return 0;};func _gc (_ef ,_cdd *Monochrome )(_bd error ){_cdf :=_cdd .BytesPerLine ;_cc :=_ef .BytesPerLine ;var (_ede byte ;_af uint16 ;_bb ,_aa ,_aad ,_fe ,_ag int ;);
for _aad =0;_aad < _cdd .Height ;_aad ++{_bb =_aad *_cdf ;_aa =2*_aad *_cc ;for _fe =0;_fe < _cdf ;_fe ++{_ede =_cdd .Data [_bb +_fe ];_af =_ga [_ede ];_ag =_aa +_fe *2;if _ef .BytesPerLine !=_cdd .BytesPerLine *2&&(_fe +1)*2> _ef .BytesPerLine {_bd =_ef .setByte (_ag ,byte (_af >>8));
}else {_bd =_ef .setTwoBytes (_ag ,_af );};if _bd !=nil {return _bd ;};};for _fe =0;_fe < _cc ;_fe ++{_ag =_aa +_cc +_fe ;_ede =_ef .Data [_aa +_fe ];if _bd =_ef .setByte (_ag ,_ede );_bd !=nil {return _bd ;};};};return nil ;};var (MonochromeConverter =ConverterFunc (_cbf );
Gray2Converter =ConverterFunc (_ebff );Gray4Converter =ConverterFunc (_bdca );GrayConverter =ConverterFunc (_egdf );Gray16Converter =ConverterFunc (_ddgc );NRGBA16Converter =ConverterFunc (_adfa );NRGBAConverter =ConverterFunc (_gbeg );NRGBA64Converter =ConverterFunc (_cddd );
RGBAConverter =ConverterFunc (_afeb );CMYKConverter =ConverterFunc (_bfeg ););func _acgg (_ffaa _fg .Image ,_gfcge Image ,_fbc _fg .Rectangle ){if _debf ,_acc :=_ffaa .(SMasker );_acc &&_debf .HasAlpha (){_gfcge .(SMasker ).MakeAlpha ();};_ebga (_ffaa ,_gfcge ,_fbc );
};func NextPowerOf2 (n uint )uint {if IsPowerOf2 (n ){return n ;};return 1<<(_ffdf (n )+1);};func _edag (_gbbf _fd .NRGBA )_fd .CMYK {_ccad ,_ade ,_bca ,_ :=_gbbf .RGBA ();_ecd ,_gcga ,_dadg ,_bbgd :=_fd .RGBToCMYK (uint8 (_ccad >>8),uint8 (_ade >>8),uint8 (_bca >>8));
return _fd .CMYK {C :_ecd ,M :_gcga ,Y :_dadg ,K :_bbgd };};func (_aebg *Monochrome )setGrayBit (_bgb ,_bfca int ){_aebg .Data [_bgb ]|=0x80>>uint (_bfca &7)};var _ _fg .Image =&RGBA32 {};func _bddb (_fdac *Monochrome ,_gea int ,_bdb []byte )(_daae *Monochrome ,_bfa error ){const _fbe ="\u0072\u0065d\u0075\u0063\u0065R\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079";
if _fdac ==nil {return nil ,_f .New ("\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _gea < 1||_gea > 4{return nil ,_f .New ("\u006c\u0065\u0076\u0065\u006c\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0069\u006e\u0020\u0073e\u0074\u0020\u007b\u0031\u002c\u0032\u002c\u0033\u002c\u0034\u007d");
};if _fdac .Height <=1{return nil ,_f .New ("\u0073\u006f\u0075rc\u0065\u0020\u0068\u0065\u0069\u0067\u0068\u0074\u0020m\u0075s\u0074 \u0062e\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0027\u0032\u0027");};_daae =_ce (_fdac .Width /2,_fdac .Height /2);
if _bdb ==nil {_bdb =_fbgb ();};_baf :=_dbeb (_fdac .BytesPerLine ,2*_daae .BytesPerLine );switch _gea {case 1:_bfa =_bee (_fdac ,_daae ,_bdb ,_baf );case 2:_bfa =_bg (_fdac ,_daae ,_bdb ,_baf );case 3:_bfa =_cfca (_fdac ,_daae ,_bdb ,_baf );case 4:_bfa =_gdb (_fdac ,_daae ,_bdb ,_baf );
};if _bfa !=nil {return nil ,_bfa ;};return _daae ,nil ;};type NRGBA64 struct{ImageBase };var _ NRGBA =&NRGBA32 {};func MonochromeThresholdConverter (threshold uint8 )ColorConverter {return &monochromeThresholdConverter {Threshold :threshold };};