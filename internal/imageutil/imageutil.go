//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package imageutil ;import (_ga "encoding/binary";_fb "errors";_ec "fmt";_gf "github.com/unidoc/unipdf/v3/common";_d "github.com/unidoc/unipdf/v3/internal/bitwise";_e "image";_b "image/color";_g "image/draw";_c "math";);func _cfee (_gccg _b .RGBA )_b .NRGBA {switch _gccg .A {case 0xff:return _b .NRGBA {R :_gccg .R ,G :_gccg .G ,B :_gccg .B ,A :0xff};
case 0x00:return _b .NRGBA {};default:_eaae ,_afd ,_bed ,_gbef :=_gccg .RGBA ();_eaae =(_eaae *0xffff)/_gbef ;_afd =(_afd *0xffff)/_gbef ;_bed =(_bed *0xffff)/_gbef ;return _b .NRGBA {R :uint8 (_eaae >>8),G :uint8 (_afd >>8),B :uint8 (_bed >>8),A :uint8 (_gbef >>8)};
};};func (_bbgd *Gray4 )Bounds ()_e .Rectangle {return _e .Rectangle {Max :_e .Point {X :_bbgd .Width ,Y :_bbgd .Height }};};func _gaf (_fcb _b .Gray )_b .RGBA {return _b .RGBA {R :_fcb .Y ,G :_fcb .Y ,B :_fcb .Y ,A :0xff}};func (_ggbcd *NRGBA64 )ColorAt (x ,y int )(_b .Color ,error ){return ColorAtNRGBA64 (x ,y ,_ggbcd .Width ,_ggbcd .Data ,_ggbcd .Alpha ,_ggbcd .Decode );
};var _ Image =&NRGBA64 {};func ColorAtNRGBA64 (x ,y ,width int ,data ,alpha []byte ,decode []float64 )(_b .NRGBA64 ,error ){_bdga :=(y *width +x )*2;_badf :=_bdga *3;if _badf +5>=len (data ){return _b .NRGBA64 {},_ec .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};const _ddfa =0xffff;_bcc :=uint16 (_ddfa );if alpha !=nil &&len (alpha )> _bdga +1{_bcc =uint16 (alpha [_bdga ])<<8|uint16 (alpha [_bdga +1]);};_bgac :=uint16 (data [_badf ])<<8|uint16 (data [_badf +1]);_fcca :=uint16 (data [_badf +2])<<8|uint16 (data [_badf +3]);
_gfeggg :=uint16 (data [_badf +4])<<8|uint16 (data [_badf +5]);if len (decode )==6{_bgac =uint16 (uint64 (LinearInterpolate (float64 (_bgac ),0,65535,decode [0],decode [1]))&_ddfa );_fcca =uint16 (uint64 (LinearInterpolate (float64 (_fcca ),0,65535,decode [2],decode [3]))&_ddfa );
_gfeggg =uint16 (uint64 (LinearInterpolate (float64 (_gfeggg ),0,65535,decode [4],decode [5]))&_ddfa );};return _b .NRGBA64 {R :_bgac ,G :_fcca ,B :_gfeggg ,A :_bcc },nil ;};func (_cefg *ImageBase )Pix ()[]byte {return _cefg .Data };func _dce (_dfgc ,_dad *Monochrome ,_fgf []byte ,_bfb int )(_acc error ){var (_gad ,_cgf ,_abc ,_bcd ,_gcff ,_bfd ,_bab ,_beae int ;
_eacd ,_acda uint32 ;_dbb ,_gcfd byte ;_eaa uint16 ;);_cgfd :=make ([]byte ,4);_add :=make ([]byte ,4);for _abc =0;_abc < _dfgc .Height -1;_abc ,_bcd =_abc +2,_bcd +1{_gad =_abc *_dfgc .BytesPerLine ;_cgf =_bcd *_dad .BytesPerLine ;for _gcff ,_bfd =0,0;
_gcff < _bfb ;_gcff ,_bfd =_gcff +4,_bfd +1{for _bab =0;_bab < 4;_bab ++{_beae =_gad +_gcff +_bab ;if _beae <=len (_dfgc .Data )-1&&_beae < _gad +_dfgc .BytesPerLine {_cgfd [_bab ]=_dfgc .Data [_beae ];}else {_cgfd [_bab ]=0x00;};_beae =_gad +_dfgc .BytesPerLine +_gcff +_bab ;
if _beae <=len (_dfgc .Data )-1&&_beae < _gad +(2*_dfgc .BytesPerLine ){_add [_bab ]=_dfgc .Data [_beae ];}else {_add [_bab ]=0x00;};};_eacd =_ga .BigEndian .Uint32 (_cgfd );_acda =_ga .BigEndian .Uint32 (_add );_acda &=_eacd ;_acda &=_acda <<1;_acda &=0xaaaaaaaa;
_eacd =_acda |(_acda <<7);_dbb =byte (_eacd >>24);_gcfd =byte ((_eacd >>8)&0xff);_beae =_cgf +_bfd ;if _beae +1==len (_dad .Data )-1||_beae +1>=_cgf +_dad .BytesPerLine {_dad .Data [_beae ]=_fgf [_dbb ];if _acc =_dad .setByte (_beae ,_fgf [_dbb ]);_acc !=nil {return _ec .Errorf ("\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_beae );
};}else {_eaa =(uint16 (_fgf [_dbb ])<<8)|uint16 (_fgf [_gcfd ]);if _acc =_dad .setTwoBytes (_beae ,_eaa );_acc !=nil {return _ec .Errorf ("s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_beae );
};_bfd ++;};};};return nil ;};func (_fdab *Gray16 )Validate ()error {if len (_fdab .Data )!=_fdab .Height *_fdab .BytesPerLine {return ErrInvalidImage ;};return nil ;};func _fbcbc (_bcdcf *Monochrome ,_dfed ,_ebde int ,_fag ,_geda int ,_cbfc RasterOperator ){var (_adde int ;
_cafef byte ;_cffbd ,_gagbe int ;_egad int ;);_dced :=_fag >>3;_caad :=_fag &7;if _caad > 0{_cafef =_gbfg [_caad ];};_adde =_bcdcf .BytesPerLine *_ebde +(_dfed >>3);switch _cbfc {case PixClr :for _cffbd =0;_cffbd < _geda ;_cffbd ++{_egad =_adde +_cffbd *_bcdcf .BytesPerLine ;
for _gagbe =0;_gagbe < _dced ;_gagbe ++{_bcdcf .Data [_egad ]=0x0;_egad ++;};if _caad > 0{_bcdcf .Data [_egad ]=_gfag (_bcdcf .Data [_egad ],0x0,_cafef );};};case PixSet :for _cffbd =0;_cffbd < _geda ;_cffbd ++{_egad =_adde +_cffbd *_bcdcf .BytesPerLine ;
for _gagbe =0;_gagbe < _dced ;_gagbe ++{_bcdcf .Data [_egad ]=0xff;_egad ++;};if _caad > 0{_bcdcf .Data [_egad ]=_gfag (_bcdcf .Data [_egad ],0xff,_cafef );};};case PixNotDst :for _cffbd =0;_cffbd < _geda ;_cffbd ++{_egad =_adde +_cffbd *_bcdcf .BytesPerLine ;
for _gagbe =0;_gagbe < _dced ;_gagbe ++{_bcdcf .Data [_egad ]=^_bcdcf .Data [_egad ];_egad ++;};if _caad > 0{_bcdcf .Data [_egad ]=_gfag (_bcdcf .Data [_egad ],^_bcdcf .Data [_egad ],_cafef );};};};};func ScaleAlphaToMonochrome (data []byte ,width ,height int )([]byte ,error ){_fc :=BytesPerLine (width ,8,1);
if len (data )< _fc *height {return nil ,nil ;};_ca :=&Gray8 {NewImageBase (width ,height ,8,1,data ,nil ,nil )};_ba ,_cf :=MonochromeConverter .Convert (_ca );if _cf !=nil {return nil ,_cf ;};return _ba .Base ().Data ,nil ;};func _dead (_defb nrgba64 ,_dgag RGBA ,_cdcb _e .Rectangle ){for _ecdgg :=0;
_ecdgg < _cdcb .Max .X ;_ecdgg ++{for _agfcd :=0;_agfcd < _cdcb .Max .Y ;_agfcd ++{_bbgdg :=_defb .NRGBA64At (_ecdgg ,_agfcd );_dgag .SetRGBA (_ecdgg ,_agfcd ,_faca (_bbgdg ));};};};func _ffcd (_dbgf _b .NRGBA )_b .Gray {_cef ,_cee ,_ebaf ,_ :=_dbgf .RGBA ();
_bcgdc :=(19595*_cef +38470*_cee +7471*_ebaf +1<<15)>>24;return _b .Gray {Y :uint8 (_bcgdc )};};func (_eabd *RGBA32 )Bounds ()_e .Rectangle {return _e .Rectangle {Max :_e .Point {X :_eabd .Width ,Y :_eabd .Height }};};func _ceef (_dfbe *_e .Gray16 ,_ddad uint8 )*_e .Gray {_gdee :=_dfbe .Bounds ();
_acac :=_e .NewGray (_gdee );for _bgdb :=0;_bgdb < _gdee .Dx ();_bgdb ++{for _eccbe :=0;_eccbe < _gdee .Dy ();_eccbe ++{_afca :=_dfbe .Gray16At (_bgdb ,_eccbe );_acac .SetGray (_bgdb ,_eccbe ,_b .Gray {Y :_fagc (uint8 (_afca .Y /256),_ddad )});};};return _acac ;
};func (_bgea *Gray16 )Set (x ,y int ,c _b .Color ){_abae :=(y *_bgea .BytesPerLine /2+x )*2;if _abae +1>=len (_bgea .Data ){return ;};_adea :=_b .Gray16Model .Convert (c ).(_b .Gray16 );_bgea .Data [_abae ],_bgea .Data [_abae +1]=uint8 (_adea .Y >>8),uint8 (_adea .Y &0xff);
};func (_deef *ImageBase )setEightBytes (_cacf int ,_dcba uint64 )error {_cgfe :=_deef .BytesPerLine -(_cacf %_deef .BytesPerLine );if _deef .BytesPerLine !=_deef .Width >>3{_cgfe --;};if _cgfe >=8{return _deef .setEightFullBytes (_cacf ,_dcba );};return _deef .setEightPartlyBytes (_cacf ,_cgfe ,_dcba );
};func ColorAtGrayscale (x ,y ,bitsPerColor ,bytesPerLine int ,data []byte ,decode []float64 )(_b .Color ,error ){switch bitsPerColor {case 1:return ColorAtGray1BPC (x ,y ,bytesPerLine ,data ,decode );case 2:return ColorAtGray2BPC (x ,y ,bytesPerLine ,data ,decode );
case 4:return ColorAtGray4BPC (x ,y ,bytesPerLine ,data ,decode );case 8:return ColorAtGray8BPC (x ,y ,bytesPerLine ,data ,decode );case 16:return ColorAtGray16BPC (x ,y ,bytesPerLine ,data ,decode );default:return nil ,_ec .Errorf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0067\u0072\u0061\u0079\u0020\u0073c\u0061\u006c\u0065\u0020\u0062\u0069\u0074s\u0020\u0070\u0065\u0072\u0020\u0063\u006f\u006c\u006f\u0072\u0020a\u006d\u006f\u0075\u006e\u0074\u003a\u0020\u0027\u0025\u0064\u0027",bitsPerColor );
};};func (_fcge *CMYK32 )Copy ()Image {return &CMYK32 {ImageBase :_fcge .copy ()}};func (_bdbg *Monochrome )Set (x ,y int ,c _b .Color ){_ggc :=y *_bdbg .BytesPerLine +x >>3;if _ggc > len (_bdbg .Data )-1{return ;};_gfde :=_bdbg .ColorModel ().Convert (c ).(_b .Gray );
_bdbg .setGray (x ,_gfde ,_ggc );};var _ Image =&NRGBA16 {};type RGBA32 struct{ImageBase };func _efba (_egb _b .CMYK )_b .Gray {_gce ,_fff ,_fdg :=_b .CMYKToRGB (_egb .C ,_egb .M ,_egb .Y ,_egb .K );_eaag :=(19595*uint32 (_gce )+38470*uint32 (_fff )+7471*uint32 (_fdg )+1<<7)>>16;
return _b .Gray {Y :uint8 (_eaag )};};func (_bdea *Monochrome )getBitAt (_bead ,_eefa int )bool {_ffg :=_eefa *_bdea .BytesPerLine +(_bead >>3);_fffb :=_bead &0x07;_cgabc :=uint (7-_fffb );if _ffg > len (_bdea .Data )-1{return false ;};if (_bdea .Data [_ffg ]>>_cgabc )&0x01>=1{return true ;
};return false ;};func (_ecad *NRGBA16 )ColorModel ()_b .Model {return NRGBA16Model };func (_bdae *Monochrome )SetGray (x ,y int ,g _b .Gray ){_affcc :=y *_bdae .BytesPerLine +x >>3;if _affcc > len (_bdae .Data )-1{return ;};g =_fge (g ,monochromeModel (_bdae .ModelThreshold ));
_bdae .setGray (x ,g ,_affcc );};func (_badg *Gray4 )ColorModel ()_b .Model {return Gray4Model };func (_cfdc *Gray16 )Base ()*ImageBase {return &_cfdc .ImageBase };func ColorAtGray1BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_b .Gray ,error ){_deag :=y *bytesPerLine +x >>3;
if _deag >=len (data ){return _b .Gray {},_ec .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_bffa :=data [_deag ]>>uint (7-(x &7))&1;if len (decode )==2{_bffa =uint8 (LinearInterpolate (float64 (_bffa ),0.0,1.0,decode [0],decode [1]))&1;};return _b .Gray {Y :_bffa *255},nil ;};func _eafa (_bdbd _e .Image ,_cec Image ,_eaaeg _e .Rectangle ){switch _fgdg :=_bdbd .(type ){case Gray :_abd (_fgdg ,_cec .(Gray ),_eaaeg );
case NRGBA :_afee (_fgdg ,_cec .(Gray ),_eaaeg );case CMYK :_dae (_fgdg ,_cec .(Gray ),_eaaeg );case RGBA :_fbda (_fgdg ,_cec .(Gray ),_eaaeg );default:_agc (_bdbd ,_cec ,_eaaeg );};};func (_dbdc *CMYK32 )SetCMYK (x ,y int ,c _b .CMYK ){_cad :=4*(y *_dbdc .Width +x );
if _cad +3>=len (_dbdc .Data ){return ;};_dbdc .Data [_cad ]=c .C ;_dbdc .Data [_cad +1]=c .M ;_dbdc .Data [_cad +2]=c .Y ;_dbdc .Data [_cad +3]=c .K ;};func _fcbd (_feea uint )uint {var _gcca uint ;for _feea !=0{_feea >>=1;_gcca ++;};return _gcca -1;};
func InDelta (expected ,current ,delta float64 )bool {_febfe :=expected -current ;if _febfe <=-delta ||_febfe >=delta {return false ;};return true ;};func (_dgcd *Monochrome )InverseData ()error {return _dgcd .RasterOperation (0,0,_dgcd .Width ,_dgcd .Height ,PixNotDst ,nil ,0,0);
};func (_ebd *Monochrome )ColorAt (x ,y int )(_b .Color ,error ){return ColorAtGray1BPC (x ,y ,_ebd .BytesPerLine ,_ebd .Data ,_ebd .Decode );};func (_gada *Monochrome )GrayAt (x ,y int )_b .Gray {_baa ,_ :=ColorAtGray1BPC (x ,y ,_gada .BytesPerLine ,_gada .Data ,_gada .Decode );
return _baa ;};func _faf (_eebe _b .Color )_b .Color {_eefbb :=_b .GrayModel .Convert (_eebe ).(_b .Gray );return _cdag (_eefbb );};var _ Image =&RGBA32 {};type Gray2 struct{ImageBase };func (_gagb *Gray8 )GrayAt (x ,y int )_b .Gray {_ddd ,_ :=ColorAtGray8BPC (x ,y ,_gagb .BytesPerLine ,_gagb .Data ,_gagb .Decode );
return _ddd ;};func GetConverter (bitsPerComponent ,colorComponents int )(ColorConverter ,error ){switch colorComponents {case 1:switch bitsPerComponent {case 1:return MonochromeConverter ,nil ;case 2:return Gray2Converter ,nil ;case 4:return Gray4Converter ,nil ;
case 8:return GrayConverter ,nil ;case 16:return Gray16Converter ,nil ;};case 3:switch bitsPerComponent {case 4:return NRGBA16Converter ,nil ;case 8:return NRGBAConverter ,nil ;case 16:return NRGBA64Converter ,nil ;};case 4:return CMYKConverter ,nil ;};
return nil ,_ec .Errorf ("\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0043o\u006e\u0076\u0065\u0072\u0074\u0065\u0072\u0020\u0070\u0061\u0072\u0061\u006d\u0065t\u0065\u0072\u0073\u002e\u0020\u0042\u0069\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u003a\u0020\u0025\u0064\u002c\u0020\u0043\u006f\u006co\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006et\u0073\u003a \u0025\u0064",bitsPerComponent ,colorComponents );
};func (_agef *NRGBA16 )ColorAt (x ,y int )(_b .Color ,error ){return ColorAtNRGBA16 (x ,y ,_agef .Width ,_agef .BytesPerLine ,_agef .Data ,_agef .Alpha ,_agef .Decode );};func _dfg (_gcc *Monochrome ,_caa ...int )(_bdba *Monochrome ,_abg error ){if _gcc ==nil {return nil ,_fb .New ("\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");
};if len (_caa )==0{return nil ,_fb .New ("\u0074h\u0065\u0072e\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020o\u006e\u0065\u0020\u006c\u0065\u0076\u0065\u006c\u0020\u006f\u0066 \u0072\u0065\u0064\u0075\u0063\u0074\u0069\u006f\u006e");
};_dgc :=_fbcd ();_bdba =_gcc ;for _ ,_adg :=range _caa {if _adg <=0{break ;};_bdba ,_abg =_aag (_bdba ,_adg ,_dgc );if _abg !=nil {return nil ,_abg ;};};return _bdba ,nil ;};func (_adab *Gray4 )setGray (_dbba int ,_fefg int ,_egfe _b .Gray ){_eede :=_fefg *_adab .BytesPerLine ;
_ceec :=_eede +(_dbba >>1);if _ceec >=len (_adab .Data ){return ;};_caf :=_egfe .Y >>4;_adab .Data [_ceec ]=(_adab .Data [_ceec ]&(^(0xf0>>uint (4*(_dbba &1)))))|(_caf <<uint (4-4*(_dbba &1)));};func _dceb (_ecdg []byte ,_ebad Image )error {_cgg :=true ;
for _abad :=0;_abad < len (_ecdg );_abad ++{if _ecdg [_abad ]!=0xff{_cgg =false ;break ;};};if _cgg {switch _gcgg :=_ebad .(type ){case *NRGBA32 :_gcgg .Alpha =nil ;case *NRGBA64 :_gcgg .Alpha =nil ;default:return _ec .Errorf ("i\u006ete\u0072n\u0061l\u0020\u0065\u0072\u0072\u006fr\u0020\u002d\u0020i\u006d\u0061\u0067\u0065\u0020s\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070e\u0020\u002a\u004eRGB\u0041\u0033\u0032\u0020\u006f\u0072 \u002a\u004e\u0052\u0047\u0042\u0041\u0036\u0034\u0020\u0062\u0075\u0074 \u0069s\u003a\u0020\u0025\u0054",_ebad );
};};return nil ;};func _bca (_ea ,_ccf *Monochrome )(_bcg error ){_gcf :=_ccf .BytesPerLine ;_dgg :=_ea .BytesPerLine ;_df :=_ccf .BytesPerLine *4-_ea .BytesPerLine ;var (_ce ,_gee byte ;_fbc uint32 ;_cea ,_fdf ,_ag ,_gd ,_gdb ,_dga ,_af int ;);for _ag =0;
_ag < _ccf .Height ;_ag ++{_cea =_ag *_gcf ;_fdf =4*_ag *_dgg ;for _gd =0;_gd < _gcf ;_gd ++{_ce =_ccf .Data [_cea +_gd ];_fbc =_deb [_ce ];_dga =_fdf +_gd *4;if _df !=0&&(_gd +1)*4> _ea .BytesPerLine {for _gdb =_df ;_gdb > 0;_gdb --{_gee =byte ((_fbc >>uint (_gdb *8))&0xff);
_af =_dga +(_df -_gdb );if _bcg =_ea .setByte (_af ,_gee );_bcg !=nil {return _bcg ;};};}else if _bcg =_ea .setFourBytes (_dga ,_fbc );_bcg !=nil {return _bcg ;};if _bcg =_ea .setFourBytes (_fdf +_gd *4,_deb [_ccf .Data [_cea +_gd ]]);_bcg !=nil {return _bcg ;
};};for _gdb =1;_gdb < 4;_gdb ++{for _gd =0;_gd < _dgg ;_gd ++{if _bcg =_ea .setByte (_fdf +_gdb *_dgg +_gd ,_ea .Data [_fdf +_gd ]);_bcg !=nil {return _bcg ;};};};};return nil ;};func (_gaa *Gray4 )Copy ()Image {return &Gray4 {ImageBase :_gaa .copy ()}};
func (_aadc *Gray8 )Bounds ()_e .Rectangle {return _e .Rectangle {Max :_e .Point {X :_aadc .Width ,Y :_aadc .Height }};};func (_bcf *CMYK32 )Validate ()error {if len (_bcf .Data )!=4*_bcf .Width *_bcf .Height {return _fb .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};func (_cbdd *ImageBase )newAlpha (){_cbdg :=BytesPerLine (_cbdd .Width ,_cbdd .BitsPerComponent ,1);_cbdd .Alpha =make ([]byte ,_cbdd .Height *_cbdg );};func (_ffda *NRGBA32 )ColorModel ()_b .Model {return _b .NRGBAModel };func _aagcb (_acgd *_e .Gray )bool {for _cdeaa :=0;
_cdeaa < len (_acgd .Pix );_cdeaa ++{if !_bgad (_acgd .Pix [_cdeaa ]){return false ;};};return true ;};var _ RGBA =&RGBA32 {};func _gfeg (_bdab *Monochrome ,_eadf ,_ccg ,_ffca ,_gaecc int ,_agdf RasterOperator ){if _eadf < 0{_ffca +=_eadf ;_eadf =0;};_gabg :=_eadf +_ffca -_bdab .Width ;
if _gabg > 0{_ffca -=_gabg ;};if _ccg < 0{_gaecc +=_ccg ;_ccg =0;};_ded :=_ccg +_gaecc -_bdab .Height ;if _ded > 0{_gaecc -=_ded ;};if _ffca <=0||_gaecc <=0{return ;};if (_eadf &7)==0{_fbcbc (_bdab ,_eadf ,_ccg ,_ffca ,_gaecc ,_agdf );}else {_cace (_bdab ,_eadf ,_ccg ,_ffca ,_gaecc ,_agdf );
};};func (_eee *Gray8 )At (x ,y int )_b .Color {_gdbcg ,_ :=_eee .ColorAt (x ,y );return _gdbcg };func (_acfb *Gray16 )At (x ,y int )_b .Color {_fab ,_ :=_acfb .ColorAt (x ,y );return _fab };func ColorAtGray8BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_b .Gray ,error ){_ebc :=y *bytesPerLine +x ;
if _ebc >=len (data ){return _b .Gray {},_ec .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_cgdd :=data [_ebc ];if len (decode )==2{_cgdd =uint8 (uint32 (LinearInterpolate (float64 (_cgdd ),0,255,decode [0],decode [1]))&0xff);};return _b .Gray {Y :_cgdd },nil ;};func (_bfad *ImageBase )setEightFullBytes (_bacad int ,_fgfe uint64 )error {if _bacad +7> len (_bfad .Data )-1{return _fb .New ("\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_bfad .Data [_bacad ]=byte ((_fgfe &0xff00000000000000)>>56);_bfad .Data [_bacad +1]=byte ((_fgfe &0xff000000000000)>>48);_bfad .Data [_bacad +2]=byte ((_fgfe &0xff0000000000)>>40);_bfad .Data [_bacad +3]=byte ((_fgfe &0xff00000000)>>32);_bfad .Data [_bacad +4]=byte ((_fgfe &0xff000000)>>24);
_bfad .Data [_bacad +5]=byte ((_fgfe &0xff0000)>>16);_bfad .Data [_bacad +6]=byte ((_fgfe &0xff00)>>8);_bfad .Data [_bacad +7]=byte (_fgfe &0xff);return nil ;};func _gcg (_cedb ,_ade *Monochrome ,_geec []byte ,_fdd int )(_gda error ){var (_bfc ,_eb ,_bde ,_eag ,_ae ,_bea ,_debd ,_ead int ;
_fcd ,_aaf ,_cdc ,_egd uint32 ;_bdf ,_ccd byte ;_beb uint16 ;);_fce :=make ([]byte ,4);_fg :=make ([]byte ,4);for _bde =0;_bde < _cedb .Height -1;_bde ,_eag =_bde +2,_eag +1{_bfc =_bde *_cedb .BytesPerLine ;_eb =_eag *_ade .BytesPerLine ;for _ae ,_bea =0,0;
_ae < _fdd ;_ae ,_bea =_ae +4,_bea +1{for _debd =0;_debd < 4;_debd ++{_ead =_bfc +_ae +_debd ;if _ead <=len (_cedb .Data )-1&&_ead < _bfc +_cedb .BytesPerLine {_fce [_debd ]=_cedb .Data [_ead ];}else {_fce [_debd ]=0x00;};_ead =_bfc +_cedb .BytesPerLine +_ae +_debd ;
if _ead <=len (_cedb .Data )-1&&_ead < _bfc +(2*_cedb .BytesPerLine ){_fg [_debd ]=_cedb .Data [_ead ];}else {_fg [_debd ]=0x00;};};_fcd =_ga .BigEndian .Uint32 (_fce );_aaf =_ga .BigEndian .Uint32 (_fg );_cdc =_fcd &_aaf ;_cdc |=_cdc <<1;_egd =_fcd |_aaf ;
_egd &=_egd <<1;_aaf =_cdc |_egd ;_aaf &=0xaaaaaaaa;_fcd =_aaf |(_aaf <<7);_bdf =byte (_fcd >>24);_ccd =byte ((_fcd >>8)&0xff);_ead =_eb +_bea ;if _ead +1==len (_ade .Data )-1||_ead +1>=_eb +_ade .BytesPerLine {if _gda =_ade .setByte (_ead ,_geec [_bdf ]);
_gda !=nil {return _ec .Errorf ("\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_ead );};}else {_beb =(uint16 (_geec [_bdf ])<<8)|uint16 (_geec [_ccd ]);if _gda =_ade .setTwoBytes (_ead ,_beb );_gda !=nil {return _ec .Errorf ("s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_ead );
};_bea ++;};};};return nil ;};func (_fefc *Gray4 )GrayAt (x ,y int )_b .Gray {_ggbab ,_ :=ColorAtGray4BPC (x ,y ,_fefc .BytesPerLine ,_fefc .Data ,_fefc .Decode );return _ggbab ;};func (_cacb *Gray8 )ColorAt (x ,y int )(_b .Color ,error ){return ColorAtGray8BPC (x ,y ,_cacb .BytesPerLine ,_cacb .Data ,_cacb .Decode );
};var _ _e .Image =&Gray16 {};func (_adad *NRGBA32 )NRGBAAt (x ,y int )_b .NRGBA {_adba ,_ :=ColorAtNRGBA32 (x ,y ,_adad .Width ,_adad .Data ,_adad .Alpha ,_adad .Decode );return _adba ;};func _cfg (_bfgc _b .NYCbCrA )_b .RGBA {_ddcd ,_bgbcb ,_debg ,_ged :=_agab (_bfgc ).RGBA ();
return _b .RGBA {R :uint8 (_ddcd >>8),G :uint8 (_bgbcb >>8),B :uint8 (_debg >>8),A :uint8 (_ged >>8)};};func _dceg (_baga _e .Image ,_cfbe Image ,_dgff _e .Rectangle ){if _ccde ,_cbgec :=_baga .(SMasker );_cbgec &&_ccde .HasAlpha (){_cfbe .(SMasker ).MakeAlpha ();
};_agc (_baga ,_cfbe ,_dgff );};func (_aefe *Monochrome )IsUnpadded ()bool {return (_aefe .Width *_aefe .Height )==len (_aefe .Data )};func (_gedd *Gray16 )GrayAt (x ,y int )_b .Gray {_facf ,_ :=_gedd .ColorAt (x ,y );return _b .Gray {Y :uint8 (_facf .(_b .Gray16 ).Y >>8)};
};func (_adbd *Gray8 )Set (x ,y int ,c _b .Color ){_cbce :=y *_adbd .BytesPerLine +x ;if _cbce > len (_adbd .Data )-1{return ;};_feag :=_b .GrayModel .Convert (c );_adbd .Data [_cbce ]=_feag .(_b .Gray ).Y ;};var (_gbfg =[]byte {0x00,0x80,0xC0,0xE0,0xF0,0xF8,0xFC,0xFE,0xFF};
_fdfd =[]byte {0x00,0x01,0x03,0x07,0x0F,0x1F,0x3F,0x7F,0xFF};);func init (){_gbaf ()};func IsGrayImgBlackAndWhite (i *_e .Gray )bool {return _aagcb (i )};var (MonochromeConverter =ConverterFunc (_eddb );Gray2Converter =ConverterFunc (_eeb );Gray4Converter =ConverterFunc (_ggcf );
GrayConverter =ConverterFunc (_gbdc );Gray16Converter =ConverterFunc (_agebd );NRGBA16Converter =ConverterFunc (_bbc );NRGBAConverter =ConverterFunc (_dbaa );NRGBA64Converter =ConverterFunc (_dag );RGBAConverter =ConverterFunc (_abda );CMYKConverter =ConverterFunc (_bad );
);func (_ccca *Monochrome )setBit (_ggcg ,_ddge int ){_ccca .Data [_ggcg +(_ddge >>3)]|=0x80>>uint (_ddge &7);};func _bb ()(_fef [256]uint32 ){for _fac :=0;_fac < 256;_fac ++{if _fac &0x01!=0{_fef [_fac ]|=0xf;};if _fac &0x02!=0{_fef [_fac ]|=0xf0;};if _fac &0x04!=0{_fef [_fac ]|=0xf00;
};if _fac &0x08!=0{_fef [_fac ]|=0xf000;};if _fac &0x10!=0{_fef [_fac ]|=0xf0000;};if _fac &0x20!=0{_fef [_fac ]|=0xf00000;};if _fac &0x40!=0{_fef [_fac ]|=0xf000000;};if _fac &0x80!=0{_fef [_fac ]|=0xf0000000;};};return _fef ;};func _gae (_beab NRGBA ,_aed CMYK ,_ggbc _e .Rectangle ){for _fad :=0;
_fad < _ggbc .Max .X ;_fad ++{for _cac :=0;_cac < _ggbc .Max .Y ;_cac ++{_cgab :=_beab .NRGBAAt (_fad ,_cac );_aed .SetCMYK (_fad ,_cac ,_cfd (_cgab ));};};};var (Gray2Model =_b .ModelFunc (_eedf );Gray4Model =_b .ModelFunc (_faf );NRGBA16Model =_b .ModelFunc (_adgda );
);func (_agb *CMYK32 )ColorAt (x ,y int )(_b .Color ,error ){return ColorAtCMYK (x ,y ,_agb .Width ,_agb .Data ,_agb .Decode );};func NewImageBase (width int ,height int ,bitsPerComponent int ,colorComponents int ,data []byte ,alpha []byte ,decode []float64 )ImageBase {_gdgb :=ImageBase {Width :width ,Height :height ,BitsPerComponent :bitsPerComponent ,ColorComponents :colorComponents ,Data :data ,Alpha :alpha ,Decode :decode ,BytesPerLine :BytesPerLine (width ,bitsPerComponent ,colorComponents )};
if data ==nil {_gdgb .Data =make ([]byte ,height *_gdgb .BytesPerLine );};return _gdgb ;};func _dbg (_dbd int )[]uint {var _dgd []uint ;_cfe :=_dbd ;_efe :=_cfe /8;if _efe !=0{for _gfd :=0;_gfd < _efe ;_gfd ++{_dgd =append (_dgd ,8);};_edf :=_cfe %8;_cfe =0;
if _edf !=0{_cfe =_edf ;};};_acd :=_cfe /4;if _acd !=0{for _afg :=0;_afg < _acd ;_afg ++{_dgd =append (_dgd ,4);};_ad :=_cfe %4;_cfe =0;if _ad !=0{_cfe =_ad ;};};_gag :=_cfe /2;if _gag !=0{for _bgf :=0;_bgf < _gag ;_bgf ++{_dgd =append (_dgd ,2);};};return _dgd ;
};func (_egba *Gray16 )ColorModel ()_b .Model {return _b .Gray16Model };func _a (_cd *Monochrome ,_bc int ,_ac []uint )(*Monochrome ,error ){_bd :=_bc *_cd .Width ;_bdc :=_bc *_cd .Height ;_ecg :=_ceg (_bd ,_bdc );for _gg ,_cc :=range _ac {var _dee error ;
switch _cc {case 2:_dee =_gb (_ecg ,_cd );case 4:_dee =_bca (_ecg ,_cd );case 8:_dee =_gbe (_ecg ,_cd );};if _dee !=nil {return nil ,_dee ;};if _gg !=len (_ac )-1{_cd =_ecg .copy ();};};return _ecg ,nil ;};var _ _e .Image =&Gray2 {};func BytesPerLine (width ,bitsPerComponent ,colorComponents int )int {return ((width *bitsPerComponent )*colorComponents +7)>>3;
};var _ Gray =&Gray16 {};func _bgee (_gba ,_cgd *Monochrome ,_fcg []byte ,_edd int )(_cdf error ){var (_ceda ,_fead ,_cgdf ,_ffd ,_bbf ,_dbdf ,_fbcf ,_gff int ;_gbc ,_gdbf ,_efc ,_faa uint32 ;_fegc ,_gef byte ;_cgdb uint16 ;);_fbg :=make ([]byte ,4);_cgda :=make ([]byte ,4);
for _cgdf =0;_cgdf < _gba .Height -1;_cgdf ,_ffd =_cgdf +2,_ffd +1{_ceda =_cgdf *_gba .BytesPerLine ;_fead =_ffd *_cgd .BytesPerLine ;for _bbf ,_dbdf =0,0;_bbf < _edd ;_bbf ,_dbdf =_bbf +4,_dbdf +1{for _fbcf =0;_fbcf < 4;_fbcf ++{_gff =_ceda +_bbf +_fbcf ;
if _gff <=len (_gba .Data )-1&&_gff < _ceda +_gba .BytesPerLine {_fbg [_fbcf ]=_gba .Data [_gff ];}else {_fbg [_fbcf ]=0x00;};_gff =_ceda +_gba .BytesPerLine +_bbf +_fbcf ;if _gff <=len (_gba .Data )-1&&_gff < _ceda +(2*_gba .BytesPerLine ){_cgda [_fbcf ]=_gba .Data [_gff ];
}else {_cgda [_fbcf ]=0x00;};};_gbc =_ga .BigEndian .Uint32 (_fbg );_gdbf =_ga .BigEndian .Uint32 (_cgda );_efc =_gbc &_gdbf ;_efc |=_efc <<1;_faa =_gbc |_gdbf ;_faa &=_faa <<1;_gdbf =_efc &_faa ;_gdbf &=0xaaaaaaaa;_gbc =_gdbf |(_gdbf <<7);_fegc =byte (_gbc >>24);
_gef =byte ((_gbc >>8)&0xff);_gff =_fead +_dbdf ;if _gff +1==len (_cgd .Data )-1||_gff +1>=_fead +_cgd .BytesPerLine {if _cdf =_cgd .setByte (_gff ,_fcg [_fegc ]);_cdf !=nil {return _ec .Errorf ("\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_gff );};}else {_cgdb =(uint16 (_fcg [_fegc ])<<8)|uint16 (_fcg [_gef ]);
if _cdf =_cgd .setTwoBytes (_gff ,_cgdb );_cdf !=nil {return _ec .Errorf ("s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_gff );
};_dbdf ++;};};};return nil ;};func (_aagb *Monochrome )ScaleLow (width ,height int )(*Monochrome ,error ){if width < 0||height < 0{return nil ,_fb .New ("\u0070\u0072\u006f\u0076\u0069\u0064e\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0077\u0069\u0064t\u0068\u0020\u0061\u006e\u0064\u0020\u0068e\u0069\u0067\u0068\u0074");
};_gfda :=_ceg (width ,height );_gdd :=make ([]int ,height );_ggec :=make ([]int ,width );_dcg :=float64 (_aagb .Width )/float64 (width );_edaab :=float64 (_aagb .Height )/float64 (height );for _gec :=0;_gec < height ;_gec ++{_gdd [_gec ]=int (_c .Min (_edaab *float64 (_gec )+0.5,float64 (_aagb .Height -1)));
};for _baca :=0;_baca < width ;_baca ++{_ggec [_baca ]=int (_c .Min (_dcg *float64 (_baca )+0.5,float64 (_aagb .Width -1)));};_afce :=-1;_aee :=byte (0);for _fde :=0;_fde < height ;_fde ++{_gga :=_gdd [_fde ]*_aagb .BytesPerLine ;_dgb :=_fde *_gfda .BytesPerLine ;
for _eafg :=0;_eafg < width ;_eafg ++{_bfag :=_ggec [_eafg ];if _bfag !=_afce {_aee =_aagb .getBit (_gga ,_bfag );if _aee !=0{_gfda .setBit (_dgb ,_eafg );};_afce =_bfag ;}else {if _aee !=0{_gfda .setBit (_dgb ,_eafg );};};};};return _gfda ,nil ;};func _gbeg (_dca ,_fbf *Monochrome ,_eaf []byte ,_abb int )(_beg error ){var (_edfb ,_cfc ,_eda ,_ced ,_efeb ,_bdbb ,_ggfc ,_eac int ;
_eafe ,_eea uint32 ;_dggf ,_dcd byte ;_dde uint16 ;);_ffb :=make ([]byte ,4);_adb :=make ([]byte ,4);for _eda =0;_eda < _dca .Height -1;_eda ,_ced =_eda +2,_ced +1{_edfb =_eda *_dca .BytesPerLine ;_cfc =_ced *_fbf .BytesPerLine ;for _efeb ,_bdbb =0,0;_efeb < _abb ;
_efeb ,_bdbb =_efeb +4,_bdbb +1{for _ggfc =0;_ggfc < 4;_ggfc ++{_eac =_edfb +_efeb +_ggfc ;if _eac <=len (_dca .Data )-1&&_eac < _edfb +_dca .BytesPerLine {_ffb [_ggfc ]=_dca .Data [_eac ];}else {_ffb [_ggfc ]=0x00;};_eac =_edfb +_dca .BytesPerLine +_efeb +_ggfc ;
if _eac <=len (_dca .Data )-1&&_eac < _edfb +(2*_dca .BytesPerLine ){_adb [_ggfc ]=_dca .Data [_eac ];}else {_adb [_ggfc ]=0x00;};};_eafe =_ga .BigEndian .Uint32 (_ffb );_eea =_ga .BigEndian .Uint32 (_adb );_eea |=_eafe ;_eea |=_eea <<1;_eea &=0xaaaaaaaa;
_eafe =_eea |(_eea <<7);_dggf =byte (_eafe >>24);_dcd =byte ((_eafe >>8)&0xff);_eac =_cfc +_bdbb ;if _eac +1==len (_fbf .Data )-1||_eac +1>=_cfc +_fbf .BytesPerLine {_fbf .Data [_eac ]=_eaf [_dggf ];}else {_dde =(uint16 (_eaf [_dggf ])<<8)|uint16 (_eaf [_dcd ]);
if _beg =_fbf .setTwoBytes (_eac ,_dde );_beg !=nil {return _ec .Errorf ("s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_eac );
};_bdbb ++;};};};return nil ;};var _ _e .Image =&Gray8 {};func (_afab *RGBA32 )SetRGBA (x ,y int ,c _b .RGBA ){_dgaef :=y *_afab .Width +x ;_fgfd :=3*_dgaef ;if _fgfd +2>=len (_afab .Data ){return ;};_afab .setRGBA (_dgaef ,c );};func (_gaad *NRGBA16 )Validate ()error {if len (_gaad .Data )!=3*_gaad .Width *_gaad .Height /2{return _fb .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};func ColorAtGray4BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_b .Gray ,error ){_cbgcb :=y *bytesPerLine +x >>1;if _cbgcb >=len (data ){return _b .Gray {},_ec .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_ggda :=data [_cbgcb ]>>uint (4-(x &1)*4)&0xf;if len (decode )==2{_ggda =uint8 (uint32 (LinearInterpolate (float64 (_ggda ),0,15,decode [0],decode [1]))&0xf);};return _b .Gray {Y :_ggda *17&0xff},nil ;};func (_ecaa *Monochrome )setGray (_agad int ,_bcbe _b .Gray ,_babe int ){if _bcbe .Y ==0{_ecaa .clearBit (_babe ,_agad );
}else {_ecaa .setGrayBit (_babe ,_agad );};};func _fge (_bba _b .Gray ,_eddd monochromeModel )_b .Gray {if _bba .Y > uint8 (_eddd ){return _b .Gray {Y :_c .MaxUint8 };};return _b .Gray {};};func _afdb (_ggcga _b .Gray )_b .Gray {_abe :=_ggcga .Y >>6;_abe |=_abe <<2;
_ggcga .Y =_abe |_abe <<4;return _ggcga ;};func _bad (_dadf _e .Image )(Image ,error ){if _cegb ,_gdc :=_dadf .(*CMYK32 );_gdc {return _cegb .Copy (),nil ;};_ffbd :=_dadf .Bounds ();_ddb ,_gffe :=NewImage (_ffbd .Max .X ,_ffbd .Max .Y ,8,4,nil ,nil ,nil );
if _gffe !=nil {return nil ,_gffe ;};switch _fbcb :=_dadf .(type ){case CMYK :_gdaa (_fbcb ,_ddb .(CMYK ),_ffbd );case Gray :_eeae (_fbcb ,_ddb .(CMYK ),_ffbd );case NRGBA :_gae (_fbcb ,_ddb .(CMYK ),_ffbd );case RGBA :_edaa (_fbcb ,_ddb .(CMYK ),_ffbd );
default:_agc (_dadf ,_ddb ,_ffbd );};return _ddb ,nil ;};func (_feaga *Gray8 )ColorModel ()_b .Model {return _b .GrayModel };func _edaa (_adgd RGBA ,_bdag CMYK ,_aef _e .Rectangle ){for _bdfd :=0;_bdfd < _aef .Max .X ;_bdfd ++{for _cgabg :=0;_cgabg < _aef .Max .Y ;
_cgabg ++{_bgdgb :=_adgd .RGBAAt (_bdfd ,_cgabg );_bdag .SetCMYK (_bdfd ,_cgabg ,_gbad (_bgdgb ));};};};func ColorAt (x ,y ,width ,bitsPerColor ,colorComponents ,bytesPerLine int ,data ,alpha []byte ,decode []float64 )(_b .Color ,error ){switch colorComponents {case 1:return ColorAtGrayscale (x ,y ,bitsPerColor ,bytesPerLine ,data ,decode );
case 3:return ColorAtNRGBA (x ,y ,width ,bytesPerLine ,bitsPerColor ,data ,alpha ,decode );case 4:return ColorAtCMYK (x ,y ,width ,data ,decode );default:return nil ,_ec .Errorf ("\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063o\u006c\u006f\u0072\u0020\u0063\u006f\u006dp\u006f\u006e\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0074h\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0064",colorComponents );
};};func _bdef (_ggd Gray ,_aaga nrgba64 ,_eec _e .Rectangle ){for _accf :=0;_accf < _eec .Max .X ;_accf ++{for _bdbbb :=0;_bdbbb < _eec .Max .Y ;_bdbbb ++{_aad :=_abbb (_aaga .NRGBA64At (_accf ,_bdbbb ));_ggd .SetGray (_accf ,_bdbbb ,_aad );};};};func (_fbeb *RGBA32 )Set (x ,y int ,c _b .Color ){_acffe :=y *_fbeb .Width +x ;
_ecaf :=3*_acffe ;if _ecaf +2>=len (_fbeb .Data ){return ;};_gfae :=_b .RGBAModel .Convert (c ).(_b .RGBA );_fbeb .setRGBA (_acffe ,_gfae );};func _eadg (_eafcd _e .Image ,_daeb uint8 )*_e .Gray {_gabc :=_eafcd .Bounds ();_ccab :=_e .NewGray (_gabc );var (_bgbcf _b .Color ;
_bbae _b .Gray ;);for _fcbf :=0;_fcbf < _gabc .Max .X ;_fcbf ++{for _bgdc :=0;_bgdc < _gabc .Max .Y ;_bgdc ++{_bgbcf =_eafcd .At (_fcbf ,_bgdc );_ccab .Set (_fcbf ,_bgdc ,_bgbcf );_bbae =_ccab .GrayAt (_fcbf ,_bgdc );_ccab .SetGray (_fcbf ,_bgdc ,_b .Gray {Y :_fagc (_bbae .Y ,_daeb )});
};};return _ccab ;};func (_fcc colorConverter )Convert (src _e .Image )(Image ,error ){return _fcc ._aff (src )};func _gbe (_ee ,_bdb *Monochrome )(_bcgd error ){_aa :=_bdb .BytesPerLine ;_gdbg :=_ee .BytesPerLine ;var _age ,_gac ,_da ,_fba ,_ed int ;for _da =0;
_da < _bdb .Height ;_da ++{_age =_da *_aa ;_gac =8*_da *_gdbg ;for _fba =0;_fba < _aa ;_fba ++{if _bcgd =_ee .setEightBytes (_gac +_fba *8,_bf [_bdb .Data [_age +_fba ]]);_bcgd !=nil {return _bcgd ;};};for _ed =1;_ed < 8;_ed ++{for _fba =0;_fba < _gdbg ;
_fba ++{if _bcgd =_ee .setByte (_gac +_ed *_gdbg +_fba ,_ee .Data [_gac +_fba ]);_bcgd !=nil {return _bcgd ;};};};};return nil ;};func (_eaaec *NRGBA64 )Set (x ,y int ,c _b .Color ){_eaad :=(y *_eaaec .Width +x )*2;_fgge :=_eaad *3;if _fgge +5>=len (_eaaec .Data ){return ;
};_bcgeg :=_b .NRGBA64Model .Convert (c ).(_b .NRGBA64 );_eaaec .setNRGBA64 (_fgge ,_bcgeg ,_eaad );};func _eddb (_acb _e .Image )(Image ,error ){if _cffd ,_bae :=_acb .(*Monochrome );_bae {return _cffd ,nil ;};_bef :=_acb .Bounds ();var _aec Gray ;switch _cbga :=_acb .(type ){case Gray :_aec =_cbga ;
case NRGBA :_aec =&Gray8 {ImageBase :NewImageBase (_bef .Max .X ,_bef .Max .Y ,8,1,nil ,nil ,nil )};_gaec (_aec ,_cbga ,_bef );case nrgba64 :_aec =&Gray8 {ImageBase :NewImageBase (_bef .Max .X ,_bef .Max .Y ,8,1,nil ,nil ,nil )};_bdef (_aec ,_cbga ,_bef );
default:_ggba ,_bcgb :=GrayConverter .Convert (_acb );if _bcgb !=nil {return nil ,_bcgb ;};_aec =_ggba .(Gray );};_eagg ,_gbg :=NewImage (_bef .Max .X ,_bef .Max .Y ,1,1,nil ,nil ,nil );if _gbg !=nil {return nil ,_gbg ;};_gab :=_eagg .(*Monochrome );_ceeb :=AutoThresholdTriangle (GrayHistogram (_aec ));
for _gbbc :=0;_gbbc < _bef .Max .X ;_gbbc ++{for _egda :=0;_egda < _bef .Max .Y ;_egda ++{_dcc :=_fge (_aec .GrayAt (_gbbc ,_egda ),monochromeModel (_ceeb ));_gab .SetGray (_gbbc ,_egda ,_dcc );};};return _eagg ,nil ;};var _ Gray =&Gray2 {};func _gdge (_ceegg *Monochrome ,_fcbdd ,_ggagf ,_ebcd ,_dbac int ,_cefe RasterOperator ,_egdac *Monochrome ,_aead ,_bcdd int )error {var (_bgba bool ;
_gfeb bool ;_acfc int ;_agbc int ;_dded int ;_gdgg bool ;_faae byte ;_gdcg int ;_eagc int ;_gebg int ;_aeee ,_edaf int ;);_dfdc :=8-(_fcbdd &7);_ddfd :=_fdfd [_dfdc ];_ffad :=_ceegg .BytesPerLine *_ggagf +(_fcbdd >>3);_agce :=_egdac .BytesPerLine *_bcdd +(_aead >>3);
if _ebcd < _dfdc {_bgba =true ;_ddfd &=_gbfg [8-_dfdc +_ebcd ];};if !_bgba {_acfc =(_ebcd -_dfdc )>>3;if _acfc > 0{_gfeb =true ;_agbc =_ffad +1;_dded =_agce +1;};};_gdcg =(_fcbdd +_ebcd )&7;if !(_bgba ||_gdcg ==0){_gdgg =true ;_faae =_gbfg [_gdcg ];_eagc =_ffad +1+_acfc ;
_gebg =_agce +1+_acfc ;};switch _cefe {case PixSrc :for _aeee =0;_aeee < _dbac ;_aeee ++{_ceegg .Data [_ffad ]=_gfag (_ceegg .Data [_ffad ],_egdac .Data [_agce ],_ddfd );_ffad +=_ceegg .BytesPerLine ;_agce +=_egdac .BytesPerLine ;};if _gfeb {for _aeee =0;
_aeee < _dbac ;_aeee ++{for _edaf =0;_edaf < _acfc ;_edaf ++{_ceegg .Data [_agbc +_edaf ]=_egdac .Data [_dded +_edaf ];};_agbc +=_ceegg .BytesPerLine ;_dded +=_egdac .BytesPerLine ;};};if _gdgg {for _aeee =0;_aeee < _dbac ;_aeee ++{_ceegg .Data [_eagc ]=_gfag (_ceegg .Data [_eagc ],_egdac .Data [_gebg ],_faae );
_eagc +=_ceegg .BytesPerLine ;_gebg +=_egdac .BytesPerLine ;};};case PixNotSrc :for _aeee =0;_aeee < _dbac ;_aeee ++{_ceegg .Data [_ffad ]=_gfag (_ceegg .Data [_ffad ],^_egdac .Data [_agce ],_ddfd );_ffad +=_ceegg .BytesPerLine ;_agce +=_egdac .BytesPerLine ;
};if _gfeb {for _aeee =0;_aeee < _dbac ;_aeee ++{for _edaf =0;_edaf < _acfc ;_edaf ++{_ceegg .Data [_agbc +_edaf ]=^_egdac .Data [_dded +_edaf ];};_agbc +=_ceegg .BytesPerLine ;_dded +=_egdac .BytesPerLine ;};};if _gdgg {for _aeee =0;_aeee < _dbac ;_aeee ++{_ceegg .Data [_eagc ]=_gfag (_ceegg .Data [_eagc ],^_egdac .Data [_gebg ],_faae );
_eagc +=_ceegg .BytesPerLine ;_gebg +=_egdac .BytesPerLine ;};};case PixSrcOrDst :for _aeee =0;_aeee < _dbac ;_aeee ++{_ceegg .Data [_ffad ]=_gfag (_ceegg .Data [_ffad ],_egdac .Data [_agce ]|_ceegg .Data [_ffad ],_ddfd );_ffad +=_ceegg .BytesPerLine ;
_agce +=_egdac .BytesPerLine ;};if _gfeb {for _aeee =0;_aeee < _dbac ;_aeee ++{for _edaf =0;_edaf < _acfc ;_edaf ++{_ceegg .Data [_agbc +_edaf ]|=_egdac .Data [_dded +_edaf ];};_agbc +=_ceegg .BytesPerLine ;_dded +=_egdac .BytesPerLine ;};};if _gdgg {for _aeee =0;
_aeee < _dbac ;_aeee ++{_ceegg .Data [_eagc ]=_gfag (_ceegg .Data [_eagc ],_egdac .Data [_gebg ]|_ceegg .Data [_eagc ],_faae );_eagc +=_ceegg .BytesPerLine ;_gebg +=_egdac .BytesPerLine ;};};case PixSrcAndDst :for _aeee =0;_aeee < _dbac ;_aeee ++{_ceegg .Data [_ffad ]=_gfag (_ceegg .Data [_ffad ],_egdac .Data [_agce ]&_ceegg .Data [_ffad ],_ddfd );
_ffad +=_ceegg .BytesPerLine ;_agce +=_egdac .BytesPerLine ;};if _gfeb {for _aeee =0;_aeee < _dbac ;_aeee ++{for _edaf =0;_edaf < _acfc ;_edaf ++{_ceegg .Data [_agbc +_edaf ]&=_egdac .Data [_dded +_edaf ];};_agbc +=_ceegg .BytesPerLine ;_dded +=_egdac .BytesPerLine ;
};};if _gdgg {for _aeee =0;_aeee < _dbac ;_aeee ++{_ceegg .Data [_eagc ]=_gfag (_ceegg .Data [_eagc ],_egdac .Data [_gebg ]&_ceegg .Data [_eagc ],_faae );_eagc +=_ceegg .BytesPerLine ;_gebg +=_egdac .BytesPerLine ;};};case PixSrcXorDst :for _aeee =0;_aeee < _dbac ;
_aeee ++{_ceegg .Data [_ffad ]=_gfag (_ceegg .Data [_ffad ],_egdac .Data [_agce ]^_ceegg .Data [_ffad ],_ddfd );_ffad +=_ceegg .BytesPerLine ;_agce +=_egdac .BytesPerLine ;};if _gfeb {for _aeee =0;_aeee < _dbac ;_aeee ++{for _edaf =0;_edaf < _acfc ;_edaf ++{_ceegg .Data [_agbc +_edaf ]^=_egdac .Data [_dded +_edaf ];
};_agbc +=_ceegg .BytesPerLine ;_dded +=_egdac .BytesPerLine ;};};if _gdgg {for _aeee =0;_aeee < _dbac ;_aeee ++{_ceegg .Data [_eagc ]=_gfag (_ceegg .Data [_eagc ],_egdac .Data [_gebg ]^_ceegg .Data [_eagc ],_faae );_eagc +=_ceegg .BytesPerLine ;_gebg +=_egdac .BytesPerLine ;
};};case PixNotSrcOrDst :for _aeee =0;_aeee < _dbac ;_aeee ++{_ceegg .Data [_ffad ]=_gfag (_ceegg .Data [_ffad ],^(_egdac .Data [_agce ])|_ceegg .Data [_ffad ],_ddfd );_ffad +=_ceegg .BytesPerLine ;_agce +=_egdac .BytesPerLine ;};if _gfeb {for _aeee =0;
_aeee < _dbac ;_aeee ++{for _edaf =0;_edaf < _acfc ;_edaf ++{_ceegg .Data [_agbc +_edaf ]|=^(_egdac .Data [_dded +_edaf ]);};_agbc +=_ceegg .BytesPerLine ;_dded +=_egdac .BytesPerLine ;};};if _gdgg {for _aeee =0;_aeee < _dbac ;_aeee ++{_ceegg .Data [_eagc ]=_gfag (_ceegg .Data [_eagc ],^(_egdac .Data [_gebg ])|_ceegg .Data [_eagc ],_faae );
_eagc +=_ceegg .BytesPerLine ;_gebg +=_egdac .BytesPerLine ;};};case PixNotSrcAndDst :for _aeee =0;_aeee < _dbac ;_aeee ++{_ceegg .Data [_ffad ]=_gfag (_ceegg .Data [_ffad ],^(_egdac .Data [_agce ])&_ceegg .Data [_ffad ],_ddfd );_ffad +=_ceegg .BytesPerLine ;
_agce +=_egdac .BytesPerLine ;};if _gfeb {for _aeee =0;_aeee < _dbac ;_aeee ++{for _edaf =0;_edaf < _acfc ;_edaf ++{_ceegg .Data [_agbc +_edaf ]&=^_egdac .Data [_dded +_edaf ];};_agbc +=_ceegg .BytesPerLine ;_dded +=_egdac .BytesPerLine ;};};if _gdgg {for _aeee =0;
_aeee < _dbac ;_aeee ++{_ceegg .Data [_eagc ]=_gfag (_ceegg .Data [_eagc ],^(_egdac .Data [_gebg ])&_ceegg .Data [_eagc ],_faae );_eagc +=_ceegg .BytesPerLine ;_gebg +=_egdac .BytesPerLine ;};};case PixSrcOrNotDst :for _aeee =0;_aeee < _dbac ;_aeee ++{_ceegg .Data [_ffad ]=_gfag (_ceegg .Data [_ffad ],_egdac .Data [_agce ]|^(_ceegg .Data [_ffad ]),_ddfd );
_ffad +=_ceegg .BytesPerLine ;_agce +=_egdac .BytesPerLine ;};if _gfeb {for _aeee =0;_aeee < _dbac ;_aeee ++{for _edaf =0;_edaf < _acfc ;_edaf ++{_ceegg .Data [_agbc +_edaf ]=_egdac .Data [_dded +_edaf ]|^(_ceegg .Data [_agbc +_edaf ]);};_agbc +=_ceegg .BytesPerLine ;
_dded +=_egdac .BytesPerLine ;};};if _gdgg {for _aeee =0;_aeee < _dbac ;_aeee ++{_ceegg .Data [_eagc ]=_gfag (_ceegg .Data [_eagc ],_egdac .Data [_gebg ]|^(_ceegg .Data [_eagc ]),_faae );_eagc +=_ceegg .BytesPerLine ;_gebg +=_egdac .BytesPerLine ;};};case PixSrcAndNotDst :for _aeee =0;
_aeee < _dbac ;_aeee ++{_ceegg .Data [_ffad ]=_gfag (_ceegg .Data [_ffad ],_egdac .Data [_agce ]&^(_ceegg .Data [_ffad ]),_ddfd );_ffad +=_ceegg .BytesPerLine ;_agce +=_egdac .BytesPerLine ;};if _gfeb {for _aeee =0;_aeee < _dbac ;_aeee ++{for _edaf =0;
_edaf < _acfc ;_edaf ++{_ceegg .Data [_agbc +_edaf ]=_egdac .Data [_dded +_edaf ]&^(_ceegg .Data [_agbc +_edaf ]);};_agbc +=_ceegg .BytesPerLine ;_dded +=_egdac .BytesPerLine ;};};if _gdgg {for _aeee =0;_aeee < _dbac ;_aeee ++{_ceegg .Data [_eagc ]=_gfag (_ceegg .Data [_eagc ],_egdac .Data [_gebg ]&^(_ceegg .Data [_eagc ]),_faae );
_eagc +=_ceegg .BytesPerLine ;_gebg +=_egdac .BytesPerLine ;};};case PixNotPixSrcOrDst :for _aeee =0;_aeee < _dbac ;_aeee ++{_ceegg .Data [_ffad ]=_gfag (_ceegg .Data [_ffad ],^(_egdac .Data [_agce ]|_ceegg .Data [_ffad ]),_ddfd );_ffad +=_ceegg .BytesPerLine ;
_agce +=_egdac .BytesPerLine ;};if _gfeb {for _aeee =0;_aeee < _dbac ;_aeee ++{for _edaf =0;_edaf < _acfc ;_edaf ++{_ceegg .Data [_agbc +_edaf ]=^(_egdac .Data [_dded +_edaf ]|_ceegg .Data [_agbc +_edaf ]);};_agbc +=_ceegg .BytesPerLine ;_dded +=_egdac .BytesPerLine ;
};};if _gdgg {for _aeee =0;_aeee < _dbac ;_aeee ++{_ceegg .Data [_eagc ]=_gfag (_ceegg .Data [_eagc ],^(_egdac .Data [_gebg ]|_ceegg .Data [_eagc ]),_faae );_eagc +=_ceegg .BytesPerLine ;_gebg +=_egdac .BytesPerLine ;};};case PixNotPixSrcAndDst :for _aeee =0;
_aeee < _dbac ;_aeee ++{_ceegg .Data [_ffad ]=_gfag (_ceegg .Data [_ffad ],^(_egdac .Data [_agce ]&_ceegg .Data [_ffad ]),_ddfd );_ffad +=_ceegg .BytesPerLine ;_agce +=_egdac .BytesPerLine ;};if _gfeb {for _aeee =0;_aeee < _dbac ;_aeee ++{for _edaf =0;
_edaf < _acfc ;_edaf ++{_ceegg .Data [_agbc +_edaf ]=^(_egdac .Data [_dded +_edaf ]&_ceegg .Data [_agbc +_edaf ]);};_agbc +=_ceegg .BytesPerLine ;_dded +=_egdac .BytesPerLine ;};};if _gdgg {for _aeee =0;_aeee < _dbac ;_aeee ++{_ceegg .Data [_eagc ]=_gfag (_ceegg .Data [_eagc ],^(_egdac .Data [_gebg ]&_ceegg .Data [_eagc ]),_faae );
_eagc +=_ceegg .BytesPerLine ;_gebg +=_egdac .BytesPerLine ;};};case PixNotPixSrcXorDst :for _aeee =0;_aeee < _dbac ;_aeee ++{_ceegg .Data [_ffad ]=_gfag (_ceegg .Data [_ffad ],^(_egdac .Data [_agce ]^_ceegg .Data [_ffad ]),_ddfd );_ffad +=_ceegg .BytesPerLine ;
_agce +=_egdac .BytesPerLine ;};if _gfeb {for _aeee =0;_aeee < _dbac ;_aeee ++{for _edaf =0;_edaf < _acfc ;_edaf ++{_ceegg .Data [_agbc +_edaf ]=^(_egdac .Data [_dded +_edaf ]^_ceegg .Data [_agbc +_edaf ]);};_agbc +=_ceegg .BytesPerLine ;_dded +=_egdac .BytesPerLine ;
};};if _gdgg {for _aeee =0;_aeee < _dbac ;_aeee ++{_ceegg .Data [_eagc ]=_gfag (_ceegg .Data [_eagc ],^(_egdac .Data [_gebg ]^_ceegg .Data [_eagc ]),_faae );_eagc +=_ceegg .BytesPerLine ;_gebg +=_egdac .BytesPerLine ;};};default:_gf .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070e\u0072\u0061\u0074o\u0072:\u0020\u0025\u0064",_cefe );
return _fb .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");};return nil ;};func _cb (_de *Monochrome ,_gc int )(*Monochrome ,error ){if _de ==nil {return nil ,_fb .New ("\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _gc ==1{return _de .copy (),nil ;};if !IsPowerOf2 (uint (_gc )){return nil ,_ec .Errorf ("\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006ci\u0064 \u0065x\u0070a\u006e\u0064\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020\u0025\u0064",_gc );
};_ge :=_dbg (_gc );return _a (_de ,_gc ,_ge );};func (_ddcc *Gray4 )Histogram ()(_bbfa [256]int ){for _ebge :=0;_ebge < _ddcc .Width ;_ebge ++{for _bbaf :=0;_bbaf < _ddcc .Height ;_bbaf ++{_bbfa [_ddcc .GrayAt (_ebge ,_bbaf ).Y ]++;};};return _bbfa ;};
func ColorAtNRGBA16 (x ,y ,width ,bytesPerLine int ,data ,alpha []byte ,decode []float64 )(_b .NRGBA ,error ){_eebc :=y *bytesPerLine +x *3/2;if _eebc +1>=len (data ){return _b .NRGBA {},_aefd (x ,y );};const (_bgef =0xf;_bebc =uint8 (0xff););_gdff :=_bebc ;
if alpha !=nil {_agba :=y *BytesPerLine (width ,4,1);if _agba < len (alpha ){if x %2==0{_gdff =(alpha [_agba ]>>uint (4))&_bgef ;}else {_gdff =alpha [_agba ]&_bgef ;};_gdff |=_gdff <<4;};};var _gcgd ,_dbgb ,_egcc uint8 ;if x *3%2==0{_gcgd =(data [_eebc ]>>uint (4))&_bgef ;
_dbgb =data [_eebc ]&_bgef ;_egcc =(data [_eebc +1]>>uint (4))&_bgef ;}else {_gcgd =data [_eebc ]&_bgef ;_dbgb =(data [_eebc +1]>>uint (4))&_bgef ;_egcc =data [_eebc +1]&_bgef ;};if len (decode )==6{_gcgd =uint8 (uint32 (LinearInterpolate (float64 (_gcgd ),0,15,decode [0],decode [1]))&0xf);
_dbgb =uint8 (uint32 (LinearInterpolate (float64 (_dbgb ),0,15,decode [2],decode [3]))&0xf);_egcc =uint8 (uint32 (LinearInterpolate (float64 (_egcc ),0,15,decode [4],decode [5]))&0xf);};return _b .NRGBA {R :(_gcgd <<4)|(_gcgd &0xf),G :(_dbgb <<4)|(_dbgb &0xf),B :(_egcc <<4)|(_egcc &0xf),A :_gdff },nil ;
};func _gcfe (_cfcg *Monochrome ,_daaf ,_gafa ,_afcb ,_acg int ,_gbbe RasterOperator ,_ggaa *Monochrome ,_caaag ,_cgcb int )error {if _cfcg ==nil {return _fb .New ("\u006e\u0069\u006c\u0020\u0027\u0064\u0065\u0073\u0074\u0027\u0020\u0042i\u0074\u006d\u0061\u0070");
};if _gbbe ==PixDst {return nil ;};switch _gbbe {case PixClr ,PixSet ,PixNotDst :_gfeg (_cfcg ,_daaf ,_gafa ,_afcb ,_acg ,_gbbe );return nil ;};if _ggaa ==nil {_gf .Log .Debug ("\u0052a\u0073\u0074e\u0072\u004f\u0070\u0065r\u0061\u0074\u0069o\u006e\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020bi\u0074\u006d\u0061p\u0020\u0069s\u0020\u006e\u006f\u0074\u0020\u0064e\u0066\u0069n\u0065\u0064");
return _fb .New ("\u006e\u0069l\u0020\u0027\u0073r\u0063\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _afbfb :=_dff (_cfcg ,_daaf ,_gafa ,_afcb ,_acg ,_gbbe ,_ggaa ,_caaag ,_cgcb );_afbfb !=nil {return _afbfb ;};return nil ;};func (_eeeg *ImageBase )setEightPartlyBytes (_dcac ,_aca int ,_egfag uint64 )(_dgcdc error ){var (_dgbc byte ;
_fgcf int ;);for _efa :=1;_efa <=_aca ;_efa ++{_fgcf =64-_efa *8;_dgbc =byte (_egfag >>uint (_fgcf )&0xff);if _dgcdc =_eeeg .setByte (_dcac +_efa -1,_dgbc );_dgcdc !=nil {return _dgcdc ;};};_fgg :=_eeeg .BytesPerLine *8-_eeeg .Width ;if _fgg ==0{return nil ;
};_fgcf -=8;_dgbc =byte (_egfag >>uint (_fgcf )&0xff)<<uint (_fgg );if _dgcdc =_eeeg .setByte (_dcac +_aca ,_dgbc );_dgcdc !=nil {return _dgcdc ;};return nil ;};func (_eeba *Gray16 )Histogram ()(_febf [256]int ){for _gea :=0;_gea < _eeba .Width ;_gea ++{for _degc :=0;
_degc < _eeba .Height ;_degc ++{_febf [_eeba .GrayAt (_gea ,_degc ).Y ]++;};};return _febf ;};func _dae (_ffe CMYK ,_bcbaf Gray ,_eccb _e .Rectangle ){for _cfbb :=0;_cfbb < _eccb .Max .X ;_cfbb ++{for _dfe :=0;_dfe < _eccb .Max .Y ;_dfe ++{_dfgcc :=_efba (_ffe .CMYKAt (_cfbb ,_dfe ));
_bcbaf .SetGray (_cfbb ,_dfe ,_dfgcc );};};};func _bdg (_gfa _b .CMYK )_b .NRGBA {_bbd ,_dec ,_faad :=_b .CMYKToRGB (_gfa .C ,_gfa .M ,_gfa .Y ,_gfa .K );return _b .NRGBA {R :_bbd ,G :_dec ,B :_faad ,A :0xff};};func (_gabe *Monochrome )ResolveDecode ()error {if len (_gabe .Decode )!=2{return nil ;
};if _gabe .Decode [0]==1&&_gabe .Decode [1]==0{if _dcdc :=_gabe .InverseData ();_dcdc !=nil {return _dcdc ;};_gabe .Decode =nil ;};return nil ;};func _agebd (_cada _e .Image )(Image ,error ){if _cbgca ,_fedg :=_cada .(*Gray16 );_fedg {return _cbgca .Copy (),nil ;
};_gagd :=_cada .Bounds ();_dgcf ,_dccc :=NewImage (_gagd .Max .X ,_gagd .Max .Y ,16,1,nil ,nil ,nil );if _dccc !=nil {return nil ,_dccc ;};_eafa (_cada ,_dgcf ,_gagd );return _dgcf ,nil ;};func (_cbdf *Monochrome )RasterOperation (dx ,dy ,dw ,dh int ,op RasterOperator ,src *Monochrome ,sx ,sy int )error {return _gcfe (_cbdf ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );
};func (_cdad *Gray8 )Base ()*ImageBase {return &_cdad .ImageBase };func _ccag (_baegg _b .NRGBA )_b .NRGBA {_baegg .R =_baegg .R >>4|(_baegg .R >>4)<<4;_baegg .G =_baegg .G >>4|(_baegg .G >>4)<<4;_baegg .B =_baegg .B >>4|(_baegg .B >>4)<<4;return _baegg ;
};func (_cbf *CMYK32 )Bounds ()_e .Rectangle {return _e .Rectangle {Max :_e .Point {X :_cbf .Width ,Y :_cbf .Height }};};type CMYK32 struct{ImageBase };func _fefb (_ddba *Monochrome ,_dda ,_bcaa ,_bdee ,_cca int ,_dbbb RasterOperator ,_fccee *Monochrome ,_bffd ,_gbba int )error {var (_bbe byte ;
_dbge int ;_fbcc int ;_eaee ,_cfac int ;_ceeg ,_gafc int ;);_dgae :=_bdee >>3;_fbbd :=_bdee &7;if _fbbd > 0{_bbe =_gbfg [_fbbd ];};_dbge =_fccee .BytesPerLine *_gbba +(_bffd >>3);_fbcc =_ddba .BytesPerLine *_bcaa +(_dda >>3);switch _dbbb {case PixSrc :for _ceeg =0;
_ceeg < _cca ;_ceeg ++{_eaee =_dbge +_ceeg *_fccee .BytesPerLine ;_cfac =_fbcc +_ceeg *_ddba .BytesPerLine ;for _gafc =0;_gafc < _dgae ;_gafc ++{_ddba .Data [_cfac ]=_fccee .Data [_eaee ];_cfac ++;_eaee ++;};if _fbbd > 0{_ddba .Data [_cfac ]=_gfag (_ddba .Data [_cfac ],_fccee .Data [_eaee ],_bbe );
};};case PixNotSrc :for _ceeg =0;_ceeg < _cca ;_ceeg ++{_eaee =_dbge +_ceeg *_fccee .BytesPerLine ;_cfac =_fbcc +_ceeg *_ddba .BytesPerLine ;for _gafc =0;_gafc < _dgae ;_gafc ++{_ddba .Data [_cfac ]=^(_fccee .Data [_eaee ]);_cfac ++;_eaee ++;};if _fbbd > 0{_ddba .Data [_cfac ]=_gfag (_ddba .Data [_cfac ],^_fccee .Data [_eaee ],_bbe );
};};case PixSrcOrDst :for _ceeg =0;_ceeg < _cca ;_ceeg ++{_eaee =_dbge +_ceeg *_fccee .BytesPerLine ;_cfac =_fbcc +_ceeg *_ddba .BytesPerLine ;for _gafc =0;_gafc < _dgae ;_gafc ++{_ddba .Data [_cfac ]|=_fccee .Data [_eaee ];_cfac ++;_eaee ++;};if _fbbd > 0{_ddba .Data [_cfac ]=_gfag (_ddba .Data [_cfac ],_fccee .Data [_eaee ]|_ddba .Data [_cfac ],_bbe );
};};case PixSrcAndDst :for _ceeg =0;_ceeg < _cca ;_ceeg ++{_eaee =_dbge +_ceeg *_fccee .BytesPerLine ;_cfac =_fbcc +_ceeg *_ddba .BytesPerLine ;for _gafc =0;_gafc < _dgae ;_gafc ++{_ddba .Data [_cfac ]&=_fccee .Data [_eaee ];_cfac ++;_eaee ++;};if _fbbd > 0{_ddba .Data [_cfac ]=_gfag (_ddba .Data [_cfac ],_fccee .Data [_eaee ]&_ddba .Data [_cfac ],_bbe );
};};case PixSrcXorDst :for _ceeg =0;_ceeg < _cca ;_ceeg ++{_eaee =_dbge +_ceeg *_fccee .BytesPerLine ;_cfac =_fbcc +_ceeg *_ddba .BytesPerLine ;for _gafc =0;_gafc < _dgae ;_gafc ++{_ddba .Data [_cfac ]^=_fccee .Data [_eaee ];_cfac ++;_eaee ++;};if _fbbd > 0{_ddba .Data [_cfac ]=_gfag (_ddba .Data [_cfac ],_fccee .Data [_eaee ]^_ddba .Data [_cfac ],_bbe );
};};case PixNotSrcOrDst :for _ceeg =0;_ceeg < _cca ;_ceeg ++{_eaee =_dbge +_ceeg *_fccee .BytesPerLine ;_cfac =_fbcc +_ceeg *_ddba .BytesPerLine ;for _gafc =0;_gafc < _dgae ;_gafc ++{_ddba .Data [_cfac ]|=^(_fccee .Data [_eaee ]);_cfac ++;_eaee ++;};if _fbbd > 0{_ddba .Data [_cfac ]=_gfag (_ddba .Data [_cfac ],^(_fccee .Data [_eaee ])|_ddba .Data [_cfac ],_bbe );
};};case PixNotSrcAndDst :for _ceeg =0;_ceeg < _cca ;_ceeg ++{_eaee =_dbge +_ceeg *_fccee .BytesPerLine ;_cfac =_fbcc +_ceeg *_ddba .BytesPerLine ;for _gafc =0;_gafc < _dgae ;_gafc ++{_ddba .Data [_cfac ]&=^(_fccee .Data [_eaee ]);_cfac ++;_eaee ++;};if _fbbd > 0{_ddba .Data [_cfac ]=_gfag (_ddba .Data [_cfac ],^(_fccee .Data [_eaee ])&_ddba .Data [_cfac ],_bbe );
};};case PixSrcOrNotDst :for _ceeg =0;_ceeg < _cca ;_ceeg ++{_eaee =_dbge +_ceeg *_fccee .BytesPerLine ;_cfac =_fbcc +_ceeg *_ddba .BytesPerLine ;for _gafc =0;_gafc < _dgae ;_gafc ++{_ddba .Data [_cfac ]=_fccee .Data [_eaee ]|^(_ddba .Data [_cfac ]);_cfac ++;
_eaee ++;};if _fbbd > 0{_ddba .Data [_cfac ]=_gfag (_ddba .Data [_cfac ],_fccee .Data [_eaee ]|^(_ddba .Data [_cfac ]),_bbe );};};case PixSrcAndNotDst :for _ceeg =0;_ceeg < _cca ;_ceeg ++{_eaee =_dbge +_ceeg *_fccee .BytesPerLine ;_cfac =_fbcc +_ceeg *_ddba .BytesPerLine ;
for _gafc =0;_gafc < _dgae ;_gafc ++{_ddba .Data [_cfac ]=_fccee .Data [_eaee ]&^(_ddba .Data [_cfac ]);_cfac ++;_eaee ++;};if _fbbd > 0{_ddba .Data [_cfac ]=_gfag (_ddba .Data [_cfac ],_fccee .Data [_eaee ]&^(_ddba .Data [_cfac ]),_bbe );};};case PixNotPixSrcOrDst :for _ceeg =0;
_ceeg < _cca ;_ceeg ++{_eaee =_dbge +_ceeg *_fccee .BytesPerLine ;_cfac =_fbcc +_ceeg *_ddba .BytesPerLine ;for _gafc =0;_gafc < _dgae ;_gafc ++{_ddba .Data [_cfac ]=^(_fccee .Data [_eaee ]|_ddba .Data [_cfac ]);_cfac ++;_eaee ++;};if _fbbd > 0{_ddba .Data [_cfac ]=_gfag (_ddba .Data [_cfac ],^(_fccee .Data [_eaee ]|_ddba .Data [_cfac ]),_bbe );
};};case PixNotPixSrcAndDst :for _ceeg =0;_ceeg < _cca ;_ceeg ++{_eaee =_dbge +_ceeg *_fccee .BytesPerLine ;_cfac =_fbcc +_ceeg *_ddba .BytesPerLine ;for _gafc =0;_gafc < _dgae ;_gafc ++{_ddba .Data [_cfac ]=^(_fccee .Data [_eaee ]&_ddba .Data [_cfac ]);
_cfac ++;_eaee ++;};if _fbbd > 0{_ddba .Data [_cfac ]=_gfag (_ddba .Data [_cfac ],^(_fccee .Data [_eaee ]&_ddba .Data [_cfac ]),_bbe );};};case PixNotPixSrcXorDst :for _ceeg =0;_ceeg < _cca ;_ceeg ++{_eaee =_dbge +_ceeg *_fccee .BytesPerLine ;_cfac =_fbcc +_ceeg *_ddba .BytesPerLine ;
for _gafc =0;_gafc < _dgae ;_gafc ++{_ddba .Data [_cfac ]=^(_fccee .Data [_eaee ]^_ddba .Data [_cfac ]);_cfac ++;_eaee ++;};if _fbbd > 0{_ddba .Data [_cfac ]=_gfag (_ddba .Data [_cfac ],^(_fccee .Data [_eaee ]^_ddba .Data [_cfac ]),_bbe );};};default:_gf .Log .Debug ("\u0050\u0072ov\u0069\u0064\u0065d\u0020\u0069\u006e\u0076ali\u0064 r\u0061\u0073\u0074\u0065\u0072\u0020\u006fpe\u0072\u0061\u0074\u006f\u0072\u003a\u0020%\u0076",_dbbb );
return _fb .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");};return nil ;};type Histogramer interface{Histogram ()[256]int ;};func (_bdbba *Monochrome )Histogram ()(_dgdf [256]int ){for _ ,_dece :=range _bdbba .Data {_dgdf [0xff]+=int (_cgdg [_bdbba .Data [_dece ]]);
};return _dgdf ;};func (_dbdd *RGBA32 )RGBAAt (x ,y int )_b .RGBA {_dccb ,_ :=ColorAtRGBA32 (x ,y ,_dbdd .Width ,_dbdd .Data ,_dbdd .Alpha ,_dbdd .Decode );return _dccb ;};func (_gdae *NRGBA16 )setNRGBA (_acge ,_fccg ,_dfdcf int ,_eaagf _b .NRGBA ){if _acge *3%2==0{_gdae .Data [_dfdcf ]=(_eaagf .R >>4)<<4|(_eaagf .G >>4);
_gdae .Data [_dfdcf +1]=(_eaagf .B >>4)<<4|(_gdae .Data [_dfdcf +1]&0xf);}else {_gdae .Data [_dfdcf ]=(_gdae .Data [_dfdcf ]&0xf0)|(_eaagf .R >>4);_gdae .Data [_dfdcf +1]=(_eaagf .G >>4)<<4|(_eaagf .B >>4);};if _gdae .Alpha !=nil {_bag :=_fccg *BytesPerLine (_gdae .Width ,4,1);
if _bag < len (_gdae .Alpha ){if _acge %2==0{_gdae .Alpha [_bag ]=(_eaagf .A >>uint (4))<<uint (4)|(_gdae .Alpha [_dfdcf ]&0xf);}else {_gdae .Alpha [_bag ]=(_gdae .Alpha [_bag ]&0xf0)|(_eaagf .A >>uint (4));};};};};func _acf (_bg *Monochrome ,_ecb ,_eg int )(*Monochrome ,error ){if _bg ==nil {return nil ,_fb .New ("\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _ecb <=0||_eg <=0{return nil ,_fb .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0073\u0063\u0061l\u0065\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020<\u003d\u0020\u0030");};if _ecb ==_eg {if _ecb ==1{return _bg .copy (),nil ;};if _ecb ==2||_ecb ==4||_ecb ==8{_cg ,_geb :=_cb (_bg ,_ecb );
if _geb !=nil {return nil ,_geb ;};return _cg ,nil ;};};_cbg :=_ecb *_bg .Width ;_cab :=_eg *_bg .Height ;_be :=_ceg (_cbg ,_cab );_cff :=_be .BytesPerLine ;var (_db ,_ab ,_dge ,_cde ,_egf int ;_ef byte ;_afe error ;);for _ab =0;_ab < _bg .Height ;_ab ++{_db =_eg *_ab *_cff ;
for _dge =0;_dge < _bg .Width ;_dge ++{if _bge :=_bg .getBitAt (_dge ,_ab );_bge {_egf =_ecb *_dge ;for _cde =0;_cde < _ecb ;_cde ++{_be .setIndexedBit (_db *8+_egf +_cde );};};};for _cde =1;_cde < _eg ;_cde ++{_cdg :=_db +_cde *_cff ;for _ddc :=0;_ddc < _cff ;
_ddc ++{if _ef ,_afe =_be .getByte (_db +_ddc );_afe !=nil {return nil ,_afe ;};if _afe =_be .setByte (_cdg +_ddc ,_ef );_afe !=nil {return nil ,_afe ;};};};};return _be ,nil ;};func (_fbgbe *RGBA32 )Copy ()Image {return &RGBA32 {ImageBase :_fbgbe .copy ()}};
var _ _e .Image =&NRGBA16 {};func _cdag (_adgg _b .Gray )_b .Gray {_adgg .Y >>=4;_adgg .Y |=_adgg .Y <<4;return _adgg };var _ Image =&Monochrome {};func _dag (_fcf _e .Image )(Image ,error ){if _bbaa ,_ecef :=_fcf .(*NRGBA64 );_ecef {return _bbaa .Copy (),nil ;
};_becfc ,_aaccc ,_efebd :=_ecfef (_fcf ,2);_ebed ,_gbgde :=NewImage (_becfc .Max .X ,_becfc .Max .Y ,16,3,nil ,_efebd ,nil );if _gbgde !=nil {return nil ,_gbgde ;};_dceg (_fcf ,_ebed ,_becfc );if len (_efebd )!=0&&!_aaccc {if _aagbb :=_dceb (_efebd ,_ebed );
_aagbb !=nil {return nil ,_aagbb ;};};return _ebed ,nil ;};func _fbda (_afeg RGBA ,_eeccf Gray ,_dfcd _e .Rectangle ){for _eeg :=0;_eeg < _dfcd .Max .X ;_eeg ++{for _feec :=0;_feec < _dfcd .Max .Y ;_feec ++{_ece :=_gbcb (_afeg .RGBAAt (_eeg ,_feec ));_eeccf .SetGray (_eeg ,_feec ,_ece );
};};};func (_ecbd *ImageBase )HasAlpha ()bool {if _ecbd .Alpha ==nil {return false ;};for _afff :=range _ecbd .Alpha {if _ecbd .Alpha [_afff ]!=0xff{return true ;};};return false ;};type NRGBA64 struct{ImageBase };func (_ggga *NRGBA64 )NRGBA64At (x ,y int )_b .NRGBA64 {_fdfdb ,_ :=ColorAtNRGBA64 (x ,y ,_ggga .Width ,_ggga .Data ,_ggga .Alpha ,_ggga .Decode );
return _fdfdb ;};func (_fdaa *NRGBA64 )Base ()*ImageBase {return &_fdaa .ImageBase };func _agab (_ddf _b .NYCbCrA )_b .NRGBA {_bgg :=int32 (_ddf .Y )*0x10101;_bgbc :=int32 (_ddf .Cb )-128;_bac :=int32 (_ddf .Cr )-128;_dfgd :=_bgg +91881*_bac ;if uint32 (_dfgd )&0xff000000==0{_dfgd >>=8;
}else {_dfgd =^(_dfgd >>31)&0xffff;};_beac :=_bgg -22554*_bgbc -46802*_bac ;if uint32 (_beac )&0xff000000==0{_beac >>=8;}else {_beac =^(_beac >>31)&0xffff;};_eccg :=_bgg +116130*_bgbc ;if uint32 (_eccg )&0xff000000==0{_eccg >>=8;}else {_eccg =^(_eccg >>31)&0xffff;
};return _b .NRGBA {R :uint8 (_dfgd >>8),G :uint8 (_beac >>8),B :uint8 (_eccg >>8),A :_ddf .A };};func (_gcfdc *NRGBA64 )ColorModel ()_b .Model {return _b .NRGBA64Model };func _badc (_ecadb _e .Image ,_agfc Image ,_aefg _e .Rectangle ){if _gagbd ,_fgfa :=_ecadb .(SMasker );
_fgfa &&_gagbd .HasAlpha (){_agfc .(SMasker ).MakeAlpha ();};switch _ebgbb :=_ecadb .(type ){case Gray :_ggcb (_ebgbb ,_agfc .(NRGBA ),_aefg );case NRGBA :_gfgg (_ebgbb ,_agfc .(NRGBA ),_aefg );case *_e .NYCbCrA :_gaac (_ebgbb ,_agfc .(NRGBA ),_aefg );
case CMYK :_dabeg (_ebgbb ,_agfc .(NRGBA ),_aefg );case RGBA :_aebc (_ebgbb ,_agfc .(NRGBA ),_aefg );case nrgba64 :_fbca (_ebgbb ,_agfc .(NRGBA ),_aefg );default:_agc (_ecadb ,_agfc ,_aefg );};};func AutoThresholdTriangle (histogram [256]int )uint8 {var _cgegg ,_fbefd ,_dbgag ,_dacc int ;
for _fcbg :=0;_fcbg < len (histogram );_fcbg ++{if histogram [_fcbg ]> 0{_cgegg =_fcbg ;break ;};};if _cgegg > 0{_cgegg --;};for _cgddf :=255;_cgddf > 0;_cgddf --{if histogram [_cgddf ]> 0{_dacc =_cgddf ;break ;};};if _dacc < 255{_dacc ++;};for _cgcf :=0;
_cgcf < 256;_cgcf ++{if histogram [_cgcf ]> _fbefd {_dbgag =_cgcf ;_fbefd =histogram [_cgcf ];};};var _cegd bool ;if (_dbgag -_cgegg )< (_dacc -_dbgag ){_cegd =true ;var _fgcgb int ;_aadb :=255;for _fgcgb < _aadb {_dcegb :=histogram [_fgcgb ];histogram [_fgcgb ]=histogram [_aadb ];
histogram [_aadb ]=_dcegb ;_fgcgb ++;_aadb --;};_cgegg =255-_dacc ;_dbgag =255-_dbgag ;};if _cgegg ==_dbgag {return uint8 (_cgegg );};_fafb :=float64 (histogram [_dbgag ]);_bbed :=float64 (_cgegg -_dbgag );_fdac :=_c .Sqrt (_fafb *_fafb +_bbed *_bbed );
_fafb /=_fdac ;_bbed /=_fdac ;_fdac =_fafb *float64 (_cgegg )+_bbed *float64 (histogram [_cgegg ]);_adca :=_cgegg ;var _geag float64 ;for _ceacd :=_cgegg +1;_ceacd <=_dbgag ;_ceacd ++{_dfad :=_fafb *float64 (_ceacd )+_bbed *float64 (histogram [_ceacd ])-_fdac ;
if _dfad > _geag {_adca =_ceacd ;_geag =_dfad ;};};_adca --;if _cegd {var _ggdaa int ;_beee :=255;for _ggdaa < _beee {_aefdg :=histogram [_ggdaa ];histogram [_ggdaa ]=histogram [_beee ];histogram [_beee ]=_aefdg ;_ggdaa ++;_beee --;};return uint8 (255-_adca );
};return uint8 (_adca );};func (_fceb *CMYK32 )CMYKAt (x ,y int )_b .CMYK {_fbceb ,_ :=ColorAtCMYK (x ,y ,_fceb .Width ,_fceb .Data ,_fceb .Decode );return _fbceb ;};func (_aagf *Gray16 )ColorAt (x ,y int )(_b .Color ,error ){return ColorAtGray16BPC (x ,y ,_aagf .BytesPerLine ,_aagf .Data ,_aagf .Decode );
};func ImgToGray (i _e .Image )*_e .Gray {if _fcdc ,_baad :=i .(*_e .Gray );_baad {return _fcdc ;};_gcae :=i .Bounds ();_agcb :=_e .NewGray (_gcae );for _cbcg :=0;_cbcg < _gcae .Max .X ;_cbcg ++{for _eggdg :=0;_eggdg < _gcae .Max .Y ;_eggdg ++{_cgge :=i .At (_cbcg ,_eggdg );
_agcb .Set (_cbcg ,_eggdg ,_cgge );};};return _agcb ;};func _dgde (_adda _b .Gray )_b .CMYK {return _b .CMYK {K :0xff-_adda .Y }};func (_bbag *NRGBA32 )SetNRGBA (x ,y int ,c _b .NRGBA ){_gecc :=y *_bbag .Width +x ;_ccee :=3*_gecc ;if _ccee +2>=len (_bbag .Data ){return ;
};_bbag .setRGBA (_gecc ,c );};func _bccb (_aaeea *_e .NYCbCrA ,_eafd RGBA ,_bgec _e .Rectangle ){for _facae :=0;_facae < _bgec .Max .X ;_facae ++{for _ebeg :=0;_ebeg < _bgec .Max .Y ;_ebeg ++{_cbad :=_aaeea .NYCbCrAAt (_facae ,_ebeg );_eafd .SetRGBA (_facae ,_ebeg ,_cfg (_cbad ));
};};};func _fbde (_bdfc NRGBA ,_afdg RGBA ,_fgabg _e .Rectangle ){for _aebf :=0;_aebf < _fgabg .Max .X ;_aebf ++{for _baab :=0;_baab < _fgabg .Max .Y ;_baab ++{_gaadg :=_bdfc .NRGBAAt (_aebf ,_baab );_afdg .SetRGBA (_aebf ,_baab ,_fee (_gaadg ));};};};
func _cace (_afbd *Monochrome ,_dedb ,_bffbc int ,_bbef ,_eebae int ,_gece RasterOperator ){var (_ggbba bool ;_egfb bool ;_geed int ;_gbdd int ;_efcc int ;_dfb int ;_abea bool ;_ecae byte ;);_afffc :=8-(_dedb &7);_fbge :=_fdfd [_afffc ];_ccaa :=_afbd .BytesPerLine *_bffbc +(_dedb >>3);
if _bbef < _afffc {_ggbba =true ;_fbge &=_gbfg [8-_afffc +_bbef ];};if !_ggbba {_geed =(_bbef -_afffc )>>3;if _geed !=0{_egfb =true ;_gbdd =_ccaa +1;};};_efcc =(_dedb +_bbef )&7;if !(_ggbba ||_efcc ==0){_abea =true ;_ecae =_gbfg [_efcc ];_dfb =_ccaa +1+_geed ;
};var _bga ,_fafa int ;switch _gece {case PixClr :for _bga =0;_bga < _eebae ;_bga ++{_afbd .Data [_ccaa ]=_gfag (_afbd .Data [_ccaa ],0x0,_fbge );_ccaa +=_afbd .BytesPerLine ;};if _egfb {for _bga =0;_bga < _eebae ;_bga ++{for _fafa =0;_fafa < _geed ;_fafa ++{_afbd .Data [_gbdd +_fafa ]=0x0;
};_gbdd +=_afbd .BytesPerLine ;};};if _abea {for _bga =0;_bga < _eebae ;_bga ++{_afbd .Data [_dfb ]=_gfag (_afbd .Data [_dfb ],0x0,_ecae );_dfb +=_afbd .BytesPerLine ;};};case PixSet :for _bga =0;_bga < _eebae ;_bga ++{_afbd .Data [_ccaa ]=_gfag (_afbd .Data [_ccaa ],0xff,_fbge );
_ccaa +=_afbd .BytesPerLine ;};if _egfb {for _bga =0;_bga < _eebae ;_bga ++{for _fafa =0;_fafa < _geed ;_fafa ++{_afbd .Data [_gbdd +_fafa ]=0xff;};_gbdd +=_afbd .BytesPerLine ;};};if _abea {for _bga =0;_bga < _eebae ;_bga ++{_afbd .Data [_dfb ]=_gfag (_afbd .Data [_dfb ],0xff,_ecae );
_dfb +=_afbd .BytesPerLine ;};};case PixNotDst :for _bga =0;_bga < _eebae ;_bga ++{_afbd .Data [_ccaa ]=_gfag (_afbd .Data [_ccaa ],^_afbd .Data [_ccaa ],_fbge );_ccaa +=_afbd .BytesPerLine ;};if _egfb {for _bga =0;_bga < _eebae ;_bga ++{for _fafa =0;_fafa < _geed ;
_fafa ++{_afbd .Data [_gbdd +_fafa ]=^(_afbd .Data [_gbdd +_fafa ]);};_gbdd +=_afbd .BytesPerLine ;};};if _abea {for _bga =0;_bga < _eebae ;_bga ++{_afbd .Data [_dfb ]=_gfag (_afbd .Data [_dfb ],^_afbd .Data [_dfb ],_ecae );_dfb +=_afbd .BytesPerLine ;
};};};};func (_fgb *Gray8 )SetGray (x ,y int ,g _b .Gray ){_gbgg :=y *_fgb .BytesPerLine +x ;if _gbgg > len (_fgb .Data )-1{return ;};_fgb .Data [_gbgg ]=g .Y ;};func ColorAtNRGBA32 (x ,y ,width int ,data ,alpha []byte ,decode []float64 )(_b .NRGBA ,error ){_ffdd :=y *width +x ;
_adcf :=3*_ffdd ;if _adcf +2>=len (data ){return _b .NRGBA {},_ec .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_befe :=uint8 (0xff);if alpha !=nil &&len (alpha )> _ffdd {_befe =alpha [_ffdd ];};_bcae ,_bcbb ,_bgbb :=data [_adcf ],data [_adcf +1],data [_adcf +2];if len (decode )==6{_bcge :=LinearInterpolate (float64 (_bcae ),0,255.0,decode [0],decode [1]);_bbfg :=LinearInterpolate (float64 (_bcbb ),0,255.0,decode [2],decode [3]);
_ecdf :=LinearInterpolate (float64 (_bgbb ),0,255.0,decode [4],decode [5]);if _bcge <=1.0&&_bbfg <=1.0&&_ecdf <=1.0{_bcge *=255.0;_bbfg *=255.0;_ecdf *=255.0;};_bcae =uint8 (_bcge )&0xff;_bcbb =uint8 (_bbfg )&0xff;_bgbb =uint8 (_ecdf )&0xff;};return _b .NRGBA {R :_bcae ,G :_bcbb ,B :_bgbb ,A :_befe },nil ;
};func (_daef *NRGBA32 )Base ()*ImageBase {return &_daef .ImageBase };func (_fgcg *monochromeThresholdConverter )Convert (img _e .Image )(Image ,error ){if _ada ,_fgdb :=img .(*Monochrome );_fgdb {return _ada .Copy (),nil ;};_cfa :=img .Bounds ();_cfea ,_dba :=NewImage (_cfa .Max .X ,_cfa .Max .Y ,1,1,nil ,nil ,nil );
if _dba !=nil {return nil ,_dba ;};_cfea .(*Monochrome ).ModelThreshold =_fgcg .Threshold ;for _dbe :=0;_dbe < _cfa .Max .X ;_dbe ++{for _ecd :=0;_ecd < _cfa .Max .Y ;_ecd ++{_fdda :=img .At (_dbe ,_ecd );_cfea .Set (_dbe ,_ecd ,_fdda );};};return _cfea ,nil ;
};func _cfd (_gge _b .NRGBA )_b .CMYK {_bcb ,_ceba ,_egfa ,_ :=_gge .RGBA ();_ddbf ,_ecgd ,_eed ,_aggfb :=_b .RGBToCMYK (uint8 (_bcb >>8),uint8 (_ceba >>8),uint8 (_egfa >>8));return _b .CMYK {C :_ddbf ,M :_ecgd ,Y :_eed ,K :_aggfb };};func (_deaf *RGBA32 )Base ()*ImageBase {return &_deaf .ImageBase };
func (_egce *ImageBase )GetAlpha ()[]byte {return _egce .Alpha };func _geg (_bcgdd _b .NRGBA )_b .Gray {var _aab _b .NRGBA ;if _bcgdd ==_aab {return _b .Gray {Y :0xff};};_bcga ,_ccb ,_gdbb ,_ :=_bcgdd .RGBA ();_dbde :=(19595*_bcga +38470*_ccb +7471*_gdbb +1<<15)>>24;
return _b .Gray {Y :uint8 (_dbde )};};func (_gdbc *Gray2 )SetGray (x ,y int ,gray _b .Gray ){_dgdg :=_afdb (gray );_bbab :=y *_gdbc .BytesPerLine ;_ddbd :=_bbab +(x >>2);if _ddbd >=len (_gdbc .Data ){return ;};_ebgb :=_dgdg .Y >>6;_gdbc .Data [_ddbd ]=(_gdbc .Data [_ddbd ]&(^(0xc0>>uint (2*((x )&3)))))|(_ebgb <<uint (6-2*(x &3)));
};func (_cacc *Gray2 )ColorModel ()_b .Model {return Gray2Model };func (_dabe *CMYK32 )Set (x ,y int ,c _b .Color ){_fda :=4*(y *_dabe .Width +x );if _fda +3>=len (_dabe .Data ){return ;};_bgd :=_b .CMYKModel .Convert (c ).(_b .CMYK );_dabe .Data [_fda ]=_bgd .C ;
_dabe .Data [_fda +1]=_bgd .M ;_dabe .Data [_fda +2]=_bgd .Y ;_dabe .Data [_fda +3]=_bgd .K ;};func (_ace *Gray4 )ColorAt (x ,y int )(_b .Color ,error ){return ColorAtGray4BPC (x ,y ,_ace .BytesPerLine ,_ace .Data ,_ace .Decode );};func _eeae (_ceb Gray ,_bdd CMYK ,_dcb _e .Rectangle ){for _eba :=0;
_eba < _dcb .Max .X ;_eba ++{for _bec :=0;_bec < _dcb .Max .Y ;_bec ++{_cdb :=_ceb .GrayAt (_eba ,_bec );_bdd .SetCMYK (_eba ,_bec ,_dgde (_cdb ));};};};func IsPowerOf2 (n uint )bool {return n > 0&&(n &(n -1))==0};func _fagc (_ageg ,_adcfa uint8 )uint8 {if _ageg < _adcfa {return 255;
};return 0;};func ConverterFunc (converterFunc func (_bee _e .Image )(Image ,error ))ColorConverter {return colorConverter {_aff :converterFunc };};func (_fbgg *RGBA32 )ColorModel ()_b .Model {return _b .NRGBAModel };func _cgfed (_eceb *Monochrome ,_fbga ,_ddgeg ,_eegd ,_gbadg int ,_daeg RasterOperator ,_gfff *Monochrome ,_cbda ,_ecdc int )error {var (_ddfg bool ;
_bdfa bool ;_cagg byte ;_acbc int ;_gega int ;_ccff int ;_ggaf int ;_deed bool ;_ceecg int ;_aecd int ;_bbgdd int ;_cbcf bool ;_adeef byte ;_gbbbg int ;_cagd int ;_egbf int ;_bebf byte ;_gbce int ;_ebbe int ;_aeab uint ;_eadb uint ;_geef byte ;_gcbe shift ;
_cgdgg bool ;_bcbg bool ;_edg ,_afbb int ;);if _cbda &7!=0{_ebbe =8-(_cbda &7);};if _fbga &7!=0{_gega =8-(_fbga &7);};if _ebbe ==0&&_gega ==0{_geef =_fdfd [0];}else {if _gega > _ebbe {_aeab =uint (_gega -_ebbe );}else {_aeab =uint (8-(_ebbe -_gega ));};
_eadb =8-_aeab ;_geef =_fdfd [_aeab ];};if (_fbga &7)!=0{_ddfg =true ;_acbc =8-(_fbga &7);_cagg =_fdfd [_acbc ];_ccff =_eceb .BytesPerLine *_ddgeg +(_fbga >>3);_ggaf =_gfff .BytesPerLine *_ecdc +(_cbda >>3);_gbce =8-(_cbda &7);if _acbc > _gbce {_gcbe =_deda ;
if _eegd >=_ebbe {_cgdgg =true ;};}else {_gcbe =_gegb ;};};if _eegd < _acbc {_bdfa =true ;_cagg &=_gbfg [8-_acbc +_eegd ];};if !_bdfa {_ceecg =(_eegd -_acbc )>>3;if _ceecg !=0{_deed =true ;_aecd =_eceb .BytesPerLine *_ddgeg +((_fbga +_gega )>>3);_bbgdd =_gfff .BytesPerLine *_ecdc +((_cbda +_gega )>>3);
};};_gbbbg =(_fbga +_eegd )&7;if !(_bdfa ||_gbbbg ==0){_cbcf =true ;_adeef =_gbfg [_gbbbg ];_cagd =_eceb .BytesPerLine *_ddgeg +((_fbga +_gega )>>3)+_ceecg ;_egbf =_gfff .BytesPerLine *_ecdc +((_cbda +_gega )>>3)+_ceecg ;if _gbbbg > int (_eadb ){_bcbg =true ;
};};switch _daeg {case PixSrc :if _ddfg {for _edg =0;_edg < _gbadg ;_edg ++{if _gcbe ==_deda {_bebf =_gfff .Data [_ggaf ]<<_aeab ;if _cgdgg {_bebf =_gfag (_bebf ,_gfff .Data [_ggaf +1]>>_eadb ,_geef );};}else {_bebf =_gfff .Data [_ggaf ]>>_eadb ;};_eceb .Data [_ccff ]=_gfag (_eceb .Data [_ccff ],_bebf ,_cagg );
_ccff +=_eceb .BytesPerLine ;_ggaf +=_gfff .BytesPerLine ;};};if _deed {for _edg =0;_edg < _gbadg ;_edg ++{for _afbb =0;_afbb < _ceecg ;_afbb ++{_bebf =_gfag (_gfff .Data [_bbgdd +_afbb ]<<_aeab ,_gfff .Data [_bbgdd +_afbb +1]>>_eadb ,_geef );_eceb .Data [_aecd +_afbb ]=_bebf ;
};_aecd +=_eceb .BytesPerLine ;_bbgdd +=_gfff .BytesPerLine ;};};if _cbcf {for _edg =0;_edg < _gbadg ;_edg ++{_bebf =_gfff .Data [_egbf ]<<_aeab ;if _bcbg {_bebf =_gfag (_bebf ,_gfff .Data [_egbf +1]>>_eadb ,_geef );};_eceb .Data [_cagd ]=_gfag (_eceb .Data [_cagd ],_bebf ,_adeef );
_cagd +=_eceb .BytesPerLine ;_egbf +=_gfff .BytesPerLine ;};};case PixNotSrc :if _ddfg {for _edg =0;_edg < _gbadg ;_edg ++{if _gcbe ==_deda {_bebf =_gfff .Data [_ggaf ]<<_aeab ;if _cgdgg {_bebf =_gfag (_bebf ,_gfff .Data [_ggaf +1]>>_eadb ,_geef );};}else {_bebf =_gfff .Data [_ggaf ]>>_eadb ;
};_eceb .Data [_ccff ]=_gfag (_eceb .Data [_ccff ],^_bebf ,_cagg );_ccff +=_eceb .BytesPerLine ;_ggaf +=_gfff .BytesPerLine ;};};if _deed {for _edg =0;_edg < _gbadg ;_edg ++{for _afbb =0;_afbb < _ceecg ;_afbb ++{_bebf =_gfag (_gfff .Data [_bbgdd +_afbb ]<<_aeab ,_gfff .Data [_bbgdd +_afbb +1]>>_eadb ,_geef );
_eceb .Data [_aecd +_afbb ]=^_bebf ;};_aecd +=_eceb .BytesPerLine ;_bbgdd +=_gfff .BytesPerLine ;};};if _cbcf {for _edg =0;_edg < _gbadg ;_edg ++{_bebf =_gfff .Data [_egbf ]<<_aeab ;if _bcbg {_bebf =_gfag (_bebf ,_gfff .Data [_egbf +1]>>_eadb ,_geef );
};_eceb .Data [_cagd ]=_gfag (_eceb .Data [_cagd ],^_bebf ,_adeef );_cagd +=_eceb .BytesPerLine ;_egbf +=_gfff .BytesPerLine ;};};case PixSrcOrDst :if _ddfg {for _edg =0;_edg < _gbadg ;_edg ++{if _gcbe ==_deda {_bebf =_gfff .Data [_ggaf ]<<_aeab ;if _cgdgg {_bebf =_gfag (_bebf ,_gfff .Data [_ggaf +1]>>_eadb ,_geef );
};}else {_bebf =_gfff .Data [_ggaf ]>>_eadb ;};_eceb .Data [_ccff ]=_gfag (_eceb .Data [_ccff ],_bebf |_eceb .Data [_ccff ],_cagg );_ccff +=_eceb .BytesPerLine ;_ggaf +=_gfff .BytesPerLine ;};};if _deed {for _edg =0;_edg < _gbadg ;_edg ++{for _afbb =0;
_afbb < _ceecg ;_afbb ++{_bebf =_gfag (_gfff .Data [_bbgdd +_afbb ]<<_aeab ,_gfff .Data [_bbgdd +_afbb +1]>>_eadb ,_geef );_eceb .Data [_aecd +_afbb ]|=_bebf ;};_aecd +=_eceb .BytesPerLine ;_bbgdd +=_gfff .BytesPerLine ;};};if _cbcf {for _edg =0;_edg < _gbadg ;
_edg ++{_bebf =_gfff .Data [_egbf ]<<_aeab ;if _bcbg {_bebf =_gfag (_bebf ,_gfff .Data [_egbf +1]>>_eadb ,_geef );};_eceb .Data [_cagd ]=_gfag (_eceb .Data [_cagd ],_bebf |_eceb .Data [_cagd ],_adeef );_cagd +=_eceb .BytesPerLine ;_egbf +=_gfff .BytesPerLine ;
};};case PixSrcAndDst :if _ddfg {for _edg =0;_edg < _gbadg ;_edg ++{if _gcbe ==_deda {_bebf =_gfff .Data [_ggaf ]<<_aeab ;if _cgdgg {_bebf =_gfag (_bebf ,_gfff .Data [_ggaf +1]>>_eadb ,_geef );};}else {_bebf =_gfff .Data [_ggaf ]>>_eadb ;};_eceb .Data [_ccff ]=_gfag (_eceb .Data [_ccff ],_bebf &_eceb .Data [_ccff ],_cagg );
_ccff +=_eceb .BytesPerLine ;_ggaf +=_gfff .BytesPerLine ;};};if _deed {for _edg =0;_edg < _gbadg ;_edg ++{for _afbb =0;_afbb < _ceecg ;_afbb ++{_bebf =_gfag (_gfff .Data [_bbgdd +_afbb ]<<_aeab ,_gfff .Data [_bbgdd +_afbb +1]>>_eadb ,_geef );_eceb .Data [_aecd +_afbb ]&=_bebf ;
};_aecd +=_eceb .BytesPerLine ;_bbgdd +=_gfff .BytesPerLine ;};};if _cbcf {for _edg =0;_edg < _gbadg ;_edg ++{_bebf =_gfff .Data [_egbf ]<<_aeab ;if _bcbg {_bebf =_gfag (_bebf ,_gfff .Data [_egbf +1]>>_eadb ,_geef );};_eceb .Data [_cagd ]=_gfag (_eceb .Data [_cagd ],_bebf &_eceb .Data [_cagd ],_adeef );
_cagd +=_eceb .BytesPerLine ;_egbf +=_gfff .BytesPerLine ;};};case PixSrcXorDst :if _ddfg {for _edg =0;_edg < _gbadg ;_edg ++{if _gcbe ==_deda {_bebf =_gfff .Data [_ggaf ]<<_aeab ;if _cgdgg {_bebf =_gfag (_bebf ,_gfff .Data [_ggaf +1]>>_eadb ,_geef );};
}else {_bebf =_gfff .Data [_ggaf ]>>_eadb ;};_eceb .Data [_ccff ]=_gfag (_eceb .Data [_ccff ],_bebf ^_eceb .Data [_ccff ],_cagg );_ccff +=_eceb .BytesPerLine ;_ggaf +=_gfff .BytesPerLine ;};};if _deed {for _edg =0;_edg < _gbadg ;_edg ++{for _afbb =0;_afbb < _ceecg ;
_afbb ++{_bebf =_gfag (_gfff .Data [_bbgdd +_afbb ]<<_aeab ,_gfff .Data [_bbgdd +_afbb +1]>>_eadb ,_geef );_eceb .Data [_aecd +_afbb ]^=_bebf ;};_aecd +=_eceb .BytesPerLine ;_bbgdd +=_gfff .BytesPerLine ;};};if _cbcf {for _edg =0;_edg < _gbadg ;_edg ++{_bebf =_gfff .Data [_egbf ]<<_aeab ;
if _bcbg {_bebf =_gfag (_bebf ,_gfff .Data [_egbf +1]>>_eadb ,_geef );};_eceb .Data [_cagd ]=_gfag (_eceb .Data [_cagd ],_bebf ^_eceb .Data [_cagd ],_adeef );_cagd +=_eceb .BytesPerLine ;_egbf +=_gfff .BytesPerLine ;};};case PixNotSrcOrDst :if _ddfg {for _edg =0;
_edg < _gbadg ;_edg ++{if _gcbe ==_deda {_bebf =_gfff .Data [_ggaf ]<<_aeab ;if _cgdgg {_bebf =_gfag (_bebf ,_gfff .Data [_ggaf +1]>>_eadb ,_geef );};}else {_bebf =_gfff .Data [_ggaf ]>>_eadb ;};_eceb .Data [_ccff ]=_gfag (_eceb .Data [_ccff ],^_bebf |_eceb .Data [_ccff ],_cagg );
_ccff +=_eceb .BytesPerLine ;_ggaf +=_gfff .BytesPerLine ;};};if _deed {for _edg =0;_edg < _gbadg ;_edg ++{for _afbb =0;_afbb < _ceecg ;_afbb ++{_bebf =_gfag (_gfff .Data [_bbgdd +_afbb ]<<_aeab ,_gfff .Data [_bbgdd +_afbb +1]>>_eadb ,_geef );_eceb .Data [_aecd +_afbb ]|=^_bebf ;
};_aecd +=_eceb .BytesPerLine ;_bbgdd +=_gfff .BytesPerLine ;};};if _cbcf {for _edg =0;_edg < _gbadg ;_edg ++{_bebf =_gfff .Data [_egbf ]<<_aeab ;if _bcbg {_bebf =_gfag (_bebf ,_gfff .Data [_egbf +1]>>_eadb ,_geef );};_eceb .Data [_cagd ]=_gfag (_eceb .Data [_cagd ],^_bebf |_eceb .Data [_cagd ],_adeef );
_cagd +=_eceb .BytesPerLine ;_egbf +=_gfff .BytesPerLine ;};};case PixNotSrcAndDst :if _ddfg {for _edg =0;_edg < _gbadg ;_edg ++{if _gcbe ==_deda {_bebf =_gfff .Data [_ggaf ]<<_aeab ;if _cgdgg {_bebf =_gfag (_bebf ,_gfff .Data [_ggaf +1]>>_eadb ,_geef );
};}else {_bebf =_gfff .Data [_ggaf ]>>_eadb ;};_eceb .Data [_ccff ]=_gfag (_eceb .Data [_ccff ],^_bebf &_eceb .Data [_ccff ],_cagg );_ccff +=_eceb .BytesPerLine ;_ggaf +=_gfff .BytesPerLine ;};};if _deed {for _edg =0;_edg < _gbadg ;_edg ++{for _afbb =0;
_afbb < _ceecg ;_afbb ++{_bebf =_gfag (_gfff .Data [_bbgdd +_afbb ]<<_aeab ,_gfff .Data [_bbgdd +_afbb +1]>>_eadb ,_geef );_eceb .Data [_aecd +_afbb ]&=^_bebf ;};_aecd +=_eceb .BytesPerLine ;_bbgdd +=_gfff .BytesPerLine ;};};if _cbcf {for _edg =0;_edg < _gbadg ;
_edg ++{_bebf =_gfff .Data [_egbf ]<<_aeab ;if _bcbg {_bebf =_gfag (_bebf ,_gfff .Data [_egbf +1]>>_eadb ,_geef );};_eceb .Data [_cagd ]=_gfag (_eceb .Data [_cagd ],^_bebf &_eceb .Data [_cagd ],_adeef );_cagd +=_eceb .BytesPerLine ;_egbf +=_gfff .BytesPerLine ;
};};case PixSrcOrNotDst :if _ddfg {for _edg =0;_edg < _gbadg ;_edg ++{if _gcbe ==_deda {_bebf =_gfff .Data [_ggaf ]<<_aeab ;if _cgdgg {_bebf =_gfag (_bebf ,_gfff .Data [_ggaf +1]>>_eadb ,_geef );};}else {_bebf =_gfff .Data [_ggaf ]>>_eadb ;};_eceb .Data [_ccff ]=_gfag (_eceb .Data [_ccff ],_bebf |^_eceb .Data [_ccff ],_cagg );
_ccff +=_eceb .BytesPerLine ;_ggaf +=_gfff .BytesPerLine ;};};if _deed {for _edg =0;_edg < _gbadg ;_edg ++{for _afbb =0;_afbb < _ceecg ;_afbb ++{_bebf =_gfag (_gfff .Data [_bbgdd +_afbb ]<<_aeab ,_gfff .Data [_bbgdd +_afbb +1]>>_eadb ,_geef );_eceb .Data [_aecd +_afbb ]=_bebf |^_eceb .Data [_aecd +_afbb ];
};_aecd +=_eceb .BytesPerLine ;_bbgdd +=_gfff .BytesPerLine ;};};if _cbcf {for _edg =0;_edg < _gbadg ;_edg ++{_bebf =_gfff .Data [_egbf ]<<_aeab ;if _bcbg {_bebf =_gfag (_bebf ,_gfff .Data [_egbf +1]>>_eadb ,_geef );};_eceb .Data [_cagd ]=_gfag (_eceb .Data [_cagd ],_bebf |^_eceb .Data [_cagd ],_adeef );
_cagd +=_eceb .BytesPerLine ;_egbf +=_gfff .BytesPerLine ;};};case PixSrcAndNotDst :if _ddfg {for _edg =0;_edg < _gbadg ;_edg ++{if _gcbe ==_deda {_bebf =_gfff .Data [_ggaf ]<<_aeab ;if _cgdgg {_bebf =_gfag (_bebf ,_gfff .Data [_ggaf +1]>>_eadb ,_geef );
};}else {_bebf =_gfff .Data [_ggaf ]>>_eadb ;};_eceb .Data [_ccff ]=_gfag (_eceb .Data [_ccff ],_bebf &^_eceb .Data [_ccff ],_cagg );_ccff +=_eceb .BytesPerLine ;_ggaf +=_gfff .BytesPerLine ;};};if _deed {for _edg =0;_edg < _gbadg ;_edg ++{for _afbb =0;
_afbb < _ceecg ;_afbb ++{_bebf =_gfag (_gfff .Data [_bbgdd +_afbb ]<<_aeab ,_gfff .Data [_bbgdd +_afbb +1]>>_eadb ,_geef );_eceb .Data [_aecd +_afbb ]=_bebf &^_eceb .Data [_aecd +_afbb ];};_aecd +=_eceb .BytesPerLine ;_bbgdd +=_gfff .BytesPerLine ;};};
if _cbcf {for _edg =0;_edg < _gbadg ;_edg ++{_bebf =_gfff .Data [_egbf ]<<_aeab ;if _bcbg {_bebf =_gfag (_bebf ,_gfff .Data [_egbf +1]>>_eadb ,_geef );};_eceb .Data [_cagd ]=_gfag (_eceb .Data [_cagd ],_bebf &^_eceb .Data [_cagd ],_adeef );_cagd +=_eceb .BytesPerLine ;
_egbf +=_gfff .BytesPerLine ;};};case PixNotPixSrcOrDst :if _ddfg {for _edg =0;_edg < _gbadg ;_edg ++{if _gcbe ==_deda {_bebf =_gfff .Data [_ggaf ]<<_aeab ;if _cgdgg {_bebf =_gfag (_bebf ,_gfff .Data [_ggaf +1]>>_eadb ,_geef );};}else {_bebf =_gfff .Data [_ggaf ]>>_eadb ;
};_eceb .Data [_ccff ]=_gfag (_eceb .Data [_ccff ],^(_bebf |_eceb .Data [_ccff ]),_cagg );_ccff +=_eceb .BytesPerLine ;_ggaf +=_gfff .BytesPerLine ;};};if _deed {for _edg =0;_edg < _gbadg ;_edg ++{for _afbb =0;_afbb < _ceecg ;_afbb ++{_bebf =_gfag (_gfff .Data [_bbgdd +_afbb ]<<_aeab ,_gfff .Data [_bbgdd +_afbb +1]>>_eadb ,_geef );
_eceb .Data [_aecd +_afbb ]=^(_bebf |_eceb .Data [_aecd +_afbb ]);};_aecd +=_eceb .BytesPerLine ;_bbgdd +=_gfff .BytesPerLine ;};};if _cbcf {for _edg =0;_edg < _gbadg ;_edg ++{_bebf =_gfff .Data [_egbf ]<<_aeab ;if _bcbg {_bebf =_gfag (_bebf ,_gfff .Data [_egbf +1]>>_eadb ,_geef );
};_eceb .Data [_cagd ]=_gfag (_eceb .Data [_cagd ],^(_bebf |_eceb .Data [_cagd ]),_adeef );_cagd +=_eceb .BytesPerLine ;_egbf +=_gfff .BytesPerLine ;};};case PixNotPixSrcAndDst :if _ddfg {for _edg =0;_edg < _gbadg ;_edg ++{if _gcbe ==_deda {_bebf =_gfff .Data [_ggaf ]<<_aeab ;
if _cgdgg {_bebf =_gfag (_bebf ,_gfff .Data [_ggaf +1]>>_eadb ,_geef );};}else {_bebf =_gfff .Data [_ggaf ]>>_eadb ;};_eceb .Data [_ccff ]=_gfag (_eceb .Data [_ccff ],^(_bebf &_eceb .Data [_ccff ]),_cagg );_ccff +=_eceb .BytesPerLine ;_ggaf +=_gfff .BytesPerLine ;
};};if _deed {for _edg =0;_edg < _gbadg ;_edg ++{for _afbb =0;_afbb < _ceecg ;_afbb ++{_bebf =_gfag (_gfff .Data [_bbgdd +_afbb ]<<_aeab ,_gfff .Data [_bbgdd +_afbb +1]>>_eadb ,_geef );_eceb .Data [_aecd +_afbb ]=^(_bebf &_eceb .Data [_aecd +_afbb ]);};
_aecd +=_eceb .BytesPerLine ;_bbgdd +=_gfff .BytesPerLine ;};};if _cbcf {for _edg =0;_edg < _gbadg ;_edg ++{_bebf =_gfff .Data [_egbf ]<<_aeab ;if _bcbg {_bebf =_gfag (_bebf ,_gfff .Data [_egbf +1]>>_eadb ,_geef );};_eceb .Data [_cagd ]=_gfag (_eceb .Data [_cagd ],^(_bebf &_eceb .Data [_cagd ]),_adeef );
_cagd +=_eceb .BytesPerLine ;_egbf +=_gfff .BytesPerLine ;};};case PixNotPixSrcXorDst :if _ddfg {for _edg =0;_edg < _gbadg ;_edg ++{if _gcbe ==_deda {_bebf =_gfff .Data [_ggaf ]<<_aeab ;if _cgdgg {_bebf =_gfag (_bebf ,_gfff .Data [_ggaf +1]>>_eadb ,_geef );
};}else {_bebf =_gfff .Data [_ggaf ]>>_eadb ;};_eceb .Data [_ccff ]=_gfag (_eceb .Data [_ccff ],^(_bebf ^_eceb .Data [_ccff ]),_cagg );_ccff +=_eceb .BytesPerLine ;_ggaf +=_gfff .BytesPerLine ;};};if _deed {for _edg =0;_edg < _gbadg ;_edg ++{for _afbb =0;
_afbb < _ceecg ;_afbb ++{_bebf =_gfag (_gfff .Data [_bbgdd +_afbb ]<<_aeab ,_gfff .Data [_bbgdd +_afbb +1]>>_eadb ,_geef );_eceb .Data [_aecd +_afbb ]=^(_bebf ^_eceb .Data [_aecd +_afbb ]);};_aecd +=_eceb .BytesPerLine ;_bbgdd +=_gfff .BytesPerLine ;};
};if _cbcf {for _edg =0;_edg < _gbadg ;_edg ++{_bebf =_gfff .Data [_egbf ]<<_aeab ;if _bcbg {_bebf =_gfag (_bebf ,_gfff .Data [_egbf +1]>>_eadb ,_geef );};_eceb .Data [_cagd ]=_gfag (_eceb .Data [_cagd ],^(_bebf ^_eceb .Data [_cagd ]),_adeef );_cagd +=_eceb .BytesPerLine ;
_egbf +=_gfff .BytesPerLine ;};};default:_gf .Log .Debug ("\u004f\u0070e\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0074\u0020\u0070\u0065\u0072\u006d\u0069tt\u0065\u0064",_daeg );return _fb .New ("\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065r\u0061\u0074\u0069\u006f\u006e\u0020\u006eo\u0074\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074\u0065\u0064");
};return nil ;};var _ Gray =&Gray8 {};func ColorAtGray2BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_b .Gray ,error ){_ecge :=y *bytesPerLine +x >>2;if _ecge >=len (data ){return _b .Gray {},_ec .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_gdfd :=data [_ecge ]>>uint (6-(x &3)*2)&3;if len (decode )==2{_gdfd =uint8 (uint32 (LinearInterpolate (float64 (_gdfd ),0,3.0,decode [0],decode [1]))&3);};return _b .Gray {Y :_gdfd *85},nil ;};func ColorAtRGBA32 (x ,y ,width int ,data ,alpha []byte ,decode []float64 )(_b .RGBA ,error ){_bbgg :=y *width +x ;
_aaeb :=3*_bbgg ;if _aaeb +2>=len (data ){return _b .RGBA {},_ec .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_facfb :=uint8 (0xff);if alpha !=nil &&len (alpha )> _bbgg {_facfb =alpha [_bbgg ];};_abcg ,_bggg ,_fdbe :=data [_aaeb ],data [_aaeb +1],data [_aaeb +2];if len (decode )==6{_abcg =uint8 (uint32 (LinearInterpolate (float64 (_abcg ),0,255,decode [0],decode [1]))&0xff);
_bggg =uint8 (uint32 (LinearInterpolate (float64 (_bggg ),0,255,decode [2],decode [3]))&0xff);_fdbe =uint8 (uint32 (LinearInterpolate (float64 (_fdbe ),0,255,decode [4],decode [5]))&0xff);};return _b .RGBA {R :_abcg ,G :_bggg ,B :_fdbe ,A :_facfb },nil ;
};func _afee (_gadd NRGBA ,_bffb Gray ,_acfg _e .Rectangle ){for _daf :=0;_daf < _acfg .Max .X ;_daf ++{for _edba :=0;_edba < _acfg .Max .Y ;_edba ++{_daab :=_ffcd (_gadd .NRGBAAt (_daf ,_edba ));_bffb .SetGray (_daf ,_edba ,_daab );};};};func (_acdc *CMYK32 )At (x ,y int )_b .Color {_gdf ,_ :=_acdc .ColorAt (x ,y );
return _gdf };func (_cdbb *NRGBA32 )Set (x ,y int ,c _b .Color ){_eggd :=y *_cdbb .Width +x ;_ddcdb :=3*_eggd ;if _ddcdb +2>=len (_cdbb .Data ){return ;};_aaa :=_b .NRGBAModel .Convert (c ).(_b .NRGBA );_cdbb .setRGBA (_eggd ,_aaa );};var (_agf =_fe ();
_deb =_bb ();_bf =_fdb (););func _aag (_cdgf *Monochrome ,_eca int ,_gbd []byte )(_fea *Monochrome ,_eef error ){const _feg ="\u0072\u0065d\u0075\u0063\u0065R\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079";if _cdgf ==nil {return nil ,_fb .New ("\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");
};if _eca < 1||_eca > 4{return nil ,_fb .New ("\u006c\u0065\u0076\u0065\u006c\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0069\u006e\u0020\u0073e\u0074\u0020\u007b\u0031\u002c\u0032\u002c\u0033\u002c\u0034\u007d");};if _cdgf .Height <=1{return nil ,_fb .New ("\u0073\u006f\u0075rc\u0065\u0020\u0068\u0065\u0069\u0067\u0068\u0074\u0020m\u0075s\u0074 \u0062e\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0027\u0032\u0027");
};_fea =_ceg (_cdgf .Width /2,_cdgf .Height /2);if _gbd ==nil {_gbd =_fbcd ();};_facg :=_dbf (_cdgf .BytesPerLine ,2*_fea .BytesPerLine );switch _eca {case 1:_eef =_gbeg (_cdgf ,_fea ,_gbd ,_facg );case 2:_eef =_gcg (_cdgf ,_fea ,_gbd ,_facg );case 3:_eef =_bgee (_cdgf ,_fea ,_gbd ,_facg );
case 4:_eef =_dce (_cdgf ,_fea ,_gbd ,_facg );};if _eef !=nil {return nil ,_eef ;};return _fea ,nil ;};func (_bbg *Monochrome )ReduceBinary (factor float64 )(*Monochrome ,error ){_gfc :=_fcbd (uint (factor ));if !IsPowerOf2 (uint (factor )){_gfc ++;};_edae :=make ([]int ,_gfc );
for _egfad :=range _edae {_edae [_egfad ]=4;};_bcba ,_agdc :=_dfg (_bbg ,_edae ...);if _agdc !=nil {return nil ,_agdc ;};return _bcba ,nil ;};type monochromeThresholdConverter struct{Threshold uint8 ;};func _fbcd ()(_bff []byte ){_bff =make ([]byte ,256);
for _dfd :=0;_dfd < 256;_dfd ++{_agg :=byte (_dfd );_bff [_agg ]=(_agg &0x01)|((_agg &0x04)>>1)|((_agg &0x10)>>2)|((_agg &0x40)>>3)|((_agg &0x02)<<3)|((_agg &0x08)<<2)|((_agg &0x20)<<1)|(_agg &0x80);};return _bff ;};func (_aafg *Monochrome )Scale (scale float64 )(*Monochrome ,error ){var _adebf bool ;
_eefb :=scale ;if scale < 1{_eefb =1/scale ;_adebf =true ;};_bfbf :=NextPowerOf2 (uint (_eefb ));if InDelta (float64 (_bfbf ),_eefb ,0.001){if _adebf {return _aafg .ReduceBinary (_eefb );};return _aafg .ExpandBinary (int (_bfbf ));};_cda :=int (_c .RoundToEven (float64 (_aafg .Width )*scale ));
_cedd :=int (_c .RoundToEven (float64 (_aafg .Height )*scale ));return _aafg .ScaleLow (_cda ,_cedd );};type ColorConverter interface{Convert (_cffb _e .Image )(Image ,error );};func (_eae *Gray16 )SetGray (x ,y int ,g _b .Gray ){_efcfc :=(y *_eae .BytesPerLine /2+x )*2;
if _efcfc +1>=len (_eae .Data ){return ;};_eae .Data [_efcfc ]=g .Y ;_eae .Data [_efcfc +1]=g .Y ;};func _fe ()(_cdd [256]uint16 ){for _fed :=0;_fed < 256;_fed ++{if _fed &0x01!=0{_cdd [_fed ]|=0x3;};if _fed &0x02!=0{_cdd [_fed ]|=0xc;};if _fed &0x04!=0{_cdd [_fed ]|=0x30;
};if _fed &0x08!=0{_cdd [_fed ]|=0xc0;};if _fed &0x10!=0{_cdd [_fed ]|=0x300;};if _fed &0x20!=0{_cdd [_fed ]|=0xc00;};if _fed &0x40!=0{_cdd [_fed ]|=0x3000;};if _fed &0x80!=0{_cdd [_fed ]|=0xc000;};};return _cdd ;};var _ _e .Image =&Monochrome {};type SMasker interface{HasAlpha ()bool ;
GetAlpha ()[]byte ;MakeAlpha ();};func (_cedfe *NRGBA32 )Bounds ()_e .Rectangle {return _e .Rectangle {Max :_e .Point {X :_cedfe .Width ,Y :_cedfe .Height }};};func _ggcb (_ccec Gray ,_gdbd NRGBA ,_edga _e .Rectangle ){for _fccf :=0;_fccf < _edga .Max .X ;
_fccf ++{for _eabb :=0;_eabb < _edga .Max .Y ;_eabb ++{_aeec :=_ccec .GrayAt (_fccf ,_eabb );_gdbd .SetNRGBA (_fccf ,_eabb ,_aga (_aeec ));};};};func (_fbd *Monochrome )clearBit (_adac ,_efcf int ){_fbd .Data [_adac ]&=^(0x80>>uint (_efcf &7))};func (_afb *Gray2 )Histogram ()(_bcdc [256]int ){for _cbc :=0;
_cbc < _afb .Width ;_cbc ++{for _dgfd :=0;_dgfd < _afb .Height ;_dgfd ++{_bcdc [_afb .GrayAt (_cbc ,_dgfd ).Y ]++;};};return _bcdc ;};func LinearInterpolate (x ,xmin ,xmax ,ymin ,ymax float64 )float64 {if _c .Abs (xmax -xmin )< 0.000001{return ymin ;};
_eeded :=ymin +(x -xmin )*(ymax -ymin )/(xmax -xmin );return _eeded ;};func (_ccge *RGBA32 )ColorAt (x ,y int )(_b .Color ,error ){return ColorAtRGBA32 (x ,y ,_ccge .Width ,_ccge .Data ,_ccge .Alpha ,_ccge .Decode );};func _gaec (_dgf Gray ,_fddc NRGBA ,_ddg _e .Rectangle ){for _becg :=0;
_becg < _ddg .Max .X ;_becg ++{for _gbdf :=0;_gbdf < _ddg .Max .Y ;_gbdf ++{_afc :=_geg (_fddc .NRGBAAt (_becg ,_gbdf ));_dgf .SetGray (_becg ,_gbdf ,_afc );};};};func (_fbe *Monochrome )setGrayBit (_aaef ,_cdbd int ){_fbe .Data [_aaef ]|=0x80>>uint (_cdbd &7)};
func (_gbbccf *NRGBA64 )Copy ()Image {return &NRGBA64 {ImageBase :_gbbccf .copy ()}};func _adgda (_fdee _b .Color )_b .Color {_fceg :=_b .NRGBAModel .Convert (_fdee ).(_b .NRGBA );return _ccag (_fceg );};func _gbcb (_cdea _b .RGBA )_b .Gray {_daag :=(19595*uint32 (_cdea .R )+38470*uint32 (_cdea .G )+7471*uint32 (_cdea .B )+1<<7)>>16;
return _b .Gray {Y :uint8 (_daag )};};type RasterOperator int ;type Gray4 struct{ImageBase };func _abd (_cag ,_acee Gray ,_egc _e .Rectangle ){for _aggb :=0;_aggb < _egc .Max .X ;_aggb ++{for _bffae :=0;_bffae < _egc .Max .Y ;_bffae ++{_acee .SetGray (_aggb ,_bffae ,_cag .GrayAt (_aggb ,_bffae ));
};};};func (_cbbg *CMYK32 )Base ()*ImageBase {return &_cbbg .ImageBase };func _dabeg (_gagg CMYK ,_agee NRGBA ,_ceac _e .Rectangle ){for _ede :=0;_ede < _ceac .Max .X ;_ede ++{for _adeefb :=0;_adeefb < _ceac .Max .Y ;_adeefb ++{_adbc :=_gagg .CMYKAt (_ede ,_adeefb );
_agee .SetNRGBA (_ede ,_adeefb ,_bdg (_adbc ));};};};var _ NRGBA =&NRGBA16 {};func (_aae monochromeModel )Convert (c _b .Color )_b .Color {_fcea :=_b .GrayModel .Convert (c ).(_b .Gray );return _fge (_fcea ,_aae );};const (PixSrc RasterOperator =0xc;PixDst RasterOperator =0xa;
PixNotSrc RasterOperator =0x3;PixNotDst RasterOperator =0x5;PixClr RasterOperator =0x0;PixSet RasterOperator =0xf;PixSrcOrDst RasterOperator =0xe;PixSrcAndDst RasterOperator =0x8;PixSrcXorDst RasterOperator =0x6;PixNotSrcOrDst RasterOperator =0xb;PixNotSrcAndDst RasterOperator =0x2;
PixSrcOrNotDst RasterOperator =0xd;PixSrcAndNotDst RasterOperator =0x4;PixNotPixSrcOrDst RasterOperator =0x1;PixNotPixSrcAndDst RasterOperator =0x7;PixNotPixSrcXorDst RasterOperator =0x9;PixPaint =PixSrcOrDst ;PixSubtract =PixNotSrcAndDst ;PixMask =PixSrcAndDst ;
);func _faca (_agfg _b .NRGBA64 )_b .RGBA {_cdcd ,_bfgcb ,_feaf ,_gdbfb :=_agfg .RGBA ();return _b .RGBA {R :uint8 (_cdcd >>8),G :uint8 (_bfgcb >>8),B :uint8 (_feaf >>8),A :uint8 (_gdbfb >>8)};};func FromGoImage (i _e .Image )(Image ,error ){switch _ggbb :=i .(type ){case Image :return _ggbb .Copy (),nil ;
case Gray :return GrayConverter .Convert (i );case *_e .Gray16 :return Gray16Converter .Convert (i );case CMYK :return CMYKConverter .Convert (i );case *_e .NRGBA64 :return NRGBA64Converter .Convert (i );default:return NRGBAConverter .Convert (i );};};
var ErrInvalidImage =_fb .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
func _gbaf (){for _aggd :=0;_aggd < 256;_aggd ++{_cgdg [_aggd ]=uint8 (_aggd &0x1)+(uint8 (_aggd >>1)&0x1)+(uint8 (_aggd >>2)&0x1)+(uint8 (_aggd >>3)&0x1)+(uint8 (_aggd >>4)&0x1)+(uint8 (_aggd >>5)&0x1)+(uint8 (_aggd >>6)&0x1)+(uint8 (_aggd >>7)&0x1);};
};func _aga (_afgg _b .Gray )_b .NRGBA {return _b .NRGBA {R :_afgg .Y ,G :_afgg .Y ,B :_afgg .Y ,A :0xff}};func _gfgg (_caca ,_fgab NRGBA ,_debb _e .Rectangle ){for _ebce :=0;_ebce < _debb .Max .X ;_ebce ++{for _gfb :=0;_gfb < _debb .Max .Y ;_gfb ++{_fgab .SetNRGBA (_ebce ,_gfb ,_caca .NRGBAAt (_ebce ,_gfb ));
};};};func (_dbga *NRGBA32 )ColorAt (x ,y int )(_b .Color ,error ){return ColorAtNRGBA32 (x ,y ,_dbga .Width ,_dbga .Data ,_dbga .Alpha ,_dbga .Decode );};func _dbaa (_fcgeb _e .Image )(Image ,error ){if _eebd ,_fcae :=_fcgeb .(*NRGBA32 );_fcae {return _eebd .Copy (),nil ;
};_gcd ,_fdeg ,_eacdg :=_ecfef (_fcgeb ,1);_cfcf ,_gageg :=NewImage (_gcd .Max .X ,_gcd .Max .Y ,8,3,nil ,_eacdg ,nil );if _gageg !=nil {return nil ,_gageg ;};_badc (_fcgeb ,_cfcf ,_gcd );if len (_eacdg )!=0&&!_fdeg {if _ecfe :=_dceb (_eacdg ,_cfcf );_ecfe !=nil {return nil ,_ecfe ;
};};return _cfcf ,nil ;};func (_ffae *Gray4 )At (x ,y int )_b .Color {_gabf ,_ :=_ffae .ColorAt (x ,y );return _gabf };func (_dfc *Gray2 )Validate ()error {if len (_dfc .Data )!=_dfc .Height *_dfc .BytesPerLine {return ErrInvalidImage ;};return nil ;};
func (_ddgb *ImageBase )MakeAlpha (){_ddgb .newAlpha ()};func (_gaecg *NRGBA32 )Validate ()error {if len (_gaecg .Data )!=3*_gaecg .Width *_gaecg .Height {return _fb .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};func ColorAtCMYK (x ,y ,width int ,data []byte ,decode []float64 )(_b .CMYK ,error ){_cddb :=4*(y *width +x );if _cddb +3>=len (data ){return _b .CMYK {},_ec .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};C :=data [_cddb ]&0xff;M :=data [_cddb +1]&0xff;Y :=data [_cddb +2]&0xff;K :=data [_cddb +3]&0xff;if len (decode )==8{C =uint8 (uint32 (LinearInterpolate (float64 (C ),0,255,decode [0],decode [1]))&0xff);M =uint8 (uint32 (LinearInterpolate (float64 (M ),0,255,decode [2],decode [3]))&0xff);
Y =uint8 (uint32 (LinearInterpolate (float64 (Y ),0,255,decode [4],decode [5]))&0xff);K =uint8 (uint32 (LinearInterpolate (float64 (K ),0,255,decode [6],decode [7]))&0xff);};return _b .CMYK {C :C ,M :M ,Y :Y ,K :K },nil ;};func (_agdg *NRGBA32 )At (x ,y int )_b .Color {_fecf ,_ :=_agdg .ColorAt (x ,y );
return _fecf };func (_cba *Gray2 )Set (x ,y int ,c _b .Color ){if x >=_cba .Width ||y >=_cba .Height {return ;};_fga :=Gray2Model .Convert (c ).(_b .Gray );_fbcdg :=y *_cba .BytesPerLine ;_edb :=_fbcdg +(x >>2);_aea :=_fga .Y >>6;_cba .Data [_edb ]=(_cba .Data [_edb ]&(^(0xc0>>uint (2*((x )&3)))))|(_aea <<uint (6-2*(x &3)));
};func _aebc (_aagc RGBA ,_edacd NRGBA ,_cedg _e .Rectangle ){for _dadb :=0;_dadb < _cedg .Max .X ;_dadb ++{for _beea :=0;_beea < _cedg .Max .Y ;_beea ++{_faaf :=_aagc .RGBAAt (_dadb ,_beea );_edacd .SetNRGBA (_dadb ,_beea ,_cfee (_faaf ));};};};var _ Image =&CMYK32 {};
func (_egaf *NRGBA32 )setRGBA (_gdda int ,_daba _b .NRGBA ){_defc :=3*_gdda ;_egaf .Data [_defc ]=_daba .R ;_egaf .Data [_defc +1]=_daba .G ;_egaf .Data [_defc +2]=_daba .B ;if _gdda < len (_egaf .Alpha ){_egaf .Alpha [_gdda ]=_daba .A ;};};func (_gggg *Monochrome )setIndexedBit (_eaac int ){_gggg .Data [(_eaac >>3)]|=0x80>>uint (_eaac &7)};
func (_eaca *NRGBA64 )Validate ()error {if len (_eaca .Data )!=3*2*_eaca .Width *_eaca .Height {return _fb .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};func (_egdd *Gray2 )Copy ()Image {return &Gray2 {ImageBase :_egdd .copy ()}};var _ Image =&NRGBA32 {};func _abbb (_gdag _b .NRGBA64 )_b .Gray {var _ecc _b .NRGBA64 ;if _gdag ==_ecc {return _b .Gray {Y :0xff};};_gdca ,_bgc ,_aedg ,_ :=_gdag .RGBA ();
_agbg :=(19595*_gdca +38470*_bgc +7471*_aedg +1<<15)>>24;return _b .Gray {Y :uint8 (_agbg )};};func _dbf (_bdefa int ,_gffeb int )int {if _bdefa < _gffeb {return _bdefa ;};return _gffeb ;};var _ Gray =&Gray4 {};func (_fcbag *NRGBA16 )At (x ,y int )_b .Color {_gdfa ,_ :=_fcbag .ColorAt (x ,y );
return _gdfa };func (_fffe *NRGBA64 )setNRGBA64 (_adag int ,_gabec _b .NRGBA64 ,_cfaf int ){_fffe .Data [_adag ]=uint8 (_gabec .R >>8);_fffe .Data [_adag +1]=uint8 (_gabec .R &0xff);_fffe .Data [_adag +2]=uint8 (_gabec .G >>8);_fffe .Data [_adag +3]=uint8 (_gabec .G &0xff);
_fffe .Data [_adag +4]=uint8 (_gabec .B >>8);_fffe .Data [_adag +5]=uint8 (_gabec .B &0xff);if _cfaf +1< len (_fffe .Alpha ){_fffe .Alpha [_cfaf ]=uint8 (_gabec .A >>8);_fffe .Alpha [_cfaf +1]=uint8 (_gabec .A &0xff);};};func (_cfdg *NRGBA64 )At (x ,y int )_b .Color {_ggage ,_ :=_cfdg .ColorAt (x ,y );
return _ggage };func _bdgg (_fcgebg _e .Image ,_cbba Image ,_eecf _e .Rectangle ){if _ffadg ,_dace :=_fcgebg .(SMasker );_dace &&_ffadg .HasAlpha (){_cbba .(SMasker ).MakeAlpha ();};switch _acdd :=_fcgebg .(type ){case Gray :_egcea (_acdd ,_cbba .(RGBA ),_eecf );
case NRGBA :_fbde (_acdd ,_cbba .(RGBA ),_eecf );case *_e .NYCbCrA :_bccb (_acdd ,_cbba .(RGBA ),_eecf );case CMYK :_abeac (_acdd ,_cbba .(RGBA ),_eecf );case RGBA :_fbbdd (_acdd ,_cbba .(RGBA ),_eecf );case nrgba64 :_dead (_acdd ,_cbba .(RGBA ),_eecf );
default:_agc (_fcgebg ,_cbba ,_eecf );};};const (_deda shift =iota ;_gegb ;);type CMYK interface{CMYKAt (_adee ,_fgc int )_b .CMYK ;SetCMYK (_aggf ,_cbd int ,_bda _b .CMYK );};func (_gbb *CMYK32 )ColorModel ()_b .Model {return _b .CMYKModel };func AddDataPadding (width ,height ,bitsPerComponent ,colorComponents int ,data []byte )([]byte ,error ){_dcf :=BytesPerLine (width ,bitsPerComponent ,colorComponents );
if _dcf ==width *colorComponents *bitsPerComponent /8{return data ,nil ;};_cafe :=width *colorComponents *bitsPerComponent ;_gbf :=_dcf *8;_fdef :=8-(_gbf -_cafe );_fccbc :=_d .NewReader (data );_feca :=_dcf -1;_cdff :=make ([]byte ,_feca );_aaee :=make ([]byte ,height *_dcf );
_dcea :=_d .NewWriterMSB (_aaee );var _agcg uint64 ;var _eegb error ;for _fffd :=0;_fffd < height ;_fffd ++{_ ,_eegb =_fccbc .Read (_cdff );if _eegb !=nil {return nil ,_eegb ;};_ ,_eegb =_dcea .Write (_cdff );if _eegb !=nil {return nil ,_eegb ;};_agcg ,_eegb =_fccbc .ReadBits (byte (_fdef ));
if _eegb !=nil {return nil ,_eegb ;};_ ,_eegb =_dcea .WriteBits (_agcg ,_fdef );if _eegb !=nil {return nil ,_eegb ;};_dcea .FinishByte ();};return _aaee ,nil ;};func (_efg *Gray4 )Set (x ,y int ,c _b .Color ){if x >=_efg .Width ||y >=_efg .Height {return ;
};_bdfe :=Gray4Model .Convert (c ).(_b .Gray );_efg .setGray (x ,y ,_bdfe );};type monochromeModel uint8 ;func (_edbg *NRGBA32 )Copy ()Image {return &NRGBA32 {ImageBase :_edbg .copy ()}};func MonochromeThresholdConverter (threshold uint8 )ColorConverter {return &monochromeThresholdConverter {Threshold :threshold };
};func _aefd (_ddbfb int ,_dedc int )error {return _ec .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",_ddbfb ,_dedc );
};var _cgdg [256]uint8 ;func (_fddd *Gray16 )Bounds ()_e .Rectangle {return _e .Rectangle {Max :_e .Point {X :_fddd .Width ,Y :_fddd .Height }};};func (_efd *Gray8 )Validate ()error {if len (_efd .Data )!=_efd .Height *_efd .BytesPerLine {return ErrInvalidImage ;
};return nil ;};func (_aeae *NRGBA16 )Copy ()Image {return &NRGBA16 {ImageBase :_aeae .copy ()}};var _ _e .Image =&NRGBA32 {};func (_gdbff *NRGBA16 )Bounds ()_e .Rectangle {return _e .Rectangle {Max :_e .Point {X :_gdbff .Width ,Y :_gdbff .Height }};};
func (_fadg *Monochrome )getBit (_ebbd ,_baec int )uint8 {return _fadg .Data [_ebbd +(_baec >>3)]>>uint (7-(_baec &7))&1;};func (_ffcc *Monochrome )Base ()*ImageBase {return &_ffcc .ImageBase };func (_gcgb *Gray4 )Validate ()error {if len (_gcgb .Data )!=_gcgb .Height *_gcgb .BytesPerLine {return ErrInvalidImage ;
};return nil ;};func (_cge *Gray2 )Bounds ()_e .Rectangle {return _e .Rectangle {Max :_e .Point {X :_cge .Width ,Y :_cge .Height }};};func _abeac (_agfe CMYK ,_feafe RGBA ,_gcdg _e .Rectangle ){for _acce :=0;_acce < _gcdg .Max .X ;_acce ++{for _cabd :=0;
_cabd < _gcdg .Max .Y ;_cabd ++{_eefd :=_agfe .CMYKAt (_acce ,_cabd );_feafe .SetRGBA (_acce ,_cabd ,_dabc (_eefd ));};};};func _egcea (_cgac Gray ,_fcgg RGBA ,_bfcg _e .Rectangle ){for _edddb :=0;_edddb < _bfcg .Max .X ;_edddb ++{for _egfab :=0;_egfab < _bfcg .Max .Y ;
_egfab ++{_cbffa :=_cgac .GrayAt (_edddb ,_egfab );_fcgg .SetRGBA (_edddb ,_egfab ,_gaf (_cbffa ));};};};type Monochrome struct{ImageBase ;ModelThreshold uint8 ;};func _abda (_cddf _e .Image )(Image ,error ){if _dfaa ,_beca :=_cddf .(*RGBA32 );_beca {return _dfaa .Copy (),nil ;
};_gdea ,_ccbb ,_ccad :=_ecfef (_cddf ,1);_aceb :=&RGBA32 {ImageBase :NewImageBase (_gdea .Max .X ,_gdea .Max .Y ,8,3,nil ,_ccad ,nil )};_bdgg (_cddf ,_aceb ,_gdea );if len (_ccad )!=0&&!_ccbb {if _edbac :=_dceb (_ccad ,_aceb );_edbac !=nil {return nil ,_edbac ;
};};return _aceb ,nil ;};func _gaac (_gaba *_e .NYCbCrA ,_dfa NRGBA ,_cedab _e .Rectangle ){for _cffbdb :=0;_cffbdb < _cedab .Max .X ;_cffbdb ++{for _gdga :=0;_gdga < _cedab .Max .Y ;_gdga ++{_aabg :=_gaba .NYCbCrAAt (_cffbdb ,_gdga );_dfa .SetNRGBA (_cffbdb ,_gdga ,_agab (_aabg ));
};};};func ColorAtGray16BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_b .Gray16 ,error ){_cedf :=(y *bytesPerLine /2+x )*2;if _cedf +1>=len (data ){return _b .Gray16 {},_ec .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_ceebc :=uint16 (data [_cedf ])<<8|uint16 (data [_cedf +1]);if len (decode )==2{_ceebc =uint16 (uint64 (LinearInterpolate (float64 (_ceebc ),0,65535,decode [0],decode [1])));};return _b .Gray16 {Y :_ceebc },nil ;};func _bgad (_gcfgd uint8 )bool {if _gcfgd ==0||_gcfgd ==255{return true ;
};return false ;};func _gb (_fa ,_cbb *Monochrome )(_dc error ){_ggf :=_cbb .BytesPerLine ;_ff :=_fa .BytesPerLine ;var (_dd byte ;_gca uint16 ;_dg ,_bce ,_ffc ,_fae ,_fd int ;);for _ffc =0;_ffc < _cbb .Height ;_ffc ++{_dg =_ffc *_ggf ;_bce =2*_ffc *_ff ;
for _fae =0;_fae < _ggf ;_fae ++{_dd =_cbb .Data [_dg +_fae ];_gca =_agf [_dd ];_fd =_bce +_fae *2;if _fa .BytesPerLine !=_cbb .BytesPerLine *2&&(_fae +1)*2> _fa .BytesPerLine {_dc =_fa .setByte (_fd ,byte (_gca >>8));}else {_dc =_fa .setTwoBytes (_fd ,_gca );
};if _dc !=nil {return _dc ;};};for _fae =0;_fae < _ff ;_fae ++{_fd =_bce +_ff +_fae ;_dd =_fa .Data [_bce +_fae ];if _dc =_fa .setByte (_fd ,_dd );_dc !=nil {return _dc ;};};};return nil ;};type NRGBA32 struct{ImageBase };func _bbc (_bbgde _e .Image )(Image ,error ){if _eegdg ,_cgee :=_bbgde .(*NRGBA16 );
_cgee {return _eegdg .Copy (),nil ;};_ggeg :=_bbgde .Bounds ();_aaff ,_feab :=NewImage (_ggeg .Max .X ,_ggeg .Max .Y ,4,3,nil ,nil ,nil );if _feab !=nil {return nil ,_feab ;};_badc (_bbgde ,_aaff ,_ggeg );return _aaff ,nil ;};func (_dgcc *NRGBA16 )Set (x ,y int ,c _b .Color ){_def :=y *_dgcc .BytesPerLine +x *3/2;
if _def +1>=len (_dgcc .Data ){return ;};_cbac :=NRGBA16Model .Convert (c ).(_b .NRGBA );_dgcc .setNRGBA (x ,y ,_def ,_cbac );};var _ Image =&Gray2 {};var _ _e .Image =&Gray4 {};func (_beacc *Monochrome )At (x ,y int )_b .Color {_ggg ,_ :=_beacc .ColorAt (x ,y );
return _ggg };func _gdaa (_ggb ,_ffa CMYK ,_cce _e .Rectangle ){for _eafc :=0;_eafc < _cce .Max .X ;_eafc ++{for _bgdg :=0;_bgdg < _cce .Max .Y ;_bgdg ++{_ffa .SetCMYK (_eafc ,_bgdg ,_ggb .CMYKAt (_eafc ,_bgdg ));};};};func (_aede *ImageBase )setTwoBytes (_bcbeg int ,_becf uint16 )error {if _bcbeg +1> len (_aede .Data )-1{return _fb .New ("\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_aede .Data [_bcbeg ]=byte ((_becf &0xff00)>>8);_aede .Data [_bcbeg +1]=byte (_becf &0xff);return nil ;};func _dff (_baeg *Monochrome ,_aadcb ,_fbef int ,_gaag ,_bceb int ,_beed RasterOperator ,_ecda *Monochrome ,_cafa ,_gbdg int )error {var _bcgf ,_affcf ,_fgfc ,_daee int ;
if _aadcb < 0{_cafa -=_aadcb ;_gaag +=_aadcb ;_aadcb =0;};if _cafa < 0{_aadcb -=_cafa ;_gaag +=_cafa ;_cafa =0;};_bcgf =_aadcb +_gaag -_baeg .Width ;if _bcgf > 0{_gaag -=_bcgf ;};_affcf =_cafa +_gaag -_ecda .Width ;if _affcf > 0{_gaag -=_affcf ;};if _fbef < 0{_gbdg -=_fbef ;
_bceb +=_fbef ;_fbef =0;};if _gbdg < 0{_fbef -=_gbdg ;_bceb +=_gbdg ;_gbdg =0;};_fgfc =_fbef +_bceb -_baeg .Height ;if _fgfc > 0{_bceb -=_fgfc ;};_daee =_gbdg +_bceb -_ecda .Height ;if _daee > 0{_bceb -=_daee ;};if _gaag <=0||_bceb <=0{return nil ;};var _cbge error ;
switch {case _aadcb &7==0&&_cafa &7==0:_cbge =_fefb (_baeg ,_aadcb ,_fbef ,_gaag ,_bceb ,_beed ,_ecda ,_cafa ,_gbdg );case _aadcb &7==_cafa &7:_cbge =_gdge (_baeg ,_aadcb ,_fbef ,_gaag ,_bceb ,_beed ,_ecda ,_cafa ,_gbdg );default:_cbge =_cgfed (_baeg ,_aadcb ,_fbef ,_gaag ,_bceb ,_beed ,_ecda ,_cafa ,_gbdg );
};if _cbge !=nil {return _cbge ;};return nil ;};func (_gcgf *Monochrome )Validate ()error {if len (_gcgf .Data )!=_gcgf .Height *_gcgf .BytesPerLine {return ErrInvalidImage ;};return nil ;};func (_cdfe *NRGBA16 )NRGBAAt (x ,y int )_b .NRGBA {_aded ,_ :=ColorAtNRGBA16 (x ,y ,_cdfe .Width ,_cdfe .BytesPerLine ,_cdfe .Data ,_cdfe .Alpha ,_cdfe .Decode );
return _aded ;};func _ceg (_efb ,_fbce int )*Monochrome {return &Monochrome {ImageBase :NewImageBase (_efb ,_fbce ,1,1,nil ,nil ,nil ),ModelThreshold :0x0f};};func (_adec *Gray8 )Copy ()Image {return &Gray8 {ImageBase :_adec .copy ()}};func (_facc *Monochrome )ColorModel ()_b .Model {return MonochromeModel (_facc .ModelThreshold )};
func (_dbaca *RGBA32 )At (x ,y int )_b .Color {_edcg ,_ :=_dbaca .ColorAt (x ,y );return _edcg };func _ecfef (_ddbag _e .Image ,_edac int )(_e .Rectangle ,bool ,[]byte ){_fege :=_ddbag .Bounds ();var (_ebdeb bool ;_bfba []byte ;);switch _afda :=_ddbag .(type ){case SMasker :_ebdeb =_afda .HasAlpha ();
case NRGBA ,RGBA ,*_e .RGBA64 ,nrgba64 ,*_e .NYCbCrA :_bfba =make ([]byte ,_fege .Max .X *_fege .Max .Y *_edac );case *_e .Paletted :if !_afda .Opaque (){_bfba =make ([]byte ,_fege .Max .X *_fege .Max .Y *_edac );};};return _fege ,_ebdeb ,_bfba ;};func _gbad (_cgb _b .RGBA )_b .CMYK {_feb ,_cbff ,_adeb ,_fgd :=_b .RGBToCMYK (_cgb .R ,_cgb .G ,_cgb .B );
return _b .CMYK {C :_feb ,M :_cbff ,Y :_adeb ,K :_fgd };};type ImageBase struct{Width ,Height int ;BitsPerComponent ,ColorComponents int ;Data ,Alpha []byte ;Decode []float64 ;BytesPerLine int ;};func (_egae *Gray4 )Base ()*ImageBase {return &_egae .ImageBase };
func (_fcce *ImageBase )setFourBytes (_ffbf int ,_gdac uint32 )error {if _ffbf +3> len (_fcce .Data )-1{return _ec .Errorf ("\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_ffbf );
};_fcce .Data [_ffbf ]=byte ((_gdac &0xff000000)>>24);_fcce .Data [_ffbf +1]=byte ((_gdac &0xff0000)>>16);_fcce .Data [_ffbf +2]=byte ((_gdac &0xff00)>>8);_fcce .Data [_ffbf +3]=byte (_gdac &0xff);return nil ;};func _fbbdd (_bfaa ,_agbb RGBA ,_bcaf _e .Rectangle ){for _fgde :=0;
_fgde < _bcaf .Max .X ;_fgde ++{for _edfg :=0;_edfg < _bcaf .Max .Y ;_edfg ++{_agbb .SetRGBA (_fgde ,_edfg ,_bfaa .RGBAAt (_fgde ,_edfg ));};};};func _fbca (_gegda nrgba64 ,_bfe NRGBA ,_ecag _e .Rectangle ){for _bgefd :=0;_bgefd < _ecag .Max .X ;_bgefd ++{for _faef :=0;
_faef < _ecag .Max .Y ;_faef ++{_aecdc :=_gegda .NRGBA64At (_bgefd ,_faef );_bfe .SetNRGBA (_bgefd ,_faef ,_aeg (_aecdc ));};};};var _ Gray =&Monochrome {};func ColorAtNRGBA (x ,y ,width ,bytesPerLine ,bitsPerColor int ,data ,alpha []byte ,decode []float64 )(_b .Color ,error ){switch bitsPerColor {case 4:return ColorAtNRGBA16 (x ,y ,width ,bytesPerLine ,data ,alpha ,decode );
case 8:return ColorAtNRGBA32 (x ,y ,width ,data ,alpha ,decode );case 16:return ColorAtNRGBA64 (x ,y ,width ,data ,alpha ,decode );default:return nil ,_ec .Errorf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064 \u0072\u0067\u0062\u0020b\u0069\u0074\u0073\u0020\u0070\u0065\u0072\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u0061\u006d\u006f\u0075\u006e\u0074\u003a\u0020\u0027\u0025\u0064\u0027",bitsPerColor );
};};type Gray8 struct{ImageBase };func (_egbc *Gray2 )At (x ,y int )_b .Color {_bffe ,_ :=_egbc .ColorAt (x ,y );return _bffe };var _ _e .Image =&RGBA32 {};func (_cbe *NRGBA64 )Bounds ()_e .Rectangle {return _e .Rectangle {Max :_e .Point {X :_cbe .Width ,Y :_cbe .Height }};
};var _ Image =&Gray4 {};type NRGBA interface{NRGBAAt (_ddef ,_cafeb int )_b .NRGBA ;SetNRGBA (_ebbf ,_aebe int ,_fbfc _b .NRGBA );};func (_agga *Gray2 )ColorAt (x ,y int )(_b .Color ,error ){return ColorAtGray2BPC (x ,y ,_agga .BytesPerLine ,_agga .Data ,_agga .Decode );
};func (_gde *ImageBase )setByte (_aeb int ,_eedfb byte )error {if _aeb > len (_gde .Data )-1{return _fb .New ("\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");};_gde .Data [_aeb ]=_eedfb ;return nil ;};var _ _e .Image =&NRGBA64 {};
func (_cbfg *Gray4 )SetGray (x ,y int ,g _b .Gray ){if x >=_cbfg .Width ||y >=_cbfg .Height {return ;};g =_cdag (g );_cbfg .setGray (x ,y ,g );};func (_adaa *Gray16 )Copy ()Image {return &Gray16 {ImageBase :_adaa .copy ()}};func (_bbdb *ImageBase )getByte (_feae int )(byte ,error ){if _feae > len (_bbdb .Data )-1||_feae < 0{return 0,_ec .Errorf ("\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",_feae );
};return _bbdb .Data [_feae ],nil ;};func (_gcb *Monochrome )AddPadding ()(_bcdf error ){if _fbb :=((_gcb .Width *_gcb .Height )+7)>>3;len (_gcb .Data )< _fbb {return _ec .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064a\u0074\u0061\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u003a\u0020\u0027\u0025\u0064\u0027\u002e\u0020\u0054\u0068\u0065\u0020\u0064\u0061t\u0061\u0020s\u0068\u006fu\u006c\u0064\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 l\u0065\u0061\u0073\u0074\u003a\u0020\u0027\u0025\u0064'\u0020\u0062\u0079\u0074\u0065\u0073",len (_gcb .Data ),_fbb );
};_agd :=_gcb .Width %8;if _agd ==0{return nil ;};_acbe :=_gcb .Width /8;_bfa :=_d .NewReader (_gcb .Data );_adgdc :=make ([]byte ,_gcb .Height *_gcb .BytesPerLine );_bgfa :=_d .NewWriterMSB (_adgdc );_ccce :=make ([]byte ,_acbe );var (_dea int ;_gabb uint64 ;
);for _dea =0;_dea < _gcb .Height ;_dea ++{if _ ,_bcdf =_bfa .Read (_ccce );_bcdf !=nil {return _bcdf ;};if _ ,_bcdf =_bgfa .Write (_ccce );_bcdf !=nil {return _bcdf ;};if _gabb ,_bcdf =_bfa .ReadBits (byte (_agd ));_bcdf !=nil {return _bcdf ;};if _bcdf =_bgfa .WriteByte (byte (_gabb )<<uint (8-_agd ));
_bcdf !=nil {return _bcdf ;};};_gcb .Data =_bgfa .Data ();return nil ;};func MonochromeModel (threshold uint8 )_b .Model {return monochromeModel (threshold )};type RGBA interface{RGBAAt (_gfegg ,_fgcb int )_b .RGBA ;SetRGBA (_dede ,_fbbc int ,_aabe _b .RGBA );
};func (_aeac *NRGBA16 )Base ()*ImageBase {return &_aeac .ImageBase };func NewImage (width ,height ,bitsPerComponent ,colorComponents int ,data ,alpha []byte ,decode []float64 )(Image ,error ){_gfea :=NewImageBase (width ,height ,bitsPerComponent ,colorComponents ,data ,alpha ,decode );
var _caaa Image ;switch colorComponents {case 1:switch bitsPerComponent {case 1:_caaa =&Monochrome {ImageBase :_gfea ,ModelThreshold :0x0f};case 2:_caaa =&Gray2 {ImageBase :_gfea };case 4:_caaa =&Gray4 {ImageBase :_gfea };case 8:_caaa =&Gray8 {ImageBase :_gfea };
case 16:_caaa =&Gray16 {ImageBase :_gfea };};case 3:switch bitsPerComponent {case 4:_caaa =&NRGBA16 {ImageBase :_gfea };case 8:_caaa =&NRGBA32 {ImageBase :_gfea };case 16:_caaa =&NRGBA64 {ImageBase :_gfea };};case 4:_caaa =&CMYK32 {ImageBase :_gfea };};
if _caaa ==nil {return nil ,ErrInvalidImage ;};return _caaa ,nil ;};func GrayHistogram (g Gray )(_eaff [256]int ){switch _gfgb :=g .(type ){case Histogramer :return _gfgb .Histogram ();case _e .Image :_fbggf :=_gfgb .Bounds ();for _bfdf :=0;_bfdf < _fbggf .Max .X ;
_bfdf ++{for _ccfc :=0;_ccfc < _fbggf .Max .Y ;_ccfc ++{_eaff [g .GrayAt (_bfdf ,_ccfc ).Y ]++;};};return _eaff ;default:return [256]int {};};};var _ NRGBA =&NRGBA32 {};type NRGBA16 struct{ImageBase };func (_dgbb *RGBA32 )setRGBA (_adacd int ,_accd _b .RGBA ){_cbae :=3*_adacd ;
_dgbb .Data [_cbae ]=_accd .R ;_dgbb .Data [_cbae +1]=_accd .G ;_dgbb .Data [_cbae +2]=_accd .B ;if _adacd < len (_dgbb .Alpha ){_dgbb .Alpha [_adacd ]=_accd .A ;};};func RasterOperation (dest *Monochrome ,dx ,dy ,dw ,dh int ,op RasterOperator ,src *Monochrome ,sx ,sy int )error {return _gcfe (dest ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );
};func (_gbddd *RGBA32 )Validate ()error {if len (_gbddd .Data )!=3*_gbddd .Width *_gbddd .Height {return _fb .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};func _gfag (_eaed ,_bdec ,_aacc byte )byte {return (_eaed &^(_aacc ))|(_bdec &_aacc )};func (_agea *NRGBA64 )SetNRGBA64 (x ,y int ,c _b .NRGBA64 ){_bgce :=(y *_agea .Width +x )*2;_fgac :=_bgce *3;if _fgac +5>=len (_agea .Data ){return ;
};_agea .setNRGBA64 (_fgac ,c ,_bgce );};func NextPowerOf2 (n uint )uint {if IsPowerOf2 (n ){return n ;};return 1<<(_fcbd (n )+1);};func (_faac *Monochrome )ExpandBinary (factor int )(*Monochrome ,error ){if !IsPowerOf2 (uint (factor )){return nil ,_ec .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0065\u0078\u0070\u0061\u006e\u0064\u0020b\u0069n\u0061\u0072\u0079\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020\u0025\u0064",factor );
};return _cb (_faac ,factor );};func _aeg (_gcfg _b .NRGBA64 )_b .NRGBA {return _b .NRGBA {R :uint8 (_gcfg .R >>8),G :uint8 (_gcfg .G >>8),B :uint8 (_gcfg .B >>8),A :uint8 (_gcfg .A >>8)};};type shift int ;func (_ega *Monochrome )Bounds ()_e .Rectangle {return _e .Rectangle {Max :_e .Point {X :_ega .Width ,Y :_ega .Height }};
};func _ggcf (_facgb _e .Image )(Image ,error ){if _gcag ,_gbde :=_facgb .(*Gray4 );_gbde {return _gcag .Copy (),nil ;};_bbfc :=_facgb .Bounds ();_gbgd ,_dcbe :=NewImage (_bbfc .Max .X ,_bbfc .Max .Y ,4,1,nil ,nil ,nil );if _dcbe !=nil {return nil ,_dcbe ;
};_eafa (_facgb ,_gbgd ,_bbfc );return _gbgd ,nil ;};func (_bcfb *Gray8 )Histogram ()(_fdad [256]int ){for _afdf :=0;_afdf < len (_bcfb .Data );_afdf ++{_fdad [_bcfb .Data [_afdf ]]++;};return _fdad ;};func _fgda (_dcfb *_e .Gray ,_adgga uint8 )*_e .Gray {_bagf :=_dcfb .Bounds ();
_bceg :=_e .NewGray (_bagf );for _bcfe :=0;_bcfe < _bagf .Dx ();_bcfe ++{for _gaca :=0;_gaca < _bagf .Dy ();_gaca ++{_cdgfd :=_dcfb .GrayAt (_bcfe ,_gaca );_bceg .SetGray (_bcfe ,_gaca ,_b .Gray {Y :_fagc (_cdgfd .Y ,_adgga )});};};return _bceg ;};func _fee (_cgdaf _b .NRGBA )_b .RGBA {_ddea ,_gebd ,_affc ,_ebg :=_cgdaf .RGBA ();
return _b .RGBA {R :uint8 (_ddea >>8),G :uint8 (_gebd >>8),B :uint8 (_affc >>8),A :uint8 (_ebg >>8)};};func (_fec *Monochrome )Copy ()Image {return &Monochrome {ImageBase :_fec .ImageBase .copy (),ModelThreshold :_fec .ModelThreshold };};func _gage (_cbgc ,_dgdc int ,_dab []byte )*Monochrome {_dac :=_ceg (_cbgc ,_dgdc );
_dac .Data =_dab ;return _dac ;};func (_ageb *Gray2 )Base ()*ImageBase {return &_ageb .ImageBase };func ImgToBinary (i _e .Image ,threshold uint8 )*_e .Gray {switch _aefgg :=i .(type ){case *_e .Gray :if _aagcb (_aefgg ){return _aefgg ;};return _fgda (_aefgg ,threshold );
case *_e .Gray16 :return _ceef (_aefgg ,threshold );default:return _eadg (_aefgg ,threshold );};};var _ Image =&Gray8 {};func (_eaab *NRGBA16 )SetNRGBA (x ,y int ,c _b .NRGBA ){_cegbd :=y *_eaab .BytesPerLine +x *3/2;if _cegbd +1>=len (_eaab .Data ){return ;
};c =_ccag (c );_eaab .setNRGBA (x ,y ,_cegbd ,c );};type nrgba64 interface{NRGBA64At (_ffba ,_cccbf int )_b .NRGBA64 ;SetNRGBA64 (_abf ,_bfdg int ,_gccaf _b .NRGBA64 );};func _dabc (_bgb _b .CMYK )_b .RGBA {_dfgf ,_ccdg ,_adbe :=_b .CMYKToRGB (_bgb .C ,_bgb .M ,_bgb .Y ,_bgb .K );
return _b .RGBA {R :_dfgf ,G :_ccdg ,B :_adbe ,A :0xff};};func (_edc *ImageBase )copy ()ImageBase {_eab :=*_edc ;_eab .Data =make ([]byte ,len (_edc .Data ));copy (_eab .Data ,_edc .Data );return _eab ;};func _fdb ()(_gfe [256]uint64 ){for _acff :=0;_acff < 256;
_acff ++{if _acff &0x01!=0{_gfe [_acff ]|=0xff;};if _acff &0x02!=0{_gfe [_acff ]|=0xff00;};if _acff &0x04!=0{_gfe [_acff ]|=0xff0000;};if _acff &0x08!=0{_gfe [_acff ]|=0xff000000;};if _acff &0x10!=0{_gfe [_acff ]|=0xff00000000;};if _acff &0x20!=0{_gfe [_acff ]|=0xff0000000000;
};if _acff &0x40!=0{_gfe [_acff ]|=0xff000000000000;};if _acff &0x80!=0{_gfe [_acff ]|=0xff00000000000000;};};return _gfe ;};type Image interface{_g .Image ;Base ()*ImageBase ;Copy ()Image ;Pix ()[]byte ;ColorAt (_aedga ,_fgcge int )(_b .Color ,error );
Validate ()error ;};func _gbdc (_cccb _e .Image )(Image ,error ){if _cebf ,_gffd :=_cccb .(*Gray8 );_gffd {return _cebf .Copy (),nil ;};_ecf :=_cccb .Bounds ();_egdg ,_abce :=NewImage (_ecf .Max .X ,_ecf .Max .Y ,8,1,nil ,nil ,nil );if _abce !=nil {return nil ,_abce ;
};_eafa (_cccb ,_egdg ,_ecf );return _egdg ,nil ;};type Gray16 struct{ImageBase };func _agc (_afgd _e .Image ,_afa Image ,_deg _e .Rectangle ){for _baf :=0;_baf < _deg .Max .X ;_baf ++{for _aac :=0;_aac < _deg .Max .Y ;_aac ++{_fdff :=_afgd .At (_baf ,_aac );
_afa .Set (_baf ,_aac ,_fdff );};};};func (_bcgba *Gray2 )GrayAt (x ,y int )_b .Gray {_fcba ,_ :=ColorAtGray2BPC (x ,y ,_bcgba .BytesPerLine ,_bcgba .Data ,_bcgba .Decode );return _fcba ;};var _ Image =&Gray16 {};type colorConverter struct{_aff func (_adeea _e .Image )(Image ,error );
};func _eeb (_cdac _e .Image )(Image ,error ){if _fccb ,_cebg :=_cdac .(*Gray2 );_cebg {return _fccb .Copy (),nil ;};_cgeg :=_cdac .Bounds ();_aba ,_fbgb :=NewImage (_cgeg .Max .X ,_cgeg .Max .Y ,2,1,nil ,nil ,nil );if _fbgb !=nil {return nil ,_fbgb ;};
_eafa (_cdac ,_aba ,_cgeg );return _aba ,nil ;};func (_bfdc *Monochrome )copy ()*Monochrome {_fbgc :=_ceg (_bfdc .Width ,_bfdc .Height );_fbgc .ModelThreshold =_bfdc .ModelThreshold ;_fbgc .Data =make ([]byte ,len (_bfdc .Data ));copy (_fbgc .Data ,_bfdc .Data );
if len (_bfdc .Decode )!=0{_fbgc .Decode =make ([]float64 ,len (_bfdc .Decode ));copy (_fbgc .Decode ,_bfdc .Decode );};if len (_bfdc .Alpha )!=0{_fbgc .Alpha =make ([]byte ,len (_bfdc .Alpha ));copy (_fbgc .Alpha ,_bfdc .Alpha );};return _fbgc ;};func _eedf (_gbbb _b .Color )_b .Color {_ccbe :=_b .GrayModel .Convert (_gbbb ).(_b .Gray );
return _afdb (_ccbe );};type Gray interface{GrayAt (_fgdf ,_ccc int )_b .Gray ;SetGray (_aefa ,_afeb int ,_cdfg _b .Gray );};