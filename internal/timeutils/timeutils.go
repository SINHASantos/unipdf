//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package timeutils ;import (_d "errors";_fd "fmt";_dfa "regexp";_df "strconv";_f "time";);func FormatPdfTime (in _f .Time )string {_c :=in .Format ("\u002d\u0030\u0037\u003a\u0030\u0030");_a ,_ :=_df .ParseInt (_c [1:3],10,32);_db ,_ :=_df .ParseInt (_c [4:6],10,32);
_bg :=int64 (in .Year ());_fed :=int64 (in .Month ());_g :=int64 (in .Day ());_ad :=int64 (in .Hour ());_bc :=int64 (in .Minute ());_aa :=int64 (in .Second ());_bgf :=_c [0];return _fd .Sprintf ("\u0044\u003a\u0025\u002e\u0034\u0064\u0025\u002e\u0032\u0064\u0025\u002e\u0032\u0064\u0025\u002e\u0032\u0064\u0025\u002e\u0032\u0064\u0025\u002e2\u0064\u0025\u0063\u0025\u002e2\u0064\u0027%\u002e\u0032\u0064\u0027",_bg ,_fed ,_g ,_ad ,_bc ,_aa ,_bgf ,_a ,_db );
};var _eb =_dfa .MustCompile ("\u005cs\u002a\u0044\u005cs\u002a\u003a\u005cs\u002a(\\\u0064\u007b\u0034\u007d\u0029\u0028\u005cd\u007b\u0032\u007d\u0029\u0028\u005c\u0064\u007b\u0032\u007d\u0029\u0028\u005c\u0064\u007b\u0032\u007d\u0029\u0028\u005c\u0064\u007b\u0032\u007d\u0029\u0028\u005c\u0064{2\u007d)\u003f\u0028\u005b\u002b\u002d\u005a]\u0029\u003f\u0028\u005c\u0064{\u0032\u007d\u0029\u003f\u0027\u003f\u0028\u005c\u0064\u007b\u0032}\u0029\u003f");
func ParsePdfTime (pdfTime string )(_f .Time ,error ){_fde :=_eb .FindAllStringSubmatch (pdfTime ,1);if len (_fde )< 1{if len (pdfTime )> 0&&pdfTime [0]!='D'{pdfTime =_fd .Sprintf ("\u0044\u003a\u0025\u0073",pdfTime );return ParsePdfTime (pdfTime );};return _f .Time {},_fd .Errorf ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020\u0064\u0061\u0074\u0065\u0020s\u0074\u0072\u0069\u006e\u0067\u0020\u0028\u0025\u0073\u0029",pdfTime );
};if len (_fde [0])!=10{return _f .Time {},_d .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072\u0065\u0067\u0065\u0078p\u0020\u0067\u0072\u006f\u0075\u0070 \u006d\u0061\u0074\u0063\u0068\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020!\u003d\u0020\u0031\u0030");
};_eg ,_ :=_df .ParseInt (_fde [0][1],10,32);_bcf ,_ :=_df .ParseInt (_fde [0][2],10,32);_ae ,_ :=_df .ParseInt (_fde [0][3],10,32);_ba ,_ :=_df .ParseInt (_fde [0][4],10,32);_de ,_ :=_df .ParseInt (_fde [0][5],10,32);_ea ,_ :=_df .ParseInt (_fde [0][6],10,32);
var (_fdb byte ;_fg int64 ;_ed int64 ;);_fdb ='+';if len (_fde [0][7])> 0{if _fde [0][7]=="\u002d"{_fdb ='-';}else if _fde [0][7]=="\u005a"{_fdb ='Z';};};if len (_fde [0][8])> 0{_fg ,_ =_df .ParseInt (_fde [0][8],10,32);}else {_fg =0;};if len (_fde [0][9])> 0{_ed ,_ =_df .ParseInt (_fde [0][9],10,32);
}else {_ed =0;};_cb :=int (_fg *60*60+_ed *60);switch _fdb {case '-':_cb =-_cb ;case 'Z':_cb =0;};_gcg :=_fd .Sprintf ("\u0055\u0054\u0043\u0025\u0063\u0025\u002e\u0032\u0064\u0025\u002e\u0032\u0064",_fdb ,_fg ,_ed );_ca :=_f .FixedZone (_gcg ,_cb );return _f .Date (int (_eg ),_f .Month (_bcf ),int (_ae ),int (_ba ),int (_de ),int (_ea ),0,_ca ),nil ;
};