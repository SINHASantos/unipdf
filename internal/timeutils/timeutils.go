//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package timeutils ;import (_d "errors";_gg "fmt";_a "regexp";_f "strconv";_e "time";);func FormatPdfTime (in _e .Time )string {_eg :=in .Format ("\u002d\u0030\u0037\u003a\u0030\u0030");_ge ,_ :=_f .ParseInt (_eg [1:3],10,32);_gc ,_ :=_f .ParseInt (_eg [4:6],10,32);
_fc :=int64 (in .Year ());_ec :=int64 (in .Month ());_c :=int64 (in .Day ());_ef :=int64 (in .Hour ());_b :=int64 (in .Minute ());_fec :=int64 (in .Second ());_fa :=_eg [0];return _gg .Sprintf ("\u0044\u003a\u0025\u002e\u0034\u0064\u0025\u002e\u0032\u0064\u0025\u002e\u0032\u0064\u0025\u002e\u0032\u0064\u0025\u002e\u0032\u0064\u0025\u002e2\u0064\u0025\u0063\u0025\u002e2\u0064\u0027%\u002e\u0032\u0064\u0027",_fc ,_ec ,_c ,_ef ,_b ,_fec ,_fa ,_ge ,_gc );
};func ParsePdfTime (pdfTime string )(_e .Time ,error ){_bf :=_ega .FindAllStringSubmatch (pdfTime ,1);if len (_bf )< 1{if len (pdfTime )> 0&&pdfTime [0]!='D'{pdfTime =_gg .Sprintf ("\u0044\u003a\u0025\u0073",pdfTime );return ParsePdfTime (pdfTime );};
return _e .Time {},_gg .Errorf ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020\u0064\u0061\u0074\u0065\u0020s\u0074\u0072\u0069\u006e\u0067\u0020\u0028\u0025\u0073\u0029",pdfTime );};if len (_bf [0])!=10{return _e .Time {},_d .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072\u0065\u0067\u0065\u0078p\u0020\u0067\u0072\u006f\u0075\u0070 \u006d\u0061\u0074\u0063\u0068\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020!\u003d\u0020\u0031\u0030");
};_fg ,_ :=_f .ParseInt (_bf [0][1],10,32);_gd ,_ :=_f .ParseInt (_bf [0][2],10,32);_fef ,_ :=_f .ParseInt (_bf [0][3],10,32);_ga ,_ :=_f .ParseInt (_bf [0][4],10,32);_ggg ,_ :=_f .ParseInt (_bf [0][5],10,32);_ff ,_ :=_f .ParseInt (_bf [0][6],10,32);var (_egc byte ;
_dg int64 ;_fd int64 ;);_egc ='+';if len (_bf [0][7])> 0{if _bf [0][7]=="\u002d"{_egc ='-';}else if _bf [0][7]=="\u005a"{_egc ='Z';};};if len (_bf [0][8])> 0{_dg ,_ =_f .ParseInt (_bf [0][8],10,32);}else {_dg =0;};if len (_bf [0][9])> 0{_fd ,_ =_f .ParseInt (_bf [0][9],10,32);
}else {_fd =0;};_dd :=int (_dg *60*60+_fd *60);switch _egc {case '-':_dd =-_dd ;case 'Z':_dd =0;};_efb :=_gg .Sprintf ("\u0055\u0054\u0043\u0025\u0063\u0025\u002e\u0032\u0064\u0025\u002e\u0032\u0064",_egc ,_dg ,_fd );_de :=_e .FixedZone (_efb ,_dd );return _e .Date (int (_fg ),_e .Month (_gd ),int (_fef ),int (_ga ),int (_ggg ),int (_ff ),0,_de ),nil ;
};var _ega =_a .MustCompile ("\u005cs\u002a\u0044\u005cs\u002a\u003a\u005cs\u002a(\\\u0064\u007b\u0034\u007d\u0029\u0028\u005cd\u007b\u0032\u007d\u0029\u0028\u005c\u0064\u007b\u0032\u007d\u0029\u0028\u005c\u0064\u007b\u0032\u007d\u0029\u0028\u005c\u0064\u007b\u0032\u007d\u0029\u0028\u005c\u0064{2\u007d)\u003f\u0028\u005b\u002b\u002d\u005a]\u0029\u003f\u0028\u005c\u0064{\u0032\u007d\u0029\u003f\u0027\u003f\u0028\u005c\u0064\u007b\u0032}\u0029\u003f");
