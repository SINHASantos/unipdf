//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package timeutils ;import (_eb "errors";_g "fmt";_be "regexp";_b "strconv";_d "time";);func FormatPdfTime (in _d .Time )string {_de :=in .Format ("\u002d\u0030\u0037\u003a\u0030\u0030");_bd ,_ :=_b .ParseInt (_de [1:3],10,32);_c ,_ :=_b .ParseInt (_de [4:6],10,32);
_cg :=int64 (in .Year ());_f :=int64 (in .Month ());_db :=int64 (in .Day ());_dg :=int64 (in .Hour ());_df :=int64 (in .Minute ());_ca :=int64 (in .Second ());_cc :=_de [0];return _g .Sprintf ("\u0044\u003a\u0025\u002e\u0034\u0064\u0025\u002e\u0032\u0064\u0025\u002e\u0032\u0064\u0025\u002e\u0032\u0064\u0025\u002e\u0032\u0064\u0025\u002e2\u0064\u0025\u0063\u0025\u002e2\u0064\u0027%\u002e\u0032\u0064\u0027",_cg ,_f ,_db ,_dg ,_df ,_ca ,_cc ,_bd ,_c );
};var _gfd =_be .MustCompile ("\u005cs\u002a\u0044\u005cs\u002a\u003a\u005cs\u002a(\\\u0064\u007b\u0034\u007d\u0029\u0028\u005cd\u007b\u0032\u007d\u0029\u0028\u005c\u0064\u007b\u0032\u007d\u0029\u0028\u005c\u0064\u007b\u0032\u007d\u0029\u0028\u005c\u0064\u007b\u0032\u007d\u0029\u0028\u005c\u0064{2\u007d)\u003f\u0028\u005b\u002b\u002d\u005a]\u0029\u003f\u0028\u005c\u0064{\u0032\u007d\u0029\u003f\u0027\u003f\u0028\u005c\u0064\u007b\u0032}\u0029\u003f");
func ParsePdfTime (pdfTime string )(_d .Time ,error ){_ef :=_gfd .FindAllStringSubmatch (pdfTime ,1);if len (_ef )< 1{if len (pdfTime )> 0&&pdfTime [0]!='D'{pdfTime =_g .Sprintf ("\u0044\u003a\u0025\u0073",pdfTime );return ParsePdfTime (pdfTime );};return _d .Time {},_g .Errorf ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020\u0064\u0061\u0074\u0065\u0020s\u0074\u0072\u0069\u006e\u0067\u0020\u0028\u0025\u0073\u0029",pdfTime );
};if len (_ef [0])!=10{return _d .Time {},_eb .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072\u0065\u0067\u0065\u0078p\u0020\u0067\u0072\u006f\u0075\u0070 \u006d\u0061\u0074\u0063\u0068\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020!\u003d\u0020\u0031\u0030");
};_gf ,_ :=_b .ParseInt (_ef [0][1],10,32);_dd ,_ :=_b .ParseInt (_ef [0][2],10,32);_ge ,_ :=_b .ParseInt (_ef [0][3],10,32);_ee ,_ :=_b .ParseInt (_ef [0][4],10,32);_gac ,_ :=_b .ParseInt (_ef [0][5],10,32);_bc ,_ :=_b .ParseInt (_ef [0][6],10,32);var (_af byte ;
_fd int64 ;_gad int64 ;);_af ='+';if len (_ef [0][7])> 0{if _ef [0][7]=="\u002d"{_af ='-';}else if _ef [0][7]=="\u005a"{_af ='Z';};};if len (_ef [0][8])> 0{_fd ,_ =_b .ParseInt (_ef [0][8],10,32);}else {_fd =0;};if len (_ef [0][9])> 0{_gad ,_ =_b .ParseInt (_ef [0][9],10,32);
}else {_gad =0;};_gd :=int (_fd *60*60+_gad *60);switch _af {case '-':_gd =-_gd ;case 'Z':_gd =0;};_ce :=_g .Sprintf ("\u0055\u0054\u0043\u0025\u0063\u0025\u002e\u0032\u0064\u0025\u002e\u0032\u0064",_af ,_fd ,_gad );_gag :=_d .FixedZone (_ce ,_gd );return _d .Date (int (_gf ),_d .Month (_dd ),int (_ge ),int (_ee ),int (_gac ),int (_bc ),0,_gag ),nil ;
};