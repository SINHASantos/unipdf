//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package timeutils ;import (_g "errors";_cg "fmt";_ec "regexp";_a "strconv";_c "time";);func FormatPdfTime (in _c .Time )string {_f :=in .Format ("\u002d\u0030\u0037\u003a\u0030\u0030");_eca ,_ :=_a .ParseInt (_f [1:3],10,32);_b ,_ :=_a .ParseInt (_f [4:6],10,32);
_d :=int64 (in .Year ());_ff :=int64 (in .Month ());_ffc :=int64 (in .Day ());_aa :=int64 (in .Hour ());_eb :=int64 (in .Minute ());_ba :=int64 (in .Second ());_dc :=_f [0];return _cg .Sprintf ("\u0044\u003a\u0025\u002e\u0034\u0064\u0025\u002e\u0032\u0064\u0025\u002e\u0032\u0064\u0025\u002e\u0032\u0064\u0025\u002e\u0032\u0064\u0025\u002e2\u0064\u0025\u0063\u0025\u002e2\u0064\u0027%\u002e\u0032\u0064\u0027",_d ,_ff ,_ffc ,_aa ,_eb ,_ba ,_dc ,_eca ,_b );
};var _eea =_ec .MustCompile ("\u005cs\u002a\u0044\u005cs\u002a\u003a\u005cs\u002a(\\\u0064\u007b\u0034\u007d\u0029\u0028\u005cd\u007b\u0032\u007d\u0029\u0028\u005c\u0064\u007b\u0032\u007d\u0029\u0028\u005c\u0064\u007b\u0032\u007d\u0029\u0028\u005c\u0064\u007b\u0032\u007d\u0029\u0028\u005c\u0064{2\u007d)\u003f\u0028\u005b\u002b\u002d\u005a]\u0029\u003f\u0028\u005c\u0064{\u0032\u007d\u0029\u003f\u0027\u003f\u0028\u005c\u0064\u007b\u0032}\u0029\u003f");
func ParsePdfTime (pdfTime string )(_c .Time ,error ){_fe :=_eea .FindAllStringSubmatch (pdfTime ,1);if len (_fe )< 1{if len (pdfTime )> 0&&pdfTime [0]!='D'{pdfTime =_cg .Sprintf ("\u0044\u003a\u0025\u0073",pdfTime );return ParsePdfTime (pdfTime );};return _c .Time {},_cg .Errorf ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020\u0064\u0061\u0074\u0065\u0020s\u0074\u0072\u0069\u006e\u0067\u0020\u0028\u0025\u0073\u0029",pdfTime );
};if len (_fe [0])!=10{return _c .Time {},_g .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072\u0065\u0067\u0065\u0078p\u0020\u0067\u0072\u006f\u0075\u0070 \u006d\u0061\u0074\u0063\u0068\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020!\u003d\u0020\u0031\u0030");
};_ecaf ,_ :=_a .ParseInt (_fe [0][1],10,32);_ee ,_ :=_a .ParseInt (_fe [0][2],10,32);_bd ,_ :=_a .ParseInt (_fe [0][3],10,32);_gf ,_ :=_a .ParseInt (_fe [0][4],10,32);_ca ,_ :=_a .ParseInt (_fe [0][5],10,32);_aaa ,_ :=_a .ParseInt (_fe [0][6],10,32);var (_bag byte ;
_bg int64 ;_cad int64 ;);_bag ='+';if len (_fe [0][7])> 0{if _fe [0][7]=="\u002d"{_bag ='-';}else if _fe [0][7]=="\u005a"{_bag ='Z';};};if len (_fe [0][8])> 0{_bg ,_ =_a .ParseInt (_fe [0][8],10,32);}else {_bg =0;};if len (_fe [0][9])> 0{_cad ,_ =_a .ParseInt (_fe [0][9],10,32);
}else {_cad =0;};_gd :=int (_bg *60*60+_cad *60);switch _bag {case '-':_gd =-_gd ;case 'Z':_gd =0;};_aec :=_cg .Sprintf ("\u0055\u0054\u0043\u0025\u0063\u0025\u002e\u0032\u0064\u0025\u002e\u0032\u0064",_bag ,_bg ,_cad );_aab :=_c .FixedZone (_aec ,_gd );
return _c .Date (int (_ecaf ),_c .Month (_ee ),int (_bd ),int (_gf ),int (_ca ),int (_aaa ),0,_aab ),nil ;};