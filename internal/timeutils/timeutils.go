//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package timeutils ;import (_b "errors";_fe "fmt";_aa "regexp";_a "strconv";_fb "time";);var _eg =_aa .MustCompile ("\u005cs\u002a\u0044\u005cs\u002a\u003a\u005cs\u002a(\\\u0064\u007b\u0034\u007d\u0029\u0028\u005cd\u007b\u0032\u007d\u0029\u0028\u005c\u0064\u007b\u0032\u007d\u0029\u0028\u005c\u0064\u007b\u0032\u007d\u0029\u0028\u005c\u0064\u007b\u0032\u007d\u0029\u0028\u005c\u0064{2\u007d)\u003f\u0028\u005b\u002b\u002d\u005a]\u0029\u003f\u0028\u005c\u0064{\u0032\u007d\u0029\u003f\u0027\u003f\u0028\u005c\u0064\u007b\u0032}\u0029\u003f");
func FormatPdfTime (in _fb .Time )string {_e :=in .Format ("\u002d\u0030\u0037\u003a\u0030\u0030");_d ,_ :=_a .ParseInt (_e [1:3],10,32);_c ,_ :=_a .ParseInt (_e [4:6],10,32);_ba :=int64 (in .Year ());_ff :=int64 (in .Month ());_g :=int64 (in .Day ());
_fg :=int64 (in .Hour ());_cg :=int64 (in .Minute ());_cb :=int64 (in .Second ());_ffa :=_e [0];return _fe .Sprintf ("\u0044\u003a\u0025\u002e\u0034\u0064\u0025\u002e\u0032\u0064\u0025\u002e\u0032\u0064\u0025\u002e\u0032\u0064\u0025\u002e\u0032\u0064\u0025\u002e2\u0064\u0025\u0063\u0025\u002e2\u0064\u0027%\u002e\u0032\u0064\u0027",_ba ,_ff ,_g ,_fg ,_cg ,_cb ,_ffa ,_d ,_c );
};func ParsePdfTime (pdfTime string )(_fb .Time ,error ){_bd :=_eg .FindAllStringSubmatch (pdfTime ,1);if len (_bd )< 1{if len (pdfTime )> 0&&pdfTime [0]!='D'{pdfTime =_fe .Sprintf ("\u0044\u003a\u0025\u0073",pdfTime );return ParsePdfTime (pdfTime );};
return _fb .Time {},_fe .Errorf ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020\u0064\u0061\u0074\u0065\u0020s\u0074\u0072\u0069\u006e\u0067\u0020\u0028\u0025\u0073\u0029",pdfTime );};if len (_bd [0])!=10{return _fb .Time {},_b .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072\u0065\u0067\u0065\u0078p\u0020\u0067\u0072\u006f\u0075\u0070 \u006d\u0061\u0074\u0063\u0068\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020!\u003d\u0020\u0031\u0030");
};_ag ,_ :=_a .ParseInt (_bd [0][1],10,32);_fd ,_ :=_a .ParseInt (_bd [0][2],10,32);_ec ,_ :=_a .ParseInt (_bd [0][3],10,32);_ee ,_ :=_a .ParseInt (_bd [0][4],10,32);_eed ,_ :=_a .ParseInt (_bd [0][5],10,32);_be ,_ :=_a .ParseInt (_bd [0][6],10,32);var (_cbg byte ;
_ede int64 ;_fbf int64 ;);_cbg ='+';if len (_bd [0][7])> 0{if _bd [0][7]=="\u002d"{_cbg ='-';}else if _bd [0][7]=="\u005a"{_cbg ='Z';};};if len (_bd [0][8])> 0{_ede ,_ =_a .ParseInt (_bd [0][8],10,32);}else {_ede =0;};if len (_bd [0][9])> 0{_fbf ,_ =_a .ParseInt (_bd [0][9],10,32);
}else {_fbf =0;};_ecd :=int (_ede *60*60+_fbf *60);switch _cbg {case '-':_ecd =-_ecd ;case 'Z':_ecd =0;};_cd :=_fe .Sprintf ("\u0055\u0054\u0043\u0025\u0063\u0025\u002e\u0032\u0064\u0025\u002e\u0032\u0064",_cbg ,_ede ,_fbf );_cgc :=_fb .FixedZone (_cd ,_ecd );
return _fb .Date (int (_ag ),_fb .Month (_fd ),int (_ec ),int (_ee ),int (_eed ),int (_be ),0,_cgc ),nil ;};