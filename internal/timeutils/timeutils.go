//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package timeutils ;import (_f "errors";_d "fmt";_fc "regexp";_ge "strconv";_gf "time";);func FormatPdfTime (in _gf .Time )string {_fa :=in .Format ("\u002d\u0030\u0037\u003a\u0030\u0030");_e ,_ :=_ge .ParseInt (_fa [1:3],10,32);_c ,_ :=_ge .ParseInt (_fa [4:6],10,32);
_ad :=int64 (in .Year ());_de :=int64 (in .Month ());_ca :=int64 (in .Day ());_fb :=int64 (in .Hour ());_ed :=int64 (in .Minute ());_cd :=int64 (in .Second ());_gd :=_fa [0];return _d .Sprintf ("\u0044\u003a\u0025\u002e\u0034\u0064\u0025\u002e\u0032\u0064\u0025\u002e\u0032\u0064\u0025\u002e\u0032\u0064\u0025\u002e\u0032\u0064\u0025\u002e2\u0064\u0025\u0063\u0025\u002e2\u0064\u0027%\u002e\u0032\u0064\u0027",_ad ,_de ,_ca ,_fb ,_ed ,_cd ,_gd ,_e ,_c );
};var _gg =_fc .MustCompile ("\u005cs\u002a\u0044\u005cs\u002a\u003a\u005cs\u002a(\\\u0064\u007b\u0034\u007d\u0029\u0028\u005cd\u007b\u0032\u007d\u0029\u0028\u005c\u0064\u007b\u0032\u007d\u0029\u0028\u005c\u0064\u007b\u0032\u007d\u0029\u0028\u005c\u0064\u007b\u0032\u007d\u0029\u0028\u005c\u0064{2\u007d)\u003f\u0028\u005b\u002b\u002d\u005a]\u0029\u003f\u0028\u005c\u0064{\u0032\u007d\u0029\u003f\u0027\u003f\u0028\u005c\u0064\u007b\u0032}\u0029\u003f");
func ParsePdfTime (pdfTime string )(_gf .Time ,error ){_fd :=_gg .FindAllStringSubmatch (pdfTime ,1);if len (_fd )< 1{if len (pdfTime )> 0&&pdfTime [0]!='D'{pdfTime =_d .Sprintf ("\u0044\u003a\u0025\u0073",pdfTime );return ParsePdfTime (pdfTime );};return _gf .Time {},_d .Errorf ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020\u0064\u0061\u0074\u0065\u0020s\u0074\u0072\u0069\u006e\u0067\u0020\u0028\u0025\u0073\u0029",pdfTime );
};if len (_fd [0])!=10{return _gf .Time {},_f .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072\u0065\u0067\u0065\u0078p\u0020\u0067\u0072\u006f\u0075\u0070 \u006d\u0061\u0074\u0063\u0068\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020!\u003d\u0020\u0031\u0030");
};_ga ,_ :=_ge .ParseInt (_fd [0][1],10,32);_fdc ,_ :=_ge .ParseInt (_fd [0][2],10,32);_bd ,_ :=_ge .ParseInt (_fd [0][3],10,32);_ged ,_ :=_ge .ParseInt (_fd [0][4],10,32);_aa ,_ :=_ge .ParseInt (_fd [0][5],10,32);_gff ,_ :=_ge .ParseInt (_fd [0][6],10,32);
var (_dc byte ;_ec int64 ;_efd int64 ;);_dc ='+';if len (_fd [0][7])> 0{if _fd [0][7]=="\u002d"{_dc ='-';}else if _fd [0][7]=="\u005a"{_dc ='Z';};};if len (_fd [0][8])> 0{_ec ,_ =_ge .ParseInt (_fd [0][8],10,32);}else {_ec =0;};if len (_fd [0][9])> 0{_efd ,_ =_ge .ParseInt (_fd [0][9],10,32);
}else {_efd =0;};_eg :=int (_ec *60*60+_efd *60);switch _dc {case '-':_eg =-_eg ;case 'Z':_eg =0;};_ac :=_d .Sprintf ("\u0055\u0054\u0043\u0025\u0063\u0025\u002e\u0032\u0064\u0025\u002e\u0032\u0064",_dc ,_ec ,_efd );_aga :=_gf .FixedZone (_ac ,_eg );return _gf .Date (int (_ga ),_gf .Month (_fdc ),int (_bd ),int (_ged ),int (_aa ),int (_gff ),0,_aga ),nil ;
};