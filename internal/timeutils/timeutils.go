//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package timeutils ;import (_d "errors";_fe "fmt";_f "regexp";_ac "strconv";_da "time";);var _fd =_f .MustCompile ("\u005cs\u002a\u0044\u005cs\u002a\u003a\u005cs\u002a(\\\u0064\u007b\u0034\u007d\u0029\u0028\u005cd\u007b\u0032\u007d\u0029\u0028\u005c\u0064\u007b\u0032\u007d\u0029\u0028\u005c\u0064\u007b\u0032\u007d\u0029\u0028\u005c\u0064\u007b\u0032\u007d\u0029\u0028\u005c\u0064{2\u007d)\u003f\u0028\u005b\u002b\u002d\u005a]\u0029\u003f\u0028\u005c\u0064{\u0032\u007d\u0029\u003f\u0027\u003f\u0028\u005c\u0064\u007b\u0032}\u0029\u003f");
func FormatPdfTime (in _da .Time )string {_de :=in .Format ("\u002d\u0030\u0037\u003a\u0030\u0030");_g ,_ :=_ac .ParseInt (_de [1:3],10,32);_b ,_ :=_ac .ParseInt (_de [4:6],10,32);_e :=int64 (in .Year ());_gd :=int64 (in .Month ());_ee :=int64 (in .Day ());
_fea :=int64 (in .Hour ());_cg :=int64 (in .Minute ());_gf :=int64 (in .Second ());_bb :=_de [0];return _fe .Sprintf ("\u0044\u003a\u0025\u002e\u0034\u0064\u0025\u002e\u0032\u0064\u0025\u002e\u0032\u0064\u0025\u002e\u0032\u0064\u0025\u002e\u0032\u0064\u0025\u002e2\u0064\u0025\u0063\u0025\u002e2\u0064\u0027%\u002e\u0032\u0064\u0027",_e ,_gd ,_ee ,_fea ,_cg ,_gf ,_bb ,_g ,_b );
};func ParsePdfTime (pdfTime string )(_da .Time ,error ){_db :=_fd .FindAllStringSubmatch (pdfTime ,1);if len (_db )< 1{if len (pdfTime )> 0&&pdfTime [0]!='D'{pdfTime =_fe .Sprintf ("\u0044\u003a\u0025\u0073",pdfTime );return ParsePdfTime (pdfTime );};
return _da .Time {},_fe .Errorf ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020\u0064\u0061\u0074\u0065\u0020s\u0074\u0072\u0069\u006e\u0067\u0020\u0028\u0025\u0073\u0029",pdfTime );};if len (_db [0])!=10{return _da .Time {},_d .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072\u0065\u0067\u0065\u0078p\u0020\u0067\u0072\u006f\u0075\u0070 \u006d\u0061\u0074\u0063\u0068\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020!\u003d\u0020\u0031\u0030");
};_cc ,_ :=_ac .ParseInt (_db [0][1],10,32);_cf ,_ :=_ac .ParseInt (_db [0][2],10,32);_gfd ,_ :=_ac .ParseInt (_db [0][3],10,32);_gg ,_ :=_ac .ParseInt (_db [0][4],10,32);_dg ,_ :=_ac .ParseInt (_db [0][5],10,32);_gdd ,_ :=_ac .ParseInt (_db [0][6],10,32);
var (_bbg byte ;_bbgd int64 ;_cab int64 ;);_bbg ='+';if len (_db [0][7])> 0{if _db [0][7]=="\u002d"{_bbg ='-';}else if _db [0][7]=="\u005a"{_bbg ='Z';};};if len (_db [0][8])> 0{_bbgd ,_ =_ac .ParseInt (_db [0][8],10,32);}else {_bbgd =0;};if len (_db [0][9])> 0{_cab ,_ =_ac .ParseInt (_db [0][9],10,32);
}else {_cab =0;};_cgc :=int (_bbgd *60*60+_cab *60);switch _bbg {case '-':_cgc =-_cgc ;case 'Z':_cgc =0;};_ed :=_fe .Sprintf ("\u0055\u0054\u0043\u0025\u0063\u0025\u002e\u0032\u0064\u0025\u002e\u0032\u0064",_bbg ,_bbgd ,_cab );_acg :=_da .FixedZone (_ed ,_cgc );
return _da .Date (int (_cc ),_da .Month (_cf ),int (_gfd ),int (_gg ),int (_dg ),int (_gdd ),0,_acg ),nil ;};