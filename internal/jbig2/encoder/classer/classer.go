//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package classer ;import (_ad "github.com/unidoc/unipdf/v3/common";_c "github.com/unidoc/unipdf/v3/internal/jbig2/basic";_g "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";_ag "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_d "image";_a "math";
);func (_eg *Classer )verifyMethod (_bcc Method )error {if _bcc !=RankHaus &&_bcc !=Correlation {return _ag .Error ("\u0076\u0065\u0072i\u0066\u0079\u004d\u0065\u0074\u0068\u006f\u0064","\u0069\u006e\u0076\u0061li\u0064\u0020\u0063\u006c\u0061\u0073\u0073\u0065\u0072\u0020\u006d\u0065\u0074\u0068o\u0064");
};return nil ;};func (_ddb *Classer )classifyRankHouseNonOne (_bee *_g .Boxes ,_bag ,_dgeb ,_ebad *_g .Bitmaps ,_cfbe *_g .Points ,_ede *_c .NumSlice ,_aeeb int )(_aaac error ){const _gbd ="\u0043\u006c\u0061\u0073s\u0065\u0072\u002e\u0063\u006c\u0061\u0073\u0073\u0069\u0066y\u0052a\u006e\u006b\u0048\u006f\u0075\u0073\u0065O\u006e\u0065";
var (_dgc ,_aaab ,_aece ,_eea float32 ;_cgag ,_agb ,_cebe int ;_aff ,_eed ,_fbc ,_gca ,_fcb *_g .Bitmap ;_gdag ,_eeab bool ;);_eac :=_g .MakePixelSumTab8 ();for _ccd :=0;_ccd < len (_bag .Values );_ccd ++{if _eed ,_aaac =_dgeb .GetBitmap (_ccd );_aaac !=nil {return _ag .Wrap (_aaac ,_gbd ,"b\u006d\u0073\u0031\u002e\u0047\u0065\u0074\u0028\u0069\u0029");
};if _cgag ,_aaac =_ede .GetInt (_ccd );_aaac !=nil {_ad .Log .Trace ("\u0047\u0065t\u0074\u0069\u006e\u0067 \u0046\u0047T\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0073 \u0061\u0074\u003a\u0020\u0025\u0064\u0020\u0066\u0061\u0069\u006c\u0065d\u003a\u0020\u0025\u0076",_ccd ,_aaac );
};if _fbc ,_aaac =_ebad .GetBitmap (_ccd );_aaac !=nil {return _ag .Wrap (_aaac ,_gbd ,"b\u006d\u0073\u0032\u002e\u0047\u0065\u0074\u0028\u0069\u0029");};if _dgc ,_aaab ,_aaac =_cfbe .GetGeometry (_ccd );_aaac !=nil {return _ag .Wrapf (_aaac ,_gbd ,"\u0070t\u0061[\u0069\u005d\u002e\u0047\u0065\u006f\u006d\u0065\u0074\u0072\u0079");
};_ddgd :=len (_ddb .UndilatedTemplates .Values );_gdag =false ;_dce :=_fcd (_ddb ,_eed );for _cebe =_dce .Next ();_cebe > -1;{if _gca ,_aaac =_ddb .UndilatedTemplates .GetBitmap (_cebe );_aaac !=nil {return _ag .Wrap (_aaac ,_gbd ,"\u0070\u0069\u0078\u0061\u0074\u002e\u005b\u0069\u0043l\u0061\u0073\u0073\u005d");
};if _agb ,_aaac =_ddb .FgTemplates .GetInt (_cebe );_aaac !=nil {_ad .Log .Trace ("\u0047\u0065\u0074\u0074\u0069\u006eg\u0020\u0046\u0047\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u005b\u0025d\u005d\u0020\u0066\u0061\u0069\u006c\u0065d\u003a\u0020\u0025\u0076",_cebe ,_aaac );
};if _fcb ,_aaac =_ddb .DilatedTemplates .GetBitmap (_cebe );_aaac !=nil {return _ag .Wrap (_aaac ,_gbd ,"\u0070\u0069\u0078\u0061\u0074\u0064\u005b\u0069\u0043l\u0061\u0073\u0073\u005d");};if _aece ,_eea ,_aaac =_ddb .CentroidPointsTemplates .GetGeometry (_cebe );
_aaac !=nil {return _ag .Wrap (_aaac ,_gbd ,"\u0043\u0065\u006et\u0072\u006f\u0069\u0064P\u006f\u0069\u006e\u0074\u0073\u0054\u0065m\u0070\u006c\u0061\u0074\u0065\u0073\u005b\u0069\u0043\u006c\u0061\u0073\u0073\u005d");};_eeab ,_aaac =_g .RankHausTest (_eed ,_fbc ,_gca ,_fcb ,_dgc -_aece ,_aaab -_eea ,MaxDiffWidth ,MaxDiffHeight ,_cgag ,_agb ,float32 (_ddb .Settings .RankHaus ),_eac );
if _aaac !=nil {return _ag .Wrap (_aaac ,_gbd ,"");};if _eeab {_gdag =true ;if _aaac =_ddb .ClassIDs .Add (_cebe );_aaac !=nil {return _ag .Wrap (_aaac ,_gbd ,"");};if _aaac =_ddb .ComponentPageNumbers .Add (_aeeb );_aaac !=nil {return _ag .Wrap (_aaac ,_gbd ,"");
};if _ddb .Settings .KeepClassInstances {_bfe ,_gbc :=_ddb .ClassInstances .GetBitmaps (_cebe );if _gbc !=nil {return _ag .Wrap (_gbc ,_gbd ,"\u0063\u002e\u0050\u0069\u0078\u0061\u0061\u002e\u0047\u0065\u0074B\u0069\u0074\u006d\u0061\u0070\u0073\u0028\u0069\u0043\u006ca\u0073\u0073\u0029");
};if _aff ,_gbc =_bag .GetBitmap (_ccd );_gbc !=nil {return _ag .Wrap (_gbc ,_gbd ,"\u0070i\u0078\u0061\u005b\u0069\u005d");};_bfe .Values =append (_bfe .Values ,_aff );_dac ,_gbc :=_bee .Get (_ccd );if _gbc !=nil {return _ag .Wrap (_gbc ,_gbd ,"b\u006f\u0078\u0061\u002e\u0047\u0065\u0074\u0028\u0069\u0029");
};_bfe .Boxes =append (_bfe .Boxes ,_dac );};break ;};};if !_gdag {if _aaac =_ddb .ClassIDs .Add (_ddgd );_aaac !=nil {return _ag .Wrap (_aaac ,_gbd ,"\u0021\u0066\u006f\u0075\u006e\u0064");};if _aaac =_ddb .ComponentPageNumbers .Add (_aeeb );_aaac !=nil {return _ag .Wrap (_aaac ,_gbd ,"\u0021\u0066\u006f\u0075\u006e\u0064");
};_adb :=&_g .Bitmaps {};_aff =_bag .Values [_ccd ];_adb .AddBitmap (_aff );_eege ,_cgdc :=_aff .Width ,_aff .Height ;_ddb .TemplatesSize .Add (uint64 (_eege )*uint64 (_cgdc ),_ddgd );_fab ,_faa :=_bee .Get (_ccd );if _faa !=nil {return _ag .Wrap (_faa ,_gbd ,"\u0021\u0066\u006f\u0075\u006e\u0064");
};_adb .AddBox (_fab );_ddb .ClassInstances .AddBitmaps (_adb );_ddb .CentroidPointsTemplates .AddPoint (_dgc ,_aaab );_ddb .UndilatedTemplates .AddBitmap (_eed );_ddb .DilatedTemplates .AddBitmap (_fbc );_ddb .FgTemplates .AddInt (_cgag );};};_ddb .NumberOfClasses =len (_ddb .UndilatedTemplates .Values );
return nil ;};func (_cgd *Classer )classifyRankHouseOne (_gfa *_g .Boxes ,_cga ,_dge ,_fec *_g .Bitmaps ,_dgg *_g .Points ,_efa int )(_gcg error ){const _cdc ="\u0043\u006c\u0061\u0073s\u0065\u0072\u002e\u0063\u006c\u0061\u0073\u0073\u0069\u0066y\u0052a\u006e\u006b\u0048\u006f\u0075\u0073\u0065O\u006e\u0065";
var (_gfe ,_gb ,_gcb ,_cgde float32 ;_ggfc int ;_cgb ,_abcg ,_ddf ,_def ,_dcaf *_g .Bitmap ;_ac ,_ccg bool ;);for _gfbb :=0;_gfbb < len (_cga .Values );_gfbb ++{_abcg =_dge .Values [_gfbb ];_ddf =_fec .Values [_gfbb ];_gfe ,_gb ,_gcg =_dgg .GetGeometry (_gfbb );
if _gcg !=nil {return _ag .Wrapf (_gcg ,_cdc ,"\u0066\u0069\u0072\u0073\u0074\u0020\u0067\u0065\u006fm\u0065\u0074\u0072\u0079");};_egg :=len (_cgd .UndilatedTemplates .Values );_ac =false ;_gaff :=_fcd (_cgd ,_abcg );for _ggfc =_gaff .Next ();_ggfc > -1;
{_def ,_gcg =_cgd .UndilatedTemplates .GetBitmap (_ggfc );if _gcg !=nil {return _ag .Wrap (_gcg ,_cdc ,"\u0062\u006d\u0033");};_dcaf ,_gcg =_cgd .DilatedTemplates .GetBitmap (_ggfc );if _gcg !=nil {return _ag .Wrap (_gcg ,_cdc ,"\u0062\u006d\u0034");};
_gcb ,_cgde ,_gcg =_cgd .CentroidPointsTemplates .GetGeometry (_ggfc );if _gcg !=nil {return _ag .Wrap (_gcg ,_cdc ,"\u0043\u0065\u006e\u0074\u0072\u006f\u0069\u0064\u0054\u0065\u006d\u0070l\u0061\u0074\u0065\u0073");};_ccg ,_gcg =_g .HausTest (_abcg ,_ddf ,_def ,_dcaf ,_gfe -_gcb ,_gb -_cgde ,MaxDiffWidth ,MaxDiffHeight );
if _gcg !=nil {return _ag .Wrap (_gcg ,_cdc ,"");};if _ccg {_ac =true ;if _gcg =_cgd .ClassIDs .Add (_ggfc );_gcg !=nil {return _ag .Wrap (_gcg ,_cdc ,"");};if _gcg =_cgd .ComponentPageNumbers .Add (_efa );_gcg !=nil {return _ag .Wrap (_gcg ,_cdc ,"");
};if _cgd .Settings .KeepClassInstances {_fae ,_cgae :=_cgd .ClassInstances .GetBitmaps (_ggfc );if _cgae !=nil {return _ag .Wrap (_cgae ,_cdc ,"\u004be\u0065\u0070\u0050\u0069\u0078\u0061a");};_cgb ,_cgae =_cga .GetBitmap (_gfbb );if _cgae !=nil {return _ag .Wrap (_cgae ,_cdc ,"\u004be\u0065\u0070\u0050\u0069\u0078\u0061a");
};_fae .AddBitmap (_cgb );_ecg ,_cgae :=_gfa .Get (_gfbb );if _cgae !=nil {return _ag .Wrap (_cgae ,_cdc ,"\u004be\u0065\u0070\u0050\u0069\u0078\u0061a");};_fae .AddBox (_ecg );};break ;};};if !_ac {if _gcg =_cgd .ClassIDs .Add (_egg );_gcg !=nil {return _ag .Wrap (_gcg ,_cdc ,"");
};if _gcg =_cgd .ComponentPageNumbers .Add (_efa );_gcg !=nil {return _ag .Wrap (_gcg ,_cdc ,"");};_fba :=&_g .Bitmaps {};_cgb ,_gcg =_cga .GetBitmap (_gfbb );if _gcg !=nil {return _ag .Wrap (_gcg ,_cdc ,"\u0021\u0066\u006f\u0075\u006e\u0064");};_fba .Values =append (_fba .Values ,_cgb );
_acd ,_eca :=_cgb .Width ,_cgb .Height ;_cgd .TemplatesSize .Add (uint64 (_eca )*uint64 (_acd ),_egg );_ccf ,_gdf :=_gfa .Get (_gfbb );if _gdf !=nil {return _ag .Wrap (_gdf ,_cdc ,"\u0021\u0066\u006f\u0075\u006e\u0064");};_fba .AddBox (_ccf );_cgd .ClassInstances .AddBitmaps (_fba );
_cgd .CentroidPointsTemplates .AddPoint (_gfe ,_gb );_cgd .UndilatedTemplates .AddBitmap (_abcg );_cgd .DilatedTemplates .AddBitmap (_ddf );};};return nil ;};func (_ga *Classer )AddPage (inputPage *_g .Bitmap ,pageNumber int ,method Method )(_e error ){const _gc ="\u0043l\u0061s\u0073\u0065\u0072\u002e\u0041\u0064\u0064\u0050\u0061\u0067\u0065";
_ga .Widths [pageNumber ]=inputPage .Width ;_ga .Heights [pageNumber ]=inputPage .Height ;if _e =_ga .verifyMethod (method );_e !=nil {return _ag .Wrap (_e ,_gc ,"");};_gfb ,_gaf ,_e :=inputPage .GetComponents (_ga .Settings .Components ,_ga .Settings .MaxCompWidth ,_ga .Settings .MaxCompHeight );
if _e !=nil {return _ag .Wrap (_e ,_gc ,"");};_ad .Log .Debug ("\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074s\u003a\u0020\u0025\u0076",_gfb );if _e =_ga .addPageComponents (inputPage ,_gaf ,_gfb ,pageNumber ,method );_e !=nil {return _ag .Wrap (_e ,_gc ,"");
};return nil ;};type Classer struct{BaseIndex int ;Settings Settings ;ComponentsNumber *_c .IntSlice ;TemplateAreas *_c .IntSlice ;Widths map[int ]int ;Heights map[int ]int ;NumberOfClasses int ;ClassInstances *_g .BitmapsArray ;UndilatedTemplates *_g .Bitmaps ;
DilatedTemplates *_g .Bitmaps ;TemplatesSize _c .IntsMap ;FgTemplates *_c .NumSlice ;CentroidPoints *_g .Points ;CentroidPointsTemplates *_g .Points ;ClassIDs *_c .IntSlice ;ComponentPageNumbers *_c .IntSlice ;PtaUL *_g .Points ;PtaLL *_g .Points ;};func Init (settings Settings )(*Classer ,error ){const _dc ="\u0063\u006c\u0061s\u0073\u0065\u0072\u002e\u0049\u006e\u0069\u0074";
_gf :=&Classer {Settings :settings ,Widths :map[int ]int {},Heights :map[int ]int {},TemplatesSize :_c .IntsMap {},TemplateAreas :&_c .IntSlice {},ComponentPageNumbers :&_c .IntSlice {},ClassIDs :&_c .IntSlice {},ComponentsNumber :&_c .IntSlice {},CentroidPoints :&_g .Points {},CentroidPointsTemplates :&_g .Points {},UndilatedTemplates :&_g .Bitmaps {},DilatedTemplates :&_g .Bitmaps {},ClassInstances :&_g .BitmapsArray {},FgTemplates :&_c .NumSlice {}};
if _b :=_gf .Settings .Validate ();_b !=nil {return nil ,_ag .Wrap (_b ,_dc ,"");};return _gf ,nil ;};func _agc (_age *_g .Bitmap ,_aec ,_cf ,_cgg ,_gda int ,_gee *_g .Bitmap )(_cb _d .Point ,_ege error ){const _dcf ="\u0066i\u006e\u0061\u006c\u0041l\u0069\u0067\u006e\u006d\u0065n\u0074P\u006fs\u0069\u0074\u0069\u006f\u006e\u0069\u006eg";
if _age ==nil {return _cb ,_ag .Error (_dcf ,"\u0073\u006f\u0075\u0072ce\u0020\u006e\u006f\u0074\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064");};if _gee ==nil {return _cb ,_ag .Error (_dcf ,"t\u0065\u006d\u0070\u006cat\u0065 \u006e\u006f\u0074\u0020\u0070r\u006f\u0076\u0069\u0064\u0065\u0064");
};_baa ,_cd :=_gee .Width ,_gee .Height ;_caa ,_cae :=_aec -_cgg -JbAddedPixels ,_cf -_gda -JbAddedPixels ;_ad .Log .Trace ("\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0079\u003a\u0020\u0027\u0025\u0064'\u002c\u0020\u0077\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0068\u003a \u0027\u0025\u0064\u0027\u002c\u0020\u0062\u0078\u003a\u0020\u0027\u0025d'\u002c\u0020\u0062\u0079\u003a\u0020\u0027\u0025\u0064\u0027",_aec ,_cf ,_baa ,_cd ,_caa ,_cae );
_cda ,_ege :=_g .Rect (_caa ,_cae ,_baa ,_cd );if _ege !=nil {return _cb ,_ag .Wrap (_ege ,_dcf ,"");};_cecf ,_ ,_ege :=_age .ClipRectangle (_cda );if _ege !=nil {_ad .Log .Error ("\u0043a\u006e\u0027\u0074\u0020\u0063\u006c\u0069\u0070\u0020\u0072\u0065c\u0074\u0061\u006e\u0067\u006c\u0065\u003a\u0020\u0025\u0076",_cda );
return _cb ,_ag .Wrap (_ege ,_dcf ,"");};_gaab :=_g .New (_cecf .Width ,_cecf .Height );_fb :=_a .MaxInt32 ;var _bccd ,_gde ,_eba ,_fdc ,_eeg int ;for _bccd =-1;_bccd <=1;_bccd ++{for _gde =-1;_gde <=1;_gde ++{if _ ,_ege =_g .Copy (_gaab ,_cecf );_ege !=nil {return _cb ,_ag .Wrap (_ege ,_dcf ,"");
};if _ege =_gaab .RasterOperation (_gde ,_bccd ,_baa ,_cd ,_g .PixSrcXorDst ,_gee ,0,0);_ege !=nil {return _cb ,_ag .Wrap (_ege ,_dcf ,"");};_eba =_gaab .CountPixels ();if _eba < _fb {_fdc =_gde ;_eeg =_bccd ;_fb =_eba ;};};};_cb .X =_fdc ;_cb .Y =_eeg ;
return _cb ,nil ;};type Settings struct{MaxCompWidth int ;MaxCompHeight int ;SizeHaus int ;RankHaus float64 ;Thresh float64 ;WeightFactor float64 ;KeepClassInstances bool ;Components _g .Component ;Method Method ;};func (_fe *Classer )classifyRankHaus (_gafa *_g .Boxes ,_cfac *_g .Bitmaps ,_fdcf int )error {const _gdb ="\u0063\u006ca\u0073\u0073\u0069f\u0079\u0052\u0061\u006e\u006b\u0048\u0061\u0075\u0073";
if _gafa ==nil {return _ag .Error (_gdb ,"\u0062\u006fx\u0061\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if _cfac ==nil {return _ag .Error (_gdb ,"\u0070\u0069x\u0061\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};_cfcc :=len (_cfac .Values );if _cfcc ==0{return _ag .Error (_gdb ,"e\u006dp\u0074\u0079\u0020\u006e\u0065\u0077\u0020\u0063o\u006d\u0070\u006f\u006een\u0074\u0073");};_afa :=_cfac .CountPixels ();_bga :=_fe .Settings .SizeHaus ;_bea :=_g .SelCreateBrick (_bga ,_bga ,_bga /2,_bga /2,_g .SelHit );
_fdb :=&_g .Bitmaps {Values :make ([]*_g .Bitmap ,_cfcc )};_cebgb :=&_g .Bitmaps {Values :make ([]*_g .Bitmap ,_cfcc )};var (_gdd ,_egf ,_bdca *_g .Bitmap ;_bfad error ;);for _bdd :=0;_bdd < _cfcc ;_bdd ++{_gdd ,_bfad =_cfac .GetBitmap (_bdd );if _bfad !=nil {return _ag .Wrap (_bfad ,_gdb ,"");
};_egf ,_bfad =_gdd .AddBorderGeneral (JbAddedPixels ,JbAddedPixels ,JbAddedPixels ,JbAddedPixels ,0);if _bfad !=nil {return _ag .Wrap (_bfad ,_gdb ,"");};_bdca ,_bfad =_g .Dilate (nil ,_egf ,_bea );if _bfad !=nil {return _ag .Wrap (_bfad ,_gdb ,"");};
_fdb .Values [_cfcc ]=_egf ;_cebgb .Values [_cfcc ]=_bdca ;};_ggf ,_bfad :=_g .Centroids (_fdb .Values );if _bfad !=nil {return _ag .Wrap (_bfad ,_gdb ,"");};if _bfad =_ggf .Add (_fe .CentroidPoints );_bfad !=nil {_ad .Log .Trace ("\u004e\u006f\u0020\u0063en\u0074\u0072\u006f\u0069\u0064\u0073\u0020\u0074\u006f\u0020\u0061\u0064\u0064");
};if _fe .Settings .RankHaus ==1.0{_bfad =_fe .classifyRankHouseOne (_gafa ,_cfac ,_fdb ,_cebgb ,_ggf ,_fdcf );}else {_bfad =_fe .classifyRankHouseNonOne (_gafa ,_cfac ,_fdb ,_cebgb ,_ggf ,_afa ,_fdcf );};if _bfad !=nil {return _ag .Wrap (_bfad ,_gdb ,"");
};return nil ;};func (_gcag *Settings )SetDefault (){if _gcag .MaxCompWidth ==0{switch _gcag .Components {case _g .ComponentConn :_gcag .MaxCompWidth =MaxConnCompWidth ;case _g .ComponentCharacters :_gcag .MaxCompWidth =MaxCharCompWidth ;case _g .ComponentWords :_gcag .MaxCompWidth =MaxWordCompWidth ;
};};if _gcag .MaxCompHeight ==0{_gcag .MaxCompHeight =MaxCompHeight ;};if _gcag .Thresh ==0.0{_gcag .Thresh =0.9;};if _gcag .WeightFactor ==0.0{_gcag .WeightFactor =0.75;};if _gcag .RankHaus ==0.0{_gcag .RankHaus =0.97;};if _gcag .SizeHaus ==0{_gcag .SizeHaus =2;
};};func (_gd *Classer )ComputeLLCorners ()(_bd error ){const _ca ="\u0043l\u0061\u0073\u0073\u0065\u0072\u002e\u0043\u006f\u006d\u0070\u0075t\u0065\u004c\u004c\u0043\u006f\u0072\u006e\u0065\u0072\u0073";if _gd .PtaUL ==nil {return _ag .Error (_ca ,"\u0055\u004c\u0020\u0043or\u006e\u0065\u0072\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");
};_bc :=len (*_gd .PtaUL );_gd .PtaLL =&_g .Points {};var (_ab ,_ba float32 ;_ee ,_aa int ;_ae *_g .Bitmap ;);for _ef :=0;_ef < _bc ;_ef ++{_ab ,_ba ,_bd =_gd .PtaUL .GetGeometry (_ef );if _bd !=nil {_ad .Log .Debug ("\u0047e\u0074\u0074\u0069\u006e\u0067\u0020\u0050\u0074\u0061\u0055\u004c \u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_bd );
return _ag .Wrap (_bd ,_ca ,"\u0050\u0074\u0061\u0055\u004c\u0020\u0047\u0065\u006fm\u0065\u0074\u0072\u0079");};_ee ,_bd =_gd .ClassIDs .Get (_ef );if _bd !=nil {_ad .Log .Debug ("\u0047\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0043\u006c\u0061s\u0073\u0049\u0044\u0020\u0066\u0061\u0069\u006c\u0065\u0064:\u0020\u0025\u0076",_bd );
return _ag .Wrap (_bd ,_ca ,"\u0043l\u0061\u0073\u0073\u0049\u0044");};_ae ,_bd =_gd .UndilatedTemplates .GetBitmap (_ee );if _bd !=nil {_ad .Log .Debug ("\u0047\u0065t\u0074\u0069\u006e\u0067 \u0055\u006ed\u0069\u006c\u0061\u0074\u0065\u0064\u0054\u0065m\u0070\u006c\u0061\u0074\u0065\u0073\u0020\u0066\u0061\u0069\u006c\u0065d\u003a\u0020\u0025\u0076",_bd );
return _ag .Wrap (_bd ,_ca ,"\u0055\u006e\u0064\u0069la\u0074\u0065\u0064\u0020\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0073");};_aa =_ae .Height ;_gd .PtaLL .AddPoint (_ab ,_ba +float32 (_aa ));};return nil ;};func DefaultSettings ()Settings {_dfg :=&Settings {};
_dfg .SetDefault ();return *_dfg };func (_gg *Classer )getULCorners (_abc *_g .Bitmap ,_af *_g .Boxes )error {const _de ="\u0067\u0065\u0074U\u004c\u0043\u006f\u0072\u006e\u0065\u0072\u0073";if _abc ==nil {return _ag .Error (_de ,"\u006e\u0069l\u0020\u0069\u006da\u0067\u0065\u0020\u0062\u0069\u0074\u006d\u0061\u0070");
};if _af ==nil {return _ag .Error (_de ,"\u006e\u0069\u006c\u0020\u0062\u006f\u0075\u006e\u0064\u0073");};if _gg .PtaUL ==nil {_gg .PtaUL =&_g .Points {};};_fc :=len (*_af );var (_fa ,_aee ,_cg ,_da int ;_cgc ,_agdc ,_aga ,_cec float32 ;_ff error ;_ge *_d .Rectangle ;
_bb *_g .Bitmap ;_bfa _d .Point ;);for _ffg :=0;_ffg < _fc ;_ffg ++{_fa =_gg .BaseIndex +_ffg ;if _cgc ,_agdc ,_ff =_gg .CentroidPoints .GetGeometry (_fa );_ff !=nil {return _ag .Wrap (_ff ,_de ,"\u0043\u0065\u006e\u0074\u0072\u006f\u0069\u0064\u0050o\u0069\u006e\u0074\u0073");
};if _aee ,_ff =_gg .ClassIDs .Get (_fa );_ff !=nil {return _ag .Wrap (_ff ,_de ,"\u0043\u006c\u0061s\u0073\u0049\u0044\u0073\u002e\u0047\u0065\u0074");};if _aga ,_cec ,_ff =_gg .CentroidPointsTemplates .GetGeometry (_aee );_ff !=nil {return _ag .Wrap (_ff ,_de ,"\u0043\u0065\u006etr\u006f\u0069\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0073");
};_gaa :=_aga -_cgc ;_bdc :=_cec -_agdc ;if _gaa >=0{_cg =int (_gaa +0.5);}else {_cg =int (_gaa -0.5);};if _bdc >=0{_da =int (_bdc +0.5);}else {_da =int (_bdc -0.5);};if _ge ,_ff =_af .Get (_ffg );_ff !=nil {return _ag .Wrap (_ff ,_de ,"");};_fdf ,_ed :=_ge .Min .X ,_ge .Min .Y ;
_bb ,_ff =_gg .UndilatedTemplates .GetBitmap (_aee );if _ff !=nil {return _ag .Wrap (_ff ,_de ,"\u0055\u006e\u0064\u0069\u006c\u0061\u0074\u0065\u0064\u0054e\u006d\u0070\u006c\u0061\u0074\u0065\u0073.\u0047\u0065\u0074\u0028\u0069\u0043\u006c\u0061\u0073\u0073\u0029");
};_bfa ,_ff =_agc (_abc ,_fdf ,_ed ,_cg ,_da ,_bb );if _ff !=nil {return _ag .Wrap (_ff ,_de ,"");};_gg .PtaUL .AddPoint (float32 (_fdf -_cg +_bfa .X ),float32 (_ed -_da +_bfa .Y ));};return nil ;};const (MaxDiffWidth =2;MaxDiffHeight =2;);const (MaxConnCompWidth =350;
MaxCharCompWidth =350;MaxWordCompWidth =1000;MaxCompHeight =120;);var TwoByTwoWalk =[]int {0,0,0,1,-1,0,0,-1,1,0,-1,1,1,1,-1,-1,1,-1,0,-2,2,0,0,2,-2,0,-1,-2,1,-2,2,-1,2,1,1,2,-1,2,-2,1,-2,-1,-2,-2,2,-2,2,2,-2,2};func _fcd (_aed *Classer ,_gcae *_g .Bitmap )*similarTemplatesFinder {return &similarTemplatesFinder {Width :_gcae .Width ,Height :_gcae .Height ,Classer :_aed };
};const (RankHaus Method =iota ;Correlation ;);func (_ce *Classer )addPageComponents (_cc *_g .Bitmap ,_ea *_g .Boxes ,_eb *_g .Bitmaps ,_agd int ,_bf Method )error {const _bg ="\u0043l\u0061\u0073\u0073\u0065r\u002e\u0041\u0064\u0064\u0050a\u0067e\u0043o\u006d\u0070\u006f\u006e\u0065\u006e\u0074s";
if _cc ==nil {return _ag .Error (_bg ,"\u006e\u0069\u006c\u0020\u0069\u006e\u0070\u0075\u0074 \u0070\u0061\u0067\u0065");};if _ea ==nil ||_eb ==nil ||len (*_ea )==0{_ad .Log .Trace ("\u0041\u0064\u0064P\u0061\u0067\u0065\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u003a\u0020\u0025\u0073\u002e\u0020\u004e\u006f\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065n\u0074\u0073\u0020\u0066\u006f\u0075\u006e\u0064",_cc );
return nil ;};var _fd error ;switch _bf {case RankHaus :_fd =_ce .classifyRankHaus (_ea ,_eb ,_agd );case Correlation :_fd =_ce .classifyCorrelation (_ea ,_eb ,_agd );default:_ad .Log .Debug ("\u0055\u006ek\u006e\u006f\u0077\u006e\u0020\u0063\u006c\u0061\u0073\u0073\u0069\u0066\u0079\u0020\u006d\u0065\u0074\u0068\u006f\u0064\u003a\u0020'%\u0076\u0027",_bf );
return _ag .Error (_bg ,"\u0075\u006e\u006bno\u0077\u006e\u0020\u0063\u006c\u0061\u0073\u0073\u0069\u0066\u0079\u0020\u006d\u0065\u0074\u0068\u006f\u0064");};if _fd !=nil {return _ag .Wrap (_fd ,_bg ,"");};if _fd =_ce .getULCorners (_cc ,_ea );_fd !=nil {return _ag .Wrap (_fd ,_bg ,"");
};_gae :=len (*_ea );_ce .BaseIndex +=_gae ;if _fd =_ce .ComponentsNumber .Add (_gae );_fd !=nil {return _ag .Wrap (_fd ,_bg ,"");};return nil ;};type similarTemplatesFinder struct{Classer *Classer ;Width int ;Height int ;Index int ;CurrentNumbers []int ;
N int ;};const JbAddedPixels =6;var _cee bool ;func (_daa *similarTemplatesFinder )Next ()int {var (_fgf ,_dcc ,_bcda ,_bgc int ;_cgab bool ;_ded *_g .Bitmap ;_dgf error ;);for {if _daa .Index >=25{return -1;};_dcc =_daa .Width +TwoByTwoWalk [2*_daa .Index ];
_fgf =_daa .Height +TwoByTwoWalk [2*_daa .Index +1];if _fgf < 1||_dcc < 1{_daa .Index ++;continue ;};if len (_daa .CurrentNumbers )==0{_daa .CurrentNumbers ,_cgab =_daa .Classer .TemplatesSize .GetSlice (uint64 (_dcc )*uint64 (_fgf ));if !_cgab {_daa .Index ++;
continue ;};_daa .N =0;};_bcda =len (_daa .CurrentNumbers );for ;_daa .N < _bcda ;_daa .N ++{_bgc =_daa .CurrentNumbers [_daa .N ];_ded ,_dgf =_daa .Classer .DilatedTemplates .GetBitmap (_bgc );if _dgf !=nil {_ad .Log .Debug ("\u0046\u0069\u006e\u0064\u004e\u0065\u0078\u0074\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u003a\u0020\u0074\u0065\u006d\u0070\u006c\u0061t\u0065\u0020\u006e\u006f\u0074 \u0066\u006fu\u006e\u0064\u003a\u0020");
return 0;};if _ded .Width -2*JbAddedPixels ==_dcc &&_ded .Height -2*JbAddedPixels ==_fgf {return _bgc ;};};_daa .Index ++;_daa .CurrentNumbers =nil ;};};func (_eag Settings )Validate ()error {const _abd ="\u0053\u0065\u0074\u0074\u0069\u006e\u0067\u0073\u002e\u0056\u0061\u006ci\u0064\u0061\u0074\u0065";
if _eag .Thresh < 0.4||_eag .Thresh > 0.98{return _ag .Error (_abd ,"\u006a\u0062i\u0067\u0032\u0020\u0065\u006e\u0063\u006f\u0064\u0065\u0072\u0020\u0074\u0068\u0072\u0065\u0073\u0068\u0020\u006e\u006f\u0074\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u005b\u0030\u002e\u0034\u0020\u002d\u0020\u0030\u002e\u0039\u0038\u005d");
};if _eag .WeightFactor < 0.0||_eag .WeightFactor > 1.0{return _ag .Error (_abd ,"\u006a\u0062i\u0067\u0032\u0020\u0065\u006ec\u006f\u0064\u0065\u0072\u0020w\u0065\u0069\u0067\u0068\u0074\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u006e\u006f\u0074\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u005b\u0030\u002e\u0030\u0020\u002d\u0020\u0031\u002e\u0030\u005d");
};if _eag .RankHaus < 0.5||_eag .RankHaus > 1.0{return _ag .Error (_abd ,"\u006a\u0062\u0069\u0067\u0032\u0020\u0065\u006e\u0063\u006f\u0064\u0065\u0072\u0020\u0072a\u006e\u006b\u0020\u0068\u0061\u0075\u0073\u0020\u0076\u0061\u006c\u0075\u0065 \u006e\u006f\u0074\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065 [\u0030\u002e\u0035\u0020\u002d\u0020\u0031\u002e\u0030\u005d");
};if _eag .SizeHaus < 1||_eag .SizeHaus > 10{return _ag .Error (_abd ,"\u006a\u0062\u0069\u0067\u0032 \u0065\u006e\u0063\u006f\u0064\u0065\u0072\u0020\u0073\u0069\u007a\u0065\u0020h\u0061\u0075\u0073\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006e\u006f\u0074\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u005b\u0031\u0020\u002d\u0020\u0031\u0030]");
};switch _eag .Components {case _g .ComponentConn ,_g .ComponentCharacters ,_g .ComponentWords :default:return _ag .Error (_abd ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0063\u006c\u0061\u0073s\u0065r\u0020c\u006f\u006d\u0070\u006f\u006e\u0065\u006et");
};return nil ;};func (_efd *Classer )classifyCorrelation (_abb *_g .Boxes ,_eaf *_g .Bitmaps ,_ec int )error {const _be ="\u0063\u006c\u0061\u0073si\u0066\u0079\u0043\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e";if _abb ==nil {return _ag .Error (_be ,"\u006e\u0065\u0077\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0020\u0062\u006f\u0075\u006e\u0064\u0069\u006e\u0067\u0020\u0062o\u0078\u0065\u0073\u0020\u006eo\u0074\u0020f\u006f\u0075\u006e\u0064");
};if _eaf ==nil {return _ag .Error (_be ,"\u006e\u0065wC\u006f\u006d\u0070o\u006e\u0065\u006e\u0074s b\u0069tm\u0061\u0070\u0020\u0061\u0072\u0072\u0061y \u006e\u006f\u0074\u0020\u0066\u006f\u0075n\u0064");};_cfa :=len (_eaf .Values );if _cfa ==0{_ad .Log .Debug ("\u0063l\u0061\u0073s\u0069\u0066\u0079C\u006f\u0072\u0072\u0065\u006c\u0061\u0074i\u006f\u006e\u0020\u002d\u0020\u0070r\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0070\u0069\u0078\u0061s\u0020\u0069\u0073\u0020\u0065\u006d\u0070\u0074\u0079");
return nil ;};var (_bgf ,_efg *_g .Bitmap ;_cfc error ;);_egef :=&_g .Bitmaps {Values :make ([]*_g .Bitmap ,_cfa )};for _bgb ,_dg :=range _eaf .Values {_efg ,_cfc =_dg .AddBorderGeneral (JbAddedPixels ,JbAddedPixels ,JbAddedPixels ,JbAddedPixels ,0);if _cfc !=nil {return _ag .Wrap (_cfc ,_be ,"");
};_egef .Values [_bgb ]=_efg ;};_cbf :=_efd .FgTemplates ;_bba :=_g .MakePixelSumTab8 ();_gea :=_g .MakePixelCentroidTab8 ();_ceb :=make ([]int ,_cfa );_ebc :=make ([][]int ,_cfa );_bca :=_g .Points (make ([]_g .Point ,_cfa ));_eec :=&_bca ;var (_aaa ,_cde int ;
_aad ,_afc ,_bcd int ;_aef ,_abe int ;_ecc byte ;);for _gag ,_cbfb :=range _egef .Values {_ebc [_gag ]=make ([]int ,_cbfb .Height );_aaa =0;_cde =0;_afc =(_cbfb .Height -1)*_cbfb .RowStride ;_aad =0;for _abe =_cbfb .Height -1;_abe >=0;_abe ,_afc =_abe -1,_afc -_cbfb .RowStride {_ebc [_gag ][_abe ]=_aad ;
_bcd =0;for _aef =0;_aef < _cbfb .RowStride ;_aef ++{_ecc =_cbfb .Data [_afc +_aef ];_bcd +=_bba [_ecc ];_aaa +=_gea [_ecc ]+_aef *8*_bba [_ecc ];};_aad +=_bcd ;_cde +=_bcd *_abe ;};_ceb [_gag ]=_aad ;if _aad > 0{(*_eec )[_gag ]=_g .Point {X :float32 (_aaa )/float32 (_aad ),Y :float32 (_cde )/float32 (_aad )};
}else {(*_eec )[_gag ]=_g .Point {X :float32 (_cbfb .Width )/float32 (2),Y :float32 (_cbfb .Height )/float32 (2)};};};if _cfc =_efd .CentroidPoints .Add (_eec );_cfc !=nil {return _ag .Wrap (_cfc ,_be ,"\u0063\u0065\u006et\u0072\u006f\u0069\u0064\u0020\u0061\u0064\u0064");
};var (_fbg ,_bbaf ,_cebg int ;_bgfa float64 ;_deg ,_bde ,_dca ,_edf float32 ;_cdef ,_ebd _g .Point ;_cab bool ;_dd *similarTemplatesFinder ;_db int ;_df *_g .Bitmap ;_cge *_d .Rectangle ;_dbd *_g .Bitmaps ;);for _db ,_efg =range _egef .Values {_bbaf =_ceb [_db ];
if _deg ,_bde ,_cfc =_eec .GetGeometry (_db );_cfc !=nil {return _ag .Wrap (_cfc ,_be ,"\u0070t\u0061\u0020\u002d\u0020\u0069");};_cab =false ;_aac :=len (_efd .UndilatedTemplates .Values );_dd =_fcd (_efd ,_efg );for _ecb :=_dd .Next ();_ecb > -1;{if _df ,_cfc =_efd .UndilatedTemplates .GetBitmap (_ecb );
_cfc !=nil {return _ag .Wrap (_cfc ,_be ,"\u0075\u006e\u0069dl\u0061\u0074\u0065\u0064\u005b\u0069\u0063\u006c\u0061\u0073\u0073\u005d\u0020\u003d\u0020\u0062\u006d\u0032");};if _cebg ,_cfc =_cbf .GetInt (_ecb );_cfc !=nil {_ad .Log .Trace ("\u0046\u0047\u0020T\u0065\u006d\u0070\u006ca\u0074\u0065\u0020\u005b\u0069\u0063\u006ca\u0073\u0073\u005d\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_cfc );
};if _dca ,_edf ,_cfc =_efd .CentroidPointsTemplates .GetGeometry (_ecb );_cfc !=nil {return _ag .Wrap (_cfc ,_be ,"\u0043\u0065\u006e\u0074\u0072\u006f\u0069\u0064\u0050\u006f\u0069\u006e\u0074T\u0065\u006d\u0070\u006c\u0061\u0074e\u0073\u005b\u0069\u0063\u006c\u0061\u0073\u0073\u005d\u0020\u003d\u0020\u00782\u002c\u0079\u0032\u0020");
};if _efd .Settings .WeightFactor > 0.0{if _fbg ,_cfc =_efd .TemplateAreas .Get (_ecb );_cfc !=nil {_ad .Log .Trace ("\u0054\u0065\u006dp\u006c\u0061\u0074\u0065A\u0072\u0065\u0061\u0073\u005b\u0069\u0063l\u0061\u0073\u0073\u005d\u0020\u003d\u0020\u0061\u0072\u0065\u0061\u0020\u0025\u0076",_cfc );
};_bgfa =_efd .Settings .Thresh +(1.0-_efd .Settings .Thresh )*_efd .Settings .WeightFactor *float64 (_cebg )/float64 (_fbg );}else {_bgfa =_efd .Settings .Thresh ;};_ceeb ,_fg :=_g .CorrelationScoreThresholded (_efg ,_df ,_bbaf ,_cebg ,_cdef .X -_ebd .X ,_cdef .Y -_ebd .Y ,MaxDiffWidth ,MaxDiffHeight ,_bba ,_ebc [_db ],float32 (_bgfa ));
if _fg !=nil {return _ag .Wrap (_fg ,_be ,"");};if _cee {var (_gfba ,_cef float64 ;_bec ,_cfb int ;);_gfba ,_fg =_g .CorrelationScore (_efg ,_df ,_bbaf ,_cebg ,_deg -_dca ,_bde -_edf ,MaxDiffWidth ,MaxDiffHeight ,_bba );if _fg !=nil {return _ag .Wrap (_fg ,_be ,"d\u0065\u0062\u0075\u0067Co\u0072r\u0065\u006c\u0061\u0074\u0069o\u006e\u0053\u0063\u006f\u0072\u0065");
};_cef ,_fg =_g .CorrelationScoreSimple (_efg ,_df ,_bbaf ,_cebg ,_deg -_dca ,_bde -_edf ,MaxDiffWidth ,MaxDiffHeight ,_bba );if _fg !=nil {return _ag .Wrap (_fg ,_be ,"d\u0065\u0062\u0075\u0067Co\u0072r\u0065\u006c\u0061\u0074\u0069o\u006e\u0053\u0063\u006f\u0072\u0065");
};_bec =int (_a .Sqrt (_gfba *float64 (_bbaf )*float64 (_cebg )));_cfb =int (_a .Sqrt (_cef *float64 (_bbaf )*float64 (_cebg )));if (_gfba >=_bgfa )!=(_cef >=_bgfa ){return _ag .Errorf (_be ,"\u0064\u0065\u0062\u0075\u0067\u0020\u0043\u006f\u0072r\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0020\u0073\u0063\u006f\u0072\u0065\u0020\u006d\u0069\u0073\u006d\u0061\u0074\u0063\u0068\u0020-\u0020\u0025d\u0028\u00250\u002e\u0034\u0066\u002c\u0020\u0025\u0076\u0029\u0020\u0076\u0073\u0020\u0025d(\u0025\u0030\u002e\u0034\u0066\u002c\u0020\u0025\u0076)\u0020\u0025\u0030\u002e\u0034\u0066",_bec ,_gfba ,_gfba >=_bgfa ,_cfb ,_cef ,_cef >=_bgfa ,_gfba -_cef );
};if _gfba >=_bgfa !=_ceeb {return _ag .Errorf (_be ,"\u0064\u0065\u0062\u0075\u0067\u0020\u0043o\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e \u0073\u0063\u006f\u0072\u0065 \u004d\u0069\u0073\u006d\u0061t\u0063\u0068 \u0062\u0065\u0074w\u0065\u0065\u006e\u0020\u0063\u006frr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0020/\u0020\u0074\u0068\u0072\u0065s\u0068\u006f\u006c\u0064\u002e\u0020\u0043\u006f\u006dpa\u0072\u0069\u0073\u006f\u006e:\u0020\u0025\u0030\u002e\u0034\u0066\u0028\u0025\u0030\u002e\u0034\u0066\u002c\u0020\u0025\u0064\u0029\u0020\u003e\u003d\u0020\u00250\u002e\u0034\u0066\u0028\u0025\u0030\u002e\u0034\u0066\u0029\u0020\u0076\u0073\u0020\u0025\u0076",_gfba ,_gfba *float64 (_bbaf )*float64 (_cebg ),_bec ,_bgfa ,float32 (_bgfa )*float32 (_bbaf )*float32 (_cebg ),_ceeb );
};};if _ceeb {_cab =true ;if _fg =_efd .ClassIDs .Add (_ecb );_fg !=nil {return _ag .Wrap (_fg ,_be ,"\u006f\u0076\u0065\u0072\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006c\u0064");};if _fg =_efd .ComponentPageNumbers .Add (_ec );_fg !=nil {return _ag .Wrap (_fg ,_be ,"\u006f\u0076\u0065\u0072\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006c\u0064");
};if _efd .Settings .KeepClassInstances {if _bgf ,_fg =_eaf .GetBitmap (_db );_fg !=nil {return _ag .Wrap (_fg ,_be ,"\u004b\u0065\u0065\u0070Cl\u0061\u0073\u0073\u0049\u006e\u0073\u0074\u0061\u006e\u0063\u0065\u0073\u0020\u002d \u0069");};if _dbd ,_fg =_efd .ClassInstances .GetBitmaps (_ecb );
_fg !=nil {return _ag .Wrap (_fg ,_be ,"K\u0065\u0065\u0070\u0043\u006c\u0061s\u0073\u0049\u006e\u0073\u0074\u0061\u006e\u0063\u0065s\u0020\u002d\u0020i\u0043l\u0061\u0073\u0073");};_dbd .AddBitmap (_bgf );if _cge ,_fg =_abb .Get (_db );_fg !=nil {return _ag .Wrap (_fg ,_be ,"\u004be\u0065p\u0043\u006c\u0061\u0073\u0073I\u006e\u0073t\u0061\u006e\u0063\u0065\u0073");
};_dbd .AddBox (_cge );};break ;};};if !_cab {if _cfc =_efd .ClassIDs .Add (_aac );_cfc !=nil {return _ag .Wrap (_cfc ,_be ,"\u0021\u0066\u006f\u0075\u006e\u0064");};if _cfc =_efd .ComponentPageNumbers .Add (_ec );_cfc !=nil {return _ag .Wrap (_cfc ,_be ,"\u0021\u0066\u006f\u0075\u006e\u0064");
};_dbd =&_g .Bitmaps {};if _bgf ,_cfc =_eaf .GetBitmap (_db );_cfc !=nil {return _ag .Wrap (_cfc ,_be ,"\u0021\u0066\u006f\u0075\u006e\u0064");};_dbd .AddBitmap (_bgf );_edg ,_ddg :=_bgf .Width ,_bgf .Height ;_ccc :=uint64 (_ddg )*uint64 (_edg );_efd .TemplatesSize .Add (_ccc ,_aac );
if _cge ,_cfc =_abb .Get (_db );_cfc !=nil {return _ag .Wrap (_cfc ,_be ,"\u0021\u0066\u006f\u0075\u006e\u0064");};_dbd .AddBox (_cge );_efd .ClassInstances .AddBitmaps (_dbd );_efd .CentroidPointsTemplates .AddPoint (_deg ,_bde );_efd .FgTemplates .AddInt (_bbaf );
_efd .UndilatedTemplates .AddBitmap (_bgf );_fbg =(_efg .Width -2*JbAddedPixels )*(_efg .Height -2*JbAddedPixels );if _cfc =_efd .TemplateAreas .Add (_fbg );_cfc !=nil {return _ag .Wrap (_cfc ,_be ,"\u0021\u0066\u006f\u0075\u006e\u0064");};};};_efd .NumberOfClasses =len (_efd .UndilatedTemplates .Values );
return nil ;};type Method int ;