//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package classer ;import (_e "github.com/unidoc/unipdf/v3/common";_cb "github.com/unidoc/unipdf/v3/internal/jbig2/basic";_eg "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";_fe "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_f "image";_c "math";
);type Settings struct{MaxCompWidth int ;MaxCompHeight int ;SizeHaus int ;RankHaus float64 ;Thresh float64 ;WeightFactor float64 ;KeepClassInstances bool ;Components _eg .Component ;Method Method ;};func (_dff *Classer )classifyRankHaus (_ecg *_eg .Boxes ,_daaf *_eg .Bitmaps ,_geg int )error {const _dgc ="\u0063\u006ca\u0073\u0073\u0069f\u0079\u0052\u0061\u006e\u006b\u0048\u0061\u0075\u0073";
if _ecg ==nil {return _fe .Error (_dgc ,"\u0062\u006fx\u0061\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if _daaf ==nil {return _fe .Error (_dgc ,"\u0070\u0069x\u0061\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};_abdc :=len (_daaf .Values );if _abdc ==0{return _fe .Error (_dgc ,"e\u006dp\u0074\u0079\u0020\u006e\u0065\u0077\u0020\u0063o\u006d\u0070\u006f\u006een\u0074\u0073");};_fed :=_daaf .CountPixels ();_daag :=_dff .Settings .SizeHaus ;_db :=_eg .SelCreateBrick (_daag ,_daag ,_daag /2,_daag /2,_eg .SelHit );
_gegg :=&_eg .Bitmaps {Values :make ([]*_eg .Bitmap ,_abdc )};_ced :=&_eg .Bitmaps {Values :make ([]*_eg .Bitmap ,_abdc )};var (_cac ,_dgg ,_fcf *_eg .Bitmap ;_abf error ;);for _dba :=0;_dba < _abdc ;_dba ++{_cac ,_abf =_daaf .GetBitmap (_dba );if _abf !=nil {return _fe .Wrap (_abf ,_dgc ,"");
};_dgg ,_abf =_cac .AddBorderGeneral (JbAddedPixels ,JbAddedPixels ,JbAddedPixels ,JbAddedPixels ,0);if _abf !=nil {return _fe .Wrap (_abf ,_dgc ,"");};_fcf ,_abf =_eg .Dilate (nil ,_dgg ,_db );if _abf !=nil {return _fe .Wrap (_abf ,_dgc ,"");};_gegg .Values [_abdc ]=_dgg ;
_ced .Values [_abdc ]=_fcf ;};_ffa ,_abf :=_eg .Centroids (_gegg .Values );if _abf !=nil {return _fe .Wrap (_abf ,_dgc ,"");};if _abf =_ffa .Add (_dff .CentroidPoints );_abf !=nil {_e .Log .Trace ("\u004e\u006f\u0020\u0063en\u0074\u0072\u006f\u0069\u0064\u0073\u0020\u0074\u006f\u0020\u0061\u0064\u0064");
};if _dff .Settings .RankHaus ==1.0{_abf =_dff .classifyRankHouseOne (_ecg ,_daaf ,_gegg ,_ced ,_ffa ,_geg );}else {_abf =_dff .classifyRankHouseNonOne (_ecg ,_daaf ,_gegg ,_ced ,_ffa ,_fed ,_geg );};if _abf !=nil {return _fe .Wrap (_abf ,_dgc ,"");};return nil ;
};type similarTemplatesFinder struct{Classer *Classer ;Width int ;Height int ;Index int ;CurrentNumbers []int ;N int ;};func (_ac *Classer )verifyMethod (_feb Method )error {if _feb !=RankHaus &&_feb !=Correlation {return _fe .Error ("\u0076\u0065\u0072i\u0066\u0079\u004d\u0065\u0074\u0068\u006f\u0064","\u0069\u006e\u0076\u0061li\u0064\u0020\u0063\u006c\u0061\u0073\u0073\u0065\u0072\u0020\u006d\u0065\u0074\u0068o\u0064");
};return nil ;};func DefaultSettings ()Settings {_ccg :=&Settings {};_ccg .SetDefault ();return *_ccg };const (MaxDiffWidth =2;MaxDiffHeight =2;);func (_gea *Classer )getULCorners (_dad *_eg .Bitmap ,_ab *_eg .Boxes )error {const _ega ="\u0067\u0065\u0074U\u004c\u0043\u006f\u0072\u006e\u0065\u0072\u0073";
if _dad ==nil {return _fe .Error (_ega ,"\u006e\u0069l\u0020\u0069\u006da\u0067\u0065\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _ab ==nil {return _fe .Error (_ega ,"\u006e\u0069\u006c\u0020\u0062\u006f\u0075\u006e\u0064\u0073");};if _gea .PtaUL ==nil {_gea .PtaUL =&_eg .Points {};
};_dg :=len (*_ab );var (_gf ,_ga ,_ggb ,_gef int ;_ba ,_ae ,_dcd ,_bf float32 ;_gd error ;_bde *_f .Rectangle ;_fdd *_eg .Bitmap ;_fac _f .Point ;);for _af :=0;_af < _dg ;_af ++{_gf =_gea .BaseIndex +_af ;if _ba ,_ae ,_gd =_gea .CentroidPoints .GetGeometry (_gf );
_gd !=nil {return _fe .Wrap (_gd ,_ega ,"\u0043\u0065\u006e\u0074\u0072\u006f\u0069\u0064\u0050o\u0069\u006e\u0074\u0073");};if _ga ,_gd =_gea .ClassIDs .Get (_gf );_gd !=nil {return _fe .Wrap (_gd ,_ega ,"\u0043\u006c\u0061s\u0073\u0049\u0044\u0073\u002e\u0047\u0065\u0074");
};if _dcd ,_bf ,_gd =_gea .CentroidPointsTemplates .GetGeometry (_ga );_gd !=nil {return _fe .Wrap (_gd ,_ega ,"\u0043\u0065\u006etr\u006f\u0069\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0073");};_facb :=_dcd -_ba ;
_ca :=_bf -_ae ;if _facb >=0{_ggb =int (_facb +0.5);}else {_ggb =int (_facb -0.5);};if _ca >=0{_gef =int (_ca +0.5);}else {_gef =int (_ca -0.5);};if _bde ,_gd =_ab .Get (_af );_gd !=nil {return _fe .Wrap (_gd ,_ega ,"");};_bc ,_efg :=_bde .Min .X ,_bde .Min .Y ;
_fdd ,_gd =_gea .UndilatedTemplates .GetBitmap (_ga );if _gd !=nil {return _fe .Wrap (_gd ,_ega ,"\u0055\u006e\u0064\u0069\u006c\u0061\u0074\u0065\u0064\u0054e\u006d\u0070\u006c\u0061\u0074\u0065\u0073.\u0047\u0065\u0074\u0028\u0069\u0043\u006c\u0061\u0073\u0073\u0029");
};_fac ,_gd =_bgc (_dad ,_bc ,_efg ,_ggb ,_gef ,_fdd );if _gd !=nil {return _fe .Wrap (_gd ,_ega ,"");};_gea .PtaUL .AddPoint (float32 (_bc -_ggb +_fac .X ),float32 (_efg -_gef +_fac .Y ));};return nil ;};type Classer struct{BaseIndex int ;Settings Settings ;
ComponentsNumber *_cb .IntSlice ;TemplateAreas *_cb .IntSlice ;Widths map[int ]int ;Heights map[int ]int ;NumberOfClasses int ;ClassInstances *_eg .BitmapsArray ;UndilatedTemplates *_eg .Bitmaps ;DilatedTemplates *_eg .Bitmaps ;TemplatesSize _cb .IntsMap ;
FgTemplates *_cb .NumSlice ;CentroidPoints *_eg .Points ;CentroidPointsTemplates *_eg .Points ;ClassIDs *_cb .IntSlice ;ComponentPageNumbers *_cb .IntSlice ;PtaUL *_eg .Points ;PtaLL *_eg .Points ;};func (_gad *Classer )classifyCorrelation (_dfg *_eg .Boxes ,_gefa *_eg .Bitmaps ,_bfb int )error {const _fb ="\u0063\u006c\u0061\u0073si\u0066\u0079\u0043\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e";
if _dfg ==nil {return _fe .Error (_fb ,"\u006e\u0065\u0077\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0020\u0062\u006f\u0075\u006e\u0064\u0069\u006e\u0067\u0020\u0062o\u0078\u0065\u0073\u0020\u006eo\u0074\u0020f\u006f\u0075\u006e\u0064");
};if _gefa ==nil {return _fe .Error (_fb ,"\u006e\u0065wC\u006f\u006d\u0070o\u006e\u0065\u006e\u0074s b\u0069tm\u0061\u0070\u0020\u0061\u0072\u0072\u0061y \u006e\u006f\u0074\u0020\u0066\u006f\u0075n\u0064");};_daf :=len (_gefa .Values );if _daf ==0{_e .Log .Debug ("\u0063l\u0061\u0073s\u0069\u0066\u0079C\u006f\u0072\u0072\u0065\u006c\u0061\u0074i\u006f\u006e\u0020\u002d\u0020\u0070r\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0070\u0069\u0078\u0061s\u0020\u0069\u0073\u0020\u0065\u006d\u0070\u0074\u0079");
return nil ;};var (_ag ,_gdb *_eg .Bitmap ;_fbc error ;);_dda :=&_eg .Bitmaps {Values :make ([]*_eg .Bitmap ,_daf )};for _fc ,_gc :=range _gefa .Values {_gdb ,_fbc =_gc .AddBorderGeneral (JbAddedPixels ,JbAddedPixels ,JbAddedPixels ,JbAddedPixels ,0);if _fbc !=nil {return _fe .Wrap (_fbc ,_fb ,"");
};_dda .Values [_fc ]=_gdb ;};_dcg :=_gad .FgTemplates ;_gaca :=_eg .MakePixelSumTab8 ();_cgc :=_eg .MakePixelCentroidTab8 ();_fgg :=make ([]int ,_daf );_agd :=make ([][]int ,_daf );_bge :=_eg .Points (make ([]_eg .Point ,_daf ));_gbe :=&_bge ;var (_bfg ,_ccd int ;
_agc ,_ecd ,_gcb int ;_de ,_dag int ;_ce byte ;);for _bfc ,_afe :=range _dda .Values {_agd [_bfc ]=make ([]int ,_afe .Height );_bfg =0;_ccd =0;_ecd =(_afe .Height -1)*_afe .RowStride ;_agc =0;for _dag =_afe .Height -1;_dag >=0;_dag ,_ecd =_dag -1,_ecd -_afe .RowStride {_agd [_bfc ][_dag ]=_agc ;
_gcb =0;for _de =0;_de < _afe .RowStride ;_de ++{_ce =_afe .Data [_ecd +_de ];_gcb +=_gaca [_ce ];_bfg +=_cgc [_ce ]+_de *8*_gaca [_ce ];};_agc +=_gcb ;_ccd +=_gcb *_dag ;};_fgg [_bfc ]=_agc ;if _agc > 0{(*_gbe )[_bfc ]=_eg .Point {X :float32 (_bfg )/float32 (_agc ),Y :float32 (_ccd )/float32 (_agc )};
}else {(*_gbe )[_bfc ]=_eg .Point {X :float32 (_afe .Width )/float32 (2),Y :float32 (_afe .Height )/float32 (2)};};};if _fbc =_gad .CentroidPoints .Add (_gbe );_fbc !=nil {return _fe .Wrap (_fbc ,_fb ,"\u0063\u0065\u006et\u0072\u006f\u0069\u0064\u0020\u0061\u0064\u0064");
};var (_dcc ,_gee ,_cad int ;_aec float64 ;_be ,_edcb ,_beg ,_ff float32 ;_dca ,_cae _eg .Point ;_abd bool ;_ddb *similarTemplatesFinder ;_gfb int ;_fec *_eg .Bitmap ;_dcag *_f .Rectangle ;_aaf *_eg .Bitmaps ;);for _gfb ,_gdb =range _dda .Values {_gee =_fgg [_gfb ];
if _be ,_edcb ,_fbc =_gbe .GetGeometry (_gfb );_fbc !=nil {return _fe .Wrap (_fbc ,_fb ,"\u0070t\u0061\u0020\u002d\u0020\u0069");};_abd =false ;_ggbg :=len (_gad .UndilatedTemplates .Values );_ddb =_fcef (_gad ,_gdb );for _acc :=_ddb .Next ();_acc > -1;
{if _fec ,_fbc =_gad .UndilatedTemplates .GetBitmap (_acc );_fbc !=nil {return _fe .Wrap (_fbc ,_fb ,"\u0075\u006e\u0069dl\u0061\u0074\u0065\u0064\u005b\u0069\u0063\u006c\u0061\u0073\u0073\u005d\u0020\u003d\u0020\u0062\u006d\u0032");};if _cad ,_fbc =_dcg .GetInt (_acc );
_fbc !=nil {_e .Log .Trace ("\u0046\u0047\u0020T\u0065\u006d\u0070\u006ca\u0074\u0065\u0020\u005b\u0069\u0063\u006ca\u0073\u0073\u005d\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_fbc );};if _beg ,_ff ,_fbc =_gad .CentroidPointsTemplates .GetGeometry (_acc );
_fbc !=nil {return _fe .Wrap (_fbc ,_fb ,"\u0043\u0065\u006e\u0074\u0072\u006f\u0069\u0064\u0050\u006f\u0069\u006e\u0074T\u0065\u006d\u0070\u006c\u0061\u0074e\u0073\u005b\u0069\u0063\u006c\u0061\u0073\u0073\u005d\u0020\u003d\u0020\u00782\u002c\u0079\u0032\u0020");
};if _gad .Settings .WeightFactor > 0.0{if _dcc ,_fbc =_gad .TemplateAreas .Get (_acc );_fbc !=nil {_e .Log .Trace ("\u0054\u0065\u006dp\u006c\u0061\u0074\u0065A\u0072\u0065\u0061\u0073\u005b\u0069\u0063l\u0061\u0073\u0073\u005d\u0020\u003d\u0020\u0061\u0072\u0065\u0061\u0020\u0025\u0076",_fbc );
};_aec =_gad .Settings .Thresh +(1.0-_gad .Settings .Thresh )*_gad .Settings .WeightFactor *float64 (_cad )/float64 (_dcc );}else {_aec =_gad .Settings .Thresh ;};_fee ,_aff :=_eg .CorrelationScoreThresholded (_gdb ,_fec ,_gee ,_cad ,_dca .X -_cae .X ,_dca .Y -_cae .Y ,MaxDiffWidth ,MaxDiffHeight ,_gaca ,_agd [_gfb ],float32 (_aec ));
if _aff !=nil {return _fe .Wrap (_aff ,_fb ,"");};if _bff {var (_gfe ,_fgge float64 ;_edbe ,_ecc int ;);_gfe ,_aff =_eg .CorrelationScore (_gdb ,_fec ,_gee ,_cad ,_be -_beg ,_edcb -_ff ,MaxDiffWidth ,MaxDiffHeight ,_gaca );if _aff !=nil {return _fe .Wrap (_aff ,_fb ,"d\u0065\u0062\u0075\u0067Co\u0072r\u0065\u006c\u0061\u0074\u0069o\u006e\u0053\u0063\u006f\u0072\u0065");
};_fgge ,_aff =_eg .CorrelationScoreSimple (_gdb ,_fec ,_gee ,_cad ,_be -_beg ,_edcb -_ff ,MaxDiffWidth ,MaxDiffHeight ,_gaca );if _aff !=nil {return _fe .Wrap (_aff ,_fb ,"d\u0065\u0062\u0075\u0067Co\u0072r\u0065\u006c\u0061\u0074\u0069o\u006e\u0053\u0063\u006f\u0072\u0065");
};_edbe =int (_c .Sqrt (_gfe *float64 (_gee )*float64 (_cad )));_ecc =int (_c .Sqrt (_fgge *float64 (_gee )*float64 (_cad )));if (_gfe >=_aec )!=(_fgge >=_aec ){return _fe .Errorf (_fb ,"\u0064\u0065\u0062\u0075\u0067\u0020\u0043\u006f\u0072r\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0020\u0073\u0063\u006f\u0072\u0065\u0020\u006d\u0069\u0073\u006d\u0061\u0074\u0063\u0068\u0020-\u0020\u0025d\u0028\u00250\u002e\u0034\u0066\u002c\u0020\u0025\u0076\u0029\u0020\u0076\u0073\u0020\u0025d(\u0025\u0030\u002e\u0034\u0066\u002c\u0020\u0025\u0076)\u0020\u0025\u0030\u002e\u0034\u0066",_edbe ,_gfe ,_gfe >=_aec ,_ecc ,_fgge ,_fgge >=_aec ,_gfe -_fgge );
};if _gfe >=_aec !=_fee {return _fe .Errorf (_fb ,"\u0064\u0065\u0062\u0075\u0067\u0020\u0043o\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e \u0073\u0063\u006f\u0072\u0065 \u004d\u0069\u0073\u006d\u0061t\u0063\u0068 \u0062\u0065\u0074w\u0065\u0065\u006e\u0020\u0063\u006frr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0020/\u0020\u0074\u0068\u0072\u0065s\u0068\u006f\u006c\u0064\u002e\u0020\u0043\u006f\u006dpa\u0072\u0069\u0073\u006f\u006e:\u0020\u0025\u0030\u002e\u0034\u0066\u0028\u0025\u0030\u002e\u0034\u0066\u002c\u0020\u0025\u0064\u0029\u0020\u003e\u003d\u0020\u00250\u002e\u0034\u0066\u0028\u0025\u0030\u002e\u0034\u0066\u0029\u0020\u0076\u0073\u0020\u0025\u0076",_gfe ,_gfe *float64 (_gee )*float64 (_cad ),_edbe ,_aec ,float32 (_aec )*float32 (_gee )*float32 (_cad ),_fee );
};};if _fee {_abd =true ;if _aff =_gad .ClassIDs .Add (_acc );_aff !=nil {return _fe .Wrap (_aff ,_fb ,"\u006f\u0076\u0065\u0072\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006c\u0064");};if _aff =_gad .ComponentPageNumbers .Add (_bfb );_aff !=nil {return _fe .Wrap (_aff ,_fb ,"\u006f\u0076\u0065\u0072\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006c\u0064");
};if _gad .Settings .KeepClassInstances {if _ag ,_aff =_gefa .GetBitmap (_gfb );_aff !=nil {return _fe .Wrap (_aff ,_fb ,"\u004b\u0065\u0065\u0070Cl\u0061\u0073\u0073\u0049\u006e\u0073\u0074\u0061\u006e\u0063\u0065\u0073\u0020\u002d \u0069");};if _aaf ,_aff =_gad .ClassInstances .GetBitmaps (_acc );
_aff !=nil {return _fe .Wrap (_aff ,_fb ,"K\u0065\u0065\u0070\u0043\u006c\u0061s\u0073\u0049\u006e\u0073\u0074\u0061\u006e\u0063\u0065s\u0020\u002d\u0020i\u0043l\u0061\u0073\u0073");};_aaf .AddBitmap (_ag );if _dcag ,_aff =_dfg .Get (_gfb );_aff !=nil {return _fe .Wrap (_aff ,_fb ,"\u004be\u0065p\u0043\u006c\u0061\u0073\u0073I\u006e\u0073t\u0061\u006e\u0063\u0065\u0073");
};_aaf .AddBox (_dcag );};break ;};};if !_abd {if _fbc =_gad .ClassIDs .Add (_ggbg );_fbc !=nil {return _fe .Wrap (_fbc ,_fb ,"\u0021\u0066\u006f\u0075\u006e\u0064");};if _fbc =_gad .ComponentPageNumbers .Add (_bfb );_fbc !=nil {return _fe .Wrap (_fbc ,_fb ,"\u0021\u0066\u006f\u0075\u006e\u0064");
};_aaf =&_eg .Bitmaps {};if _ag ,_fbc =_gefa .GetBitmap (_gfb );_fbc !=nil {return _fe .Wrap (_fbc ,_fb ,"\u0021\u0066\u006f\u0075\u006e\u0064");};_aaf .AddBitmap (_ag );_acb ,_geae :=_ag .Width ,_ag .Height ;_cda :=uint64 (_geae )*uint64 (_acb );_gad .TemplatesSize .Add (_cda ,_ggbg );
if _dcag ,_fbc =_dfg .Get (_gfb );_fbc !=nil {return _fe .Wrap (_fbc ,_fb ,"\u0021\u0066\u006f\u0075\u006e\u0064");};_aaf .AddBox (_dcag );_gad .ClassInstances .AddBitmaps (_aaf );_gad .CentroidPointsTemplates .AddPoint (_be ,_edcb );_gad .FgTemplates .AddInt (_gee );
_gad .UndilatedTemplates .AddBitmap (_ag );_dcc =(_gdb .Width -2*JbAddedPixels )*(_gdb .Height -2*JbAddedPixels );if _fbc =_gad .TemplateAreas .Add (_dcc );_fbc !=nil {return _fe .Wrap (_fbc ,_fb ,"\u0021\u0066\u006f\u0075\u006e\u0064");};};};_gad .NumberOfClasses =len (_gad .UndilatedTemplates .Values );
return nil ;};func _fcef (_eac *Classer ,_gbf *_eg .Bitmap )*similarTemplatesFinder {return &similarTemplatesFinder {Width :_gbf .Width ,Height :_gbf .Height ,Classer :_eac };};var TwoByTwoWalk =[]int {0,0,0,1,-1,0,0,-1,1,0,-1,1,1,1,-1,-1,1,-1,0,-2,2,0,0,2,-2,0,-1,-2,1,-2,2,-1,2,1,1,2,-1,2,-2,1,-2,-1,-2,-2,2,-2,2,2,-2,2};
func (_eef *Settings )SetDefault (){if _eef .MaxCompWidth ==0{switch _eef .Components {case _eg .ComponentConn :_eef .MaxCompWidth =MaxConnCompWidth ;case _eg .ComponentCharacters :_eef .MaxCompWidth =MaxCharCompWidth ;case _eg .ComponentWords :_eef .MaxCompWidth =MaxWordCompWidth ;
};};if _eef .MaxCompHeight ==0{_eef .MaxCompHeight =MaxCompHeight ;};if _eef .Thresh ==0.0{_eef .Thresh =0.9;};if _eef .WeightFactor ==0.0{_eef .WeightFactor =0.75;};if _eef .RankHaus ==0.0{_eef .RankHaus =0.97;};if _eef .SizeHaus ==0{_eef .SizeHaus =2;
};};func (_cff *Classer )classifyRankHouseOne (_dab *_eg .Boxes ,_abe ,_gaa ,_ecdd *_eg .Bitmaps ,_begd *_eg .Points ,_ccc int )(_gdg error ){const _add ="\u0043\u006c\u0061\u0073s\u0065\u0072\u002e\u0063\u006c\u0061\u0073\u0073\u0069\u0066y\u0052a\u006e\u006b\u0048\u006f\u0075\u0073\u0065O\u006e\u0065";
var (_fad ,_edbd ,_ada ,_dcdd float32 ;_cfa int ;_cacd ,_acg ,_ecb ,_eag ,_agb *_eg .Bitmap ;_dfa ,_aecf bool ;);for _caf :=0;_caf < len (_abe .Values );_caf ++{_acg =_gaa .Values [_caf ];_ecb =_ecdd .Values [_caf ];_fad ,_edbd ,_gdg =_begd .GetGeometry (_caf );
if _gdg !=nil {return _fe .Wrapf (_gdg ,_add ,"\u0066\u0069\u0072\u0073\u0074\u0020\u0067\u0065\u006fm\u0065\u0074\u0072\u0079");};_gga :=len (_cff .UndilatedTemplates .Values );_dfa =false ;_dagf :=_fcef (_cff ,_acg );for _cfa =_dagf .Next ();_cfa > -1;
{_eag ,_gdg =_cff .UndilatedTemplates .GetBitmap (_cfa );if _gdg !=nil {return _fe .Wrap (_gdg ,_add ,"\u0062\u006d\u0033");};_agb ,_gdg =_cff .DilatedTemplates .GetBitmap (_cfa );if _gdg !=nil {return _fe .Wrap (_gdg ,_add ,"\u0062\u006d\u0034");};_ada ,_dcdd ,_gdg =_cff .CentroidPointsTemplates .GetGeometry (_cfa );
if _gdg !=nil {return _fe .Wrap (_gdg ,_add ,"\u0043\u0065\u006e\u0074\u0072\u006f\u0069\u0064\u0054\u0065\u006d\u0070l\u0061\u0074\u0065\u0073");};_aecf ,_gdg =_eg .HausTest (_acg ,_ecb ,_eag ,_agb ,_fad -_ada ,_edbd -_dcdd ,MaxDiffWidth ,MaxDiffHeight );
if _gdg !=nil {return _fe .Wrap (_gdg ,_add ,"");};if _aecf {_dfa =true ;if _gdg =_cff .ClassIDs .Add (_cfa );_gdg !=nil {return _fe .Wrap (_gdg ,_add ,"");};if _gdg =_cff .ComponentPageNumbers .Add (_ccc );_gdg !=nil {return _fe .Wrap (_gdg ,_add ,"");
};if _cff .Settings .KeepClassInstances {_baa ,_cfg :=_cff .ClassInstances .GetBitmaps (_cfa );if _cfg !=nil {return _fe .Wrap (_cfg ,_add ,"\u004be\u0065\u0070\u0050\u0069\u0078\u0061a");};_cacd ,_cfg =_abe .GetBitmap (_caf );if _cfg !=nil {return _fe .Wrap (_cfg ,_add ,"\u004be\u0065\u0070\u0050\u0069\u0078\u0061a");
};_baa .AddBitmap (_cacd );_eaa ,_cfg :=_dab .Get (_caf );if _cfg !=nil {return _fe .Wrap (_cfg ,_add ,"\u004be\u0065\u0070\u0050\u0069\u0078\u0061a");};_baa .AddBox (_eaa );};break ;};};if !_dfa {if _gdg =_cff .ClassIDs .Add (_gga );_gdg !=nil {return _fe .Wrap (_gdg ,_add ,"");
};if _gdg =_cff .ComponentPageNumbers .Add (_ccc );_gdg !=nil {return _fe .Wrap (_gdg ,_add ,"");};_fea :=&_eg .Bitmaps {};_cacd ,_gdg =_abe .GetBitmap (_caf );if _gdg !=nil {return _fe .Wrap (_gdg ,_add ,"\u0021\u0066\u006f\u0075\u006e\u0064");};_fea .Values =append (_fea .Values ,_cacd );
_bffe ,_dbd :=_cacd .Width ,_cacd .Height ;_cff .TemplatesSize .Add (uint64 (_dbd )*uint64 (_bffe ),_gga );_ebec ,_efb :=_dab .Get (_caf );if _efb !=nil {return _fe .Wrap (_efb ,_add ,"\u0021\u0066\u006f\u0075\u006e\u0064");};_fea .AddBox (_ebec );_cff .ClassInstances .AddBitmaps (_fea );
_cff .CentroidPointsTemplates .AddPoint (_fad ,_edbd );_cff .UndilatedTemplates .AddBitmap (_acg );_cff .DilatedTemplates .AddBitmap (_ecb );};};return nil ;};func _bgc (_gec *_eg .Bitmap ,_ace ,_ee ,_ec ,_ecf int ,_bbd *_eg .Bitmap )(_gdc _f .Point ,_fg error ){const _cgg ="\u0066i\u006e\u0061\u006c\u0041l\u0069\u0067\u006e\u006d\u0065n\u0074P\u006fs\u0069\u0074\u0069\u006f\u006e\u0069\u006eg";
if _gec ==nil {return _gdc ,_fe .Error (_cgg ,"\u0073\u006f\u0075\u0072ce\u0020\u006e\u006f\u0074\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064");};if _bbd ==nil {return _gdc ,_fe .Error (_cgg ,"t\u0065\u006d\u0070\u006cat\u0065 \u006e\u006f\u0074\u0020\u0070r\u006f\u0076\u0069\u0064\u0065\u0064");
};_eca ,_edb :=_bbd .Width ,_bbd .Height ;_gab ,_ea :=_ace -_ec -JbAddedPixels ,_ee -_ecf -JbAddedPixels ;_e .Log .Trace ("\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0079\u003a\u0020\u0027\u0025\u0064'\u002c\u0020\u0077\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0068\u003a \u0027\u0025\u0064\u0027\u002c\u0020\u0062\u0078\u003a\u0020\u0027\u0025d'\u002c\u0020\u0062\u0079\u003a\u0020\u0027\u0025\u0064\u0027",_ace ,_ee ,_eca ,_edb ,_gab ,_ea );
_eae ,_fg :=_eg .Rect (_gab ,_ea ,_eca ,_edb );if _fg !=nil {return _gdc ,_fe .Wrap (_fg ,_cgg ,"");};_ad ,_ ,_fg :=_gec .ClipRectangle (_eae );if _fg !=nil {_e .Log .Error ("\u0043a\u006e\u0027\u0074\u0020\u0063\u006c\u0069\u0070\u0020\u0072\u0065c\u0074\u0061\u006e\u0067\u006c\u0065\u003a\u0020\u0025\u0076",_eae );
return _gdc ,_fe .Wrap (_fg ,_cgg ,"");};_daa :=_eg .New (_ad .Width ,_ad .Height );_dga :=_c .MaxInt32 ;var _cbf ,_cd ,_cdf ,_bdg ,_gecf int ;for _cbf =-1;_cbf <=1;_cbf ++{for _cd =-1;_cd <=1;_cd ++{if _ ,_fg =_eg .Copy (_daa ,_ad );_fg !=nil {return _gdc ,_fe .Wrap (_fg ,_cgg ,"");
};if _fg =_daa .RasterOperation (_cd ,_cbf ,_eca ,_edb ,_eg .PixSrcXorDst ,_bbd ,0,0);_fg !=nil {return _gdc ,_fe .Wrap (_fg ,_cgg ,"");};_cdf =_daa .CountPixels ();if _cdf < _dga {_bdg =_cd ;_gecf =_cbf ;_dga =_cdf ;};};};_gdc .X =_bdg ;_gdc .Y =_gecf ;
return _gdc ,nil ;};const JbAddedPixels =6;func (_da *Classer )ComputeLLCorners ()(_ggd error ){const _ef ="\u0043l\u0061\u0073\u0073\u0065\u0072\u002e\u0043\u006f\u006d\u0070\u0075t\u0065\u004c\u004c\u0043\u006f\u0072\u006e\u0065\u0072\u0073";if _da .PtaUL ==nil {return _fe .Error (_ef ,"\u0055\u004c\u0020\u0043or\u006e\u0065\u0072\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");
};_dc :=len (*_da .PtaUL );_da .PtaLL =&_eg .Points {};var (_egf ,_bb float32 ;_a ,_cg int ;_eb *_eg .Bitmap ;);for _cf :=0;_cf < _dc ;_cf ++{_egf ,_bb ,_ggd =_da .PtaUL .GetGeometry (_cf );if _ggd !=nil {_e .Log .Debug ("\u0047e\u0074\u0074\u0069\u006e\u0067\u0020\u0050\u0074\u0061\u0055\u004c \u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_ggd );
return _fe .Wrap (_ggd ,_ef ,"\u0050\u0074\u0061\u0055\u004c\u0020\u0047\u0065\u006fm\u0065\u0074\u0072\u0079");};_a ,_ggd =_da .ClassIDs .Get (_cf );if _ggd !=nil {_e .Log .Debug ("\u0047\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0043\u006c\u0061s\u0073\u0049\u0044\u0020\u0066\u0061\u0069\u006c\u0065\u0064:\u0020\u0025\u0076",_ggd );
return _fe .Wrap (_ggd ,_ef ,"\u0043l\u0061\u0073\u0073\u0049\u0044");};_eb ,_ggd =_da .UndilatedTemplates .GetBitmap (_a );if _ggd !=nil {_e .Log .Debug ("\u0047\u0065t\u0074\u0069\u006e\u0067 \u0055\u006ed\u0069\u006c\u0061\u0074\u0065\u0064\u0054\u0065m\u0070\u006c\u0061\u0074\u0065\u0073\u0020\u0066\u0061\u0069\u006c\u0065d\u003a\u0020\u0025\u0076",_ggd );
return _fe .Wrap (_ggd ,_ef ,"\u0055\u006e\u0064\u0069la\u0074\u0065\u0064\u0020\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0073");};_cg =_eb .Height ;_da .PtaLL .AddPoint (_egf ,_bb +float32 (_cg ));};return nil ;};func Init (settings Settings )(*Classer ,error ){const _d ="\u0063\u006c\u0061s\u0073\u0065\u0072\u002e\u0049\u006e\u0069\u0074";
_df :=&Classer {Settings :settings ,Widths :map[int ]int {},Heights :map[int ]int {},TemplatesSize :_cb .IntsMap {},TemplateAreas :&_cb .IntSlice {},ComponentPageNumbers :&_cb .IntSlice {},ClassIDs :&_cb .IntSlice {},ComponentsNumber :&_cb .IntSlice {},CentroidPoints :&_eg .Points {},CentroidPointsTemplates :&_eg .Points {},UndilatedTemplates :&_eg .Bitmaps {},DilatedTemplates :&_eg .Bitmaps {},ClassInstances :&_eg .BitmapsArray {},FgTemplates :&_cb .NumSlice {}};
if _g :=_df .Settings .Validate ();_g !=nil {return nil ,_fe .Wrap (_g ,_d ,"");};return _df ,nil ;};var _bff bool ;func (_bg *Classer )addPageComponents (_gge *_eg .Bitmap ,_fa *_eg .Boxes ,_dd *_eg .Bitmaps ,_aa int ,_cc Method )error {const _gb ="\u0043l\u0061\u0073\u0073\u0065r\u002e\u0041\u0064\u0064\u0050a\u0067e\u0043o\u006d\u0070\u006f\u006e\u0065\u006e\u0074s";
if _gge ==nil {return _fe .Error (_gb ,"\u006e\u0069\u006c\u0020\u0069\u006e\u0070\u0075\u0074 \u0070\u0061\u0067\u0065");};if _fa ==nil ||_dd ==nil ||len (*_fa )==0{_e .Log .Trace ("\u0041\u0064\u0064P\u0061\u0067\u0065\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u003a\u0020\u0025\u0073\u002e\u0020\u004e\u006f\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065n\u0074\u0073\u0020\u0066\u006f\u0075\u006e\u0064",_gge );
return nil ;};var _edc error ;switch _cc {case RankHaus :_edc =_bg .classifyRankHaus (_fa ,_dd ,_aa );case Correlation :_edc =_bg .classifyCorrelation (_fa ,_dd ,_aa );default:_e .Log .Debug ("\u0055\u006ek\u006e\u006f\u0077\u006e\u0020\u0063\u006c\u0061\u0073\u0073\u0069\u0066\u0079\u0020\u006d\u0065\u0074\u0068\u006f\u0064\u003a\u0020'%\u0076\u0027",_cc );
return _fe .Error (_gb ,"\u0075\u006e\u006bno\u0077\u006e\u0020\u0063\u006c\u0061\u0073\u0073\u0069\u0066\u0079\u0020\u006d\u0065\u0074\u0068\u006f\u0064");};if _edc !=nil {return _fe .Wrap (_edc ,_gb ,"");};if _edc =_bg .getULCorners (_gge ,_fa );_edc !=nil {return _fe .Wrap (_edc ,_gb ,"");
};_fdg :=len (*_fa );_bg .BaseIndex +=_fdg ;if _edc =_bg .ComponentsNumber .Add (_fdg );_edc !=nil {return _fe .Wrap (_edc ,_gb ,"");};return nil ;};type Method int ;func (_bdge Settings )Validate ()error {const _baf ="\u0053\u0065\u0074\u0074\u0069\u006e\u0067\u0073\u002e\u0056\u0061\u006ci\u0064\u0061\u0074\u0065";
if _bdge .Thresh < 0.4||_bdge .Thresh > 0.98{return _fe .Error (_baf ,"\u006a\u0062i\u0067\u0032\u0020\u0065\u006e\u0063\u006f\u0064\u0065\u0072\u0020\u0074\u0068\u0072\u0065\u0073\u0068\u0020\u006e\u006f\u0074\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u005b\u0030\u002e\u0034\u0020\u002d\u0020\u0030\u002e\u0039\u0038\u005d");
};if _bdge .WeightFactor < 0.0||_bdge .WeightFactor > 1.0{return _fe .Error (_baf ,"\u006a\u0062i\u0067\u0032\u0020\u0065\u006ec\u006f\u0064\u0065\u0072\u0020w\u0065\u0069\u0067\u0068\u0074\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u006e\u006f\u0074\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u005b\u0030\u002e\u0030\u0020\u002d\u0020\u0031\u002e\u0030\u005d");
};if _bdge .RankHaus < 0.5||_bdge .RankHaus > 1.0{return _fe .Error (_baf ,"\u006a\u0062\u0069\u0067\u0032\u0020\u0065\u006e\u0063\u006f\u0064\u0065\u0072\u0020\u0072a\u006e\u006b\u0020\u0068\u0061\u0075\u0073\u0020\u0076\u0061\u006c\u0075\u0065 \u006e\u006f\u0074\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065 [\u0030\u002e\u0035\u0020\u002d\u0020\u0031\u002e\u0030\u005d");
};if _bdge .SizeHaus < 1||_bdge .SizeHaus > 10{return _fe .Error (_baf ,"\u006a\u0062\u0069\u0067\u0032 \u0065\u006e\u0063\u006f\u0064\u0065\u0072\u0020\u0073\u0069\u007a\u0065\u0020h\u0061\u0075\u0073\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006e\u006f\u0074\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u005b\u0031\u0020\u002d\u0020\u0031\u0030]");
};switch _bdge .Components {case _eg .ComponentConn ,_eg .ComponentCharacters ,_eg .ComponentWords :default:return _fe .Error (_baf ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0063\u006c\u0061\u0073s\u0065r\u0020c\u006f\u006d\u0070\u006f\u006e\u0065\u006et");
};return nil ;};func (_bd *Classer )AddPage (inputPage *_eg .Bitmap ,pageNumber int ,method Method )(_fd error ){const _ed ="\u0043l\u0061s\u0073\u0065\u0072\u002e\u0041\u0064\u0064\u0050\u0061\u0067\u0065";_bd .Widths [pageNumber ]=inputPage .Width ;_bd .Heights [pageNumber ]=inputPage .Height ;
if _fd =_bd .verifyMethod (method );_fd !=nil {return _fe .Wrap (_fd ,_ed ,"");};_gg ,_ge ,_fd :=inputPage .GetComponents (_bd .Settings .Components ,_bd .Settings .MaxCompWidth ,_bd .Settings .MaxCompHeight );if _fd !=nil {return _fe .Wrap (_fd ,_ed ,"");
};_e .Log .Debug ("\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074s\u003a\u0020\u0025\u0076",_gg );if _fd =_bd .addPageComponents (inputPage ,_ge ,_gg ,pageNumber ,method );_fd !=nil {return _fe .Wrap (_fd ,_ed ,"");};return nil ;};func (_gfg *similarTemplatesFinder )Next ()int {var (_aef ,_cea ,_fbg ,_dfd int ;
_ead bool ;_cge *_eg .Bitmap ;_feca error ;);for {if _gfg .Index >=25{return -1;};_cea =_gfg .Width +TwoByTwoWalk [2*_gfg .Index ];_aef =_gfg .Height +TwoByTwoWalk [2*_gfg .Index +1];if _aef < 1||_cea < 1{_gfg .Index ++;continue ;};if len (_gfg .CurrentNumbers )==0{_gfg .CurrentNumbers ,_ead =_gfg .Classer .TemplatesSize .GetSlice (uint64 (_cea )*uint64 (_aef ));
if !_ead {_gfg .Index ++;continue ;};_gfg .N =0;};_fbg =len (_gfg .CurrentNumbers );for ;_gfg .N < _fbg ;_gfg .N ++{_dfd =_gfg .CurrentNumbers [_gfg .N ];_cge ,_feca =_gfg .Classer .DilatedTemplates .GetBitmap (_dfd );if _feca !=nil {_e .Log .Debug ("\u0046\u0069\u006e\u0064\u004e\u0065\u0078\u0074\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u003a\u0020\u0074\u0065\u006d\u0070\u006c\u0061t\u0065\u0020\u006e\u006f\u0074 \u0066\u006fu\u006e\u0064\u003a\u0020");
return 0;};if _cge .Width -2*JbAddedPixels ==_cea &&_cge .Height -2*JbAddedPixels ==_aef {return _dfd ;};};_gfg .Index ++;_gfg .CurrentNumbers =nil ;};};func (_eea *Classer )classifyRankHouseNonOne (_ebd *_eg .Boxes ,_fgc ,_aba ,_bfge *_eg .Bitmaps ,_aga *_eg .Points ,_ccb *_cb .NumSlice ,_aafb int )(_bfcb error ){const _bgg ="\u0043\u006c\u0061\u0073s\u0065\u0072\u002e\u0063\u006c\u0061\u0073\u0073\u0069\u0066y\u0052a\u006e\u006b\u0048\u006f\u0075\u0073\u0065O\u006e\u0065";
var (_bbb ,_cdd ,_cadc ,_eec float32 ;_eed ,_dgaf ,_dcdg int ;_egc ,_ecad ,_gbc ,_afg ,_fag *_eg .Bitmap ;_fce ,_bffg bool ;);_aee :=_eg .MakePixelSumTab8 ();for _efd :=0;_efd < len (_fgc .Values );_efd ++{if _ecad ,_bfcb =_aba .GetBitmap (_efd );_bfcb !=nil {return _fe .Wrap (_bfcb ,_bgg ,"b\u006d\u0073\u0031\u002e\u0047\u0065\u0074\u0028\u0069\u0029");
};if _eed ,_bfcb =_ccb .GetInt (_efd );_bfcb !=nil {_e .Log .Trace ("\u0047\u0065t\u0074\u0069\u006e\u0067 \u0046\u0047T\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0073 \u0061\u0074\u003a\u0020\u0025\u0064\u0020\u0066\u0061\u0069\u006c\u0065d\u003a\u0020\u0025\u0076",_efd ,_bfcb );
};if _gbc ,_bfcb =_bfge .GetBitmap (_efd );_bfcb !=nil {return _fe .Wrap (_bfcb ,_bgg ,"b\u006d\u0073\u0032\u002e\u0047\u0065\u0074\u0028\u0069\u0029");};if _bbb ,_cdd ,_bfcb =_aga .GetGeometry (_efd );_bfcb !=nil {return _fe .Wrapf (_bfcb ,_bgg ,"\u0070t\u0061[\u0069\u005d\u002e\u0047\u0065\u006f\u006d\u0065\u0074\u0072\u0079");
};_afd :=len (_eea .UndilatedTemplates .Values );_fce =false ;_ebg :=_fcef (_eea ,_ecad );for _dcdg =_ebg .Next ();_dcdg > -1;{if _afg ,_bfcb =_eea .UndilatedTemplates .GetBitmap (_dcdg );_bfcb !=nil {return _fe .Wrap (_bfcb ,_bgg ,"\u0070\u0069\u0078\u0061\u0074\u002e\u005b\u0069\u0043l\u0061\u0073\u0073\u005d");
};if _dgaf ,_bfcb =_eea .FgTemplates .GetInt (_dcdg );_bfcb !=nil {_e .Log .Trace ("\u0047\u0065\u0074\u0074\u0069\u006eg\u0020\u0046\u0047\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u005b\u0025d\u005d\u0020\u0066\u0061\u0069\u006c\u0065d\u003a\u0020\u0025\u0076",_dcdg ,_bfcb );
};if _fag ,_bfcb =_eea .DilatedTemplates .GetBitmap (_dcdg );_bfcb !=nil {return _fe .Wrap (_bfcb ,_bgg ,"\u0070\u0069\u0078\u0061\u0074\u0064\u005b\u0069\u0043l\u0061\u0073\u0073\u005d");};if _cadc ,_eec ,_bfcb =_eea .CentroidPointsTemplates .GetGeometry (_dcdg );
_bfcb !=nil {return _fe .Wrap (_bfcb ,_bgg ,"\u0043\u0065\u006et\u0072\u006f\u0069\u0064P\u006f\u0069\u006e\u0074\u0073\u0054\u0065m\u0070\u006c\u0061\u0074\u0065\u0073\u005b\u0069\u0043\u006c\u0061\u0073\u0073\u005d");};_bffg ,_bfcb =_eg .RankHausTest (_ecad ,_gbc ,_afg ,_fag ,_bbb -_cadc ,_cdd -_eec ,MaxDiffWidth ,MaxDiffHeight ,_eed ,_dgaf ,float32 (_eea .Settings .RankHaus ),_aee );
if _bfcb !=nil {return _fe .Wrap (_bfcb ,_bgg ,"");};if _bffg {_fce =true ;if _bfcb =_eea .ClassIDs .Add (_dcdg );_bfcb !=nil {return _fe .Wrap (_bfcb ,_bgg ,"");};if _bfcb =_eea .ComponentPageNumbers .Add (_aafb );_bfcb !=nil {return _fe .Wrap (_bfcb ,_bgg ,"");
};if _eea .Settings .KeepClassInstances {_dfb ,_dbg :=_eea .ClassInstances .GetBitmaps (_dcdg );if _dbg !=nil {return _fe .Wrap (_dbg ,_bgg ,"\u0063\u002e\u0050\u0069\u0078\u0061\u0061\u002e\u0047\u0065\u0074B\u0069\u0074\u006d\u0061\u0070\u0073\u0028\u0069\u0043\u006ca\u0073\u0073\u0029");
};if _egc ,_dbg =_fgc .GetBitmap (_efd );_dbg !=nil {return _fe .Wrap (_dbg ,_bgg ,"\u0070i\u0078\u0061\u005b\u0069\u005d");};_dfb .Values =append (_dfb .Values ,_egc );_acbd ,_dbg :=_ebd .Get (_efd );if _dbg !=nil {return _fe .Wrap (_dbg ,_bgg ,"b\u006f\u0078\u0061\u002e\u0047\u0065\u0074\u0028\u0069\u0029");
};_dfb .Boxes =append (_dfb .Boxes ,_acbd );};break ;};};if !_fce {if _bfcb =_eea .ClassIDs .Add (_afd );_bfcb !=nil {return _fe .Wrap (_bfcb ,_bgg ,"\u0021\u0066\u006f\u0075\u006e\u0064");};if _bfcb =_eea .ComponentPageNumbers .Add (_aafb );_bfcb !=nil {return _fe .Wrap (_bfcb ,_bgg ,"\u0021\u0066\u006f\u0075\u006e\u0064");
};_agcd :=&_eg .Bitmaps {};_egc =_fgc .Values [_efd ];_agcd .AddBitmap (_egc );_fdf ,_ecde :=_egc .Width ,_egc .Height ;_eea .TemplatesSize .Add (uint64 (_fdf )*uint64 (_ecde ),_afd );_ebda ,_faga :=_ebd .Get (_efd );if _faga !=nil {return _fe .Wrap (_faga ,_bgg ,"\u0021\u0066\u006f\u0075\u006e\u0064");
};_agcd .AddBox (_ebda );_eea .ClassInstances .AddBitmaps (_agcd );_eea .CentroidPointsTemplates .AddPoint (_bbb ,_cdd );_eea .UndilatedTemplates .AddBitmap (_ecad );_eea .DilatedTemplates .AddBitmap (_gbc );_eea .FgTemplates .AddInt (_eed );};};_eea .NumberOfClasses =len (_eea .UndilatedTemplates .Values );
return nil ;};const (MaxConnCompWidth =350;MaxCharCompWidth =350;MaxWordCompWidth =1000;MaxCompHeight =120;);const (RankHaus Method =iota ;Correlation ;);