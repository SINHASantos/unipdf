//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package basic ;import _g "github.com/unidoc/unipdf/v4/internal/jbig2/errors";type IntSlice []int ;type IntsMap map[uint64 ][]int ;func (_fb IntsMap )Get (key uint64 )(int ,bool ){_gg ,_fc :=_fb [key ];if !_fc {return 0,false ;};if len (_gg )==0{return 0,false ;
};return _gg [0],true ;};func (_ea *IntSlice )Copy ()*IntSlice {_bd :=IntSlice (make ([]int ,len (*_ea )));copy (_bd ,*_ea );return &_bd ;};type Stack struct{Data []interface{};Aux *Stack ;};func (_d *NumSlice )Add (v float32 ){*_d =append (*_d ,v )};func (_ef IntSlice )Size ()int {return len (_ef )};
func Min (x ,y int )int {if x < y {return x ;};return y ;};func (_fe IntsMap )Add (key uint64 ,value int ){_fe [key ]=append (_fe [key ],value )};func (_a NumSlice )Get (i int )(float32 ,error ){if i < 0||i > len (_a )-1{return 0,_g .Errorf ("\u004e\u0075\u006dS\u006c\u0069\u0063\u0065\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _a [i ],nil ;};func NewIntSlice (i int )*IntSlice {_c :=IntSlice (make ([]int ,i ));return &_c };func (_b IntsMap )GetSlice (key uint64 )([]int ,bool ){_e ,_ee :=_b [key ];if !_ee {return nil ,false ;};return _e ,true ;};func NewNumSlice (i int )*NumSlice {_ff :=NumSlice (make ([]float32 ,i ));
return &_ff };func Ceil (numerator ,denominator int )int {if numerator %denominator ==0{return numerator /denominator ;};return (numerator /denominator )+1;};func (_efb NumSlice )GetInt (i int )(int ,error ){const _db ="\u0047\u0065\u0074\u0049\u006e\u0074";
if i < 0||i > len (_efb )-1{return 0,_g .Errorf (_db ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};_gef :=_efb [i ];return int (_gef +Sign (_gef )*0.5),nil ;
};type NumSlice []float32 ;func (_eg *Stack )Peek ()(_fbg interface{},_ac bool ){return _eg .peek ()};func (_dd *NumSlice )AddInt (v int ){*_dd =append (*_dd ,float32 (v ))};func (_ec *Stack )Pop ()(_cf interface{},_gea bool ){_cf ,_gea =_ec .peek ();if !_gea {return nil ,_gea ;
};_ec .Data =_ec .Data [:_ec .top ()];return _cf ,true ;};func (_eeg IntsMap )Delete (key uint64 ){delete (_eeg ,key )};func (_fgf *Stack )Push (v interface{}){_fgf .Data =append (_fgf .Data ,v )};func (_ggd *Stack )top ()int {return len (_ggd .Data )-1};
func Max (x ,y int )int {if x > y {return x ;};return y ;};func Sign (v float32 )float32 {if v >=0.0{return 1.0;};return -1.0;};func Abs (v int )int {if v > 0{return v ;};return -v ;};func (_ge *IntSlice )Add (v int )error {if _ge ==nil {return _g .Error ("\u0049\u006e\u0074S\u006c\u0069\u0063\u0065\u002e\u0041\u0064\u0064","\u0073\u006c\u0069\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};*_ge =append (*_ge ,v );return nil ;};func (_ggc *Stack )Len ()int {return len (_ggc .Data )};func (_eb IntSlice )Get (index int )(int ,error ){if index > len (_eb )-1{return 0,_g .Errorf ("\u0049\u006e\u0074S\u006c\u0069\u0063\u0065\u002e\u0047\u0065\u0074","\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",index );
};return _eb [index ],nil ;};func (_ecf *Stack )peek ()(interface{},bool ){_fd :=_ecf .top ();if _fd ==-1{return nil ,false ;};return _ecf .Data [_fd ],true ;};func (_fg NumSlice )GetIntSlice ()[]int {_ce :=make ([]int ,len (_fg ));for _bdc ,_aa :=range _fg {_ce [_bdc ]=int (_aa );
};return _ce ;};