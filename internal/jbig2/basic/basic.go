//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package basic ;import _d "github.com/unidoc/unipdf/v3/internal/jbig2/errors";func (_gb NumSlice )Get (i int )(float32 ,error ){if i < 0||i > len (_gb )-1{return 0,_d .Errorf ("\u004e\u0075\u006dS\u006c\u0069\u0063\u0065\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _gb [i ],nil ;};func (_ggf *Stack )top ()int {return len (_ggf .Data )-1};func (_a *IntSlice )Copy ()*IntSlice {_b :=IntSlice (make ([]int ,len (*_a )));copy (_b ,*_a );return &_b ;};func (_dba *Stack )Pop ()(_ba interface{},_gcf bool ){_ba ,_gcf =_dba .peek ();
if !_gcf {return nil ,_gcf ;};_dba .Data =_dba .Data [:_dba .top ()];return _ba ,true ;};func Abs (v int )int {if v > 0{return v ;};return -v ;};func (_cd IntSlice )Size ()int {return len (_cd )};type NumSlice []float32 ;func (_ad *NumSlice )AddInt (v int ){*_ad =append (*_ad ,float32 (v ))};
func (_eb *Stack )Push (v interface{}){_eb .Data =append (_eb .Data ,v )};type IntSlice []int ;func (_ee *Stack )Len ()int {return len (_ee .Data )};func (_cgc NumSlice )GetIntSlice ()[]int {_cb :=make ([]int ,len (_cgc ));for _da ,_ac :=range _cgc {_cb [_da ]=int (_ac );
};return _cb ;};func (_c IntsMap )Delete (key uint64 ){delete (_c ,key )};func NewIntSlice (i int )*IntSlice {_cg :=IntSlice (make ([]int ,i ));return &_cg };func (_e IntsMap )GetSlice (key uint64 )([]int ,bool ){_ea ,_gg :=_e [key ];if !_gg {return nil ,false ;
};return _ea ,true ;};type IntsMap map[uint64 ][]int ;func (_gc IntsMap )Get (key uint64 )(int ,bool ){_f ,_fb :=_gc [key ];if !_fb {return 0,false ;};if len (_f )==0{return 0,false ;};return _f [0],true ;};func Min (x ,y int )int {if x < y {return x ;
};return y ;};func (_cff NumSlice )GetInt (i int )(int ,error ){const _fgc ="\u0047\u0065\u0074\u0049\u006e\u0074";if i < 0||i > len (_cff )-1{return 0,_d .Errorf (_fgc ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};_cc :=_cff [i ];return int (_cc +Sign (_cc )*0.5),nil ;};func Sign (v float32 )float32 {if v >=0.0{return 1.0;};return -1.0;};func (_fg *IntSlice )Add (v int )error {if _fg ==nil {return _d .Error ("\u0049\u006e\u0074S\u006c\u0069\u0063\u0065\u002e\u0041\u0064\u0064","\u0073\u006c\u0069\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};*_fg =append (*_fg ,v );return nil ;};func (_ae *Stack )Peek ()(_db interface{},_ab bool ){return _ae .peek ()};func (_ag IntSlice )Get (index int )(int ,error ){if index > len (_ag )-1{return 0,_d .Errorf ("\u0049\u006e\u0074S\u006c\u0069\u0063\u0065\u002e\u0047\u0065\u0074","\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",index );
};return _ag [index ],nil ;};func (_ga IntsMap )Add (key uint64 ,value int ){_ga [key ]=append (_ga [key ],value )};func Ceil (numerator ,denominator int )int {if numerator %denominator ==0{return numerator /denominator ;};return (numerator /denominator )+1;
};type Stack struct{Data []interface{};Aux *Stack ;};func Max (x ,y int )int {if x > y {return x ;};return y ;};func (_ce *NumSlice )Add (v float32 ){*_ce =append (*_ce ,v )};func NewNumSlice (i int )*NumSlice {_cf :=NumSlice (make ([]float32 ,i ));return &_cf };
func (_fd *Stack )peek ()(interface{},bool ){_af :=_fd .top ();if _af ==-1{return nil ,false ;};return _fd .Data [_af ],true ;};