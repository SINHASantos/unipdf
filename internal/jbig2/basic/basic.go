//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package basic ;import _aa "github.com/unidoc/unipdf/v3/internal/jbig2/errors";func (_daf NumSlice )GetIntSlice ()[]int {_bg :=make ([]int ,len (_daf ));for _gd ,_be :=range _daf {_bg [_gd ]=int (_be );};return _bg ;};func (_ab IntsMap )GetSlice (key uint64 )([]int ,bool ){_ef ,_ad :=_ab [key ];
if !_ad {return nil ,false ;};return _ef ,true ;};func (_ddc *Stack )Peek ()(_gb interface{},_fe bool ){return _ddc .peek ()};func (_g NumSlice )Get (i int )(float32 ,error ){if i < 0||i > len (_g )-1{return 0,_aa .Errorf ("\u004e\u0075\u006dS\u006c\u0069\u0063\u0065\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _g [i ],nil ;};func Ceil (numerator ,denominator int )int {if numerator %denominator ==0{return numerator /denominator ;};return (numerator /denominator )+1;};type IntSlice []int ;func Abs (v int )int {if v > 0{return v ;};return -v ;};type Stack struct{Data []interface{};
Aux *Stack ;};func NewNumSlice (i int )*NumSlice {_fa :=NumSlice (make ([]float32 ,i ));return &_fa };func (_ed *Stack )top ()int {return len (_ed .Data )-1};func (_cb IntSlice )Size ()int {return len (_cb )};func (_gc *Stack )Push (v interface{}){_gc .Data =append (_gc .Data ,v )};
type IntsMap map[uint64 ][]int ;func (_af *NumSlice )Add (v float32 ){*_af =append (*_af ,v )};func (_b IntsMap )Add (key uint64 ,value int ){_b [key ]=append (_b [key ],value )};func (_aaa *NumSlice )AddInt (v int ){*_aaa =append (*_aaa ,float32 (v ))};
func NewIntSlice (i int )*IntSlice {_f :=IntSlice (make ([]int ,i ));return &_f };func (_df *Stack )Pop ()(_ga interface{},_fb bool ){_ga ,_fb =_df .peek ();if !_fb {return nil ,_fb ;};_df .Data =_df .Data [:_df .top ()];return _ga ,true ;};func (_ff IntSlice )Get (index int )(int ,error ){if index > len (_ff )-1{return 0,_aa .Errorf ("\u0049\u006e\u0074S\u006c\u0069\u0063\u0065\u002e\u0047\u0065\u0074","\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",index );
};return _ff [index ],nil ;};func (_ea *IntSlice )Add (v int )error {if _ea ==nil {return _aa .Error ("\u0049\u006e\u0074S\u006c\u0069\u0063\u0065\u002e\u0041\u0064\u0064","\u0073\u006c\u0069\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};*_ea =append (*_ea ,v );return nil ;};func (_dag *Stack )peek ()(interface{},bool ){_dagf :=_dag .top ();if _dagf ==-1{return nil ,false ;};return _dag .Data [_dagf ],true ;};func Max (x ,y int )int {if x > y {return x ;};return y ;};func (_dd *IntSlice )Copy ()*IntSlice {_fg :=IntSlice (make ([]int ,len (*_dd )));
copy (_fg ,*_dd );return &_fg ;};func Sign (v float32 )float32 {if v >=0.0{return 1.0;};return -1.0;};type NumSlice []float32 ;func (_ge NumSlice )GetInt (i int )(int ,error ){const _efd ="\u0047\u0065\u0074\u0049\u006e\u0074";if i < 0||i > len (_ge )-1{return 0,_aa .Errorf (_efd ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};_da :=_ge [i ];return int (_da +Sign (_da )*0.5),nil ;};func (_cc *Stack )Len ()int {return len (_cc .Data )};func (_c IntsMap )Delete (key uint64 ){delete (_c ,key )};func (_e IntsMap )Get (key uint64 )(int ,bool ){_d ,_db :=_e [key ];if !_db {return 0,false ;
};if len (_d )==0{return 0,false ;};return _d [0],true ;};func Min (x ,y int )int {if x < y {return x ;};return y ;};