//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package basic ;import _a "github.com/unidoc/unipdf/v4/internal/jbig2/errors";func (_ed *Stack )Push (v interface{}){_ed .Data =append (_ed .Data ,v )};func (_ea IntSlice )Size ()int {return len (_ea )};func (_cf IntsMap )GetSlice (key uint64 )([]int ,bool ){_df ,_dg :=_cf [key ];
if !_dg {return nil ,false ;};return _df ,true ;};func NewNumSlice (i int )*NumSlice {_cc :=NumSlice (make ([]float32 ,i ));return &_cc };func (_af *Stack )Peek ()(_ca interface{},_ae bool ){return _af .peek ()};func (_be *Stack )peek ()(interface{},bool ){_ec :=_be .top ();
if _ec ==-1{return nil ,false ;};return _be .Data [_ec ],true ;};func (_fd NumSlice )GetInt (i int )(int ,error ){const _dga ="\u0047\u0065\u0074\u0049\u006e\u0074";if i < 0||i > len (_fd )-1{return 0,_a .Errorf (_dga ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};_ce :=_fd [i ];return int (_ce +Sign (_ce )*0.5),nil ;};func (_egb *Stack )Len ()int {return len (_egb .Data )};type IntsMap map[uint64 ][]int ;func NewIntSlice (i int )*IntSlice {_f :=IntSlice (make ([]int ,i ));return &_f };func Min (x ,y int )int {if x < y {return x ;
};return y ;};func (_dgf *NumSlice )AddInt (v int ){*_dgf =append (*_dgf ,float32 (v ))};func (_cg *Stack )top ()int {return len (_cg .Data )-1};func (_ag IntsMap )Get (key uint64 )(int ,bool ){_e ,_c :=_ag [key ];if !_c {return 0,false ;};if len (_e )==0{return 0,false ;
};return _e [0],true ;};type Stack struct{Data []interface{};Aux *Stack ;};func (_fe *NumSlice )Add (v float32 ){*_fe =append (*_fe ,v )};func (_eg NumSlice )GetIntSlice ()[]int {_abf :=make ([]int ,len (_eg ));for _dd ,_fdf :=range _eg {_abf [_dd ]=int (_fdf );
};return _abf ;};func (_ab NumSlice )Get (i int )(float32 ,error ){if i < 0||i > len (_ab )-1{return 0,_a .Errorf ("\u004e\u0075\u006dS\u006c\u0069\u0063\u0065\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _ab [i ],nil ;};func Abs (v int )int {if v > 0{return v ;};return -v ;};func (_da IntsMap )Delete (key uint64 ){delete (_da ,key )};func (_b IntsMap )Add (key uint64 ,value int ){_b [key ]=append (_b [key ],value )};func (_g *IntSlice )Add (v int )error {if _g ==nil {return _a .Error ("\u0049\u006e\u0074S\u006c\u0069\u0063\u0065\u002e\u0041\u0064\u0064","\u0073\u006c\u0069\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};*_g =append (*_g ,v );return nil ;};func Max (x ,y int )int {if x > y {return x ;};return y ;};func (_ceb *Stack )Pop ()(_bg interface{},_cb bool ){_bg ,_cb =_ceb .peek ();if !_cb {return nil ,_cb ;};_ceb .Data =_ceb .Data [:_ceb .top ()];return _bg ,true ;
};func (_gc IntSlice )Get (index int )(int ,error ){if index > len (_gc )-1{return 0,_a .Errorf ("\u0049\u006e\u0074S\u006c\u0069\u0063\u0065\u002e\u0047\u0065\u0074","\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",index );
};return _gc [index ],nil ;};type IntSlice []int ;type NumSlice []float32 ;func Ceil (numerator ,denominator int )int {if numerator %denominator ==0{return numerator /denominator ;};return (numerator /denominator )+1;};func Sign (v float32 )float32 {if v >=0.0{return 1.0;
};return -1.0;};func (_aa *IntSlice )Copy ()*IntSlice {_fb :=IntSlice (make ([]int ,len (*_aa )));copy (_fb ,*_aa );return &_fb ;};