//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package basic ;import _de "github.com/unidoc/unipdf/v3/internal/jbig2/errors";func (_ce *Stack )Len ()int {return len (_ce .Data )};func Ceil (numerator ,denominator int )int {if numerator %denominator ==0{return numerator /denominator ;};return (numerator /denominator )+1;
};func (_bb IntSlice )Get (index int )(int ,error ){if index > len (_bb )-1{return 0,_de .Errorf ("\u0049\u006e\u0074S\u006c\u0069\u0063\u0065\u002e\u0047\u0065\u0074","\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",index );
};return _bb [index ],nil ;};func NewIntSlice (i int )*IntSlice {_ac :=IntSlice (make ([]int ,i ));return &_ac };func (_fb IntSlice )Size ()int {return len (_fb )};func (_b IntsMap )GetSlice (key uint64 )([]int ,bool ){_bc ,_db :=_b [key ];if !_db {return nil ,false ;
};return _bc ,true ;};func Sign (v float32 )float32 {if v >=0.0{return 1.0;};return -1.0;};type IntsMap map[uint64 ][]int ;func (_gc *Stack )Push (v interface{}){_gc .Data =append (_gc .Data ,v )};func (_dbb *NumSlice )AddInt (v int ){*_dbb =append (*_dbb ,float32 (v ))};
func (_ebc *Stack )top ()int {return len (_ebc .Data )-1};func (_dg *Stack )peek ()(interface{},bool ){_aege :=_dg .top ();if _aege ==-1{return nil ,false ;};return _dg .Data [_aege ],true ;};func (_eb *Stack )Peek ()(_ga interface{},_dab bool ){return _eb .peek ()};
func (_e *IntSlice )Copy ()*IntSlice {_ae :=IntSlice (make ([]int ,len (*_e )));copy (_ae ,*_e );return &_ae ;};func (_da NumSlice )GetInt (i int )(int ,error ){const _eg ="\u0047\u0065\u0074\u0049\u006e\u0074";if i < 0||i > len (_da )-1{return 0,_de .Errorf (_eg ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};_c :=_da [i ];return int (_c +Sign (_c )*0.5),nil ;};func Min (x ,y int )int {if x < y {return x ;};return y ;};type NumSlice []float32 ;type Stack struct{Data []interface{};Aux *Stack ;};func Max (x ,y int )int {if x > y {return x ;};return y ;};func (_gf IntsMap )Delete (key uint64 ){delete (_gf ,key )};
type IntSlice []int ;func (_a IntsMap )Add (key uint64 ,value int ){_a [key ]=append (_a [key ],value )};func Abs (v int )int {if v > 0{return v ;};return -v ;};func (_af IntsMap )Get (key uint64 )(int ,bool ){_f ,_g :=_af [key ];if !_g {return 0,false ;
};if len (_f )==0{return 0,false ;};return _f [0],true ;};func (_ad NumSlice )Get (i int )(float32 ,error ){if i < 0||i > len (_ad )-1{return 0,_de .Errorf ("\u004e\u0075\u006dS\u006c\u0069\u0063\u0065\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _ad [i ],nil ;};func (_dbe *NumSlice )Add (v float32 ){*_dbe =append (*_dbe ,v )};func (_cd NumSlice )GetIntSlice ()[]int {_dd :=make ([]int ,len (_cd ));for _cdb ,_ddb :=range _cd {_dd [_cdb ]=int (_ddb );};return _dd ;};func (_fa *Stack )Pop ()(_ag interface{},_aeg bool ){_ag ,_aeg =_fa .peek ();
if !_aeg {return nil ,_aeg ;};_fa .Data =_fa .Data [:_fa .top ()];return _ag ,true ;};func (_dbg *IntSlice )Add (v int )error {if _dbg ==nil {return _de .Error ("\u0049\u006e\u0074S\u006c\u0069\u0063\u0065\u002e\u0041\u0064\u0064","\u0073\u006c\u0069\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};*_dbg =append (*_dbg ,v );return nil ;};func NewNumSlice (i int )*NumSlice {_def :=NumSlice (make ([]float32 ,i ));return &_def };