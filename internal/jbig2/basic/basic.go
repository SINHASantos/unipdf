//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package basic ;import _f "github.com/unidoc/unipdf/v3/internal/jbig2/errors";func Sign (v float32 )float32 {if v >=0.0{return 1.0;};return -1.0;};func (_fd *Stack )top ()int {return len (_fd .Data )-1};func (_fb IntsMap )Get (key uint64 )(int ,bool ){_g ,_gf :=_fb [key ];
if !_gf {return 0,false ;};if len (_g )==0{return 0,false ;};return _g [0],true ;};func (_fbc IntsMap )Delete (key uint64 ){delete (_fbc ,key )};func (_c IntsMap )Add (key uint64 ,value int ){_c [key ]=append (_c [key ],value )};type IntsMap map[uint64 ][]int ;
func (_ac *Stack )Pop ()(_ced interface{},_ca bool ){_ced ,_ca =_ac .peek ();if !_ca {return nil ,_ca ;};_ac .Data =_ac .Data [:_ac .top ()];return _ced ,true ;};func (_eb NumSlice )GetIntSlice ()[]int {_dc :=make ([]int ,len (_eb ));for _cc ,_de :=range _eb {_dc [_cc ]=int (_de );
};return _dc ;};type IntSlice []int ;func (_a *IntSlice )Copy ()*IntSlice {_ad :=IntSlice (make ([]int ,len (*_a )));copy (_ad ,*_a );return &_ad ;};func NewIntSlice (i int )*IntSlice {_ge :=IntSlice (make ([]int ,i ));return &_ge };func Max (x ,y int )int {if x > y {return x ;
};return y ;};func (_e *NumSlice )Add (v float32 ){*_e =append (*_e ,v )};func NewNumSlice (i int )*NumSlice {_geb :=NumSlice (make ([]float32 ,i ));return &_geb };func Min (x ,y int )int {if x < y {return x ;};return y ;};func (_ee *Stack )Peek ()(_cg interface{},_efd bool ){return _ee .peek ()};
type Stack struct{Data []interface{};Aux *Stack ;};func (_ef NumSlice )Get (i int )(float32 ,error ){if i < 0||i > len (_ef )-1{return 0,_f .Errorf ("\u004e\u0075\u006dS\u006c\u0069\u0063\u0065\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _ef [i ],nil ;};type NumSlice []float32 ;func (_gc IntSlice )Size ()int {return len (_gc )};func (_gb NumSlice )GetInt (i int )(int ,error ){const _db ="\u0047\u0065\u0074\u0049\u006e\u0074";if i < 0||i > len (_gb )-1{return 0,_f .Errorf (_db ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};_ce :=_gb [i ];return int (_ce +Sign (_ce )*0.5),nil ;};func (_d IntsMap )GetSlice (key uint64 )([]int ,bool ){_ff ,_fe :=_d [key ];if !_fe {return nil ,false ;};return _ff ,true ;};func (_bc *IntSlice )Add (v int )error {if _bc ==nil {return _f .Error ("\u0049\u006e\u0074S\u006c\u0069\u0063\u0065\u002e\u0041\u0064\u0064","\u0073\u006c\u0069\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};*_bc =append (*_bc ,v );return nil ;};func (_gg IntSlice )Get (index int )(int ,error ){if index > len (_gg )-1{return 0,_f .Errorf ("\u0049\u006e\u0074S\u006c\u0069\u0063\u0065\u002e\u0047\u0065\u0074","\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",index );
};return _gg [index ],nil ;};func Ceil (numerator ,denominator int )int {if numerator %denominator ==0{return numerator /denominator ;};return (numerator /denominator )+1;};func (_dd *Stack )Push (v interface{}){_dd .Data =append (_dd .Data ,v )};func Abs (v int )int {if v > 0{return v ;
};return -v ;};func (_af *NumSlice )AddInt (v int ){*_af =append (*_af ,float32 (v ))};func (_cca *Stack )peek ()(interface{},bool ){_fc :=_cca .top ();if _fc ==-1{return nil ,false ;};return _cca .Data [_fc ],true ;};func (_ggg *Stack )Len ()int {return len (_ggg .Data )};
