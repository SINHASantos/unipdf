//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package mmr ;import (_b "errors";_d "fmt";_e "github.com/unidoc/unipdf/v3/common";_c "github.com/unidoc/unipdf/v3/internal/bitwise";_ea "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";_fc "io";);func New (r *_c .Reader ,width ,height int ,dataOffset ,dataLength int64 )(*Decoder ,error ){_eg :=&Decoder {_bb :width ,_bfc :height };
_eca ,_gdc :=r .NewPartialReader (int (dataOffset ),int (dataLength ),false );if _gdc !=nil {return nil ,_gdc ;};_ge ,_gdc :=_acd (_eca );if _gdc !=nil {return nil ,_gdc ;};_ ,_gdc =r .Seek (_eca .RelativePosition (),_fc .SeekCurrent );if _gdc !=nil {return nil ,_gdc ;
};_eg ._cg =_ge ;if _ga :=_eg .initTables ();_ga !=nil {return nil ,_ga ;};return _eg ,nil ;};func _da (_bd ,_af int )int {if _bd < _af {return _af ;};return _bd ;};func (_eaef *runData )align (){_eaef ._dfb =((_eaef ._dfb +7)>>3)<<3};func (_bgc *runData )uncompressGetNextCodeLittleEndian ()(int ,error ){_adc :=_bgc ._dfb -_bgc ._gad ;
if _adc < 0||_adc > 24{_dda :=(_bgc ._dfb >>3)-_bgc ._adg ;if _dda >=_bgc ._gac {_dda +=_bgc ._adg ;if _fgc :=_bgc .fillBuffer (_dda );_fgc !=nil {return 0,_fgc ;};_dda -=_bgc ._adg ;};_abcb :=(uint32 (_bgc ._ddc [_dda ]&0xFF)<<16)|(uint32 (_bgc ._ddc [_dda +1]&0xFF)<<8)|(uint32 (_bgc ._ddc [_dda +2]&0xFF));
_bgbc :=uint32 (_bgc ._dfb &7);_abcb <<=_bgbc ;_bgc ._bdb =int (_abcb );}else {_cbd :=_bgc ._gad &7;_cfg :=7-_cbd ;if _adc <=_cfg {_bgc ._bdb <<=uint (_adc );}else {_eed :=(_bgc ._gad >>3)+3-_bgc ._adg ;if _eed >=_bgc ._gac {_eed +=_bgc ._adg ;if _ecce :=_bgc .fillBuffer (_eed );
_ecce !=nil {return 0,_ecce ;};_eed -=_bgc ._adg ;};_cbd =8-_cbd ;for {_bgc ._bdb <<=uint (_cbd );_bgc ._bdb |=int (uint (_bgc ._ddc [_eed ])&0xFF);_adc -=_cbd ;_eed ++;_cbd =8;if !(_adc >=8){break ;};};_bgc ._bdb <<=uint (_adc );};};_bgc ._gad =_bgc ._dfb ;
return _bgc ._bdb ,nil ;};type code struct{_ed int ;_eda int ;_df int ;_g []*code ;_fa bool ;};const (_ebf mmrCode =iota ;_edb ;_bf ;_ba ;_cc ;_de ;_ec ;_fe ;_ag ;_bg ;_gf ;);func (_cgg *Decoder )detectAndSkipEOL ()error {for {_dc ,_cce :=_cgg ._cg .uncompressGetCode (_cgg ._ac );
if _cce !=nil {return _cce ;};if _dc !=nil &&_dc ._df ==EOL {_cgg ._cg ._dfb +=_dc ._ed ;}else {return nil ;};};};const (EOF =-3;_gc =-2;EOL =-1;_dec =8;_bgb =(1<<_dec )-1;_ecb =5;_fcd =(1<<_ecb )-1;);func _ca (_be ,_eb int )int {if _be > _eb {return _eb ;
};return _be ;};const (_gcc int =1024<<7;_feg int =3;_dee uint =24;);var (_fd =[][3]int {{4,0x1,int (_ebf )},{3,0x1,int (_edb )},{1,0x1,int (_bf )},{3,0x3,int (_ba )},{6,0x3,int (_cc )},{7,0x3,int (_de )},{3,0x2,int (_ec )},{6,0x2,int (_fe )},{7,0x2,int (_ag )},{10,0xf,int (_bg )},{12,0xf,int (_gf )},{12,0x1,int (EOL )}};
_ecd =[][3]int {{4,0x07,2},{4,0x08,3},{4,0x0B,4},{4,0x0C,5},{4,0x0E,6},{4,0x0F,7},{5,0x12,128},{5,0x13,8},{5,0x14,9},{5,0x1B,64},{5,0x07,10},{5,0x08,11},{6,0x17,192},{6,0x18,1664},{6,0x2A,16},{6,0x2B,17},{6,0x03,13},{6,0x34,14},{6,0x35,15},{6,0x07,1},{6,0x08,12},{7,0x13,26},{7,0x17,21},{7,0x18,28},{7,0x24,27},{7,0x27,18},{7,0x28,24},{7,0x2B,25},{7,0x03,22},{7,0x37,256},{7,0x04,23},{7,0x08,20},{7,0xC,19},{8,0x12,33},{8,0x13,34},{8,0x14,35},{8,0x15,36},{8,0x16,37},{8,0x17,38},{8,0x1A,31},{8,0x1B,32},{8,0x02,29},{8,0x24,53},{8,0x25,54},{8,0x28,39},{8,0x29,40},{8,0x2A,41},{8,0x2B,42},{8,0x2C,43},{8,0x2D,44},{8,0x03,30},{8,0x32,61},{8,0x33,62},{8,0x34,63},{8,0x35,0},{8,0x36,320},{8,0x37,384},{8,0x04,45},{8,0x4A,59},{8,0x4B,60},{8,0x5,46},{8,0x52,49},{8,0x53,50},{8,0x54,51},{8,0x55,52},{8,0x58,55},{8,0x59,56},{8,0x5A,57},{8,0x5B,58},{8,0x64,448},{8,0x65,512},{8,0x67,640},{8,0x68,576},{8,0x0A,47},{8,0x0B,48},{9,0x01,_gc },{9,0x98,1472},{9,0x99,1536},{9,0x9A,1600},{9,0x9B,1728},{9,0xCC,704},{9,0xCD,768},{9,0xD2,832},{9,0xD3,896},{9,0xD4,960},{9,0xD5,1024},{9,0xD6,1088},{9,0xD7,1152},{9,0xD8,1216},{9,0xD9,1280},{9,0xDA,1344},{9,0xDB,1408},{10,0x01,_gc },{11,0x01,_gc },{11,0x08,1792},{11,0x0C,1856},{11,0x0D,1920},{12,0x00,EOF },{12,0x01,EOL },{12,0x12,1984},{12,0x13,2048},{12,0x14,2112},{12,0x15,2176},{12,0x16,2240},{12,0x17,2304},{12,0x1C,2368},{12,0x1D,2432},{12,0x1E,2496},{12,0x1F,2560}};
_ab =[][3]int {{2,0x02,3},{2,0x03,2},{3,0x02,1},{3,0x03,4},{4,0x02,6},{4,0x03,5},{5,0x03,7},{6,0x04,9},{6,0x05,8},{7,0x04,10},{7,0x05,11},{7,0x07,12},{8,0x04,13},{8,0x07,14},{9,0x01,_gc },{9,0x18,15},{10,0x01,_gc },{10,0x17,16},{10,0x18,17},{10,0x37,0},{10,0x08,18},{10,0x0F,64},{11,0x01,_gc },{11,0x17,24},{11,0x18,25},{11,0x28,23},{11,0x37,22},{11,0x67,19},{11,0x68,20},{11,0x6C,21},{11,0x08,1792},{11,0x0C,1856},{11,0x0D,1920},{12,0x00,EOF },{12,0x01,EOL },{12,0x12,1984},{12,0x13,2048},{12,0x14,2112},{12,0x15,2176},{12,0x16,2240},{12,0x17,2304},{12,0x1C,2368},{12,0x1D,2432},{12,0x1E,2496},{12,0x1F,2560},{12,0x24,52},{12,0x27,55},{12,0x28,56},{12,0x2B,59},{12,0x2C,60},{12,0x33,320},{12,0x34,384},{12,0x35,448},{12,0x37,53},{12,0x38,54},{12,0x52,50},{12,0x53,51},{12,0x54,44},{12,0x55,45},{12,0x56,46},{12,0x57,47},{12,0x58,57},{12,0x59,58},{12,0x5A,61},{12,0x5B,256},{12,0x64,48},{12,0x65,49},{12,0x66,62},{12,0x67,63},{12,0x68,30},{12,0x69,31},{12,0x6A,32},{12,0x6B,33},{12,0x6C,40},{12,0x6D,41},{12,0xC8,128},{12,0xC9,192},{12,0xCA,26},{12,0xCB,27},{12,0xCC,28},{12,0xCD,29},{12,0xD2,34},{12,0xD3,35},{12,0xD4,36},{12,0xD5,37},{12,0xD6,38},{12,0xD7,39},{12,0xDA,42},{12,0xDB,43},{13,0x4A,640},{13,0x4B,704},{13,0x4C,768},{13,0x4D,832},{13,0x52,1280},{13,0x53,1344},{13,0x54,1408},{13,0x55,1472},{13,0x5A,1536},{13,0x5B,1600},{13,0x64,1664},{13,0x65,1728},{13,0x6C,512},{13,0x6D,576},{13,0x72,896},{13,0x73,960},{13,0x74,1024},{13,0x75,1088},{13,0x76,1152},{13,0x77,1216}};
);func (_gdd *Decoder )UncompressMMR ()(_gde *_ea .Bitmap ,_ace error ){_gde =_ea .New (_gdd ._bb ,_gdd ._bfc );_bfe :=make ([]int ,_gde .Width +5);_fb :=make ([]int ,_gde .Width +5);_fb [0]=_gde .Width ;_gee :=1;var _ff int ;for _fab :=0;_fab < _gde .Height ;
_fab ++{_ff ,_ace =_gdd .uncompress2d (_gdd ._cg ,_fb ,_gee ,_bfe ,_gde .Width );if _ace !=nil {return nil ,_ace ;};if _ff ==EOF {break ;};if _ff > 0{_ace =_gdd .fillBitmap (_gde ,_fab ,_bfe ,_ff );if _ace !=nil {return nil ,_ace ;};};_fb ,_bfe =_bfe ,_fb ;
_gee =_ff ;};if _ace =_gdd .detectAndSkipEOL ();_ace !=nil {return nil ,_ace ;};_gdd ._cg .align ();return _gde ,nil ;};func (_abe *Decoder )fillBitmap (_decd *_ea .Bitmap ,_ae int ,_agg []int ,_bde int )error {var _dae byte ;_fag :=0;_fda :=_decd .GetByteIndex (_fag ,_ae );
for _egg :=0;_egg < _bde ;_egg ++{_ddf :=byte (1);_gg :=_agg [_egg ];if (_egg &1)==0{_ddf =0;};for _fag < _gg {_dae =(_dae <<1)|_ddf ;_fag ++;if (_fag &7)==0{if _cb :=_decd .SetByte (_fda ,_dae );_cb !=nil {return _cb ;};_fda ++;_dae =0;};};};if (_fag &7)!=0{_dae <<=uint (8-(_fag &7));
if _fdg :=_decd .SetByte (_fda ,_dae );_fdg !=nil {return _fdg ;};};return nil ;};func (_eagc *Decoder )uncompress1d (_ffd *runData ,_bbg []int ,_aab int )(int ,error ){var (_ebd =true ;_baa int ;_cge *code ;_eff int ;_aba error ;);_ece :for _baa < _aab {_ecbc :for {if _ebd {_cge ,_aba =_ffd .uncompressGetCode (_eagc ._eae );
if _aba !=nil {return 0,_aba ;};}else {_cge ,_aba =_ffd .uncompressGetCode (_eagc ._aa );if _aba !=nil {return 0,_aba ;};};_ffd ._dfb +=_cge ._ed ;if _cge ._df < 0{break _ece ;};_baa +=_cge ._df ;if _cge ._df < 64{_ebd =!_ebd ;_bbg [_eff ]=_baa ;_eff ++;
break _ecbc ;};};};if _bbg [_eff ]!=_aab {_bbg [_eff ]=_aab ;};_dfe :=EOL ;if _cge !=nil &&_cge ._df !=EOL {_dfe =_eff ;};return _dfe ,nil ;};func (_edd *runData )fillBuffer (_dg int )error {_edd ._adg =_dg ;_ ,_fbd :=_edd ._bfa .Seek (int64 (_dg ),_fc .SeekStart );
if _fbd !=nil {if _fbd ==_fc .EOF {_e .Log .Debug ("\u0053\u0065\u0061\u006b\u0020\u0045\u004f\u0046");_edd ._gac =-1;}else {return _fbd ;};};if _fbd ==nil {_edd ._gac ,_fbd =_edd ._bfa .Read (_edd ._ddc );if _fbd !=nil {if _fbd ==_fc .EOF {_e .Log .Trace ("\u0052\u0065\u0061\u0064\u0020\u0045\u004f\u0046");
_edd ._gac =-1;}else {return _fbd ;};};};if _edd ._gac > -1&&_edd ._gac < 3{for _edd ._gac < 3{_dbe ,_fdgc :=_edd ._bfa .ReadByte ();if _fdgc !=nil {if _fdgc ==_fc .EOF {_edd ._ddc [_edd ._gac ]=0;}else {return _fdgc ;};}else {_edd ._ddc [_edd ._gac ]=_dbe &0xFF;
};_edd ._gac ++;};};_edd ._gac -=3;if _edd ._gac < 0{_edd ._ddc =make ([]byte ,len (_edd ._ddc ));_edd ._gac =len (_edd ._ddc )-3;};return nil ;};func (_a *code )String ()string {return _d .Sprintf ("\u0025\u0064\u002f\u0025\u0064\u002f\u0025\u0064",_a ._ed ,_a ._eda ,_a ._df );
};func (_ead *Decoder )createLittleEndianTable (_afg [][3]int )([]*code ,error ){_dd :=make ([]*code ,_bgb +1);for _abc :=0;_abc < len (_afg );_abc ++{_cda :=_gd (_afg [_abc ]);if _cda ._ed <=_dec {_ege :=_dec -_cda ._ed ;_gda :=_cda ._eda <<uint (_ege );
for _bdd :=(1<<uint (_ege ))-1;_bdd >=0;_bdd --{_ffc :=_gda |_bdd ;_dd [_ffc ]=_cda ;};}else {_afe :=_cda ._eda >>uint (_cda ._ed -_dec );if _dd [_afe ]==nil {var _aaf =_gd ([3]int {});_aaf ._g =make ([]*code ,_fcd +1);_dd [_afe ]=_aaf ;};if _cda ._ed <=_dec +_ecb {_bff :=_dec +_ecb -_cda ._ed ;
_bc :=(_cda ._eda <<uint (_bff ))&_fcd ;_dd [_afe ]._fa =true ;for _db :=(1<<uint (_bff ))-1;_db >=0;_db --{_dd [_afe ]._g [_bc |_db ]=_cda ;};}else {return nil ,_b .New ("\u0043\u006f\u0064\u0065\u0020\u0074a\u0062\u006c\u0065\u0020\u006f\u0076\u0065\u0072\u0066\u006c\u006f\u0077\u0020i\u006e\u0020\u004d\u004d\u0052\u0044\u0065c\u006f\u0064\u0065\u0072");
};};};return _dd ,nil ;};func (_dbf *Decoder )initTables ()(_eag error ){if _dbf ._eae ==nil {_dbf ._eae ,_eag =_dbf .createLittleEndianTable (_ecd );if _eag !=nil {return ;};_dbf ._aa ,_eag =_dbf .createLittleEndianTable (_ab );if _eag !=nil {return ;
};_dbf ._ac ,_eag =_dbf .createLittleEndianTable (_fd );if _eag !=nil {return ;};};return nil ;};type runData struct{_bfa *_c .Reader ;_dfb int ;_gad int ;_bdb int ;_ddc []byte ;_adg int ;_gac int ;};func (_ddd *runData )uncompressGetCode (_cf []*code )(*code ,error ){return _ddd .uncompressGetCodeLittleEndian (_cf );
};type mmrCode int ;func (_aed *runData )uncompressGetCodeLittleEndian (_aaff []*code )(*code ,error ){_efd ,_bbge :=_aed .uncompressGetNextCodeLittleEndian ();if _bbge !=nil {_e .Log .Debug ("\u0055n\u0063\u006fm\u0070\u0072\u0065\u0073s\u0047\u0065\u0074N\u0065\u0078\u0074\u0043\u006f\u0064\u0065\u004c\u0069tt\u006c\u0065\u0045n\u0064\u0069a\u006e\u0020\u0066\u0061\u0069\u006ce\u0064\u003a \u0025\u0076",_bbge );
return nil ,_bbge ;};_efd &=0xffffff;_faga :=_efd >>(_dee -_dec );_dag :=_aaff [_faga ];if _dag !=nil &&_dag ._fa {_faga =(_efd >>(_dee -_dec -_ecb ))&_fcd ;_dag =_dag ._g [_faga ];};return _dag ,nil ;};func _acd (_bfag *_c .Reader )(*runData ,error ){_bfd :=&runData {_bfa :_bfag ,_dfb :0,_gad :1};
_ecba :=_ca (_da (_feg ,int (_bfag .Length ())),_gcc );_bfd ._ddc =make ([]byte ,_ecba );if _fg :=_bfd .fillBuffer (0);_fg !=nil {if _fg ==_fc .EOF {_bfd ._ddc =make ([]byte ,10);_e .Log .Debug ("F\u0069\u006c\u006c\u0042uf\u0066e\u0072\u0020\u0066\u0061\u0069l\u0065\u0064\u003a\u0020\u0025\u0076",_fg );
}else {return nil ,_fg ;};};return _bfd ,nil ;};func _gd (_ef [3]int )*code {return &code {_ed :_ef [0],_eda :_ef [1],_df :_ef [2]}};func (_ecc *Decoder )uncompress2d (_ffdg *runData ,_gcb []int ,_cbf int ,_ccg []int ,_cab int )(int ,error ){var (_eaf int ;
_fad int ;_ce int ;_bfcf =true ;_gcg error ;_ggf *code ;);_gcb [_cbf ]=_cab ;_gcb [_cbf +1]=_cab ;_gcb [_cbf +2]=_cab +1;_gcb [_cbf +3]=_cab +1;_bda :for _ce < _cab {_ggf ,_gcg =_ffdg .uncompressGetCode (_ecc ._ac );if _gcg !=nil {return EOL ,nil ;};if _ggf ==nil {_ffdg ._dfb ++;
break _bda ;};_ffdg ._dfb +=_ggf ._ed ;switch mmrCode (_ggf ._df ){case _bf :_ce =_gcb [_eaf ];case _ba :_ce =_gcb [_eaf ]+1;case _ec :_ce =_gcb [_eaf ]-1;case _edb :for {var _cbfa []*code ;if _bfcf {_cbfa =_ecc ._eae ;}else {_cbfa =_ecc ._aa ;};_ggf ,_gcg =_ffdg .uncompressGetCode (_cbfa );
if _gcg !=nil {return 0,_gcg ;};if _ggf ==nil {break _bda ;};_ffdg ._dfb +=_ggf ._ed ;if _ggf ._df < 64{if _ggf ._df < 0{_ccg [_fad ]=_ce ;_fad ++;_ggf =nil ;break _bda ;};_ce +=_ggf ._df ;_ccg [_fad ]=_ce ;_fad ++;break ;};_ce +=_ggf ._df ;};_bcc :=_ce ;
_cag :for {var _def []*code ;if !_bfcf {_def =_ecc ._eae ;}else {_def =_ecc ._aa ;};_ggf ,_gcg =_ffdg .uncompressGetCode (_def );if _gcg !=nil {return 0,_gcg ;};if _ggf ==nil {break _bda ;};_ffdg ._dfb +=_ggf ._ed ;if _ggf ._df < 64{if _ggf ._df < 0{_ccg [_fad ]=_ce ;
_fad ++;break _bda ;};_ce +=_ggf ._df ;if _ce < _cab ||_ce !=_bcc {_ccg [_fad ]=_ce ;_fad ++;};break _cag ;};_ce +=_ggf ._df ;};for _ce < _cab &&_gcb [_eaf ]<=_ce {_eaf +=2;};continue _bda ;case _ebf :_eaf ++;_ce =_gcb [_eaf ];_eaf ++;continue _bda ;case _cc :_ce =_gcb [_eaf ]+2;
case _fe :_ce =_gcb [_eaf ]-2;case _de :_ce =_gcb [_eaf ]+3;case _ag :_ce =_gcb [_eaf ]-3;default:if _ffdg ._dfb ==12&&_ggf ._df ==EOL {_ffdg ._dfb =0;if _ ,_gcg =_ecc .uncompress1d (_ffdg ,_gcb ,_cab );_gcg !=nil {return 0,_gcg ;};_ffdg ._dfb ++;if _ ,_gcg =_ecc .uncompress1d (_ffdg ,_ccg ,_cab );
_gcg !=nil {return 0,_gcg ;};_ee ,_ad :=_ecc .uncompress1d (_ffdg ,_gcb ,_cab );if _ad !=nil {return EOF ,_ad ;};_ffdg ._dfb ++;return _ee ,nil ;};_ce =_cab ;continue _bda ;};if _ce <=_cab {_bfcf =!_bfcf ;_ccg [_fad ]=_ce ;_fad ++;if _eaf > 0{_eaf --;}else {_eaf ++;
};for _ce < _cab &&_gcb [_eaf ]<=_ce {_eaf +=2;};};};if _ccg [_fad ]!=_cab {_ccg [_fad ]=_cab ;};if _ggf ==nil {return EOL ,nil ;};return _fad ,nil ;};type Decoder struct{_bb ,_bfc int ;_cg *runData ;_eae []*code ;_aa []*code ;_ac []*code ;};