//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package mmr ;import (_ad "errors";_d "fmt";_da "github.com/unidoc/unipdf/v3/common";_dg "github.com/unidoc/unipdf/v3/internal/bitwise";_c "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";_a "io";);const (_bb mmrCode =iota ;_gd ;_bf ;_ce ;_cde ;_ab ;
_ge ;_edc ;_bba ;_ef ;_eb ;);func (_ffgd *runData )uncompressGetCodeLittleEndian (_bc []*code )(*code ,error ){_fcc ,_ecg :=_ffgd .uncompressGetNextCodeLittleEndian ();if _ecg !=nil {_da .Log .Debug ("\u0055n\u0063\u006fm\u0070\u0072\u0065\u0073s\u0047\u0065\u0074N\u0065\u0078\u0074\u0043\u006f\u0064\u0065\u004c\u0069tt\u006c\u0065\u0045n\u0064\u0069a\u006e\u0020\u0066\u0061\u0069\u006ce\u0064\u003a \u0025\u0076",_ecg );
return nil ,_ecg ;};_fcc &=0xffffff;_gged :=_fcc >>(_aba -_ag );_efa :=_bc [_gged ];if _efa !=nil &&_efa ._f {_gged =(_fcc >>(_aba -_ag -_cc ))&_bdg ;_efa =_efa ._df [_gged ];};return _efa ,nil ;};func (_cgd *Decoder )fillBitmap (_efe *_c .Bitmap ,_bdd int ,_cec []int ,_edb int )error {var _dd byte ;
_dee :=0;_fff :=_efe .GetByteIndex (_dee ,_bdd );for _bbab :=0;_bbab < _edb ;_bbab ++{_ca :=byte (1);_aeg :=_cec [_bbab ];if (_bbab &1)==0{_ca =0;};for _dee < _aeg {_dd =(_dd <<1)|_ca ;_dee ++;if (_dee &7)==0{if _be :=_efe .SetByte (_fff ,_dd );_be !=nil {return _be ;
};_fff ++;_dd =0;};};};if (_dee &7)!=0{_dd <<=uint (8-(_dee &7));if _bbe :=_efe .SetByte (_fff ,_dd );_bbe !=nil {return _bbe ;};};return nil ;};func (_eg *Decoder )uncompress1d (_cca *runData ,_aef []int ,_geg int )(int ,error ){var (_bbf =true ;_ccg int ;
_bfd *code ;_fa int ;_bfe error ;);_gecg :for _ccg < _geg {_dfb :for {if _bbf {_bfd ,_bfe =_cca .uncompressGetCode (_eg ._bfgb );if _bfe !=nil {return 0,_bfe ;};}else {_bfd ,_bfe =_cca .uncompressGetCode (_eg ._aga );if _bfe !=nil {return 0,_bfe ;};};_cca ._bfc +=_bfd ._af ;
if _bfd ._cd < 0{break _gecg ;};_ccg +=_bfd ._cd ;if _bfd ._cd < 64{_bbf =!_bbf ;_aef [_fa ]=_ccg ;_fa ++;break _dfb ;};};};if _aef [_fa ]!=_geg {_aef [_fa ]=_geg ;};_gge :=EOL ;if _bfd !=nil &&_bfd ._cd !=EOL {_gge =_fa ;};return _gge ,nil ;};func (_daa *Decoder )UncompressMMR ()(_aea *_c .Bitmap ,_bg error ){_aea =_c .New (_daa ._cgb ,_daa ._acf );
_dab :=make ([]int ,_aea .Width +5);_gf :=make ([]int ,_aea .Width +5);_gf [0]=_aea .Width ;_eba :=1;var _gecd int ;for _fb :=0;_fb < _aea .Height ;_fb ++{_gecd ,_bg =_daa .uncompress2d (_daa ._gec ,_gf ,_eba ,_dab ,_aea .Width );if _bg !=nil {return nil ,_bg ;
};if _gecd ==EOF {break ;};if _gecd > 0{_bg =_daa .fillBitmap (_aea ,_fb ,_dab ,_gecd );if _bg !=nil {return nil ,_bg ;};};_gf ,_dab =_dab ,_gf ;_eba =_gecd ;};if _bg =_daa .detectAndSkipEOL ();_bg !=nil {return nil ,_bg ;};_daa ._gec .align ();return _aea ,nil ;
};type runData struct{_cda *_dg .Reader ;_bfc int ;_ffe int ;_ega int ;_afc []byte ;_gcf int ;_daed int ;};func (_bd *code )String ()string {return _d .Sprintf ("\u0025\u0064\u002f\u0025\u0064\u002f\u0025\u0064",_bd ._af ,_bd ._ac ,_bd ._cd );};var (_ace =[][3]int {{4,0x1,int (_bb )},{3,0x1,int (_gd )},{1,0x1,int (_bf )},{3,0x3,int (_ce )},{6,0x3,int (_cde )},{7,0x3,int (_ab )},{3,0x2,int (_ge )},{6,0x2,int (_edc )},{7,0x2,int (_bba )},{10,0xf,int (_ef )},{12,0xf,int (_eb )},{12,0x1,int (EOL )}};
_bfg =[][3]int {{4,0x07,2},{4,0x08,3},{4,0x0B,4},{4,0x0C,5},{4,0x0E,6},{4,0x0F,7},{5,0x12,128},{5,0x13,8},{5,0x14,9},{5,0x1B,64},{5,0x07,10},{5,0x08,11},{6,0x17,192},{6,0x18,1664},{6,0x2A,16},{6,0x2B,17},{6,0x03,13},{6,0x34,14},{6,0x35,15},{6,0x07,1},{6,0x08,12},{7,0x13,26},{7,0x17,21},{7,0x18,28},{7,0x24,27},{7,0x27,18},{7,0x28,24},{7,0x2B,25},{7,0x03,22},{7,0x37,256},{7,0x04,23},{7,0x08,20},{7,0xC,19},{8,0x12,33},{8,0x13,34},{8,0x14,35},{8,0x15,36},{8,0x16,37},{8,0x17,38},{8,0x1A,31},{8,0x1B,32},{8,0x02,29},{8,0x24,53},{8,0x25,54},{8,0x28,39},{8,0x29,40},{8,0x2A,41},{8,0x2B,42},{8,0x2C,43},{8,0x2D,44},{8,0x03,30},{8,0x32,61},{8,0x33,62},{8,0x34,63},{8,0x35,0},{8,0x36,320},{8,0x37,384},{8,0x04,45},{8,0x4A,59},{8,0x4B,60},{8,0x5,46},{8,0x52,49},{8,0x53,50},{8,0x54,51},{8,0x55,52},{8,0x58,55},{8,0x59,56},{8,0x5A,57},{8,0x5B,58},{8,0x64,448},{8,0x65,512},{8,0x67,640},{8,0x68,576},{8,0x0A,47},{8,0x0B,48},{9,0x01,_ff },{9,0x98,1472},{9,0x99,1536},{9,0x9A,1600},{9,0x9B,1728},{9,0xCC,704},{9,0xCD,768},{9,0xD2,832},{9,0xD3,896},{9,0xD4,960},{9,0xD5,1024},{9,0xD6,1088},{9,0xD7,1152},{9,0xD8,1216},{9,0xD9,1280},{9,0xDA,1344},{9,0xDB,1408},{10,0x01,_ff },{11,0x01,_ff },{11,0x08,1792},{11,0x0C,1856},{11,0x0D,1920},{12,0x00,EOF },{12,0x01,EOL },{12,0x12,1984},{12,0x13,2048},{12,0x14,2112},{12,0x15,2176},{12,0x16,2240},{12,0x17,2304},{12,0x1C,2368},{12,0x1D,2432},{12,0x1E,2496},{12,0x1F,2560}};
_db =[][3]int {{2,0x02,3},{2,0x03,2},{3,0x02,1},{3,0x03,4},{4,0x02,6},{4,0x03,5},{5,0x03,7},{6,0x04,9},{6,0x05,8},{7,0x04,10},{7,0x05,11},{7,0x07,12},{8,0x04,13},{8,0x07,14},{9,0x01,_ff },{9,0x18,15},{10,0x01,_ff },{10,0x17,16},{10,0x18,17},{10,0x37,0},{10,0x08,18},{10,0x0F,64},{11,0x01,_ff },{11,0x17,24},{11,0x18,25},{11,0x28,23},{11,0x37,22},{11,0x67,19},{11,0x68,20},{11,0x6C,21},{11,0x08,1792},{11,0x0C,1856},{11,0x0D,1920},{12,0x00,EOF },{12,0x01,EOL },{12,0x12,1984},{12,0x13,2048},{12,0x14,2112},{12,0x15,2176},{12,0x16,2240},{12,0x17,2304},{12,0x1C,2368},{12,0x1D,2432},{12,0x1E,2496},{12,0x1F,2560},{12,0x24,52},{12,0x27,55},{12,0x28,56},{12,0x2B,59},{12,0x2C,60},{12,0x33,320},{12,0x34,384},{12,0x35,448},{12,0x37,53},{12,0x38,54},{12,0x52,50},{12,0x53,51},{12,0x54,44},{12,0x55,45},{12,0x56,46},{12,0x57,47},{12,0x58,57},{12,0x59,58},{12,0x5A,61},{12,0x5B,256},{12,0x64,48},{12,0x65,49},{12,0x66,62},{12,0x67,63},{12,0x68,30},{12,0x69,31},{12,0x6A,32},{12,0x6B,33},{12,0x6C,40},{12,0x6D,41},{12,0xC8,128},{12,0xC9,192},{12,0xCA,26},{12,0xCB,27},{12,0xCC,28},{12,0xCD,29},{12,0xD2,34},{12,0xD3,35},{12,0xD4,36},{12,0xD5,37},{12,0xD6,38},{12,0xD7,39},{12,0xDA,42},{12,0xDB,43},{13,0x4A,640},{13,0x4B,704},{13,0x4C,768},{13,0x4D,832},{13,0x52,1280},{13,0x53,1344},{13,0x54,1408},{13,0x55,1472},{13,0x5A,1536},{13,0x5B,1600},{13,0x64,1664},{13,0x65,1728},{13,0x6C,512},{13,0x6D,576},{13,0x72,896},{13,0x73,960},{13,0x74,1024},{13,0x75,1088},{13,0x76,1152},{13,0x77,1216}};
);func New (r *_dg .Reader ,width ,height int ,dataOffset ,dataLength int64 )(*Decoder ,error ){_ae :=&Decoder {_cgb :width ,_acf :height };_age ,_ggg :=r .NewPartialReader (int (dataOffset ),int (dataLength ),false );if _ggg !=nil {return nil ,_ggg ;};
_fd ,_ggg :=_cgdd (_age );if _ggg !=nil {return nil ,_ggg ;};_ ,_ggg =r .Seek (_age .RelativePosition (),_a .SeekCurrent );if _ggg !=nil {return nil ,_ggg ;};_ae ._gec =_fd ;if _fe :=_ae .initTables ();_fe !=nil {return nil ,_fe ;};return _ae ,nil ;};func _aa (_b [3]int )*code {return &code {_af :_b [0],_ac :_b [1],_cd :_b [2]}};
const (_agc int =1024<<7;_ebb int =3;_aba uint =24;);func (_dcg *runData )align (){_dcg ._bfc =((_dcg ._bfc +7)>>3)<<3};func _ed (_de ,_gg int )int {if _de > _gg {return _gg ;};return _de ;};func (_fgf *Decoder )initTables ()(_fda error ){if _fgf ._bfgb ==nil {_fgf ._bfgb ,_fda =_fgf .createLittleEndianTable (_bfg );
if _fda !=nil {return ;};_fgf ._aga ,_fda =_fgf .createLittleEndianTable (_db );if _fda !=nil {return ;};_fgf ._cgf ,_fda =_fgf .createLittleEndianTable (_ace );if _fda !=nil {return ;};};return nil ;};func (_gce *runData )fillBuffer (_dgd int )error {_gce ._gcf =_dgd ;
_ ,_add :=_gce ._cda .Seek (int64 (_dgd ),_a .SeekStart );if _add !=nil {if _add ==_a .EOF {_da .Log .Debug ("\u0053\u0065\u0061\u006b\u0020\u0045\u004f\u0046");_gce ._daed =-1;}else {return _add ;};};if _add ==nil {_gce ._daed ,_add =_gce ._cda .Read (_gce ._afc );
if _add !=nil {if _add ==_a .EOF {_da .Log .Trace ("\u0052\u0065\u0061\u0064\u0020\u0045\u004f\u0046");_gce ._daed =-1;}else {return _add ;};};};if _gce ._daed > -1&&_gce ._daed < 3{for _gce ._daed < 3{_edd ,_bgc :=_gce ._cda .ReadByte ();if _bgc !=nil {if _bgc ==_a .EOF {_gce ._afc [_gce ._daed ]=0;
}else {return _bgc ;};}else {_gce ._afc [_gce ._daed ]=_edd &0xFF;};_gce ._daed ++;};};_gce ._daed -=3;if _gce ._daed < 0{_gce ._afc =make ([]byte ,len (_gce ._afc ));_gce ._daed =len (_gce ._afc )-3;};return nil ;};func _cg (_ada ,_g int )int {if _ada < _g {return _g ;
};return _ada ;};func (_fc *Decoder )createLittleEndianTable (_agg [][3]int )([]*code ,error ){_fg :=make ([]*code ,_acc +1);for _efd :=0;_efd < len (_agg );_efd ++{_ee :=_aa (_agg [_efd ]);if _ee ._af <=_ag {_cga :=_ag -_ee ._af ;_ec :=_ee ._ac <<uint (_cga );
for _fgb :=(1<<uint (_cga ))-1;_fgb >=0;_fgb --{_aee :=_ec |_fgb ;_fg [_aee ]=_ee ;};}else {_ea :=_ee ._ac >>uint (_ee ._af -_ag );if _fg [_ea ]==nil {var _ceg =_aa ([3]int {});_ceg ._df =make ([]*code ,_bdg +1);_fg [_ea ]=_ceg ;};if _ee ._af <=_ag +_cc {_adg :=_ag +_cc -_ee ._af ;
_gdf :=(_ee ._ac <<uint (_adg ))&_bdg ;_fg [_ea ]._f =true ;for _dcf :=(1<<uint (_adg ))-1;_dcf >=0;_dcf --{_fg [_ea ]._df [_gdf |_dcf ]=_ee ;};}else {return nil ,_ad .New ("\u0043\u006f\u0064\u0065\u0020\u0074a\u0062\u006c\u0065\u0020\u006f\u0076\u0065\u0072\u0066\u006c\u006f\u0077\u0020i\u006e\u0020\u004d\u004d\u0052\u0044\u0065c\u006f\u0064\u0065\u0072");
};};};return _fg ,nil ;};type code struct{_af int ;_ac int ;_cd int ;_df []*code ;_f bool ;};type Decoder struct{_cgb ,_acf int ;_gec *runData ;_bfgb []*code ;_aga []*code ;_cgf []*code ;};func (_ggge *Decoder )uncompress2d (_cce *runData ,_gca []int ,_ffg int ,_dae []int ,_ade int )(int ,error ){var (_gea int ;
_bee int ;_agf int ;_fee =true ;_ebd error ;_abd *code ;);_gca [_ffg ]=_ade ;_gca [_ffg +1]=_ade ;_gca [_ffg +2]=_ade +1;_gca [_ffg +3]=_ade +1;_afd :for _agf < _ade {_abd ,_ebd =_cce .uncompressGetCode (_ggge ._cgf );if _ebd !=nil {return EOL ,nil ;};
if _abd ==nil {_cce ._bfc ++;break _afd ;};_cce ._bfc +=_abd ._af ;switch mmrCode (_abd ._cd ){case _bf :_agf =_gca [_gea ];case _ce :_agf =_gca [_gea ]+1;case _ge :_agf =_gca [_gea ]-1;case _gd :for {var _fab []*code ;if _fee {_fab =_ggge ._bfgb ;}else {_fab =_ggge ._aga ;
};_abd ,_ebd =_cce .uncompressGetCode (_fab );if _ebd !=nil {return 0,_ebd ;};if _abd ==nil {break _afd ;};_cce ._bfc +=_abd ._af ;if _abd ._cd < 64{if _abd ._cd < 0{_dae [_bee ]=_agf ;_bee ++;_abd =nil ;break _afd ;};_agf +=_abd ._cd ;_dae [_bee ]=_agf ;
_bee ++;break ;};_agf +=_abd ._cd ;};_aeef :=_agf ;_gcd :for {var _bbfe []*code ;if !_fee {_bbfe =_ggge ._bfgb ;}else {_bbfe =_ggge ._aga ;};_abd ,_ebd =_cce .uncompressGetCode (_bbfe );if _ebd !=nil {return 0,_ebd ;};if _abd ==nil {break _afd ;};_cce ._bfc +=_abd ._af ;
if _abd ._cd < 64{if _abd ._cd < 0{_dae [_bee ]=_agf ;_bee ++;break _afd ;};_agf +=_abd ._cd ;if _agf < _ade ||_agf !=_aeef {_dae [_bee ]=_agf ;_bee ++;};break _gcd ;};_agf +=_abd ._cd ;};for _agf < _ade &&_gca [_gea ]<=_agf {_gea +=2;};continue _afd ;
case _bb :_gea ++;_agf =_gca [_gea ];_gea ++;continue _afd ;case _cde :_agf =_gca [_gea ]+2;case _edc :_agf =_gca [_gea ]-2;case _ab :_agf =_gca [_gea ]+3;case _bba :_agf =_gca [_gea ]-3;default:if _cce ._bfc ==12&&_abd ._cd ==EOL {_cce ._bfc =0;if _ ,_ebd =_ggge .uncompress1d (_cce ,_gca ,_ade );
_ebd !=nil {return 0,_ebd ;};_cce ._bfc ++;if _ ,_ebd =_ggge .uncompress1d (_cce ,_dae ,_ade );_ebd !=nil {return 0,_ebd ;};_cgc ,_ebaf :=_ggge .uncompress1d (_cce ,_gca ,_ade );if _ebaf !=nil {return EOF ,_ebaf ;};_cce ._bfc ++;return _cgc ,nil ;};_agf =_ade ;
continue _afd ;};if _agf <=_ade {_fee =!_fee ;_dae [_bee ]=_agf ;_bee ++;if _gea > 0{_gea --;}else {_gea ++;};for _agf < _ade &&_gca [_gea ]<=_agf {_gea +=2;};};};if _dae [_bee ]!=_ade {_dae [_bee ]=_ade ;};if _abd ==nil {return EOL ,nil ;};return _bee ,nil ;
};func (_efae *runData )uncompressGetNextCodeLittleEndian ()(int ,error ){_gfc :=_efae ._bfc -_efae ._ffe ;if _gfc < 0||_gfc > 24{_ead :=(_efae ._bfc >>3)-_efae ._gcf ;if _ead >=_efae ._daed {_ead +=_efae ._gcf ;if _fgc :=_efae .fillBuffer (_ead );_fgc !=nil {return 0,_fgc ;
};_ead -=_efae ._gcf ;};_ffd :=(uint32 (_efae ._afc [_ead ]&0xFF)<<16)|(uint32 (_efae ._afc [_ead +1]&0xFF)<<8)|(uint32 (_efae ._afc [_ead +2]&0xFF));_feb :=uint32 (_efae ._bfc &7);_ffd <<=_feb ;_efae ._ega =int (_ffd );}else {_dfc :=_efae ._ffe &7;_cgbc :=7-_dfc ;
if _gfc <=_cgbc {_efae ._ega <<=uint (_gfc );}else {_bec :=(_efae ._ffe >>3)+3-_efae ._gcf ;if _bec >=_efae ._daed {_bec +=_efae ._gcf ;if _adf :=_efae .fillBuffer (_bec );_adf !=nil {return 0,_adf ;};_bec -=_efae ._gcf ;};_dfc =8-_dfc ;for {_efae ._ega <<=uint (_dfc );
_efae ._ega |=int (uint (_efae ._afc [_bec ])&0xFF);_gfc -=_dfc ;_bec ++;_dfc =8;if !(_gfc >=8){break ;};};_efae ._ega <<=uint (_gfc );};};_efae ._ffe =_efae ._bfc ;return _efae ._ega ,nil ;};func _cgdd (_ga *_dg .Reader )(*runData ,error ){_cgac :=&runData {_cda :_ga ,_bfc :0,_ffe :1};
_ged :=_ed (_cg (_ebb ,int (_ga .Length ())),_agc );_cgac ._afc =make ([]byte ,_ged );if _cb :=_cgac .fillBuffer (0);_cb !=nil {if _cb ==_a .EOF {_cgac ._afc =make ([]byte ,10);_da .Log .Debug ("F\u0069\u006c\u006c\u0042uf\u0066e\u0072\u0020\u0066\u0061\u0069l\u0065\u0064\u003a\u0020\u0025\u0076",_cb );
}else {return nil ,_cb ;};};return _cgac ,nil ;};const (EOF =-3;_ff =-2;EOL =-1;_ag =8;_acc =(1<<_ag )-1;_cc =5;_bdg =(1<<_cc )-1;);type mmrCode int ;func (_gc *Decoder )detectAndSkipEOL ()error {for {_cef ,_fba :=_gc ._gec .uncompressGetCode (_gc ._cgf );
if _fba !=nil {return _fba ;};if _cef !=nil &&_cef ._cd ==EOL {_gc ._gec ._bfc +=_cef ._af ;}else {return nil ;};};};func (_cegf *runData )uncompressGetCode (_gdg []*code )(*code ,error ){return _cegf .uncompressGetCodeLittleEndian (_gdg );};