//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package mmr ;import (_c "errors";_b "fmt";_dd "github.com/unidoc/unipdf/v3/common";_d "github.com/unidoc/unipdf/v3/internal/bitwise";_ca "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";_e "io";);func New (r *_d .Reader ,width ,height int ,dataOffset ,dataLength int64 )(*Decoder ,error ){_dg :=&Decoder {_gc :width ,_de :height };
_gfe ,_eff :=r .NewPartialReader (int (dataOffset ),int (dataLength ),false );if _eff !=nil {return nil ,_eff ;};_dfa ,_eff :=_dde (_gfe );if _eff !=nil {return nil ,_eff ;};_ ,_eff =r .Seek (_gfe .RelativePosition (),_e .SeekCurrent );if _eff !=nil {return nil ,_eff ;
};_dg ._gef =_dfa ;if _ba :=_dg .initTables ();_ba !=nil {return nil ,_ba ;};return _dg ,nil ;};func (_gged *runData )uncompressGetCodeLittleEndian (_eba []*code )(*code ,error ){_ccg ,_gea :=_gged .uncompressGetNextCodeLittleEndian ();if _gea !=nil {_dd .Log .Debug ("\u0055n\u0063\u006fm\u0070\u0072\u0065\u0073s\u0047\u0065\u0074N\u0065\u0078\u0074\u0043\u006f\u0064\u0065\u004c\u0069tt\u006c\u0065\u0045n\u0064\u0069a\u006e\u0020\u0066\u0061\u0069\u006ce\u0064\u003a \u0025\u0076",_gea );
return nil ,_gea ;};_ccg &=0xffffff;_dbc :=_ccg >>(_fgfb -_fbd );_cee :=_eba [_dbc ];if _cee !=nil &&_cee ._ae {_dbc =(_ccg >>(_fgfb -_fbd -_cab ))&_dfg ;_cee =_cee ._dc [_dbc ];};return _cee ,nil ;};const (_ffbf int =1024<<7;_aaf int =3;_fgfb uint =24;
);func (_fc *code )String ()string {return _b .Sprintf ("\u0025\u0064\u002f\u0025\u0064\u002f\u0025\u0064",_fc ._g ,_fc ._a ,_fc ._ec );};var (_efd =[][3]int {{4,0x1,int (_df )},{3,0x1,int (_gf )},{1,0x1,int (_ag )},{3,0x3,int (_ga )},{6,0x3,int (_fd )},{7,0x3,int (_eg )},{3,0x2,int (_ef )},{6,0x2,int (_efa )},{7,0x2,int (_fec )},{10,0xf,int (_fb )},{12,0xf,int (_ge )},{12,0x1,int (EOL )}};
_gg =[][3]int {{4,0x07,2},{4,0x08,3},{4,0x0B,4},{4,0x0C,5},{4,0x0E,6},{4,0x0F,7},{5,0x12,128},{5,0x13,8},{5,0x14,9},{5,0x1B,64},{5,0x07,10},{5,0x08,11},{6,0x17,192},{6,0x18,1664},{6,0x2A,16},{6,0x2B,17},{6,0x03,13},{6,0x34,14},{6,0x35,15},{6,0x07,1},{6,0x08,12},{7,0x13,26},{7,0x17,21},{7,0x18,28},{7,0x24,27},{7,0x27,18},{7,0x28,24},{7,0x2B,25},{7,0x03,22},{7,0x37,256},{7,0x04,23},{7,0x08,20},{7,0xC,19},{8,0x12,33},{8,0x13,34},{8,0x14,35},{8,0x15,36},{8,0x16,37},{8,0x17,38},{8,0x1A,31},{8,0x1B,32},{8,0x02,29},{8,0x24,53},{8,0x25,54},{8,0x28,39},{8,0x29,40},{8,0x2A,41},{8,0x2B,42},{8,0x2C,43},{8,0x2D,44},{8,0x03,30},{8,0x32,61},{8,0x33,62},{8,0x34,63},{8,0x35,0},{8,0x36,320},{8,0x37,384},{8,0x04,45},{8,0x4A,59},{8,0x4B,60},{8,0x5,46},{8,0x52,49},{8,0x53,50},{8,0x54,51},{8,0x55,52},{8,0x58,55},{8,0x59,56},{8,0x5A,57},{8,0x5B,58},{8,0x64,448},{8,0x65,512},{8,0x67,640},{8,0x68,576},{8,0x0A,47},{8,0x0B,48},{9,0x01,_ege },{9,0x98,1472},{9,0x99,1536},{9,0x9A,1600},{9,0x9B,1728},{9,0xCC,704},{9,0xCD,768},{9,0xD2,832},{9,0xD3,896},{9,0xD4,960},{9,0xD5,1024},{9,0xD6,1088},{9,0xD7,1152},{9,0xD8,1216},{9,0xD9,1280},{9,0xDA,1344},{9,0xDB,1408},{10,0x01,_ege },{11,0x01,_ege },{11,0x08,1792},{11,0x0C,1856},{11,0x0D,1920},{12,0x00,EOF },{12,0x01,EOL },{12,0x12,1984},{12,0x13,2048},{12,0x14,2112},{12,0x15,2176},{12,0x16,2240},{12,0x17,2304},{12,0x1C,2368},{12,0x1D,2432},{12,0x1E,2496},{12,0x1F,2560}};
_fde =[][3]int {{2,0x02,3},{2,0x03,2},{3,0x02,1},{3,0x03,4},{4,0x02,6},{4,0x03,5},{5,0x03,7},{6,0x04,9},{6,0x05,8},{7,0x04,10},{7,0x05,11},{7,0x07,12},{8,0x04,13},{8,0x07,14},{9,0x01,_ege },{9,0x18,15},{10,0x01,_ege },{10,0x17,16},{10,0x18,17},{10,0x37,0},{10,0x08,18},{10,0x0F,64},{11,0x01,_ege },{11,0x17,24},{11,0x18,25},{11,0x28,23},{11,0x37,22},{11,0x67,19},{11,0x68,20},{11,0x6C,21},{11,0x08,1792},{11,0x0C,1856},{11,0x0D,1920},{12,0x00,EOF },{12,0x01,EOL },{12,0x12,1984},{12,0x13,2048},{12,0x14,2112},{12,0x15,2176},{12,0x16,2240},{12,0x17,2304},{12,0x1C,2368},{12,0x1D,2432},{12,0x1E,2496},{12,0x1F,2560},{12,0x24,52},{12,0x27,55},{12,0x28,56},{12,0x2B,59},{12,0x2C,60},{12,0x33,320},{12,0x34,384},{12,0x35,448},{12,0x37,53},{12,0x38,54},{12,0x52,50},{12,0x53,51},{12,0x54,44},{12,0x55,45},{12,0x56,46},{12,0x57,47},{12,0x58,57},{12,0x59,58},{12,0x5A,61},{12,0x5B,256},{12,0x64,48},{12,0x65,49},{12,0x66,62},{12,0x67,63},{12,0x68,30},{12,0x69,31},{12,0x6A,32},{12,0x6B,33},{12,0x6C,40},{12,0x6D,41},{12,0xC8,128},{12,0xC9,192},{12,0xCA,26},{12,0xCB,27},{12,0xCC,28},{12,0xCD,29},{12,0xD2,34},{12,0xD3,35},{12,0xD4,36},{12,0xD5,37},{12,0xD6,38},{12,0xD7,39},{12,0xDA,42},{12,0xDB,43},{13,0x4A,640},{13,0x4B,704},{13,0x4C,768},{13,0x4D,832},{13,0x52,1280},{13,0x53,1344},{13,0x54,1408},{13,0x55,1472},{13,0x5A,1536},{13,0x5B,1600},{13,0x64,1664},{13,0x65,1728},{13,0x6C,512},{13,0x6D,576},{13,0x72,896},{13,0x73,960},{13,0x74,1024},{13,0x75,1088},{13,0x76,1152},{13,0x77,1216}};
);func _cag (_ea ,_bf int )int {if _ea > _bf {return _bf ;};return _ea ;};type runData struct{_cce *_d .Reader ;_cd int ;_fca int ;_gcg int ;_abga []byte ;_acd int ;_fecg int ;};func _ee (_cb [3]int )*code {return &code {_g :_cb [0],_a :_cb [1],_ec :_cb [2]}};
func _dde (_egg *_d .Reader )(*runData ,error ){_gaf :=&runData {_cce :_egg ,_cd :0,_fca :1};_ccd :=_cag (_fe (_aaf ,int (_egg .Length ())),_ffbf );_gaf ._abga =make ([]byte ,_ccd );if _dba :=_gaf .fillBuffer (0);_dba !=nil {if _dba ==_e .EOF {_gaf ._abga =make ([]byte ,10);
_dd .Log .Debug ("F\u0069\u006c\u006c\u0042uf\u0066e\u0072\u0020\u0066\u0061\u0069l\u0065\u0064\u003a\u0020\u0025\u0076",_dba );}else {return nil ,_dba ;};};return _gaf ,nil ;};func (_effb *runData )fillBuffer (_ebe int )error {_effb ._acd =_ebe ;_ ,_eebg :=_effb ._cce .Seek (int64 (_ebe ),_e .SeekStart );
if _eebg !=nil {if _eebg ==_e .EOF {_dd .Log .Debug ("\u0053\u0065\u0061\u006b\u0020\u0045\u004f\u0046");_effb ._fecg =-1;}else {return _eebg ;};};if _eebg ==nil {_effb ._fecg ,_eebg =_effb ._cce .Read (_effb ._abga );if _eebg !=nil {if _eebg ==_e .EOF {_dd .Log .Trace ("\u0052\u0065\u0061\u0064\u0020\u0045\u004f\u0046");
_effb ._fecg =-1;}else {return _eebg ;};};};if _effb ._fecg > -1&&_effb ._fecg < 3{for _effb ._fecg < 3{_bad ,_bdc :=_effb ._cce .ReadByte ();if _bdc !=nil {if _bdc ==_e .EOF {_effb ._abga [_effb ._fecg ]=0;}else {return _bdc ;};}else {_effb ._abga [_effb ._fecg ]=_bad &0xFF;
};_effb ._fecg ++;};};_effb ._fecg -=3;if _effb ._fecg < 0{_effb ._abga =make ([]byte ,len (_effb ._abga ));_effb ._fecg =len (_effb ._abga )-3;};return nil ;};const (EOF =-3;_ege =-2;EOL =-1;_fbd =8;_gee =(1<<_fbd )-1;_cab =5;_dfg =(1<<_cab )-1;);func _fe (_fcg ,_eca int )int {if _fcg < _eca {return _eca ;
};return _fcg ;};func (_ce *Decoder )uncompress2d (_eged *runData ,_bd []int ,_eebc int ,_aaa []int ,_ecf int )(int ,error ){var (_dae int ;_bac int ;_afd int ;_dfaf =true ;_ad error ;_cbgb *code ;);_bd [_eebc ]=_ecf ;_bd [_eebc +1]=_ecf ;_bd [_eebc +2]=_ecf +1;
_bd [_eebc +3]=_ecf +1;_affg :for _afd < _ecf {_cbgb ,_ad =_eged .uncompressGetCode (_ce ._aeg );if _ad !=nil {return EOL ,nil ;};if _cbgb ==nil {_eged ._cd ++;break _affg ;};_eged ._cd +=_cbgb ._g ;switch mmrCode (_cbgb ._ec ){case _ag :_afd =_bd [_dae ];
case _ga :_afd =_bd [_dae ]+1;case _ef :_afd =_bd [_dae ]-1;case _gf :for {var _gcfb []*code ;if _dfaf {_gcfb =_ce ._bfd ;}else {_gcfb =_ce ._db ;};_cbgb ,_ad =_eged .uncompressGetCode (_gcfb );if _ad !=nil {return 0,_ad ;};if _cbgb ==nil {break _affg ;
};_eged ._cd +=_cbgb ._g ;if _cbgb ._ec < 64{if _cbgb ._ec < 0{_aaa [_bac ]=_afd ;_bac ++;_cbgb =nil ;break _affg ;};_afd +=_cbgb ._ec ;_aaa [_bac ]=_afd ;_bac ++;break ;};_afd +=_cbgb ._ec ;};_cf :=_afd ;_eed :for {var _fbc []*code ;if !_dfaf {_fbc =_ce ._bfd ;
}else {_fbc =_ce ._db ;};_cbgb ,_ad =_eged .uncompressGetCode (_fbc );if _ad !=nil {return 0,_ad ;};if _cbgb ==nil {break _affg ;};_eged ._cd +=_cbgb ._g ;if _cbgb ._ec < 64{if _cbgb ._ec < 0{_aaa [_bac ]=_afd ;_bac ++;break _affg ;};_afd +=_cbgb ._ec ;
if _afd < _ecf ||_afd !=_cf {_aaa [_bac ]=_afd ;_bac ++;};break _eed ;};_afd +=_cbgb ._ec ;};for _afd < _ecf &&_bd [_dae ]<=_afd {_dae +=2;};continue _affg ;case _df :_dae ++;_afd =_bd [_dae ];_dae ++;continue _affg ;case _fd :_afd =_bd [_dae ]+2;case _efa :_afd =_bd [_dae ]-2;
case _eg :_afd =_bd [_dae ]+3;case _fec :_afd =_bd [_dae ]-3;default:if _eged ._cd ==12&&_cbgb ._ec ==EOL {_eged ._cd =0;if _ ,_ad =_ce .uncompress1d (_eged ,_bd ,_ecf );_ad !=nil {return 0,_ad ;};_eged ._cd ++;if _ ,_ad =_ce .uncompress1d (_eged ,_aaa ,_ecf );
_ad !=nil {return 0,_ad ;};_gd ,_eaf :=_ce .uncompress1d (_eged ,_bd ,_ecf );if _eaf !=nil {return EOF ,_eaf ;};_eged ._cd ++;return _gd ,nil ;};_afd =_ecf ;continue _affg ;};if _afd <=_ecf {_dfaf =!_dfaf ;_aaa [_bac ]=_afd ;_bac ++;if _dae > 0{_dae --;
}else {_dae ++;};for _afd < _ecf &&_bd [_dae ]<=_afd {_dae +=2;};};};if _aaa [_bac ]!=_ecf {_aaa [_bac ]=_ecf ;};if _cbgb ==nil {return EOL ,nil ;};return _bac ,nil ;};type Decoder struct{_gc ,_de int ;_gef *runData ;_bfd []*code ;_db []*code ;_aeg []*code ;
};func (_abg *Decoder )uncompress1d (_bef *runData ,_fae []int ,_ecb int )(int ,error ){var (_dbd =true ;_ddf int ;_dfe *code ;_dgf int ;_egb error ;);_cba :for _ddf < _ecb {_ggb :for {if _dbd {_dfe ,_egb =_bef .uncompressGetCode (_abg ._bfd );if _egb !=nil {return 0,_egb ;
};}else {_dfe ,_egb =_bef .uncompressGetCode (_abg ._db );if _egb !=nil {return 0,_egb ;};};_bef ._cd +=_dfe ._g ;if _dfe ._ec < 0{break _cba ;};_ddf +=_dfe ._ec ;if _dfe ._ec < 64{_dbd =!_dbd ;_fae [_dgf ]=_ddf ;_dgf ++;break _ggb ;};};};if _fae [_dgf ]!=_ecb {_fae [_dgf ]=_ecb ;
};_fgf :=EOL ;if _dfe !=nil &&_dfe ._ec !=EOL {_fgf =_dgf ;};return _fgf ,nil ;};func (_afa *runData )uncompressGetCode (_bc []*code )(*code ,error ){return _afa .uncompressGetCodeLittleEndian (_bc );};func (_ffg *Decoder )fillBitmap (_bg *_ca .Bitmap ,_eeb int ,_be []int ,_abf int )error {var _gfeb byte ;
_feg :=0;_fbf :=_bg .GetByteIndex (_feg ,_eeb );for _bed :=0;_bed < _abf ;_bed ++{_eef :=byte (1);_aff :=_be [_bed ];if (_bed &1)==0{_eef =0;};for _feg < _aff {_gfeb =(_gfeb <<1)|_eef ;_feg ++;if (_feg &7)==0{if _fa :=_bg .SetByte (_fbf ,_gfeb );_fa !=nil {return _fa ;
};_fbf ++;_gfeb =0;};};};if (_feg &7)!=0{_gfeb <<=uint (8-(_feg &7));if _dcb :=_bg .SetByte (_fbf ,_gfeb );_dcb !=nil {return _dcb ;};};return nil ;};func (_cbe *Decoder )initTables ()(_abc error ){if _cbe ._bfd ==nil {_cbe ._bfd ,_abc =_cbe .createLittleEndianTable (_gg );
if _abc !=nil {return ;};_cbe ._db ,_abc =_cbe .createLittleEndianTable (_fde );if _abc !=nil {return ;};_cbe ._aeg ,_abc =_cbe .createLittleEndianTable (_efd );if _abc !=nil {return ;};};return nil ;};func (_gac *Decoder )UncompressMMR ()(_cc *_ca .Bitmap ,_aga error ){_cc =_ca .New (_gac ._gc ,_gac ._de );
_bae :=make ([]int ,_cc .Width +5);_bfe :=make ([]int ,_cc .Width +5);_bfe [0]=_cc .Width ;_efdc :=1;var _dcd int ;for _gcf :=0;_gcf < _cc .Height ;_gcf ++{_dcd ,_aga =_gac .uncompress2d (_gac ._gef ,_bfe ,_efdc ,_bae ,_cc .Width );if _aga !=nil {return nil ,_aga ;
};if _dcd ==EOF {break ;};if _dcd > 0{_aga =_gac .fillBitmap (_cc ,_gcf ,_bae ,_dcd );if _aga !=nil {return nil ,_aga ;};};_bfe ,_bae =_bae ,_bfe ;_efdc =_dcd ;};if _aga =_gac .detectAndSkipEOL ();_aga !=nil {return nil ,_aga ;};_gac ._gef .align ();return _cc ,nil ;
};type code struct{_g int ;_a int ;_ec int ;_dc []*code ;_ae bool ;};func (_gge *Decoder )detectAndSkipEOL ()error {for {_ffb ,_abb :=_gge ._gef .uncompressGetCode (_gge ._aeg );if _abb !=nil {return _abb ;};if _ffb !=nil &&_ffb ._ec ==EOL {_gge ._gef ._cd +=_ffb ._g ;
}else {return nil ;};};};const (_df mmrCode =iota ;_gf ;_ag ;_ga ;_fd ;_eg ;_ef ;_efa ;_fec ;_fb ;_ge ;);func (_eb *runData )align (){_eb ._cd =((_eb ._cd +7)>>3)<<3};type mmrCode int ;func (_ccf *runData )uncompressGetNextCodeLittleEndian ()(int ,error ){_cde :=_ccf ._cd -_ccf ._fca ;
if _cde < 0||_cde > 24{_eac :=(_ccf ._cd >>3)-_ccf ._acd ;if _eac >=_ccf ._fecg {_eac +=_ccf ._acd ;if _fee :=_ccf .fillBuffer (_eac );_fee !=nil {return 0,_fee ;};_eac -=_ccf ._acd ;};_cfd :=(uint32 (_ccf ._abga [_eac ]&0xFF)<<16)|(uint32 (_ccf ._abga [_eac +1]&0xFF)<<8)|(uint32 (_ccf ._abga [_eac +2]&0xFF));
_aeb :=uint32 (_ccf ._cd &7);_cfd <<=_aeb ;_ccf ._gcg =int (_cfd );}else {_cca :=_ccf ._fca &7;_dcg :=7-_cca ;if _cde <=_dcg {_ccf ._gcg <<=uint (_cde );}else {_efg :=(_ccf ._fca >>3)+3-_ccf ._acd ;if _efg >=_ccf ._fecg {_efg +=_ccf ._acd ;if _dgb :=_ccf .fillBuffer (_efg );
_dgb !=nil {return 0,_dgb ;};_efg -=_ccf ._acd ;};_cca =8-_cca ;for {_ccf ._gcg <<=uint (_cca );_ccf ._gcg |=int (uint (_ccf ._abga [_efg ])&0xFF);_cde -=_cca ;_efg ++;_cca =8;if !(_cde >=8){break ;};};_ccf ._gcg <<=uint (_cde );};};_ccf ._fca =_ccf ._cd ;
return _ccf ._gcg ,nil ;};func (_af *Decoder )createLittleEndianTable (_ab [][3]int )([]*code ,error ){_dee :=make ([]*code ,_gee +1);for _ac :=0;_ac < len (_ab );_ac ++{_dfd :=_ee (_ab [_ac ]);if _dfd ._g <=_fbd {_fbg :=_fbd -_dfd ._g ;_ecc :=_dfd ._a <<uint (_fbg );
for _cbg :=(1<<uint (_fbg ))-1;_cbg >=0;_cbg --{_aa :=_ecc |_cbg ;_dee [_aa ]=_dfd ;};}else {_ff :=_dfd ._a >>uint (_dfd ._g -_fbd );if _dee [_ff ]==nil {var _gad =_ee ([3]int {});_gad ._dc =make ([]*code ,_dfg +1);_dee [_ff ]=_gad ;};if _dfd ._g <=_fbd +_cab {_ffa :=_fbd +_cab -_dfd ._g ;
_da :=(_dfd ._a <<uint (_ffa ))&_dfg ;_dee [_ff ]._ae =true ;for _fg :=(1<<uint (_ffa ))-1;_fg >=0;_fg --{_dee [_ff ]._dc [_da |_fg ]=_dfd ;};}else {return nil ,_c .New ("\u0043\u006f\u0064\u0065\u0020\u0074a\u0062\u006c\u0065\u0020\u006f\u0076\u0065\u0072\u0066\u006c\u006f\u0077\u0020i\u006e\u0020\u004d\u004d\u0052\u0044\u0065c\u006f\u0064\u0065\u0072");
};};};return _dee ,nil ;};