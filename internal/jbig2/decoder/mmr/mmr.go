//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package mmr ;import (_e "errors";_f "fmt";_fd "github.com/unidoc/unipdf/v3/common";_a "github.com/unidoc/unipdf/v3/internal/bitwise";_af "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";_d "io";);func _ce (_aa ,_afe int )int {if _aa > _afe {return _afe ;
};return _aa ;};func (_bdd *runData )fillBuffer (_cec int )error {_bdd ._fgg =_cec ;_ ,_aed :=_bdd ._ddadf .Seek (int64 (_cec ),_d .SeekStart );if _aed !=nil {if _aed ==_d .EOF {_fd .Log .Debug ("\u0053\u0065\u0061\u006b\u0020\u0045\u004f\u0046");_bdd ._bg =-1;
}else {return _aed ;};};if _aed ==nil {_bdd ._bg ,_aed =_bdd ._ddadf .Read (_bdd ._ega );if _aed !=nil {if _aed ==_d .EOF {_fd .Log .Trace ("\u0052\u0065\u0061\u0064\u0020\u0045\u004f\u0046");_bdd ._bg =-1;}else {return _aed ;};};};if _bdd ._bg > -1&&_bdd ._bg < 3{for _bdd ._bg < 3{_eab ,_ddgc :=_bdd ._ddadf .ReadByte ();
if _ddgc !=nil {if _ddgc ==_d .EOF {_bdd ._ega [_bdd ._bg ]=0;}else {return _ddgc ;};}else {_bdd ._ega [_bdd ._bg ]=_eab &0xFF;};_bdd ._bg ++;};};_bdd ._bg -=3;if _bdd ._bg < 0{_bdd ._ega =make ([]byte ,len (_bdd ._ega ));_bdd ._bg =len (_bdd ._ega )-3;
};return nil ;};func _fe (_dda ,_dfd int )int {if _dda < _dfd {return _dfd ;};return _dda ;};func (_da *code )String ()string {return _f .Sprintf ("\u0025\u0064\u002f\u0025\u0064\u002f\u0025\u0064",_da ._ag ,_da ._ed ,_da ._c );};type mmrCode int ;var (_ffb =[][3]int {{4,0x1,int (_g )},{3,0x1,int (_cd )},{1,0x1,int (_bbf )},{3,0x3,int (_eg )},{6,0x3,int (_ee )},{7,0x3,int (_ff )},{3,0x2,int (_bd )},{6,0x2,int (_age )},{7,0x2,int (_be )},{10,0xf,int (_gc )},{12,0xf,int (_ad )},{12,0x1,int (EOL )}};
_gd =[][3]int {{4,0x07,2},{4,0x08,3},{4,0x0B,4},{4,0x0C,5},{4,0x0E,6},{4,0x0F,7},{5,0x12,128},{5,0x13,8},{5,0x14,9},{5,0x1B,64},{5,0x07,10},{5,0x08,11},{6,0x17,192},{6,0x18,1664},{6,0x2A,16},{6,0x2B,17},{6,0x03,13},{6,0x34,14},{6,0x35,15},{6,0x07,1},{6,0x08,12},{7,0x13,26},{7,0x17,21},{7,0x18,28},{7,0x24,27},{7,0x27,18},{7,0x28,24},{7,0x2B,25},{7,0x03,22},{7,0x37,256},{7,0x04,23},{7,0x08,20},{7,0xC,19},{8,0x12,33},{8,0x13,34},{8,0x14,35},{8,0x15,36},{8,0x16,37},{8,0x17,38},{8,0x1A,31},{8,0x1B,32},{8,0x02,29},{8,0x24,53},{8,0x25,54},{8,0x28,39},{8,0x29,40},{8,0x2A,41},{8,0x2B,42},{8,0x2C,43},{8,0x2D,44},{8,0x03,30},{8,0x32,61},{8,0x33,62},{8,0x34,63},{8,0x35,0},{8,0x36,320},{8,0x37,384},{8,0x04,45},{8,0x4A,59},{8,0x4B,60},{8,0x5,46},{8,0x52,49},{8,0x53,50},{8,0x54,51},{8,0x55,52},{8,0x58,55},{8,0x59,56},{8,0x5A,57},{8,0x5B,58},{8,0x64,448},{8,0x65,512},{8,0x67,640},{8,0x68,576},{8,0x0A,47},{8,0x0B,48},{9,0x01,_bbb },{9,0x98,1472},{9,0x99,1536},{9,0x9A,1600},{9,0x9B,1728},{9,0xCC,704},{9,0xCD,768},{9,0xD2,832},{9,0xD3,896},{9,0xD4,960},{9,0xD5,1024},{9,0xD6,1088},{9,0xD7,1152},{9,0xD8,1216},{9,0xD9,1280},{9,0xDA,1344},{9,0xDB,1408},{10,0x01,_bbb },{11,0x01,_bbb },{11,0x08,1792},{11,0x0C,1856},{11,0x0D,1920},{12,0x00,EOF },{12,0x01,EOL },{12,0x12,1984},{12,0x13,2048},{12,0x14,2112},{12,0x15,2176},{12,0x16,2240},{12,0x17,2304},{12,0x1C,2368},{12,0x1D,2432},{12,0x1E,2496},{12,0x1F,2560}};
_gdd =[][3]int {{2,0x02,3},{2,0x03,2},{3,0x02,1},{3,0x03,4},{4,0x02,6},{4,0x03,5},{5,0x03,7},{6,0x04,9},{6,0x05,8},{7,0x04,10},{7,0x05,11},{7,0x07,12},{8,0x04,13},{8,0x07,14},{9,0x01,_bbb },{9,0x18,15},{10,0x01,_bbb },{10,0x17,16},{10,0x18,17},{10,0x37,0},{10,0x08,18},{10,0x0F,64},{11,0x01,_bbb },{11,0x17,24},{11,0x18,25},{11,0x28,23},{11,0x37,22},{11,0x67,19},{11,0x68,20},{11,0x6C,21},{11,0x08,1792},{11,0x0C,1856},{11,0x0D,1920},{12,0x00,EOF },{12,0x01,EOL },{12,0x12,1984},{12,0x13,2048},{12,0x14,2112},{12,0x15,2176},{12,0x16,2240},{12,0x17,2304},{12,0x1C,2368},{12,0x1D,2432},{12,0x1E,2496},{12,0x1F,2560},{12,0x24,52},{12,0x27,55},{12,0x28,56},{12,0x2B,59},{12,0x2C,60},{12,0x33,320},{12,0x34,384},{12,0x35,448},{12,0x37,53},{12,0x38,54},{12,0x52,50},{12,0x53,51},{12,0x54,44},{12,0x55,45},{12,0x56,46},{12,0x57,47},{12,0x58,57},{12,0x59,58},{12,0x5A,61},{12,0x5B,256},{12,0x64,48},{12,0x65,49},{12,0x66,62},{12,0x67,63},{12,0x68,30},{12,0x69,31},{12,0x6A,32},{12,0x6B,33},{12,0x6C,40},{12,0x6D,41},{12,0xC8,128},{12,0xC9,192},{12,0xCA,26},{12,0xCB,27},{12,0xCC,28},{12,0xCD,29},{12,0xD2,34},{12,0xD3,35},{12,0xD4,36},{12,0xD5,37},{12,0xD6,38},{12,0xD7,39},{12,0xDA,42},{12,0xDB,43},{13,0x4A,640},{13,0x4B,704},{13,0x4C,768},{13,0x4D,832},{13,0x52,1280},{13,0x53,1344},{13,0x54,1408},{13,0x55,1472},{13,0x5A,1536},{13,0x5B,1600},{13,0x64,1664},{13,0x65,1728},{13,0x6C,512},{13,0x6D,576},{13,0x72,896},{13,0x73,960},{13,0x74,1024},{13,0x75,1088},{13,0x76,1152},{13,0x77,1216}};
);func (_afg *Decoder )createLittleEndianTable (_eeb [][3]int )([]*code ,error ){_agb :=make ([]*code ,_ffg +1);for _fce :=0;_fce < len (_eeb );_fce ++{_eef :=_ae (_eeb [_fce ]);if _eef ._ag <=_egg {_ffd :=_egg -_eef ._ag ;_bbg :=_eef ._ed <<uint (_ffd );
for _fb :=(1<<uint (_ffd ))-1;_fb >=0;_fb --{_fdf :=_bbg |_fb ;_agb [_fdf ]=_eef ;};}else {_cb :=_eef ._ed >>uint (_eef ._ag -_egg );if _agb [_cb ]==nil {var _ceg =_ae ([3]int {});_ceg ._dd =make ([]*code ,_beg +1);_agb [_cb ]=_ceg ;};if _eef ._ag <=_egg +_bec {_fbb :=_egg +_bec -_eef ._ag ;
_bege :=(_eef ._ed <<uint (_fbb ))&_beg ;_agb [_cb ]._bb =true ;for _aba :=(1<<uint (_fbb ))-1;_aba >=0;_aba --{_agb [_cb ]._dd [_bege |_aba ]=_eef ;};}else {return nil ,_e .New ("\u0043\u006f\u0064\u0065\u0020\u0074a\u0062\u006c\u0065\u0020\u006f\u0076\u0065\u0072\u0066\u006c\u006f\u0077\u0020i\u006e\u0020\u004d\u004d\u0052\u0044\u0065c\u006f\u0064\u0065\u0072");
};};};return _agb ,nil ;};type Decoder struct{_cf ,_ca int ;_fc *runData ;_ba []*code ;_ddd []*code ;_fda []*code ;};const (_eda int =1024<<7;_cg int =3;_fdb uint =24;);func (_cc *runData )uncompressGetCode (_gce []*code )(*code ,error ){return _cc .uncompressGetCodeLittleEndian (_gce );
};func (_bba *runData )align (){_bba ._geg =((_bba ._geg +7)>>3)<<3};func (_dfdb *Decoder )detectAndSkipEOL ()error {for {_gcd ,_eb :=_dfdb ._fc .uncompressGetCode (_dfdb ._fda );if _eb !=nil {return _eb ;};if _gcd !=nil &&_gcd ._c ==EOL {_dfdb ._fc ._geg +=_gcd ._ag ;
}else {return nil ;};};};func (_daf *Decoder )uncompress1d (_agd *runData ,_ea []int ,_ddad int )(int ,error ){var (_dc =true ;_cad int ;_bde *code ;_fea int ;_aaa error ;);_ddab :for _cad < _ddad {_ga :for {if _dc {_bde ,_aaa =_agd .uncompressGetCode (_daf ._ba );
if _aaa !=nil {return 0,_aaa ;};}else {_bde ,_aaa =_agd .uncompressGetCode (_daf ._ddd );if _aaa !=nil {return 0,_aaa ;};};_agd ._geg +=_bde ._ag ;if _bde ._c < 0{break _ddab ;};_cad +=_bde ._c ;if _bde ._c < 64{_dc =!_dc ;_ea [_fea ]=_cad ;_fea ++;break _ga ;
};};};if _ea [_fea ]!=_ddad {_ea [_fea ]=_ddad ;};_daa :=EOL ;if _bde !=nil &&_bde ._c !=EOL {_daa =_fea ;};return _daa ,nil ;};func (_ebb *Decoder )fillBitmap (_ffaf *_af .Bitmap ,_becb int ,_fgf []int ,_bf int )error {var _fbbg byte ;_ac :=0;_bdb :=_ffaf .GetByteIndex (_ac ,_becb );
for _ebe :=0;_ebe < _bf ;_ebe ++{_fdd :=byte (1);_edd :=_fgf [_ebe ];if (_ebe &1)==0{_fdd =0;};for _ac < _edd {_fbbg =(_fbbg <<1)|_fdd ;_ac ++;if (_ac &7)==0{if _agg :=_ffaf .SetByte (_bdb ,_fbbg );_agg !=nil {return _agg ;};_bdb ++;_fbbg =0;};};};if (_ac &7)!=0{_fbbg <<=uint (8-(_ac &7));
if _ada :=_ffaf .SetByte (_bdb ,_fbbg );_ada !=nil {return _ada ;};};return nil ;};type code struct{_ag int ;_ed int ;_c int ;_dd []*code ;_bb bool ;};func _ae (_df [3]int )*code {return &code {_ag :_df [0],_ed :_df [1],_c :_df [2]}};const (_g mmrCode =iota ;
_cd ;_bbf ;_eg ;_ee ;_ff ;_bd ;_age ;_be ;_gc ;_ad ;);func New (r *_a .Reader ,width ,height int ,dataOffset ,dataLength int64 )(*Decoder ,error ){_cac :=&Decoder {_cf :width ,_ca :height };_dac ,_bdg :=r .NewPartialReader (int (dataOffset ),int (dataLength ),false );
if _bdg !=nil {return nil ,_bdg ;};_ab ,_bdg :=_gef (_dac );if _bdg !=nil {return nil ,_bdg ;};_ ,_bdg =r .Seek (_dac .RelativePosition (),_d .SeekCurrent );if _bdg !=nil {return nil ,_bdg ;};_cac ._fc =_ab ;if _gb :=_cac .initTables ();_gb !=nil {return nil ,_gb ;
};return _cac ,nil ;};func _gef (_feab *_a .Reader )(*runData ,error ){_dbc :=&runData {_ddadf :_feab ,_geg :0,_gbb :1};_egge :=_ce (_fe (_cg ,int (_feab .Length ())),_eda );_dbc ._ega =make ([]byte ,_egge );if _bce :=_dbc .fillBuffer (0);_bce !=nil {if _bce ==_d .EOF {_dbc ._ega =make ([]byte ,10);
_fd .Log .Debug ("F\u0069\u006c\u006c\u0042uf\u0066e\u0072\u0020\u0066\u0061\u0069l\u0065\u0064\u003a\u0020\u0025\u0076",_bce );}else {return nil ,_bce ;};};return _dbc ,nil ;};func (_ffa *Decoder )UncompressMMR ()(_de *_af .Bitmap ,_fg error ){_de =_af .New (_ffa ._cf ,_ffa ._ca );
_ge :=make ([]int ,_de .Width +5);_cdf :=make ([]int ,_de .Width +5);_cdf [0]=_de .Width ;_dag :=1;var _gba int ;for _fef :=0;_fef < _de .Height ;_fef ++{_gba ,_fg =_ffa .uncompress2d (_ffa ._fc ,_cdf ,_dag ,_ge ,_de .Width );if _fg !=nil {return nil ,_fg ;
};if _gba ==EOF {break ;};if _gba > 0{_fg =_ffa .fillBitmap (_de ,_fef ,_ge ,_gba );if _fg !=nil {return nil ,_fg ;};};_cdf ,_ge =_ge ,_cdf ;_dag =_gba ;};if _fg =_ffa .detectAndSkipEOL ();_fg !=nil {return nil ,_fg ;};_ffa ._fc .align ();return _de ,nil ;
};func (_cfb *runData )uncompressGetNextCodeLittleEndian ()(int ,error ){_fca :=_cfb ._geg -_cfb ._gbb ;if _fca < 0||_fca > 24{_ef :=(_cfb ._geg >>3)-_cfb ._fgg ;if _ef >=_cfb ._bg {_ef +=_cfb ._fgg ;if _cff :=_cfb .fillBuffer (_ef );_cff !=nil {return 0,_cff ;
};_ef -=_cfb ._fgg ;};_cca :=(uint32 (_cfb ._ega [_ef ]&0xFF)<<16)|(uint32 (_cfb ._ega [_ef +1]&0xFF)<<8)|(uint32 (_cfb ._ega [_ef +2]&0xFF));_deg :=uint32 (_cfb ._geg &7);_cca <<=_deg ;_cfb ._gdb =int (_cca );}else {_abc :=_cfb ._gbb &7;_afc :=7-_abc ;
if _fca <=_afc {_cfb ._gdb <<=uint (_fca );}else {_bbgg :=(_cfb ._gbb >>3)+3-_cfb ._fgg ;if _bbgg >=_cfb ._bg {_bbgg +=_cfb ._fgg ;if _cab :=_cfb .fillBuffer (_bbgg );_cab !=nil {return 0,_cab ;};_bbgg -=_cfb ._fgg ;};_abc =8-_abc ;for {_cfb ._gdb <<=uint (_abc );
_cfb ._gdb |=int (uint (_cfb ._ega [_bbgg ])&0xFF);_fca -=_abc ;_bbgg ++;_abc =8;if !(_fca >=8){break ;};};_cfb ._gdb <<=uint (_fca );};};_cfb ._gbb =_cfb ._geg ;return _cfb ._gdb ,nil ;};func (_ecdg *runData )uncompressGetCodeLittleEndian (_gdbf []*code )(*code ,error ){_cga ,_gdf :=_ecdg .uncompressGetNextCodeLittleEndian ();
if _gdf !=nil {_fd .Log .Debug ("\u0055n\u0063\u006fm\u0070\u0072\u0065\u0073s\u0047\u0065\u0074N\u0065\u0078\u0074\u0043\u006f\u0064\u0065\u004c\u0069tt\u006c\u0065\u0045n\u0064\u0069a\u006e\u0020\u0066\u0061\u0069\u006ce\u0064\u003a \u0025\u0076",_gdf );
return nil ,_gdf ;};_cga &=0xffffff;_ddg :=_cga >>(_fdb -_egg );_ccb :=_gdbf [_ddg ];if _ccb !=nil &&_ccb ._bb {_ddg =(_cga >>(_fdb -_egg -_bec ))&_beg ;_ccb =_ccb ._dd [_ddg ];};return _ccb ,nil ;};const (EOF =-3;_bbb =-2;EOL =-1;_egg =8;_ffg =(1<<_egg )-1;
_bec =5;_beg =(1<<_bec )-1;);func (_abb *Decoder )uncompress2d (_ec *runData ,_gg []int ,_gf int ,_afee []int ,_bc int )(int ,error ){var (_gdc int ;_ffad int ;_ced int ;_aac =true ;_aag error ;_fcc *code ;);_gg [_gf ]=_bc ;_gg [_gf +1]=_bc ;_gg [_gf +2]=_bc +1;
_gg [_gf +3]=_bc +1;_db :for _ced < _bc {_fcc ,_aag =_ec .uncompressGetCode (_abb ._fda );if _aag !=nil {return EOL ,nil ;};if _fcc ==nil {_ec ._geg ++;break _db ;};_ec ._geg +=_fcc ._ag ;switch mmrCode (_fcc ._c ){case _bbf :_ced =_gg [_gdc ];case _eg :_ced =_gg [_gdc ]+1;
case _bd :_ced =_gg [_gdc ]-1;case _cd :for {var _fde []*code ;if _aac {_fde =_abb ._ba ;}else {_fde =_abb ._ddd ;};_fcc ,_aag =_ec .uncompressGetCode (_fde );if _aag !=nil {return 0,_aag ;};if _fcc ==nil {break _db ;};_ec ._geg +=_fcc ._ag ;if _fcc ._c < 64{if _fcc ._c < 0{_afee [_ffad ]=_ced ;
_ffad ++;_fcc =nil ;break _db ;};_ced +=_fcc ._c ;_afee [_ffad ]=_ced ;_ffad ++;break ;};_ced +=_fcc ._c ;};_ageb :=_ced ;_ecg :for {var _bca []*code ;if !_aac {_bca =_abb ._ba ;}else {_bca =_abb ._ddd ;};_fcc ,_aag =_ec .uncompressGetCode (_bca );if _aag !=nil {return 0,_aag ;
};if _fcc ==nil {break _db ;};_ec ._geg +=_fcc ._ag ;if _fcc ._c < 64{if _fcc ._c < 0{_afee [_ffad ]=_ced ;_ffad ++;break _db ;};_ced +=_fcc ._c ;if _ced < _bc ||_ced !=_ageb {_afee [_ffad ]=_ced ;_ffad ++;};break _ecg ;};_ced +=_fcc ._c ;};for _ced < _bc &&_gg [_gdc ]<=_ced {_gdc +=2;
};continue _db ;case _g :_gdc ++;_ced =_gg [_gdc ];_gdc ++;continue _db ;case _ee :_ced =_gg [_gdc ]+2;case _age :_ced =_gg [_gdc ]-2;case _ff :_ced =_gg [_gdc ]+3;case _be :_ced =_gg [_gdc ]-3;default:if _ec ._geg ==12&&_fcc ._c ==EOL {_ec ._geg =0;if _ ,_aag =_abb .uncompress1d (_ec ,_gg ,_bc );
_aag !=nil {return 0,_aag ;};_ec ._geg ++;if _ ,_aag =_abb .uncompress1d (_ec ,_afee ,_bc );_aag !=nil {return 0,_aag ;};_ecd ,_agf :=_abb .uncompress1d (_ec ,_gg ,_bc );if _agf !=nil {return EOF ,_agf ;};_ec ._geg ++;return _ecd ,nil ;};_ced =_bc ;continue _db ;
};if _ced <=_bc {_aac =!_aac ;_afee [_ffad ]=_ced ;_ffad ++;if _gdc > 0{_gdc --;}else {_gdc ++;};for _ced < _bc &&_gg [_gdc ]<=_ced {_gdc +=2;};};};if _afee [_ffad ]!=_bc {_afee [_ffad ]=_bc ;};if _fcc ==nil {return EOL ,nil ;};return _ffad ,nil ;};func (_ceb *Decoder )initTables ()(_cdg error ){if _ceb ._ba ==nil {_ceb ._ba ,_cdg =_ceb .createLittleEndianTable (_gd );
if _cdg !=nil {return ;};_ceb ._ddd ,_cdg =_ceb .createLittleEndianTable (_gdd );if _cdg !=nil {return ;};_ceb ._fda ,_cdg =_ceb .createLittleEndianTable (_ffb );if _cdg !=nil {return ;};};return nil ;};type runData struct{_ddadf *_a .Reader ;_geg int ;
_gbb int ;_gdb int ;_ega []byte ;_fgg int ;_bg int ;};