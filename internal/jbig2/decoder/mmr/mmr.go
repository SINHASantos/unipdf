//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package mmr ;import (_fc "errors";_a "fmt";_e "github.com/unidoc/unipdf/v3/common";_d "github.com/unidoc/unipdf/v3/internal/bitwise";_c "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";_g "io";);func (_gfa *Decoder )initTables ()(_cf error ){if _gfa ._ee ==nil {_gfa ._ee ,_cf =_gfa .createLittleEndianTable (_ag );
if _cf !=nil {return ;};_gfa ._cbe ,_cf =_gfa .createLittleEndianTable (_fab );if _cf !=nil {return ;};_gfa ._df ,_cf =_gfa .createLittleEndianTable (_ca );if _cf !=nil {return ;};};return nil ;};func _cc (_af [3]int )*code {return &code {_ge :_af [0],_fd :_af [1],_gb :_af [2]}};
func _fdf (_fb ,_gf int )int {if _fb < _gf {return _gf ;};return _fb ;};func (_dffe *runData )uncompressGetNextCodeLittleEndian ()(int ,error ){_abd :=_dffe ._ecf -_dffe ._bcc ;if _abd < 0||_abd > 24{_fec :=(_dffe ._ecf >>3)-_dffe ._aeaf ;if _fec >=_dffe ._age {_fec +=_dffe ._aeaf ;
if _aeg :=_dffe .fillBuffer (_fec );_aeg !=nil {return 0,_aeg ;};_fec -=_dffe ._aeaf ;};_ffd :=(uint32 (_dffe ._bfc [_fec ]&0xFF)<<16)|(uint32 (_dffe ._bfc [_fec +1]&0xFF)<<8)|(uint32 (_dffe ._bfc [_fec +2]&0xFF));_afe :=uint32 (_dffe ._ecf &7);_ffd <<=_afe ;
_dffe ._fga =int (_ffd );}else {_affa :=_dffe ._bcc &7;_fgc :=7-_affa ;if _abd <=_fgc {_dffe ._fga <<=uint (_abd );}else {_cfe :=(_dffe ._bcc >>3)+3-_dffe ._aeaf ;if _cfe >=_dffe ._age {_cfe +=_dffe ._aeaf ;if _cde :=_dffe .fillBuffer (_cfe );_cde !=nil {return 0,_cde ;
};_cfe -=_dffe ._aeaf ;};_affa =8-_affa ;for {_dffe ._fga <<=uint (_affa );_dffe ._fga |=int (uint (_dffe ._bfc [_cfe ])&0xFF);_abd -=_affa ;_cfe ++;_affa =8;if !(_abd >=8){break ;};};_dffe ._fga <<=uint (_abd );};};_dffe ._bcc =_dffe ._ecf ;return _dffe ._fga ,nil ;
};type mmrCode int ;func (_dff *Decoder )detectAndSkipEOL ()error {for {_cbb ,_bb :=_dff ._b .uncompressGetCode (_dff ._df );if _bb !=nil {return _bb ;};if _cbb !=nil &&_cbb ._gb ==EOL {_dff ._b ._ecf +=_cbb ._ge ;}else {return nil ;};};};func (_aff *Decoder )UncompressMMR ()(_ecb *_c .Bitmap ,_aag error ){_ecb =_c .New (_aff ._dcb ,_aff ._ffb );
_bc :=make ([]int ,_ecb .Width +5);_db :=make ([]int ,_ecb .Width +5);_db [0]=_ecb .Width ;_cd :=1;var _cgeb int ;for _baf :=0;_baf < _ecb .Height ;_baf ++{_cgeb ,_aag =_aff .uncompress2d (_aff ._b ,_db ,_cd ,_bc ,_ecb .Width );if _aag !=nil {return nil ,_aag ;
};if _cgeb ==EOF {break ;};if _cgeb > 0{_aag =_aff .fillBitmap (_ecb ,_baf ,_bc ,_cgeb );if _aag !=nil {return nil ,_aag ;};};_db ,_bc =_bc ,_db ;_cd =_cgeb ;};if _aag =_aff .detectAndSkipEOL ();_aag !=nil {return nil ,_aag ;};_aff ._b .align ();return _ecb ,nil ;
};func (_ac *runData )uncompressGetCodeLittleEndian (_ef []*code )(*code ,error ){_aac ,_feb :=_ac .uncompressGetNextCodeLittleEndian ();if _feb !=nil {_e .Log .Debug ("\u0055n\u0063\u006fm\u0070\u0072\u0065\u0073s\u0047\u0065\u0074N\u0065\u0078\u0074\u0043\u006f\u0064\u0065\u004c\u0069tt\u006c\u0065\u0045n\u0064\u0069a\u006e\u0020\u0066\u0061\u0069\u006ce\u0064\u003a \u0025\u0076",_feb );
return nil ,_feb ;};_aac &=0xffffff;_gda :=_aac >>(_fbe -_ceg );_bgf :=_ef [_gda ];if _bgf !=nil &&_bgf ._ce {_gda =(_aac >>(_fbe -_ceg -_dc ))&_aa ;_bgf =_bgf ._ad [_gda ];};return _bgf ,nil ;};type Decoder struct{_dcb ,_ffb int ;_b *runData ;_ee []*code ;
_cbe []*code ;_df []*code ;};const (_ccb int =1024<<7;_fdfc int =3;_fbe uint =24;);const (_adc mmrCode =iota ;_gg ;_fa ;_fbb ;_cg ;_fce ;_cba ;_ec ;_ccf ;_cge ;_cgc ;);var (_ca =[][3]int {{4,0x1,int (_adc )},{3,0x1,int (_gg )},{1,0x1,int (_fa )},{3,0x3,int (_fbb )},{6,0x3,int (_cg )},{7,0x3,int (_fce )},{3,0x2,int (_cba )},{6,0x2,int (_ec )},{7,0x2,int (_ccf )},{10,0xf,int (_cge )},{12,0xf,int (_cgc )},{12,0x1,int (EOL )}};
_ag =[][3]int {{4,0x07,2},{4,0x08,3},{4,0x0B,4},{4,0x0C,5},{4,0x0E,6},{4,0x0F,7},{5,0x12,128},{5,0x13,8},{5,0x14,9},{5,0x1B,64},{5,0x07,10},{5,0x08,11},{6,0x17,192},{6,0x18,1664},{6,0x2A,16},{6,0x2B,17},{6,0x03,13},{6,0x34,14},{6,0x35,15},{6,0x07,1},{6,0x08,12},{7,0x13,26},{7,0x17,21},{7,0x18,28},{7,0x24,27},{7,0x27,18},{7,0x28,24},{7,0x2B,25},{7,0x03,22},{7,0x37,256},{7,0x04,23},{7,0x08,20},{7,0xC,19},{8,0x12,33},{8,0x13,34},{8,0x14,35},{8,0x15,36},{8,0x16,37},{8,0x17,38},{8,0x1A,31},{8,0x1B,32},{8,0x02,29},{8,0x24,53},{8,0x25,54},{8,0x28,39},{8,0x29,40},{8,0x2A,41},{8,0x2B,42},{8,0x2C,43},{8,0x2D,44},{8,0x03,30},{8,0x32,61},{8,0x33,62},{8,0x34,63},{8,0x35,0},{8,0x36,320},{8,0x37,384},{8,0x04,45},{8,0x4A,59},{8,0x4B,60},{8,0x5,46},{8,0x52,49},{8,0x53,50},{8,0x54,51},{8,0x55,52},{8,0x58,55},{8,0x59,56},{8,0x5A,57},{8,0x5B,58},{8,0x64,448},{8,0x65,512},{8,0x67,640},{8,0x68,576},{8,0x0A,47},{8,0x0B,48},{9,0x01,_cce },{9,0x98,1472},{9,0x99,1536},{9,0x9A,1600},{9,0x9B,1728},{9,0xCC,704},{9,0xCD,768},{9,0xD2,832},{9,0xD3,896},{9,0xD4,960},{9,0xD5,1024},{9,0xD6,1088},{9,0xD7,1152},{9,0xD8,1216},{9,0xD9,1280},{9,0xDA,1344},{9,0xDB,1408},{10,0x01,_cce },{11,0x01,_cce },{11,0x08,1792},{11,0x0C,1856},{11,0x0D,1920},{12,0x00,EOF },{12,0x01,EOL },{12,0x12,1984},{12,0x13,2048},{12,0x14,2112},{12,0x15,2176},{12,0x16,2240},{12,0x17,2304},{12,0x1C,2368},{12,0x1D,2432},{12,0x1E,2496},{12,0x1F,2560}};
_fab =[][3]int {{2,0x02,3},{2,0x03,2},{3,0x02,1},{3,0x03,4},{4,0x02,6},{4,0x03,5},{5,0x03,7},{6,0x04,9},{6,0x05,8},{7,0x04,10},{7,0x05,11},{7,0x07,12},{8,0x04,13},{8,0x07,14},{9,0x01,_cce },{9,0x18,15},{10,0x01,_cce },{10,0x17,16},{10,0x18,17},{10,0x37,0},{10,0x08,18},{10,0x0F,64},{11,0x01,_cce },{11,0x17,24},{11,0x18,25},{11,0x28,23},{11,0x37,22},{11,0x67,19},{11,0x68,20},{11,0x6C,21},{11,0x08,1792},{11,0x0C,1856},{11,0x0D,1920},{12,0x00,EOF },{12,0x01,EOL },{12,0x12,1984},{12,0x13,2048},{12,0x14,2112},{12,0x15,2176},{12,0x16,2240},{12,0x17,2304},{12,0x1C,2368},{12,0x1D,2432},{12,0x1E,2496},{12,0x1F,2560},{12,0x24,52},{12,0x27,55},{12,0x28,56},{12,0x2B,59},{12,0x2C,60},{12,0x33,320},{12,0x34,384},{12,0x35,448},{12,0x37,53},{12,0x38,54},{12,0x52,50},{12,0x53,51},{12,0x54,44},{12,0x55,45},{12,0x56,46},{12,0x57,47},{12,0x58,57},{12,0x59,58},{12,0x5A,61},{12,0x5B,256},{12,0x64,48},{12,0x65,49},{12,0x66,62},{12,0x67,63},{12,0x68,30},{12,0x69,31},{12,0x6A,32},{12,0x6B,33},{12,0x6C,40},{12,0x6D,41},{12,0xC8,128},{12,0xC9,192},{12,0xCA,26},{12,0xCB,27},{12,0xCC,28},{12,0xCD,29},{12,0xD2,34},{12,0xD3,35},{12,0xD4,36},{12,0xD5,37},{12,0xD6,38},{12,0xD7,39},{12,0xDA,42},{12,0xDB,43},{13,0x4A,640},{13,0x4B,704},{13,0x4C,768},{13,0x4D,832},{13,0x52,1280},{13,0x53,1344},{13,0x54,1408},{13,0x55,1472},{13,0x5A,1536},{13,0x5B,1600},{13,0x64,1664},{13,0x65,1728},{13,0x6C,512},{13,0x6D,576},{13,0x72,896},{13,0x73,960},{13,0x74,1024},{13,0x75,1088},{13,0x76,1152},{13,0x77,1216}};
);func _cb (_ccd ,_ea int )int {if _ccd > _ea {return _ea ;};return _ccd ;};type runData struct{_eca *_d .Reader ;_ecf int ;_bcc int ;_fga int ;_bfc []byte ;_aeaf int ;_age int ;};func (_de *runData )fillBuffer (_gcg int )error {_de ._aeaf =_gcg ;_ ,_dfee :=_de ._eca .Seek (int64 (_gcg ),_g .SeekStart );
if _dfee !=nil {if _dfee ==_g .EOF {_e .Log .Debug ("\u0053\u0065\u0061\u006b\u0020\u0045\u004f\u0046");_de ._age =-1;}else {return _dfee ;};};if _dfee ==nil {_de ._age ,_dfee =_de ._eca .Read (_de ._bfc );if _dfee !=nil {if _dfee ==_g .EOF {_e .Log .Trace ("\u0052\u0065\u0061\u0064\u0020\u0045\u004f\u0046");
_de ._age =-1;}else {return _dfee ;};};};if _de ._age > -1&&_de ._age < 3{for _de ._age < 3{_bada ,_gdc :=_de ._eca .ReadByte ();if _gdc !=nil {if _gdc ==_g .EOF {_de ._bfc [_de ._age ]=0;}else {return _gdc ;};}else {_de ._bfc [_de ._age ]=_bada &0xFF;
};_de ._age ++;};};_de ._age -=3;if _de ._age < 0{_de ._bfc =make ([]byte ,len (_de ._bfc ));_de ._age =len (_de ._bfc )-3;};return nil ;};func (_dfe *Decoder )createLittleEndianTable (_bf [][3]int )([]*code ,error ){_ccdc :=make ([]*code ,_ff +1);for _eg :=0;
_eg < len (_bf );_eg ++{_gd :=_cc (_bf [_eg ]);if _gd ._ge <=_ceg {_dbb :=_ceg -_gd ._ge ;_ggc :=_gd ._fd <<uint (_dbb );for _ae :=(1<<uint (_dbb ))-1;_ae >=0;_ae --{_fda :=_ggc |_ae ;_ccdc [_fda ]=_gd ;};}else {_eb :=_gd ._fd >>uint (_gd ._ge -_ceg );
if _ccdc [_eb ]==nil {var _fbbc =_cc ([3]int {});_fbbc ._ad =make ([]*code ,_aa +1);_ccdc [_eb ]=_fbbc ;};if _gd ._ge <=_ceg +_dc {_bd :=_ceg +_dc -_gd ._ge ;_gee :=(_gd ._fd <<uint (_bd ))&_aa ;_ccdc [_eb ]._ce =true ;for _cdc :=(1<<uint (_bd ))-1;_cdc >=0;
_cdc --{_ccdc [_eb ]._ad [_gee |_cdc ]=_gd ;};}else {return nil ,_fc .New ("\u0043\u006f\u0064\u0065\u0020\u0074a\u0062\u006c\u0065\u0020\u006f\u0076\u0065\u0072\u0066\u006c\u006f\u0077\u0020i\u006e\u0020\u004d\u004d\u0052\u0044\u0065c\u006f\u0064\u0065\u0072");
};};};return _ccdc ,nil ;};func New (r *_d .Reader ,width ,height int ,dataOffset ,dataLength int64 )(*Decoder ,error ){_dg :=&Decoder {_dcb :width ,_ffb :height };_ba ,_fg :=r .NewPartialReader (int (dataOffset ),int (dataLength ),false );if _fg !=nil {return nil ,_fg ;
};_add ,_fg :=_fbd (_ba );if _fg !=nil {return nil ,_fg ;};_ ,_fg =r .Seek (_ba .RelativePosition (),_g .SeekCurrent );if _fg !=nil {return nil ,_fg ;};_dg ._b =_add ;if _ead :=_dg .initTables ();_ead !=nil {return nil ,_ead ;};return _dg ,nil ;};func (_cfg *Decoder )uncompress2d (_fbg *runData ,_bad []int ,_fed int ,_gfac []int ,_ced int )(int ,error ){var (_fge int ;
_ggd int ;_gbb int ;_da =true ;_bbf error ;_ece *code ;);_bad [_fed ]=_ced ;_bad [_fed +1]=_ced ;_bad [_fed +2]=_ced +1;_bad [_fed +3]=_ced +1;_gde :for _gbb < _ced {_ece ,_bbf =_fbg .uncompressGetCode (_cfg ._df );if _bbf !=nil {return EOL ,nil ;};if _ece ==nil {_fbg ._ecf ++;
break _gde ;};_fbg ._ecf +=_ece ._ge ;switch mmrCode (_ece ._gb ){case _fa :_gbb =_bad [_fge ];case _fbb :_gbb =_bad [_fge ]+1;case _cba :_gbb =_bad [_fge ]-1;case _gg :for {var _ffe []*code ;if _da {_ffe =_cfg ._ee ;}else {_ffe =_cfg ._cbe ;};_ece ,_bbf =_fbg .uncompressGetCode (_ffe );
if _bbf !=nil {return 0,_bbf ;};if _ece ==nil {break _gde ;};_fbg ._ecf +=_ece ._ge ;if _ece ._gb < 64{if _ece ._gb < 0{_gfac [_ggd ]=_gbb ;_ggd ++;_ece =nil ;break _gde ;};_gbb +=_ece ._gb ;_gfac [_ggd ]=_gbb ;_ggd ++;break ;};_gbb +=_ece ._gb ;};_ga :=_gbb ;
_ggb :for {var _dcge []*code ;if !_da {_dcge =_cfg ._ee ;}else {_dcge =_cfg ._cbe ;};_ece ,_bbf =_fbg .uncompressGetCode (_dcge );if _bbf !=nil {return 0,_bbf ;};if _ece ==nil {break _gde ;};_fbg ._ecf +=_ece ._ge ;if _ece ._gb < 64{if _ece ._gb < 0{_gfac [_ggd ]=_gbb ;
_ggd ++;break _gde ;};_gbb +=_ece ._gb ;if _gbb < _ced ||_gbb !=_ga {_gfac [_ggd ]=_gbb ;_ggd ++;};break _ggb ;};_gbb +=_ece ._gb ;};for _gbb < _ced &&_bad [_fge ]<=_gbb {_fge +=2;};continue _gde ;case _adc :_fge ++;_gbb =_bad [_fge ];_fge ++;continue _gde ;
case _cg :_gbb =_bad [_fge ]+2;case _ec :_gbb =_bad [_fge ]-2;case _fce :_gbb =_bad [_fge ]+3;case _ccf :_gbb =_bad [_fge ]-3;default:if _fbg ._ecf ==12&&_ece ._gb ==EOL {_fbg ._ecf =0;if _ ,_bbf =_cfg .uncompress1d (_fbg ,_bad ,_ced );_bbf !=nil {return 0,_bbf ;
};_fbg ._ecf ++;if _ ,_bbf =_cfg .uncompress1d (_fbg ,_gfac ,_ced );_bbf !=nil {return 0,_bbf ;};_bbc ,_aea :=_cfg .uncompress1d (_fbg ,_bad ,_ced );if _aea !=nil {return EOF ,_aea ;};_fbg ._ecf ++;return _bbc ,nil ;};_gbb =_ced ;continue _gde ;};if _gbb <=_ced {_da =!_da ;
_gfac [_ggd ]=_gbb ;_ggd ++;if _fge > 0{_fge --;}else {_fge ++;};for _gbb < _ced &&_bad [_fge ]<=_gbb {_fge +=2;};};};if _gfac [_ggd ]!=_ced {_gfac [_ggd ]=_ced ;};if _ece ==nil {return EOL ,nil ;};return _ggd ,nil ;};func _fbd (_ecc *_d .Reader )(*runData ,error ){_bda :=&runData {_eca :_ecc ,_ecf :0,_bcc :1};
_bag :=_cb (_fdf (_fdfc ,int (_ecc .Length ())),_ccb );_bda ._bfc =make ([]byte ,_bag );if _adb :=_bda .fillBuffer (0);_adb !=nil {if _adb ==_g .EOF {_bda ._bfc =make ([]byte ,10);_e .Log .Debug ("F\u0069\u006c\u006c\u0042uf\u0066e\u0072\u0020\u0066\u0061\u0069l\u0065\u0064\u003a\u0020\u0025\u0076",_adb );
}else {return nil ,_adb ;};};return _bda ,nil ;};func (_fcg *Decoder )fillBitmap (_ffa *_c .Bitmap ,_aae int ,_bdf []int ,_bab int )error {var _cgd byte ;_gc :=0;_dcg :=_ffa .GetByteIndex (_gc ,_aae );for _dfd :=0;_dfd < _bab ;_dfd ++{_bde :=byte (1);_bdg :=_bdf [_dfd ];
if (_dfd &1)==0{_bde =0;};for _gc < _bdg {_cgd =(_cgd <<1)|_bde ;_gc ++;if (_gc &7)==0{if _dbe :=_ffa .SetByte (_dcg ,_cgd );_dbe !=nil {return _dbe ;};_dcg ++;_cgd =0;};};};if (_gc &7)!=0{_cgd <<=uint (8-(_gc &7));if _cbd :=_ffa .SetByte (_dcg ,_cgd );
_cbd !=nil {return _cbd ;};};return nil ;};func (_fdc *runData )uncompressGetCode (_bbfa []*code )(*code ,error ){return _fdc .uncompressGetCodeLittleEndian (_bbfa );};func (_dcbg *runData )align (){_dcbg ._ecf =((_dcbg ._ecf +7)>>3)<<3};const (EOF =-3;
_cce =-2;EOL =-1;_ceg =8;_ff =(1<<_ceg )-1;_dc =5;_aa =(1<<_dc )-1;);func (_gbe *code )String ()string {return _a .Sprintf ("\u0025\u0064\u002f\u0025\u0064\u002f\u0025\u0064",_gbe ._ge ,_gbe ._fd ,_gbe ._gb );};func (_cec *Decoder )uncompress1d (_ab *runData ,_abg []int ,_fad int )(int ,error ){var (_cca =true ;
_fe int ;_cfb *code ;_dd int ;_dce error ;);_ddg :for _fe < _fad {_cga :for {if _cca {_cfb ,_dce =_ab .uncompressGetCode (_cec ._ee );if _dce !=nil {return 0,_dce ;};}else {_cfb ,_dce =_ab .uncompressGetCode (_cec ._cbe );if _dce !=nil {return 0,_dce ;
};};_ab ._ecf +=_cfb ._ge ;if _cfb ._gb < 0{break _ddg ;};_fe +=_cfb ._gb ;if _cfb ._gb < 64{_cca =!_cca ;_abg [_dd ]=_fe ;_dd ++;break _cga ;};};};if _abg [_dd ]!=_fad {_abg [_dd ]=_fad ;};_eaf :=EOL ;if _cfb !=nil &&_cfb ._gb !=EOL {_eaf =_dd ;};return _eaf ,nil ;
};type code struct{_ge int ;_fd int ;_gb int ;_ad []*code ;_ce bool ;};