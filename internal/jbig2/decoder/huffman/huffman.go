//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package huffman ;import (_ac "errors";_d "fmt";_fc "github.com/unidoc/unipdf/v3/internal/bitwise";_b "github.com/unidoc/unipdf/v3/internal/jbig2/internal";_a "math";_c "strings";);func (_dad *Code )String ()string {var _ddg string ;if _dad ._gfbg !=-1{_ddg =_cfg (_dad ._gfbg ,_dad ._ddf );
}else {_ddg ="\u003f";};return _d .Sprintf ("%\u0073\u002f\u0025\u0064\u002f\u0025\u0064\u002f\u0025\u0064",_ddg ,_dad ._ddf ,_dad ._acc ,_dad ._ebe );};func (_cfe *InternalNode )Decode (r *_fc .Reader )(int64 ,error ){_bf ,_eeg :=r .ReadBit ();if _eeg !=nil {return 0,_eeg ;
};if _bf ==0{return _cfe ._dfc .Decode (r );};return _cfe ._fac .Decode (r );};func NewFixedSizeTable (codeTable []*Code )(*FixedSizeTable ,error ){_gg :=&FixedSizeTable {_fba :&InternalNode {}};if _gd :=_gg .InitTree (codeTable );_gd !=nil {return nil ,_gd ;
};return _gg ,nil ;};func (_gfdg *ValueNode )String ()string {return _d .Sprintf ("\u0025\u0064\u002f%\u0064",_gfdg ._gfb ,_gfdg ._bec );};func _eed (_ade []*Code ){var _bebb int32 ;for _ ,_ba :=range _ade {_bebb =_eege (_bebb ,_ba ._ddf );};_fce :=make ([]int32 ,_bebb +1);
for _ ,_deae :=range _ade {_fce [_deae ._ddf ]++;};var _eea int32 ;_bcg :=make ([]int32 ,len (_fce )+1);_fce [0]=0;for _bcf :=int32 (1);_bcf <=int32 (len (_fce ));_bcf ++{_bcg [_bcf ]=(_bcg [_bcf -1]+(_fce [_bcf -1]))<<1;_eea =_bcg [_bcf ];for _ ,_ec :=range _ade {if _ec ._ddf ==_bcf {_ec ._gfbg =_eea ;
_eea ++;};};};};type Tabler interface{Decode (_ebaa *_fc .Reader )(int64 ,error );InitTree (_dgf []*Code )error ;String ()string ;RootNode ()*InternalNode ;};type ValueNode struct{_gfb int32 ;_bec int32 ;_aag bool ;};var _dff =[][][]int32 {{{1,4,0},{2,8,16},{3,16,272},{3,32,65808}},{{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{6,32,75},{6,-1,0}},{{8,8,-256},{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{8,32,-257,999},{7,32,75},{6,-1,0}},{{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{5,32,76}},{{7,8,-255},{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{7,32,-256,999},{6,32,76}},{{5,10,-2048},{4,9,-1024},{4,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{2,7,0},{3,7,128},{3,8,256},{4,9,512},{4,10,1024},{6,32,-2049,999},{6,32,2048}},{{4,9,-1024},{3,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{4,5,0},{5,5,32},{5,6,64},{4,7,128},{3,8,256},{3,9,512},{3,10,1024},{5,32,-1025,999},{5,32,2048}},{{8,3,-15},{9,1,-7},{8,1,-5},{9,0,-3},{7,0,-2},{4,0,-1},{2,1,0},{5,0,2},{6,0,3},{3,4,4},{6,1,20},{4,4,22},{4,5,38},{5,6,70},{5,7,134},{6,7,262},{7,8,390},{6,10,646},{9,32,-16,999},{9,32,1670},{2,-1,0}},{{8,4,-31},{9,2,-15},{8,2,-11},{9,1,-7},{7,1,-5},{4,1,-3},{3,1,-1},{3,1,1},{5,1,3},{6,1,5},{3,5,7},{6,2,39},{4,5,43},{4,6,75},{5,7,139},{5,8,267},{6,8,523},{7,9,779},{6,11,1291},{9,32,-32,999},{9,32,3339},{2,-1,0}},{{7,4,-21},{8,0,-5},{7,0,-4},{5,0,-3},{2,2,-2},{5,0,2},{6,0,3},{7,0,4},{8,0,5},{2,6,6},{5,5,70},{6,5,102},{6,6,134},{6,7,198},{6,8,326},{6,9,582},{6,10,1094},{7,11,2118},{8,32,-22,999},{8,32,4166},{2,-1,0}},{{1,0,1},{2,1,2},{4,0,4},{4,1,5},{5,1,7},{5,2,9},{6,2,13},{7,2,17},{7,3,21},{7,4,29},{7,5,45},{7,6,77},{7,32,141}},{{1,0,1},{2,0,2},{3,1,3},{5,0,5},{5,1,6},{6,1,8},{7,0,10},{7,1,11},{7,2,13},{7,3,17},{7,4,25},{8,5,41},{8,32,73}},{{1,0,1},{3,0,2},{4,0,3},{5,0,4},{4,1,5},{3,3,7},{6,1,15},{6,2,17},{6,3,21},{6,4,29},{6,5,45},{7,6,77},{7,32,141}},{{3,0,-2},{3,0,-1},{1,0,0},{3,0,1},{3,0,2}},{{7,4,-24},{6,2,-8},{5,1,-4},{4,0,-2},{3,0,-1},{1,0,0},{3,0,1},{4,0,2},{5,1,3},{6,2,5},{7,4,9},{7,32,-25,999},{7,32,25}}};
var _ Node =&InternalNode {};type OutOfBandNode struct{};func (_aa *OutOfBandNode )String ()string {return _d .Sprintf ("\u0025\u0030\u00364\u0062",int64 (_a .MaxInt64 ));};func (_ea *OutOfBandNode )Decode (r *_fc .Reader )(int64 ,error ){return 0,_b .ErrOOB };
func (_dgb *StandardTable )RootNode ()*InternalNode {return _dgb ._dbe };func _eege (_dga ,_dc int32 )int32 {if _dga > _dc {return _dga ;};return _dc ;};var _ Tabler =&EncodedTable {};func (_df *EncodedTable )InitTree (codeTable []*Code )error {_eed (codeTable );
for _ ,_fa :=range codeTable {if _ed :=_df ._bd .append (_fa );_ed !=nil {return _ed ;};};return nil ;};type BasicTabler interface{HtHigh ()int32 ;HtLow ()int32 ;StreamReader ()*_fc .Reader ;HtPS ()int32 ;HtRS ()int32 ;HtOOB ()int32 ;};type FixedSizeTable struct{_fba *InternalNode };
func _fe (_af int32 )*InternalNode {return &InternalNode {_eec :_af }};func (_gcd *InternalNode )pad (_gbf *_c .Builder ){for _dfd :=int32 (0);_dfd < _gcd ._eec ;_dfd ++{_gbf .WriteString ("\u0020\u0020\u0020");};};func _cb (_ee *Code )*OutOfBandNode {return &OutOfBandNode {}};
func NewCode (prefixLength ,rangeLength ,rangeLow int32 ,isLowerRange bool )*Code {return &Code {_ddf :prefixLength ,_acc :rangeLength ,_ebe :rangeLow ,_eda :isLowerRange ,_gfbg :-1};};var _fab =make ([]Tabler ,len (_dff ));var _ Node =&ValueNode {};func (_adc *InternalNode )append (_dea *Code )(_eae error ){if _dea ._ddf ==0{return nil ;
};_bfa :=_dea ._ddf -1-_adc ._eec ;if _bfa < 0{return _ac .New ("\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065\u0020\u0073\u0068\u0069\u0066\u0074\u0069n\u0067 \u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u006c\u006c\u006f\u0077\u0065\u0064");};
_gfc :=(_dea ._gfbg >>uint (_bfa ))&0x1;if _bfa ==0{if _dea ._acc ==-1{if _gfc ==1{if _adc ._fac !=nil {return _d .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_dea );
};_adc ._fac =_cb (_dea );}else {if _adc ._dfc !=nil {return _d .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_dea );};_adc ._dfc =_cb (_dea );};}else {if _gfc ==1{if _adc ._fac !=nil {return _d .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_dea );
};_adc ._fac =_dbc (_dea );}else {if _adc ._dfc !=nil {return _d .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_dea );
};_adc ._dfc =_dbc (_dea );};};}else {if _gfc ==1{if _adc ._fac ==nil {_adc ._fac =_fe (_adc ._eec +1);};if _eae =_adc ._fac .(*InternalNode ).append (_dea );_eae !=nil {return _eae ;};}else {if _adc ._dfc ==nil {_adc ._dfc =_fe (_adc ._eec +1);};if _eae =_adc ._dfc .(*InternalNode ).append (_dea );
_eae !=nil {return _eae ;};};};return nil ;};func (_db *ValueNode )Decode (r *_fc .Reader )(int64 ,error ){_ab ,_abg :=r .ReadBits (byte (_db ._gfb ));if _abg !=nil {return 0,_abg ;};if _db ._aag {_ab =-_ab ;};return int64 (_db ._bec )+int64 (_ab ),nil ;
};func (_cgd *StandardTable )Decode (r *_fc .Reader )(int64 ,error ){return _cgd ._dbe .Decode (r )};func _dbc (_fcc *Code )*ValueNode {return &ValueNode {_gfb :_fcc ._acc ,_bec :_fcc ._ebe ,_aag :_fcc ._eda };};func (_gf *EncodedTable )Decode (r *_fc .Reader )(int64 ,error ){return _gf ._bd .Decode (r )};
func (_eecf *StandardTable )InitTree (codeTable []*Code )error {_eed (codeTable );for _ ,_bda :=range codeTable {if _ce :=_eecf ._dbe .append (_bda );_ce !=nil {return _ce ;};};return nil ;};func _ccc (_ae [][]int32 )(*StandardTable ,error ){var _dgc []*Code ;
for _ead :=0;_ead < len (_ae );_ead ++{_gfda :=_ae [_ead ][0];_ge :=_ae [_ead ][1];_ga :=_ae [_ead ][2];var _bdf bool ;if len (_ae [_ead ])> 3{_bdf =true ;};_dgc =append (_dgc ,NewCode (_gfda ,_ge ,_ga ,_bdf ));};_ada :=&StandardTable {_dbe :_fe (0)};if _fca :=_ada .InitTree (_dgc );
_fca !=nil {return nil ,_fca ;};return _ada ,nil ;};func _cfg (_bc ,_beba int32 )string {var _gef int32 ;_bce :=make ([]rune ,_beba );for _eab :=int32 (1);_eab <=_beba ;_eab ++{_gef =_bc >>uint (_beba -_eab )&1;if _gef !=0{_bce [_eab -1]='1';}else {_bce [_eab -1]='0';
};};return string (_bce );};func (_cc *EncodedTable )RootNode ()*InternalNode {return _cc ._bd };func (_da *StandardTable )String ()string {return _da ._dbe .String ()+"\u000a"};func (_dg *InternalNode )String ()string {_cce :=&_c .Builder {};_cce .WriteString ("\u000a");
_dg .pad (_cce );_cce .WriteString ("\u0030\u003a\u0020");_cce .WriteString (_dg ._dfc .String ()+"\u000a");_dg .pad (_cce );_cce .WriteString ("\u0031\u003a\u0020");_cce .WriteString (_dg ._fac .String ()+"\u000a");return _cce .String ();};func GetStandardTable (number int )(Tabler ,error ){if number <=0||number > len (_fab ){return nil ,_ac .New ("\u0049n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_dfcf :=_fab [number -1];if _dfcf ==nil {var _fag error ;_dfcf ,_fag =_ccc (_dff [number -1]);if _fag !=nil {return nil ,_fag ;};_fab [number -1]=_dfcf ;};return _dfcf ,nil ;};func NewEncodedTable (table BasicTabler )(*EncodedTable ,error ){_cd :=&EncodedTable {_bd :&InternalNode {},BasicTabler :table };
if _cg :=_cd .parseTable ();_cg !=nil {return nil ,_cg ;};return _cd ,nil ;};type InternalNode struct{_eec int32 ;_dfc Node ;_fac Node ;};type EncodedTable struct{BasicTabler ;_bd *InternalNode ;};var _ Node =&OutOfBandNode {};func (_fd *FixedSizeTable )Decode (r *_fc .Reader )(int64 ,error ){return _fd ._fba .Decode (r )};
func (_gc *EncodedTable )parseTable ()error {var (_ad []*Code ;_cgg ,_eg ,_edd int32 ;_gb uint64 ;_eb error ;);_de :=_gc .StreamReader ();_be :=_gc .HtLow ();for _be < _gc .HtHigh (){_gb ,_eb =_de .ReadBits (byte (_gc .HtPS ()));if _eb !=nil {return _eb ;
};_cgg =int32 (_gb );_gb ,_eb =_de .ReadBits (byte (_gc .HtRS ()));if _eb !=nil {return _eb ;};_eg =int32 (_gb );_ad =append (_ad ,NewCode (_cgg ,_eg ,_edd ,false ));_be +=1<<uint (_eg );};_gb ,_eb =_de .ReadBits (byte (_gc .HtPS ()));if _eb !=nil {return _eb ;
};_cgg =int32 (_gb );_eg =32;_edd =_gc .HtLow ()-1;_ad =append (_ad ,NewCode (_cgg ,_eg ,_edd ,true ));_gb ,_eb =_de .ReadBits (byte (_gc .HtPS ()));if _eb !=nil {return _eb ;};_cgg =int32 (_gb );_eg =32;_edd =_gc .HtHigh ();_ad =append (_ad ,NewCode (_cgg ,_eg ,_edd ,false ));
if _gc .HtOOB ()==1{_gb ,_eb =_de .ReadBits (byte (_gc .HtPS ()));if _eb !=nil {return _eb ;};_cgg =int32 (_gb );_ad =append (_ad ,NewCode (_cgg ,-1,-1,false ));};if _eb =_gc .InitTree (_ad );_eb !=nil {return _eb ;};return nil ;};func (_fb *EncodedTable )String ()string {return _fb ._bd .String ()+"\u000a"};
func (_gfd *FixedSizeTable )RootNode ()*InternalNode {return _gfd ._fba };func (_fdg *FixedSizeTable )InitTree (codeTable []*Code )error {_eed (codeTable );for _ ,_dd :=range codeTable {_eba :=_fdg ._fba .append (_dd );if _eba !=nil {return _eba ;};};return nil ;
};func (_beb *FixedSizeTable )String ()string {return _beb ._fba .String ()+"\u000a"};type Code struct{_ddf int32 ;_acc int32 ;_ebe int32 ;_eda bool ;_gfbg int32 ;};type StandardTable struct{_dbe *InternalNode };type Node interface{Decode (_egb *_fc .Reader )(int64 ,error );
String ()string ;};