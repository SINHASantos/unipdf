//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package huffman ;import (_ba "errors";_e "fmt";_b "github.com/unidoc/unipdf/v4/internal/bitwise";_f "github.com/unidoc/unipdf/v4/internal/jbig2/internal";_c "math";_a "strings";);func NewFixedSizeTable (codeTable []*Code )(*FixedSizeTable ,error ){_ag :=&FixedSizeTable {_gf :&InternalNode {}};
if _ecc :=_ag .InitTree (codeTable );_ecc !=nil {return nil ,_ecc ;};return _ag ,nil ;};type InternalNode struct{_gc int32 ;_ecgf Node ;_fgcf Node ;};func _bbf (_cd *Code )*ValueNode {return &ValueNode {_fa :_cd ._dga ,_fcd :_cd ._aeg ,_ged :_cd ._fdg }};
func (_edg *FixedSizeTable )InitTree (codeTable []*Code )error {_eg (codeTable );for _ ,_dcg :=range codeTable {_dfg :=_edg ._gf .append (_dcg );if _dfg !=nil {return _dfg ;};};return nil ;};func (_ff *ValueNode )Decode (r *_b .Reader )(int64 ,error ){_bbg ,_gedg :=r .ReadBits (byte (_ff ._fa ));
if _gedg !=nil {return 0,_gedg ;};if _ff ._ged {_bbg =-_bbg ;};return int64 (_ff ._fcd )+int64 (_bbg ),nil ;};type Node interface{Decode (_bg *_b .Reader )(int64 ,error );String ()string ;};func NewEncodedTable (table BasicTabler )(*EncodedTable ,error ){_d :=&EncodedTable {_fb :&InternalNode {},BasicTabler :table };
if _be :=_d .parseTable ();_be !=nil {return nil ,_be ;};return _d ,nil ;};var _ Node =&ValueNode {};func (_ca *EncodedTable )parseTable ()error {var (_bf []*Code ;_df ,_aa ,_ab int32 ;_fc uint64 ;_bd error ;);_ga :=_ca .StreamReader ();_ecg :=_ca .HtLow ();
for _ecg < _ca .HtHigh (){_fc ,_bd =_ga .ReadBits (byte (_ca .HtPS ()));if _bd !=nil {return _bd ;};_df =int32 (_fc );_fc ,_bd =_ga .ReadBits (byte (_ca .HtRS ()));if _bd !=nil {return _bd ;};_aa =int32 (_fc );_bf =append (_bf ,NewCode (_df ,_aa ,_ab ,false ));
_ecg +=1<<uint (_aa );};_fc ,_bd =_ga .ReadBits (byte (_ca .HtPS ()));if _bd !=nil {return _bd ;};_df =int32 (_fc );_aa =32;_ab =_ca .HtLow ()-1;_bf =append (_bf ,NewCode (_df ,_aa ,_ab ,true ));_fc ,_bd =_ga .ReadBits (byte (_ca .HtPS ()));if _bd !=nil {return _bd ;
};_df =int32 (_fc );_aa =32;_ab =_ca .HtHigh ();_bf =append (_bf ,NewCode (_df ,_aa ,_ab ,false ));if _ca .HtOOB ()==1{_fc ,_bd =_ga .ReadBits (byte (_ca .HtPS ()));if _bd !=nil {return _bd ;};_df =int32 (_fc );_bf =append (_bf ,NewCode (_df ,-1,-1,false ));
};if _bd =_ca .InitTree (_bf );_bd !=nil {return _bd ;};return nil ;};var _ Node =&OutOfBandNode {};var _afd =[][][]int32 {{{1,4,0},{2,8,16},{3,16,272},{3,32,65808}},{{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{6,32,75},{6,-1,0}},{{8,8,-256},{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{8,32,-257,999},{7,32,75},{6,-1,0}},{{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{5,32,76}},{{7,8,-255},{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{7,32,-256,999},{6,32,76}},{{5,10,-2048},{4,9,-1024},{4,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{2,7,0},{3,7,128},{3,8,256},{4,9,512},{4,10,1024},{6,32,-2049,999},{6,32,2048}},{{4,9,-1024},{3,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{4,5,0},{5,5,32},{5,6,64},{4,7,128},{3,8,256},{3,9,512},{3,10,1024},{5,32,-1025,999},{5,32,2048}},{{8,3,-15},{9,1,-7},{8,1,-5},{9,0,-3},{7,0,-2},{4,0,-1},{2,1,0},{5,0,2},{6,0,3},{3,4,4},{6,1,20},{4,4,22},{4,5,38},{5,6,70},{5,7,134},{6,7,262},{7,8,390},{6,10,646},{9,32,-16,999},{9,32,1670},{2,-1,0}},{{8,4,-31},{9,2,-15},{8,2,-11},{9,1,-7},{7,1,-5},{4,1,-3},{3,1,-1},{3,1,1},{5,1,3},{6,1,5},{3,5,7},{6,2,39},{4,5,43},{4,6,75},{5,7,139},{5,8,267},{6,8,523},{7,9,779},{6,11,1291},{9,32,-32,999},{9,32,3339},{2,-1,0}},{{7,4,-21},{8,0,-5},{7,0,-4},{5,0,-3},{2,2,-2},{5,0,2},{6,0,3},{7,0,4},{8,0,5},{2,6,6},{5,5,70},{6,5,102},{6,6,134},{6,7,198},{6,8,326},{6,9,582},{6,10,1094},{7,11,2118},{8,32,-22,999},{8,32,4166},{2,-1,0}},{{1,0,1},{2,1,2},{4,0,4},{4,1,5},{5,1,7},{5,2,9},{6,2,13},{7,2,17},{7,3,21},{7,4,29},{7,5,45},{7,6,77},{7,32,141}},{{1,0,1},{2,0,2},{3,1,3},{5,0,5},{5,1,6},{6,1,8},{7,0,10},{7,1,11},{7,2,13},{7,3,17},{7,4,25},{8,5,41},{8,32,73}},{{1,0,1},{3,0,2},{4,0,3},{5,0,4},{4,1,5},{3,3,7},{6,1,15},{6,2,17},{6,3,21},{6,4,29},{6,5,45},{7,6,77},{7,32,141}},{{3,0,-2},{3,0,-1},{1,0,0},{3,0,1},{3,0,2}},{{7,4,-24},{6,2,-8},{5,1,-4},{4,0,-2},{3,0,-1},{1,0,0},{3,0,1},{4,0,2},{5,1,3},{6,2,5},{7,4,9},{7,32,-25,999},{7,32,25}}};
type FixedSizeTable struct{_gf *InternalNode };func (_ge *EncodedTable )String ()string {return _ge ._fb .String ()+"\u000a"};type OutOfBandNode struct{};type StandardTable struct{_ae *InternalNode };func _eg (_gd []*Code ){var _bee int32 ;for _ ,_gg :=range _gd {_bee =_abe (_bee ,_gg ._edd );
};_cdc :=make ([]int32 ,_bee +1);for _ ,_caaa :=range _gd {_cdc [_caaa ._edd ]++;};var _aed int32 ;_efc :=make ([]int32 ,len (_cdc )+1);_cdc [0]=0;for _edb :=int32 (1);_edb <=int32 (len (_cdc ));_edb ++{_efc [_edb ]=(_efc [_edb -1]+(_cdc [_edb -1]))<<1;
_aed =_efc [_edb ];for _ ,_abg :=range _gd {if _abg ._edd ==_edb {_abg ._cc =_aed ;_aed ++;};};};};func (_bb *EncodedTable )RootNode ()*InternalNode {return _bb ._fb };var _ Node =&InternalNode {};func (_fgc *ValueNode )String ()string {return _e .Sprintf ("\u0025\u0064\u002f%\u0064",_fgc ._fa ,_fgc ._fcd );
};func (_aaf *InternalNode )Decode (r *_b .Reader )(int64 ,error ){_caa ,_cdg :=r .ReadBit ();if _cdg !=nil {return 0,_cdg ;};if _caa ==0{return _aaf ._ecgf .Decode (r );};return _aaf ._fgcf .Decode (r );};func _aee (_fea ,_ffe int32 )string {var _bc int32 ;
_de :=make ([]rune ,_ffe );for _bdf :=int32 (1);_bdf <=_ffe ;_bdf ++{_bc =_fea >>uint (_ffe -_bdf )&1;if _bc !=0{_de [_bdf -1]='1';}else {_de [_bdf -1]='0';};};return string (_de );};func _db (_gfc [][]int32 )(*StandardTable ,error ){var _dgg []*Code ;
for _fac :=0;_fac < len (_gfc );_fac ++{_bba :=_gfc [_fac ][0];_gb :=_gfc [_fac ][1];_bfg :=_gfc [_fac ][2];var _bga bool ;if len (_gfc [_fac ])> 3{_bga =true ;};_dgg =append (_dgg ,NewCode (_bba ,_gb ,_bfg ,_bga ));};_cdgd :=&StandardTable {_ae :_eca (0)};
if _fce :=_cdgd .InitTree (_dgg );_fce !=nil {return nil ,_fce ;};return _cdgd ,nil ;};func (_bec *StandardTable )Decode (r *_b .Reader )(int64 ,error ){return _bec ._ae .Decode (r )};func (_ee *InternalNode )append (_gae *Code )(_eec error ){if _gae ._edd ==0{return nil ;
};_dfc :=_gae ._edd -1-_ee ._gc ;if _dfc < 0{return _ba .New ("\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065\u0020\u0073\u0068\u0069\u0066\u0074\u0069n\u0067 \u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u006c\u006c\u006f\u0077\u0065\u0064");};_cfab :=(_gae ._cc >>uint (_dfc ))&0x1;
if _dfc ==0{if _gae ._dga ==-1{if _cfab ==1{if _ee ._fgcf !=nil {return _e .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_gae );};_ee ._fgcf =_agf (_gae );
}else {if _ee ._ecgf !=nil {return _e .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_gae );};_ee ._ecgf =_agf (_gae );};}else {if _cfab ==1{if _ee ._fgcf !=nil {return _e .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_gae );
};_ee ._fgcf =_bbf (_gae );}else {if _ee ._ecgf !=nil {return _e .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_gae );
};_ee ._ecgf =_bbf (_gae );};};}else {if _cfab ==1{if _ee ._fgcf ==nil {_ee ._fgcf =_eca (_ee ._gc +1);};if _eec =_ee ._fgcf .(*InternalNode ).append (_gae );_eec !=nil {return _eec ;};}else {if _ee ._ecgf ==nil {_ee ._ecgf =_eca (_ee ._gc +1);};if _eec =_ee ._ecgf .(*InternalNode ).append (_gae );
_eec !=nil {return _eec ;};};};return nil ;};func (_da *FixedSizeTable )RootNode ()*InternalNode {return _da ._gf };func (_ed *EncodedTable )InitTree (codeTable []*Code )error {_eg (codeTable );for _ ,_fe :=range codeTable {if _ece :=_ed ._fb .append (_fe );
_ece !=nil {return _ece ;};};return nil ;};func _abe (_edc ,_aeb int32 )int32 {if _edc > _aeb {return _edc ;};return _aeb ;};func (_baa *InternalNode )String ()string {_gee :=&_a .Builder {};_gee .WriteString ("\u000a");_baa .pad (_gee );_gee .WriteString ("\u0030\u003a\u0020");
_gee .WriteString (_baa ._ecgf .String ()+"\u000a");_baa .pad (_gee );_gee .WriteString ("\u0031\u003a\u0020");_gee .WriteString (_baa ._fgcf .String ()+"\u000a");return _gee .String ();};func (_fd *StandardTable )String ()string {return _fd ._ae .String ()+"\u000a"};
func (_ad *InternalNode )pad (_dfb *_a .Builder ){for _cfe :=int32 (0);_cfe < _ad ._gc ;_cfe ++{_dfb .WriteString ("\u0020\u0020\u0020");};};func _agf (_cfa *Code )*OutOfBandNode {return &OutOfBandNode {}};func (_af *OutOfBandNode )Decode (r *_b .Reader )(int64 ,error ){return 0,_f .ErrOOB };
func (_agc *FixedSizeTable )Decode (r *_b .Reader )(int64 ,error ){return _agc ._gf .Decode (r )};func (_gfe *StandardTable )RootNode ()*InternalNode {return _gfe ._ae };func (_fbd *Code )String ()string {var _bff string ;if _fbd ._cc !=-1{_bff =_aee (_fbd ._cc ,_fbd ._edd );
}else {_bff ="\u003f";};return _e .Sprintf ("%\u0073\u002f\u0025\u0064\u002f\u0025\u0064\u002f\u0025\u0064",_bff ,_fbd ._edd ,_fbd ._dga ,_fbd ._aeg );};func GetStandardTable (number int )(Tabler ,error ){if number <=0||number > len (_aec ){return nil ,_ba .New ("\u0049n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_gca :=_aec [number -1];if _gca ==nil {var _eeg error ;_gca ,_eeg =_db (_afd [number -1]);if _eeg !=nil {return nil ,_eeg ;};_aec [number -1]=_gca ;};return _gca ,nil ;};func NewCode (prefixLength ,rangeLength ,rangeLow int32 ,isLowerRange bool )*Code {return &Code {_edd :prefixLength ,_dga :rangeLength ,_aeg :rangeLow ,_fdg :isLowerRange ,_cc :-1};
};func (_dg *StandardTable )InitTree (codeTable []*Code )error {_eg (codeTable );for _ ,_ac :=range codeTable {if _ce :=_dg ._ae .append (_ac );_ce !=nil {return _ce ;};};return nil ;};func (_ef *FixedSizeTable )String ()string {return _ef ._gf .String ()+"\u000a"};
var _aec =make ([]Tabler ,len (_afd ));type EncodedTable struct{BasicTabler ;_fb *InternalNode ;};var _ Tabler =&EncodedTable {};type Tabler interface{Decode (_bgf *_b .Reader )(int64 ,error );InitTree (_fcg []*Code )error ;String ()string ;RootNode ()*InternalNode ;
};type ValueNode struct{_fa int32 ;_fcd int32 ;_ged bool ;};func _eca (_baab int32 )*InternalNode {return &InternalNode {_gc :_baab }};func (_cf *OutOfBandNode )String ()string {return _e .Sprintf ("\u0025\u0030\u00364\u0062",int64 (_c .MaxInt64 ));};type Code struct{_edd int32 ;
_dga int32 ;_aeg int32 ;_fdg bool ;_cc int32 ;};func (_ec *EncodedTable )Decode (r *_b .Reader )(int64 ,error ){return _ec ._fb .Decode (r )};type BasicTabler interface{HtHigh ()int32 ;HtLow ()int32 ;StreamReader ()*_b .Reader ;HtPS ()int32 ;HtRS ()int32 ;
HtOOB ()int32 ;};