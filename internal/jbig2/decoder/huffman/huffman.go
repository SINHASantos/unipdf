//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package huffman ;import (_eb "errors";_gb "fmt";_d "github.com/unidoc/unipdf/v3/internal/bitwise";_e "github.com/unidoc/unipdf/v3/internal/jbig2/internal";_gc "math";_eg "strings";);type StandardTable struct{_dg *InternalNode };func (_da *OutOfBandNode )Decode (r *_d .Reader )(int64 ,error ){return 0,_e .ErrOOB };
func (_gfd *StandardTable )String ()string {return _gfd ._dg .String ()+"\u000a"};type EncodedTable struct{BasicTabler ;_ee *InternalNode ;};func (_de *FixedSizeTable )InitTree (codeTable []*Code )error {_fbd (codeTable );for _ ,_cfg :=range codeTable {_gg :=_de ._dd .append (_cfg );
if _gg !=nil {return _gg ;};};return nil ;};func (_ga *InternalNode )String ()string {_cg :=&_eg .Builder {};_cg .WriteString ("\u000a");_ga .pad (_cg );_cg .WriteString ("\u0030\u003a\u0020");_cg .WriteString (_ga ._ecf .String ()+"\u000a");_ga .pad (_cg );
_cg .WriteString ("\u0031\u003a\u0020");_cg .WriteString (_ga ._eae .String ()+"\u000a");return _cg .String ();};func GetStandardTable (number int )(Tabler ,error ){if number <=0||number > len (_abg ){return nil ,_eb .New ("\u0049n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_abf :=_abg [number -1];if _abf ==nil {var _cac error ;_abf ,_cac =_bd (_bfgg [number -1]);if _cac !=nil {return nil ,_cac ;};_abg [number -1]=_abf ;};return _abf ,nil ;};type Node interface{Decode (_fbf *_d .Reader )(int64 ,error );String ()string ;
};func (_ege *StandardTable )Decode (r *_d .Reader )(int64 ,error ){return _ege ._dg .Decode (r )};var _ Node =&InternalNode {};func (_gef *FixedSizeTable )RootNode ()*InternalNode {return _gef ._dd };func (_ddf *ValueNode )String ()string {return _gb .Sprintf ("\u0025\u0064\u002f%\u0064",_ddf ._fff ,_ddf ._ca );
};func (_ebg *InternalNode )Decode (r *_d .Reader )(int64 ,error ){_aadc ,_ae :=r .ReadBit ();if _ae !=nil {return 0,_ae ;};if _aadc ==0{return _ebg ._ecf .Decode (r );};return _ebg ._eae .Decode (r );};func NewFixedSizeTable (codeTable []*Code )(*FixedSizeTable ,error ){_fb :=&FixedSizeTable {_dd :&InternalNode {}};
if _cdf :=_fb .InitTree (codeTable );_cdf !=nil {return nil ,_cdf ;};return _fb ,nil ;};var _bfgg =[][][]int32 {{{1,4,0},{2,8,16},{3,16,272},{3,32,65808}},{{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{6,32,75},{6,-1,0}},{{8,8,-256},{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{8,32,-257,999},{7,32,75},{6,-1,0}},{{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{5,32,76}},{{7,8,-255},{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{7,32,-256,999},{6,32,76}},{{5,10,-2048},{4,9,-1024},{4,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{2,7,0},{3,7,128},{3,8,256},{4,9,512},{4,10,1024},{6,32,-2049,999},{6,32,2048}},{{4,9,-1024},{3,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{4,5,0},{5,5,32},{5,6,64},{4,7,128},{3,8,256},{3,9,512},{3,10,1024},{5,32,-1025,999},{5,32,2048}},{{8,3,-15},{9,1,-7},{8,1,-5},{9,0,-3},{7,0,-2},{4,0,-1},{2,1,0},{5,0,2},{6,0,3},{3,4,4},{6,1,20},{4,4,22},{4,5,38},{5,6,70},{5,7,134},{6,7,262},{7,8,390},{6,10,646},{9,32,-16,999},{9,32,1670},{2,-1,0}},{{8,4,-31},{9,2,-15},{8,2,-11},{9,1,-7},{7,1,-5},{4,1,-3},{3,1,-1},{3,1,1},{5,1,3},{6,1,5},{3,5,7},{6,2,39},{4,5,43},{4,6,75},{5,7,139},{5,8,267},{6,8,523},{7,9,779},{6,11,1291},{9,32,-32,999},{9,32,3339},{2,-1,0}},{{7,4,-21},{8,0,-5},{7,0,-4},{5,0,-3},{2,2,-2},{5,0,2},{6,0,3},{7,0,4},{8,0,5},{2,6,6},{5,5,70},{6,5,102},{6,6,134},{6,7,198},{6,8,326},{6,9,582},{6,10,1094},{7,11,2118},{8,32,-22,999},{8,32,4166},{2,-1,0}},{{1,0,1},{2,1,2},{4,0,4},{4,1,5},{5,1,7},{5,2,9},{6,2,13},{7,2,17},{7,3,21},{7,4,29},{7,5,45},{7,6,77},{7,32,141}},{{1,0,1},{2,0,2},{3,1,3},{5,0,5},{5,1,6},{6,1,8},{7,0,10},{7,1,11},{7,2,13},{7,3,17},{7,4,25},{8,5,41},{8,32,73}},{{1,0,1},{3,0,2},{4,0,3},{5,0,4},{4,1,5},{3,3,7},{6,1,15},{6,2,17},{6,3,21},{6,4,29},{6,5,45},{7,6,77},{7,32,141}},{{3,0,-2},{3,0,-1},{1,0,0},{3,0,1},{3,0,2}},{{7,4,-24},{6,2,-8},{5,1,-4},{4,0,-2},{3,0,-1},{1,0,0},{3,0,1},{4,0,2},{5,1,3},{6,2,5},{7,4,9},{7,32,-25,999},{7,32,25}}};
func (_ec *FixedSizeTable )Decode (r *_d .Reader )(int64 ,error ){return _ec ._dd .Decode (r )};func (_af *EncodedTable )parseTable ()error {var (_egc []*Code ;_cd ,_aa ,_ge int32 ;_cc uint64 ;_f error ;);_geb :=_af .StreamReader ();_ff :=_af .HtLow ();
for _ff < _af .HtHigh (){_cc ,_f =_geb .ReadBits (byte (_af .HtPS ()));if _f !=nil {return _f ;};_cd =int32 (_cc );_cc ,_f =_geb .ReadBits (byte (_af .HtRS ()));if _f !=nil {return _f ;};_aa =int32 (_cc );_egc =append (_egc ,NewCode (_cd ,_aa ,_ge ,false ));
_ff +=1<<uint (_aa );};_cc ,_f =_geb .ReadBits (byte (_af .HtPS ()));if _f !=nil {return _f ;};_cd =int32 (_cc );_aa =32;_ge =_af .HtLow ()-1;_egc =append (_egc ,NewCode (_cd ,_aa ,_ge ,true ));_cc ,_f =_geb .ReadBits (byte (_af .HtPS ()));if _f !=nil {return _f ;
};_cd =int32 (_cc );_aa =32;_ge =_af .HtHigh ();_egc =append (_egc ,NewCode (_cd ,_aa ,_ge ,false ));if _af .HtOOB ()==1{_cc ,_f =_geb .ReadBits (byte (_af .HtPS ()));if _f !=nil {return _f ;};_cd =int32 (_cc );_egc =append (_egc ,NewCode (_cd ,-1,-1,false ));
};if _f =_af .InitTree (_egc );_f !=nil {return _f ;};return nil ;};func _ffe (_gebc int32 )*InternalNode {return &InternalNode {_gbc :_gebc }};func (_daa *Code )String ()string {var _gdc string ;if _daa ._gee !=-1{_gdc =_gbcc (_daa ._gee ,_daa ._bfa );
}else {_gdc ="\u003f";};return _gb .Sprintf ("%\u0073\u002f\u0025\u0064\u002f\u0025\u0064\u002f\u0025\u0064",_gdc ,_daa ._bfa ,_daa ._aed ,_daa ._acb );};func _fbd (_bc []*Code ){var _bdf int32 ;for _ ,_aag :=range _bc {_bdf =_gfed (_bdf ,_aag ._bfa );
};_gab :=make ([]int32 ,_bdf +1);for _ ,_ed :=range _bc {_gab [_ed ._bfa ]++;};var _df int32 ;_bbf :=make ([]int32 ,len (_gab )+1);_gab [0]=0;for _bfag :=int32 (1);_bfag <=int32 (len (_gab ));_bfag ++{_bbf [_bfag ]=(_bbf [_bfag -1]+(_gab [_bfag -1]))<<1;
_df =_bbf [_bfag ];for _ ,_ebc :=range _bc {if _ebc ._bfa ==_bfag {_ebc ._gee =_df ;_df ++;};};};};func (_ea *EncodedTable )Decode (r *_d .Reader )(int64 ,error ){return _ea ._ee .Decode (r )};type BasicTabler interface{HtHigh ()int32 ;HtLow ()int32 ;StreamReader ()*_d .Reader ;
HtPS ()int32 ;HtRS ()int32 ;HtOOB ()int32 ;};func (_adg *InternalNode )append (_eag *Code )(_bf error ){if _eag ._bfa ==0{return nil ;};_gfg :=_eag ._bfa -1-_adg ._gbc ;if _gfg < 0{return _eb .New ("\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065\u0020\u0073\u0068\u0069\u0066\u0074\u0069n\u0067 \u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u006c\u006c\u006f\u0077\u0065\u0064");
};_gba :=(_eag ._gee >>uint (_gfg ))&0x1;if _gfg ==0{if _eag ._aed ==-1{if _gba ==1{if _adg ._eae !=nil {return _gb .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_eag );
};_adg ._eae =_gf (_eag );}else {if _adg ._ecf !=nil {return _gb .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_eag );};_adg ._ecf =_gf (_eag );};}else {if _gba ==1{if _adg ._eae !=nil {return _gb .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_eag );
};_adg ._eae =_aac (_eag );}else {if _adg ._ecf !=nil {return _gb .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_eag );
};_adg ._ecf =_aac (_eag );};};}else {if _gba ==1{if _adg ._eae ==nil {_adg ._eae =_ffe (_adg ._gbc +1);};if _bf =_adg ._eae .(*InternalNode ).append (_eag );_bf !=nil {return _bf ;};}else {if _adg ._ecf ==nil {_adg ._ecf =_ffe (_adg ._gbc +1);};if _bf =_adg ._ecf .(*InternalNode ).append (_eag );
_bf !=nil {return _bf ;};};};return nil ;};func NewEncodedTable (table BasicTabler )(*EncodedTable ,error ){_gd :=&EncodedTable {_ee :&InternalNode {},BasicTabler :table };if _cf :=_gd .parseTable ();_cf !=nil {return nil ,_cf ;};return _gd ,nil ;};func _gfed (_dgg ,_cga int32 )int32 {if _dgg > _cga {return _dgg ;
};return _cga ;};func (_gaa *StandardTable )InitTree (codeTable []*Code )error {_fbd (codeTable );for _ ,_eeb :=range codeTable {if _gfe :=_gaa ._dg .append (_eeb );_gfe !=nil {return _gfe ;};};return nil ;};func (_ecb *FixedSizeTable )String ()string {return _ecb ._dd .String ()+"\u000a"};
func _bd (_dcb [][]int32 )(*StandardTable ,error ){var _ccd []*Code ;for _bfg :=0;_bfg < len (_dcb );_bfg ++{_fgf :=_dcb [_bfg ][0];_eea :=_dcb [_bfg ][1];_gaag :=_dcb [_bfg ][2];var _afc bool ;if len (_dcb [_bfg ])> 3{_afc =true ;};_ccd =append (_ccd ,NewCode (_fgf ,_eea ,_gaag ,_afc ));
};_cgd :=&StandardTable {_dg :_ffe (0)};if _gda :=_cgd .InitTree (_ccd );_gda !=nil {return nil ,_gda ;};return _cgd ,nil ;};func NewCode (prefixLength ,rangeLength ,rangeLow int32 ,isLowerRange bool )*Code {return &Code {_bfa :prefixLength ,_aed :rangeLength ,_acb :rangeLow ,_fba :isLowerRange ,_gee :-1};
};func (_eba *EncodedTable )RootNode ()*InternalNode {return _eba ._ee };var _ Node =&ValueNode {};var _ Node =&OutOfBandNode {};type Tabler interface{Decode (_eec *_d .Reader )(int64 ,error );InitTree (_ac []*Code )error ;String ()string ;RootNode ()*InternalNode ;
};func (_a *EncodedTable )InitTree (codeTable []*Code )error {_fbd (codeTable );for _ ,_ag :=range codeTable {if _gbf :=_a ._ee .append (_ag );_gbf !=nil {return _gbf ;};};return nil ;};type OutOfBandNode struct{};func (_gdg *EncodedTable )String ()string {return _gdg ._ee .String ()+"\u000a"};
func _gbcc (_dgd ,_ggc int32 )string {var _ged int32 ;_geec :=make ([]rune ,_ggc );for _cdfg :=int32 (1);_cdfg <=_ggc ;_cdfg ++{_ged =_dgd >>uint (_ggc -_cdfg )&1;if _ged !=0{_geec [_cdfg -1]='1';}else {_geec [_cdfg -1]='0';};};return string (_geec );};
func _aac (_bbb *Code )*ValueNode {return &ValueNode {_fff :_bbb ._aed ,_ca :_bbb ._acb ,_ggb :_bbb ._fba }};func (_ab *OutOfBandNode )String ()string {return _gb .Sprintf ("\u0025\u0030\u00364\u0062",int64 (_gc .MaxInt64 ));};var _abg =make ([]Tabler ,len (_bfgg ));
func (_dae *InternalNode )pad (_cdc *_eg .Builder ){for _db :=int32 (0);_db < _dae ._gbc ;_db ++{_cdc .WriteString ("\u0020\u0020\u0020");};};var _ Tabler =&EncodedTable {};type InternalNode struct{_gbc int32 ;_ecf Node ;_eae Node ;};func (_dc *ValueNode )Decode (r *_d .Reader )(int64 ,error ){_aad ,_eed :=r .ReadBits (byte (_dc ._fff ));
if _eed !=nil {return 0,_eed ;};if _dc ._ggb {_aad =-_aad ;};return int64 (_dc ._ca )+int64 (_aad ),nil ;};func (_fd *StandardTable )RootNode ()*InternalNode {return _fd ._dg };type ValueNode struct{_fff int32 ;_ca int32 ;_ggb bool ;};func _gf (_bb *Code )*OutOfBandNode {return &OutOfBandNode {}};
type FixedSizeTable struct{_dd *InternalNode };type Code struct{_bfa int32 ;_aed int32 ;_acb int32 ;_fba bool ;_gee int32 ;};