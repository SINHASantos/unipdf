//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package huffman ;import (_fbg "errors";_fb "fmt";_e "github.com/unidoc/unipdf/v3/internal/bitwise";_d "github.com/unidoc/unipdf/v3/internal/jbig2/internal";_c "math";_fa "strings";);type Node interface{Decode (_bb *_e .Reader )(int64 ,error );String ()string ;
};type OutOfBandNode struct{};func (_fg *OutOfBandNode )String ()string {return _fb .Sprintf ("\u0025\u0030\u00364\u0062",int64 (_c .MaxInt64 ));};func (_bge *StandardTable )InitTree (codeTable []*Code )error {_adaf (codeTable );for _ ,_gef :=range codeTable {if _bbc :=_bge ._de .append (_gef );
_bbc !=nil {return _bbc ;};};return nil ;};type InternalNode struct{_eec int32 ;_ada Node ;_cdeb Node ;};func GetStandardTable (number int )(Tabler ,error ){if number <=0||number > len (_fcf ){return nil ,_fbg .New ("\u0049n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_ffd :=_fcf [number -1];if _ffd ==nil {var _dbb error ;_ffd ,_dbb =_ba (_af [number -1]);if _dbb !=nil {return nil ,_dbb ;};_fcf [number -1]=_ffd ;};return _ffd ,nil ;};func NewEncodedTable (table BasicTabler )(*EncodedTable ,error ){_dc :=&EncodedTable {_dd :&InternalNode {},BasicTabler :table };
if _b :=_dc .parseTable ();_b !=nil {return nil ,_b ;};return _dc ,nil ;};func (_geg *InternalNode )Decode (r *_e .Reader )(int64 ,error ){_cfd ,_db :=r .ReadBit ();if _db !=nil {return 0,_db ;};if _cfd ==0{return _geg ._ada .Decode (r );};return _geg ._cdeb .Decode (r );
};func (_ca *EncodedTable )Decode (r *_e .Reader )(int64 ,error ){return _ca ._dd .Decode (r )};func (_g *EncodedTable )parseTable ()error {var (_eg []*Code ;_ddb ,_da ,_bg int32 ;_ge uint64 ;_ad error ;);_abg :=_g .StreamReader ();_ac :=_g .HtLow ();for _ac < _g .HtHigh (){_ge ,_ad =_abg .ReadBits (byte (_g .HtPS ()));
if _ad !=nil {return _ad ;};_ddb =int32 (_ge );_ge ,_ad =_abg .ReadBits (byte (_g .HtRS ()));if _ad !=nil {return _ad ;};_da =int32 (_ge );_eg =append (_eg ,NewCode (_ddb ,_da ,_bg ,false ));_ac +=1<<uint (_da );};_ge ,_ad =_abg .ReadBits (byte (_g .HtPS ()));
if _ad !=nil {return _ad ;};_ddb =int32 (_ge );_da =32;_bg =_g .HtLow ()-1;_eg =append (_eg ,NewCode (_ddb ,_da ,_bg ,true ));_ge ,_ad =_abg .ReadBits (byte (_g .HtPS ()));if _ad !=nil {return _ad ;};_ddb =int32 (_ge );_da =32;_bg =_g .HtHigh ();_eg =append (_eg ,NewCode (_ddb ,_da ,_bg ,false ));
if _g .HtOOB ()==1{_ge ,_ad =_abg .ReadBits (byte (_g .HtPS ()));if _ad !=nil {return _ad ;};_ddb =int32 (_ge );_eg =append (_eg ,NewCode (_ddb ,-1,-1,false ));};if _ad =_g .InitTree (_eg );_ad !=nil {return _ad ;};return nil ;};type BasicTabler interface{HtHigh ()int32 ;
HtLow ()int32 ;StreamReader ()*_e .Reader ;HtPS ()int32 ;HtRS ()int32 ;HtOOB ()int32 ;};func (_abd *ValueNode )Decode (r *_e .Reader )(int64 ,error ){_bdd ,_ed :=r .ReadBits (byte (_abd ._faa ));if _ed !=nil {return 0,_ed ;};if _abd ._gf {_bdd =-_bdd ;
};return int64 (_abd ._bd )+int64 (_bdd ),nil ;};func (_cf *OutOfBandNode )Decode (r *_e .Reader )(int64 ,error ){return 0,_d .ErrOOB };func _be (_gga ,_ged int32 )string {var _bef int32 ;_daa :=make ([]rune ,_ged );for _egc :=int32 (1);_egc <=_ged ;_egc ++{_bef =_gga >>uint (_ged -_egc )&1;
if _bef !=0{_daa [_egc -1]='1';}else {_daa [_egc -1]='0';};};return string (_daa );};func _ace (_fca *Code )*OutOfBandNode {return &OutOfBandNode {}};func _gg (_ae int32 )*InternalNode {return &InternalNode {_eec :_ae }};type StandardTable struct{_de *InternalNode };
var _ Node =&InternalNode {};var _ Node =&ValueNode {};func (_dcc *InternalNode )append (_abdd *Code )(_bgc error ){if _abdd ._ef ==0{return nil ;};_eb :=_abdd ._ef -1-_dcc ._eec ;if _eb < 0{return _fbg .New ("\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065\u0020\u0073\u0068\u0069\u0066\u0074\u0069n\u0067 \u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u006c\u006c\u006f\u0077\u0065\u0064");
};_gd :=(_abdd ._adf >>uint (_eb ))&0x1;if _eb ==0{if _abdd ._ggb ==-1{if _gd ==1{if _dcc ._cdeb !=nil {return _fb .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_abdd );
};_dcc ._cdeb =_ace (_abdd );}else {if _dcc ._ada !=nil {return _fb .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_abdd );};_dcc ._ada =_ace (_abdd );
};}else {if _gd ==1{if _dcc ._cdeb !=nil {return _fb .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_abdd );};_dcc ._cdeb =_egg (_abdd );
}else {if _dcc ._ada !=nil {return _fb .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_abdd );};_dcc ._ada =_egg (_abdd );
};};}else {if _gd ==1{if _dcc ._cdeb ==nil {_dcc ._cdeb =_gg (_dcc ._eec +1);};if _bgc =_dcc ._cdeb .(*InternalNode ).append (_abdd );_bgc !=nil {return _bgc ;};}else {if _dcc ._ada ==nil {_dcc ._ada =_gg (_dcc ._eec +1);};if _bgc =_dcc ._ada .(*InternalNode ).append (_abdd );
_bgc !=nil {return _bgc ;};};};return nil ;};func (_cdga *StandardTable )RootNode ()*InternalNode {return _cdga ._de };func _egg (_cfe *Code )*ValueNode {return &ValueNode {_faa :_cfe ._ggb ,_bd :_cfe ._adb ,_gf :_cfe ._bfa }};func (_ab *EncodedTable )InitTree (codeTable []*Code )error {_adaf (codeTable );
for _ ,_ddg :=range codeTable {if _fc :=_ab ._dd .append (_ddg );_fc !=nil {return _fc ;};};return nil ;};func (_gae *InternalNode )String ()string {_dcb :=&_fa .Builder {};_dcb .WriteString ("\u000a");_gae .pad (_dcb );_dcb .WriteString ("\u0030\u003a\u0020");
_dcb .WriteString (_gae ._ada .String ()+"\u000a");_gae .pad (_dcb );_dcb .WriteString ("\u0031\u003a\u0020");_dcb .WriteString (_gae ._cdeb .String ()+"\u000a");return _dcb .String ();};func _adaf (_aafa []*Code ){var _bbe int32 ;for _ ,_aeb :=range _aafa {_bbe =_gaec (_bbe ,_aeb ._ef );
};_bdc :=make ([]int32 ,_bbe +1);for _ ,_fae :=range _aafa {_bdc [_fae ._ef ]++;};var _fgb int32 ;_eace :=make ([]int32 ,len (_bdc )+1);_bdc [0]=0;for _gac :=int32 (1);_gac <=int32 (len (_bdc ));_gac ++{_eace [_gac ]=(_eace [_gac -1]+(_bdc [_gac -1]))<<1;
_fgb =_eace [_gac ];for _ ,_dg :=range _aafa {if _dg ._ef ==_gac {_dg ._adf =_fgb ;_fgb ++;};};};};func (_ee *EncodedTable )RootNode ()*InternalNode {return _ee ._dd };func (_cde *ValueNode )String ()string {return _fb .Sprintf ("\u0025\u0064\u002f%\u0064",_cde ._faa ,_cde ._bd );
};func (_ebg *StandardTable )String ()string {return _ebg ._de .String ()+"\u000a"};var _ Node =&OutOfBandNode {};type Tabler interface{Decode (_cbb *_e .Reader )(int64 ,error );InitTree (_ebd []*Code )error ;String ()string ;RootNode ()*InternalNode ;
};func NewCode (prefixLength ,rangeLength ,rangeLow int32 ,isLowerRange bool )*Code {return &Code {_ef :prefixLength ,_ggb :rangeLength ,_adb :rangeLow ,_bfa :isLowerRange ,_adf :-1};};func _gaec (_aee ,_aag int32 )int32 {if _aee > _aag {return _aee ;};
return _aag ;};var _ Tabler =&EncodedTable {};func (_efe *Code )String ()string {var _fbf string ;if _efe ._adf !=-1{_fbf =_be (_efe ._adf ,_efe ._ef );}else {_fbf ="\u003f";};return _fb .Sprintf ("%\u0073\u002f\u0025\u0064\u002f\u0025\u0064\u002f\u0025\u0064",_fbf ,_efe ._ef ,_efe ._ggb ,_efe ._adb );
};var _af =[][][]int32 {{{1,4,0},{2,8,16},{3,16,272},{3,32,65808}},{{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{6,32,75},{6,-1,0}},{{8,8,-256},{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{8,32,-257,999},{7,32,75},{6,-1,0}},{{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{5,32,76}},{{7,8,-255},{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{7,32,-256,999},{6,32,76}},{{5,10,-2048},{4,9,-1024},{4,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{2,7,0},{3,7,128},{3,8,256},{4,9,512},{4,10,1024},{6,32,-2049,999},{6,32,2048}},{{4,9,-1024},{3,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{4,5,0},{5,5,32},{5,6,64},{4,7,128},{3,8,256},{3,9,512},{3,10,1024},{5,32,-1025,999},{5,32,2048}},{{8,3,-15},{9,1,-7},{8,1,-5},{9,0,-3},{7,0,-2},{4,0,-1},{2,1,0},{5,0,2},{6,0,3},{3,4,4},{6,1,20},{4,4,22},{4,5,38},{5,6,70},{5,7,134},{6,7,262},{7,8,390},{6,10,646},{9,32,-16,999},{9,32,1670},{2,-1,0}},{{8,4,-31},{9,2,-15},{8,2,-11},{9,1,-7},{7,1,-5},{4,1,-3},{3,1,-1},{3,1,1},{5,1,3},{6,1,5},{3,5,7},{6,2,39},{4,5,43},{4,6,75},{5,7,139},{5,8,267},{6,8,523},{7,9,779},{6,11,1291},{9,32,-32,999},{9,32,3339},{2,-1,0}},{{7,4,-21},{8,0,-5},{7,0,-4},{5,0,-3},{2,2,-2},{5,0,2},{6,0,3},{7,0,4},{8,0,5},{2,6,6},{5,5,70},{6,5,102},{6,6,134},{6,7,198},{6,8,326},{6,9,582},{6,10,1094},{7,11,2118},{8,32,-22,999},{8,32,4166},{2,-1,0}},{{1,0,1},{2,1,2},{4,0,4},{4,1,5},{5,1,7},{5,2,9},{6,2,13},{7,2,17},{7,3,21},{7,4,29},{7,5,45},{7,6,77},{7,32,141}},{{1,0,1},{2,0,2},{3,1,3},{5,0,5},{5,1,6},{6,1,8},{7,0,10},{7,1,11},{7,2,13},{7,3,17},{7,4,25},{8,5,41},{8,32,73}},{{1,0,1},{3,0,2},{4,0,3},{5,0,4},{4,1,5},{3,3,7},{6,1,15},{6,2,17},{6,3,21},{6,4,29},{6,5,45},{7,6,77},{7,32,141}},{{3,0,-2},{3,0,-1},{1,0,0},{3,0,1},{3,0,2}},{{7,4,-24},{6,2,-8},{5,1,-4},{4,0,-2},{3,0,-1},{1,0,0},{3,0,1},{4,0,2},{5,1,3},{6,2,5},{7,4,9},{7,32,-25,999},{7,32,25}}};
func (_gdg *InternalNode )pad (_ff *_fa .Builder ){for _aaf :=int32 (0);_aaf < _gdg ._eec ;_aaf ++{_ff .WriteString ("\u0020\u0020\u0020");};};func _ba (_cc [][]int32 )(*StandardTable ,error ){var _cgb []*Code ;for _gad :=0;_gad < len (_cc );_gad ++{_gfe :=_cc [_gad ][0];
_ffg :=_cc [_gad ][1];_ggg :=_cc [_gad ][2];var _eac bool ;if len (_cc [_gad ])> 3{_eac =true ;};_cgb =append (_cgb ,NewCode (_gfe ,_ffg ,_ggg ,_eac ));};_daf :=&StandardTable {_de :_gg (0)};if _bga :=_daf .InitTree (_cgb );_bga !=nil {return nil ,_bga ;
};return _daf ,nil ;};var _fcf =make ([]Tabler ,len (_af ));type Code struct{_ef int32 ;_ggb int32 ;_adb int32 ;_bfa bool ;_adf int32 ;};type FixedSizeTable struct{_cda *InternalNode };func NewFixedSizeTable (codeTable []*Code )(*FixedSizeTable ,error ){_dda :=&FixedSizeTable {_cda :&InternalNode {}};
if _aa :=_dda .InitTree (codeTable );_aa !=nil {return nil ,_aa ;};return _dda ,nil ;};func (_aca *StandardTable )Decode (r *_e .Reader )(int64 ,error ){return _aca ._de .Decode (r )};type ValueNode struct{_faa int32 ;_bd int32 ;_gf bool ;};func (_fe *FixedSizeTable )String ()string {return _fe ._cda .String ()+"\u000a"};
func (_ga *FixedSizeTable )InitTree (codeTable []*Code )error {_adaf (codeTable );for _ ,_dac :=range codeTable {_bf :=_ga ._cda .append (_dac );if _bf !=nil {return _bf ;};};return nil ;};type EncodedTable struct{BasicTabler ;_dd *InternalNode ;};func (_cd *EncodedTable )String ()string {return _cd ._dd .String ()+"\u000a"};
func (_cg *FixedSizeTable )Decode (r *_e .Reader )(int64 ,error ){return _cg ._cda .Decode (r )};func (_cb *FixedSizeTable )RootNode ()*InternalNode {return _cb ._cda };