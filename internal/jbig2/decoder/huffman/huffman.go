//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package huffman ;import (_de "errors";_d "fmt";_c "github.com/unidoc/unipdf/v3/internal/bitwise";_e "github.com/unidoc/unipdf/v3/internal/jbig2/internal";_ee "math";_g "strings";);func (_fda *ValueNode )Decode (r *_c .Reader )(int64 ,error ){_gb ,_cd :=r .ReadBits (byte (_fda ._bb ));
if _cd !=nil {return 0,_cd ;};if _fda ._fd {_gb =-_gb ;};return int64 (_fda ._ccd )+int64 (_gb ),nil ;};func _ead (_ecb []*Code ){var _aafg int32 ;for _ ,_agg :=range _ecb {_aafg =_bbf (_aafg ,_agg ._ddga );};_eefa :=make ([]int32 ,_aafg +1);for _ ,_egcb :=range _ecb {_eefa [_egcb ._ddga ]++;
};var _ddef int32 ;_bgg :=make ([]int32 ,len (_eefa )+1);_eefa [0]=0;for _cfdc :=int32 (1);_cfdc <=int32 (len (_eefa ));_cfdc ++{_bgg [_cfdc ]=(_bgg [_cfdc -1]+(_eefa [_cfdc -1]))<<1;_ddef =_bgg [_cfdc ];for _ ,_ge :=range _ecb {if _ge ._ddga ==_cfdc {_ge ._bfg =_ddef ;
_ddef ++;};};};};func NewFixedSizeTable (codeTable []*Code )(*FixedSizeTable ,error ){_dg :=&FixedSizeTable {_ff :&InternalNode {}};if _cc :=_dg .InitTree (codeTable );_cc !=nil {return nil ,_cc ;};return _dg ,nil ;};func (_aaf *StandardTable )String ()string {return _aaf ._gc .String ()+"\u000a"};
type FixedSizeTable struct{_ff *InternalNode };func _egg (_egc int32 )*InternalNode {return &InternalNode {_ddg :_egc }};func (_ea *ValueNode )String ()string {return _d .Sprintf ("\u0025\u0064\u002f%\u0064",_ea ._bb ,_ea ._ccd );};func (_dd *FixedSizeTable )Decode (r *_c .Reader )(int64 ,error ){return _dd ._ff .Decode (r )};
type Tabler interface{Decode (_fbb *_c .Reader )(int64 ,error );InitTree (_ccb []*Code )error ;String ()string ;RootNode ()*InternalNode ;};func (_ga *EncodedTable )parseTable ()error {var (_af []*Code ;_cfd ,_gg ,_eb int32 ;_f uint64 ;_ef error ;);_fg :=_ga .StreamReader ();
_ad :=_ga .HtLow ();for _ad < _ga .HtHigh (){_f ,_ef =_fg .ReadBits (byte (_ga .HtPS ()));if _ef !=nil {return _ef ;};_cfd =int32 (_f );_f ,_ef =_fg .ReadBits (byte (_ga .HtRS ()));if _ef !=nil {return _ef ;};_gg =int32 (_f );_af =append (_af ,NewCode (_cfd ,_gg ,_eb ,false ));
_ad +=1<<uint (_gg );};_f ,_ef =_fg .ReadBits (byte (_ga .HtPS ()));if _ef !=nil {return _ef ;};_cfd =int32 (_f );_gg =32;_eb =_ga .HtLow ()-1;_af =append (_af ,NewCode (_cfd ,_gg ,_eb ,true ));_f ,_ef =_fg .ReadBits (byte (_ga .HtPS ()));if _ef !=nil {return _ef ;
};_cfd =int32 (_f );_gg =32;_eb =_ga .HtHigh ();_af =append (_af ,NewCode (_cfd ,_gg ,_eb ,false ));if _ga .HtOOB ()==1{_f ,_ef =_fg .ReadBits (byte (_ga .HtPS ()));if _ef !=nil {return _ef ;};_cfd =int32 (_f );_af =append (_af ,NewCode (_cfd ,-1,-1,false ));
};if _ef =_ga .InitTree (_af );_ef !=nil {return _ef ;};return nil ;};var _efe =[][][]int32 {{{1,4,0},{2,8,16},{3,16,272},{3,32,65808}},{{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{6,32,75},{6,-1,0}},{{8,8,-256},{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{8,32,-257,999},{7,32,75},{6,-1,0}},{{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{5,32,76}},{{7,8,-255},{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{7,32,-256,999},{6,32,76}},{{5,10,-2048},{4,9,-1024},{4,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{2,7,0},{3,7,128},{3,8,256},{4,9,512},{4,10,1024},{6,32,-2049,999},{6,32,2048}},{{4,9,-1024},{3,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{4,5,0},{5,5,32},{5,6,64},{4,7,128},{3,8,256},{3,9,512},{3,10,1024},{5,32,-1025,999},{5,32,2048}},{{8,3,-15},{9,1,-7},{8,1,-5},{9,0,-3},{7,0,-2},{4,0,-1},{2,1,0},{5,0,2},{6,0,3},{3,4,4},{6,1,20},{4,4,22},{4,5,38},{5,6,70},{5,7,134},{6,7,262},{7,8,390},{6,10,646},{9,32,-16,999},{9,32,1670},{2,-1,0}},{{8,4,-31},{9,2,-15},{8,2,-11},{9,1,-7},{7,1,-5},{4,1,-3},{3,1,-1},{3,1,1},{5,1,3},{6,1,5},{3,5,7},{6,2,39},{4,5,43},{4,6,75},{5,7,139},{5,8,267},{6,8,523},{7,9,779},{6,11,1291},{9,32,-32,999},{9,32,3339},{2,-1,0}},{{7,4,-21},{8,0,-5},{7,0,-4},{5,0,-3},{2,2,-2},{5,0,2},{6,0,3},{7,0,4},{8,0,5},{2,6,6},{5,5,70},{6,5,102},{6,6,134},{6,7,198},{6,8,326},{6,9,582},{6,10,1094},{7,11,2118},{8,32,-22,999},{8,32,4166},{2,-1,0}},{{1,0,1},{2,1,2},{4,0,4},{4,1,5},{5,1,7},{5,2,9},{6,2,13},{7,2,17},{7,3,21},{7,4,29},{7,5,45},{7,6,77},{7,32,141}},{{1,0,1},{2,0,2},{3,1,3},{5,0,5},{5,1,6},{6,1,8},{7,0,10},{7,1,11},{7,2,13},{7,3,17},{7,4,25},{8,5,41},{8,32,73}},{{1,0,1},{3,0,2},{4,0,3},{5,0,4},{4,1,5},{3,3,7},{6,1,15},{6,2,17},{6,3,21},{6,4,29},{6,5,45},{7,6,77},{7,32,141}},{{3,0,-2},{3,0,-1},{1,0,0},{3,0,1},{3,0,2}},{{7,4,-24},{6,2,-8},{5,1,-4},{4,0,-2},{3,0,-1},{1,0,0},{3,0,1},{4,0,2},{5,1,3},{6,2,5},{7,4,9},{7,32,-25,999},{7,32,25}}};
func (_dc *EncodedTable )Decode (r *_c .Reader )(int64 ,error ){return _dc ._df .Decode (r )};func (_deg *OutOfBandNode )Decode (r *_c .Reader )(int64 ,error ){return 0,_e .ErrOOB };var _ Tabler =&EncodedTable {};func _afc (_cg *Code )*OutOfBandNode {return &OutOfBandNode {}};
type Code struct{_ddga int32 ;_efea int32 ;_gbb int32 ;_acg bool ;_bfg int32 ;};func _bfd (_daf ,_gbe int32 )string {var _fgd int32 ;_beb :=make ([]rune ,_gbe );for _abg :=int32 (1);_abg <=_gbe ;_abg ++{_fgd =_daf >>uint (_gbe -_abg )&1;if _fgd !=0{_beb [_abg -1]='1';
}else {_beb [_abg -1]='0';};};return string (_beb );};type ValueNode struct{_bb int32 ;_ccd int32 ;_fd bool ;};func GetStandardTable (number int )(Tabler ,error ){if number <=0||number > len (_daa ){return nil ,_de .New ("\u0049n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_degf :=_daa [number -1];if _degf ==nil {var _ag error ;_degf ,_ag =_cgf (_efe [number -1]);if _ag !=nil {return nil ,_ag ;};_daa [number -1]=_degf ;};return _degf ,nil ;};func (_cb *StandardTable )Decode (r *_c .Reader )(int64 ,error ){return _cb ._gc .Decode (r )};
func (_fe *FixedSizeTable )InitTree (codeTable []*Code )error {_ead (codeTable );for _ ,_fb :=range codeTable {_ada :=_fe ._ff .append (_fb );if _ada !=nil {return _ada ;};};return nil ;};func NewEncodedTable (table BasicTabler )(*EncodedTable ,error ){_cf :=&EncodedTable {_df :&InternalNode {},BasicTabler :table };
if _deb :=_cf .parseTable ();_deb !=nil {return nil ,_deb ;};return _cf ,nil ;};func (_eg *OutOfBandNode )String ()string {return _d .Sprintf ("\u0025\u0030\u00364\u0062",int64 (_ee .MaxInt64 ));};var _ Node =&InternalNode {};func (_fac *InternalNode )pad (_ccg *_g .Builder ){for _bge :=int32 (0);
_bge < _fac ._ddg ;_bge ++{_ccg .WriteString ("\u0020\u0020\u0020");};};type Node interface{Decode (_bg *_c .Reader )(int64 ,error );String ()string ;};var _ Node =&ValueNode {};func (_b *EncodedTable )InitTree (codeTable []*Code )error {_ead (codeTable );
for _ ,_aca :=range codeTable {if _dcg :=_b ._df .append (_aca );_dcg !=nil {return _dcg ;};};return nil ;};func (_fa *FixedSizeTable )RootNode ()*InternalNode {return _fa ._ff };type EncodedTable struct{BasicTabler ;_df *InternalNode ;};func (_gaa *StandardTable )InitTree (codeTable []*Code )error {_ead (codeTable );
for _ ,_gdc :=range codeTable {if _ba :=_gaa ._gc .append (_gdc );_ba !=nil {return _ba ;};};return nil ;};func (_aa *EncodedTable )String ()string {return _aa ._df .String ()+"\u000a"};type BasicTabler interface{HtHigh ()int32 ;HtLow ()int32 ;StreamReader ()*_c .Reader ;
HtPS ()int32 ;HtRS ()int32 ;HtOOB ()int32 ;};func (_afe *Code )String ()string {var _gde string ;if _afe ._bfg !=-1{_gde =_bfd (_afe ._bfg ,_afe ._ddga );}else {_gde ="\u003f";};return _d .Sprintf ("%\u0073\u002f\u0025\u0064\u002f\u0025\u0064\u002f\u0025\u0064",_gde ,_afe ._ddga ,_afe ._efea ,_afe ._gbb );
};func (_fbd *FixedSizeTable )String ()string {return _fbd ._ff .String ()+"\u000a"};func (_aab *StandardTable )RootNode ()*InternalNode {return _aab ._gc };func _gaf (_eef *Code )*ValueNode {return &ValueNode {_bb :_eef ._efea ,_ccd :_eef ._gbb ,_fd :_eef ._acg }};
var _ Node =&OutOfBandNode {};func (_bgf *InternalNode )Decode (r *_c .Reader )(int64 ,error ){_ed ,_acab :=r .ReadBit ();if _acab !=nil {return 0,_acab ;};if _ed ==0{return _bgf ._fbdg .Decode (r );};return _bgf ._dgc .Decode (r );};type OutOfBandNode struct{};
func _cgf (_ggg [][]int32 )(*StandardTable ,error ){var _bf []*Code ;for _dgg :=0;_dgg < len (_ggg );_dgg ++{_ab :=_ggg [_dgg ][0];_ede :=_ggg [_dgg ][1];_ecc :=_ggg [_dgg ][2];var _acd bool ;if len (_ggg [_dgg ])> 3{_acd =true ;};_bf =append (_bf ,NewCode (_ab ,_ede ,_ecc ,_acd ));
};_gad :=&StandardTable {_gc :_egg (0)};if _ebg :=_gad .InitTree (_bf );_ebg !=nil {return nil ,_ebg ;};return _gad ,nil ;};func _bbf (_ged ,_ace int32 )int32 {if _ged > _ace {return _ged ;};return _ace ;};type InternalNode struct{_ddg int32 ;_fbdg Node ;
_dgc Node ;};var _daa =make ([]Tabler ,len (_efe ));func (_dde *InternalNode )append (_fdad *Code )(_ec error ){if _fdad ._ddga ==0{return nil ;};_ecg :=_fdad ._ddga -1-_dde ._ddg ;if _ecg < 0{return _de .New ("\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065\u0020\u0073\u0068\u0069\u0066\u0074\u0069n\u0067 \u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u006c\u006c\u006f\u0077\u0065\u0064");
};_gd :=(_fdad ._bfg >>uint (_ecg ))&0x1;if _ecg ==0{if _fdad ._efea ==-1{if _gd ==1{if _dde ._dgc !=nil {return _d .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_fdad );
};_dde ._dgc =_afc (_fdad );}else {if _dde ._fbdg !=nil {return _d .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_fdad );};_dde ._fbdg =_afc (_fdad );
};}else {if _gd ==1{if _dde ._dgc !=nil {return _d .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_fdad );};_dde ._dgc =_gaf (_fdad );
}else {if _dde ._fbdg !=nil {return _d .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_fdad );};_dde ._fbdg =_gaf (_fdad );
};};}else {if _gd ==1{if _dde ._dgc ==nil {_dde ._dgc =_egg (_dde ._ddg +1);};if _ec =_dde ._dgc .(*InternalNode ).append (_fdad );_ec !=nil {return _ec ;};}else {if _dde ._fbdg ==nil {_dde ._fbdg =_egg (_dde ._ddg +1);};if _ec =_dde ._fbdg .(*InternalNode ).append (_fdad );
_ec !=nil {return _ec ;};};};return nil ;};func (_da *EncodedTable )RootNode ()*InternalNode {return _da ._df };func NewCode (prefixLength ,rangeLength ,rangeLow int32 ,isLowerRange bool )*Code {return &Code {_ddga :prefixLength ,_efea :rangeLength ,_gbb :rangeLow ,_acg :isLowerRange ,_bfg :-1};
};func (_bc *InternalNode )String ()string {_dda :=&_g .Builder {};_dda .WriteString ("\u000a");_bc .pad (_dda );_dda .WriteString ("\u0030\u003a\u0020");_dda .WriteString (_bc ._fbdg .String ()+"\u000a");_bc .pad (_dda );_dda .WriteString ("\u0031\u003a\u0020");
_dda .WriteString (_bc ._dgc .String ()+"\u000a");return _dda .String ();};type StandardTable struct{_gc *InternalNode };