//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package huffman ;import (_ce "errors";_cf "fmt";_a "github.com/unidoc/unipdf/v3/internal/bitwise";_d "github.com/unidoc/unipdf/v3/internal/jbig2/internal";_c "math";_eb "strings";);func (_be *EncodedTable )parseTable ()error {var (_aa []*Code ;_gf ,_ga ,_fb int32 ;
_ad uint64 ;_da error ;);_af :=_be .StreamReader ();_cc :=_be .HtLow ();for _cc < _be .HtHigh (){_ad ,_da =_af .ReadBits (byte (_be .HtPS ()));if _da !=nil {return _da ;};_gf =int32 (_ad );_ad ,_da =_af .ReadBits (byte (_be .HtRS ()));if _da !=nil {return _da ;
};_ga =int32 (_ad );_aa =append (_aa ,NewCode (_gf ,_ga ,_fb ,false ));_cc +=1<<uint (_ga );};_ad ,_da =_af .ReadBits (byte (_be .HtPS ()));if _da !=nil {return _da ;};_gf =int32 (_ad );_ga =32;_fb =_be .HtLow ()-1;_aa =append (_aa ,NewCode (_gf ,_ga ,_fb ,true ));
_ad ,_da =_af .ReadBits (byte (_be .HtPS ()));if _da !=nil {return _da ;};_gf =int32 (_ad );_ga =32;_fb =_be .HtHigh ();_aa =append (_aa ,NewCode (_gf ,_ga ,_fb ,false ));if _be .HtOOB ()==1{_ad ,_da =_af .ReadBits (byte (_be .HtPS ()));if _da !=nil {return _da ;
};_gf =int32 (_ad );_aa =append (_aa ,NewCode (_gf ,-1,-1,false ));};if _da =_be .InitTree (_aa );_da !=nil {return _da ;};return nil ;};func _deb (_eba int32 )*InternalNode {return &InternalNode {_faf :_eba }};func (_bdb *InternalNode )append (_cdf *Code )(_ceg error ){if _cdf ._ffe ==0{return nil ;
};_bdc :=_cdf ._ffe -1-_bdb ._faf ;if _bdc < 0{return _ce .New ("\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065\u0020\u0073\u0068\u0069\u0066\u0074\u0069n\u0067 \u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u006c\u006c\u006f\u0077\u0065\u0064");};
_dca :=(_cdf ._bec >>uint (_bdc ))&0x1;if _bdc ==0{if _cdf ._ebfd ==-1{if _dca ==1{if _bdb ._ge !=nil {return _cf .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_cdf );
};_bdb ._ge =_eg (_cdf );}else {if _bdb ._fda !=nil {return _cf .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_cdf );};_bdb ._fda =_eg (_cdf );};}else {if _dca ==1{if _bdb ._ge !=nil {return _cf .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_cdf );
};_bdb ._ge =_bgc (_cdf );}else {if _bdb ._fda !=nil {return _cf .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_cdf );
};_bdb ._fda =_bgc (_cdf );};};}else {if _dca ==1{if _bdb ._ge ==nil {_bdb ._ge =_deb (_bdb ._faf +1);};if _ceg =_bdb ._ge .(*InternalNode ).append (_cdf );_ceg !=nil {return _ceg ;};}else {if _bdb ._fda ==nil {_bdb ._fda =_deb (_bdb ._faf +1);};if _ceg =_bdb ._fda .(*InternalNode ).append (_cdf );
_ceg !=nil {return _ceg ;};};};return nil ;};func (_ebf *EncodedTable )Decode (r *_a .Reader )(int64 ,error ){return _ebf ._ef .Decode (r )};func _fbg (_dfb ,_fce int32 )int32 {if _dfb > _fce {return _dfb ;};return _fce ;};type Node interface{Decode (_gcc *_a .Reader )(int64 ,error );
String ()string ;};func (_bcf *StandardTable )String ()string {return _bcf ._ff .String ()+"\u000a"};var _ Node =&ValueNode {};func (_feb *InternalNode )pad (_dad *_eb .Builder ){for _ced :=int32 (0);_ced < _feb ._faf ;_ced ++{_dad .WriteString ("\u0020\u0020\u0020");
};};type EncodedTable struct{BasicTabler ;_ef *InternalNode ;};func (_gc *FixedSizeTable )InitTree (codeTable []*Code )error {_dac (codeTable );for _ ,_ca :=range codeTable {_dc :=_gc ._gfa .append (_ca );if _dc !=nil {return _dc ;};};return nil ;};var _ Tabler =&EncodedTable {};
func (_bgg *StandardTable )Decode (r *_a .Reader )(int64 ,error ){return _bgg ._ff .Decode (r )};type FixedSizeTable struct{_gfa *InternalNode };type OutOfBandNode struct{};func _eg (_ac *Code )*OutOfBandNode {return &OutOfBandNode {}};func (_cea *InternalNode )Decode (r *_a .Reader )(int64 ,error ){_fbe ,_dfe :=r .ReadBit ();
if _dfe !=nil {return 0,_dfe ;};if _fbe ==0{return _cea ._fda .Decode (r );};return _cea ._ge .Decode (r );};func (_bge *InternalNode )String ()string {_ba :=&_eb .Builder {};_ba .WriteString ("\u000a");_bge .pad (_ba );_ba .WriteString ("\u0030\u003a\u0020");
_ba .WriteString (_bge ._fda .String ()+"\u000a");_bge .pad (_ba );_ba .WriteString ("\u0031\u003a\u0020");_ba .WriteString (_bge ._ge .String ()+"\u000a");return _ba .String ();};func (_ee *EncodedTable )String ()string {return _ee ._ef .String ()+"\u000a"};
var _fdf =make ([]Tabler ,len (_ade ));var _ade =[][][]int32 {{{1,4,0},{2,8,16},{3,16,272},{3,32,65808}},{{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{6,32,75},{6,-1,0}},{{8,8,-256},{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{8,32,-257,999},{7,32,75},{6,-1,0}},{{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{5,32,76}},{{7,8,-255},{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{7,32,-256,999},{6,32,76}},{{5,10,-2048},{4,9,-1024},{4,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{2,7,0},{3,7,128},{3,8,256},{4,9,512},{4,10,1024},{6,32,-2049,999},{6,32,2048}},{{4,9,-1024},{3,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{4,5,0},{5,5,32},{5,6,64},{4,7,128},{3,8,256},{3,9,512},{3,10,1024},{5,32,-1025,999},{5,32,2048}},{{8,3,-15},{9,1,-7},{8,1,-5},{9,0,-3},{7,0,-2},{4,0,-1},{2,1,0},{5,0,2},{6,0,3},{3,4,4},{6,1,20},{4,4,22},{4,5,38},{5,6,70},{5,7,134},{6,7,262},{7,8,390},{6,10,646},{9,32,-16,999},{9,32,1670},{2,-1,0}},{{8,4,-31},{9,2,-15},{8,2,-11},{9,1,-7},{7,1,-5},{4,1,-3},{3,1,-1},{3,1,1},{5,1,3},{6,1,5},{3,5,7},{6,2,39},{4,5,43},{4,6,75},{5,7,139},{5,8,267},{6,8,523},{7,9,779},{6,11,1291},{9,32,-32,999},{9,32,3339},{2,-1,0}},{{7,4,-21},{8,0,-5},{7,0,-4},{5,0,-3},{2,2,-2},{5,0,2},{6,0,3},{7,0,4},{8,0,5},{2,6,6},{5,5,70},{6,5,102},{6,6,134},{6,7,198},{6,8,326},{6,9,582},{6,10,1094},{7,11,2118},{8,32,-22,999},{8,32,4166},{2,-1,0}},{{1,0,1},{2,1,2},{4,0,4},{4,1,5},{5,1,7},{5,2,9},{6,2,13},{7,2,17},{7,3,21},{7,4,29},{7,5,45},{7,6,77},{7,32,141}},{{1,0,1},{2,0,2},{3,1,3},{5,0,5},{5,1,6},{6,1,8},{7,0,10},{7,1,11},{7,2,13},{7,3,17},{7,4,25},{8,5,41},{8,32,73}},{{1,0,1},{3,0,2},{4,0,3},{5,0,4},{4,1,5},{3,3,7},{6,1,15},{6,2,17},{6,3,21},{6,4,29},{6,5,45},{7,6,77},{7,32,141}},{{3,0,-2},{3,0,-1},{1,0,0},{3,0,1},{3,0,2}},{{7,4,-24},{6,2,-8},{5,1,-4},{4,0,-2},{3,0,-1},{1,0,0},{3,0,1},{4,0,2},{5,1,3},{6,2,5},{7,4,9},{7,32,-25,999},{7,32,25}}};
type InternalNode struct{_faf int32 ;_fda Node ;_ge Node ;};func (_df *EncodedTable )InitTree (codeTable []*Code )error {_dac (codeTable );for _ ,_ae :=range codeTable {if _ebd :=_df ._ef .append (_ae );_ebd !=nil {return _ebd ;};};return nil ;};func (_aac *OutOfBandNode )String ()string {return _cf .Sprintf ("\u0025\u0030\u00364\u0062",int64 (_c .MaxInt64 ));
};func NewFixedSizeTable (codeTable []*Code )(*FixedSizeTable ,error ){_bg :=&FixedSizeTable {_gfa :&InternalNode {}};if _bb :=_bg .InitTree (codeTable );_bb !=nil {return nil ,_bb ;};return _bg ,nil ;};func (_cd *FixedSizeTable )Decode (r *_a .Reader )(int64 ,error ){return _cd ._gfa .Decode (r )};
var _ Node =&InternalNode {};func (_ag *ValueNode )String ()string {return _cf .Sprintf ("\u0025\u0064\u002f%\u0064",_ag ._fed ,_ag ._ega );};func (_ddd *StandardTable )InitTree (codeTable []*Code )error {_dac (codeTable );for _ ,_cde :=range codeTable {if _gee :=_ddd ._ff .append (_cde );
_gee !=nil {return _gee ;};};return nil ;};type StandardTable struct{_ff *InternalNode };func (_dcf *OutOfBandNode )Decode (r *_a .Reader )(int64 ,error ){return 0,_d .ErrOOB };func _cfc (_gff [][]int32 )(*StandardTable ,error ){var _aff []*Code ;for _ed :=0;
_ed < len (_gff );_ed ++{_beg :=_gff [_ed ][0];_afc :=_gff [_ed ][1];_ccf :=_gff [_ed ][2];var _bbe bool ;if len (_gff [_ed ])> 3{_bbe =true ;};_aff =append (_aff ,NewCode (_beg ,_afc ,_ccf ,_bbe ));};_bea :=&StandardTable {_ff :_deb (0)};if _aec :=_bea .InitTree (_aff );
_aec !=nil {return nil ,_aec ;};return _bea ,nil ;};func NewEncodedTable (table BasicTabler )(*EncodedTable ,error ){_f :=&EncodedTable {_ef :&InternalNode {},BasicTabler :table };if _ebb :=_f .parseTable ();_ebb !=nil {return nil ,_ebb ;};return _f ,nil ;
};type Tabler interface{Decode (_dfc *_a .Reader )(int64 ,error );InitTree (_ccfe []*Code )error ;String ()string ;RootNode ()*InternalNode ;};func NewCode (prefixLength ,rangeLength ,rangeLow int32 ,isLowerRange bool )*Code {return &Code {_ffe :prefixLength ,_ebfd :rangeLength ,_agc :rangeLow ,_gfd :isLowerRange ,_bec :-1};
};func (_fa *FixedSizeTable )String ()string {return _fa ._gfa .String ()+"\u000a"};type ValueNode struct{_fed int32 ;_ega int32 ;_fd bool ;};type Code struct{_ffe int32 ;_ebfd int32 ;_agc int32 ;_gfd bool ;_bec int32 ;};type BasicTabler interface{HtHigh ()int32 ;
HtLow ()int32 ;StreamReader ()*_a .Reader ;HtPS ()int32 ;HtRS ()int32 ;HtOOB ()int32 ;};func GetStandardTable (number int )(Tabler ,error ){if number <=0||number > len (_fdf ){return nil ,_ce .New ("\u0049n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_bf :=_fdf [number -1];if _bf ==nil {var _ffg error ;_bf ,_ffg =_cfc (_ade [number -1]);if _ffg !=nil {return nil ,_ffg ;};_fdf [number -1]=_bf ;};return _bf ,nil ;};var _ Node =&OutOfBandNode {};func (_cb *ValueNode )Decode (r *_a .Reader )(int64 ,error ){_caf ,_de :=r .ReadBits (byte (_cb ._fed ));
if _de !=nil {return 0,_de ;};if _cb ._fd {_caf =-_caf ;};return int64 (_cb ._ega )+int64 (_caf ),nil ;};func _bgc (_bba *Code )*ValueNode {return &ValueNode {_fed :_bba ._ebfd ,_ega :_bba ._agc ,_fd :_bba ._gfd };};func _gaa (_cfa ,_efc int32 )string {var _gfe int32 ;
_bab :=make ([]rune ,_efc );for _egc :=int32 (1);_egc <=_efc ;_egc ++{_gfe =_cfa >>uint (_efc -_egc )&1;if _gfe !=0{_bab [_egc -1]='1';}else {_bab [_egc -1]='0';};};return string (_bab );};func (_dcd *Code )String ()string {var _cfcf string ;if _dcd ._bec !=-1{_cfcf =_gaa (_dcd ._bec ,_dcd ._ffe );
}else {_cfcf ="\u003f";};return _cf .Sprintf ("%\u0073\u002f\u0025\u0064\u002f\u0025\u0064\u002f\u0025\u0064",_cfcf ,_dcd ._ffe ,_dcd ._ebfd ,_dcd ._agc );};func (_ea *StandardTable )RootNode ()*InternalNode {return _ea ._ff };func _dac (_baa []*Code ){var _acb int32 ;
for _ ,_bae :=range _baa {_acb =_fbg (_acb ,_bae ._ffe );};_fg :=make ([]int32 ,_acb +1);for _ ,_gag :=range _baa {_fg [_gag ._ffe ]++;};var _egcg int32 ;_fc :=make ([]int32 ,len (_fg )+1);_fg [0]=0;for _cad :=int32 (1);_cad <=int32 (len (_fg ));_cad ++{_fc [_cad ]=(_fc [_cad -1]+(_fg [_cad -1]))<<1;
_egcg =_fc [_cad ];for _ ,_efb :=range _baa {if _efb ._ffe ==_cad {_efb ._bec =_egcg ;_egcg ++;};};};};func (_dd *EncodedTable )RootNode ()*InternalNode {return _dd ._ef };func (_fe *FixedSizeTable )RootNode ()*InternalNode {return _fe ._gfa };