//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package huffman ;import (_e "errors";_ccb "fmt";_c "github.com/unidoc/unipdf/v4/internal/bitwise";_cc "github.com/unidoc/unipdf/v4/internal/jbig2/internal";_cca "math";_d "strings";);func (_gea *InternalNode )Decode (r *_c .Reader )(int64 ,error ){_gbg ,_gf :=r .ReadBit ();
if _gf !=nil {return 0,_gf ;};if _gbg ==0{return _gea ._ceb .Decode (r );};return _gea ._gc .Decode (r );};type InternalNode struct{_eg int32 ;_ceb Node ;_gc Node ;};func (_dfg *StandardTable )Decode (r *_c .Reader )(int64 ,error ){return _dfg ._cde .Decode (r )};
func GetStandardTable (number int )(Tabler ,error ){if number <=0||number > len (_ebc ){return nil ,_e .New ("\u0049n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");};_dcf :=_ebc [number -1];if _dcf ==nil {var _acb error ;
_dcf ,_acb =_ffge (_eaf [number -1]);if _acb !=nil {return nil ,_acb ;};_ebc [number -1]=_dcf ;};return _dcf ,nil ;};func _eed (_eadc *Code )*OutOfBandNode {return &OutOfBandNode {}};func (_be *EncodedTable )parseTable ()error {var (_ge []*Code ;_ba ,_ag ,_gd int32 ;
_ga uint64 ;_f error ;);_ea :=_be .StreamReader ();_gag :=_be .HtLow ();for _gag < _be .HtHigh (){_ga ,_f =_ea .ReadBits (byte (_be .HtPS ()));if _f !=nil {return _f ;};_ba =int32 (_ga );_ga ,_f =_ea .ReadBits (byte (_be .HtRS ()));if _f !=nil {return _f ;
};_ag =int32 (_ga );_ge =append (_ge ,NewCode (_ba ,_ag ,_gd ,false ));_gag +=1<<uint (_ag );};_ga ,_f =_ea .ReadBits (byte (_be .HtPS ()));if _f !=nil {return _f ;};_ba =int32 (_ga );_ag =32;_gd =_be .HtLow ()-1;_ge =append (_ge ,NewCode (_ba ,_ag ,_gd ,true ));
_ga ,_f =_ea .ReadBits (byte (_be .HtPS ()));if _f !=nil {return _f ;};_ba =int32 (_ga );_ag =32;_gd =_be .HtHigh ();_ge =append (_ge ,NewCode (_ba ,_ag ,_gd ,false ));if _be .HtOOB ()==1{_ga ,_f =_ea .ReadBits (byte (_be .HtPS ()));if _f !=nil {return _f ;
};_ba =int32 (_ga );_ge =append (_ge ,NewCode (_ba ,-1,-1,false ));};if _f =_be .InitTree (_ge );_f !=nil {return _f ;};return nil ;};type ValueNode struct{_ce int32 ;_ccad int32 ;_fe bool ;};func (_g *EncodedTable )InitTree (codeTable []*Code )error {_ccbb (codeTable );
for _ ,_df :=range codeTable {if _gg :=_g ._bf .append (_df );_gg !=nil {return _gg ;};};return nil ;};func (_gbe *FixedSizeTable )RootNode ()*InternalNode {return _gbe ._dc };type StandardTable struct{_cde *InternalNode };type OutOfBandNode struct{};var _eaf =[][][]int32 {{{1,4,0},{2,8,16},{3,16,272},{3,32,65808}},{{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{6,32,75},{6,-1,0}},{{8,8,-256},{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{8,32,-257,999},{7,32,75},{6,-1,0}},{{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{5,32,76}},{{7,8,-255},{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{7,32,-256,999},{6,32,76}},{{5,10,-2048},{4,9,-1024},{4,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{2,7,0},{3,7,128},{3,8,256},{4,9,512},{4,10,1024},{6,32,-2049,999},{6,32,2048}},{{4,9,-1024},{3,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{4,5,0},{5,5,32},{5,6,64},{4,7,128},{3,8,256},{3,9,512},{3,10,1024},{5,32,-1025,999},{5,32,2048}},{{8,3,-15},{9,1,-7},{8,1,-5},{9,0,-3},{7,0,-2},{4,0,-1},{2,1,0},{5,0,2},{6,0,3},{3,4,4},{6,1,20},{4,4,22},{4,5,38},{5,6,70},{5,7,134},{6,7,262},{7,8,390},{6,10,646},{9,32,-16,999},{9,32,1670},{2,-1,0}},{{8,4,-31},{9,2,-15},{8,2,-11},{9,1,-7},{7,1,-5},{4,1,-3},{3,1,-1},{3,1,1},{5,1,3},{6,1,5},{3,5,7},{6,2,39},{4,5,43},{4,6,75},{5,7,139},{5,8,267},{6,8,523},{7,9,779},{6,11,1291},{9,32,-32,999},{9,32,3339},{2,-1,0}},{{7,4,-21},{8,0,-5},{7,0,-4},{5,0,-3},{2,2,-2},{5,0,2},{6,0,3},{7,0,4},{8,0,5},{2,6,6},{5,5,70},{6,5,102},{6,6,134},{6,7,198},{6,8,326},{6,9,582},{6,10,1094},{7,11,2118},{8,32,-22,999},{8,32,4166},{2,-1,0}},{{1,0,1},{2,1,2},{4,0,4},{4,1,5},{5,1,7},{5,2,9},{6,2,13},{7,2,17},{7,3,21},{7,4,29},{7,5,45},{7,6,77},{7,32,141}},{{1,0,1},{2,0,2},{3,1,3},{5,0,5},{5,1,6},{6,1,8},{7,0,10},{7,1,11},{7,2,13},{7,3,17},{7,4,25},{8,5,41},{8,32,73}},{{1,0,1},{3,0,2},{4,0,3},{5,0,4},{4,1,5},{3,3,7},{6,1,15},{6,2,17},{6,3,21},{6,4,29},{6,5,45},{7,6,77},{7,32,141}},{{3,0,-2},{3,0,-1},{1,0,0},{3,0,1},{3,0,2}},{{7,4,-24},{6,2,-8},{5,1,-4},{4,0,-2},{3,0,-1},{1,0,0},{3,0,1},{4,0,2},{5,1,3},{6,2,5},{7,4,9},{7,32,-25,999},{7,32,25}}};
func (_geb *ValueNode )String ()string {return _ccb .Sprintf ("\u0025\u0064\u002f%\u0064",_geb ._ce ,_geb ._ccad );};func _accg (_ecec ,_bae int32 )int32 {if _ecec > _bae {return _ecec ;};return _bae ;};func (_gb *EncodedTable )String ()string {return _gb ._bf .String ()+"\u000a"};
func NewEncodedTable (table BasicTabler )(*EncodedTable ,error ){_ac :=&EncodedTable {_bf :&InternalNode {},BasicTabler :table };if _ee :=_ac .parseTable ();_ee !=nil {return nil ,_ee ;};return _ac ,nil ;};var _ Tabler =&EncodedTable {};func (_cd *ValueNode )Decode (r *_c .Reader )(int64 ,error ){_ca ,_eeg :=r .ReadBits (byte (_cd ._ce ));
if _eeg !=nil {return 0,_eeg ;};if _cd ._fe {_ca =-_ca ;};return int64 (_cd ._ccad )+int64 (_ca ),nil ;};func NewFixedSizeTable (codeTable []*Code )(*FixedSizeTable ,error ){_agf :=&FixedSizeTable {_dc :&InternalNode {}};if _af :=_agf .InitTree (codeTable );
_af !=nil {return nil ,_af ;};return _agf ,nil ;};func (_bb *EncodedTable )Decode (r *_c .Reader )(int64 ,error ){return _bb ._bf .Decode (r )};func _db (_bbd *Code )*ValueNode {return &ValueNode {_ce :_bbd ._cag ,_ccad :_bbd ._aa ,_fe :_bbd ._gff }};func (_ec *FixedSizeTable )Decode (r *_c .Reader )(int64 ,error ){return _ec ._dc .Decode (r )};
func (_da *InternalNode )String ()string {_fee :=&_d .Builder {};_fee .WriteString ("\u000a");_da .pad (_fee );_fee .WriteString ("\u0030\u003a\u0020");_fee .WriteString (_da ._ceb .String ()+"\u000a");_da .pad (_fee );_fee .WriteString ("\u0031\u003a\u0020");
_fee .WriteString (_da ._gc .String ()+"\u000a");return _fee .String ();};func (_gge *InternalNode )append (_ad *Code )(_fc error ){if _ad ._cbe ==0{return nil ;};_ffg :=_ad ._cbe -1-_gge ._eg ;if _ffg < 0{return _e .New ("\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065\u0020\u0073\u0068\u0069\u0066\u0074\u0069n\u0067 \u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u006c\u006c\u006f\u0077\u0065\u0064");
};_ccc :=(_ad ._gcb >>uint (_ffg ))&0x1;if _ffg ==0{if _ad ._cag ==-1{if _ccc ==1{if _gge ._gc !=nil {return _ccb .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_ad );
};_gge ._gc =_eed (_ad );}else {if _gge ._ceb !=nil {return _ccb .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_ad );};_gge ._ceb =_eed (_ad );};}else {if _ccc ==1{if _gge ._gc !=nil {return _ccb .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_ad );
};_gge ._gc =_db (_ad );}else {if _gge ._ceb !=nil {return _ccb .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_ad );
};_gge ._ceb =_db (_ad );};};}else {if _ccc ==1{if _gge ._gc ==nil {_gge ._gc =_bfd (_gge ._eg +1);};if _fc =_gge ._gc .(*InternalNode ).append (_ad );_fc !=nil {return _fc ;};}else {if _gge ._ceb ==nil {_gge ._ceb =_bfd (_gge ._eg +1);};if _fc =_gge ._ceb .(*InternalNode ).append (_ad );
_fc !=nil {return _fc ;};};};return nil ;};func _acc (_bc ,_acg int32 )string {var _bfe int32 ;_agg :=make ([]rune ,_acg );for _aba :=int32 (1);_aba <=_acg ;_aba ++{_bfe =_bc >>uint (_acg -_aba )&1;if _bfe !=0{_agg [_aba -1]='1';}else {_agg [_aba -1]='0';
};};return string (_agg );};func (_ccd *StandardTable )String ()string {return _ccd ._cde .String ()+"\u000a"};func (_cf *FixedSizeTable )String ()string {return _cf ._dc .String ()+"\u000a"};type Tabler interface{Decode (_dgf *_c .Reader )(int64 ,error );
InitTree (_ggeg []*Code )error ;String ()string ;RootNode ()*InternalNode ;};func (_cg *OutOfBandNode )Decode (r *_c .Reader )(int64 ,error ){return 0,_cc .ErrOOB };func (_efec *OutOfBandNode )String ()string {return _ccb .Sprintf ("\u0025\u0030\u00364\u0062",int64 (_cca .MaxInt64 ));
};type FixedSizeTable struct{_dc *InternalNode };type Node interface{Decode (_ff *_c .Reader )(int64 ,error );String ()string ;};var _ Node =&OutOfBandNode {};func (_fb *StandardTable )RootNode ()*InternalNode {return _fb ._cde };type EncodedTable struct{BasicTabler ;
_bf *InternalNode ;};type Code struct{_cbe int32 ;_cag int32 ;_aa int32 ;_gff bool ;_gcb int32 ;};type BasicTabler interface{HtHigh ()int32 ;HtLow ()int32 ;StreamReader ()*_c .Reader ;HtPS ()int32 ;HtRS ()int32 ;HtOOB ()int32 ;};var _ Node =&InternalNode {};
var _ebc =make ([]Tabler ,len (_eaf ));func (_daf *StandardTable )InitTree (codeTable []*Code )error {_ccbb (codeTable );for _ ,_gfc :=range codeTable {if _dg :=_daf ._cde .append (_gfc );_dg !=nil {return _dg ;};};return nil ;};func (_ab *InternalNode )pad (_ece *_d .Builder ){for _bbg :=int32 (0);
_bbg < _ab ._eg ;_bbg ++{_ece .WriteString ("\u0020\u0020\u0020");};};func _ccbb (_gcg []*Code ){var _ggf int32 ;for _ ,_cac :=range _gcg {_ggf =_accg (_ggf ,_cac ._cbe );};_ecg :=make ([]int32 ,_ggf +1);for _ ,_bbf :=range _gcg {_ecg [_bbf ._cbe ]++;};
var _cdea int32 ;_dca :=make ([]int32 ,len (_ecg )+1);_ecg [0]=0;for _bfeg :=int32 (1);_bfeg <=int32 (len (_ecg ));_bfeg ++{_dca [_bfeg ]=(_dca [_bfeg -1]+(_ecg [_bfeg -1]))<<1;_cdea =_dca [_bfeg ];for _ ,_agc :=range _gcg {if _agc ._cbe ==_bfeg {_agc ._gcb =_cdea ;
_cdea ++;};};};};func (_ccag *Code )String ()string {var _gcdg string ;if _ccag ._gcb !=-1{_gcdg =_acc (_ccag ._gcb ,_ccag ._cbe );}else {_gcdg ="\u003f";};return _ccb .Sprintf ("%\u0073\u002f\u0025\u0064\u002f\u0025\u0064\u002f\u0025\u0064",_gcdg ,_ccag ._cbe ,_ccag ._cag ,_ccag ._aa );
};func _bfd (_afeb int32 )*InternalNode {return &InternalNode {_eg :_afeb }};func (_efe *EncodedTable )RootNode ()*InternalNode {return _efe ._bf };var _ Node =&ValueNode {};func _ffge (_bg [][]int32 )(*StandardTable ,error ){var _gcd []*Code ;for _bad :=0;
_bad < len (_bg );_bad ++{_ggeb :=_bg [_bad ][0];_fae :=_bg [_bad ][1];_cce :=_bg [_bad ][2];var _aca bool ;if len (_bg [_bad ])> 3{_aca =true ;};_gcd =append (_gcd ,NewCode (_ggeb ,_fae ,_cce ,_aca ));};_abb :=&StandardTable {_cde :_bfd (0)};if _de :=_abb .InitTree (_gcd );
_de !=nil {return nil ,_de ;};return _abb ,nil ;};func (_gda *FixedSizeTable )InitTree (codeTable []*Code )error {_ccbb (codeTable );for _ ,_ead :=range codeTable {_afe :=_gda ._dc .append (_ead );if _afe !=nil {return _afe ;};};return nil ;};func NewCode (prefixLength ,rangeLength ,rangeLow int32 ,isLowerRange bool )*Code {return &Code {_cbe :prefixLength ,_cag :rangeLength ,_aa :rangeLow ,_gff :isLowerRange ,_gcb :-1};
};