//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package huffman ;import (_e "errors";_bf "fmt";_c "github.com/unidoc/unipdf/v3/internal/bitwise";_b "github.com/unidoc/unipdf/v3/internal/jbig2/internal";_d "math";_cc "strings";);var _bbb =make ([]Tabler ,len (_fbb ));type ValueNode struct{_af int32 ;
_fbf int32 ;_ga bool ;};type EncodedTable struct{BasicTabler ;_a *InternalNode ;};func (_ed *EncodedTable )Decode (r *_c .Reader )(int64 ,error ){return _ed ._a .Decode (r )};type InternalNode struct{_adc int32 ;_da Node ;_egg Node ;};func (_abb *ValueNode )String ()string {return _bf .Sprintf ("\u0025\u0064\u002f%\u0064",_abb ._af ,_abb ._fbf );
};func (_daa *InternalNode )Decode (r *_c .Reader )(int64 ,error ){_bfc ,_bda :=r .ReadBit ();if _bda !=nil {return 0,_bda ;};if _bfc ==0{return _daa ._da .Decode (r );};return _daa ._egg .Decode (r );};func GetStandardTable (number int )(Tabler ,error ){if number <=0||number > len (_bbb ){return nil ,_e .New ("\u0049n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_cbg :=_bbb [number -1];if _cbg ==nil {var _ba error ;_cbg ,_ba =_gbaa (_fbb [number -1]);if _ba !=nil {return nil ,_ba ;};_bbb [number -1]=_cbg ;};return _cbg ,nil ;};var _ Node =&OutOfBandNode {};var _ Tabler =&EncodedTable {};func (_eff *StandardTable )Decode (r *_c .Reader )(int64 ,error ){return _eff ._ac .Decode (r )};
func (_gf *OutOfBandNode )String ()string {return _bf .Sprintf ("\u0025\u0030\u00364\u0062",int64 (_d .MaxInt64 ));};func (_aba *StandardTable )RootNode ()*InternalNode {return _aba ._ac };func (_ea *ValueNode )Decode (r *_c .Reader )(int64 ,error ){_ge ,_fdc :=r .ReadBits (byte (_ea ._af ));
if _fdc !=nil {return 0,_fdc ;};if _ea ._ga {_ge =-_ge ;};return int64 (_ea ._fbf )+int64 (_ge ),nil ;};func _bgeb (_fgc int32 )*InternalNode {return &InternalNode {_adc :_fgc }};func _ccg (_ggc *Code )*OutOfBandNode {return &OutOfBandNode {}};func (_aa *EncodedTable )String ()string {return _aa ._a .String ()+"\u000a"};
func (_gba *InternalNode )append (_dae *Code )(_ceg error ){if _dae ._ggd ==0{return nil ;};_ccgb :=_dae ._ggd -1-_gba ._adc ;if _ccgb < 0{return _e .New ("\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065\u0020\u0073\u0068\u0069\u0066\u0074\u0069n\u0067 \u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u006c\u006c\u006f\u0077\u0065\u0064");
};_bcd :=(_dae ._fa >>uint (_ccgb ))&0x1;if _ccgb ==0{if _dae ._daad ==-1{if _bcd ==1{if _gba ._egg !=nil {return _bf .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_dae );
};_gba ._egg =_ccg (_dae );}else {if _gba ._da !=nil {return _bf .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_dae );};_gba ._da =_ccg (_dae );};}else {if _bcd ==1{if _gba ._egg !=nil {return _bf .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_dae );
};_gba ._egg =_ce (_dae );}else {if _gba ._da !=nil {return _bf .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_dae );
};_gba ._da =_ce (_dae );};};}else {if _bcd ==1{if _gba ._egg ==nil {_gba ._egg =_bgeb (_gba ._adc +1);};if _ceg =_gba ._egg .(*InternalNode ).append (_dae );_ceg !=nil {return _ceg ;};}else {if _gba ._da ==nil {_gba ._da =_bgeb (_gba ._adc +1);};if _ceg =_gba ._da .(*InternalNode ).append (_dae );
_ceg !=nil {return _ceg ;};};};return nil ;};func _gdc (_cca []*Code ){var _gdd int32 ;for _ ,_aaf :=range _cca {_gdd =_cfe (_gdd ,_aaf ._ggd );};_edb :=make ([]int32 ,_gdd +1);for _ ,_cdb :=range _cca {_edb [_cdb ._ggd ]++;};var _abab int32 ;_fc :=make ([]int32 ,len (_edb )+1);
_edb [0]=0;for _bbdd :=int32 (1);_bbdd <=int32 (len (_edb ));_bbdd ++{_fc [_bbdd ]=(_fc [_bbdd -1]+(_edb [_bbdd -1]))<<1;_abab =_fc [_bbdd ];for _ ,_gff :=range _cca {if _gff ._ggd ==_bbdd {_gff ._fa =_abab ;_abab ++;};};};};func (_fd *FixedSizeTable )InitTree (codeTable []*Code )error {_gdc (codeTable );
for _ ,_cg :=range codeTable {_gg :=_fd ._fe .append (_cg );if _gg !=nil {return _gg ;};};return nil ;};func (_ggb *InternalNode )String ()string {_ff :=&_cc .Builder {};_ff .WriteString ("\u000a");_ggb .pad (_ff );_ff .WriteString ("\u0030\u003a\u0020");
_ff .WriteString (_ggb ._da .String ()+"\u000a");_ggb .pad (_ff );_ff .WriteString ("\u0031\u003a\u0020");_ff .WriteString (_ggb ._egg .String ()+"\u000a");return _ff .String ();};type Code struct{_ggd int32 ;_daad int32 ;_bgf int32 ;_abf bool ;_fa int32 ;
};func _edg (_feg ,_cag int32 )string {var _ced int32 ;_acc :=make ([]rune ,_cag );for _df :=int32 (1);_df <=_cag ;_df ++{_ced =_feg >>uint (_cag -_df )&1;if _ced !=0{_acc [_df -1]='1';}else {_acc [_df -1]='0';};};return string (_acc );};func _gbaa (_gdb [][]int32 )(*StandardTable ,error ){var _bbd []*Code ;
for _bce :=0;_bce < len (_gdb );_bce ++{_acd :=_gdb [_bce ][0];_eb :=_gdb [_bce ][1];_bag :=_gdb [_bce ][2];var _geg bool ;if len (_gdb [_bce ])> 3{_geg =true ;};_bbd =append (_bbd ,NewCode (_acd ,_eb ,_bag ,_geg ));};_fdd :=&StandardTable {_ac :_bgeb (0)};
if _cbc :=_fdd .InitTree (_bbd );_cbc !=nil {return nil ,_cbc ;};return _fdd ,nil ;};func (_ddf *StandardTable )InitTree (codeTable []*Code )error {_gdc (codeTable );for _ ,_eaf :=range codeTable {if _dc :=_ddf ._ac .append (_eaf );_dc !=nil {return _dc ;
};};return nil ;};func NewCode (prefixLength ,rangeLength ,rangeLow int32 ,isLowerRange bool )*Code {return &Code {_ggd :prefixLength ,_daad :rangeLength ,_bgf :rangeLow ,_abf :isLowerRange ,_fa :-1};};func (_gb *FixedSizeTable )RootNode ()*InternalNode {return _gb ._fe };
func (_ag *Code )String ()string {var _bbbb string ;if _ag ._fa !=-1{_bbbb =_edg (_ag ._fa ,_ag ._ggd );}else {_bbbb ="\u003f";};return _bf .Sprintf ("%\u0073\u002f\u0025\u0064\u002f\u0025\u0064\u002f\u0025\u0064",_bbbb ,_ag ._ggd ,_ag ._daad ,_ag ._bgf );
};func (_bc *OutOfBandNode )Decode (r *_c .Reader )(int64 ,error ){return 0,_b .ErrOOB };func _cfe (_gc ,_cbd int32 )int32 {if _gc > _cbd {return _gc ;};return _cbd ;};func (_ccf *EncodedTable )parseTable ()error {var (_fb []*Code ;_ad ,_ec ,_ccd int32 ;
_ef uint64 ;_bd error ;);_ae :=_ccf .StreamReader ();_dd :=_ccf .HtLow ();for _dd < _ccf .HtHigh (){_ef ,_bd =_ae .ReadBits (byte (_ccf .HtPS ()));if _bd !=nil {return _bd ;};_ad =int32 (_ef );_ef ,_bd =_ae .ReadBits (byte (_ccf .HtRS ()));if _bd !=nil {return _bd ;
};_ec =int32 (_ef );_fb =append (_fb ,NewCode (_ad ,_ec ,_ccd ,false ));_dd +=1<<uint (_ec );};_ef ,_bd =_ae .ReadBits (byte (_ccf .HtPS ()));if _bd !=nil {return _bd ;};_ad =int32 (_ef );_ec =32;_ccd =_ccf .HtLow ()-1;_fb =append (_fb ,NewCode (_ad ,_ec ,_ccd ,true ));
_ef ,_bd =_ae .ReadBits (byte (_ccf .HtPS ()));if _bd !=nil {return _bd ;};_ad =int32 (_ef );_ec =32;_ccd =_ccf .HtHigh ();_fb =append (_fb ,NewCode (_ad ,_ec ,_ccd ,false ));if _ccf .HtOOB ()==1{_ef ,_bd =_ae .ReadBits (byte (_ccf .HtPS ()));if _bd !=nil {return _bd ;
};_ad =int32 (_ef );_fb =append (_fb ,NewCode (_ad ,-1,-1,false ));};if _bd =_ccf .InitTree (_fb );_bd !=nil {return _bd ;};return nil ;};func (_g *EncodedTable )RootNode ()*InternalNode {return _g ._a };var _ Node =&ValueNode {};type OutOfBandNode struct{};
func NewFixedSizeTable (codeTable []*Code )(*FixedSizeTable ,error ){_aad :=&FixedSizeTable {_fe :&InternalNode {}};if _ece :=_aad .InitTree (codeTable );_ece !=nil {return nil ,_ece ;};return _aad ,nil ;};type StandardTable struct{_ac *InternalNode };
var _fbb =[][][]int32 {{{1,4,0},{2,8,16},{3,16,272},{3,32,65808}},{{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{6,32,75},{6,-1,0}},{{8,8,-256},{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{8,32,-257,999},{7,32,75},{6,-1,0}},{{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{5,32,76}},{{7,8,-255},{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{7,32,-256,999},{6,32,76}},{{5,10,-2048},{4,9,-1024},{4,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{2,7,0},{3,7,128},{3,8,256},{4,9,512},{4,10,1024},{6,32,-2049,999},{6,32,2048}},{{4,9,-1024},{3,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{4,5,0},{5,5,32},{5,6,64},{4,7,128},{3,8,256},{3,9,512},{3,10,1024},{5,32,-1025,999},{5,32,2048}},{{8,3,-15},{9,1,-7},{8,1,-5},{9,0,-3},{7,0,-2},{4,0,-1},{2,1,0},{5,0,2},{6,0,3},{3,4,4},{6,1,20},{4,4,22},{4,5,38},{5,6,70},{5,7,134},{6,7,262},{7,8,390},{6,10,646},{9,32,-16,999},{9,32,1670},{2,-1,0}},{{8,4,-31},{9,2,-15},{8,2,-11},{9,1,-7},{7,1,-5},{4,1,-3},{3,1,-1},{3,1,1},{5,1,3},{6,1,5},{3,5,7},{6,2,39},{4,5,43},{4,6,75},{5,7,139},{5,8,267},{6,8,523},{7,9,779},{6,11,1291},{9,32,-32,999},{9,32,3339},{2,-1,0}},{{7,4,-21},{8,0,-5},{7,0,-4},{5,0,-3},{2,2,-2},{5,0,2},{6,0,3},{7,0,4},{8,0,5},{2,6,6},{5,5,70},{6,5,102},{6,6,134},{6,7,198},{6,8,326},{6,9,582},{6,10,1094},{7,11,2118},{8,32,-22,999},{8,32,4166},{2,-1,0}},{{1,0,1},{2,1,2},{4,0,4},{4,1,5},{5,1,7},{5,2,9},{6,2,13},{7,2,17},{7,3,21},{7,4,29},{7,5,45},{7,6,77},{7,32,141}},{{1,0,1},{2,0,2},{3,1,3},{5,0,5},{5,1,6},{6,1,8},{7,0,10},{7,1,11},{7,2,13},{7,3,17},{7,4,25},{8,5,41},{8,32,73}},{{1,0,1},{3,0,2},{4,0,3},{5,0,4},{4,1,5},{3,3,7},{6,1,15},{6,2,17},{6,3,21},{6,4,29},{6,5,45},{7,6,77},{7,32,141}},{{3,0,-2},{3,0,-1},{1,0,0},{3,0,1},{3,0,2}},{{7,4,-24},{6,2,-8},{5,1,-4},{4,0,-2},{3,0,-1},{1,0,0},{3,0,1},{4,0,2},{5,1,3},{6,2,5},{7,4,9},{7,32,-25,999},{7,32,25}}};
type FixedSizeTable struct{_fe *InternalNode };func NewEncodedTable (table BasicTabler )(*EncodedTable ,error ){_cf :=&EncodedTable {_a :&InternalNode {},BasicTabler :table };if _eg :=_cf .parseTable ();_eg !=nil {return nil ,_eg ;};return _cf ,nil ;};
var _ Node =&InternalNode {};func (_gd *StandardTable )String ()string {return _gd ._ac .String ()+"\u000a"};func (_ab *EncodedTable )InitTree (codeTable []*Code )error {_gdc (codeTable );for _ ,_cdd :=range codeTable {if _fg :=_ab ._a .append (_cdd );
_fg !=nil {return _fg ;};};return nil ;};func _ce (_fgf *Code )*ValueNode {return &ValueNode {_af :_fgf ._daad ,_fbf :_fgf ._bgf ,_ga :_fgf ._abf }};func (_cb *FixedSizeTable )Decode (r *_c .Reader )(int64 ,error ){return _cb ._fe .Decode (r )};type Node interface{Decode (_fba *_c .Reader )(int64 ,error );
String ()string ;};type Tabler interface{Decode (_cce *_c .Reader )(int64 ,error );InitTree (_ada []*Code )error ;String ()string ;RootNode ()*InternalNode ;};func (_bge *InternalNode )pad (_afb *_cc .Builder ){for _gag :=int32 (0);_gag < _bge ._adc ;_gag ++{_afb .WriteString ("\u0020\u0020\u0020");
};};type BasicTabler interface{HtHigh ()int32 ;HtLow ()int32 ;StreamReader ()*_c .Reader ;HtPS ()int32 ;HtRS ()int32 ;HtOOB ()int32 ;};func (_bg *FixedSizeTable )String ()string {return _bg ._fe .String ()+"\u000a"};