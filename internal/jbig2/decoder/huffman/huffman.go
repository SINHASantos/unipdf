//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package huffman ;import (_g "errors";_fa "fmt";_d "github.com/unidoc/unipdf/v3/internal/bitwise";_e "github.com/unidoc/unipdf/v3/internal/jbig2/internal";_de "math";_a "strings";);type InternalNode struct{_eb int32 ;_fca Node ;_cbe Node ;};var _ Node =&InternalNode {};
var _gced =[][][]int32 {{{1,4,0},{2,8,16},{3,16,272},{3,32,65808}},{{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{6,32,75},{6,-1,0}},{{8,8,-256},{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{8,32,-257,999},{7,32,75},{6,-1,0}},{{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{5,32,76}},{{7,8,-255},{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{7,32,-256,999},{6,32,76}},{{5,10,-2048},{4,9,-1024},{4,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{2,7,0},{3,7,128},{3,8,256},{4,9,512},{4,10,1024},{6,32,-2049,999},{6,32,2048}},{{4,9,-1024},{3,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{4,5,0},{5,5,32},{5,6,64},{4,7,128},{3,8,256},{3,9,512},{3,10,1024},{5,32,-1025,999},{5,32,2048}},{{8,3,-15},{9,1,-7},{8,1,-5},{9,0,-3},{7,0,-2},{4,0,-1},{2,1,0},{5,0,2},{6,0,3},{3,4,4},{6,1,20},{4,4,22},{4,5,38},{5,6,70},{5,7,134},{6,7,262},{7,8,390},{6,10,646},{9,32,-16,999},{9,32,1670},{2,-1,0}},{{8,4,-31},{9,2,-15},{8,2,-11},{9,1,-7},{7,1,-5},{4,1,-3},{3,1,-1},{3,1,1},{5,1,3},{6,1,5},{3,5,7},{6,2,39},{4,5,43},{4,6,75},{5,7,139},{5,8,267},{6,8,523},{7,9,779},{6,11,1291},{9,32,-32,999},{9,32,3339},{2,-1,0}},{{7,4,-21},{8,0,-5},{7,0,-4},{5,0,-3},{2,2,-2},{5,0,2},{6,0,3},{7,0,4},{8,0,5},{2,6,6},{5,5,70},{6,5,102},{6,6,134},{6,7,198},{6,8,326},{6,9,582},{6,10,1094},{7,11,2118},{8,32,-22,999},{8,32,4166},{2,-1,0}},{{1,0,1},{2,1,2},{4,0,4},{4,1,5},{5,1,7},{5,2,9},{6,2,13},{7,2,17},{7,3,21},{7,4,29},{7,5,45},{7,6,77},{7,32,141}},{{1,0,1},{2,0,2},{3,1,3},{5,0,5},{5,1,6},{6,1,8},{7,0,10},{7,1,11},{7,2,13},{7,3,17},{7,4,25},{8,5,41},{8,32,73}},{{1,0,1},{3,0,2},{4,0,3},{5,0,4},{4,1,5},{3,3,7},{6,1,15},{6,2,17},{6,3,21},{6,4,29},{6,5,45},{7,6,77},{7,32,141}},{{3,0,-2},{3,0,-1},{1,0,0},{3,0,1},{3,0,2}},{{7,4,-24},{6,2,-8},{5,1,-4},{4,0,-2},{3,0,-1},{1,0,0},{3,0,1},{4,0,2},{5,1,3},{6,2,5},{7,4,9},{7,32,-25,999},{7,32,25}}};
func (_cba *ValueNode )String ()string {return _fa .Sprintf ("\u0025\u0064\u002f%\u0064",_cba ._fd ,_cba ._gca );};var _ Node =&OutOfBandNode {};func (_fb *FixedSizeTable )String ()string {return _fb ._c .String ()+"\u000a"};func NewEncodedTable (table BasicTabler )(*EncodedTable ,error ){_df :=&EncodedTable {_b :&InternalNode {},BasicTabler :table };
if _gc :=_df .parseTable ();_gc !=nil {return nil ,_gc ;};return _df ,nil ;};func (_cae *StandardTable )RootNode ()*InternalNode {return _cae ._fbf };type ValueNode struct{_fd int32 ;_gca int32 ;_ba bool ;};func (_gdc *ValueNode )Decode (r *_d .Reader )(int64 ,error ){_bee ,_baa :=r .ReadBits (byte (_gdc ._fd ));
if _baa !=nil {return 0,_baa ;};if _gdc ._ba {_bee =-_bee ;};return int64 (_gdc ._gca )+int64 (_bee ),nil ;};func (_fbe *InternalNode )Decode (r *_d .Reader )(int64 ,error ){_bef ,_abg :=r .ReadBit ();if _abg !=nil {return 0,_abg ;};if _bef ==0{return _fbe ._fca .Decode (r );
};return _fbe ._cbe .Decode (r );};func (_da *FixedSizeTable )Decode (r *_d .Reader )(int64 ,error ){return _da ._c .Decode (r )};func (_fae *StandardTable )InitTree (codeTable []*Code )error {_abeb (codeTable );for _ ,_cd :=range codeTable {if _gbg :=_fae ._fbf .append (_cd );
_gbg !=nil {return _gbg ;};};return nil ;};func GetStandardTable (number int )(Tabler ,error ){if number <=0||number > len (_ec ){return nil ,_g .New ("\u0049n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");};_fdc :=_ec [number -1];
if _fdc ==nil {var _ff error ;_fdc ,_ff =_cc (_gced [number -1]);if _ff !=nil {return nil ,_ff ;};_ec [number -1]=_fdc ;};return _fdc ,nil ;};func (_gb *OutOfBandNode )Decode (r *_d .Reader )(int64 ,error ){return 0,_e .ErrOOB };func (_dg *FixedSizeTable )InitTree (codeTable []*Code )error {_abeb (codeTable );
for _ ,_cf :=range codeTable {_dac :=_dg ._c .append (_cf );if _dac !=nil {return _dac ;};};return nil ;};func NewFixedSizeTable (codeTable []*Code )(*FixedSizeTable ,error ){_cb :=&FixedSizeTable {_c :&InternalNode {}};if _aa :=_cb .InitTree (codeTable );
_aa !=nil {return nil ,_aa ;};return _cb ,nil ;};func (_ac *InternalNode )append (_gcf *Code )(_fbd error ){if _gcf ._cbdg ==0{return nil ;};_abe :=_gcf ._cbdg -1-_ac ._eb ;if _abe < 0{return _g .New ("\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065\u0020\u0073\u0068\u0069\u0066\u0074\u0069n\u0067 \u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u006c\u006c\u006f\u0077\u0065\u0064");
};_aee :=(_gcf ._egef >>uint (_abe ))&0x1;if _abe ==0{if _gcf ._gaac ==-1{if _aee ==1{if _ac ._cbe !=nil {return _fa .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_gcf );
};_ac ._cbe =_bfe (_gcf );}else {if _ac ._fca !=nil {return _fa .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_gcf );};_ac ._fca =_bfe (_gcf );};}else {if _aee ==1{if _ac ._cbe !=nil {return _fa .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_gcf );
};_ac ._cbe =_ggc (_gcf );}else {if _ac ._fca !=nil {return _fa .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_gcf );
};_ac ._fca =_ggc (_gcf );};};}else {if _aee ==1{if _ac ._cbe ==nil {_ac ._cbe =_gaa (_ac ._eb +1);};if _fbd =_ac ._cbe .(*InternalNode ).append (_gcf );_fbd !=nil {return _fbd ;};}else {if _ac ._fca ==nil {_ac ._fca =_gaa (_ac ._eb +1);};if _fbd =_ac ._fca .(*InternalNode ).append (_gcf );
_fbd !=nil {return _fbd ;};};};return nil ;};func _afb (_eccb ,_caa int32 )int32 {if _eccb > _caa {return _eccb ;};return _caa ;};type Node interface{Decode (_ae *_d .Reader )(int64 ,error );String ()string ;};func (_ebf *InternalNode )String ()string {_fdg :=&_a .Builder {};
_fdg .WriteString ("\u000a");_ebf .pad (_fdg );_fdg .WriteString ("\u0030\u003a\u0020");_fdg .WriteString (_ebf ._fca .String ()+"\u000a");_ebf .pad (_fdg );_fdg .WriteString ("\u0031\u003a\u0020");_fdg .WriteString (_ebf ._cbe .String ()+"\u000a");return _fdg .String ();
};func (_cfa *Code )String ()string {var _egb string ;if _cfa ._egef !=-1{_egb =_gcb (_cfa ._egef ,_cfa ._cbdg );}else {_egb ="\u003f";};return _fa .Sprintf ("%\u0073\u002f\u0025\u0064\u002f\u0025\u0064\u002f\u0025\u0064",_egb ,_cfa ._cbdg ,_cfa ._gaac ,_cfa ._agc );
};func NewCode (prefixLength ,rangeLength ,rangeLow int32 ,isLowerRange bool )*Code {return &Code {_cbdg :prefixLength ,_gaac :rangeLength ,_agc :rangeLow ,_cea :isLowerRange ,_egef :-1};};var _ Tabler =&EncodedTable {};type OutOfBandNode struct{};type Tabler interface{Decode (_dde *_d .Reader )(int64 ,error );
InitTree (_aec []*Code )error ;String ()string ;RootNode ()*InternalNode ;};func (_gce *OutOfBandNode )String ()string {return _fa .Sprintf ("\u0025\u0030\u00364\u0062",int64 (_de .MaxInt64 ));};func _abeb (_bg []*Code ){var _dag int32 ;for _ ,_dgd :=range _bg {_dag =_afb (_dag ,_dgd ._cbdg );
};_ccf :=make ([]int32 ,_dag +1);for _ ,_ecc :=range _bg {_ccf [_ecc ._cbdg ]++;};var _cdf int32 ;_dgdf :=make ([]int32 ,len (_ccf )+1);_ccf [0]=0;for _gcg :=int32 (1);_gcg <=int32 (len (_ccf ));_gcg ++{_dgdf [_gcg ]=(_dgdf [_gcg -1]+(_ccf [_gcg -1]))<<1;
_cdf =_dgdf [_gcg ];for _ ,_dgg :=range _bg {if _dgg ._cbdg ==_gcg {_dgg ._egef =_cdf ;_cdf ++;};};};};var _ Node =&ValueNode {};func (_af *StandardTable )Decode (r *_d .Reader )(int64 ,error ){return _af ._fbf .Decode (r )};type EncodedTable struct{BasicTabler ;
_b *InternalNode ;};func (_eg *EncodedTable )RootNode ()*InternalNode {return _eg ._b };func (_fcg *EncodedTable )String ()string {return _fcg ._b .String ()+"\u000a"};type BasicTabler interface{HtHigh ()int32 ;HtLow ()int32 ;StreamReader ()*_d .Reader ;
HtPS ()int32 ;HtRS ()int32 ;HtOOB ()int32 ;};func (_ag *EncodedTable )Decode (r *_d .Reader )(int64 ,error ){return _ag ._b .Decode (r )};func _bfe (_ca *Code )*OutOfBandNode {return &OutOfBandNode {}};type Code struct{_cbdg int32 ;_gaac int32 ;_agc int32 ;
_cea bool ;_egef int32 ;};func (_bcd *InternalNode )pad (_cg *_a .Builder ){for _bac :=int32 (0);_bac < _bcd ._eb ;_bac ++{_cg .WriteString ("\u0020\u0020\u0020");};};func _cc (_bb [][]int32 )(*StandardTable ,error ){var _cbef []*Code ;for _cdb :=0;_cdb < len (_bb );
_cdb ++{_aeg :=_bb [_cdb ][0];_gga :=_bb [_cdb ][1];_dcb :=_bb [_cdb ][2];var _cbd bool ;if len (_bb [_cdb ])> 3{_cbd =true ;};_cbef =append (_cbef ,NewCode (_aeg ,_gga ,_dcb ,_cbd ));};_aba :=&StandardTable {_fbf :_gaa (0)};if _gdb :=_aba .InitTree (_cbef );
_gdb !=nil {return nil ,_gdb ;};return _aba ,nil ;};var _ec =make ([]Tabler ,len (_gced ));func _ggc (_dge *Code )*ValueNode {return &ValueNode {_fd :_dge ._gaac ,_gca :_dge ._agc ,_ba :_dge ._cea }};type FixedSizeTable struct{_c *InternalNode };func _gcb (_dee ,_cfg int32 )string {var _fgd int32 ;
_ceae :=make ([]rune ,_cfg );for _gac :=int32 (1);_gac <=_cfg ;_gac ++{_fgd =_dee >>uint (_cfg -_gac )&1;if _fgd !=0{_ceae [_gac -1]='1';}else {_ceae [_gac -1]='0';};};return string (_ceae );};func (_bc *EncodedTable )parseTable ()error {var (_gg []*Code ;
_dd ,_ef ,_ege int32 ;_dc uint64 ;_gfe error ;);_ge :=_bc .StreamReader ();_gd :=_bc .HtLow ();for _gd < _bc .HtHigh (){_dc ,_gfe =_ge .ReadBits (byte (_bc .HtPS ()));if _gfe !=nil {return _gfe ;};_dd =int32 (_dc );_dc ,_gfe =_ge .ReadBits (byte (_bc .HtRS ()));
if _gfe !=nil {return _gfe ;};_ef =int32 (_dc );_gg =append (_gg ,NewCode (_dd ,_ef ,_ege ,false ));_gd +=1<<uint (_ef );};_dc ,_gfe =_ge .ReadBits (byte (_bc .HtPS ()));if _gfe !=nil {return _gfe ;};_dd =int32 (_dc );_ef =32;_ege =_bc .HtLow ()-1;_gg =append (_gg ,NewCode (_dd ,_ef ,_ege ,true ));
_dc ,_gfe =_ge .ReadBits (byte (_bc .HtPS ()));if _gfe !=nil {return _gfe ;};_dd =int32 (_dc );_ef =32;_ege =_bc .HtHigh ();_gg =append (_gg ,NewCode (_dd ,_ef ,_ege ,false ));if _bc .HtOOB ()==1{_dc ,_gfe =_ge .ReadBits (byte (_bc .HtPS ()));if _gfe !=nil {return _gfe ;
};_dd =int32 (_dc );_gg =append (_gg ,NewCode (_dd ,-1,-1,false ));};if _gfe =_bc .InitTree (_gg );_gfe !=nil {return _gfe ;};return nil ;};func (_aaf *FixedSizeTable )RootNode ()*InternalNode {return _aaf ._c };func _gaa (_dce int32 )*InternalNode {return &InternalNode {_eb :_dce }};
type StandardTable struct{_fbf *InternalNode };func (_fg *StandardTable )String ()string {return _fg ._fbf .String ()+"\u000a"};func (_db *EncodedTable )InitTree (codeTable []*Code )error {_abeb (codeTable );for _ ,_be :=range codeTable {if _gf :=_db ._b .append (_be );
_gf !=nil {return _gf ;};};return nil ;};