//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package huffman ;import (_df "errors";_d "fmt";_c "github.com/unidoc/unipdf/v3/internal/bitwise";_g "github.com/unidoc/unipdf/v3/internal/jbig2/internal";_a "math";_ec "strings";);func (_cg *InternalNode )pad (_ggc *_ec .Builder ){for _baa :=int32 (0);
_baa < _cg ._fa ;_baa ++{_ggc .WriteString ("\u0020\u0020\u0020");};};func (_fge *FixedSizeTable )InitTree (codeTable []*Code )error {_fef (codeTable );for _ ,_de :=range codeTable {_dd :=_fge ._bd .append (_de );if _dd !=nil {return _dd ;};};return nil ;
};func (_fg *FixedSizeTable )Decode (r *_c .Reader )(int64 ,error ){return _fg ._bd .Decode (r )};type EncodedTable struct{BasicTabler ;_cc *InternalNode ;};func (_ee *InternalNode )String ()string {_gbf :=&_ec .Builder {};_gbf .WriteString ("\u000a");
_ee .pad (_gbf );_gbf .WriteString ("\u0030\u003a\u0020");_gbf .WriteString (_ee ._dcd .String ()+"\u000a");_ee .pad (_gbf );_gbf .WriteString ("\u0031\u003a\u0020");_gbf .WriteString (_ee ._bgd .String ()+"\u000a");return _gbf .String ();};type ValueNode struct{_cd int32 ;
_dfac int32 ;_gdb bool ;};func (_dfa *EncodedTable )InitTree (codeTable []*Code )error {_fef (codeTable );for _ ,_cb :=range codeTable {if _gd :=_dfa ._cc .append (_cb );_gd !=nil {return _gd ;};};return nil ;};type OutOfBandNode struct{};func _gbg (_cgc int32 )*InternalNode {return &InternalNode {_fa :_cgc }};
var _ Node =&InternalNode {};func (_fgcg *StandardTable )RootNode ()*InternalNode {return _fgcg ._ga };func (_deb *StandardTable )InitTree (codeTable []*Code )error {_fef (codeTable );for _ ,_fgc :=range codeTable {if _bf :=_deb ._ga .append (_fgc );_bf !=nil {return _bf ;
};};return nil ;};type Tabler interface{Decode (_cgg *_c .Reader )(int64 ,error );InitTree (_bgg []*Code )error ;String ()string ;RootNode ()*InternalNode ;};type BasicTabler interface{HtHigh ()int32 ;HtLow ()int32 ;StreamReader ()*_c .Reader ;HtPS ()int32 ;
HtRS ()int32 ;HtOOB ()int32 ;};func (_fcg *InternalNode )append (_dbab *Code )(_ggf error ){if _dbab ._ega ==0{return nil ;};_agf :=_dbab ._ega -1-_fcg ._fa ;if _agf < 0{return _df .New ("\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065\u0020\u0073\u0068\u0069\u0066\u0074\u0069n\u0067 \u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u006c\u006c\u006f\u0077\u0065\u0064");
};_eac :=(_dbab ._ebd >>uint (_agf ))&0x1;if _agf ==0{if _dbab ._bag ==-1{if _eac ==1{if _fcg ._bgd !=nil {return _d .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_dbab );
};_fcg ._bgd =_fe (_dbab );}else {if _fcg ._dcd !=nil {return _d .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_dbab );};_fcg ._dcd =_fe (_dbab );};}else {if _eac ==1{if _fcg ._bgd !=nil {return _d .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_dbab );
};_fcg ._bgd =_cdc (_dbab );}else {if _fcg ._dcd !=nil {return _d .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_dbab );
};_fcg ._dcd =_cdc (_dbab );};};}else {if _eac ==1{if _fcg ._bgd ==nil {_fcg ._bgd =_gbg (_fcg ._fa +1);};if _ggf =_fcg ._bgd .(*InternalNode ).append (_dbab );_ggf !=nil {return _ggf ;};}else {if _fcg ._dcd ==nil {_fcg ._dcd =_gbg (_fcg ._fa +1);};if _ggf =_fcg ._dcd .(*InternalNode ).append (_dbab );
_ggf !=nil {return _ggf ;};};};return nil ;};var _ Node =&ValueNode {};type Code struct{_ega int32 ;_bag int32 ;_fgd int32 ;_gfc bool ;_ebd int32 ;};func GetStandardTable (number int )(Tabler ,error ){if number <=0||number > len (_dddd ){return nil ,_df .New ("\u0049n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_cgd :=_dddd [number -1];if _cgd ==nil {var _gc error ;_cgd ,_gc =_aag (_dgc [number -1]);if _gc !=nil {return nil ,_gc ;};_dddd [number -1]=_cgd ;};return _cgd ,nil ;};func (_bg *OutOfBandNode )String ()string {return _d .Sprintf ("\u0025\u0030\u00364\u0062",int64 (_a .MaxInt64 ));
};var _dddd =make ([]Tabler ,len (_dgc ));func (_gg *OutOfBandNode )Decode (r *_c .Reader )(int64 ,error ){return 0,_g .ErrOOB };func (_fbd *ValueNode )Decode (r *_c .Reader )(int64 ,error ){_ggg ,_be :=r .ReadBits (byte (_fbd ._cd ));if _be !=nil {return 0,_be ;
};if _fbd ._gdb {_ggg =-_ggg ;};return int64 (_fbd ._dfac )+int64 (_ggg ),nil ;};type StandardTable struct{_ga *InternalNode };type FixedSizeTable struct{_bd *InternalNode };func NewFixedSizeTable (codeTable []*Code )(*FixedSizeTable ,error ){_ccd :=&FixedSizeTable {_bd :&InternalNode {}};
if _ef :=_ccd .InitTree (codeTable );_ef !=nil {return nil ,_ef ;};return _ccd ,nil ;};var _ Tabler =&EncodedTable {};type InternalNode struct{_fa int32 ;_dcd Node ;_bgd Node ;};type Node interface{Decode (_ecg *_c .Reader )(int64 ,error );String ()string ;
};func _fef (_eaa []*Code ){var _bge int32 ;for _ ,_dcb :=range _eaa {_bge =_ddddg (_bge ,_dcb ._ega );};_gbd :=make ([]int32 ,_bge +1);for _ ,_fcd :=range _eaa {_gbd [_fcd ._ega ]++;};var _cbf int32 ;_ccg :=make ([]int32 ,len (_gbd )+1);_gbd [0]=0;for _bfa :=int32 (1);
_bfa <=int32 (len (_gbd ));_bfa ++{_ccg [_bfa ]=(_ccg [_bfa -1]+(_gbd [_bfa -1]))<<1;_cbf =_ccg [_bfa ];for _ ,_cdb :=range _eaa {if _cdb ._ega ==_bfa {_cdb ._ebd =_cbf ;_cbf ++;};};};};func (_ddd *InternalNode )Decode (r *_c .Reader )(int64 ,error ){_fc ,_gbe :=r .ReadBit ();
if _gbe !=nil {return 0,_gbe ;};if _fc ==0{return _ddd ._dcd .Decode (r );};return _ddd ._bgd .Decode (r );};func (_dba *FixedSizeTable )RootNode ()*InternalNode {return _dba ._bd };func _fe (_bc *Code )*OutOfBandNode {return &OutOfBandNode {}};var _dgc =[][][]int32 {{{1,4,0},{2,8,16},{3,16,272},{3,32,65808}},{{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{6,32,75},{6,-1,0}},{{8,8,-256},{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{8,32,-257,999},{7,32,75},{6,-1,0}},{{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{5,32,76}},{{7,8,-255},{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{7,32,-256,999},{6,32,76}},{{5,10,-2048},{4,9,-1024},{4,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{2,7,0},{3,7,128},{3,8,256},{4,9,512},{4,10,1024},{6,32,-2049,999},{6,32,2048}},{{4,9,-1024},{3,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{4,5,0},{5,5,32},{5,6,64},{4,7,128},{3,8,256},{3,9,512},{3,10,1024},{5,32,-1025,999},{5,32,2048}},{{8,3,-15},{9,1,-7},{8,1,-5},{9,0,-3},{7,0,-2},{4,0,-1},{2,1,0},{5,0,2},{6,0,3},{3,4,4},{6,1,20},{4,4,22},{4,5,38},{5,6,70},{5,7,134},{6,7,262},{7,8,390},{6,10,646},{9,32,-16,999},{9,32,1670},{2,-1,0}},{{8,4,-31},{9,2,-15},{8,2,-11},{9,1,-7},{7,1,-5},{4,1,-3},{3,1,-1},{3,1,1},{5,1,3},{6,1,5},{3,5,7},{6,2,39},{4,5,43},{4,6,75},{5,7,139},{5,8,267},{6,8,523},{7,9,779},{6,11,1291},{9,32,-32,999},{9,32,3339},{2,-1,0}},{{7,4,-21},{8,0,-5},{7,0,-4},{5,0,-3},{2,2,-2},{5,0,2},{6,0,3},{7,0,4},{8,0,5},{2,6,6},{5,5,70},{6,5,102},{6,6,134},{6,7,198},{6,8,326},{6,9,582},{6,10,1094},{7,11,2118},{8,32,-22,999},{8,32,4166},{2,-1,0}},{{1,0,1},{2,1,2},{4,0,4},{4,1,5},{5,1,7},{5,2,9},{6,2,13},{7,2,17},{7,3,21},{7,4,29},{7,5,45},{7,6,77},{7,32,141}},{{1,0,1},{2,0,2},{3,1,3},{5,0,5},{5,1,6},{6,1,8},{7,0,10},{7,1,11},{7,2,13},{7,3,17},{7,4,25},{8,5,41},{8,32,73}},{{1,0,1},{3,0,2},{4,0,3},{5,0,4},{4,1,5},{3,3,7},{6,1,15},{6,2,17},{6,3,21},{6,4,29},{6,5,45},{7,6,77},{7,32,141}},{{3,0,-2},{3,0,-1},{1,0,0},{3,0,1},{3,0,2}},{{7,4,-24},{6,2,-8},{5,1,-4},{4,0,-2},{3,0,-1},{1,0,0},{3,0,1},{4,0,2},{5,1,3},{6,2,5},{7,4,9},{7,32,-25,999},{7,32,25}}};
func (_ed *StandardTable )String ()string {return _ed ._ga .String ()+"\u000a"};func _bec (_dgea ,_cba int32 )string {var _faa int32 ;_ada :=make ([]rune ,_cba );for _ae :=int32 (1);_ae <=_cba ;_ae ++{_faa =_dgea >>uint (_cba -_ae )&1;if _faa !=0{_ada [_ae -1]='1';
}else {_ada [_ae -1]='0';};};return string (_ada );};var _ Node =&OutOfBandNode {};func (_ba *EncodedTable )parseTable ()error {var (_bab []*Code ;_ebf ,_cf ,_ad int32 ;_ab uint64 ;_abb error ;);_dc :=_ba .StreamReader ();_fd :=_ba .HtLow ();for _fd < _ba .HtHigh (){_ab ,_abb =_dc .ReadBits (byte (_ba .HtPS ()));
if _abb !=nil {return _abb ;};_ebf =int32 (_ab );_ab ,_abb =_dc .ReadBits (byte (_ba .HtRS ()));if _abb !=nil {return _abb ;};_cf =int32 (_ab );_bab =append (_bab ,NewCode (_ebf ,_cf ,_ad ,false ));_fd +=1<<uint (_cf );};_ab ,_abb =_dc .ReadBits (byte (_ba .HtPS ()));
if _abb !=nil {return _abb ;};_ebf =int32 (_ab );_cf =32;_ad =_ba .HtLow ()-1;_bab =append (_bab ,NewCode (_ebf ,_cf ,_ad ,true ));_ab ,_abb =_dc .ReadBits (byte (_ba .HtPS ()));if _abb !=nil {return _abb ;};_ebf =int32 (_ab );_cf =32;_ad =_ba .HtHigh ();
_bab =append (_bab ,NewCode (_ebf ,_cf ,_ad ,false ));if _ba .HtOOB ()==1{_ab ,_abb =_dc .ReadBits (byte (_ba .HtPS ()));if _abb !=nil {return _abb ;};_ebf =int32 (_ab );_bab =append (_bab ,NewCode (_ebf ,-1,-1,false ));};if _abb =_ba .InitTree (_bab );
_abb !=nil {return _abb ;};return nil ;};func _cdc (_ddc *Code )*ValueNode {return &ValueNode {_cd :_ddc ._bag ,_dfac :_ddc ._fgd ,_gdb :_ddc ._gfc };};func (_gb *EncodedTable )RootNode ()*InternalNode {return _gb ._cc };func NewCode (prefixLength ,rangeLength ,rangeLow int32 ,isLowerRange bool )*Code {return &Code {_ega :prefixLength ,_bag :rangeLength ,_fgd :rangeLow ,_gfc :isLowerRange ,_ebd :-1};
};func (_egf *Code )String ()string {var _cfe string ;if _egf ._ebd !=-1{_cfe =_bec (_egf ._ebd ,_egf ._ega );}else {_cfe ="\u003f";};return _d .Sprintf ("%\u0073\u002f\u0025\u0064\u002f\u0025\u0064\u002f\u0025\u0064",_cfe ,_egf ._ega ,_egf ._bag ,_egf ._fgd );
};func (_aa *EncodedTable )Decode (r *_c .Reader )(int64 ,error ){return _aa ._cc .Decode (r )};func _aag (_gf [][]int32 )(*StandardTable ,error ){var _eg []*Code ;for _ca :=0;_ca < len (_gf );_ca ++{_dg :=_gf [_ca ][0];_cfg :=_gf [_ca ][1];_dga :=_gf [_ca ][2];
var _ff bool ;if len (_gf [_ca ])> 3{_ff =true ;};_eg =append (_eg ,NewCode (_dg ,_cfg ,_dga ,_ff ));};_dge :=&StandardTable {_ga :_gbg (0)};if _dda :=_dge .InitTree (_eg );_dda !=nil {return nil ,_dda ;};return _dge ,nil ;};func NewEncodedTable (table BasicTabler )(*EncodedTable ,error ){_eb :=&EncodedTable {_cc :&InternalNode {},BasicTabler :table };
if _bb :=_eb .parseTable ();_bb !=nil {return nil ,_bb ;};return _eb ,nil ;};func _ddddg (_fed ,_fdf int32 )int32 {if _fed > _fdf {return _fed ;};return _fdf ;};func (_f *EncodedTable )String ()string {return _f ._cc .String ()+"\u000a"};func (_fgb *FixedSizeTable )String ()string {return _fgb ._bd .String ()+"\u000a"};
func (_ag *ValueNode )String ()string {return _d .Sprintf ("\u0025\u0064\u002f%\u0064",_ag ._cd ,_ag ._dfac );};func (_bgb *StandardTable )Decode (r *_c .Reader )(int64 ,error ){return _bgb ._ga .Decode (r )};