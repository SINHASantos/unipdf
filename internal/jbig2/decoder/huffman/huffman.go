//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package huffman ;import (_f "errors";_dc "fmt";_e "github.com/unidoc/unipdf/v3/internal/bitwise";_d "github.com/unidoc/unipdf/v3/internal/jbig2/internal";_bc "math";_b "strings";);func (_be *InternalNode )pad (_fgg *_b .Builder ){for _ccbf :=int32 (0);
_ccbf < _be ._feee ;_ccbf ++{_fgg .WriteString ("\u0020\u0020\u0020");};};func (_dff *FixedSizeTable )InitTree (codeTable []*Code )error {_dcd (codeTable );for _ ,_ef :=range codeTable {_fd :=_dff ._cb .append (_ef );if _fd !=nil {return _fd ;};};return nil ;
};func NewCode (prefixLength ,rangeLength ,rangeLow int32 ,isLowerRange bool )*Code {return &Code {_eab :prefixLength ,_fggb :rangeLength ,_gcb :rangeLow ,_bcad :isLowerRange ,_cdaf :-1};};func (_gcc *InternalNode )Decode (r *_e .Reader )(int64 ,error ){_ccf ,_ce :=r .ReadBit ();
if _ce !=nil {return 0,_ce ;};if _ccf ==0{return _gcc ._cde .Decode (r );};return _gcc ._bdf .Decode (r );};type FixedSizeTable struct{_cb *InternalNode };func _fff (_fad *Code )*OutOfBandNode {return &OutOfBandNode {}};type InternalNode struct{_feee int32 ;
_cde Node ;_bdf Node ;};type EncodedTable struct{BasicTabler ;_fe *InternalNode ;};func (_gaa *StandardTable )InitTree (codeTable []*Code )error {_dcd (codeTable );for _ ,_eac :=range codeTable {if _age :=_gaa ._efe .append (_eac );_age !=nil {return _age ;
};};return nil ;};type ValueNode struct{_ee int32 ;_ccd int32 ;_bca bool ;};func (_gc *FixedSizeTable )RootNode ()*InternalNode {return _gc ._cb };func (_bf *EncodedTable )Decode (r *_e .Reader )(int64 ,error ){return _bf ._fe .Decode (r )};type OutOfBandNode struct{};
func NewEncodedTable (table BasicTabler )(*EncodedTable ,error ){_ge :=&EncodedTable {_fe :&InternalNode {},BasicTabler :table };if _a :=_ge .parseTable ();_a !=nil {return nil ,_a ;};return _ge ,nil ;};func _feg (_eee *Code )*ValueNode {return &ValueNode {_ee :_eee ._fggb ,_ccd :_eee ._gcb ,_bca :_eee ._bcad };
};type Tabler interface{Decode (_eeg *_e .Reader )(int64 ,error );InitTree (_ba []*Code )error ;String ()string ;RootNode ()*InternalNode ;};var _ Node =&ValueNode {};func (_cdac *StandardTable )String ()string {return _cdac ._efe .String ()+"\u000a"};
type Code struct{_eab int32 ;_fggb int32 ;_gcb int32 ;_bcad bool ;_cdaf int32 ;};func GetStandardTable (number int )(Tabler ,error ){if number <=0||number > len (_gde ){return nil ,_f .New ("\u0049n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_bec :=_gde [number -1];if _bec ==nil {var _fdg error ;_bec ,_fdg =_efg (_gf [number -1]);if _fdg !=nil {return nil ,_fdg ;};_gde [number -1]=_bec ;};return _bec ,nil ;};func (_fgc *InternalNode )String ()string {_cee :=&_b .Builder {};_cee .WriteString ("\u000a");
_fgc .pad (_cee );_cee .WriteString ("\u0030\u003a\u0020");_cee .WriteString (_fgc ._cde .String ()+"\u000a");_fgc .pad (_cee );_cee .WriteString ("\u0031\u003a\u0020");_cee .WriteString (_fgc ._bdf .String ()+"\u000a");return _cee .String ();};func (_dbf *StandardTable )RootNode ()*InternalNode {return _dbf ._efe };
func (_bfc *EncodedTable )String ()string {return _bfc ._fe .String ()+"\u000a"};type StandardTable struct{_efe *InternalNode };func (_ga *OutOfBandNode )Decode (r *_e .Reader )(int64 ,error ){return 0,_d .ErrOOB };func (_gd *StandardTable )Decode (r *_e .Reader )(int64 ,error ){return _gd ._efe .Decode (r )};
func _dcd (_ec []*Code ){var _eegb int32 ;for _ ,_ad :=range _ec {_eegb =_cdab (_eegb ,_ad ._eab );};_dbg :=make ([]int32 ,_eegb +1);for _ ,_gabf :=range _ec {_dbg [_gabf ._eab ]++;};var _fce int32 ;_agd :=make ([]int32 ,len (_dbg )+1);_dbg [0]=0;for _ab :=int32 (1);
_ab <=int32 (len (_dbg ));_ab ++{_agd [_ab ]=(_agd [_ab -1]+(_dbg [_ab -1]))<<1;_fce =_agd [_ab ];for _ ,_dbd :=range _ec {if _dbd ._eab ==_ab {_dbd ._cdaf =_fce ;_fce ++;};};};};type Node interface{Decode (_ff *_e .Reader )(int64 ,error );String ()string ;
};func (_c *EncodedTable )RootNode ()*InternalNode {return _c ._fe };func (_gbb *FixedSizeTable )String ()string {return _gbb ._cb .String ()+"\u000a"};func _af (_gab ,_fed int32 )string {var _ddc int32 ;_edb :=make ([]rune ,_fed );for _fbc :=int32 (1);
_fbc <=_fed ;_fbc ++{_ddc =_gab >>uint (_fed -_fbc )&1;if _ddc !=0{_edb [_fbc -1]='1';}else {_edb [_fbc -1]='0';};};return string (_edb );};func _cbf (_bfd int32 )*InternalNode {return &InternalNode {_feee :_bfd }};type BasicTabler interface{HtHigh ()int32 ;
HtLow ()int32 ;StreamReader ()*_e .Reader ;HtPS ()int32 ;HtRS ()int32 ;HtOOB ()int32 ;};var _gde =make ([]Tabler ,len (_gf ));func (_fee *OutOfBandNode )String ()string {return _dc .Sprintf ("\u0025\u0030\u00364\u0062",int64 (_bc .MaxInt64 ));};func (_eb *InternalNode )append (_cbe *Code )(_deb error ){if _cbe ._eab ==0{return nil ;
};_gbd :=_cbe ._eab -1-_eb ._feee ;if _gbd < 0{return _f .New ("\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065\u0020\u0073\u0068\u0069\u0066\u0074\u0069n\u0067 \u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u006c\u006c\u006f\u0077\u0065\u0064");};_cdb :=(_cbe ._cdaf >>uint (_gbd ))&0x1;
if _gbd ==0{if _cbe ._fggb ==-1{if _cdb ==1{if _eb ._bdf !=nil {return _dc .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_cbe );};_eb ._bdf =_fff (_cbe );
}else {if _eb ._cde !=nil {return _dc .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_cbe );};_eb ._cde =_fff (_cbe );};}else {if _cdb ==1{if _eb ._bdf !=nil {return _dc .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_cbe );
};_eb ._bdf =_feg (_cbe );}else {if _eb ._cde !=nil {return _dc .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_cbe );
};_eb ._cde =_feg (_cbe );};};}else {if _cdb ==1{if _eb ._bdf ==nil {_eb ._bdf =_cbf (_eb ._feee +1);};if _deb =_eb ._bdf .(*InternalNode ).append (_cbe );_deb !=nil {return _deb ;};}else {if _eb ._cde ==nil {_eb ._cde =_cbf (_eb ._feee +1);};if _deb =_eb ._cde .(*InternalNode ).append (_cbe );
_deb !=nil {return _deb ;};};};return nil ;};func (_aa *ValueNode )String ()string {return _dc .Sprintf ("\u0025\u0064\u002f%\u0064",_aa ._ee ,_aa ._ccd );};func (_eg *EncodedTable )InitTree (codeTable []*Code )error {_dcd (codeTable );for _ ,_da :=range codeTable {if _fa :=_eg ._fe .append (_da );
_fa !=nil {return _fa ;};};return nil ;};var _ Node =&OutOfBandNode {};func (_gac *ValueNode )Decode (r *_e .Reader )(int64 ,error ){_bff ,_ac :=r .ReadBits (byte (_gac ._ee ));if _ac !=nil {return 0,_ac ;};if _gac ._bca {_bff =-_bff ;};return int64 (_gac ._ccd )+int64 (_bff ),nil ;
};var _ Node =&InternalNode {};func _cdab (_aae ,_dda int32 )int32 {if _aae > _dda {return _aae ;};return _dda ;};var _gf =[][][]int32 {{{1,4,0},{2,8,16},{3,16,272},{3,32,65808}},{{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{6,32,75},{6,-1,0}},{{8,8,-256},{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{8,32,-257,999},{7,32,75},{6,-1,0}},{{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{5,32,76}},{{7,8,-255},{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{7,32,-256,999},{6,32,76}},{{5,10,-2048},{4,9,-1024},{4,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{2,7,0},{3,7,128},{3,8,256},{4,9,512},{4,10,1024},{6,32,-2049,999},{6,32,2048}},{{4,9,-1024},{3,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{4,5,0},{5,5,32},{5,6,64},{4,7,128},{3,8,256},{3,9,512},{3,10,1024},{5,32,-1025,999},{5,32,2048}},{{8,3,-15},{9,1,-7},{8,1,-5},{9,0,-3},{7,0,-2},{4,0,-1},{2,1,0},{5,0,2},{6,0,3},{3,4,4},{6,1,20},{4,4,22},{4,5,38},{5,6,70},{5,7,134},{6,7,262},{7,8,390},{6,10,646},{9,32,-16,999},{9,32,1670},{2,-1,0}},{{8,4,-31},{9,2,-15},{8,2,-11},{9,1,-7},{7,1,-5},{4,1,-3},{3,1,-1},{3,1,1},{5,1,3},{6,1,5},{3,5,7},{6,2,39},{4,5,43},{4,6,75},{5,7,139},{5,8,267},{6,8,523},{7,9,779},{6,11,1291},{9,32,-32,999},{9,32,3339},{2,-1,0}},{{7,4,-21},{8,0,-5},{7,0,-4},{5,0,-3},{2,2,-2},{5,0,2},{6,0,3},{7,0,4},{8,0,5},{2,6,6},{5,5,70},{6,5,102},{6,6,134},{6,7,198},{6,8,326},{6,9,582},{6,10,1094},{7,11,2118},{8,32,-22,999},{8,32,4166},{2,-1,0}},{{1,0,1},{2,1,2},{4,0,4},{4,1,5},{5,1,7},{5,2,9},{6,2,13},{7,2,17},{7,3,21},{7,4,29},{7,5,45},{7,6,77},{7,32,141}},{{1,0,1},{2,0,2},{3,1,3},{5,0,5},{5,1,6},{6,1,8},{7,0,10},{7,1,11},{7,2,13},{7,3,17},{7,4,25},{8,5,41},{8,32,73}},{{1,0,1},{3,0,2},{4,0,3},{5,0,4},{4,1,5},{3,3,7},{6,1,15},{6,2,17},{6,3,21},{6,4,29},{6,5,45},{7,6,77},{7,32,141}},{{3,0,-2},{3,0,-1},{1,0,0},{3,0,1},{3,0,2}},{{7,4,-24},{6,2,-8},{5,1,-4},{4,0,-2},{3,0,-1},{1,0,0},{3,0,1},{4,0,2},{5,1,3},{6,2,5},{7,4,9},{7,32,-25,999},{7,32,25}}};
func (_db *EncodedTable )parseTable ()error {var (_gb []*Code ;_cc ,_cce ,_fb int32 ;_bd uint64 ;_ccb error ;);_fbf :=_db .StreamReader ();_ed :=_db .HtLow ();for _ed < _db .HtHigh (){_bd ,_ccb =_fbf .ReadBits (byte (_db .HtPS ()));if _ccb !=nil {return _ccb ;
};_cc =int32 (_bd );_bd ,_ccb =_fbf .ReadBits (byte (_db .HtRS ()));if _ccb !=nil {return _ccb ;};_cce =int32 (_bd );_gb =append (_gb ,NewCode (_cc ,_cce ,_fb ,false ));_ed +=1<<uint (_cce );};_bd ,_ccb =_fbf .ReadBits (byte (_db .HtPS ()));if _ccb !=nil {return _ccb ;
};_cc =int32 (_bd );_cce =32;_fb =_db .HtLow ()-1;_gb =append (_gb ,NewCode (_cc ,_cce ,_fb ,true ));_bd ,_ccb =_fbf .ReadBits (byte (_db .HtPS ()));if _ccb !=nil {return _ccb ;};_cc =int32 (_bd );_cce =32;_fb =_db .HtHigh ();_gb =append (_gb ,NewCode (_cc ,_cce ,_fb ,false ));
if _db .HtOOB ()==1{_bd ,_ccb =_fbf .ReadBits (byte (_db .HtPS ()));if _ccb !=nil {return _ccb ;};_cc =int32 (_bd );_gb =append (_gb ,NewCode (_cc ,-1,-1,false ));};if _ccb =_db .InitTree (_gb );_ccb !=nil {return _ccb ;};return nil ;};func _efg (_dcb [][]int32 )(*StandardTable ,error ){var _bcb []*Code ;
for _ceb :=0;_ceb < len (_dcb );_ceb ++{_gda :=_dcb [_ceb ][0];_fc :=_dcb [_ceb ][1];_agb :=_dcb [_ceb ][2];var _cdbb bool ;if len (_dcb [_ceb ])> 3{_cdbb =true ;};_bcb =append (_bcb ,NewCode (_gda ,_fc ,_agb ,_cdbb ));};_caa :=&StandardTable {_efe :_cbf (0)};
if _eaa :=_caa .InitTree (_bcb );_eaa !=nil {return nil ,_eaa ;};return _caa ,nil ;};var _ Tabler =&EncodedTable {};func NewFixedSizeTable (codeTable []*Code )(*FixedSizeTable ,error ){_cd :=&FixedSizeTable {_cb :&InternalNode {}};if _cda :=_cd .InitTree (codeTable );
_cda !=nil {return nil ,_cda ;};return _cd ,nil ;};func (_efa *Code )String ()string {var _cg string ;if _efa ._cdaf !=-1{_cg =_af (_efa ._cdaf ,_efa ._eab );}else {_cg ="\u003f";};return _dc .Sprintf ("%\u0073\u002f\u0025\u0064\u002f\u0025\u0064\u002f\u0025\u0064",_cg ,_efa ._eab ,_efa ._fggb ,_efa ._gcb );
};func (_fae *FixedSizeTable )Decode (r *_e .Reader )(int64 ,error ){return _fae ._cb .Decode (r )};