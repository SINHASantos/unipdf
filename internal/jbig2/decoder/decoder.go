//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package decoder ;import (_gf "github.com/unidoc/unipdf/v3/internal/bitwise";_gg "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";_b "github.com/unidoc/unipdf/v3/internal/jbig2/document";_eg "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_g "image";
);func (_fa *Decoder )PageNumber ()(int ,error ){const _bcb ="\u0044e\u0063o\u0064\u0065\u0072\u002e\u0050a\u0067\u0065N\u0075\u006d\u0062\u0065\u0072";if _fa ._ec ==nil {return 0,_eg .Error (_bcb ,"d\u0065\u0063\u006f\u0064\u0065\u0072 \u006e\u006f\u0074\u0020\u0069\u006e\u0069\u0074\u0069a\u006c\u0069\u007ae\u0064 \u0079\u0065\u0074");
};return int (_fa ._ec .NumberOfPages ),nil ;};func (_d *Decoder )DecodePageImage (pageNumber int )(_g .Image ,error ){const _bb ="\u0064\u0065\u0063od\u0065\u0072\u002e\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";
_bf ,_fc :=_d .decodePageImage (pageNumber );if _fc !=nil {return nil ,_eg .Wrap (_fc ,_bb ,"");};return _bf ,nil ;};type Decoder struct{_f *_gf .Reader ;_ec *_b .Document ;_fb int ;_c Parameters ;};func (_ge *Decoder )decodePage (_a int )([]byte ,error ){const _ga ="\u0064\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065";
if _a < 0{return nil ,_eg .Errorf (_ga ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_a );};if _a > int (_ge ._ec .NumberOfPages ){return nil ,_eg .Errorf (_ga ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_a );
};_db ,_eb :=_ge ._ec .GetPage (_a );if _eb !=nil {return nil ,_eg .Wrap (_eb ,_ga ,"");};_bff ,_eb :=_db .GetBitmap ();if _eb !=nil {return nil ,_eg .Wrap (_eb ,_ga ,"");};_bff .InverseData ();if !_ge ._c .UnpaddedData {return _bff .Data ,nil ;};return _bff .GetUnpaddedData ();
};func Decode (input []byte ,parameters Parameters ,globals *_b .Globals )(*Decoder ,error ){_gga :=_gf .NewReader (input );_bdb ,_bfd :=_b .DecodeDocument (_gga ,globals );if _bfd !=nil {return nil ,_bfd ;};return &Decoder {_f :_gga ,_ec :_bdb ,_c :parameters },nil ;
};func (_bbg *Decoder )decodePageImage (_bd int )(_g .Image ,error ){const _dg ="\u0064e\u0063o\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";if _bd < 0{return nil ,_eg .Errorf (_dg ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_bd );
};if _bd > int (_bbg ._ec .NumberOfPages ){return nil ,_eg .Errorf (_dg ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_bd );
};_af ,_cf :=_bbg ._ec .GetPage (_bd );if _cf !=nil {return nil ,_eg .Wrap (_cf ,_dg ,"");};_cg ,_cf :=_af .GetBitmap ();if _cf !=nil {return nil ,_eg .Wrap (_cf ,_dg ,"");};_cg .InverseData ();return _cg .ToImage (),nil ;};func (_bc *Decoder )DecodePage (pageNumber int )([]byte ,error ){return _bc .decodePage (pageNumber )};
func (_ed *Decoder )DecodeNextPage ()([]byte ,error ){_ed ._fb ++;_fce :=_ed ._fb ;return _ed .decodePage (_fce );};type Parameters struct{UnpaddedData bool ;Color _gg .Color ;};