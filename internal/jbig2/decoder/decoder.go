//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package decoder ;import (_g "github.com/unidoc/unipdf/v4/internal/bitwise";_ga "github.com/unidoc/unipdf/v4/internal/jbig2/bitmap";_ge "github.com/unidoc/unipdf/v4/internal/jbig2/document";_d "github.com/unidoc/unipdf/v4/internal/jbig2/errors";_b "image";
);func (_ag *Decoder )DecodePageImage (pageNumber int )(_b .Image ,error ){const _geg ="\u0064\u0065\u0063od\u0065\u0072\u002e\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";_gg ,_fg :=_ag .decodePageImage (pageNumber );
if _fg !=nil {return nil ,_d .Wrap (_fg ,_geg ,"");};return _gg ,nil ;};func (_be *Decoder )PageNumber ()(int ,error ){const _gb ="\u0044e\u0063o\u0064\u0065\u0072\u002e\u0050a\u0067\u0065N\u0075\u006d\u0062\u0065\u0072";if _be ._bf ==nil {return 0,_d .Error (_gb ,"d\u0065\u0063\u006f\u0064\u0065\u0072 \u006e\u006f\u0074\u0020\u0069\u006e\u0069\u0074\u0069a\u006c\u0069\u007ae\u0064 \u0079\u0065\u0074");
};return int (_be ._bf .NumberOfPages ),nil ;};type Parameters struct{UnpaddedData bool ;Color _ga .Color ;};func (_gd *Decoder )decodePage (_ef int )([]byte ,error ){const _cg ="\u0064\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065";if _ef < 0{return nil ,_d .Errorf (_cg ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_ef );
};if _ef > int (_gd ._bf .NumberOfPages ){return nil ,_d .Errorf (_cg ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_ef );
};_beg ,_dd :=_gd ._bf .GetPage (_ef );if _dd !=nil {return nil ,_d .Wrap (_dd ,_cg ,"");};_cc ,_dd :=_beg .GetBitmap ();if _dd !=nil {return nil ,_d .Wrap (_dd ,_cg ,"");};_cc .InverseData ();if !_gd ._c .UnpaddedData {return _cc .Data ,nil ;};return _cc .GetUnpaddedData ();
};type Decoder struct{_f *_g .Reader ;_bf *_ge .Document ;_e int ;_c Parameters ;};func (_gf *Decoder )DecodeNextPage ()([]byte ,error ){_gf ._e ++;_gag :=_gf ._e ;return _gf .decodePage (_gag );};func Decode (input []byte ,parameters Parameters ,globals *_ge .Globals )(*Decoder ,error ){_fgg :=_g .NewReader (input );
_bdd ,_dc :=_ge .DecodeDocument (_fgg ,globals );if _dc !=nil {return nil ,_dc ;};return &Decoder {_f :_fgg ,_bf :_bdd ,_c :parameters },nil ;};func (_eb *Decoder )DecodePage (pageNumber int )([]byte ,error ){return _eb .decodePage (pageNumber )};func (_ebb *Decoder )decodePageImage (_bd int )(_b .Image ,error ){const _ff ="\u0064e\u0063o\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";
if _bd < 0{return nil ,_d .Errorf (_ff ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_bd );};if _bd > int (_ebb ._bf .NumberOfPages ){return nil ,_d .Errorf (_ff ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_bd );
};_fgd ,_ffb :=_ebb ._bf .GetPage (_bd );if _ffb !=nil {return nil ,_d .Wrap (_ffb ,_ff ,"");};_fb ,_ffb :=_fgd .GetBitmap ();if _ffb !=nil {return nil ,_d .Wrap (_ffb ,_ff ,"");};_fb .InverseData ();return _fb .ToImage (),nil ;};