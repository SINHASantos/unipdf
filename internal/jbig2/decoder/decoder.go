//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package decoder ;import (_e "github.com/unidoc/unipdf/v3/internal/bitwise";_dc "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";_f "github.com/unidoc/unipdf/v3/internal/jbig2/document";_dca "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_d "image";
);func (_fb *Decoder )DecodePage (pageNumber int )([]byte ,error ){return _fb .decodePage (pageNumber )};func (_efg *Decoder )decodePage (_eb int )([]byte ,error ){const _bb ="\u0064\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065";if _eb < 0{return nil ,_dca .Errorf (_bb ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_eb );
};if _eb > int (_efg ._b .NumberOfPages ){return nil ,_dca .Errorf (_bb ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_eb );
};_ae ,_ca :=_efg ._b .GetPage (_eb );if _ca !=nil {return nil ,_dca .Wrap (_ca ,_bb ,"");};_bd ,_ca :=_ae .GetBitmap ();if _ca !=nil {return nil ,_dca .Wrap (_ca ,_bb ,"");};_bd .InverseData ();if !_efg ._fa .UnpaddedData {return _bd .Data ,nil ;};return _bd .GetUnpaddedData ();
};func (_aeb *Decoder )decodePageImage (_ba int )(_d .Image ,error ){const _gab ="\u0064e\u0063o\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";if _ba < 0{return nil ,_dca .Errorf (_gab ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_ba );
};if _ba > int (_aeb ._b .NumberOfPages ){return nil ,_dca .Errorf (_gab ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_ba );
};_dae ,_be :=_aeb ._b .GetPage (_ba );if _be !=nil {return nil ,_dca .Wrap (_be ,_gab ,"");};_daa ,_be :=_dae .GetBitmap ();if _be !=nil {return nil ,_dca .Wrap (_be ,_gab ,"");};_daa .InverseData ();return _daa .ToImage (),nil ;};func (_fgf *Decoder )PageNumber ()(int ,error ){const _ac ="\u0044e\u0063o\u0064\u0065\u0072\u002e\u0050a\u0067\u0065N\u0075\u006d\u0062\u0065\u0072";
if _fgf ._b ==nil {return 0,_dca .Error (_ac ,"d\u0065\u0063\u006f\u0064\u0065\u0072 \u006e\u006f\u0074\u0020\u0069\u006e\u0069\u0074\u0069a\u006c\u0069\u007ae\u0064 \u0079\u0065\u0074");};return int (_fgf ._b .NumberOfPages ),nil ;};type Decoder struct{_fg *_e .Reader ;
_b *_f .Document ;_da int ;_fa Parameters ;};func (_ga *Decoder )DecodeNextPage ()([]byte ,error ){_ga ._da ++;_bf :=_ga ._da ;return _ga .decodePage (_bf );};func Decode (input []byte ,parameters Parameters ,globals *_f .Globals )(*Decoder ,error ){_eg :=_e .NewReader (input );
_bbf ,_gg :=_f .DecodeDocument (_eg ,globals );if _gg !=nil {return nil ,_gg ;};return &Decoder {_fg :_eg ,_b :_bbf ,_fa :parameters },nil ;};func (_ff *Decoder )DecodePageImage (pageNumber int )(_d .Image ,error ){const _c ="\u0064\u0065\u0063od\u0065\u0072\u002e\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";
_ef ,_g :=_ff .decodePageImage (pageNumber );if _g !=nil {return nil ,_dca .Wrap (_g ,_c ,"");};return _ef ,nil ;};type Parameters struct{UnpaddedData bool ;Color _dc .Color ;};