//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package decoder ;import (_b "github.com/unidoc/unipdf/v3/internal/bitwise";_gd "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";_cg "github.com/unidoc/unipdf/v3/internal/jbig2/document";_c "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_g "image";
);func (_ac *Decoder )decodePage (_fff int )([]byte ,error ){const _gg ="\u0064\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065";if _fff < 0{return nil ,_c .Errorf (_gg ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_fff );
};if _fff > int (_ac ._ff .NumberOfPages ){return nil ,_c .Errorf (_gg ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_fff );
};_be ,_gf :=_ac ._ff .GetPage (_fff );if _gf !=nil {return nil ,_c .Wrap (_gf ,_gg ,"");};_bb ,_gf :=_be .GetBitmap ();if _gf !=nil {return nil ,_c .Wrap (_gf ,_gg ,"");};_bb .InverseData ();if !_ac ._d .UnpaddedData {return _bb .Data ,nil ;};return _bb .GetUnpaddedData ();
};func Decode (input []byte ,parameters Parameters ,globals *_cg .Globals )(*Decoder ,error ){_ga :=_b .NewReader (input );_fd ,_bc :=_cg .DecodeDocument (_ga ,globals );if _bc !=nil {return nil ,_bc ;};return &Decoder {_f :_ga ,_ff :_fd ,_d :parameters },nil ;
};func (_cge *Decoder )decodePageImage (_gff int )(_g .Image ,error ){const _af ="\u0064e\u0063o\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";if _gff < 0{return nil ,_c .Errorf (_af ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_gff );
};if _gff > int (_cge ._ff .NumberOfPages ){return nil ,_c .Errorf (_af ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_gff );
};_ae ,_da :=_cge ._ff .GetPage (_gff );if _da !=nil {return nil ,_c .Wrap (_da ,_af ,"");};_gdd ,_da :=_ae .GetBitmap ();if _da !=nil {return nil ,_c .Wrap (_da ,_af ,"");};_gdd .InverseData ();return _gdd .ToImage (),nil ;};func (_cgc *Decoder )DecodeNextPage ()([]byte ,error ){_cgc ._fb ++;
_eg :=_cgc ._fb ;return _cgc .decodePage (_eg );};type Parameters struct{UnpaddedData bool ;Color _gd .Color ;};func (_gb *Decoder )PageNumber ()(int ,error ){const _ef ="\u0044e\u0063o\u0064\u0065\u0072\u002e\u0050a\u0067\u0065N\u0075\u006d\u0062\u0065\u0072";
if _gb ._ff ==nil {return 0,_c .Error (_ef ,"d\u0065\u0063\u006f\u0064\u0065\u0072 \u006e\u006f\u0074\u0020\u0069\u006e\u0069\u0074\u0069a\u006c\u0069\u007ae\u0064 \u0079\u0065\u0074");};return int (_gb ._ff .NumberOfPages ),nil ;};type Decoder struct{_f *_b .Reader ;
_ff *_cg .Document ;_fb int ;_d Parameters ;};func (_a *Decoder )DecodePageImage (pageNumber int )(_g .Image ,error ){const _gc ="\u0064\u0065\u0063od\u0065\u0072\u002e\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";
_fe ,_fed :=_a .decodePageImage (pageNumber );if _fed !=nil {return nil ,_c .Wrap (_fed ,_gc ,"");};return _fe ,nil ;};func (_cf *Decoder )DecodePage (pageNumber int )([]byte ,error ){return _cf .decodePage (pageNumber )};