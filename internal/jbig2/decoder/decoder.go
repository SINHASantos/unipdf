//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package decoder ;import (_d "github.com/unidoc/unipdf/v4/internal/bitwise";_bg "github.com/unidoc/unipdf/v4/internal/jbig2/bitmap";_g "github.com/unidoc/unipdf/v4/internal/jbig2/document";_e "github.com/unidoc/unipdf/v4/internal/jbig2/errors";_c "image";
);func (_cc *Decoder )DecodePage (pageNumber int )([]byte ,error ){return _cc .decodePage (pageNumber )};func Decode (input []byte ,parameters Parameters ,globals *_g .Globals )(*Decoder ,error ){_egg :=_d .NewReader (input );_eb ,_def :=_g .DecodeDocument (_egg ,globals );
if _def !=nil {return nil ,_def ;};return &Decoder {_a :_egg ,_ea :_eb ,_ed :parameters },nil ;};func (_ac *Decoder )decodePage (_fcd int )([]byte ,error ){const _be ="\u0064\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065";if _fcd < 0{return nil ,_e .Errorf (_be ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_fcd );
};if _fcd > int (_ac ._ea .NumberOfPages ){return nil ,_e .Errorf (_be ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_fcd );
};_aa ,_de :=_ac ._ea .GetPage (_fcd );if _de !=nil {return nil ,_e .Wrap (_de ,_be ,"");};_dea ,_de :=_aa .GetBitmap ();if _de !=nil {return nil ,_e .Wrap (_de ,_be ,"");};_dea .InverseData ();if !_ac ._ed .UnpaddedData {return _dea .Data ,nil ;};return _dea .GetUnpaddedData ();
};func (_ca *Decoder )DecodePageImage (pageNumber int )(_c .Image ,error ){const _eab ="\u0064\u0065\u0063od\u0065\u0072\u002e\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";_cf ,_ga :=_ca .decodePageImage (pageNumber );
if _ga !=nil {return nil ,_e .Wrap (_ga ,_eab ,"");};return _cf ,nil ;};type Parameters struct{UnpaddedData bool ;Color _bg .Color ;};func (_ge *Decoder )PageNumber ()(int ,error ){const _fc ="\u0044e\u0063o\u0064\u0065\u0072\u002e\u0050a\u0067\u0065N\u0075\u006d\u0062\u0065\u0072";
if _ge ._ea ==nil {return 0,_e .Error (_fc ,"d\u0065\u0063\u006f\u0064\u0065\u0072 \u006e\u006f\u0074\u0020\u0069\u006e\u0069\u0074\u0069a\u006c\u0069\u007ae\u0064 \u0079\u0065\u0074");};return int (_ge ._ea .NumberOfPages ),nil ;};func (_gb *Decoder )DecodeNextPage ()([]byte ,error ){_gb ._f ++;
_cb :=_gb ._f ;return _gb .decodePage (_cb );};type Decoder struct{_a *_d .Reader ;_ea *_g .Document ;_f int ;_ed Parameters ;};func (_geg *Decoder )decodePageImage (_bgg int )(_c .Image ,error ){const _eg ="\u0064e\u0063o\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";
if _bgg < 0{return nil ,_e .Errorf (_eg ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_bgg );};if _bgg > int (_geg ._ea .NumberOfPages ){return nil ,_e .Errorf (_eg ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_bgg );
};_df ,_gf :=_geg ._ea .GetPage (_bgg );if _gf !=nil {return nil ,_e .Wrap (_gf ,_eg ,"");};_bb ,_gf :=_df .GetBitmap ();if _gf !=nil {return nil ,_e .Wrap (_gf ,_eg ,"");};_bb .InverseData ();return _bb .ToImage (),nil ;};