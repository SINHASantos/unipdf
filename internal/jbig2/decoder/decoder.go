//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package decoder ;import (_c "github.com/unidoc/unipdf/v3/internal/bitwise";_a "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";_ae "github.com/unidoc/unipdf/v3/internal/jbig2/document";_gf "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_f "image";
);func (_ce *Decoder )DecodePage (pageNumber int )([]byte ,error ){return _ce .decodePage (pageNumber )};func (_fa *Decoder )decodePage (_bb int )([]byte ,error ){const _abb ="\u0064\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065";if _bb < 0{return nil ,_gf .Errorf (_abb ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_bb );
};if _bb > int (_fa ._b .NumberOfPages ){return nil ,_gf .Errorf (_abb ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_bb );
};_cg ,_ec :=_fa ._b .GetPage (_bb );if _ec !=nil {return nil ,_gf .Wrap (_ec ,_abb ,"");};_df ,_ec :=_cg .GetBitmap ();if _ec !=nil {return nil ,_gf .Wrap (_ec ,_abb ,"");};_df .InverseData ();if !_fa ._e .UnpaddedData {return _df .Data ,nil ;};return _df .GetUnpaddedData ();
};func (_bg *Decoder )DecodePageImage (pageNumber int )(_f .Image ,error ){const _fb ="\u0064\u0065\u0063od\u0065\u0072\u002e\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";_ada ,_aa :=_bg .decodePageImage (pageNumber );
if _aa !=nil {return nil ,_gf .Wrap (_aa ,_fb ,"");};return _ada ,nil ;};func (_d *Decoder )PageNumber ()(int ,error ){const _fbf ="\u0044e\u0063o\u0064\u0065\u0072\u002e\u0050a\u0067\u0065N\u0075\u006d\u0062\u0065\u0072";if _d ._b ==nil {return 0,_gf .Error (_fbf ,"d\u0065\u0063\u006f\u0064\u0065\u0072 \u006e\u006f\u0074\u0020\u0069\u006e\u0069\u0074\u0069a\u006c\u0069\u007ae\u0064 \u0079\u0065\u0074");
};return int (_d ._b .NumberOfPages ),nil ;};func Decode (input []byte ,parameters Parameters ,globals *_ae .Globals )(*Decoder ,error ){_cb :=_c .NewReader (input );_bd ,_cca :=_ae .DecodeDocument (_cb ,globals );if _cca !=nil {return nil ,_cca ;};return &Decoder {_ad :_cb ,_b :_bd ,_e :parameters },nil ;
};type Parameters struct{UnpaddedData bool ;Color _a .Color ;};func (_cc *Decoder )DecodeNextPage ()([]byte ,error ){_cc ._ab ++;_aea :=_cc ._ab ;return _cc .decodePage (_aea );};type Decoder struct{_ad *_c .Reader ;_b *_ae .Document ;_ab int ;_e Parameters ;
};func (_ag *Decoder )decodePageImage (_ed int )(_f .Image ,error ){const _ced ="\u0064e\u0063o\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";if _ed < 0{return nil ,_gf .Errorf (_ced ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_ed );
};if _ed > int (_ag ._b .NumberOfPages ){return nil ,_gf .Errorf (_ced ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_ed );
};_eb ,_gc :=_ag ._b .GetPage (_ed );if _gc !=nil {return nil ,_gf .Wrap (_gc ,_ced ,"");};_da ,_gc :=_eb .GetBitmap ();if _gc !=nil {return nil ,_gf .Wrap (_gc ,_ced ,"");};_da .InverseData ();return _da .ToImage (),nil ;};