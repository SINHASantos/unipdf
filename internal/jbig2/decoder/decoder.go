//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package decoder ;import (_f "github.com/unidoc/unipdf/v3/internal/bitwise";_ee "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";_gc "github.com/unidoc/unipdf/v3/internal/jbig2/document";_g "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_e "image";
);type Decoder struct{_d *_f .Reader ;_fg *_gc .Document ;_dc int ;_df Parameters ;};func Decode (input []byte ,parameters Parameters ,globals *_gc .Globals )(*Decoder ,error ){_eec :=_f .NewReader (input );_bcf ,_acf :=_gc .DecodeDocument (_eec ,globals );
if _acf !=nil {return nil ,_acf ;};return &Decoder {_d :_eec ,_fg :_bcf ,_df :parameters },nil ;};func (_fcd *Decoder )PageNumber ()(int ,error ){const _gcf ="\u0044e\u0063o\u0064\u0065\u0072\u002e\u0050a\u0067\u0065N\u0075\u006d\u0062\u0065\u0072";if _fcd ._fg ==nil {return 0,_g .Error (_gcf ,"d\u0065\u0063\u006f\u0064\u0065\u0072 \u006e\u006f\u0074\u0020\u0069\u006e\u0069\u0074\u0069a\u006c\u0069\u007ae\u0064 \u0079\u0065\u0074");
};return int (_fcd ._fg .NumberOfPages ),nil ;};func (_c *Decoder )DecodePageImage (pageNumber int )(_e .Image ,error ){const _fc ="\u0064\u0065\u0063od\u0065\u0072\u002e\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";
_ef ,_gg :=_c .decodePageImage (pageNumber );if _gg !=nil {return nil ,_g .Wrap (_gg ,_fc ,"");};return _ef ,nil ;};func (_fgd *Decoder )decodePageImage (_ag int )(_e .Image ,error ){const _fgc ="\u0064e\u0063o\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";
if _ag < 0{return nil ,_g .Errorf (_fgc ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_ag );};if _ag > int (_fgd ._fg .NumberOfPages ){return nil ,_g .Errorf (_fgc ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_ag );
};_bc ,_dce :=_fgd ._fg .GetPage (_ag );if _dce !=nil {return nil ,_g .Wrap (_dce ,_fgc ,"");};_db ,_dce :=_bc .GetBitmap ();if _dce !=nil {return nil ,_g .Wrap (_dce ,_fgc ,"");};_db .InverseData ();return _db .ToImage (),nil ;};func (_ac *Decoder )DecodeNextPage ()([]byte ,error ){_ac ._dc ++;
_eg :=_ac ._dc ;return _ac .decodePage (_eg );};func (_aa *Decoder )decodePage (_ge int )([]byte ,error ){const _fa ="\u0064\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065";if _ge < 0{return nil ,_g .Errorf (_fa ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_ge );
};if _ge > int (_aa ._fg .NumberOfPages ){return nil ,_g .Errorf (_fa ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_ge );
};_b ,_ad :=_aa ._fg .GetPage (_ge );if _ad !=nil {return nil ,_g .Wrap (_ad ,_fa ,"");};_cd ,_ad :=_b .GetBitmap ();if _ad !=nil {return nil ,_g .Wrap (_ad ,_fa ,"");};_cd .InverseData ();if !_aa ._df .UnpaddedData {return _cd .Data ,nil ;};return _cd .GetUnpaddedData ();
};func (_de *Decoder )DecodePage (pageNumber int )([]byte ,error ){return _de .decodePage (pageNumber )};type Parameters struct{UnpaddedData bool ;Color _ee .Color ;};