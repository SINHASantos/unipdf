//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package decoder ;import (_ag "github.com/unidoc/unipdf/v3/internal/bitwise";_ac "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";_df "github.com/unidoc/unipdf/v3/internal/jbig2/document";_d "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_c "image";
);func Decode (input []byte ,parameters Parameters ,globals *_df .Globals )(*Decoder ,error ){_bae :=_ag .NewReader (input );_bbd ,_f :=_df .DecodeDocument (_bae ,globals );if _f !=nil {return nil ,_f ;};return &Decoder {_b :_bae ,_g :_bbd ,_dd :parameters },nil ;
};type Decoder struct{_b *_ag .Reader ;_g *_df .Document ;_ca int ;_dd Parameters ;};func (_bbc *Decoder )PageNumber ()(int ,error ){const _ea ="\u0044e\u0063o\u0064\u0065\u0072\u002e\u0050a\u0067\u0065N\u0075\u006d\u0062\u0065\u0072";if _bbc ._g ==nil {return 0,_d .Error (_ea ,"d\u0065\u0063\u006f\u0064\u0065\u0072 \u006e\u006f\u0074\u0020\u0069\u006e\u0069\u0074\u0069a\u006c\u0069\u007ae\u0064 \u0079\u0065\u0074");
};return int (_bbc ._g .NumberOfPages ),nil ;};func (_eg *Decoder )decodePageImage (_ab int )(_c .Image ,error ){const _bge ="\u0064e\u0063o\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";if _ab < 0{return nil ,_d .Errorf (_bge ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_ab );
};if _ab > int (_eg ._g .NumberOfPages ){return nil ,_d .Errorf (_bge ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_ab );
};_eag ,_caf :=_eg ._g .GetPage (_ab );if _caf !=nil {return nil ,_d .Wrap (_caf ,_bge ,"");};_cc ,_caf :=_eag .GetBitmap ();if _caf !=nil {return nil ,_d .Wrap (_caf ,_bge ,"");};_cc .InverseData ();return _cc .ToImage (),nil ;};func (_cge *Decoder )decodePage (_ef int )([]byte ,error ){const _bf ="\u0064\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065";
if _ef < 0{return nil ,_d .Errorf (_bf ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_ef );};if _ef > int (_cge ._g .NumberOfPages ){return nil ,_d .Errorf (_bf ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_ef );
};_cb ,_ba :=_cge ._g .GetPage (_ef );if _ba !=nil {return nil ,_d .Wrap (_ba ,_bf ,"");};_bd ,_ba :=_cb .GetBitmap ();if _ba !=nil {return nil ,_d .Wrap (_ba ,_bf ,"");};_bd .InverseData ();if !_cge ._dd .UnpaddedData {return _bd .Data ,nil ;};return _bd .GetUnpaddedData ();
};type Parameters struct{UnpaddedData bool ;Color _ac .Color ;};func (_e *Decoder )DecodeNextPage ()([]byte ,error ){_e ._ca ++;_cg :=_e ._ca ;return _e .decodePage (_cg );};func (_bg *Decoder )DecodePageImage (pageNumber int )(_c .Image ,error ){const _dg ="\u0064\u0065\u0063od\u0065\u0072\u002e\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";
_cf ,_bb :=_bg .decodePageImage (pageNumber );if _bb !=nil {return nil ,_d .Wrap (_bb ,_dg ,"");};return _cf ,nil ;};func (_bc *Decoder )DecodePage (pageNumber int )([]byte ,error ){return _bc .decodePage (pageNumber )};