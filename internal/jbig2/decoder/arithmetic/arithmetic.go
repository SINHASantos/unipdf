//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package arithmetic ;import (_b "fmt";_d "github.com/unidoc/unipdf/v3/common";_a "github.com/unidoc/unipdf/v3/internal/bitwise";_cc "github.com/unidoc/unipdf/v3/internal/jbig2/internal";_e "io";_c "strings";);type Decoder struct{ContextSize []uint32 ;ReferedToContextSize []uint32 ;
_da *_a .Reader ;_ag uint8 ;_dd uint64 ;_dab uint32 ;_cf int64 ;_de int32 ;_bf int32 ;_ccd int64 ;};func (_ggc *Decoder )renormalize ()error {for {if _ggc ._de ==0{if _def :=_ggc .readByte ();_def !=nil {return _def ;};};_ggc ._dab <<=1;_ggc ._dd <<=1;
_ggc ._de --;if (_ggc ._dab &0x8000)!=0{break ;};};_ggc ._dd &=0xffffffff;return nil ;};type DecoderStats struct{_dbe int32 ;_gfd int32 ;_dgg []byte ;_dgga []byte ;};func (_edd *Decoder )decodeIntBit (_gef *DecoderStats )(int ,error ){_gef .SetIndex (int32 (_edd ._cf ));
_fbc ,_ccf :=_edd .DecodeBit (_gef );if _ccf !=nil {_d .Log .Debug ("\u0041\u0072\u0069\u0074\u0068\u006d\u0065t\u0069\u0063\u0044e\u0063\u006f\u0064e\u0072\u0020'\u0064\u0065\u0063\u006f\u0064\u0065I\u006etB\u0069\u0074\u0027\u002d\u003e\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0042\u0069\u0074\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u002e\u0020\u0025\u0076",_ccf );
return _fbc ,_ccf ;};if _edd ._cf < 256{_edd ._cf =((_edd ._cf <<uint64 (1))|int64 (_fbc ))&0x1ff;}else {_edd ._cf =(((_edd ._cf <<uint64 (1)|int64 (_fbc ))&511)|256)&0x1ff;};return _fbc ,nil ;};func New (r *_a .Reader )(*Decoder ,error ){_ea :=&Decoder {_da :r ,ContextSize :[]uint32 {16,13,10,10},ReferedToContextSize :[]uint32 {13,10}};
if _fe :=_ea .init ();_fe !=nil {return nil ,_fe ;};return _ea ,nil ;};func (_ee *DecoderStats )Overwrite (dNew *DecoderStats ){for _dea :=0;_dea < len (_ee ._dgg );_dea ++{_ee ._dgg [_dea ]=dNew ._dgg [_dea ];_ee ._dgga [_dea ]=dNew ._dgga [_dea ];};};
func (_fc *Decoder )init ()error {_fc ._ccd =_fc ._da .AbsolutePosition ();_gf ,_dg :=_fc ._da .ReadByte ();if _dg !=nil {_d .Log .Debug ("B\u0075\u0066\u0066\u0065\u0072\u0030 \u0072\u0065\u0061\u0064\u0042\u0079\u0074\u0065\u0020f\u0061\u0069\u006ce\u0064.\u0020\u0025\u0076",_dg );
return _dg ;};_fc ._ag =_gf ;_fc ._dd =uint64 (_gf )<<16;if _dg =_fc .readByte ();_dg !=nil {return _dg ;};_fc ._dd <<=7;_fc ._de -=7;_fc ._dab =0x8000;_fc ._bf ++;return nil ;};func (_feg *Decoder )DecodeBit (stats *DecoderStats )(int ,error ){var (_fb int ;
_edg =_ed [stats .cx ()][0];_fd =int32 (stats .cx ()););defer func (){_feg ._bf ++}();_feg ._dab -=_edg ;if (_feg ._dd >>16)< uint64 (_edg ){_fb =_feg .lpsExchange (stats ,_fd ,_edg );if _dc :=_feg .renormalize ();_dc !=nil {return 0,_dc ;};}else {_feg ._dd -=uint64 (_edg )<<16;
if (_feg ._dab &0x8000)==0{_fb =_feg .mpsExchange (stats ,_fd );if _g :=_feg .renormalize ();_g !=nil {return 0,_g ;};}else {_fb =int (stats .getMps ());};};return _fb ,nil ;};func (_bab *Decoder )lpsExchange (_ae *DecoderStats ,_ff int32 ,_dcc uint32 )int {_ggcb :=_ae .getMps ();
if _bab ._dab < _dcc {_ae .setEntry (int (_ed [_ff ][1]));_bab ._dab =_dcc ;return int (_ggcb );};if _ed [_ff ][3]==1{_ae .toggleMps ();};_ae .setEntry (int (_ed [_ff ][2]));_bab ._dab =_dcc ;return int (1-_ggcb );};func (_dede *DecoderStats )String ()string {_ebf :=&_c .Builder {};
_ebf .WriteString (_b .Sprintf ("S\u0074\u0061\u0074\u0073\u003a\u0020\u0020\u0025\u0064\u000a",len (_dede ._dgg )));for _eac ,_ec :=range _dede ._dgg {if _ec !=0{_ebf .WriteString (_b .Sprintf ("N\u006f\u0074\u0020\u007aer\u006f \u0061\u0074\u003a\u0020\u0025d\u0020\u002d\u0020\u0025\u0064\u000a",_eac ,_ec ));
};};return _ebf .String ();};func (_edc *DecoderStats )toggleMps (){_edc ._dgga [_edc ._dbe ]^=1};func (_bb *DecoderStats )Copy ()*DecoderStats {_ef :=&DecoderStats {_gfd :_bb ._gfd ,_dgg :make ([]byte ,_bb ._gfd )};copy (_ef ._dgg ,_bb ._dgg );return _ef ;
};func (_eaa *DecoderStats )SetIndex (index int32 ){_eaa ._dbe =index };func (_fef *DecoderStats )setEntry (_gd int ){_geg :=byte (_gd &0x7f);_fef ._dgg [_fef ._dbe ]=_geg };func (_cfa *DecoderStats )cx ()byte {return _cfa ._dgg [_cfa ._dbe ]};func (_caa *Decoder )mpsExchange (_db *DecoderStats ,_eba int32 )int {_ga :=_db ._dgga [_db ._dbe ];
if _caa ._dab < _ed [_eba ][0]{if _ed [_eba ][3]==1{_db .toggleMps ();};_db .setEntry (int (_ed [_eba ][2]));return int (1-_ga );};_db .setEntry (int (_ed [_eba ][1]));return int (_ga );};func (_efa *DecoderStats )getMps ()byte {return _efa ._dgga [_efa ._dbe ]};
func NewStats (contextSize int32 ,index int32 )*DecoderStats {return &DecoderStats {_dbe :index ,_gfd :contextSize ,_dgg :make ([]byte ,contextSize ),_dgga :make ([]byte ,contextSize )};};var (_ed =[][4]uint32 {{0x5601,1,1,1},{0x3401,2,6,0},{0x1801,3,9,0},{0x0AC1,4,12,0},{0x0521,5,29,0},{0x0221,38,33,0},{0x5601,7,6,1},{0x5401,8,14,0},{0x4801,9,14,0},{0x3801,10,14,0},{0x3001,11,17,0},{0x2401,12,18,0},{0x1C01,13,20,0},{0x1601,29,21,0},{0x5601,15,14,1},{0x5401,16,14,0},{0x5101,17,15,0},{0x4801,18,16,0},{0x3801,19,17,0},{0x3401,20,18,0},{0x3001,21,19,0},{0x2801,22,19,0},{0x2401,23,20,0},{0x2201,24,21,0},{0x1C01,25,22,0},{0x1801,26,23,0},{0x1601,27,24,0},{0x1401,28,25,0},{0x1201,29,26,0},{0x1101,30,27,0},{0x0AC1,31,28,0},{0x09C1,32,29,0},{0x08A1,33,30,0},{0x0521,34,31,0},{0x0441,35,32,0},{0x02A1,36,33,0},{0x0221,37,34,0},{0x0141,38,35,0},{0x0111,39,36,0},{0x0085,40,37,0},{0x0049,41,38,0},{0x0025,42,39,0},{0x0015,43,40,0},{0x0009,44,41,0},{0x0005,45,42,0},{0x0001,45,43,0},{0x5601,46,46,0}};
);func (_cdg *DecoderStats )Reset (){for _ab :=0;_ab < len (_cdg ._dgg );_ab ++{_cdg ._dgg [_ab ]=0;_cdg ._dgga [_ab ]=0;};};func (_fee *Decoder )DecodeIAID (codeLen uint64 ,stats *DecoderStats )(int64 ,error ){_fee ._cf =1;var _ad uint64 ;for _ad =0;_ad < codeLen ;
_ad ++{stats .SetIndex (int32 (_fee ._cf ));_age ,_ca :=_fee .DecodeBit (stats );if _ca !=nil {return 0,_ca ;};_fee ._cf =(_fee ._cf <<1)|int64 (_age );};_bac :=_fee ._cf -(1<<codeLen );return _bac ,nil ;};func (_bfa *Decoder )DecodeInt (stats *DecoderStats )(int32 ,error ){var (_ded ,_cfg int32 ;
_fba ,_ge ,_ba int ;_gg error ;);if stats ==nil {stats =NewStats (512,1);};_bfa ._cf =1;_ge ,_gg =_bfa .decodeIntBit (stats );if _gg !=nil {return 0,_gg ;};_fba ,_gg =_bfa .decodeIntBit (stats );if _gg !=nil {return 0,_gg ;};if _fba ==1{_fba ,_gg =_bfa .decodeIntBit (stats );
if _gg !=nil {return 0,_gg ;};if _fba ==1{_fba ,_gg =_bfa .decodeIntBit (stats );if _gg !=nil {return 0,_gg ;};if _fba ==1{_fba ,_gg =_bfa .decodeIntBit (stats );if _gg !=nil {return 0,_gg ;};if _fba ==1{_fba ,_gg =_bfa .decodeIntBit (stats );if _gg !=nil {return 0,_gg ;
};if _fba ==1{_ba =32;_cfg =4436;}else {_ba =12;_cfg =340;};}else {_ba =8;_cfg =84;};}else {_ba =6;_cfg =20;};}else {_ba =4;_cfg =4;};}else {_ba =2;_cfg =0;};for _cd :=0;_cd < _ba ;_cd ++{_fba ,_gg =_bfa .decodeIntBit (stats );if _gg !=nil {return 0,_gg ;
};_ded =(_ded <<1)|int32 (_fba );};_ded +=_cfg ;if _ge ==0{return _ded ,nil ;}else if _ge ==1&&_ded > 0{return -_ded ,nil ;};return 0,_cc .ErrOOB ;};func (_deg *Decoder )readByte ()error {if _deg ._da .AbsolutePosition ()> _deg ._ccd {if _ ,_eb :=_deg ._da .Seek (-1,_e .SeekCurrent );
_eb !=nil {return _eb ;};};_df ,_ada :=_deg ._da .ReadByte ();if _ada !=nil {return _ada ;};_deg ._ag =_df ;if _deg ._ag ==0xFF{_dec ,_gff :=_deg ._da .ReadByte ();if _gff !=nil {return _gff ;};if _dec > 0x8F{_deg ._dd +=0xFF00;_deg ._de =8;if _ ,_cg :=_deg ._da .Seek (-2,_e .SeekCurrent );
_cg !=nil {return _cg ;};}else {_deg ._dd +=uint64 (_dec )<<9;_deg ._de =7;};}else {_df ,_ada =_deg ._da .ReadByte ();if _ada !=nil {return _ada ;};_deg ._ag =_df ;_deg ._dd +=uint64 (_deg ._ag )<<8;_deg ._de =8;};_deg ._dd &=0xFFFFFFFFFF;return nil ;};
