//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package arithmetic ;import (_f "fmt";_g "github.com/unidoc/unipdf/v3/common";_c "github.com/unidoc/unipdf/v3/internal/bitwise";_a "github.com/unidoc/unipdf/v3/internal/jbig2/internal";_ef "io";_b "strings";);func (_egc *DecoderStats )Copy ()*DecoderStats {_cebc :=&DecoderStats {_fgc :_egc ._fgc ,_efec :make ([]byte ,_egc ._fgc )};
copy (_cebc ._efec ,_egc ._efec );return _cebc ;};var (_eb =[][4]uint32 {{0x5601,1,1,1},{0x3401,2,6,0},{0x1801,3,9,0},{0x0AC1,4,12,0},{0x0521,5,29,0},{0x0221,38,33,0},{0x5601,7,6,1},{0x5401,8,14,0},{0x4801,9,14,0},{0x3801,10,14,0},{0x3001,11,17,0},{0x2401,12,18,0},{0x1C01,13,20,0},{0x1601,29,21,0},{0x5601,15,14,1},{0x5401,16,14,0},{0x5101,17,15,0},{0x4801,18,16,0},{0x3801,19,17,0},{0x3401,20,18,0},{0x3001,21,19,0},{0x2801,22,19,0},{0x2401,23,20,0},{0x2201,24,21,0},{0x1C01,25,22,0},{0x1801,26,23,0},{0x1601,27,24,0},{0x1401,28,25,0},{0x1201,29,26,0},{0x1101,30,27,0},{0x0AC1,31,28,0},{0x09C1,32,29,0},{0x08A1,33,30,0},{0x0521,34,31,0},{0x0441,35,32,0},{0x02A1,36,33,0},{0x0221,37,34,0},{0x0141,38,35,0},{0x0111,39,36,0},{0x0085,40,37,0},{0x0049,41,38,0},{0x0025,42,39,0},{0x0015,43,40,0},{0x0009,44,41,0},{0x0005,45,42,0},{0x0001,45,43,0},{0x5601,46,46,0}};
);type DecoderStats struct{_aad int32 ;_fgc int32 ;_efec []byte ;_ea []byte ;};func (_de *Decoder )readByte ()error {if _de ._af .AbsolutePosition ()> _de ._ba {if _ ,_ada :=_de ._af .Seek (-1,_ef .SeekCurrent );_ada !=nil {return _ada ;};};_cb ,_cea :=_de ._af .ReadByte ();
if _cea !=nil {return _cea ;};_de ._eg =_cb ;if _de ._eg ==0xFF{_fe ,_ff :=_de ._af .ReadByte ();if _ff !=nil {return _ff ;};if _fe > 0x8F{_de ._cc +=0xFF00;_de ._fb =8;if _ ,_ebg :=_de ._af .Seek (-2,_ef .SeekCurrent );_ebg !=nil {return _ebg ;};}else {_de ._cc +=uint64 (_fe )<<9;
_de ._fb =7;};}else {_cb ,_cea =_de ._af .ReadByte ();if _cea !=nil {return _cea ;};_de ._eg =_cb ;_de ._cc +=uint64 (_de ._eg )<<8;_de ._fb =8;};_de ._cc &=0xFFFFFFFFFF;return nil ;};func (_cbg *DecoderStats )getMps ()byte {return _cbg ._ea [_cbg ._aad ]};
func (_gc *Decoder )decodeIntBit (_fbe *DecoderStats )(int ,error ){_fbe .SetIndex (int32 (_gc ._cd ));_aag ,_ga :=_gc .DecodeBit (_fbe );if _ga !=nil {_g .Log .Debug ("\u0041\u0072\u0069\u0074\u0068\u006d\u0065t\u0069\u0063\u0044e\u0063\u006f\u0064e\u0072\u0020'\u0064\u0065\u0063\u006f\u0064\u0065I\u006etB\u0069\u0074\u0027\u002d\u003e\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0042\u0069\u0074\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u002e\u0020\u0025\u0076",_ga );
return _aag ,_ga ;};if _gc ._cd < 256{_gc ._cd =((_gc ._cd <<uint64 (1))|int64 (_aag ))&0x1ff;}else {_gc ._cd =(((_gc ._cd <<uint64 (1)|int64 (_aag ))&511)|256)&0x1ff;};return _aag ,nil ;};func (_dc *Decoder )init ()error {_dc ._ba =_dc ._af .AbsolutePosition ();
_da ,_efe :=_dc ._af .ReadByte ();if _efe !=nil {_g .Log .Debug ("B\u0075\u0066\u0066\u0065\u0072\u0030 \u0072\u0065\u0061\u0064\u0042\u0079\u0074\u0065\u0020f\u0061\u0069\u006ce\u0064.\u0020\u0025\u0076",_efe );return _efe ;};_dc ._eg =_da ;_dc ._cc =uint64 (_da )<<16;
if _efe =_dc .readByte ();_efe !=nil {return _efe ;};_dc ._cc <<=7;_dc ._fb -=7;_dc ._afe =0x8000;_dc ._ebb ++;return nil ;};func (_dce *Decoder )renormalize ()error {for {if _dce ._fb ==0{if _gf :=_dce .readByte ();_gf !=nil {return _gf ;};};_dce ._afe <<=1;
_dce ._cc <<=1;_dce ._fb --;if (_dce ._afe &0x8000)!=0{break ;};};_dce ._cc &=0xffffffff;return nil ;};type Decoder struct{ContextSize []uint32 ;ReferedToContextSize []uint32 ;_af *_c .Reader ;_eg uint8 ;_cc uint64 ;_afe uint32 ;_cd int64 ;_fb int32 ;_ebb int32 ;
_ba int64 ;};func (_cec *DecoderStats )toggleMps (){_cec ._ea [_cec ._aad ]^=1};func (_cg *Decoder )lpsExchange (_dcg *DecoderStats ,_ace int32 ,_fcf uint32 )int {_fg :=_dcg .getMps ();if _cg ._afe < _fcf {_dcg .setEntry (int (_eb [_ace ][1]));_cg ._afe =_fcf ;
return int (_fg );};if _eb [_ace ][3]==1{_dcg .toggleMps ();};_dcg .setEntry (int (_eb [_ace ][2]));_cg ._afe =_fcf ;return int (1-_fg );};func (_ed *DecoderStats )Overwrite (dNew *DecoderStats ){for _gfe :=0;_gfe < len (_ed ._efec );_gfe ++{_ed ._efec [_gfe ]=dNew ._efec [_gfe ];
_ed ._ea [_gfe ]=dNew ._ea [_gfe ];};};func (_aac *DecoderStats )setEntry (_gbde int ){_gaf :=byte (_gbde &0x7f);_aac ._efec [_aac ._aad ]=_gaf ;};func (_dg *DecoderStats )String ()string {_ega :=&_b .Builder {};_ega .WriteString (_f .Sprintf ("S\u0074\u0061\u0074\u0073\u003a\u0020\u0020\u0025\u0064\u000a",len (_dg ._efec )));
for _bbg ,_dgb :=range _dg ._efec {if _dgb !=0{_ega .WriteString (_f .Sprintf ("N\u006f\u0074\u0020\u007aer\u006f \u0061\u0074\u003a\u0020\u0025d\u0020\u002d\u0020\u0025\u0064\u000a",_bbg ,_dgb ));};};return _ega .String ();};func New (r *_c .Reader )(*Decoder ,error ){_bg :=&Decoder {_af :r ,ContextSize :[]uint32 {16,13,10,10},ReferedToContextSize :[]uint32 {13,10}};
if _bgd :=_bg .init ();_bgd !=nil {return nil ,_bgd ;};return _bg ,nil ;};func (_ad *Decoder )DecodeInt (stats *DecoderStats )(int32 ,error ){var (_fa ,_bc int32 ;_gg ,_ce ,_ceb int ;_aa error ;);if stats ==nil {stats =NewStats (512,1);};_ad ._cd =1;_ce ,_aa =_ad .decodeIntBit (stats );
if _aa !=nil {return 0,_aa ;};_gg ,_aa =_ad .decodeIntBit (stats );if _aa !=nil {return 0,_aa ;};if _gg ==1{_gg ,_aa =_ad .decodeIntBit (stats );if _aa !=nil {return 0,_aa ;};if _gg ==1{_gg ,_aa =_ad .decodeIntBit (stats );if _aa !=nil {return 0,_aa ;};
if _gg ==1{_gg ,_aa =_ad .decodeIntBit (stats );if _aa !=nil {return 0,_aa ;};if _gg ==1{_gg ,_aa =_ad .decodeIntBit (stats );if _aa !=nil {return 0,_aa ;};if _gg ==1{_ceb =32;_bc =4436;}else {_ceb =12;_bc =340;};}else {_ceb =8;_bc =84;};}else {_ceb =6;
_bc =20;};}else {_ceb =4;_bc =4;};}else {_ceb =2;_bc =0;};for _bcb :=0;_bcb < _ceb ;_bcb ++{_gg ,_aa =_ad .decodeIntBit (stats );if _aa !=nil {return 0,_aa ;};_fa =(_fa <<1)|int32 (_gg );};_fa +=_bc ;if _ce ==0{return _fa ,nil ;}else if _ce ==1&&_fa > 0{return -_fa ,nil ;
};return 0,_a .ErrOOB ;};func (_ceab *DecoderStats )Reset (){for _fec :=0;_fec < len (_ceab ._efec );_fec ++{_ceab ._efec [_fec ]=0;_ceab ._ea [_fec ]=0;};};func (_cdc *DecoderStats )SetIndex (index int32 ){_cdc ._aad =index };func (_afc *DecoderStats )cx ()byte {return _afc ._efec [_afc ._aad ]};
func (_ag *Decoder )DecodeIAID (codeLen uint64 ,stats *DecoderStats )(int64 ,error ){_ag ._cd =1;var _be uint64 ;for _be =0;_be < codeLen ;_be ++{stats .SetIndex (int32 (_ag ._cd ));_d ,_bb :=_ag .DecodeBit (stats );if _bb !=nil {return 0,_bb ;};_ag ._cd =(_ag ._cd <<1)|int64 (_d );
};_ccf :=_ag ._cd -(1<<codeLen );return _ccf ,nil ;};func (_cf *Decoder )mpsExchange (_gge *DecoderStats ,_dae int32 )int {_bge :=_gge ._ea [_gge ._aad ];if _cf ._afe < _eb [_dae ][0]{if _eb [_dae ][3]==1{_gge .toggleMps ();};_gge .setEntry (int (_eb [_dae ][2]));
return int (1-_bge );};_gge .setEntry (int (_eb [_dae ][1]));return int (_bge );};func (_ac *Decoder )DecodeBit (stats *DecoderStats )(int ,error ){var (_ec int ;_ebe =_eb [stats .cx ()][0];_gb =int32 (stats .cx ()););defer func (){_ac ._ebb ++}();_ac ._afe -=_ebe ;
if (_ac ._cc >>16)< uint64 (_ebe ){_ec =_ac .lpsExchange (stats ,_gb ,_ebe );if _bd :=_ac .renormalize ();_bd !=nil {return 0,_bd ;};}else {_ac ._cc -=uint64 (_ebe )<<16;if (_ac ._afe &0x8000)==0{_ec =_ac .mpsExchange (stats ,_gb );if _gbd :=_ac .renormalize ();
_gbd !=nil {return 0,_gbd ;};}else {_ec =int (stats .getMps ());};};return _ec ,nil ;};func NewStats (contextSize int32 ,index int32 )*DecoderStats {return &DecoderStats {_aad :index ,_fgc :contextSize ,_efec :make ([]byte ,contextSize ),_ea :make ([]byte ,contextSize )};
};