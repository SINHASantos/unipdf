//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package arithmetic ;import (_a "fmt";_eg "github.com/unidoc/unipdf/v3/common";_ad "github.com/unidoc/unipdf/v3/internal/bitwise";_c "github.com/unidoc/unipdf/v3/internal/jbig2/internal";_ef "io";_d "strings";);func (_fba *DecoderStats )String ()string {_bee :=&_d .Builder {};
_bee .WriteString (_a .Sprintf ("S\u0074\u0061\u0074\u0073\u003a\u0020\u0020\u0025\u0064\u000a",len (_fba ._bb )));for _ccc ,_dcf :=range _fba ._bb {if _dcf !=0{_bee .WriteString (_a .Sprintf ("N\u006f\u0074\u0020\u007aer\u006f \u0061\u0074\u003a\u0020\u0025d\u0020\u002d\u0020\u0025\u0064\u000a",_ccc ,_dcf ));
};};return _bee .String ();};func NewStats (contextSize int32 ,index int32 )*DecoderStats {return &DecoderStats {_dee :index ,_gf :contextSize ,_bb :make ([]byte ,contextSize ),_efd :make ([]byte ,contextSize )};};func (_dgf *DecoderStats )SetIndex (index int32 ){_dgf ._dee =index };
func (_acc *DecoderStats )getMps ()byte {return _acc ._efd [_acc ._dee ]};func (_cef *Decoder )mpsExchange (_bd *DecoderStats ,_be int32 )int {_cc :=_bd ._efd [_bd ._dee ];if _cef ._cb < _ce [_be ][0]{if _ce [_be ][3]==1{_bd .toggleMps ();};_bd .setEntry (int (_ce [_be ][2]));
return int (1-_cc );};_bd .setEntry (int (_ce [_be ][1]));return int (_cc );};func (_deec *DecoderStats )setEntry (_efg int ){_fbf :=byte (_efg &0x7f);_deec ._bb [_deec ._dee ]=_fbf ;};func (_dg *Decoder )init ()error {_dg ._fc =_dg ._dc .AbsolutePosition ();
_ac ,_eea :=_dg ._dc .ReadByte ();if _eea !=nil {_eg .Log .Debug ("B\u0075\u0066\u0066\u0065\u0072\u0030 \u0072\u0065\u0061\u0064\u0042\u0079\u0074\u0065\u0020f\u0061\u0069\u006ce\u0064.\u0020\u0025\u0076",_eea );return _eea ;};_dg ._f =_ac ;_dg ._ec =uint64 (_ac )<<16;
if _eea =_dg .readByte ();_eea !=nil {return _eea ;};_dg ._ec <<=7;_dg ._b -=7;_dg ._cb =0x8000;_dg ._dd ++;return nil ;};func (_bgd *Decoder )decodeIntBit (_bfb *DecoderStats )(int ,error ){_bfb .SetIndex (int32 (_bgd ._cd ));_cee ,_db :=_bgd .DecodeBit (_bfb );
if _db !=nil {_eg .Log .Debug ("\u0041\u0072\u0069\u0074\u0068\u006d\u0065t\u0069\u0063\u0044e\u0063\u006f\u0064e\u0072\u0020'\u0064\u0065\u0063\u006f\u0064\u0065I\u006etB\u0069\u0074\u0027\u002d\u003e\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0042\u0069\u0074\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u002e\u0020\u0025\u0076",_db );
return _cee ,_db ;};if _bgd ._cd < 256{_bgd ._cd =((_bgd ._cd <<uint64 (1))|int64 (_cee ))&0x1ff;}else {_bgd ._cd =(((_bgd ._cd <<uint64 (1)|int64 (_cee ))&511)|256)&0x1ff;};return _cee ,nil ;};func (_cdc *DecoderStats )toggleMps (){_cdc ._efd [_cdc ._dee ]^=1};
func New (r *_ad .Reader )(*Decoder ,error ){_fg :=&Decoder {_dc :r ,ContextSize :[]uint32 {16,13,10,10},ReferedToContextSize :[]uint32 {13,10}};if _ab :=_fg .init ();_ab !=nil {return nil ,_ab ;};return _fg ,nil ;};func (_abe *Decoder )DecodeInt (stats *DecoderStats )(int32 ,error ){var (_ddc ,_ae int32 ;
_ba ,_de ,_eb int ;_dce error ;);if stats ==nil {stats =NewStats (512,1);};_abe ._cd =1;_de ,_dce =_abe .decodeIntBit (stats );if _dce !=nil {return 0,_dce ;};_ba ,_dce =_abe .decodeIntBit (stats );if _dce !=nil {return 0,_dce ;};if _ba ==1{_ba ,_dce =_abe .decodeIntBit (stats );
if _dce !=nil {return 0,_dce ;};if _ba ==1{_ba ,_dce =_abe .decodeIntBit (stats );if _dce !=nil {return 0,_dce ;};if _ba ==1{_ba ,_dce =_abe .decodeIntBit (stats );if _dce !=nil {return 0,_dce ;};if _ba ==1{_ba ,_dce =_abe .decodeIntBit (stats );if _dce !=nil {return 0,_dce ;
};if _ba ==1{_eb =32;_ae =4436;}else {_eb =12;_ae =340;};}else {_eb =8;_ae =84;};}else {_eb =6;_ae =20;};}else {_eb =4;_ae =4;};}else {_eb =2;_ae =0;};for _gb :=0;_gb < _eb ;_gb ++{_ba ,_dce =_abe .decodeIntBit (stats );if _dce !=nil {return 0,_dce ;};
_ddc =(_ddc <<1)|int32 (_ba );};_ddc +=_ae ;if _de ==0{return _ddc ,nil ;}else if _de ==1&&_ddc > 0{return -_ddc ,nil ;};return 0,_c .ErrOOB ;};func (_ge *Decoder )renormalize ()error {for {if _ge ._b ==0{if _adc :=_ge .readByte ();_adc !=nil {return _adc ;
};};_ge ._cb <<=1;_ge ._ec <<=1;_ge ._b --;if (_ge ._cb &0x8000)!=0{break ;};};_ge ._ec &=0xffffffff;return nil ;};func (_dfd *DecoderStats )Copy ()*DecoderStats {_fgg :=&DecoderStats {_gf :_dfd ._gf ,_bb :make ([]byte ,_dfd ._gf )};copy (_fgg ._bb ,_dfd ._bb );
return _fgg ;};func (_ee *Decoder )DecodeIAID (codeLen uint64 ,stats *DecoderStats )(int64 ,error ){_ee ._cd =1;var _da uint64 ;for _da =0;_da < codeLen ;_da ++{stats .SetIndex (int32 (_ee ._cd ));_gd ,_ceb :=_ee .DecodeBit (stats );if _ceb !=nil {return 0,_ceb ;
};_ee ._cd =(_ee ._cd <<1)|int64 (_gd );};_fa :=_ee ._cd -(1<<codeLen );return _fa ,nil ;};func (_cg *DecoderStats )Reset (){for _fb :=0;_fb < len (_cg ._bb );_fb ++{_cg ._bb [_fb ]=0;_cg ._efd [_fb ]=0;};};func (_dcd *DecoderStats )Overwrite (dNew *DecoderStats ){for _dfb :=0;
_dfb < len (_dcd ._bb );_dfb ++{_dcd ._bb [_dfb ]=dNew ._bb [_dfb ];_dcd ._efd [_dfb ]=dNew ._efd [_dfb ];};};func (_ff *Decoder )lpsExchange (_ced *DecoderStats ,_baf int32 ,_adb uint32 )int {_dbc :=_ced .getMps ();if _ff ._cb < _adb {_ced .setEntry (int (_ce [_baf ][1]));
_ff ._cb =_adb ;return int (_dbc );};if _ce [_baf ][3]==1{_ced .toggleMps ();};_ced .setEntry (int (_ce [_baf ][2]));_ff ._cb =_adb ;return int (1-_dbc );};func (_ece *Decoder )DecodeBit (stats *DecoderStats )(int ,error ){var (_ddb int ;_ecf =_ce [stats .cx ()][0];
_bf =int32 (stats .cx ()););defer func (){_ece ._dd ++}();_ece ._cb -=_ecf ;if (_ece ._ec >>16)< uint64 (_ecf ){_ddb =_ece .lpsExchange (stats ,_bf ,_ecf );if _g :=_ece .renormalize ();_g !=nil {return 0,_g ;};}else {_ece ._ec -=uint64 (_ecf )<<16;if (_ece ._cb &0x8000)==0{_ddb =_ece .mpsExchange (stats ,_bf );
if _aa :=_ece .renormalize ();_aa !=nil {return 0,_aa ;};}else {_ddb =int (stats .getMps ());};};return _ddb ,nil ;};var (_ce =[][4]uint32 {{0x5601,1,1,1},{0x3401,2,6,0},{0x1801,3,9,0},{0x0AC1,4,12,0},{0x0521,5,29,0},{0x0221,38,33,0},{0x5601,7,6,1},{0x5401,8,14,0},{0x4801,9,14,0},{0x3801,10,14,0},{0x3001,11,17,0},{0x2401,12,18,0},{0x1C01,13,20,0},{0x1601,29,21,0},{0x5601,15,14,1},{0x5401,16,14,0},{0x5101,17,15,0},{0x4801,18,16,0},{0x3801,19,17,0},{0x3401,20,18,0},{0x3001,21,19,0},{0x2801,22,19,0},{0x2401,23,20,0},{0x2201,24,21,0},{0x1C01,25,22,0},{0x1801,26,23,0},{0x1601,27,24,0},{0x1401,28,25,0},{0x1201,29,26,0},{0x1101,30,27,0},{0x0AC1,31,28,0},{0x09C1,32,29,0},{0x08A1,33,30,0},{0x0521,34,31,0},{0x0441,35,32,0},{0x02A1,36,33,0},{0x0221,37,34,0},{0x0141,38,35,0},{0x0111,39,36,0},{0x0085,40,37,0},{0x0049,41,38,0},{0x0025,42,39,0},{0x0015,43,40,0},{0x0009,44,41,0},{0x0005,45,42,0},{0x0001,45,43,0},{0x5601,46,46,0}};
);type DecoderStats struct{_dee int32 ;_gf int32 ;_bb []byte ;_efd []byte ;};func (_baa *Decoder )readByte ()error {if _baa ._dc .AbsolutePosition ()> _baa ._fc {if _ ,_ag :=_baa ._dc .Seek (-1,_ef .SeekCurrent );_ag !=nil {return _ag ;};};_gg ,_df :=_baa ._dc .ReadByte ();
if _df !=nil {return _df ;};_baa ._f =_gg ;if _baa ._f ==0xFF{_bg ,_abg :=_baa ._dc .ReadByte ();if _abg !=nil {return _abg ;};if _bg > 0x8F{_baa ._ec +=0xFF00;_baa ._b =8;if _ ,_eec :=_baa ._dc .Seek (-2,_ef .SeekCurrent );_eec !=nil {return _eec ;};}else {_baa ._ec +=uint64 (_bg )<<9;
_baa ._b =7;};}else {_gg ,_df =_baa ._dc .ReadByte ();if _df !=nil {return _df ;};_baa ._f =_gg ;_baa ._ec +=uint64 (_baa ._f )<<8;_baa ._b =8;};_baa ._ec &=0xFFFFFFFFFF;return nil ;};type Decoder struct{ContextSize []uint32 ;ReferedToContextSize []uint32 ;
_dc *_ad .Reader ;_f uint8 ;_ec uint64 ;_cb uint32 ;_cd int64 ;_b int32 ;_dd int32 ;_fc int64 ;};func (_daf *DecoderStats )cx ()byte {return _daf ._bb [_daf ._dee ]};