//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package arithmetic ;import (_g "fmt";_gf "github.com/unidoc/unipdf/v3/common";_f "github.com/unidoc/unipdf/v3/internal/bitwise";_fb "github.com/unidoc/unipdf/v3/internal/jbig2/internal";_d "io";_c "strings";);func (_caa *Decoder )readByte ()error {if _caa ._a .AbsolutePosition ()> _caa ._fbc {if _ ,_eeb :=_caa ._a .Seek (-1,_d .SeekCurrent );
_eeb !=nil {return _eeb ;};};_bgc ,_fd :=_caa ._a .ReadByte ();if _fd !=nil {return _fd ;};_caa ._ba =_bgc ;if _caa ._ba ==0xFF{_fbf ,_bdg :=_caa ._a .ReadByte ();if _bdg !=nil {return _bdg ;};if _fbf > 0x8F{_caa ._ge +=0xFF00;_caa ._ca =8;if _ ,_de :=_caa ._a .Seek (-2,_d .SeekCurrent );
_de !=nil {return _de ;};}else {_caa ._ge +=uint64 (_fbf )<<9;_caa ._ca =7;};}else {_bgc ,_fd =_caa ._a .ReadByte ();if _fd !=nil {return _fd ;};_caa ._ba =_bgc ;_caa ._ge +=uint64 (_caa ._ba )<<8;_caa ._ca =8;};_caa ._ge &=0xFFFFFFFFFF;return nil ;};func (_af *DecoderStats )toggleMps (){_af ._bfe [_af ._fdg ]^=1};
func (_cgg *DecoderStats )setEntry (_bcc int ){_ddc :=byte (_bcc &0x7f);_cgg ._ff [_cgg ._fdg ]=_ddc };var (_bf =[][4]uint32 {{0x5601,1,1,1},{0x3401,2,6,0},{0x1801,3,9,0},{0x0AC1,4,12,0},{0x0521,5,29,0},{0x0221,38,33,0},{0x5601,7,6,1},{0x5401,8,14,0},{0x4801,9,14,0},{0x3801,10,14,0},{0x3001,11,17,0},{0x2401,12,18,0},{0x1C01,13,20,0},{0x1601,29,21,0},{0x5601,15,14,1},{0x5401,16,14,0},{0x5101,17,15,0},{0x4801,18,16,0},{0x3801,19,17,0},{0x3401,20,18,0},{0x3001,21,19,0},{0x2801,22,19,0},{0x2401,23,20,0},{0x2201,24,21,0},{0x1C01,25,22,0},{0x1801,26,23,0},{0x1601,27,24,0},{0x1401,28,25,0},{0x1201,29,26,0},{0x1101,30,27,0},{0x0AC1,31,28,0},{0x09C1,32,29,0},{0x08A1,33,30,0},{0x0521,34,31,0},{0x0441,35,32,0},{0x02A1,36,33,0},{0x0221,37,34,0},{0x0141,38,35,0},{0x0111,39,36,0},{0x0085,40,37,0},{0x0049,41,38,0},{0x0025,42,39,0},{0x0015,43,40,0},{0x0009,44,41,0},{0x0005,45,42,0},{0x0001,45,43,0},{0x5601,46,46,0}};
);func (_egf *Decoder )DecodeIAID (codeLen uint64 ,stats *DecoderStats )(int64 ,error ){_egf ._bd =1;var _gb uint64 ;for _gb =0;_gb < codeLen ;_gb ++{stats .SetIndex (int32 (_egf ._bd ));_bg ,_fbe :=_egf .DecodeBit (stats );if _fbe !=nil {return 0,_fbe ;
};_egf ._bd =(_egf ._bd <<1)|int64 (_bg );};_gcb :=_egf ._bd -(1<<codeLen );return _gcb ,nil ;};func (_egb *Decoder )renormalize ()error {for {if _egb ._ca ==0{if _bda :=_egb .readByte ();_bda !=nil {return _bda ;};};_egb ._e <<=1;_egb ._ge <<=1;_egb ._ca --;
if (_egb ._e &0x8000)!=0{break ;};};_egb ._ge &=0xffffffff;return nil ;};func (_gba *Decoder )init ()error {_gba ._fbc =_gba ._a .AbsolutePosition ();_gef ,_ae :=_gba ._a .ReadByte ();if _ae !=nil {_gf .Log .Debug ("B\u0075\u0066\u0066\u0065\u0072\u0030 \u0072\u0065\u0061\u0064\u0042\u0079\u0074\u0065\u0020f\u0061\u0069\u006ce\u0064.\u0020\u0025\u0076",_ae );
return _ae ;};_gba ._ba =_gef ;_gba ._ge =uint64 (_gef )<<16;if _ae =_gba .readByte ();_ae !=nil {return _ae ;};_gba ._ge <<=7;_gba ._ca -=7;_gba ._e =0x8000;_gba ._ab ++;return nil ;};func (_be *Decoder )mpsExchange (_fde *DecoderStats ,_bfg int32 )int {_bee :=_fde ._bfe [_fde ._fdg ];
if _be ._e < _bf [_bfg ][0]{if _bf [_bfg ][3]==1{_fde .toggleMps ();};_fde .setEntry (int (_bf [_bfg ][2]));return int (1-_bee );};_fde .setEntry (int (_bf [_bfg ][1]));return int (_bee );};func (_egg *DecoderStats )Reset (){for _ffc :=0;_ffc < len (_egg ._ff );
_ffc ++{_egg ._ff [_ffc ]=0;_egg ._bfe [_ffc ]=0;};};type DecoderStats struct{_fdg int32 ;_dc int32 ;_ff []byte ;_bfe []byte ;};func (_fdc *Decoder )decodeIntBit (_fa *DecoderStats )(int ,error ){_fa .SetIndex (int32 (_fdc ._bd ));_ef ,_bb :=_fdc .DecodeBit (_fa );
if _bb !=nil {_gf .Log .Debug ("\u0041\u0072\u0069\u0074\u0068\u006d\u0065t\u0069\u0063\u0044e\u0063\u006f\u0064e\u0072\u0020'\u0064\u0065\u0063\u006f\u0064\u0065I\u006etB\u0069\u0074\u0027\u002d\u003e\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0042\u0069\u0074\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u002e\u0020\u0025\u0076",_bb );
return _ef ,_bb ;};if _fdc ._bd < 256{_fdc ._bd =((_fdc ._bd <<uint64 (1))|int64 (_ef ))&0x1ff;}else {_fdc ._bd =(((_fdc ._bd <<uint64 (1)|int64 (_ef ))&511)|256)&0x1ff;};return _ef ,nil ;};func (_ea *Decoder )lpsExchange (_ga *DecoderStats ,_cc int32 ,_caf uint32 )int {_bgf :=_ga .getMps ();
if _ea ._e < _caf {_ga .setEntry (int (_bf [_cc ][1]));_ea ._e =_caf ;return int (_bgf );};if _bf [_cc ][3]==1{_ga .toggleMps ();};_ga .setEntry (int (_bf [_cc ][2]));_ea ._e =_caf ;return int (1-_bgf );};func (_bed *DecoderStats )Copy ()*DecoderStats {_geg :=&DecoderStats {_dc :_bed ._dc ,_ff :make ([]byte ,_bed ._dc )};
copy (_geg ._ff ,_bed ._ff );return _geg ;};func (_ead *DecoderStats )SetIndex (index int32 ){_ead ._fdg =index };func (_aec *DecoderStats )getMps ()byte {return _aec ._bfe [_aec ._fdg ]};func (_gae *DecoderStats )String ()string {_cae :=&_c .Builder {};
_cae .WriteString (_g .Sprintf ("S\u0074\u0061\u0074\u0073\u003a\u0020\u0020\u0025\u0064\u000a",len (_gae ._ff )));for _gaf ,_gefa :=range _gae ._ff {if _gefa !=0{_cae .WriteString (_g .Sprintf ("N\u006f\u0074\u0020\u007aer\u006f \u0061\u0074\u003a\u0020\u0025d\u0020\u002d\u0020\u0025\u0064\u000a",_gaf ,_gefa ));
};};return _cae .String ();};func (_aa *DecoderStats )cx ()byte {return _aa ._ff [_aa ._fdg ]};func (_cb *Decoder )DecodeInt (stats *DecoderStats )(int32 ,error ){var (_gc ,_ed int32 ;_fca ,_bdbc ,_bc int ;_cg error ;);if stats ==nil {stats =NewStats (512,1);
};_cb ._bd =1;_bdbc ,_cg =_cb .decodeIntBit (stats );if _cg !=nil {return 0,_cg ;};_fca ,_cg =_cb .decodeIntBit (stats );if _cg !=nil {return 0,_cg ;};if _fca ==1{_fca ,_cg =_cb .decodeIntBit (stats );if _cg !=nil {return 0,_cg ;};if _fca ==1{_fca ,_cg =_cb .decodeIntBit (stats );
if _cg !=nil {return 0,_cg ;};if _fca ==1{_fca ,_cg =_cb .decodeIntBit (stats );if _cg !=nil {return 0,_cg ;};if _fca ==1{_fca ,_cg =_cb .decodeIntBit (stats );if _cg !=nil {return 0,_cg ;};if _fca ==1{_bc =32;_ed =4436;}else {_bc =12;_ed =340;};}else {_bc =8;
_ed =84;};}else {_bc =6;_ed =20;};}else {_bc =4;_ed =4;};}else {_bc =2;_ed =0;};for _eg :=0;_eg < _bc ;_eg ++{_fca ,_cg =_cb .decodeIntBit (stats );if _cg !=nil {return 0,_cg ;};_gc =(_gc <<1)|int32 (_fca );};_gc +=_ed ;if _bdbc ==0{return _gc ,nil ;}else if _bdbc ==1&&_gc > 0{return -_gc ,nil ;
};return 0,_fb .ErrOOB ;};type Decoder struct{ContextSize []uint32 ;ReferedToContextSize []uint32 ;_a *_f .Reader ;_ba uint8 ;_ge uint64 ;_e uint32 ;_bd int64 ;_ca int32 ;_ab int32 ;_fbc int64 ;};func NewStats (contextSize int32 ,index int32 )*DecoderStats {return &DecoderStats {_fdg :index ,_dc :contextSize ,_ff :make ([]byte ,contextSize ),_bfe :make ([]byte ,contextSize )};
};func (_ad *Decoder )DecodeBit (stats *DecoderStats )(int ,error ){var (_db int ;_fc =_bf [stats .cx ()][0];_ee =int32 (stats .cx ()););defer func (){_ad ._ab ++}();_ad ._e -=_fc ;if (_ad ._ge >>16)< uint64 (_fc ){_db =_ad .lpsExchange (stats ,_ee ,_fc );
if _ec :=_ad .renormalize ();_ec !=nil {return 0,_ec ;};}else {_ad ._ge -=uint64 (_fc )<<16;if (_ad ._e &0x8000)==0{_db =_ad .mpsExchange (stats ,_ee );if _dd :=_ad .renormalize ();_dd !=nil {return 0,_dd ;};}else {_db =int (stats .getMps ());};};return _db ,nil ;
};func New (r *_f .Reader )(*Decoder ,error ){_gg :=&Decoder {_a :r ,ContextSize :[]uint32 {16,13,10,10},ReferedToContextSize :[]uint32 {13,10}};if _bdb :=_gg .init ();_bdb !=nil {return nil ,_bdb ;};return _gg ,nil ;};func (_deb *DecoderStats )Overwrite (dNew *DecoderStats ){for _dbf :=0;
_dbf < len (_deb ._ff );_dbf ++{_deb ._ff [_dbf ]=dNew ._ff [_dbf ];_deb ._bfe [_dbf ]=dNew ._bfe [_dbf ];};};