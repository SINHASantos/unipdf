//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package arithmetic ;import (_ee "fmt";_d "github.com/unidoc/unipdf/v3/common";_g "github.com/unidoc/unipdf/v3/internal/bitwise";_b "github.com/unidoc/unipdf/v3/internal/jbig2/internal";_ed "io";_f "strings";);func (_bcf *DecoderStats )cx ()byte {return _bcf ._cceg [_bcf ._fbgg ]};
func (_beg *Decoder )DecodeIAID (codeLen uint64 ,stats *DecoderStats )(int64 ,error ){_beg ._bf =1;var _fd uint64 ;for _fd =0;_fd < codeLen ;_fd ++{stats .SetIndex (int32 (_beg ._bf ));_dg ,_eeb :=_beg .DecodeBit (stats );if _eeb !=nil {return 0,_eeb ;
};_beg ._bf =(_beg ._bf <<1)|int64 (_dg );};_eac :=_beg ._bf -(1<<codeLen );return _eac ,nil ;};func (_ceb *DecoderStats )Copy ()*DecoderStats {_fdg :=&DecoderStats {_gac :_ceb ._gac ,_cceg :make ([]byte ,_ceb ._gac )};copy (_fdg ._cceg ,_ceb ._cceg );
return _fdg ;};func (_ab *DecoderStats )toggleMps (){_ab ._fa [_ab ._fbgg ]^=1};func (_gd *DecoderStats )Reset (){for _cee :=0;_cee < len (_gd ._cceg );_cee ++{_gd ._cceg [_cee ]=0;_gd ._fa [_cee ]=0;};};func (_bga *Decoder )mpsExchange (_aae *DecoderStats ,_bcc int32 )int {_gc :=_aae ._fa [_aae ._fbgg ];
if _bga ._a < _c [_bcc ][0]{if _c [_bcc ][3]==1{_aae .toggleMps ();};_aae .setEntry (int (_c [_bcc ][2]));return int (1-_gc );};_aae .setEntry (int (_c [_bcc ][1]));return int (_gc );};func (_fg *Decoder )init ()error {_fg ._de =_fg ._ce .AbsolutePosition ();
_df ,_ede :=_fg ._ce .ReadByte ();if _ede !=nil {_d .Log .Debug ("B\u0075\u0066\u0066\u0065\u0072\u0030 \u0072\u0065\u0061\u0064\u0042\u0079\u0074\u0065\u0020f\u0061\u0069\u006ce\u0064.\u0020\u0025\u0076",_ede );return _ede ;};_fg ._edd =_df ;_fg ._eg =uint64 (_df )<<16;
if _ede =_fg .readByte ();_ede !=nil {return _ede ;};_fg ._eg <<=7;_fg ._cf -=7;_fg ._a =0x8000;_fg ._ea ++;return nil ;};type Decoder struct{ContextSize []uint32 ;ReferedToContextSize []uint32 ;_ce *_g .Reader ;_edd uint8 ;_eg uint64 ;_a uint32 ;_bf int64 ;
_cf int32 ;_ea int32 ;_de int64 ;};func (_cb *Decoder )DecodeInt (stats *DecoderStats )(int32 ,error ){var (_ge ,_bg int32 ;_bc ,_cbb ,_fbg int ;_ead error ;);if stats ==nil {stats =NewStats (512,1);};_cb ._bf =1;_cbb ,_ead =_cb .decodeIntBit (stats );
if _ead !=nil {return 0,_ead ;};_bc ,_ead =_cb .decodeIntBit (stats );if _ead !=nil {return 0,_ead ;};if _bc ==1{_bc ,_ead =_cb .decodeIntBit (stats );if _ead !=nil {return 0,_ead ;};if _bc ==1{_bc ,_ead =_cb .decodeIntBit (stats );if _ead !=nil {return 0,_ead ;
};if _bc ==1{_bc ,_ead =_cb .decodeIntBit (stats );if _ead !=nil {return 0,_ead ;};if _bc ==1{_bc ,_ead =_cb .decodeIntBit (stats );if _ead !=nil {return 0,_ead ;};if _bc ==1{_fbg =32;_bg =4436;}else {_fbg =12;_bg =340;};}else {_fbg =8;_bg =84;};}else {_fbg =6;
_bg =20;};}else {_fbg =4;_bg =4;};}else {_fbg =2;_bg =0;};for _bgg :=0;_bgg < _fbg ;_bgg ++{_bc ,_ead =_cb .decodeIntBit (stats );if _ead !=nil {return 0,_ead ;};_ge =(_ge <<1)|int32 (_bc );};_ge +=_bg ;if _cbb ==0{return _ge ,nil ;}else if _cbb ==1&&_ge > 0{return -_ge ,nil ;
};return 0,_b .ErrOOB ;};func (_fb *Decoder )DecodeBit (stats *DecoderStats )(int ,error ){var (_eb int ;_ca =_c [stats .cx ()][0];_cg =int32 (stats .cx ()););defer func (){_fb ._ea ++}();_fb ._a -=_ca ;if (_fb ._eg >>16)< uint64 (_ca ){_eb =_fb .lpsExchange (stats ,_cg ,_ca );
if _be :=_fb .renormalize ();_be !=nil {return 0,_be ;};}else {_fb ._eg -=uint64 (_ca )<<16;if (_fb ._a &0x8000)==0{_eb =_fb .mpsExchange (stats ,_cg );if _cc :=_fb .renormalize ();_cc !=nil {return 0,_cc ;};}else {_eb =int (stats .getMps ());};};return _eb ,nil ;
};func (_edg *DecoderStats )String ()string {_ccg :=&_f .Builder {};_ccg .WriteString (_ee .Sprintf ("S\u0074\u0061\u0074\u0073\u003a\u0020\u0020\u0025\u0064\u000a",len (_edg ._cceg )));for _fec ,_ba :=range _edg ._cceg {if _ba !=0{_ccg .WriteString (_ee .Sprintf ("N\u006f\u0074\u0020\u007aer\u006f \u0061\u0074\u003a\u0020\u0025d\u0020\u002d\u0020\u0025\u0064\u000a",_fec ,_ba ));
};};return _ccg .String ();};func NewStats (contextSize int32 ,index int32 )*DecoderStats {return &DecoderStats {_fbgg :index ,_gac :contextSize ,_cceg :make ([]byte ,contextSize ),_fa :make ([]byte ,contextSize )};};type DecoderStats struct{_fbgg int32 ;
_gac int32 ;_cceg []byte ;_fa []byte ;};func (_bfe *Decoder )lpsExchange (_bb *DecoderStats ,_db int32 ,_cd uint32 )int {_gce :=_bb .getMps ();if _bfe ._a < _cd {_bb .setEntry (int (_c [_db ][1]));_bfe ._a =_cd ;return int (_gce );};if _c [_db ][3]==1{_bb .toggleMps ();
};_bb .setEntry (int (_c [_db ][2]));_bfe ._a =_cd ;return int (1-_gce );};func (_gcc *DecoderStats )getMps ()byte {return _gcc ._fa [_gcc ._fbgg ]};var (_c =[][4]uint32 {{0x5601,1,1,1},{0x3401,2,6,0},{0x1801,3,9,0},{0x0AC1,4,12,0},{0x0521,5,29,0},{0x0221,38,33,0},{0x5601,7,6,1},{0x5401,8,14,0},{0x4801,9,14,0},{0x3801,10,14,0},{0x3001,11,17,0},{0x2401,12,18,0},{0x1C01,13,20,0},{0x1601,29,21,0},{0x5601,15,14,1},{0x5401,16,14,0},{0x5101,17,15,0},{0x4801,18,16,0},{0x3801,19,17,0},{0x3401,20,18,0},{0x3001,21,19,0},{0x2801,22,19,0},{0x2401,23,20,0},{0x2201,24,21,0},{0x1C01,25,22,0},{0x1801,26,23,0},{0x1601,27,24,0},{0x1401,28,25,0},{0x1201,29,26,0},{0x1101,30,27,0},{0x0AC1,31,28,0},{0x09C1,32,29,0},{0x08A1,33,30,0},{0x0521,34,31,0},{0x0441,35,32,0},{0x02A1,36,33,0},{0x0221,37,34,0},{0x0141,38,35,0},{0x0111,39,36,0},{0x0085,40,37,0},{0x0049,41,38,0},{0x0025,42,39,0},{0x0015,43,40,0},{0x0009,44,41,0},{0x0005,45,42,0},{0x0001,45,43,0},{0x5601,46,46,0}};
);func (_gee *Decoder )renormalize ()error {for {if _gee ._cf ==0{if _cae :=_gee .readByte ();_cae !=nil {return _cae ;};};_gee ._a <<=1;_gee ._eg <<=1;_gee ._cf --;if (_gee ._a &0x8000)!=0{break ;};};_gee ._eg &=0xffffffff;return nil ;};func New (r *_g .Reader )(*Decoder ,error ){_aa :=&Decoder {_ce :r ,ContextSize :[]uint32 {16,13,10,10},ReferedToContextSize :[]uint32 {13,10}};
if _ga :=_aa .init ();_ga !=nil {return nil ,_ga ;};return _aa ,nil ;};func (_eba *DecoderStats )SetIndex (index int32 ){_eba ._fbgg =index };func (_gb *DecoderStats )Overwrite (dNew *DecoderStats ){for _gbf :=0;_gbf < len (_gb ._cceg );_gbf ++{_gb ._cceg [_gbf ]=dNew ._cceg [_gbf ];
_gb ._fa [_gbf ]=dNew ._fa [_gbf ];};};func (_ac *DecoderStats )setEntry (_ec int ){_fgf :=byte (_ec &0x7f);_ac ._cceg [_ac ._fbgg ]=_fgf };func (_dgf *Decoder )decodeIntBit (_ddc *DecoderStats )(int ,error ){_ddc .SetIndex (int32 (_dgf ._bf ));_eab ,_ff :=_dgf .DecodeBit (_ddc );
if _ff !=nil {_d .Log .Debug ("\u0041\u0072\u0069\u0074\u0068\u006d\u0065t\u0069\u0063\u0044e\u0063\u006f\u0064e\u0072\u0020'\u0064\u0065\u0063\u006f\u0064\u0065I\u006etB\u0069\u0074\u0027\u002d\u003e\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0042\u0069\u0074\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u002e\u0020\u0025\u0076",_ff );
return _eab ,_ff ;};if _dgf ._bf < 256{_dgf ._bf =((_dgf ._bf <<uint64 (1))|int64 (_eab ))&0x1ff;}else {_dgf ._bf =(((_dgf ._bf <<uint64 (1)|int64 (_eab ))&511)|256)&0x1ff;};return _eab ,nil ;};func (_dfg *Decoder )readByte ()error {if _dfg ._ce .AbsolutePosition ()> _dfg ._de {if _ ,_cce :=_dfg ._ce .Seek (-1,_ed .SeekCurrent );
_cce !=nil {return _cce ;};};_ccc ,_gg :=_dfg ._ce .ReadByte ();if _gg !=nil {return _gg ;};_dfg ._edd =_ccc ;if _dfg ._edd ==0xFF{_dd ,_fe :=_dfg ._ce .ReadByte ();if _fe !=nil {return _fe ;};if _dd > 0x8F{_dfg ._eg +=0xFF00;_dfg ._cf =8;if _ ,_bed :=_dfg ._ce .Seek (-2,_ed .SeekCurrent );
_bed !=nil {return _bed ;};}else {_dfg ._eg +=uint64 (_dd )<<9;_dfg ._cf =7;};}else {_ccc ,_gg =_dfg ._ce .ReadByte ();if _gg !=nil {return _gg ;};_dfg ._edd =_ccc ;_dfg ._eg +=uint64 (_dfg ._edd )<<8;_dfg ._cf =8;};_dfg ._eg &=0xFFFFFFFFFF;return nil ;
};