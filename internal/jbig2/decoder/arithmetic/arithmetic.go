//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package arithmetic ;import (_eg "fmt";_fd "github.com/unidoc/unipdf/v4/common";_ee "github.com/unidoc/unipdf/v4/internal/bitwise";_ac "github.com/unidoc/unipdf/v4/internal/jbig2/internal";_e "io";_f "strings";);func (_aba *Decoder )decodeIntBit (_ec *DecoderStats )(int ,error ){_ec .SetIndex (int32 (_aba ._gf ));
_bdd ,_gd :=_aba .DecodeBit (_ec );if _gd !=nil {_fd .Log .Debug ("\u0041\u0072\u0069\u0074\u0068\u006d\u0065t\u0069\u0063\u0044e\u0063\u006f\u0064e\u0072\u0020'\u0064\u0065\u0063\u006f\u0064\u0065I\u006etB\u0069\u0074\u0027\u002d\u003e\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0042\u0069\u0074\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u002e\u0020\u0025\u0076",_gd );
return _bdd ,_gd ;};if _aba ._gf < 256{_aba ._gf =((_aba ._gf <<uint64 (1))|int64 (_bdd ))&0x1ff;}else {_aba ._gf =(((_aba ._gf <<uint64 (1)|int64 (_bdd ))&511)|256)&0x1ff;};return _bdd ,nil ;};func (_de *DecoderStats )cx ()byte {return _de ._gdf [_de ._bb ]};
type DecoderStats struct{_bb int32 ;_bgg int32 ;_gdf []byte ;_eb []byte ;};func (_db *Decoder )renormalize ()error {for {if _db ._ge ==0{if _adg :=_db .readByte ();_adg !=nil {return _adg ;};};_db ._g <<=1;_db ._cf <<=1;_db ._ge --;if (_db ._g &0x8000)!=0{break ;
};};_db ._cf &=0xffffffff;return nil ;};func (_bg *Decoder )DecodeIAID (codeLen uint64 ,stats *DecoderStats )(int64 ,error ){_bg ._gf =1;var _adf uint64 ;for _adf =0;_adf < codeLen ;_adf ++{stats .SetIndex (int32 (_bg ._gf ));_ae ,_bd :=_bg .DecodeBit (stats );
if _bd !=nil {return 0,_bd ;};_bg ._gf =(_bg ._gf <<1)|int64 (_ae );};_ca :=_bg ._gf -(1<<codeLen );return _ca ,nil ;};func (_cb *Decoder )DecodeInt (stats *DecoderStats )(int32 ,error ){var (_bcc ,_cd int32 ;_cfa ,_gef ,_dd int ;_eag error ;);if stats ==nil {stats =NewStats (512,1);
};_cb ._gf =1;_gef ,_eag =_cb .decodeIntBit (stats );if _eag !=nil {return 0,_eag ;};_cfa ,_eag =_cb .decodeIntBit (stats );if _eag !=nil {return 0,_eag ;};if _cfa ==1{_cfa ,_eag =_cb .decodeIntBit (stats );if _eag !=nil {return 0,_eag ;};if _cfa ==1{_cfa ,_eag =_cb .decodeIntBit (stats );
if _eag !=nil {return 0,_eag ;};if _cfa ==1{_cfa ,_eag =_cb .decodeIntBit (stats );if _eag !=nil {return 0,_eag ;};if _cfa ==1{_cfa ,_eag =_cb .decodeIntBit (stats );if _eag !=nil {return 0,_eag ;};if _cfa ==1{_dd =32;_cd =4436;}else {_dd =12;_cd =340;
};}else {_dd =8;_cd =84;};}else {_dd =6;_cd =20;};}else {_dd =4;_cd =4;};}else {_dd =2;_cd =0;};for _eec :=0;_eec < _dd ;_eec ++{_cfa ,_eag =_cb .decodeIntBit (stats );if _eag !=nil {return 0,_eag ;};_bcc =(_bcc <<1)|int32 (_cfa );};_bcc +=_cd ;if _gef ==0{return _bcc ,nil ;
}else if _gef ==1&&_bcc > 0{return -_bcc ,nil ;};return 0,_ac .ErrOOB ;};func (_ff *Decoder )init ()error {_ff ._ad =_ff ._b .AbsolutePosition ();_ab ,_abb :=_ff ._b .ReadByte ();if _abb !=nil {_fd .Log .Debug ("B\u0075\u0066\u0066\u0065\u0072\u0030 \u0072\u0065\u0061\u0064\u0042\u0079\u0074\u0065\u0020f\u0061\u0069\u006ce\u0064.\u0020\u0025\u0076",_abb );
return _abb ;};_ff ._c =_ab ;_ff ._cf =uint64 (_ab )<<16;if _abb =_ff .readByte ();_abb !=nil {return _abb ;};_ff ._cf <<=7;_ff ._ge -=7;_ff ._g =0x8000;_ff ._ea ++;return nil ;};func (_bbg *DecoderStats )SetIndex (index int32 ){_bbg ._bb =index };func (_bdc *DecoderStats )Reset (){for _ggg :=0;
_ggg < len (_bdc ._gdf );_ggg ++{_bdc ._gdf [_ggg ]=0;_bdc ._eb [_ggg ]=0;};};func (_fa *Decoder )mpsExchange (_cba *DecoderStats ,_agg int32 )int {_bgb :=_cba ._eb [_cba ._bb ];if _fa ._g < _d [_agg ][0]{if _d [_agg ][3]==1{_cba .toggleMps ();};_cba .setEntry (int (_d [_agg ][2]));
return int (1-_bgb );};_cba .setEntry (int (_d [_agg ][1]));return int (_bgb );};func (_eff *DecoderStats )Overwrite (dNew *DecoderStats ){for _dba :=0;_dba < len (_eff ._gdf );_dba ++{_eff ._gdf [_dba ]=dNew ._gdf [_dba ];_eff ._eb [_dba ]=dNew ._eb [_dba ];
};};func (_ag *Decoder )readByte ()error {if _ag ._b .AbsolutePosition ()> _ag ._ad {if _ ,_eae :=_ag ._b .Seek (-1,_e .SeekCurrent );_eae !=nil {return _eae ;};};_fdb ,_ffc :=_ag ._b .ReadByte ();if _ffc !=nil {return _ffc ;};_ag ._c =_fdb ;if _ag ._c ==0xFF{_geb ,_ffd :=_ag ._b .ReadByte ();
if _ffd !=nil {return _ffd ;};if _geb > 0x8F{_ag ._cf +=0xFF00;_ag ._ge =8;if _ ,_ef :=_ag ._b .Seek (-2,_e .SeekCurrent );_ef !=nil {return _ef ;};}else {_ag ._cf +=uint64 (_geb )<<9;_ag ._ge =7;};}else {_fdb ,_ffc =_ag ._b .ReadByte ();if _ffc !=nil {return _ffc ;
};_ag ._c =_fdb ;_ag ._cf +=uint64 (_ag ._c )<<8;_ag ._ge =8;};_ag ._cf &=0xFFFFFFFFFF;return nil ;};func (_gc *DecoderStats )setEntry (_cg int ){_gde :=byte (_cg &0x7f);_gc ._gdf [_gc ._bb ]=_gde };var (_d =[][4]uint32 {{0x5601,1,1,1},{0x3401,2,6,0},{0x1801,3,9,0},{0x0AC1,4,12,0},{0x0521,5,29,0},{0x0221,38,33,0},{0x5601,7,6,1},{0x5401,8,14,0},{0x4801,9,14,0},{0x3801,10,14,0},{0x3001,11,17,0},{0x2401,12,18,0},{0x1C01,13,20,0},{0x1601,29,21,0},{0x5601,15,14,1},{0x5401,16,14,0},{0x5101,17,15,0},{0x4801,18,16,0},{0x3801,19,17,0},{0x3401,20,18,0},{0x3001,21,19,0},{0x2801,22,19,0},{0x2401,23,20,0},{0x2201,24,21,0},{0x1C01,25,22,0},{0x1801,26,23,0},{0x1601,27,24,0},{0x1401,28,25,0},{0x1201,29,26,0},{0x1101,30,27,0},{0x0AC1,31,28,0},{0x09C1,32,29,0},{0x08A1,33,30,0},{0x0521,34,31,0},{0x0441,35,32,0},{0x02A1,36,33,0},{0x0221,37,34,0},{0x0141,38,35,0},{0x0111,39,36,0},{0x0085,40,37,0},{0x0049,41,38,0},{0x0025,42,39,0},{0x0015,43,40,0},{0x0009,44,41,0},{0x0005,45,42,0},{0x0001,45,43,0},{0x5601,46,46,0}};
);func (_fdd *Decoder )lpsExchange (_aa *DecoderStats ,_cc int32 ,_baa uint32 )int {_cfg :=_aa .getMps ();if _fdd ._g < _baa {_aa .setEntry (int (_d [_cc ][1]));_fdd ._g =_baa ;return int (_cfg );};if _d [_cc ][3]==1{_aa .toggleMps ();};_aa .setEntry (int (_d [_cc ][2]));
_fdd ._g =_baa ;return int (1-_cfg );};func (_fb *DecoderStats )Copy ()*DecoderStats {_fbf :=&DecoderStats {_bgg :_fb ._bgg ,_gdf :make ([]byte ,_fb ._bgg )};copy (_fbf ._gdf ,_fb ._gdf );return _fbf ;};func (_ega *Decoder )DecodeBit (stats *DecoderStats )(int ,error ){var (_acg int ;
_ba =_d [stats .cx ()][0];_fc =int32 (stats .cx ()););defer func (){_ega ._ea ++}();_ega ._g -=_ba ;if (_ega ._cf >>16)< uint64 (_ba ){_acg =_ega .lpsExchange (stats ,_fc ,_ba );if _gg :=_ega .renormalize ();_gg !=nil {return 0,_gg ;};}else {_ega ._cf -=uint64 (_ba )<<16;
if (_ega ._g &0x8000)==0{_acg =_ega .mpsExchange (stats ,_fc );if _df :=_ega .renormalize ();_df !=nil {return 0,_df ;};}else {_acg =int (stats .getMps ());};};return _acg ,nil ;};func (_ffb *DecoderStats )String ()string {_aae :=&_f .Builder {};_aae .WriteString (_eg .Sprintf ("S\u0074\u0061\u0074\u0073\u003a\u0020\u0020\u0025\u0064\u000a",len (_ffb ._gdf )));
for _ffdc ,_baag :=range _ffb ._gdf {if _baag !=0{_aae .WriteString (_eg .Sprintf ("N\u006f\u0074\u0020\u007aer\u006f \u0061\u0074\u003a\u0020\u0025d\u0020\u002d\u0020\u0025\u0064\u000a",_ffdc ,_baag ));};};return _aae .String ();};func (_dg *DecoderStats )getMps ()byte {return _dg ._eb [_dg ._bb ]};
func New (r *_ee .Reader )(*Decoder ,error ){_bc :=&Decoder {_b :r ,ContextSize :[]uint32 {16,13,10,10},ReferedToContextSize :[]uint32 {13,10}};if _fe :=_bc .init ();_fe !=nil {return nil ,_fe ;};return _bc ,nil ;};func (_da *DecoderStats )toggleMps (){_da ._eb [_da ._bb ]^=1};
func NewStats (contextSize int32 ,index int32 )*DecoderStats {return &DecoderStats {_bb :index ,_bgg :contextSize ,_gdf :make ([]byte ,contextSize ),_eb :make ([]byte ,contextSize )};};type Decoder struct{ContextSize []uint32 ;ReferedToContextSize []uint32 ;
_b *_ee .Reader ;_c uint8 ;_cf uint64 ;_g uint32 ;_gf int64 ;_ge int32 ;_ea int32 ;_ad int64 ;};