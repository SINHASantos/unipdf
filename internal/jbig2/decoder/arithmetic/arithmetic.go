//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package arithmetic ;import (_bg "fmt";_aa "github.com/unidoc/unipdf/v3/common";_c "github.com/unidoc/unipdf/v3/internal/bitwise";_f "github.com/unidoc/unipdf/v3/internal/jbig2/internal";_e "io";_b "strings";);func (_aaa *Decoder )lpsExchange (_aaad *DecoderStats ,_cc int32 ,_aff uint32 )int {_bc :=_aaad .getMps ();
if _aaa ._af < _aff {_aaad .setEntry (int (_bb [_cc ][1]));_aaa ._af =_aff ;return int (_bc );};if _bb [_cc ][3]==1{_aaad .toggleMps ();};_aaad .setEntry (int (_bb [_cc ][2]));_aaa ._af =_aff ;return int (1-_bc );};func (_dg *Decoder )decodeIntBit (_cd *DecoderStats )(int ,error ){_cd .SetIndex (int32 (_dg ._d ));
_ddb ,_adg :=_dg .DecodeBit (_cd );if _adg !=nil {_aa .Log .Debug ("\u0041\u0072\u0069\u0074\u0068\u006d\u0065t\u0069\u0063\u0044e\u0063\u006f\u0064e\u0072\u0020'\u0064\u0065\u0063\u006f\u0064\u0065I\u006etB\u0069\u0074\u0027\u002d\u003e\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0042\u0069\u0074\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u002e\u0020\u0025\u0076",_adg );
return _ddb ,_adg ;};if _dg ._d < 256{_dg ._d =((_dg ._d <<uint64 (1))|int64 (_ddb ))&0x1ff;}else {_dg ._d =(((_dg ._d <<uint64 (1)|int64 (_ddb ))&511)|256)&0x1ff;};return _ddb ,nil ;};type DecoderStats struct{_afc int32 ;_ac int32 ;_cg []byte ;_bdg []byte ;
};func (_adc *DecoderStats )String ()string {_dfd :=&_b .Builder {};_dfd .WriteString (_bg .Sprintf ("S\u0074\u0061\u0074\u0073\u003a\u0020\u0020\u0025\u0064\u000a",len (_adc ._cg )));for _gdg ,_cbf :=range _adc ._cg {if _cbf !=0{_dfd .WriteString (_bg .Sprintf ("N\u006f\u0074\u0020\u007aer\u006f \u0061\u0074\u003a\u0020\u0025d\u0020\u002d\u0020\u0025\u0064\u000a",_gdg ,_cbf ));
};};return _dfd .String ();};func (_ec *Decoder )mpsExchange (_ffg *DecoderStats ,_dae int32 )int {_gbd :=_ffg ._bdg [_ffg ._afc ];if _ec ._af < _bb [_dae ][0]{if _bb [_dae ][3]==1{_ffg .toggleMps ();};_ffg .setEntry (int (_bb [_dae ][2]));return int (1-_gbd );
};_ffg .setEntry (int (_bb [_dae ][1]));return int (_gbd );};func (_cee *Decoder )renormalize ()error {for {if _cee ._ad ==0{if _gd :=_cee .readByte ();_gd !=nil {return _gd ;};};_cee ._af <<=1;_cee ._g <<=1;_cee ._ad --;if (_cee ._af &0x8000)!=0{break ;
};};_cee ._g &=0xffffffff;return nil ;};func (_dc *Decoder )init ()error {_dc ._gc =_dc ._ee .AbsolutePosition ();_ea ,_efb :=_dc ._ee .ReadByte ();if _efb !=nil {_aa .Log .Debug ("B\u0075\u0066\u0066\u0065\u0072\u0030 \u0072\u0065\u0061\u0064\u0042\u0079\u0074\u0065\u0020f\u0061\u0069\u006ce\u0064.\u0020\u0025\u0076",_efb );
return _efb ;};_dc ._cb =_ea ;_dc ._g =uint64 (_ea )<<16;if _efb =_dc .readByte ();_efb !=nil {return _efb ;};_dc ._g <<=7;_dc ._ad -=7;_dc ._af =0x8000;_dc ._da ++;return nil ;};func (_eb *DecoderStats )toggleMps (){_eb ._bdg [_eb ._afc ]^=1};func (_fg *DecoderStats )Copy ()*DecoderStats {_df :=&DecoderStats {_ac :_fg ._ac ,_cg :make ([]byte ,_fg ._ac )};
copy (_df ._cg ,_fg ._cg );return _df ;};func (_gcc *DecoderStats )Reset (){for _bdd :=0;_bdd < len (_gcc ._cg );_bdd ++{_gcc ._cg [_bdd ]=0;_gcc ._bdg [_bdd ]=0;};};func (_db *Decoder )DecodeIAID (codeLen uint64 ,stats *DecoderStats )(int64 ,error ){_db ._d =1;
var _cf uint64 ;for _cf =0;_cf < codeLen ;_cf ++{stats .SetIndex (int32 (_db ._d ));_eeg ,_ffb :=_db .DecodeBit (stats );if _ffb !=nil {return 0,_ffb ;};_db ._d =(_db ._d <<1)|int64 (_eeg );};_fb :=_db ._d -(1<<codeLen );return _fb ,nil ;};func NewStats (contextSize int32 ,index int32 )*DecoderStats {return &DecoderStats {_afc :index ,_ac :contextSize ,_cg :make ([]byte ,contextSize ),_bdg :make ([]byte ,contextSize )};
};func (_gdb *DecoderStats )SetIndex (index int32 ){_gdb ._afc =index };func New (r *_c .Reader )(*Decoder ,error ){_ce :=&Decoder {_ee :r ,ContextSize :[]uint32 {16,13,10,10},ReferedToContextSize :[]uint32 {13,10}};if _fd :=_ce .init ();_fd !=nil {return nil ,_fd ;
};return _ce ,nil ;};func (_fdg *Decoder )DecodeBit (stats *DecoderStats )(int ,error ){var (_ca int ;_ed =_bb [stats .cx ()][0];_ba =int32 (stats .cx ()););defer func (){_fdg ._da ++}();_fdg ._af -=_ed ;if (_fdg ._g >>16)< uint64 (_ed ){_ca =_fdg .lpsExchange (stats ,_ba ,_ed );
if _be :=_fdg .renormalize ();_be !=nil {return 0,_be ;};}else {_fdg ._g -=uint64 (_ed )<<16;if (_fdg ._af &0x8000)==0{_ca =_fdg .mpsExchange (stats ,_ba );if _ge :=_fdg .renormalize ();_ge !=nil {return 0,_ge ;};}else {_ca =int (stats .getMps ());};};
return _ca ,nil ;};func (_bgg *DecoderStats )Overwrite (dNew *DecoderStats ){for _gde :=0;_gde < len (_bgg ._cg );_gde ++{_bgg ._cg [_gde ]=dNew ._cg [_gde ];_bgg ._bdg [_gde ]=dNew ._bdg [_gde ];};};var (_bb =[][4]uint32 {{0x5601,1,1,1},{0x3401,2,6,0},{0x1801,3,9,0},{0x0AC1,4,12,0},{0x0521,5,29,0},{0x0221,38,33,0},{0x5601,7,6,1},{0x5401,8,14,0},{0x4801,9,14,0},{0x3801,10,14,0},{0x3001,11,17,0},{0x2401,12,18,0},{0x1C01,13,20,0},{0x1601,29,21,0},{0x5601,15,14,1},{0x5401,16,14,0},{0x5101,17,15,0},{0x4801,18,16,0},{0x3801,19,17,0},{0x3401,20,18,0},{0x3001,21,19,0},{0x2801,22,19,0},{0x2401,23,20,0},{0x2201,24,21,0},{0x1C01,25,22,0},{0x1801,26,23,0},{0x1601,27,24,0},{0x1401,28,25,0},{0x1201,29,26,0},{0x1101,30,27,0},{0x0AC1,31,28,0},{0x09C1,32,29,0},{0x08A1,33,30,0},{0x0521,34,31,0},{0x0441,35,32,0},{0x02A1,36,33,0},{0x0221,37,34,0},{0x0141,38,35,0},{0x0111,39,36,0},{0x0085,40,37,0},{0x0049,41,38,0},{0x0025,42,39,0},{0x0015,43,40,0},{0x0009,44,41,0},{0x0005,45,42,0},{0x0001,45,43,0},{0x5601,46,46,0}};
);func (_dd *Decoder )DecodeInt (stats *DecoderStats )(int32 ,error ){var (_ff ,_baa int32 ;_ceb ,_gf ,_ef int ;_bd error ;);if stats ==nil {stats =NewStats (512,1);};_dd ._d =1;_gf ,_bd =_dd .decodeIntBit (stats );if _bd !=nil {return 0,_bd ;};_ceb ,_bd =_dd .decodeIntBit (stats );
if _bd !=nil {return 0,_bd ;};if _ceb ==1{_ceb ,_bd =_dd .decodeIntBit (stats );if _bd !=nil {return 0,_bd ;};if _ceb ==1{_ceb ,_bd =_dd .decodeIntBit (stats );if _bd !=nil {return 0,_bd ;};if _ceb ==1{_ceb ,_bd =_dd .decodeIntBit (stats );if _bd !=nil {return 0,_bd ;
};if _ceb ==1{_ceb ,_bd =_dd .decodeIntBit (stats );if _bd !=nil {return 0,_bd ;};if _ceb ==1{_ef =32;_baa =4436;}else {_ef =12;_baa =340;};}else {_ef =8;_baa =84;};}else {_ef =6;_baa =20;};}else {_ef =4;_baa =4;};}else {_ef =2;_baa =0;};for _caa :=0;_caa < _ef ;
_caa ++{_ceb ,_bd =_dd .decodeIntBit (stats );if _bd !=nil {return 0,_bd ;};_ff =(_ff <<1)|int32 (_ceb );};_ff +=_baa ;if _gf ==0{return _ff ,nil ;}else if _gf ==1&&_ff > 0{return -_ff ,nil ;};return 0,_f .ErrOOB ;};func (_fbb *DecoderStats )getMps ()byte {return _fbb ._bdg [_fbb ._afc ]};
func (_dca *DecoderStats )setEntry (_fdc int ){_ade :=byte (_fdc &0x7f);_dca ._cg [_dca ._afc ]=_ade };func (_bbb *Decoder )readByte ()error {if _bbb ._ee .AbsolutePosition ()> _bbb ._gc {if _ ,_gb :=_bbb ._ee .Seek (-1,_e .SeekCurrent );_gb !=nil {return _gb ;
};};_afe ,_aed :=_bbb ._ee .ReadByte ();if _aed !=nil {return _aed ;};_bbb ._cb =_afe ;if _bbb ._cb ==0xFF{_bgf ,_gec :=_bbb ._ee .ReadByte ();if _gec !=nil {return _gec ;};if _bgf > 0x8F{_bbb ._g +=0xFF00;_bbb ._ad =8;if _ ,_dbg :=_bbb ._ee .Seek (-2,_e .SeekCurrent );
_dbg !=nil {return _dbg ;};}else {_bbb ._g +=uint64 (_bgf )<<9;_bbb ._ad =7;};}else {_afe ,_aed =_bbb ._ee .ReadByte ();if _aed !=nil {return _aed ;};_bbb ._cb =_afe ;_bbb ._g +=uint64 (_bbb ._cb )<<8;_bbb ._ad =8;};_bbb ._g &=0xFFFFFFFFFF;return nil ;
};type Decoder struct{ContextSize []uint32 ;ReferedToContextSize []uint32 ;_ee *_c .Reader ;_cb uint8 ;_g uint64 ;_af uint32 ;_d int64 ;_ad int32 ;_da int32 ;_gc int64 ;};func (_bf *DecoderStats )cx ()byte {return _bf ._cg [_bf ._afc ]};