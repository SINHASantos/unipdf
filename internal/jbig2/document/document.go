//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package document ;import (_f "encoding/binary";_cf "fmt";_cd "github.com/unidoc/unipdf/v4/common";_ee "github.com/unidoc/unipdf/v4/internal/bitwise";_ec "github.com/unidoc/unipdf/v4/internal/jbig2/basic";_ca "github.com/unidoc/unipdf/v4/internal/jbig2/bitmap";
_eeb "github.com/unidoc/unipdf/v4/internal/jbig2/document/segments";_ed "github.com/unidoc/unipdf/v4/internal/jbig2/encoder/classer";_da "github.com/unidoc/unipdf/v4/internal/jbig2/errors";_eg "io";_e "math";_d "runtime/debug";);func _daf (_gefa *_ee .Reader ,_bag *Globals )(*Document ,error ){_bffg :=&Document {Pages :make (map[int ]*Page ),InputStream :_gefa ,OrganizationType :_eeb .OSequential ,NumberOfPagesUnknown :true ,GlobalSegments :_bag ,_ce :9};
if _bffg .GlobalSegments ==nil {_bffg .GlobalSegments =&Globals {};};if _dcf :=_bffg .mapData ();_dcf !=nil {return nil ,_dcf ;};return _bffg ,nil ;};func (_bbd *Page )fitsPage (_bda *_eeb .PageInformationSegment ,_bga *_ca .Bitmap )bool {return _bbd .countRegions ()==1&&_bda .DefaultPixelValue ==0&&_bda .PageBMWidth ==_bga .Width &&_bda .PageBMHeight ==_bga .Height ;
};func (_ade *Globals )GetSegment (segmentNumber int )(*_eeb .Header ,error ){const _afad ="\u0047l\u006fb\u0061\u006c\u0073\u002e\u0047e\u0074\u0053e\u0067\u006d\u0065\u006e\u0074";if _ade ==nil {return nil ,_da .Error (_afad ,"\u0067\u006c\u006f\u0062al\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if len (_ade .Segments )==0{return nil ,_da .Error (_afad ,"\u0067\u006c\u006f\u0062\u0061\u006c\u0073\u0020\u0061\u0072\u0065\u0020e\u006d\u0070\u0074\u0079");};var _bgc *_eeb .Header ;for _ ,_bgc =range _ade .Segments {if _bgc .SegmentNumber ==uint32 (segmentNumber ){break ;
};};if _bgc ==nil {return nil ,_da .Error (_afad ,"\u0073\u0065\u0067\u006d\u0065\u006e\u0074\u0020\u006e\u006f\u0074\u0020f\u006f\u0075\u006e\u0064");};return _bgc ,nil ;};func (_dfg *Document )encodeFileHeader (_gfb _ee .BinaryWriter )(_gcf int ,_bae error ){const _bfa ="\u0065\u006ec\u006f\u0064\u0065F\u0069\u006c\u0065\u0048\u0065\u0061\u0064\u0065\u0072";
_gcf ,_bae =_gfb .Write (_b );if _bae !=nil {return _gcf ,_da .Wrap (_bae ,_bfa ,"\u0069\u0064");};if _bae =_gfb .WriteByte (0x01);_bae !=nil {return _gcf ,_da .Wrap (_bae ,_bfa ,"\u0066\u006c\u0061g\u0073");};_gcf ++;_bfce :=make ([]byte ,4);_f .BigEndian .PutUint32 (_bfce ,_dfg .NumberOfPages );
_ged ,_bae :=_gfb .Write (_bfce );if _bae !=nil {return _ged ,_da .Wrap (_bae ,_bfa ,"p\u0061\u0067\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_gcf +=_ged ;return _gcf ,nil ;};func (_edd *Document )isFileHeaderPresent ()(bool ,error ){_edd .InputStream .Mark ();
for _ ,_abga :=range _b {_ded ,_dae :=_edd .InputStream .ReadByte ();if _dae !=nil {return false ,_dae ;};if _abga !=_ded {_edd .InputStream .Reset ();return false ,nil ;};};_edd .InputStream .Reset ();return true ,nil ;};func (_dafgg *Page )GetBitmap ()(_bfcf *_ca .Bitmap ,_acc error ){_cd .Log .Trace (_cf .Sprintf ("\u005b\u0050\u0041G\u0045\u005d\u005b\u0023%\u0064\u005d\u0020\u0047\u0065\u0074\u0042i\u0074\u006d\u0061\u0070\u0020\u0062\u0065\u0067\u0069\u006e\u0073\u002e\u002e\u002e",_dafgg .PageNumber ));
defer func (){if _acc !=nil {_cd .Log .Trace (_cf .Sprintf ("\u005b\u0050\u0041\u0047\u0045\u005d\u005b\u0023\u0025\u0064\u005d\u0020\u0047\u0065\u0074B\u0069t\u006d\u0061\u0070\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u002e\u0020\u0025\u0076",_dafgg .PageNumber ,_acc ));
}else {_cd .Log .Trace (_cf .Sprintf ("\u005b\u0050\u0041\u0047\u0045\u005d\u005b\u0023\u0025\u0064]\u0020\u0047\u0065\u0074\u0042\u0069\u0074m\u0061\u0070\u0020\u0066\u0069\u006e\u0069\u0073\u0068\u0065\u0064",_dafgg .PageNumber ));};}();if _dafgg .Bitmap !=nil {return _dafgg .Bitmap ,nil ;
};_acc =_dafgg .composePageBitmap ();if _acc !=nil {return nil ,_acc ;};return _dafgg .Bitmap ,nil ;};func (_aac *Page )countRegions ()int {var _ebga int ;for _ ,_ede :=range _aac .Segments {switch _ede .Type {case 6,7,22,23,38,39,42,43:_ebga ++;};};return _ebga ;
};func _baa (_fga int )int {_ceg :=0;_cca :=(_fga &(_fga -1))==0;_fga >>=1;for ;_fga !=0;_fga >>=1{_ceg ++;};if _cca {return _ceg ;};return _ceg +1;};func (_aaf *Document )encodeEOFHeader (_eaf _ee .BinaryWriter )(_efa int ,_cadg error ){_gfe :=&_eeb .Header {SegmentNumber :_aaf .nextSegmentNumber (),Type :_eeb .TEndOfFile };
if _efa ,_cadg =_gfe .Encode (_eaf );_cadg !=nil {return 0,_da .Wrap (_cadg ,"\u0065n\u0063o\u0064\u0065\u0045\u004f\u0046\u0048\u0065\u0061\u0064\u0065\u0072","");};return _efa ,nil ;};var _b =[]byte {0x97,0x4A,0x42,0x32,0x0D,0x0A,0x1A,0x0A};func (_eaa *Page )GetWidth ()(int ,error ){return _eaa .getWidth ()};
func (_fccd *Document )GetGlobalSegment (i int )(*_eeb .Header ,error ){_bcc ,_fag :=_fccd .GlobalSegments .GetSegment (i );if _fag !=nil {return nil ,_da .Wrap (_fag ,"\u0047\u0065t\u0047\u006c\u006fb\u0061\u006c\u0053\u0065\u0067\u006d\u0065\u006e\u0074","");
};return _bcc ,nil ;};func (_efe *Document )GetNumberOfPages ()(uint32 ,error ){if _efe .NumberOfPagesUnknown ||_efe .NumberOfPages ==0{if len (_efe .Pages )==0{if _ead :=_efe .mapData ();_ead !=nil {return 0,_da .Wrap (_ead ,"\u0044o\u0063\u0075\u006d\u0065n\u0074\u002e\u0047\u0065\u0074N\u0075m\u0062e\u0072\u004f\u0066\u0050\u0061\u0067\u0065s","");
};};return uint32 (len (_efe .Pages )),nil ;};return _efe .NumberOfPages ,nil ;};type EncodingMethod int ;func (_eac *Document )GetPage (pageNumber int )(_eeb .Pager ,error ){const _dcc ="\u0044\u006fc\u0075\u006d\u0065n\u0074\u002e\u0047\u0065\u0074\u0050\u0061\u0067\u0065";
if pageNumber < 0{_cd .Log .Debug ("\u004a\u0042\u0049\u00472\u0020\u0050\u0061\u0067\u0065\u0020\u002d\u0020\u0047e\u0074\u0050\u0061\u0067\u0065\u003a\u0020\u0025\u0064\u002e\u0020\u0050\u0061\u0067\u0065\u0020\u0063\u0061n\u006e\u006f\u0074\u0020\u0062e\u0020\u006c\u006f\u0077\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0030\u002e\u0020\u0025\u0073",pageNumber ,_d .Stack ());
return nil ,_da .Errorf (_dcc ,"\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006a\u0062\u0069\u0067\u0032\u0020d\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u0020\u002d\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064 \u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u0070\u0061\u0067\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u003a\u0020\u0025\u0064",pageNumber );
};if pageNumber > len (_eac .Pages ){_cd .Log .Debug ("\u0050\u0061\u0067\u0065 n\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064\u003a\u0020\u0025\u0064\u002e\u0020%\u0073",pageNumber ,_d .Stack ());return nil ,_da .Error (_dcc ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006a\u0062\u0069\u0067\u0032 \u0064\u006f\u0063\u0075\u006d\u0065n\u0074\u0020\u002d\u0020\u0070\u0061\u0067\u0065\u0020\u006e\u006f\u0074\u0020f\u006f\u0075\u006e\u0064");
};_fd ,_ae :=_eac .Pages [pageNumber ];if !_ae {_cd .Log .Debug ("\u0050\u0061\u0067\u0065 n\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064\u003a\u0020\u0025\u0064\u002e\u0020%\u0073",pageNumber ,_d .Stack ());return nil ,_da .Errorf (_dcc ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006a\u0062\u0069\u0067\u0032 \u0064\u006f\u0063\u0075\u006d\u0065n\u0074\u0020\u002d\u0020\u0070\u0061\u0067\u0065\u0020\u006e\u006f\u0074\u0020f\u006f\u0075\u006e\u0064");
};return _fd ,nil ;};func (_bgd *Globals )AddSegment (segment *_eeb .Header ){_bgd .Segments =append (_bgd .Segments ,segment )};func (_ecd *Page )composePageBitmap ()error {const _dgg ="\u0063\u006f\u006d\u0070\u006f\u0073\u0065\u0050\u0061\u0067\u0065\u0042i\u0074\u006d\u0061\u0070";
if _ecd .PageNumber ==0{return nil ;};_cfd :=_ecd .getPageInformationSegment ();if _cfd ==nil {return _da .Error (_dgg ,"\u0070\u0061\u0067e \u0069\u006e\u0066\u006f\u0072\u006d\u0061\u0074\u0069o\u006e \u0073e\u0067m\u0065\u006e\u0074\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064");
};_cgce ,_ced :=_cfd .GetSegmentData ();if _ced !=nil {return _ced ;};_fe ,_cda :=_cgce .(*_eeb .PageInformationSegment );if !_cda {return _da .Error (_dgg ,"\u0070\u0061\u0067\u0065\u0020\u0069\u006ef\u006f\u0072\u006da\u0074\u0069\u006f\u006e \u0073\u0065\u0067\u006d\u0065\u006e\u0074\u0020\u0069\u0073\u0020\u006f\u0066\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0074\u0079\u0070\u0065");
};if _ced =_ecd .createPage (_fe );_ced !=nil {return _da .Wrap (_ced ,_dgg ,"");};_ecd .clearSegmentData ();return nil ;};func (_gaa *Page )createStripedPage (_fec *_eeb .PageInformationSegment )error {const _dbe ="\u0063\u0072\u0065\u0061\u0074\u0065\u0053\u0074\u0072\u0069\u0070\u0065d\u0050\u0061\u0067\u0065";
_egfd ,_ffa :=_gaa .collectPageStripes ();if _ffa !=nil {return _da .Wrap (_ffa ,_dbe ,"");};var _bea int ;for _ ,_cgb :=range _egfd {if _cfb ,_bbg :=_cgb .(*_eeb .EndOfStripe );_bbg {_bea =_cfb .LineNumber ()+1;}else {_acb :=_cgb .(_eeb .Regioner );_ggeg :=_acb .GetRegionInfo ();
_fbeb :=_gaa .getCombinationOperator (_fec ,_ggeg .CombinaionOperator );_eadf ,_aaea :=_acb .GetRegionBitmap ();if _aaea !=nil {return _da .Wrap (_aaea ,_dbe ,"");};_aaea =_ca .Blit (_eadf ,_gaa .Bitmap ,int (_ggeg .XLocation ),_bea ,_fbeb );if _aaea !=nil {return _da .Wrap (_aaea ,_dbe ,"");
};};};return nil ;};func (_afgf *Page )getResolutionY ()(int ,error ){const _gae ="\u0067\u0065\u0074\u0052\u0065\u0073\u006f\u006c\u0075t\u0069\u006f\u006e\u0059";if _afgf .ResolutionY !=0{return _afgf .ResolutionY ,nil ;};_ggd :=_afgf .getPageInformationSegment ();
if _ggd ==nil {return 0,_da .Error (_gae ,"n\u0069l\u0020\u0070\u0061\u0067\u0065\u0020\u0069\u006ef\u006f\u0072\u006d\u0061ti\u006f\u006e");};_ddc ,_bfb :=_ggd .GetSegmentData ();if _bfb !=nil {return 0,_da .Wrap (_bfb ,_gae ,"");};_gfa ,_efbg :=_ddc .(*_eeb .PageInformationSegment );
if !_efbg {return 0,_da .Errorf (_gae ,"\u0070\u0061\u0067\u0065\u0020\u0069\u006e\u0066o\u0072\u006d\u0061ti\u006f\u006e\u0020\u0073\u0065\u0067m\u0065\u006e\u0074\u0020\u0069\u0073\u0020\u006f\u0066\u0020\u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u0074\u0079\u0070\u0065\u003a\u0027%\u0054\u0027",_ddc );
};_afgf .ResolutionY =_gfa .ResolutionY ;return _afgf .ResolutionY ,nil ;};func (_ef *Document )completeClassifiedPages ()(_cc error ){const _dage ="\u0063\u006f\u006dpl\u0065\u0074\u0065\u0043\u006c\u0061\u0073\u0073\u0069\u0066\u0069\u0065\u0064\u0050\u0061\u0067\u0065\u0073";
if _ef .Classer ==nil {return nil ;};_ef ._cb =make ([]int ,_ef .Classer .UndilatedTemplates .Size ());for _egg :=0;_egg < _ef .Classer .ClassIDs .Size ();_egg ++{_fg ,_gc :=_ef .Classer .ClassIDs .Get (_egg );if _gc !=nil {return _da .Wrapf (_gc ,_dage ,"\u0063\u006c\u0061\u0073s \u0077\u0069\u0074\u0068\u0020\u0069\u0064\u003a\u0020\u0027\u0025\u0064\u0027",_egg );
};_ef ._cb [_fg ]++;};var _ab []int ;for _fge :=0;_fge < _ef .Classer .UndilatedTemplates .Size ();_fge ++{if _ef .NumberOfPages ==1||_ef ._cb [_fge ]> 1{_ab =append (_ab ,_fge );};};var (_ggc *Page ;_df bool ;);for _bec ,_dg :=range *_ef .Classer .ComponentPageNumbers {if _ggc ,_df =_ef .Pages [_dg ];
!_df {return _da .Errorf (_dage ,"p\u0061g\u0065\u003a\u0020\u0027\u0025\u0064\u0027\u0020n\u006f\u0074\u0020\u0066ou\u006e\u0064",_bec );};if _ggc .EncodingMethod ==GenericEM {_cd .Log .Error ("\u0047\u0065\u006e\u0065\u0072\u0069c\u0020\u0070\u0061g\u0065\u0020\u0077i\u0074\u0068\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u003a \u0027\u0025\u0064\u0027\u0020ma\u0070\u0070\u0065\u0064\u0020\u0061\u0073\u0020\u0063\u006c\u0061\u0073\u0073\u0069\u0066\u0069\u0065\u0064\u0020\u0070\u0061\u0067\u0065",_bec );
continue ;};_ef ._ega [_dg ]=append (_ef ._ega [_dg ],_bec );_bc ,_cfc :=_ef .Classer .ClassIDs .Get (_bec );if _cfc !=nil {return _da .Wrapf (_cfc ,_dage ,"\u006e\u006f\u0020\u0073uc\u0068\u0020\u0063\u006c\u0061\u0073\u0073\u0049\u0044\u003a\u0020\u0025\u0064",_bec );
};if _ef ._cb [_bc ]==1&&_ef .NumberOfPages !=1{_cac :=append (_ef ._g [_dg ],_bc );_ef ._g [_dg ]=_cac ;};};if _cc =_ef .Classer .ComputeLLCorners ();_cc !=nil {return _da .Wrap (_cc ,_dage ,"");};if _ ,_cc =_ef .addSymbolDictionary (0,_ef .Classer .UndilatedTemplates ,_ab ,_ef ._db ,false );
_cc !=nil {return _da .Wrap (_cc ,_dage ,"");};return nil ;};func (_agef *Page )GetSegment (number int )(*_eeb .Header ,error ){const _cace ="\u0050a\u0067e\u002e\u0047\u0065\u0074\u0053\u0065\u0067\u006d\u0065\u006e\u0074";for _ ,_dgfb :=range _agef .Segments {if _dgfb .SegmentNumber ==uint32 (number ){return _dgfb ,nil ;
};};_eae :=make ([]uint32 ,len (_agef .Segments ));for _cfg ,_cbfe :=range _agef .Segments {_eae [_cfg ]=_cbfe .SegmentNumber ;};return nil ,_da .Errorf (_cace ,"\u0073e\u0067\u006d\u0065n\u0074\u0020\u0077i\u0074h \u006e\u0075\u006d\u0062\u0065\u0072\u003a \u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064\u0020\u0069\u006e\u0020\u0074\u0068\u0065\u0020\u0070\u0061\u0067\u0065\u003a\u0020'%\u0064'\u002e\u0020\u004b\u006e\u006f\u0077n\u0020\u0073\u0065\u0067\u006de\u006e\u0074\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0073\u003a \u0025\u0076",number ,_agef .PageNumber ,_eae );
};func (_abgf *Page )lastSegmentNumber ()(_gfd uint32 ,_cdb error ){const _eabef ="\u006c\u0061\u0073\u0074\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u004eu\u006d\u0062\u0065\u0072";if len (_abgf .Segments )==0{return _gfd ,_da .Errorf (_eabef ,"\u006e\u006f\u0020se\u0067\u006d\u0065\u006e\u0074\u0073\u0020\u0066\u006fu\u006ed\u0020i\u006e \u0074\u0068\u0065\u0020\u0070\u0061\u0067\u0065\u0020\u0027\u0025\u0064\u0027",_abgf .PageNumber );
};return _abgf .Segments [len (_abgf .Segments )-1].SegmentNumber ,nil ;};func (_cbf *Document )parseFileHeader ()error {const _cafb ="\u0070a\u0072s\u0065\u0046\u0069\u006c\u0065\u0048\u0065\u0061\u0064\u0065\u0072";_ ,_fdb :=_cbf .InputStream .Seek (8,_eg .SeekStart );
if _fdb !=nil {return _da .Wrap (_fdb ,_cafb ,"\u0069\u0064");};_ ,_fdb =_cbf .InputStream .ReadBits (5);if _fdb !=nil {return _da .Wrap (_fdb ,_cafb ,"\u0072\u0065\u0073\u0065\u0072\u0076\u0065\u0064\u0020\u0062\u0069\u0074\u0073");};_ggcb ,_fdb :=_cbf .InputStream .ReadBit ();
if _fdb !=nil {return _da .Wrap (_fdb ,_cafb ,"\u0065x\u0074e\u006e\u0064\u0065\u0064\u0020t\u0065\u006dp\u006c\u0061\u0074\u0065\u0073");};if _ggcb ==1{_cbf .GBUseExtTemplate =true ;};_ggcb ,_fdb =_cbf .InputStream .ReadBit ();if _fdb !=nil {return _da .Wrap (_fdb ,_cafb ,"\u0075\u006e\u006b\u006eow\u006e\u0020\u0070\u0061\u0067\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};if _ggcb !=1{_cbf .NumberOfPagesUnknown =false ;};_ggcb ,_fdb =_cbf .InputStream .ReadBit ();if _fdb !=nil {return _da .Wrap (_fdb ,_cafb ,"\u006f\u0072\u0067\u0061\u006e\u0069\u007a\u0061\u0074\u0069\u006f\u006e \u0074\u0079\u0070\u0065");};_cbf .OrganizationType =_eeb .OrganizationType (_ggcb );
if !_cbf .NumberOfPagesUnknown {_cbf .NumberOfPages ,_fdb =_cbf .InputStream .ReadUint32 ();if _fdb !=nil {return _da .Wrap (_fdb ,_cafb ,"\u006eu\u006db\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0061\u0067\u0065\u0073");};_cbf ._ce =13;};return nil ;
};func (_cacg *Document )reachedEOF (_daa int64 )(bool ,error ){const _afb ="\u0072\u0065\u0061\u0063\u0068\u0065\u0064\u0045\u004f\u0046";_ ,_eab :=_cacg .InputStream .Seek (_daa ,_eg .SeekStart );if _eab !=nil {_cd .Log .Debug ("\u0072\u0065\u0061c\u0068\u0065\u0064\u0045\u004f\u0046\u0020\u002d\u0020\u0064\u002e\u0049\u006e\u0070\u0075\u0074\u0053\u0074\u0072\u0065\u0061\u006d\u002e\u0053\u0065\u0065\u006b\u0020\u0066a\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_eab );
return false ,_da .Wrap (_eab ,_afb ,"\u0069n\u0070\u0075\u0074\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u0020s\u0065\u0065\u006b\u0020\u0066\u0061\u0069\u006c\u0065\u0064");};_ ,_eab =_cacg .InputStream .ReadBits (32);if _eab ==_eg .EOF {return true ,nil ;
}else if _eab !=nil {return false ,_da .Wrap (_eab ,_afb ,"");};return false ,nil ;};func (_ceb *Document )determineRandomDataOffsets (_bcce []*_eeb .Header ,_dff uint64 ){if _ceb .OrganizationType !=_eeb .ORandom {return ;};for _ ,_gef :=range _bcce {_gef .SegmentDataStartOffset =_dff ;
_dff +=_gef .SegmentDataLength ;};};func (_bef *Page )AddEndOfPageSegment (){_eebe :=&_eeb .Header {Type :_eeb .TEndOfPage ,PageAssociation :_bef .PageNumber };_bef .Segments =append (_bef .Segments ,_eebe );};func (_afae *Document )nextPageNumber ()uint32 {_afae .NumberOfPages ++;
return _afae .NumberOfPages };func (_babd *Page )AddPageInformationSegment (){_bgba :=&_eeb .PageInformationSegment {PageBMWidth :_babd .FinalWidth ,PageBMHeight :_babd .FinalHeight ,ResolutionX :_babd .ResolutionX ,ResolutionY :_babd .ResolutionY ,IsLossless :_babd .IsLossless };
if _babd .BlackIsOne {_bgba .DefaultPixelValue =uint8 (0x1);};_dbf :=&_eeb .Header {PageAssociation :_babd .PageNumber ,SegmentDataLength :uint64 (_bgba .Size ()),SegmentData :_bgba ,Type :_eeb .TPageInformation };_babd .Segments =append (_babd .Segments ,_dbf );
};func (_gdc *Globals )GetSegmentByIndex (index int )(*_eeb .Header ,error ){const _dcge ="\u0047l\u006f\u0062\u0061\u006cs\u002e\u0047\u0065\u0074\u0053e\u0067m\u0065n\u0074\u0042\u0079\u0049\u006e\u0064\u0065x";if _gdc ==nil {return nil ,_da .Error (_dcge ,"\u0067\u006c\u006f\u0062al\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if len (_gdc .Segments )==0{return nil ,_da .Error (_dcge ,"\u0067\u006c\u006f\u0062\u0061\u006c\u0073\u0020\u0061\u0072\u0065\u0020e\u006d\u0070\u0074\u0079");};if index > len (_gdc .Segments )-1{return nil ,_da .Error (_dcge ,"\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};return _gdc .Segments [index ],nil ;};func (_afe *Page )addTextRegionSegment (_cdcf []*_eeb .Header ,_ccc ,_eddc map[int ]int ,_age []int ,_fae *_ca .Points ,_ffd *_ca .Bitmaps ,_fab *_ec .IntSlice ,_dgd *_ca .Boxes ,_eabe ,_eee int ){_geb :=&_eeb .TextRegion {NumberOfSymbols :uint32 (_eee )};
_geb .InitEncode (_ccc ,_eddc ,_age ,_fae ,_ffd ,_fab ,_dgd ,_afe .FinalWidth ,_afe .FinalHeight ,_eabe );_eff :=&_eeb .Header {RTSegments :_cdcf ,SegmentData :_geb ,PageAssociation :_afe .PageNumber ,Type :_eeb .TImmediateTextRegion };_gfeb :=_eeb .TPageInformation ;
if _eddc !=nil {_gfeb =_eeb .TSymbolDictionary ;};var _afg int ;for ;_afg < len (_afe .Segments );_afg ++{if _afe .Segments [_afg ].Type ==_gfeb {_afg ++;break ;};};_afe .Segments =append (_afe .Segments ,nil );copy (_afe .Segments [_afg +1:],_afe .Segments [_afg :]);
_afe .Segments [_afg ]=_eff ;};func (_agee *Page )GetResolutionX ()(int ,error ){return _agee .getResolutionX ()};func (_bcf *Page )getHeight ()(int ,error ){const _aad ="\u0067e\u0074\u0048\u0065\u0069\u0067\u0068t";if _bcf .FinalHeight !=0{return _bcf .FinalHeight ,nil ;
};_eecc :=_bcf .getPageInformationSegment ();if _eecc ==nil {return 0,_da .Error (_aad ,"n\u0069l\u0020\u0070\u0061\u0067\u0065\u0020\u0069\u006ef\u006f\u0072\u006d\u0061ti\u006f\u006e");};_bgdb ,_fgb :=_eecc .GetSegmentData ();if _fgb !=nil {return 0,_da .Wrap (_fgb ,_aad ,"");
};_baae ,_cdf :=_bgdb .(*_eeb .PageInformationSegment );if !_cdf {return 0,_da .Errorf (_aad ,"\u0070\u0061\u0067\u0065\u0020\u0069n\u0066\u006f\u0072\u006d\u0061\u0074\u0069\u006f\u006e\u0020\u0073\u0065\u0067\u006d\u0065\u006e\u0074\u0020\u0069\u0073 \u006f\u0066\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0074\u0079\u0070e\u003a \u0027\u0025\u0054\u0027",_bgdb );
};if _baae .PageBMHeight ==_e .MaxInt32 {_ ,_fgb =_bcf .GetBitmap ();if _fgb !=nil {return 0,_da .Wrap (_fgb ,_aad ,"");};}else {_bcf .FinalHeight =_baae .PageBMHeight ;};return _bcf .FinalHeight ,nil ;};func (_gedc *Page )collectPageStripes ()(_dccg []_eeb .Segmenter ,_eca error ){const _fgg ="\u0063o\u006cl\u0065\u0063\u0074\u0050\u0061g\u0065\u0053t\u0072\u0069\u0070\u0065\u0073";
var _accb _eeb .Segmenter ;for _ ,_gfg :=range _gedc .Segments {switch _gfg .Type {case 6,7,22,23,38,39,42,43:_accb ,_eca =_gfg .GetSegmentData ();if _eca !=nil {return nil ,_da .Wrap (_eca ,_fgg ,"");};_dccg =append (_dccg ,_accb );case 50:_accb ,_eca =_gfg .GetSegmentData ();
if _eca !=nil {return nil ,_eca ;};_ecbd ,_gad :=_accb .(*_eeb .EndOfStripe );if !_gad {return nil ,_da .Errorf (_fgg ,"\u0045\u006e\u0064\u004f\u0066\u0053\u0074\u0072\u0069\u0070\u0065\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u006f\u0066\u0020\u0076\u0061l\u0069\u0064\u0020\u0074\u0079p\u0065\u003a \u0027\u0025\u0054\u0027",_accb );
};_dccg =append (_dccg ,_ecbd );_gedc .FinalHeight =_ecbd .LineNumber ();};};return _dccg ,nil ;};func InitEncodeDocument (fullHeaders bool )*Document {return &Document {FullHeaders :fullHeaders ,_a :_ee .BufferedMSB (),Pages :map[int ]*Page {},_g :map[int ][]int {},_db :map[int ]int {},_ega :map[int ][]int {}};
};func (_bcg *Page )nextSegmentNumber ()uint32 {return _bcg .Document .nextSegmentNumber ()};func (_gdcf *Page )AddGenericRegion (bm *_ca .Bitmap ,xloc ,yloc ,template int ,tp _eeb .Type ,duplicateLineRemoval bool )error {const _aeb ="P\u0061\u0067\u0065\u002eAd\u0064G\u0065\u006e\u0065\u0072\u0069c\u0052\u0065\u0067\u0069\u006f\u006e";
_cfee :=&_eeb .GenericRegion {};if _baf :=_cfee .InitEncode (bm ,xloc ,yloc ,template ,duplicateLineRemoval );_baf !=nil {return _da .Wrap (_baf ,_aeb ,"");};_afac :=&_eeb .Header {Type :_eeb .TImmediateGenericRegion ,PageAssociation :_gdcf .PageNumber ,SegmentData :_cfee };
_gdcf .Segments =append (_gdcf .Segments ,_afac );return nil ;};func (_gebg *Page )createNormalPage (_eeea *_eeb .PageInformationSegment )error {const _ebg ="\u0063\u0072e\u0061\u0074\u0065N\u006f\u0072\u006d\u0061\u006c\u0050\u0061\u0067\u0065";_gebg .Bitmap =_ca .New (_eeea .PageBMWidth ,_eeea .PageBMHeight );
if _eeea .DefaultPixelValue !=0{_gebg .Bitmap .SetDefaultPixel ();};for _ ,_dcgd :=range _gebg .Segments {switch _dcgd .Type {case 6,7,22,23,38,39,42,43:_cd .Log .Trace ("\u0047\u0065\u0074\u0074in\u0067\u0020\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u003a\u0020\u0025\u0064",_dcgd .SegmentNumber );
_bffa ,_cfdd :=_dcgd .GetSegmentData ();if _cfdd !=nil {return _cfdd ;};_feg ,_dfd :=_bffa .(_eeb .Regioner );if !_dfd {_cd .Log .Debug ("\u0053\u0065g\u006d\u0065\u006e\u0074\u003a\u0020\u0025\u0054\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0052\u0065\u0067\u0069on\u0065\u0072",_bffa );
return _da .Errorf (_ebg ,"i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006a\u0062i\u0067\u0032\u0020\u0073\u0065\u0067\u006den\u0074\u0020\u0074\u0079p\u0065\u0020\u002d\u0020\u006e\u006f\u0074\u0020\u0061 R\u0065\u0067i\u006f\u006e\u0065\u0072\u003a\u0020\u0025\u0054",_bffa );
};_aag ,_cfdd :=_feg .GetRegionBitmap ();if _cfdd !=nil {return _da .Wrap (_cfdd ,_ebg ,"");};if _gebg .fitsPage (_eeea ,_aag ){_gebg .Bitmap =_aag ;}else {_ggg :=_feg .GetRegionInfo ();_aeg :=_gebg .getCombinationOperator (_eeea ,_ggg .CombinaionOperator );
_cfdd =_ca .Blit (_aag ,_gebg .Bitmap ,int (_ggg .XLocation ),int (_ggg .YLocation ),_aeg );if _cfdd !=nil {return _da .Wrap (_cfdd ,_ebg ,"");};};};};return nil ;};func (_cded *Document )encodeSegment (_cdc *_eeb .Header ,_afd *int )error {const _bgg ="\u0065\u006e\u0063\u006f\u0064\u0065\u0053\u0065\u0067\u006d\u0065\u006e\u0074";
_cdc .SegmentNumber =_cded .nextSegmentNumber ();_dcg ,_dagg :=_cdc .Encode (_cded ._a );if _dagg !=nil {return _da .Wrapf (_dagg ,_bgg ,"\u0073\u0065\u0067\u006d\u0065\u006e\u0074\u003a\u0020\u0027\u0025\u0064\u0027",_cdc .SegmentNumber );};*_afd +=_dcg ;
return nil ;};func (_fdgg *Page )getPageInformationSegment ()*_eeb .Header {for _ ,_cdaf :=range _fdgg .Segments {if _cdaf .Type ==_eeb .TPageInformation {return _cdaf ;};};_cd .Log .Debug ("\u0050\u0061\u0067\u0065\u0020\u0069\u006e\u0066o\u0072\u006d\u0061ti\u006f\u006e\u0020\u0073\u0065\u0067m\u0065\u006e\u0074\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064\u0020\u0066o\u0072\u0020\u0070\u0061\u0067\u0065\u003a\u0020%\u0073\u002e",_fdgg );
return nil ;};func (_cde *Document )AddClassifiedPage (bm *_ca .Bitmap ,method _ed .Method )(_gb error ){const _dag ="\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0041\u0064d\u0043\u006c\u0061\u0073\u0073\u0069\u0066\u0069\u0065\u0064P\u0061\u0067\u0065";
if !_cde .FullHeaders &&_cde .NumberOfPages !=0{return _da .Error (_dag ,"\u0064\u006f\u0063\u0075\u006de\u006e\u0074\u0020\u0061\u006c\u0072\u0065a\u0064\u0079\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0073\u0020\u0070\u0061\u0067\u0065\u002e\u0020\u0046\u0069\u006c\u0065\u004d\u006f\u0064\u0065\u0020\u0064\u0069\u0073\u0061\u006c\u006c\u006f\u0077\u0073\u0020\u0061\u0064\u0064i\u006e\u0067\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e \u006f\u006e\u0065\u0020\u0070\u0061g\u0065");
};if _cde .Classer ==nil {if _cde .Classer ,_gb =_ed .Init (_ed .DefaultSettings ());_gb !=nil {return _da .Wrap (_gb ,_dag ,"");};};_eb :=int (_cde .nextPageNumber ());_eec :=&Page {Segments :[]*_eeb .Header {},Bitmap :bm ,Document :_cde ,FinalHeight :bm .Height ,FinalWidth :bm .Width ,PageNumber :_eb };
_cde .Pages [_eb ]=_eec ;switch method {case _ed .RankHaus :_eec .EncodingMethod =RankHausEM ;case _ed .Correlation :_eec .EncodingMethod =CorrelationEM ;};_eec .AddPageInformationSegment ();if _gb =_cde .Classer .AddPage (bm ,_eb ,method );_gb !=nil {return _da .Wrap (_gb ,_dag ,"");
};if _cde .FullHeaders {_eec .AddEndOfPageSegment ();};return nil ;};func DecodeDocument (input *_ee .Reader ,globals *Globals )(*Document ,error ){return _daf (input ,globals );};func (_cgc *Page )GetResolutionY ()(int ,error ){return _cgc .getResolutionY ()};
func (_babea *Page )String ()string {return _cf .Sprintf ("\u0050\u0061\u0067\u0065\u0020\u0023\u0025\u0064",_babea .PageNumber );};func (_bg *Document )produceClassifiedPage (_bgb *Page ,_ad *_eeb .Header )(_de error ){const _bge ="p\u0072\u006f\u0064\u0075ce\u0043l\u0061\u0073\u0073\u0069\u0066i\u0065\u0064\u0050\u0061\u0067\u0065";
var _bcd map[int ]int ;_ba :=_bg ._be ;_ac :=[]*_eeb .Header {_ad };if len (_bg ._g [_bgb .PageNumber ])> 0{_bcd =map[int ]int {};_cg ,_gba :=_bg .addSymbolDictionary (_bgb .PageNumber ,_bg .Classer .UndilatedTemplates ,_bg ._g [_bgb .PageNumber ],_bcd ,false );
if _gba !=nil {return _da .Wrap (_gba ,_bge ,"");};_ac =append (_ac ,_cg );_ba +=len (_bg ._g [_bgb .PageNumber ]);};_ecb :=_bg ._ega [_bgb .PageNumber ];_cd .Log .Debug ("P\u0061g\u0065\u003a\u0020\u0027\u0025\u0064\u0027\u0020c\u006f\u006d\u0070\u0073: \u0025\u0076",_bgb .PageNumber ,_ecb );
_bgb .addTextRegionSegment (_ac ,_bg ._db ,_bcd ,_bg ._ega [_bgb .PageNumber ],_bg .Classer .PtaLL ,_bg .Classer .UndilatedTemplates ,_bg .Classer .ClassIDs ,nil ,_baa (_ba ),len (_bg ._ega [_bgb .PageNumber ]));return nil ;};func (_gdd *Document )mapData ()error {const _fdg ="\u006da\u0070\u0044\u0061\u0074\u0061";
var (_dgf []*_eeb .Header ;_dca int64 ;_babe _eeb .Type ;);_dee ,_fac :=_gdd .isFileHeaderPresent ();if _fac !=nil {return _da .Wrap (_fac ,_fdg ,"");};if _dee {if _fac =_gdd .parseFileHeader ();_fac !=nil {return _da .Wrap (_fac ,_fdg ,"");};_dca +=int64 (_gdd ._ce );
_gdd .FullHeaders =true ;};var (_faa *Page ;_gbad bool ;);for _babe !=51&&!_gbad {_bff ,_gfed :=_eeb .NewHeader (_gdd ,_gdd .InputStream ,_dca ,_gdd .OrganizationType );if _gfed !=nil {return _da .Wrap (_gfed ,_fdg ,"");};_cd .Log .Trace ("\u0044\u0065c\u006f\u0064\u0069\u006eg\u0020\u0073e\u0067\u006d\u0065\u006e\u0074\u0020\u006e\u0075m\u0062\u0065\u0072\u003a\u0020\u0025\u0064\u002c\u0020\u0054\u0079\u0070e\u003a\u0020\u0025\u0073",_bff .SegmentNumber ,_bff .Type );
_babe =_bff .Type ;if _babe !=_eeb .TEndOfFile {if _bff .PageAssociation !=0{_faa =_gdd .Pages [_bff .PageAssociation ];if _faa ==nil {_faa =_bb (_gdd ,_bff .PageAssociation );_gdd .Pages [_bff .PageAssociation ]=_faa ;if _gdd .NumberOfPagesUnknown {_gdd .NumberOfPages ++;
};};_faa .Segments =append (_faa .Segments ,_bff );}else {_gdd .GlobalSegments .AddSegment (_bff );};};_dgf =append (_dgf ,_bff );_dca =_gdd .InputStream .AbsolutePosition ();if _gdd .OrganizationType ==_eeb .OSequential {_dca +=int64 (_bff .SegmentDataLength );
};_gbad ,_gfed =_gdd .reachedEOF (_dca );if _gfed !=nil {_cd .Log .Debug ("\u006a\u0062\u0069\u0067\u0032 \u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u0020\u0072\u0065\u0061\u0063h\u0065\u0064\u0020\u0045\u004f\u0046\u0020\u0077\u0069\u0074\u0068\u0020\u0065\u0072\u0072\u006f\u0072\u003a\u0020\u0025\u0076",_gfed );
return _da .Wrap (_gfed ,_fdg ,"");};};_gdd .determineRandomDataOffsets (_dgf ,uint64 (_dca ));return nil ;};type Page struct{Segments []*_eeb .Header ;PageNumber int ;Bitmap *_ca .Bitmap ;FinalHeight int ;FinalWidth int ;ResolutionX int ;ResolutionY int ;
IsLossless bool ;Document *Document ;FirstSegmentNumber int ;EncodingMethod EncodingMethod ;BlackIsOne bool ;};type Document struct{Pages map[int ]*Page ;NumberOfPagesUnknown bool ;NumberOfPages uint32 ;GBUseExtTemplate bool ;InputStream *_ee .Reader ;
GlobalSegments *Globals ;OrganizationType _eeb .OrganizationType ;Classer *_ed .Classer ;XRes ,YRes int ;FullHeaders bool ;CurrentSegmentNumber uint32 ;AverageTemplates *_ca .Bitmaps ;BaseIndexes []int ;Refinement bool ;RefineLevel int ;_ce uint8 ;_a *_ee .BufferedWriter ;
EncodeGlobals bool ;_be int ;_g map[int ][]int ;_ega map[int ][]int ;_cb []int ;_db map[int ]int ;};func (_edg *Document )completeSymbols ()(_dd error ){const _fgd ="\u0063o\u006dp\u006c\u0065\u0074\u0065\u0053\u0079\u006d\u0062\u006f\u006c\u0073";if _edg .Classer ==nil {return nil ;
};if _edg .Classer .UndilatedTemplates ==nil {return _da .Error (_fgd ,"\u006e\u006f t\u0065\u006d\u0070l\u0061\u0074\u0065\u0073 de\u0066in\u0065\u0064\u0020\u0066\u006f\u0072\u0020th\u0065\u0020\u0063\u006c\u0061\u0073\u0073e\u0072");};_ff :=len (_edg .Pages )==1;
_gcc :=make ([]int ,_edg .Classer .UndilatedTemplates .Size ());var _bfc int ;for _fa :=0;_fa < _edg .Classer .ClassIDs .Size ();_fa ++{_bfc ,_dd =_edg .Classer .ClassIDs .Get (_fa );if _dd !=nil {return _da .Wrap (_dd ,_fgd ,"\u0063\u006c\u0061\u0073\u0073\u0020\u0049\u0044\u0027\u0073");
};_gcc [_bfc ]++;};var _fb []int ;for _ecbf :=0;_ecbf < _edg .Classer .UndilatedTemplates .Size ();_ecbf ++{if _gcc [_ecbf ]==0{return _da .Error (_fgd ,"\u006eo\u0020\u0073y\u006d\u0062\u006f\u006cs\u0020\u0069\u006es\u0074\u0061\u006e\u0063\u0065\u0073\u0020\u0066\u006fun\u0064\u0020\u0066o\u0072\u0020g\u0069\u0076\u0065\u006e\u0020\u0063l\u0061\u0073s\u003f\u0020");
};if _gcc [_ecbf ]> 1||_ff {_fb =append (_fb ,_ecbf );};};_edg ._be =len (_fb );var _eebg ,_dfe int ;for _cff :=0;_cff < _edg .Classer .ComponentPageNumbers .Size ();_cff ++{_eebg ,_dd =_edg .Classer .ComponentPageNumbers .Get (_cff );if _dd !=nil {return _da .Wrapf (_dd ,_fgd ,"p\u0061\u0067\u0065\u003a\u0020\u0027\u0025\u0064\u0027 \u006e\u006f\u0074\u0020\u0066\u006f\u0075nd\u0020\u0069\u006e\u0020t\u0068\u0065\u0020\u0063\u006c\u0061\u0073\u0073\u0065r \u0070\u0061g\u0065\u006e\u0075\u006d\u0062\u0065\u0072\u0073",_cff );
};_dfe ,_dd =_edg .Classer .ClassIDs .Get (_cff );if _dd !=nil {return _da .Wrapf (_dd ,_fgd ,"\u0063\u0061\u006e\u0027\u0074\u0020\u0067e\u0074\u0020\u0073y\u006d\u0062\u006f\u006c \u0066\u006f\u0072\u0020\u0070\u0061\u0067\u0065\u0020\u0027\u0025\u0064\u0027\u0020\u0066\u0072\u006f\u006d\u0020\u0063\u006c\u0061\u0073\u0073\u0065\u0072",_eebg );
};if _gcc [_dfe ]==1&&!_ff {_edg ._g [_eebg ]=append (_edg ._g [_eebg ],_dfe );};};if _dd =_edg .Classer .ComputeLLCorners ();_dd !=nil {return _da .Wrap (_dd ,_fgd ,"");};return nil ;};func (_dafg *Globals )GetSymbolDictionary ()(*_eeb .Header ,error ){const _cega ="G\u006c\u006f\u0062\u0061\u006c\u0073.\u0047\u0065\u0074\u0053\u0079\u006d\u0062\u006f\u006cD\u0069\u0063\u0074i\u006fn\u0061\u0072\u0079";
if _dafg ==nil {return nil ,_da .Error (_cega ,"\u0067\u006c\u006f\u0062al\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if len (_dafg .Segments )==0{return nil ,_da .Error (_cega ,"\u0067\u006c\u006f\u0062\u0061\u006c\u0073\u0020\u0061\u0072\u0065\u0020e\u006d\u0070\u0074\u0079");
};for _ ,_gbe :=range _dafg .Segments {if _gbe .Type ==_eeb .TSymbolDictionary {return _gbe ,nil ;};};return nil ,_da .Error (_cega ,"\u0067\u006c\u006fba\u006c\u0020\u0073\u0079\u006d\u0062\u006f\u006c\u0020d\u0069c\u0074i\u006fn\u0061\u0072\u0079\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064");
};type Globals struct{Segments []*_eeb .Header ;};const (GenericEM EncodingMethod =iota ;CorrelationEM ;RankHausEM ;);func (_gdg *Page )getCombinationOperator (_ffbg *_eeb .PageInformationSegment ,_cedg _ca .CombinationOperator )_ca .CombinationOperator {if _ffbg .CombinationOperatorOverrideAllowed (){return _cedg ;
};return _ffbg .CombinationOperator ();};func (_fgf *Document )addSymbolDictionary (_fcc int ,_ge *_ca .Bitmaps ,_egf []int ,_af map[int ]int ,_bd bool )(*_eeb .Header ,error ){const _abg ="\u0061\u0064\u0064\u0053ym\u0062\u006f\u006c\u0044\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079";
_cad :=&_eeb .SymbolDictionary {};if _ea :=_cad .InitEncode (_ge ,_egf ,_af ,_bd );_ea !=nil {return nil ,_ea ;};_eed :=&_eeb .Header {Type :_eeb .TSymbolDictionary ,PageAssociation :_fcc ,SegmentData :_cad };if _fcc ==0{if _fgf .GlobalSegments ==nil {_fgf .GlobalSegments =&Globals {};
};_fgf .GlobalSegments .AddSegment (_eed );return _eed ,nil ;};_acf ,_gd :=_fgf .Pages [_fcc ];if !_gd {return nil ,_da .Errorf (_abg ,"p\u0061g\u0065\u003a\u0020\u0027\u0025\u0064\u0027\u0020n\u006f\u0074\u0020\u0066ou\u006e\u0064",_fcc );};var (_bdb int ;
_gf *_eeb .Header ;);for _bdb ,_gf =range _acf .Segments {if _gf .Type ==_eeb .TPageInformation {break ;};};_bdb ++;_acf .Segments =append (_acf .Segments ,nil );copy (_acf .Segments [_bdb +1:],_acf .Segments [_bdb :]);_acf .Segments [_bdb ]=_eed ;return _eed ,nil ;
};func (_bede *Document )nextSegmentNumber ()uint32 {_ecg :=_bede .CurrentSegmentNumber ;_bede .CurrentSegmentNumber ++;return _ecg ;};func (_ecf *Page )getResolutionX ()(int ,error ){const _cdg ="\u0067\u0065\u0074\u0052\u0065\u0073\u006f\u006c\u0075t\u0069\u006f\u006e\u0058";
if _ecf .ResolutionX !=0{return _ecf .ResolutionX ,nil ;};_bbda :=_ecf .getPageInformationSegment ();if _bbda ==nil {return 0,_da .Error (_cdg ,"n\u0069l\u0020\u0070\u0061\u0067\u0065\u0020\u0069\u006ef\u006f\u0072\u006d\u0061ti\u006f\u006e");};_becf ,_afde :=_bbda .GetSegmentData ();
if _afde !=nil {return 0,_da .Wrap (_afde ,_cdg ,"");};_aecb ,_baee :=_becf .(*_eeb .PageInformationSegment );if !_baee {return 0,_da .Errorf (_cdg ,"\u0070\u0061\u0067\u0065\u0020\u0069n\u0066\u006f\u0072\u006d\u0061\u0074\u0069\u006f\u006e\u0020\u0073\u0065\u0067\u006d\u0065\u006e\u0074\u0020\u0069\u0073 \u006f\u0066\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0074\u0079\u0070e\u003a \u0027\u0025\u0054\u0027",_becf );
};_ecf .ResolutionX =_aecb .ResolutionX ;return _ecf .ResolutionX ,nil ;};func (_acce *Page )getWidth ()(int ,error ){const _fbea ="\u0067\u0065\u0074\u0057\u0069\u0064\u0074\u0068";if _acce .FinalWidth !=0{return _acce .FinalWidth ,nil ;};_daef :=_acce .getPageInformationSegment ();
if _daef ==nil {return 0,_da .Error (_fbea ,"n\u0069l\u0020\u0070\u0061\u0067\u0065\u0020\u0069\u006ef\u006f\u0072\u006d\u0061ti\u006f\u006e");};_dfga ,_egb :=_daef .GetSegmentData ();if _egb !=nil {return 0,_da .Wrap (_egb ,_fbea ,"");};_edec ,_gade :=_dfga .(*_eeb .PageInformationSegment );
if !_gade {return 0,_da .Errorf (_fbea ,"\u0070\u0061\u0067\u0065\u0020\u0069n\u0066\u006f\u0072\u006d\u0061\u0074\u0069\u006f\u006e\u0020\u0073\u0065\u0067\u006d\u0065\u006e\u0074\u0020\u0069\u0073 \u006f\u0066\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0074\u0079\u0070e\u003a \u0027\u0025\u0054\u0027",_dfga );
};_acce .FinalWidth =_edec .PageBMWidth ;return _acce .FinalWidth ,nil ;};func (_aff *Document )Encode ()(_eedd []byte ,_afa error ){const _aa ="\u0044o\u0063u\u006d\u0065\u006e\u0074\u002e\u0045\u006e\u0063\u006f\u0064\u0065";var _abe ,_ebe int ;if _aff .FullHeaders {if _abe ,_afa =_aff .encodeFileHeader (_aff ._a );
_afa !=nil {return nil ,_da .Wrap (_afa ,_aa ,"");};};var (_dc bool ;_bab *_eeb .Header ;_adf *Page ;);if _afa =_aff .completeClassifiedPages ();_afa !=nil {return nil ,_da .Wrap (_afa ,_aa ,"");};if _afa =_aff .produceClassifiedPages ();_afa !=nil {return nil ,_da .Wrap (_afa ,_aa ,"");
};if _aff .GlobalSegments !=nil {for _ ,_bab =range _aff .GlobalSegments .Segments {if _afa =_aff .encodeSegment (_bab ,&_abe );_afa !=nil {return nil ,_da .Wrap (_afa ,_aa ,"");};};};for _dbg :=1;_dbg <=int (_aff .NumberOfPages );_dbg ++{if _adf ,_dc =_aff .Pages [_dbg ];
!_dc {return nil ,_da .Errorf (_aa ,"p\u0061g\u0065\u003a\u0020\u0027\u0025\u0064\u0027\u0020n\u006f\u0074\u0020\u0066ou\u006e\u0064",_dbg );};for _ ,_bab =range _adf .Segments {if _afa =_aff .encodeSegment (_bab ,&_abe );_afa !=nil {return nil ,_da .Wrap (_afa ,_aa ,"");
};};};if _aff .FullHeaders {if _ebe ,_afa =_aff .encodeEOFHeader (_aff ._a );_afa !=nil {return nil ,_da .Wrap (_afa ,_aa ,"");};_abe +=_ebe ;};_eedd =_aff ._a .Data ();if len (_eedd )!=_abe {_cd .Log .Debug ("\u0042\u0079\u0074\u0065\u0073 \u0077\u0072\u0069\u0074\u0074\u0065\u006e \u0028\u006e\u0029\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0074\u0068\u0065\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u006f\u0066\u0020t\u0068\u0065\u0020\u0064\u0061\u0074\u0061\u0020\u0065\u006e\u0063\u006fd\u0065\u0064\u003a\u0020\u0027\u0025d\u0027",_abe ,len (_eedd ));
};return _eedd ,nil ;};func (_ccaf *Page )createPage (_bfe *_eeb .PageInformationSegment )error {var _cbfg error ;if !_bfe .IsStripe ||_bfe .PageBMHeight !=-1{_cbfg =_ccaf .createNormalPage (_bfe );}else {_cbfg =_ccaf .createStripedPage (_bfe );};return _cbfg ;
};func (_aee *Page )clearSegmentData (){for _cag :=range _aee .Segments {_aee .Segments [_cag ].CleanSegmentData ();};};func (_fbd *Page )Encode (w _ee .BinaryWriter )(_aga int ,_gbd error ){const _deg ="P\u0061\u0067\u0065\u002e\u0045\u006e\u0063\u006f\u0064\u0065";
var _ageb int ;for _ ,_ddf :=range _fbd .Segments {if _ageb ,_gbd =_ddf .Encode (w );_gbd !=nil {return _aga ,_da .Wrap (_gbd ,_deg ,"");};_aga +=_ageb ;};return _aga ,nil ;};func (_fc *Document )produceClassifiedPages ()(_edf error ){const _gce ="\u0070\u0072\u006f\u0064uc\u0065\u0043\u006c\u0061\u0073\u0073\u0069\u0066\u0069\u0065\u0064\u0050\u0061\u0067e\u0073";
if _fc .Classer ==nil {return nil ;};var (_fcg *Page ;_gge bool ;_cfe *_eeb .Header ;);for _ag :=1;_ag <=int (_fc .NumberOfPages );_ag ++{if _fcg ,_gge =_fc .Pages [_ag ];!_gge {return _da .Errorf (_gce ,"p\u0061g\u0065\u003a\u0020\u0027\u0025\u0064\u0027\u0020n\u006f\u0074\u0020\u0066ou\u006e\u0064",_ag );
};if _fcg .EncodingMethod ==GenericEM {continue ;};if _cfe ==nil {if _cfe ,_edf =_fc .GlobalSegments .GetSymbolDictionary ();_edf !=nil {return _da .Wrap (_edf ,_gce ,"");};};if _edf =_fc .produceClassifiedPage (_fcg ,_cfe );_edf !=nil {return _da .Wrapf (_edf ,_gce ,"\u0070\u0061\u0067\u0065\u003a\u0020\u0027\u0025\u0064\u0027",_ag );
};};return nil ;};func _bb (_aae *Document ,_ggf int )*Page {return &Page {Document :_aae ,PageNumber :_ggf ,Segments :[]*_eeb .Header {}};};func (_cfeg *Page )GetHeight ()(int ,error ){return _cfeg .getHeight ()};func (_gg *Document )AddGenericPage (bm *_ca .Bitmap ,duplicateLineRemoval bool )(_bf error ){const _dad ="\u0044\u006f\u0063um\u0065\u006e\u0074\u002e\u0041\u0064\u0064\u0047\u0065\u006e\u0065\u0072\u0069\u0063\u0050\u0061\u0067\u0065";
if !_gg .FullHeaders &&_gg .NumberOfPages !=0{return _da .Error (_dad ,"\u0064\u006f\u0063\u0075\u006de\u006e\u0074\u0020\u0061\u006c\u0072\u0065a\u0064\u0079\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0073\u0020\u0070\u0061\u0067\u0065\u002e\u0020\u0046\u0069\u006c\u0065\u004d\u006f\u0064\u0065\u0020\u0064\u0069\u0073\u0061\u006c\u006c\u006f\u0077\u0073\u0020\u0061\u0064\u0064i\u006e\u0067\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e \u006f\u006e\u0065\u0020\u0070\u0061g\u0065");
};_bed :=&Page {Segments :[]*_eeb .Header {},Bitmap :bm ,Document :_gg ,FinalHeight :bm .Height ,FinalWidth :bm .Width ,IsLossless :true ,BlackIsOne :bm .Color ==_ca .Chocolate };_bed .PageNumber =int (_gg .nextPageNumber ());_gg .Pages [_bed .PageNumber ]=_bed ;
bm .InverseData ();_bed .AddPageInformationSegment ();if _bf =_bed .AddGenericRegion (bm ,0,0,0,_eeb .TImmediateGenericRegion ,duplicateLineRemoval );_bf !=nil {return _da .Wrap (_bf ,_dad ,"");};if _gg .FullHeaders {_bed .AddEndOfPageSegment ();};return nil ;
};