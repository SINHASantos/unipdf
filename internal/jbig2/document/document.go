//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package document ;import (_d "encoding/binary";_c "fmt";_g "github.com/unidoc/unipdf/v3/common";_ab "github.com/unidoc/unipdf/v3/internal/bitwise";_gc "github.com/unidoc/unipdf/v3/internal/jbig2/basic";_ge "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";
_df "github.com/unidoc/unipdf/v3/internal/jbig2/document/segments";_gd "github.com/unidoc/unipdf/v3/internal/jbig2/encoder/classer";_db "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_f "io";_dc "math";_cf "runtime/debug";);func (_dfge *Page )nextSegmentNumber ()uint32 {return _dfge .Document .nextSegmentNumber ()};
func (_dgab *Document )GetGlobalSegment (i int )(*_df .Header ,error ){_gcb ,_bfd :=_dgab .GlobalSegments .GetSegment (i );if _bfd !=nil {return nil ,_db .Wrap (_bfd ,"\u0047\u0065t\u0047\u006c\u006fb\u0061\u006c\u0053\u0065\u0067\u006d\u0065\u006e\u0074","");
};return _gcb ,nil ;};func (_cac *Globals )GetSegmentByIndex (index int )(*_df .Header ,error ){const _dae ="\u0047l\u006f\u0062\u0061\u006cs\u002e\u0047\u0065\u0074\u0053e\u0067m\u0065n\u0074\u0042\u0079\u0049\u006e\u0064\u0065x";if _cac ==nil {return nil ,_db .Error (_dae ,"\u0067\u006c\u006f\u0062al\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if len (_cac .Segments )==0{return nil ,_db .Error (_dae ,"\u0067\u006c\u006f\u0062\u0061\u006c\u0073\u0020\u0061\u0072\u0065\u0020e\u006d\u0070\u0074\u0079");};if index > len (_cac .Segments )-1{return nil ,_db .Error (_dae ,"\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};return _cac .Segments [index ],nil ;};func (_dbg *Page )GetBitmap ()(_bfde *_ge .Bitmap ,_gcad error ){_g .Log .Trace (_c .Sprintf ("\u005b\u0050\u0041G\u0045\u005d\u005b\u0023%\u0064\u005d\u0020\u0047\u0065\u0074\u0042i\u0074\u006d\u0061\u0070\u0020\u0062\u0065\u0067\u0069\u006e\u0073\u002e\u002e\u002e",_dbg .PageNumber ));
defer func (){if _gcad !=nil {_g .Log .Trace (_c .Sprintf ("\u005b\u0050\u0041\u0047\u0045\u005d\u005b\u0023\u0025\u0064\u005d\u0020\u0047\u0065\u0074B\u0069t\u006d\u0061\u0070\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u002e\u0020\u0025\u0076",_dbg .PageNumber ,_gcad ));
}else {_g .Log .Trace (_c .Sprintf ("\u005b\u0050\u0041\u0047\u0045\u005d\u005b\u0023\u0025\u0064]\u0020\u0047\u0065\u0074\u0042\u0069\u0074m\u0061\u0070\u0020\u0066\u0069\u006e\u0069\u0073\u0068\u0065\u0064",_dbg .PageNumber ));};}();if _dbg .Bitmap !=nil {return _dbg .Bitmap ,nil ;
};_gcad =_dbg .composePageBitmap ();if _gcad !=nil {return nil ,_gcad ;};return _dbg .Bitmap ,nil ;};func (_eff *Page )countRegions ()int {var _bcf int ;for _ ,_egc :=range _eff .Segments {switch _egc .Type {case 6,7,22,23,38,39,42,43:_bcf ++;};};return _bcf ;
};func (_ebg *Document )GetPage (pageNumber int )(_df .Pager ,error ){const _bce ="\u0044\u006fc\u0075\u006d\u0065n\u0074\u002e\u0047\u0065\u0074\u0050\u0061\u0067\u0065";if pageNumber < 0{_g .Log .Debug ("\u004a\u0042\u0049\u00472\u0020\u0050\u0061\u0067\u0065\u0020\u002d\u0020\u0047e\u0074\u0050\u0061\u0067\u0065\u003a\u0020\u0025\u0064\u002e\u0020\u0050\u0061\u0067\u0065\u0020\u0063\u0061n\u006e\u006f\u0074\u0020\u0062e\u0020\u006c\u006f\u0077\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0030\u002e\u0020\u0025\u0073",pageNumber ,_cf .Stack ());
return nil ,_db .Errorf (_bce ,"\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006a\u0062\u0069\u0067\u0032\u0020d\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u0020\u002d\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064 \u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u0070\u0061\u0067\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u003a\u0020\u0025\u0064",pageNumber );
};if pageNumber > len (_ebg .Pages ){_g .Log .Debug ("\u0050\u0061\u0067\u0065 n\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064\u003a\u0020\u0025\u0064\u002e\u0020%\u0073",pageNumber ,_cf .Stack ());return nil ,_db .Error (_bce ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006a\u0062\u0069\u0067\u0032 \u0064\u006f\u0063\u0075\u006d\u0065n\u0074\u0020\u002d\u0020\u0070\u0061\u0067\u0065\u0020\u006e\u006f\u0074\u0020f\u006f\u0075\u006e\u0064");
};_ce ,_ecc :=_ebg .Pages [pageNumber ];if !_ecc {_g .Log .Debug ("\u0050\u0061\u0067\u0065 n\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064\u003a\u0020\u0025\u0064\u002e\u0020%\u0073",pageNumber ,_cf .Stack ());return nil ,_db .Errorf (_bce ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006a\u0062\u0069\u0067\u0032 \u0064\u006f\u0063\u0075\u006d\u0065n\u0074\u0020\u002d\u0020\u0070\u0061\u0067\u0065\u0020\u006e\u006f\u0074\u0020f\u006f\u0075\u006e\u0064");
};return _ce ,nil ;};func (_gecf *Globals )GetSegment (segmentNumber int )(*_df .Header ,error ){const _gfg ="\u0047l\u006fb\u0061\u006c\u0073\u002e\u0047e\u0074\u0053e\u0067\u006d\u0065\u006e\u0074";if _gecf ==nil {return nil ,_db .Error (_gfg ,"\u0067\u006c\u006f\u0062al\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if len (_gecf .Segments )==0{return nil ,_db .Error (_gfg ,"\u0067\u006c\u006f\u0062\u0061\u006c\u0073\u0020\u0061\u0072\u0065\u0020e\u006d\u0070\u0074\u0079");};var _afd *_df .Header ;for _ ,_afd =range _gecf .Segments {if _afd .SegmentNumber ==uint32 (segmentNumber ){break ;
};};if _afd ==nil {return nil ,_db .Error (_gfg ,"\u0073\u0065\u0067\u006d\u0065\u006e\u0074\u0020\u006e\u006f\u0074\u0020f\u006f\u0075\u006e\u0064");};return _afd ,nil ;};func _dfg (_eg int )int {_eda :=0;_afg :=(_eg &(_eg -1))==0;_eg >>=1;for ;_eg !=0;
_eg >>=1{_eda ++;};if _afg {return _eda ;};return _eda +1;};func InitEncodeDocument (fullHeaders bool )*Document {return &Document {FullHeaders :fullHeaders ,_dfa :_ab .BufferedMSB (),Pages :map[int ]*Page {},_aa :map[int ][]int {},_ffe :map[int ]int {},_cfa :map[int ][]int {}};
};func (_ceb *Page )fitsPage (_bec *_df .PageInformationSegment ,_beca *_ge .Bitmap )bool {return _ceb .countRegions ()==1&&_bec .DefaultPixelValue ==0&&_bec .PageBMWidth ==_beca .Width &&_bec .PageBMHeight ==_beca .Height ;};func (_eaa *Document )GetNumberOfPages ()(uint32 ,error ){if _eaa .NumberOfPagesUnknown ||_eaa .NumberOfPages ==0{if len (_eaa .Pages )==0{if _aag :=_eaa .mapData ();
_aag !=nil {return 0,_db .Wrap (_aag ,"\u0044o\u0063\u0075\u006d\u0065n\u0074\u002e\u0047\u0065\u0074N\u0075m\u0062e\u0072\u004f\u0066\u0050\u0061\u0067\u0065s","");};};return uint32 (len (_eaa .Pages )),nil ;};return _eaa .NumberOfPages ,nil ;};var _fd =[]byte {0x97,0x4A,0x42,0x32,0x0D,0x0A,0x1A,0x0A};
func (_gf *Document )AddGenericPage (bm *_ge .Bitmap ,duplicateLineRemoval bool )(_dd error ){const _fa ="\u0044\u006f\u0063um\u0065\u006e\u0074\u002e\u0041\u0064\u0064\u0047\u0065\u006e\u0065\u0072\u0069\u0063\u0050\u0061\u0067\u0065";if !_gf .FullHeaders &&_gf .NumberOfPages !=0{return _db .Error (_fa ,"\u0064\u006f\u0063\u0075\u006de\u006e\u0074\u0020\u0061\u006c\u0072\u0065a\u0064\u0079\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0073\u0020\u0070\u0061\u0067\u0065\u002e\u0020\u0046\u0069\u006c\u0065\u004d\u006f\u0064\u0065\u0020\u0064\u0069\u0073\u0061\u006c\u006c\u006f\u0077\u0073\u0020\u0061\u0064\u0064i\u006e\u0067\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e \u006f\u006e\u0065\u0020\u0070\u0061g\u0065");
};_b :=&Page {Segments :[]*_df .Header {},Bitmap :bm ,Document :_gf ,FinalHeight :bm .Height ,FinalWidth :bm .Width ,IsLossless :true ,BlackIsOne :bm .Color ==_ge .Chocolate };_b .PageNumber =int (_gf .nextPageNumber ());_gf .Pages [_b .PageNumber ]=_b ;
bm .InverseData ();_b .AddPageInformationSegment ();if _dd =_b .AddGenericRegion (bm ,0,0,0,_df .TImmediateGenericRegion ,duplicateLineRemoval );_dd !=nil {return _db .Wrap (_dd ,_fa ,"");};if _gf .FullHeaders {_b .AddEndOfPageSegment ();};return nil ;
};func (_gfb *Document )completeClassifiedPages ()(_ae error ){const _ffa ="\u0063\u006f\u006dpl\u0065\u0074\u0065\u0043\u006c\u0061\u0073\u0073\u0069\u0066\u0069\u0065\u0064\u0050\u0061\u0067\u0065\u0073";if _gfb .Classer ==nil {return nil ;};_gfb ._dg =make ([]int ,_gfb .Classer .UndilatedTemplates .Size ());
for _bf :=0;_bf < _gfb .Classer .ClassIDs .Size ();_bf ++{_fb ,_dgc :=_gfb .Classer .ClassIDs .Get (_bf );if _dgc !=nil {return _db .Wrapf (_dgc ,_ffa ,"\u0063\u006c\u0061\u0073s \u0077\u0069\u0074\u0068\u0020\u0069\u0064\u003a\u0020\u0027\u0025\u0064\u0027",_bf );
};_gfb ._dg [_fb ]++;};var _eb []int ;for _be :=0;_be < _gfb .Classer .UndilatedTemplates .Size ();_be ++{if _gfb .NumberOfPages ==1||_gfb ._dg [_be ]> 1{_eb =append (_eb ,_be );};};var (_ddg *Page ;_bd bool ;);for _cdb ,_aaa :=range *_gfb .Classer .ComponentPageNumbers {if _ddg ,_bd =_gfb .Pages [_aaa ];
!_bd {return _db .Errorf (_ffa ,"p\u0061g\u0065\u003a\u0020\u0027\u0025\u0064\u0027\u0020n\u006f\u0074\u0020\u0066ou\u006e\u0064",_cdb );};if _ddg .EncodingMethod ==GenericEM {_g .Log .Error ("\u0047\u0065\u006e\u0065\u0072\u0069c\u0020\u0070\u0061g\u0065\u0020\u0077i\u0074\u0068\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u003a \u0027\u0025\u0064\u0027\u0020ma\u0070\u0070\u0065\u0064\u0020\u0061\u0073\u0020\u0063\u006c\u0061\u0073\u0073\u0069\u0066\u0069\u0065\u0064\u0020\u0070\u0061\u0067\u0065",_cdb );
continue ;};_gfb ._cfa [_aaa ]=append (_gfb ._cfa [_aaa ],_cdb );_dff ,_fg :=_gfb .Classer .ClassIDs .Get (_cdb );if _fg !=nil {return _db .Wrapf (_fg ,_ffa ,"\u006e\u006f\u0020\u0073uc\u0068\u0020\u0063\u006c\u0061\u0073\u0073\u0049\u0044\u003a\u0020\u0025\u0064",_cdb );
};if _gfb ._dg [_dff ]==1&&_gfb .NumberOfPages !=1{_ag :=append (_gfb ._aa [_aaa ],_dff );_gfb ._aa [_aaa ]=_ag ;};};if _ae =_gfb .Classer .ComputeLLCorners ();_ae !=nil {return _db .Wrap (_ae ,_ffa ,"");};if _ ,_ae =_gfb .addSymbolDictionary (0,_gfb .Classer .UndilatedTemplates ,_eb ,_gfb ._ffe ,false );
_ae !=nil {return _db .Wrap (_ae ,_ffa ,"");};return nil ;};func (_cde *Document )encodeFileHeader (_cga _ab .BinaryWriter )(_dfb int ,_bbe error ){const _bdd ="\u0065\u006ec\u006f\u0064\u0065F\u0069\u006c\u0065\u0048\u0065\u0061\u0064\u0065\u0072";_dfb ,_bbe =_cga .Write (_fd );
if _bbe !=nil {return _dfb ,_db .Wrap (_bbe ,_bdd ,"\u0069\u0064");};if _bbe =_cga .WriteByte (0x01);_bbe !=nil {return _dfb ,_db .Wrap (_bbe ,_bdd ,"\u0066\u006c\u0061g\u0073");};_dfb ++;_acd :=make ([]byte ,4);_d .BigEndian .PutUint32 (_acd ,_cde .NumberOfPages );
_gde ,_bbe :=_cga .Write (_acd );if _bbe !=nil {return _gde ,_db .Wrap (_bbe ,_bdd ,"p\u0061\u0067\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_dfb +=_gde ;return _dfb ,nil ;};func (_beb *Globals )AddSegment (segment *_df .Header ){_beb .Segments =append (_beb .Segments ,segment )};
func (_cee *Document )mapData ()error {const _dbb ="\u006da\u0070\u0044\u0061\u0074\u0061";var (_aef []*_df .Header ;_fgg int64 ;_gef _df .Type ;);_dagd ,_bfbg :=_cee .isFileHeaderPresent ();if _bfbg !=nil {return _db .Wrap (_bfbg ,_dbb ,"");};if _dagd {if _bfbg =_cee .parseFileHeader ();
_bfbg !=nil {return _db .Wrap (_bfbg ,_dbb ,"");};_fgg +=int64 (_cee ._ff );_cee .FullHeaders =true ;};var (_edc *Page ;_bcd bool ;);for _gef !=51&&!_bcd {_cag ,_ggb :=_df .NewHeader (_cee ,_cee .InputStream ,_fgg ,_cee .OrganizationType );if _ggb !=nil {return _db .Wrap (_ggb ,_dbb ,"");
};_g .Log .Trace ("\u0044\u0065c\u006f\u0064\u0069\u006eg\u0020\u0073e\u0067\u006d\u0065\u006e\u0074\u0020\u006e\u0075m\u0062\u0065\u0072\u003a\u0020\u0025\u0064\u002c\u0020\u0054\u0079\u0070e\u003a\u0020\u0025\u0073",_cag .SegmentNumber ,_cag .Type );
_gef =_cag .Type ;if _gef !=_df .TEndOfFile {if _cag .PageAssociation !=0{_edc =_cee .Pages [_cag .PageAssociation ];if _edc ==nil {_edc =_bbf (_cee ,_cag .PageAssociation );_cee .Pages [_cag .PageAssociation ]=_edc ;if _cee .NumberOfPagesUnknown {_cee .NumberOfPages ++;
};};_edc .Segments =append (_edc .Segments ,_cag );}else {_cee .GlobalSegments .AddSegment (_cag );};};_aef =append (_aef ,_cag );_fgg =_cee .InputStream .AbsolutePosition ();if _cee .OrganizationType ==_df .OSequential {_fgg +=int64 (_cag .SegmentDataLength );
};_bcd ,_ggb =_cee .reachedEOF (_fgg );if _ggb !=nil {_g .Log .Debug ("\u006a\u0062\u0069\u0067\u0032 \u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u0020\u0072\u0065\u0061\u0063h\u0065\u0064\u0020\u0045\u004f\u0046\u0020\u0077\u0069\u0074\u0068\u0020\u0065\u0072\u0072\u006f\u0072\u003a\u0020\u0025\u0076",_ggb );
return _db .Wrap (_ggb ,_dbb ,"");};};_cee .determineRandomDataOffsets (_aef ,uint64 (_fgg ));return nil ;};const (GenericEM EncodingMethod =iota ;CorrelationEM ;RankHausEM ;);func DecodeDocument (input *_ab .Reader ,globals *Globals )(*Document ,error ){return _adab (input ,globals );
};func (_egb *Document )Encode ()(_geb []byte ,_gga error ){const _cg ="\u0044o\u0063u\u006d\u0065\u006e\u0074\u002e\u0045\u006e\u0063\u006f\u0064\u0065";var _fe ,_dce int ;if _egb .FullHeaders {if _fe ,_gga =_egb .encodeFileHeader (_egb ._dfa );_gga !=nil {return nil ,_db .Wrap (_gga ,_cg ,"");
};};var (_gfcc bool ;_abd *_df .Header ;_faa *Page ;);if _gga =_egb .completeClassifiedPages ();_gga !=nil {return nil ,_db .Wrap (_gga ,_cg ,"");};if _gga =_egb .produceClassifiedPages ();_gga !=nil {return nil ,_db .Wrap (_gga ,_cg ,"");};if _egb .GlobalSegments !=nil {for _ ,_abd =range _egb .GlobalSegments .Segments {if _gga =_egb .encodeSegment (_abd ,&_fe );
_gga !=nil {return nil ,_db .Wrap (_gga ,_cg ,"");};};};for _dad :=1;_dad <=int (_egb .NumberOfPages );_dad ++{if _faa ,_gfcc =_egb .Pages [_dad ];!_gfcc {return nil ,_db .Errorf (_cg ,"p\u0061g\u0065\u003a\u0020\u0027\u0025\u0064\u0027\u0020n\u006f\u0074\u0020\u0066ou\u006e\u0064",_dad );
};for _ ,_abd =range _faa .Segments {if _gga =_egb .encodeSegment (_abd ,&_fe );_gga !=nil {return nil ,_db .Wrap (_gga ,_cg ,"");};};};if _egb .FullHeaders {if _dce ,_gga =_egb .encodeEOFHeader (_egb ._dfa );_gga !=nil {return nil ,_db .Wrap (_gga ,_cg ,"");
};_fe +=_dce ;};_geb =_egb ._dfa .Data ();if len (_geb )!=_fe {_g .Log .Debug ("\u0042\u0079\u0074\u0065\u0073 \u0077\u0072\u0069\u0074\u0074\u0065\u006e \u0028\u006e\u0029\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0074\u0068\u0065\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u006f\u0066\u0020t\u0068\u0065\u0020\u0064\u0061\u0074\u0061\u0020\u0065\u006e\u0063\u006fd\u0065\u0064\u003a\u0020\u0027\u0025d\u0027",_fe ,len (_geb ));
};return _geb ,nil ;};func (_dafa *Page )getResolutionY ()(int ,error ){const _acgf ="\u0067\u0065\u0074\u0052\u0065\u0073\u006f\u006c\u0075t\u0069\u006f\u006e\u0059";if _dafa .ResolutionY !=0{return _dafa .ResolutionY ,nil ;};_fdae :=_dafa .getPageInformationSegment ();
if _fdae ==nil {return 0,_db .Error (_acgf ,"n\u0069l\u0020\u0070\u0061\u0067\u0065\u0020\u0069\u006ef\u006f\u0072\u006d\u0061ti\u006f\u006e");};_cefc ,_abbc :=_fdae .GetSegmentData ();if _abbc !=nil {return 0,_db .Wrap (_abbc ,_acgf ,"");};_cdd ,_dfgd :=_cefc .(*_df .PageInformationSegment );
if !_dfgd {return 0,_db .Errorf (_acgf ,"\u0070\u0061\u0067\u0065\u0020\u0069\u006e\u0066o\u0072\u006d\u0061ti\u006f\u006e\u0020\u0073\u0065\u0067m\u0065\u006e\u0074\u0020\u0069\u0073\u0020\u006f\u0066\u0020\u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u0074\u0079\u0070\u0065\u003a\u0027%\u0054\u0027",_cefc );
};_dafa .ResolutionY =_cdd .ResolutionY ;return _dafa .ResolutionY ,nil ;};func (_bdbe *Page )getCombinationOperator (_ddga *_df .PageInformationSegment ,_abc _ge .CombinationOperator )_ge .CombinationOperator {if _ddga .CombinationOperatorOverrideAllowed (){return _abc ;
};return _ddga .CombinationOperator ();};func (_bae *Document )parseFileHeader ()error {const _daf ="\u0070a\u0072s\u0065\u0046\u0069\u006c\u0065\u0048\u0065\u0061\u0064\u0065\u0072";_ ,_fgb :=_bae .InputStream .Seek (8,_f .SeekStart );if _fgb !=nil {return _db .Wrap (_fgb ,_daf ,"\u0069\u0064");
};_ ,_fgb =_bae .InputStream .ReadBits (5);if _fgb !=nil {return _db .Wrap (_fgb ,_daf ,"\u0072\u0065\u0073\u0065\u0072\u0076\u0065\u0064\u0020\u0062\u0069\u0074\u0073");};_adb ,_fgb :=_bae .InputStream .ReadBit ();if _fgb !=nil {return _db .Wrap (_fgb ,_daf ,"\u0065x\u0074e\u006e\u0064\u0065\u0064\u0020t\u0065\u006dp\u006c\u0061\u0074\u0065\u0073");
};if _adb ==1{_bae .GBUseExtTemplate =true ;};_adb ,_fgb =_bae .InputStream .ReadBit ();if _fgb !=nil {return _db .Wrap (_fgb ,_daf ,"\u0075\u006e\u006b\u006eow\u006e\u0020\u0070\u0061\u0067\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};if _adb !=1{_bae .NumberOfPagesUnknown =false ;
};_adb ,_fgb =_bae .InputStream .ReadBit ();if _fgb !=nil {return _db .Wrap (_fgb ,_daf ,"\u006f\u0072\u0067\u0061\u006e\u0069\u007a\u0061\u0074\u0069\u006f\u006e \u0074\u0079\u0070\u0065");};_bae .OrganizationType =_df .OrganizationType (_adb );if !_bae .NumberOfPagesUnknown {_bae .NumberOfPages ,_fgb =_bae .InputStream .ReadUint32 ();
if _fgb !=nil {return _db .Wrap (_fgb ,_daf ,"\u006eu\u006db\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0061\u0067\u0065\u0073");};_bae ._ff =13;};return nil ;};func (_bcefe *Page )String ()string {return _c .Sprintf ("\u0050\u0061\u0067\u0065\u0020\u0023\u0025\u0064",_bcefe .PageNumber );
};func (_faf *Document )determineRandomDataOffsets (_gaa []*_df .Header ,_bfe uint64 ){if _faf .OrganizationType !=_df .ORandom {return ;};for _ ,_cdg :=range _gaa {_cdg .SegmentDataStartOffset =_bfe ;_bfe +=_cdg .SegmentDataLength ;};};func (_ecca *Page )createPage (_agc *_df .PageInformationSegment )error {var _efd error ;
if !_agc .IsStripe ||_agc .PageBMHeight !=-1{_efd =_ecca .createNormalPage (_agc );}else {_efd =_ecca .createStripedPage (_agc );};return _efd ;};func _bbf (_dceb *Document ,_aeg int )*Page {return &Page {Document :_dceb ,PageNumber :_aeg ,Segments :[]*_df .Header {}};
};func (_ggc *Page )createNormalPage (_efad *_df .PageInformationSegment )error {const _agdg ="\u0063\u0072e\u0061\u0074\u0065N\u006f\u0072\u006d\u0061\u006c\u0050\u0061\u0067\u0065";_ggc .Bitmap =_ge .New (_efad .PageBMWidth ,_efad .PageBMHeight );if _efad .DefaultPixelValue !=0{_ggc .Bitmap .SetDefaultPixel ();
};for _ ,_bbc :=range _ggc .Segments {switch _bbc .Type {case 6,7,22,23,38,39,42,43:_g .Log .Trace ("\u0047\u0065\u0074\u0074in\u0067\u0020\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u003a\u0020\u0025\u0064",_bbc .SegmentNumber );_afda ,_cda :=_bbc .GetSegmentData ();
if _cda !=nil {return _cda ;};_dfbd ,_ceag :=_afda .(_df .Regioner );if !_ceag {_g .Log .Debug ("\u0053\u0065g\u006d\u0065\u006e\u0074\u003a\u0020\u0025\u0054\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0052\u0065\u0067\u0069on\u0065\u0072",_afda );
return _db .Errorf (_agdg ,"i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006a\u0062i\u0067\u0032\u0020\u0073\u0065\u0067\u006den\u0074\u0020\u0074\u0079p\u0065\u0020\u002d\u0020\u006e\u006f\u0074\u0020\u0061 R\u0065\u0067i\u006f\u006e\u0065\u0072\u003a\u0020\u0025\u0054",_afda );
};_bfbf ,_cda :=_dfbd .GetRegionBitmap ();if _cda !=nil {return _db .Wrap (_cda ,_agdg ,"");};if _ggc .fitsPage (_efad ,_bfbf ){_ggc .Bitmap =_bfbf ;}else {_eba :=_dfbd .GetRegionInfo ();_afcf :=_ggc .getCombinationOperator (_efad ,_eba .CombinaionOperator );
_cda =_ge .Blit (_bfbf ,_ggc .Bitmap ,int (_eba .XLocation ),int (_eba .YLocation ),_afcf );if _cda !=nil {return _db .Wrap (_cda ,_agdg ,"");};};};};return nil ;};func (_afc *Page )Encode (w _ab .BinaryWriter )(_ceg int ,_ggg error ){const _dca ="P\u0061\u0067\u0065\u002e\u0045\u006e\u0063\u006f\u0064\u0065";
var _fgc int ;for _ ,_ace :=range _afc .Segments {if _fgc ,_ggg =_ace .Encode (w );_ggg !=nil {return _ceg ,_db .Wrap (_ggg ,_dca ,"");};_ceg +=_fgc ;};return _ceg ,nil ;};func (_bdge *Page )GetResolutionY ()(int ,error ){return _bdge .getResolutionY ()};
type EncodingMethod int ;func (_aac *Document )reachedEOF (_eaac int64 )(bool ,error ){const _adc ="\u0072\u0065\u0061\u0063\u0068\u0065\u0064\u0045\u004f\u0046";_ ,_ada :=_aac .InputStream .Seek (_eaac ,_f .SeekStart );if _ada !=nil {_g .Log .Debug ("\u0072\u0065\u0061c\u0068\u0065\u0064\u0045\u004f\u0046\u0020\u002d\u0020\u0064\u002e\u0049\u006e\u0070\u0075\u0074\u0053\u0074\u0072\u0065\u0061\u006d\u002e\u0053\u0065\u0065\u006b\u0020\u0066a\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_ada );
return false ,_db .Wrap (_ada ,_adc ,"\u0069n\u0070\u0075\u0074\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u0020s\u0065\u0065\u006b\u0020\u0066\u0061\u0069\u006c\u0065\u0064");};_ ,_ada =_aac .InputStream .ReadBits (32);if _ada ==_f .EOF {return true ,nil ;
}else if _ada !=nil {return false ,_db .Wrap (_ada ,_adc ,"");};return false ,nil ;};func (_bacb *Page )composePageBitmap ()error {const _bgb ="\u0063\u006f\u006d\u0070\u006f\u0073\u0065\u0050\u0061\u0067\u0065\u0042i\u0074\u006d\u0061\u0070";if _bacb .PageNumber ==0{return nil ;
};_cbc :=_bacb .getPageInformationSegment ();if _cbc ==nil {return _db .Error (_bgb ,"\u0070\u0061\u0067e \u0069\u006e\u0066\u006f\u0072\u006d\u0061\u0074\u0069o\u006e \u0073e\u0067m\u0065\u006e\u0074\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064");
};_fac ,_eeb :=_cbc .GetSegmentData ();if _eeb !=nil {return _eeb ;};_gcab ,_dcee :=_fac .(*_df .PageInformationSegment );if !_dcee {return _db .Error (_bgb ,"\u0070\u0061\u0067\u0065\u0020\u0069\u006ef\u006f\u0072\u006da\u0074\u0069\u006f\u006e \u0073\u0065\u0067\u006d\u0065\u006e\u0074\u0020\u0069\u0073\u0020\u006f\u0066\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0074\u0079\u0070\u0065");
};if _eeb =_bacb .createPage (_gcab );_eeb !=nil {return _db .Wrap (_eeb ,_bgb ,"");};_bacb .clearSegmentData ();return nil ;};type Document struct{Pages map[int ]*Page ;NumberOfPagesUnknown bool ;NumberOfPages uint32 ;GBUseExtTemplate bool ;InputStream *_ab .Reader ;
GlobalSegments *Globals ;OrganizationType _df .OrganizationType ;Classer *_gd .Classer ;XRes ,YRes int ;FullHeaders bool ;CurrentSegmentNumber uint32 ;AverageTemplates *_ge .Bitmaps ;BaseIndexes []int ;Refinement bool ;RefineLevel int ;_ff uint8 ;_dfa *_ab .BufferedWriter ;
EncodeGlobals bool ;_cd int ;_aa map[int ][]int ;_cfa map[int ][]int ;_dg []int ;_ffe map[int ]int ;};func (_gdf *Page )AddPageInformationSegment (){_dfd :=&_df .PageInformationSegment {PageBMWidth :_gdf .FinalWidth ,PageBMHeight :_gdf .FinalHeight ,ResolutionX :_gdf .ResolutionX ,ResolutionY :_gdf .ResolutionY ,IsLossless :_gdf .IsLossless };
if _gdf .BlackIsOne {_dfd .DefaultPixelValue =uint8 (0x1);};_gdd :=&_df .Header {PageAssociation :_gdf .PageNumber ,SegmentDataLength :uint64 (_dfd .Size ()),SegmentData :_dfd ,Type :_df .TPageInformation };_gdf .Segments =append (_gdf .Segments ,_gdd );
};func (_efe *Document )nextPageNumber ()uint32 {_efe .NumberOfPages ++;return _efe .NumberOfPages };func (_fda *Page )clearSegmentData (){for _egbe :=range _fda .Segments {_fda .Segments [_egbe ].CleanSegmentData ();};};func (_bcc *Page )GetWidth ()(int ,error ){return _bcc .getWidth ()};
func (_cb *Document )encodeSegment (_ca *_df .Header ,_cbb *int )error {const _bg ="\u0065\u006e\u0063\u006f\u0064\u0065\u0053\u0065\u0067\u006d\u0065\u006e\u0074";_ca .SegmentNumber =_cb .nextSegmentNumber ();_fdc ,_ec :=_ca .Encode (_cb ._dfa );if _ec !=nil {return _db .Wrapf (_ec ,_bg ,"\u0073\u0065\u0067\u006d\u0065\u006e\u0074\u003a\u0020\u0027\u0025\u0064\u0027",_ca .SegmentNumber );
};*_cbb +=_fdc ;return nil ;};func (_gae *Page )getHeight ()(int ,error ){const _aba ="\u0067e\u0074\u0048\u0065\u0069\u0067\u0068t";if _gae .FinalHeight !=0{return _gae .FinalHeight ,nil ;};_ccb :=_gae .getPageInformationSegment ();if _ccb ==nil {return 0,_db .Error (_aba ,"n\u0069l\u0020\u0070\u0061\u0067\u0065\u0020\u0069\u006ef\u006f\u0072\u006d\u0061ti\u006f\u006e");
};_gdab ,_bbce :=_ccb .GetSegmentData ();if _bbce !=nil {return 0,_db .Wrap (_bbce ,_aba ,"");};_gfd ,_egbc :=_gdab .(*_df .PageInformationSegment );if !_egbc {return 0,_db .Errorf (_aba ,"\u0070\u0061\u0067\u0065\u0020\u0069n\u0066\u006f\u0072\u006d\u0061\u0074\u0069\u006f\u006e\u0020\u0073\u0065\u0067\u006d\u0065\u006e\u0074\u0020\u0069\u0073 \u006f\u0066\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0074\u0079\u0070e\u003a \u0027\u0025\u0054\u0027",_gdab );
};if _gfd .PageBMHeight ==_dc .MaxInt32 {_ ,_bbce =_gae .GetBitmap ();if _bbce !=nil {return 0,_db .Wrap (_bbce ,_aba ,"");};}else {_gae .FinalHeight =_gfd .PageBMHeight ;};return _gae .FinalHeight ,nil ;};func (_afcc *Page )collectPageStripes ()(_bdde []_df .Segmenter ,_ece error ){const _aefa ="\u0063o\u006cl\u0065\u0063\u0074\u0050\u0061g\u0065\u0053t\u0072\u0069\u0070\u0065\u0073";
var _dcga _df .Segmenter ;for _ ,_beec :=range _afcc .Segments {switch _beec .Type {case 6,7,22,23,38,39,42,43:_dcga ,_ece =_beec .GetSegmentData ();if _ece !=nil {return nil ,_db .Wrap (_ece ,_aefa ,"");};_bdde =append (_bdde ,_dcga );case 50:_dcga ,_ece =_beec .GetSegmentData ();
if _ece !=nil {return nil ,_ece ;};_efdf ,_cce :=_dcga .(*_df .EndOfStripe );if !_cce {return nil ,_db .Errorf (_aefa ,"\u0045\u006e\u0064\u004f\u0066\u0053\u0074\u0072\u0069\u0070\u0065\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u006f\u0066\u0020\u0076\u0061l\u0069\u0064\u0020\u0074\u0079p\u0065\u003a \u0027\u0025\u0054\u0027",_dcga );
};_bdde =append (_bdde ,_efdf );_afcc .FinalHeight =_efdf .LineNumber ();};};return _bdde ,nil ;};func (_ccf *Page )createStripedPage (_faaf *_df .PageInformationSegment )error {const _fed ="\u0063\u0072\u0065\u0061\u0074\u0065\u0053\u0074\u0072\u0069\u0070\u0065d\u0050\u0061\u0067\u0065";
_dba ,_cbac :=_ccf .collectPageStripes ();if _cbac !=nil {return _db .Wrap (_cbac ,_fed ,"");};var _add int ;for _ ,_eaf :=range _dba {if _fdcc ,_fbg :=_eaf .(*_df .EndOfStripe );_fbg {_add =_fdcc .LineNumber ()+1;}else {_fef :=_eaf .(_df .Regioner );_dgafa :=_fef .GetRegionInfo ();
_deb :=_ccf .getCombinationOperator (_faaf ,_dgafa .CombinaionOperator );_gge ,_adgd :=_fef .GetRegionBitmap ();if _adgd !=nil {return _db .Wrap (_adgd ,_fed ,"");};_adgd =_ge .Blit (_gge ,_ccf .Bitmap ,int (_dgafa .XLocation ),_add ,_deb );if _adgd !=nil {return _db .Wrap (_adgd ,_fed ,"");
};};};return nil ;};func (_bdb *Document )completeSymbols ()(_bbb error ){const _eab ="\u0063o\u006dp\u006c\u0065\u0074\u0065\u0053\u0079\u006d\u0062\u006f\u006c\u0073";if _bdb .Classer ==nil {return nil ;};if _bdb .Classer .UndilatedTemplates ==nil {return _db .Error (_eab ,"\u006e\u006f t\u0065\u006d\u0070l\u0061\u0074\u0065\u0073 de\u0066in\u0065\u0064\u0020\u0066\u006f\u0072\u0020th\u0065\u0020\u0063\u006c\u0061\u0073\u0073e\u0072");
};_bff :=len (_bdb .Pages )==1;_gfcd :=make ([]int ,_bdb .Classer .UndilatedTemplates .Size ());var _gee int ;for _gac :=0;_gac < _bdb .Classer .ClassIDs .Size ();_gac ++{_gee ,_bbb =_bdb .Classer .ClassIDs .Get (_gac );if _bbb !=nil {return _db .Wrap (_bbb ,_eab ,"\u0063\u006c\u0061\u0073\u0073\u0020\u0049\u0044\u0027\u0073");
};_gfcd [_gee ]++;};var _gcf []int ;for _de :=0;_de < _bdb .Classer .UndilatedTemplates .Size ();_de ++{if _gfcd [_de ]==0{return _db .Error (_eab ,"\u006eo\u0020\u0073y\u006d\u0062\u006f\u006cs\u0020\u0069\u006es\u0074\u0061\u006e\u0063\u0065\u0073\u0020\u0066\u006fun\u0064\u0020\u0066o\u0072\u0020g\u0069\u0076\u0065\u006e\u0020\u0063l\u0061\u0073s\u003f\u0020");
};if _gfcd [_de ]> 1||_bff {_gcf =append (_gcf ,_de );};};_bdb ._cd =len (_gcf );var _ead ,_cfe int ;for _fga :=0;_fga < _bdb .Classer .ComponentPageNumbers .Size ();_fga ++{_ead ,_bbb =_bdb .Classer .ComponentPageNumbers .Get (_fga );if _bbb !=nil {return _db .Wrapf (_bbb ,_eab ,"p\u0061\u0067\u0065\u003a\u0020\u0027\u0025\u0064\u0027 \u006e\u006f\u0074\u0020\u0066\u006f\u0075nd\u0020\u0069\u006e\u0020t\u0068\u0065\u0020\u0063\u006c\u0061\u0073\u0073\u0065r \u0070\u0061g\u0065\u006e\u0075\u006d\u0062\u0065\u0072\u0073",_fga );
};_cfe ,_bbb =_bdb .Classer .ClassIDs .Get (_fga );if _bbb !=nil {return _db .Wrapf (_bbb ,_eab ,"\u0063\u0061\u006e\u0027\u0074\u0020\u0067e\u0074\u0020\u0073y\u006d\u0062\u006f\u006c \u0066\u006f\u0072\u0020\u0070\u0061\u0067\u0065\u0020\u0027\u0025\u0064\u0027\u0020\u0066\u0072\u006f\u006d\u0020\u0063\u006c\u0061\u0073\u0073\u0065\u0072",_ead );
};if _gfcd [_cfe ]==1&&!_bff {_bdb ._aa [_ead ]=append (_bdb ._aa [_ead ],_cfe );};};if _bbb =_bdb .Classer .ComputeLLCorners ();_bbb !=nil {return _db .Wrap (_bbb ,_eab ,"");};return nil ;};func (_e *Document )AddClassifiedPage (bm *_ge .Bitmap ,method _gd .Method )(_gb error ){const _gda ="\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0041\u0064d\u0043\u006c\u0061\u0073\u0073\u0069\u0066\u0069\u0065\u0064P\u0061\u0067\u0065";
if !_e .FullHeaders &&_e .NumberOfPages !=0{return _db .Error (_gda ,"\u0064\u006f\u0063\u0075\u006de\u006e\u0074\u0020\u0061\u006c\u0072\u0065a\u0064\u0079\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0073\u0020\u0070\u0061\u0067\u0065\u002e\u0020\u0046\u0069\u006c\u0065\u004d\u006f\u0064\u0065\u0020\u0064\u0069\u0073\u0061\u006c\u006c\u006f\u0077\u0073\u0020\u0061\u0064\u0064i\u006e\u0067\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e \u006f\u006e\u0065\u0020\u0070\u0061g\u0065");
};if _e .Classer ==nil {if _e .Classer ,_gb =_gd .Init (_gd .DefaultSettings ());_gb !=nil {return _db .Wrap (_gb ,_gda ,"");};};_cc :=int (_e .nextPageNumber ());_da :=&Page {Segments :[]*_df .Header {},Bitmap :bm ,Document :_e ,FinalHeight :bm .Height ,FinalWidth :bm .Width ,PageNumber :_cc };
_e .Pages [_cc ]=_da ;switch method {case _gd .RankHaus :_da .EncodingMethod =RankHausEM ;case _gd .Correlation :_da .EncodingMethod =CorrelationEM ;};_da .AddPageInformationSegment ();if _gb =_e .Classer .AddPage (bm ,_cc ,method );_gb !=nil {return _db .Wrap (_gb ,_gda ,"");
};if _e .FullHeaders {_da .AddEndOfPageSegment ();};return nil ;};func (_dfe *Page )GetHeight ()(int ,error ){return _dfe .getHeight ()};func _adab (_cef *_ab .Reader ,_aea *Globals )(*Document ,error ){_baa :=&Document {Pages :make (map[int ]*Page ),InputStream :_cef ,OrganizationType :_df .OSequential ,NumberOfPagesUnknown :true ,GlobalSegments :_aea ,_ff :9};
if _baa .GlobalSegments ==nil {_baa .GlobalSegments =&Globals {};};if _feg :=_baa .mapData ();_feg !=nil {return nil ,_feg ;};return _baa ,nil ;};type Page struct{Segments []*_df .Header ;PageNumber int ;Bitmap *_ge .Bitmap ;FinalHeight int ;FinalWidth int ;
ResolutionX int ;ResolutionY int ;IsLossless bool ;Document *Document ;FirstSegmentNumber int ;EncodingMethod EncodingMethod ;BlackIsOne bool ;};func (_ggee *Page )getPageInformationSegment ()*_df .Header {for _ ,_ddb :=range _ggee .Segments {if _ddb .Type ==_df .TPageInformation {return _ddb ;
};};_g .Log .Debug ("\u0050\u0061\u0067\u0065\u0020\u0069\u006e\u0066o\u0072\u006d\u0061ti\u006f\u006e\u0020\u0073\u0065\u0067m\u0065\u006e\u0074\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064\u0020\u0066o\u0072\u0020\u0070\u0061\u0067\u0065\u003a\u0020%\u0073\u002e",_ggee );
return nil ;};func (_ceaf *Page )addTextRegionSegment (_daae []*_df .Header ,_dgaf ,_dfba map[int ]int ,_abf []int ,_bca *_ge .Points ,_efa *_ge .Bitmaps ,_gca *_gc .IntSlice ,_bfdb *_ge .Boxes ,_eea ,_ebf int ){_gcaf :=&_df .TextRegion {NumberOfSymbols :uint32 (_ebf )};
_gcaf .InitEncode (_dgaf ,_dfba ,_abf ,_bca ,_efa ,_gca ,_bfdb ,_ceaf .FinalWidth ,_ceaf .FinalHeight ,_eea );_gce :=&_df .Header {RTSegments :_daae ,SegmentData :_gcaf ,PageAssociation :_ceaf .PageNumber ,Type :_df .TImmediateTextRegion };_gcff :=_df .TPageInformation ;
if _dfba !=nil {_gcff =_df .TSymbolDictionary ;};var _gfa int ;for ;_gfa < len (_ceaf .Segments );_gfa ++{if _ceaf .Segments [_gfa ].Type ==_gcff {_gfa ++;break ;};};_ceaf .Segments =append (_ceaf .Segments ,nil );copy (_ceaf .Segments [_gfa +1:],_ceaf .Segments [_gfa :]);
_ceaf .Segments [_gfa ]=_gce ;};func (_gcg *Page )AddGenericRegion (bm *_ge .Bitmap ,xloc ,yloc ,template int ,tp _df .Type ,duplicateLineRemoval bool )error {const _fbde ="P\u0061\u0067\u0065\u002eAd\u0064G\u0065\u006e\u0065\u0072\u0069c\u0052\u0065\u0067\u0069\u006f\u006e";
_bcg :=&_df .GenericRegion {};if _ddc :=_bcg .InitEncode (bm ,xloc ,yloc ,template ,duplicateLineRemoval );_ddc !=nil {return _db .Wrap (_ddc ,_fbde ,"");};_gbd :=&_df .Header {Type :_df .TImmediateGenericRegion ,PageAssociation :_gcg .PageNumber ,SegmentData :_bcg };
_gcg .Segments =append (_gcg .Segments ,_gbd );return nil ;};func (_gdg *Page )lastSegmentNumber ()(_gcaba uint32 ,_dcd error ){const _fefe ="\u006c\u0061\u0073\u0074\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u004eu\u006d\u0062\u0065\u0072";if len (_gdg .Segments )==0{return _gcaba ,_db .Errorf (_fefe ,"\u006e\u006f\u0020se\u0067\u006d\u0065\u006e\u0074\u0073\u0020\u0066\u006fu\u006ed\u0020i\u006e \u0074\u0068\u0065\u0020\u0070\u0061\u0067\u0065\u0020\u0027\u0025\u0064\u0027",_gdg .PageNumber );
};return _gdg .Segments [len (_gdg .Segments )-1].SegmentNumber ,nil ;};func (_feb *Document )encodeEOFHeader (_daa _ab .BinaryWriter )(_gad int ,_ac error ){_ba :=&_df .Header {SegmentNumber :_feb .nextSegmentNumber (),Type :_df .TEndOfFile };if _gad ,_ac =_ba .Encode (_daa );
_ac !=nil {return 0,_db .Wrap (_ac ,"\u0065n\u0063o\u0064\u0065\u0045\u004f\u0046\u0048\u0065\u0061\u0064\u0065\u0072","");};return _gad ,nil ;};func (_abcf *Page )getWidth ()(int ,error ){const _abfe ="\u0067\u0065\u0074\u0057\u0069\u0064\u0074\u0068";
if _abcf .FinalWidth !=0{return _abcf .FinalWidth ,nil ;};_eec :=_abcf .getPageInformationSegment ();if _eec ==nil {return 0,_db .Error (_abfe ,"n\u0069l\u0020\u0070\u0061\u0067\u0065\u0020\u0069\u006ef\u006f\u0072\u006d\u0061ti\u006f\u006e");};_aab ,_deg :=_eec .GetSegmentData ();
if _deg !=nil {return 0,_db .Wrap (_deg ,_abfe ,"");};_dafe ,_fdba :=_aab .(*_df .PageInformationSegment );if !_fdba {return 0,_db .Errorf (_abfe ,"\u0070\u0061\u0067\u0065\u0020\u0069n\u0066\u006f\u0072\u006d\u0061\u0074\u0069\u006f\u006e\u0020\u0073\u0065\u0067\u006d\u0065\u006e\u0074\u0020\u0069\u0073 \u006f\u0066\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0074\u0079\u0070e\u003a \u0027\u0025\u0054\u0027",_aab );
};_abcf .FinalWidth =_dafe .PageBMWidth ;return _abcf .FinalWidth ,nil ;};func (_afa *Globals )GetSymbolDictionary ()(*_df .Header ,error ){const _cea ="G\u006c\u006f\u0062\u0061\u006c\u0073.\u0047\u0065\u0074\u0053\u0079\u006d\u0062\u006f\u006cD\u0069\u0063\u0074i\u006fn\u0061\u0072\u0079";
if _afa ==nil {return nil ,_db .Error (_cea ,"\u0067\u006c\u006f\u0062al\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if len (_afa .Segments )==0{return nil ,_db .Error (_cea ,"\u0067\u006c\u006f\u0062\u0061\u006c\u0073\u0020\u0061\u0072\u0065\u0020e\u006d\u0070\u0074\u0079");
};for _ ,_eac :=range _afa .Segments {if _eac .Type ==_df .TSymbolDictionary {return _eac ,nil ;};};return nil ,_db .Error (_cea ,"\u0067\u006c\u006fba\u006c\u0020\u0073\u0079\u006d\u0062\u006f\u006c\u0020d\u0069c\u0074i\u006fn\u0061\u0072\u0079\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064");
};func (_cba *Document )nextSegmentNumber ()uint32 {_adga :=_cba .CurrentSegmentNumber ;_cba .CurrentSegmentNumber ++;return _adga ;};func (_ced *Page )AddEndOfPageSegment (){_fdb :=&_df .Header {Type :_df .TEndOfPage ,PageAssociation :_ced .PageNumber };
_ced .Segments =append (_ced .Segments ,_fdb );};func (_dga *Document )produceClassifiedPage (_dde *Page ,_ef *_df .Header )(_bb error ){const _af ="p\u0072\u006f\u0064\u0075ce\u0043l\u0061\u0073\u0073\u0069\u0066i\u0065\u0064\u0050\u0061\u0067\u0065";
var _bdg map[int ]int ;_gec :=_dga ._cd ;_ed :=[]*_df .Header {_ef };if len (_dga ._aa [_dde .PageNumber ])> 0{_bdg =map[int ]int {};_gg ,_dfc :=_dga .addSymbolDictionary (_dde .PageNumber ,_dga .Classer .UndilatedTemplates ,_dga ._aa [_dde .PageNumber ],_bdg ,false );
if _dfc !=nil {return _db .Wrap (_dfc ,_af ,"");};_ed =append (_ed ,_gg );_gec +=len (_dga ._aa [_dde .PageNumber ]);};_fbd :=_dga ._cfa [_dde .PageNumber ];_g .Log .Debug ("P\u0061g\u0065\u003a\u0020\u0027\u0025\u0064\u0027\u0020c\u006f\u006d\u0070\u0073: \u0025\u0076",_dde .PageNumber ,_fbd );
_dde .addTextRegionSegment (_ed ,_dga ._ffe ,_bdg ,_dga ._cfa [_dde .PageNumber ],_dga .Classer .PtaLL ,_dga .Classer .UndilatedTemplates ,_dga .Classer .ClassIDs ,nil ,_dfg (_gec ),len (_dga ._cfa [_dde .PageNumber ]));return nil ;};type Globals struct{Segments []*_df .Header ;
};func (_dagf *Page )GetSegment (number int )(*_df .Header ,error ){const _fggc ="\u0050a\u0067e\u002e\u0047\u0065\u0074\u0053\u0065\u0067\u006d\u0065\u006e\u0074";for _ ,_bgc :=range _dagf .Segments {if _bgc .SegmentNumber ==uint32 (number ){return _bgc ,nil ;
};};_bac :=make ([]uint32 ,len (_dagf .Segments ));for _dgd ,_dabg :=range _dagf .Segments {_bac [_dgd ]=_dabg .SegmentNumber ;};return nil ,_db .Errorf (_fggc ,"\u0073e\u0067\u006d\u0065n\u0074\u0020\u0077i\u0074h \u006e\u0075\u006d\u0062\u0065\u0072\u003a \u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064\u0020\u0069\u006e\u0020\u0074\u0068\u0065\u0020\u0070\u0061\u0067\u0065\u003a\u0020'%\u0064'\u002e\u0020\u004b\u006e\u006f\u0077n\u0020\u0073\u0065\u0067\u006de\u006e\u0074\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0073\u003a \u0025\u0076",number ,_dagf .PageNumber ,_bac );
};func (_cbf *Page )getResolutionX ()(int ,error ){const _ddf ="\u0067\u0065\u0074\u0052\u0065\u0073\u006f\u006c\u0075t\u0069\u006f\u006e\u0058";if _cbf .ResolutionX !=0{return _cbf .ResolutionX ,nil ;};_eae :=_cbf .getPageInformationSegment ();if _eae ==nil {return 0,_db .Error (_ddf ,"n\u0069l\u0020\u0070\u0061\u0067\u0065\u0020\u0069\u006ef\u006f\u0072\u006d\u0061ti\u006f\u006e");
};_aad ,_afb :=_eae .GetSegmentData ();if _afb !=nil {return 0,_db .Wrap (_afb ,_ddf ,"");};_ddd ,_agcg :=_aad .(*_df .PageInformationSegment );if !_agcg {return 0,_db .Errorf (_ddf ,"\u0070\u0061\u0067\u0065\u0020\u0069n\u0066\u006f\u0072\u006d\u0061\u0074\u0069\u006f\u006e\u0020\u0073\u0065\u0067\u006d\u0065\u006e\u0074\u0020\u0069\u0073 \u006f\u0066\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0074\u0079\u0070e\u003a \u0027\u0025\u0054\u0027",_aad );
};_cbf .ResolutionX =_ddd .ResolutionX ;return _cbf .ResolutionX ,nil ;};func (_adg *Document )isFileHeaderPresent ()(bool ,error ){_adg .InputStream .Mark ();for _ ,_dab :=range _fd {_ecb ,_dfgf :=_adg .InputStream .ReadByte ();if _dfgf !=nil {return false ,_dfgf ;
};if _dab !=_ecb {_adg .InputStream .Reset ();return false ,nil ;};};_adg .InputStream .Reset ();return true ,nil ;};func (_fbdc *Page )GetResolutionX ()(int ,error ){return _fbdc .getResolutionX ()};func (_bee *Document )produceClassifiedPages ()(_ffec error ){const _bfb ="\u0070\u0072\u006f\u0064uc\u0065\u0043\u006c\u0061\u0073\u0073\u0069\u0066\u0069\u0065\u0064\u0050\u0061\u0067e\u0073";
if _bee .Classer ==nil {return nil ;};var (_gfbd *Page ;_cca bool ;_dfff *_df .Header ;);for _ea :=1;_ea <=int (_bee .NumberOfPages );_ea ++{if _gfbd ,_cca =_bee .Pages [_ea ];!_cca {return _db .Errorf (_bfb ,"p\u0061g\u0065\u003a\u0020\u0027\u0025\u0064\u0027\u0020n\u006f\u0074\u0020\u0066ou\u006e\u0064",_ea );
};if _gfbd .EncodingMethod ==GenericEM {continue ;};if _dfff ==nil {if _dfff ,_ffec =_bee .GlobalSegments .GetSymbolDictionary ();_ffec !=nil {return _db .Wrap (_ffec ,_bfb ,"");};};if _ffec =_bee .produceClassifiedPage (_gfbd ,_dfff );_ffec !=nil {return _db .Wrapf (_ffec ,_bfb ,"\u0070\u0061\u0067\u0065\u003a\u0020\u0027\u0025\u0064\u0027",_ea );
};};return nil ;};func (_edf *Document )addSymbolDictionary (_ad int ,_gba *_ge .Bitmaps ,_gfc []int ,_dcg map[int ]int ,_ddeg bool )(*_df .Header ,error ){const _aaf ="\u0061\u0064\u0064\u0053ym\u0062\u006f\u006c\u0044\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079";
_abb :=&_df .SymbolDictionary {};if _ged :=_abb .InitEncode (_gba ,_gfc ,_dcg ,_ddeg );_ged !=nil {return nil ,_ged ;};_cfc :=&_df .Header {Type :_df .TSymbolDictionary ,PageAssociation :_ad ,SegmentData :_abb };if _ad ==0{if _edf .GlobalSegments ==nil {_edf .GlobalSegments =&Globals {};
};_edf .GlobalSegments .AddSegment (_cfc );return _cfc ,nil ;};_age ,_dag :=_edf .Pages [_ad ];if !_dag {return nil ,_db .Errorf (_aaf ,"p\u0061g\u0065\u003a\u0020\u0027\u0025\u0064\u0027\u0020n\u006f\u0074\u0020\u0066ou\u006e\u0064",_ad );};var (_ga int ;
_bc *_df .Header ;);for _ga ,_bc =range _age .Segments {if _bc .Type ==_df .TPageInformation {break ;};};_ga ++;_age .Segments =append (_age .Segments ,nil );copy (_age .Segments [_ga +1:],_age .Segments [_ga :]);_age .Segments [_ga ]=_cfc ;return _cfc ,nil ;
};