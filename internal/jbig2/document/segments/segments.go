//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package segments ;import (_f "encoding/binary";_af "errors";_fe "fmt";_eg "github.com/unidoc/unipdf/v3/common";_fc "github.com/unidoc/unipdf/v3/internal/bitwise";_fb "github.com/unidoc/unipdf/v3/internal/jbig2/basic";_ea "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";
_ac "github.com/unidoc/unipdf/v3/internal/jbig2/decoder/arithmetic";_ad "github.com/unidoc/unipdf/v3/internal/jbig2/decoder/huffman";_fa "github.com/unidoc/unipdf/v3/internal/jbig2/decoder/mmr";_d "github.com/unidoc/unipdf/v3/internal/jbig2/encoder/arithmetic";
_g "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_b "github.com/unidoc/unipdf/v3/internal/jbig2/internal";_a "image";_cd "io";_e "math";_cf "strings";_aa "time";);func (_aabd *PatternDictionary )checkInput ()error {if _aabd .HdpHeight < 1||_aabd .HdpWidth < 1{return _af .New ("in\u0076\u0061l\u0069\u0064\u0020\u0048\u0065\u0061\u0064\u0065\u0072 \u0056\u0061\u006c\u0075\u0065\u003a\u0020\u0057\u0069\u0064\u0074\u0068\u002f\u0048\u0065\u0069\u0067\u0068\u0074\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020g\u0072e\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061n\u0020z\u0065\u0072o");
};if _aabd .IsMMREncoded {if _aabd .HDTemplate !=0{_eg .Log .Debug ("\u0076\u0061\u0072\u0069\u0061\u0062\u006c\u0065\u0020\u0048\u0044\u0054\u0065\u006d\u0070\u006c\u0061\u0074e\u0020\u0073\u0068\u006f\u0075\u006c\u0064 \u006e\u006f\u0074\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e \u0074\u0068\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0030");
};};return nil ;};func (_eefa *SymbolDictionary )InitEncode (symbols *_ea .Bitmaps ,symbolList []int ,symbolMap map[int ]int ,unborderSymbols bool )error {const _cebe ="S\u0079\u006d\u0062\u006f\u006c\u0044i\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u002eI\u006e\u0069\u0074E\u006ec\u006f\u0064\u0065";
_eefa .SdATX =[]int8 {3,-3,2,-2};_eefa .SdATY =[]int8 {-1,-1,-2,-2};_eefa ._gbac =symbols ;_eefa ._eggd =make ([]int ,len (symbolList ));copy (_eefa ._eggd ,symbolList );if len (_eefa ._eggd )!=_eefa ._gbac .Size (){return _g .Error (_cebe ,"s\u0079\u006d\u0062\u006f\u006c\u0073\u0020\u0061\u006e\u0064\u0020\u0073\u0079\u006d\u0062\u006f\u006c\u004ci\u0073\u0074\u0020\u006f\u0066\u0020\u0064\u0069\u0066\u0066er\u0065\u006e\u0074 \u0073i\u007a\u0065");
};_eefa .NumberOfNewSymbols =uint32 (symbols .Size ());_eefa .NumberOfExportedSymbols =uint32 (symbols .Size ());_eefa ._cfgg =symbolMap ;_eefa ._cbc =unborderSymbols ;return nil ;};func (_babf *PatternDictionary )readGrayMax ()error {_ccac ,_cedb :=_babf ._fed .ReadBits (32);
if _cedb !=nil {return _cedb ;};_babf .GrayMax =uint32 (_ccac &_e .MaxUint32 );return nil ;};func (_eea *SymbolDictionary )Encode (w _fc .BinaryWriter )(_ggcb int ,_gdgf error ){const _aadd ="\u0053\u0079\u006dbo\u006c\u0044\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u002e\u0045\u006e\u0063\u006f\u0064\u0065";
if _eea ==nil {return 0,_g .Error (_aadd ,"\u0073\u0079m\u0062\u006f\u006c\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066in\u0065\u0064");};if _ggcb ,_gdgf =_eea .encodeFlags (w );_gdgf !=nil {return _ggcb ,_g .Wrap (_gdgf ,_aadd ,"");
};_fgfgd ,_gdgf :=_eea .encodeATFlags (w );if _gdgf !=nil {return _ggcb ,_g .Wrap (_gdgf ,_aadd ,"");};_ggcb +=_fgfgd ;if _fgfgd ,_gdgf =_eea .encodeRefinementATFlags (w );_gdgf !=nil {return _ggcb ,_g .Wrap (_gdgf ,_aadd ,"");};_ggcb +=_fgfgd ;if _fgfgd ,_gdgf =_eea .encodeNumSyms (w );
_gdgf !=nil {return _ggcb ,_g .Wrap (_gdgf ,_aadd ,"");};_ggcb +=_fgfgd ;if _fgfgd ,_gdgf =_eea .encodeSymbols (w );_gdgf !=nil {return _ggcb ,_g .Wrap (_gdgf ,_aadd ,"");};_ggcb +=_fgfgd ;return _ggcb ,nil ;};func (_bfbd *SymbolDictionary )setSymbolsArray ()error {if _bfbd ._eggc ==nil {if _fcfa :=_bfbd .retrieveImportSymbols ();
_fcfa !=nil {return _fcfa ;};};if _bfbd ._gafc ==nil {_bfbd ._gafc =append (_bfbd ._gafc ,_bfbd ._eggc ...);};return nil ;};func (_ec *GenericRefinementRegion )decodeOptimized (_fda ,_dae ,_cg ,_gb ,_gfe ,_be ,_egc int )error {var (_cca error ;_cea int ;
_ff int ;);_gd :=_fda -int (_ec .ReferenceDY );if _fdd :=int (-_ec .ReferenceDX );_fdd > 0{_cea =_fdd ;};_dgbg :=_ec .ReferenceBitmap .GetByteIndex (_cea ,_gd );if _ec .ReferenceDX > 0{_ff =int (_ec .ReferenceDX );};_fcd :=_ec .RegionBitmap .GetByteIndex (_ff ,_fda );
switch _ec .TemplateID {case 0:_cca =_ec .decodeTemplate (_fda ,_dae ,_cg ,_gb ,_gfe ,_be ,_egc ,_fcd ,_gd ,_dgbg ,_ec ._da );case 1:_cca =_ec .decodeTemplate (_fda ,_dae ,_cg ,_gb ,_gfe ,_be ,_egc ,_fcd ,_gd ,_dgbg ,_ec ._ed );};return _cca ;};func (_gcee *PatternDictionary )readTemplate ()error {_agfg ,_eddf :=_gcee ._fed .ReadBits (2);
if _eddf !=nil {return _eddf ;};_gcee .HDTemplate =byte (_agfg );return nil ;};func (_bffg *GenericRefinementRegion )updateOverride ()error {if _bffg .GrAtX ==nil ||_bffg .GrAtY ==nil {return _af .New ("\u0041\u0054\u0020\u0070\u0069\u0078\u0065\u006c\u0073\u0020\u006e\u006ft\u0020\u0073\u0065\u0074");
};if len (_bffg .GrAtX )!=len (_bffg .GrAtY ){return _af .New ("A\u0054\u0020\u0070\u0069xe\u006c \u0069\u006e\u0063\u006f\u006es\u0069\u0073\u0074\u0065\u006e\u0074");};_bffg ._dd =make ([]bool ,len (_bffg .GrAtX ));switch _bffg .TemplateID {case 0:if _bffg .GrAtX [0]!=-1&&_bffg .GrAtY [0]!=-1{_bffg ._dd [0]=true ;
_bffg ._ebf =true ;};if _bffg .GrAtX [1]!=-1&&_bffg .GrAtY [1]!=-1{_bffg ._dd [1]=true ;_bffg ._ebf =true ;};case 1:_bffg ._ebf =false ;};return nil ;};func (_ebdd *TextRegion )blit (_accd *_ea .Bitmap ,_fcgg int64 )error {if _ebdd .IsTransposed ==0&&(_ebdd .ReferenceCorner ==2||_ebdd .ReferenceCorner ==3){_ebdd ._bgaad +=int64 (_accd .Width -1);
}else if _ebdd .IsTransposed ==1&&(_ebdd .ReferenceCorner ==0||_ebdd .ReferenceCorner ==2){_ebdd ._bgaad +=int64 (_accd .Height -1);};_cdgg :=_ebdd ._bgaad ;if _ebdd .IsTransposed ==1{_cdgg ,_fcgg =_fcgg ,_cdgg ;};switch _ebdd .ReferenceCorner {case 0:_fcgg -=int64 (_accd .Height -1);
case 2:_fcgg -=int64 (_accd .Height -1);_cdgg -=int64 (_accd .Width -1);case 3:_cdgg -=int64 (_accd .Width -1);};_bgaeg :=_ea .Blit (_accd ,_ebdd .RegionBitmap ,int (_cdgg ),int (_fcgg ),_ebdd .CombinationOperator );if _bgaeg !=nil {return _bgaeg ;};if _ebdd .IsTransposed ==0&&(_ebdd .ReferenceCorner ==0||_ebdd .ReferenceCorner ==1){_ebdd ._bgaad +=int64 (_accd .Width -1);
};if _ebdd .IsTransposed ==1&&(_ebdd .ReferenceCorner ==1||_ebdd .ReferenceCorner ==3){_ebdd ._bgaad +=int64 (_accd .Height -1);};return nil ;};func (_dff *GenericRegion )String ()string {_egb :=&_cf .Builder {};_egb .WriteString ("\u000a[\u0047E\u004e\u0045\u0052\u0049\u0043 \u0052\u0045G\u0049\u004f\u004e\u005d\u000a");
_egb .WriteString (_dff .RegionSegment .String ()+"\u000a");_egb .WriteString (_fe .Sprintf ("\u0009\u002d\u0020Us\u0065\u0045\u0078\u0074\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0073\u003a\u0020\u0025\u0076\u000a",_dff .UseExtTemplates ));_egb .WriteString (_fe .Sprintf ("\u0009\u002d \u0049\u0073\u0054P\u0047\u0044\u006f\u006e\u003a\u0020\u0025\u0076\u000a",_dff .IsTPGDon ));
_egb .WriteString (_fe .Sprintf ("\u0009-\u0020G\u0042\u0054\u0065\u006d\u0070l\u0061\u0074e\u003a\u0020\u0025\u0064\u000a",_dff .GBTemplate ));_egb .WriteString (_fe .Sprintf ("\t\u002d \u0049\u0073\u004d\u004d\u0052\u0045\u006e\u0063o\u0064\u0065\u0064\u003a %\u0076\u000a",_dff .IsMMREncoded ));
_egb .WriteString (_fe .Sprintf ("\u0009\u002d\u0020\u0047\u0042\u0041\u0074\u0058\u003a\u0020\u0025\u0076\u000a",_dff .GBAtX ));_egb .WriteString (_fe .Sprintf ("\u0009\u002d\u0020\u0047\u0042\u0041\u0074\u0059\u003a\u0020\u0025\u0076\u000a",_dff .GBAtY ));
_egb .WriteString (_fe .Sprintf ("\t\u002d \u0047\u0042\u0041\u0074\u004f\u0076\u0065\u0072r\u0069\u0064\u0065\u003a %\u0076\u000a",_dff .GBAtOverride ));return _egb .String ();};func (_bdbc *PageInformationSegment )checkInput ()error {if _bdbc .PageBMHeight ==_e .MaxInt32 {if !_bdbc .IsStripe {_eg .Log .Debug ("P\u0061\u0067\u0065\u0049\u006e\u0066\u006f\u0072\u006da\u0074\u0069\u006f\u006e\u0053\u0065\u0067me\u006e\u0074\u002e\u0049s\u0053\u0074\u0072\u0069\u0070\u0065\u0020\u0073\u0068ou\u006c\u0064 \u0062\u0065\u0020\u0074\u0072\u0075\u0065\u002e");
};};return nil ;};func (_gbba *SymbolDictionary )readRefinementAtPixels (_acbg int )error {_gbba .SdrATX =make ([]int8 ,_acbg );_gbba .SdrATY =make ([]int8 ,_acbg );var (_gcfee byte ;_dgff error ;);for _bedb :=0;_bedb < _acbg ;_bedb ++{_gcfee ,_dgff =_gbba ._degd .ReadByte ();
if _dgff !=nil {return _dgff ;};_gbba .SdrATX [_bedb ]=int8 (_gcfee );_gcfee ,_dgff =_gbba ._degd .ReadByte ();if _dgff !=nil {return _dgff ;};_gbba .SdrATY [_bedb ]=int8 (_gcfee );};return nil ;};func (_fcba *SymbolDictionary )readRegionFlags ()error {var (_eaeed uint64 ;
_cfec int ;);_ ,_effg :=_fcba ._degd .ReadBits (3);if _effg !=nil {return _effg ;};_cfec ,_effg =_fcba ._degd .ReadBit ();if _effg !=nil {return _effg ;};_fcba .SdrTemplate =int8 (_cfec );_eaeed ,_effg =_fcba ._degd .ReadBits (2);if _effg !=nil {return _effg ;
};_fcba .SdTemplate =int8 (_eaeed &0xf);_cfec ,_effg =_fcba ._degd .ReadBit ();if _effg !=nil {return _effg ;};if _cfec ==1{_fcba ._fdae =true ;};_cfec ,_effg =_fcba ._degd .ReadBit ();if _effg !=nil {return _effg ;};if _cfec ==1{_fcba ._cggf =true ;};
_cfec ,_effg =_fcba ._degd .ReadBit ();if _effg !=nil {return _effg ;};if _cfec ==1{_fcba .SdHuffAggInstanceSelection =true ;};_cfec ,_effg =_fcba ._degd .ReadBit ();if _effg !=nil {return _effg ;};_fcba .SdHuffBMSizeSelection =int8 (_cfec );_eaeed ,_effg =_fcba ._degd .ReadBits (2);
if _effg !=nil {return _effg ;};_fcba .SdHuffDecodeWidthSelection =int8 (_eaeed &0xf);_eaeed ,_effg =_fcba ._degd .ReadBits (2);if _effg !=nil {return _effg ;};_fcba .SdHuffDecodeHeightSelection =int8 (_eaeed &0xf);_cfec ,_effg =_fcba ._degd .ReadBit ();
if _effg !=nil {return _effg ;};if _cfec ==1{_fcba .UseRefinementAggregation =true ;};_cfec ,_effg =_fcba ._degd .ReadBit ();if _effg !=nil {return _effg ;};if _cfec ==1{_fcba .IsHuffmanEncoded =true ;};return nil ;};func (_bfb *GenericRegion )readGBAtPixels (_bfcba int )error {const _faag ="\u0072\u0065\u0061\u0064\u0047\u0042\u0041\u0074\u0050i\u0078\u0065\u006c\u0073";
_bfb .GBAtX =make ([]int8 ,_bfcba );_bfb .GBAtY =make ([]int8 ,_bfcba );for _dfbdb :=0;_dfbdb < _bfcba ;_dfbdb ++{_ggcg ,_cegd :=_bfb ._dcd .ReadByte ();if _cegd !=nil {return _g .Wrapf (_cegd ,_faag ,"\u0058\u0020\u0061t\u0020\u0069\u003a\u0020\u0027\u0025\u0064\u0027",_dfbdb );
};_bfb .GBAtX [_dfbdb ]=int8 (_ggcg );_ggcg ,_cegd =_bfb ._dcd .ReadByte ();if _cegd !=nil {return _g .Wrapf (_cegd ,_faag ,"\u0059\u0020\u0061t\u0020\u0069\u003a\u0020\u0027\u0025\u0064\u0027",_dfbdb );};_bfb .GBAtY [_dfbdb ]=int8 (_ggcg );};return nil ;
};func (_dfbb *TextRegion )decodeRdw ()(int64 ,error ){const _agbb ="\u0064e\u0063\u006f\u0064\u0065\u0052\u0064w";if _dfbb .IsHuffmanEncoded {if _dfbb .SbHuffRDWidth ==3{if _dfbb ._dacgd ==nil {var (_fceeb int ;_bdgda error ;);if _dfbb .SbHuffFS ==3{_fceeb ++;
};if _dfbb .SbHuffDS ==3{_fceeb ++;};if _dfbb .SbHuffDT ==3{_fceeb ++;};_dfbb ._dacgd ,_bdgda =_dfbb .getUserTable (_fceeb );if _bdgda !=nil {return 0,_g .Wrap (_bdgda ,_agbb ,"");};};return _dfbb ._dacgd .Decode (_dfbb ._afda );};_adfa ,_ebac :=_ad .GetStandardTable (14+int (_dfbb .SbHuffRDWidth ));
if _ebac !=nil {return 0,_g .Wrap (_ebac ,_agbb ,"");};return _adfa .Decode (_dfbb ._afda );};_abgdd ,_ffee :=_dfbb ._gagc .DecodeInt (_dfbb ._efaaa );if _ffee !=nil {return 0,_g .Wrap (_ffee ,_agbb ,"");};return int64 (_abgdd ),nil ;};func (_efgb *Header )readSegmentNumber (_bcfg *_fc .Reader )error {const _bebd ="\u0072\u0065\u0061\u0064\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u004eu\u006d\u0062\u0065\u0072";
_aeda :=make ([]byte ,4);_ ,_gdf :=_bcfg .Read (_aeda );if _gdf !=nil {return _g .Wrap (_gdf ,_bebd ,"");};_efgb .SegmentNumber =_f .BigEndian .Uint32 (_aeda );return nil ;};func (_eaaba *TextRegion )encodeSymbols (_eced _fc .BinaryWriter )(_fdfa int ,_bbfa error ){const _gafce ="\u0065\u006e\u0063\u006f\u0064\u0065\u0053\u0079\u006d\u0062\u006f\u006c\u0073";
_fdac :=make ([]byte ,4);_f .BigEndian .PutUint32 (_fdac ,_eaaba .NumberOfSymbols );if _fdfa ,_bbfa =_eced .Write (_fdac );_bbfa !=nil {return _fdfa ,_g .Wrap (_bbfa ,_gafce ,"\u004e\u0075\u006dbe\u0072\u004f\u0066\u0053\u0079\u006d\u0062\u006f\u006c\u0049\u006e\u0073\u0074\u0061\u006e\u0063\u0065\u0073");
};_bcdcg ,_bbfa :=_ea .NewClassedPoints (_eaaba ._gfbag ,_eaaba ._cddab );if _bbfa !=nil {return 0,_g .Wrap (_bbfa ,_gafce ,"");};var _dfgbc ,_ddcaf int ;_eacb :=_d .New ();_eacb .Init ();if _bbfa =_eacb .EncodeInteger (_d .IADT ,0);_bbfa !=nil {return _fdfa ,_g .Wrap (_bbfa ,_gafce ,"\u0069\u006e\u0069\u0074\u0069\u0061\u006c\u0020\u0044\u0054");
};_gbga ,_bbfa :=_bcdcg .GroupByY ();if _bbfa !=nil {return 0,_g .Wrap (_bbfa ,_gafce ,"");};for _ ,_cgfg :=range _gbga {_gacc :=int (_cgfg .YAtIndex (0));_eaddg :=_gacc -_dfgbc ;if _bbfa =_eacb .EncodeInteger (_d .IADT ,_eaddg );_bbfa !=nil {return _fdfa ,_g .Wrap (_bbfa ,_gafce ,"");
};var _badf int ;for _cefc ,_gecc :=range _cgfg .IntSlice {switch _cefc {case 0:_affb :=int (_cgfg .XAtIndex (_cefc ))-_ddcaf ;if _bbfa =_eacb .EncodeInteger (_d .IAFS ,_affb );_bbfa !=nil {return _fdfa ,_g .Wrap (_bbfa ,_gafce ,"");};_ddcaf +=_affb ;_badf =_ddcaf ;
default:_fcgd :=int (_cgfg .XAtIndex (_cefc ))-_badf ;if _bbfa =_eacb .EncodeInteger (_d .IADS ,_fcgd );_bbfa !=nil {return _fdfa ,_g .Wrap (_bbfa ,_gafce ,"");};_badf +=_fcgd ;};_defg ,_gffd :=_eaaba ._dgfee .Get (_gecc );if _gffd !=nil {return _fdfa ,_g .Wrap (_gffd ,_gafce ,"");
};_edadd ,_bddac :=_eaaba ._gfac [_defg ];if !_bddac {_edadd ,_bddac =_eaaba ._ceabb [_defg ];if !_bddac {return _fdfa ,_g .Errorf (_gafce ,"\u0053\u0079\u006d\u0062\u006f\u006c:\u0020\u0027\u0025d\u0027\u0020\u0069s\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064 \u0069\u006e\u0020\u0067\u006cob\u0061\u006c\u0020\u0061\u006e\u0064\u0020\u006c\u006f\u0063\u0061\u006c\u0020\u0073\u0079\u006d\u0062\u006f\u006c\u0020\u006d\u0061\u0070",_defg );
};};if _gffd =_eacb .EncodeIAID (_eaaba ._fbgf ,_edadd );_gffd !=nil {return _fdfa ,_g .Wrap (_gffd ,_gafce ,"");};};if _bbfa =_eacb .EncodeOOB (_d .IADS );_bbfa !=nil {return _fdfa ,_g .Wrap (_bbfa ,_gafce ,"");};};_eacb .Final ();_eadb ,_bbfa :=_eacb .WriteTo (_eced );
if _bbfa !=nil {return _fdfa ,_g .Wrap (_bbfa ,_gafce ,"");};_fdfa +=int (_eadb );return _fdfa ,nil ;};func (_bba *GenericRegion )overrideAtTemplate2 (_geggd ,_cddd ,_aebg ,_gfbf ,_gdbg int )int {_geggd &=0x3FB;if _bba .GBAtY [0]==0&&_bba .GBAtX [0]>=-int8 (_gdbg ){_geggd |=(_gfbf >>uint (7-(int8 (_gdbg )+_bba .GBAtX [0]))&0x1)<<2;
}else {_geggd |=int (_bba .getPixel (_cddd +int (_bba .GBAtX [0]),_aebg +int (_bba .GBAtY [0])))<<2;};return _geggd ;};func (_bfeaa *TextRegion )checkInput ()error {const _addb ="\u0063\u0068\u0065\u0063\u006b\u0049\u006e\u0070\u0075\u0074";if !_bfeaa .UseRefinement {if _bfeaa .SbrTemplate !=0{_eg .Log .Debug ("\u0053\u0062\u0072Te\u006d\u0070\u006c\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0030");
_bfeaa .SbrTemplate =0;};};if _bfeaa .SbHuffFS ==2||_bfeaa .SbHuffRDWidth ==2||_bfeaa .SbHuffRDHeight ==2||_bfeaa .SbHuffRDX ==2||_bfeaa .SbHuffRDY ==2{return _g .Error (_addb ,"h\u0075\u0066\u0066\u006d\u0061\u006e \u0066\u006c\u0061\u0067\u0020\u0076a\u006c\u0075\u0065\u0020\u0069\u0073\u0020n\u006f\u0074\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074e\u0064");
};if !_bfeaa .UseRefinement {if _bfeaa .SbHuffRSize !=0{_eg .Log .Debug ("\u0053\u0062\u0048uf\u0066\u0052\u0053\u0069\u007a\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0030");_bfeaa .SbHuffRSize =0;};if _bfeaa .SbHuffRDY !=0{_eg .Log .Debug ("S\u0062\u0048\u0075\u0066fR\u0044Y\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0030");
_bfeaa .SbHuffRDY =0;};if _bfeaa .SbHuffRDX !=0{_eg .Log .Debug ("S\u0062\u0048\u0075\u0066fR\u0044X\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0030");_bfeaa .SbHuffRDX =0;};if _bfeaa .SbHuffRDWidth !=0{_eg .Log .Debug ("\u0053b\u0048\u0075\u0066\u0066R\u0044\u0057\u0069\u0064\u0074h\u0020s\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u00200");
_bfeaa .SbHuffRDWidth =0;};if _bfeaa .SbHuffRDHeight !=0{_eg .Log .Debug ("\u0053\u0062\u0048\u0075\u0066\u0066\u0052\u0044\u0048\u0065\u0069g\u0068\u0074\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020b\u0065\u0020\u0030");_bfeaa .SbHuffRDHeight =0;};
};return nil ;};func (_aafe *PatternDictionary )GetDictionary ()([]*_ea .Bitmap ,error ){if _aafe .Patterns !=nil {return _aafe .Patterns ,nil ;};if !_aafe .IsMMREncoded {_aafe .setGbAtPixels ();};_bagb :=NewGenericRegion (_aafe ._fed );_bagb .setParametersMMR (_aafe .IsMMREncoded ,_aafe .DataOffset ,_aafe .DataLength ,uint32 (_aafe .HdpHeight ),(_aafe .GrayMax +1)*uint32 (_aafe .HdpWidth ),_aafe .HDTemplate ,false ,false ,_aafe .GBAtX ,_aafe .GBAtY );
_ecdf ,_edcd :=_bagb .GetRegionBitmap ();if _edcd !=nil {return nil ,_edcd ;};if _edcd =_aafe .extractPatterns (_ecdf );_edcd !=nil {return nil ,_edcd ;};return _aafe .Patterns ,nil ;};var _ SegmentEncoder =&RegionSegment {};type Pager interface{GetSegment (int )(*Header ,error );
GetBitmap ()(*_ea .Bitmap ,error );};func (_bdbedd *SymbolDictionary )encodeNumSyms (_gbaca _fc .BinaryWriter )(_dcbe int ,_dfee error ){const _faeg ="\u0065\u006e\u0063\u006f\u0064\u0065\u004e\u0075\u006d\u0053\u0079\u006d\u0073";_aeaba :=make ([]byte ,4);
_f .BigEndian .PutUint32 (_aeaba ,_bdbedd .NumberOfExportedSymbols );if _dcbe ,_dfee =_gbaca .Write (_aeaba );_dfee !=nil {return _dcbe ,_g .Wrap (_dfee ,_faeg ,"\u0065\u0078p\u006f\u0072\u0074e\u0064\u0020\u0073\u0079\u006d\u0062\u006f\u006c\u0073");};
_f .BigEndian .PutUint32 (_aeaba ,_bdbedd .NumberOfNewSymbols );_cbga ,_dfee :=_gbaca .Write (_aeaba );if _dfee !=nil {return _dcbe ,_g .Wrap (_dfee ,_faeg ,"n\u0065\u0077\u0020\u0073\u0079\u006d\u0062\u006f\u006c\u0073");};return _dcbe +_cbga ,nil ;};
func (_eedd *SymbolDictionary )decodeHeightClassCollectiveBitmap (_dfabd int64 ,_baag ,_fadb uint32 )(*_ea .Bitmap ,error ){if _dfabd ==0{_ebeb :=_ea .New (int (_fadb ),int (_baag ));var (_efaf byte ;_cdfg error ;);for _fbaee :=0;_fbaee < len (_ebeb .Data );
_fbaee ++{_efaf ,_cdfg =_eedd ._degd .ReadByte ();if _cdfg !=nil {return nil ,_cdfg ;};if _cdfg =_ebeb .SetByte (_fbaee ,_efaf );_cdfg !=nil {return nil ,_cdfg ;};};return _ebeb ,nil ;};if _eedd ._ddda ==nil {_eedd ._ddda =NewGenericRegion (_eedd ._degd );
};_eedd ._ddda .setParameters (true ,_eedd ._degd .AbsolutePosition (),_dfabd ,_baag ,_fadb );_effb ,_cbgdd :=_eedd ._ddda .GetRegionBitmap ();if _cbgdd !=nil {return nil ,_cbgdd ;};return _effb ,nil ;};func (_adcb *TextRegion )setCodingStatistics ()error {if _adcb ._bfcbad ==nil {_adcb ._bfcbad =_ac .NewStats (512,1);
};if _adcb ._gffg ==nil {_adcb ._gffg =_ac .NewStats (512,1);};if _adcb ._dgge ==nil {_adcb ._dgge =_ac .NewStats (512,1);};if _adcb ._fbgbf ==nil {_adcb ._fbgbf =_ac .NewStats (512,1);};if _adcb ._eddbfg ==nil {_adcb ._eddbfg =_ac .NewStats (512,1);};
if _adcb ._efaaa ==nil {_adcb ._efaaa =_ac .NewStats (512,1);};if _adcb ._agcc ==nil {_adcb ._agcc =_ac .NewStats (512,1);};if _adcb ._geeec ==nil {_adcb ._geeec =_ac .NewStats (1<<uint (_adcb ._bage ),1);};if _adcb ._eegfc ==nil {_adcb ._eegfc =_ac .NewStats (512,1);
};if _adcb ._eaeab ==nil {_adcb ._eaeab =_ac .NewStats (512,1);};if _adcb ._gagc ==nil {var _cedg error ;_adcb ._gagc ,_cedg =_ac .New (_adcb ._afda );if _cedg !=nil {return _cedg ;};};return nil ;};func (_adf *GenericRefinementRegion )decodeTypicalPredictedLineTemplate0 (_cdb ,_gda ,_faf ,_ae ,_fbg ,_gef ,_dcb ,_cec ,_df int )error {var (_geg ,_dfd ,_ffb ,_eae ,_eba ,_cfc int ;
_aed byte ;_bea error ;);if _cdb > 0{_aed ,_bea =_adf .RegionBitmap .GetByte (_dcb -_faf );if _bea !=nil {return _bea ;};_ffb =int (_aed );};if _cec > 0&&_cec <=_adf .ReferenceBitmap .Height {_aed ,_bea =_adf .ReferenceBitmap .GetByte (_df -_ae +_gef );
if _bea !=nil {return _bea ;};_eae =int (_aed )<<4;};if _cec >=0&&_cec < _adf .ReferenceBitmap .Height {_aed ,_bea =_adf .ReferenceBitmap .GetByte (_df +_gef );if _bea !=nil {return _bea ;};_eba =int (_aed )<<1;};if _cec > -2&&_cec < _adf .ReferenceBitmap .Height -1{_aed ,_bea =_adf .ReferenceBitmap .GetByte (_df +_ae +_gef );
if _bea !=nil {return _bea ;};_cfc =int (_aed );};_geg =((_ffb >>5)&0x6)|((_cfc >>2)&0x30)|(_eba &0x180)|(_eae &0xc00);var _daf int ;for _afg :=0;_afg < _fbg ;_afg =_daf {var _ace int ;_daf =_afg +8;var _cfg int ;if _cfg =_gda -_afg ;_cfg > 8{_cfg =8;};
_egce :=_daf < _gda ;_ece :=_daf < _adf .ReferenceBitmap .Width ;_dfg :=_gef +1;if _cdb > 0{_aed =0;if _egce {_aed ,_bea =_adf .RegionBitmap .GetByte (_dcb -_faf +1);if _bea !=nil {return _bea ;};};_ffb =(_ffb <<8)|int (_aed );};if _cec > 0&&_cec <=_adf .ReferenceBitmap .Height {var _ee int ;
if _ece {_aed ,_bea =_adf .ReferenceBitmap .GetByte (_df -_ae +_dfg );if _bea !=nil {return _bea ;};_ee =int (_aed )<<4;};_eae =(_eae <<8)|_ee ;};if _cec >=0&&_cec < _adf .ReferenceBitmap .Height {var _agg int ;if _ece {_aed ,_bea =_adf .ReferenceBitmap .GetByte (_df +_dfg );
if _bea !=nil {return _bea ;};_agg =int (_aed )<<1;};_eba =(_eba <<8)|_agg ;};if _cec > -2&&_cec < (_adf .ReferenceBitmap .Height -1){_aed =0;if _ece {_aed ,_bea =_adf .ReferenceBitmap .GetByte (_df +_ae +_dfg );if _bea !=nil {return _bea ;};};_cfc =(_cfc <<8)|int (_aed );
};for _beg :=0;_beg < _cfg ;_beg ++{var _dfb int ;_ca :=false ;_acd :=(_geg >>4)&0x1ff;if _acd ==0x1ff{_ca =true ;_dfb =1;}else if _acd ==0x00{_ca =true ;};if !_ca {if _adf ._ebf {_dfd =_adf .overrideAtTemplate0 (_geg ,_afg +_beg ,_cdb ,_ace ,_beg );_adf ._ege .SetIndex (int32 (_dfd ));
}else {_adf ._ege .SetIndex (int32 (_geg ));};_dfb ,_bea =_adf ._cc .DecodeBit (_adf ._ege );if _bea !=nil {return _bea ;};};_gec :=uint (7-_beg );_ace |=_dfb <<_gec ;_geg =((_geg &0xdb6)<<1)|_dfb |(_ffb >>_gec +5)&0x002|((_cfc >>_gec +2)&0x010)|((_eba >>_gec )&0x080)|((_eae >>_gec )&0x400);
};_bea =_adf .RegionBitmap .SetByte (_dcb ,byte (_ace ));if _bea !=nil {return _bea ;};_dcb ++;_df ++;};return nil ;};func (_gacaa *TextRegion )encodeFlags (_cabb _fc .BinaryWriter )(_dcda int ,_aefb error ){const _dcbda ="e\u006e\u0063\u006f\u0064\u0065\u0046\u006c\u0061\u0067\u0073";
if _aefb =_cabb .WriteBit (int (_gacaa .SbrTemplate ));_aefb !=nil {return _dcda ,_g .Wrap (_aefb ,_dcbda ,"s\u0062\u0072\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065");};if _ ,_aefb =_cabb .WriteBits (uint64 (_gacaa .SbDsOffset ),5);_aefb !=nil {return _dcda ,_g .Wrap (_aefb ,_dcbda ,"\u0073\u0062\u0044\u0073\u004f\u0066\u0066\u0073\u0065\u0074");
};if _aefb =_cabb .WriteBit (int (_gacaa .DefaultPixel ));_aefb !=nil {return _dcda ,_g .Wrap (_aefb ,_dcbda ,"\u0044\u0065\u0066a\u0075\u006c\u0074\u0050\u0069\u0078\u0065\u006c");};if _ ,_aefb =_cabb .WriteBits (uint64 (_gacaa .CombinationOperator ),2);
_aefb !=nil {return _dcda ,_g .Wrap (_aefb ,_dcbda ,"\u0043\u006f\u006d\u0062in\u0061\u0074\u0069\u006f\u006e\u004f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");};if _aefb =_cabb .WriteBit (int (_gacaa .IsTransposed ));_aefb !=nil {return _dcda ,_g .Wrap (_aefb ,_dcbda ,"\u0069\u0073\u0020\u0074\u0072\u0061\u006e\u0073\u0070\u006f\u0073\u0065\u0064");
};if _ ,_aefb =_cabb .WriteBits (uint64 (_gacaa .ReferenceCorner ),2);_aefb !=nil {return _dcda ,_g .Wrap (_aefb ,_dcbda ,"\u0072\u0065f\u0065\u0072\u0065n\u0063\u0065\u0020\u0063\u006f\u0072\u006e\u0065\u0072");};if _ ,_aefb =_cabb .WriteBits (uint64 (_gacaa .LogSBStrips ),2);
_aefb !=nil {return _dcda ,_g .Wrap (_aefb ,_dcbda ,"L\u006f\u0067\u0053\u0042\u0053\u0074\u0072\u0069\u0070\u0073");};var _ccec int ;if _gacaa .UseRefinement {_ccec =1;};if _aefb =_cabb .WriteBit (_ccec );_aefb !=nil {return _dcda ,_g .Wrap (_aefb ,_dcbda ,"\u0075\u0073\u0065\u0020\u0072\u0065\u0066\u0069\u006ee\u006d\u0065\u006e\u0074");
};_ccec =0;if _gacaa .IsHuffmanEncoded {_ccec =1;};if _aefb =_cabb .WriteBit (_ccec );_aefb !=nil {return _dcda ,_g .Wrap (_aefb ,_dcbda ,"u\u0073\u0065\u0020\u0068\u0075\u0066\u0066\u006d\u0061\u006e");};_dcda =2;return _dcda ,nil ;};func (_cab *Header )readReferredToSegmentNumbers (_acce *_fc .Reader ,_ffgg int )([]int ,error ){const _dggb ="\u0072\u0065\u0061\u0064R\u0065\u0066\u0065\u0072\u0072\u0065\u0064\u0054\u006f\u0053e\u0067m\u0065\u006e\u0074\u004e\u0075\u006d\u0062e\u0072\u0073";
_agfc :=make ([]int ,_ffgg );if _ffgg > 0{_cab .RTSegments =make ([]*Header ,_ffgg );var (_aggc uint64 ;_bada error ;);for _fbcac :=0;_fbcac < _ffgg ;_fbcac ++{_aggc ,_bada =_acce .ReadBits (byte (_cab .referenceSize ())<<3);if _bada !=nil {return nil ,_g .Wrapf (_bada ,_dggb ,"\u0027\u0025\u0064\u0027 \u0072\u0065\u0066\u0065\u0072\u0072\u0065\u0064\u0020\u0073e\u0067m\u0065\u006e\u0074\u0020\u006e\u0075\u006db\u0065\u0072",_fbcac );
};_agfc [_fbcac ]=int (_aggc &_e .MaxInt32 );};};return _agfc ,nil ;};func (_bdac *SymbolDictionary )decodeRefinedSymbol (_eedf ,_abcdb uint32 )error {var (_gbec int ;_cbgf ,_bdgb int32 ;);if _bdac .IsHuffmanEncoded {_cfe ,_gebc :=_bdac ._degd .ReadBits (byte (_bdac ._abda ));
if _gebc !=nil {return _gebc ;};_gbec =int (_cfe );_gafcg ,_gebc :=_ad .GetStandardTable (15);if _gebc !=nil {return _gebc ;};_bfea ,_gebc :=_gafcg .Decode (_bdac ._degd );if _gebc !=nil {return _gebc ;};_cbgf =int32 (_bfea );_bfea ,_gebc =_gafcg .Decode (_bdac ._degd );
if _gebc !=nil {return _gebc ;};_bdgb =int32 (_bfea );_gafcg ,_gebc =_ad .GetStandardTable (1);if _gebc !=nil {return _gebc ;};if _ ,_gebc =_gafcg .Decode (_bdac ._degd );_gebc !=nil {return _gebc ;};_bdac ._degd .Align ();}else {_edf ,_bceg :=_bdac ._adgg .DecodeIAID (uint64 (_bdac ._abda ),_bdac ._agae );
if _bceg !=nil {return _bceg ;};_gbec =int (_edf );_cbgf ,_bceg =_bdac ._adgg .DecodeInt (_bdac ._dafe );if _bceg !=nil {return _bceg ;};_bdgb ,_bceg =_bdac ._adgg .DecodeInt (_bdac ._gcbb );if _bceg !=nil {return _bceg ;};};if _dgeg :=_bdac .setSymbolsArray ();
_dgeg !=nil {return _dgeg ;};_fcde :=_bdac ._gafc [_gbec ];if _gafa :=_bdac .decodeNewSymbols (_eedf ,_abcdb ,_fcde ,_cbgf ,_bdgb );_gafa !=nil {return _gafa ;};if _bdac .IsHuffmanEncoded {_bdac ._degd .Align ();};return nil ;};func (_aaff *HalftoneRegion )shiftAndFill (_gbg int )int {_gbg >>=8;
if _gbg < 0{_gcbf :=int (_e .Log (float64 (_adgb (_gbg )))/_e .Log (2));_fece :=31-_gcbf ;for _effa :=1;_effa < _fece ;_effa ++{_gbg |=1<<uint (31-_effa );};};return _gbg ;};var (_aegb Segmenter ;_bcfe =map[Type ]func ()Segmenter {TSymbolDictionary :func ()Segmenter {return &SymbolDictionary {}},TIntermediateTextRegion :func ()Segmenter {return &TextRegion {}},TImmediateTextRegion :func ()Segmenter {return &TextRegion {}},TImmediateLosslessTextRegion :func ()Segmenter {return &TextRegion {}},TPatternDictionary :func ()Segmenter {return &PatternDictionary {}},TIntermediateHalftoneRegion :func ()Segmenter {return &HalftoneRegion {}},TImmediateHalftoneRegion :func ()Segmenter {return &HalftoneRegion {}},TImmediateLosslessHalftoneRegion :func ()Segmenter {return &HalftoneRegion {}},TIntermediateGenericRegion :func ()Segmenter {return &GenericRegion {}},TImmediateGenericRegion :func ()Segmenter {return &GenericRegion {}},TImmediateLosslessGenericRegion :func ()Segmenter {return &GenericRegion {}},TIntermediateGenericRefinementRegion :func ()Segmenter {return &GenericRefinementRegion {}},TImmediateGenericRefinementRegion :func ()Segmenter {return &GenericRefinementRegion {}},TImmediateLosslessGenericRefinementRegion :func ()Segmenter {return &GenericRefinementRegion {}},TPageInformation :func ()Segmenter {return &PageInformationSegment {}},TEndOfPage :func ()Segmenter {return _aegb },TEndOfStrip :func ()Segmenter {return &EndOfStripe {}},TEndOfFile :func ()Segmenter {return _aegb },TProfiles :func ()Segmenter {return _aegb },TTables :func ()Segmenter {return &TableSegment {}},TExtension :func ()Segmenter {return _aegb },TBitmap :func ()Segmenter {return _aegb }};
);func (_abee *HalftoneRegion )GetPatterns ()([]*_ea .Bitmap ,error ){var (_baafa []*_ea .Bitmap ;_eafg error ;);for _ ,_efaa :=range _abee ._dfac .RTSegments {var _ffdc Segmenter ;_ffdc ,_eafg =_efaa .GetSegmentData ();if _eafg !=nil {_eg .Log .Debug ("\u0047e\u0074\u0053\u0065\u0067m\u0065\u006e\u0074\u0044\u0061t\u0061 \u0066a\u0069\u006c\u0065\u0064\u003a\u0020\u0025v",_eafg );
return nil ,_eafg ;};_fbcaa ,_dddd :=_ffdc .(*PatternDictionary );if !_dddd {_eafg =_fe .Errorf ("\u0072e\u006c\u0061t\u0065\u0064\u0020\u0073e\u0067\u006d\u0065n\u0074\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0070at\u0074\u0065\u0072n\u0020\u0064i\u0063\u0074\u0069\u006f\u006e\u0061r\u0079\u003a \u0025\u0054",_ffdc );
return nil ,_eafg ;};var _ffae []*_ea .Bitmap ;_ffae ,_eafg =_fbcaa .GetDictionary ();if _eafg !=nil {_eg .Log .Debug ("\u0070\u0061\u0074\u0074\u0065\u0072\u006e\u0020\u0047\u0065\u0074\u0044\u0069\u0063\u0074i\u006fn\u0061\u0072\u0079\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_eafg );
return nil ,_eafg ;};_baafa =append (_baafa ,_ffae ...);};return _baafa ,nil ;};type Type int ;func _dgffc (_fdad *_fc .Reader ,_fdffd *Header )*TextRegion {_fcea :=&TextRegion {_afda :_fdad ,Header :_fdffd ,RegionInfo :NewRegionSegment (_fdad )};return _fcea ;
};func (_fbad *PageInformationSegment )encodeStripingInformation (_dedb _fc .BinaryWriter )(_ddddc int ,_adda error ){const _dbdc ="\u0065n\u0063\u006f\u0064\u0065S\u0074\u0072\u0069\u0070\u0069n\u0067I\u006ef\u006f\u0072\u006d\u0061\u0074\u0069\u006fn";
if !_fbad .IsStripe {if _ddddc ,_adda =_dedb .Write ([]byte {0x00,0x00});_adda !=nil {return 0,_g .Wrap (_adda ,_dbdc ,"n\u006f\u0020\u0073\u0074\u0072\u0069\u0070\u0069\u006e\u0067");};return _ddddc ,nil ;};_eeec :=make ([]byte ,2);_f .BigEndian .PutUint16 (_eeec ,_fbad .MaxStripeSize |1<<15);
if _ddddc ,_adda =_dedb .Write (_eeec );_adda !=nil {return 0,_g .Wrapf (_adda ,_dbdc ,"\u0073\u0074\u0072i\u0070\u0069\u006e\u0067\u003a\u0020\u0025\u0064",_fbad .MaxStripeSize );};return _ddddc ,nil ;};func (_edba *TableSegment )HtPS ()int32 {return _edba ._abeg };
func NewGenericRegion (r *_fc .Reader )*GenericRegion {return &GenericRegion {RegionSegment :NewRegionSegment (r ),_dcd :r };};func (_bdg *PatternDictionary )computeSegmentDataStructure ()error {_bdg .DataOffset =_bdg ._fed .AbsolutePosition ();_bdg .DataHeaderLength =_bdg .DataOffset -_bdg .DataHeaderOffset ;
_bdg .DataLength =int64 (_bdg ._fed .AbsoluteLength ())-_bdg .DataHeaderLength ;return nil ;};func (_fbae *GenericRegion )setParametersMMR (_abg bool ,_agbeb ,_cgfe int64 ,_gbc ,_dfe uint32 ,_dbd byte ,_ffcc ,_aecg bool ,_fdf ,_bcfb []int8 ){_fbae .DataOffset =_agbeb ;
_fbae .DataLength =_cgfe ;_fbae .RegionSegment =&RegionSegment {};_fbae .RegionSegment .BitmapHeight =_gbc ;_fbae .RegionSegment .BitmapWidth =_dfe ;_fbae .GBTemplate =_dbd ;_fbae .IsMMREncoded =_abg ;_fbae .IsTPGDon =_ffcc ;_fbae .GBAtX =_fdf ;_fbae .GBAtY =_bcfb ;
};func (_fcccg *SymbolDictionary )readAtPixels (_egdgb int )error {_fcccg .SdATX =make ([]int8 ,_egdgb );_fcccg .SdATY =make ([]int8 ,_egdgb );var (_ccg byte ;_dgbc error ;);for _dgee :=0;_dgee < _egdgb ;_dgee ++{_ccg ,_dgbc =_fcccg ._degd .ReadByte ();
if _dgbc !=nil {return _dgbc ;};_fcccg .SdATX [_dgee ]=int8 (_ccg );_ccg ,_dgbc =_fcccg ._degd .ReadByte ();if _dgbc !=nil {return _dgbc ;};_fcccg .SdATY [_dgee ]=int8 (_ccg );};return nil ;};func (_cbgd *SymbolDictionary )decodeDifferenceWidth ()(int64 ,error ){if _cbgd .IsHuffmanEncoded {switch _cbgd .SdHuffDecodeWidthSelection {case 0:_edaf ,_cac :=_ad .GetStandardTable (2);
if _cac !=nil {return 0,_cac ;};return _edaf .Decode (_cbgd ._degd );case 1:_edcb ,_dedd :=_ad .GetStandardTable (3);if _dedd !=nil {return 0,_dedd ;};return _edcb .Decode (_cbgd ._degd );case 3:if _cbgd ._cdcgg ==nil {var _fdcd int ;if _cbgd .SdHuffDecodeHeightSelection ==3{_fdcd ++;
};_ffgda ,_dbad :=_cbgd .getUserTable (_fdcd );if _dbad !=nil {return 0,_dbad ;};_cbgd ._cdcgg =_ffgda ;};return _cbgd ._cdcgg .Decode (_cbgd ._degd );};}else {_bdda ,_gcde :=_cbgd ._adgg .DecodeInt (_cbgd ._cddc );if _gcde !=nil {return 0,_gcde ;};return int64 (_bdda ),nil ;
};return 0,nil ;};func (_abfb *PatternDictionary )setGbAtPixels (){if _abfb .HDTemplate ==0{_abfb .GBAtX =make ([]int8 ,4);_abfb .GBAtY =make ([]int8 ,4);_abfb .GBAtX [0]=-int8 (_abfb .HdpWidth );_abfb .GBAtY [0]=0;_abfb .GBAtX [1]=-3;_abfb .GBAtY [1]=-1;
_abfb .GBAtX [2]=2;_abfb .GBAtY [2]=-2;_abfb .GBAtX [3]=-2;_abfb .GBAtY [3]=-2;}else {_abfb .GBAtX =[]int8 {-int8 (_abfb .HdpWidth )};_abfb .GBAtY =[]int8 {0};};};func (_baf *GenericRegion )InitEncode (bm *_ea .Bitmap ,xLoc ,yLoc ,template int ,duplicateLineRemoval bool )error {const _fbab ="\u0047e\u006e\u0065\u0072\u0069\u0063\u0052\u0065\u0067\u0069\u006f\u006e.\u0049\u006e\u0069\u0074\u0045\u006e\u0063\u006f\u0064\u0065";
if bm ==nil {return _g .Error (_fbab ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if xLoc < 0||yLoc < 0{return _g .Error (_fbab ,"\u0078\u0020\u0061\u006e\u0064\u0020\u0079\u0020\u006c\u006f\u0063\u0061\u0074i\u006f\u006e\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0074h\u0061\u006e\u0020\u0030");
};_baf .Bitmap =bm ;_baf .GBTemplate =byte (template );switch _baf .GBTemplate {case 0:_baf .GBAtX =[]int8 {3,-3,2,-2};_baf .GBAtY =[]int8 {-1,-1,-2,-2};case 1:_baf .GBAtX =[]int8 {3};_baf .GBAtY =[]int8 {-1};case 2,3:_baf .GBAtX =[]int8 {2};_baf .GBAtY =[]int8 {-1};
default:return _g .Errorf (_fbab ,"\u0070\u0072o\u0076\u0069\u0064\u0065\u0064 \u0074\u0065\u006d\u0070\u006ca\u0074\u0065\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0074\u0020\u0069\u006e\u0020\u0076\u0061\u006c\u0069\u0064\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0030\u002c\u0031\u002c\u0032\u002c\u0033\u007d",template );
};_baf .RegionSegment =&RegionSegment {BitmapHeight :uint32 (bm .Height ),BitmapWidth :uint32 (bm .Width ),XLocation :uint32 (xLoc ),YLocation :uint32 (yLoc )};_baf .IsTPGDon =duplicateLineRemoval ;return nil ;};func (_fafb *TextRegion )readAmountOfSymbolInstances ()error {_agef ,_gggd :=_fafb ._afda .ReadBits (32);
if _gggd !=nil {return _gggd ;};_fafb .NumberOfSymbolInstances =uint32 (_agef &_e .MaxUint32 );_bdaf :=_fafb .RegionInfo .BitmapWidth *_fafb .RegionInfo .BitmapHeight ;if _bdaf < _fafb .NumberOfSymbolInstances {_eg .Log .Debug ("\u004c\u0069\u006d\u0069t\u0069\u006e\u0067\u0020t\u0068\u0065\u0020n\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020d\u0065\u0063\u006f\u0064e\u0064\u0020\u0073\u0079m\u0062\u006f\u006c\u0020\u0069n\u0073\u0074\u0061\u006e\u0063\u0065\u0073 \u0074\u006f\u0020\u006f\u006ee\u0020\u0070\u0065\u0072\u0020\u0070\u0069\u0078\u0065l\u0020\u0028\u0020\u0025\u0064\u0020\u0069\u006e\u0073\u0074\u0065\u0061\u0064\u0020\u006f\u0066\u0020\u0025\u0064\u0029",_bdaf ,_fafb .NumberOfSymbolInstances );
_fafb .NumberOfSymbolInstances =_bdaf ;};return nil ;};type templater interface{form (_fgeb ,_aab ,_eggg ,_dgdc ,_ffg int16 )int16 ;setIndex (_ggd *_ac .DecoderStats );};func (_fdfd *PageInformationSegment )readResolution ()error {_becg ,_dffc :=_fdfd ._eceaf .ReadBits (32);
if _dffc !=nil {return _dffc ;};_fdfd .ResolutionX =int (_becg &_e .MaxInt32 );_becg ,_dffc =_fdfd ._eceaf .ReadBits (32);if _dffc !=nil {return _dffc ;};_fdfd .ResolutionY =int (_becg &_e .MaxInt32 );return nil ;};type EncodeInitializer interface{InitEncode ();
};func (_baa *GenericRegion )copyLineAbove (_egfa int )error {_aga :=_egfa *_baa .Bitmap .RowStride ;_ccb :=_aga -_baa .Bitmap .RowStride ;for _deac :=0;_deac < _baa .Bitmap .RowStride ;_deac ++{_bdd ,_cfd :=_baa .Bitmap .GetByte (_ccb );if _cfd !=nil {return _cfd ;
};_ccb ++;if _cfd =_baa .Bitmap .SetByte (_aga ,_bdd );_cfd !=nil {return _cfd ;};_aga ++;};return nil ;};func (_fad *GenericRefinementRegion )decodeTypicalPredictedLine (_bda ,_fea ,_ada ,_gdg ,_ge ,_gce int )error {_ade :=_bda -int (_fad .ReferenceDY );
_aae :=_fad .ReferenceBitmap .GetByteIndex (0,_ade );_dc :=_fad .RegionBitmap .GetByteIndex (0,_bda );var _egcc error ;switch _fad .TemplateID {case 0:_egcc =_fad .decodeTypicalPredictedLineTemplate0 (_bda ,_fea ,_ada ,_gdg ,_ge ,_gce ,_dc ,_ade ,_aae );
case 1:_egcc =_fad .decodeTypicalPredictedLineTemplate1 (_bda ,_fea ,_ada ,_gdg ,_ge ,_gce ,_dc ,_ade ,_aae );};return _egcc ;};func (_edcf *GenericRefinementRegion )parseHeader ()(_adae error ){_eg .Log .Trace ("\u005b\u0047\u0045\u004e\u0045\u0052\u0049\u0043\u002d\u0052\u0045\u0046\u002d\u0052\u0045\u0047\u0049\u004f\u004e\u005d\u0020\u0070\u0061\u0072s\u0069\u006e\u0067\u0020\u0048e\u0061\u0064e\u0072\u002e\u002e\u002e");
_gfc :=_aa .Now ();defer func (){if _adae ==nil {_eg .Log .Trace ("\u005b\u0047\u0045\u004e\u0045\u0052\u0049\u0043\u002d\u0052\u0045\u0046\u002d\u0052\u0045G\u0049\u004f\u004e\u005d\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020h\u0065\u0061\u0064\u0065\u0072\u0020\u0066\u0069\u006e\u0069\u0073\u0068id\u0020\u0069\u006e\u003a\u0020\u0025\u0064\u0020\u006e\u0073",_aa .Since (_gfc ).Nanoseconds ());
}else {_eg .Log .Trace ("\u005b\u0047E\u004e\u0045\u0052\u0049\u0043\u002d\u0052\u0045\u0046\u002d\u0052\u0045\u0047\u0049\u004f\u004e\u005d\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0068\u0065\u0061\u0064\u0065\u0072\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0073",_adae );
};}();if _adae =_edcf .RegionInfo .parseHeader ();_adae !=nil {return _adae ;};_ ,_adae =_edcf ._cda .ReadBits (6);if _adae !=nil {return _adae ;};_edcf .IsTPGROn ,_adae =_edcf ._cda .ReadBool ();if _adae !=nil {return _adae ;};var _gab int ;_gab ,_adae =_edcf ._cda .ReadBit ();
if _adae !=nil {return _adae ;};_edcf .TemplateID =int8 (_gab );switch _edcf .TemplateID {case 0:_edcf .Template =_edcf ._da ;if _adae =_edcf .readAtPixels ();_adae !=nil {return _adae ;};case 1:_edcf .Template =_edcf ._ed ;};return nil ;};func (_gbb *GenericRegion )decodeLine (_fgg ,_agf ,_fgca int )error {const _bfcb ="\u0064\u0065\u0063\u006f\u0064\u0065\u004c\u0069\u006e\u0065";
_eddb :=_gbb .Bitmap .GetByteIndex (0,_fgg );_adef :=_eddb -_gbb .Bitmap .RowStride ;switch _gbb .GBTemplate {case 0:if !_gbb .UseExtTemplates {return _gbb .decodeTemplate0a (_fgg ,_agf ,_fgca ,_eddb ,_adef );};return _gbb .decodeTemplate0b (_fgg ,_agf ,_fgca ,_eddb ,_adef );
case 1:return _gbb .decodeTemplate1 (_fgg ,_agf ,_fgca ,_eddb ,_adef );case 2:return _gbb .decodeTemplate2 (_fgg ,_agf ,_fgca ,_eddb ,_adef );case 3:return _gbb .decodeTemplate3 (_fgg ,_agf ,_fgca ,_eddb ,_adef );};return _g .Errorf (_bfcb ,"\u0069\u006e\u0076a\u006c\u0069\u0064\u0020G\u0042\u0054\u0065\u006d\u0070\u006c\u0061t\u0065\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u003a\u0020\u0025\u0064",_gbb .GBTemplate );
};func (_cce *GenericRefinementRegion )decodeTemplate (_fbc ,_ef ,_cb ,_ccc ,_egf ,_ebce ,_fcb ,_ffa ,_acf ,_dca int ,_ecb templater )(_ccd error ){var (_dcbd ,_cfae ,_bdb ,_cdc ,_gdae int16 ;_aff ,_ebfd ,_fba ,_gad int ;_geb byte ;);if _acf >=1&&(_acf -1)< _cce .ReferenceBitmap .Height {_geb ,_ccd =_cce .ReferenceBitmap .GetByte (_dca -_ccc );
if _ccd !=nil {return _ccd ;};_aff =int (_geb );};if _acf >=0&&(_acf )< _cce .ReferenceBitmap .Height {_geb ,_ccd =_cce .ReferenceBitmap .GetByte (_dca );if _ccd !=nil {return _ccd ;};_ebfd =int (_geb );};if _acf >=-1&&(_acf +1)< _cce .ReferenceBitmap .Height {_geb ,_ccd =_cce .ReferenceBitmap .GetByte (_dca +_ccc );
if _ccd !=nil {return _ccd ;};_fba =int (_geb );};_dca ++;if _fbc >=1{_geb ,_ccd =_cce .RegionBitmap .GetByte (_ffa -_cb );if _ccd !=nil {return _ccd ;};_gad =int (_geb );};_ffa ++;_gdd :=_cce .ReferenceDX %8;_ccea :=6+_gdd ;_cecb :=_dca %_ccc ;if _ccea >=0{if _ccea < 8{_dcbd =int16 (_aff >>uint (_ccea ))&0x07;
};if _ccea < 8{_cfae =int16 (_ebfd >>uint (_ccea ))&0x07;};if _ccea < 8{_bdb =int16 (_fba >>uint (_ccea ))&0x07;};if _ccea ==6&&_cecb > 1{if _acf >=1&&(_acf -1)< _cce .ReferenceBitmap .Height {_geb ,_ccd =_cce .ReferenceBitmap .GetByte (_dca -_ccc -2);
if _ccd !=nil {return _ccd ;};_dcbd |=int16 (_geb <<2)&0x04;};if _acf >=0&&_acf < _cce .ReferenceBitmap .Height {_geb ,_ccd =_cce .ReferenceBitmap .GetByte (_dca -2);if _ccd !=nil {return _ccd ;};_cfae |=int16 (_geb <<2)&0x04;};if _acf >=-1&&_acf +1< _cce .ReferenceBitmap .Height {_geb ,_ccd =_cce .ReferenceBitmap .GetByte (_dca +_ccc -2);
if _ccd !=nil {return _ccd ;};_bdb |=int16 (_geb <<2)&0x04;};};if _ccea ==0{_aff =0;_ebfd =0;_fba =0;if _cecb < _ccc -1{if _acf >=1&&_acf -1< _cce .ReferenceBitmap .Height {_geb ,_ccd =_cce .ReferenceBitmap .GetByte (_dca -_ccc );if _ccd !=nil {return _ccd ;
};_aff =int (_geb );};if _acf >=0&&_acf < _cce .ReferenceBitmap .Height {_geb ,_ccd =_cce .ReferenceBitmap .GetByte (_dca );if _ccd !=nil {return _ccd ;};_ebfd =int (_geb );};if _acf >=-1&&_acf +1< _cce .ReferenceBitmap .Height {_geb ,_ccd =_cce .ReferenceBitmap .GetByte (_dca +_ccc );
if _ccd !=nil {return _ccd ;};_fba =int (_geb );};};_dca ++;};}else {_dcbd =int16 (_aff <<1)&0x07;_cfae =int16 (_ebfd <<1)&0x07;_bdb =int16 (_fba <<1)&0x07;_aff =0;_ebfd =0;_fba =0;if _cecb < _ccc -1{if _acf >=1&&_acf -1< _cce .ReferenceBitmap .Height {_geb ,_ccd =_cce .ReferenceBitmap .GetByte (_dca -_ccc );
if _ccd !=nil {return _ccd ;};_aff =int (_geb );};if _acf >=0&&_acf < _cce .ReferenceBitmap .Height {_geb ,_ccd =_cce .ReferenceBitmap .GetByte (_dca );if _ccd !=nil {return _ccd ;};_ebfd =int (_geb );};if _acf >=-1&&_acf +1< _cce .ReferenceBitmap .Height {_geb ,_ccd =_cce .ReferenceBitmap .GetByte (_dca +_ccc );
if _ccd !=nil {return _ccd ;};_fba =int (_geb );};_dca ++;};_dcbd |=int16 ((_aff >>7)&0x07);_cfae |=int16 ((_ebfd >>7)&0x07);_bdb |=int16 ((_fba >>7)&0x07);};_cdc =int16 (_gad >>6);_gdae =0;_efd :=(2-_gdd )%8;_aff <<=uint (_efd );_ebfd <<=uint (_efd );
_fba <<=uint (_efd );_gad <<=2;var _fge int ;for _bfa :=0;_bfa < _ef ;_bfa ++{_dcac :=_bfa &0x07;_ecbg :=_ecb .form (_dcbd ,_cfae ,_bdb ,_cdc ,_gdae );if _cce ._ebf {_geb ,_ccd =_cce .RegionBitmap .GetByte (_cce .RegionBitmap .GetByteIndex (_bfa ,_fbc ));
if _ccd !=nil {return _ccd ;};_cce ._ege .SetIndex (int32 (_cce .overrideAtTemplate0 (int (_ecbg ),_bfa ,_fbc ,int (_geb ),_dcac )));}else {_cce ._ege .SetIndex (int32 (_ecbg ));};_fge ,_ccd =_cce ._cc .DecodeBit (_cce ._ege );if _ccd !=nil {return _ccd ;
};if _ccd =_cce .RegionBitmap .SetPixel (_bfa ,_fbc ,byte (_fge ));_ccd !=nil {return _ccd ;};_dcbd =((_dcbd <<1)|0x01&int16 (_aff >>7))&0x07;_cfae =((_cfae <<1)|0x01&int16 (_ebfd >>7))&0x07;_bdb =((_bdb <<1)|0x01&int16 (_fba >>7))&0x07;_cdc =((_cdc <<1)|0x01&int16 (_gad >>7))&0x07;
_gdae =int16 (_fge );if (_bfa -int (_cce .ReferenceDX ))%8==5{_aff =0;_ebfd =0;_fba =0;if ((_bfa -int (_cce .ReferenceDX ))/8)+1< _cce .ReferenceBitmap .RowStride {if _acf >=1&&(_acf -1)< _cce .ReferenceBitmap .Height {_geb ,_ccd =_cce .ReferenceBitmap .GetByte (_dca -_ccc );
if _ccd !=nil {return _ccd ;};_aff =int (_geb );};if _acf >=0&&_acf < _cce .ReferenceBitmap .Height {_geb ,_ccd =_cce .ReferenceBitmap .GetByte (_dca );if _ccd !=nil {return _ccd ;};_ebfd =int (_geb );};if _acf >=-1&&(_acf +1)< _cce .ReferenceBitmap .Height {_geb ,_ccd =_cce .ReferenceBitmap .GetByte (_dca +_ccc );
if _ccd !=nil {return _ccd ;};_fba =int (_geb );};};_dca ++;}else {_aff <<=1;_ebfd <<=1;_fba <<=1;};if _dcac ==5&&_fbc >=1{if ((_bfa >>3)+1)>=_cce .RegionBitmap .RowStride {_gad =0;}else {_geb ,_ccd =_cce .RegionBitmap .GetByte (_ffa -_cb );if _ccd !=nil {return _ccd ;
};_gad =int (_geb );};_ffa ++;}else {_gad <<=1;};};return nil ;};func (_fcbab *TextRegion )decodeSymbolInstances ()error {_dfbf ,_ebfb :=_fcbab .decodeStripT ();if _ebfb !=nil {return _ebfb ;};var (_dfae int64 ;_dgbdg uint32 ;);for _dgbdg < _fcbab .NumberOfSymbolInstances {_cbegc ,_aedc :=_fcbab .decodeDT ();
if _aedc !=nil {return _aedc ;};_dfbf +=_cbegc ;var _gddd int64 ;_faagg :=true ;_fcbab ._bgaad =0;for {if _faagg {_gddd ,_aedc =_fcbab .decodeDfs ();if _aedc !=nil {return _aedc ;};_dfae +=_gddd ;_fcbab ._bgaad =_dfae ;_faagg =false ;}else {_fab ,_fedd :=_fcbab .decodeIds ();
if _af .Is (_fedd ,_b .ErrOOB ){break ;};if _fedd !=nil {return _fedd ;};if _dgbdg >=_fcbab .NumberOfSymbolInstances {break ;};_fcbab ._bgaad +=_fab +int64 (_fcbab .SbDsOffset );};_gdec ,_fced :=_fcbab .decodeCurrentT ();if _fced !=nil {return _fced ;};
_afdd :=_dfbf +_gdec ;_beegf ,_fced :=_fcbab .decodeID ();if _fced !=nil {return _fced ;};_ffe ,_fced :=_fcbab .decodeRI ();if _fced !=nil {return _fced ;};_edgf ,_fced :=_fcbab .decodeIb (_ffe ,_beegf );if _fced !=nil {return _fced ;};if _fced =_fcbab .blit (_edgf ,_afdd );
_fced !=nil {return _fced ;};_dgbdg ++;};};return nil ;};func (_ggff *GenericRegion )overrideAtTemplate1 (_begc ,_cee ,_agag ,_dfa ,_eage int )int {_begc &=0x1FF7;if _ggff .GBAtY [0]==0&&_ggff .GBAtX [0]>=-int8 (_eage ){_begc |=(_dfa >>uint (7-(int8 (_eage )+_ggff .GBAtX [0]))&0x1)<<3;
}else {_begc |=int (_ggff .getPixel (_cee +int (_ggff .GBAtX [0]),_agag +int (_ggff .GBAtY [0])))<<3;};return _begc ;};func (_bcedb *Header )readSegmentPageAssociation (_afe Documenter ,_ebe *_fc .Reader ,_edea uint64 ,_ebcc ...int )(_cbba error ){const _fbfb ="\u0072\u0065\u0061\u0064\u0053\u0065\u0067\u006d\u0065\u006e\u0074P\u0061\u0067\u0065\u0041\u0073\u0073\u006f\u0063\u0069\u0061t\u0069\u006f\u006e";
if !_bcedb .PageAssociationFieldSize {_eaeb ,_fee :=_ebe .ReadBits (8);if _fee !=nil {return _g .Wrap (_fee ,_fbfb ,"\u0073\u0068\u006fr\u0074\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};_bcedb .PageAssociation =int (_eaeb &0xFF);}else {_bgf ,_ebbb :=_ebe .ReadBits (32);
if _ebbb !=nil {return _g .Wrap (_ebbb ,_fbfb ,"l\u006f\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};_bcedb .PageAssociation =int (_bgf &_e .MaxInt32 );};if _edea ==0{return nil ;};if _bcedb .PageAssociation !=0{_fcef ,_ceae :=_afe .GetPage (_bcedb .PageAssociation );
if _ceae !=nil {return _g .Wrap (_ceae ,_fbfb ,"\u0061s\u0073\u006f\u0063\u0069a\u0074\u0065\u0064\u0020\u0070a\u0067e\u0020n\u006f\u0074\u0020\u0066\u006f\u0075\u006ed");};var _dgcf int ;for _dee :=uint64 (0);_dee < _edea ;_dee ++{_dgcf =_ebcc [_dee ];
_bcedb .RTSegments [_dee ],_ceae =_fcef .GetSegment (_dgcf );if _ceae !=nil {var _daeb error ;_bcedb .RTSegments [_dee ],_daeb =_afe .GetGlobalSegment (_dgcf );if _daeb !=nil {return _g .Wrapf (_ceae ,_fbfb ,"\u0072\u0065\u0066\u0065\u0072\u0065n\u0063\u0065\u0020s\u0065\u0067\u006de\u006e\u0074\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075n\u0064\u0020\u0061\u0074\u0020pa\u0067\u0065\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0072\u0020\u0069\u006e\u0020\u0067\u006c\u006f\u0062\u0061\u006c\u0073",_bcedb .PageAssociation );
};};};return nil ;};for _bfag :=uint64 (0);_bfag < _edea ;_bfag ++{_bcedb .RTSegments [_bfag ],_cbba =_afe .GetGlobalSegment (_ebcc [_bfag ]);if _cbba !=nil {return _g .Wrapf (_cbba ,_fbfb ,"\u0067\u006c\u006f\u0062\u0061\u006c\u0020\u0073\u0065\u0067m\u0065\u006e\u0074\u003a\u0020\u0027\u0025d\u0027\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064",_ebcc [_bfag ]);
};};return nil ;};func (_eeeb *RegionSegment )parseHeader ()error {const _aaeb ="p\u0061\u0072\u0073\u0065\u0048\u0065\u0061\u0064\u0065\u0072";_eg .Log .Trace ("\u005b\u0052\u0045\u0047I\u004f\u004e\u005d\u005b\u0050\u0041\u0052\u0053\u0045\u002dH\u0045A\u0044\u0045\u0052\u005d\u0020\u0042\u0065g\u0069\u006e");
defer func (){_eg .Log .Trace ("\u005b\u0052\u0045G\u0049\u004f\u004e\u005d[\u0050\u0041\u0052\u0053\u0045\u002d\u0048E\u0041\u0044\u0045\u0052\u005d\u0020\u0046\u0069\u006e\u0069\u0073\u0068\u0065\u0064");}();_dad ,_afcb :=_eeeb ._ddgb .ReadBits (32);
if _afcb !=nil {return _g .Wrap (_afcb ,_aaeb ,"\u0077\u0069\u0064t\u0068");};_eeeb .BitmapWidth =uint32 (_dad &_e .MaxUint32 );_dad ,_afcb =_eeeb ._ddgb .ReadBits (32);if _afcb !=nil {return _g .Wrap (_afcb ,_aaeb ,"\u0068\u0065\u0069\u0067\u0068\u0074");
};_eeeb .BitmapHeight =uint32 (_dad &_e .MaxUint32 );_dad ,_afcb =_eeeb ._ddgb .ReadBits (32);if _afcb !=nil {return _g .Wrap (_afcb ,_aaeb ,"\u0078\u0020\u006c\u006f\u0063\u0061\u0074\u0069\u006f\u006e");};_eeeb .XLocation =uint32 (_dad &_e .MaxUint32 );
_dad ,_afcb =_eeeb ._ddgb .ReadBits (32);if _afcb !=nil {return _g .Wrap (_afcb ,_aaeb ,"\u0079\u0020\u006c\u006f\u0063\u0061\u0074\u0069\u006f\u006e");};_eeeb .YLocation =uint32 (_dad &_e .MaxUint32 );if _ ,_afcb =_eeeb ._ddgb .ReadBits (5);_afcb !=nil {return _g .Wrap (_afcb ,_aaeb ,"\u0064i\u0072\u0079\u0020\u0072\u0065\u0061d");
};if _afcb =_eeeb .readCombinationOperator ();_afcb !=nil {return _g .Wrap (_afcb ,_aaeb ,"c\u006fm\u0062\u0069\u006e\u0061\u0074\u0069\u006f\u006e \u006f\u0070\u0065\u0072at\u006f\u0072");};return nil ;};func (_edcac *Header )pageSize ()uint {if _edcac .PageAssociation <=255{return 1;
};return 4;};type Segmenter interface{Init (_cgc *Header ,_cefd *_fc .Reader )error ;};func (_db *EndOfStripe )LineNumber ()int {return _db ._bd };func (_gdfc *SymbolDictionary )setExportedSymbols (_afde []int ){for _eeebf :=uint32 (0);_eeebf < _gdfc ._acfd +_gdfc .NumberOfNewSymbols ;
_eeebf ++{if _afde [_eeebf ]==1{var _efdg *_ea .Bitmap ;if _eeebf < _gdfc ._acfd {_efdg =_gdfc ._eggc [_eeebf ];}else {_efdg =_gdfc ._bgff [_eeebf -_gdfc ._acfd ];};_eg .Log .Trace ("\u005bS\u0059\u004dB\u004f\u004c\u002d\u0044I\u0043\u0054\u0049O\u004e\u0041\u0052\u0059\u005d\u0020\u0041\u0064\u0064 E\u0078\u0070\u006fr\u0074\u0065d\u0053\u0079\u006d\u0062\u006f\u006c:\u0020\u0027%\u0073\u0027",_efdg );
_gdfc ._ceda =append (_gdfc ._ceda ,_efdg );};};};func (_dead *TextRegion )computeSymbolCodeLength ()error {if _dead .IsHuffmanEncoded {return _dead .symbolIDCodeLengths ();};_dead ._bage =int8 (_e .Ceil (_e .Log (float64 (_dead .NumberOfSymbols ))/_e .Log (2)));
return nil ;};func (_edbc *GenericRefinementRegion )String ()string {_afd :=&_cf .Builder {};_afd .WriteString ("\u000a[\u0047E\u004e\u0045\u0052\u0049\u0043 \u0052\u0045G\u0049\u004f\u004e\u005d\u000a");_afd .WriteString (_edbc .RegionInfo .String ()+"\u000a");
_afd .WriteString (_fe .Sprintf ("\u0009\u002d \u0049\u0073\u0054P\u0047\u0052\u006f\u006e\u003a\u0020\u0025\u0076\u000a",_edbc .IsTPGROn ));_afd .WriteString (_fe .Sprintf ("\u0009-\u0020T\u0065\u006d\u0070\u006c\u0061t\u0065\u0049D\u003a\u0020\u0025\u0076\u000a",_edbc .TemplateID ));
_afd .WriteString (_fe .Sprintf ("\u0009\u002d\u0020\u0047\u0072\u0041\u0074\u0058\u003a\u0020\u0025\u0076\u000a",_edbc .GrAtX ));_afd .WriteString (_fe .Sprintf ("\u0009\u002d\u0020\u0047\u0072\u0041\u0074\u0059\u003a\u0020\u0025\u0076\u000a",_edbc .GrAtY ));
_afd .WriteString (_fe .Sprintf ("\u0009-\u0020R\u0065\u0066\u0065\u0072\u0065n\u0063\u0065D\u0058\u0020\u0025\u0076\u000a",_edbc .ReferenceDX ));_afd .WriteString (_fe .Sprintf ("\u0009\u002d\u0020\u0052ef\u0065\u0072\u0065\u006e\u0063\u0044\u0065\u0059\u003a\u0020\u0025\u0076\u000a",_edbc .ReferenceDY ));
return _afd .String ();};func (_dabd *TextRegion )Encode (w _fc .BinaryWriter )(_aedd int ,_fcce error ){const _ddae ="\u0054\u0065\u0078\u0074\u0052\u0065\u0067\u0069\u006f\u006e\u002e\u0045n\u0063\u006f\u0064\u0065";if _aedd ,_fcce =_dabd .RegionInfo .Encode (w );
_fcce !=nil {return _aedd ,_g .Wrap (_fcce ,_ddae ,"");};var _agbcf int ;if _agbcf ,_fcce =_dabd .encodeFlags (w );_fcce !=nil {return _aedd ,_g .Wrap (_fcce ,_ddae ,"");};_aedd +=_agbcf ;if _agbcf ,_fcce =_dabd .encodeSymbols (w );_fcce !=nil {return _aedd ,_g .Wrap (_fcce ,_ddae ,"");
};_aedd +=_agbcf ;return _aedd ,nil ;};func (_gfba *HalftoneRegion )computeSegmentDataStructure ()error {_gfba .DataOffset =_gfba ._ddd .AbsolutePosition ();_gfba .DataHeaderLength =_gfba .DataOffset -_gfba .DataHeaderOffset ;_gfba .DataLength =int64 (_gfba ._ddd .AbsoluteLength ())-_gfba .DataHeaderLength ;
return nil ;};func (_baaf *GenericRegion )writeGBAtPixels (_efab _fc .BinaryWriter )(_fgd int ,_fgb error ){const _cad ="\u0077r\u0069t\u0065\u0047\u0042\u0041\u0074\u0050\u0069\u0078\u0065\u006c\u0073";if _baaf .UseMMR {return 0,nil ;};_fcf :=1;if _baaf .GBTemplate ==0{_fcf =4;
}else if _baaf .UseExtTemplates {_fcf =12;};if len (_baaf .GBAtX )!=_fcf {return 0,_g .Errorf (_cad ,"\u0067\u0062\u0020\u0061\u0074\u0020\u0070\u0061\u0069\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020d\u006f\u0065\u0073\u006e\u0027\u0074\u0020m\u0061\u0074\u0063\u0068\u0020\u0074\u006f\u0020\u0047\u0042\u0041t\u0058\u0020\u0073\u006c\u0069\u0063\u0065\u0020\u006c\u0065\u006e");
};if len (_baaf .GBAtY )!=_fcf {return 0,_g .Errorf (_cad ,"\u0067\u0062\u0020\u0061\u0074\u0020\u0070\u0061\u0069\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020d\u006f\u0065\u0073\u006e\u0027\u0074\u0020m\u0061\u0074\u0063\u0068\u0020\u0074\u006f\u0020\u0047\u0042\u0041t\u0059\u0020\u0073\u006c\u0069\u0063\u0065\u0020\u006c\u0065\u006e");
};for _fbgb :=0;_fbgb < _fcf ;_fbgb ++{if _fgb =_efab .WriteByte (byte (_baaf .GBAtX [_fbgb ]));_fgb !=nil {return _fgd ,_g .Wrap (_fgb ,_cad ,"w\u0072\u0069\u0074\u0065\u0020\u0047\u0042\u0041\u0074\u0058");};_fgd ++;if _fgb =_efab .WriteByte (byte (_baaf .GBAtY [_fbgb ]));
_fgb !=nil {return _fgd ,_g .Wrap (_fgb ,_cad ,"w\u0072\u0069\u0074\u0065\u0020\u0047\u0042\u0041\u0074\u0059");};_fgd ++;};return _fgd ,nil ;};func (_fefc *TextRegion )String ()string {_dbgde :=&_cf .Builder {};_dbgde .WriteString ("\u000a[\u0054E\u0058\u0054\u0020\u0052\u0045\u0047\u0049\u004f\u004e\u005d\u000a");
_dbgde .WriteString (_fefc .RegionInfo .String ()+"\u000a");_dbgde .WriteString (_fe .Sprintf ("\u0009\u002d\u0020\u0053br\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u003a\u0020\u0025\u0076\u000a",_fefc .SbrTemplate ));_dbgde .WriteString (_fe .Sprintf ("\u0009-\u0020S\u0062\u0044\u0073\u004f\u0066f\u0073\u0065t\u003a\u0020\u0025\u0076\u000a",_fefc .SbDsOffset ));
_dbgde .WriteString (_fe .Sprintf ("\t\u002d \u0044\u0065\u0066\u0061\u0075\u006c\u0074\u0050i\u0078\u0065\u006c\u003a %\u0076\u000a",_fefc .DefaultPixel ));_dbgde .WriteString (_fe .Sprintf ("\t\u002d\u0020\u0043\u006f\u006d\u0062i\u006e\u0061\u0074\u0069\u006f\u006e\u004f\u0070\u0065r\u0061\u0074\u006fr\u003a \u0025\u0076\u000a",_fefc .CombinationOperator ));
_dbgde .WriteString (_fe .Sprintf ("\t\u002d \u0049\u0073\u0054\u0072\u0061\u006e\u0073\u0070o\u0073\u0065\u0064\u003a %\u0076\u000a",_fefc .IsTransposed ));_dbgde .WriteString (_fe .Sprintf ("\u0009\u002d\u0020Re\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0043\u006f\u0072\u006e\u0065\u0072\u003a\u0020\u0025\u0076\u000a",_fefc .ReferenceCorner ));
_dbgde .WriteString (_fe .Sprintf ("\t\u002d\u0020\u0055\u0073eR\u0065f\u0069\u006e\u0065\u006d\u0065n\u0074\u003a\u0020\u0025\u0076\u000a",_fefc .UseRefinement ));_dbgde .WriteString (_fe .Sprintf ("\u0009-\u0020\u0049\u0073\u0048\u0075\u0066\u0066\u006d\u0061\u006e\u0045n\u0063\u006f\u0064\u0065\u0064\u003a\u0020\u0025\u0076\u000a",_fefc .IsHuffmanEncoded ));
if _fefc .IsHuffmanEncoded {_dbgde .WriteString (_fe .Sprintf ("\u0009\u002d\u0020\u0053bH\u0075\u0066\u0066\u0052\u0053\u0069\u007a\u0065\u003a\u0020\u0025\u0076\u000a",_fefc .SbHuffRSize ));_dbgde .WriteString (_fe .Sprintf ("\u0009\u002d\u0020\u0053\u0062\u0048\u0075\u0066\u0066\u0052\u0044\u0059:\u0020\u0025\u0076\u000a",_fefc .SbHuffRDY ));
_dbgde .WriteString (_fe .Sprintf ("\u0009\u002d\u0020\u0053\u0062\u0048\u0075\u0066\u0066\u0052\u0044\u0058:\u0020\u0025\u0076\u000a",_fefc .SbHuffRDX ));_dbgde .WriteString (_fe .Sprintf ("\u0009\u002d\u0020\u0053bH\u0075\u0066\u0066\u0052\u0044\u0048\u0065\u0069\u0067\u0068\u0074\u003a\u0020\u0025v\u000a",_fefc .SbHuffRDHeight ));
_dbgde .WriteString (_fe .Sprintf ("\t\u002d\u0020\u0053\u0062Hu\u0066f\u0052\u0044\u0057\u0069\u0064t\u0068\u003a\u0020\u0025\u0076\u000a",_fefc .SbHuffRDWidth ));_dbgde .WriteString (_fe .Sprintf ("\u0009\u002d \u0053\u0062\u0048u\u0066\u0066\u0044\u0054\u003a\u0020\u0025\u0076\u000a",_fefc .SbHuffDT ));
_dbgde .WriteString (_fe .Sprintf ("\u0009\u002d \u0053\u0062\u0048u\u0066\u0066\u0044\u0053\u003a\u0020\u0025\u0076\u000a",_fefc .SbHuffDS ));_dbgde .WriteString (_fe .Sprintf ("\u0009\u002d \u0053\u0062\u0048u\u0066\u0066\u0046\u0053\u003a\u0020\u0025\u0076\u000a",_fefc .SbHuffFS ));
};_dbgde .WriteString (_fe .Sprintf ("\u0009\u002d\u0020\u0053\u0062\u0072\u0041\u0054\u0058:\u0020\u0025\u0076\u000a",_fefc .SbrATX ));_dbgde .WriteString (_fe .Sprintf ("\u0009\u002d\u0020\u0053\u0062\u0072\u0041\u0054\u0059:\u0020\u0025\u0076\u000a",_fefc .SbrATY ));
_dbgde .WriteString (_fe .Sprintf ("\u0009\u002d\u0020N\u0075\u006d\u0062\u0065r\u004f\u0066\u0053\u0079\u006d\u0062\u006fl\u0049\u006e\u0073\u0074\u0061\u006e\u0063\u0065\u0073\u003a\u0020\u0025\u0076\u000a",_fefc .NumberOfSymbolInstances ));_dbgde .WriteString (_fe .Sprintf ("\u0009\u002d\u0020\u0053\u0062\u0072\u0041\u0054\u0058:\u0020\u0025\u0076\u000a",_fefc .SbrATX ));
return _dbgde .String ();};func (_gbda *PageInformationSegment )Init (h *Header ,r *_fc .Reader )(_cdbf error ){_gbda ._eceaf =r ;if _cdbf =_gbda .parseHeader ();_cdbf !=nil {return _g .Wrap (_cdbf ,"P\u0061\u0067\u0065\u0049\u006e\u0066o\u0072\u006d\u0061\u0074\u0069\u006f\u006e\u0053\u0065g\u006d\u0065\u006et\u002eI\u006e\u0069\u0074","");
};return nil ;};func (_aged *HalftoneRegion )computeX (_dfacb ,_dfde int )int {return _aged .shiftAndFill (int (_aged .HGridX )+_dfacb *int (_aged .HRegionY )+_dfde *int (_aged .HRegionX ));};func (_cdgc *TextRegion )decodeRdy ()(int64 ,error ){const _ggffg ="\u0064e\u0063\u006f\u0064\u0065\u0052\u0064y";
if _cdgc .IsHuffmanEncoded {if _cdgc .SbHuffRDY ==3{if _cdgc ._dgag ==nil {var (_aedg int ;_cbcb error ;);if _cdgc .SbHuffFS ==3{_aedg ++;};if _cdgc .SbHuffDS ==3{_aedg ++;};if _cdgc .SbHuffDT ==3{_aedg ++;};if _cdgc .SbHuffRDWidth ==3{_aedg ++;};if _cdgc .SbHuffRDHeight ==3{_aedg ++;
};if _cdgc .SbHuffRDX ==3{_aedg ++;};_cdgc ._dgag ,_cbcb =_cdgc .getUserTable (_aedg );if _cbcb !=nil {return 0,_g .Wrap (_cbcb ,_ggffg ,"");};};return _cdgc ._dgag .Decode (_cdgc ._afda );};_cebd ,_aeca :=_ad .GetStandardTable (14+int (_cdgc .SbHuffRDY ));
if _aeca !=nil {return 0,_aeca ;};return _cebd .Decode (_cdgc ._afda );};_facbb ,_bbfc :=_cdgc ._gagc .DecodeInt (_cdgc ._eaeab );if _bbfc !=nil {return 0,_g .Wrap (_bbfc ,_ggffg ,"");};return int64 (_facbb ),nil ;};func (_edcfc *PageInformationSegment )encodeFlags (_fag _fc .BinaryWriter )(_baddb error ){const _acg ="e\u006e\u0063\u006f\u0064\u0065\u0046\u006c\u0061\u0067\u0073";
if _baddb =_fag .SkipBits (1);_baddb !=nil {return _g .Wrap (_baddb ,_acg ,"\u0072\u0065\u0073e\u0072\u0076\u0065\u0064\u0020\u0062\u0069\u0074");};var _gebdf int ;if _edcfc .CombinationOperatorOverrideAllowed (){_gebdf =1;};if _baddb =_fag .WriteBit (_gebdf );
_baddb !=nil {return _g .Wrap (_baddb ,_acg ,"\u0063\u006f\u006db\u0069\u006e\u0061\u0074i\u006f\u006e\u0020\u006f\u0070\u0065\u0072a\u0074\u006f\u0072\u0020\u006f\u0076\u0065\u0072\u0072\u0069\u0064\u0064\u0065\u006e");};_gebdf =0;if _edcfc ._dbdbb {_gebdf =1;
};if _baddb =_fag .WriteBit (_gebdf );_baddb !=nil {return _g .Wrap (_baddb ,_acg ,"\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0061\u0075\u0078i\u006ci\u0061r\u0079\u0020\u0062\u0075\u0066\u0066\u0065r");};if _baddb =_fag .WriteBit ((int (_edcfc ._caad )>>1)&0x01);
_baddb !=nil {return _g .Wrap (_baddb ,_acg ,"\u0063\u006f\u006d\u0062\u0069\u006e\u0061\u0074\u0069\u006fn\u0020\u006f\u0070\u0065\u0072\u0061\u0074o\u0072\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0062\u0069\u0074");};if _baddb =_fag .WriteBit (int (_edcfc ._caad )&0x01);
_baddb !=nil {return _g .Wrap (_baddb ,_acg ,"\u0063\u006f\u006db\u0069\u006e\u0061\u0074i\u006f\u006e\u0020\u006f\u0070\u0065\u0072a\u0074\u006f\u0072\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0062\u0069\u0074");};_gebdf =int (_edcfc .DefaultPixelValue );
if _baddb =_fag .WriteBit (_gebdf );_baddb !=nil {return _g .Wrap (_baddb ,_acg ,"\u0064e\u0066\u0061\u0075\u006c\u0074\u0020\u0070\u0061\u0067\u0065\u0020p\u0069\u0078\u0065\u006c\u0020\u0076\u0061\u006c\u0075\u0065");};_gebdf =0;if _edcfc ._aaad {_gebdf =1;
};if _baddb =_fag .WriteBit (_gebdf );_baddb !=nil {return _g .Wrap (_baddb ,_acg ,"\u0063\u006f\u006e\u0074ai\u006e\u0073\u0020\u0072\u0065\u0066\u0069\u006e\u0065\u006d\u0065\u006e\u0074");};_gebdf =0;if _edcfc .IsLossless {_gebdf =1;};if _baddb =_fag .WriteBit (_gebdf );
_baddb !=nil {return _g .Wrap (_baddb ,_acg ,"p\u0061\u0067\u0065\u0020\u0069\u0073 \u0065\u0076\u0065\u006e\u0074\u0075\u0061\u006c\u006cy\u0020\u006c\u006fs\u0073l\u0065\u0073\u0073");};return nil ;};func (_cfbd *TextRegion )symbolIDCodeLengths ()error {var (_dbff []*_ad .Code ;
_bccda uint64 ;_efgbd _ad .Tabler ;_bdea error ;);for _fbeff :=0;_fbeff < 35;_fbeff ++{_bccda ,_bdea =_cfbd ._afda .ReadBits (4);if _bdea !=nil {return _bdea ;};_ddcff :=int (_bccda &0xf);if _ddcff > 0{_dbff =append (_dbff ,_ad .NewCode (int32 (_ddcff ),0,int32 (_fbeff ),false ));
};};_efgbd ,_bdea =_ad .NewFixedSizeTable (_dbff );if _bdea !=nil {return _bdea ;};var (_efed int64 ;_eaabb uint32 ;_fcabb []*_ad .Code ;_abgc int64 ;);for _eaabb < _cfbd .NumberOfSymbols {_abgc ,_bdea =_efgbd .Decode (_cfbd ._afda );if _bdea !=nil {return _bdea ;
};if _abgc < 32{if _abgc > 0{_fcabb =append (_fcabb ,_ad .NewCode (int32 (_abgc ),0,int32 (_eaabb ),false ));};_efed =_abgc ;_eaabb ++;}else {var _fdegf ,_cbgb int64 ;switch _abgc {case 32:_bccda ,_bdea =_cfbd ._afda .ReadBits (2);if _bdea !=nil {return _bdea ;
};_fdegf =3+int64 (_bccda );if _eaabb > 0{_cbgb =_efed ;};case 33:_bccda ,_bdea =_cfbd ._afda .ReadBits (3);if _bdea !=nil {return _bdea ;};_fdegf =3+int64 (_bccda );case 34:_bccda ,_bdea =_cfbd ._afda .ReadBits (7);if _bdea !=nil {return _bdea ;};_fdegf =11+int64 (_bccda );
};for _gced :=0;_gced < int (_fdegf );_gced ++{if _cbgb > 0{_fcabb =append (_fcabb ,_ad .NewCode (int32 (_cbgb ),0,int32 (_eaabb ),false ));};_eaabb ++;};};};_cfbd ._afda .Align ();_cfbd ._aafg ,_bdea =_ad .NewFixedSizeTable (_fcabb );return _bdea ;};func (_ceac *SymbolDictionary )retrieveImportSymbols ()error {for _ ,_edfd :=range _ceac .Header .RTSegments {if _edfd .Type ==0{_bdcc ,_gfca :=_edfd .GetSegmentData ();
if _gfca !=nil {return _gfca ;};_fgfdf ,_cgab :=_bdcc .(*SymbolDictionary );if !_cgab {return _fe .Errorf ("\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u0020\u0044\u0061\u0074a\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0053\u0079\u006d\u0062\u006f\u006c\u0044\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u0053\u0065\u0067m\u0065\u006e\u0074\u003a\u0020%\u0054",_bdcc );
};_fdcf ,_gfca :=_fgfdf .GetDictionary ();if _gfca !=nil {return _fe .Errorf ("\u0072\u0065\u006c\u0061\u0074\u0065\u0064 \u0073\u0065\u0067m\u0065\u006e\u0074 \u0077\u0069t\u0068\u0020\u0069\u006e\u0064\u0065x\u003a %\u0064\u0020\u0067\u0065\u0074\u0044\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u002e\u0020\u0025\u0073",_edfd .SegmentNumber ,_gfca .Error ());
};_ceac ._eggc =append (_ceac ._eggc ,_fdcf ...);_ceac ._acfd +=_fgfdf .NumberOfExportedSymbols ;};};return nil ;};func (_caaab *SymbolDictionary )parseHeader ()(_fdaf error ){_eg .Log .Trace ("\u005b\u0053\u0059\u004d\u0042\u004f\u004c \u0044\u0049\u0043T\u0049\u004f\u004e\u0041R\u0059\u005d\u005b\u0050\u0041\u0052\u0053\u0045\u002d\u0048\u0045\u0041\u0044\u0045\u0052\u005d\u0020\u0062\u0065\u0067\u0069\u006e\u0073\u002e\u002e\u002e");
defer func (){if _fdaf !=nil {_eg .Log .Trace ("\u005bS\u0059\u004dB\u004f\u004c\u0020\u0044I\u0043\u0054\u0049O\u004e\u0041\u0052\u0059\u005d\u005b\u0050\u0041\u0052SE\u002d\u0048\u0045A\u0044\u0045R\u005d\u0020\u0066\u0061\u0069\u006ce\u0064\u002e \u0025\u0076",_fdaf );
}else {_eg .Log .Trace ("\u005b\u0053\u0059\u004d\u0042\u004f\u004c \u0044\u0049\u0043T\u0049\u004f\u004e\u0041R\u0059\u005d\u005b\u0050\u0041\u0052\u0053\u0045\u002d\u0048\u0045\u0041\u0044\u0045\u0052\u005d\u0020\u0066\u0069\u006e\u0069\u0073\u0068\u0065\u0064\u002e");
};}();if _fdaf =_caaab .readRegionFlags ();_fdaf !=nil {return _fdaf ;};if _fdaf =_caaab .setAtPixels ();_fdaf !=nil {return _fdaf ;};if _fdaf =_caaab .setRefinementAtPixels ();_fdaf !=nil {return _fdaf ;};if _fdaf =_caaab .readNumberOfExportedSymbols ();
_fdaf !=nil {return _fdaf ;};if _fdaf =_caaab .readNumberOfNewSymbols ();_fdaf !=nil {return _fdaf ;};if _fdaf =_caaab .setInSyms ();_fdaf !=nil {return _fdaf ;};if _caaab ._cggf {_aaabc :=_caaab .Header .RTSegments ;for _gaab :=len (_aaabc )-1;_gaab >=0;
_gaab --{if _aaabc [_gaab ].Type ==0{_egfac ,_edae :=_aaabc [_gaab ].SegmentData .(*SymbolDictionary );if !_edae {_fdaf =_fe .Errorf ("\u0072\u0065\u006c\u0061\u0074\u0065\u0064\u0020\u0053\u0065\u0067\u006d\u0065\u006e\u0074:\u0020\u0025\u0076\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020S\u0079\u006d\u0062\u006f\u006c\u0020\u0044\u0069\u0063\u0074\u0069\u006fna\u0072\u0079\u0020\u0053\u0065\u0067\u006d\u0065\u006e\u0074",_aaabc [_gaab ]);
return _fdaf ;};if _egfac ._cggf {_caaab .setRetainedCodingContexts (_egfac );};break ;};};};if _fdaf =_caaab .checkInput ();_fdaf !=nil {return _fdaf ;};return nil ;};func (_ddbg *Header )writeFlags (_fcdc _fc .BinaryWriter )(_eaee error ){const _agcd ="\u0048\u0065\u0061\u0064\u0065\u0072\u002e\u0077\u0072\u0069\u0074\u0065F\u006c\u0061\u0067\u0073";
_cedc :=byte (_ddbg .Type );if _eaee =_fcdc .WriteByte (_cedc );_eaee !=nil {return _g .Wrap (_eaee ,_agcd ,"\u0077\u0072\u0069ti\u006e\u0067\u0020\u0073\u0065\u0067\u006d\u0065\u006et\u0020t\u0079p\u0065 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0066\u0061\u0069\u006c\u0065\u0064");
};if !_ddbg .RetainFlag &&!_ddbg .PageAssociationFieldSize {return nil ;};if _eaee =_fcdc .SkipBits (-8);_eaee !=nil {return _g .Wrap (_eaee ,_agcd ,"\u0073\u006bi\u0070\u0070\u0069\u006e\u0067\u0020\u0062\u0061\u0063\u006b\u0020\u0074\u0068\u0065\u0020\u0062\u0069\u0074\u0073\u0020\u0066\u0061il\u0065\u0064");
};var _fdag int ;if _ddbg .RetainFlag {_fdag =1;};if _eaee =_fcdc .WriteBit (_fdag );_eaee !=nil {return _g .Wrap (_eaee ,_agcd ,"\u0072\u0065\u0074\u0061in\u0020\u0072\u0065\u0074\u0061\u0069\u006e\u0020\u0066\u006c\u0061\u0067\u0073");};_fdag =0;if _ddbg .PageAssociationFieldSize {_fdag =1;
};if _eaee =_fcdc .WriteBit (_fdag );_eaee !=nil {return _g .Wrap (_eaee ,_agcd ,"p\u0061\u0067\u0065\u0020as\u0073o\u0063\u0069\u0061\u0074\u0069o\u006e\u0020\u0066\u006c\u0061\u0067");};_fcdc .FinishByte ();return nil ;};func (_ecfg *HalftoneRegion )computeY (_dgad ,_cbdf int )int {return _ecfg .shiftAndFill (int (_ecfg .HGridY )+_dgad *int (_ecfg .HRegionX )-_cbdf *int (_ecfg .HRegionY ));
};type Header struct{SegmentNumber uint32 ;Type Type ;RetainFlag bool ;PageAssociation int ;PageAssociationFieldSize bool ;RTSegments []*Header ;HeaderLength int64 ;SegmentDataLength uint64 ;SegmentDataStartOffset uint64 ;Reader *_fc .Reader ;SegmentData Segmenter ;
RTSNumbers []int ;RetainBits []uint8 ;};func (_cfcc *PageInformationSegment )readIsStriped ()error {_eccc ,_aceb :=_cfcc ._eceaf .ReadBit ();if _aceb !=nil {return _aceb ;};if _eccc ==1{_cfcc .IsStripe =true ;};return nil ;};type PageInformationSegment struct{_eceaf *_fc .Reader ;
PageBMHeight int ;PageBMWidth int ;ResolutionX int ;ResolutionY int ;_cbg bool ;_caad _ea .CombinationOperator ;_dbdbb bool ;DefaultPixelValue uint8 ;_aaad bool ;IsLossless bool ;IsStripe bool ;MaxStripeSize uint16 ;};func (_abcda *PatternDictionary )Init (h *Header ,r *_fc .Reader )error {_abcda ._fed =r ;
return _abcda .parseHeader ();};func (_acec *Header )writeSegmentDataLength (_dccf _fc .BinaryWriter )(_aceg int ,_dbbc error ){_fdfg :=make ([]byte ,4);_f .BigEndian .PutUint32 (_fdfg ,uint32 (_acec .SegmentDataLength ));if _aceg ,_dbbc =_dccf .Write (_fdfg );
_dbbc !=nil {return 0,_g .Wrap (_dbbc ,"\u0048\u0065a\u0064\u0065\u0072\u002e\u0077\u0072\u0069\u0074\u0065\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u0044\u0061\u0074\u0061\u004c\u0065ng\u0074\u0068","");};return _aceg ,nil ;};func (_facg *GenericRegion )Size ()int {return _facg .RegionSegment .Size ()+1+2*len (_facg .GBAtX )};
func (_bgaa *Header )referenceSize ()uint {switch {case _bgaa .SegmentNumber <=255:return 1;case _bgaa .SegmentNumber <=65535:return 2;default:return 4;};};func (_ggefe *SymbolDictionary )getToExportFlags ()([]int ,error ){var (_aagfa int ;_aece int32 ;
_cdadb error ;_cgbc =int32 (_ggefe ._acfd +_ggefe .NumberOfNewSymbols );_cafe =make ([]int ,_cgbc ););for _fdcb :=int32 (0);_fdcb < _cgbc ;_fdcb +=_aece {if _ggefe .IsHuffmanEncoded {_baed ,_dddg :=_ad .GetStandardTable (1);if _dddg !=nil {return nil ,_dddg ;
};_aeef ,_dddg :=_baed .Decode (_ggefe ._degd );if _dddg !=nil {return nil ,_dddg ;};_aece =int32 (_aeef );}else {_aece ,_cdadb =_ggefe ._adgg .DecodeInt (_ggefe ._fbd );if _cdadb !=nil {return nil ,_cdadb ;};};if _aece !=0{if _fdcb +_aece > _cgbc {return nil ,_g .Error ("\u0053\u0079\u006d\u0062\u006f\u006cD\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u002e\u0067\u0065\u0074T\u006f\u0045\u0078\u0070\u006f\u0072\u0074F\u006c\u0061\u0067\u0073","\u006d\u0061\u006c\u0066\u006f\u0072m\u0065\u0064\u0020\u0069\u006e\u0070\u0075\u0074\u0020\u0064\u0061\u0074\u0061\u0020\u0070\u0072\u006f\u0076\u0069\u0064e\u0064\u002e\u0020\u0069\u006e\u0064\u0065\u0078\u0020\u006f\u0075\u0074\u0020\u006ff\u0020r\u0061\u006e\u0067\u0065");
};for _eccd :=_fdcb ;_eccd < _fdcb +_aece ;_eccd ++{_cafe [_eccd ]=_aagfa ;};};if _aagfa ==0{_aagfa =1;}else {_aagfa =0;};};return _cafe ,nil ;};func _adgd (_aced *_fc .Reader ,_geba *Header )*GenericRefinementRegion {return &GenericRefinementRegion {_cda :_aced ,RegionInfo :NewRegionSegment (_aced ),_ba :_geba ,_da :&template0 {},_ed :&template1 {}};
};func (_age *GenericRefinementRegion )GetRegionInfo ()*RegionSegment {return _age .RegionInfo };func (_fac *GenericRefinementRegion )decodeSLTP ()(int ,error ){_fac .Template .setIndex (_fac ._ege );return _fac ._cc .DecodeBit (_fac ._ege );};func (_edgg *RegionSegment )readCombinationOperator ()error {_dafb ,_accea :=_edgg ._ddgb .ReadBits (3);
if _accea !=nil {return _accea ;};_edgg .CombinaionOperator =_ea .CombinationOperator (_dafb &0xF);return nil ;};func (_ggbd *TextRegion )decodeStripT ()(_adgdc int64 ,_gadag error ){if _ggbd .IsHuffmanEncoded {if _ggbd .SbHuffDT ==3{if _ggbd ._cbec ==nil {var _ebee int ;
if _ggbd .SbHuffFS ==3{_ebee ++;};if _ggbd .SbHuffDS ==3{_ebee ++;};_ggbd ._cbec ,_gadag =_ggbd .getUserTable (_ebee );if _gadag !=nil {return 0,_gadag ;};};_adgdc ,_gadag =_ggbd ._cbec .Decode (_ggbd ._afda );if _gadag !=nil {return 0,_gadag ;};}else {var _cbeg _ad .Tabler ;
_cbeg ,_gadag =_ad .GetStandardTable (11+int (_ggbd .SbHuffDT ));if _gadag !=nil {return 0,_gadag ;};_adgdc ,_gadag =_cbeg .Decode (_ggbd ._afda );if _gadag !=nil {return 0,_gadag ;};};}else {var _debe int32 ;_debe ,_gadag =_ggbd ._gagc .DecodeInt (_ggbd ._bfcbad );
if _gadag !=nil {return 0,_gadag ;};_adgdc =int64 (_debe );};_adgdc *=int64 (-_ggbd .SbStrips );return _adgdc ,nil ;};func (_egba *HalftoneRegion )parseHeader ()error {if _bdc :=_egba .RegionSegment .parseHeader ();_bdc !=nil {return _bdc ;};_acea ,_fgfd :=_egba ._ddd .ReadBit ();
if _fgfd !=nil {return _fgfd ;};_egba .HDefaultPixel =int8 (_acea );_aca ,_fgfd :=_egba ._ddd .ReadBits (3);if _fgfd !=nil {return _fgfd ;};_egba .CombinationOperator =_ea .CombinationOperator (_aca &0xf);_acea ,_fgfd =_egba ._ddd .ReadBit ();if _fgfd !=nil {return _fgfd ;
};if _acea ==1{_egba .HSkipEnabled =true ;};_aca ,_fgfd =_egba ._ddd .ReadBits (2);if _fgfd !=nil {return _fgfd ;};_egba .HTemplate =byte (_aca &0xf);_acea ,_fgfd =_egba ._ddd .ReadBit ();if _fgfd !=nil {return _fgfd ;};if _acea ==1{_egba .IsMMREncoded =true ;
};_aca ,_fgfd =_egba ._ddd .ReadBits (32);if _fgfd !=nil {return _fgfd ;};_egba .HGridWidth =uint32 (_aca &_e .MaxUint32 );_aca ,_fgfd =_egba ._ddd .ReadBits (32);if _fgfd !=nil {return _fgfd ;};_egba .HGridHeight =uint32 (_aca &_e .MaxUint32 );_aca ,_fgfd =_egba ._ddd .ReadBits (32);
if _fgfd !=nil {return _fgfd ;};_egba .HGridX =int32 (_aca &_e .MaxInt32 );_aca ,_fgfd =_egba ._ddd .ReadBits (32);if _fgfd !=nil {return _fgfd ;};_egba .HGridY =int32 (_aca &_e .MaxInt32 );_aca ,_fgfd =_egba ._ddd .ReadBits (16);if _fgfd !=nil {return _fgfd ;
};_egba .HRegionX =uint16 (_aca &_e .MaxUint16 );_aca ,_fgfd =_egba ._ddd .ReadBits (16);if _fgfd !=nil {return _fgfd ;};_egba .HRegionY =uint16 (_aca &_e .MaxUint16 );if _fgfd =_egba .computeSegmentDataStructure ();_fgfd !=nil {return _fgfd ;};return _egba .checkInput ();
};func (_ffba *template0 )form (_dga ,_bg ,_cdf ,_ecf ,_facc int16 )int16 {return (_dga <<10)|(_bg <<7)|(_cdf <<4)|(_ecf <<1)|_facc ;};func _adgb (_bcfc int )int {if _bcfc ==0{return 0;};_bcfc |=_bcfc >>1;_bcfc |=_bcfc >>2;_bcfc |=_bcfc >>4;_bcfc |=_bcfc >>8;
_bcfc |=_bcfc >>16;return (_bcfc +1)>>1;};func (_cdeg *Header )CleanSegmentData (){if _cdeg .SegmentData !=nil {_cdeg .SegmentData =nil ;};};func (_dgfg *TextRegion )decodeIb (_cdfd ,_aeec int64 )(*_ea .Bitmap ,error ){const _eebf ="\u0064\u0065\u0063\u006f\u0064\u0065\u0049\u0062";
var (_ebag error ;_deab *_ea .Bitmap ;);if _cdfd ==0{if int (_aeec )> len (_dgfg .Symbols )-1{return nil ,_g .Error (_eebf ,"\u0064\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0049\u0042\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0020\u0069\u006e\u0064\u0065x\u0020\u006f\u0075\u0074\u0020o\u0066\u0020r\u0061\u006e\u0067\u0065");
};return _dgfg .Symbols [int (_aeec )],nil ;};var _dfdf ,_eddbc ,_eeeec ,_becgg int64 ;_dfdf ,_ebag =_dgfg .decodeRdw ();if _ebag !=nil {return nil ,_g .Wrap (_ebag ,_eebf ,"");};_eddbc ,_ebag =_dgfg .decodeRdh ();if _ebag !=nil {return nil ,_g .Wrap (_ebag ,_eebf ,"");
};_eeeec ,_ebag =_dgfg .decodeRdx ();if _ebag !=nil {return nil ,_g .Wrap (_ebag ,_eebf ,"");};_becgg ,_ebag =_dgfg .decodeRdy ();if _ebag !=nil {return nil ,_g .Wrap (_ebag ,_eebf ,"");};if _dgfg .IsHuffmanEncoded {if _ ,_ebag =_dgfg .decodeSymInRefSize ();
_ebag !=nil {return nil ,_g .Wrap (_ebag ,_eebf ,"");};_dgfg ._afda .Align ();};_agab :=_dgfg .Symbols [_aeec ];_bbad :=uint32 (_agab .Width );_caeg :=uint32 (_agab .Height );_bdgg :=int32 (uint32 (_dfdf )>>1)+int32 (_eeeec );_afff :=int32 (uint32 (_eddbc )>>1)+int32 (_becgg );
if _dgfg ._aafb ==nil {_dgfg ._aafb =_adgd (_dgfg ._afda ,nil );};_dgfg ._aafb .setParameters (_dgfg ._dagb ,_dgfg ._gagc ,_dgfg .SbrTemplate ,_bbad +uint32 (_dfdf ),_caeg +uint32 (_eddbc ),_agab ,_bdgg ,_afff ,false ,_dgfg .SbrATX ,_dgfg .SbrATY );_deab ,_ebag =_dgfg ._aafb .GetRegionBitmap ();
if _ebag !=nil {return nil ,_g .Wrap (_ebag ,_eebf ,"\u0067\u0072\u0066");};if _dgfg .IsHuffmanEncoded {_dgfg ._afda .Align ();};return _deab ,nil ;};func (_cag *Header )String ()string {_efff :=&_cf .Builder {};_efff .WriteString ("\u000a[\u0053E\u0047\u004d\u0045\u004e\u0054-\u0048\u0045A\u0044\u0045\u0052\u005d\u000a");
_efff .WriteString (_fe .Sprintf ("\t\u002d\u0020\u0053\u0065gm\u0065n\u0074\u004e\u0075\u006d\u0062e\u0072\u003a\u0020\u0025\u0076\u000a",_cag .SegmentNumber ));_efff .WriteString (_fe .Sprintf ("\u0009\u002d\u0020T\u0079\u0070\u0065\u003a\u0020\u0025\u0076\u000a",_cag .Type ));
_efff .WriteString (_fe .Sprintf ("\u0009-\u0020R\u0065\u0074\u0061\u0069\u006eF\u006c\u0061g\u003a\u0020\u0025\u0076\u000a",_cag .RetainFlag ));_efff .WriteString (_fe .Sprintf ("\u0009\u002d\u0020Pa\u0067\u0065\u0041\u0073\u0073\u006f\u0063\u0069\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0076\u000a",_cag .PageAssociation ));
_efff .WriteString (_fe .Sprintf ("\u0009\u002d\u0020\u0050\u0061\u0067\u0065\u0041\u0073\u0073\u006f\u0063\u0069\u0061\u0074i\u006fn\u0046\u0069\u0065\u006c\u0064\u0053\u0069\u007a\u0065\u003a\u0020\u0025\u0076\u000a",_cag .PageAssociationFieldSize ));
_efff .WriteString ("\u0009-\u0020R\u0054\u0053\u0045\u0047\u004d\u0045\u004e\u0054\u0053\u003a\u000a");for _ ,_febgg :=range _cag .RTSNumbers {_efff .WriteString (_fe .Sprintf ("\u0009\t\u002d\u0020\u0025\u0064\u000a",_febgg ));};_efff .WriteString (_fe .Sprintf ("\t\u002d \u0048\u0065\u0061\u0064\u0065\u0072\u004c\u0065n\u0067\u0074\u0068\u003a %\u0076\u000a",_cag .HeaderLength ));
_efff .WriteString (_fe .Sprintf ("\u0009-\u0020\u0053\u0065\u0067m\u0065\u006e\u0074\u0044\u0061t\u0061L\u0065n\u0067\u0074\u0068\u003a\u0020\u0025\u0076\n",_cag .SegmentDataLength ));_efff .WriteString (_fe .Sprintf ("\u0009\u002d\u0020\u0053\u0065\u0067\u006d\u0065\u006e\u0074D\u0061\u0074\u0061\u0053\u0074\u0061\u0072t\u004f\u0066\u0066\u0073\u0065\u0074\u003a\u0020\u0025\u0076\u000a",_cag .SegmentDataStartOffset ));
return _efff .String ();};func (_cdaf *TextRegion )decodeSymInRefSize ()(int64 ,error ){const _gbcf ="\u0064e\u0063o\u0064\u0065\u0053\u0079\u006dI\u006e\u0052e\u0066\u0053\u0069\u007a\u0065";if _cdaf .SbHuffRSize ==0{_gadfe ,_feae :=_ad .GetStandardTable (1);
if _feae !=nil {return 0,_g .Wrap (_feae ,_gbcf ,"");};return _gadfe .Decode (_cdaf ._afda );};if _cdaf ._bega ==nil {var (_edad int ;_ecfgf error ;);if _cdaf .SbHuffFS ==3{_edad ++;};if _cdaf .SbHuffDS ==3{_edad ++;};if _cdaf .SbHuffDT ==3{_edad ++;};
if _cdaf .SbHuffRDWidth ==3{_edad ++;};if _cdaf .SbHuffRDHeight ==3{_edad ++;};if _cdaf .SbHuffRDX ==3{_edad ++;};if _cdaf .SbHuffRDY ==3{_edad ++;};_cdaf ._bega ,_ecfgf =_cdaf .getUserTable (_edad );if _ecfgf !=nil {return 0,_g .Wrap (_ecfgf ,_gbcf ,"");
};};_dcfa ,_cfdfa :=_cdaf ._bega .Decode (_cdaf ._afda );if _cfdfa !=nil {return 0,_g .Wrap (_cfdfa ,_gbcf ,"");};return _dcfa ,nil ;};func (_fdgc *SymbolDictionary )decodeHeightClassDeltaHeight ()(int64 ,error ){if _fdgc .IsHuffmanEncoded {return _fdgc .decodeHeightClassDeltaHeightWithHuffman ();
};_dffg ,_bcdc :=_fdgc ._adgg .DecodeInt (_fdgc ._eefb );if _bcdc !=nil {return 0,_bcdc ;};return int64 (_dffg ),nil ;};func (_eggf *GenericRefinementRegion )setParameters (_dge *_ac .DecoderStats ,_ddb *_ac .Decoder ,_aea int8 ,_aedf ,_fcda uint32 ,_feb *_ea .Bitmap ,_aee ,_bad int32 ,_bfd bool ,_ab []int8 ,_efa []int8 ){_eg .Log .Trace ("\u005b\u0047\u0045NE\u0052\u0049\u0043\u002d\u0052\u0045\u0046\u002d\u0052E\u0047I\u004fN\u005d \u0073\u0065\u0074\u0050\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073");
if _dge !=nil {_eggf ._ege =_dge ;};if _ddb !=nil {_eggf ._cc =_ddb ;};_eggf .TemplateID =_aea ;_eggf .RegionInfo .BitmapWidth =_aedf ;_eggf .RegionInfo .BitmapHeight =_fcda ;_eggf .ReferenceBitmap =_feb ;_eggf .ReferenceDX =_aee ;_eggf .ReferenceDY =_bad ;
_eggf .IsTPGROn =_bfd ;_eggf .GrAtX =_ab ;_eggf .GrAtY =_efa ;_eggf .RegionBitmap =nil ;_eg .Log .Trace ("[\u0047\u0045\u004e\u0045\u0052\u0049\u0043\u002d\u0052E\u0046\u002d\u0052\u0045\u0047\u0049\u004fN]\u0020\u0073\u0065\u0074P\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073 f\u0069\u006ei\u0073\u0068\u0065\u0064\u002e\u0020\u0025\u0073",_eggf );
};func (_fadd *PageInformationSegment )parseHeader ()(_faac error ){_eg .Log .Trace ("\u005b\u0050\u0061\u0067\u0065I\u006e\u0066\u006f\u0072\u006d\u0061\u0074\u0069\u006f\u006e\u0053\u0065\u0067m\u0065\u006e\u0074\u005d\u0020\u0050\u0061\u0072\u0073\u0069\u006e\u0067\u0048\u0065\u0061\u0064\u0065\u0072\u002e\u002e\u002e");
defer func (){var _gcdd ="[\u0050\u0061\u0067\u0065\u0049\u006e\u0066\u006f\u0072m\u0061\u0074\u0069\u006f\u006e\u0053\u0065gm\u0065\u006e\u0074\u005d \u0050\u0061\u0072\u0073\u0069\u006e\u0067\u0048\u0065ad\u0065\u0072 \u0046\u0069\u006e\u0069\u0073\u0068\u0065\u0064";
if _faac !=nil {_gcdd +="\u0020\u0077\u0069t\u0068\u0020\u0065\u0072\u0072\u006f\u0072\u0020"+_faac .Error ();}else {_gcdd +="\u0020\u0073\u0075\u0063\u0063\u0065\u0073\u0073\u0066\u0075\u006c\u006c\u0079";};_eg .Log .Trace (_gcdd );}();if _faac =_fadd .readWidthAndHeight ();
_faac !=nil {return _faac ;};if _faac =_fadd .readResolution ();_faac !=nil {return _faac ;};_ ,_faac =_fadd ._eceaf .ReadBit ();if _faac !=nil {return _faac ;};if _faac =_fadd .readCombinationOperatorOverrideAllowed ();_faac !=nil {return _faac ;};if _faac =_fadd .readRequiresAuxiliaryBuffer ();
_faac !=nil {return _faac ;};if _faac =_fadd .readCombinationOperator ();_faac !=nil {return _faac ;};if _faac =_fadd .readDefaultPixelValue ();_faac !=nil {return _faac ;};if _faac =_fadd .readContainsRefinement ();_faac !=nil {return _faac ;};if _faac =_fadd .readIsLossless ();
_faac !=nil {return _faac ;};if _faac =_fadd .readIsStriped ();_faac !=nil {return _faac ;};if _faac =_fadd .readMaxStripeSize ();_faac !=nil {return _faac ;};if _faac =_fadd .checkInput ();_faac !=nil {return _faac ;};_eg .Log .Trace ("\u0025\u0073",_fadd );
return nil ;};func (_eegf *PageInformationSegment )CombinationOperatorOverrideAllowed ()bool {return _eegf ._cbg };func (_cdcb *PageInformationSegment )readMaxStripeSize ()error {_ecg ,_fgcc :=_cdcb ._eceaf .ReadBits (15);if _fgcc !=nil {return _fgcc ;
};_cdcb .MaxStripeSize =uint16 (_ecg &_e .MaxUint16 );return nil ;};type SegmentEncoder interface{Encode (_bbe _fc .BinaryWriter )(_egee int ,_bfeg error );};func (_bfg *GenericRefinementRegion )readAtPixels ()error {_bfg .GrAtX =make ([]int8 ,2);_bfg .GrAtY =make ([]int8 ,2);
_dea ,_egd :=_bfg ._cda .ReadByte ();if _egd !=nil {return _egd ;};_bfg .GrAtX [0]=int8 (_dea );_dea ,_egd =_bfg ._cda .ReadByte ();if _egd !=nil {return _egd ;};_bfg .GrAtY [0]=int8 (_dea );_dea ,_egd =_bfg ._cda .ReadByte ();if _egd !=nil {return _egd ;
};_bfg .GrAtX [1]=int8 (_dea );_dea ,_egd =_bfg ._cda .ReadByte ();if _egd !=nil {return _egd ;};_bfg .GrAtY [1]=int8 (_dea );return nil ;};func (_fcac *SymbolDictionary )encodeRefinementATFlags (_ceffbf _fc .BinaryWriter )(_eada int ,_cdda error ){const _bdbed ="\u0065\u006e\u0063od\u0065\u0052\u0065\u0066\u0069\u006e\u0065\u006d\u0065\u006e\u0074\u0041\u0054\u0046\u006c\u0061\u0067\u0073";
if !_fcac .UseRefinementAggregation ||_fcac .SdrTemplate !=0{return 0,nil ;};for _cada :=0;_cada < 2;_cada ++{if _cdda =_ceffbf .WriteByte (byte (_fcac .SdrATX [_cada ]));_cdda !=nil {return _eada ,_g .Wrapf (_cdda ,_bdbed ,"\u0053\u0064\u0072\u0041\u0054\u0058\u005b\u0025\u0064\u005d",_cada );
};_eada ++;if _cdda =_ceffbf .WriteByte (byte (_fcac .SdrATY [_cada ]));_cdda !=nil {return _eada ,_g .Wrapf (_cdda ,_bdbed ,"\u0053\u0064\u0072\u0041\u0054\u0059\u005b\u0025\u0064\u005d",_cada );};_eada ++;};return _eada ,nil ;};func (_gfbb *TextRegion )initSymbols ()error {const _dagag ="i\u006e\u0069\u0074\u0053\u0079\u006d\u0062\u006f\u006c\u0073";
for _ ,_adbb :=range _gfbb .Header .RTSegments {if _adbb ==nil {return _g .Error (_dagag ,"\u006e\u0069\u006c\u0020\u0073\u0065\u0067\u006de\u006e\u0074\u0020pr\u006f\u0076\u0069\u0064\u0065\u0064 \u0066\u006f\u0072\u0020\u0074\u0068\u0065\u0020\u0074\u0065\u0078\u0074\u0020\u0072\u0065g\u0069\u006f\u006e\u0020\u0053\u0079\u006d\u0062o\u006c\u0073");
};if _adbb .Type ==0{_gdfd ,_fcaa :=_adbb .GetSegmentData ();if _fcaa !=nil {return _g .Wrap (_fcaa ,_dagag ,"");};_cdeb ,_aeeg :=_gdfd .(*SymbolDictionary );if !_aeeg {return _g .Error (_dagag ,"\u0072e\u0066\u0065r\u0072\u0065\u0064 \u0054\u006f\u0020\u0053\u0065\u0067\u006de\u006e\u0074\u0020\u0069\u0073\u0020n\u006f\u0074\u0020\u0061\u0020\u0053\u0079\u006d\u0062\u006f\u006cD\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079");
};_cdeb ._agae =_gfbb ._geeec ;_gddbe ,_fcaa :=_cdeb .GetDictionary ();if _fcaa !=nil {return _g .Wrap (_fcaa ,_dagag ,"");};_gfbb .Symbols =append (_gfbb .Symbols ,_gddbe ...);};};_gfbb .NumberOfSymbols =uint32 (len (_gfbb .Symbols ));return nil ;};func (_ebg *GenericRegion )decodeTemplate3 (_ddf ,_abd ,_eaf int ,_gcfe ,_gcd int )(_dfbd error ){const _ffd ="\u0064e\u0063o\u0064\u0065\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0033";
var (_ceg ,_bcccc int ;_cgg int ;_aebd byte ;_bdbe ,_dgcc int ;);if _ddf >=1{_aebd ,_dfbd =_ebg .Bitmap .GetByte (_gcd );if _dfbd !=nil {return _g .Wrap (_dfbd ,_ffd ,"\u006ci\u006e\u0065\u0020\u003e\u003d\u00201");};_cgg =int (_aebd );};_ceg =(_cgg >>1)&0x70;
for _acc :=0;_acc < _eaf ;_acc =_bdbe {var (_ebad byte ;_gee int ;);_bdbe =_acc +8;if _dcbf :=_abd -_acc ;_dcbf > 8{_gee =8;}else {_gee =_dcbf ;};if _ddf >=1{_cgg <<=8;if _bdbe < _abd {_aebd ,_dfbd =_ebg .Bitmap .GetByte (_gcd +1);if _dfbd !=nil {return _g .Wrap (_dfbd ,_ffd ,"\u0069\u006e\u006e\u0065\u0072\u0020\u002d\u0020\u006c\u0069\u006e\u0065 \u003e\u003d\u0020\u0031");
};_cgg |=int (_aebd );};};for _gdgg :=0;_gdgg < _gee ;_gdgg ++{if _ebg ._edg {_bcccc =_ebg .overrideAtTemplate3 (_ceg ,_acc +_gdgg ,_ddf ,int (_ebad ),_gdgg );_ebg ._gefg .SetIndex (int32 (_bcccc ));}else {_ebg ._gefg .SetIndex (int32 (_ceg ));};_dgcc ,_dfbd =_ebg ._cff .DecodeBit (_ebg ._gefg );
if _dfbd !=nil {return _g .Wrap (_dfbd ,_ffd ,"");};_ebad |=byte (_dgcc )<<byte (7-_gdgg );_ceg =((_ceg &0x1f7)<<1)|_dgcc |((_cgg >>uint (8-_gdgg ))&0x010);};if _cef :=_ebg .Bitmap .SetByte (_gcfe ,_ebad );_cef !=nil {return _g .Wrap (_cef ,_ffd ,"");};
_gcfe ++;_gcd ++;};return nil ;};func (_bdbef *TextRegion )decodeID ()(int64 ,error ){if _bdbef .IsHuffmanEncoded {if _bdbef ._aafg ==nil {_gbdaf ,_fbea :=_bdbef ._afda .ReadBits (byte (_bdbef ._bage ));return int64 (_gbdaf ),_fbea ;};return _bdbef ._aafg .Decode (_bdbef ._afda );
};return _bdbef ._gagc .DecodeIAID (uint64 (_bdbef ._bage ),_bdbef ._geeec );};func (_fbee *PageInformationSegment )Size ()int {return 19};const (TSymbolDictionary Type =0;TIntermediateTextRegion Type =4;TImmediateTextRegion Type =6;TImmediateLosslessTextRegion Type =7;
TPatternDictionary Type =16;TIntermediateHalftoneRegion Type =20;TImmediateHalftoneRegion Type =22;TImmediateLosslessHalftoneRegion Type =23;TIntermediateGenericRegion Type =36;TImmediateGenericRegion Type =38;TImmediateLosslessGenericRegion Type =39;TIntermediateGenericRefinementRegion Type =40;
TImmediateGenericRefinementRegion Type =42;TImmediateLosslessGenericRefinementRegion Type =43;TPageInformation Type =48;TEndOfPage Type =49;TEndOfStrip Type =50;TEndOfFile Type =51;TProfiles Type =52;TTables Type =53;TExtension Type =62;TBitmap Type =70;
);func (_agd *TextRegion )readHuffmanFlags ()error {var (_eaac int ;_aadb uint64 ;_gggb error ;);_ ,_gggb =_agd ._afda .ReadBit ();if _gggb !=nil {return _gggb ;};_eaac ,_gggb =_agd ._afda .ReadBit ();if _gggb !=nil {return _gggb ;};_agd .SbHuffRSize =int8 (_eaac );
_aadb ,_gggb =_agd ._afda .ReadBits (2);if _gggb !=nil {return _gggb ;};_agd .SbHuffRDY =int8 (_aadb )&0xf;_aadb ,_gggb =_agd ._afda .ReadBits (2);if _gggb !=nil {return _gggb ;};_agd .SbHuffRDX =int8 (_aadb )&0xf;_aadb ,_gggb =_agd ._afda .ReadBits (2);
if _gggb !=nil {return _gggb ;};_agd .SbHuffRDHeight =int8 (_aadb )&0xf;_aadb ,_gggb =_agd ._afda .ReadBits (2);if _gggb !=nil {return _gggb ;};_agd .SbHuffRDWidth =int8 (_aadb )&0xf;_aadb ,_gggb =_agd ._afda .ReadBits (2);if _gggb !=nil {return _gggb ;
};_agd .SbHuffDT =int8 (_aadb )&0xf;_aadb ,_gggb =_agd ._afda .ReadBits (2);if _gggb !=nil {return _gggb ;};_agd .SbHuffDS =int8 (_aadb )&0xf;_aadb ,_gggb =_agd ._afda .ReadBits (2);if _gggb !=nil {return _gggb ;};_agd .SbHuffFS =int8 (_aadb )&0xf;return nil ;
};func (_cgdd *GenericRegion )decodeTemplate1 (_eecd ,_ddc ,_fbba int ,_bbc ,_aba int )(_aad error ){const _gddc ="\u0064e\u0063o\u0064\u0065\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0031";var (_gbd ,_gaf int ;_aac ,_bdbg int ;_eca byte ;_ggg ,_adc int ;
);if _eecd >=1{_eca ,_aad =_cgdd .Bitmap .GetByte (_aba );if _aad !=nil {return _g .Wrap (_aad ,_gddc ,"\u006ci\u006e\u0065\u0020\u003e\u003d\u00201");};_aac =int (_eca );};if _eecd >=2{_eca ,_aad =_cgdd .Bitmap .GetByte (_aba -_cgdd .Bitmap .RowStride );
if _aad !=nil {return _g .Wrap (_aad ,_gddc ,"\u006ci\u006e\u0065\u0020\u003e\u003d\u00202");};_bdbg =int (_eca )<<5;};_gbd =((_aac >>1)&0x1f8)|((_bdbg >>1)&0x1e00);for _aeb :=0;_aeb < _fbba ;_aeb =_ggg {var (_aeg byte ;_abb int ;);_ggg =_aeb +8;if _ced :=_ddc -_aeb ;
_ced > 8{_abb =8;}else {_abb =_ced ;};if _eecd > 0{_aac <<=8;if _ggg < _ddc {_eca ,_aad =_cgdd .Bitmap .GetByte (_aba +1);if _aad !=nil {return _g .Wrap (_aad ,_gddc ,"\u006c\u0069\u006e\u0065\u0020\u003e\u0020\u0030");};_aac |=int (_eca );};};if _eecd > 1{_bdbg <<=8;
if _ggg < _ddc {_eca ,_aad =_cgdd .Bitmap .GetByte (_aba -_cgdd .Bitmap .RowStride +1);if _aad !=nil {return _g .Wrap (_aad ,_gddc ,"\u006c\u0069\u006e\u0065\u0020\u003e\u0020\u0031");};_bdbg |=int (_eca )<<5;};};for _dbg :=0;_dbg < _abb ;_dbg ++{if _cgdd ._edg {_gaf =_cgdd .overrideAtTemplate1 (_gbd ,_aeb +_dbg ,_eecd ,int (_aeg ),_dbg );
_cgdd ._gefg .SetIndex (int32 (_gaf ));}else {_cgdd ._gefg .SetIndex (int32 (_gbd ));};_adc ,_aad =_cgdd ._cff .DecodeBit (_cgdd ._gefg );if _aad !=nil {return _g .Wrap (_aad ,_gddc ,"");};_aeg |=byte (_adc )<<uint (7-_dbg );_ceb :=uint (8-_dbg );_gbd =((_gbd &0xefb)<<1)|_adc |((_aac >>_ceb )&0x8)|((_bdbg >>_ceb )&0x200);
};if _bcc :=_cgdd .Bitmap .SetByte (_bbc ,_aeg );_bcc !=nil {return _g .Wrap (_bcc ,_gddc ,"");};_bbc ++;_aba ++;};return nil ;};func (_cecf *template0 )setIndex (_fgf *_ac .DecoderStats ){_fgf .SetIndex (0x100)};func (_fcff *SymbolDictionary )getSbSymCodeLen ()int8 {_cbdc :=int8 (_e .Ceil (_e .Log (float64 (_fcff ._acfd +_fcff .NumberOfNewSymbols ))/_e .Log (2)));
if _fcff .IsHuffmanEncoded &&_cbdc < 1{return 1;};return _cbdc ;};type GenericRefinementRegion struct{_da templater ;_ed templater ;_cda *_fc .Reader ;_ba *Header ;RegionInfo *RegionSegment ;IsTPGROn bool ;TemplateID int8 ;Template templater ;GrAtX []int8 ;
GrAtY []int8 ;RegionBitmap *_ea .Bitmap ;ReferenceBitmap *_ea .Bitmap ;ReferenceDX int32 ;ReferenceDY int32 ;_cc *_ac .Decoder ;_ege *_ac .DecoderStats ;_ebf bool ;_dd []bool ;};func (_fgdd *TextRegion )Init (header *Header ,r *_fc .Reader )error {_fgdd .Header =header ;
_fgdd ._afda =r ;_fgdd .RegionInfo =NewRegionSegment (_fgdd ._afda );return _fgdd .parseHeader ();};func (_eeac *SymbolDictionary )decodeHeightClassBitmap (_fgeba *_ea .Bitmap ,_befa int64 ,_cead int ,_addc []int )error {for _acag :=_befa ;_acag < int64 (_eeac ._dddc );
_acag ++{var _dbc int ;for _gdaf :=_befa ;_gdaf <=_acag -1;_gdaf ++{_dbc +=_addc [_gdaf ];};_acfc :=_a .Rect (_dbc ,0,_dbc +_addc [_acag ],_cead );_cgbd ,_cdac :=_ea .Extract (_acfc ,_fgeba );if _cdac !=nil {return _cdac ;};_eeac ._bgff [_acag ]=_cgbd ;
_eeac ._gafc =append (_eeac ._gafc ,_cgbd );};return nil ;};func (_dbf *GenericRegion )GetRegionInfo ()*RegionSegment {return _dbf .RegionSegment };func (_agca *GenericRegion )overrideAtTemplate0b (_facb ,_gcdg ,_gea ,_fbga ,_dgfe ,_beeg int )int {if _agca .GBAtOverride [0]{_facb &=0xFFFD;
if _agca .GBAtY [0]==0&&_agca .GBAtX [0]>=-int8 (_dgfe ){_facb |=(_fbga >>uint (int8 (_beeg )-_agca .GBAtX [0]&0x1))<<1;}else {_facb |=int (_agca .getPixel (_gcdg +int (_agca .GBAtX [0]),_gea +int (_agca .GBAtY [0])))<<1;};};if _agca .GBAtOverride [1]{_facb &=0xDFFF;
if _agca .GBAtY [1]==0&&_agca .GBAtX [1]>=-int8 (_dgfe ){_facb |=(_fbga >>uint (int8 (_beeg )-_agca .GBAtX [1]&0x1))<<13;}else {_facb |=int (_agca .getPixel (_gcdg +int (_agca .GBAtX [1]),_gea +int (_agca .GBAtY [1])))<<13;};};if _agca .GBAtOverride [2]{_facb &=0xFDFF;
if _agca .GBAtY [2]==0&&_agca .GBAtX [2]>=-int8 (_dgfe ){_facb |=(_fbga >>uint (int8 (_beeg )-_agca .GBAtX [2]&0x1))<<9;}else {_facb |=int (_agca .getPixel (_gcdg +int (_agca .GBAtX [2]),_gea +int (_agca .GBAtY [2])))<<9;};};if _agca .GBAtOverride [3]{_facb &=0xBFFF;
if _agca .GBAtY [3]==0&&_agca .GBAtX [3]>=-int8 (_dgfe ){_facb |=(_fbga >>uint (int8 (_beeg )-_agca .GBAtX [3]&0x1))<<14;}else {_facb |=int (_agca .getPixel (_gcdg +int (_agca .GBAtX [3]),_gea +int (_agca .GBAtY [3])))<<14;};};if _agca .GBAtOverride [4]{_facb &=0xEFFF;
if _agca .GBAtY [4]==0&&_agca .GBAtX [4]>=-int8 (_dgfe ){_facb |=(_fbga >>uint (int8 (_beeg )-_agca .GBAtX [4]&0x1))<<12;}else {_facb |=int (_agca .getPixel (_gcdg +int (_agca .GBAtX [4]),_gea +int (_agca .GBAtY [4])))<<12;};};if _agca .GBAtOverride [5]{_facb &=0xFFDF;
if _agca .GBAtY [5]==0&&_agca .GBAtX [5]>=-int8 (_dgfe ){_facb |=(_fbga >>uint (int8 (_beeg )-_agca .GBAtX [5]&0x1))<<5;}else {_facb |=int (_agca .getPixel (_gcdg +int (_agca .GBAtX [5]),_gea +int (_agca .GBAtY [5])))<<5;};};if _agca .GBAtOverride [6]{_facb &=0xFFFB;
if _agca .GBAtY [6]==0&&_agca .GBAtX [6]>=-int8 (_dgfe ){_facb |=(_fbga >>uint (int8 (_beeg )-_agca .GBAtX [6]&0x1))<<2;}else {_facb |=int (_agca .getPixel (_gcdg +int (_agca .GBAtX [6]),_gea +int (_agca .GBAtY [6])))<<2;};};if _agca .GBAtOverride [7]{_facb &=0xFFF7;
if _agca .GBAtY [7]==0&&_agca .GBAtX [7]>=-int8 (_dgfe ){_facb |=(_fbga >>uint (int8 (_beeg )-_agca .GBAtX [7]&0x1))<<3;}else {_facb |=int (_agca .getPixel (_gcdg +int (_agca .GBAtX [7]),_gea +int (_agca .GBAtY [7])))<<3;};};if _agca .GBAtOverride [8]{_facb &=0xF7FF;
if _agca .GBAtY [8]==0&&_agca .GBAtX [8]>=-int8 (_dgfe ){_facb |=(_fbga >>uint (int8 (_beeg )-_agca .GBAtX [8]&0x1))<<11;}else {_facb |=int (_agca .getPixel (_gcdg +int (_agca .GBAtX [8]),_gea +int (_agca .GBAtY [8])))<<11;};};if _agca .GBAtOverride [9]{_facb &=0xFFEF;
if _agca .GBAtY [9]==0&&_agca .GBAtX [9]>=-int8 (_dgfe ){_facb |=(_fbga >>uint (int8 (_beeg )-_agca .GBAtX [9]&0x1))<<4;}else {_facb |=int (_agca .getPixel (_gcdg +int (_agca .GBAtX [9]),_gea +int (_agca .GBAtY [9])))<<4;};};if _agca .GBAtOverride [10]{_facb &=0x7FFF;
if _agca .GBAtY [10]==0&&_agca .GBAtX [10]>=-int8 (_dgfe ){_facb |=(_fbga >>uint (int8 (_beeg )-_agca .GBAtX [10]&0x1))<<15;}else {_facb |=int (_agca .getPixel (_gcdg +int (_agca .GBAtX [10]),_gea +int (_agca .GBAtY [10])))<<15;};};if _agca .GBAtOverride [11]{_facb &=0xFDFF;
if _agca .GBAtY [11]==0&&_agca .GBAtX [11]>=-int8 (_dgfe ){_facb |=(_fbga >>uint (int8 (_beeg )-_agca .GBAtX [11]&0x1))<<10;}else {_facb |=int (_agca .getPixel (_gcdg +int (_agca .GBAtX [11]),_gea +int (_agca .GBAtY [11])))<<10;};};return _facb ;};type Documenter interface{GetPage (int )(Pager ,error );
GetGlobalSegment (int )(*Header ,error );};func (_fggcbd *TextRegion )setParameters (_adggb *_ac .Decoder ,_dbcb ,_ebafe bool ,_ffeg ,_ggda uint32 ,_fedg uint32 ,_cfgd int8 ,_agacg uint32 ,_adea int8 ,_dggg _ea .CombinationOperator ,_fgbf int8 ,_cbfcd int16 ,_ccae ,_egbf ,_fdgcf ,_bafa ,_fdff ,_cdff ,_cdef ,_cafg ,_adfd ,_dgeeg int8 ,_gfgfb ,_abce []int8 ,_ffea []*_ea .Bitmap ,_aaec int8 ){_fggcbd ._gagc =_adggb ;
_fggcbd .IsHuffmanEncoded =_dbcb ;_fggcbd .UseRefinement =_ebafe ;_fggcbd .RegionInfo .BitmapWidth =_ffeg ;_fggcbd .RegionInfo .BitmapHeight =_ggda ;_fggcbd .NumberOfSymbolInstances =_fedg ;_fggcbd .SbStrips =_cfgd ;_fggcbd .NumberOfSymbols =_agacg ;_fggcbd .DefaultPixel =_adea ;
_fggcbd .CombinationOperator =_dggg ;_fggcbd .IsTransposed =_fgbf ;_fggcbd .ReferenceCorner =_cbfcd ;_fggcbd .SbDsOffset =_ccae ;_fggcbd .SbHuffFS =_egbf ;_fggcbd .SbHuffDS =_fdgcf ;_fggcbd .SbHuffDT =_bafa ;_fggcbd .SbHuffRDWidth =_fdff ;_fggcbd .SbHuffRDHeight =_cdff ;
_fggcbd .SbHuffRSize =_adfd ;_fggcbd .SbHuffRDX =_cdef ;_fggcbd .SbHuffRDY =_cafg ;_fggcbd .SbrTemplate =_dgeeg ;_fggcbd .SbrATX =_gfgfb ;_fggcbd .SbrATY =_abce ;_fggcbd .Symbols =_ffea ;_fggcbd ._bage =_aaec ;};func NewHeader (d Documenter ,r *_fc .Reader ,offset int64 ,organizationType OrganizationType )(*Header ,error ){_abcd :=&Header {Reader :r };
if _efg :=_abcd .parse (d ,r ,offset ,organizationType );_efg !=nil {return nil ,_g .Wrap (_efg ,"\u004ee\u0077\u0048\u0065\u0061\u0064\u0065r","");};return _abcd ,nil ;};func (_dagac *RegionSegment )Size ()int {return 17};func (_gfdf *RegionSegment )Encode (w _fc .BinaryWriter )(_dgcg int ,_dgae error ){const _adcg ="R\u0065g\u0069\u006f\u006e\u0053\u0065\u0067\u006d\u0065n\u0074\u002e\u0045\u006eco\u0064\u0065";
_bfbb :=make ([]byte ,4);_f .BigEndian .PutUint32 (_bfbb ,_gfdf .BitmapWidth );_dgcg ,_dgae =w .Write (_bfbb );if _dgae !=nil {return 0,_g .Wrap (_dgae ,_adcg ,"\u0057\u0069\u0064t\u0068");};_f .BigEndian .PutUint32 (_bfbb ,_gfdf .BitmapHeight );var _ggdb int ;
_ggdb ,_dgae =w .Write (_bfbb );if _dgae !=nil {return 0,_g .Wrap (_dgae ,_adcg ,"\u0048\u0065\u0069\u0067\u0068\u0074");};_dgcg +=_ggdb ;_f .BigEndian .PutUint32 (_bfbb ,_gfdf .XLocation );_ggdb ,_dgae =w .Write (_bfbb );if _dgae !=nil {return 0,_g .Wrap (_dgae ,_adcg ,"\u0058L\u006f\u0063\u0061\u0074\u0069\u006fn");
};_dgcg +=_ggdb ;_f .BigEndian .PutUint32 (_bfbb ,_gfdf .YLocation );_ggdb ,_dgae =w .Write (_bfbb );if _dgae !=nil {return 0,_g .Wrap (_dgae ,_adcg ,"\u0059L\u006f\u0063\u0061\u0074\u0069\u006fn");};_dgcg +=_ggdb ;if _dgae =w .WriteByte (byte (_gfdf .CombinaionOperator )&0x07);
_dgae !=nil {return 0,_g .Wrap (_dgae ,_adcg ,"c\u006fm\u0062\u0069\u006e\u0061\u0074\u0069\u006f\u006e \u006f\u0070\u0065\u0072at\u006f\u0072");};_dgcg ++;return _dgcg ,nil ;};func (_cdbd *Header )GetSegmentData ()(Segmenter ,error ){var _fae Segmenter ;
if _cdbd .SegmentData !=nil {_fae =_cdbd .SegmentData ;};if _fae ==nil {_febg ,_ebab :=_bcfe [_cdbd .Type ];if !_ebab {return nil ,_fe .Errorf ("\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0073\u002f\u0020\u0025\u0064\u0020\u0063\u0072e\u0061t\u006f\u0072\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064\u002e\u0020",_cdbd .Type ,_cdbd .Type );
};_fae =_febg ();_eg .Log .Trace ("\u005b\u0053E\u0047\u004d\u0045\u004e\u0054-\u0048\u0045\u0041\u0044\u0045R\u005d\u005b\u0023\u0025\u0064\u005d\u0020\u0047\u0065\u0074\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u0044\u0061\u0074\u0061\u0020\u0061\u0074\u0020\u004f\u0066\u0066\u0073\u0065\u0074\u003a\u0020\u0025\u0030\u0034\u0058",_cdbd .SegmentNumber ,_cdbd .SegmentDataStartOffset );
_gge ,_dgbd :=_cdbd .subInputReader ();if _dgbd !=nil {return nil ,_dgbd ;};if _fgda :=_fae .Init (_cdbd ,_gge );_fgda !=nil {_eg .Log .Debug ("\u0049\u006e\u0069\u0074 \u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076 \u0066o\u0072\u0020\u0074\u0079\u0070\u0065\u003a \u0025\u0054",_fgda ,_fae );
return nil ,_fgda ;};_cdbd .SegmentData =_fae ;};return _fae ,nil ;};func (_bffc *GenericRegion )setParametersWithAt (_acfb bool ,_gdbgd byte ,_cdfb ,_egef bool ,_cbbe ,_abbc []int8 ,_gefe ,_edbb uint32 ,_cbfe *_ac .DecoderStats ,_gabg *_ac .Decoder ){_bffc .IsMMREncoded =_acfb ;
_bffc .GBTemplate =_gdbgd ;_bffc .IsTPGDon =_cdfb ;_bffc .GBAtX =_cbbe ;_bffc .GBAtY =_abbc ;_bffc .RegionSegment .BitmapHeight =_edbb ;_bffc .RegionSegment .BitmapWidth =_gefe ;_bffc ._fgfe =nil ;_bffc .Bitmap =nil ;if _cbfe !=nil {_bffc ._gefg =_cbfe ;
};if _gabg !=nil {_bffc ._cff =_gabg ;};_eg .Log .Trace ("\u005b\u0047\u0045\u004e\u0045\u0052\u0049\u0043\u002d\u0052\u0045\u0047\u0049O\u004e\u005d\u0020\u0073\u0065\u0074P\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020\u0053\u0044\u0041t\u003a\u0020\u0025\u0073",_bffc );
};func (_bge *TableSegment )Init (h *Header ,r *_fc .Reader )error {_bge ._gbeeb =r ;return _bge .parseHeader ();};func (_daa *GenericRegion )decodeTemplate0b (_gag ,_cfge ,_ffbd int ,_fafa ,_cbd int )(_cdad error ){const _badd ="\u0064\u0065c\u006f\u0064\u0065T\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0030\u0062";
var (_caa ,_agbe int ;_ddaa ,_bdag int ;_ffbae byte ;_cge int ;);if _gag >=1{_ffbae ,_cdad =_daa .Bitmap .GetByte (_cbd );if _cdad !=nil {return _g .Wrap (_cdad ,_badd ,"\u006ci\u006e\u0065\u0020\u003e\u003d\u00201");};_ddaa =int (_ffbae );};if _gag >=2{_ffbae ,_cdad =_daa .Bitmap .GetByte (_cbd -_daa .Bitmap .RowStride );
if _cdad !=nil {return _g .Wrap (_cdad ,_badd ,"\u006ci\u006e\u0065\u0020\u003e\u003d\u00202");};_bdag =int (_ffbae )<<6;};_caa =(_ddaa &0xf0)|(_bdag &0x3800);for _gbab :=0;_gbab < _ffbd ;_gbab =_cge {var (_fcdg byte ;_eceg int ;);_cge =_gbab +8;if _abeb :=_cfge -_gbab ;
_abeb > 8{_eceg =8;}else {_eceg =_abeb ;};if _gag > 0{_ddaa <<=8;if _cge < _cfge {_ffbae ,_cdad =_daa .Bitmap .GetByte (_cbd +1);if _cdad !=nil {return _g .Wrap (_cdad ,_badd ,"\u006c\u0069\u006e\u0065\u0020\u003e\u0020\u0030");};_ddaa |=int (_ffbae );
};};if _gag > 1{_bdag <<=8;if _cge < _cfge {_ffbae ,_cdad =_daa .Bitmap .GetByte (_cbd -_daa .Bitmap .RowStride +1);if _cdad !=nil {return _g .Wrap (_cdad ,_badd ,"\u006c\u0069\u006e\u0065\u0020\u003e\u0020\u0031");};_bdag |=int (_ffbae )<<6;};};for _bfgb :=0;
_bfgb < _eceg ;_bfgb ++{_cceg :=uint (7-_bfgb );if _daa ._edg {_agbe =_daa .overrideAtTemplate0b (_caa ,_gbab +_bfgb ,_gag ,int (_fcdg ),_bfgb ,int (_cceg ));_daa ._gefg .SetIndex (int32 (_agbe ));}else {_daa ._gefg .SetIndex (int32 (_caa ));};var _adeg int ;
_adeg ,_cdad =_daa ._cff .DecodeBit (_daa ._gefg );if _cdad !=nil {return _g .Wrap (_cdad ,_badd ,"");};_fcdg |=byte (_adeg <<_cceg );_caa =((_caa &0x7bf7)<<1)|_adeg |((_ddaa >>_cceg )&0x10)|((_bdag >>_cceg )&0x800);};if _bgd :=_daa .Bitmap .SetByte (_fafa ,_fcdg );
_bgd !=nil {return _g .Wrap (_bgd ,_badd ,"");};_fafa ++;_cbd ++;};return nil ;};func (_abe *GenericRegion )parseHeader ()(_fbe error ){_eg .Log .Trace ("\u005b\u0047\u0045\u004e\u0045\u0052I\u0043\u002d\u0052\u0045\u0047\u0049\u004f\u004e\u005d\u0020\u0050\u0061\u0072s\u0069\u006e\u0067\u0048\u0065\u0061\u0064e\u0072\u002e\u002e\u002e");
defer func (){if _fbe !=nil {_eg .Log .Trace ("\u005b\u0047\u0045\u004e\u0045\u0052\u0049\u0043\u002d\u0052\u0045\u0047\u0049\u004f\u004e]\u0020\u0050\u0061\u0072\u0073\u0069\u006e\u0067\u0048\u0065\u0061\u0064\u0065r\u0020\u0046\u0069\u006e\u0069\u0073\u0068\u0065\u0064\u0020\u0077\u0069th\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020\u0025\u0076",_fbe );
}else {_eg .Log .Trace ("\u005b\u0047\u0045\u004e\u0045\u0052\u0049C\u002d\u0052\u0045G\u0049\u004f\u004e]\u0020\u0050a\u0072\u0073\u0069\u006e\u0067\u0048e\u0061de\u0072\u0020\u0046\u0069\u006e\u0069\u0073\u0068\u0065\u0064\u0020\u0053\u0075\u0063\u0063\u0065\u0073\u0073\u0066\u0075\u006c\u006c\u0079\u002e\u002e\u002e");
};}();var (_cgd int ;_agb uint64 ;);if _fbe =_abe .RegionSegment .parseHeader ();_fbe !=nil {return _fbe ;};if _ ,_fbe =_abe ._dcd .ReadBits (3);_fbe !=nil {return _fbe ;};_cgd ,_fbe =_abe ._dcd .ReadBit ();if _fbe !=nil {return _fbe ;};if _cgd ==1{_abe .UseExtTemplates =true ;
};_cgd ,_fbe =_abe ._dcd .ReadBit ();if _fbe !=nil {return _fbe ;};if _cgd ==1{_abe .IsTPGDon =true ;};_agb ,_fbe =_abe ._dcd .ReadBits (2);if _fbe !=nil {return _fbe ;};_abe .GBTemplate =byte (_agb &0xf);_cgd ,_fbe =_abe ._dcd .ReadBit ();if _fbe !=nil {return _fbe ;
};if _cgd ==1{_abe .IsMMREncoded =true ;};if !_abe .IsMMREncoded {_dba :=1;if _abe .GBTemplate ==0{_dba =4;if _abe .UseExtTemplates {_dba =12;};};if _fbe =_abe .readGBAtPixels (_dba );_fbe !=nil {return _fbe ;};};if _fbe =_abe .computeSegmentDataStructure ();
_fbe !=nil {return _fbe ;};_eg .Log .Trace ("\u0025\u0073",_abe );return nil ;};type PatternDictionary struct{_fed *_fc .Reader ;DataHeaderOffset int64 ;DataHeaderLength int64 ;DataOffset int64 ;DataLength int64 ;GBAtX []int8 ;GBAtY []int8 ;IsMMREncoded bool ;
HDTemplate byte ;HdpWidth byte ;HdpHeight byte ;Patterns []*_ea .Bitmap ;GrayMax uint32 ;};func (_dddcg *TableSegment )StreamReader ()*_fc .Reader {return _dddcg ._gbeeb };type template0 struct{};func (_bfdag *SymbolDictionary )String ()string {_ffcad :=&_cf .Builder {};
_ffcad .WriteString ("\n\u005b\u0053\u0059\u004dBO\u004c-\u0044\u0049\u0043\u0054\u0049O\u004e\u0041\u0052\u0059\u005d\u000a");_ffcad .WriteString (_fe .Sprintf ("\u0009-\u0020S\u0064\u0072\u0054\u0065\u006dp\u006c\u0061t\u0065\u0020\u0025\u0076\u000a",_bfdag .SdrTemplate ));
_ffcad .WriteString (_fe .Sprintf ("\u0009\u002d\u0020\u0053\u0064\u0054\u0065\u006d\u0070\u006c\u0061\u0074e\u0020\u0025\u0076\u000a",_bfdag .SdTemplate ));_ffcad .WriteString (_fe .Sprintf ("\u0009\u002d\u0020\u0069\u0073\u0043\u006f\u0064\u0069\u006eg\u0043\u006f\u006e\u0074\u0065\u0078\u0074R\u0065\u0074\u0061\u0069\u006e\u0065\u0064\u0020\u0025\u0076\u000a",_bfdag ._fdae ));
_ffcad .WriteString (_fe .Sprintf ("\u0009\u002d\u0020\u0069\u0073\u0043\u006f\u0064\u0069\u006e\u0067C\u006f\u006e\u0074\u0065\u0078\u0074\u0055\u0073\u0065\u0064 \u0025\u0076\u000a",_bfdag ._cggf ));_ffcad .WriteString (_fe .Sprintf ("\u0009\u002d\u0020\u0053\u0064\u0048u\u0066\u0066\u0041\u0067\u0067\u0049\u006e\u0073\u0074\u0061\u006e\u0063\u0065S\u0065\u006c\u0065\u0063\u0074\u0069\u006fn\u0020\u0025\u0076\u000a",_bfdag .SdHuffAggInstanceSelection ));
_ffcad .WriteString (_fe .Sprintf ("\u0009\u002d\u0020\u0053d\u0048\u0075\u0066\u0066\u0042\u004d\u0053\u0069\u007a\u0065S\u0065l\u0065\u0063\u0074\u0069\u006f\u006e\u0020%\u0076\u000a",_bfdag .SdHuffBMSizeSelection ));_ffcad .WriteString (_fe .Sprintf ("\u0009\u002d\u0020\u0053\u0064\u0048u\u0066\u0066\u0044\u0065\u0063\u006f\u0064\u0065\u0057\u0069\u0064\u0074\u0068S\u0065\u006c\u0065\u0063\u0074\u0069\u006fn\u0020\u0025\u0076\u000a",_bfdag .SdHuffDecodeWidthSelection ));
_ffcad .WriteString (_fe .Sprintf ("\u0009\u002d\u0020Sd\u0048\u0075\u0066\u0066\u0044\u0065\u0063\u006f\u0064e\u0048e\u0069g\u0068t\u0053\u0065\u006c\u0065\u0063\u0074\u0069\u006f\u006e\u0020\u0025\u0076\u000a",_bfdag .SdHuffDecodeHeightSelection ));_ffcad .WriteString (_fe .Sprintf ("\u0009\u002d\u0020U\u0073\u0065\u0052\u0065f\u0069\u006e\u0065\u006d\u0065\u006e\u0074A\u0067\u0067\u0072\u0065\u0067\u0061\u0074\u0069\u006f\u006e\u0020\u0025\u0076\u000a",_bfdag .UseRefinementAggregation ));
_ffcad .WriteString (_fe .Sprintf ("\u0009\u002d\u0020is\u0048\u0075\u0066\u0066\u006d\u0061\u006e\u0045\u006e\u0063\u006f\u0064\u0065\u0064\u0020\u0025\u0076\u000a",_bfdag .IsHuffmanEncoded ));_ffcad .WriteString (_fe .Sprintf ("\u0009\u002d\u0020S\u0064\u0041\u0054\u0058\u0020\u0025\u0076\u000a",_bfdag .SdATX ));
_ffcad .WriteString (_fe .Sprintf ("\u0009\u002d\u0020S\u0064\u0041\u0054\u0059\u0020\u0025\u0076\u000a",_bfdag .SdATY ));_ffcad .WriteString (_fe .Sprintf ("\u0009\u002d\u0020\u0053\u0064\u0072\u0041\u0054\u0058\u0020\u0025\u0076\u000a",_bfdag .SdrATX ));
_ffcad .WriteString (_fe .Sprintf ("\u0009\u002d\u0020\u0053\u0064\u0072\u0041\u0054\u0059\u0020\u0025\u0076\u000a",_bfdag .SdrATY ));_ffcad .WriteString (_fe .Sprintf ("\u0009\u002d\u0020\u004e\u0075\u006d\u0062\u0065\u0072\u004ff\u0045\u0078\u0070\u006f\u0072\u0074\u0065d\u0053\u0079\u006d\u0062\u006f\u006c\u0073\u0020\u0025\u0076\u000a",_bfdag .NumberOfExportedSymbols ));
_ffcad .WriteString (_fe .Sprintf ("\u0009-\u0020\u004e\u0075\u006db\u0065\u0072\u004f\u0066\u004ee\u0077S\u0079m\u0062\u006f\u006c\u0073\u0020\u0025\u0076\n",_bfdag .NumberOfNewSymbols ));_ffcad .WriteString (_fe .Sprintf ("\u0009\u002d\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u004ff\u0049\u006d\u0070\u006f\u0072\u0074\u0065d\u0053\u0079\u006d\u0062\u006f\u006c\u0073\u0020\u0025\u0076\u000a",_bfdag ._acfd ));
_ffcad .WriteString (_fe .Sprintf ("\u0009\u002d \u006e\u0075\u006d\u0062\u0065\u0072\u004f\u0066\u0044\u0065\u0063\u006f\u0064\u0065\u0064\u0053\u0079\u006d\u0062\u006f\u006c\u0073 %\u0076\u000a",_bfdag ._dddc ));return _ffcad .String ();};func (_fbfd *SymbolDictionary )addSymbol (_ggde Regioner )error {_ecfa ,_abbe :=_ggde .GetRegionBitmap ();
if _abbe !=nil {return _abbe ;};_fbfd ._bgff [_fbfd ._dddc ]=_ecfa ;_fbfd ._gafc =append (_fbfd ._gafc ,_ecfa );_eg .Log .Trace ("\u005b\u0053YM\u0042\u004f\u004c \u0044\u0049\u0043\u0054ION\u0041RY\u005d\u0020\u0041\u0064\u0064\u0065\u0064 s\u0079\u006d\u0062\u006f\u006c\u003a\u0020%\u0073",_ecfa );
return nil ;};func (_fd *GenericRefinementRegion )GetRegionBitmap ()(*_ea .Bitmap ,error ){var _adg error ;_eg .Log .Trace ("\u005b\u0047E\u004e\u0045\u0052\u0049\u0043\u002d\u0052\u0045\u0046\u002d\u0052\u0045\u0047\u0049\u004f\u004e\u005d\u0020\u0047\u0065\u0074\u0052\u0065\u0067\u0069\u006f\u006e\u0042\u0069\u0074\u006d\u0061\u0070\u0020\u0062\u0065\u0067\u0069\u006e\u0073\u002e\u002e\u002e");
defer func (){if _adg !=nil {_eg .Log .Trace ("[\u0047\u0045\u004e\u0045\u0052\u0049\u0043\u002d\u0052E\u0046\u002d\u0052\u0045\u0047\u0049\u004fN]\u0020\u0047\u0065\u0074R\u0065\u0067\u0069\u006f\u006e\u0042\u0069\u0074\u006dap\u0020\u0066a\u0069\u006c\u0065\u0064\u002e\u0020\u0025\u0076",_adg );
}else {_eg .Log .Trace ("\u005b\u0047E\u004e\u0045\u0052\u0049\u0043\u002d\u0052\u0045\u0046\u002d\u0052\u0045\u0047\u0049\u004f\u004e\u005d\u0020\u0047\u0065\u0074\u0052\u0065\u0067\u0069\u006f\u006e\u0042\u0069\u0074\u006d\u0061\u0070\u0020\u0066\u0069\u006e\u0069\u0073\u0068\u0065\u0064\u002e");
};}();if _fd .RegionBitmap !=nil {return _fd .RegionBitmap ,nil ;};_edd :=0;if _fd .ReferenceBitmap ==nil {_fd .ReferenceBitmap ,_adg =_fd .getGrReference ();if _adg !=nil {return nil ,_adg ;};};if _fd ._cc ==nil {_fd ._cc ,_adg =_ac .New (_fd ._cda );
if _adg !=nil {return nil ,_adg ;};};if _fd ._ege ==nil {_fd ._ege =_ac .NewStats (8192,1);};_fd .RegionBitmap =_ea .New (int (_fd .RegionInfo .BitmapWidth ),int (_fd .RegionInfo .BitmapHeight ));if _fd .TemplateID ==0{if _adg =_fd .updateOverride ();_adg !=nil {return nil ,_adg ;
};};_dgd :=(_fd .RegionBitmap .Width +7)&-8;var _dab int ;if _fd .IsTPGROn {_dab =int (-_fd .ReferenceDY )*_fd .ReferenceBitmap .RowStride ;};_ce :=_dab +1;for _dgb :=0;_dgb < _fd .RegionBitmap .Height ;_dgb ++{if _fd .IsTPGROn {_ga ,_afc :=_fd .decodeSLTP ();
if _afc !=nil {return nil ,_afc ;};_edd ^=_ga ;};if _edd ==0{_adg =_fd .decodeOptimized (_dgb ,_fd .RegionBitmap .Width ,_fd .RegionBitmap .RowStride ,_fd .ReferenceBitmap .RowStride ,_dgd ,_dab ,_ce );if _adg !=nil {return nil ,_adg ;};}else {_adg =_fd .decodeTypicalPredictedLine (_dgb ,_fd .RegionBitmap .Width ,_fd .RegionBitmap .RowStride ,_fd .ReferenceBitmap .RowStride ,_dgd ,_dab );
if _adg !=nil {return nil ,_adg ;};};};return _fd .RegionBitmap ,nil ;};func (_fcg *GenericRefinementRegion )decodeTypicalPredictedLineTemplate1 (_aaa ,_bae ,_fg ,_faca ,_cfa ,_eef ,_ebc ,_gecb ,_gg int )(_eeg error ){var (_feaf ,_gbe int ;_bf ,_ggf int ;
_edc ,_aaf int ;_bcb byte ;);if _aaa > 0{_bcb ,_eeg =_fcg .RegionBitmap .GetByte (_ebc -_fg );if _eeg !=nil {return _eeg ;};_bf =int (_bcb );};if _gecb > 0&&_gecb <=_fcg .ReferenceBitmap .Height {_bcb ,_eeg =_fcg .ReferenceBitmap .GetByte (_gg -_faca +_eef );
if _eeg !=nil {return _eeg ;};_ggf =int (_bcb )<<2;};if _gecb >=0&&_gecb < _fcg .ReferenceBitmap .Height {_bcb ,_eeg =_fcg .ReferenceBitmap .GetByte (_gg +_eef );if _eeg !=nil {return _eeg ;};_edc =int (_bcb );};if _gecb > -2&&_gecb < _fcg .ReferenceBitmap .Height -1{_bcb ,_eeg =_fcg .ReferenceBitmap .GetByte (_gg +_faca +_eef );
if _eeg !=nil {return _eeg ;};_aaf =int (_bcb );};_feaf =((_bf >>5)&0x6)|((_aaf >>2)&0x30)|(_edc &0xc0)|(_ggf &0x200);_gbe =((_aaf >>2)&0x70)|(_edc &0xc0)|(_ggf &0x700);var _fce int ;for _eag :=0;_eag < _cfa ;_eag =_fce {var (_bdf int ;_ecc int ;);_fce =_eag +8;
if _bdf =_bae -_eag ;_bdf > 8{_bdf =8;};_bff :=_fce < _bae ;_eddg :=_fce < _fcg .ReferenceBitmap .Width ;_aafa :=_eef +1;if _aaa > 0{_bcb =0;if _bff {_bcb ,_eeg =_fcg .RegionBitmap .GetByte (_ebc -_fg +1);if _eeg !=nil {return _eeg ;};};_bf =(_bf <<8)|int (_bcb );
};if _gecb > 0&&_gecb <=_fcg .ReferenceBitmap .Height {var _ged int ;if _eddg {_bcb ,_eeg =_fcg .ReferenceBitmap .GetByte (_gg -_faca +_aafa );if _eeg !=nil {return _eeg ;};_ged =int (_bcb )<<2;};_ggf =(_ggf <<8)|_ged ;};if _gecb >=0&&_gecb < _fcg .ReferenceBitmap .Height {_bcb =0;
if _eddg {_bcb ,_eeg =_fcg .ReferenceBitmap .GetByte (_gg +_aafa );if _eeg !=nil {return _eeg ;};};_edc =(_edc <<8)|int (_bcb );};if _gecb > -2&&_gecb < (_fcg .ReferenceBitmap .Height -1){_bcb =0;if _eddg {_bcb ,_eeg =_fcg .ReferenceBitmap .GetByte (_gg +_faca +_aafa );
if _eeg !=nil {return _eeg ;};};_aaf =(_aaf <<8)|int (_bcb );};for _cgf :=0;_cgf < _bdf ;_cgf ++{var _de int ;_ggc :=(_gbe >>4)&0x1ff;switch _ggc {case 0x1ff:_de =1;case 0x00:_de =0;default:_fcg ._ege .SetIndex (int32 (_feaf ));_de ,_eeg =_fcg ._cc .DecodeBit (_fcg ._ege );
if _eeg !=nil {return _eeg ;};};_afce :=uint (7-_cgf );_ecc |=_de <<_afce ;_feaf =((_feaf &0x0d6)<<1)|_de |(_bf >>_afce +5)&0x002|((_aaf >>_afce +2)&0x010)|((_edc >>_afce )&0x040)|((_ggf >>_afce )&0x200);_gbe =((_gbe &0xdb)<<1)|((_aaf >>_afce +2)&0x010)|((_edc >>_afce )&0x080)|((_ggf >>_afce )&0x400);
};_eeg =_fcg .RegionBitmap .SetByte (_ebc ,byte (_ecc ));if _eeg !=nil {return _eeg ;};_ebc ++;_gg ++;};return nil ;};func (_bgfe *PageInformationSegment )readRequiresAuxiliaryBuffer ()error {_aebaa ,_ddge :=_bgfe ._eceaf .ReadBit ();if _ddge !=nil {return _ddge ;
};if _aebaa ==1{_bgfe ._dbdbb =true ;};return nil ;};func (_eecb *PageInformationSegment )CombinationOperator ()_ea .CombinationOperator {return _eecb ._caad ;};func (_dag *HalftoneRegion )combineGrayscalePlanes (_dgfc []*_ea .Bitmap ,_eebc int )error {_fcbd :=0;
for _ecea :=0;_ecea < _dgfc [_eebc ].Height ;_ecea ++{for _fcab :=0;_fcab < _dgfc [_eebc ].Width ;_fcab +=8{_cae ,_gcbg :=_dgfc [_eebc +1].GetByte (_fcbd );if _gcbg !=nil {return _gcbg ;};_acde ,_gcbg :=_dgfc [_eebc ].GetByte (_fcbd );if _gcbg !=nil {return _gcbg ;
};_gcbg =_dgfc [_eebc ].SetByte (_fcbd ,_ea .CombineBytes (_acde ,_cae ,_ea .CmbOpXor ));if _gcbg !=nil {return _gcbg ;};_fcbd ++;};};return nil ;};func (_fde *GenericRefinementRegion )getGrReference ()(*_ea .Bitmap ,error ){segments :=_fde ._ba .RTSegments ;
if len (segments )==0{return nil ,_af .New ("\u0052\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0064\u0020\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u0020\u006e\u006f\u0074\u0020\u0065\u0078is\u0074\u0073");};_cfb ,_gc :=segments [0].GetSegmentData ();
if _gc !=nil {return nil ,_gc ;};_bcf ,_fbb :=_cfb .(Regioner );if !_fbb {return nil ,_fe .Errorf ("\u0072\u0065\u0066\u0065\u0072r\u0065\u0064\u0020\u0074\u006f\u0020\u0053\u0065\u0067\u006d\u0065\u006e\u0074 \u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0052\u0065\u0067\u0069\u006f\u006e\u0065\u0072\u003a\u0020\u0025\u0054",_cfb );
};return _bcf .GetRegionBitmap ();};func (_gaef *SymbolDictionary )setCodingStatistics ()error {if _gaef ._afca ==nil {_gaef ._afca =_ac .NewStats (512,1);};if _gaef ._eefb ==nil {_gaef ._eefb =_ac .NewStats (512,1);};if _gaef ._cddc ==nil {_gaef ._cddc =_ac .NewStats (512,1);
};if _gaef ._cafa ==nil {_gaef ._cafa =_ac .NewStats (512,1);};if _gaef ._fbd ==nil {_gaef ._fbd =_ac .NewStats (512,1);};if _gaef .UseRefinementAggregation &&_gaef ._agae ==nil {_gaef ._agae =_ac .NewStats (1<<uint (_gaef ._abda ),1);_gaef ._dafe =_ac .NewStats (512,1);
_gaef ._gcbb =_ac .NewStats (512,1);};if _gaef ._bfde ==nil {_gaef ._bfde =_ac .NewStats (65536,1);};if _gaef ._adgg ==nil {var _fggg error ;_gaef ._adgg ,_fggg =_ac .New (_gaef ._degd );if _fggg !=nil {return _fggg ;};};return nil ;};func (_dgbde *PatternDictionary )readIsMMREncoded ()error {_ggef ,_bbcf :=_dgbde ._fed .ReadBit ();
if _bbcf !=nil {return _bbcf ;};if _ggef !=0{_dgbde .IsMMREncoded =true ;};return nil ;};func (_ag *GenericRefinementRegion )Init (header *Header ,r *_fc .Reader )error {_ag ._ba =header ;_ag ._cda =r ;_ag .RegionInfo =NewRegionSegment (r );return _ag .parseHeader ();
};func (_gceb *HalftoneRegion )grayScaleDecoding (_bbbb int )([][]int ,error ){var (_bffb []int8 ;_ebb []int8 ;);if !_gceb .IsMMREncoded {_bffb =make ([]int8 ,4);_ebb =make ([]int8 ,4);if _gceb .HTemplate <=1{_bffb [0]=3;}else if _gceb .HTemplate >=2{_bffb [0]=2;
};_ebb [0]=-1;_bffb [1]=-3;_ebb [1]=-1;_bffb [2]=2;_ebb [2]=-2;_bffb [3]=-2;_ebb [3]=-2;};_fgff :=make ([]*_ea .Bitmap ,_bbbb );_fdeb :=NewGenericRegion (_gceb ._ddd );_fdeb .setParametersMMR (_gceb .IsMMREncoded ,_gceb .DataOffset ,_gceb .DataLength ,_gceb .HGridHeight ,_gceb .HGridWidth ,_gceb .HTemplate ,false ,_gceb .HSkipEnabled ,_bffb ,_ebb );
_bbcd :=_bbbb -1;var _afa error ;_fgff [_bbcd ],_afa =_fdeb .GetRegionBitmap ();if _afa !=nil {return nil ,_afa ;};for _bbcd > 0{_bbcd --;_fdeb .Bitmap =nil ;_fgff [_bbcd ],_afa =_fdeb .GetRegionBitmap ();if _afa !=nil {return nil ,_afa ;};if _afa =_gceb .combineGrayscalePlanes (_fgff ,_bbcd );
_afa !=nil {return nil ,_afa ;};};return _gceb .computeGrayScalePlanes (_fgff ,_bbbb );};func (_ffc *GenericRegion )computeSegmentDataStructure ()error {_ffc .DataOffset =_ffc ._dcd .AbsolutePosition ();_ffc .DataHeaderLength =_ffc .DataOffset -_ffc .DataHeaderOffset ;
_ffc .DataLength =int64 (_ffc ._dcd .AbsoluteLength ())-_ffc .DataHeaderLength ;return nil ;};func (_fffg *SymbolDictionary )encodeATFlags (_eaga _fc .BinaryWriter )(_gbbc int ,_cdcd error ){const _afcef ="\u0065\u006e\u0063\u006f\u0064\u0065\u0041\u0054\u0046\u006c\u0061\u0067\u0073";
if _fffg .IsHuffmanEncoded ||_fffg .SdTemplate !=0{return 0,nil ;};_eddc :=4;if _fffg .SdTemplate !=0{_eddc =1;};for _daaa :=0;_daaa < _eddc ;_daaa ++{if _cdcd =_eaga .WriteByte (byte (_fffg .SdATX [_daaa ]));_cdcd !=nil {return _gbbc ,_g .Wrapf (_cdcd ,_afcef ,"\u0053d\u0041\u0054\u0058\u005b\u0025\u0064]",_daaa );
};_gbbc ++;if _cdcd =_eaga .WriteByte (byte (_fffg .SdATY [_daaa ]));_cdcd !=nil {return _gbbc ,_g .Wrapf (_cdcd ,_afcef ,"\u0053d\u0041\u0054\u0059\u005b\u0025\u0064]",_daaa );};_gbbc ++;};return _gbbc ,nil ;};func (_bfec *Header )readSegmentDataLength (_eabe *_fc .Reader )(_fcc error ){_bfec .SegmentDataLength ,_fcc =_eabe .ReadBits (32);
if _fcc !=nil {return _fcc ;};_bfec .SegmentDataLength &=_e .MaxInt32 ;return nil ;};func (_decd *TableSegment )HtRS ()int32 {return _decd ._fgcg };func (_gcg *HalftoneRegion )GetRegionBitmap ()(*_ea .Bitmap ,error ){if _gcg .HalftoneRegionBitmap !=nil {return _gcg .HalftoneRegionBitmap ,nil ;
};var _gebg error ;_gcg .HalftoneRegionBitmap =_ea .New (int (_gcg .RegionSegment .BitmapWidth ),int (_gcg .RegionSegment .BitmapHeight ));if _gcg .Patterns ==nil ||(_gcg .Patterns !=nil &&len (_gcg .Patterns )==0){_gcg .Patterns ,_gebg =_gcg .GetPatterns ();
if _gebg !=nil {return nil ,_gebg ;};};if _gcg .HDefaultPixel ==1{_gcg .HalftoneRegionBitmap .SetDefaultPixel ();};_fddd :=_e .Ceil (_e .Log (float64 (len (_gcg .Patterns )))/_e .Log (2));_egdg :=int (_fddd );var _def [][]int ;_def ,_gebg =_gcg .grayScaleDecoding (_egdg );
if _gebg !=nil {return nil ,_gebg ;};if _gebg =_gcg .renderPattern (_def );_gebg !=nil {return nil ,_gebg ;};return _gcg .HalftoneRegionBitmap ,nil ;};type OrganizationType uint8 ;func (_gdbgb *SymbolDictionary )decodeAggregate (_gaeb ,_bgcb uint32 )error {var (_fcfd int64 ;
_ggfe error ;);if _gdbgb .IsHuffmanEncoded {_fcfd ,_ggfe =_gdbgb .huffDecodeRefAggNInst ();if _ggfe !=nil {return _ggfe ;};}else {_afga ,_aeae :=_gdbgb ._adgg .DecodeInt (_gdbgb ._cafa );if _aeae !=nil {return _aeae ;};_fcfd =int64 (_afga );};if _fcfd > 1{return _gdbgb .decodeThroughTextRegion (_gaeb ,_bgcb ,uint32 (_fcfd ));
}else if _fcfd ==1{return _gdbgb .decodeRefinedSymbol (_gaeb ,_bgcb );};return nil ;};func (_gbf *RegionSegment )String ()string {_efe :=&_cf .Builder {};_efe .WriteString ("\u0009[\u0052E\u0047\u0049\u004f\u004e\u0020S\u0045\u0047M\u0045\u004e\u0054\u005d\u000a");
_efe .WriteString (_fe .Sprintf ("\t\u0009\u002d\u0020\u0042\u0069\u0074m\u0061\u0070\u0020\u0028\u0077\u0069d\u0074\u0068\u002c\u0020\u0068\u0065\u0069g\u0068\u0074\u0029\u0020\u005b\u0025\u0064\u0078\u0025\u0064]\u000a",_gbf .BitmapWidth ,_gbf .BitmapHeight ));
_efe .WriteString (_fe .Sprintf ("\u0009\u0009\u002d\u0020L\u006f\u0063\u0061\u0074\u0069\u006f\u006e\u0020\u0028\u0078,\u0079)\u003a\u0020\u005b\u0025\u0064\u002c\u0025d\u005d\u000a",_gbf .XLocation ,_gbf .YLocation ));_efe .WriteString (_fe .Sprintf ("\t\u0009\u002d\u0020\u0043\u006f\u006db\u0069\u006e\u0061\u0074\u0069\u006f\u006e\u004f\u0070e\u0072\u0061\u0074o\u0072:\u0020\u0025\u0073",_gbf .CombinaionOperator ));
return _efe .String ();};func (_edgc *PageInformationSegment )readIsLossless ()error {_bcbba ,_gebga :=_edgc ._eceaf .ReadBit ();if _gebga !=nil {return _gebga ;};if _bcbba ==1{_edgc .IsLossless =true ;};return nil ;};var _ _ad .BasicTabler =&TableSegment {};
func (_fadg *GenericRegion )decodeTemplate2 (_cfcf ,_bcg ,_gdb int ,_ffge ,_ddcf int )(_agc error ){const _ebcb ="\u0064e\u0063o\u0064\u0065\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0032";var (_afcf ,_dcc int ;_bee ,_adac int ;_cbe byte ;_bgca ,_bec int ;
);if _cfcf >=1{_cbe ,_agc =_fadg .Bitmap .GetByte (_ddcf );if _agc !=nil {return _g .Wrap (_agc ,_ebcb ,"\u006ci\u006ee\u004e\u0075\u006d\u0062\u0065\u0072\u0020\u003e\u003d\u0020\u0031");};_bee =int (_cbe );};if _cfcf >=2{_cbe ,_agc =_fadg .Bitmap .GetByte (_ddcf -_fadg .Bitmap .RowStride );
if _agc !=nil {return _g .Wrap (_agc ,_ebcb ,"\u006ci\u006ee\u004e\u0075\u006d\u0062\u0065\u0072\u0020\u003e\u003d\u0020\u0032");};_adac =int (_cbe )<<4;};_afcf =(_bee >>3&0x7c)|(_adac >>3&0x380);for _cgb :=0;_cgb < _gdb ;_cgb =_bgca {var (_dce byte ;_aege int ;
);_bgca =_cgb +8;if _beb :=_bcg -_cgb ;_beb > 8{_aege =8;}else {_aege =_beb ;};if _cfcf > 0{_bee <<=8;if _bgca < _bcg {_cbe ,_agc =_fadg .Bitmap .GetByte (_ddcf +1);if _agc !=nil {return _g .Wrap (_agc ,_ebcb ,"\u006c\u0069\u006e\u0065\u004e\u0075\u006d\u0062\u0065r\u0020\u003e\u0020\u0030");
};_bee |=int (_cbe );};};if _cfcf > 1{_adac <<=8;if _bgca < _bcg {_cbe ,_agc =_fadg .Bitmap .GetByte (_ddcf -_fadg .Bitmap .RowStride +1);if _agc !=nil {return _g .Wrap (_agc ,_ebcb ,"\u006c\u0069\u006e\u0065\u004e\u0075\u006d\u0062\u0065r\u0020\u003e\u0020\u0031");
};_adac |=int (_cbe )<<4;};};for _fbca :=0;_fbca < _aege ;_fbca ++{_cfgb :=uint (10-_fbca );if _fadg ._edg {_dcc =_fadg .overrideAtTemplate2 (_afcf ,_cgb +_fbca ,_cfcf ,int (_dce ),_fbca );_fadg ._gefg .SetIndex (int32 (_dcc ));}else {_fadg ._gefg .SetIndex (int32 (_afcf ));
};_bec ,_agc =_fadg ._cff .DecodeBit (_fadg ._gefg );if _agc !=nil {return _g .Wrap (_agc ,_ebcb ,"");};_dce |=byte (_bec <<uint (7-_fbca ));_afcf =((_afcf &0x1bd)<<1)|_bec |((_bee >>_cfgb )&0x4)|((_adac >>_cfgb )&0x80);};if _bccc :=_fadg .Bitmap .SetByte (_ffge ,_dce );
_bccc !=nil {return _g .Wrap (_bccc ,_ebcb ,"");};_ffge ++;_ddcf ++;};return nil ;};type EndOfStripe struct{_dg *_fc .Reader ;_bd int ;};func (_ecca *SymbolDictionary )setInSyms ()error {if _ecca .Header .RTSegments !=nil {return _ecca .retrieveImportSymbols ();
};_ecca ._eggc =make ([]*_ea .Bitmap ,0);return nil ;};type TableSegment struct{_gbeeb *_fc .Reader ;_bfca int32 ;_abeg int32 ;_fgcg int32 ;_gfdfa int32 ;_cbdd int32 ;};func (_adb *SymbolDictionary )huffDecodeBmSize ()(int64 ,error ){if _adb ._gae ==nil {var (_bbag int ;
_aceba error ;);if _adb .SdHuffDecodeHeightSelection ==3{_bbag ++;};if _adb .SdHuffDecodeWidthSelection ==3{_bbag ++;};_adb ._gae ,_aceba =_adb .getUserTable (_bbag );if _aceba !=nil {return 0,_aceba ;};};return _adb ._gae .Decode (_adb ._degd );};func (_eeeg *TextRegion )parseHeader ()error {var _fggd error ;
_eg .Log .Trace ("\u005b\u0054E\u0058\u0054\u0020\u0052E\u0047\u0049O\u004e\u005d\u005b\u0050\u0041\u0052\u0053\u0045-\u0048\u0045\u0041\u0044\u0045\u0052\u005d\u0020\u0062\u0065\u0067\u0069n\u0073\u002e\u002e\u002e");defer func (){if _fggd !=nil {_eg .Log .Trace ("\u005b\u0054\u0045\u0058\u0054\u0020\u0052\u0045\u0047\u0049\u004f\u004e\u005d\u005b\u0050\u0041\u0052\u0053\u0045\u002d\u0048\u0045\u0041\u0044E\u0052\u005d\u0020\u0066\u0061i\u006c\u0065d\u002e\u0020\u0025\u0076",_fggd );
}else {_eg .Log .Trace ("\u005b\u0054E\u0058\u0054\u0020\u0052E\u0047\u0049O\u004e\u005d\u005b\u0050\u0041\u0052\u0053\u0045-\u0048\u0045\u0041\u0044\u0045\u0052\u005d\u0020\u0066\u0069\u006e\u0069s\u0068\u0065\u0064\u002e");};}();if _fggd =_eeeg .RegionInfo .parseHeader ();
_fggd !=nil {return _fggd ;};if _fggd =_eeeg .readRegionFlags ();_fggd !=nil {return _fggd ;};if _eeeg .IsHuffmanEncoded {if _fggd =_eeeg .readHuffmanFlags ();_fggd !=nil {return _fggd ;};};if _fggd =_eeeg .readUseRefinement ();_fggd !=nil {return _fggd ;
};if _fggd =_eeeg .readAmountOfSymbolInstances ();_fggd !=nil {return _fggd ;};if _fggd =_eeeg .getSymbols ();_fggd !=nil {return _fggd ;};if _fggd =_eeeg .computeSymbolCodeLength ();_fggd !=nil {return _fggd ;};if _fggd =_eeeg .checkInput ();_fggd !=nil {return _fggd ;
};_eg .Log .Trace ("\u0025\u0073",_eeeg .String ());return nil ;};func (_afcff *SymbolDictionary )setRetainedCodingContexts (_eadf *SymbolDictionary ){_afcff ._adgg =_eadf ._adgg ;_afcff .IsHuffmanEncoded =_eadf .IsHuffmanEncoded ;_afcff .UseRefinementAggregation =_eadf .UseRefinementAggregation ;
_afcff .SdTemplate =_eadf .SdTemplate ;_afcff .SdrTemplate =_eadf .SdrTemplate ;_afcff .SdATX =_eadf .SdATX ;_afcff .SdATY =_eadf .SdATY ;_afcff .SdrATX =_eadf .SdrATX ;_afcff .SdrATY =_eadf .SdrATY ;_afcff ._bfde =_eadf ._bfde ;};func (_gfgf *TextRegion )getSymbols ()error {if _gfgf .Header .RTSegments !=nil {return _gfgf .initSymbols ();
};return nil ;};func (_ecec *PageInformationSegment )readDefaultPixelValue ()error {_dfda ,_ggeg :=_ecec ._eceaf .ReadBit ();if _ggeg !=nil {return _ggeg ;};_ecec .DefaultPixelValue =uint8 (_dfda &0xf);return nil ;};func (_abdb *HalftoneRegion )renderPattern (_bga [][]int )(_eaab error ){var _dbb ,_efca int ;
for _bfbc :=0;_bfbc < int (_abdb .HGridHeight );_bfbc ++{for _gccac :=0;_gccac < int (_abdb .HGridWidth );_gccac ++{_dbb =_abdb .computeX (_bfbc ,_gccac );_efca =_abdb .computeY (_bfbc ,_gccac );_bag :=_abdb .Patterns [_bga [_bfbc ][_gccac ]];if _eaab =_ea .Blit (_bag ,_abdb .HalftoneRegionBitmap ,_dbb +int (_abdb .HGridX ),_efca +int (_abdb .HGridY ),_abdb .CombinationOperator );
_eaab !=nil {return _eaab ;};};};return nil ;};var _ templater =&template0 {};type GenericRegion struct{_dcd *_fc .Reader ;DataHeaderOffset int64 ;DataHeaderLength int64 ;DataOffset int64 ;DataLength int64 ;RegionSegment *RegionSegment ;UseExtTemplates bool ;
IsTPGDon bool ;GBTemplate byte ;IsMMREncoded bool ;UseMMR bool ;GBAtX []int8 ;GBAtY []int8 ;GBAtOverride []bool ;_edg bool ;Bitmap *_ea .Bitmap ;_cff *_ac .Decoder ;_gefg *_ac .DecoderStats ;_fgfe *_fa .Decoder ;};func (_fdca *TextRegion )readUseRefinement ()error {if !_fdca .UseRefinement ||_fdca .SbrTemplate !=0{return nil ;
};var (_edfb byte ;_bfbdg error ;);_fdca .SbrATX =make ([]int8 ,2);_fdca .SbrATY =make ([]int8 ,2);_edfb ,_bfbdg =_fdca ._afda .ReadByte ();if _bfbdg !=nil {return _bfbdg ;};_fdca .SbrATX [0]=int8 (_edfb );_edfb ,_bfbdg =_fdca ._afda .ReadByte ();if _bfbdg !=nil {return _bfbdg ;
};_fdca .SbrATY [0]=int8 (_edfb );_edfb ,_bfbdg =_fdca ._afda .ReadByte ();if _bfbdg !=nil {return _bfbdg ;};_fdca .SbrATX [1]=int8 (_edfb );_edfb ,_bfbdg =_fdca ._afda .ReadByte ();if _bfbdg !=nil {return _bfbdg ;};_fdca .SbrATY [1]=int8 (_edfb );return nil ;
};func (_fdc *SymbolDictionary )decodeThroughTextRegion (_ffda ,_bdcb ,_eda uint32 )error {if _fdc ._ccdd ==nil {_fdc ._ccdd =_dgffc (_fdc ._degd ,nil );_fdc ._ccdd .setContexts (_fdc ._bfde ,_ac .NewStats (512,1),_ac .NewStats (512,1),_ac .NewStats (512,1),_ac .NewStats (512,1),_fdc ._agae ,_ac .NewStats (512,1),_ac .NewStats (512,1),_ac .NewStats (512,1),_ac .NewStats (512,1));
};if _bcfcc :=_fdc .setSymbolsArray ();_bcfcc !=nil {return _bcfcc ;};_fdc ._ccdd .setParameters (_fdc ._adgg ,_fdc .IsHuffmanEncoded ,true ,_ffda ,_bdcb ,_eda ,1,_fdc ._acfd +_fdc ._dddc ,0,0,0,1,0,0,0,0,0,0,0,0,0,_fdc .SdrTemplate ,_fdc .SdrATX ,_fdc .SdrATY ,_fdc ._gafc ,_fdc ._abda );
return _fdc .addSymbol (_fdc ._ccdd );};func (_aeba *HalftoneRegion )computeGrayScalePlanes (_dbdb []*_ea .Bitmap ,_ceff int )([][]int ,error ){_beef :=make ([][]int ,_aeba .HGridHeight );for _eefe :=0;_eefe < len (_beef );_eefe ++{_beef [_eefe ]=make ([]int ,_aeba .HGridWidth );
};for _bce :=0;_bce < int (_aeba .HGridHeight );_bce ++{for _ccf :=0;_ccf < int (_aeba .HGridWidth );_ccf +=8{var _ffde int ;if _afgd :=int (_aeba .HGridWidth )-_ccf ;_afgd > 8{_ffde =8;}else {_ffde =_afgd ;};_affa :=_dbdb [0].GetByteIndex (_ccf ,_bce );
for _cgfb :=0;_cgfb < _ffde ;_cgfb ++{_fgge :=_cgfb +_ccf ;_beef [_bce ][_fgge ]=0;for _aedff :=0;_aedff < _ceff ;_aedff ++{_gfeg ,_fgfg :=_dbdb [_aedff ].GetByte (_affa );if _fgfg !=nil {return nil ,_fgfg ;};_cfdf :=_gfeg >>uint (7-_fgge &7);_gebd :=_cfdf &1;
_agfa :=1<<uint (_aedff );_eaed :=int (_gebd )*_agfa ;_beef [_bce ][_fgge ]+=_eaed ;};};};};return _beef ,nil ;};func (_beae *SymbolDictionary )setRefinementAtPixels ()error {if !_beae .UseRefinementAggregation ||_beae .SdrTemplate !=0{return nil ;};if _cecd :=_beae .readRefinementAtPixels (2);
_cecd !=nil {return _cecd ;};return nil ;};func (_gdc *TextRegion )decodeDfs ()(int64 ,error ){if _gdc .IsHuffmanEncoded {if _gdc .SbHuffFS ==3{if _gdc ._bfdc ==nil {var _dede error ;_gdc ._bfdc ,_dede =_gdc .getUserTable (0);if _dede !=nil {return 0,_dede ;
};};return _gdc ._bfdc .Decode (_gdc ._afda );};_aebgb ,_bfcc :=_ad .GetStandardTable (6+int (_gdc .SbHuffFS ));if _bfcc !=nil {return 0,_bfcc ;};return _aebgb .Decode (_gdc ._afda );};_cbca ,_adee :=_gdc ._gagc .DecodeInt (_gdc ._gffg );if _adee !=nil {return 0,_adee ;
};return int64 (_cbca ),nil ;};func (_gedf *PatternDictionary )extractPatterns (_aeggc *_ea .Bitmap )error {var _gedc int ;_gaca :=make ([]*_ea .Bitmap ,_gedf .GrayMax +1);for _gedc <=int (_gedf .GrayMax ){_fddc :=int (_gedf .HdpWidth )*_gedc ;_ecad :=_a .Rect (_fddc ,0,_fddc +int (_gedf .HdpWidth ),int (_gedf .HdpHeight ));
_daga ,_eaaa :=_ea .Extract (_ecad ,_aeggc );if _eaaa !=nil {return _eaaa ;};_gaca [_gedc ]=_daga ;_gedc ++;};_gedf .Patterns =_gaca ;return nil ;};func (_gfd *GenericRegion )decodeSLTP ()(int ,error ){switch _gfd .GBTemplate {case 0:_gfd ._gefg .SetIndex (0x9B25);
case 1:_gfd ._gefg .SetIndex (0x795);case 2:_gfd ._gefg .SetIndex (0xE5);case 3:_gfd ._gefg .SetIndex (0x195);};return _gfd ._cff .DecodeBit (_gfd ._gefg );};func (_gebf *TextRegion )getUserTable (_eaff int )(_ad .Tabler ,error ){const _eagf ="\u0067\u0065\u0074U\u0073\u0065\u0072\u0054\u0061\u0062\u006c\u0065";
var _fggcc int ;for _ ,_eafga :=range _gebf .Header .RTSegments {if _eafga .Type ==53{if _fggcc ==_eaff {_bfdg ,_edfc :=_eafga .GetSegmentData ();if _edfc !=nil {return nil ,_edfc ;};_gddcb ,_ccge :=_bfdg .(*TableSegment );if !_ccge {_eg .Log .Debug (_fe .Sprintf ("\u0073\u0065\u0067\u006d\u0065\u006e\u0074 \u0077\u0069\u0074h\u0020\u0054\u0079p\u0065\u00205\u0033\u0020\u002d\u0020\u0061\u006ed\u0020in\u0064\u0065\u0078\u003a\u0020\u0025\u0064\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0054\u0061\u0062\u006c\u0065\u0053\u0065\u0067\u006d\u0065\u006e\u0074",_eafga .SegmentNumber ));
return nil ,_g .Error (_eagf ,"\u0073\u0065\u0067\u006d\u0065\u006e\u0074 \u0077\u0069\u0074h\u0020\u0054\u0079\u0070e\u0020\u0035\u0033\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u002a\u0054\u0061\u0062\u006c\u0065\u0053\u0065\u0067\u006d\u0065\u006e\u0074");
};return _ad .NewEncodedTable (_gddcb );};_fggcc ++;};};return nil ,nil ;};func (_ffgd *Header )writeSegmentPageAssociation (_gafe _fc .BinaryWriter )(_ffca int ,_abef error ){const _daee ="w\u0072\u0069\u0074\u0065\u0053\u0065g\u006d\u0065\u006e\u0074\u0050\u0061\u0067\u0065\u0041s\u0073\u006f\u0063i\u0061t\u0069\u006f\u006e";
if _ffgd .pageSize ()!=4{if _abef =_gafe .WriteByte (byte (_ffgd .PageAssociation ));_abef !=nil {return 0,_g .Wrap (_abef ,_daee ,"\u0070\u0061\u0067\u0065\u0053\u0069\u007a\u0065\u0020\u0021\u003d\u0020\u0034");};return 1,nil ;};_cbde :=make ([]byte ,4);
_f .BigEndian .PutUint32 (_cbde ,uint32 (_ffgd .PageAssociation ));if _ffca ,_abef =_gafe .Write (_cbde );_abef !=nil {return 0,_g .Wrap (_abef ,_daee ,"\u0034 \u0062y\u0074\u0065\u0020\u0070\u0061g\u0065\u0020n\u0075\u006d\u0062\u0065\u0072");};return _ffca ,nil ;
};func (_bfe *Header )readHeaderFlags ()error {const _bdfae ="\u0072e\u0061d\u0048\u0065\u0061\u0064\u0065\u0072\u0046\u006c\u0061\u0067\u0073";_dcec ,_efdf :=_bfe .Reader .ReadBit ();if _efdf !=nil {return _g .Wrap (_efdf ,_bdfae ,"r\u0065\u0074\u0061\u0069\u006e\u0020\u0066\u006c\u0061\u0067");
};if _dcec !=0{_bfe .RetainFlag =true ;};_dcec ,_efdf =_bfe .Reader .ReadBit ();if _efdf !=nil {return _g .Wrap (_efdf ,_bdfae ,"\u0070\u0061g\u0065\u0020\u0061s\u0073\u006f\u0063\u0069\u0061\u0074\u0069\u006f\u006e");};if _dcec !=0{_bfe .PageAssociationFieldSize =true ;
};_gfcd ,_efdf :=_bfe .Reader .ReadBits (6);if _efdf !=nil {return _g .Wrap (_efdf ,_bdfae ,"\u0073\u0065\u0067m\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065");};_bfe .Type =Type (int (_gfcd ));return nil ;};func (_ecba *GenericRegion )Encode (w _fc .BinaryWriter )(_bbd int ,_eab error ){const _fbf ="G\u0065n\u0065\u0072\u0069\u0063\u0052\u0065\u0067\u0069o\u006e\u002e\u0045\u006eco\u0064\u0065";
if _ecba .Bitmap ==nil {return 0,_g .Error (_fbf ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};_faab ,_eab :=_ecba .RegionSegment .Encode (w );if _eab !=nil {return 0,_g .Wrap (_eab ,_fbf ,"\u0052\u0065\u0067\u0069\u006f\u006e\u0053\u0065\u0067\u006d\u0065\u006e\u0074");
};_bbd +=_faab ;if _eab =w .SkipBits (4);_eab !=nil {return _bbd ,_g .Wrap (_eab ,_fbf ,"\u0073k\u0069p\u0020\u0072\u0065\u0073\u0065r\u0076\u0065d\u0020\u0062\u0069\u0074\u0073");};var _deb int ;if _ecba .IsTPGDon {_deb =1;};if _eab =w .WriteBit (_deb );
_eab !=nil {return _bbd ,_g .Wrap (_eab ,_fbf ,"\u0074\u0070\u0067\u0064\u006f\u006e");};_deb =0;if _eab =w .WriteBit (int (_ecba .GBTemplate >>1)&0x01);_eab !=nil {return _bbd ,_g .Wrap (_eab ,_fbf ,"f\u0069r\u0073\u0074\u0020\u0067\u0062\u0074\u0065\u006dp\u006c\u0061\u0074\u0065 b\u0069\u0074");
};if _eab =w .WriteBit (int (_ecba .GBTemplate )&0x01);_eab !=nil {return _bbd ,_g .Wrap (_eab ,_fbf ,"s\u0065\u0063\u006f\u006ed \u0067b\u0074\u0065\u006d\u0070\u006ca\u0074\u0065\u0020\u0062\u0069\u0074");};if _ecba .UseMMR {_deb =1;};if _eab =w .WriteBit (_deb );
_eab !=nil {return _bbd ,_g .Wrap (_eab ,_fbf ,"u\u0073\u0065\u0020\u004d\u004d\u0052\u0020\u0062\u0069\u0074");};_bbd ++;if _faab ,_eab =_ecba .writeGBAtPixels (w );_eab !=nil {return _bbd ,_g .Wrap (_eab ,_fbf ,"");};_bbd +=_faab ;_cdd :=_d .New ();if _eab =_cdd .EncodeBitmap (_ecba .Bitmap ,_ecba .IsTPGDon );
_eab !=nil {return _bbd ,_g .Wrap (_eab ,_fbf ,"");};_cdd .Final ();var _dabg int64 ;if _dabg ,_eab =_cdd .WriteTo (w );_eab !=nil {return _bbd ,_g .Wrap (_eab ,_fbf ,"");};_bbd +=int (_dabg );return _bbd ,nil ;};func (_ceab *GenericRegion )setOverrideFlag (_aegg int ){_ceab .GBAtOverride [_aegg ]=true ;
_ceab ._edg =true ;};func (_bc *EndOfStripe )Init (h *Header ,r *_fc .Reader )error {_bc ._dg =r ;return _bc .parseHeader ()};type TextRegion struct{_afda *_fc .Reader ;RegionInfo *RegionSegment ;SbrTemplate int8 ;SbDsOffset int8 ;DefaultPixel int8 ;CombinationOperator _ea .CombinationOperator ;
IsTransposed int8 ;ReferenceCorner int16 ;LogSBStrips int16 ;UseRefinement bool ;IsHuffmanEncoded bool ;SbHuffRSize int8 ;SbHuffRDY int8 ;SbHuffRDX int8 ;SbHuffRDHeight int8 ;SbHuffRDWidth int8 ;SbHuffDT int8 ;SbHuffDS int8 ;SbHuffFS int8 ;SbrATX []int8 ;
SbrATY []int8 ;NumberOfSymbolInstances uint32 ;_bgaad int64 ;SbStrips int8 ;NumberOfSymbols uint32 ;RegionBitmap *_ea .Bitmap ;Symbols []*_ea .Bitmap ;_gagc *_ac .Decoder ;_aafb *GenericRefinementRegion ;_bfcbad *_ac .DecoderStats ;_gffg *_ac .DecoderStats ;
_dgge *_ac .DecoderStats ;_fbgbf *_ac .DecoderStats ;_eddbfg *_ac .DecoderStats ;_efaaa *_ac .DecoderStats ;_agcc *_ac .DecoderStats ;_geeec *_ac .DecoderStats ;_eegfc *_ac .DecoderStats ;_eaeab *_ac .DecoderStats ;_dagb *_ac .DecoderStats ;_bage int8 ;
_aafg *_ad .FixedSizeTable ;Header *Header ;_bfdc _ad .Tabler ;_abbb _ad .Tabler ;_cbec _ad .Tabler ;_dacgd _ad .Tabler ;_agaa _ad .Tabler ;_faeb _ad .Tabler ;_dgag _ad .Tabler ;_bega _ad .Tabler ;_gfac ,_ceabb map[int ]int ;_cddab []int ;_gfbag *_ea .Points ;
_bccd *_ea .Bitmaps ;_dgfee *_fb .IntSlice ;_bfeb ,_fbgf int ;_eadd *_ea .Boxes ;};func (_geeeb *Header )writeSegmentNumber (_dfab _fc .BinaryWriter )(_egfb int ,_aag error ){_gadf :=make ([]byte ,4);_f .BigEndian .PutUint32 (_gadf ,_geeeb .SegmentNumber );
if _egfb ,_aag =_dfab .Write (_gadf );_aag !=nil {return 0,_g .Wrap (_aag ,"\u0048e\u0061\u0064\u0065\u0072.\u0077\u0072\u0069\u0074\u0065S\u0065g\u006de\u006e\u0074\u004e\u0075\u006d\u0062\u0065r","");};return _egfb ,nil ;};func (_efabg *SymbolDictionary )GetDictionary ()([]*_ea .Bitmap ,error ){_eg .Log .Trace ("\u005b\u0053\u0059\u004d\u0042\u004f\u004c-\u0044\u0049\u0043T\u0049\u004f\u004e\u0041R\u0059\u005d\u0020\u0047\u0065\u0074\u0044\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u0062\u0065\u0067\u0069\u006e\u0073\u002e\u002e\u002e");
defer func (){_eg .Log .Trace ("\u005b\u0053\u0059M\u0042\u004f\u004c\u002d\u0044\u0049\u0043\u0054\u0049\u004f\u004e\u0041\u0052\u0059\u005d\u0020\u0047\u0065\u0074\u0044\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079 \u0066\u0069\u006e\u0069\u0073\u0068\u0065\u0064");
_eg .Log .Trace ("\u005b\u0053Y\u004d\u0042\u004f\u004c\u002dD\u0049\u0043\u0054\u0049\u004fN\u0041\u0052\u0059\u005d\u0020\u0044\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u002e\u0020\u000a\u0045\u0078\u003a\u0020\u0027\u0025\u0073\u0027\u002c\u0020\u000a\u006e\u0065\u0077\u003a\u0027\u0025\u0073\u0027",_efabg ._ceda ,_efabg ._bgff );
}();if _efabg ._ceda ==nil {var _cdea error ;if _efabg .UseRefinementAggregation {_efabg ._abda =_efabg .getSbSymCodeLen ();};if !_efabg .IsHuffmanEncoded {if _cdea =_efabg .setCodingStatistics ();_cdea !=nil {return nil ,_cdea ;};};_efabg ._bgff =make ([]*_ea .Bitmap ,_efabg .NumberOfNewSymbols );
var _eggcb []int ;if _efabg .IsHuffmanEncoded &&!_efabg .UseRefinementAggregation {_eggcb =make ([]int ,_efabg .NumberOfNewSymbols );};if _cdea =_efabg .setSymbolsArray ();_cdea !=nil {return nil ,_cdea ;};var _cfcd ,_edef int64 ;_efabg ._dddc =0;for _efabg ._dddc < _efabg .NumberOfNewSymbols {_edef ,_cdea =_efabg .decodeHeightClassDeltaHeight ();
if _cdea !=nil {return nil ,_cdea ;};_cfcd +=_edef ;var _dbfde ,_efgbe uint32 ;_beec :=int64 (_efabg ._dddc );for {var _dfbg int64 ;_dfbg ,_cdea =_efabg .decodeDifferenceWidth ();if _af .Is (_cdea ,_b .ErrOOB ){break ;};if _cdea !=nil {return nil ,_cdea ;
};if _efabg ._dddc >=_efabg .NumberOfNewSymbols {break ;};_dbfde +=uint32 (_dfbg );_efgbe +=_dbfde ;if !_efabg .IsHuffmanEncoded ||_efabg .UseRefinementAggregation {if !_efabg .UseRefinementAggregation {_cdea =_efabg .decodeDirectlyThroughGenericRegion (_dbfde ,uint32 (_cfcd ));
if _cdea !=nil {return nil ,_cdea ;};}else {_cdea =_efabg .decodeAggregate (_dbfde ,uint32 (_cfcd ));if _cdea !=nil {return nil ,_cdea ;};};}else if _efabg .IsHuffmanEncoded &&!_efabg .UseRefinementAggregation {_eggcb [_efabg ._dddc ]=int (_dbfde );};_efabg ._dddc ++;
};if _efabg .IsHuffmanEncoded &&!_efabg .UseRefinementAggregation {var _bbdg int64 ;if _efabg .SdHuffBMSizeSelection ==0{var _bdgd _ad .Tabler ;_bdgd ,_cdea =_ad .GetStandardTable (1);if _cdea !=nil {return nil ,_cdea ;};_bbdg ,_cdea =_bdgd .Decode (_efabg ._degd );
if _cdea !=nil {return nil ,_cdea ;};}else {_bbdg ,_cdea =_efabg .huffDecodeBmSize ();if _cdea !=nil {return nil ,_cdea ;};};_efabg ._degd .Align ();var _cecfa *_ea .Bitmap ;_cecfa ,_cdea =_efabg .decodeHeightClassCollectiveBitmap (_bbdg ,uint32 (_cfcd ),_efgbe );
if _cdea !=nil {return nil ,_cdea ;};_cdea =_efabg .decodeHeightClassBitmap (_cecfa ,_beec ,int (_cfcd ),_eggcb );if _cdea !=nil {return nil ,_cdea ;};};};_eadg ,_cdea :=_efabg .getToExportFlags ();if _cdea !=nil {return nil ,_cdea ;};_efabg .setExportedSymbols (_eadg );
};return _efabg ._ceda ,nil ;};func (_gff *GenericRefinementRegion )overrideAtTemplate0 (_gedd ,_aef ,_eeb ,_ebd ,_bfaa int )int {if _gff ._dd [0]{_gedd &=0xfff7;if _gff .GrAtY [0]==0&&int (_gff .GrAtX [0])>=-_bfaa {_gedd |=(_ebd >>uint (7-(_bfaa +int (_gff .GrAtX [0])))&0x1)<<3;
}else {_gedd |=_gff .getPixel (_gff .RegionBitmap ,_aef +int (_gff .GrAtX [0]),_eeb +int (_gff .GrAtY [0]))<<3;};};if _gff ._dd [1]{_gedd &=0xefff;if _gff .GrAtY [1]==0&&int (_gff .GrAtX [1])>=-_bfaa {_gedd |=(_ebd >>uint (7-(_bfaa +int (_gff .GrAtX [1])))&0x1)<<12;
}else {_gedd |=_gff .getPixel (_gff .ReferenceBitmap ,_aef +int (_gff .GrAtX [1]),_eeb +int (_gff .GrAtY [1]));};};return _gedd ;};func (_ega *GenericRegion )setParameters (_eddbf bool ,_ede ,_aec int64 ,_aecb ,_bbf uint32 ){_ega .IsMMREncoded =_eddbf ;
_ega .DataOffset =_ede ;_ega .DataLength =_aec ;_ega .RegionSegment .BitmapHeight =_aecb ;_ega .RegionSegment .BitmapWidth =_bbf ;_ega ._fgfe =nil ;_ega .Bitmap =nil ;};func (_egbg *GenericRegion )overrideAtTemplate3 (_gecf ,_fbef ,_fbcc ,_eaa ,_egbc int )int {_gecf &=0x3EF;
if _egbg .GBAtY [0]==0&&_egbg .GBAtX [0]>=-int8 (_egbc ){_gecf |=(_eaa >>uint (7-(int8 (_egbc )+_egbg .GBAtX [0]))&0x1)<<4;}else {_gecf |=int (_egbg .getPixel (_fbef +int (_egbg .GBAtX [0]),_fbcc +int (_egbg .GBAtY [0])))<<4;};return _gecf ;};func (_agac *Header )readDataStartOffset (_geee *_fc .Reader ,_fecef OrganizationType ){if _fecef ==OSequential {_agac .SegmentDataStartOffset =uint64 (_geee .AbsolutePosition ());
};};func (_begd *GenericRegion )decodeTemplate0a (_dgg ,_gba ,_dfbe int ,_eaege ,_bbb int )(_gegg error ){const _gcca ="\u0064\u0065c\u006f\u0064\u0065T\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0030\u0061";var (_dfdd ,_dcde int ;_gada ,_eed int ;_fggc byte ;
_gaa int ;);if _dgg >=1{_fggc ,_gegg =_begd .Bitmap .GetByte (_bbb );if _gegg !=nil {return _g .Wrap (_gegg ,_gcca ,"\u006ci\u006e\u0065\u0020\u003e\u003d\u00201");};_gada =int (_fggc );};if _dgg >=2{_fggc ,_gegg =_begd .Bitmap .GetByte (_bbb -_begd .Bitmap .RowStride );
if _gegg !=nil {return _g .Wrap (_gegg ,_gcca ,"\u006ci\u006e\u0065\u0020\u003e\u003d\u00202");};_eed =int (_fggc )<<6;};_dfdd =(_gada &0xf0)|(_eed &0x3800);for _gaac :=0;_gaac < _dfbe ;_gaac =_gaa {var (_eff byte ;_cbfc int ;);_gaa =_gaac +8;if _gcf :=_gba -_gaac ;
_gcf > 8{_cbfc =8;}else {_cbfc =_gcf ;};if _dgg > 0{_gada <<=8;if _gaa < _gba {_fggc ,_gegg =_begd .Bitmap .GetByte (_bbb +1);if _gegg !=nil {return _g .Wrap (_gegg ,_gcca ,"\u006c\u0069\u006e\u0065\u0020\u003e\u0020\u0030");};_gada |=int (_fggc );};};
if _dgg > 1{_gabf :=_bbb -_begd .Bitmap .RowStride +1;_eed <<=8;if _gaa < _gba {_fggc ,_gegg =_begd .Bitmap .GetByte (_gabf );if _gegg !=nil {return _g .Wrap (_gegg ,_gcca ,"\u006c\u0069\u006e\u0065\u0020\u003e\u0020\u0031");};_eed |=int (_fggc )<<6;}else {_eed |=0;
};};for _fcee :=0;_fcee < _cbfc ;_fcee ++{_aded :=uint (7-_fcee );if _begd ._edg {_dcde =_begd .overrideAtTemplate0a (_dfdd ,_gaac +_fcee ,_dgg ,int (_eff ),_fcee ,int (_aded ));_begd ._gefg .SetIndex (int32 (_dcde ));}else {_begd ._gefg .SetIndex (int32 (_dfdd ));
};var _gcb int ;_gcb ,_gegg =_begd ._cff .DecodeBit (_begd ._gefg );if _gegg !=nil {return _g .Wrap (_gegg ,_gcca ,"");};_eff |=byte (_gcb )<<_aded ;_dfdd =((_dfdd &0x7bf7)<<1)|_gcb |((_gada >>_aded )&0x10)|((_eed >>_aded )&0x800);};if _abc :=_begd .Bitmap .SetByte (_eaege ,_eff );
_abc !=nil {return _g .Wrap (_abc ,_gcca ,"");};_eaege ++;_bbb ++;};return nil ;};var (_ Regioner =&TextRegion {};_ Segmenter =&TextRegion {};);func (_dgfcc *PageInformationSegment )readCombinationOperator ()error {_dgfa ,_agcf :=_dgfcc ._eceaf .ReadBits (2);
if _agcf !=nil {return _agcf ;};_dgfcc ._caad =_ea .CombinationOperator (int (_dgfa ));return nil ;};func (_ddfa *Header )readNumberOfReferredToSegments (_gddb *_fc .Reader )(uint64 ,error ){const _eee ="\u0072\u0065\u0061\u0064\u004e\u0075\u006d\u0062\u0065\u0072O\u0066\u0052\u0065\u0066\u0065\u0072\u0072e\u0064\u0054\u006f\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u0073";
_fcad ,_ebadg :=_gddb .ReadBits (3);if _ebadg !=nil {return 0,_g .Wrap (_ebadg ,_eee ,"\u0063\u006f\u0075n\u0074\u0020\u006f\u0066\u0020\u0072\u0074\u0073");};_fcad &=0xf;var _bced []byte ;if _fcad <=4{_bced =make ([]byte ,5);for _afge :=0;_afge <=4;_afge ++{_dcg ,_ceffb :=_gddb .ReadBit ();
if _ceffb !=nil {return 0,_g .Wrap (_ceffb ,_eee ,"\u0073\u0068\u006fr\u0074\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};_bced [_afge ]=byte (_dcg );};}else {_fcad ,_ebadg =_gddb .ReadBits (29);if _ebadg !=nil {return 0,_ebadg ;};_fcad &=_e .MaxInt32 ;
_fecb :=(_fcad +8)>>3;_fecb <<=3;_bced =make ([]byte ,_fecb );var _ebaf uint64 ;for _ebaf =0;_ebaf < _fecb ;_ebaf ++{_dafg ,_cbdg :=_gddb .ReadBit ();if _cbdg !=nil {return 0,_g .Wrap (_cbdg ,_eee ,"l\u006f\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u0061\u0074");
};_bced [_ebaf ]=byte (_dafg );};};return _fcad ,nil ;};func (_eggaf *PatternDictionary )parseHeader ()error {_eg .Log .Trace ("\u005b\u0050\u0041\u0054\u0054\u0045\u0052\u004e\u002d\u0044\u0049\u0043\u0054I\u004f\u004e\u0041\u0052\u0059\u005d[\u0070\u0061\u0072\u0073\u0065\u0048\u0065\u0061\u0064\u0065\u0072\u005d\u0020b\u0065\u0067\u0069\u006e");
defer func (){_eg .Log .Trace ("\u005b\u0050\u0041T\u0054\u0045\u0052\u004e\u002d\u0044\u0049\u0043\u0054\u0049\u004f\u004e\u0041\u0052\u0059\u005d\u005b\u0070\u0061\u0072\u0073\u0065\u0048\u0065\u0061\u0064\u0065\u0072\u005d \u0066\u0069\u006e\u0069\u0073\u0068\u0065\u0064");
}();_ ,_abgd :=_eggaf ._fed .ReadBits (5);if _abgd !=nil {return _abgd ;};if _abgd =_eggaf .readTemplate ();_abgd !=nil {return _abgd ;};if _abgd =_eggaf .readIsMMREncoded ();_abgd !=nil {return _abgd ;};if _abgd =_eggaf .readPatternWidthAndHeight ();_abgd !=nil {return _abgd ;
};if _abgd =_eggaf .readGrayMax ();_abgd !=nil {return _abgd ;};if _abgd =_eggaf .computeSegmentDataStructure ();_abgd !=nil {return _abgd ;};return _eggaf .checkInput ();};func (_dgeb *TableSegment )HtLow ()int32 {return _dgeb ._gfdfa };func (_gfg *HalftoneRegion )Init (hd *Header ,r *_fc .Reader )error {_gfg ._ddd =r ;
_gfg ._dfac =hd ;_gfg .RegionSegment =NewRegionSegment (r );return _gfg .parseHeader ();};type RegionSegment struct{_ddgb *_fc .Reader ;BitmapWidth uint32 ;BitmapHeight uint32 ;XLocation uint32 ;YLocation uint32 ;CombinaionOperator _ea .CombinationOperator ;
};func (_dbgd *Header )writeReferredToSegments (_gede _fc .BinaryWriter )(_eaebe int ,_aeab error ){const _deg ="\u0077\u0072\u0069te\u0052\u0065\u0066\u0065\u0072\u0072\u0065\u0064\u0054\u006f\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u0073";var (_befc uint16 ;
_ecbb uint32 ;);_gac :=_dbgd .referenceSize ();_bcbd :=1;_faae :=make ([]byte ,_gac );for _ ,_efgg :=range _dbgd .RTSNumbers {switch _gac {case 4:_ecbb =uint32 (_efgg );_f .BigEndian .PutUint32 (_faae ,_ecbb );_bcbd ,_aeab =_gede .Write (_faae );if _aeab !=nil {return 0,_g .Wrap (_aeab ,_deg ,"u\u0069\u006e\u0074\u0033\u0032\u0020\u0073\u0069\u007a\u0065");
};case 2:_befc =uint16 (_efgg );_f .BigEndian .PutUint16 (_faae ,_befc );_bcbd ,_aeab =_gede .Write (_faae );if _aeab !=nil {return 0,_g .Wrap (_aeab ,_deg ,"\u0075\u0069\u006e\u0074\u0031\u0036");};default:if _aeab =_gede .WriteByte (byte (_efgg ));_aeab !=nil {return 0,_g .Wrap (_aeab ,_deg ,"\u0075\u0069\u006et\u0038");
};};_eaebe +=_bcbd ;};return _eaebe ,nil ;};func (_egfe *PageInformationSegment )readCombinationOperatorOverrideAllowed ()error {_ddfe ,_ebfe :=_egfe ._eceaf .ReadBit ();if _ebfe !=nil {return _ebfe ;};if _ddfe ==1{_egfe ._cbg =true ;};return nil ;};func (_cdcdb *TableSegment )parseHeader ()error {var (_fddb int ;
_fecd uint64 ;_beed error ;);_fddb ,_beed =_cdcdb ._gbeeb .ReadBit ();if _beed !=nil {return _beed ;};if _fddb ==1{return _fe .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0074\u0061\u0062\u006c\u0065 \u0073\u0065\u0067\u006d\u0065\u006e\u0074\u0020\u0064e\u0066\u0069\u006e\u0069\u0074\u0069\u006f\u006e\u002e\u0020\u0042\u002e\u0032\u002e1\u0020\u0043\u006f\u0064\u0065\u0020\u0054\u0061\u0062\u006c\u0065\u0020\u0066\u006c\u0061\u0067\u0073\u003a\u0020\u0042\u0069\u0074\u0020\u0037\u0020\u006d\u0075\u0073\u0074\u0020b\u0065\u0020\u007a\u0065\u0072\u006f\u002e\u0020\u0057a\u0073\u003a \u0025\u0064",_fddb );
};if _fecd ,_beed =_cdcdb ._gbeeb .ReadBits (3);_beed !=nil {return _beed ;};_cdcdb ._fgcg =(int32 (_fecd )+1)&0xf;if _fecd ,_beed =_cdcdb ._gbeeb .ReadBits (3);_beed !=nil {return _beed ;};_cdcdb ._abeg =(int32 (_fecd )+1)&0xf;if _fecd ,_beed =_cdcdb ._gbeeb .ReadBits (32);
_beed !=nil {return _beed ;};_cdcdb ._gfdfa =int32 (_fecd &_e .MaxInt32 );if _fecd ,_beed =_cdcdb ._gbeeb .ReadBits (32);_beed !=nil {return _beed ;};_cdcdb ._cbdd =int32 (_fecd &_e .MaxInt32 );return nil ;};func (_ddca *TextRegion )decodeCurrentT ()(int64 ,error ){if _ddca .SbStrips !=1{if _ddca .IsHuffmanEncoded {_fcca ,_ffdg :=_ddca ._afda .ReadBits (byte (_ddca .LogSBStrips ));
return int64 (_fcca ),_ffdg ;};_agbg ,_eede :=_ddca ._gagc .DecodeInt (_ddca ._fbgbf );if _eede !=nil {return 0,_eede ;};return int64 (_agbg ),nil ;};return 0,nil ;};func (_efb *PageInformationSegment )String ()string {_eceac :=&_cf .Builder {};_eceac .WriteString ("\u000a\u005b\u0050\u0041G\u0045\u002d\u0049\u004e\u0046\u004f\u0052\u004d\u0041\u0054I\u004fN\u002d\u0053\u0045\u0047\u004d\u0045\u004eT\u005d\u000a");
_eceac .WriteString (_fe .Sprintf ("\u0009\u002d \u0042\u004d\u0048e\u0069\u0067\u0068\u0074\u003a\u0020\u0025\u0064\u000a",_efb .PageBMHeight ));_eceac .WriteString (_fe .Sprintf ("\u0009-\u0020B\u004d\u0057\u0069\u0064\u0074\u0068\u003a\u0020\u0025\u0064\u000a",_efb .PageBMWidth ));
_eceac .WriteString (_fe .Sprintf ("\u0009\u002d\u0020\u0052es\u006f\u006c\u0075\u0074\u0069\u006f\u006e\u0058\u003a\u0020\u0025\u0064\u000a",_efb .ResolutionX ));_eceac .WriteString (_fe .Sprintf ("\u0009\u002d\u0020\u0052es\u006f\u006c\u0075\u0074\u0069\u006f\u006e\u0059\u003a\u0020\u0025\u0064\u000a",_efb .ResolutionY ));
_eceac .WriteString (_fe .Sprintf ("\t\u002d\u0020\u0043\u006f\u006d\u0062i\u006e\u0061\u0074\u0069\u006f\u006e\u004f\u0070\u0065r\u0061\u0074\u006fr\u003a \u0025\u0073\u000a",_efb ._caad ));_eceac .WriteString (_fe .Sprintf ("\t\u002d\u0020\u0043\u006f\u006d\u0062i\u006e\u0061\u0074\u0069\u006f\u006eO\u0070\u0065\u0072\u0061\u0074\u006f\u0072O\u0076\u0065\u0072\u0072\u0069\u0064\u0065\u003a\u0020\u0025v\u000a",_efb ._cbg ));
_eceac .WriteString (_fe .Sprintf ("\u0009-\u0020I\u0073\u004c\u006f\u0073\u0073l\u0065\u0073s\u003a\u0020\u0025\u0076\u000a",_efb .IsLossless ));_eceac .WriteString (_fe .Sprintf ("\u0009\u002d\u0020R\u0065\u0071\u0075\u0069r\u0065\u0073\u0041\u0075\u0078\u0069\u006ci\u0061\u0072\u0079\u0042\u0075\u0066\u0066\u0065\u0072\u003a\u0020\u0025\u0076\u000a",_efb ._dbdbb ));
_eceac .WriteString (_fe .Sprintf ("\u0009\u002d\u0020M\u0069\u0067\u0068\u0074C\u006f\u006e\u0074\u0061\u0069\u006e\u0052e\u0066\u0069\u006e\u0065\u006d\u0065\u006e\u0074\u0073\u003a\u0020\u0025\u0076\u000a",_efb ._aaad ));_eceac .WriteString (_fe .Sprintf ("\u0009\u002d\u0020\u0049\u0073\u0053\u0074\u0072\u0069\u0070\u0065\u0064:\u0020\u0025\u0076\u000a",_efb .IsStripe ));
_eceac .WriteString (_fe .Sprintf ("\t\u002d\u0020\u004d\u0061xS\u0074r\u0069\u0070\u0065\u0053\u0069z\u0065\u003a\u0020\u0025\u0076\u000a",_efb .MaxStripeSize ));return _eceac .String ();};func (_cage *SymbolDictionary )encodeFlags (_gbfd _fc .BinaryWriter )(_gbee int ,_fbgad error ){const _dec ="e\u006e\u0063\u006f\u0064\u0065\u0046\u006c\u0061\u0067\u0073";
if _fbgad =_gbfd .SkipBits (3);_fbgad !=nil {return 0,_g .Wrap (_fbgad ,_dec ,"\u0065\u006d\u0070\u0074\u0079\u0020\u0062\u0069\u0074\u0073");};var _cdbcc int ;if _cage .SdrTemplate > 0{_cdbcc =1;};if _fbgad =_gbfd .WriteBit (_cdbcc );_fbgad !=nil {return _gbee ,_g .Wrap (_fbgad ,_dec ,"s\u0064\u0072\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065");
};_cdbcc =0;if _cage .SdTemplate > 1{_cdbcc =1;};if _fbgad =_gbfd .WriteBit (_cdbcc );_fbgad !=nil {return _gbee ,_g .Wrap (_fbgad ,_dec ,"\u0073\u0064\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065");};_cdbcc =0;if _cage .SdTemplate ==1||_cage .SdTemplate ==3{_cdbcc =1;
};if _fbgad =_gbfd .WriteBit (_cdbcc );_fbgad !=nil {return _gbee ,_g .Wrap (_fbgad ,_dec ,"\u0073\u0064\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065");};_cdbcc =0;if _cage ._fdae {_cdbcc =1;};if _fbgad =_gbfd .WriteBit (_cdbcc );_fbgad !=nil {return _gbee ,_g .Wrap (_fbgad ,_dec ,"\u0063\u006f\u0064in\u0067\u0020\u0063\u006f\u006e\u0074\u0065\u0078\u0074\u0020\u0072\u0065\u0074\u0061\u0069\u006e\u0065\u0064");
};_cdbcc =0;if _cage ._cggf {_cdbcc =1;};if _fbgad =_gbfd .WriteBit (_cdbcc );_fbgad !=nil {return _gbee ,_g .Wrap (_fbgad ,_dec ,"\u0063\u006f\u0064\u0069ng\u0020\u0063\u006f\u006e\u0074\u0065\u0078\u0074\u0020\u0075\u0073\u0065\u0064");};_cdbcc =0;if _cage .SdHuffAggInstanceSelection {_cdbcc =1;
};if _fbgad =_gbfd .WriteBit (_cdbcc );_fbgad !=nil {return _gbee ,_g .Wrap (_fbgad ,_dec ,"\u0073\u0064\u0048\u0075\u0066\u0066\u0041\u0067\u0067\u0049\u006e\u0073\u0074");};_cdbcc =int (_cage .SdHuffBMSizeSelection );if _fbgad =_gbfd .WriteBit (_cdbcc );
_fbgad !=nil {return _gbee ,_g .Wrap (_fbgad ,_dec ,"\u0073\u0064\u0048u\u0066\u0066\u0042\u006d\u0053\u0069\u007a\u0065");};_cdbcc =0;if _cage .SdHuffDecodeWidthSelection > 1{_cdbcc =1;};if _fbgad =_gbfd .WriteBit (_cdbcc );_fbgad !=nil {return _gbee ,_g .Wrap (_fbgad ,_dec ,"s\u0064\u0048\u0075\u0066\u0066\u0057\u0069\u0064\u0074\u0068");
};_cdbcc =0;switch _cage .SdHuffDecodeWidthSelection {case 1,3:_cdbcc =1;};if _fbgad =_gbfd .WriteBit (_cdbcc );_fbgad !=nil {return _gbee ,_g .Wrap (_fbgad ,_dec ,"s\u0064\u0048\u0075\u0066\u0066\u0057\u0069\u0064\u0074\u0068");};_cdbcc =0;if _cage .SdHuffDecodeHeightSelection > 1{_cdbcc =1;
};if _fbgad =_gbfd .WriteBit (_cdbcc );_fbgad !=nil {return _gbee ,_g .Wrap (_fbgad ,_dec ,"\u0073\u0064\u0048u\u0066\u0066\u0048\u0065\u0069\u0067\u0068\u0074");};_cdbcc =0;switch _cage .SdHuffDecodeHeightSelection {case 1,3:_cdbcc =1;};if _fbgad =_gbfd .WriteBit (_cdbcc );
_fbgad !=nil {return _gbee ,_g .Wrap (_fbgad ,_dec ,"\u0073\u0064\u0048u\u0066\u0066\u0048\u0065\u0069\u0067\u0068\u0074");};_cdbcc =0;if _cage .UseRefinementAggregation {_cdbcc =1;};if _fbgad =_gbfd .WriteBit (_cdbcc );_fbgad !=nil {return _gbee ,_g .Wrap (_fbgad ,_dec ,"\u0073\u0064\u0052\u0065\u0066\u0041\u0067\u0067");
};_cdbcc =0;if _cage .IsHuffmanEncoded {_cdbcc =1;};if _fbgad =_gbfd .WriteBit (_cdbcc );_fbgad !=nil {return _gbee ,_g .Wrap (_fbgad ,_dec ,"\u0073\u0064\u0048\u0075\u0066\u0066");};return 2,nil ;};func (_bddf *TextRegion )decodeDT ()(_gbcc int64 ,_gaff error ){if _bddf .IsHuffmanEncoded {if _bddf .SbHuffDT ==3{_gbcc ,_gaff =_bddf ._cbec .Decode (_bddf ._afda );
if _gaff !=nil {return 0,_gaff ;};}else {var _cdcf _ad .Tabler ;_cdcf ,_gaff =_ad .GetStandardTable (11+int (_bddf .SbHuffDT ));if _gaff !=nil {return 0,_gaff ;};_gbcc ,_gaff =_cdcf .Decode (_bddf ._afda );if _gaff !=nil {return 0,_gaff ;};};}else {var _eac int32 ;
_eac ,_gaff =_bddf ._gagc .DecodeInt (_bddf ._bfcbad );if _gaff !=nil {return 0,_gaff ;};_gbcc =int64 (_eac );};_gbcc *=int64 (_bddf .SbStrips );return _gbcc ,nil ;};func (_aagf *SymbolDictionary )encodeSymbols (_acb _fc .BinaryWriter )(_cabe int ,_cbbad error ){const _cdbc ="\u0065\u006e\u0063o\u0064\u0065\u0053\u0079\u006d\u0062\u006f\u006c";
_eaea :=_d .New ();_eaea .Init ();_ccbgc ,_cbbad :=_aagf ._gbac .SelectByIndexes (_aagf ._eggd );if _cbbad !=nil {return 0,_g .Wrap (_cbbad ,_cdbc ,"\u0069n\u0069\u0074\u0069\u0061\u006c");};_feef :=map[*_ea .Bitmap ]int {};for _aaab ,_abcdd :=range _ccbgc .Values {_feef [_abcdd ]=_aaab ;
};_ccbgc .SortByHeight ();var _egfcf ,_gaacc int ;_cfga ,_cbbad :=_ccbgc .GroupByHeight ();if _cbbad !=nil {return 0,_g .Wrap (_cbbad ,_cdbc ,"");};for _ ,_dcf :=range _cfga .Values {_fffd :=_dcf .Values [0].Height ;_bed :=_fffd -_egfcf ;if _cbbad =_eaea .EncodeInteger (_d .IADH ,_bed );
_cbbad !=nil {return 0,_g .Wrapf (_cbbad ,_cdbc ,"\u0049\u0041\u0044\u0048\u0020\u0066\u006f\u0072\u0020\u0064\u0068\u003a \u0027\u0025\u0064\u0027",_bed );};_egfcf =_fffd ;_babd ,_dfc :=_dcf .GroupByWidth ();if _dfc !=nil {return 0,_g .Wrapf (_dfc ,_cdbc ,"\u0068\u0065\u0069g\u0068\u0074\u003a\u0020\u0027\u0025\u0064\u0027",_fffd );
};var _eccg int ;for _ ,_afeg :=range _babd .Values {for _ ,_fbeeb :=range _afeg .Values {_cefg :=_fbeeb .Width ;_cgdc :=_cefg -_eccg ;if _dfc =_eaea .EncodeInteger (_d .IADW ,_cgdc );_dfc !=nil {return 0,_g .Wrapf (_dfc ,_cdbc ,"\u0049\u0041\u0044\u0057\u0020\u0066\u006f\u0072\u0020\u0064\u0077\u003a \u0027\u0025\u0064\u0027",_cgdc );
};_eccg +=_cgdc ;if _dfc =_eaea .EncodeBitmap (_fbeeb ,false );_dfc !=nil {return 0,_g .Wrapf (_dfc ,_cdbc ,"H\u0065i\u0067\u0068\u0074\u003a\u0020\u0025\u0064\u0020W\u0069\u0064\u0074\u0068: \u0025\u0064",_fffd ,_cefg );};_gcad :=_feef [_fbeeb ];_aagf ._cfgg [_gcad ]=_gaacc ;
_gaacc ++;};};if _dfc =_eaea .EncodeOOB (_d .IADW );_dfc !=nil {return 0,_g .Wrap (_dfc ,_cdbc ,"\u0049\u0041\u0044\u0057");};};if _cbbad =_eaea .EncodeInteger (_d .IAEX ,0);_cbbad !=nil {return 0,_g .Wrap (_cbbad ,_cdbc ,"\u0065\u0078p\u006f\u0072\u0074e\u0064\u0020\u0073\u0079\u006d\u0062\u006f\u006c\u0073");
};if _cbbad =_eaea .EncodeInteger (_d .IAEX ,len (_aagf ._eggd ));_cbbad !=nil {return 0,_g .Wrap (_cbbad ,_cdbc ,"\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0073\u0079m\u0062\u006f\u006c\u0073");};_eaea .Final ();_ffbaa ,_cbbad :=_eaea .WriteTo (_acb );
if _cbbad !=nil {return 0,_g .Wrap (_cbbad ,_cdbc ,"\u0077\u0072i\u0074\u0069\u006e\u0067 \u0065\u006ec\u006f\u0064\u0065\u0072\u0020\u0063\u006f\u006et\u0065\u0078\u0074\u0020\u0074\u006f\u0020\u0027\u0077\u0027\u0020\u0077r\u0069\u0074\u0065\u0072");
};return int (_ffbaa ),nil ;};func (_feg *GenericRegion )Init (h *Header ,r *_fc .Reader )error {_feg .RegionSegment =NewRegionSegment (r );_feg ._dcd =r ;return _feg .parseHeader ();};func (_cagc *SymbolDictionary )decodeNewSymbols (_afb ,_abdg uint32 ,_eeee *_ea .Bitmap ,_aecbg ,_edfe int32 )error {if _cagc ._aebgf ==nil {_cagc ._aebgf =_adgd (_cagc ._degd ,nil );
if _cagc ._adgg ==nil {var _efee error ;_cagc ._adgg ,_efee =_ac .New (_cagc ._degd );if _efee !=nil {return _efee ;};};if _cagc ._bfde ==nil {_cagc ._bfde =_ac .NewStats (65536,1);};};_cagc ._aebgf .setParameters (_cagc ._bfde ,_cagc ._adgg ,_cagc .SdrTemplate ,_afb ,_abdg ,_eeee ,_aecbg ,_edfe ,false ,_cagc .SdrATX ,_cagc .SdrATY );
return _cagc .addSymbol (_cagc ._aebgf );};func (_acgf *SymbolDictionary )setAtPixels ()error {if _acgf .IsHuffmanEncoded {return nil ;};_bgde :=1;if _acgf .SdTemplate ==0{_bgde =4;};if _gfaf :=_acgf .readAtPixels (_bgde );_gfaf !=nil {return _gfaf ;};
return nil ;};type template1 struct{};func (_afdf *TextRegion )decodeRdh ()(int64 ,error ){const _cdcfe ="\u0064e\u0063\u006f\u0064\u0065\u0052\u0064h";if _afdf .IsHuffmanEncoded {if _afdf .SbHuffRDHeight ==3{if _afdf ._agaa ==nil {var (_adab int ;_adag error ;
);if _afdf .SbHuffFS ==3{_adab ++;};if _afdf .SbHuffDS ==3{_adab ++;};if _afdf .SbHuffDT ==3{_adab ++;};if _afdf .SbHuffRDWidth ==3{_adab ++;};_afdf ._agaa ,_adag =_afdf .getUserTable (_adab );if _adag !=nil {return 0,_g .Wrap (_adag ,_cdcfe ,"");};};return _afdf ._agaa .Decode (_afdf ._afda );
};_bbee ,_bfdcc :=_ad .GetStandardTable (14+int (_afdf .SbHuffRDHeight ));if _bfdcc !=nil {return 0,_g .Wrap (_bfdcc ,_cdcfe ,"");};return _bbee .Decode (_afdf ._afda );};_cbee ,_cffg :=_afdf ._gagc .DecodeInt (_afdf ._agcc );if _cffg !=nil {return 0,_g .Wrap (_cffg ,_cdcfe ,"");
};return int64 (_cbee ),nil ;};func (_cfef *TextRegion )readRegionFlags ()error {var (_fafdc int ;_ggbg uint64 ;_cggd error ;);_fafdc ,_cggd =_cfef ._afda .ReadBit ();if _cggd !=nil {return _cggd ;};_cfef .SbrTemplate =int8 (_fafdc );_ggbg ,_cggd =_cfef ._afda .ReadBits (5);
if _cggd !=nil {return _cggd ;};_cfef .SbDsOffset =int8 (_ggbg );if _cfef .SbDsOffset > 0x0f{_cfef .SbDsOffset -=0x20;};_fafdc ,_cggd =_cfef ._afda .ReadBit ();if _cggd !=nil {return _cggd ;};_cfef .DefaultPixel =int8 (_fafdc );_ggbg ,_cggd =_cfef ._afda .ReadBits (2);
if _cggd !=nil {return _cggd ;};_cfef .CombinationOperator =_ea .CombinationOperator (int (_ggbg )&0x3);_fafdc ,_cggd =_cfef ._afda .ReadBit ();if _cggd !=nil {return _cggd ;};_cfef .IsTransposed =int8 (_fafdc );_ggbg ,_cggd =_cfef ._afda .ReadBits (2);
if _cggd !=nil {return _cggd ;};_cfef .ReferenceCorner =int16 (_ggbg )&0x3;_ggbg ,_cggd =_cfef ._afda .ReadBits (2);if _cggd !=nil {return _cggd ;};_cfef .LogSBStrips =int16 (_ggbg )&0x3;_cfef .SbStrips =1<<uint (_cfef .LogSBStrips );_fafdc ,_cggd =_cfef ._afda .ReadBit ();
if _cggd !=nil {return _cggd ;};if _fafdc ==1{_cfef .UseRefinement =true ;};_fafdc ,_cggd =_cfef ._afda .ReadBit ();if _cggd !=nil {return _cggd ;};if _fafdc ==1{_cfef .IsHuffmanEncoded =true ;};return nil ;};type Regioner interface{GetRegionBitmap ()(*_ea .Bitmap ,error );
GetRegionInfo ()*RegionSegment ;};func (_eaeg *template1 )form (_egfc ,_eec ,_bcd ,_bgc ,_bb int16 )int16 {return ((_egfc &0x02)<<8)|(_eec <<6)|((_bcd &0x03)<<4)|(_bgc <<1)|_bb ;};func (_gfdd *HalftoneRegion )GetRegionInfo ()*RegionSegment {return _gfdd .RegionSegment };
type HalftoneRegion struct{_ddd *_fc .Reader ;_dfac *Header ;DataHeaderOffset int64 ;DataHeaderLength int64 ;DataOffset int64 ;DataLength int64 ;RegionSegment *RegionSegment ;HDefaultPixel int8 ;CombinationOperator _ea .CombinationOperator ;HSkipEnabled bool ;
HTemplate byte ;IsMMREncoded bool ;HGridWidth uint32 ;HGridHeight uint32 ;HGridX int32 ;HGridY int32 ;HRegionX uint16 ;HRegionY uint16 ;HalftoneRegionBitmap *_ea .Bitmap ;Patterns []*_ea .Bitmap ;};func (_fdg *GenericRefinementRegion )getPixel (_bfc *_ea .Bitmap ,_egg ,_fef int )int {if _egg < 0||_egg >=_bfc .Width {return 0;
};if _fef < 0||_fef >=_bfc .Height {return 0;};if _bfc .GetPixel (_egg ,_fef ){return 1;};return 0;};func (_bcea *PageInformationSegment )Encode (w _fc .BinaryWriter )(_fccb int ,_dac error ){const _ggca ="\u0050\u0061g\u0065\u0049\u006e\u0066\u006f\u0072\u006d\u0061\u0074\u0069\u006f\u006e\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u002e\u0045\u006eco\u0064\u0065";
_eccb :=make ([]byte ,4);_f .BigEndian .PutUint32 (_eccb ,uint32 (_bcea .PageBMWidth ));_fccb ,_dac =w .Write (_eccb );if _dac !=nil {return _fccb ,_g .Wrap (_dac ,_ggca ,"\u0077\u0069\u0064t\u0068");};_f .BigEndian .PutUint32 (_eccb ,uint32 (_bcea .PageBMHeight ));
var _deef int ;_deef ,_dac =w .Write (_eccb );if _dac !=nil {return _deef +_fccb ,_g .Wrap (_dac ,_ggca ,"\u0068\u0065\u0069\u0067\u0068\u0074");};_fccb +=_deef ;_f .BigEndian .PutUint32 (_eccb ,uint32 (_bcea .ResolutionX ));_deef ,_dac =w .Write (_eccb );
if _dac !=nil {return _deef +_fccb ,_g .Wrap (_dac ,_ggca ,"\u0078\u0020\u0072e\u0073\u006f\u006c\u0075\u0074\u0069\u006f\u006e");};_fccb +=_deef ;_f .BigEndian .PutUint32 (_eccb ,uint32 (_bcea .ResolutionY ));if _deef ,_dac =w .Write (_eccb );_dac !=nil {return _deef +_fccb ,_g .Wrap (_dac ,_ggca ,"\u0079\u0020\u0072e\u0073\u006f\u006c\u0075\u0074\u0069\u006f\u006e");
};_fccb +=_deef ;if _dac =_bcea .encodeFlags (w );_dac !=nil {return _fccb ,_g .Wrap (_dac ,_ggca ,"");};_fccb ++;if _deef ,_dac =_bcea .encodeStripingInformation (w );_dac !=nil {return _fccb ,_g .Wrap (_dac ,_ggca ,"");};_fccb +=_deef ;return _fccb ,nil ;
};type SymbolDictionary struct{_degd *_fc .Reader ;SdrTemplate int8 ;SdTemplate int8 ;_fdae bool ;_cggf bool ;SdHuffAggInstanceSelection bool ;SdHuffBMSizeSelection int8 ;SdHuffDecodeWidthSelection int8 ;SdHuffDecodeHeightSelection int8 ;UseRefinementAggregation bool ;
IsHuffmanEncoded bool ;SdATX []int8 ;SdATY []int8 ;SdrATX []int8 ;SdrATY []int8 ;NumberOfExportedSymbols uint32 ;NumberOfNewSymbols uint32 ;Header *Header ;_acfd uint32 ;_eggc []*_ea .Bitmap ;_dddc uint32 ;_bgff []*_ea .Bitmap ;_aaadd _ad .Tabler ;_cdcgg _ad .Tabler ;
_gae _ad .Tabler ;_cba _ad .Tabler ;_ceda []*_ea .Bitmap ;_gafc []*_ea .Bitmap ;_adgg *_ac .Decoder ;_ccdd *TextRegion ;_ddda *GenericRegion ;_aebgf *GenericRefinementRegion ;_bfde *_ac .DecoderStats ;_eefb *_ac .DecoderStats ;_cddc *_ac .DecoderStats ;
_cafa *_ac .DecoderStats ;_fbd *_ac .DecoderStats ;_dafe *_ac .DecoderStats ;_gcbb *_ac .DecoderStats ;_afca *_ac .DecoderStats ;_agae *_ac .DecoderStats ;_abda int8 ;_gbac *_ea .Bitmaps ;_eggd []int ;_cfgg map[int ]int ;_cbc bool ;};func (_dcad *HalftoneRegion )checkInput ()error {if _dcad .IsMMREncoded {if _dcad .HTemplate !=0{_eg .Log .Debug ("\u0048\u0054\u0065\u006d\u0070l\u0061\u0074\u0065\u0020\u003d\u0020\u0025\u0064\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0074\u0068\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0030",_dcad .HTemplate );
};if _dcad .HSkipEnabled {_eg .Log .Debug ("\u0048\u0053\u006b\u0069\u0070\u0045\u006e\u0061\u0062\u006c\u0065\u0064\u0020\u0030\u0020\u0025\u0076\u0020(\u0073\u0068\u006f\u0075\u006c\u0064\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0074\u0068\u0065\u0020v\u0061\u006c\u0075\u0065\u0020\u0066\u0061\u006c\u0073\u0065\u0029",_dcad .HSkipEnabled );
};};return nil ;};func (_abba *TextRegion )InitEncode (globalSymbolsMap ,localSymbolsMap map[int ]int ,comps []int ,inLL *_ea .Points ,symbols *_ea .Bitmaps ,classIDs *_fb .IntSlice ,boxes *_ea .Boxes ,width ,height ,symBits int ){_abba .RegionInfo =&RegionSegment {BitmapWidth :uint32 (width ),BitmapHeight :uint32 (height )};
_abba ._gfac =globalSymbolsMap ;_abba ._ceabb =localSymbolsMap ;_abba ._cddab =comps ;_abba ._gfbag =inLL ;_abba ._bccd =symbols ;_abba ._dgfee =classIDs ;_abba ._eadd =boxes ;_abba ._fbgf =symBits ;};func (_cgee *SymbolDictionary )checkInput ()error {if _cgee .SdHuffDecodeHeightSelection ==2{_eg .Log .Debug ("\u0053\u0079\u006d\u0062\u006fl\u0020\u0044\u0069\u0063\u0074i\u006fn\u0061\u0072\u0079\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0020\u0048\u0065\u0069\u0067\u0068\u0074\u0020\u0053e\u006c\u0065\u0063\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006e\u006f\u0074\u0020\u0070\u0065r\u006d\u0069\u0074\u0074\u0065\u0064",_cgee .SdHuffDecodeHeightSelection );
};if _cgee .SdHuffDecodeWidthSelection ==2{_eg .Log .Debug ("\u0053\u0079\u006d\u0062\u006f\u006c\u0020\u0044\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079 \u0044\u0065\u0063\u006f\u0064\u0065\u0020\u0057\u0069\u0064t\u0068\u0020\u0053\u0065\u006c\u0065\u0063\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064\u0020\u0076\u0061l\u0075\u0065\u0020\u006e\u006f\u0074 \u0070\u0065r\u006d\u0069t\u0074e\u0064",_cgee .SdHuffDecodeWidthSelection );
};if _cgee .IsHuffmanEncoded {if _cgee .SdTemplate !=0{_eg .Log .Debug ("\u0053\u0044T\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0020\u003d\u0020\u0025\u0064\u0020\u0028\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e \u0030\u0029",_cgee .SdTemplate );
};if !_cgee .UseRefinementAggregation {if !_cgee .UseRefinementAggregation {if _cgee ._fdae {_eg .Log .Debug ("\u0049\u0073\u0043\u006f\u0064\u0069\u006e\u0067C\u006f\u006e\u0074ex\u0074\u0052\u0065\u0074\u0061\u0069n\u0065\u0064\u0020\u003d\u0020\u0074\u0072\u0075\u0065\u0020\u0028\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0066\u0061\u006cs\u0065\u0029");
_cgee ._fdae =false ;};if _cgee ._cggf {_eg .Log .Debug ("\u0069s\u0043\u006fd\u0069\u006e\u0067\u0043o\u006e\u0074\u0065x\u0074\u0055\u0073\u0065\u0064\u0020\u003d\u0020\u0074ru\u0065\u0020\u0028s\u0068\u006fu\u006c\u0064\u0020\u0062\u0065\u0020f\u0061\u006cs\u0065\u0029");
_cgee ._cggf =false ;};};};}else {if _cgee .SdHuffBMSizeSelection !=0{_eg .Log .Debug ("\u0053\u0064\u0048\u0075\u0066\u0066B\u004d\u0053\u0069\u007a\u0065\u0053\u0065\u006c\u0065\u0063\u0074\u0069\u006fn\u0020\u0073\u0068\u006f\u0075\u006c\u0064 \u0062\u0065\u0020\u0030");
_cgee .SdHuffBMSizeSelection =0;};if _cgee .SdHuffDecodeWidthSelection !=0{_eg .Log .Debug ("\u0053\u0064\u0048\u0075\u0066\u0066\u0044\u0065\u0063\u006f\u0064\u0065\u0057\u0069\u0064\u0074\u0068\u0053\u0065\u006c\u0065\u0063\u0074\u0069o\u006e\u0020\u0073\u0068\u006fu\u006c\u0064 \u0062\u0065\u0020\u0030");
_cgee .SdHuffDecodeWidthSelection =0;};if _cgee .SdHuffDecodeHeightSelection !=0{_eg .Log .Debug ("\u0053\u0064\u0048\u0075\u0066\u0066\u0044\u0065\u0063\u006f\u0064\u0065\u0048e\u0069\u0067\u0068\u0074\u0053\u0065l\u0065\u0063\u0074\u0069\u006f\u006e\u0020\u0073\u0068\u006f\u0075\u006c\u0064 \u0062\u0065\u0020\u0030");
_cgee .SdHuffDecodeHeightSelection =0;};};if !_cgee .UseRefinementAggregation {if _cgee .SdrTemplate !=0{_eg .Log .Debug ("\u0053\u0044\u0052\u0054\u0065\u006d\u0070\u006c\u0061\u0074e\u0020\u003d\u0020\u0025\u0064\u0020\u0028s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0030\u0029",_cgee .SdrTemplate );
_cgee .SdrTemplate =0;};};if !_cgee .IsHuffmanEncoded ||!_cgee .UseRefinementAggregation {if _cgee .SdHuffAggInstanceSelection {_eg .Log .Debug ("\u0053d\u0048\u0075f\u0066\u0041\u0067g\u0049\u006e\u0073\u0074\u0061\u006e\u0063e\u0053\u0065\u006c\u0065\u0063\u0074i\u006f\u006e\u0020\u003d\u0020\u0025\u0064\u0020\u0028\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0030\u0029",_cgee .SdHuffAggInstanceSelection );
};};return nil ;};func (_caag *TextRegion )setContexts (_dbcf *_ac .DecoderStats ,_cagcf *_ac .DecoderStats ,_dbce *_ac .DecoderStats ,_feeb *_ac .DecoderStats ,_dfbee *_ac .DecoderStats ,_eagg *_ac .DecoderStats ,_bagbb *_ac .DecoderStats ,_abbaa *_ac .DecoderStats ,_bdbga *_ac .DecoderStats ,_cgbf *_ac .DecoderStats ){_caag ._bfcbad =_cagcf ;
_caag ._gffg =_dbce ;_caag ._dgge =_feeb ;_caag ._fbgbf =_dfbee ;_caag ._efaaa =_bagbb ;_caag ._agcc =_abbaa ;_caag ._geeec =_eagg ;_caag ._eegfc =_bdbga ;_caag ._eaeab =_cgbf ;_caag ._dagb =_dbcf ;};func (_eegc *TableSegment )HtHigh ()int32 {return _eegc ._cbdd };
func (_egca *TextRegion )createRegionBitmap ()error {_egca .RegionBitmap =_ea .New (int (_egca .RegionInfo .BitmapWidth ),int (_egca .RegionInfo .BitmapHeight ));if _egca .DefaultPixel !=0{_egca .RegionBitmap .SetDefaultPixel ();};return nil ;};func (_fca *GenericRegion )updateOverrideFlags ()error {const _abf ="\u0075\u0070\u0064\u0061te\u004f\u0076\u0065\u0072\u0072\u0069\u0064\u0065\u0046\u006c\u0061\u0067\u0073";
if _fca .GBAtX ==nil ||_fca .GBAtY ==nil {return nil ;};if len (_fca .GBAtX )!=len (_fca .GBAtY ){return _g .Errorf (_abf ,"i\u006eco\u0073i\u0073t\u0065\u006e\u0074\u0020\u0041T\u0020\u0070\u0069x\u0065\u006c\u002e\u0020\u0041m\u006f\u0075\u006et\u0020\u006f\u0066\u0020\u0027\u0078\u0027\u0020\u0070\u0069\u0078e\u006c\u0073\u003a %d\u002c\u0020\u0041\u006d\u006f\u0075n\u0074\u0020\u006f\u0066\u0020\u0027\u0079\u0027\u0020\u0070\u0069\u0078e\u006cs\u003a\u0020\u0025\u0064",len (_fca .GBAtX ),len (_fca .GBAtY ));
};_fca .GBAtOverride =make ([]bool ,len (_fca .GBAtX ));switch _fca .GBTemplate {case 0:if !_fca .UseExtTemplates {if _fca .GBAtX [0]!=3||_fca .GBAtY [0]!=-1{_fca .setOverrideFlag (0);};if _fca .GBAtX [1]!=-3||_fca .GBAtY [1]!=-1{_fca .setOverrideFlag (1);
};if _fca .GBAtX [2]!=2||_fca .GBAtY [2]!=-2{_fca .setOverrideFlag (2);};if _fca .GBAtX [3]!=-2||_fca .GBAtY [3]!=-2{_fca .setOverrideFlag (3);};}else {if _fca .GBAtX [0]!=-2||_fca .GBAtY [0]!=0{_fca .setOverrideFlag (0);};if _fca .GBAtX [1]!=0||_fca .GBAtY [1]!=-2{_fca .setOverrideFlag (1);
};if _fca .GBAtX [2]!=-2||_fca .GBAtY [2]!=-1{_fca .setOverrideFlag (2);};if _fca .GBAtX [3]!=-1||_fca .GBAtY [3]!=-2{_fca .setOverrideFlag (3);};if _fca .GBAtX [4]!=1||_fca .GBAtY [4]!=-2{_fca .setOverrideFlag (4);};if _fca .GBAtX [5]!=2||_fca .GBAtY [5]!=-1{_fca .setOverrideFlag (5);
};if _fca .GBAtX [6]!=-3||_fca .GBAtY [6]!=0{_fca .setOverrideFlag (6);};if _fca .GBAtX [7]!=-4||_fca .GBAtY [7]!=0{_fca .setOverrideFlag (7);};if _fca .GBAtX [8]!=2||_fca .GBAtY [8]!=-2{_fca .setOverrideFlag (8);};if _fca .GBAtX [9]!=3||_fca .GBAtY [9]!=-1{_fca .setOverrideFlag (9);
};if _fca .GBAtX [10]!=-2||_fca .GBAtY [10]!=-2{_fca .setOverrideFlag (10);};if _fca .GBAtX [11]!=-3||_fca .GBAtY [11]!=-1{_fca .setOverrideFlag (11);};};case 1:if _fca .GBAtX [0]!=3||_fca .GBAtY [0]!=-1{_fca .setOverrideFlag (0);};case 2:if _fca .GBAtX [0]!=2||_fca .GBAtY [0]!=-1{_fca .setOverrideFlag (0);
};case 3:if _fca .GBAtX [0]!=2||_fca .GBAtY [0]!=-1{_fca .setOverrideFlag (0);};};return nil ;};func (_acdd *GenericRegion )getPixel (_fec ,_fdb int )int8 {if _fec < 0||_fec >=_acdd .Bitmap .Width {return 0;};if _fdb < 0||_fdb >=_acdd .Bitmap .Height {return 0;
};if _acdd .Bitmap .GetPixel (_fec ,_fdb ){return 1;};return 0;};func (_dcdc *GenericRegion )overrideAtTemplate0a (_caaa ,_cede ,_bfda ,_gfb ,_dbfd ,_dfbc int )int {if _dcdc .GBAtOverride [0]{_caaa &=0xFFEF;if _dcdc .GBAtY [0]==0&&_dcdc .GBAtX [0]>=-int8 (_dbfd ){_caaa |=(_gfb >>uint (int8 (_dfbc )-_dcdc .GBAtX [0]&0x1))<<4;
}else {_caaa |=int (_dcdc .getPixel (_cede +int (_dcdc .GBAtX [0]),_bfda +int (_dcdc .GBAtY [0])))<<4;};};if _dcdc .GBAtOverride [1]{_caaa &=0xFBFF;if _dcdc .GBAtY [1]==0&&_dcdc .GBAtX [1]>=-int8 (_dbfd ){_caaa |=(_gfb >>uint (int8 (_dfbc )-_dcdc .GBAtX [1]&0x1))<<10;
}else {_caaa |=int (_dcdc .getPixel (_cede +int (_dcdc .GBAtX [1]),_bfda +int (_dcdc .GBAtY [1])))<<10;};};if _dcdc .GBAtOverride [2]{_caaa &=0xF7FF;if _dcdc .GBAtY [2]==0&&_dcdc .GBAtX [2]>=-int8 (_dbfd ){_caaa |=(_gfb >>uint (int8 (_dfbc )-_dcdc .GBAtX [2]&0x1))<<11;
}else {_caaa |=int (_dcdc .getPixel (_cede +int (_dcdc .GBAtX [2]),_bfda +int (_dcdc .GBAtY [2])))<<11;};};if _dcdc .GBAtOverride [3]{_caaa &=0x7FFF;if _dcdc .GBAtY [3]==0&&_dcdc .GBAtX [3]>=-int8 (_dbfd ){_caaa |=(_gfb >>uint (int8 (_dfbc )-_dcdc .GBAtX [3]&0x1))<<15;
}else {_caaa |=int (_dcdc .getPixel (_cede +int (_dcdc .GBAtX [3]),_bfda +int (_dcdc .GBAtY [3])))<<15;};};return _caaa ;};func (_gga *TextRegion )decodeRI ()(int64 ,error ){if !_gga .UseRefinement {return 0,nil ;};if _gga .IsHuffmanEncoded {_dbag ,_fbfg :=_gga ._afda .ReadBit ();
return int64 (_dbag ),_fbfg ;};_dfeb ,_edec :=_gga ._gagc .DecodeInt (_gga ._eddbfg );return int64 (_dfeb ),_edec ;};func (_gf *EndOfStripe )parseHeader ()error {_faa ,_eb :=_gf ._dg .ReadBits (32);if _eb !=nil {return _eb ;};_gf ._bd =int (_faa &_e .MaxInt32 );
return nil ;};func (_cbbac *PageInformationSegment )readContainsRefinement ()error {_dacg ,_acga :=_cbbac ._eceaf .ReadBit ();if _acga !=nil {return _acga ;};if _dacg ==1{_cbbac ._aaad =true ;};return nil ;};func NewRegionSegment (r *_fc .Reader )*RegionSegment {return &RegionSegment {_ddgb :r }};
func (_fafd *TextRegion )GetRegionInfo ()*RegionSegment {return _fafd .RegionInfo };func (_fgfa *Header )subInputReader ()(*_fc .Reader ,error ){_ggfa :=int (_fgfa .SegmentDataLength );if _fgfa .SegmentDataLength ==_e .MaxInt32 {_ggfa =-1;};return _fgfa .Reader .NewPartialReader (int (_fgfa .SegmentDataStartOffset ),_ggfa ,false );
};func (_ebgf *SymbolDictionary )decodeDirectlyThroughGenericRegion (_fdeg ,_defc uint32 )error {if _ebgf ._ddda ==nil {_ebgf ._ddda =NewGenericRegion (_ebgf ._degd );};_ebgf ._ddda .setParametersWithAt (false ,byte (_ebgf .SdTemplate ),false ,false ,_ebgf .SdATX ,_ebgf .SdATY ,_fdeg ,_defc ,_ebgf ._bfde ,_ebgf ._adgg );
return _ebgf .addSymbol (_ebgf ._ddda );};const (ORandom OrganizationType =iota ;OSequential ;);func (_ggfd *Header )Encode (w _fc .BinaryWriter )(_bab int ,_fcbe error ){const _add ="\u0048\u0065\u0061d\u0065\u0072\u002e\u0057\u0072\u0069\u0074\u0065";
var _fff _fc .BinaryWriter ;_eg .Log .Trace ("\u005b\u0053\u0045G\u004d\u0045\u004e\u0054-\u0048\u0045\u0041\u0044\u0045\u0052\u005d[\u0045\u004e\u0043\u004f\u0044\u0045\u005d\u0020\u0042\u0065\u0067\u0069\u006e\u0073");defer func (){if _fcbe !=nil {_eg .Log .Trace ("[\u0053\u0045\u0047\u004d\u0045\u004eT\u002d\u0048\u0045\u0041\u0044\u0045R\u005d\u005b\u0045\u004e\u0043\u004f\u0044E\u005d\u0020\u0046\u0061\u0069\u006c\u0065\u0064\u002e\u0020%\u0076",_fcbe );
}else {_eg .Log .Trace ("\u005b\u0053\u0045\u0047ME\u004e\u0054\u002d\u0048\u0045\u0041\u0044\u0045\u0052\u005d\u0020\u0025\u0076",_ggfd );_eg .Log .Trace ("\u005b\u0053\u0045\u0047\u004d\u0045N\u0054\u002d\u0048\u0045\u0041\u0044\u0045\u0052\u005d\u005b\u0045\u004e\u0043O\u0044\u0045\u005d\u0020\u0046\u0069\u006ei\u0073\u0068\u0065\u0064");
};}();w .FinishByte ();if _ggfd .SegmentData !=nil {_gadg ,_gegf :=_ggfd .SegmentData .(SegmentEncoder );if !_gegf {return 0,_g .Errorf (_add ,"\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u003a\u0020\u0025\u0054\u0020\u0064\u006f\u0065s\u006e\u0027\u0074\u0020\u0069\u006d\u0070\u006c\u0065\u006d\u0065\u006e\u0074 \u0053\u0065\u0067\u006d\u0065\u006e\u0074\u0045\u006e\u0063\u006f\u0064er\u0020\u0069\u006e\u0074\u0065\u0072\u0066\u0061\u0063\u0065",_ggfd .SegmentData );
};_fff =_fc .BufferedMSB ();_bab ,_fcbe =_gadg .Encode (_fff );if _fcbe !=nil {return 0,_g .Wrap (_fcbe ,_add ,"");};_ggfd .SegmentDataLength =uint64 (_bab );};if _ggfd .pageSize ()==4{_ggfd .PageAssociationFieldSize =true ;};var _ebga int ;_ebga ,_fcbe =_ggfd .writeSegmentNumber (w );
if _fcbe !=nil {return 0,_g .Wrap (_fcbe ,_add ,"");};_bab +=_ebga ;if _fcbe =_ggfd .writeFlags (w );_fcbe !=nil {return _bab ,_g .Wrap (_fcbe ,_add ,"");};_bab ++;_ebga ,_fcbe =_ggfd .writeReferredToCount (w );if _fcbe !=nil {return 0,_g .Wrap (_fcbe ,_add ,"");
};_bab +=_ebga ;_ebga ,_fcbe =_ggfd .writeReferredToSegments (w );if _fcbe !=nil {return 0,_g .Wrap (_fcbe ,_add ,"");};_bab +=_ebga ;_ebga ,_fcbe =_ggfd .writeSegmentPageAssociation (w );if _fcbe !=nil {return 0,_g .Wrap (_fcbe ,_add ,"");};_bab +=_ebga ;
_ebga ,_fcbe =_ggfd .writeSegmentDataLength (w );if _fcbe !=nil {return 0,_g .Wrap (_fcbe ,_add ,"");};_bab +=_ebga ;_ggfd .HeaderLength =int64 (_bab )-int64 (_ggfd .SegmentDataLength );if _fff !=nil {if _ ,_fcbe =w .Write (_fff .Data ());_fcbe !=nil {return _bab ,_g .Wrap (_fcbe ,_add ,"\u0077r\u0069t\u0065\u0020\u0073\u0065\u0067m\u0065\u006et\u0020\u0064\u0061\u0074\u0061");
};};return _bab ,nil ;};func (_fbeg *SymbolDictionary )getSymbol (_gbfg int )(*_ea .Bitmap ,error ){const _bfae ="\u0067e\u0074\u0053\u0079\u006d\u0062\u006fl";_dgbe ,_efbc :=_fbeg ._gbac .GetBitmap (_fbeg ._eggd [_gbfg ]);if _efbc !=nil {return nil ,_g .Wrap (_efbc ,_bfae ,"\u0063\u0061n\u0027\u0074\u0020g\u0065\u0074\u0020\u0073\u0079\u006d\u0062\u006f\u006c");
};return _dgbe ,nil ;};var _ templater =&template1 {};func (_bef *template1 )setIndex (_gcc *_ac .DecoderStats ){_gcc .SetIndex (0x080)};func (_fbbf *TextRegion )decodeIds ()(int64 ,error ){const _edead ="\u0064e\u0063\u006f\u0064\u0065\u0049\u0064s";if _fbbf .IsHuffmanEncoded {if _fbbf .SbHuffDS ==3{if _fbbf ._abbb ==nil {_addg :=0;
if _fbbf .SbHuffFS ==3{_addg ++;};var _fddf error ;_fbbf ._abbb ,_fddf =_fbbf .getUserTable (_addg );if _fddf !=nil {return 0,_g .Wrap (_fddf ,_edead ,"");};};return _fbbf ._abbb .Decode (_fbbf ._afda );};_degg ,_faace :=_ad .GetStandardTable (8+int (_fbbf .SbHuffDS ));
if _faace !=nil {return 0,_g .Wrap (_faace ,_edead ,"");};return _degg .Decode (_fbbf ._afda );};_edgfc ,_aabc :=_fbbf ._gagc .DecodeInt (_fbbf ._dgge );if _aabc !=nil {return 0,_g .Wrap (_aabc ,_edead ,"\u0063\u0078\u0049\u0041\u0044\u0053");};return int64 (_edgfc ),nil ;
};func (_caf *PageInformationSegment )readWidthAndHeight ()error {_ccbg ,_agcab :=_caf ._eceaf .ReadBits (32);if _agcab !=nil {return _agcab ;};_caf .PageBMWidth =int (_ccbg &_e .MaxInt32 );_ccbg ,_agcab =_caf ._eceaf .ReadBits (32);if _agcab !=nil {return _agcab ;
};_caf .PageBMHeight =int (_ccbg &_e .MaxInt32 );return nil ;};func (_gceeb *SymbolDictionary )decodeHeightClassDeltaHeightWithHuffman ()(int64 ,error ){switch _gceeb .SdHuffDecodeHeightSelection {case 0:_agfd ,_dfcc :=_ad .GetStandardTable (4);if _dfcc !=nil {return 0,_dfcc ;
};return _agfd .Decode (_gceeb ._degd );case 1:_gfef ,_aaca :=_ad .GetStandardTable (5);if _aaca !=nil {return 0,_aaca ;};return _gfef .Decode (_gceeb ._degd );case 3:if _gceeb ._aaadd ==nil {_eeace ,_afag :=_ad .GetStandardTable (0);if _afag !=nil {return 0,_afag ;
};_gceeb ._aaadd =_eeace ;};return _gceeb ._aaadd .Decode (_gceeb ._degd );};return 0,nil ;};func (_fbgc *Header )readHeaderLength (_gadb *_fc .Reader ,_bfgd int64 ){_fbgc .HeaderLength =_gadb .AbsolutePosition ()-_bfgd ;};func (_eafc *SymbolDictionary )readNumberOfNewSymbols ()error {_aabf ,_bgaeb :=_eafc ._degd .ReadBits (32);
if _bgaeb !=nil {return _bgaeb ;};_eafc .NumberOfNewSymbols =uint32 (_aabf &_e .MaxUint32 );return nil ;};func (_cbb *GenericRegion )GetRegionBitmap ()(_dgc *_ea .Bitmap ,_fgc error ){if _cbb .Bitmap !=nil {return _cbb .Bitmap ,nil ;};if _cbb .IsMMREncoded {if _cbb ._fgfe ==nil {_cbb ._fgfe ,_fgc =_fa .New (_cbb ._dcd ,int (_cbb .RegionSegment .BitmapWidth ),int (_cbb .RegionSegment .BitmapHeight ),_cbb .DataOffset ,_cbb .DataLength );
if _fgc !=nil {return nil ,_fgc ;};};_cbb .Bitmap ,_fgc =_cbb ._fgfe .UncompressMMR ();return _cbb .Bitmap ,_fgc ;};if _fgc =_cbb .updateOverrideFlags ();_fgc !=nil {return nil ,_fgc ;};var _dda int ;if _cbb ._cff ==nil {_cbb ._cff ,_fgc =_ac .New (_cbb ._dcd );
if _fgc !=nil {return nil ,_fgc ;};};if _cbb ._gefg ==nil {_cbb ._gefg =_ac .NewStats (65536,1);};_cbb .Bitmap =_ea .New (int (_cbb .RegionSegment .BitmapWidth ),int (_cbb .RegionSegment .BitmapHeight ));_gde :=int (uint32 (_cbb .Bitmap .Width +7)&(^uint32 (7)));
for _efc :=0;_efc < _cbb .Bitmap .Height ;_efc ++{if _cbb .IsTPGDon {var _cde int ;_cde ,_fgc =_cbb .decodeSLTP ();if _fgc !=nil {return nil ,_fgc ;};_dda ^=_cde ;};if _dda ==1{if _efc > 0{if _fgc =_cbb .copyLineAbove (_efc );_fgc !=nil {return nil ,_fgc ;
};};}else {if _fgc =_cbb .decodeLine (_efc ,_cbb .Bitmap .Width ,_gde );_fgc !=nil {return nil ,_fgc ;};};};return _cbb .Bitmap ,nil ;};func (_ddg *Header )writeReferredToCount (_bcbb _fc .BinaryWriter )(_gagb int ,_gdaa error ){const _facba ="w\u0072i\u0074\u0065\u0052\u0065\u0066\u0065\u0072\u0072e\u0064\u0054\u006f\u0043ou\u006e\u0074";
_ddg .RTSNumbers =make ([]int ,len (_ddg .RTSegments ));for _egeg ,_gca :=range _ddg .RTSegments {_ddg .RTSNumbers [_egeg ]=int (_gca .SegmentNumber );};if len (_ddg .RTSNumbers )<=4{var _fgdb byte ;if len (_ddg .RetainBits )>=1{_fgdb =_ddg .RetainBits [0];
};_fgdb |=byte (len (_ddg .RTSNumbers ))<<5;if _gdaa =_bcbb .WriteByte (_fgdb );_gdaa !=nil {return 0,_g .Wrap (_gdaa ,_facba ,"\u0073\u0068\u006fr\u0074\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};return 1,nil ;};_faff :=uint32 (len (_ddg .RTSNumbers ));
_ggb :=make ([]byte ,4+_fb .Ceil (len (_ddg .RTSNumbers )+1,8));_faff |=0x7<<29;_f .BigEndian .PutUint32 (_ggb ,_faff );copy (_ggb [1:],_ddg .RetainBits );_gagb ,_gdaa =_bcbb .Write (_ggb );if _gdaa !=nil {return 0,_g .Wrap (_gdaa ,_facba ,"l\u006f\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u0061\u0074");
};return _gagb ,nil ;};func (_abcb *Header )parse (_feca Documenter ,_ded *_fc .Reader ,_cga int64 ,_ageg OrganizationType )(_badg error ){const _ecd ="\u0070\u0061\u0072s\u0065";_eg .Log .Trace ("\u005b\u0053\u0045\u0047\u004d\u0045\u004e\u0054\u002d\u0048E\u0041\u0044\u0045\u0052\u005d\u005b\u0050A\u0052\u0053\u0045\u005d\u0020\u0042\u0065\u0067\u0069\u006e\u0073");
defer func (){if _badg !=nil {_eg .Log .Trace ("\u005b\u0053\u0045GM\u0045\u004e\u0054\u002d\u0048\u0045\u0041\u0044\u0045R\u005d[\u0050A\u0052S\u0045\u005d\u0020\u0046\u0061\u0069\u006c\u0065\u0064\u002e\u0020\u0025\u0076",_badg );}else {_eg .Log .Trace ("\u005b\u0053\u0045\u0047\u004d\u0045\u004e\u0054\u002d\u0048\u0045\u0041\u0044\u0045\u0052]\u005bP\u0041\u0052\u0053\u0045\u005d\u0020\u0046\u0069\u006e\u0069\u0073\u0068\u0065\u0064");
};}();_ ,_badg =_ded .Seek (_cga ,_cd .SeekStart );if _badg !=nil {return _g .Wrap (_badg ,_ecd ,"\u0073\u0065\u0065\u006b\u0020\u0073\u0074\u0061\u0072\u0074");};if _badg =_abcb .readSegmentNumber (_ded );_badg !=nil {return _g .Wrap (_badg ,_ecd ,"");
};if _badg =_abcb .readHeaderFlags ();_badg !=nil {return _g .Wrap (_badg ,_ecd ,"");};var _effe uint64 ;_effe ,_badg =_abcb .readNumberOfReferredToSegments (_ded );if _badg !=nil {return _g .Wrap (_badg ,_ecd ,"");};_abcb .RTSNumbers ,_badg =_abcb .readReferredToSegmentNumbers (_ded ,int (_effe ));
if _badg !=nil {return _g .Wrap (_badg ,_ecd ,"");};_badg =_abcb .readSegmentPageAssociation (_feca ,_ded ,_effe ,_abcb .RTSNumbers ...);if _badg !=nil {return _g .Wrap (_badg ,_ecd ,"");};if _abcb .Type !=TEndOfFile {if _badg =_abcb .readSegmentDataLength (_ded );
_badg !=nil {return _g .Wrap (_badg ,_ecd ,"");};};_abcb .readDataStartOffset (_ded ,_ageg );_abcb .readHeaderLength (_ded ,_cga );_eg .Log .Trace ("\u0025\u0073",_abcb );return nil ;};func (_fffa *TextRegion )GetRegionBitmap ()(*_ea .Bitmap ,error ){if _fffa .RegionBitmap !=nil {return _fffa .RegionBitmap ,nil ;
};if !_fffa .IsHuffmanEncoded {if _dded :=_fffa .setCodingStatistics ();_dded !=nil {return nil ,_dded ;};};if _cdg :=_fffa .createRegionBitmap ();_cdg !=nil {return nil ,_cdg ;};if _gcfea :=_fffa .decodeSymbolInstances ();_gcfea !=nil {return nil ,_gcfea ;
};return _fffa .RegionBitmap ,nil ;};func (_deda Type )String ()string {switch _deda {case TSymbolDictionary :return "\u0053\u0079\u006d\u0062\u006f\u006c\u0020\u0044\u0069\u0063\u0074\u0069o\u006e\u0061\u0072\u0079";case TIntermediateTextRegion :return "\u0049n\u0074\u0065\u0072\u006d\u0065\u0064\u0069\u0061\u0074\u0065\u0020T\u0065\u0078\u0074\u0020\u0052\u0065\u0067\u0069\u006f\u006e";
case TImmediateTextRegion :return "I\u006d\u006d\u0065\u0064ia\u0074e\u0020\u0054\u0065\u0078\u0074 \u0052\u0065\u0067\u0069\u006f\u006e";case TImmediateLosslessTextRegion :return "\u0049\u006d\u006d\u0065\u0064\u0069\u0061\u0074\u0065\u0020L\u006f\u0073\u0073\u006c\u0065\u0073\u0073 \u0054\u0065\u0078\u0074\u0020\u0052\u0065\u0067\u0069\u006f\u006e";
case TPatternDictionary :return "\u0050a\u0074t\u0065\u0072\u006e\u0020\u0044i\u0063\u0074i\u006f\u006e\u0061\u0072\u0079";case TIntermediateHalftoneRegion :return "\u0049\u006e\u0074\u0065r\u006d\u0065\u0064\u0069\u0061\u0074\u0065\u0020\u0048\u0061l\u0066t\u006f\u006e\u0065\u0020\u0052\u0065\u0067i\u006f\u006e";
case TImmediateHalftoneRegion :return "\u0049m\u006d\u0065\u0064\u0069a\u0074\u0065\u0020\u0048\u0061l\u0066t\u006fn\u0065\u0020\u0052\u0065\u0067\u0069\u006fn";case TImmediateLosslessHalftoneRegion :return "\u0049\u006d\u006ded\u0069\u0061\u0074\u0065\u0020\u004c\u006f\u0073\u0073l\u0065s\u0073 \u0048a\u006c\u0066\u0074\u006f\u006e\u0065\u0020\u0052\u0065\u0067\u0069\u006f\u006e";
case TIntermediateGenericRegion :return "I\u006e\u0074\u0065\u0072\u006d\u0065d\u0069\u0061\u0074\u0065\u0020\u0047\u0065\u006e\u0065r\u0069\u0063\u0020R\u0065g\u0069\u006f\u006e";case TImmediateGenericRegion :return "\u0049m\u006d\u0065\u0064\u0069\u0061\u0074\u0065\u0020\u0047\u0065\u006ee\u0072\u0069\u0063\u0020\u0052\u0065\u0067\u0069\u006f\u006e";
case TImmediateLosslessGenericRegion :return "\u0049\u006d\u006d\u0065\u0064\u0069a\u0074\u0065\u0020\u004c\u006f\u0073\u0073\u006c\u0065\u0073\u0073\u0020\u0047e\u006e\u0065\u0072\u0069\u0063\u0020\u0052e\u0067\u0069\u006f\u006e";case TIntermediateGenericRefinementRegion :return "\u0049\u006e\u0074\u0065\u0072\u006d\u0065\u0064\u0069\u0061\u0074\u0065\u0020\u0047\u0065\u006e\u0065\u0072\u0069\u0063\u0020\u0052\u0065\u0066i\u006e\u0065\u006d\u0065\u006et\u0020\u0052e\u0067\u0069\u006f\u006e";
case TImmediateGenericRefinementRegion :return "I\u006d\u006d\u0065\u0064\u0069\u0061t\u0065\u0020\u0047\u0065\u006e\u0065r\u0069\u0063\u0020\u0052\u0065\u0066\u0069n\u0065\u006d\u0065\u006e\u0074\u0020\u0052\u0065\u0067\u0069o\u006e";case TImmediateLosslessGenericRefinementRegion :return "\u0049m\u006d\u0065d\u0069\u0061\u0074\u0065 \u004c\u006f\u0073s\u006c\u0065\u0073\u0073\u0020\u0047\u0065\u006e\u0065ri\u0063\u0020\u0052e\u0066\u0069n\u0065\u006d\u0065\u006e\u0074\u0020R\u0065\u0067i\u006f\u006e";
case TPageInformation :return "\u0050\u0061g\u0065\u0020\u0049n\u0066\u006f\u0072\u006d\u0061\u0074\u0069\u006f\u006e";case TEndOfPage :return "E\u006e\u0064\u0020\u004f\u0066\u0020\u0050\u0061\u0067\u0065";case TEndOfStrip :return "\u0045\u006e\u0064 \u004f\u0066\u0020\u0053\u0074\u0072\u0069\u0070";
case TEndOfFile :return "E\u006e\u0064\u0020\u004f\u0066\u0020\u0046\u0069\u006c\u0065";case TProfiles :return "\u0050\u0072\u006f\u0066\u0069\u006c\u0065\u0073";case TTables :return "\u0054\u0061\u0062\u006c\u0065\u0073";case TExtension :return "\u0045x\u0074\u0065\u006e\u0073\u0069\u006fn";
case TBitmap :return "\u0042\u0069\u0074\u006d\u0061\u0070";};return "I\u006ev\u0061\u006c\u0069\u0064\u0020\u0053\u0065\u0067m\u0065\u006e\u0074\u0020Ki\u006e\u0064";};func (_egfbb *PatternDictionary )readPatternWidthAndHeight ()error {_fggcb ,_gdbe :=_egfbb ._fed .ReadByte ();
if _gdbe !=nil {return _gdbe ;};_egfbb .HdpWidth =_fggcb ;_fggcb ,_gdbe =_egfbb ._fed .ReadByte ();if _gdbe !=nil {return _gdbe ;};_egfbb .HdpHeight =_fggcb ;return nil ;};func (_edcc *SymbolDictionary )huffDecodeRefAggNInst ()(int64 ,error ){if !_edcc .SdHuffAggInstanceSelection {_ggbe ,_baad :=_ad .GetStandardTable (1);
if _baad !=nil {return 0,_baad ;};return _ggbe .Decode (_edcc ._degd );};if _edcc ._cba ==nil {var (_cbfed int ;_bfaaf error ;);if _edcc .SdHuffDecodeHeightSelection ==3{_cbfed ++;};if _edcc .SdHuffDecodeWidthSelection ==3{_cbfed ++;};if _edcc .SdHuffBMSizeSelection ==3{_cbfed ++;
};_edcc ._cba ,_bfaaf =_edcc .getUserTable (_cbfed );if _bfaaf !=nil {return 0,_bfaaf ;};};return _edcc ._cba .Decode (_edcc ._degd );};func (_aefd *SymbolDictionary )Init (h *Header ,r *_fc .Reader )error {_aefd .Header =h ;_aefd ._degd =r ;return _aefd .parseHeader ();
};func (_fccc *SymbolDictionary )getUserTable (_adeda int )(_ad .Tabler ,error ){var _dege int ;for _ ,_eaba :=range _fccc .Header .RTSegments {if _eaba .Type ==53{if _dege ==_adeda {_eaad ,_afaf :=_eaba .GetSegmentData ();if _afaf !=nil {return nil ,_afaf ;
};_ceffg :=_eaad .(_ad .BasicTabler );return _ad .NewEncodedTable (_ceffg );};_dege ++;};};return nil ,nil ;};func (_cdcgb *TableSegment )HtOOB ()int32 {return _cdcgb ._bfca };var _ SegmentEncoder =&GenericRegion {};func (_caee *SymbolDictionary )readNumberOfExportedSymbols ()error {_gabb ,_bgae :=_caee ._degd .ReadBits (32);
if _bgae !=nil {return _bgae ;};_caee .NumberOfExportedSymbols =uint32 (_gabb &_e .MaxUint32 );return nil ;};func (_fadf *TextRegion )decodeRdx ()(int64 ,error ){const _facbac ="\u0064e\u0063\u006f\u0064\u0065\u0052\u0064x";if _fadf .IsHuffmanEncoded {if _fadf .SbHuffRDX ==3{if _fadf ._faeb ==nil {var (_cagd int ;
_eeae error ;);if _fadf .SbHuffFS ==3{_cagd ++;};if _fadf .SbHuffDS ==3{_cagd ++;};if _fadf .SbHuffDT ==3{_cagd ++;};if _fadf .SbHuffRDWidth ==3{_cagd ++;};if _fadf .SbHuffRDHeight ==3{_cagd ++;};_fadf ._faeb ,_eeae =_fadf .getUserTable (_cagd );if _eeae !=nil {return 0,_g .Wrap (_eeae ,_facbac ,"");
};};return _fadf ._faeb .Decode (_fadf ._afda );};_ebed ,_abdgc :=_ad .GetStandardTable (14+int (_fadf .SbHuffRDX ));if _abdgc !=nil {return 0,_g .Wrap (_abdgc ,_facbac ,"");};return _ebed .Decode (_fadf ._afda );};_gbce ,_caea :=_fadf ._gagc .DecodeInt (_fadf ._eegfc );
if _caea !=nil {return 0,_g .Wrap (_caea ,_facbac ,"");};return int64 (_gbce ),nil ;};