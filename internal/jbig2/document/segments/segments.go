//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package segments ;import (_b "encoding/binary";_e "errors";_de "fmt";_fg "github.com/unidoc/unipdf/v3/common";_ge "github.com/unidoc/unipdf/v3/internal/bitwise";_ed "github.com/unidoc/unipdf/v3/internal/jbig2/basic";_ded "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";
_ede "github.com/unidoc/unipdf/v3/internal/jbig2/decoder/arithmetic";_eded "github.com/unidoc/unipdf/v3/internal/jbig2/decoder/huffman";_f "github.com/unidoc/unipdf/v3/internal/jbig2/decoder/mmr";_bc "github.com/unidoc/unipdf/v3/internal/jbig2/encoder/arithmetic";
_geb "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_c "github.com/unidoc/unipdf/v3/internal/jbig2/internal";_da "image";_gd "io";_g "math";_aa "strings";_a "time";);type OrganizationType uint8 ;func (_gddd *GenericRegion )setParametersWithAt (_bbc bool ,_eceae byte ,_bcbf ,_fgb bool ,_fdc ,_bdde []int8 ,_fccf ,_ddfdc uint32 ,_efde *_ede .DecoderStats ,_gcc *_ede .Decoder ){_gddd .IsMMREncoded =_bbc ;
_gddd .GBTemplate =_eceae ;_gddd .IsTPGDon =_bcbf ;_gddd .GBAtX =_fdc ;_gddd .GBAtY =_bdde ;_gddd .RegionSegment .BitmapHeight =_ddfdc ;_gddd .RegionSegment .BitmapWidth =_fccf ;_gddd ._ffdb =nil ;_gddd .Bitmap =nil ;if _efde !=nil {_gddd ._fag =_efde ;
};if _gcc !=nil {_gddd ._cgcb =_gcc ;};_fg .Log .Trace ("\u005b\u0047\u0045\u004e\u0045\u0052\u0049\u0043\u002d\u0052\u0045\u0047\u0049O\u004e\u005d\u0020\u0073\u0065\u0074P\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020\u0053\u0044\u0041t\u003a\u0020\u0025\u0073",_gddd );
};func (_dgbg *PageInformationSegment )Init (h *Header ,r *_ge .Reader )(_bbcd error ){_dgbg ._fgebf =r ;if _bbcd =_dgbg .parseHeader ();_bbcd !=nil {return _geb .Wrap (_bbcd ,"P\u0061\u0067\u0065\u0049\u006e\u0066o\u0072\u006d\u0061\u0074\u0069\u006f\u006e\u0053\u0065g\u006d\u0065\u006et\u002eI\u006e\u0069\u0074","");
};return nil ;};func (_abef *SymbolDictionary )Init (h *Header ,r *_ge .Reader )error {_abef .Header =h ;_abef ._bdcd =r ;return _abef .parseHeader ();};func (_cbf *GenericRefinementRegion )overrideAtTemplate0 (_bce ,_fge ,_gdc ,_ffd ,_faa int )int {if _cbf ._abcd [0]{_bce &=0xfff7;
if _cbf .GrAtY [0]==0&&int (_cbf .GrAtX [0])>=-_faa {_bce |=(_ffd >>uint (7-(_faa +int (_cbf .GrAtX [0])))&0x1)<<3;}else {_bce |=_cbf .getPixel (_cbf .RegionBitmap ,_fge +int (_cbf .GrAtX [0]),_gdc +int (_cbf .GrAtY [0]))<<3;};};if _cbf ._abcd [1]{_bce &=0xefff;
if _cbf .GrAtY [1]==0&&int (_cbf .GrAtX [1])>=-_faa {_bce |=(_ffd >>uint (7-(_faa +int (_cbf .GrAtX [1])))&0x1)<<12;}else {_bce |=_cbf .getPixel (_cbf .ReferenceBitmap ,_fge +int (_cbf .GrAtX [1]),_gdc +int (_cbf .GrAtY [1]));};};return _bce ;};func (_aef *GenericRegion )GetRegionInfo ()*RegionSegment {return _aef .RegionSegment };
func (_eeec *TextRegion )InitEncode (globalSymbolsMap ,localSymbolsMap map[int ]int ,comps []int ,inLL *_ded .Points ,symbols *_ded .Bitmaps ,classIDs *_ed .IntSlice ,boxes *_ded .Boxes ,width ,height ,symBits int ){_eeec .RegionInfo =&RegionSegment {BitmapWidth :uint32 (width ),BitmapHeight :uint32 (height )};
_eeec ._gebfaf =globalSymbolsMap ;_eeec ._ffgd =localSymbolsMap ;_eeec ._cbgg =comps ;_eeec ._feaf =inLL ;_eeec ._gcff =symbols ;_eeec ._ecadf =classIDs ;_eeec ._cedd =boxes ;_eeec ._bdfe =symBits ;};func (_cabg *PatternDictionary )readGrayMax ()error {_cgea ,_bgg :=_cabg ._bfac .ReadBits (32);
if _bgg !=nil {return _bgg ;};_cabg .GrayMax =uint32 (_cgea &_g .MaxUint32 );return nil ;};func (_cc *GenericRefinementRegion )decodeSLTP ()(int ,error ){_cc .Template .setIndex (_cc ._abc );return _cc ._be .DecodeBit (_cc ._abc );};func (_ddef *SymbolDictionary )huffDecodeBmSize ()(int64 ,error ){if _ddef ._eedbe ==nil {var (_gebdc int ;
_debd error ;);if _ddef .SdHuffDecodeHeightSelection ==3{_gebdc ++;};if _ddef .SdHuffDecodeWidthSelection ==3{_gebdc ++;};_ddef ._eedbe ,_debd =_ddef .getUserTable (_gebdc );if _debd !=nil {return 0,_debd ;};};return _ddef ._eedbe .Decode (_ddef ._bdcd );
};func (_fdaa *HalftoneRegion )computeGrayScalePlanes (_bafa []*_ded .Bitmap ,_geac int )([][]int ,error ){_fage :=make ([][]int ,_fdaa .HGridHeight );for _bbgfg :=0;_bbgfg < len (_fage );_bbgfg ++{_fage [_bbgfg ]=make ([]int ,_fdaa .HGridWidth );};for _defg :=0;
_defg < int (_fdaa .HGridHeight );_defg ++{for _ceac :=0;_ceac < int (_fdaa .HGridWidth );_ceac +=8{var _cfgc int ;if _gafa :=int (_fdaa .HGridWidth )-_ceac ;_gafa > 8{_cfgc =8;}else {_cfgc =_gafa ;};_bdg :=_bafa [0].GetByteIndex (_ceac ,_defg );for _gfgg :=0;
_gfgg < _cfgc ;_gfgg ++{_cda :=_gfgg +_ceac ;_fage [_defg ][_cda ]=0;for _gge :=0;_gge < _geac ;_gge ++{_gfbf ,_dbg :=_bafa [_gge ].GetByte (_bdg );if _dbg !=nil {return nil ,_dbg ;};_eaa :=_gfbf >>uint (7-_cda &7);_fafb :=_eaa &1;_becab :=1<<uint (_gge );
_bga :=int (_fafb )*_becab ;_fage [_defg ][_cda ]+=_bga ;};};};};return _fage ,nil ;};func (_dgeeb *GenericRegion )decodeTemplate2 (_cgce ,_aabb ,_cfcg int ,_ecad ,_ffdg int )(_gc error ){const _befe ="\u0064e\u0063o\u0064\u0065\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0032";
var (_baa ,_egde int ;_gfce ,_fcbf int ;_fbf byte ;_cgab ,_abbg int ;);if _cgce >=1{_fbf ,_gc =_dgeeb .Bitmap .GetByte (_ffdg );if _gc !=nil {return _geb .Wrap (_gc ,_befe ,"\u006ci\u006ee\u004e\u0075\u006d\u0062\u0065\u0072\u0020\u003e\u003d\u0020\u0031");
};_gfce =int (_fbf );};if _cgce >=2{_fbf ,_gc =_dgeeb .Bitmap .GetByte (_ffdg -_dgeeb .Bitmap .RowStride );if _gc !=nil {return _geb .Wrap (_gc ,_befe ,"\u006ci\u006ee\u004e\u0075\u006d\u0062\u0065\u0072\u0020\u003e\u003d\u0020\u0032");};_fcbf =int (_fbf )<<4;
};_baa =(_gfce >>3&0x7c)|(_fcbf >>3&0x380);for _dea :=0;_dea < _cfcg ;_dea =_cgab {var (_fde byte ;_ffea int ;);_cgab =_dea +8;if _bad :=_aabb -_dea ;_bad > 8{_ffea =8;}else {_ffea =_bad ;};if _cgce > 0{_gfce <<=8;if _cgab < _aabb {_fbf ,_gc =_dgeeb .Bitmap .GetByte (_ffdg +1);
if _gc !=nil {return _geb .Wrap (_gc ,_befe ,"\u006c\u0069\u006e\u0065\u004e\u0075\u006d\u0062\u0065r\u0020\u003e\u0020\u0030");};_gfce |=int (_fbf );};};if _cgce > 1{_fcbf <<=8;if _cgab < _aabb {_fbf ,_gc =_dgeeb .Bitmap .GetByte (_ffdg -_dgeeb .Bitmap .RowStride +1);
if _gc !=nil {return _geb .Wrap (_gc ,_befe ,"\u006c\u0069\u006e\u0065\u004e\u0075\u006d\u0062\u0065r\u0020\u003e\u0020\u0031");};_fcbf |=int (_fbf )<<4;};};for _ccf :=0;_ccf < _ffea ;_ccf ++{_facg :=uint (10-_ccf );if _dgeeb ._cac {_egde =_dgeeb .overrideAtTemplate2 (_baa ,_dea +_ccf ,_cgce ,int (_fde ),_ccf );
_dgeeb ._fag .SetIndex (int32 (_egde ));}else {_dgeeb ._fag .SetIndex (int32 (_baa ));};_abbg ,_gc =_dgeeb ._cgcb .DecodeBit (_dgeeb ._fag );if _gc !=nil {return _geb .Wrap (_gc ,_befe ,"");};_fde |=byte (_abbg <<uint (7-_ccf ));_baa =((_baa &0x1bd)<<1)|_abbg |((_gfce >>_facg )&0x4)|((_fcbf >>_facg )&0x80);
};if _fbca :=_dgeeb .Bitmap .SetByte (_ecad ,_fde );_fbca !=nil {return _geb .Wrap (_fbca ,_befe ,"");};_ecad ++;_ffdg ++;};return nil ;};func (_agge *GenericRegion )decodeTemplate3 (_bba ,_gbe ,_bdee int ,_dfbd ,_bacf int )(_fcc error ){const _bda ="\u0064e\u0063o\u0064\u0065\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0033";
var (_fdb ,_bae int ;_bbb int ;_dfca byte ;_edde ,_deaf int ;);if _bba >=1{_dfca ,_fcc =_agge .Bitmap .GetByte (_bacf );if _fcc !=nil {return _geb .Wrap (_fcc ,_bda ,"\u006ci\u006e\u0065\u0020\u003e\u003d\u00201");};_bbb =int (_dfca );};_fdb =(_bbb >>1)&0x70;
for _aegf :=0;_aegf < _bdee ;_aegf =_edde {var (_bbee byte ;_ecea int ;);_edde =_aegf +8;if _dfbe :=_gbe -_aegf ;_dfbe > 8{_ecea =8;}else {_ecea =_dfbe ;};if _bba >=1{_bbb <<=8;if _edde < _gbe {_dfca ,_fcc =_agge .Bitmap .GetByte (_bacf +1);if _fcc !=nil {return _geb .Wrap (_fcc ,_bda ,"\u0069\u006e\u006e\u0065\u0072\u0020\u002d\u0020\u006c\u0069\u006e\u0065 \u003e\u003d\u0020\u0031");
};_bbb |=int (_dfca );};};for _dgc :=0;_dgc < _ecea ;_dgc ++{if _agge ._cac {_bae =_agge .overrideAtTemplate3 (_fdb ,_aegf +_dgc ,_bba ,int (_bbee ),_dgc );_agge ._fag .SetIndex (int32 (_bae ));}else {_agge ._fag .SetIndex (int32 (_fdb ));};_deaf ,_fcc =_agge ._cgcb .DecodeBit (_agge ._fag );
if _fcc !=nil {return _geb .Wrap (_fcc ,_bda ,"");};_bbee |=byte (_deaf )<<byte (7-_dgc );_fdb =((_fdb &0x1f7)<<1)|_deaf |((_bbb >>uint (8-_dgc ))&0x010);};if _add :=_agge .Bitmap .SetByte (_dfbd ,_bbee );_add !=nil {return _geb .Wrap (_add ,_bda ,"");
};_dfbd ++;_bacf ++;};return nil ;};func (_aaead *HalftoneRegion )GetPatterns ()([]*_ded .Bitmap ,error ){var (_cbgef []*_ded .Bitmap ;_abad error ;);for _ ,_dfea :=range _aaead ._caefa .RTSegments {var _baba Segmenter ;_baba ,_abad =_dfea .GetSegmentData ();
if _abad !=nil {_fg .Log .Debug ("\u0047e\u0074\u0053\u0065\u0067m\u0065\u006e\u0074\u0044\u0061t\u0061 \u0066a\u0069\u006c\u0065\u0064\u003a\u0020\u0025v",_abad );return nil ,_abad ;};_caeb ,_beca :=_baba .(*PatternDictionary );if !_beca {_abad =_de .Errorf ("\u0072e\u006c\u0061t\u0065\u0064\u0020\u0073e\u0067\u006d\u0065n\u0074\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0070at\u0074\u0065\u0072n\u0020\u0064i\u0063\u0074\u0069\u006f\u006e\u0061r\u0079\u003a \u0025\u0054",_baba );
return nil ,_abad ;};var _fgeb []*_ded .Bitmap ;_fgeb ,_abad =_caeb .GetDictionary ();if _abad !=nil {_fg .Log .Debug ("\u0070\u0061\u0074\u0074\u0065\u0072\u006e\u0020\u0047\u0065\u0074\u0044\u0069\u0063\u0074i\u006fn\u0061\u0072\u0079\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_abad );
return nil ,_abad ;};_cbgef =append (_cbgef ,_fgeb ...);};return _cbgef ,nil ;};func (_abd *GenericRegion )InitEncode (bm *_ded .Bitmap ,xLoc ,yLoc ,template int ,duplicateLineRemoval bool )error {const _fab ="\u0047e\u006e\u0065\u0072\u0069\u0063\u0052\u0065\u0067\u0069\u006f\u006e.\u0049\u006e\u0069\u0074\u0045\u006e\u0063\u006f\u0064\u0065";
if bm ==nil {return _geb .Error (_fab ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if xLoc < 0||yLoc < 0{return _geb .Error (_fab ,"\u0078\u0020\u0061\u006e\u0064\u0020\u0079\u0020\u006c\u006f\u0063\u0061\u0074i\u006f\u006e\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0074h\u0061\u006e\u0020\u0030");
};_abd .Bitmap =bm ;_abd .GBTemplate =byte (template );switch _abd .GBTemplate {case 0:_abd .GBAtX =[]int8 {3,-3,2,-2};_abd .GBAtY =[]int8 {-1,-1,-2,-2};case 1:_abd .GBAtX =[]int8 {3};_abd .GBAtY =[]int8 {-1};case 2,3:_abd .GBAtX =[]int8 {2};_abd .GBAtY =[]int8 {-1};
default:return _geb .Errorf (_fab ,"\u0070\u0072o\u0076\u0069\u0064\u0065\u0064 \u0074\u0065\u006d\u0070\u006ca\u0074\u0065\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0074\u0020\u0069\u006e\u0020\u0076\u0061\u006c\u0069\u0064\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0030\u002c\u0031\u002c\u0032\u002c\u0033\u007d",template );
};_abd .RegionSegment =&RegionSegment {BitmapHeight :uint32 (bm .Height ),BitmapWidth :uint32 (bm .Width ),XLocation :uint32 (xLoc ),YLocation :uint32 (yLoc )};_abd .IsTPGDon =duplicateLineRemoval ;return nil ;};func (_efab *TextRegion )blit (_cccf *_ded .Bitmap ,_eafbea int64 )error {if _efab .IsTransposed ==0&&(_efab .ReferenceCorner ==2||_efab .ReferenceCorner ==3){_efab ._egge +=int64 (_cccf .Width -1);
}else if _efab .IsTransposed ==1&&(_efab .ReferenceCorner ==0||_efab .ReferenceCorner ==2){_efab ._egge +=int64 (_cccf .Height -1);};_ffbd :=_efab ._egge ;if _efab .IsTransposed ==1{_ffbd ,_eafbea =_eafbea ,_ffbd ;};switch _efab .ReferenceCorner {case 0:_eafbea -=int64 (_cccf .Height -1);
case 2:_eafbea -=int64 (_cccf .Height -1);_ffbd -=int64 (_cccf .Width -1);case 3:_ffbd -=int64 (_cccf .Width -1);};_dcbb :=_ded .Blit (_cccf ,_efab .RegionBitmap ,int (_ffbd ),int (_eafbea ),_efab .CombinationOperator );if _dcbb !=nil {return _dcbb ;};
if _efab .IsTransposed ==0&&(_efab .ReferenceCorner ==0||_efab .ReferenceCorner ==1){_efab ._egge +=int64 (_cccf .Width -1);};if _efab .IsTransposed ==1&&(_efab .ReferenceCorner ==1||_efab .ReferenceCorner ==3){_efab ._egge +=int64 (_cccf .Height -1);};
return nil ;};func (_aadf *PageInformationSegment )checkInput ()error {if _aadf .PageBMHeight ==_g .MaxInt32 {if !_aadf .IsStripe {_fg .Log .Debug ("P\u0061\u0067\u0065\u0049\u006e\u0066\u006f\u0072\u006da\u0074\u0069\u006f\u006e\u0053\u0065\u0067me\u006e\u0074\u002e\u0049s\u0053\u0074\u0072\u0069\u0070\u0065\u0020\u0073\u0068ou\u006c\u0064 \u0062\u0065\u0020\u0074\u0072\u0075\u0065\u002e");
};};return nil ;};func (_deg *GenericRegion )Size ()int {return _deg .RegionSegment .Size ()+1+2*len (_deg .GBAtX )};func (_fafe *SymbolDictionary )decodeAggregate (_gaff ,_fddce uint32 )error {var (_agba int64 ;_edda error ;);if _fafe .IsHuffmanEncoded {_agba ,_edda =_fafe .huffDecodeRefAggNInst ();
if _edda !=nil {return _edda ;};}else {_gdab ,_gbbe :=_fafe ._cbgea .DecodeInt (_fafe ._abce );if _gbbe !=nil {return _gbbe ;};_agba =int64 (_gdab );};if _agba > 1{return _fafe .decodeThroughTextRegion (_gaff ,_fddce ,uint32 (_agba ));}else if _agba ==1{return _fafe .decodeRefinedSymbol (_gaff ,_fddce );
};return nil ;};func (_eagb *PatternDictionary )computeSegmentDataStructure ()error {_eagb .DataOffset =_eagb ._bfac .AbsolutePosition ();_eagb .DataHeaderLength =_eagb .DataOffset -_eagb .DataHeaderOffset ;_eagb .DataLength =int64 (_eagb ._bfac .AbsoluteLength ())-_eagb .DataHeaderLength ;
return nil ;};func (_acac *PageInformationSegment )readMaxStripeSize ()error {_daba ,_beaa :=_acac ._fgebf .ReadBits (15);if _beaa !=nil {return _beaa ;};_acac .MaxStripeSize =uint16 (_daba &_g .MaxUint16 );return nil ;};func (_feeb *HalftoneRegion )Init (hd *Header ,r *_ge .Reader )error {_feeb ._decab =r ;
_feeb ._caefa =hd ;_feeb .RegionSegment =NewRegionSegment (r );return _feeb .parseHeader ();};func (_begg *PageInformationSegment )encodeStripingInformation (_gbgb _ge .BinaryWriter )(_badg int ,_gecga error ){const _agbc ="\u0065n\u0063\u006f\u0064\u0065S\u0074\u0072\u0069\u0070\u0069n\u0067I\u006ef\u006f\u0072\u006d\u0061\u0074\u0069\u006fn";
if !_begg .IsStripe {if _badg ,_gecga =_gbgb .Write ([]byte {0x00,0x00});_gecga !=nil {return 0,_geb .Wrap (_gecga ,_agbc ,"n\u006f\u0020\u0073\u0074\u0072\u0069\u0070\u0069\u006e\u0067");};return _badg ,nil ;};_fgbg :=make ([]byte ,2);_b .BigEndian .PutUint16 (_fgbg ,_begg .MaxStripeSize |1<<15);
if _badg ,_gecga =_gbgb .Write (_fgbg );_gecga !=nil {return 0,_geb .Wrapf (_gecga ,_agbc ,"\u0073\u0074\u0072i\u0070\u0069\u006e\u0067\u003a\u0020\u0025\u0064",_begg .MaxStripeSize );};return _badg ,nil ;};func (_gebb *TextRegion )getUserTable (_gbbae int )(_eded .Tabler ,error ){const _bfb ="\u0067\u0065\u0074U\u0073\u0065\u0072\u0054\u0061\u0062\u006c\u0065";
var _ffdge int ;for _ ,_faag :=range _gebb .Header .RTSegments {if _faag .Type ==53{if _ffdge ==_gbbae {_dfdb ,_bddee :=_faag .GetSegmentData ();if _bddee !=nil {return nil ,_bddee ;};_dfeaa ,_fdacc :=_dfdb .(*TableSegment );if !_fdacc {_fg .Log .Debug (_de .Sprintf ("\u0073\u0065\u0067\u006d\u0065\u006e\u0074 \u0077\u0069\u0074h\u0020\u0054\u0079p\u0065\u00205\u0033\u0020\u002d\u0020\u0061\u006ed\u0020in\u0064\u0065\u0078\u003a\u0020\u0025\u0064\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0054\u0061\u0062\u006c\u0065\u0053\u0065\u0067\u006d\u0065\u006e\u0074",_faag .SegmentNumber ));
return nil ,_geb .Error (_bfb ,"\u0073\u0065\u0067\u006d\u0065\u006e\u0074 \u0077\u0069\u0074h\u0020\u0054\u0079\u0070e\u0020\u0035\u0033\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u002a\u0054\u0061\u0062\u006c\u0065\u0053\u0065\u0067\u006d\u0065\u006e\u0074");
};return _eded .NewEncodedTable (_dfeaa );};_ffdge ++;};};return nil ,nil ;};func (_bgegd *TextRegion )readAmountOfSymbolInstances ()error {_daae ,_dgfa :=_bgegd ._ebac .ReadBits (32);if _dgfa !=nil {return _dgfa ;};_bgegd .NumberOfSymbolInstances =uint32 (_daae &_g .MaxUint32 );
_eccg :=_bgegd .RegionInfo .BitmapWidth *_bgegd .RegionInfo .BitmapHeight ;if _eccg < _bgegd .NumberOfSymbolInstances {_fg .Log .Debug ("\u004c\u0069\u006d\u0069t\u0069\u006e\u0067\u0020t\u0068\u0065\u0020n\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020d\u0065\u0063\u006f\u0064e\u0064\u0020\u0073\u0079m\u0062\u006f\u006c\u0020\u0069n\u0073\u0074\u0061\u006e\u0063\u0065\u0073 \u0074\u006f\u0020\u006f\u006ee\u0020\u0070\u0065\u0072\u0020\u0070\u0069\u0078\u0065l\u0020\u0028\u0020\u0025\u0064\u0020\u0069\u006e\u0073\u0074\u0065\u0061\u0064\u0020\u006f\u0066\u0020\u0025\u0064\u0029",_eccg ,_bgegd .NumberOfSymbolInstances );
_bgegd .NumberOfSymbolInstances =_eccg ;};return nil ;};func (_cce *GenericRefinementRegion )decodeOptimized (_ade ,_ead ,_dd ,_bg ,_abf ,_ddc ,_agg int )error {var (_fd error ;_ef int ;_gff int ;);_bac :=_ade -int (_cce .ReferenceDY );if _eaf :=int (-_cce .ReferenceDX );
_eaf > 0{_ef =_eaf ;};_gfa :=_cce .ReferenceBitmap .GetByteIndex (_ef ,_bac );if _cce .ReferenceDX > 0{_gff =int (_cce .ReferenceDX );};_fed :=_cce .RegionBitmap .GetByteIndex (_gff ,_ade );switch _cce .TemplateID {case 0:_fd =_cce .decodeTemplate (_ade ,_ead ,_dd ,_bg ,_abf ,_ddc ,_agg ,_fed ,_bac ,_gfa ,_cce ._gb );
case 1:_fd =_cce .decodeTemplate (_ade ,_ead ,_dd ,_bg ,_abf ,_ddc ,_agg ,_fed ,_bac ,_gfa ,_cce ._eb );};return _fd ;};func (_cdba *HalftoneRegion )shiftAndFill (_dfed int )int {_dfed >>=8;if _dfed < 0{_gege :=int (_g .Log (float64 (_fgc (_dfed )))/_g .Log (2));
_gfgd :=31-_gege ;for _cacf :=1;_cacf < _gfgd ;_cacf ++{_dfed |=1<<uint (31-_cacf );};};return _dfed ;};type Regioner interface{GetRegionBitmap ()(*_ded .Bitmap ,error );GetRegionInfo ()*RegionSegment ;};func (_bcef *TextRegion )readUseRefinement ()error {if !_bcef .UseRefinement ||_bcef .SbrTemplate !=0{return nil ;
};var (_dfggf byte ;_dgbd error ;);_bcef .SbrATX =make ([]int8 ,2);_bcef .SbrATY =make ([]int8 ,2);_dfggf ,_dgbd =_bcef ._ebac .ReadByte ();if _dgbd !=nil {return _dgbd ;};_bcef .SbrATX [0]=int8 (_dfggf );_dfggf ,_dgbd =_bcef ._ebac .ReadByte ();if _dgbd !=nil {return _dgbd ;
};_bcef .SbrATY [0]=int8 (_dfggf );_dfggf ,_dgbd =_bcef ._ebac .ReadByte ();if _dgbd !=nil {return _dgbd ;};_bcef .SbrATX [1]=int8 (_dfggf );_dfggf ,_dgbd =_bcef ._ebac .ReadByte ();if _dgbd !=nil {return _dgbd ;};_bcef .SbrATY [1]=int8 (_dfggf );return nil ;
};func (_ccd *GenericRefinementRegion )updateOverride ()error {if _ccd .GrAtX ==nil ||_ccd .GrAtY ==nil {return _e .New ("\u0041\u0054\u0020\u0070\u0069\u0078\u0065\u006c\u0073\u0020\u006e\u006ft\u0020\u0073\u0065\u0074");};if len (_ccd .GrAtX )!=len (_ccd .GrAtY ){return _e .New ("A\u0054\u0020\u0070\u0069xe\u006c \u0069\u006e\u0063\u006f\u006es\u0069\u0073\u0074\u0065\u006e\u0074");
};_ccd ._abcd =make ([]bool ,len (_ccd .GrAtX ));switch _ccd .TemplateID {case 0:if _ccd .GrAtX [0]!=-1&&_ccd .GrAtY [0]!=-1{_ccd ._abcd [0]=true ;_ccd ._edb =true ;};if _ccd .GrAtX [1]!=-1&&_ccd .GrAtY [1]!=-1{_ccd ._abcd [1]=true ;_ccd ._edb =true ;};
case 1:_ccd ._edb =false ;};return nil ;};type GenericRegion struct{_ddbc *_ge .Reader ;DataHeaderOffset int64 ;DataHeaderLength int64 ;DataOffset int64 ;DataLength int64 ;RegionSegment *RegionSegment ;UseExtTemplates bool ;IsTPGDon bool ;GBTemplate byte ;
IsMMREncoded bool ;UseMMR bool ;GBAtX []int8 ;GBAtY []int8 ;GBAtOverride []bool ;_cac bool ;Bitmap *_ded .Bitmap ;_cgcb *_ede .Decoder ;_fag *_ede .DecoderStats ;_ffdb *_f .Decoder ;};func (_fae *Header )Encode (w _ge .BinaryWriter )(_efff int ,_acce error ){const _dabc ="\u0048\u0065\u0061d\u0065\u0072\u002e\u0057\u0072\u0069\u0074\u0065";
var _gagc _ge .BinaryWriter ;_fg .Log .Trace ("\u005b\u0053\u0045G\u004d\u0045\u004e\u0054-\u0048\u0045\u0041\u0044\u0045\u0052\u005d[\u0045\u004e\u0043\u004f\u0044\u0045\u005d\u0020\u0042\u0065\u0067\u0069\u006e\u0073");defer func (){if _acce !=nil {_fg .Log .Trace ("[\u0053\u0045\u0047\u004d\u0045\u004eT\u002d\u0048\u0045\u0041\u0044\u0045R\u005d\u005b\u0045\u004e\u0043\u004f\u0044E\u005d\u0020\u0046\u0061\u0069\u006c\u0065\u0064\u002e\u0020%\u0076",_acce );
}else {_fg .Log .Trace ("\u005b\u0053\u0045\u0047ME\u004e\u0054\u002d\u0048\u0045\u0041\u0044\u0045\u0052\u005d\u0020\u0025\u0076",_fae );_fg .Log .Trace ("\u005b\u0053\u0045\u0047\u004d\u0045N\u0054\u002d\u0048\u0045\u0041\u0044\u0045\u0052\u005d\u005b\u0045\u004e\u0043O\u0044\u0045\u005d\u0020\u0046\u0069\u006ei\u0073\u0068\u0065\u0064");
};}();w .FinishByte ();if _fae .SegmentData !=nil {_dfbf ,_fbgf :=_fae .SegmentData .(SegmentEncoder );if !_fbgf {return 0,_geb .Errorf (_dabc ,"\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u003a\u0020\u0025\u0054\u0020\u0064\u006f\u0065s\u006e\u0027\u0074\u0020\u0069\u006d\u0070\u006c\u0065\u006d\u0065\u006e\u0074 \u0053\u0065\u0067\u006d\u0065\u006e\u0074\u0045\u006e\u0063\u006f\u0064er\u0020\u0069\u006e\u0074\u0065\u0072\u0066\u0061\u0063\u0065",_fae .SegmentData );
};_gagc =_ge .BufferedMSB ();_efff ,_acce =_dfbf .Encode (_gagc );if _acce !=nil {return 0,_geb .Wrap (_acce ,_dabc ,"");};_fae .SegmentDataLength =uint64 (_efff );};if _fae .pageSize ()==4{_fae .PageAssociationFieldSize =true ;};var _eacc int ;_eacc ,_acce =_fae .writeSegmentNumber (w );
if _acce !=nil {return 0,_geb .Wrap (_acce ,_dabc ,"");};_efff +=_eacc ;if _acce =_fae .writeFlags (w );_acce !=nil {return _efff ,_geb .Wrap (_acce ,_dabc ,"");};_efff ++;_eacc ,_acce =_fae .writeReferredToCount (w );if _acce !=nil {return 0,_geb .Wrap (_acce ,_dabc ,"");
};_efff +=_eacc ;_eacc ,_acce =_fae .writeReferredToSegments (w );if _acce !=nil {return 0,_geb .Wrap (_acce ,_dabc ,"");};_efff +=_eacc ;_eacc ,_acce =_fae .writeSegmentPageAssociation (w );if _acce !=nil {return 0,_geb .Wrap (_acce ,_dabc ,"");};_efff +=_eacc ;
_eacc ,_acce =_fae .writeSegmentDataLength (w );if _acce !=nil {return 0,_geb .Wrap (_acce ,_dabc ,"");};_efff +=_eacc ;_fae .HeaderLength =int64 (_efff )-int64 (_fae .SegmentDataLength );if _gagc !=nil {if _ ,_acce =w .Write (_gagc .Data ());_acce !=nil {return _efff ,_geb .Wrap (_acce ,_dabc ,"\u0077r\u0069t\u0065\u0020\u0073\u0065\u0067m\u0065\u006et\u0020\u0064\u0061\u0074\u0061");
};};return _efff ,nil ;};func (_gbcdd *TextRegion )decodeID ()(int64 ,error ){if _gbcdd .IsHuffmanEncoded {if _gbcdd ._fefb ==nil {_ggfbf ,_dcce :=_gbcdd ._ebac .ReadBits (byte (_gbcdd ._acacc ));return int64 (_ggfbf ),_dcce ;};return _gbcdd ._fefb .Decode (_gbcdd ._ebac );
};return _gbcdd ._cacbc .DecodeIAID (uint64 (_gbcdd ._acacc ),_gbcdd ._eggf );};func (_ecfc *GenericRegion )decodeLine (_bca ,_ffdf ,_eege int )error {const _cdb ="\u0064\u0065\u0063\u006f\u0064\u0065\u004c\u0069\u006e\u0065";_deea :=_ecfc .Bitmap .GetByteIndex (0,_bca );
_aba :=_deea -_ecfc .Bitmap .RowStride ;switch _ecfc .GBTemplate {case 0:if !_ecfc .UseExtTemplates {return _ecfc .decodeTemplate0a (_bca ,_ffdf ,_eege ,_deea ,_aba );};return _ecfc .decodeTemplate0b (_bca ,_ffdf ,_eege ,_deea ,_aba );case 1:return _ecfc .decodeTemplate1 (_bca ,_ffdf ,_eege ,_deea ,_aba );
case 2:return _ecfc .decodeTemplate2 (_bca ,_ffdf ,_eege ,_deea ,_aba );case 3:return _ecfc .decodeTemplate3 (_bca ,_ffdf ,_eege ,_deea ,_aba );};return _geb .Errorf (_cdb ,"\u0069\u006e\u0076a\u006c\u0069\u0064\u0020G\u0042\u0054\u0065\u006d\u0070\u006c\u0061t\u0065\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u003a\u0020\u0025\u0064",_ecfc .GBTemplate );
};func (_dbbef *SymbolDictionary )setRetainedCodingContexts (_fddf *SymbolDictionary ){_dbbef ._cbgea =_fddf ._cbgea ;_dbbef .IsHuffmanEncoded =_fddf .IsHuffmanEncoded ;_dbbef .UseRefinementAggregation =_fddf .UseRefinementAggregation ;_dbbef .SdTemplate =_fddf .SdTemplate ;
_dbbef .SdrTemplate =_fddf .SdrTemplate ;_dbbef .SdATX =_fddf .SdATX ;_dbbef .SdATY =_fddf .SdATY ;_dbbef .SdrATX =_fddf .SdrATX ;_dbbef .SdrATY =_fddf .SdrATY ;_dbbef ._bfad =_fddf ._bfad ;};func (_eaaa *TextRegion )decodeSymInRefSize ()(int64 ,error ){const _bdcf ="\u0064e\u0063o\u0064\u0065\u0053\u0079\u006dI\u006e\u0052e\u0066\u0053\u0069\u007a\u0065";
if _eaaa .SbHuffRSize ==0{_egeg ,_cagca :=_eded .GetStandardTable (1);if _cagca !=nil {return 0,_geb .Wrap (_cagca ,_bdcf ,"");};return _egeg .Decode (_eaaa ._ebac );};if _eaaa ._gdg ==nil {var (_affef int ;_adea error ;);if _eaaa .SbHuffFS ==3{_affef ++;
};if _eaaa .SbHuffDS ==3{_affef ++;};if _eaaa .SbHuffDT ==3{_affef ++;};if _eaaa .SbHuffRDWidth ==3{_affef ++;};if _eaaa .SbHuffRDHeight ==3{_affef ++;};if _eaaa .SbHuffRDX ==3{_affef ++;};if _eaaa .SbHuffRDY ==3{_affef ++;};_eaaa ._gdg ,_adea =_eaaa .getUserTable (_affef );
if _adea !=nil {return 0,_geb .Wrap (_adea ,_bdcf ,"");};};_edfd ,_ddfg :=_eaaa ._gdg .Decode (_eaaa ._ebac );if _ddfg !=nil {return 0,_geb .Wrap (_ddfg ,_bdcf ,"");};return _edfd ,nil ;};func (_ecbe *PatternDictionary )readIsMMREncoded ()error {_agfg ,_dggc :=_ecbe ._bfac .ReadBit ();
if _dggc !=nil {return _dggc ;};if _agfg !=0{_ecbe .IsMMREncoded =true ;};return nil ;};func (_caee *PageInformationSegment )CombinationOperatorOverrideAllowed ()bool {return _caee ._bgcdb };func (_ad *EndOfStripe )LineNumber ()int {return _ad ._gebf };
func (_gaef *SymbolDictionary )InitEncode (symbols *_ded .Bitmaps ,symbolList []int ,symbolMap map[int ]int ,unborderSymbols bool )error {const _agbe ="S\u0079\u006d\u0062\u006f\u006c\u0044i\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u002eI\u006e\u0069\u0074E\u006ec\u006f\u0064\u0065";
_gaef .SdATX =[]int8 {3,-3,2,-2};_gaef .SdATY =[]int8 {-1,-1,-2,-2};_gaef ._ebeg =symbols ;_gaef ._cfba =make ([]int ,len (symbolList ));copy (_gaef ._cfba ,symbolList );if len (_gaef ._cfba )!=_gaef ._ebeg .Size (){return _geb .Error (_agbe ,"s\u0079\u006d\u0062\u006f\u006c\u0073\u0020\u0061\u006e\u0064\u0020\u0073\u0079\u006d\u0062\u006f\u006c\u004ci\u0073\u0074\u0020\u006f\u0066\u0020\u0064\u0069\u0066\u0066er\u0065\u006e\u0074 \u0073i\u007a\u0065");
};_gaef .NumberOfNewSymbols =uint32 (symbols .Size ());_gaef .NumberOfExportedSymbols =uint32 (symbols .Size ());_gaef ._eead =symbolMap ;_gaef ._cdaa =unborderSymbols ;return nil ;};func (_eddb *Header )readHeaderFlags ()error {const _beb ="\u0072e\u0061d\u0048\u0065\u0061\u0064\u0065\u0072\u0046\u006c\u0061\u0067\u0073";
_bff ,_dgeb :=_eddb .Reader .ReadBit ();if _dgeb !=nil {return _geb .Wrap (_dgeb ,_beb ,"r\u0065\u0074\u0061\u0069\u006e\u0020\u0066\u006c\u0061\u0067");};if _bff !=0{_eddb .RetainFlag =true ;};_bff ,_dgeb =_eddb .Reader .ReadBit ();if _dgeb !=nil {return _geb .Wrap (_dgeb ,_beb ,"\u0070\u0061g\u0065\u0020\u0061s\u0073\u006f\u0063\u0069\u0061\u0074\u0069\u006f\u006e");
};if _bff !=0{_eddb .PageAssociationFieldSize =true ;};_ccc ,_dgeb :=_eddb .Reader .ReadBits (6);if _dgeb !=nil {return _geb .Wrap (_dgeb ,_beb ,"\u0073\u0065\u0067m\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065");};_eddb .Type =Type (int (_ccc ));return nil ;
};func (_ccee *GenericRegion )Init (h *Header ,r *_ge .Reader )error {_ccee .RegionSegment =NewRegionSegment (r );_ccee ._ddbc =r ;return _ccee .parseHeader ();};func (_gbdf *SymbolDictionary )checkInput ()error {if _gbdf .SdHuffDecodeHeightSelection ==2{_fg .Log .Debug ("\u0053\u0079\u006d\u0062\u006fl\u0020\u0044\u0069\u0063\u0074i\u006fn\u0061\u0072\u0079\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0020\u0048\u0065\u0069\u0067\u0068\u0074\u0020\u0053e\u006c\u0065\u0063\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006e\u006f\u0074\u0020\u0070\u0065r\u006d\u0069\u0074\u0074\u0065\u0064",_gbdf .SdHuffDecodeHeightSelection );
};if _gbdf .SdHuffDecodeWidthSelection ==2{_fg .Log .Debug ("\u0053\u0079\u006d\u0062\u006f\u006c\u0020\u0044\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079 \u0044\u0065\u0063\u006f\u0064\u0065\u0020\u0057\u0069\u0064t\u0068\u0020\u0053\u0065\u006c\u0065\u0063\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064\u0020\u0076\u0061l\u0075\u0065\u0020\u006e\u006f\u0074 \u0070\u0065r\u006d\u0069t\u0074e\u0064",_gbdf .SdHuffDecodeWidthSelection );
};if _gbdf .IsHuffmanEncoded {if _gbdf .SdTemplate !=0{_fg .Log .Debug ("\u0053\u0044T\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0020\u003d\u0020\u0025\u0064\u0020\u0028\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e \u0030\u0029",_gbdf .SdTemplate );
};if !_gbdf .UseRefinementAggregation {if !_gbdf .UseRefinementAggregation {if _gbdf ._gcfb {_fg .Log .Debug ("\u0049\u0073\u0043\u006f\u0064\u0069\u006e\u0067C\u006f\u006e\u0074ex\u0074\u0052\u0065\u0074\u0061\u0069n\u0065\u0064\u0020\u003d\u0020\u0074\u0072\u0075\u0065\u0020\u0028\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0066\u0061\u006cs\u0065\u0029");
_gbdf ._gcfb =false ;};if _gbdf ._afgac {_fg .Log .Debug ("\u0069s\u0043\u006fd\u0069\u006e\u0067\u0043o\u006e\u0074\u0065x\u0074\u0055\u0073\u0065\u0064\u0020\u003d\u0020\u0074ru\u0065\u0020\u0028s\u0068\u006fu\u006c\u0064\u0020\u0062\u0065\u0020f\u0061\u006cs\u0065\u0029");
_gbdf ._afgac =false ;};};};}else {if _gbdf .SdHuffBMSizeSelection !=0{_fg .Log .Debug ("\u0053\u0064\u0048\u0075\u0066\u0066B\u004d\u0053\u0069\u007a\u0065\u0053\u0065\u006c\u0065\u0063\u0074\u0069\u006fn\u0020\u0073\u0068\u006f\u0075\u006c\u0064 \u0062\u0065\u0020\u0030");
_gbdf .SdHuffBMSizeSelection =0;};if _gbdf .SdHuffDecodeWidthSelection !=0{_fg .Log .Debug ("\u0053\u0064\u0048\u0075\u0066\u0066\u0044\u0065\u0063\u006f\u0064\u0065\u0057\u0069\u0064\u0074\u0068\u0053\u0065\u006c\u0065\u0063\u0074\u0069o\u006e\u0020\u0073\u0068\u006fu\u006c\u0064 \u0062\u0065\u0020\u0030");
_gbdf .SdHuffDecodeWidthSelection =0;};if _gbdf .SdHuffDecodeHeightSelection !=0{_fg .Log .Debug ("\u0053\u0064\u0048\u0075\u0066\u0066\u0044\u0065\u0063\u006f\u0064\u0065\u0048e\u0069\u0067\u0068\u0074\u0053\u0065l\u0065\u0063\u0074\u0069\u006f\u006e\u0020\u0073\u0068\u006f\u0075\u006c\u0064 \u0062\u0065\u0020\u0030");
_gbdf .SdHuffDecodeHeightSelection =0;};};if !_gbdf .UseRefinementAggregation {if _gbdf .SdrTemplate !=0{_fg .Log .Debug ("\u0053\u0044\u0052\u0054\u0065\u006d\u0070\u006c\u0061\u0074e\u0020\u003d\u0020\u0025\u0064\u0020\u0028s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0030\u0029",_gbdf .SdrTemplate );
_gbdf .SdrTemplate =0;};};if !_gbdf .IsHuffmanEncoded ||!_gbdf .UseRefinementAggregation {if _gbdf .SdHuffAggInstanceSelection {_fg .Log .Debug ("\u0053d\u0048\u0075f\u0066\u0041\u0067g\u0049\u006e\u0073\u0074\u0061\u006e\u0063e\u0053\u0065\u006c\u0065\u0063\u0074i\u006f\u006e\u0020\u003d\u0020\u0025\u0064\u0020\u0028\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0030\u0029",_gbdf .SdHuffAggInstanceSelection );
};};return nil ;};func (_ggaa *SymbolDictionary )readRegionFlags ()error {var (_dabce uint64 ;_bgga int ;);_ ,_bcfe :=_ggaa ._bdcd .ReadBits (3);if _bcfe !=nil {return _bcfe ;};_bgga ,_bcfe =_ggaa ._bdcd .ReadBit ();if _bcfe !=nil {return _bcfe ;};_ggaa .SdrTemplate =int8 (_bgga );
_dabce ,_bcfe =_ggaa ._bdcd .ReadBits (2);if _bcfe !=nil {return _bcfe ;};_ggaa .SdTemplate =int8 (_dabce &0xf);_bgga ,_bcfe =_ggaa ._bdcd .ReadBit ();if _bcfe !=nil {return _bcfe ;};if _bgga ==1{_ggaa ._gcfb =true ;};_bgga ,_bcfe =_ggaa ._bdcd .ReadBit ();
if _bcfe !=nil {return _bcfe ;};if _bgga ==1{_ggaa ._afgac =true ;};_bgga ,_bcfe =_ggaa ._bdcd .ReadBit ();if _bcfe !=nil {return _bcfe ;};if _bgga ==1{_ggaa .SdHuffAggInstanceSelection =true ;};_bgga ,_bcfe =_ggaa ._bdcd .ReadBit ();if _bcfe !=nil {return _bcfe ;
};_ggaa .SdHuffBMSizeSelection =int8 (_bgga );_dabce ,_bcfe =_ggaa ._bdcd .ReadBits (2);if _bcfe !=nil {return _bcfe ;};_ggaa .SdHuffDecodeWidthSelection =int8 (_dabce &0xf);_dabce ,_bcfe =_ggaa ._bdcd .ReadBits (2);if _bcfe !=nil {return _bcfe ;};_ggaa .SdHuffDecodeHeightSelection =int8 (_dabce &0xf);
_bgga ,_bcfe =_ggaa ._bdcd .ReadBit ();if _bcfe !=nil {return _bcfe ;};if _bgga ==1{_ggaa .UseRefinementAggregation =true ;};_bgga ,_bcfe =_ggaa ._bdcd .ReadBit ();if _bcfe !=nil {return _bcfe ;};if _bgga ==1{_ggaa .IsHuffmanEncoded =true ;};return nil ;
};func (_gdbd *GenericRegion )decodeTemplate0a (_ffe ,_ecfcd ,_eagg int ,_dda ,_ggfbd int )(_cabd error ){const _fdda ="\u0064\u0065c\u006f\u0064\u0065T\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0030\u0061";var (_cdg ,_adf int ;_gfc ,_dgee int ;_ggfa byte ;
_dadd int ;);if _ffe >=1{_ggfa ,_cabd =_gdbd .Bitmap .GetByte (_ggfbd );if _cabd !=nil {return _geb .Wrap (_cabd ,_fdda ,"\u006ci\u006e\u0065\u0020\u003e\u003d\u00201");};_gfc =int (_ggfa );};if _ffe >=2{_ggfa ,_cabd =_gdbd .Bitmap .GetByte (_ggfbd -_gdbd .Bitmap .RowStride );
if _cabd !=nil {return _geb .Wrap (_cabd ,_fdda ,"\u006ci\u006e\u0065\u0020\u003e\u003d\u00202");};_dgee =int (_ggfa )<<6;};_cdg =(_gfc &0xf0)|(_dgee &0x3800);for _cbfa :=0;_cbfa < _eagg ;_cbfa =_dadd {var (_cdd byte ;_bcf int ;);_dadd =_cbfa +8;if _feed :=_ecfcd -_cbfa ;
_feed > 8{_bcf =8;}else {_bcf =_feed ;};if _ffe > 0{_gfc <<=8;if _dadd < _ecfcd {_ggfa ,_cabd =_gdbd .Bitmap .GetByte (_ggfbd +1);if _cabd !=nil {return _geb .Wrap (_cabd ,_fdda ,"\u006c\u0069\u006e\u0065\u0020\u003e\u0020\u0030");};_gfc |=int (_ggfa );
};};if _ffe > 1{_aab :=_ggfbd -_gdbd .Bitmap .RowStride +1;_dgee <<=8;if _dadd < _ecfcd {_ggfa ,_cabd =_gdbd .Bitmap .GetByte (_aab );if _cabd !=nil {return _geb .Wrap (_cabd ,_fdda ,"\u006c\u0069\u006e\u0065\u0020\u003e\u0020\u0031");};_dgee |=int (_ggfa )<<6;
}else {_dgee |=0;};};for _gab :=0;_gab < _bcf ;_gab ++{_ccg :=uint (7-_gab );if _gdbd ._cac {_adf =_gdbd .overrideAtTemplate0a (_cdg ,_cbfa +_gab ,_ffe ,int (_cdd ),_gab ,int (_ccg ));_gdbd ._fag .SetIndex (int32 (_adf ));}else {_gdbd ._fag .SetIndex (int32 (_cdg ));
};var _efdd int ;_efdd ,_cabd =_gdbd ._cgcb .DecodeBit (_gdbd ._fag );if _cabd !=nil {return _geb .Wrap (_cabd ,_fdda ,"");};_cdd |=byte (_efdd )<<_ccg ;_cdg =((_cdg &0x7bf7)<<1)|_efdd |((_gfc >>_ccg )&0x10)|((_dgee >>_ccg )&0x800);};if _gafb :=_gdbd .Bitmap .SetByte (_dda ,_cdd );
_gafb !=nil {return _geb .Wrap (_gafb ,_fdda ,"");};_dda ++;_ggfbd ++;};return nil ;};func (_cdfa *SymbolDictionary )getSbSymCodeLen ()int8 {_dffga :=int8 (_g .Ceil (_g .Log (float64 (_cdfa ._ccdc +_cdfa .NumberOfNewSymbols ))/_g .Log (2)));if _cdfa .IsHuffmanEncoded &&_dffga < 1{return 1;
};return _dffga ;};func (_ddcc *SymbolDictionary )encodeATFlags (_agda _ge .BinaryWriter )(_cec int ,_deae error ){const _dccd ="\u0065\u006e\u0063\u006f\u0064\u0065\u0041\u0054\u0046\u006c\u0061\u0067\u0073";if _ddcc .IsHuffmanEncoded ||_ddcc .SdTemplate !=0{return 0,nil ;
};_gffe :=4;if _ddcc .SdTemplate !=0{_gffe =1;};for _dabg :=0;_dabg < _gffe ;_dabg ++{if _deae =_agda .WriteByte (byte (_ddcc .SdATX [_dabg ]));_deae !=nil {return _cec ,_geb .Wrapf (_deae ,_dccd ,"\u0053d\u0041\u0054\u0058\u005b\u0025\u0064]",_dabg );
};_cec ++;if _deae =_agda .WriteByte (byte (_ddcc .SdATY [_dabg ]));_deae !=nil {return _cec ,_geb .Wrapf (_deae ,_dccd ,"\u0053d\u0041\u0054\u0059\u005b\u0025\u0064]",_dabg );};_cec ++;};return _cec ,nil ;};func (_ccffd *TextRegion )decodeStripT ()(_cagb int64 ,_ddca error ){if _ccffd .IsHuffmanEncoded {if _ccffd .SbHuffDT ==3{if _ccffd ._agfgd ==nil {var _dcgaf int ;
if _ccffd .SbHuffFS ==3{_dcgaf ++;};if _ccffd .SbHuffDS ==3{_dcgaf ++;};_ccffd ._agfgd ,_ddca =_ccffd .getUserTable (_dcgaf );if _ddca !=nil {return 0,_ddca ;};};_cagb ,_ddca =_ccffd ._agfgd .Decode (_ccffd ._ebac );if _ddca !=nil {return 0,_ddca ;};}else {var _bafac _eded .Tabler ;
_bafac ,_ddca =_eded .GetStandardTable (11+int (_ccffd .SbHuffDT ));if _ddca !=nil {return 0,_ddca ;};_cagb ,_ddca =_bafac .Decode (_ccffd ._ebac );if _ddca !=nil {return 0,_ddca ;};};}else {var _fcagd int32 ;_fcagd ,_ddca =_ccffd ._cacbc .DecodeInt (_ccffd ._bgcbgc );
if _ddca !=nil {return 0,_ddca ;};_cagb =int64 (_fcagd );};_cagb *=int64 (-_ccffd .SbStrips );return _cagb ,nil ;};func (_fdga *Header )parse (_gegb Documenter ,_fgaab *_ge .Reader ,_ddde int64 ,_caf OrganizationType )(_ebag error ){const _gabg ="\u0070\u0061\u0072s\u0065";
_fg .Log .Trace ("\u005b\u0053\u0045\u0047\u004d\u0045\u004e\u0054\u002d\u0048E\u0041\u0044\u0045\u0052\u005d\u005b\u0050A\u0052\u0053\u0045\u005d\u0020\u0042\u0065\u0067\u0069\u006e\u0073");defer func (){if _ebag !=nil {_fg .Log .Trace ("\u005b\u0053\u0045GM\u0045\u004e\u0054\u002d\u0048\u0045\u0041\u0044\u0045R\u005d[\u0050A\u0052S\u0045\u005d\u0020\u0046\u0061\u0069\u006c\u0065\u0064\u002e\u0020\u0025\u0076",_ebag );
}else {_fg .Log .Trace ("\u005b\u0053\u0045\u0047\u004d\u0045\u004e\u0054\u002d\u0048\u0045\u0041\u0044\u0045\u0052]\u005bP\u0041\u0052\u0053\u0045\u005d\u0020\u0046\u0069\u006e\u0069\u0073\u0068\u0065\u0064");};}();_ ,_ebag =_fgaab .Seek (_ddde ,_gd .SeekStart );
if _ebag !=nil {return _geb .Wrap (_ebag ,_gabg ,"\u0073\u0065\u0065\u006b\u0020\u0073\u0074\u0061\u0072\u0074");};if _ebag =_fdga .readSegmentNumber (_fgaab );_ebag !=nil {return _geb .Wrap (_ebag ,_gabg ,"");};if _ebag =_fdga .readHeaderFlags ();_ebag !=nil {return _geb .Wrap (_ebag ,_gabg ,"");
};var _agcf uint64 ;_agcf ,_ebag =_fdga .readNumberOfReferredToSegments (_fgaab );if _ebag !=nil {return _geb .Wrap (_ebag ,_gabg ,"");};_fdga .RTSNumbers ,_ebag =_fdga .readReferredToSegmentNumbers (_fgaab ,int (_agcf ));if _ebag !=nil {return _geb .Wrap (_ebag ,_gabg ,"");
};_ebag =_fdga .readSegmentPageAssociation (_gegb ,_fgaab ,_agcf ,_fdga .RTSNumbers ...);if _ebag !=nil {return _geb .Wrap (_ebag ,_gabg ,"");};if _fdga .Type !=TEndOfFile {if _ebag =_fdga .readSegmentDataLength (_fgaab );_ebag !=nil {return _geb .Wrap (_ebag ,_gabg ,"");
};};_fdga .readDataStartOffset (_fgaab ,_caf );_fdga .readHeaderLength (_fgaab ,_ddde );_fg .Log .Trace ("\u0025\u0073",_fdga );return nil ;};func (_ggbgd *TextRegion )computeSymbolCodeLength ()error {if _ggbgd .IsHuffmanEncoded {return _ggbgd .symbolIDCodeLengths ();
};_ggbgd ._acacc =int8 (_g .Ceil (_g .Log (float64 (_ggbgd .NumberOfSymbols ))/_g .Log (2)));return nil ;};func (_ac *GenericRegion )Encode (w _ge .BinaryWriter )(_cff int ,_bdf error ){const _aaea ="G\u0065n\u0065\u0072\u0069\u0063\u0052\u0065\u0067\u0069o\u006e\u002e\u0045\u006eco\u0064\u0065";
if _ac .Bitmap ==nil {return 0,_geb .Error (_aaea ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};_eafc ,_bdf :=_ac .RegionSegment .Encode (w );if _bdf !=nil {return 0,_geb .Wrap (_bdf ,_aaea ,"\u0052\u0065\u0067\u0069\u006f\u006e\u0053\u0065\u0067\u006d\u0065\u006e\u0074");
};_cff +=_eafc ;if _bdf =w .SkipBits (4);_bdf !=nil {return _cff ,_geb .Wrap (_bdf ,_aaea ,"\u0073k\u0069p\u0020\u0072\u0065\u0073\u0065r\u0076\u0065d\u0020\u0062\u0069\u0074\u0073");};var _eeegc int ;if _ac .IsTPGDon {_eeegc =1;};if _bdf =w .WriteBit (_eeegc );
_bdf !=nil {return _cff ,_geb .Wrap (_bdf ,_aaea ,"\u0074\u0070\u0067\u0064\u006f\u006e");};_eeegc =0;if _bdf =w .WriteBit (int (_ac .GBTemplate >>1)&0x01);_bdf !=nil {return _cff ,_geb .Wrap (_bdf ,_aaea ,"f\u0069r\u0073\u0074\u0020\u0067\u0062\u0074\u0065\u006dp\u006c\u0061\u0074\u0065 b\u0069\u0074");
};if _bdf =w .WriteBit (int (_ac .GBTemplate )&0x01);_bdf !=nil {return _cff ,_geb .Wrap (_bdf ,_aaea ,"s\u0065\u0063\u006f\u006ed \u0067b\u0074\u0065\u006d\u0070\u006ca\u0074\u0065\u0020\u0062\u0069\u0074");};if _ac .UseMMR {_eeegc =1;};if _bdf =w .WriteBit (_eeegc );
_bdf !=nil {return _cff ,_geb .Wrap (_bdf ,_aaea ,"u\u0073\u0065\u0020\u004d\u004d\u0052\u0020\u0062\u0069\u0074");};_cff ++;if _eafc ,_bdf =_ac .writeGBAtPixels (w );_bdf !=nil {return _cff ,_geb .Wrap (_bdf ,_aaea ,"");};_cff +=_eafc ;_dbcg :=_bc .New ();
if _bdf =_dbcg .EncodeBitmap (_ac .Bitmap ,_ac .IsTPGDon );_bdf !=nil {return _cff ,_geb .Wrap (_bdf ,_aaea ,"");};_dbcg .Final ();var _ebaa int64 ;if _ebaa ,_bdf =_dbcg .WriteTo (w );_bdf !=nil {return _cff ,_geb .Wrap (_bdf ,_aaea ,"");};_cff +=int (_ebaa );
return _cff ,nil ;};func (_efge *SymbolDictionary )encodeFlags (_ffff _ge .BinaryWriter )(_ebabe int ,_fcge error ){const _dgbef ="e\u006e\u0063\u006f\u0064\u0065\u0046\u006c\u0061\u0067\u0073";if _fcge =_ffff .SkipBits (3);_fcge !=nil {return 0,_geb .Wrap (_fcge ,_dgbef ,"\u0065\u006d\u0070\u0074\u0079\u0020\u0062\u0069\u0074\u0073");
};var _fcf int ;if _efge .SdrTemplate > 0{_fcf =1;};if _fcge =_ffff .WriteBit (_fcf );_fcge !=nil {return _ebabe ,_geb .Wrap (_fcge ,_dgbef ,"s\u0064\u0072\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065");};_fcf =0;if _efge .SdTemplate > 1{_fcf =1;};if _fcge =_ffff .WriteBit (_fcf );
_fcge !=nil {return _ebabe ,_geb .Wrap (_fcge ,_dgbef ,"\u0073\u0064\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065");};_fcf =0;if _efge .SdTemplate ==1||_efge .SdTemplate ==3{_fcf =1;};if _fcge =_ffff .WriteBit (_fcf );_fcge !=nil {return _ebabe ,_geb .Wrap (_fcge ,_dgbef ,"\u0073\u0064\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065");
};_fcf =0;if _efge ._gcfb {_fcf =1;};if _fcge =_ffff .WriteBit (_fcf );_fcge !=nil {return _ebabe ,_geb .Wrap (_fcge ,_dgbef ,"\u0063\u006f\u0064in\u0067\u0020\u0063\u006f\u006e\u0074\u0065\u0078\u0074\u0020\u0072\u0065\u0074\u0061\u0069\u006e\u0065\u0064");
};_fcf =0;if _efge ._afgac {_fcf =1;};if _fcge =_ffff .WriteBit (_fcf );_fcge !=nil {return _ebabe ,_geb .Wrap (_fcge ,_dgbef ,"\u0063\u006f\u0064\u0069ng\u0020\u0063\u006f\u006e\u0074\u0065\u0078\u0074\u0020\u0075\u0073\u0065\u0064");};_fcf =0;if _efge .SdHuffAggInstanceSelection {_fcf =1;
};if _fcge =_ffff .WriteBit (_fcf );_fcge !=nil {return _ebabe ,_geb .Wrap (_fcge ,_dgbef ,"\u0073\u0064\u0048\u0075\u0066\u0066\u0041\u0067\u0067\u0049\u006e\u0073\u0074");};_fcf =int (_efge .SdHuffBMSizeSelection );if _fcge =_ffff .WriteBit (_fcf );_fcge !=nil {return _ebabe ,_geb .Wrap (_fcge ,_dgbef ,"\u0073\u0064\u0048u\u0066\u0066\u0042\u006d\u0053\u0069\u007a\u0065");
};_fcf =0;if _efge .SdHuffDecodeWidthSelection > 1{_fcf =1;};if _fcge =_ffff .WriteBit (_fcf );_fcge !=nil {return _ebabe ,_geb .Wrap (_fcge ,_dgbef ,"s\u0064\u0048\u0075\u0066\u0066\u0057\u0069\u0064\u0074\u0068");};_fcf =0;switch _efge .SdHuffDecodeWidthSelection {case 1,3:_fcf =1;
};if _fcge =_ffff .WriteBit (_fcf );_fcge !=nil {return _ebabe ,_geb .Wrap (_fcge ,_dgbef ,"s\u0064\u0048\u0075\u0066\u0066\u0057\u0069\u0064\u0074\u0068");};_fcf =0;if _efge .SdHuffDecodeHeightSelection > 1{_fcf =1;};if _fcge =_ffff .WriteBit (_fcf );
_fcge !=nil {return _ebabe ,_geb .Wrap (_fcge ,_dgbef ,"\u0073\u0064\u0048u\u0066\u0066\u0048\u0065\u0069\u0067\u0068\u0074");};_fcf =0;switch _efge .SdHuffDecodeHeightSelection {case 1,3:_fcf =1;};if _fcge =_ffff .WriteBit (_fcf );_fcge !=nil {return _ebabe ,_geb .Wrap (_fcge ,_dgbef ,"\u0073\u0064\u0048u\u0066\u0066\u0048\u0065\u0069\u0067\u0068\u0074");
};_fcf =0;if _efge .UseRefinementAggregation {_fcf =1;};if _fcge =_ffff .WriteBit (_fcf );_fcge !=nil {return _ebabe ,_geb .Wrap (_fcge ,_dgbef ,"\u0073\u0064\u0052\u0065\u0066\u0041\u0067\u0067");};_fcf =0;if _efge .IsHuffmanEncoded {_fcf =1;};if _fcge =_ffff .WriteBit (_fcf );
_fcge !=nil {return _ebabe ,_geb .Wrap (_fcge ,_dgbef ,"\u0073\u0064\u0048\u0075\u0066\u0066");};return 2,nil ;};func (_bcee *TextRegion )encodeFlags (_cged _ge .BinaryWriter )(_ecadg int ,_fdgad error ){const _ccec ="e\u006e\u0063\u006f\u0064\u0065\u0046\u006c\u0061\u0067\u0073";
if _fdgad =_cged .WriteBit (int (_bcee .SbrTemplate ));_fdgad !=nil {return _ecadg ,_geb .Wrap (_fdgad ,_ccec ,"s\u0062\u0072\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065");};if _ ,_fdgad =_cged .WriteBits (uint64 (_bcee .SbDsOffset ),5);_fdgad !=nil {return _ecadg ,_geb .Wrap (_fdgad ,_ccec ,"\u0073\u0062\u0044\u0073\u004f\u0066\u0066\u0073\u0065\u0074");
};if _fdgad =_cged .WriteBit (int (_bcee .DefaultPixel ));_fdgad !=nil {return _ecadg ,_geb .Wrap (_fdgad ,_ccec ,"\u0044\u0065\u0066a\u0075\u006c\u0074\u0050\u0069\u0078\u0065\u006c");};if _ ,_fdgad =_cged .WriteBits (uint64 (_bcee .CombinationOperator ),2);
_fdgad !=nil {return _ecadg ,_geb .Wrap (_fdgad ,_ccec ,"\u0043\u006f\u006d\u0062in\u0061\u0074\u0069\u006f\u006e\u004f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");};if _fdgad =_cged .WriteBit (int (_bcee .IsTransposed ));_fdgad !=nil {return _ecadg ,_geb .Wrap (_fdgad ,_ccec ,"\u0069\u0073\u0020\u0074\u0072\u0061\u006e\u0073\u0070\u006f\u0073\u0065\u0064");
};if _ ,_fdgad =_cged .WriteBits (uint64 (_bcee .ReferenceCorner ),2);_fdgad !=nil {return _ecadg ,_geb .Wrap (_fdgad ,_ccec ,"\u0072\u0065f\u0065\u0072\u0065n\u0063\u0065\u0020\u0063\u006f\u0072\u006e\u0065\u0072");};if _ ,_fdgad =_cged .WriteBits (uint64 (_bcee .LogSBStrips ),2);
_fdgad !=nil {return _ecadg ,_geb .Wrap (_fdgad ,_ccec ,"L\u006f\u0067\u0053\u0042\u0053\u0074\u0072\u0069\u0070\u0073");};var _dbbg int ;if _bcee .UseRefinement {_dbbg =1;};if _fdgad =_cged .WriteBit (_dbbg );_fdgad !=nil {return _ecadg ,_geb .Wrap (_fdgad ,_ccec ,"\u0075\u0073\u0065\u0020\u0072\u0065\u0066\u0069\u006ee\u006d\u0065\u006e\u0074");
};_dbbg =0;if _bcee .IsHuffmanEncoded {_dbbg =1;};if _fdgad =_cged .WriteBit (_dbbg );_fdgad !=nil {return _ecadg ,_geb .Wrap (_fdgad ,_ccec ,"u\u0073\u0065\u0020\u0068\u0075\u0066\u0066\u006d\u0061\u006e");};_ecadg =2;return _ecadg ,nil ;};func (_cgaf *SymbolDictionary )decodeHeightClassDeltaHeightWithHuffman ()(int64 ,error ){switch _cgaf .SdHuffDecodeHeightSelection {case 0:_dbgg ,_addef :=_eded .GetStandardTable (4);
if _addef !=nil {return 0,_addef ;};return _dbgg .Decode (_cgaf ._bdcd );case 1:_cfgb ,_cbd :=_eded .GetStandardTable (5);if _cbd !=nil {return 0,_cbd ;};return _cfgb .Decode (_cgaf ._bdcd );case 3:if _cgaf ._gage ==nil {_acdc ,_cbgefe :=_eded .GetStandardTable (0);
if _cbgefe !=nil {return 0,_cbgefe ;};_cgaf ._gage =_acdc ;};return _cgaf ._gage .Decode (_cgaf ._bdcd );};return 0,nil ;};func (_bcbc *GenericRegion )decodeSLTP ()(int ,error ){switch _bcbc .GBTemplate {case 0:_bcbc ._fag .SetIndex (0x9B25);case 1:_bcbc ._fag .SetIndex (0x795);
case 2:_bcbc ._fag .SetIndex (0xE5);case 3:_bcbc ._fag .SetIndex (0x195);};return _bcbc ._cgcb .DecodeBit (_bcbc ._fag );};func (_edfed *TextRegion )parseHeader ()error {var _geeb error ;_fg .Log .Trace ("\u005b\u0054E\u0058\u0054\u0020\u0052E\u0047\u0049O\u004e\u005d\u005b\u0050\u0041\u0052\u0053\u0045-\u0048\u0045\u0041\u0044\u0045\u0052\u005d\u0020\u0062\u0065\u0067\u0069n\u0073\u002e\u002e\u002e");
defer func (){if _geeb !=nil {_fg .Log .Trace ("\u005b\u0054\u0045\u0058\u0054\u0020\u0052\u0045\u0047\u0049\u004f\u004e\u005d\u005b\u0050\u0041\u0052\u0053\u0045\u002d\u0048\u0045\u0041\u0044E\u0052\u005d\u0020\u0066\u0061i\u006c\u0065d\u002e\u0020\u0025\u0076",_geeb );
}else {_fg .Log .Trace ("\u005b\u0054E\u0058\u0054\u0020\u0052E\u0047\u0049O\u004e\u005d\u005b\u0050\u0041\u0052\u0053\u0045-\u0048\u0045\u0041\u0044\u0045\u0052\u005d\u0020\u0066\u0069\u006e\u0069s\u0068\u0065\u0064\u002e");};}();if _geeb =_edfed .RegionInfo .parseHeader ();
_geeb !=nil {return _geeb ;};if _geeb =_edfed .readRegionFlags ();_geeb !=nil {return _geeb ;};if _edfed .IsHuffmanEncoded {if _geeb =_edfed .readHuffmanFlags ();_geeb !=nil {return _geeb ;};};if _geeb =_edfed .readUseRefinement ();_geeb !=nil {return _geeb ;
};if _geeb =_edfed .readAmountOfSymbolInstances ();_geeb !=nil {return _geeb ;};if _geeb =_edfed .getSymbols ();_geeb !=nil {return _geeb ;};if _geeb =_edfed .computeSymbolCodeLength ();_geeb !=nil {return _geeb ;};if _geeb =_edfed .checkInput ();_geeb !=nil {return _geeb ;
};_fg .Log .Trace ("\u0025\u0073",_edfed .String ());return nil ;};func (_cfab *TextRegion )decodeIds ()(int64 ,error ){const _daaae ="\u0064e\u0063\u006f\u0064\u0065\u0049\u0064s";if _cfab .IsHuffmanEncoded {if _cfab .SbHuffDS ==3{if _cfab ._efca ==nil {_ffbe :=0;
if _cfab .SbHuffFS ==3{_ffbe ++;};var _aaaa error ;_cfab ._efca ,_aaaa =_cfab .getUserTable (_ffbe );if _aaaa !=nil {return 0,_geb .Wrap (_aaaa ,_daaae ,"");};};return _cfab ._efca .Decode (_cfab ._ebac );};_dfggg ,_fbeee :=_eded .GetStandardTable (8+int (_cfab .SbHuffDS ));
if _fbeee !=nil {return 0,_geb .Wrap (_fbeee ,_daaae ,"");};return _dfggg .Decode (_cfab ._ebac );};_dcdeg ,_abaac :=_cfab ._cacbc .DecodeInt (_cfab ._dddca );if _abaac !=nil {return 0,_geb .Wrap (_abaac ,_daaae ,"\u0063\u0078\u0049\u0041\u0044\u0053");
};return int64 (_dcdeg ),nil ;};type EndOfStripe struct{_gg *_ge .Reader ;_gebf int ;};func (_cdab *RegionSegment )readCombinationOperator ()error {_aadg ,_bfgd :=_cdab ._dgaed .ReadBits (3);if _bfgd !=nil {return _bfgd ;};_cdab .CombinaionOperator =_ded .CombinationOperator (_aadg &0xF);
return nil ;};type Segmenter interface{Init (_cccb *Header ,_fcefd *_ge .Reader )error ;};func (_cfed *Header )pageSize ()uint {if _cfed .PageAssociation <=255{return 1;};return 4;};func (_bgfg *SymbolDictionary )readAtPixels (_effb int )error {_bgfg .SdATX =make ([]int8 ,_effb );
_bgfg .SdATY =make ([]int8 ,_effb );var (_gagd byte ;_gafbe error ;);for _bffe :=0;_bffe < _effb ;_bffe ++{_gagd ,_gafbe =_bgfg ._bdcd .ReadByte ();if _gafbe !=nil {return _gafbe ;};_bgfg .SdATX [_bffe ]=int8 (_gagd );_gagd ,_gafbe =_bgfg ._bdcd .ReadByte ();
if _gafbe !=nil {return _gafbe ;};_bgfg .SdATY [_bffe ]=int8 (_gagd );};return nil ;};func (_gbc *HalftoneRegion )GetRegionInfo ()*RegionSegment {return _gbc .RegionSegment };func NewRegionSegment (r *_ge .Reader )*RegionSegment {return &RegionSegment {_dgaed :r }};
func (_aedd *TextRegion )decodeIb (_bbcc ,_dfeca int64 )(*_ded .Bitmap ,error ){const _cafa ="\u0064\u0065\u0063\u006f\u0064\u0065\u0049\u0062";var (_dede error ;_fdcc *_ded .Bitmap ;);if _bbcc ==0{if int (_dfeca )> len (_aedd .Symbols )-1{return nil ,_geb .Error (_cafa ,"\u0064\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0049\u0042\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0020\u0069\u006e\u0064\u0065x\u0020\u006f\u0075\u0074\u0020o\u0066\u0020r\u0061\u006e\u0067\u0065");
};return _aedd .Symbols [int (_dfeca )],nil ;};var _geaf ,_gcda ,_eeb ,_fegb int64 ;_geaf ,_dede =_aedd .decodeRdw ();if _dede !=nil {return nil ,_geb .Wrap (_dede ,_cafa ,"");};_gcda ,_dede =_aedd .decodeRdh ();if _dede !=nil {return nil ,_geb .Wrap (_dede ,_cafa ,"");
};_eeb ,_dede =_aedd .decodeRdx ();if _dede !=nil {return nil ,_geb .Wrap (_dede ,_cafa ,"");};_fegb ,_dede =_aedd .decodeRdy ();if _dede !=nil {return nil ,_geb .Wrap (_dede ,_cafa ,"");};if _aedd .IsHuffmanEncoded {if _ ,_dede =_aedd .decodeSymInRefSize ();
_dede !=nil {return nil ,_geb .Wrap (_dede ,_cafa ,"");};_aedd ._ebac .Align ();};_edgc :=_aedd .Symbols [_dfeca ];_fcfa :=uint32 (_edgc .Width );_dba :=uint32 (_edgc .Height );_cccc :=int32 (uint32 (_geaf )>>1)+int32 (_eeb );_eadc :=int32 (uint32 (_gcda )>>1)+int32 (_fegb );
if _aedd ._ebead ==nil {_aedd ._ebead =_ega (_aedd ._ebac ,nil );};_aedd ._ebead .setParameters (_aedd ._fegc ,_aedd ._cacbc ,_aedd .SbrTemplate ,_fcfa +uint32 (_geaf ),_dba +uint32 (_gcda ),_edgc ,_cccc ,_eadc ,false ,_aedd .SbrATX ,_aedd .SbrATY );_fdcc ,_dede =_aedd ._ebead .GetRegionBitmap ();
if _dede !=nil {return nil ,_geb .Wrap (_dede ,_cafa ,"\u0067\u0072\u0066");};if _aedd .IsHuffmanEncoded {_aedd ._ebac .Align ();};return _fdcc ,nil ;};func (_baab *SymbolDictionary )encodeNumSyms (_eefe _ge .BinaryWriter )(_gccb int ,_bacfb error ){const _ggbg ="\u0065\u006e\u0063\u006f\u0064\u0065\u004e\u0075\u006d\u0053\u0079\u006d\u0073";
_gbba :=make ([]byte ,4);_b .BigEndian .PutUint32 (_gbba ,_baab .NumberOfExportedSymbols );if _gccb ,_bacfb =_eefe .Write (_gbba );_bacfb !=nil {return _gccb ,_geb .Wrap (_bacfb ,_ggbg ,"\u0065\u0078p\u006f\u0072\u0074e\u0064\u0020\u0073\u0079\u006d\u0062\u006f\u006c\u0073");
};_b .BigEndian .PutUint32 (_gbba ,_baab .NumberOfNewSymbols );_befc ,_bacfb :=_eefe .Write (_gbba );if _bacfb !=nil {return _gccb ,_geb .Wrap (_bacfb ,_ggbg ,"n\u0065\u0077\u0020\u0073\u0079\u006d\u0062\u006f\u006c\u0073");};return _gccb +_befc ,nil ;
};type Pager interface{GetSegment (int )(*Header ,error );GetBitmap ()(*_ded .Bitmap ,error );};func (_ebeed *TextRegion )symbolIDCodeLengths ()error {var (_gdagc []*_eded .Code ;_edggae uint64 ;_bcdg _eded .Tabler ;_ebef error ;);for _fefg :=0;_fefg < 35;
_fefg ++{_edggae ,_ebef =_ebeed ._ebac .ReadBits (4);if _ebef !=nil {return _ebef ;};_bdgda :=int (_edggae &0xf);if _bdgda > 0{_gdagc =append (_gdagc ,_eded .NewCode (int32 (_bdgda ),0,int32 (_fefg ),false ));};};_bcdg ,_ebef =_eded .NewFixedSizeTable (_gdagc );
if _ebef !=nil {return _ebef ;};var (_babc int64 ;_gaed uint32 ;_adcd []*_eded .Code ;_ebcd int64 ;);for _gaed < _ebeed .NumberOfSymbols {_ebcd ,_ebef =_bcdg .Decode (_ebeed ._ebac );if _ebef !=nil {return _ebef ;};if _ebcd < 32{if _ebcd > 0{_adcd =append (_adcd ,_eded .NewCode (int32 (_ebcd ),0,int32 (_gaed ),false ));
};_babc =_ebcd ;_gaed ++;}else {var _gfbg ,_ccce int64 ;switch _ebcd {case 32:_edggae ,_ebef =_ebeed ._ebac .ReadBits (2);if _ebef !=nil {return _ebef ;};_gfbg =3+int64 (_edggae );if _gaed > 0{_ccce =_babc ;};case 33:_edggae ,_ebef =_ebeed ._ebac .ReadBits (3);
if _ebef !=nil {return _ebef ;};_gfbg =3+int64 (_edggae );case 34:_edggae ,_ebef =_ebeed ._ebac .ReadBits (7);if _ebef !=nil {return _ebef ;};_gfbg =11+int64 (_edggae );};for _aeda :=0;_aeda < int (_gfbg );_aeda ++{if _ccce > 0{_adcd =append (_adcd ,_eded .NewCode (int32 (_ccce ),0,int32 (_gaed ),false ));
};_gaed ++;};};};_ebeed ._ebac .Align ();_ebeed ._fefb ,_ebef =_eded .NewFixedSizeTable (_adcd );return _ebef ;};func (_bebae *SymbolDictionary )setSymbolsArray ()error {if _bebae ._egc ==nil {if _ffga :=_bebae .retrieveImportSymbols ();_ffga !=nil {return _ffga ;
};};if _bebae ._gcab ==nil {_bebae ._gcab =append (_bebae ._gcab ,_bebae ._egc ...);};return nil ;};func (_faf *template1 )form (_agb ,_afd ,_afef ,_dfg ,_dgdb int16 )int16 {return ((_agb &0x02)<<8)|(_afd <<6)|((_afef &0x03)<<4)|(_dfg <<1)|_dgdb ;};func (_efgg *TableSegment )HtLow ()int32 {return _efgg ._ffdd };
func (_bffc *Header )readHeaderLength (_cbc *_ge .Reader ,_ebga int64 ){_bffc .HeaderLength =_cbc .AbsolutePosition ()-_ebga ;};func (_afg *GenericRefinementRegion )decodeTypicalPredictedLineTemplate1 (_ae ,_cga ,_aff ,_cee ,_dbc ,_eba ,_bde ,_gffab ,_bbea int )(_bcc error ){var (_ged ,_cfg int ;
_fgf ,_fbb int ;_afe ,_dgd int ;_aea byte ;);if _ae > 0{_aea ,_bcc =_afg .RegionBitmap .GetByte (_bde -_aff );if _bcc !=nil {return _bcc ;};_fgf =int (_aea );};if _gffab > 0&&_gffab <=_afg .ReferenceBitmap .Height {_aea ,_bcc =_afg .ReferenceBitmap .GetByte (_bbea -_cee +_eba );
if _bcc !=nil {return _bcc ;};_fbb =int (_aea )<<2;};if _gffab >=0&&_gffab < _afg .ReferenceBitmap .Height {_aea ,_bcc =_afg .ReferenceBitmap .GetByte (_bbea +_eba );if _bcc !=nil {return _bcc ;};_afe =int (_aea );};if _gffab > -2&&_gffab < _afg .ReferenceBitmap .Height -1{_aea ,_bcc =_afg .ReferenceBitmap .GetByte (_bbea +_cee +_eba );
if _bcc !=nil {return _bcc ;};_dgd =int (_aea );};_ged =((_fgf >>5)&0x6)|((_dgd >>2)&0x30)|(_afe &0xc0)|(_fbb &0x200);_cfg =((_dgd >>2)&0x70)|(_afe &0xc0)|(_fbb &0x700);var _bgb int ;for _dbd :=0;_dbd < _dbc ;_dbd =_bgb {var (_agc int ;_geg int ;);_bgb =_dbd +8;
if _agc =_cga -_dbd ;_agc > 8{_agc =8;};_dc :=_bgb < _cga ;_dgdf :=_bgb < _afg .ReferenceBitmap .Width ;_eabb :=_eba +1;if _ae > 0{_aea =0;if _dc {_aea ,_bcc =_afg .RegionBitmap .GetByte (_bde -_aff +1);if _bcc !=nil {return _bcc ;};};_fgf =(_fgf <<8)|int (_aea );
};if _gffab > 0&&_gffab <=_afg .ReferenceBitmap .Height {var _abe int ;if _dgdf {_aea ,_bcc =_afg .ReferenceBitmap .GetByte (_bbea -_cee +_eabb );if _bcc !=nil {return _bcc ;};_abe =int (_aea )<<2;};_fbb =(_fbb <<8)|_abe ;};if _gffab >=0&&_gffab < _afg .ReferenceBitmap .Height {_aea =0;
if _dgdf {_aea ,_bcc =_afg .ReferenceBitmap .GetByte (_bbea +_eabb );if _bcc !=nil {return _bcc ;};};_afe =(_afe <<8)|int (_aea );};if _gffab > -2&&_gffab < (_afg .ReferenceBitmap .Height -1){_aea =0;if _dgdf {_aea ,_bcc =_afg .ReferenceBitmap .GetByte (_bbea +_cee +_eabb );
if _bcc !=nil {return _bcc ;};};_dgd =(_dgd <<8)|int (_aea );};for _cgd :=0;_cgd < _agc ;_cgd ++{var _ece int ;_eca :=(_cfg >>4)&0x1ff;switch _eca {case 0x1ff:_ece =1;case 0x00:_ece =0;default:_afg ._abc .SetIndex (int32 (_ged ));_ece ,_bcc =_afg ._be .DecodeBit (_afg ._abc );
if _bcc !=nil {return _bcc ;};};_fcef :=uint (7-_cgd );_geg |=_ece <<_fcef ;_ged =((_ged &0x0d6)<<1)|_ece |(_fgf >>_fcef +5)&0x002|((_dgd >>_fcef +2)&0x010)|((_afe >>_fcef )&0x040)|((_fbb >>_fcef )&0x200);_cfg =((_cfg &0xdb)<<1)|((_dgd >>_fcef +2)&0x010)|((_afe >>_fcef )&0x080)|((_fbb >>_fcef )&0x400);
};_bcc =_afg .RegionBitmap .SetByte (_bde ,byte (_geg ));if _bcc !=nil {return _bcc ;};_bde ++;_bbea ++;};return nil ;};func (_gcag *Header )readDataStartOffset (_eedb *_ge .Reader ,_ebaga OrganizationType ){if _ebaga ==OSequential {_gcag .SegmentDataStartOffset =uint64 (_eedb .AbsolutePosition ());
};};func (_ccgf *HalftoneRegion )computeY (_fdgb ,_degd int )int {return _ccgf .shiftAndFill (int (_ccgf .HGridY )+_fdgb *int (_ccgf .HRegionX )-_degd *int (_ccgf .HRegionY ));};func (_cbbe *Header )String ()string {_ebc :=&_aa .Builder {};_ebc .WriteString ("\u000a[\u0053E\u0047\u004d\u0045\u004e\u0054-\u0048\u0045A\u0044\u0045\u0052\u005d\u000a");
_ebc .WriteString (_de .Sprintf ("\t\u002d\u0020\u0053\u0065gm\u0065n\u0074\u004e\u0075\u006d\u0062e\u0072\u003a\u0020\u0025\u0076\u000a",_cbbe .SegmentNumber ));_ebc .WriteString (_de .Sprintf ("\u0009\u002d\u0020T\u0079\u0070\u0065\u003a\u0020\u0025\u0076\u000a",_cbbe .Type ));
_ebc .WriteString (_de .Sprintf ("\u0009-\u0020R\u0065\u0074\u0061\u0069\u006eF\u006c\u0061g\u003a\u0020\u0025\u0076\u000a",_cbbe .RetainFlag ));_ebc .WriteString (_de .Sprintf ("\u0009\u002d\u0020Pa\u0067\u0065\u0041\u0073\u0073\u006f\u0063\u0069\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0076\u000a",_cbbe .PageAssociation ));
_ebc .WriteString (_de .Sprintf ("\u0009\u002d\u0020\u0050\u0061\u0067\u0065\u0041\u0073\u0073\u006f\u0063\u0069\u0061\u0074i\u006fn\u0046\u0069\u0065\u006c\u0064\u0053\u0069\u007a\u0065\u003a\u0020\u0025\u0076\u000a",_cbbe .PageAssociationFieldSize ));
_ebc .WriteString ("\u0009-\u0020R\u0054\u0053\u0045\u0047\u004d\u0045\u004e\u0054\u0053\u003a\u000a");for _ ,_fbae :=range _cbbe .RTSNumbers {_ebc .WriteString (_de .Sprintf ("\u0009\t\u002d\u0020\u0025\u0064\u000a",_fbae ));};_ebc .WriteString (_de .Sprintf ("\t\u002d \u0048\u0065\u0061\u0064\u0065\u0072\u004c\u0065n\u0067\u0074\u0068\u003a %\u0076\u000a",_cbbe .HeaderLength ));
_ebc .WriteString (_de .Sprintf ("\u0009-\u0020\u0053\u0065\u0067m\u0065\u006e\u0074\u0044\u0061t\u0061L\u0065n\u0067\u0074\u0068\u003a\u0020\u0025\u0076\n",_cbbe .SegmentDataLength ));_ebc .WriteString (_de .Sprintf ("\u0009\u002d\u0020\u0053\u0065\u0067\u006d\u0065\u006e\u0074D\u0061\u0074\u0061\u0053\u0074\u0061\u0072t\u004f\u0066\u0066\u0073\u0065\u0074\u003a\u0020\u0025\u0076\u000a",_cbbe .SegmentDataStartOffset ));
return _ebc .String ();};func (_eae *PageInformationSegment )parseHeader ()(_edf error ){_fg .Log .Trace ("\u005b\u0050\u0061\u0067\u0065I\u006e\u0066\u006f\u0072\u006d\u0061\u0074\u0069\u006f\u006e\u0053\u0065\u0067m\u0065\u006e\u0074\u005d\u0020\u0050\u0061\u0072\u0073\u0069\u006e\u0067\u0048\u0065\u0061\u0064\u0065\u0072\u002e\u002e\u002e");
defer func (){var _eace ="[\u0050\u0061\u0067\u0065\u0049\u006e\u0066\u006f\u0072m\u0061\u0074\u0069\u006f\u006e\u0053\u0065gm\u0065\u006e\u0074\u005d \u0050\u0061\u0072\u0073\u0069\u006e\u0067\u0048\u0065ad\u0065\u0072 \u0046\u0069\u006e\u0069\u0073\u0068\u0065\u0064";
if _edf !=nil {_eace +="\u0020\u0077\u0069t\u0068\u0020\u0065\u0072\u0072\u006f\u0072\u0020"+_edf .Error ();}else {_eace +="\u0020\u0073\u0075\u0063\u0063\u0065\u0073\u0073\u0066\u0075\u006c\u006c\u0079";};_fg .Log .Trace (_eace );}();if _edf =_eae .readWidthAndHeight ();
_edf !=nil {return _edf ;};if _edf =_eae .readResolution ();_edf !=nil {return _edf ;};_ ,_edf =_eae ._fgebf .ReadBit ();if _edf !=nil {return _edf ;};if _edf =_eae .readCombinationOperatorOverrideAllowed ();_edf !=nil {return _edf ;};if _edf =_eae .readRequiresAuxiliaryBuffer ();
_edf !=nil {return _edf ;};if _edf =_eae .readCombinationOperator ();_edf !=nil {return _edf ;};if _edf =_eae .readDefaultPixelValue ();_edf !=nil {return _edf ;};if _edf =_eae .readContainsRefinement ();_edf !=nil {return _edf ;};if _edf =_eae .readIsLossless ();
_edf !=nil {return _edf ;};if _edf =_eae .readIsStriped ();_edf !=nil {return _edf ;};if _edf =_eae .readMaxStripeSize ();_edf !=nil {return _edf ;};if _edf =_eae .checkInput ();_edf !=nil {return _edf ;};_fg .Log .Trace ("\u0025\u0073",_eae );return nil ;
};func (_bgab *SymbolDictionary )GetDictionary ()([]*_ded .Bitmap ,error ){_fg .Log .Trace ("\u005b\u0053\u0059\u004d\u0042\u004f\u004c-\u0044\u0049\u0043T\u0049\u004f\u004e\u0041R\u0059\u005d\u0020\u0047\u0065\u0074\u0044\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u0062\u0065\u0067\u0069\u006e\u0073\u002e\u002e\u002e");
defer func (){_fg .Log .Trace ("\u005b\u0053\u0059M\u0042\u004f\u004c\u002d\u0044\u0049\u0043\u0054\u0049\u004f\u004e\u0041\u0052\u0059\u005d\u0020\u0047\u0065\u0074\u0044\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079 \u0066\u0069\u006e\u0069\u0073\u0068\u0065\u0064");
_fg .Log .Trace ("\u005b\u0053Y\u004d\u0042\u004f\u004c\u002dD\u0049\u0043\u0054\u0049\u004fN\u0041\u0052\u0059\u005d\u0020\u0044\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u002e\u0020\u000a\u0045\u0078\u003a\u0020\u0027\u0025\u0073\u0027\u002c\u0020\u000a\u006e\u0065\u0077\u003a\u0027\u0025\u0073\u0027",_bgab ._agab ,_bgab ._dagg );
}();if _bgab ._agab ==nil {var _bgac error ;if _bgab .UseRefinementAggregation {_bgab ._fdedc =_bgab .getSbSymCodeLen ();};if !_bgab .IsHuffmanEncoded {if _bgac =_bgab .setCodingStatistics ();_bgac !=nil {return nil ,_bgac ;};};_bgab ._dagg =make ([]*_ded .Bitmap ,_bgab .NumberOfNewSymbols );
var _cbbad []int ;if _bgab .IsHuffmanEncoded &&!_bgab .UseRefinementAggregation {_cbbad =make ([]int ,_bgab .NumberOfNewSymbols );};if _bgac =_bgab .setSymbolsArray ();_bgac !=nil {return nil ,_bgac ;};var _afce ,_gbcd int64 ;_bgab ._fdfd =0;for _bgab ._fdfd < _bgab .NumberOfNewSymbols {_gbcd ,_bgac =_bgab .decodeHeightClassDeltaHeight ();
if _bgac !=nil {return nil ,_bgac ;};_afce +=_gbcd ;var _addeg ,_agaa uint32 ;_bgfcd :=int64 (_bgab ._fdfd );for {var _cece int64 ;_cece ,_bgac =_bgab .decodeDifferenceWidth ();if _e .Is (_bgac ,_c .ErrOOB ){break ;};if _bgac !=nil {return nil ,_bgac ;
};if _bgab ._fdfd >=_bgab .NumberOfNewSymbols {break ;};_addeg +=uint32 (_cece );_agaa +=_addeg ;if !_bgab .IsHuffmanEncoded ||_bgab .UseRefinementAggregation {if !_bgab .UseRefinementAggregation {_bgac =_bgab .decodeDirectlyThroughGenericRegion (_addeg ,uint32 (_afce ));
if _bgac !=nil {return nil ,_bgac ;};}else {_bgac =_bgab .decodeAggregate (_addeg ,uint32 (_afce ));if _bgac !=nil {return nil ,_bgac ;};};}else if _bgab .IsHuffmanEncoded &&!_bgab .UseRefinementAggregation {_cbbad [_bgab ._fdfd ]=int (_addeg );};_bgab ._fdfd ++;
};if _bgab .IsHuffmanEncoded &&!_bgab .UseRefinementAggregation {var _bfgg int64 ;if _bgab .SdHuffBMSizeSelection ==0{var _dcba _eded .Tabler ;_dcba ,_bgac =_eded .GetStandardTable (1);if _bgac !=nil {return nil ,_bgac ;};_bfgg ,_bgac =_dcba .Decode (_bgab ._bdcd );
if _bgac !=nil {return nil ,_bgac ;};}else {_bfgg ,_bgac =_bgab .huffDecodeBmSize ();if _bgac !=nil {return nil ,_bgac ;};};_bgab ._bdcd .Align ();var _ccgd *_ded .Bitmap ;_ccgd ,_bgac =_bgab .decodeHeightClassCollectiveBitmap (_bfgg ,uint32 (_afce ),_agaa );
if _bgac !=nil {return nil ,_bgac ;};_bgac =_bgab .decodeHeightClassBitmap (_ccgd ,_bgfcd ,int (_afce ),_cbbad );if _bgac !=nil {return nil ,_bgac ;};};};_bgcbg ,_bgac :=_bgab .getToExportFlags ();if _bgac !=nil {return nil ,_bgac ;};_bgab .setExportedSymbols (_bgcbg );
};return _bgab ._agab ,nil ;};func (_fabc *PageInformationSegment )readIsLossless ()error {_eccd ,_bfff :=_fabc ._fgebf .ReadBit ();if _bfff !=nil {return _bfff ;};if _eccd ==1{_fabc .IsLossless =true ;};return nil ;};func (_fbcd *GenericRefinementRegion )decodeTypicalPredictedLine (_aggb ,_ebd ,_dec ,_gae ,_ffc ,_dgf int )error {_ec :=_aggb -int (_fbcd .ReferenceDY );
_fa :=_fbcd .ReferenceBitmap .GetByteIndex (0,_ec );_db :=_fbcd .RegionBitmap .GetByteIndex (0,_aggb );var _cd error ;switch _fbcd .TemplateID {case 0:_cd =_fbcd .decodeTypicalPredictedLineTemplate0 (_aggb ,_ebd ,_dec ,_gae ,_ffc ,_dgf ,_db ,_ec ,_fa );
case 1:_cd =_fbcd .decodeTypicalPredictedLineTemplate1 (_aggb ,_ebd ,_dec ,_gae ,_ffc ,_dgf ,_db ,_ec ,_fa );};return _cd ;};func (_abg *Header )readSegmentNumber (_dff *_ge .Reader )error {const _beab ="\u0072\u0065\u0061\u0064\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u004eu\u006d\u0062\u0065\u0072";
_ebcb :=make ([]byte ,4);_ ,_fbbd :=_dff .Read (_ebcb );if _fbbd !=nil {return _geb .Wrap (_fbbd ,_beab ,"");};_abg .SegmentNumber =_b .BigEndian .Uint32 (_ebcb );return nil ;};func (_afc *GenericRefinementRegion )decodeTemplate (_fff ,_aag ,_bge ,_ddf ,_dbe ,_fcd ,_bdef ,_dcc ,_eac ,_bgec int ,_debe templater )(_bf error ){var (_aae ,_bec ,_becf ,_gaf ,_gfe int16 ;
_efd ,_gda ,_ebb ,_gbf int ;_cge byte ;);if _eac >=1&&(_eac -1)< _afc .ReferenceBitmap .Height {_cge ,_bf =_afc .ReferenceBitmap .GetByte (_bgec -_ddf );if _bf !=nil {return _bf ;};_efd =int (_cge );};if _eac >=0&&(_eac )< _afc .ReferenceBitmap .Height {_cge ,_bf =_afc .ReferenceBitmap .GetByte (_bgec );
if _bf !=nil {return _bf ;};_gda =int (_cge );};if _eac >=-1&&(_eac +1)< _afc .ReferenceBitmap .Height {_cge ,_bf =_afc .ReferenceBitmap .GetByte (_bgec +_ddf );if _bf !=nil {return _bf ;};_ebb =int (_cge );};_bgec ++;if _fff >=1{_cge ,_bf =_afc .RegionBitmap .GetByte (_dcc -_bge );
if _bf !=nil {return _bf ;};_gbf =int (_cge );};_dcc ++;_ggf :=_afc .ReferenceDX %8;_ceed :=6+_ggf ;_bbgf :=_bgec %_ddf ;if _ceed >=0{if _ceed < 8{_aae =int16 (_efd >>uint (_ceed ))&0x07;};if _ceed < 8{_bec =int16 (_gda >>uint (_ceed ))&0x07;};if _ceed < 8{_becf =int16 (_ebb >>uint (_ceed ))&0x07;
};if _ceed ==6&&_bbgf > 1{if _eac >=1&&(_eac -1)< _afc .ReferenceBitmap .Height {_cge ,_bf =_afc .ReferenceBitmap .GetByte (_bgec -_ddf -2);if _bf !=nil {return _bf ;};_aae |=int16 (_cge <<2)&0x04;};if _eac >=0&&_eac < _afc .ReferenceBitmap .Height {_cge ,_bf =_afc .ReferenceBitmap .GetByte (_bgec -2);
if _bf !=nil {return _bf ;};_bec |=int16 (_cge <<2)&0x04;};if _eac >=-1&&_eac +1< _afc .ReferenceBitmap .Height {_cge ,_bf =_afc .ReferenceBitmap .GetByte (_bgec +_ddf -2);if _bf !=nil {return _bf ;};_becf |=int16 (_cge <<2)&0x04;};};if _ceed ==0{_efd =0;
_gda =0;_ebb =0;if _bbgf < _ddf -1{if _eac >=1&&_eac -1< _afc .ReferenceBitmap .Height {_cge ,_bf =_afc .ReferenceBitmap .GetByte (_bgec -_ddf );if _bf !=nil {return _bf ;};_efd =int (_cge );};if _eac >=0&&_eac < _afc .ReferenceBitmap .Height {_cge ,_bf =_afc .ReferenceBitmap .GetByte (_bgec );
if _bf !=nil {return _bf ;};_gda =int (_cge );};if _eac >=-1&&_eac +1< _afc .ReferenceBitmap .Height {_cge ,_bf =_afc .ReferenceBitmap .GetByte (_bgec +_ddf );if _bf !=nil {return _bf ;};_ebb =int (_cge );};};_bgec ++;};}else {_aae =int16 (_efd <<1)&0x07;
_bec =int16 (_gda <<1)&0x07;_becf =int16 (_ebb <<1)&0x07;_efd =0;_gda =0;_ebb =0;if _bbgf < _ddf -1{if _eac >=1&&_eac -1< _afc .ReferenceBitmap .Height {_cge ,_bf =_afc .ReferenceBitmap .GetByte (_bgec -_ddf );if _bf !=nil {return _bf ;};_efd =int (_cge );
};if _eac >=0&&_eac < _afc .ReferenceBitmap .Height {_cge ,_bf =_afc .ReferenceBitmap .GetByte (_bgec );if _bf !=nil {return _bf ;};_gda =int (_cge );};if _eac >=-1&&_eac +1< _afc .ReferenceBitmap .Height {_cge ,_bf =_afc .ReferenceBitmap .GetByte (_bgec +_ddf );
if _bf !=nil {return _bf ;};_ebb =int (_cge );};_bgec ++;};_aae |=int16 ((_efd >>7)&0x07);_bec |=int16 ((_gda >>7)&0x07);_becf |=int16 ((_ebb >>7)&0x07);};_gaf =int16 (_gbf >>6);_gfe =0;_ddb :=(2-_ggf )%8;_efd <<=uint (_ddb );_gda <<=uint (_ddb );_ebb <<=uint (_ddb );
_gbf <<=2;var _eabc int ;for _cfc :=0;_cfc < _aag ;_cfc ++{_gebe :=_cfc &0x07;_edbc :=_debe .form (_aae ,_bec ,_becf ,_gaf ,_gfe );if _afc ._edb {_cge ,_bf =_afc .RegionBitmap .GetByte (_afc .RegionBitmap .GetByteIndex (_cfc ,_fff ));if _bf !=nil {return _bf ;
};_afc ._abc .SetIndex (int32 (_afc .overrideAtTemplate0 (int (_edbc ),_cfc ,_fff ,int (_cge ),_gebe )));}else {_afc ._abc .SetIndex (int32 (_edbc ));};_eabc ,_bf =_afc ._be .DecodeBit (_afc ._abc );if _bf !=nil {return _bf ;};if _bf =_afc .RegionBitmap .SetPixel (_cfc ,_fff ,byte (_eabc ));
_bf !=nil {return _bf ;};_aae =((_aae <<1)|0x01&int16 (_efd >>7))&0x07;_bec =((_bec <<1)|0x01&int16 (_gda >>7))&0x07;_becf =((_becf <<1)|0x01&int16 (_ebb >>7))&0x07;_gaf =((_gaf <<1)|0x01&int16 (_gbf >>7))&0x07;_gfe =int16 (_eabc );if (_cfc -int (_afc .ReferenceDX ))%8==5{_efd =0;
_gda =0;_ebb =0;if ((_cfc -int (_afc .ReferenceDX ))/8)+1< _afc .ReferenceBitmap .RowStride {if _eac >=1&&(_eac -1)< _afc .ReferenceBitmap .Height {_cge ,_bf =_afc .ReferenceBitmap .GetByte (_bgec -_ddf );if _bf !=nil {return _bf ;};_efd =int (_cge );};
if _eac >=0&&_eac < _afc .ReferenceBitmap .Height {_cge ,_bf =_afc .ReferenceBitmap .GetByte (_bgec );if _bf !=nil {return _bf ;};_gda =int (_cge );};if _eac >=-1&&(_eac +1)< _afc .ReferenceBitmap .Height {_cge ,_bf =_afc .ReferenceBitmap .GetByte (_bgec +_ddf );
if _bf !=nil {return _bf ;};_ebb =int (_cge );};};_bgec ++;}else {_efd <<=1;_gda <<=1;_ebb <<=1;};if _gebe ==5&&_fff >=1{if ((_cfc >>3)+1)>=_afc .RegionBitmap .RowStride {_gbf =0;}else {_cge ,_bf =_afc .RegionBitmap .GetByte (_dcc -_bge );if _bf !=nil {return _bf ;
};_gbf =int (_cge );};_dcc ++;}else {_gbf <<=1;};};return nil ;};func (_fcag *SymbolDictionary )encodeSymbols (_dgba _ge .BinaryWriter )(_ceacb int ,_degda error ){const _cfccf ="\u0065\u006e\u0063o\u0064\u0065\u0053\u0079\u006d\u0062\u006f\u006c";_cdae :=_bc .New ();
_cdae .Init ();_agac ,_degda :=_fcag ._ebeg .SelectByIndexes (_fcag ._cfba );if _degda !=nil {return 0,_geb .Wrap (_degda ,_cfccf ,"\u0069n\u0069\u0074\u0069\u0061\u006c");};_beeb :=map[*_ded .Bitmap ]int {};for _cef ,_agaba :=range _agac .Values {_beeb [_agaba ]=_cef ;
};_agac .SortByHeight ();var _dbbe ,_edcf int ;_dcde ,_degda :=_agac .GroupByHeight ();if _degda !=nil {return 0,_geb .Wrap (_degda ,_cfccf ,"");};for _ ,_befb :=range _dcde .Values {_cgde :=_befb .Values [0].Height ;_eafe :=_cgde -_dbbe ;if _degda =_cdae .EncodeInteger (_bc .IADH ,_eafe );
_degda !=nil {return 0,_geb .Wrapf (_degda ,_cfccf ,"\u0049\u0041\u0044\u0048\u0020\u0066\u006f\u0072\u0020\u0064\u0068\u003a \u0027\u0025\u0064\u0027",_eafe );};_dbbe =_cgde ;_bddac ,_aeaed :=_befb .GroupByWidth ();if _aeaed !=nil {return 0,_geb .Wrapf (_aeaed ,_cfccf ,"\u0068\u0065\u0069g\u0068\u0074\u003a\u0020\u0027\u0025\u0064\u0027",_cgde );
};var _geaca int ;for _ ,_bddb :=range _bddac .Values {for _ ,_cafb :=range _bddb .Values {_cfd :=_cafb .Width ;_dead :=_cfd -_geaca ;if _aeaed =_cdae .EncodeInteger (_bc .IADW ,_dead );_aeaed !=nil {return 0,_geb .Wrapf (_aeaed ,_cfccf ,"\u0049\u0041\u0044\u0057\u0020\u0066\u006f\u0072\u0020\u0064\u0077\u003a \u0027\u0025\u0064\u0027",_dead );
};_geaca +=_dead ;if _aeaed =_cdae .EncodeBitmap (_cafb ,false );_aeaed !=nil {return 0,_geb .Wrapf (_aeaed ,_cfccf ,"H\u0065i\u0067\u0068\u0074\u003a\u0020\u0025\u0064\u0020W\u0069\u0064\u0074\u0068: \u0025\u0064",_cgde ,_cfd );};_aaca :=_beeb [_cafb ];
_fcag ._eead [_aaca ]=_edcf ;_edcf ++;};};if _aeaed =_cdae .EncodeOOB (_bc .IADW );_aeaed !=nil {return 0,_geb .Wrap (_aeaed ,_cfccf ,"\u0049\u0041\u0044\u0057");};};if _degda =_cdae .EncodeInteger (_bc .IAEX ,0);_degda !=nil {return 0,_geb .Wrap (_degda ,_cfccf ,"\u0065\u0078p\u006f\u0072\u0074e\u0064\u0020\u0073\u0079\u006d\u0062\u006f\u006c\u0073");
};if _degda =_cdae .EncodeInteger (_bc .IAEX ,len (_fcag ._cfba ));_degda !=nil {return 0,_geb .Wrap (_degda ,_cfccf ,"\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0073\u0079m\u0062\u006f\u006c\u0073");};_cdae .Final ();_edbe ,_degda :=_cdae .WriteTo (_dgba );
if _degda !=nil {return 0,_geb .Wrap (_degda ,_cfccf ,"\u0077\u0072i\u0074\u0069\u006e\u0067 \u0065\u006ec\u006f\u0064\u0065\u0072\u0020\u0063\u006f\u006et\u0065\u0078\u0074\u0020\u0074\u006f\u0020\u0027\u0077\u0027\u0020\u0077r\u0069\u0074\u0065\u0072");
};return int (_edbe ),nil ;};func (_beae *TextRegion )createRegionBitmap ()error {_beae .RegionBitmap =_ded .New (int (_beae .RegionInfo .BitmapWidth ),int (_beae .RegionInfo .BitmapHeight ));if _beae .DefaultPixel !=0{_beae .RegionBitmap .SetDefaultPixel ();
};return nil ;};func (_acgf *PatternDictionary )GetDictionary ()([]*_ded .Bitmap ,error ){if _acgf .Patterns !=nil {return _acgf .Patterns ,nil ;};if !_acgf .IsMMREncoded {_acgf .setGbAtPixels ();};_faba :=NewGenericRegion (_acgf ._bfac );_faba .setParametersMMR (_acgf .IsMMREncoded ,_acgf .DataOffset ,_acgf .DataLength ,uint32 (_acgf .HdpHeight ),(_acgf .GrayMax +1)*uint32 (_acgf .HdpWidth ),_acgf .HDTemplate ,false ,false ,_acgf .GBAtX ,_acgf .GBAtY );
_dbb ,_cbe :=_faba .GetRegionBitmap ();if _cbe !=nil {return nil ,_cbe ;};if _cbe =_acgf .extractPatterns (_dbb );_cbe !=nil {return nil ,_cbe ;};return _acgf .Patterns ,nil ;};func (_gdbdg *Header )writeSegmentNumber (_abdb _ge .BinaryWriter )(_cfgce int ,_gfag error ){_dga :=make ([]byte ,4);
_b .BigEndian .PutUint32 (_dga ,_gdbdg .SegmentNumber );if _cfgce ,_gfag =_abdb .Write (_dga );_gfag !=nil {return 0,_geb .Wrap (_gfag ,"\u0048e\u0061\u0064\u0065\u0072.\u0077\u0072\u0069\u0074\u0065S\u0065g\u006de\u006e\u0074\u004e\u0075\u006d\u0062\u0065r","");
};return _cfgce ,nil ;};func (_befd *RegionSegment )Size ()int {return 17};func (_daa *HalftoneRegion )parseHeader ()error {if _ddgf :=_daa .RegionSegment .parseHeader ();_ddgf !=nil {return _ddgf ;};_cfcb ,_deab :=_daa ._decab .ReadBit ();if _deab !=nil {return _deab ;
};_daa .HDefaultPixel =int8 (_cfcb );_gfbc ,_deab :=_daa ._decab .ReadBits (3);if _deab !=nil {return _deab ;};_daa .CombinationOperator =_ded .CombinationOperator (_gfbc &0xf);_cfcb ,_deab =_daa ._decab .ReadBit ();if _deab !=nil {return _deab ;};if _cfcb ==1{_daa .HSkipEnabled =true ;
};_gfbc ,_deab =_daa ._decab .ReadBits (2);if _deab !=nil {return _deab ;};_daa .HTemplate =byte (_gfbc &0xf);_cfcb ,_deab =_daa ._decab .ReadBit ();if _deab !=nil {return _deab ;};if _cfcb ==1{_daa .IsMMREncoded =true ;};_gfbc ,_deab =_daa ._decab .ReadBits (32);
if _deab !=nil {return _deab ;};_daa .HGridWidth =uint32 (_gfbc &_g .MaxUint32 );_gfbc ,_deab =_daa ._decab .ReadBits (32);if _deab !=nil {return _deab ;};_daa .HGridHeight =uint32 (_gfbc &_g .MaxUint32 );_gfbc ,_deab =_daa ._decab .ReadBits (32);if _deab !=nil {return _deab ;
};_daa .HGridX =int32 (_gfbc &_g .MaxInt32 );_gfbc ,_deab =_daa ._decab .ReadBits (32);if _deab !=nil {return _deab ;};_daa .HGridY =int32 (_gfbc &_g .MaxInt32 );_gfbc ,_deab =_daa ._decab .ReadBits (16);if _deab !=nil {return _deab ;};_daa .HRegionX =uint16 (_gfbc &_g .MaxUint16 );
_gfbc ,_deab =_daa ._decab .ReadBits (16);if _deab !=nil {return _deab ;};_daa .HRegionY =uint16 (_gfbc &_g .MaxUint16 );if _deab =_daa .computeSegmentDataStructure ();_deab !=nil {return _deab ;};return _daa .checkInput ();};func (_bcaa *TableSegment )parseHeader ()error {var (_ggfae int ;
_gdeb uint64 ;_ddee error ;);_ggfae ,_ddee =_bcaa ._edfe .ReadBit ();if _ddee !=nil {return _ddee ;};if _ggfae ==1{return _de .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0074\u0061\u0062\u006c\u0065 \u0073\u0065\u0067\u006d\u0065\u006e\u0074\u0020\u0064e\u0066\u0069\u006e\u0069\u0074\u0069\u006f\u006e\u002e\u0020\u0042\u002e\u0032\u002e1\u0020\u0043\u006f\u0064\u0065\u0020\u0054\u0061\u0062\u006c\u0065\u0020\u0066\u006c\u0061\u0067\u0073\u003a\u0020\u0042\u0069\u0074\u0020\u0037\u0020\u006d\u0075\u0073\u0074\u0020b\u0065\u0020\u007a\u0065\u0072\u006f\u002e\u0020\u0057a\u0073\u003a \u0025\u0064",_ggfae );
};if _gdeb ,_ddee =_bcaa ._edfe .ReadBits (3);_ddee !=nil {return _ddee ;};_bcaa ._babaa =(int32 (_gdeb )+1)&0xf;if _gdeb ,_ddee =_bcaa ._edfe .ReadBits (3);_ddee !=nil {return _ddee ;};_bcaa ._eacd =(int32 (_gdeb )+1)&0xf;if _gdeb ,_ddee =_bcaa ._edfe .ReadBits (32);
_ddee !=nil {return _ddee ;};_bcaa ._ffdd =int32 (_gdeb &_g .MaxInt32 );if _gdeb ,_ddee =_bcaa ._edfe .ReadBits (32);_ddee !=nil {return _ddee ;};_bcaa ._fdbg =int32 (_gdeb &_g .MaxInt32 );return nil ;};type PageInformationSegment struct{_fgebf *_ge .Reader ;
PageBMHeight int ;PageBMWidth int ;ResolutionX int ;ResolutionY int ;_bgcdb bool ;_egae _ded .CombinationOperator ;_feag bool ;DefaultPixelValue uint8 ;_efgf bool ;IsLossless bool ;IsStripe bool ;MaxStripeSize uint16 ;};func (_dddec *Header )writeSegmentPageAssociation (_aga _ge .BinaryWriter )(_ddga int ,_ecc error ){const _ebf ="w\u0072\u0069\u0074\u0065\u0053\u0065g\u006d\u0065\u006e\u0074\u0050\u0061\u0067\u0065\u0041s\u0073\u006f\u0063i\u0061t\u0069\u006f\u006e";
if _dddec .pageSize ()!=4{if _ecc =_aga .WriteByte (byte (_dddec .PageAssociation ));_ecc !=nil {return 0,_geb .Wrap (_ecc ,_ebf ,"\u0070\u0061\u0067\u0065\u0053\u0069\u007a\u0065\u0020\u0021\u003d\u0020\u0034");};return 1,nil ;};_ecaa :=make ([]byte ,4);
_b .BigEndian .PutUint32 (_ecaa ,uint32 (_dddec .PageAssociation ));if _ddga ,_ecc =_aga .Write (_ecaa );_ecc !=nil {return 0,_geb .Wrap (_ecc ,_ebf ,"\u0034 \u0062y\u0074\u0065\u0020\u0070\u0061g\u0065\u0020n\u0075\u006d\u0062\u0065\u0072");};return _ddga ,nil ;
};func (_fbfg *PatternDictionary )readTemplate ()error {_adc ,_eabe :=_fbfg ._bfac .ReadBits (2);if _eabe !=nil {return _eabe ;};_fbfg .HDTemplate =byte (_adc );return nil ;};const (TSymbolDictionary Type =0;TIntermediateTextRegion Type =4;TImmediateTextRegion Type =6;
TImmediateLosslessTextRegion Type =7;TPatternDictionary Type =16;TIntermediateHalftoneRegion Type =20;TImmediateHalftoneRegion Type =22;TImmediateLosslessHalftoneRegion Type =23;TIntermediateGenericRegion Type =36;TImmediateGenericRegion Type =38;TImmediateLosslessGenericRegion Type =39;
TIntermediateGenericRefinementRegion Type =40;TImmediateGenericRefinementRegion Type =42;TImmediateLosslessGenericRefinementRegion Type =43;TPageInformation Type =48;TEndOfPage Type =49;TEndOfStrip Type =50;TEndOfFile Type =51;TProfiles Type =52;TTables Type =53;
TExtension Type =62;TBitmap Type =70;);const (ORandom OrganizationType =iota ;OSequential ;);func (_fead *SymbolDictionary )readNumberOfExportedSymbols ()error {_agdf ,_cdbc :=_fead ._bdcd .ReadBits (32);if _cdbc !=nil {return _cdbc ;};_fead .NumberOfExportedSymbols =uint32 (_agdf &_g .MaxUint32 );
return nil ;};func (_defe *PageInformationSegment )readWidthAndHeight ()error {_adda ,_ffee :=_defe ._fgebf .ReadBits (32);if _ffee !=nil {return _ffee ;};_defe .PageBMWidth =int (_adda &_g .MaxInt32 );_adda ,_ffee =_defe ._fgebf .ReadBits (32);if _ffee !=nil {return _ffee ;
};_defe .PageBMHeight =int (_adda &_g .MaxInt32 );return nil ;};func (_adde *Header )referenceSize ()uint {switch {case _adde .SegmentNumber <=255:return 1;case _adde .SegmentNumber <=65535:return 2;default:return 4;};};func (_bbaac *PageInformationSegment )Encode (w _ge .BinaryWriter )(_ceef int ,_geba error ){const _cbbaa ="\u0050\u0061g\u0065\u0049\u006e\u0066\u006f\u0072\u006d\u0061\u0074\u0069\u006f\u006e\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u002e\u0045\u006eco\u0064\u0065";
_edec :=make ([]byte ,4);_b .BigEndian .PutUint32 (_edec ,uint32 (_bbaac .PageBMWidth ));_ceef ,_geba =w .Write (_edec );if _geba !=nil {return _ceef ,_geb .Wrap (_geba ,_cbbaa ,"\u0077\u0069\u0064t\u0068");};_b .BigEndian .PutUint32 (_edec ,uint32 (_bbaac .PageBMHeight ));
var _bcac int ;_bcac ,_geba =w .Write (_edec );if _geba !=nil {return _bcac +_ceef ,_geb .Wrap (_geba ,_cbbaa ,"\u0068\u0065\u0069\u0067\u0068\u0074");};_ceef +=_bcac ;_b .BigEndian .PutUint32 (_edec ,uint32 (_bbaac .ResolutionX ));_bcac ,_geba =w .Write (_edec );
if _geba !=nil {return _bcac +_ceef ,_geb .Wrap (_geba ,_cbbaa ,"\u0078\u0020\u0072e\u0073\u006f\u006c\u0075\u0074\u0069\u006f\u006e");};_ceef +=_bcac ;_b .BigEndian .PutUint32 (_edec ,uint32 (_bbaac .ResolutionY ));if _bcac ,_geba =w .Write (_edec );_geba !=nil {return _bcac +_ceef ,_geb .Wrap (_geba ,_cbbaa ,"\u0079\u0020\u0072e\u0073\u006f\u006c\u0075\u0074\u0069\u006f\u006e");
};_ceef +=_bcac ;if _geba =_bbaac .encodeFlags (w );_geba !=nil {return _ceef ,_geb .Wrap (_geba ,_cbbaa ,"");};_ceef ++;if _bcac ,_geba =_bbaac .encodeStripingInformation (w );_geba !=nil {return _ceef ,_geb .Wrap (_geba ,_cbbaa ,"");};_ceef +=_bcac ;
return _ceef ,nil ;};func (_dcbaf *SymbolDictionary )huffDecodeRefAggNInst ()(int64 ,error ){if !_dcbaf .SdHuffAggInstanceSelection {_beba ,_fdac :=_eded .GetStandardTable (1);if _fdac !=nil {return 0,_fdac ;};return _beba .Decode (_dcbaf ._bdcd );};if _dcbaf ._fffb ==nil {var (_dgeef int ;
_badb error ;);if _dcbaf .SdHuffDecodeHeightSelection ==3{_dgeef ++;};if _dcbaf .SdHuffDecodeWidthSelection ==3{_dgeef ++;};if _dcbaf .SdHuffBMSizeSelection ==3{_dgeef ++;};_dcbaf ._fffb ,_badb =_dcbaf .getUserTable (_dgeef );if _badb !=nil {return 0,_badb ;
};};return _dcbaf ._fffb .Decode (_dcbaf ._bdcd );};func (_ccfd *SymbolDictionary )getSymbol (_bdag int )(*_ded .Bitmap ,error ){const _dcef ="\u0067e\u0074\u0053\u0079\u006d\u0062\u006fl";_efe ,_ccca :=_ccfd ._ebeg .GetBitmap (_ccfd ._cfba [_bdag ]);if _ccca !=nil {return nil ,_geb .Wrap (_ccca ,_dcef ,"\u0063\u0061n\u0027\u0074\u0020g\u0065\u0074\u0020\u0073\u0079\u006d\u0062\u006f\u006c");
};return _efe ,nil ;};func (_fbe *GenericRegion )updateOverrideFlags ()error {const _fca ="\u0075\u0070\u0064\u0061te\u004f\u0076\u0065\u0072\u0072\u0069\u0064\u0065\u0046\u006c\u0061\u0067\u0073";if _fbe .GBAtX ==nil ||_fbe .GBAtY ==nil {return nil ;};
if len (_fbe .GBAtX )!=len (_fbe .GBAtY ){return _geb .Errorf (_fca ,"i\u006eco\u0073i\u0073t\u0065\u006e\u0074\u0020\u0041T\u0020\u0070\u0069x\u0065\u006c\u002e\u0020\u0041m\u006f\u0075\u006et\u0020\u006f\u0066\u0020\u0027\u0078\u0027\u0020\u0070\u0069\u0078e\u006c\u0073\u003a %d\u002c\u0020\u0041\u006d\u006f\u0075n\u0074\u0020\u006f\u0066\u0020\u0027\u0079\u0027\u0020\u0070\u0069\u0078e\u006cs\u003a\u0020\u0025\u0064",len (_fbe .GBAtX ),len (_fbe .GBAtY ));
};_fbe .GBAtOverride =make ([]bool ,len (_fbe .GBAtX ));switch _fbe .GBTemplate {case 0:if !_fbe .UseExtTemplates {if _fbe .GBAtX [0]!=3||_fbe .GBAtY [0]!=-1{_fbe .setOverrideFlag (0);};if _fbe .GBAtX [1]!=-3||_fbe .GBAtY [1]!=-1{_fbe .setOverrideFlag (1);
};if _fbe .GBAtX [2]!=2||_fbe .GBAtY [2]!=-2{_fbe .setOverrideFlag (2);};if _fbe .GBAtX [3]!=-2||_fbe .GBAtY [3]!=-2{_fbe .setOverrideFlag (3);};}else {if _fbe .GBAtX [0]!=-2||_fbe .GBAtY [0]!=0{_fbe .setOverrideFlag (0);};if _fbe .GBAtX [1]!=0||_fbe .GBAtY [1]!=-2{_fbe .setOverrideFlag (1);
};if _fbe .GBAtX [2]!=-2||_fbe .GBAtY [2]!=-1{_fbe .setOverrideFlag (2);};if _fbe .GBAtX [3]!=-1||_fbe .GBAtY [3]!=-2{_fbe .setOverrideFlag (3);};if _fbe .GBAtX [4]!=1||_fbe .GBAtY [4]!=-2{_fbe .setOverrideFlag (4);};if _fbe .GBAtX [5]!=2||_fbe .GBAtY [5]!=-1{_fbe .setOverrideFlag (5);
};if _fbe .GBAtX [6]!=-3||_fbe .GBAtY [6]!=0{_fbe .setOverrideFlag (6);};if _fbe .GBAtX [7]!=-4||_fbe .GBAtY [7]!=0{_fbe .setOverrideFlag (7);};if _fbe .GBAtX [8]!=2||_fbe .GBAtY [8]!=-2{_fbe .setOverrideFlag (8);};if _fbe .GBAtX [9]!=3||_fbe .GBAtY [9]!=-1{_fbe .setOverrideFlag (9);
};if _fbe .GBAtX [10]!=-2||_fbe .GBAtY [10]!=-2{_fbe .setOverrideFlag (10);};if _fbe .GBAtX [11]!=-3||_fbe .GBAtY [11]!=-1{_fbe .setOverrideFlag (11);};};case 1:if _fbe .GBAtX [0]!=3||_fbe .GBAtY [0]!=-1{_fbe .setOverrideFlag (0);};case 2:if _fbe .GBAtX [0]!=2||_fbe .GBAtY [0]!=-1{_fbe .setOverrideFlag (0);
};case 3:if _fbe .GBAtX [0]!=2||_fbe .GBAtY [0]!=-1{_fbe .setOverrideFlag (0);};};return nil ;};var _ SegmentEncoder =&RegionSegment {};func (_edeb *Header )writeFlags (_bcca _ge .BinaryWriter )(_agfe error ){const _bddef ="\u0048\u0065\u0061\u0064\u0065\u0072\u002e\u0077\u0072\u0069\u0074\u0065F\u006c\u0061\u0067\u0073";
_ddag :=byte (_edeb .Type );if _agfe =_bcca .WriteByte (_ddag );_agfe !=nil {return _geb .Wrap (_agfe ,_bddef ,"\u0077\u0072\u0069ti\u006e\u0067\u0020\u0073\u0065\u0067\u006d\u0065\u006et\u0020t\u0079p\u0065 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0066\u0061\u0069\u006c\u0065\u0064");
};if !_edeb .RetainFlag &&!_edeb .PageAssociationFieldSize {return nil ;};if _agfe =_bcca .SkipBits (-8);_agfe !=nil {return _geb .Wrap (_agfe ,_bddef ,"\u0073\u006bi\u0070\u0070\u0069\u006e\u0067\u0020\u0062\u0061\u0063\u006b\u0020\u0074\u0068\u0065\u0020\u0062\u0069\u0074\u0073\u0020\u0066\u0061il\u0065\u0064");
};var _gbbg int ;if _edeb .RetainFlag {_gbbg =1;};if _agfe =_bcca .WriteBit (_gbbg );_agfe !=nil {return _geb .Wrap (_agfe ,_bddef ,"\u0072\u0065\u0074\u0061in\u0020\u0072\u0065\u0074\u0061\u0069\u006e\u0020\u0066\u006c\u0061\u0067\u0073");};_gbbg =0;if _edeb .PageAssociationFieldSize {_gbbg =1;
};if _agfe =_bcca .WriteBit (_gbbg );_agfe !=nil {return _geb .Wrap (_agfe ,_bddef ,"p\u0061\u0067\u0065\u0020as\u0073o\u0063\u0069\u0061\u0074\u0069o\u006e\u0020\u0066\u006c\u0061\u0067");};_bcca .FinishByte ();return nil ;};func (_edecc *TableSegment )StreamReader ()*_ge .Reader {return _edecc ._edfe };
func (_bdab *PageInformationSegment )readResolution ()error {_egg ,_fbff :=_bdab ._fgebf .ReadBits (32);if _fbff !=nil {return _fbff ;};_bdab .ResolutionX =int (_egg &_g .MaxInt32 );_egg ,_fbff =_bdab ._fgebf .ReadBits (32);if _fbff !=nil {return _fbff ;
};_bdab .ResolutionY =int (_egg &_g .MaxInt32 );return nil ;};func (_defa *HalftoneRegion )computeX (_fbcdd ,_fcgd int )int {return _defa .shiftAndFill (int (_defa .HGridX )+_fbcdd *int (_defa .HRegionY )+_fcgd *int (_defa .HRegionX ));};func (_cfe *GenericRegion )writeGBAtPixels (_cfb _ge .BinaryWriter )(_dabf int ,_agfc error ){const _accd ="\u0077r\u0069t\u0065\u0047\u0042\u0041\u0074\u0050\u0069\u0078\u0065\u006c\u0073";
if _cfe .UseMMR {return 0,nil ;};_afb :=1;if _cfe .GBTemplate ==0{_afb =4;}else if _cfe .UseExtTemplates {_afb =12;};if len (_cfe .GBAtX )!=_afb {return 0,_geb .Errorf (_accd ,"\u0067\u0062\u0020\u0061\u0074\u0020\u0070\u0061\u0069\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020d\u006f\u0065\u0073\u006e\u0027\u0074\u0020m\u0061\u0074\u0063\u0068\u0020\u0074\u006f\u0020\u0047\u0042\u0041t\u0058\u0020\u0073\u006c\u0069\u0063\u0065\u0020\u006c\u0065\u006e");
};if len (_cfe .GBAtY )!=_afb {return 0,_geb .Errorf (_accd ,"\u0067\u0062\u0020\u0061\u0074\u0020\u0070\u0061\u0069\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020d\u006f\u0065\u0073\u006e\u0027\u0074\u0020m\u0061\u0074\u0063\u0068\u0020\u0074\u006f\u0020\u0047\u0042\u0041t\u0059\u0020\u0073\u006c\u0069\u0063\u0065\u0020\u006c\u0065\u006e");
};for _gfabf :=0;_gfabf < _afb ;_gfabf ++{if _agfc =_cfb .WriteByte (byte (_cfe .GBAtX [_gfabf ]));_agfc !=nil {return _dabf ,_geb .Wrap (_agfc ,_accd ,"w\u0072\u0069\u0074\u0065\u0020\u0047\u0042\u0041\u0074\u0058");};_dabf ++;if _agfc =_cfb .WriteByte (byte (_cfe .GBAtY [_gfabf ]));
_agfc !=nil {return _dabf ,_geb .Wrap (_agfc ,_accd ,"w\u0072\u0069\u0074\u0065\u0020\u0047\u0042\u0041\u0074\u0059");};_dabf ++;};return _dabf ,nil ;};func (_dgdd *GenericRefinementRegion )parseHeader ()(_fga error ){_fg .Log .Trace ("\u005b\u0047\u0045\u004e\u0045\u0052\u0049\u0043\u002d\u0052\u0045\u0046\u002d\u0052\u0045\u0047\u0049\u004f\u004e\u005d\u0020\u0070\u0061\u0072s\u0069\u006e\u0067\u0020\u0048e\u0061\u0064e\u0072\u002e\u002e\u002e");
_aaab :=_a .Now ();defer func (){if _fga ==nil {_fg .Log .Trace ("\u005b\u0047\u0045\u004e\u0045\u0052\u0049\u0043\u002d\u0052\u0045\u0046\u002d\u0052\u0045G\u0049\u004f\u004e\u005d\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020h\u0065\u0061\u0064\u0065\u0072\u0020\u0066\u0069\u006e\u0069\u0073\u0068id\u0020\u0069\u006e\u003a\u0020\u0025\u0064\u0020\u006e\u0073",_a .Since (_aaab ).Nanoseconds ());
}else {_fg .Log .Trace ("\u005b\u0047E\u004e\u0045\u0052\u0049\u0043\u002d\u0052\u0045\u0046\u002d\u0052\u0045\u0047\u0049\u004f\u004e\u005d\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0068\u0065\u0061\u0064\u0065\u0072\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0073",_fga );
};}();if _fga =_dgdd .RegionInfo .parseHeader ();_fga !=nil {return _fga ;};_ ,_fga =_dgdd ._ab .ReadBits (6);if _fga !=nil {return _fga ;};_dgdd .IsTPGROn ,_fga =_dgdd ._ab .ReadBool ();if _fga !=nil {return _fga ;};var _ccb int ;_ccb ,_fga =_dgdd ._ab .ReadBit ();
if _fga !=nil {return _fga ;};_dgdd .TemplateID =int8 (_ccb );switch _dgdd .TemplateID {case 0:_dgdd .Template =_dgdd ._gb ;if _fga =_dgdd .readAtPixels ();_fga !=nil {return _fga ;};case 1:_dgdd .Template =_dgdd ._eb ;};return nil ;};type template0 struct{};
func (_abb *template1 )setIndex (_dgb *_ede .DecoderStats ){_dgb .SetIndex (0x080)};func (_ea *GenericRefinementRegion )GetRegionBitmap ()(*_ded .Bitmap ,error ){var _bcb error ;_fg .Log .Trace ("\u005b\u0047E\u004e\u0045\u0052\u0049\u0043\u002d\u0052\u0045\u0046\u002d\u0052\u0045\u0047\u0049\u004f\u004e\u005d\u0020\u0047\u0065\u0074\u0052\u0065\u0067\u0069\u006f\u006e\u0042\u0069\u0074\u006d\u0061\u0070\u0020\u0062\u0065\u0067\u0069\u006e\u0073\u002e\u002e\u002e");
defer func (){if _bcb !=nil {_fg .Log .Trace ("[\u0047\u0045\u004e\u0045\u0052\u0049\u0043\u002d\u0052E\u0046\u002d\u0052\u0045\u0047\u0049\u004fN]\u0020\u0047\u0065\u0074R\u0065\u0067\u0069\u006f\u006e\u0042\u0069\u0074\u006dap\u0020\u0066a\u0069\u006c\u0065\u0064\u002e\u0020\u0025\u0076",_bcb );
}else {_fg .Log .Trace ("\u005b\u0047E\u004e\u0045\u0052\u0049\u0043\u002d\u0052\u0045\u0046\u002d\u0052\u0045\u0047\u0049\u004f\u004e\u005d\u0020\u0047\u0065\u0074\u0052\u0065\u0067\u0069\u006f\u006e\u0042\u0069\u0074\u006d\u0061\u0070\u0020\u0066\u0069\u006e\u0069\u0073\u0068\u0065\u0064\u002e");
};}();if _ea .RegionBitmap !=nil {return _ea .RegionBitmap ,nil ;};_ba :=0;if _ea .ReferenceBitmap ==nil {_ea .ReferenceBitmap ,_bcb =_ea .getGrReference ();if _bcb !=nil {return nil ,_bcb ;};};if _ea ._be ==nil {_ea ._be ,_bcb =_ede .New (_ea ._ab );if _bcb !=nil {return nil ,_bcb ;
};};if _ea ._abc ==nil {_ea ._abc =_ede .NewStats (8192,1);};_ea .RegionBitmap =_ded .New (int (_ea .RegionInfo .BitmapWidth ),int (_ea .RegionInfo .BitmapHeight ));if _ea .TemplateID ==0{if _bcb =_ea .updateOverride ();_bcb !=nil {return nil ,_bcb ;};
};_gbg :=(_ea .RegionBitmap .Width +7)&-8;var _gf int ;if _ea .IsTPGROn {_gf =int (-_ea .ReferenceDY )*_ea .ReferenceBitmap .RowStride ;};_bb :=_gf +1;for _ag :=0;_ag < _ea .RegionBitmap .Height ;_ag ++{if _ea .IsTPGROn {_dag ,_df :=_ea .decodeSLTP ();
if _df !=nil {return nil ,_df ;};_ba ^=_dag ;};if _ba ==0{_bcb =_ea .decodeOptimized (_ag ,_ea .RegionBitmap .Width ,_ea .RegionBitmap .RowStride ,_ea .ReferenceBitmap .RowStride ,_gbg ,_gf ,_bb );if _bcb !=nil {return nil ,_bcb ;};}else {_bcb =_ea .decodeTypicalPredictedLine (_ag ,_ea .RegionBitmap .Width ,_ea .RegionBitmap .RowStride ,_ea .ReferenceBitmap .RowStride ,_gbg ,_gf );
if _bcb !=nil {return nil ,_bcb ;};};};return _ea .RegionBitmap ,nil ;};func (_geecg *SymbolDictionary )setInSyms ()error {if _geecg .Header .RTSegments !=nil {return _geecg .retrieveImportSymbols ();};_geecg ._egc =make ([]*_ded .Bitmap ,0);return nil ;
};func (_cdgc *GenericRegion )overrideAtTemplate1 (_dae ,_ebaag ,_fdg ,_debb ,_effd int )int {_dae &=0x1FF7;if _cdgc .GBAtY [0]==0&&_cdgc .GBAtX [0]>=-int8 (_effd ){_dae |=(_debb >>uint (7-(int8 (_effd )+_cdgc .GBAtX [0]))&0x1)<<3;}else {_dae |=int (_cdgc .getPixel (_ebaag +int (_cdgc .GBAtX [0]),_fdg +int (_cdgc .GBAtY [0])))<<3;
};return _dae ;};func (_fcged *TextRegion )decodeCurrentT ()(int64 ,error ){if _fcged .SbStrips !=1{if _fcged .IsHuffmanEncoded {_fgefa ,_acfd :=_fcged ._ebac .ReadBits (byte (_fcged .LogSBStrips ));return int64 (_fgefa ),_acfd ;};_ddceb ,_cfca :=_fcged ._cacbc .DecodeInt (_fcged ._gefd );
if _cfca !=nil {return 0,_cfca ;};return int64 (_ddceb ),nil ;};return 0,nil ;};func (_fc *EndOfStripe )parseHeader ()error {_dg ,_fce :=_fc ._gg .ReadBits (32);if _fce !=nil {return _fce ;};_fc ._gebf =int (_dg &_g .MaxInt32 );return nil ;};func (_dfd *GenericRegion )setParametersMMR (_efdb bool ,_bcec ,_afa int64 ,_cad ,_gea uint32 ,_gfec byte ,_cbge ,_cbaa bool ,_ebea ,_becd []int8 ){_dfd .DataOffset =_bcec ;
_dfd .DataLength =_afa ;_dfd .RegionSegment =&RegionSegment {};_dfd .RegionSegment .BitmapHeight =_cad ;_dfd .RegionSegment .BitmapWidth =_gea ;_dfd .GBTemplate =_gfec ;_dfd .IsMMREncoded =_efdb ;_dfd .IsTPGDon =_cbge ;_dfd .GBAtX =_ebea ;_dfd .GBAtY =_becd ;
};func (_fgg *PatternDictionary )readPatternWidthAndHeight ()error {_dgae ,_efffa :=_fgg ._bfac .ReadByte ();if _efffa !=nil {return _efffa ;};_fgg .HdpWidth =_dgae ;_dgae ,_efffa =_fgg ._bfac .ReadByte ();if _efffa !=nil {return _efffa ;};_fgg .HdpHeight =_dgae ;
return nil ;};var (_bacg Segmenter ;_dcfa =map[Type ]func ()Segmenter {TSymbolDictionary :func ()Segmenter {return &SymbolDictionary {}},TIntermediateTextRegion :func ()Segmenter {return &TextRegion {}},TImmediateTextRegion :func ()Segmenter {return &TextRegion {}},TImmediateLosslessTextRegion :func ()Segmenter {return &TextRegion {}},TPatternDictionary :func ()Segmenter {return &PatternDictionary {}},TIntermediateHalftoneRegion :func ()Segmenter {return &HalftoneRegion {}},TImmediateHalftoneRegion :func ()Segmenter {return &HalftoneRegion {}},TImmediateLosslessHalftoneRegion :func ()Segmenter {return &HalftoneRegion {}},TIntermediateGenericRegion :func ()Segmenter {return &GenericRegion {}},TImmediateGenericRegion :func ()Segmenter {return &GenericRegion {}},TImmediateLosslessGenericRegion :func ()Segmenter {return &GenericRegion {}},TIntermediateGenericRefinementRegion :func ()Segmenter {return &GenericRefinementRegion {}},TImmediateGenericRefinementRegion :func ()Segmenter {return &GenericRefinementRegion {}},TImmediateLosslessGenericRefinementRegion :func ()Segmenter {return &GenericRefinementRegion {}},TPageInformation :func ()Segmenter {return &PageInformationSegment {}},TEndOfPage :func ()Segmenter {return _bacg },TEndOfStrip :func ()Segmenter {return &EndOfStripe {}},TEndOfFile :func ()Segmenter {return _bacg },TProfiles :func ()Segmenter {return _bacg },TTables :func ()Segmenter {return &TableSegment {}},TExtension :func ()Segmenter {return _bacg },TBitmap :func ()Segmenter {return _bacg }};
);var _ templater =&template0 {};func (_ffab *SymbolDictionary )addSymbol (_ggbb Regioner )error {_ccaag ,_gfcb :=_ggbb .GetRegionBitmap ();if _gfcb !=nil {return _gfcb ;};_ffab ._dagg [_ffab ._fdfd ]=_ccaag ;_ffab ._gcab =append (_ffab ._gcab ,_ccaag );
_fg .Log .Trace ("\u005b\u0053YM\u0042\u004f\u004c \u0044\u0049\u0043\u0054ION\u0041RY\u005d\u0020\u0041\u0064\u0064\u0065\u0064 s\u0079\u006d\u0062\u006f\u006c\u003a\u0020%\u0073",_ccaag );return nil ;};type SegmentEncoder interface{Encode (_bega _ge .BinaryWriter )(_fddb int ,_bacb error );
};func (_dbdb *TextRegion )decodeRdh ()(int64 ,error ){const _facd ="\u0064e\u0063\u006f\u0064\u0065\u0052\u0064h";if _dbdb .IsHuffmanEncoded {if _dbdb .SbHuffRDHeight ==3{if _dbdb ._abfb ==nil {var (_cbggd int ;_ceeb error ;);if _dbdb .SbHuffFS ==3{_cbggd ++;
};if _dbdb .SbHuffDS ==3{_cbggd ++;};if _dbdb .SbHuffDT ==3{_cbggd ++;};if _dbdb .SbHuffRDWidth ==3{_cbggd ++;};_dbdb ._abfb ,_ceeb =_dbdb .getUserTable (_cbggd );if _ceeb !=nil {return 0,_geb .Wrap (_ceeb ,_facd ,"");};};return _dbdb ._abfb .Decode (_dbdb ._ebac );
};_gefb ,_fbdd :=_eded .GetStandardTable (14+int (_dbdb .SbHuffRDHeight ));if _fbdd !=nil {return 0,_geb .Wrap (_fbdd ,_facd ,"");};return _gefb .Decode (_dbdb ._ebac );};_dgdde ,_eegea :=_dbdb ._cacbc .DecodeInt (_dbdb ._fbd );if _eegea !=nil {return 0,_geb .Wrap (_eegea ,_facd ,"");
};return int64 (_dgdde ),nil ;};func (_edeec *PageInformationSegment )readIsStriped ()error {_gde ,_fbed :=_edeec ._fgebf .ReadBit ();if _fbed !=nil {return _fbed ;};if _gde ==1{_edeec .IsStripe =true ;};return nil ;};func (_eedf *PatternDictionary )Init (h *Header ,r *_ge .Reader )error {_eedf ._bfac =r ;
return _eedf .parseHeader ();};func (_cgcea *SymbolDictionary )decodeThroughTextRegion (_fefa ,_acf ,_cdf uint32 )error {if _cgcea ._cded ==nil {_cgcea ._cded =_aeac (_cgcea ._bdcd ,nil );_cgcea ._cded .setContexts (_cgcea ._bfad ,_ede .NewStats (512,1),_ede .NewStats (512,1),_ede .NewStats (512,1),_ede .NewStats (512,1),_cgcea ._bddc ,_ede .NewStats (512,1),_ede .NewStats (512,1),_ede .NewStats (512,1),_ede .NewStats (512,1));
};if _ebcf :=_cgcea .setSymbolsArray ();_ebcf !=nil {return _ebcf ;};_cgcea ._cded .setParameters (_cgcea ._cbgea ,_cgcea .IsHuffmanEncoded ,true ,_fefa ,_acf ,_cdf ,1,_cgcea ._ccdc +_cgcea ._fdfd ,0,0,0,1,0,0,0,0,0,0,0,0,0,_cgcea .SdrTemplate ,_cgcea .SdrATX ,_cgcea .SdrATY ,_cgcea ._gcab ,_cgcea ._fdedc );
return _cgcea .addSymbol (_cgcea ._cded );};func (_eeff *TableSegment )HtOOB ()int32 {return _eeff ._fbad };func (_ddfd *template0 )form (_dad ,_def ,_eea ,_fec ,_bgf int16 )int16 {return (_dad <<10)|(_def <<7)|(_eea <<4)|(_fec <<1)|_bgf ;};func (_efda *PageInformationSegment )String ()string {_fdcd :=&_aa .Builder {};
_fdcd .WriteString ("\u000a\u005b\u0050\u0041G\u0045\u002d\u0049\u004e\u0046\u004f\u0052\u004d\u0041\u0054I\u004fN\u002d\u0053\u0045\u0047\u004d\u0045\u004eT\u005d\u000a");_fdcd .WriteString (_de .Sprintf ("\u0009\u002d \u0042\u004d\u0048e\u0069\u0067\u0068\u0074\u003a\u0020\u0025\u0064\u000a",_efda .PageBMHeight ));
_fdcd .WriteString (_de .Sprintf ("\u0009-\u0020B\u004d\u0057\u0069\u0064\u0074\u0068\u003a\u0020\u0025\u0064\u000a",_efda .PageBMWidth ));_fdcd .WriteString (_de .Sprintf ("\u0009\u002d\u0020\u0052es\u006f\u006c\u0075\u0074\u0069\u006f\u006e\u0058\u003a\u0020\u0025\u0064\u000a",_efda .ResolutionX ));
_fdcd .WriteString (_de .Sprintf ("\u0009\u002d\u0020\u0052es\u006f\u006c\u0075\u0074\u0069\u006f\u006e\u0059\u003a\u0020\u0025\u0064\u000a",_efda .ResolutionY ));_fdcd .WriteString (_de .Sprintf ("\t\u002d\u0020\u0043\u006f\u006d\u0062i\u006e\u0061\u0074\u0069\u006f\u006e\u004f\u0070\u0065r\u0061\u0074\u006fr\u003a \u0025\u0073\u000a",_efda ._egae ));
_fdcd .WriteString (_de .Sprintf ("\t\u002d\u0020\u0043\u006f\u006d\u0062i\u006e\u0061\u0074\u0069\u006f\u006eO\u0070\u0065\u0072\u0061\u0074\u006f\u0072O\u0076\u0065\u0072\u0072\u0069\u0064\u0065\u003a\u0020\u0025v\u000a",_efda ._bgcdb ));_fdcd .WriteString (_de .Sprintf ("\u0009-\u0020I\u0073\u004c\u006f\u0073\u0073l\u0065\u0073s\u003a\u0020\u0025\u0076\u000a",_efda .IsLossless ));
_fdcd .WriteString (_de .Sprintf ("\u0009\u002d\u0020R\u0065\u0071\u0075\u0069r\u0065\u0073\u0041\u0075\u0078\u0069\u006ci\u0061\u0072\u0079\u0042\u0075\u0066\u0066\u0065\u0072\u003a\u0020\u0025\u0076\u000a",_efda ._feag ));_fdcd .WriteString (_de .Sprintf ("\u0009\u002d\u0020M\u0069\u0067\u0068\u0074C\u006f\u006e\u0074\u0061\u0069\u006e\u0052e\u0066\u0069\u006e\u0065\u006d\u0065\u006e\u0074\u0073\u003a\u0020\u0025\u0076\u000a",_efda ._efgf ));
_fdcd .WriteString (_de .Sprintf ("\u0009\u002d\u0020\u0049\u0073\u0053\u0074\u0072\u0069\u0070\u0065\u0064:\u0020\u0025\u0076\u000a",_efda .IsStripe ));_fdcd .WriteString (_de .Sprintf ("\t\u002d\u0020\u004d\u0061xS\u0074r\u0069\u0070\u0065\u0053\u0069z\u0065\u003a\u0020\u0025\u0076\u000a",_efda .MaxStripeSize ));
return _fdcd .String ();};func (_gce *GenericRegion )setOverrideFlag (_cbb int ){_gce .GBAtOverride [_cbb ]=true ;_gce ._cac =true ;};func (_ada *TextRegion )setCodingStatistics ()error {if _ada ._bgcbgc ==nil {_ada ._bgcbgc =_ede .NewStats (512,1);};if _ada ._fdaf ==nil {_ada ._fdaf =_ede .NewStats (512,1);
};if _ada ._dddca ==nil {_ada ._dddca =_ede .NewStats (512,1);};if _ada ._gefd ==nil {_ada ._gefd =_ede .NewStats (512,1);};if _ada ._fecc ==nil {_ada ._fecc =_ede .NewStats (512,1);};if _ada ._fdcba ==nil {_ada ._fdcba =_ede .NewStats (512,1);};if _ada ._fbd ==nil {_ada ._fbd =_ede .NewStats (512,1);
};if _ada ._eggf ==nil {_ada ._eggf =_ede .NewStats (1<<uint (_ada ._acacc ),1);};if _ada ._adeg ==nil {_ada ._adeg =_ede .NewStats (512,1);};if _ada ._ggab ==nil {_ada ._ggab =_ede .NewStats (512,1);};if _ada ._cacbc ==nil {var _feea error ;_ada ._cacbc ,_feea =_ede .New (_ada ._ebac );
if _feea !=nil {return _feea ;};};return nil ;};func (_cacb *PageInformationSegment )readDefaultPixelValue ()error {_fgcc ,_fbgb :=_cacb ._fgebf .ReadBit ();if _fbgb !=nil {return _fbgb ;};_cacb .DefaultPixelValue =uint8 (_fgcc &0xf);return nil ;};func (_gdcad *TextRegion )readRegionFlags ()error {var (_gece int ;
_beaeg uint64 ;_dbaa error ;);_gece ,_dbaa =_gdcad ._ebac .ReadBit ();if _dbaa !=nil {return _dbaa ;};_gdcad .SbrTemplate =int8 (_gece );_beaeg ,_dbaa =_gdcad ._ebac .ReadBits (5);if _dbaa !=nil {return _dbaa ;};_gdcad .SbDsOffset =int8 (_beaeg );if _gdcad .SbDsOffset > 0x0f{_gdcad .SbDsOffset -=0x20;
};_gece ,_dbaa =_gdcad ._ebac .ReadBit ();if _dbaa !=nil {return _dbaa ;};_gdcad .DefaultPixel =int8 (_gece );_beaeg ,_dbaa =_gdcad ._ebac .ReadBits (2);if _dbaa !=nil {return _dbaa ;};_gdcad .CombinationOperator =_ded .CombinationOperator (int (_beaeg )&0x3);
_gece ,_dbaa =_gdcad ._ebac .ReadBit ();if _dbaa !=nil {return _dbaa ;};_gdcad .IsTransposed =int8 (_gece );_beaeg ,_dbaa =_gdcad ._ebac .ReadBits (2);if _dbaa !=nil {return _dbaa ;};_gdcad .ReferenceCorner =int16 (_beaeg )&0x3;_beaeg ,_dbaa =_gdcad ._ebac .ReadBits (2);
if _dbaa !=nil {return _dbaa ;};_gdcad .LogSBStrips =int16 (_beaeg )&0x3;_gdcad .SbStrips =1<<uint (_gdcad .LogSBStrips );_gece ,_dbaa =_gdcad ._ebac .ReadBit ();if _dbaa !=nil {return _dbaa ;};if _gece ==1{_gdcad .UseRefinement =true ;};_gece ,_dbaa =_gdcad ._ebac .ReadBit ();
if _dbaa !=nil {return _dbaa ;};if _gece ==1{_gdcad .IsHuffmanEncoded =true ;};return nil ;};func (_bfab *TextRegion )Init (header *Header ,r *_ge .Reader )error {_bfab .Header =header ;_bfab ._ebac =r ;_bfab .RegionInfo =NewRegionSegment (_bfab ._ebac );
return _bfab .parseHeader ();};func (_edeca *PageInformationSegment )encodeFlags (_ceb _ge .BinaryWriter )(_ggff error ){const _bbac ="e\u006e\u0063\u006f\u0064\u0065\u0046\u006c\u0061\u0067\u0073";if _ggff =_ceb .SkipBits (1);_ggff !=nil {return _geb .Wrap (_ggff ,_bbac ,"\u0072\u0065\u0073e\u0072\u0076\u0065\u0064\u0020\u0062\u0069\u0074");
};var _ageg int ;if _edeca .CombinationOperatorOverrideAllowed (){_ageg =1;};if _ggff =_ceb .WriteBit (_ageg );_ggff !=nil {return _geb .Wrap (_ggff ,_bbac ,"\u0063\u006f\u006db\u0069\u006e\u0061\u0074i\u006f\u006e\u0020\u006f\u0070\u0065\u0072a\u0074\u006f\u0072\u0020\u006f\u0076\u0065\u0072\u0072\u0069\u0064\u0064\u0065\u006e");
};_ageg =0;if _edeca ._feag {_ageg =1;};if _ggff =_ceb .WriteBit (_ageg );_ggff !=nil {return _geb .Wrap (_ggff ,_bbac ,"\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0061\u0075\u0078i\u006ci\u0061r\u0079\u0020\u0062\u0075\u0066\u0066\u0065r");};if _ggff =_ceb .WriteBit ((int (_edeca ._egae )>>1)&0x01);
_ggff !=nil {return _geb .Wrap (_ggff ,_bbac ,"\u0063\u006f\u006d\u0062\u0069\u006e\u0061\u0074\u0069\u006fn\u0020\u006f\u0070\u0065\u0072\u0061\u0074o\u0072\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0062\u0069\u0074");};if _ggff =_ceb .WriteBit (int (_edeca ._egae )&0x01);
_ggff !=nil {return _geb .Wrap (_ggff ,_bbac ,"\u0063\u006f\u006db\u0069\u006e\u0061\u0074i\u006f\u006e\u0020\u006f\u0070\u0065\u0072a\u0074\u006f\u0072\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0062\u0069\u0074");};_ageg =int (_edeca .DefaultPixelValue );
if _ggff =_ceb .WriteBit (_ageg );_ggff !=nil {return _geb .Wrap (_ggff ,_bbac ,"\u0064e\u0066\u0061\u0075\u006c\u0074\u0020\u0070\u0061\u0067\u0065\u0020p\u0069\u0078\u0065\u006c\u0020\u0076\u0061\u006c\u0075\u0065");};_ageg =0;if _edeca ._efgf {_ageg =1;
};if _ggff =_ceb .WriteBit (_ageg );_ggff !=nil {return _geb .Wrap (_ggff ,_bbac ,"\u0063\u006f\u006e\u0074ai\u006e\u0073\u0020\u0072\u0065\u0066\u0069\u006e\u0065\u006d\u0065\u006e\u0074");};_ageg =0;if _edeca .IsLossless {_ageg =1;};if _ggff =_ceb .WriteBit (_ageg );
_ggff !=nil {return _geb .Wrap (_ggff ,_bbac ,"p\u0061\u0067\u0065\u0020\u0069\u0073 \u0065\u0076\u0065\u006e\u0074\u0075\u0061\u006c\u006cy\u0020\u006c\u006fs\u0073l\u0065\u0073\u0073");};return nil ;};func (_bab *GenericRefinementRegion )decodeTypicalPredictedLineTemplate0 (_ce ,_cde ,_cb ,_bbg ,_cg ,_egd ,_gdf ,_fbg ,_cf int )error {var (_bbe ,_ecf ,_ggc ,_dee ,_ca ,_ddd int ;
_af byte ;_ee error ;);if _ce > 0{_af ,_ee =_bab .RegionBitmap .GetByte (_gdf -_cb );if _ee !=nil {return _ee ;};_ggc =int (_af );};if _fbg > 0&&_fbg <=_bab .ReferenceBitmap .Height {_af ,_ee =_bab .ReferenceBitmap .GetByte (_cf -_bbg +_egd );if _ee !=nil {return _ee ;
};_dee =int (_af )<<4;};if _fbg >=0&&_fbg < _bab .ReferenceBitmap .Height {_af ,_ee =_bab .ReferenceBitmap .GetByte (_cf +_egd );if _ee !=nil {return _ee ;};_ca =int (_af )<<1;};if _fbg > -2&&_fbg < _bab .ReferenceBitmap .Height -1{_af ,_ee =_bab .ReferenceBitmap .GetByte (_cf +_bbg +_egd );
if _ee !=nil {return _ee ;};_ddd =int (_af );};_bbe =((_ggc >>5)&0x6)|((_ddd >>2)&0x30)|(_ca &0x180)|(_dee &0xc00);var _gec int ;for _ebg :=0;_ebg < _cg ;_ebg =_gec {var _gef int ;_gec =_ebg +8;var _cceg int ;if _cceg =_cde -_ebg ;_cceg > 8{_cceg =8;};
_cgf :=_gec < _cde ;_gba :=_gec < _bab .ReferenceBitmap .Width ;_bd :=_egd +1;if _ce > 0{_af =0;if _cgf {_af ,_ee =_bab .RegionBitmap .GetByte (_gdf -_cb +1);if _ee !=nil {return _ee ;};};_ggc =(_ggc <<8)|int (_af );};if _fbg > 0&&_fbg <=_bab .ReferenceBitmap .Height {var _ecb int ;
if _gba {_af ,_ee =_bab .ReferenceBitmap .GetByte (_cf -_bbg +_bd );if _ee !=nil {return _ee ;};_ecb =int (_af )<<4;};_dee =(_dee <<8)|_ecb ;};if _fbg >=0&&_fbg < _bab .ReferenceBitmap .Height {var _ebge int ;if _gba {_af ,_ee =_bab .ReferenceBitmap .GetByte (_cf +_bd );
if _ee !=nil {return _ee ;};_ebge =int (_af )<<1;};_ca =(_ca <<8)|_ebge ;};if _fbg > -2&&_fbg < (_bab .ReferenceBitmap .Height -1){_af =0;if _gba {_af ,_ee =_bab .ReferenceBitmap .GetByte (_cf +_bbg +_bd );if _ee !=nil {return _ee ;};};_ddd =(_ddd <<8)|int (_af );
};for _ffa :=0;_ffa < _cceg ;_ffa ++{var _eab int ;_eff :=false ;_gffa :=(_bbe >>4)&0x1ff;if _gffa ==0x1ff{_eff =true ;_eab =1;}else if _gffa ==0x00{_eff =true ;};if !_eff {if _bab ._edb {_ecf =_bab .overrideAtTemplate0 (_bbe ,_ebg +_ffa ,_ce ,_gef ,_ffa );
_bab ._abc .SetIndex (int32 (_ecf ));}else {_bab ._abc .SetIndex (int32 (_bbe ));};_eab ,_ee =_bab ._be .DecodeBit (_bab ._abc );if _ee !=nil {return _ee ;};};_fad :=uint (7-_ffa );_gef |=_eab <<_fad ;_bbe =((_bbe &0xdb6)<<1)|_eab |(_ggc >>_fad +5)&0x002|((_ddd >>_fad +2)&0x010)|((_ca >>_fad )&0x080)|((_dee >>_fad )&0x400);
};_ee =_bab .RegionBitmap .SetByte (_gdf ,byte (_gef ));if _ee !=nil {return _ee ;};_gdf ++;_cf ++;};return nil ;};func (_fedf *TextRegion )GetRegionInfo ()*RegionSegment {return _fedf .RegionInfo };func (_bee *HalftoneRegion )renderPattern (_gfcc [][]int )(_fgbb error ){var _gcg ,_gdad int ;
for _efdg :=0;_efdg < int (_bee .HGridHeight );_efdg ++{for _aca :=0;_aca < int (_bee .HGridWidth );_aca ++{_gcg =_bee .computeX (_efdg ,_aca );_gdad =_bee .computeY (_efdg ,_aca );_ddac :=_bee .Patterns [_gfcc [_efdg ][_aca ]];if _fgbb =_ded .Blit (_ddac ,_bee .HalftoneRegionBitmap ,_gcg +int (_bee .HGridX ),_gdad +int (_bee .HGridY ),_bee .CombinationOperator );
_fgbb !=nil {return _fgbb ;};};};return nil ;};func (_caga *SymbolDictionary )Encode (w _ge .BinaryWriter )(_edce int ,_bggc error ){const _eda ="\u0053\u0079\u006dbo\u006c\u0044\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u002e\u0045\u006e\u0063\u006f\u0064\u0065";
if _caga ==nil {return 0,_geb .Error (_eda ,"\u0073\u0079m\u0062\u006f\u006c\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066in\u0065\u0064");};if _edce ,_bggc =_caga .encodeFlags (w );_bggc !=nil {return _edce ,_geb .Wrap (_bggc ,_eda ,"");
};_bcde ,_bggc :=_caga .encodeATFlags (w );if _bggc !=nil {return _edce ,_geb .Wrap (_bggc ,_eda ,"");};_edce +=_bcde ;if _bcde ,_bggc =_caga .encodeRefinementATFlags (w );_bggc !=nil {return _edce ,_geb .Wrap (_bggc ,_eda ,"");};_edce +=_bcde ;if _bcde ,_bggc =_caga .encodeNumSyms (w );
_bggc !=nil {return _edce ,_geb .Wrap (_bggc ,_eda ,"");};_edce +=_bcde ;if _bcde ,_bggc =_caga .encodeSymbols (w );_bggc !=nil {return _edce ,_geb .Wrap (_bggc ,_eda ,"");};_edce +=_bcde ;return _edce ,nil ;};func (_bgcf *GenericRegion )String ()string {_fcb :=&_aa .Builder {};
_fcb .WriteString ("\u000a[\u0047E\u004e\u0045\u0052\u0049\u0043 \u0052\u0045G\u0049\u004f\u004e\u005d\u000a");_fcb .WriteString (_bgcf .RegionSegment .String ()+"\u000a");_fcb .WriteString (_de .Sprintf ("\u0009\u002d\u0020Us\u0065\u0045\u0078\u0074\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0073\u003a\u0020\u0025\u0076\u000a",_bgcf .UseExtTemplates ));
_fcb .WriteString (_de .Sprintf ("\u0009\u002d \u0049\u0073\u0054P\u0047\u0044\u006f\u006e\u003a\u0020\u0025\u0076\u000a",_bgcf .IsTPGDon ));_fcb .WriteString (_de .Sprintf ("\u0009-\u0020G\u0042\u0054\u0065\u006d\u0070l\u0061\u0074e\u003a\u0020\u0025\u0064\u000a",_bgcf .GBTemplate ));
_fcb .WriteString (_de .Sprintf ("\t\u002d \u0049\u0073\u004d\u004d\u0052\u0045\u006e\u0063o\u0064\u0065\u0064\u003a %\u0076\u000a",_bgcf .IsMMREncoded ));_fcb .WriteString (_de .Sprintf ("\u0009\u002d\u0020\u0047\u0042\u0041\u0074\u0058\u003a\u0020\u0025\u0076\u000a",_bgcf .GBAtX ));
_fcb .WriteString (_de .Sprintf ("\u0009\u002d\u0020\u0047\u0042\u0041\u0074\u0059\u003a\u0020\u0025\u0076\u000a",_bgcf .GBAtY ));_fcb .WriteString (_de .Sprintf ("\t\u002d \u0047\u0042\u0041\u0074\u004f\u0076\u0065\u0072r\u0069\u0064\u0065\u003a %\u0076\u000a",_bgcf .GBAtOverride ));
return _fcb .String ();};func NewGenericRegion (r *_ge .Reader )*GenericRegion {return &GenericRegion {RegionSegment :NewRegionSegment (r ),_ddbc :r };};func (_gbdb *RegionSegment )String ()string {_baebc :=&_aa .Builder {};_baebc .WriteString ("\u0009[\u0052E\u0047\u0049\u004f\u004e\u0020S\u0045\u0047M\u0045\u004e\u0054\u005d\u000a");
_baebc .WriteString (_de .Sprintf ("\t\u0009\u002d\u0020\u0042\u0069\u0074m\u0061\u0070\u0020\u0028\u0077\u0069d\u0074\u0068\u002c\u0020\u0068\u0065\u0069g\u0068\u0074\u0029\u0020\u005b\u0025\u0064\u0078\u0025\u0064]\u000a",_gbdb .BitmapWidth ,_gbdb .BitmapHeight ));
_baebc .WriteString (_de .Sprintf ("\u0009\u0009\u002d\u0020L\u006f\u0063\u0061\u0074\u0069\u006f\u006e\u0020\u0028\u0078,\u0079)\u003a\u0020\u005b\u0025\u0064\u002c\u0025d\u005d\u000a",_gbdb .XLocation ,_gbdb .YLocation ));_baebc .WriteString (_de .Sprintf ("\t\u0009\u002d\u0020\u0043\u006f\u006db\u0069\u006e\u0061\u0074\u0069\u006f\u006e\u004f\u0070e\u0072\u0061\u0074o\u0072:\u0020\u0025\u0073",_gbdb .CombinaionOperator ));
return _baebc .String ();};func (_gcgd *Header )writeSegmentDataLength (_caefe _ge .BinaryWriter )(_fgab int ,_ecbf error ){_bege :=make ([]byte ,4);_b .BigEndian .PutUint32 (_bege ,uint32 (_gcgd .SegmentDataLength ));if _fgab ,_ecbf =_caefe .Write (_bege );
_ecbf !=nil {return 0,_geb .Wrap (_ecbf ,"\u0048\u0065a\u0064\u0065\u0072\u002e\u0077\u0072\u0069\u0074\u0065\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u0044\u0061\u0074\u0061\u004c\u0065ng\u0074\u0068","");};return _fgab ,nil ;};func (_faaa *GenericRefinementRegion )String ()string {_efc :=&_aa .Builder {};
_efc .WriteString ("\u000a[\u0047E\u004e\u0045\u0052\u0049\u0043 \u0052\u0045G\u0049\u004f\u004e\u005d\u000a");_efc .WriteString (_faaa .RegionInfo .String ()+"\u000a");_efc .WriteString (_de .Sprintf ("\u0009\u002d \u0049\u0073\u0054P\u0047\u0052\u006f\u006e\u003a\u0020\u0025\u0076\u000a",_faaa .IsTPGROn ));
_efc .WriteString (_de .Sprintf ("\u0009-\u0020T\u0065\u006d\u0070\u006c\u0061t\u0065\u0049D\u003a\u0020\u0025\u0076\u000a",_faaa .TemplateID ));_efc .WriteString (_de .Sprintf ("\u0009\u002d\u0020\u0047\u0072\u0041\u0074\u0058\u003a\u0020\u0025\u0076\u000a",_faaa .GrAtX ));
_efc .WriteString (_de .Sprintf ("\u0009\u002d\u0020\u0047\u0072\u0041\u0074\u0059\u003a\u0020\u0025\u0076\u000a",_faaa .GrAtY ));_efc .WriteString (_de .Sprintf ("\u0009-\u0020R\u0065\u0066\u0065\u0072\u0065n\u0063\u0065D\u0058\u0020\u0025\u0076\u000a",_faaa .ReferenceDX ));
_efc .WriteString (_de .Sprintf ("\u0009\u002d\u0020\u0052ef\u0065\u0072\u0065\u006e\u0063\u0044\u0065\u0059\u003a\u0020\u0025\u0076\u000a",_faaa .ReferenceDY ));return _efc .String ();};func (_ddgaa *TextRegion )decodeRdw ()(int64 ,error ){const _gdec ="\u0064e\u0063\u006f\u0064\u0065\u0052\u0064w";
if _ddgaa .IsHuffmanEncoded {if _ddgaa .SbHuffRDWidth ==3{if _ddgaa ._babb ==nil {var (_gdbb int ;_aaga error ;);if _ddgaa .SbHuffFS ==3{_gdbb ++;};if _ddgaa .SbHuffDS ==3{_gdbb ++;};if _ddgaa .SbHuffDT ==3{_gdbb ++;};_ddgaa ._babb ,_aaga =_ddgaa .getUserTable (_gdbb );
if _aaga !=nil {return 0,_geb .Wrap (_aaga ,_gdec ,"");};};return _ddgaa ._babb .Decode (_ddgaa ._ebac );};_cdgf ,_acfa :=_eded .GetStandardTable (14+int (_ddgaa .SbHuffRDWidth ));if _acfa !=nil {return 0,_geb .Wrap (_acfa ,_gdec ,"");};return _cdgf .Decode (_ddgaa ._ebac );
};_eccb ,_acaa :=_ddgaa ._cacbc .DecodeInt (_ddgaa ._fdcba );if _acaa !=nil {return 0,_geb .Wrap (_acaa ,_gdec ,"");};return int64 (_eccb ),nil ;};func (_cfdc *SymbolDictionary )decodeNewSymbols (_acee ,_ceda uint32 ,_efef *_ded .Bitmap ,_fcgg ,_bgag int32 )error {if _cfdc ._acca ==nil {_cfdc ._acca =_ega (_cfdc ._bdcd ,nil );
if _cfdc ._cbgea ==nil {var _cffge error ;_cfdc ._cbgea ,_cffge =_ede .New (_cfdc ._bdcd );if _cffge !=nil {return _cffge ;};};if _cfdc ._bfad ==nil {_cfdc ._bfad =_ede .NewStats (65536,1);};};_cfdc ._acca .setParameters (_cfdc ._bfad ,_cfdc ._cbgea ,_cfdc .SdrTemplate ,_acee ,_ceda ,_efef ,_fcgg ,_bgag ,false ,_cfdc .SdrATX ,_cfdc .SdrATY );
return _cfdc .addSymbol (_cfdc ._acca );};func _aeac (_feec *_ge .Reader ,_aeaea *Header )*TextRegion {_cfbe :=&TextRegion {_ebac :_feec ,Header :_aeaea ,RegionInfo :NewRegionSegment (_feec )};return _cfbe ;};var _ _eded .BasicTabler =&TableSegment {};
type EncodeInitializer interface{InitEncode ();};func (_fgd *TextRegion )setContexts (_dcag *_ede .DecoderStats ,_bgeff *_ede .DecoderStats ,_feeeb *_ede .DecoderStats ,_bdfff *_ede .DecoderStats ,_bcg *_ede .DecoderStats ,_cdeb *_ede .DecoderStats ,_fdgae *_ede .DecoderStats ,_ffgdc *_ede .DecoderStats ,_deaac *_ede .DecoderStats ,_egfc *_ede .DecoderStats ){_fgd ._bgcbgc =_bgeff ;
_fgd ._fdaf =_feeeb ;_fgd ._dddca =_bdfff ;_fgd ._gefd =_bcg ;_fgd ._fdcba =_fdgae ;_fgd ._fbd =_ffgdc ;_fgd ._eggf =_cdeb ;_fgd ._adeg =_deaac ;_fgd ._ggab =_egfc ;_fgd ._fegc =_dcag ;};func (_bbfbe *SymbolDictionary )decodeHeightClassBitmap (_geaa *_ded .Bitmap ,_faee int64 ,_ffge int ,_fegg []int )error {for _cbcg :=_faee ;
_cbcg < int64 (_bbfbe ._fdfd );_cbcg ++{var _gcb int ;for _edae :=_faee ;_edae <=_cbcg -1;_edae ++{_gcb +=_fegg [_edae ];};_cdcd :=_da .Rect (_gcb ,0,_gcb +_fegg [_cbcg ],_ffge );_ceg ,_dage :=_ded .Extract (_cdcd ,_geaa );if _dage !=nil {return _dage ;
};_bbfbe ._dagg [_cbcg ]=_ceg ;_bbfbe ._gcab =append (_bbfbe ._gcab ,_ceg );};return nil ;};func (_fda *GenericRegion )overrideAtTemplate2 (_bace ,_bafd ,_ace ,_dcgb ,_cag int )int {_bace &=0x3FB;if _fda .GBAtY [0]==0&&_fda .GBAtX [0]>=-int8 (_cag ){_bace |=(_dcgb >>uint (7-(int8 (_cag )+_fda .GBAtX [0]))&0x1)<<2;
}else {_bace |=int (_fda .getPixel (_bafd +int (_fda .GBAtX [0]),_ace +int (_fda .GBAtY [0])))<<2;};return _bace ;};func (_feb *PageInformationSegment )Size ()int {return 19};func (_dceg *TextRegion )Encode (w _ge .BinaryWriter )(_ddgfd int ,_ceea error ){const _cdge ="\u0054\u0065\u0078\u0074\u0052\u0065\u0067\u0069\u006f\u006e\u002e\u0045n\u0063\u006f\u0064\u0065";
if _ddgfd ,_ceea =_dceg .RegionInfo .Encode (w );_ceea !=nil {return _ddgfd ,_geb .Wrap (_ceea ,_cdge ,"");};var _edgga int ;if _edgga ,_ceea =_dceg .encodeFlags (w );_ceea !=nil {return _ddgfd ,_geb .Wrap (_ceea ,_cdge ,"");};_ddgfd +=_edgga ;if _edgga ,_ceea =_dceg .encodeSymbols (w );
_ceea !=nil {return _ddgfd ,_geb .Wrap (_ceea ,_cdge ,"");};_ddgfd +=_edgga ;return _ddgfd ,nil ;};func (_efded *TableSegment )HtRS ()int32 {return _efded ._babaa };func (_gcac *PageInformationSegment )readCombinationOperator ()error {_gdfd ,_fffe :=_gcac ._fgebf .ReadBits (2);
if _fffe !=nil {return _fffe ;};_gcac ._egae =_ded .CombinationOperator (int (_gdfd ));return nil ;};func (_fcg *template0 )setIndex (_gbga *_ede .DecoderStats ){_gbga .SetIndex (0x100)};func (_beef *PatternDictionary )extractPatterns (_dffg *_ded .Bitmap )error {var _bdgd int ;
_baeb :=make ([]*_ded .Bitmap ,_beef .GrayMax +1);for _bdgd <=int (_beef .GrayMax ){_bdc :=int (_beef .HdpWidth )*_bdgd ;_acebc :=_da .Rect (_bdc ,0,_bdc +int (_beef .HdpWidth ),int (_beef .HdpHeight ));_ddgg ,_agae :=_ded .Extract (_acebc ,_dffg );if _agae !=nil {return _agae ;
};_baeb [_bdgd ]=_ddgg ;_bdgd ++;};_beef .Patterns =_baeb ;return nil ;};type RegionSegment struct{_dgaed *_ge .Reader ;BitmapWidth uint32 ;BitmapHeight uint32 ;XLocation uint32 ;YLocation uint32 ;CombinaionOperator _ded .CombinationOperator ;};func (_dbde *PatternDictionary )checkInput ()error {if _dbde .HdpHeight < 1||_dbde .HdpWidth < 1{return _e .New ("in\u0076\u0061l\u0069\u0064\u0020\u0048\u0065\u0061\u0064\u0065\u0072 \u0056\u0061\u006c\u0075\u0065\u003a\u0020\u0057\u0069\u0064\u0074\u0068\u002f\u0048\u0065\u0069\u0067\u0068\u0074\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020g\u0072e\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061n\u0020z\u0065\u0072o");
};if _dbde .IsMMREncoded {if _dbde .HDTemplate !=0{_fg .Log .Debug ("\u0076\u0061\u0072\u0069\u0061\u0062\u006c\u0065\u0020\u0048\u0044\u0054\u0065\u006d\u0070\u006c\u0061\u0074e\u0020\u0073\u0068\u006f\u0075\u006c\u0064 \u006e\u006f\u0074\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e \u0074\u0068\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0030");
};};return nil ;};func (_gcaa *PageInformationSegment )readContainsRefinement ()error {_gdfb ,_gebfa :=_gcaa ._fgebf .ReadBit ();if _gebfa !=nil {return _gebfa ;};if _gdfb ==1{_gcaa ._efgf =true ;};return nil ;};func _fgc (_cfgg int )int {if _cfgg ==0{return 0;
};_cfgg |=_cfgg >>1;_cfgg |=_cfgg >>2;_cfgg |=_cfgg >>4;_cfgg |=_cfgg >>8;_cfgg |=_cfgg >>16;return (_cfgg +1)>>1;};func (_fgfe *TextRegion )decodeRdy ()(int64 ,error ){const _cfbf ="\u0064e\u0063\u006f\u0064\u0065\u0052\u0064y";if _fgfe .IsHuffmanEncoded {if _fgfe .SbHuffRDY ==3{if _fgfe ._dcbf ==nil {var (_aggc int ;
_fbea error ;);if _fgfe .SbHuffFS ==3{_aggc ++;};if _fgfe .SbHuffDS ==3{_aggc ++;};if _fgfe .SbHuffDT ==3{_aggc ++;};if _fgfe .SbHuffRDWidth ==3{_aggc ++;};if _fgfe .SbHuffRDHeight ==3{_aggc ++;};if _fgfe .SbHuffRDX ==3{_aggc ++;};_fgfe ._dcbf ,_fbea =_fgfe .getUserTable (_aggc );
if _fbea !=nil {return 0,_geb .Wrap (_fbea ,_cfbf ,"");};};return _fgfe ._dcbf .Decode (_fgfe ._ebac );};_feaa ,_dgcd :=_eded .GetStandardTable (14+int (_fgfe .SbHuffRDY ));if _dgcd !=nil {return 0,_dgcd ;};return _feaa .Decode (_fgfe ._ebac );};_dddecb ,_cfbag :=_fgfe ._cacbc .DecodeInt (_fgfe ._ggab );
if _cfbag !=nil {return 0,_geb .Wrap (_cfbag ,_cfbf ,"");};return int64 (_dddecb ),nil ;};func (_aggdb *TextRegion )decodeDT ()(_faaf int64 ,_cecb error ){if _aggdb .IsHuffmanEncoded {if _aggdb .SbHuffDT ==3{_faaf ,_cecb =_aggdb ._agfgd .Decode (_aggdb ._ebac );
if _cecb !=nil {return 0,_cecb ;};}else {var _fefaa _eded .Tabler ;_fefaa ,_cecb =_eded .GetStandardTable (11+int (_aggdb .SbHuffDT ));if _cecb !=nil {return 0,_cecb ;};_faaf ,_cecb =_fefaa .Decode (_aggdb ._ebac );if _cecb !=nil {return 0,_cecb ;};};}else {var _cgfg int32 ;
_cgfg ,_cecb =_aggdb ._cacbc .DecodeInt (_aggdb ._bgcbgc );if _cecb !=nil {return 0,_cecb ;};_faaf =int64 (_cgfg );};_faaf *=int64 (_aggdb .SbStrips );return _faaf ,nil ;};func (_fe *EndOfStripe )Init (h *Header ,r *_ge .Reader )error {_fe ._gg =r ;return _fe .parseHeader ()};
func (_dcbd *Header )writeReferredToCount (_ddda _ge .BinaryWriter )(_bgfc int ,_gebd error ){const _faac ="w\u0072i\u0074\u0065\u0052\u0065\u0066\u0065\u0072\u0072e\u0064\u0054\u006f\u0043ou\u006e\u0074";_dcbd .RTSNumbers =make ([]int ,len (_dcbd .RTSegments ));
for _aggd ,_edea :=range _dcbd .RTSegments {_dcbd .RTSNumbers [_aggd ]=int (_edea .SegmentNumber );};if len (_dcbd .RTSNumbers )<=4{var _ffgg byte ;if len (_dcbd .RetainBits )>=1{_ffgg =_dcbd .RetainBits [0];};_ffgg |=byte (len (_dcbd .RTSNumbers ))<<5;
if _gebd =_ddda .WriteByte (_ffgg );_gebd !=nil {return 0,_geb .Wrap (_gebd ,_faac ,"\u0073\u0068\u006fr\u0074\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};return 1,nil ;};_cgb :=uint32 (len (_dcbd .RTSNumbers ));_adee :=make ([]byte ,4+_ed .Ceil (len (_dcbd .RTSNumbers )+1,8));
_cgb |=0x7<<29;_b .BigEndian .PutUint32 (_adee ,_cgb );copy (_adee [1:],_dcbd .RetainBits );_bgfc ,_gebd =_ddda .Write (_adee );if _gebd !=nil {return 0,_geb .Wrap (_gebd ,_faac ,"l\u006f\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};return _bgfc ,nil ;
};func (_ga *GenericRefinementRegion )Init (header *Header ,r *_ge .Reader )error {_ga ._fb =header ;_ga ._ab =r ;_ga .RegionInfo =NewRegionSegment (r );return _ga .parseHeader ();};func (_cbbf *SymbolDictionary )decodeDirectlyThroughGenericRegion (_dgac ,_bced uint32 )error {if _cbbf ._cgeag ==nil {_cbbf ._cgeag =NewGenericRegion (_cbbf ._bdcd );
};_cbbf ._cgeag .setParametersWithAt (false ,byte (_cbbf .SdTemplate ),false ,false ,_cbbf .SdATX ,_cbbf .SdATY ,_dgac ,_bced ,_cbbf ._bfad ,_cbbf ._cbgea );return _cbbf .addSymbol (_cbbf ._cgeag );};func (_dgfb *HalftoneRegion )GetRegionBitmap ()(*_ded .Bitmap ,error ){if _dgfb .HalftoneRegionBitmap !=nil {return _dgfb .HalftoneRegionBitmap ,nil ;
};var _bgef error ;_dgfb .HalftoneRegionBitmap =_ded .New (int (_dgfb .RegionSegment .BitmapWidth ),int (_dgfb .RegionSegment .BitmapHeight ));if _dgfb .Patterns ==nil ||len (_dgfb .Patterns )==0{_dgfb .Patterns ,_bgef =_dgfb .GetPatterns ();if _bgef !=nil {return nil ,_bgef ;
};};if _dgfb .HDefaultPixel ==1{_dgfb .HalftoneRegionBitmap .SetDefaultPixel ();};_edee :=_g .Ceil (_g .Log (float64 (len (_dgfb .Patterns )))/_g .Log (2));_fbfa :=int (_edee );var _fded [][]int ;_fded ,_bgef =_dgfb .grayScaleDecoding (_fbfa );if _bgef !=nil {return nil ,_bgef ;
};if _bgef =_dgfb .renderPattern (_fded );_bgef !=nil {return nil ,_bgef ;};return _dgfb .HalftoneRegionBitmap ,nil ;};type SymbolDictionary struct{_bdcd *_ge .Reader ;SdrTemplate int8 ;SdTemplate int8 ;_gcfb bool ;_afgac bool ;SdHuffAggInstanceSelection bool ;
SdHuffBMSizeSelection int8 ;SdHuffDecodeWidthSelection int8 ;SdHuffDecodeHeightSelection int8 ;UseRefinementAggregation bool ;IsHuffmanEncoded bool ;SdATX []int8 ;SdATY []int8 ;SdrATX []int8 ;SdrATY []int8 ;NumberOfExportedSymbols uint32 ;NumberOfNewSymbols uint32 ;
Header *Header ;_ccdc uint32 ;_egc []*_ded .Bitmap ;_fdfd uint32 ;_dagg []*_ded .Bitmap ;_gage _eded .Tabler ;_cbgeb _eded .Tabler ;_eedbe _eded .Tabler ;_fffb _eded .Tabler ;_agab []*_ded .Bitmap ;_gcab []*_ded .Bitmap ;_cbgea *_ede .Decoder ;_cded *TextRegion ;
_cgeag *GenericRegion ;_acca *GenericRefinementRegion ;_bfad *_ede .DecoderStats ;_agef *_ede .DecoderStats ;_fbbe *_ede .DecoderStats ;_abce *_ede .DecoderStats ;_cfcbc *_ede .DecoderStats ;_eddc *_ede .DecoderStats ;_fgef *_ede .DecoderStats ;_bbdc *_ede .DecoderStats ;
_bddc *_ede .DecoderStats ;_fdedc int8 ;_ebeg *_ded .Bitmaps ;_cfba []int ;_eead map[int ]int ;_cdaa bool ;};func (_fbee Type )String ()string {switch _fbee {case TSymbolDictionary :return "\u0053\u0079\u006d\u0062\u006f\u006c\u0020\u0044\u0069\u0063\u0074\u0069o\u006e\u0061\u0072\u0079";
case TIntermediateTextRegion :return "\u0049n\u0074\u0065\u0072\u006d\u0065\u0064\u0069\u0061\u0074\u0065\u0020T\u0065\u0078\u0074\u0020\u0052\u0065\u0067\u0069\u006f\u006e";case TImmediateTextRegion :return "I\u006d\u006d\u0065\u0064ia\u0074e\u0020\u0054\u0065\u0078\u0074 \u0052\u0065\u0067\u0069\u006f\u006e";
case TImmediateLosslessTextRegion :return "\u0049\u006d\u006d\u0065\u0064\u0069\u0061\u0074\u0065\u0020L\u006f\u0073\u0073\u006c\u0065\u0073\u0073 \u0054\u0065\u0078\u0074\u0020\u0052\u0065\u0067\u0069\u006f\u006e";case TPatternDictionary :return "\u0050a\u0074t\u0065\u0072\u006e\u0020\u0044i\u0063\u0074i\u006f\u006e\u0061\u0072\u0079";
case TIntermediateHalftoneRegion :return "\u0049\u006e\u0074\u0065r\u006d\u0065\u0064\u0069\u0061\u0074\u0065\u0020\u0048\u0061l\u0066t\u006f\u006e\u0065\u0020\u0052\u0065\u0067i\u006f\u006e";case TImmediateHalftoneRegion :return "\u0049m\u006d\u0065\u0064\u0069a\u0074\u0065\u0020\u0048\u0061l\u0066t\u006fn\u0065\u0020\u0052\u0065\u0067\u0069\u006fn";
case TImmediateLosslessHalftoneRegion :return "\u0049\u006d\u006ded\u0069\u0061\u0074\u0065\u0020\u004c\u006f\u0073\u0073l\u0065s\u0073 \u0048a\u006c\u0066\u0074\u006f\u006e\u0065\u0020\u0052\u0065\u0067\u0069\u006f\u006e";case TIntermediateGenericRegion :return "I\u006e\u0074\u0065\u0072\u006d\u0065d\u0069\u0061\u0074\u0065\u0020\u0047\u0065\u006e\u0065r\u0069\u0063\u0020R\u0065g\u0069\u006f\u006e";
case TImmediateGenericRegion :return "\u0049m\u006d\u0065\u0064\u0069\u0061\u0074\u0065\u0020\u0047\u0065\u006ee\u0072\u0069\u0063\u0020\u0052\u0065\u0067\u0069\u006f\u006e";case TImmediateLosslessGenericRegion :return "\u0049\u006d\u006d\u0065\u0064\u0069a\u0074\u0065\u0020\u004c\u006f\u0073\u0073\u006c\u0065\u0073\u0073\u0020\u0047e\u006e\u0065\u0072\u0069\u0063\u0020\u0052e\u0067\u0069\u006f\u006e";
case TIntermediateGenericRefinementRegion :return "\u0049\u006e\u0074\u0065\u0072\u006d\u0065\u0064\u0069\u0061\u0074\u0065\u0020\u0047\u0065\u006e\u0065\u0072\u0069\u0063\u0020\u0052\u0065\u0066i\u006e\u0065\u006d\u0065\u006et\u0020\u0052e\u0067\u0069\u006f\u006e";
case TImmediateGenericRefinementRegion :return "I\u006d\u006d\u0065\u0064\u0069\u0061t\u0065\u0020\u0047\u0065\u006e\u0065r\u0069\u0063\u0020\u0052\u0065\u0066\u0069n\u0065\u006d\u0065\u006e\u0074\u0020\u0052\u0065\u0067\u0069o\u006e";case TImmediateLosslessGenericRefinementRegion :return "\u0049m\u006d\u0065d\u0069\u0061\u0074\u0065 \u004c\u006f\u0073s\u006c\u0065\u0073\u0073\u0020\u0047\u0065\u006e\u0065ri\u0063\u0020\u0052e\u0066\u0069n\u0065\u006d\u0065\u006e\u0074\u0020R\u0065\u0067i\u006f\u006e";
case TPageInformation :return "\u0050\u0061g\u0065\u0020\u0049n\u0066\u006f\u0072\u006d\u0061\u0074\u0069\u006f\u006e";case TEndOfPage :return "E\u006e\u0064\u0020\u004f\u0066\u0020\u0050\u0061\u0067\u0065";case TEndOfStrip :return "\u0045\u006e\u0064 \u004f\u0066\u0020\u0053\u0074\u0072\u0069\u0070";
case TEndOfFile :return "E\u006e\u0064\u0020\u004f\u0066\u0020\u0046\u0069\u006c\u0065";case TProfiles :return "\u0050\u0072\u006f\u0066\u0069\u006c\u0065\u0073";case TTables :return "\u0054\u0061\u0062\u006c\u0065\u0073";case TExtension :return "\u0045x\u0074\u0065\u006e\u0073\u0069\u006fn";
case TBitmap :return "\u0042\u0069\u0074\u006d\u0061\u0070";};return "I\u006ev\u0061\u006c\u0069\u0064\u0020\u0053\u0065\u0067m\u0065\u006e\u0074\u0020Ki\u006e\u0064";};func (_ccaa *PageInformationSegment )CombinationOperator ()_ded .CombinationOperator {return _ccaa ._egae ;
};func (_bgece *Header )writeReferredToSegments (_dbgc _ge .BinaryWriter )(_gcef int ,_gbcg error ){const _dfbg ="\u0077\u0072\u0069te\u0052\u0065\u0066\u0065\u0072\u0072\u0065\u0064\u0054\u006f\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u0073";var (_abae uint16 ;
_dega uint32 ;);_gaba :=_bgece .referenceSize ();_dbgd :=1;_bged :=make ([]byte ,_gaba );for _ ,_baad :=range _bgece .RTSNumbers {switch _gaba {case 4:_dega =uint32 (_baad );_b .BigEndian .PutUint32 (_bged ,_dega );_dbgd ,_gbcg =_dbgc .Write (_bged );if _gbcg !=nil {return 0,_geb .Wrap (_gbcg ,_dfbg ,"u\u0069\u006e\u0074\u0033\u0032\u0020\u0073\u0069\u007a\u0065");
};case 2:_abae =uint16 (_baad );_b .BigEndian .PutUint16 (_bged ,_abae );_dbgd ,_gbcg =_dbgc .Write (_bged );if _gbcg !=nil {return 0,_geb .Wrap (_gbcg ,_dfbg ,"\u0075\u0069\u006e\u0074\u0031\u0036");};default:if _gbcg =_dbgc .WriteByte (byte (_baad ));
_gbcg !=nil {return 0,_geb .Wrap (_gbcg ,_dfbg ,"\u0075\u0069\u006et\u0038");};};_gcef +=_dbgd ;};return _gcef ,nil ;};func (_dbgb *TextRegion )decodeDfs ()(int64 ,error ){if _dbgb .IsHuffmanEncoded {if _dbgb .SbHuffFS ==3{if _dbgb ._defee ==nil {var _aade error ;
_dbgb ._defee ,_aade =_dbgb .getUserTable (0);if _aade !=nil {return 0,_aade ;};};return _dbgb ._defee .Decode (_dbgb ._ebac );};_dafb ,_geag :=_eded .GetStandardTable (6+int (_dbgb .SbHuffFS ));if _geag !=nil {return 0,_geag ;};return _dafb .Decode (_dbgb ._ebac );
};_gaab ,_gcdg :=_dbgb ._cacbc .DecodeInt (_dbgb ._fdaf );if _gcdg !=nil {return 0,_gcdg ;};return int64 (_gaab ),nil ;};func (_eddbd *RegionSegment )Encode (w _ge .BinaryWriter )(_gfd int ,_geec error ){const _edg ="R\u0065g\u0069\u006f\u006e\u0053\u0065\u0067\u006d\u0065n\u0074\u002e\u0045\u006eco\u0064\u0065";
_affe :=make ([]byte ,4);_b .BigEndian .PutUint32 (_affe ,_eddbd .BitmapWidth );_gfd ,_geec =w .Write (_affe );if _geec !=nil {return 0,_geb .Wrap (_geec ,_edg ,"\u0057\u0069\u0064t\u0068");};_b .BigEndian .PutUint32 (_affe ,_eddbd .BitmapHeight );var _dac int ;
_dac ,_geec =w .Write (_affe );if _geec !=nil {return 0,_geb .Wrap (_geec ,_edg ,"\u0048\u0065\u0069\u0067\u0068\u0074");};_gfd +=_dac ;_b .BigEndian .PutUint32 (_affe ,_eddbd .XLocation );_dac ,_geec =w .Write (_affe );if _geec !=nil {return 0,_geb .Wrap (_geec ,_edg ,"\u0058L\u006f\u0063\u0061\u0074\u0069\u006fn");
};_gfd +=_dac ;_b .BigEndian .PutUint32 (_affe ,_eddbd .YLocation );_dac ,_geec =w .Write (_affe );if _geec !=nil {return 0,_geb .Wrap (_geec ,_edg ,"\u0059L\u006f\u0063\u0061\u0074\u0069\u006fn");};_gfd +=_dac ;if _geec =w .WriteByte (byte (_eddbd .CombinaionOperator )&0x07);
_geec !=nil {return 0,_geb .Wrap (_geec ,_edg ,"c\u006fm\u0062\u0069\u006e\u0061\u0074\u0069\u006f\u006e \u006f\u0070\u0065\u0072at\u006f\u0072");};_gfd ++;return _gfd ,nil ;};type TextRegion struct{_ebac *_ge .Reader ;RegionInfo *RegionSegment ;SbrTemplate int8 ;
SbDsOffset int8 ;DefaultPixel int8 ;CombinationOperator _ded .CombinationOperator ;IsTransposed int8 ;ReferenceCorner int16 ;LogSBStrips int16 ;UseRefinement bool ;IsHuffmanEncoded bool ;SbHuffRSize int8 ;SbHuffRDY int8 ;SbHuffRDX int8 ;SbHuffRDHeight int8 ;
SbHuffRDWidth int8 ;SbHuffDT int8 ;SbHuffDS int8 ;SbHuffFS int8 ;SbrATX []int8 ;SbrATY []int8 ;NumberOfSymbolInstances uint32 ;_egge int64 ;SbStrips int8 ;NumberOfSymbols uint32 ;RegionBitmap *_ded .Bitmap ;Symbols []*_ded .Bitmap ;_cacbc *_ede .Decoder ;
_ebead *GenericRefinementRegion ;_bgcbgc *_ede .DecoderStats ;_fdaf *_ede .DecoderStats ;_dddca *_ede .DecoderStats ;_gefd *_ede .DecoderStats ;_fecc *_ede .DecoderStats ;_fdcba *_ede .DecoderStats ;_fbd *_ede .DecoderStats ;_eggf *_ede .DecoderStats ;
_adeg *_ede .DecoderStats ;_ggab *_ede .DecoderStats ;_fegc *_ede .DecoderStats ;_acacc int8 ;_fefb *_eded .FixedSizeTable ;Header *Header ;_defee _eded .Tabler ;_efca _eded .Tabler ;_agfgd _eded .Tabler ;_babb _eded .Tabler ;_abfb _eded .Tabler ;_bbff _eded .Tabler ;
_dcbf _eded .Tabler ;_gdg _eded .Tabler ;_gebfaf ,_ffgd map[int ]int ;_cbgg []int ;_feaf *_ded .Points ;_gcff *_ded .Bitmaps ;_ecadf *_ed .IntSlice ;_ggba ,_bdfe int ;_cedd *_ded .Boxes ;};func _ega (_cab *_ge .Reader ,_eeeg *Header )*GenericRefinementRegion {return &GenericRefinementRegion {_ab :_cab ,RegionInfo :NewRegionSegment (_cab ),_fb :_eeeg ,_gb :&template0 {},_eb :&template1 {}};
};func (_bfada *SymbolDictionary )decodeHeightClassDeltaHeight ()(int64 ,error ){if _bfada .IsHuffmanEncoded {return _bfada .decodeHeightClassDeltaHeightWithHuffman ();};_fedd ,_gga :=_bfada ._cbgea .DecodeInt (_bfada ._agef );if _gga !=nil {return 0,_gga ;
};return int64 (_fedd ),nil ;};func (_fegca *TextRegion )String ()string {_edcd :=&_aa .Builder {};_edcd .WriteString ("\u000a[\u0054E\u0058\u0054\u0020\u0052\u0045\u0047\u0049\u004f\u004e\u005d\u000a");_edcd .WriteString (_fegca .RegionInfo .String ()+"\u000a");
_edcd .WriteString (_de .Sprintf ("\u0009\u002d\u0020\u0053br\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u003a\u0020\u0025\u0076\u000a",_fegca .SbrTemplate ));_edcd .WriteString (_de .Sprintf ("\u0009-\u0020S\u0062\u0044\u0073\u004f\u0066f\u0073\u0065t\u003a\u0020\u0025\u0076\u000a",_fegca .SbDsOffset ));
_edcd .WriteString (_de .Sprintf ("\t\u002d \u0044\u0065\u0066\u0061\u0075\u006c\u0074\u0050i\u0078\u0065\u006c\u003a %\u0076\u000a",_fegca .DefaultPixel ));_edcd .WriteString (_de .Sprintf ("\t\u002d\u0020\u0043\u006f\u006d\u0062i\u006e\u0061\u0074\u0069\u006f\u006e\u004f\u0070\u0065r\u0061\u0074\u006fr\u003a \u0025\u0076\u000a",_fegca .CombinationOperator ));
_edcd .WriteString (_de .Sprintf ("\t\u002d \u0049\u0073\u0054\u0072\u0061\u006e\u0073\u0070o\u0073\u0065\u0064\u003a %\u0076\u000a",_fegca .IsTransposed ));_edcd .WriteString (_de .Sprintf ("\u0009\u002d\u0020Re\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0043\u006f\u0072\u006e\u0065\u0072\u003a\u0020\u0025\u0076\u000a",_fegca .ReferenceCorner ));
_edcd .WriteString (_de .Sprintf ("\t\u002d\u0020\u0055\u0073eR\u0065f\u0069\u006e\u0065\u006d\u0065n\u0074\u003a\u0020\u0025\u0076\u000a",_fegca .UseRefinement ));_edcd .WriteString (_de .Sprintf ("\u0009-\u0020\u0049\u0073\u0048\u0075\u0066\u0066\u006d\u0061\u006e\u0045n\u0063\u006f\u0064\u0065\u0064\u003a\u0020\u0025\u0076\u000a",_fegca .IsHuffmanEncoded ));
if _fegca .IsHuffmanEncoded {_edcd .WriteString (_de .Sprintf ("\u0009\u002d\u0020\u0053bH\u0075\u0066\u0066\u0052\u0053\u0069\u007a\u0065\u003a\u0020\u0025\u0076\u000a",_fegca .SbHuffRSize ));_edcd .WriteString (_de .Sprintf ("\u0009\u002d\u0020\u0053\u0062\u0048\u0075\u0066\u0066\u0052\u0044\u0059:\u0020\u0025\u0076\u000a",_fegca .SbHuffRDY ));
_edcd .WriteString (_de .Sprintf ("\u0009\u002d\u0020\u0053\u0062\u0048\u0075\u0066\u0066\u0052\u0044\u0058:\u0020\u0025\u0076\u000a",_fegca .SbHuffRDX ));_edcd .WriteString (_de .Sprintf ("\u0009\u002d\u0020\u0053bH\u0075\u0066\u0066\u0052\u0044\u0048\u0065\u0069\u0067\u0068\u0074\u003a\u0020\u0025v\u000a",_fegca .SbHuffRDHeight ));
_edcd .WriteString (_de .Sprintf ("\t\u002d\u0020\u0053\u0062Hu\u0066f\u0052\u0044\u0057\u0069\u0064t\u0068\u003a\u0020\u0025\u0076\u000a",_fegca .SbHuffRDWidth ));_edcd .WriteString (_de .Sprintf ("\u0009\u002d \u0053\u0062\u0048u\u0066\u0066\u0044\u0054\u003a\u0020\u0025\u0076\u000a",_fegca .SbHuffDT ));
_edcd .WriteString (_de .Sprintf ("\u0009\u002d \u0053\u0062\u0048u\u0066\u0066\u0044\u0053\u003a\u0020\u0025\u0076\u000a",_fegca .SbHuffDS ));_edcd .WriteString (_de .Sprintf ("\u0009\u002d \u0053\u0062\u0048u\u0066\u0066\u0046\u0053\u003a\u0020\u0025\u0076\u000a",_fegca .SbHuffFS ));
};_edcd .WriteString (_de .Sprintf ("\u0009\u002d\u0020\u0053\u0062\u0072\u0041\u0054\u0058:\u0020\u0025\u0076\u000a",_fegca .SbrATX ));_edcd .WriteString (_de .Sprintf ("\u0009\u002d\u0020\u0053\u0062\u0072\u0041\u0054\u0059:\u0020\u0025\u0076\u000a",_fegca .SbrATY ));
_edcd .WriteString (_de .Sprintf ("\u0009\u002d\u0020N\u0075\u006d\u0062\u0065r\u004f\u0066\u0053\u0079\u006d\u0062\u006fl\u0049\u006e\u0073\u0074\u0061\u006e\u0063\u0065\u0073\u003a\u0020\u0025\u0076\u000a",_fegca .NumberOfSymbolInstances ));_edcd .WriteString (_de .Sprintf ("\u0009\u002d\u0020\u0053\u0062\u0072\u0041\u0054\u0058:\u0020\u0025\u0076\u000a",_fegca .SbrATX ));
return _edcd .String ();};func (_cgdb *Header )subInputReader ()(*_ge .Reader ,error ){_aecc :=int (_cgdb .SegmentDataLength );if _cgdb .SegmentDataLength ==_g .MaxInt32 {_aecc =-1;};return _cgdb .Reader .NewPartialReader (int (_cgdb .SegmentDataStartOffset ),_aecc ,false );
};func (_gcga *SymbolDictionary )setExportedSymbols (_bcecc []int ){for _ggga :=uint32 (0);_ggga < _gcga ._ccdc +_gcga .NumberOfNewSymbols ;_ggga ++{if _bcecc [_ggga ]==1{var _agad *_ded .Bitmap ;if _ggga < _gcga ._ccdc {_agad =_gcga ._egc [_ggga ];}else {_agad =_gcga ._dagg [_ggga -_gcga ._ccdc ];
};_fg .Log .Trace ("\u005bS\u0059\u004dB\u004f\u004c\u002d\u0044I\u0043\u0054\u0049O\u004e\u0041\u0052\u0059\u005d\u0020\u0041\u0064\u0064 E\u0078\u0070\u006fr\u0074\u0065d\u0053\u0079\u006d\u0062\u006f\u006c:\u0020\u0027%\u0073\u0027",_agad );_gcga ._agab =append (_gcga ._agab ,_agad );
};};};func (_abdfa *Header )readReferredToSegmentNumbers (_bbaa *_ge .Reader ,_gecg int )([]int ,error ){const _cfgfb ="\u0072\u0065\u0061\u0064R\u0065\u0066\u0065\u0072\u0072\u0065\u0064\u0054\u006f\u0053e\u0067m\u0065\u006e\u0074\u004e\u0075\u006d\u0062e\u0072\u0073";
_cbgb :=make ([]int ,_gecg );if _gecg > 0{_abdfa .RTSegments =make ([]*Header ,_gecg );var (_efgd uint64 ;_edef error ;);for _eeae :=0;_eeae < _gecg ;_eeae ++{_efgd ,_edef =_bbaa .ReadBits (byte (_abdfa .referenceSize ())<<3);if _edef !=nil {return nil ,_geb .Wrapf (_edef ,_cfgfb ,"\u0027\u0025\u0064\u0027 \u0072\u0065\u0066\u0065\u0072\u0072\u0065\u0064\u0020\u0073e\u0067m\u0065\u006e\u0074\u0020\u006e\u0075\u006db\u0065\u0072",_eeae );
};_cbgb [_eeae ]=int (_efgd &_g .MaxInt32 );};};return _cbgb ,nil ;};var (_ Regioner =&TextRegion {};_ Segmenter =&TextRegion {};);func (_aggef *TextRegion )decodeSymbolInstances ()error {_gbfbd ,_ddgd :=_aggef .decodeStripT ();if _ddgd !=nil {return _ddgd ;
};var (_eeffc int64 ;_aed uint32 ;);for _aed < _aggef .NumberOfSymbolInstances {_bdbb ,_adeb :=_aggef .decodeDT ();if _adeb !=nil {return _adeb ;};_gbfbd +=_bdbb ;var _dgaa int64 ;_badgb :=true ;_aggef ._egge =0;for {if _badgb {_dgaa ,_adeb =_aggef .decodeDfs ();
if _adeb !=nil {return _adeb ;};_eeffc +=_dgaa ;_aggef ._egge =_eeffc ;_badgb =false ;}else {_feedf ,_gfbfa :=_aggef .decodeIds ();if _e .Is (_gfbfa ,_c .ErrOOB ){break ;};if _gfbfa !=nil {return _gfbfa ;};if _aed >=_aggef .NumberOfSymbolInstances {break ;
};_aggef ._egge +=_feedf +int64 (_aggef .SbDsOffset );};_ddbcd ,_bgcg :=_aggef .decodeCurrentT ();if _bgcg !=nil {return _bgcg ;};_bbgfc :=_gbfbd +_ddbcd ;_afgb ,_bgcg :=_aggef .decodeID ();if _bgcg !=nil {return _bgcg ;};_ddce ,_bgcg :=_aggef .decodeRI ();
if _bgcg !=nil {return _bgcg ;};_gdag ,_bgcg :=_aggef .decodeIb (_ddce ,_afgb );if _bgcg !=nil {return _bgcg ;};if _bgcg =_aggef .blit (_gdag ,_bbgfc );_bgcg !=nil {return _bgcg ;};_aed ++;};};return nil ;};func (_deca *GenericRegion )GetRegionBitmap ()(_bfe *_ded .Bitmap ,_cfcc error ){if _deca .Bitmap !=nil {return _deca .Bitmap ,nil ;
};if _deca .IsMMREncoded {if _deca ._ffdb ==nil {_deca ._ffdb ,_cfcc =_f .New (_deca ._ddbc ,int (_deca .RegionSegment .BitmapWidth ),int (_deca .RegionSegment .BitmapHeight ),_deca .DataOffset ,_deca .DataLength );if _cfcc !=nil {return nil ,_cfcc ;};
};_deca .Bitmap ,_cfcc =_deca ._ffdb .UncompressMMR ();return _deca .Bitmap ,_cfcc ;};if _cfcc =_deca .updateOverrideFlags ();_cfcc !=nil {return nil ,_cfcc ;};var _ccea int ;if _deca ._cgcb ==nil {_deca ._cgcb ,_cfcc =_ede .New (_deca ._ddbc );if _cfcc !=nil {return nil ,_cfcc ;
};};if _deca ._fag ==nil {_deca ._fag =_ede .NewStats (65536,1);};_deca .Bitmap =_ded .New (int (_deca .RegionSegment .BitmapWidth ),int (_deca .RegionSegment .BitmapHeight ));_dge :=int (uint32 (_deca .Bitmap .Width +7)&(^uint32 (7)));for _edd :=0;_edd < _deca .Bitmap .Height ;
_edd ++{if _deca .IsTPGDon {var _eeg int ;_eeg ,_cfcc =_deca .decodeSLTP ();if _cfcc !=nil {return nil ,_cfcc ;};_ccea ^=_eeg ;};if _ccea ==1{if _edd > 0{if _cfcc =_deca .copyLineAbove (_edd );_cfcc !=nil {return nil ,_cfcc ;};};}else {if _cfcc =_deca .decodeLine (_edd ,_deca .Bitmap .Width ,_dge );
_cfcc !=nil {return nil ,_cfcc ;};};};return _deca .Bitmap ,nil ;};type HalftoneRegion struct{_decab *_ge .Reader ;_caefa *Header ;DataHeaderOffset int64 ;DataHeaderLength int64 ;DataOffset int64 ;DataLength int64 ;RegionSegment *RegionSegment ;HDefaultPixel int8 ;
CombinationOperator _ded .CombinationOperator ;HSkipEnabled bool ;HTemplate byte ;IsMMREncoded bool ;HGridWidth uint32 ;HGridHeight uint32 ;HGridX int32 ;HGridY int32 ;HRegionX uint16 ;HRegionY uint16 ;HalftoneRegionBitmap *_ded .Bitmap ;Patterns []*_ded .Bitmap ;
};func (_caef *GenericRegion )overrideAtTemplate0a (_baf ,_aeaa ,_bfa ,_ced ,_bdeed ,_agd int )int {if _caef .GBAtOverride [0]{_baf &=0xFFEF;if _caef .GBAtY [0]==0&&_caef .GBAtX [0]>=-int8 (_bdeed ){_baf |=(_ced >>uint (int8 (_agd )-_caef .GBAtX [0]&0x1))<<4;
}else {_baf |=int (_caef .getPixel (_aeaa +int (_caef .GBAtX [0]),_bfa +int (_caef .GBAtY [0])))<<4;};};if _caef .GBAtOverride [1]{_baf &=0xFBFF;if _caef .GBAtY [1]==0&&_caef .GBAtX [1]>=-int8 (_bdeed ){_baf |=(_ced >>uint (int8 (_agd )-_caef .GBAtX [1]&0x1))<<10;
}else {_baf |=int (_caef .getPixel (_aeaa +int (_caef .GBAtX [1]),_bfa +int (_caef .GBAtY [1])))<<10;};};if _caef .GBAtOverride [2]{_baf &=0xF7FF;if _caef .GBAtY [2]==0&&_caef .GBAtX [2]>=-int8 (_bdeed ){_baf |=(_ced >>uint (int8 (_agd )-_caef .GBAtX [2]&0x1))<<11;
}else {_baf |=int (_caef .getPixel (_aeaa +int (_caef .GBAtX [2]),_bfa +int (_caef .GBAtY [2])))<<11;};};if _caef .GBAtOverride [3]{_baf &=0x7FFF;if _caef .GBAtY [3]==0&&_caef .GBAtX [3]>=-int8 (_bdeed ){_baf |=(_ced >>uint (int8 (_agd )-_caef .GBAtX [3]&0x1))<<15;
}else {_baf |=int (_caef .getPixel (_aeaa +int (_caef .GBAtX [3]),_bfa +int (_caef .GBAtY [3])))<<15;};};return _baf ;};type GenericRefinementRegion struct{_gb templater ;_eb templater ;_ab *_ge .Reader ;_fb *Header ;RegionInfo *RegionSegment ;IsTPGROn bool ;
TemplateID int8 ;Template templater ;GrAtX []int8 ;GrAtY []int8 ;RegionBitmap *_ded .Bitmap ;ReferenceBitmap *_ded .Bitmap ;ReferenceDX int32 ;ReferenceDY int32 ;_be *_ede .Decoder ;_abc *_ede .DecoderStats ;_edb bool ;_abcd []bool ;};func (_eabca *GenericRegion )copyLineAbove (_fgaa int )error {_fbaf :=_fgaa *_eabca .Bitmap .RowStride ;
_cbg :=_fbaf -_eabca .Bitmap .RowStride ;for _gfab :=0;_gfab < _eabca .Bitmap .RowStride ;_gfab ++{_dcd ,_aegb :=_eabca .Bitmap .GetByte (_cbg );if _aegb !=nil {return _aegb ;};_cbg ++;if _aegb =_eabca .Bitmap .SetByte (_fbaf ,_dcd );_aegb !=nil {return _aegb ;
};_fbaf ++;};return nil ;};func (_deb *GenericRefinementRegion )GetRegionInfo ()*RegionSegment {return _deb .RegionInfo };func (_acdg *SymbolDictionary )setAtPixels ()error {if _acdg .IsHuffmanEncoded {return nil ;};_aegfe :=1;if _acdg .SdTemplate ==0{_aegfe =4;
};if _gfbb :=_acdg .readAtPixels (_aegfe );_gfbb !=nil {return _gfbb ;};return nil ;};func (_fdd *GenericRegion )parseHeader ()(_gbfd error ){_fg .Log .Trace ("\u005b\u0047\u0045\u004e\u0045\u0052I\u0043\u002d\u0052\u0045\u0047\u0049\u004f\u004e\u005d\u0020\u0050\u0061\u0072s\u0069\u006e\u0067\u0048\u0065\u0061\u0064e\u0072\u002e\u002e\u002e");
defer func (){if _gbfd !=nil {_fg .Log .Trace ("\u005b\u0047\u0045\u004e\u0045\u0052\u0049\u0043\u002d\u0052\u0045\u0047\u0049\u004f\u004e]\u0020\u0050\u0061\u0072\u0073\u0069\u006e\u0067\u0048\u0065\u0061\u0064\u0065r\u0020\u0046\u0069\u006e\u0069\u0073\u0068\u0065\u0064\u0020\u0077\u0069th\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020\u0025\u0076",_gbfd );
}else {_fg .Log .Trace ("\u005b\u0047\u0045\u004e\u0045\u0052\u0049C\u002d\u0052\u0045G\u0049\u004f\u004e]\u0020\u0050a\u0072\u0073\u0069\u006e\u0067\u0048e\u0061de\u0072\u0020\u0046\u0069\u006e\u0069\u0073\u0068\u0065\u0064\u0020\u0053\u0075\u0063\u0063\u0065\u0073\u0073\u0066\u0075\u006c\u006c\u0079\u002e\u002e\u002e");
};}();var (_edbd int ;_fac uint64 ;);if _gbfd =_fdd .RegionSegment .parseHeader ();_gbfd !=nil {return _gbfd ;};if _ ,_gbfd =_fdd ._ddbc .ReadBits (3);_gbfd !=nil {return _gbfd ;};_edbd ,_gbfd =_fdd ._ddbc .ReadBit ();if _gbfd !=nil {return _gbfd ;};if _edbd ==1{_fdd .UseExtTemplates =true ;
};_edbd ,_gbfd =_fdd ._ddbc .ReadBit ();if _gbfd !=nil {return _gbfd ;};if _edbd ==1{_fdd .IsTPGDon =true ;};_fac ,_gbfd =_fdd ._ddbc .ReadBits (2);if _gbfd !=nil {return _gbfd ;};_fdd .GBTemplate =byte (_fac &0xf);_edbd ,_gbfd =_fdd ._ddbc .ReadBit ();
if _gbfd !=nil {return _gbfd ;};if _edbd ==1{_fdd .IsMMREncoded =true ;};if !_fdd .IsMMREncoded {_bccc :=1;if _fdd .GBTemplate ==0{_bccc =4;if _fdd .UseExtTemplates {_bccc =12;};};if _gbfd =_fdd .readGBAtPixels (_bccc );_gbfd !=nil {return _gbfd ;};};if _gbfd =_fdd .computeSegmentDataStructure ();
_gbfd !=nil {return _gbfd ;};_fg .Log .Trace ("\u0025\u0073",_fdd );return nil ;};func (_fba *GenericRefinementRegion )readAtPixels ()error {_fba .GrAtX =make ([]int8 ,2);_fba .GrAtY =make ([]int8 ,2);_bdd ,_cfgf :=_fba ._ab .ReadByte ();if _cfgf !=nil {return _cfgf ;
};_fba .GrAtX [0]=int8 (_bdd );_bdd ,_cfgf =_fba ._ab .ReadByte ();if _cfgf !=nil {return _cfgf ;};_fba .GrAtY [0]=int8 (_bdd );_bdd ,_cfgf =_fba ._ab .ReadByte ();if _cfgf !=nil {return _cfgf ;};_fba .GrAtX [1]=int8 (_bdd );_bdd ,_cfgf =_fba ._ab .ReadByte ();
if _cfgf !=nil {return _cfgf ;};_fba .GrAtY [1]=int8 (_bdd );return nil ;};func (_cade *TextRegion )initSymbols ()error {const _ebaf ="i\u006e\u0069\u0074\u0053\u0079\u006d\u0062\u006f\u006c\u0073";for _ ,_ebadb :=range _cade .Header .RTSegments {if _ebadb ==nil {return _geb .Error (_ebaf ,"\u006e\u0069\u006c\u0020\u0073\u0065\u0067\u006de\u006e\u0074\u0020pr\u006f\u0076\u0069\u0064\u0065\u0064 \u0066\u006f\u0072\u0020\u0074\u0068\u0065\u0020\u0074\u0065\u0078\u0074\u0020\u0072\u0065g\u0069\u006f\u006e\u0020\u0053\u0079\u006d\u0062o\u006c\u0073");
};if _ebadb .Type ==0{_aabbe ,_ffgac :=_ebadb .GetSegmentData ();if _ffgac !=nil {return _geb .Wrap (_ffgac ,_ebaf ,"");};_cedac ,_gegg :=_aabbe .(*SymbolDictionary );if !_gegg {return _geb .Error (_ebaf ,"\u0072e\u0066\u0065r\u0072\u0065\u0064 \u0054\u006f\u0020\u0053\u0065\u0067\u006de\u006e\u0074\u0020\u0069\u0073\u0020n\u006f\u0074\u0020\u0061\u0020\u0053\u0079\u006d\u0062\u006f\u006cD\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079");
};_cedac ._bddc =_cade ._eggf ;_affb ,_ffgac :=_cedac .GetDictionary ();if _ffgac !=nil {return _geb .Wrap (_ffgac ,_ebaf ,"");};_cade .Symbols =append (_cade .Symbols ,_affb ...);};};_cade .NumberOfSymbols =uint32 (len (_cade .Symbols ));return nil ;};
var _ templater =&template1 {};func (_gfda *TextRegion )decodeRdx ()(int64 ,error ){const _afac ="\u0064e\u0063\u006f\u0064\u0065\u0052\u0064x";if _gfda .IsHuffmanEncoded {if _gfda .SbHuffRDX ==3{if _gfda ._bbff ==nil {var (_cecg int ;_gebaf error ;);if _gfda .SbHuffFS ==3{_cecg ++;
};if _gfda .SbHuffDS ==3{_cecg ++;};if _gfda .SbHuffDT ==3{_cecg ++;};if _gfda .SbHuffRDWidth ==3{_cecg ++;};if _gfda .SbHuffRDHeight ==3{_cecg ++;};_gfda ._bbff ,_gebaf =_gfda .getUserTable (_cecg );if _gebaf !=nil {return 0,_geb .Wrap (_gebaf ,_afac ,"");
};};return _gfda ._bbff .Decode (_gfda ._ebac );};_afeg ,_afgc :=_eded .GetStandardTable (14+int (_gfda .SbHuffRDX ));if _afgc !=nil {return 0,_geb .Wrap (_afgc ,_afac ,"");};return _afeg .Decode (_gfda ._ebac );};_afgf ,_bfgc :=_gfda ._cacbc .DecodeInt (_gfda ._adeg );
if _bfgc !=nil {return 0,_geb .Wrap (_bfgc ,_afac ,"");};return int64 (_afgf ),nil ;};func (_dfbfa *Header )readNumberOfReferredToSegments (_dbed *_ge .Reader )(uint64 ,error ){const _bcbd ="\u0072\u0065\u0061\u0064\u004e\u0075\u006d\u0062\u0065\u0072O\u0066\u0052\u0065\u0066\u0065\u0072\u0072e\u0064\u0054\u006f\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u0073";
_dce ,_caa :=_dbed .ReadBits (3);if _caa !=nil {return 0,_geb .Wrap (_caa ,_bcbd ,"\u0063\u006f\u0075n\u0074\u0020\u006f\u0066\u0020\u0072\u0074\u0073");};_dce &=0xf;var _cgda []byte ;if _dce <=4{_cgda =make ([]byte ,5);for _bgefc :=0;_bgefc <=4;_bgefc ++{_gee ,_dcga :=_dbed .ReadBit ();
if _dcga !=nil {return 0,_geb .Wrap (_dcga ,_bcbd ,"\u0073\u0068\u006fr\u0074\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};_cgda [_bgefc ]=byte (_gee );};}else {_dce ,_caa =_dbed .ReadBits (29);if _caa !=nil {return 0,_caa ;};_dce &=_g .MaxInt32 ;_ccfa :=(_dce +8)>>3;
_ccfa <<=3;_cgda =make ([]byte ,_ccfa );var _afga uint64 ;for _afga =0;_afga < _ccfa ;_afga ++{_bcbb ,_fgaf :=_dbed .ReadBit ();if _fgaf !=nil {return 0,_geb .Wrap (_fgaf ,_bcbd ,"l\u006f\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};_cgda [_afga ]=byte (_bcbb );
};};return _dce ,nil ;};func (_fcee *GenericRegion )setParameters (_aefa bool ,_daf ,_ggcb int64 ,_feg ,_fcad uint32 ){_fcee .IsMMREncoded =_aefa ;_fcee .DataOffset =_daf ;_fcee .DataLength =_ggcb ;_fcee .RegionSegment .BitmapHeight =_feg ;_fcee .RegionSegment .BitmapWidth =_fcad ;
_fcee ._ffdb =nil ;_fcee .Bitmap =nil ;};func (_eee *GenericRefinementRegion )getPixel (_bgc *_ded .Bitmap ,_eed ,_dgg int )int {if _eed < 0||_eed >=_bgc .Width {return 0;};if _dgg < 0||_dgg >=_bgc .Height {return 0;};if _bgc .GetPixel (_eed ,_dgg ){return 1;
};return 0;};func (_dcaa *SymbolDictionary )getToExportFlags ()([]int ,error ){var (_fbec int ;_deda int32 ;_dbded error ;_aaed =int32 (_dcaa ._ccdc +_dcaa .NumberOfNewSymbols );_acff =make ([]int ,_aaed ););for _fdfde :=int32 (0);_fdfde < _aaed ;_fdfde +=_deda {if _dcaa .IsHuffmanEncoded {_gaaae ,_aafe :=_eded .GetStandardTable (1);
if _aafe !=nil {return nil ,_aafe ;};_dcdd ,_aafe :=_gaaae .Decode (_dcaa ._bdcd );if _aafe !=nil {return nil ,_aafe ;};_deda =int32 (_dcdd );}else {_deda ,_dbded =_dcaa ._cbgea .DecodeInt (_dcaa ._cfcbc );if _dbded !=nil {return nil ,_dbded ;};};if _deda !=0{if _fdfde +_deda > _aaed {return nil ,_geb .Error ("\u0053\u0079\u006d\u0062\u006f\u006cD\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u002e\u0067\u0065\u0074T\u006f\u0045\u0078\u0070\u006f\u0072\u0074F\u006c\u0061\u0067\u0073","\u006d\u0061\u006c\u0066\u006f\u0072m\u0065\u0064\u0020\u0069\u006e\u0070\u0075\u0074\u0020\u0064\u0061\u0074\u0061\u0020\u0070\u0072\u006f\u0076\u0069\u0064e\u0064\u002e\u0020\u0069\u006e\u0064\u0065\u0078\u0020\u006f\u0075\u0074\u0020\u006ff\u0020r\u0061\u006e\u0067\u0065");
};for _bebf :=_fdfde ;_bebf < _fdfde +_deda ;_bebf ++{_acff [_bebf ]=_fbec ;};};if _fbec ==0{_fbec =1;}else {_fbec =0;};};return _acff ,nil ;};func (_bdb *SymbolDictionary )decodeDifferenceWidth ()(int64 ,error ){if _bdb .IsHuffmanEncoded {switch _bdb .SdHuffDecodeWidthSelection {case 0:_edfb ,_gedg :=_eded .GetStandardTable (2);
if _gedg !=nil {return 0,_gedg ;};return _edfb .Decode (_bdb ._bdcd );case 1:_cadc ,_ccdca :=_eded .GetStandardTable (3);if _ccdca !=nil {return 0,_ccdca ;};return _cadc .Decode (_bdb ._bdcd );case 3:if _bdb ._cbgeb ==nil {var _ggd int ;if _bdb .SdHuffDecodeHeightSelection ==3{_ggd ++;
};_bbec ,_cdaee :=_bdb .getUserTable (_ggd );if _cdaee !=nil {return 0,_cdaee ;};_bdb ._cbgeb =_bbec ;};return _bdb ._cbgeb .Decode (_bdb ._bdcd );};}else {_gcefe ,_dfgg :=_bdb ._cbgea .DecodeInt (_bdb ._fbbe );if _dfgg !=nil {return 0,_dfgg ;};return int64 (_gcefe ),nil ;
};return 0,nil ;};func (_cfa *PatternDictionary )setGbAtPixels (){if _cfa .HDTemplate ==0{_cfa .GBAtX =make ([]int8 ,4);_cfa .GBAtY =make ([]int8 ,4);_cfa .GBAtX [0]=-int8 (_cfa .HdpWidth );_cfa .GBAtY [0]=0;_cfa .GBAtX [1]=-3;_cfa .GBAtY [1]=-1;_cfa .GBAtX [2]=2;
_cfa .GBAtY [2]=-2;_cfa .GBAtX [3]=-2;_cfa .GBAtY [3]=-2;}else {_cfa .GBAtX =[]int8 {-int8 (_cfa .HdpWidth )};_cfa .GBAtY =[]int8 {0};};};func (_ggfb *GenericRefinementRegion )setParameters (_cba *_ede .DecoderStats ,_ddg *_ede .Decoder ,_gdb int8 ,_cdc ,_bgeg uint32 ,_bgcb *_ded .Bitmap ,_cae ,_fdf int32 ,_cbag bool ,_cca []int8 ,_gdcb []int8 ){_fg .Log .Trace ("\u005b\u0047\u0045NE\u0052\u0049\u0043\u002d\u0052\u0045\u0046\u002d\u0052E\u0047I\u004fN\u005d \u0073\u0065\u0074\u0050\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073");
if _cba !=nil {_ggfb ._abc =_cba ;};if _ddg !=nil {_ggfb ._be =_ddg ;};_ggfb .TemplateID =_gdb ;_ggfb .RegionInfo .BitmapWidth =_cdc ;_ggfb .RegionInfo .BitmapHeight =_bgeg ;_ggfb .ReferenceBitmap =_bgcb ;_ggfb .ReferenceDX =_cae ;_ggfb .ReferenceDY =_fdf ;
_ggfb .IsTPGROn =_cbag ;_ggfb .GrAtX =_cca ;_ggfb .GrAtY =_gdcb ;_ggfb .RegionBitmap =nil ;_fg .Log .Trace ("[\u0047\u0045\u004e\u0045\u0052\u0049\u0043\u002d\u0052E\u0046\u002d\u0052\u0045\u0047\u0049\u004fN]\u0020\u0073\u0065\u0074P\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073 f\u0069\u006ei\u0073\u0068\u0065\u0064\u002e\u0020\u0025\u0073",_ggfb );
};func (_fggg *SymbolDictionary )parseHeader ()(_afgd error ){_fg .Log .Trace ("\u005b\u0053\u0059\u004d\u0042\u004f\u004c \u0044\u0049\u0043T\u0049\u004f\u004e\u0041R\u0059\u005d\u005b\u0050\u0041\u0052\u0053\u0045\u002d\u0048\u0045\u0041\u0044\u0045\u0052\u005d\u0020\u0062\u0065\u0067\u0069\u006e\u0073\u002e\u002e\u002e");
defer func (){if _afgd !=nil {_fg .Log .Trace ("\u005bS\u0059\u004dB\u004f\u004c\u0020\u0044I\u0043\u0054\u0049O\u004e\u0041\u0052\u0059\u005d\u005b\u0050\u0041\u0052SE\u002d\u0048\u0045A\u0044\u0045R\u005d\u0020\u0066\u0061\u0069\u006ce\u0064\u002e \u0025\u0076",_afgd );
}else {_fg .Log .Trace ("\u005b\u0053\u0059\u004d\u0042\u004f\u004c \u0044\u0049\u0043T\u0049\u004f\u004e\u0041R\u0059\u005d\u005b\u0050\u0041\u0052\u0053\u0045\u002d\u0048\u0045\u0041\u0044\u0045\u0052\u005d\u0020\u0066\u0069\u006e\u0069\u0073\u0068\u0065\u0064\u002e");
};}();if _afgd =_fggg .readRegionFlags ();_afgd !=nil {return _afgd ;};if _afgd =_fggg .setAtPixels ();_afgd !=nil {return _afgd ;};if _afgd =_fggg .setRefinementAtPixels ();_afgd !=nil {return _afgd ;};if _afgd =_fggg .readNumberOfExportedSymbols ();_afgd !=nil {return _afgd ;
};if _afgd =_fggg .readNumberOfNewSymbols ();_afgd !=nil {return _afgd ;};if _afgd =_fggg .setInSyms ();_afgd !=nil {return _afgd ;};if _fggg ._afgac {_fafed :=_fggg .Header .RTSegments ;for _ccba :=len (_fafed )-1;_ccba >=0;_ccba --{if _fafed [_ccba ].Type ==0{_dcda ,_gbfbg :=_fafed [_ccba ].SegmentData .(*SymbolDictionary );
if !_gbfbg {_afgd =_de .Errorf ("\u0072\u0065\u006c\u0061\u0074\u0065\u0064\u0020\u0053\u0065\u0067\u006d\u0065\u006e\u0074:\u0020\u0025\u0076\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020S\u0079\u006d\u0062\u006f\u006c\u0020\u0044\u0069\u0063\u0074\u0069\u006fna\u0072\u0079\u0020\u0053\u0065\u0067\u006d\u0065\u006e\u0074",_fafed [_ccba ]);
return _afgd ;};if _dcda ._afgac {_fggg .setRetainedCodingContexts (_dcda );};break ;};};};if _afgd =_fggg .checkInput ();_afgd !=nil {return _afgd ;};return nil ;};func (_dccf *HalftoneRegion )checkInput ()error {if _dccf .IsMMREncoded {if _dccf .HTemplate !=0{_fg .Log .Debug ("\u0048\u0054\u0065\u006d\u0070l\u0061\u0074\u0065\u0020\u003d\u0020\u0025\u0064\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0074\u0068\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0030",_dccf .HTemplate );
};if _dccf .HSkipEnabled {_fg .Log .Debug ("\u0048\u0053\u006b\u0069\u0070\u0045\u006e\u0061\u0062\u006c\u0065\u0064\u0020\u0030\u0020\u0025\u0076\u0020(\u0073\u0068\u006f\u0075\u006c\u0064\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0074\u0068\u0065\u0020v\u0061\u006c\u0075\u0065\u0020\u0066\u0061\u006c\u0073\u0065\u0029",_dccf .HSkipEnabled );
};};return nil ;};func (_caeab *SymbolDictionary )encodeRefinementATFlags (_cbbg _ge .BinaryWriter )(_fadc int ,_aac error ){const _ecbef ="\u0065\u006e\u0063od\u0065\u0052\u0065\u0066\u0069\u006e\u0065\u006d\u0065\u006e\u0074\u0041\u0054\u0046\u006c\u0061\u0067\u0073";
if !_caeab .UseRefinementAggregation ||_caeab .SdrTemplate !=0{return 0,nil ;};for _fcdc :=0;_fcdc < 2;_fcdc ++{if _aac =_cbbg .WriteByte (byte (_caeab .SdrATX [_fcdc ]));_aac !=nil {return _fadc ,_geb .Wrapf (_aac ,_ecbef ,"\u0053\u0064\u0072\u0041\u0054\u0058\u005b\u0025\u0064\u005d",_fcdc );
};_fadc ++;if _aac =_cbbg .WriteByte (byte (_caeab .SdrATY [_fcdc ]));_aac !=nil {return _fadc ,_geb .Wrapf (_aac ,_ecbef ,"\u0053\u0064\u0072\u0041\u0054\u0059\u005b\u0025\u0064\u005d",_fcdc );};_fadc ++;};return _fadc ,nil ;};type PatternDictionary struct{_bfac *_ge .Reader ;
DataHeaderOffset int64 ;DataHeaderLength int64 ;DataOffset int64 ;DataLength int64 ;GBAtX []int8 ;GBAtY []int8 ;IsMMREncoded bool ;HDTemplate byte ;HdpWidth byte ;HdpHeight byte ;Patterns []*_ded .Bitmap ;GrayMax uint32 ;};func (_bfaa *Header )readSegmentPageAssociation (_ffg Documenter ,_ddgb *_ge .Reader ,_dgbe uint64 ,_fagg ...int )(_bcbg error ){const _eddg ="\u0072\u0065\u0061\u0064\u0053\u0065\u0067\u006d\u0065\u006e\u0074P\u0061\u0067\u0065\u0041\u0073\u0073\u006f\u0063\u0069\u0061t\u0069\u006f\u006e";
if !_bfaa .PageAssociationFieldSize {_bgcd ,_aabc :=_ddgb .ReadBits (8);if _aabc !=nil {return _geb .Wrap (_aabc ,_eddg ,"\u0073\u0068\u006fr\u0074\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};_bfaa .PageAssociation =int (_bgcd &0xFF);}else {_aeb ,_accg :=_ddgb .ReadBits (32);
if _accg !=nil {return _geb .Wrap (_accg ,_eddg ,"l\u006f\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};_bfaa .PageAssociation =int (_aeb &_g .MaxInt32 );};if _dgbe ==0{return nil ;};if _bfaa .PageAssociation !=0{_gfee ,_gbfb :=_ffg .GetPage (_bfaa .PageAssociation );
if _gbfb !=nil {return _geb .Wrap (_gbfb ,_eddg ,"\u0061s\u0073\u006f\u0063\u0069a\u0074\u0065\u0064\u0020\u0070a\u0067e\u0020n\u006f\u0074\u0020\u0066\u006f\u0075\u006ed");};var _ecdf int ;for _bbf :=uint64 (0);_bbf < _dgbe ;_bbf ++{_ecdf =_fagg [_bbf ];
_bfaa .RTSegments [_bbf ],_gbfb =_gfee .GetSegment (_ecdf );if _gbfb !=nil {var _bgbg error ;_bfaa .RTSegments [_bbf ],_bgbg =_ffg .GetGlobalSegment (_ecdf );if _bgbg !=nil {return _geb .Wrapf (_gbfb ,_eddg ,"\u0072\u0065\u0066\u0065\u0072\u0065n\u0063\u0065\u0020s\u0065\u0067\u006de\u006e\u0074\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075n\u0064\u0020\u0061\u0074\u0020pa\u0067\u0065\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0072\u0020\u0069\u006e\u0020\u0067\u006c\u006f\u0062\u0061\u006c\u0073",_bfaa .PageAssociation );
};};};return nil ;};for _ddead :=uint64 (0);_ddead < _dgbe ;_ddead ++{_bfaa .RTSegments [_ddead ],_bcbg =_ffg .GetGlobalSegment (_fagg [_ddead ]);if _bcbg !=nil {return _geb .Wrapf (_bcbg ,_eddg ,"\u0067\u006c\u006f\u0062\u0061\u006c\u0020\u0073\u0065\u0067m\u0065\u006e\u0074\u003a\u0020\u0027\u0025d\u0027\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064",_fagg [_ddead ]);
};};return nil ;};func (_eeaf *SymbolDictionary )String ()string {_ccff :=&_aa .Builder {};_ccff .WriteString ("\n\u005b\u0053\u0059\u004dBO\u004c-\u0044\u0049\u0043\u0054\u0049O\u004e\u0041\u0052\u0059\u005d\u000a");_ccff .WriteString (_de .Sprintf ("\u0009-\u0020S\u0064\u0072\u0054\u0065\u006dp\u006c\u0061t\u0065\u0020\u0025\u0076\u000a",_eeaf .SdrTemplate ));
_ccff .WriteString (_de .Sprintf ("\u0009\u002d\u0020\u0053\u0064\u0054\u0065\u006d\u0070\u006c\u0061\u0074e\u0020\u0025\u0076\u000a",_eeaf .SdTemplate ));_ccff .WriteString (_de .Sprintf ("\u0009\u002d\u0020\u0069\u0073\u0043\u006f\u0064\u0069\u006eg\u0043\u006f\u006e\u0074\u0065\u0078\u0074R\u0065\u0074\u0061\u0069\u006e\u0065\u0064\u0020\u0025\u0076\u000a",_eeaf ._gcfb ));
_ccff .WriteString (_de .Sprintf ("\u0009\u002d\u0020\u0069\u0073\u0043\u006f\u0064\u0069\u006e\u0067C\u006f\u006e\u0074\u0065\u0078\u0074\u0055\u0073\u0065\u0064 \u0025\u0076\u000a",_eeaf ._afgac ));_ccff .WriteString (_de .Sprintf ("\u0009\u002d\u0020\u0053\u0064\u0048u\u0066\u0066\u0041\u0067\u0067\u0049\u006e\u0073\u0074\u0061\u006e\u0063\u0065S\u0065\u006c\u0065\u0063\u0074\u0069\u006fn\u0020\u0025\u0076\u000a",_eeaf .SdHuffAggInstanceSelection ));
_ccff .WriteString (_de .Sprintf ("\u0009\u002d\u0020\u0053d\u0048\u0075\u0066\u0066\u0042\u004d\u0053\u0069\u007a\u0065S\u0065l\u0065\u0063\u0074\u0069\u006f\u006e\u0020%\u0076\u000a",_eeaf .SdHuffBMSizeSelection ));_ccff .WriteString (_de .Sprintf ("\u0009\u002d\u0020\u0053\u0064\u0048u\u0066\u0066\u0044\u0065\u0063\u006f\u0064\u0065\u0057\u0069\u0064\u0074\u0068S\u0065\u006c\u0065\u0063\u0074\u0069\u006fn\u0020\u0025\u0076\u000a",_eeaf .SdHuffDecodeWidthSelection ));
_ccff .WriteString (_de .Sprintf ("\u0009\u002d\u0020Sd\u0048\u0075\u0066\u0066\u0044\u0065\u0063\u006f\u0064e\u0048e\u0069g\u0068t\u0053\u0065\u006c\u0065\u0063\u0074\u0069\u006f\u006e\u0020\u0025\u0076\u000a",_eeaf .SdHuffDecodeHeightSelection ));_ccff .WriteString (_de .Sprintf ("\u0009\u002d\u0020U\u0073\u0065\u0052\u0065f\u0069\u006e\u0065\u006d\u0065\u006e\u0074A\u0067\u0067\u0072\u0065\u0067\u0061\u0074\u0069\u006f\u006e\u0020\u0025\u0076\u000a",_eeaf .UseRefinementAggregation ));
_ccff .WriteString (_de .Sprintf ("\u0009\u002d\u0020is\u0048\u0075\u0066\u0066\u006d\u0061\u006e\u0045\u006e\u0063\u006f\u0064\u0065\u0064\u0020\u0025\u0076\u000a",_eeaf .IsHuffmanEncoded ));_ccff .WriteString (_de .Sprintf ("\u0009\u002d\u0020S\u0064\u0041\u0054\u0058\u0020\u0025\u0076\u000a",_eeaf .SdATX ));
_ccff .WriteString (_de .Sprintf ("\u0009\u002d\u0020S\u0064\u0041\u0054\u0059\u0020\u0025\u0076\u000a",_eeaf .SdATY ));_ccff .WriteString (_de .Sprintf ("\u0009\u002d\u0020\u0053\u0064\u0072\u0041\u0054\u0058\u0020\u0025\u0076\u000a",_eeaf .SdrATX ));
_ccff .WriteString (_de .Sprintf ("\u0009\u002d\u0020\u0053\u0064\u0072\u0041\u0054\u0059\u0020\u0025\u0076\u000a",_eeaf .SdrATY ));_ccff .WriteString (_de .Sprintf ("\u0009\u002d\u0020\u004e\u0075\u006d\u0062\u0065\u0072\u004ff\u0045\u0078\u0070\u006f\u0072\u0074\u0065d\u0053\u0079\u006d\u0062\u006f\u006c\u0073\u0020\u0025\u0076\u000a",_eeaf .NumberOfExportedSymbols ));
_ccff .WriteString (_de .Sprintf ("\u0009-\u0020\u004e\u0075\u006db\u0065\u0072\u004f\u0066\u004ee\u0077S\u0079m\u0062\u006f\u006c\u0073\u0020\u0025\u0076\n",_eeaf .NumberOfNewSymbols ));_ccff .WriteString (_de .Sprintf ("\u0009\u002d\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u004ff\u0049\u006d\u0070\u006f\u0072\u0074\u0065d\u0053\u0079\u006d\u0062\u006f\u006c\u0073\u0020\u0025\u0076\u000a",_eeaf ._ccdc ));
_ccff .WriteString (_de .Sprintf ("\u0009\u002d \u006e\u0075\u006d\u0062\u0065\u0072\u004f\u0066\u0044\u0065\u0063\u006f\u0064\u0065\u0064\u0053\u0079\u006d\u0062\u006f\u006c\u0073 %\u0076\u000a",_eeaf ._fdfd ));return _ccff .String ();};func (_fbbeb *SymbolDictionary )readRefinementAtPixels (_dfec int )error {_fbbeb .SdrATX =make ([]int8 ,_dfec );
_fbbeb .SdrATY =make ([]int8 ,_dfec );var (_ggbe byte ;_gcd error ;);for _fcda :=0;_fcda < _dfec ;_fcda ++{_ggbe ,_gcd =_fbbeb ._bdcd .ReadByte ();if _gcd !=nil {return _gcd ;};_fbbeb .SdrATX [_fcda ]=int8 (_ggbe );_ggbe ,_gcd =_fbbeb ._bdcd .ReadByte ();
if _gcd !=nil {return _gcd ;};_fbbeb .SdrATY [_fcda ]=int8 (_ggbe );};return nil ;};func (_gfg *GenericRegion )readGBAtPixels (_ecff int )error {const _gebc ="\u0072\u0065\u0061\u0064\u0047\u0042\u0041\u0074\u0050i\u0078\u0065\u006c\u0073";_gfg .GBAtX =make ([]int8 ,_ecff );
_gfg .GBAtY =make ([]int8 ,_ecff );for _gaa :=0;_gaa < _ecff ;_gaa ++{_deff ,_ddea :=_gfg ._ddbc .ReadByte ();if _ddea !=nil {return _geb .Wrapf (_ddea ,_gebc ,"\u0058\u0020\u0061t\u0020\u0069\u003a\u0020\u0027\u0025\u0064\u0027",_gaa );};_gfg .GBAtX [_gaa ]=int8 (_deff );
_deff ,_ddea =_gfg ._ddbc .ReadByte ();if _ddea !=nil {return _geb .Wrapf (_ddea ,_gebc ,"\u0059\u0020\u0061t\u0020\u0069\u003a\u0020\u0027\u0025\u0064\u0027",_gaa );};_gfg .GBAtY [_gaa ]=int8 (_deff );};return nil ;};type template1 struct{};func (_efggb *TableSegment )HtHigh ()int32 {return _efggb ._fdbg };
func (_ffef *TableSegment )HtPS ()int32 {return _ffef ._eacd };func (_ddgff *TextRegion )checkInput ()error {const _dceb ="\u0063\u0068\u0065\u0063\u006b\u0049\u006e\u0070\u0075\u0074";if !_ddgff .UseRefinement {if _ddgff .SbrTemplate !=0{_fg .Log .Debug ("\u0053\u0062\u0072Te\u006d\u0070\u006c\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0030");
_ddgff .SbrTemplate =0;};};if _ddgff .SbHuffFS ==2||_ddgff .SbHuffRDWidth ==2||_ddgff .SbHuffRDHeight ==2||_ddgff .SbHuffRDX ==2||_ddgff .SbHuffRDY ==2{return _geb .Error (_dceb ,"h\u0075\u0066\u0066\u006d\u0061\u006e \u0066\u006c\u0061\u0067\u0020\u0076a\u006c\u0075\u0065\u0020\u0069\u0073\u0020n\u006f\u0074\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074e\u0064");
};if !_ddgff .UseRefinement {if _ddgff .SbHuffRSize !=0{_fg .Log .Debug ("\u0053\u0062\u0048uf\u0066\u0052\u0053\u0069\u007a\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0030");_ddgff .SbHuffRSize =0;};if _ddgff .SbHuffRDY !=0{_fg .Log .Debug ("S\u0062\u0048\u0075\u0066fR\u0044Y\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0030");
_ddgff .SbHuffRDY =0;};if _ddgff .SbHuffRDX !=0{_fg .Log .Debug ("S\u0062\u0048\u0075\u0066fR\u0044X\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0030");_ddgff .SbHuffRDX =0;};if _ddgff .SbHuffRDWidth !=0{_fg .Log .Debug ("\u0053b\u0048\u0075\u0066\u0066R\u0044\u0057\u0069\u0064\u0074h\u0020s\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u00200");
_ddgff .SbHuffRDWidth =0;};if _ddgff .SbHuffRDHeight !=0{_fg .Log .Debug ("\u0053\u0062\u0048\u0075\u0066\u0066\u0052\u0044\u0048\u0065\u0069g\u0068\u0074\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020b\u0065\u0020\u0030");_ddgff .SbHuffRDHeight =0;};
};return nil ;};func (_edc *GenericRegion )computeSegmentDataStructure ()error {_edc .DataOffset =_edc ._ddbc .AbsolutePosition ();_edc .DataHeaderLength =_edc .DataOffset -_edc .DataHeaderOffset ;_edc .DataLength =int64 (_edc ._ddbc .AbsoluteLength ())-_edc .DataHeaderLength ;
return nil ;};type templater interface{form (_dddc ,_ege ,_gfeb ,_ecbg ,_fee int16 )int16 ;setIndex (_cgc *_ede .DecoderStats );};func (_agfa *HalftoneRegion )combineGrayscalePlanes (_dagc []*_ded .Bitmap ,_cfcgg int )error {_faab :=0;for _aeae :=0;_aeae < _dagc [_cfcgg ].Height ;
_aeae ++{for _ggg :=0;_ggg < _dagc [_cfcgg ].Width ;_ggg +=8{_bdda ,_eagc :=_dagc [_cfcgg +1].GetByte (_faab );if _eagc !=nil {return _eagc ;};_bddd ,_eagc :=_dagc [_cfcgg ].GetByte (_faab );if _eagc !=nil {return _eagc ;};_eagc =_dagc [_cfcgg ].SetByte (_faab ,_ded .CombineBytes (_bddd ,_bdda ,_ded .CmbOpXor ));
if _eagc !=nil {return _eagc ;};_faab ++;};};return nil ;};type TableSegment struct{_edfe *_ge .Reader ;_fbad int32 ;_eacd int32 ;_babaa int32 ;_ffdd int32 ;_fdbg int32 ;};func (_caea *Header )GetSegmentData ()(Segmenter ,error ){var _afgg Segmenter ;if _caea .SegmentData !=nil {_afgg =_caea .SegmentData ;
};if _afgg ==nil {_aega ,_ggbc :=_dcfa [_caea .Type ];if !_ggbc {return nil ,_de .Errorf ("\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0073\u002f\u0020\u0025\u0064\u0020\u0063\u0072e\u0061t\u006f\u0072\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064\u002e\u0020",_caea .Type ,_caea .Type );
};_afgg =_aega ();_fg .Log .Trace ("\u005b\u0053E\u0047\u004d\u0045\u004e\u0054-\u0048\u0045\u0041\u0044\u0045R\u005d\u005b\u0023\u0025\u0064\u005d\u0020\u0047\u0065\u0074\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u0044\u0061\u0074\u0061\u0020\u0061\u0074\u0020\u004f\u0066\u0066\u0073\u0065\u0074\u003a\u0020\u0025\u0030\u0034\u0058",_caea .SegmentNumber ,_caea .SegmentDataStartOffset );
_eegee ,_ddcd :=_caea .subInputReader ();if _ddcd !=nil {return nil ,_ddcd ;};if _gced :=_afgg .Init (_caea ,_eegee );_gced !=nil {_fg .Log .Debug ("\u0049\u006e\u0069\u0074 \u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076 \u0066o\u0072\u0020\u0074\u0079\u0070\u0065\u003a \u0025\u0054",_gced ,_afgg );
return nil ,_gced ;};_caea .SegmentData =_afgg ;};return _afgg ,nil ;};func NewHeader (d Documenter ,r *_ge .Reader ,offset int64 ,organizationType OrganizationType )(*Header ,error ){_bag :=&Header {Reader :r };if _ebda :=_bag .parse (d ,r ,offset ,organizationType );
_ebda !=nil {return nil ,_geb .Wrap (_ebda ,"\u004ee\u0077\u0048\u0065\u0061\u0064\u0065r","");};return _bag ,nil ;};func (_cgeb *SymbolDictionary )decodeHeightClassCollectiveBitmap (_acb int64 ,_cagc ,_gffg uint32 )(*_ded .Bitmap ,error ){if _acb ==0{_cbga :=_ded .New (int (_gffg ),int (_cagc ));
var (_dbdc byte ;_gbcgb error ;);for _ffgb :=0;_ffgb < len (_cbga .Data );_ffgb ++{_dbdc ,_gbcgb =_cgeb ._bdcd .ReadByte ();if _gbcgb !=nil {return nil ,_gbcgb ;};if _gbcgb =_cbga .SetByte (_ffgb ,_dbdc );_gbcgb !=nil {return nil ,_gbcgb ;};};return _cbga ,nil ;
};if _cgeb ._cgeag ==nil {_cgeb ._cgeag =NewGenericRegion (_cgeb ._bdcd );};_cgeb ._cgeag .setParameters (true ,_cgeb ._bdcd .AbsolutePosition (),_acb ,_cagc ,_gffg );_aaef ,_gcaba :=_cgeb ._cgeag .GetRegionBitmap ();if _gcaba !=nil {return nil ,_gcaba ;
};return _aaef ,nil ;};type Type int ;func (_deec *TableSegment )Init (h *Header ,r *_ge .Reader )error {_deec ._edfe =r ;return _deec .parseHeader ();};func (_gcf *Header )CleanSegmentData (){if _gcf .SegmentData !=nil {_gcf .SegmentData =nil ;};};func (_afae *PageInformationSegment )readRequiresAuxiliaryBuffer ()error {_fbag ,_bcd :=_afae ._fgebf .ReadBit ();
if _bcd !=nil {return _bcd ;};if _fbag ==1{_afae ._feag =true ;};return nil ;};func (_gccef *TextRegion )GetRegionBitmap ()(*_ded .Bitmap ,error ){if _gccef .RegionBitmap !=nil {return _gccef .RegionBitmap ,nil ;};if !_gccef .IsHuffmanEncoded {if _dfcf :=_gccef .setCodingStatistics ();
_dfcf !=nil {return nil ,_dfcf ;};};if _dgebe :=_gccef .createRegionBitmap ();_dgebe !=nil {return nil ,_dgebe ;};if _fadg :=_gccef .decodeSymbolInstances ();_fadg !=nil {return nil ,_fadg ;};return _gccef .RegionBitmap ,nil ;};func (_dcg *GenericRegion )overrideAtTemplate0b (_eafb ,_fagd ,_agf ,_bbd ,_agcc ,_ggb int )int {if _dcg .GBAtOverride [0]{_eafb &=0xFFFD;
if _dcg .GBAtY [0]==0&&_dcg .GBAtX [0]>=-int8 (_agcc ){_eafb |=(_bbd >>uint (int8 (_ggb )-_dcg .GBAtX [0]&0x1))<<1;}else {_eafb |=int (_dcg .getPixel (_fagd +int (_dcg .GBAtX [0]),_agf +int (_dcg .GBAtY [0])))<<1;};};if _dcg .GBAtOverride [1]{_eafb &=0xDFFF;
if _dcg .GBAtY [1]==0&&_dcg .GBAtX [1]>=-int8 (_agcc ){_eafb |=(_bbd >>uint (int8 (_ggb )-_dcg .GBAtX [1]&0x1))<<13;}else {_eafb |=int (_dcg .getPixel (_fagd +int (_dcg .GBAtX [1]),_agf +int (_dcg .GBAtY [1])))<<13;};};if _dcg .GBAtOverride [2]{_eafb &=0xFDFF;
if _dcg .GBAtY [2]==0&&_dcg .GBAtX [2]>=-int8 (_agcc ){_eafb |=(_bbd >>uint (int8 (_ggb )-_dcg .GBAtX [2]&0x1))<<9;}else {_eafb |=int (_dcg .getPixel (_fagd +int (_dcg .GBAtX [2]),_agf +int (_dcg .GBAtY [2])))<<9;};};if _dcg .GBAtOverride [3]{_eafb &=0xBFFF;
if _dcg .GBAtY [3]==0&&_dcg .GBAtX [3]>=-int8 (_agcc ){_eafb |=(_bbd >>uint (int8 (_ggb )-_dcg .GBAtX [3]&0x1))<<14;}else {_eafb |=int (_dcg .getPixel (_fagd +int (_dcg .GBAtX [3]),_agf +int (_dcg .GBAtY [3])))<<14;};};if _dcg .GBAtOverride [4]{_eafb &=0xEFFF;
if _dcg .GBAtY [4]==0&&_dcg .GBAtX [4]>=-int8 (_agcc ){_eafb |=(_bbd >>uint (int8 (_ggb )-_dcg .GBAtX [4]&0x1))<<12;}else {_eafb |=int (_dcg .getPixel (_fagd +int (_dcg .GBAtX [4]),_agf +int (_dcg .GBAtY [4])))<<12;};};if _dcg .GBAtOverride [5]{_eafb &=0xFFDF;
if _dcg .GBAtY [5]==0&&_dcg .GBAtX [5]>=-int8 (_agcc ){_eafb |=(_bbd >>uint (int8 (_ggb )-_dcg .GBAtX [5]&0x1))<<5;}else {_eafb |=int (_dcg .getPixel (_fagd +int (_dcg .GBAtX [5]),_agf +int (_dcg .GBAtY [5])))<<5;};};if _dcg .GBAtOverride [6]{_eafb &=0xFFFB;
if _dcg .GBAtY [6]==0&&_dcg .GBAtX [6]>=-int8 (_agcc ){_eafb |=(_bbd >>uint (int8 (_ggb )-_dcg .GBAtX [6]&0x1))<<2;}else {_eafb |=int (_dcg .getPixel (_fagd +int (_dcg .GBAtX [6]),_agf +int (_dcg .GBAtY [6])))<<2;};};if _dcg .GBAtOverride [7]{_eafb &=0xFFF7;
if _dcg .GBAtY [7]==0&&_dcg .GBAtX [7]>=-int8 (_agcc ){_eafb |=(_bbd >>uint (int8 (_ggb )-_dcg .GBAtX [7]&0x1))<<3;}else {_eafb |=int (_dcg .getPixel (_fagd +int (_dcg .GBAtX [7]),_agf +int (_dcg .GBAtY [7])))<<3;};};if _dcg .GBAtOverride [8]{_eafb &=0xF7FF;
if _dcg .GBAtY [8]==0&&_dcg .GBAtX [8]>=-int8 (_agcc ){_eafb |=(_bbd >>uint (int8 (_ggb )-_dcg .GBAtX [8]&0x1))<<11;}else {_eafb |=int (_dcg .getPixel (_fagd +int (_dcg .GBAtX [8]),_agf +int (_dcg .GBAtY [8])))<<11;};};if _dcg .GBAtOverride [9]{_eafb &=0xFFEF;
if _dcg .GBAtY [9]==0&&_dcg .GBAtX [9]>=-int8 (_agcc ){_eafb |=(_bbd >>uint (int8 (_ggb )-_dcg .GBAtX [9]&0x1))<<4;}else {_eafb |=int (_dcg .getPixel (_fagd +int (_dcg .GBAtX [9]),_agf +int (_dcg .GBAtY [9])))<<4;};};if _dcg .GBAtOverride [10]{_eafb &=0x7FFF;
if _dcg .GBAtY [10]==0&&_dcg .GBAtX [10]>=-int8 (_agcc ){_eafb |=(_bbd >>uint (int8 (_ggb )-_dcg .GBAtX [10]&0x1))<<15;}else {_eafb |=int (_dcg .getPixel (_fagd +int (_dcg .GBAtX [10]),_agf +int (_dcg .GBAtY [10])))<<15;};};if _dcg .GBAtOverride [11]{_eafb &=0xFDFF;
if _dcg .GBAtY [11]==0&&_dcg .GBAtX [11]>=-int8 (_agcc ){_eafb |=(_bbd >>uint (int8 (_ggb )-_dcg .GBAtX [11]&0x1))<<10;}else {_eafb |=int (_dcg .getPixel (_fagd +int (_dcg .GBAtX [11]),_agf +int (_dcg .GBAtY [11])))<<10;};};return _eafb ;};func (_bffa *SymbolDictionary )getUserTable (_fafec int )(_eded .Tabler ,error ){var _ebad int ;
for _ ,_acgfb :=range _bffa .Header .RTSegments {if _acgfb .Type ==53{if _ebad ==_fafec {_cebd ,_fdea :=_acgfb .GetSegmentData ();if _fdea !=nil {return nil ,_fdea ;};_eafbe :=_cebd .(_eded .BasicTabler );return _eded .NewEncodedTable (_eafbe );};_ebad ++;
};};return nil ,nil ;};func (_bfc *HalftoneRegion )computeSegmentDataStructure ()error {_bfc .DataOffset =_bfc ._decab .AbsolutePosition ();_bfc .DataHeaderLength =_bfc .DataOffset -_bfc .DataHeaderOffset ;_bfc .DataLength =int64 (_bfc ._decab .AbsoluteLength ())-_bfc .DataHeaderLength ;
return nil ;};func (_ceede *GenericRegion )getPixel (_acd ,_gad int )int8 {if _acd < 0||_acd >=_ceede .Bitmap .Width {return 0;};if _gad < 0||_gad >=_ceede .Bitmap .Height {return 0;};if _ceede .Bitmap .GetPixel (_acd ,_gad ){return 1;};return 0;};func (_adfg *PatternDictionary )parseHeader ()error {_fg .Log .Trace ("\u005b\u0050\u0041\u0054\u0054\u0045\u0052\u004e\u002d\u0044\u0049\u0043\u0054I\u004f\u004e\u0041\u0052\u0059\u005d[\u0070\u0061\u0072\u0073\u0065\u0048\u0065\u0061\u0064\u0065\u0072\u005d\u0020b\u0065\u0067\u0069\u006e");
defer func (){_fg .Log .Trace ("\u005b\u0050\u0041T\u0054\u0045\u0052\u004e\u002d\u0044\u0049\u0043\u0054\u0049\u004f\u004e\u0041\u0052\u0059\u005d\u005b\u0070\u0061\u0072\u0073\u0065\u0048\u0065\u0061\u0064\u0065\u0072\u005d \u0066\u0069\u006e\u0069\u0073\u0068\u0065\u0064");
}();_ ,_dagf :=_adfg ._bfac .ReadBits (5);if _dagf !=nil {return _dagf ;};if _dagf =_adfg .readTemplate ();_dagf !=nil {return _dagf ;};if _dagf =_adfg .readIsMMREncoded ();_dagf !=nil {return _dagf ;};if _dagf =_adfg .readPatternWidthAndHeight ();_dagf !=nil {return _dagf ;
};if _dagf =_adfg .readGrayMax ();_dagf !=nil {return _dagf ;};if _dagf =_adfg .computeSegmentDataStructure ();_dagf !=nil {return _dagf ;};return _adfg .checkInput ();};func (_cbba *Header )readSegmentDataLength (_badd *_ge .Reader )(_bdfa error ){_cbba .SegmentDataLength ,_bdfa =_badd .ReadBits (32);
if _bdfa !=nil {return _bdfa ;};_cbba .SegmentDataLength &=_g .MaxInt32 ;return nil ;};func (_gabb *SymbolDictionary )readNumberOfNewSymbols ()error {_aecg ,_eabd :=_gabb ._bdcd .ReadBits (32);if _eabd !=nil {return _eabd ;};_gabb .NumberOfNewSymbols =uint32 (_aecg &_g .MaxUint32 );
return nil ;};func (_affc *TextRegion )decodeRI ()(int64 ,error ){if !_affc .UseRefinement {return 0,nil ;};if _affc .IsHuffmanEncoded {_gcdge ,_fdeg :=_affc ._ebac .ReadBit ();return int64 (_gcdge ),_fdeg ;};_daaa ,_deaa :=_affc ._cacbc .DecodeInt (_affc ._fecc );
return int64 (_daaa ),_deaa ;};func (_caeef *TextRegion )getSymbols ()error {if _caeef .Header .RTSegments !=nil {return _caeef .initSymbols ();};return nil ;};func (_eedbc *SymbolDictionary )setRefinementAtPixels ()error {if !_eedbc .UseRefinementAggregation ||_eedbc .SdrTemplate !=0{return nil ;
};if _abgf :=_eedbc .readRefinementAtPixels (2);_abgf !=nil {return _abgf ;};return nil ;};func (_ebe *GenericRegion )decodeTemplate0b (_bbeg ,_fedc ,_ffb int ,_cea ,_eacf int )(_feee error ){const _dfe ="\u0064\u0065c\u006f\u0064\u0065T\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0030\u0062";
var (_acg ,_fea int ;_gfb ,_afdf int ;_dab byte ;_gdd int ;);if _bbeg >=1{_dab ,_feee =_ebe .Bitmap .GetByte (_eacf );if _feee !=nil {return _geb .Wrap (_feee ,_dfe ,"\u006ci\u006e\u0065\u0020\u003e\u003d\u00201");};_gfb =int (_dab );};if _bbeg >=2{_dab ,_feee =_ebe .Bitmap .GetByte (_eacf -_ebe .Bitmap .RowStride );
if _feee !=nil {return _geb .Wrap (_feee ,_dfe ,"\u006ci\u006e\u0065\u0020\u003e\u003d\u00202");};_afdf =int (_dab )<<6;};_acg =(_gfb &0xf0)|(_afdf &0x3800);for _gbd :=0;_gbd < _ffb ;_gbd =_gdd {var (_cffg byte ;_cbab int ;);_gdd =_gbd +8;if _fedb :=_fedc -_gbd ;
_fedb > 8{_cbab =8;}else {_cbab =_fedb ;};if _bbeg > 0{_gfb <<=8;if _gdd < _fedc {_dab ,_feee =_ebe .Bitmap .GetByte (_eacf +1);if _feee !=nil {return _geb .Wrap (_feee ,_dfe ,"\u006c\u0069\u006e\u0065\u0020\u003e\u0020\u0030");};_gfb |=int (_dab );};};
if _bbeg > 1{_afdf <<=8;if _gdd < _fedc {_dab ,_feee =_ebe .Bitmap .GetByte (_eacf -_ebe .Bitmap .RowStride +1);if _feee !=nil {return _geb .Wrap (_feee ,_dfe ,"\u006c\u0069\u006e\u0065\u0020\u003e\u0020\u0031");};_afdf |=int (_dab )<<6;};};for _acc :=0;
_acc < _cbab ;_acc ++{_dca :=uint (7-_acc );if _ebe ._cac {_fea =_ebe .overrideAtTemplate0b (_acg ,_gbd +_acc ,_bbeg ,int (_cffg ),_acc ,int (_dca ));_ebe ._fag .SetIndex (int32 (_fea ));}else {_ebe ._fag .SetIndex (int32 (_acg ));};var _bgce int ;_bgce ,_feee =_ebe ._cgcb .DecodeBit (_ebe ._fag );
if _feee !=nil {return _geb .Wrap (_feee ,_dfe ,"");};_cffg |=byte (_bgce <<_dca );_acg =((_acg &0x7bf7)<<1)|_bgce |((_gfb >>_dca )&0x10)|((_afdf >>_dca )&0x800);};if _feda :=_ebe .Bitmap .SetByte (_cea ,_cffg );_feda !=nil {return _geb .Wrap (_feda ,_dfe ,"");
};_cea ++;_eacf ++;};return nil ;};func (_dgacc *TextRegion )encodeSymbols (_acfb _ge .BinaryWriter )(_bebab int ,_ecaf error ){const _ebegg ="\u0065\u006e\u0063\u006f\u0064\u0065\u0053\u0079\u006d\u0062\u006f\u006c\u0073";_affce :=make ([]byte ,4);_b .BigEndian .PutUint32 (_affce ,_dgacc .NumberOfSymbols );
if _bebab ,_ecaf =_acfb .Write (_affce );_ecaf !=nil {return _bebab ,_geb .Wrap (_ecaf ,_ebegg ,"\u004e\u0075\u006dbe\u0072\u004f\u0066\u0053\u0079\u006d\u0062\u006f\u006c\u0049\u006e\u0073\u0074\u0061\u006e\u0063\u0065\u0073");};_dcfg ,_ecaf :=_ded .NewClassedPoints (_dgacc ._feaf ,_dgacc ._cbgg );
if _ecaf !=nil {return 0,_geb .Wrap (_ecaf ,_ebegg ,"");};var _cacbd ,_acffb int ;_bada :=_bc .New ();_bada .Init ();if _ecaf =_bada .EncodeInteger (_bc .IADT ,0);_ecaf !=nil {return _bebab ,_geb .Wrap (_ecaf ,_ebegg ,"\u0069\u006e\u0069\u0074\u0069\u0061\u006c\u0020\u0044\u0054");
};_gdgc ,_ecaf :=_dcfg .GroupByY ();if _ecaf !=nil {return 0,_geb .Wrap (_ecaf ,_ebegg ,"");};for _ ,_eec :=range _gdgc {_ggcg :=int (_eec .YAtIndex (0));_cada :=_ggcg -_cacbd ;if _ecaf =_bada .EncodeInteger (_bc .IADT ,_cada );_ecaf !=nil {return _bebab ,_geb .Wrap (_ecaf ,_ebegg ,"");
};var _ecffb int ;for _fada ,_ceceg :=range _eec .IntSlice {switch _fada {case 0:_bdff :=int (_eec .XAtIndex (_fada ))-_acffb ;if _ecaf =_bada .EncodeInteger (_bc .IAFS ,_bdff );_ecaf !=nil {return _bebab ,_geb .Wrap (_ecaf ,_ebegg ,"");};_acffb +=_bdff ;
_ecffb =_acffb ;default:_egf :=int (_eec .XAtIndex (_fada ))-_ecffb ;if _ecaf =_bada .EncodeInteger (_bc .IADS ,_egf );_ecaf !=nil {return _bebab ,_geb .Wrap (_ecaf ,_ebegg ,"");};_ecffb +=_egf ;};_fede ,_daca :=_dgacc ._ecadf .Get (_ceceg );if _daca !=nil {return _bebab ,_geb .Wrap (_daca ,_ebegg ,"");
};_dfedb ,_bdae :=_dgacc ._gebfaf [_fede ];if !_bdae {_dfedb ,_bdae =_dgacc ._ffgd [_fede ];if !_bdae {return _bebab ,_geb .Errorf (_ebegg ,"\u0053\u0079\u006d\u0062\u006f\u006c:\u0020\u0027\u0025d\u0027\u0020\u0069s\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064 \u0069\u006e\u0020\u0067\u006cob\u0061\u006c\u0020\u0061\u006e\u0064\u0020\u006c\u006f\u0063\u0061\u006c\u0020\u0073\u0079\u006d\u0062\u006f\u006c\u0020\u006d\u0061\u0070",_fede );
};};if _daca =_bada .EncodeIAID (_dgacc ._bdfe ,_dfedb );_daca !=nil {return _bebab ,_geb .Wrap (_daca ,_ebegg ,"");};};if _ecaf =_bada .EncodeOOB (_bc .IADS );_ecaf !=nil {return _bebab ,_geb .Wrap (_ecaf ,_ebegg ,"");};};_bada .Final ();_aaff ,_ecaf :=_bada .WriteTo (_acfb );
if _ecaf !=nil {return _bebab ,_geb .Wrap (_ecaf ,_ebegg ,"");};_bebab +=int (_aaff );return _bebab ,nil ;};func (_eeee *GenericRegion )overrideAtTemplate3 (_fged ,_dde ,_bbab ,_gbb ,_gbgac int )int {_fged &=0x3EF;if _eeee .GBAtY [0]==0&&_eeee .GBAtX [0]>=-int8 (_gbgac ){_fged |=(_gbb >>uint (7-(int8 (_gbgac )+_eeee .GBAtX [0]))&0x1)<<4;
}else {_fged |=int (_eeee .getPixel (_dde +int (_eeee .GBAtX [0]),_bbab +int (_eeee .GBAtY [0])))<<4;};return _fged ;};type Header struct{SegmentNumber uint32 ;Type Type ;RetainFlag bool ;PageAssociation int ;PageAssociationFieldSize bool ;RTSegments []*Header ;
HeaderLength int64 ;SegmentDataLength uint64 ;SegmentDataStartOffset uint64 ;Reader *_ge .Reader ;SegmentData Segmenter ;RTSNumbers []int ;RetainBits []uint8 ;};func (_gggd *RegionSegment )parseHeader ()error {const _bbfb ="p\u0061\u0072\u0073\u0065\u0048\u0065\u0061\u0064\u0065\u0072";
_fg .Log .Trace ("\u005b\u0052\u0045\u0047I\u004f\u004e\u005d\u005b\u0050\u0041\u0052\u0053\u0045\u002dH\u0045A\u0044\u0045\u0052\u005d\u0020\u0042\u0065g\u0069\u006e");defer func (){_fg .Log .Trace ("\u005b\u0052\u0045G\u0049\u004f\u004e\u005d[\u0050\u0041\u0052\u0053\u0045\u002d\u0048E\u0041\u0044\u0045\u0052\u005d\u0020\u0046\u0069\u006e\u0069\u0073\u0068\u0065\u0064");
}();_cceac ,_eef :=_gggd ._dgaed .ReadBits (32);if _eef !=nil {return _geb .Wrap (_eef ,_bbfb ,"\u0077\u0069\u0064t\u0068");};_gggd .BitmapWidth =uint32 (_cceac &_g .MaxUint32 );_cceac ,_eef =_gggd ._dgaed .ReadBits (32);if _eef !=nil {return _geb .Wrap (_eef ,_bbfb ,"\u0068\u0065\u0069\u0067\u0068\u0074");
};_gggd .BitmapHeight =uint32 (_cceac &_g .MaxUint32 );_cceac ,_eef =_gggd ._dgaed .ReadBits (32);if _eef !=nil {return _geb .Wrap (_eef ,_bbfb ,"\u0078\u0020\u006c\u006f\u0063\u0061\u0074\u0069\u006f\u006e");};_gggd .XLocation =uint32 (_cceac &_g .MaxUint32 );
_cceac ,_eef =_gggd ._dgaed .ReadBits (32);if _eef !=nil {return _geb .Wrap (_eef ,_bbfb ,"\u0079\u0020\u006c\u006f\u0063\u0061\u0074\u0069\u006f\u006e");};_gggd .YLocation =uint32 (_cceac &_g .MaxUint32 );if _ ,_eef =_gggd ._dgaed .ReadBits (5);_eef !=nil {return _geb .Wrap (_eef ,_bbfb ,"\u0064i\u0072\u0079\u0020\u0072\u0065\u0061d");
};if _eef =_gggd .readCombinationOperator ();_eef !=nil {return _geb .Wrap (_eef ,_bbfb ,"c\u006fm\u0062\u0069\u006e\u0061\u0074\u0069\u006f\u006e \u006f\u0070\u0065\u0072at\u006f\u0072");};return nil ;};func (_aad *GenericRegion )decodeTemplate1 (_efg ,_dcf ,_fbcc int ,_ceeg ,_ddbd int )(_afdc error ){const _bef ="\u0064e\u0063o\u0064\u0065\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0031";
var (_dfb ,_bea int ;_cdgg ,_aagb int ;_aagf byte ;_abdf ,_gag int ;);if _efg >=1{_aagf ,_afdc =_aad .Bitmap .GetByte (_ddbd );if _afdc !=nil {return _geb .Wrap (_afdc ,_bef ,"\u006ci\u006e\u0065\u0020\u003e\u003d\u00201");};_cdgg =int (_aagf );};if _efg >=2{_aagf ,_afdc =_aad .Bitmap .GetByte (_ddbd -_aad .Bitmap .RowStride );
if _afdc !=nil {return _geb .Wrap (_afdc ,_bef ,"\u006ci\u006e\u0065\u0020\u003e\u003d\u00202");};_aagb =int (_aagf )<<5;};_dfb =((_cdgg >>1)&0x1f8)|((_aagb >>1)&0x1e00);for _gegd :=0;_gegd < _fbcc ;_gegd =_abdf {var (_ecd byte ;_abfc int ;);_abdf =_gegd +8;
if _aec :=_dcf -_gegd ;_aec > 8{_abfc =8;}else {_abfc =_aec ;};if _efg > 0{_cdgg <<=8;if _abdf < _dcf {_aagf ,_afdc =_aad .Bitmap .GetByte (_ddbd +1);if _afdc !=nil {return _geb .Wrap (_afdc ,_bef ,"\u006c\u0069\u006e\u0065\u0020\u003e\u0020\u0030");};
_cdgg |=int (_aagf );};};if _efg > 1{_aagb <<=8;if _abdf < _dcf {_aagf ,_afdc =_aad .Bitmap .GetByte (_ddbd -_aad .Bitmap .RowStride +1);if _afdc !=nil {return _geb .Wrap (_afdc ,_bef ,"\u006c\u0069\u006e\u0065\u0020\u003e\u0020\u0031");};_aagb |=int (_aagf )<<5;
};};for _cgae :=0;_cgae < _abfc ;_cgae ++{if _aad ._cac {_bea =_aad .overrideAtTemplate1 (_dfb ,_gegd +_cgae ,_efg ,int (_ecd ),_cgae );_aad ._fag .SetIndex (int32 (_bea ));}else {_aad ._fag .SetIndex (int32 (_dfb ));};_gag ,_afdc =_aad ._cgcb .DecodeBit (_aad ._fag );
if _afdc !=nil {return _geb .Wrap (_afdc ,_bef ,"");};_ecd |=byte (_gag )<<uint (7-_cgae );_eegc :=uint (8-_cgae );_dfb =((_dfb &0xefb)<<1)|_gag |((_cdgg >>_eegc )&0x8)|((_aagb >>_eegc )&0x200);};if _bfg :=_aad .Bitmap .SetByte (_ceeg ,_ecd );_bfg !=nil {return _geb .Wrap (_bfg ,_bef ,"");
};_ceeg ++;_ddbd ++;};return nil ;};func (_fadgf *TextRegion )setParameters (_dgef *_ede .Decoder ,_cgbd ,_ecca bool ,_gfga ,_abcfb uint32 ,_faafb uint32 ,_feac int8 ,_gafac uint32 ,_fgcb int8 ,_cfgga _ded .CombinationOperator ,_edba int8 ,_abaae int16 ,_cgg ,_caac ,_dgfd ,_gdga ,_fbdb ,_gabac ,_eeea ,_bdac ,_ebfb ,_geff int8 ,_cede ,_cafc []int8 ,_bafad []*_ded .Bitmap ,_baec int8 ){_fadgf ._cacbc =_dgef ;
_fadgf .IsHuffmanEncoded =_cgbd ;_fadgf .UseRefinement =_ecca ;_fadgf .RegionInfo .BitmapWidth =_gfga ;_fadgf .RegionInfo .BitmapHeight =_abcfb ;_fadgf .NumberOfSymbolInstances =_faafb ;_fadgf .SbStrips =_feac ;_fadgf .NumberOfSymbols =_gafac ;_fadgf .DefaultPixel =_fgcb ;
_fadgf .CombinationOperator =_cfgga ;_fadgf .IsTransposed =_edba ;_fadgf .ReferenceCorner =_abaae ;_fadgf .SbDsOffset =_cgg ;_fadgf .SbHuffFS =_caac ;_fadgf .SbHuffDS =_dgfd ;_fadgf .SbHuffDT =_gdga ;_fadgf .SbHuffRDWidth =_fbdb ;_fadgf .SbHuffRDHeight =_gabac ;
_fadgf .SbHuffRSize =_ebfb ;_fadgf .SbHuffRDX =_eeea ;_fadgf .SbHuffRDY =_bdac ;_fadgf .SbrTemplate =_geff ;_fadgf .SbrATX =_cede ;_fadgf .SbrATY =_cafc ;_fadgf .Symbols =_bafad ;_fadgf ._acacc =_baec ;};func (_bfdf *TextRegion )readHuffmanFlags ()error {var (_ccdf int ;
_bbegd uint64 ;_fcfe error ;);_ ,_fcfe =_bfdf ._ebac .ReadBit ();if _fcfe !=nil {return _fcfe ;};_ccdf ,_fcfe =_bfdf ._ebac .ReadBit ();if _fcfe !=nil {return _fcfe ;};_bfdf .SbHuffRSize =int8 (_ccdf );_bbegd ,_fcfe =_bfdf ._ebac .ReadBits (2);if _fcfe !=nil {return _fcfe ;
};_bfdf .SbHuffRDY =int8 (_bbegd )&0xf;_bbegd ,_fcfe =_bfdf ._ebac .ReadBits (2);if _fcfe !=nil {return _fcfe ;};_bfdf .SbHuffRDX =int8 (_bbegd )&0xf;_bbegd ,_fcfe =_bfdf ._ebac .ReadBits (2);if _fcfe !=nil {return _fcfe ;};_bfdf .SbHuffRDHeight =int8 (_bbegd )&0xf;
_bbegd ,_fcfe =_bfdf ._ebac .ReadBits (2);if _fcfe !=nil {return _fcfe ;};_bfdf .SbHuffRDWidth =int8 (_bbegd )&0xf;_bbegd ,_fcfe =_bfdf ._ebac .ReadBits (2);if _fcfe !=nil {return _fcfe ;};_bfdf .SbHuffDT =int8 (_bbegd )&0xf;_bbegd ,_fcfe =_bfdf ._ebac .ReadBits (2);
if _fcfe !=nil {return _fcfe ;};_bfdf .SbHuffDS =int8 (_bbegd )&0xf;_bbegd ,_fcfe =_bfdf ._ebac .ReadBits (2);if _fcfe !=nil {return _fcfe ;};_bfdf .SbHuffFS =int8 (_bbegd )&0xf;return nil ;};func (_cgcbe *SymbolDictionary )decodeRefinedSymbol (_ecac ,_gfaa uint32 )error {var (_bed int ;
_fcac ,_affa int32 ;);if _cgcbe .IsHuffmanEncoded {_dfedc ,_cebf :=_cgcbe ._bdcd .ReadBits (byte (_cgcbe ._fdedc ));if _cebf !=nil {return _cebf ;};_bed =int (_dfedc );_cbgbg ,_cebf :=_eded .GetStandardTable (15);if _cebf !=nil {return _cebf ;};_dgec ,_cebf :=_cbgbg .Decode (_cgcbe ._bdcd );
if _cebf !=nil {return _cebf ;};_fcac =int32 (_dgec );_dgec ,_cebf =_cbgbg .Decode (_cgcbe ._bdcd );if _cebf !=nil {return _cebf ;};_affa =int32 (_dgec );_cbgbg ,_cebf =_eded .GetStandardTable (1);if _cebf !=nil {return _cebf ;};if _ ,_cebf =_cbgbg .Decode (_cgcbe ._bdcd );
_cebf !=nil {return _cebf ;};_cgcbe ._bdcd .Align ();}else {_ccag ,_agegb :=_cgcbe ._cbgea .DecodeIAID (uint64 (_cgcbe ._fdedc ),_cgcbe ._bddc );if _agegb !=nil {return _agegb ;};_bed =int (_ccag );_fcac ,_agegb =_cgcbe ._cbgea .DecodeInt (_cgcbe ._eddc );
if _agegb !=nil {return _agegb ;};_affa ,_agegb =_cgcbe ._cbgea .DecodeInt (_cgcbe ._fgef );if _agegb !=nil {return _agegb ;};};if _fdcb :=_cgcbe .setSymbolsArray ();_fdcb !=nil {return _fdcb ;};_gadc :=_cgcbe ._gcab [_bed ];if _gdaf :=_cgcbe .decodeNewSymbols (_ecac ,_gfaa ,_gadc ,_fcac ,_affa );
_gdaf !=nil {return _gdaf ;};if _cgcbe .IsHuffmanEncoded {_cgcbe ._bdcd .Align ();};return nil ;};var _ SegmentEncoder =&GenericRegion {};func (_aaa *GenericRefinementRegion )getGrReference ()(*_ded .Bitmap ,error ){segments :=_aaa ._fb .RTSegments ;if len (segments )==0{return nil ,_e .New ("\u0052\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0064\u0020\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u0020\u006e\u006f\u0074\u0020\u0065\u0078is\u0074\u0073");
};_fbc ,_eg :=segments [0].GetSegmentData ();if _eg !=nil {return nil ,_eg ;};_eag ,_ff :=_fbc .(Regioner );if !_ff {return nil ,_de .Errorf ("\u0072\u0065\u0066\u0065\u0072r\u0065\u0064\u0020\u0074\u006f\u0020\u0053\u0065\u0067\u006d\u0065\u006e\u0074 \u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0052\u0065\u0067\u0069\u006f\u006e\u0065\u0072\u003a\u0020\u0025\u0054",_fbc );
};return _eag .GetRegionBitmap ();};type Documenter interface{GetPage (int )(Pager ,error );GetGlobalSegment (int )(*Header ,error );};func (_aebb *SymbolDictionary )setCodingStatistics ()error {if _aebb ._bbdc ==nil {_aebb ._bbdc =_ede .NewStats (512,1);
};if _aebb ._agef ==nil {_aebb ._agef =_ede .NewStats (512,1);};if _aebb ._fbbe ==nil {_aebb ._fbbe =_ede .NewStats (512,1);};if _aebb ._abce ==nil {_aebb ._abce =_ede .NewStats (512,1);};if _aebb ._cfcbc ==nil {_aebb ._cfcbc =_ede .NewStats (512,1);};
if _aebb .UseRefinementAggregation &&_aebb ._bddc ==nil {_aebb ._bddc =_ede .NewStats (1<<uint (_aebb ._fdedc ),1);_aebb ._eddc =_ede .NewStats (512,1);_aebb ._fgef =_ede .NewStats (512,1);};if _aebb ._bfad ==nil {_aebb ._bfad =_ede .NewStats (65536,1);
};if _aebb ._cbgea ==nil {var _gffb error ;_aebb ._cbgea ,_gffb =_ede .New (_aebb ._bdcd );if _gffb !=nil {return _gffb ;};};return nil ;};func (_cbfe *SymbolDictionary )retrieveImportSymbols ()error {for _ ,_aegae :=range _cbfe .Header .RTSegments {if _aegae .Type ==0{_cgad ,_gcce :=_aegae .GetSegmentData ();
if _gcce !=nil {return _gcce ;};_gbca ,_bbde :=_cgad .(*SymbolDictionary );if !_bbde {return _de .Errorf ("\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u0020\u0044\u0061\u0074a\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0053\u0079\u006d\u0062\u006f\u006c\u0044\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u0053\u0065\u0067m\u0065\u006e\u0074\u003a\u0020%\u0054",_cgad );
};_edgg ,_gcce :=_gbca .GetDictionary ();if _gcce !=nil {return _de .Errorf ("\u0072\u0065\u006c\u0061\u0074\u0065\u0064 \u0073\u0065\u0067m\u0065\u006e\u0074 \u0077\u0069t\u0068\u0020\u0069\u006e\u0064\u0065x\u003a %\u0064\u0020\u0067\u0065\u0074\u0044\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u002e\u0020\u0025\u0073",_aegae .SegmentNumber ,_gcce .Error ());
};_cbfe ._egc =append (_cbfe ._egc ,_edgg ...);_cbfe ._ccdc +=_gbca .NumberOfExportedSymbols ;};};return nil ;};func (_fddc *HalftoneRegion )grayScaleDecoding (_age int )([][]int ,error ){var (_efdda []int8 ;_decc []int8 ;);if !_fddc .IsMMREncoded {_efdda =make ([]int8 ,4);
_decc =make ([]int8 ,4);if _fddc .HTemplate <=1{_efdda [0]=3;}else if _fddc .HTemplate >=2{_efdda [0]=2;};_decc [0]=-1;_efdda [1]=-3;_decc [1]=-1;_efdda [2]=2;_decc [2]=-2;_efdda [3]=-2;_decc [3]=-2;};_dcb :=make ([]*_ded .Bitmap ,_age );_defaf :=NewGenericRegion (_fddc ._decab );
_defaf .setParametersMMR (_fddc .IsMMREncoded ,_fddc .DataOffset ,_fddc .DataLength ,_fddc .HGridHeight ,_fddc .HGridWidth ,_fddc .HTemplate ,false ,_fddc .HSkipEnabled ,_efdda ,_decc );_gaaa :=_age -1;var _aceb error ;_dcb [_gaaa ],_aceb =_defaf .GetRegionBitmap ();
if _aceb !=nil {return nil ,_aceb ;};for _gaaa > 0{_gaaa --;_defaf .Bitmap =nil ;_dcb [_gaaa ],_aceb =_defaf .GetRegionBitmap ();if _aceb !=nil {return nil ,_aceb ;};if _aceb =_fddc .combineGrayscalePlanes (_dcb ,_gaaa );_aceb !=nil {return nil ,_aceb ;
};};return _fddc .computeGrayScalePlanes (_dcb ,_age );};func (_egb *PageInformationSegment )readCombinationOperatorOverrideAllowed ()error {_bgba ,_bfd :=_egb ._fgebf .ReadBit ();if _bfd !=nil {return _bfd ;};if _bgba ==1{_egb ._bgcdb =true ;};return nil ;
};