//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package bitmap ;import (_f "encoding/binary";_af "github.com/stretchr/testify/require";_g "github.com/unidoc/unipdf/v3/common";_e "github.com/unidoc/unipdf/v3/internal/bitwise";_cg "github.com/unidoc/unipdf/v3/internal/imageutil";_bb "github.com/unidoc/unipdf/v3/internal/jbig2/basic";
_a "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_bf "image";_ec "math";_b "sort";_ad "strings";_ac "testing";);func (_agaa *Bitmap )RasterOperation (dx ,dy ,dw ,dh int ,op RasterOperator ,src *Bitmap ,sx ,sy int )error {return _fabc (_agaa ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );
};func (_dfgg *Bitmap )AddBorder (borderSize ,val int )(*Bitmap ,error ){if borderSize ==0{return _dfgg .Copy (),nil ;};_bgf ,_gbg :=_dfgg .addBorderGeneral (borderSize ,borderSize ,borderSize ,borderSize ,val );if _gbg !=nil {return nil ,_a .Wrap (_gbg ,"\u0041d\u0064\u0042\u006f\u0072\u0064\u0065r","");
};return _bgf ,nil ;};func (_adfdb Points )XSorter ()func (_fcbb ,_beda int )bool {return func (_beff ,_bdace int )bool {return _adfdb [_beff ].X < _adfdb [_bdace ].X };};func (_gec *Bitmap )setEightBytes (_ceda int ,_daa uint64 )error {_bdfa :=_gec .RowStride -(_ceda %_gec .RowStride );
if _gec .RowStride !=_gec .Width >>3{_bdfa --;};if _bdfa >=8{return _gec .setEightFullBytes (_ceda ,_daa );};return _gec .setEightPartlyBytes (_ceda ,_bdfa ,_daa );};func TstFrameBitmap ()*Bitmap {return _aeeg .Copy ()};func _ecgf (_aaac ,_afce *Bitmap ,_ddee ,_fedfb int )(_edad error ){const _bdce ="\u0073e\u0065d\u0066\u0069\u006c\u006c\u0042i\u006e\u0061r\u0079\u004c\u006f\u0077\u0038";
var (_cebd ,_dcbc ,_gfda ,_gedb int ;_aaeg ,_dbbcd ,_ffgg ,_ggd ,_ddad ,_fgff ,_dgbbf ,_aeb byte ;);for _cebd =0;_cebd < _ddee ;_cebd ++{_gfda =_cebd *_aaac .RowStride ;_gedb =_cebd *_afce .RowStride ;for _dcbc =0;_dcbc < _fedfb ;_dcbc ++{if _aaeg ,_edad =_aaac .GetByte (_gfda +_dcbc );
_edad !=nil {return _a .Wrap (_edad ,_bdce ,"\u0067e\u0074 \u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");};if _dbbcd ,_edad =_afce .GetByte (_gedb +_dcbc );_edad !=nil {return _a .Wrap (_edad ,_bdce ,"\u0067\u0065\u0074\u0020\u006d\u0061\u0073\u006b\u0020\u0062\u0079\u0074\u0065");
};if _cebd > 0{if _ffgg ,_edad =_aaac .GetByte (_gfda -_aaac .RowStride +_dcbc );_edad !=nil {return _a .Wrap (_edad ,_bdce ,"\u0069\u0020\u003e\u0020\u0030\u0020\u0062\u0079\u0074\u0065");};_aaeg |=_ffgg |(_ffgg <<1)|(_ffgg >>1);if _dcbc > 0{if _aeb ,_edad =_aaac .GetByte (_gfda -_aaac .RowStride +_dcbc -1);
_edad !=nil {return _a .Wrap (_edad ,_bdce ,"\u0069\u0020\u003e\u00200 \u0026\u0026\u0020\u006a\u0020\u003e\u0020\u0030\u0020\u0062\u0079\u0074\u0065");};_aaeg |=_aeb <<7;};if _dcbc < _fedfb -1{if _aeb ,_edad =_aaac .GetByte (_gfda -_aaac .RowStride +_dcbc +1);
_edad !=nil {return _a .Wrap (_edad ,_bdce ,"\u006a\u0020<\u0020\u0077\u0070l\u0020\u002d\u0020\u0031\u0020\u0062\u0079\u0074\u0065");};_aaeg |=_aeb >>7;};};if _dcbc > 0{if _ggd ,_edad =_aaac .GetByte (_gfda +_dcbc -1);_edad !=nil {return _a .Wrap (_edad ,_bdce ,"\u006a\u0020\u003e \u0030");
};_aaeg |=_ggd <<7;};_aaeg &=_dbbcd ;if _aaeg ==0||^_aaeg ==0{if _edad =_aaac .SetByte (_gfda +_dcbc ,_aaeg );_edad !=nil {return _a .Wrap (_edad ,_bdce ,"\u0073e\u0074t\u0069\u006e\u0067\u0020\u0065m\u0070\u0074y\u0020\u0062\u0079\u0074\u0065");};};for {_dgbbf =_aaeg ;
_aaeg =(_aaeg |(_aaeg >>1)|(_aaeg <<1))&_dbbcd ;if (_aaeg ^_dgbbf )==0{if _edad =_aaac .SetByte (_gfda +_dcbc ,_aaeg );_edad !=nil {return _a .Wrap (_edad ,_bdce ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0070\u0072\u0065\u0076 \u0062\u0079\u0074\u0065");
};break ;};};};};for _cebd =_ddee -1;_cebd >=0;_cebd --{_gfda =_cebd *_aaac .RowStride ;_gedb =_cebd *_afce .RowStride ;for _dcbc =_fedfb -1;_dcbc >=0;_dcbc --{if _aaeg ,_edad =_aaac .GetByte (_gfda +_dcbc );_edad !=nil {return _a .Wrap (_edad ,_bdce ,"\u0072\u0065\u0076er\u0073\u0065\u0020\u0067\u0065\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");
};if _dbbcd ,_edad =_afce .GetByte (_gedb +_dcbc );_edad !=nil {return _a .Wrap (_edad ,_bdce ,"r\u0065\u0076\u0065\u0072se\u0020g\u0065\u0074\u0020\u006d\u0061s\u006b\u0020\u0062\u0079\u0074\u0065");};if _cebd < _ddee -1{if _ddad ,_edad =_aaac .GetByte (_gfda +_aaac .RowStride +_dcbc );
_edad !=nil {return _a .Wrap (_edad ,_bdce ,"\u0069\u0020\u003c\u0020h\u0020\u002d\u0020\u0031\u0020\u002d\u003e\u0020\u0067\u0065t\u0020s\u006f\u0075\u0072\u0063\u0065\u0020\u0062y\u0074\u0065");};_aaeg |=_ddad |(_ddad <<1)|_ddad >>1;if _dcbc > 0{if _aeb ,_edad =_aaac .GetByte (_gfda +_aaac .RowStride +_dcbc -1);
_edad !=nil {return _a .Wrap (_edad ,_bdce ,"\u0069\u0020\u003c h\u002d\u0031\u0020\u0026\u0020\u006a\u0020\u003e\u00200\u0020-\u003e \u0067e\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");};_aaeg |=_aeb <<7;};if _dcbc < _fedfb -1{if _aeb ,_edad =_aaac .GetByte (_gfda +_aaac .RowStride +_dcbc +1);
_edad !=nil {return _a .Wrap (_edad ,_bdce ,"\u0069\u0020\u003c\u0020\u0068\u002d\u0031\u0020\u0026\u0026\u0020\u006a\u0020\u003c\u0077\u0070\u006c\u002d\u0031\u0020\u002d\u003e\u0020\u0067e\u0074\u0020\u0073\u006f\u0075r\u0063\u0065 \u0062\u0079\u0074\u0065");
};_aaeg |=_aeb >>7;};};if _dcbc < _fedfb -1{if _fgff ,_edad =_aaac .GetByte (_gfda +_dcbc +1);_edad !=nil {return _a .Wrap (_edad ,_bdce ,"\u006a\u0020<\u0020\u0077\u0070\u006c\u0020\u002d\u0031\u0020\u002d\u003e\u0020\u0067\u0065\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020by\u0074\u0065");
};_aaeg |=_fgff >>7;};_aaeg &=_dbbcd ;if _aaeg ==0||(^_aaeg )==0{if _edad =_aaac .SetByte (_gfda +_dcbc ,_aaeg );_edad !=nil {return _a .Wrap (_edad ,_bdce ,"\u0073e\u0074 \u006d\u0061\u0073\u006b\u0065\u0064\u0020\u0062\u0079\u0074\u0065");};};for {_dgbbf =_aaeg ;
_aaeg =(_aaeg |(_aaeg >>1)|(_aaeg <<1))&_dbbcd ;if (_aaeg ^_dgbbf )==0{if _edad =_aaac .SetByte (_gfda +_dcbc ,_aaeg );_edad !=nil {return _a .Wrap (_edad ,_bdce ,"r\u0065\u0076\u0065\u0072se\u0020s\u0065\u0074\u0020\u0070\u0072e\u0076\u0020\u0062\u0079\u0074\u0065");
};break ;};};};};return nil ;};func (_gfabe *Bitmap )clipRectangle (_dcda ,_bdg *_bf .Rectangle )(_geae *Bitmap ,_gaee error ){const _ddfc ="\u0063\u006c\u0069\u0070\u0052\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065";if _dcda ==nil {return nil ,_a .Error (_ddfc ,"\u0070r\u006fv\u0069\u0064\u0065\u0064\u0020n\u0069\u006c \u0027\u0062\u006f\u0078\u0027");
};_faac ,_gaeb :=_gfabe .Width ,_gfabe .Height ;_bgb ,_gaee :=ClipBoxToRectangle (_dcda ,_faac ,_gaeb );if _gaee !=nil {_g .Log .Warning ("\u0027\u0062ox\u0027\u0020\u0064o\u0065\u0073\u006e\u0027t o\u0076er\u006c\u0061\u0070\u0020\u0062\u0069\u0074ma\u0070\u0020\u0027\u0062\u0027\u003a\u0020%\u0076",_gaee );
return nil ,nil ;};_dfgbg ,_dfc :=_bgb .Min .X ,_bgb .Min .Y ;_fca ,_afde :=_bgb .Max .X -_bgb .Min .X ,_bgb .Max .Y -_bgb .Min .Y ;_geae =New (_fca ,_afde );_geae .Text =_gfabe .Text ;if _gaee =_geae .RasterOperation (0,0,_fca ,_afde ,PixSrc ,_gfabe ,_dfgbg ,_dfc );
_gaee !=nil {return nil ,_a .Wrap (_gaee ,_ddfc ,"");};if _bdg !=nil {*_bdg =*_bgb ;};return _geae ,nil ;};type Bitmap struct{Width ,Height int ;BitmapNumber int ;RowStride int ;Data []byte ;Color Color ;Special int ;Text string ;XResolution ,YResolution int ;
};type byHeight Bitmaps ;var _caae =[]byte {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3E,0x78,0x27,0xC2,0x27,0x91,0x00,0x22,0x48,0x21,0x03,0x24,0x91,0x00,0x22,0x48,0x21,0x02,0xA4,0x95,0x00,0x22,0x48,0x21,0x02,0x64,0x9B,0x00,0x3C,0x78,0x21,0x02,0x27,0x91,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x15,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
func (_fabb *Bitmap )inverseData (){if _edga :=_fabb .RasterOperation (0,0,_fabb .Width ,_fabb .Height ,PixNotDst ,nil ,0,0);_edga !=nil {_g .Log .Debug ("\u0049n\u0076\u0065\u0072\u0073e\u0020\u0064\u0061\u0074\u0061 \u0066a\u0069l\u0065\u0064\u003a\u0020\u0027\u0025\u0076'",_edga );
};if _fabb .Color ==Chocolate {_fabb .Color =Vanilla ;}else {_fabb .Color =Chocolate ;};};func (_faf *Bitmap )String ()string {var _dbc ="\u000a";for _ega :=0;_ega < _faf .Height ;_ega ++{var _abbb string ;for _aded :=0;_aded < _faf .Width ;_aded ++{_eecb :=_faf .GetPixel (_aded ,_ega );
if _eecb {_abbb +="\u0031";}else {_abbb +="\u0030";};};_dbc +=_abbb +"\u000a";};return _dbc ;};func (_cbdb *BitmapsArray )GetBitmaps (i int )(*Bitmaps ,error ){const _cbea ="\u0042\u0069\u0074ma\u0070\u0073\u0041\u0072\u0072\u0061\u0079\u002e\u0047\u0065\u0074\u0042\u0069\u0074\u006d\u0061\u0070\u0073";
if _cbdb ==nil {return nil ,_a .Error (_cbea ,"p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074m\u0061\u0070\u0073A\u0072r\u0061\u0079\u0027");};if i > len (_cbdb .Values )-1{return nil ,_a .Errorf (_cbea ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _cbdb .Values [i ],nil ;};func (_aeea *Bitmaps )GetBox (i int )(*_bf .Rectangle ,error ){const _badbb ="\u0047\u0065\u0074\u0042\u006f\u0078";if _aeea ==nil {return nil ,_a .Error (_badbb ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074\u006d\u0061\u0070s\u0027");
};if i > len (_aeea .Boxes )-1{return nil ,_a .Errorf (_badbb ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _aeea .Boxes [i ],nil ;};func (_abfa *Bitmaps )SelectByIndexes (idx []int )(*Bitmaps ,error ){const _faaa ="B\u0069\u0074\u006d\u0061\u0070\u0073.\u0053\u006f\u0072\u0074\u0049\u006e\u0064\u0065\u0078e\u0073\u0042\u0079H\u0065i\u0067\u0068\u0074";
_eacad ,_eacb :=_abfa .selectByIndexes (idx );if _eacb !=nil {return nil ,_a .Wrap (_eacb ,_faaa ,"");};return _eacad ,nil ;};func TstVSymbol (t *_ac .T ,scale ...int )*Bitmap {_debc ,_fagag :=NewWithData (5,5,[]byte {0x88,0x88,0x88,0x50,0x20});_af .NoError (t ,_fagag );
return TstGetScaledSymbol (t ,_debc ,scale ...);};func _bdgc (_eega ,_gcgb *Bitmap ,_fcbd ,_fdbfc int )(*Bitmap ,error ){const _bbee ="\u0065\u0072\u006f\u0064\u0065\u0042\u0072\u0069\u0063\u006b";if _gcgb ==nil {return nil ,_a .Error (_bbee ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _fcbd < 1||_fdbfc < 1{return nil ,_a .Error (_bbee ,"\u0068\u0073\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0073\u0069\u007a\u0065\u0020\u0061\u0072e\u0020\u006e\u006f\u0074\u0020\u0067\u0072e\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006fr\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0031");
};if _fcbd ==1&&_fdbfc ==1{_bcab ,_abbfg :=_adgc (_eega ,_gcgb );if _abbfg !=nil {return nil ,_a .Wrap (_abbfg ,_bbee ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u0026\u0026 \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _bcab ,nil ;};if _fcbd ==1||_fdbfc ==1{_befc :=SelCreateBrick (_fdbfc ,_fcbd ,_fdbfc /2,_fcbd /2,SelHit );_cggc ,_eggab :=_gbac (_eega ,_gcgb ,_befc );if _eggab !=nil {return nil ,_a .Wrap (_eggab ,_bbee ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _cggc ,nil ;};_dfa :=SelCreateBrick (1,_fcbd ,0,_fcbd /2,SelHit );_dgge :=SelCreateBrick (_fdbfc ,1,_fdbfc /2,0,SelHit );_dead ,_gcgbe :=_gbac (nil ,_gcgb ,_dfa );if _gcgbe !=nil {return nil ,_a .Wrap (_gcgbe ,_bbee ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};_eega ,_gcgbe =_gbac (_eega ,_dead ,_dgge );if _gcgbe !=nil {return nil ,_a .Wrap (_gcgbe ,_bbee ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};return _eega ,nil ;};func init (){for _ggg :=0;_ggg < 256;_ggg ++{_cdaee [_ggg ]=uint8 (_ggg &0x1)+(uint8 (_ggg >>1)&0x1)+(uint8 (_ggg >>2)&0x1)+(uint8 (_ggg >>3)&0x1)+(uint8 (_ggg >>4)&0x1)+(uint8 (_ggg >>5)&0x1)+(uint8 (_ggg >>6)&0x1)+(uint8 (_ggg >>7)&0x1);
};};func (_cgdc *Bitmap )GetByteIndex (x ,y int )int {return y *_cgdc .RowStride +(x >>3)};type LocationFilter int ;func (_faae *Bitmaps )GroupByHeight ()(*BitmapsArray ,error ){const _bfcb ="\u0047\u0072\u006f\u0075\u0070\u0042\u0079\u0048\u0065\u0069\u0067\u0068\u0074";
if len (_faae .Values )==0{return nil ,_a .Error (_bfcb ,"\u006eo\u0020v\u0061\u006c\u0075\u0065\u0073 \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};_bfcda :=&BitmapsArray {};_faae .SortByHeight ();_fgfg :=-1;_dddgd :=-1;for _fddce :=0;_fddce < len (_faae .Values );
_fddce ++{_cgca :=_faae .Values [_fddce ].Height ;if _cgca > _fgfg {_fgfg =_cgca ;_dddgd ++;_bfcda .Values =append (_bfcda .Values ,&Bitmaps {});};_bfcda .Values [_dddgd ].AddBitmap (_faae .Values [_fddce ]);};return _bfcda ,nil ;};func TstRSymbol (t *_ac .T ,scale ...int )*Bitmap {_bfdf ,_ggba :=NewWithData (4,5,[]byte {0xF0,0x90,0xF0,0xA0,0x90});
_af .NoError (t ,_ggba );return TstGetScaledSymbol (t ,_bfdf ,scale ...);};func _dfba (_fbaf *_bb .Stack ,_bgfc ,_cfga ,_ebbfd ,_cbeb ,_cbdd int ,_dbdd *_bf .Rectangle )(_dace error ){const _aefe ="\u0070\u0075\u0073\u0068\u0046\u0069\u006c\u006c\u0053\u0065\u0067m\u0065\u006e\u0074\u0042\u006f\u0075\u006e\u0064\u0069\u006eg\u0042\u006f\u0078";
if _fbaf ==nil {return _a .Error (_aefe ,"\u006ei\u006c \u0073\u0074\u0061\u0063\u006b \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};if _dbdd ==nil {return _a .Error (_aefe ,"\u0070\u0072\u006f\u0076i\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0069\u006da\u0067e\u002e\u0052\u0065\u0063\u0074\u0061\u006eg\u006c\u0065");
};_dbdd .Min .X =_bb .Min (_dbdd .Min .X ,_bgfc );_dbdd .Max .X =_bb .Max (_dbdd .Max .X ,_cfga );_dbdd .Min .Y =_bb .Min (_dbdd .Min .Y ,_ebbfd );_dbdd .Max .Y =_bb .Max (_dbdd .Max .Y ,_ebbfd );if !(_ebbfd +_cbeb >=0&&_ebbfd +_cbeb <=_cbdd ){return nil ;
};if _fbaf .Aux ==nil {return _a .Error (_aefe ,"a\u0075x\u0053\u0074\u0061\u0063\u006b\u0020\u006e\u006ft\u0020\u0064\u0065\u0066in\u0065\u0064");};var _decaf *fillSegment ;_bgffc ,_ccadd :=_fbaf .Aux .Pop ();if _ccadd {if _decaf ,_ccadd =_bgffc .(*fillSegment );
!_ccadd {return _a .Error (_aefe ,"a\u0075\u0078\u0053\u0074\u0061\u0063k\u0020\u0064\u0061\u0074\u0061\u0020i\u0073\u0020\u006e\u006f\u0074\u0020\u0061 \u002a\u0066\u0069\u006c\u006c\u0053\u0065\u0067\u006d\u0065n\u0074");};}else {_decaf =&fillSegment {};
};_decaf ._eadd =_bgfc ;_decaf ._bbef =_cfga ;_decaf ._gaeea =_ebbfd ;_decaf ._edgdc =_cbeb ;_fbaf .Push (_decaf );return nil ;};func _cefae (_dcb ,_bbae *Bitmap ,_fabd CombinationOperator )*Bitmap {_fdfa :=New (_dcb .Width ,_dcb .Height );for _cff :=0;
_cff < len (_fdfa .Data );_cff ++{_fdfa .Data [_cff ]=_eggc (_dcb .Data [_cff ],_bbae .Data [_cff ],_fabd );};return _fdfa ;};func (_bca *Bitmap )addBorderGeneral (_gae ,_edg ,_fcec ,_eagf int ,_fbg int )(*Bitmap ,error ){const _ebc ="\u0061\u0064d\u0042\u006f\u0072d\u0065\u0072\u0047\u0065\u006e\u0065\u0072\u0061\u006c";
if _gae < 0||_edg < 0||_fcec < 0||_eagf < 0{return nil ,_a .Error (_ebc ,"n\u0065\u0067\u0061\u0074iv\u0065 \u0062\u006f\u0072\u0064\u0065r\u0020\u0061\u0064\u0064\u0065\u0064");};_abd ,_feeg :=_bca .Width ,_bca .Height ;_fdd :=_abd +_gae +_edg ;_badb :=_feeg +_fcec +_eagf ;
_bdbd :=New (_fdd ,_badb );_bdbd .Color =_bca .Color ;_bde :=PixClr ;if _fbg > 0{_bde =PixSet ;};_gfa :=_bdbd .RasterOperation (0,0,_gae ,_badb ,_bde ,nil ,0,0);if _gfa !=nil {return nil ,_a .Wrap (_gfa ,_ebc ,"\u006c\u0065\u0066\u0074");};_gfa =_bdbd .RasterOperation (_fdd -_edg ,0,_edg ,_badb ,_bde ,nil ,0,0);
if _gfa !=nil {return nil ,_a .Wrap (_gfa ,_ebc ,"\u0072\u0069\u0067h\u0074");};_gfa =_bdbd .RasterOperation (0,0,_fdd ,_fcec ,_bde ,nil ,0,0);if _gfa !=nil {return nil ,_a .Wrap (_gfa ,_ebc ,"\u0074\u006f\u0070");};_gfa =_bdbd .RasterOperation (0,_badb -_eagf ,_fdd ,_eagf ,_bde ,nil ,0,0);
if _gfa !=nil {return nil ,_a .Wrap (_gfa ,_ebc ,"\u0062\u006f\u0074\u0074\u006f\u006d");};_gfa =_bdbd .RasterOperation (_gae ,_fcec ,_abd ,_feeg ,PixSrc ,_bca ,0,0);if _gfa !=nil {return nil ,_a .Wrap (_gfa ,_ebc ,"\u0063\u006f\u0070\u0079");};return _bdbd ,nil ;
};func TstImageBitmapInverseData ()[]byte {_fbba :=_dceb .Copy ();_fbba .InverseData ();return _fbba .Data ;};func (_fgcd *ClassedPoints )GetIntYByClass (i int )(int ,error ){const _dddd ="\u0043\u006c\u0061\u0073s\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047e\u0074I\u006e\u0074\u0059\u0042\u0079\u0043\u006ca\u0073\u0073";
if i >=_fgcd .IntSlice .Size (){return 0,_a .Errorf (_dddd ,"\u0069\u003a\u0020\u0027\u0025\u0064\u0027 \u0069\u0073\u0020o\u0075\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065",i );
};return int (_fgcd .YAtIndex (i )),nil ;};func _afg ()(_ed [256]uint64 ){for _ade :=0;_ade < 256;_ade ++{if _ade &0x01!=0{_ed [_ade ]|=0xff;};if _ade &0x02!=0{_ed [_ade ]|=0xff00;};if _ade &0x04!=0{_ed [_ade ]|=0xff0000;};if _ade &0x08!=0{_ed [_ade ]|=0xff000000;
};if _ade &0x10!=0{_ed [_ade ]|=0xff00000000;};if _ade &0x20!=0{_ed [_ade ]|=0xff0000000000;};if _ade &0x40!=0{_ed [_ade ]|=0xff000000000000;};if _ade &0x80!=0{_ed [_ade ]|=0xff00000000000000;};};return _ed ;};func _ceec (_ebbfa ,_fcccb ,_cfcdf byte )byte {return (_ebbfa &^(_cfcdf ))|(_fcccb &_cfcdf )};
func TstNSymbol (t *_ac .T ,scale ...int )*Bitmap {_afabc ,_febe :=NewWithData (4,5,[]byte {0x90,0xD0,0xB0,0x90,0x90});_af .NoError (t ,_febe );return TstGetScaledSymbol (t ,_afabc ,scale ...);};func _dcgf (_efgdc ,_bdgb ,_ecfd *Bitmap )(*Bitmap ,error ){const _bgbd ="\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0078\u006f\u0072";
if _bdgb ==nil {return nil ,_a .Error (_bgbd ,"'\u0062\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _ecfd ==nil {return nil ,_a .Error (_bgbd ,"'\u0062\u0032\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _efgdc ==_ecfd {return nil ,_a .Error (_bgbd ,"'\u0064\u0027\u0020\u003d\u003d\u0020\u0027\u0062\u0032\u0027");
};if !_bdgb .SizesEqual (_ecfd ){_g .Log .Debug ("\u0025s\u0020\u002d \u0042\u0069\u0074\u006da\u0070\u0020\u0027b\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074 e\u0071\u0075\u0061l\u0020\u0073i\u007a\u0065\u0020\u0077\u0069\u0074h\u0020\u0027b\u0032\u0027",_bgbd );
};var _abeb error ;if _efgdc ,_abeb =_adgc (_efgdc ,_bdgb );_abeb !=nil {return nil ,_a .Wrap (_abeb ,_bgbd ,"\u0063\u0061n\u0027\u0074\u0020c\u0072\u0065\u0061\u0074\u0065\u0020\u0027\u0064\u0027");};if _abeb =_efgdc .RasterOperation (0,0,_efgdc .Width ,_efgdc .Height ,PixSrcXorDst ,_ecfd ,0,0);
_abeb !=nil {return nil ,_a .Wrap (_abeb ,_bgbd ,"");};return _efgdc ,nil ;};var (_fgb =[]byte {0x00,0x80,0xC0,0xE0,0xF0,0xF8,0xFC,0xFE,0xFF};_ggadb =[]byte {0x00,0x01,0x03,0x07,0x0F,0x1F,0x3F,0x7F,0xFF};);func CombineBytes (oldByte ,newByte byte ,op CombinationOperator )byte {return _eggc (oldByte ,newByte ,op );
};func (_abc *Bitmap )Zero ()bool {_acbda :=_abc .Width /8;_cee :=_abc .Width &7;var _edc byte ;if _cee !=0{_edc =byte (0xff<<uint (8-_cee ));};var _fdbf ,_bab ,_badc int ;for _bab =0;_bab < _abc .Height ;_bab ++{_fdbf =_abc .RowStride *_bab ;for _badc =0;
_badc < _acbda ;_badc ,_fdbf =_badc +1,_fdbf +1{if _abc .Data [_fdbf ]!=0{return false ;};};if _cee > 0{if _abc .Data [_fdbf ]&_edc !=0{return false ;};};};return true ;};func _d (_cb ,_ee *Bitmap )(_ff error ){const _cga ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0032";
_bd :=_ee .RowStride ;_be :=_cb .RowStride ;var (_cd byte ;_bfg uint16 ;_bbc ,_eg ,_eec ,_gd ,_eeg int ;);for _eec =0;_eec < _ee .Height ;_eec ++{_bbc =_eec *_bd ;_eg =2*_eec *_be ;for _gd =0;_gd < _bd ;_gd ++{_cd =_ee .Data [_bbc +_gd ];_bfg =_abbf [_cd ];
_eeg =_eg +_gd *2;if _cb .RowStride !=_ee .RowStride *2&&(_gd +1)*2> _cb .RowStride {_ff =_cb .SetByte (_eeg ,byte (_bfg >>8));}else {_ff =_cb .setTwoBytes (_eeg ,_bfg );};if _ff !=nil {return _a .Wrap (_ff ,_cga ,"");};};for _gd =0;_gd < _be ;_gd ++{_eeg =_eg +_be +_gd ;
_cd =_cb .Data [_eg +_gd ];if _ff =_cb .SetByte (_eeg ,_cd );_ff !=nil {return _a .Wrapf (_ff ,_cga ,"c\u006f\u0070\u0079\u0020\u0064\u006fu\u0062\u006c\u0065\u0064\u0020\u006ci\u006e\u0065\u003a\u0020\u0027\u0025\u0064'\u002c\u0020\u0042\u0079\u0074\u0065\u003a\u0020\u0027\u0025d\u0027",_eg +_gd ,_eg +_be +_gd );
};};};return nil ;};const (ComponentConn Component =iota ;ComponentCharacters ;ComponentWords ;);func (_cgbd *Bitmaps )AddBitmap (bm *Bitmap ){_cgbd .Values =append (_cgbd .Values ,bm )};func (_eegb *Bitmap )RemoveBorderGeneral (left ,right ,top ,bot int )(*Bitmap ,error ){return _eegb .removeBorderGeneral (left ,right ,top ,bot );
};func (_afebg Points )GetGeometry (i int )(_caea ,_gcdcd float32 ,_gfeaf error ){if i > len (_afebg )-1{return 0,0,_a .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};_abdgc :=_afebg [i ];return _abdgc .X ,_abdgc .Y ,nil ;};const (_ SizeComparison =iota ;SizeSelectIfLT ;SizeSelectIfGT ;SizeSelectIfLTE ;SizeSelectIfGTE ;SizeSelectIfEQ ;);type CombinationOperator int ;func (_eda *Bitmap )CountPixels ()int {return _eda .countPixels ()};
type MorphProcess struct{Operation MorphOperation ;Arguments []int ;};var _cdaee [256]uint8 ;type SelectionValue int ;func _fgdg (_dgbd ,_bffcd int )int {if _dgbd > _bffcd {return _dgbd ;};return _bffcd ;};func CorrelationScoreSimple (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab []int )(_ccgga float64 ,_bdbb error ){const _dgbb ="\u0043\u006f\u0072\u0072el\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0053\u0069\u006d\u0070l\u0065";
if bm1 ==nil ||bm2 ==nil {return _ccgga ,_a .Error (_dgbb ,"n\u0069l\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u0073 \u0070\u0072\u006f\u0076id\u0065\u0064");};if tab ==nil {return _ccgga ,_a .Error (_dgbb ,"\u0074\u0061\u0062\u0020\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if area1 ==0||area2 ==0{return _ccgga ,_a .Error (_dgbb ,"\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0061\u0072e\u0061\u0073\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u003e\u0020\u0030");};_gdfg ,_bdcf :=bm1 .Width ,bm1 .Height ;_dgaa ,_bdda :=bm2 .Width ,bm2 .Height ;
if _acda (_gdfg -_dgaa )> maxDiffW {return 0,nil ;};if _acda (_bdcf -_bdda )> maxDiffH {return 0,nil ;};var _cafb ,_afga int ;if delX >=0{_cafb =int (delX +0.5);}else {_cafb =int (delX -0.5);};if delY >=0{_afga =int (delY +0.5);}else {_afga =int (delY -0.5);
};_ecfdf :=bm1 .createTemplate ();if _bdbb =_ecfdf .RasterOperation (_cafb ,_afga ,_dgaa ,_bdda ,PixSrc ,bm2 ,0,0);_bdbb !=nil {return _ccgga ,_a .Wrap (_bdbb ,_dgbb ,"\u0062m\u0032 \u0074\u006f\u0020\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065");};
if _bdbb =_ecfdf .RasterOperation (0,0,_gdfg ,_bdcf ,PixSrcAndDst ,bm1 ,0,0);_bdbb !=nil {return _ccgga ,_a .Wrap (_bdbb ,_dgbb ,"b\u006d\u0031\u0020\u0061\u006e\u0064\u0020\u0062\u006d\u0054");};_cebg :=_ecfdf .countPixels ();_ccgga =float64 (_cebg )*float64 (_cebg )/(float64 (area1 )*float64 (area2 ));
return _ccgga ,nil ;};func (_dcea *Selection )setOrigin (_bebd ,_deef int ){_dcea .Cy ,_dcea .Cx =_bebd ,_deef };func (_ccga *ClassedPoints )YAtIndex (i int )float32 {return (*_ccga .Points )[_ccga .IntSlice [i ]].Y };func (_ecfe *Bitmap )equivalent (_cggg *Bitmap )bool {if _ecfe ==_cggg {return true ;
};if !_ecfe .SizesEqual (_cggg ){return false ;};_adede :=_cefae (_ecfe ,_cggg ,CmbOpXor );_bagbc :=_ecfe .countPixels ();_dbge :=int (0.25*float32 (_bagbc ));if _adede .thresholdPixelSum (_dbge ){return false ;};var (_agc [9][9]int ;_fadd [18][9]int ;
_dga [9][18]int ;_bda int ;_cdf int ;);_cce :=9;_ecbd :=_ecfe .Height /_cce ;_dgdg :=_ecfe .Width /_cce ;_geaf ,_gabbf :=_ecbd /2,_dgdg /2;if _ecbd < _dgdg {_geaf =_dgdg /2;_gabbf =_ecbd /2;};_efgb :=float64 (_geaf )*float64 (_gabbf )*_ec .Pi ;_ebd :=int (float64 (_ecbd *_dgdg /2)*0.9);
_fbge :=int (float64 (_dgdg *_ecbd /2)*0.9);for _dac :=0;_dac < _cce ;_dac ++{_fega :=_dgdg *_dac +_bda ;var _fegd int ;if _dac ==_cce -1{_bda =0;_fegd =_ecfe .Width ;}else {_fegd =_fega +_dgdg ;if ((_ecfe .Width -_bda )%_cce )> 0{_bda ++;_fegd ++;};};
for _fec :=0;_fec < _cce ;_fec ++{_cgae :=_ecbd *_fec +_cdf ;var _cca int ;if _fec ==_cce -1{_cdf =0;_cca =_ecfe .Height ;}else {_cca =_cgae +_ecbd ;if (_ecfe .Height -_cdf )%_cce > 0{_cdf ++;_cca ++;};};var _dgee ,_beeg ,_dbf ,_aeg int ;_bfcg :=(_fega +_fegd )/2;
_dagbe :=(_cgae +_cca )/2;for _becg :=_fega ;_becg < _fegd ;_becg ++{for _dgca :=_cgae ;_dgca < _cca ;_dgca ++{if _adede .GetPixel (_becg ,_dgca ){if _becg < _bfcg {_dgee ++;}else {_beeg ++;};if _dgca < _dagbe {_aeg ++;}else {_dbf ++;};};};};_agc [_dac ][_fec ]=_dgee +_beeg ;
_fadd [_dac *2][_fec ]=_dgee ;_fadd [_dac *2+1][_fec ]=_beeg ;_dga [_dac ][_fec *2]=_aeg ;_dga [_dac ][_fec *2+1]=_dbf ;};};for _gdb :=0;_gdb < _cce *2-1;_gdb ++{for _eged :=0;_eged < (_cce -1);_eged ++{var _ccag int ;for _abfe :=0;_abfe < 2;_abfe ++{for _aaaad :=0;
_aaaad < 2;_aaaad ++{_ccag +=_fadd [_gdb +_abfe ][_eged +_aaaad ];};};if _ccag > _fbge {return false ;};};};for _cgcca :=0;_cgcca < (_cce -1);_cgcca ++{for _bbca :=0;_bbca < ((_cce *2)-1);_bbca ++{var _dccfa int ;for _adga :=0;_adga < 2;_adga ++{for _edag :=0;
_edag < 2;_edag ++{_dccfa +=_dga [_cgcca +_adga ][_bbca +_edag ];};};if _dccfa > _ebd {return false ;};};};for _bcfgf :=0;_bcfgf < (_cce -2);_bcfgf ++{for _aaea :=0;_aaea < (_cce -2);_aaea ++{var _edde ,_gbgg int ;for _efga :=0;_efga < 3;_efga ++{for _efgd :=0;
_efgd < 3;_efgd ++{if _efga ==_efgd {_edde +=_agc [_bcfgf +_efga ][_aaea +_efgd ];};if (2-_efga )==_efgd {_gbgg +=_agc [_bcfgf +_efga ][_aaea +_efgd ];};};};if _edde > _fbge ||_gbgg > _fbge {return false ;};};};for _aeab :=0;_aeab < (_cce -1);_aeab ++{for _ecda :=0;
_ecda < (_cce -1);_ecda ++{var _baaf int ;for _bdac :=0;_bdac < 2;_bdac ++{for _bded :=0;_bded < 2;_bded ++{_baaf +=_agc [_aeab +_bdac ][_ecda +_bded ];};};if float64 (_baaf )> _efgb {return false ;};};};return true ;};func _acda (_feb int )int {if _feb < 0{return -_feb ;
};return _feb ;};func (_dagg *Bitmap )centroid (_daed ,_acae []int )(Point ,error ){_gbga :=Point {};_dagg .setPadBits (0);if len (_daed )==0{_daed =_gfae ();};if len (_acae )==0{_acae =_ebag ();};var _efag ,_edcb ,_ccfe ,_gcce ,_abad ,_fecc int ;var _acga byte ;
for _abad =0;_abad < _dagg .Height ;_abad ++{_cgff :=_dagg .RowStride *_abad ;_gcce =0;for _fecc =0;_fecc < _dagg .RowStride ;_fecc ++{_acga =_dagg .Data [_cgff +_fecc ];if _acga !=0{_gcce +=_acae [_acga ];_efag +=_daed [_acga ]+_fecc *8*_acae [_acga ];
};};_ccfe +=_gcce ;_edcb +=_gcce *_abad ;};if _ccfe !=0{_gbga .X =float32 (_efag )/float32 (_ccfe );_gbga .Y =float32 (_edcb )/float32 (_ccfe );};return _gbga ,nil ;};func Extract (roi _bf .Rectangle ,src *Bitmap )(*Bitmap ,error ){_ggbd :=New (roi .Dx (),roi .Dy ());
_dccd :=roi .Min .X &0x07;_ggae :=8-_dccd ;_gebc :=uint (8-_ggbd .Width &0x07);_faed :=src .GetByteIndex (roi .Min .X ,roi .Min .Y );_aaga :=src .GetByteIndex (roi .Max .X -1,roi .Min .Y );_edcf :=_ggbd .RowStride ==_aaga +1-_faed ;var _agfb int ;for _bage :=roi .Min .Y ;
_bage < roi .Max .Y ;_bage ++{_edcfb :=_faed ;_cegg :=_agfb ;switch {case _faed ==_aaga :_ccac ,_ccab :=src .GetByte (_edcfb );if _ccab !=nil {return nil ,_ccab ;};_ccac <<=uint (_dccd );_ccab =_ggbd .SetByte (_cegg ,_cdag (_gebc ,_ccac ));if _ccab !=nil {return nil ,_ccab ;
};case _dccd ==0:for _acdd :=_faed ;_acdd <=_aaga ;_acdd ++{_decf ,_aefd :=src .GetByte (_edcfb );if _aefd !=nil {return nil ,_aefd ;};_edcfb ++;if _acdd ==_aaga &&_edcf {_decf =_cdag (_gebc ,_decf );};_aefd =_ggbd .SetByte (_cegg ,_decf );if _aefd !=nil {return nil ,_aefd ;
};_cegg ++;};default:_abgad :=_dgcg (src ,_ggbd ,uint (_dccd ),uint (_ggae ),_gebc ,_faed ,_aaga ,_edcf ,_edcfb ,_cegg );if _abgad !=nil {return nil ,_abgad ;};};_faed +=src .RowStride ;_aaga +=src .RowStride ;_agfb +=_ggbd .RowStride ;};return _ggbd ,nil ;
};const (CmbOpOr CombinationOperator =iota ;CmbOpAnd ;CmbOpXor ;CmbOpXNor ;CmbOpReplace ;CmbOpNot ;);func (_efdc *Bitmap )removeBorderGeneral (_egfg ,_bdc ,_dccbd ,_cfae int )(*Bitmap ,error ){const _gbba ="\u0072\u0065\u006d\u006fve\u0042\u006f\u0072\u0064\u0065\u0072\u0047\u0065\u006e\u0065\u0072\u0061\u006c";
if _egfg < 0||_bdc < 0||_dccbd < 0||_cfae < 0{return nil ,_a .Error (_gbba ,"\u006e\u0065g\u0061\u0074\u0069\u0076\u0065\u0020\u0062\u0072\u006f\u0064\u0065\u0072\u0020\u0072\u0065\u006d\u006f\u0076\u0065\u0020\u0076\u0061lu\u0065\u0073");};_egae ,_gdae :=_efdc .Width ,_efdc .Height ;
_edab :=_egae -_egfg -_bdc ;_abaf :=_gdae -_dccbd -_cfae ;if _edab <=0{return nil ,_a .Errorf (_gbba ,"w\u0069\u0064\u0074\u0068: \u0025d\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u003e\u0020\u0030",_edab );};if _abaf <=0{return nil ,_a .Errorf (_gbba ,"\u0068\u0065\u0069\u0067ht\u003a\u0020\u0025\u0064\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u003e \u0030",_abaf );
};_dcdc :=New (_edab ,_abaf );_dcdc .Color =_efdc .Color ;_bfed :=_dcdc .RasterOperation (0,0,_edab ,_abaf ,PixSrc ,_efdc ,_egfg ,_dccbd );if _bfed !=nil {return nil ,_a .Wrap (_bfed ,_gbba ,"");};return _dcdc ,nil ;};type RasterOperator int ;func (_abgf *Bitmap )nextOnPixelLow (_ddb ,_egec ,_eaga ,_abba ,_gcd int )(_deed _bf .Point ,_edaf bool ,_eea error ){const _baff ="B\u0069\u0074\u006d\u0061p.\u006ee\u0078\u0074\u004f\u006e\u0050i\u0078\u0065\u006c\u004c\u006f\u0077";
var (_bff int ;_bbga byte ;);_aef :=_gcd *_eaga ;_cef :=_aef +(_abba /8);if _bbga ,_eea =_abgf .GetByte (_cef );_eea !=nil {return _deed ,false ,_a .Wrap (_eea ,_baff ,"\u0078\u0053\u0074\u0061\u0072\u0074\u0020\u0061\u006e\u0064 \u0079\u0053\u0074\u0061\u0072\u0074\u0020o\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065");
};if _bbga !=0{_fadf :=_abba -(_abba %8)+7;for _bff =_abba ;_bff <=_fadf &&_bff < _ddb ;_bff ++{if _abgf .GetPixel (_bff ,_gcd ){_deed .X =_bff ;_deed .Y =_gcd ;return _deed ,true ,nil ;};};};_fddg :=(_abba /8)+1;_bff =8*_fddg ;var _fdfbd int ;for _cef =_aef +_fddg ;
_bff < _ddb ;_cef ,_bff =_cef +1,_bff +8{if _bbga ,_eea =_abgf .GetByte (_cef );_eea !=nil {return _deed ,false ,_a .Wrap (_eea ,_baff ,"r\u0065\u0073\u0074\u0020of\u0020t\u0068\u0065\u0020\u006c\u0069n\u0065\u0020\u0062\u0079\u0074\u0065");};if _bbga ==0{continue ;
};for _fdfbd =0;_fdfbd < 8&&_bff < _ddb ;_fdfbd ,_bff =_fdfbd +1,_bff +1{if _abgf .GetPixel (_bff ,_gcd ){_deed .X =_bff ;_deed .Y =_gcd ;return _deed ,true ,nil ;};};};for _cbba :=_gcd +1;_cbba < _egec ;_cbba ++{_aef =_cbba *_eaga ;for _cef ,_bff =_aef ,0;
_bff < _ddb ;_cef ,_bff =_cef +1,_bff +8{if _bbga ,_eea =_abgf .GetByte (_cef );_eea !=nil {return _deed ,false ,_a .Wrap (_eea ,_baff ,"\u0066o\u006cl\u006f\u0077\u0069\u006e\u0067\u0020\u006c\u0069\u006e\u0065\u0073");};if _bbga ==0{continue ;};for _fdfbd =0;
_fdfbd < 8&&_bff < _ddb ;_fdfbd ,_bff =_fdfbd +1,_bff +1{if _abgf .GetPixel (_bff ,_cbba ){_deed .X =_bff ;_deed .Y =_cbba ;return _deed ,true ,nil ;};};};};return _deed ,false ,nil ;};func ClipBoxToRectangle (box *_bf .Rectangle ,wi ,hi int )(_gdaf *_bf .Rectangle ,_gagg error ){const _aaaaf ="\u0043l\u0069p\u0042\u006f\u0078\u0054\u006fR\u0065\u0063t\u0061\u006e\u0067\u006c\u0065";
if box ==nil {return nil ,_a .Error (_aaaaf ,"\u0027\u0062\u006f\u0078\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");};if box .Min .X >=wi ||box .Min .Y >=hi ||box .Max .X <=0||box .Max .Y <=0{return nil ,_a .Error (_aaaaf ,"\u0027\u0062\u006fx'\u0020\u006f\u0075\u0074\u0073\u0069\u0064\u0065\u0020\u0072\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065");
};_afdf :=*box ;_gdaf =&_afdf ;if _gdaf .Min .X < 0{_gdaf .Max .X +=_gdaf .Min .X ;_gdaf .Min .X =0;};if _gdaf .Min .Y < 0{_gdaf .Max .Y +=_gdaf .Min .Y ;_gdaf .Min .Y =0;};if _gdaf .Max .X > wi {_gdaf .Max .X =wi ;};if _gdaf .Max .Y > hi {_gdaf .Max .Y =hi ;
};return _gdaf ,nil ;};func _fga (_ggeg ,_gceb ,_ffc *Bitmap )(*Bitmap ,error ){const _cfab ="\u0073\u0075\u0062\u0074\u0072\u0061\u0063\u0074";if _gceb ==nil {return nil ,_a .Error (_cfab ,"'\u0073\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");
};if _ffc ==nil {return nil ,_a .Error (_cfab ,"'\u0073\u0032\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};var _ede error ;switch {case _ggeg ==_gceb :if _ede =_ggeg .RasterOperation (0,0,_gceb .Width ,_gceb .Height ,PixNotSrcAndDst ,_ffc ,0,0);
_ede !=nil {return nil ,_a .Wrap (_ede ,_cfab ,"\u0064 \u003d\u003d\u0020\u0073\u0031");};case _ggeg ==_ffc :if _ede =_ggeg .RasterOperation (0,0,_gceb .Width ,_gceb .Height ,PixNotSrcAndDst ,_gceb ,0,0);_ede !=nil {return nil ,_a .Wrap (_ede ,_cfab ,"\u0064 \u003d\u003d\u0020\u0073\u0032");
};default:_ggeg ,_ede =_adgc (_ggeg ,_gceb );if _ede !=nil {return nil ,_a .Wrap (_ede ,_cfab ,"");};if _ede =_ggeg .RasterOperation (0,0,_gceb .Width ,_gceb .Height ,PixNotSrcAndDst ,_ffc ,0,0);_ede !=nil {return nil ,_a .Wrap (_ede ,_cfab ,"\u0064e\u0066\u0061\u0075\u006c\u0074");
};};return _ggeg ,nil ;};func (_deec *Bitmap )Equivalent (s *Bitmap )bool {return _deec .equivalent (s )};func (_fadg *ClassedPoints )ySortFunction ()func (_decaa int ,_babbf int )bool {return func (_faad ,_cccda int )bool {return _fadg .YAtIndex (_faad )< _fadg .YAtIndex (_cccda )};
};func (_bdae *Bitmaps )HeightSorter ()func (_dcgeb ,_bbdf int )bool {return func (_gcceg ,_cbcfc int )bool {_ebgf :=_bdae .Values [_gcceg ].Height < _bdae .Values [_cbcfc ].Height ;_g .Log .Debug ("H\u0065i\u0067\u0068\u0074\u003a\u0020\u0025\u0076\u0020<\u0020\u0025\u0076\u0020= \u0025\u0076",_bdae .Values [_gcceg ].Height ,_bdae .Values [_cbcfc ].Height ,_ebgf );
return _ebgf ;};};func (_fdb *Bitmap )Equals (s *Bitmap )bool {if len (_fdb .Data )!=len (s .Data )||_fdb .Width !=s .Width ||_fdb .Height !=s .Height {return false ;};for _ded :=0;_ded < _fdb .Height ;_ded ++{_egf :=_ded *_fdb .RowStride ;for _abb :=0;
_abb < _fdb .RowStride ;_abb ++{if _fdb .Data [_egf +_abb ]!=s .Data [_egf +_abb ]{return false ;};};};return true ;};func _adab (_bcagd ,_dage *Bitmap ,_gegdca ,_gbbeb int )(*Bitmap ,error ){const _cea ="\u006fp\u0065\u006e\u0042\u0072\u0069\u0063k";if _dage ==nil {return nil ,_a .Error (_cea ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");
};if _gegdca < 1&&_gbbeb < 1{return nil ,_a .Error (_cea ,"\u0068\u0053\u0069\u007ae \u003c\u0020\u0031\u0020\u0026\u0026\u0020\u0076\u0053\u0069\u007a\u0065\u0020\u003c \u0031");};if _gegdca ==1&&_gbbeb ==1{return _dage .Copy (),nil ;};if _gegdca ==1||_gbbeb ==1{var _bfde error ;
_daadd :=SelCreateBrick (_gbbeb ,_gegdca ,_gbbeb /2,_gegdca /2,SelHit );_bcagd ,_bfde =_gfea (_bcagd ,_dage ,_daadd );if _bfde !=nil {return nil ,_a .Wrap (_bfde ,_cea ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _bcagd ,nil ;};_dddg :=SelCreateBrick (1,_gegdca ,0,_gegdca /2,SelHit );_eed :=SelCreateBrick (_gbbeb ,1,_gbbeb /2,0,SelHit );_ddce ,_acec :=_gbac (nil ,_dage ,_dddg );if _acec !=nil {return nil ,_a .Wrap (_acec ,_cea ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};_bcagd ,_acec =_gbac (_bcagd ,_ddce ,_eed );if _acec !=nil {return nil ,_a .Wrap (_acec ,_cea ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};_ ,_acec =_cfaa (_ddce ,_bcagd ,_dddg );if _acec !=nil {return nil ,_a .Wrap (_acec ,_cea ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};_ ,_acec =_cfaa (_bcagd ,_ddce ,_eed );if _acec !=nil {return nil ,_a .Wrap (_acec ,_cea ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};return _bcagd ,nil ;};func _gcgbf (_fage *Bitmap ,_afcdf ,_cbece int ,_cbbb ,_eada int ,_dcbf RasterOperator ,_ffcaf *Bitmap ,_aaef ,_cgcd int )error {var _edgd ,_efc ,_cbceb ,_daeb int ;
if _afcdf < 0{_aaef -=_afcdf ;_cbbb +=_afcdf ;_afcdf =0;};if _aaef < 0{_afcdf -=_aaef ;_cbbb +=_aaef ;_aaef =0;};_edgd =_afcdf +_cbbb -_fage .Width ;if _edgd > 0{_cbbb -=_edgd ;};_efc =_aaef +_cbbb -_ffcaf .Width ;if _efc > 0{_cbbb -=_efc ;};if _cbece < 0{_cgcd -=_cbece ;
_eada +=_cbece ;_cbece =0;};if _cgcd < 0{_cbece -=_cgcd ;_eada +=_cgcd ;_cgcd =0;};_cbceb =_cbece +_eada -_fage .Height ;if _cbceb > 0{_eada -=_cbceb ;};_daeb =_cgcd +_eada -_ffcaf .Height ;if _daeb > 0{_eada -=_daeb ;};if _cbbb <=0||_eada <=0{return nil ;
};var _cddg error ;switch {case _afcdf &7==0&&_aaef &7==0:_cddg =_bgcg (_fage ,_afcdf ,_cbece ,_cbbb ,_eada ,_dcbf ,_ffcaf ,_aaef ,_cgcd );case _afcdf &7==_aaef &7:_cddg =_cdfg (_fage ,_afcdf ,_cbece ,_cbbb ,_eada ,_dcbf ,_ffcaf ,_aaef ,_cgcd );default:_cddg =_cgbc (_fage ,_afcdf ,_cbece ,_cbbb ,_eada ,_dcbf ,_ffcaf ,_aaef ,_cgcd );
};if _cddg !=nil {return _a .Wrap (_cddg ,"r\u0061\u0073\u0074\u0065\u0072\u004f\u0070\u004c\u006f\u0077","");};return nil ;};func (_fcf *Bitmap )connComponentsBB (_edgf int )(_faab *Boxes ,_ecec error ){const _fgcg ="\u0042\u0069\u0074ma\u0070\u002e\u0063\u006f\u006e\u006e\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0042\u0042";
if _edgf !=4&&_edgf !=8{return nil ,_a .Error (_fgcg ,"\u0063\u006f\u006e\u006e\u0065\u0063t\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0027\u0034\u0027\u0020\u006fr\u0020\u0027\u0038\u0027");};if _fcf .Zero (){return &Boxes {},nil ;
};_fcf .setPadBits (0);_fcgc ,_ecec :=_adgc (nil ,_fcf );if _ecec !=nil {return nil ,_a .Wrap (_ecec ,_fgcg ,"\u0062\u006d\u0031");};_eccb :=&_bb .Stack {};_eccb .Aux =&_bb .Stack {};_faab =&Boxes {};var (_ebf ,_efbb int ;_fcb _bf .Point ;_ededa bool ;
_dgga *_bf .Rectangle ;);for {if _fcb ,_ededa ,_ecec =_fcgc .nextOnPixel (_efbb ,_ebf );_ecec !=nil {return nil ,_a .Wrap (_ecec ,_fgcg ,"");};if !_ededa {break ;};if _dgga ,_ecec =_eafb (_fcgc ,_eccb ,_fcb .X ,_fcb .Y ,_edgf );_ecec !=nil {return nil ,_a .Wrap (_ecec ,_fgcg ,"");
};if _ecec =_faab .Add (_dgga );_ecec !=nil {return nil ,_a .Wrap (_ecec ,_fgcg ,"");};_efbb =_fcb .X ;_ebf =_fcb .Y ;};return _faab ,nil ;};func _eafb (_decfb *Bitmap ,_eaeab *_bb .Stack ,_fdde ,_ebbgf ,_aacda int )(_fdaac *_bf .Rectangle ,_afbe error ){const _cfegf ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";
if _decfb ==nil {return nil ,_a .Error (_cfegf ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _eaeab ==nil {return nil ,_a .Error (_cfegf ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");
};switch _aacda {case 4:if _fdaac ,_afbe =_agcf (_decfb ,_eaeab ,_fdde ,_ebbgf );_afbe !=nil {return nil ,_a .Wrap (_afbe ,_cfegf ,"");};return _fdaac ,nil ;case 8:if _fdaac ,_afbe =_fgfa (_decfb ,_eaeab ,_fdde ,_ebbgf );_afbe !=nil {return nil ,_a .Wrap (_afbe ,_cfegf ,"");
};return _fdaac ,nil ;default:return nil ,_a .Errorf (_cfegf ,"\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u0069\u0073 \u006eo\u0074\u0020\u0034\u0020\u006f\u0072\u0020\u0038\u003a\u0020\u0027\u0025\u0064\u0027",_aacda );
};};func TstCSymbol (t *_ac .T )*Bitmap {t .Helper ();_efeff :=New (6,6);_af .NoError (t ,_efeff .SetPixel (1,0,1));_af .NoError (t ,_efeff .SetPixel (2,0,1));_af .NoError (t ,_efeff .SetPixel (3,0,1));_af .NoError (t ,_efeff .SetPixel (4,0,1));_af .NoError (t ,_efeff .SetPixel (0,1,1));
_af .NoError (t ,_efeff .SetPixel (5,1,1));_af .NoError (t ,_efeff .SetPixel (0,2,1));_af .NoError (t ,_efeff .SetPixel (0,3,1));_af .NoError (t ,_efeff .SetPixel (0,4,1));_af .NoError (t ,_efeff .SetPixel (5,4,1));_af .NoError (t ,_efeff .SetPixel (1,5,1));
_af .NoError (t ,_efeff .SetPixel (2,5,1));_af .NoError (t ,_efeff .SetPixel (3,5,1));_af .NoError (t ,_efeff .SetPixel (4,5,1));return _efeff ;};func _bgg (_bfa ,_gga *Bitmap )(_gdd error ){const _ea ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0038";
_cgd :=_gga .RowStride ;_fc :=_bfa .RowStride ;var _dc ,_cdd ,_aea ,_eaf ,_afb int ;for _aea =0;_aea < _gga .Height ;_aea ++{_dc =_aea *_cgd ;_cdd =8*_aea *_fc ;for _eaf =0;_eaf < _cgd ;_eaf ++{if _gdd =_bfa .setEightBytes (_cdd +_eaf *8,_eebfe [_gga .Data [_dc +_eaf ]]);
_gdd !=nil {return _a .Wrap (_gdd ,_ea ,"");};};for _afb =1;_afb < 8;_afb ++{for _eaf =0;_eaf < _fc ;_eaf ++{if _gdd =_bfa .SetByte (_cdd +_afb *_fc +_eaf ,_bfa .Data [_cdd +_eaf ]);_gdd !=nil {return _a .Wrap (_gdd ,_ea ,"");};};};};return nil ;};func Dilate (d *Bitmap ,s *Bitmap ,sel *Selection )(*Bitmap ,error ){return _cfaa (d ,s ,sel )};
const (Vanilla Color =iota ;Chocolate ;);type BoundaryCondition int ;func _efagc (_dgae *_bb .Stack )(_bgbcb *fillSegment ,_bbbcf error ){const _baca ="\u0070\u006f\u0070\u0046\u0069\u006c\u006c\u0053\u0065g\u006d\u0065\u006e\u0074";if _dgae ==nil {return nil ,_a .Error (_baca ,"\u006ei\u006c \u0073\u0074\u0061\u0063\u006b \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");
};if _dgae .Aux ==nil {return nil ,_a .Error (_baca ,"a\u0075x\u0053\u0074\u0061\u0063\u006b\u0020\u006e\u006ft\u0020\u0064\u0065\u0066in\u0065\u0064");};_adebe ,_gedg :=_dgae .Pop ();if !_gedg {return nil ,nil ;};_efbce ,_gedg :=_adebe .(*fillSegment );
if !_gedg {return nil ,_a .Error (_baca ,"\u0073\u0074\u0061ck\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020c\u006fn\u0074a\u0069n\u0020\u002a\u0066\u0069\u006c\u006c\u0053\u0065\u0067\u006d\u0065\u006e\u0074");};_bgbcb =&fillSegment {_efbce ._eadd ,_efbce ._bbef ,_efbce ._gaeea +_efbce ._edgdc ,_efbce ._edgdc };
_dgae .Aux .Push (_efbce );return _bgbcb ,nil ;};type Bitmaps struct{Values []*Bitmap ;Boxes []*_bf .Rectangle ;};func Centroids (bms []*Bitmap )(*Points ,error ){_ggee :=make ([]Point ,len (bms ));_fgee :=_gfae ();_eead :=_ebag ();var _abed error ;for _gfeg ,_cbee :=range bms {_ggee [_gfeg ],_abed =_cbee .centroid (_fgee ,_eead );
if _abed !=nil {return nil ,_abed ;};};_gefd :=Points (_ggee );return &_gefd ,nil ;};const (MopDilation MorphOperation =iota ;MopErosion ;MopOpening ;MopClosing ;MopRankBinaryReduction ;MopReplicativeBinaryExpansion ;MopAddBorder ;);func _dab (_bcb *Bitmap ,_ce *Bitmap ,_cf int )(_cbc error ){const _cbg ="e\u0078\u0070\u0061\u006edB\u0069n\u0061\u0072\u0079\u0050\u006fw\u0065\u0072\u0032\u004c\u006f\u0077";
switch _cf {case 2:_cbc =_d (_bcb ,_ce );case 4:_cbc =_ca (_bcb ,_ce );case 8:_cbc =_bgg (_bcb ,_ce );default:return _a .Error (_cbg ,"\u0065\u0078p\u0061\u006e\u0073\u0069o\u006e\u0020f\u0061\u0063\u0074\u006f\u0072\u0020\u006e\u006ft\u0020\u0069\u006e\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d\u0020r\u0061\u006e\u0067\u0065");
};if _cbc !=nil {_cbc =_a .Wrap (_cbc ,_cbg ,"");};return _cbc ;};func (_eefgg Points )Get (i int )(Point ,error ){if i > len (_eefgg )-1{return Point {},_a .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _eefgg [i ],nil ;};func _eggc (_bfga ,_cbf byte ,_cgfee CombinationOperator )byte {switch _cgfee {case CmbOpOr :return _cbf |_bfga ;case CmbOpAnd :return _cbf &_bfga ;case CmbOpXor :return _cbf ^_bfga ;case CmbOpXNor :return ^(_cbf ^_bfga );case CmbOpNot :return ^(_cbf );
default:return _cbf ;};};func _bgbca (_ggc ,_ddbc int )int {if _ggc < _ddbc {return _ggc ;};return _ddbc ;};func (_bcaf *Points )Add (pt *Points )error {const _dagc ="\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0041\u0064\u0064";if _bcaf ==nil {return _a .Error (_dagc ,"\u0070o\u0069n\u0074\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if pt ==nil {return _a .Error (_dagc ,"a\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0070\u006f\u0069\u006e\u0074\u0073\u0020\u006eo\u0074\u0020\u0064e\u0066i\u006e\u0065\u0064");};*_bcaf =append (*_bcaf ,*pt ...);return nil ;};func _cdcc (_bdga ,_adcac ,_dfe *Bitmap ,_gecc int )(*Bitmap ,error ){const _gedd ="\u0073\u0065\u0065\u0064\u0046\u0069\u006c\u006c\u0042i\u006e\u0061\u0072\u0079";
if _adcac ==nil {return nil ,_a .Error (_gedd ,"s\u006fu\u0072\u0063\u0065\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");};if _dfe ==nil {return nil ,_a .Error (_gedd ,"'\u006da\u0073\u006b\u0027\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");
};if _gecc !=4&&_gecc !=8{return nil ,_a .Error (_gedd ,"\u0063\u006f\u006en\u0065\u0063\u0074\u0069v\u0069\u0074\u0079\u0020\u006e\u006f\u0074 \u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0034\u002c\u0038\u007d");};var _aaf error ;_bdga ,_aaf =_adgc (_bdga ,_adcac );
if _aaf !=nil {return nil ,_a .Wrap (_aaf ,_gedd ,"\u0063o\u0070y\u0020\u0073\u006f\u0075\u0072c\u0065\u0020t\u006f\u0020\u0027\u0064\u0027");};_geca :=_adcac .createTemplate ();_dfe .setPadBits (0);for _gdedb :=0;_gdedb < _ebfca ;_gdedb ++{_geca ,_aaf =_adgc (_geca ,_bdga );
if _aaf !=nil {return nil ,_a .Wrapf (_aaf ,_gedd ,"\u0069\u0074\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064",_gdedb );};if _aaf =_gfeeb (_bdga ,_dfe ,_gecc );_aaf !=nil {return nil ,_a .Wrapf (_aaf ,_gedd ,"\u0069\u0074\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064",_gdedb );
};if _geca .Equals (_bdga ){break ;};};return _bdga ,nil ;};func (_bffc *Bitmap )resizeImageData (_fbfd *Bitmap )error {if _fbfd ==nil {return _a .Error ("\u0072e\u0073i\u007a\u0065\u0049\u006d\u0061\u0067\u0065\u0044\u0061\u0074\u0061","\u0073r\u0063 \u0069\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _bffc .SizesEqual (_fbfd ){return nil ;};_bffc .Data =make ([]byte ,len (_fbfd .Data ));_bffc .Width =_fbfd .Width ;_bffc .Height =_fbfd .Height ;_bffc .RowStride =_fbfd .RowStride ;return nil ;};func _cfaa (_bdab *Bitmap ,_cdcd *Bitmap ,_bbad *Selection )(*Bitmap ,error ){var (_bfdg *Bitmap ;
_deaed error ;);_bdab ,_deaed =_fddf (_bdab ,_cdcd ,_bbad ,&_bfdg );if _deaed !=nil {return nil ,_deaed ;};if _deaed =_bdab .clearAll ();_deaed !=nil {return nil ,_deaed ;};var _ggfd SelectionValue ;for _aage :=0;_aage < _bbad .Height ;_aage ++{for _efgba :=0;
_efgba < _bbad .Width ;_efgba ++{_ggfd =_bbad .Data [_aage ][_efgba ];if _ggfd ==SelHit {if _deaed =_bdab .RasterOperation (_efgba -_bbad .Cx ,_aage -_bbad .Cy ,_cdcd .Width ,_cdcd .Height ,PixSrcOrDst ,_bfdg ,0,0);_deaed !=nil {return nil ,_deaed ;};};
};};return _bdab ,nil ;};func TstDSymbol (t *_ac .T ,scale ...int )*Bitmap {_gfgd ,_dbfd :=NewWithData (4,5,[]byte {0xf0,0x90,0x90,0x90,0xE0});_af .NoError (t ,_dbfd );return TstGetScaledSymbol (t ,_gfgd ,scale ...);};var MorphBC BoundaryCondition ;func Copy (d ,s *Bitmap )(*Bitmap ,error ){return _adgc (d ,s )};
func (_bgca *Bitmaps )SelectBySize (width ,height int ,tp LocationFilter ,relation SizeComparison )(_ffa *Bitmaps ,_deag error ){const _cbfe ="B\u0069t\u006d\u0061\u0070\u0073\u002e\u0053\u0065\u006ce\u0063\u0074\u0042\u0079Si\u007a\u0065";if _bgca ==nil {return nil ,_a .Error (_cbfe ,"\u0027\u0062\u0027 B\u0069\u0074\u006d\u0061\u0070\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};switch tp {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_a .Errorf (_cbfe ,"\u0070\u0072\u006f\u0076\u0069d\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u006fc\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",tp );
};switch relation {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE ,SizeSelectIfEQ :default:return nil ,_a .Errorf (_cbfe ,"\u0069\u006e\u0076\u0061li\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025d\u0027",relation );
};_acgge ,_deag :=_bgca .makeSizeIndicator (width ,height ,tp ,relation );if _deag !=nil {return nil ,_a .Wrap (_deag ,_cbfe ,"");};_ffa ,_deag =_bgca .selectByIndicator (_acgge );if _deag !=nil {return nil ,_a .Wrap (_deag ,_cbfe ,"");};return _ffa ,nil ;
};func TstWordBitmap (t *_ac .T ,scale ...int )*Bitmap {_eceg :=1;if len (scale )> 0{_eceg =scale [0];};_bcecb :=3;_fbfb :=9+7+15+2*_bcecb ;_dcbe :=5+_bcecb +5;_gfdf :=New (_fbfb *_eceg ,_dcbe *_eceg );_ebee :=&Bitmaps {};var _gdda *int ;_bcecb *=_eceg ;
_bbbdb :=0;_gdda =&_bbbdb ;_ffbd :=0;_fcaf :=TstDSymbol (t ,scale ...);TstAddSymbol (t ,_ebee ,_fcaf ,_gdda ,_ffbd ,1*_eceg );_fcaf =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_ebee ,_fcaf ,_gdda ,_ffbd ,_bcecb );_fcaf =TstISymbol (t ,scale ...);TstAddSymbol (t ,_ebee ,_fcaf ,_gdda ,_ffbd ,1*_eceg );
_fcaf =TstTSymbol (t ,scale ...);TstAddSymbol (t ,_ebee ,_fcaf ,_gdda ,_ffbd ,_bcecb );_fcaf =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_ebee ,_fcaf ,_gdda ,_ffbd ,1*_eceg );_fcaf =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_ebee ,_fcaf ,_gdda ,_ffbd ,1*_eceg );
_fcaf =TstWSymbol (t ,scale ...);TstAddSymbol (t ,_ebee ,_fcaf ,_gdda ,_ffbd ,0);*_gdda =0;_ffbd =5*_eceg +_bcecb ;_fcaf =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_ebee ,_fcaf ,_gdda ,_ffbd ,1*_eceg );_fcaf =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_ebee ,_fcaf ,_gdda ,_ffbd ,_bcecb );
_fcaf =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_ebee ,_fcaf ,_gdda ,_ffbd ,1*_eceg );_fcaf =TstESymbol (t ,scale ...);TstAddSymbol (t ,_ebee ,_fcaf ,_gdda ,_ffbd ,1*_eceg );_fcaf =TstVSymbol (t ,scale ...);TstAddSymbol (t ,_ebee ,_fcaf ,_gdda ,_ffbd ,1*_eceg );
_fcaf =TstESymbol (t ,scale ...);TstAddSymbol (t ,_ebee ,_fcaf ,_gdda ,_ffbd ,1*_eceg );_fcaf =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_ebee ,_fcaf ,_gdda ,_ffbd ,0);TstWriteSymbols (t ,_ebee ,_gfdf );return _gfdf ;};func Blit (src *Bitmap ,dst *Bitmap ,x ,y int ,op CombinationOperator )error {var _fcga ,_fbb int ;
_bffb :=src .RowStride -1;if x < 0{_fbb =-x ;x =0;}else if x +src .Width > dst .Width {_bffb -=src .Width +x -dst .Width ;};if y < 0{_fcga =-y ;y =0;_fbb +=src .RowStride ;_bffb +=src .RowStride ;}else if y +src .Height > dst .Height {_fcga =src .Height +y -dst .Height ;
};var (_fddge int ;_bbbf error ;);_gdfe :=x &0x07;_cgb :=8-_gdfe ;_acc :=src .Width &0x07;_ada :=_cgb -_acc ;_bbgd :=_cgb &0x07!=0;_cfba :=src .Width <=((_bffb -_fbb )<<3)+_cgb ;_ecce :=dst .GetByteIndex (x ,y );_gba :=_fcga +dst .Height ;if src .Height > _gba {_fddge =_gba ;
}else {_fddge =src .Height ;};switch {case !_bbgd :_bbbf =_abcc (src ,dst ,_fcga ,_fddge ,_ecce ,_fbb ,_bffb ,op );case _cfba :_bbbf =_dbce (src ,dst ,_fcga ,_fddge ,_ecce ,_fbb ,_bffb ,_ada ,_gdfe ,_cgb ,op );default:_bbbf =_ggcd (src ,dst ,_fcga ,_fddge ,_ecce ,_fbb ,_bffb ,_ada ,_gdfe ,_cgb ,op ,_acc );
};return _bbbf ;};func _dbce (_gfgf ,_fbeg *Bitmap ,_edb ,_agca ,_aff ,_eccg ,_cgfe ,_daac ,_bedf ,_dfbf int ,_fea CombinationOperator )error {var _fcdg int ;_gbd :=func (){_fcdg ++;_aff +=_fbeg .RowStride ;_eccg +=_gfgf .RowStride ;_cgfe +=_gfgf .RowStride };
for _fcdg =_edb ;_fcdg < _agca ;_gbd (){var _fgad uint16 ;_fae :=_aff ;for _aged :=_eccg ;_aged <=_cgfe ;_aged ++{_eefg ,_fgc :=_fbeg .GetByte (_fae );if _fgc !=nil {return _fgc ;};_dede ,_fgc :=_gfgf .GetByte (_aged );if _fgc !=nil {return _fgc ;};_fgad =(_fgad |uint16 (_dede ))<<uint (_dfbf );
_dede =byte (_fgad >>8);if _aged ==_cgfe {_dede =_cdag (uint (_daac ),_dede );};if _fgc =_fbeg .SetByte (_fae ,_eggc (_eefg ,_dede ,_fea ));_fgc !=nil {return _fgc ;};_fae ++;_fgad <<=uint (_bedf );};};return nil ;};func (_fedg *Bitmap )SetDefaultPixel (){for _ffg :=range _fedg .Data {_fedg .Data [_ffg ]=byte (0xff);
};};func _gbcgd (_abecb ,_bcac int ,_aeaag string )*Selection {_fcbg :=&Selection {Height :_abecb ,Width :_bcac ,Name :_aeaag };_fcbg .Data =make ([][]SelectionValue ,_abecb );for _fbfa :=0;_fbfa < _abecb ;_fbfa ++{_fcbg .Data [_fbfa ]=make ([]SelectionValue ,_bcac );
};return _fcbg ;};func TstWriteSymbols (t *_ac .T ,bms *Bitmaps ,src *Bitmap ){for _daaf :=0;_daaf < bms .Size ();_daaf ++{_cdg :=bms .Values [_daaf ];_eebgb :=bms .Boxes [_daaf ];_bgef :=src .RasterOperation (_eebgb .Min .X ,_eebgb .Min .Y ,_cdg .Width ,_cdg .Height ,PixSrc ,_cdg ,0,0);
_af .NoError (t ,_bgef );};};func (_eded *Boxes )makeSizeIndicator (_gded ,_agga int ,_aaad LocationFilter ,_cdfb SizeComparison )*_bb .NumSlice {_deae :=&_bb .NumSlice {};var _dadb ,_eebf ,_affe int ;for _ ,_bge :=range *_eded {_dadb =0;_eebf ,_affe =_bge .Dx (),_bge .Dy ();
switch _aaad {case LocSelectWidth :if (_cdfb ==SizeSelectIfLT &&_eebf < _gded )||(_cdfb ==SizeSelectIfGT &&_eebf > _gded )||(_cdfb ==SizeSelectIfLTE &&_eebf <=_gded )||(_cdfb ==SizeSelectIfGTE &&_eebf >=_gded ){_dadb =1;};case LocSelectHeight :if (_cdfb ==SizeSelectIfLT &&_affe < _agga )||(_cdfb ==SizeSelectIfGT &&_affe > _agga )||(_cdfb ==SizeSelectIfLTE &&_affe <=_agga )||(_cdfb ==SizeSelectIfGTE &&_affe >=_agga ){_dadb =1;
};case LocSelectIfEither :if (_cdfb ==SizeSelectIfLT &&(_affe < _agga ||_eebf < _gded ))||(_cdfb ==SizeSelectIfGT &&(_affe > _agga ||_eebf > _gded ))||(_cdfb ==SizeSelectIfLTE &&(_affe <=_agga ||_eebf <=_gded ))||(_cdfb ==SizeSelectIfGTE &&(_affe >=_agga ||_eebf >=_gded )){_dadb =1;
};case LocSelectIfBoth :if (_cdfb ==SizeSelectIfLT &&(_affe < _agga &&_eebf < _gded ))||(_cdfb ==SizeSelectIfGT &&(_affe > _agga &&_eebf > _gded ))||(_cdfb ==SizeSelectIfLTE &&(_affe <=_agga &&_eebf <=_gded ))||(_cdfb ==SizeSelectIfGTE &&(_affe >=_agga &&_eebf >=_gded )){_dadb =1;
};};_deae .AddInt (_dadb );};return _deae ;};func _bgcg (_bcgd *Bitmap ,_abdd ,_gbca ,_bgcd ,_eggg int ,_bfcaa RasterOperator ,_egd *Bitmap ,_geaeb ,_eddef int )error {var (_gdgd byte ;_dgfae int ;_dfbee int ;_abbfb ,_eedc int ;_ffde ,_afcb int ;);_cfcdc :=_bgcd >>3;
_cefg :=_bgcd &7;if _cefg > 0{_gdgd =_fgb [_cefg ];};_dgfae =_egd .RowStride *_eddef +(_geaeb >>3);_dfbee =_bcgd .RowStride *_gbca +(_abdd >>3);switch _bfcaa {case PixSrc :for _ffde =0;_ffde < _eggg ;_ffde ++{_abbfb =_dgfae +_ffde *_egd .RowStride ;_eedc =_dfbee +_ffde *_bcgd .RowStride ;
for _afcb =0;_afcb < _cfcdc ;_afcb ++{_bcgd .Data [_eedc ]=_egd .Data [_abbfb ];_eedc ++;_abbfb ++;};if _cefg > 0{_bcgd .Data [_eedc ]=_ceec (_bcgd .Data [_eedc ],_egd .Data [_abbfb ],_gdgd );};};case PixNotSrc :for _ffde =0;_ffde < _eggg ;_ffde ++{_abbfb =_dgfae +_ffde *_egd .RowStride ;
_eedc =_dfbee +_ffde *_bcgd .RowStride ;for _afcb =0;_afcb < _cfcdc ;_afcb ++{_bcgd .Data [_eedc ]=^(_egd .Data [_abbfb ]);_eedc ++;_abbfb ++;};if _cefg > 0{_bcgd .Data [_eedc ]=_ceec (_bcgd .Data [_eedc ],^_egd .Data [_abbfb ],_gdgd );};};case PixSrcOrDst :for _ffde =0;
_ffde < _eggg ;_ffde ++{_abbfb =_dgfae +_ffde *_egd .RowStride ;_eedc =_dfbee +_ffde *_bcgd .RowStride ;for _afcb =0;_afcb < _cfcdc ;_afcb ++{_bcgd .Data [_eedc ]|=_egd .Data [_abbfb ];_eedc ++;_abbfb ++;};if _cefg > 0{_bcgd .Data [_eedc ]=_ceec (_bcgd .Data [_eedc ],_egd .Data [_abbfb ]|_bcgd .Data [_eedc ],_gdgd );
};};case PixSrcAndDst :for _ffde =0;_ffde < _eggg ;_ffde ++{_abbfb =_dgfae +_ffde *_egd .RowStride ;_eedc =_dfbee +_ffde *_bcgd .RowStride ;for _afcb =0;_afcb < _cfcdc ;_afcb ++{_bcgd .Data [_eedc ]&=_egd .Data [_abbfb ];_eedc ++;_abbfb ++;};if _cefg > 0{_bcgd .Data [_eedc ]=_ceec (_bcgd .Data [_eedc ],_egd .Data [_abbfb ]&_bcgd .Data [_eedc ],_gdgd );
};};case PixSrcXorDst :for _ffde =0;_ffde < _eggg ;_ffde ++{_abbfb =_dgfae +_ffde *_egd .RowStride ;_eedc =_dfbee +_ffde *_bcgd .RowStride ;for _afcb =0;_afcb < _cfcdc ;_afcb ++{_bcgd .Data [_eedc ]^=_egd .Data [_abbfb ];_eedc ++;_abbfb ++;};if _cefg > 0{_bcgd .Data [_eedc ]=_ceec (_bcgd .Data [_eedc ],_egd .Data [_abbfb ]^_bcgd .Data [_eedc ],_gdgd );
};};case PixNotSrcOrDst :for _ffde =0;_ffde < _eggg ;_ffde ++{_abbfb =_dgfae +_ffde *_egd .RowStride ;_eedc =_dfbee +_ffde *_bcgd .RowStride ;for _afcb =0;_afcb < _cfcdc ;_afcb ++{_bcgd .Data [_eedc ]|=^(_egd .Data [_abbfb ]);_eedc ++;_abbfb ++;};if _cefg > 0{_bcgd .Data [_eedc ]=_ceec (_bcgd .Data [_eedc ],^(_egd .Data [_abbfb ])|_bcgd .Data [_eedc ],_gdgd );
};};case PixNotSrcAndDst :for _ffde =0;_ffde < _eggg ;_ffde ++{_abbfb =_dgfae +_ffde *_egd .RowStride ;_eedc =_dfbee +_ffde *_bcgd .RowStride ;for _afcb =0;_afcb < _cfcdc ;_afcb ++{_bcgd .Data [_eedc ]&=^(_egd .Data [_abbfb ]);_eedc ++;_abbfb ++;};if _cefg > 0{_bcgd .Data [_eedc ]=_ceec (_bcgd .Data [_eedc ],^(_egd .Data [_abbfb ])&_bcgd .Data [_eedc ],_gdgd );
};};case PixSrcOrNotDst :for _ffde =0;_ffde < _eggg ;_ffde ++{_abbfb =_dgfae +_ffde *_egd .RowStride ;_eedc =_dfbee +_ffde *_bcgd .RowStride ;for _afcb =0;_afcb < _cfcdc ;_afcb ++{_bcgd .Data [_eedc ]=_egd .Data [_abbfb ]|^(_bcgd .Data [_eedc ]);_eedc ++;
_abbfb ++;};if _cefg > 0{_bcgd .Data [_eedc ]=_ceec (_bcgd .Data [_eedc ],_egd .Data [_abbfb ]|^(_bcgd .Data [_eedc ]),_gdgd );};};case PixSrcAndNotDst :for _ffde =0;_ffde < _eggg ;_ffde ++{_abbfb =_dgfae +_ffde *_egd .RowStride ;_eedc =_dfbee +_ffde *_bcgd .RowStride ;
for _afcb =0;_afcb < _cfcdc ;_afcb ++{_bcgd .Data [_eedc ]=_egd .Data [_abbfb ]&^(_bcgd .Data [_eedc ]);_eedc ++;_abbfb ++;};if _cefg > 0{_bcgd .Data [_eedc ]=_ceec (_bcgd .Data [_eedc ],_egd .Data [_abbfb ]&^(_bcgd .Data [_eedc ]),_gdgd );};};case PixNotPixSrcOrDst :for _ffde =0;
_ffde < _eggg ;_ffde ++{_abbfb =_dgfae +_ffde *_egd .RowStride ;_eedc =_dfbee +_ffde *_bcgd .RowStride ;for _afcb =0;_afcb < _cfcdc ;_afcb ++{_bcgd .Data [_eedc ]=^(_egd .Data [_abbfb ]|_bcgd .Data [_eedc ]);_eedc ++;_abbfb ++;};if _cefg > 0{_bcgd .Data [_eedc ]=_ceec (_bcgd .Data [_eedc ],^(_egd .Data [_abbfb ]|_bcgd .Data [_eedc ]),_gdgd );
};};case PixNotPixSrcAndDst :for _ffde =0;_ffde < _eggg ;_ffde ++{_abbfb =_dgfae +_ffde *_egd .RowStride ;_eedc =_dfbee +_ffde *_bcgd .RowStride ;for _afcb =0;_afcb < _cfcdc ;_afcb ++{_bcgd .Data [_eedc ]=^(_egd .Data [_abbfb ]&_bcgd .Data [_eedc ]);_eedc ++;
_abbfb ++;};if _cefg > 0{_bcgd .Data [_eedc ]=_ceec (_bcgd .Data [_eedc ],^(_egd .Data [_abbfb ]&_bcgd .Data [_eedc ]),_gdgd );};};case PixNotPixSrcXorDst :for _ffde =0;_ffde < _eggg ;_ffde ++{_abbfb =_dgfae +_ffde *_egd .RowStride ;_eedc =_dfbee +_ffde *_bcgd .RowStride ;
for _afcb =0;_afcb < _cfcdc ;_afcb ++{_bcgd .Data [_eedc ]=^(_egd .Data [_abbfb ]^_bcgd .Data [_eedc ]);_eedc ++;_abbfb ++;};if _cefg > 0{_bcgd .Data [_eedc ]=_ceec (_bcgd .Data [_eedc ],^(_egd .Data [_abbfb ]^_bcgd .Data [_eedc ]),_gdgd );};};default:_g .Log .Debug ("\u0050\u0072ov\u0069\u0064\u0065d\u0020\u0069\u006e\u0076ali\u0064 r\u0061\u0073\u0074\u0065\u0072\u0020\u006fpe\u0072\u0061\u0074\u006f\u0072\u003a\u0020%\u0076",_bfcaa );
return _a .Error ("\u0072\u0061\u0073\u0074er\u004f\u0070\u0042\u0079\u0074\u0065\u0041\u006c\u0069\u0067\u006e\u0065\u0064\u004co\u0077","\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");
};return nil ;};func _egbe (_fdf ,_edd *Bitmap ,_cbd int ,_ag []byte ,_fba int )(_cab error ){const _bce ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0032";var (_gbb ,_cac ,_gcc ,_dgd ,_gf ,_aec ,_ccc ,_feg int ;
_ccg ,_ddde ,_gag ,_ggb uint32 ;_bef ,_gfg byte ;_cccd uint16 ;);_eecf :=make ([]byte ,4);_aa :=make ([]byte ,4);for _gcc =0;_gcc < _fdf .Height -1;_gcc ,_dgd =_gcc +2,_dgd +1{_gbb =_gcc *_fdf .RowStride ;_cac =_dgd *_edd .RowStride ;for _gf ,_aec =0,0;
_gf < _fba ;_gf ,_aec =_gf +4,_aec +1{for _ccc =0;_ccc < 4;_ccc ++{_feg =_gbb +_gf +_ccc ;if _feg <=len (_fdf .Data )-1&&_feg < _gbb +_fdf .RowStride {_eecf [_ccc ]=_fdf .Data [_feg ];}else {_eecf [_ccc ]=0x00;};_feg =_gbb +_fdf .RowStride +_gf +_ccc ;
if _feg <=len (_fdf .Data )-1&&_feg < _gbb +(2*_fdf .RowStride ){_aa [_ccc ]=_fdf .Data [_feg ];}else {_aa [_ccc ]=0x00;};};_ccg =_f .BigEndian .Uint32 (_eecf );_ddde =_f .BigEndian .Uint32 (_aa );_gag =_ccg &_ddde ;_gag |=_gag <<1;_ggb =_ccg |_ddde ;_ggb &=_ggb <<1;
_ddde =_gag |_ggb ;_ddde &=0xaaaaaaaa;_ccg =_ddde |(_ddde <<7);_bef =byte (_ccg >>24);_gfg =byte ((_ccg >>8)&0xff);_feg =_cac +_aec ;if _feg +1==len (_edd .Data )-1||_feg +1>=_cac +_edd .RowStride {if _cab =_edd .SetByte (_feg ,_ag [_bef ]);_cab !=nil {return _a .Wrapf (_cab ,_bce ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_feg );
};}else {_cccd =(uint16 (_ag [_bef ])<<8)|uint16 (_ag [_gfg ]);if _cab =_edd .setTwoBytes (_feg ,_cccd );_cab !=nil {return _a .Wrapf (_cab ,_bce ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_feg );
};_aec ++;};};};return nil ;};type shift int ;func (_bcd *ClassedPoints )GetIntXByClass (i int )(int ,error ){const _bbdd ="\u0043\u006c\u0061\u0073s\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047e\u0074I\u006e\u0074\u0059\u0042\u0079\u0043\u006ca\u0073\u0073";
if i >=_bcd .IntSlice .Size (){return 0,_a .Errorf (_bbdd ,"\u0069\u003a\u0020\u0027\u0025\u0064\u0027 \u0069\u0073\u0020o\u0075\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065",i );
};return int (_bcd .XAtIndex (i )),nil ;};func (_cgdcf *ClassedPoints )Len ()int {return _cgdcf .IntSlice .Size ()};func (_aeaa *Boxes )Get (i int )(*_bf .Rectangle ,error ){const _aca ="\u0042o\u0078\u0065\u0073\u002e\u0047\u0065t";if _aeaa ==nil {return nil ,_a .Error (_aca ,"\u0027\u0042\u006f\u0078es\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if i > len (*_aeaa )-1{return nil ,_a .Errorf (_aca ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return (*_aeaa )[i ],nil ;};func (_bffg *Bitmaps )makeSizeIndicator (_cfcdd ,_ceae int ,_egde LocationFilter ,_aagg SizeComparison )(_aeaga *_bb .NumSlice ,_faga error ){const _ebbe ="\u0042i\u0074\u006d\u0061\u0070s\u002e\u006d\u0061\u006b\u0065S\u0069z\u0065I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";
if _bffg ==nil {return nil ,_a .Error (_ebbe ,"\u0062\u0069\u0074ma\u0070\u0073\u0020\u0027\u0062\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};switch _egde {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_a .Errorf (_ebbe ,"\u0070\u0072\u006f\u0076\u0069d\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u006fc\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",_egde );
};switch _aagg {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE ,SizeSelectIfEQ :default:return nil ,_a .Errorf (_ebbe ,"\u0069\u006e\u0076\u0061li\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025d\u0027",_aagg );
};_aeaga =&_bb .NumSlice {};var (_dgbfc ,_ddfa ,_adbd int ;_dbbff *Bitmap ;);for _ ,_dbbff =range _bffg .Values {_dgbfc =0;_ddfa ,_adbd =_dbbff .Width ,_dbbff .Height ;switch _egde {case LocSelectWidth :if (_aagg ==SizeSelectIfLT &&_ddfa < _cfcdd )||(_aagg ==SizeSelectIfGT &&_ddfa > _cfcdd )||(_aagg ==SizeSelectIfLTE &&_ddfa <=_cfcdd )||(_aagg ==SizeSelectIfGTE &&_ddfa >=_cfcdd )||(_aagg ==SizeSelectIfEQ &&_ddfa ==_cfcdd ){_dgbfc =1;
};case LocSelectHeight :if (_aagg ==SizeSelectIfLT &&_adbd < _ceae )||(_aagg ==SizeSelectIfGT &&_adbd > _ceae )||(_aagg ==SizeSelectIfLTE &&_adbd <=_ceae )||(_aagg ==SizeSelectIfGTE &&_adbd >=_ceae )||(_aagg ==SizeSelectIfEQ &&_adbd ==_ceae ){_dgbfc =1;
};case LocSelectIfEither :if (_aagg ==SizeSelectIfLT &&(_ddfa < _cfcdd ||_adbd < _ceae ))||(_aagg ==SizeSelectIfGT &&(_ddfa > _cfcdd ||_adbd > _ceae ))||(_aagg ==SizeSelectIfLTE &&(_ddfa <=_cfcdd ||_adbd <=_ceae ))||(_aagg ==SizeSelectIfGTE &&(_ddfa >=_cfcdd ||_adbd >=_ceae ))||(_aagg ==SizeSelectIfEQ &&(_ddfa ==_cfcdd ||_adbd ==_ceae )){_dgbfc =1;
};case LocSelectIfBoth :if (_aagg ==SizeSelectIfLT &&(_ddfa < _cfcdd &&_adbd < _ceae ))||(_aagg ==SizeSelectIfGT &&(_ddfa > _cfcdd &&_adbd > _ceae ))||(_aagg ==SizeSelectIfLTE &&(_ddfa <=_cfcdd &&_adbd <=_ceae ))||(_aagg ==SizeSelectIfGTE &&(_ddfa >=_cfcdd &&_adbd >=_ceae ))||(_aagg ==SizeSelectIfEQ &&(_ddfa ==_cfcdd &&_adbd ==_ceae )){_dgbfc =1;
};};_aeaga .AddInt (_dgbfc );};return _aeaga ,nil ;};func _cdfg (_dgbbg *Bitmap ,_bcdf ,_abgcc ,_bagg ,_ddga int ,_efce RasterOperator ,_aada *Bitmap ,_gfdd ,_geaab int )error {var (_cgfa bool ;_adca bool ;_fdcd int ;_egeb int ;_cgeb int ;_afab bool ;_bgbf byte ;
_cfdd int ;_eggae int ;_bfac int ;_ccfa ,_efbg int ;);_fabdd :=8-(_bcdf &7);_ddfd :=_ggadb [_fabdd ];_cffb :=_dgbbg .RowStride *_abgcc +(_bcdf >>3);_bcae :=_aada .RowStride *_geaab +(_gfdd >>3);if _bagg < _fabdd {_cgfa =true ;_ddfd &=_fgb [8-_fabdd +_bagg ];
};if !_cgfa {_fdcd =(_bagg -_fabdd )>>3;if _fdcd > 0{_adca =true ;_egeb =_cffb +1;_cgeb =_bcae +1;};};_cfdd =(_bcdf +_bagg )&7;if !(_cgfa ||_cfdd ==0){_afab =true ;_bgbf =_fgb [_cfdd ];_eggae =_cffb +1+_fdcd ;_bfac =_bcae +1+_fdcd ;};switch _efce {case PixSrc :for _ccfa =0;
_ccfa < _ddga ;_ccfa ++{_dgbbg .Data [_cffb ]=_ceec (_dgbbg .Data [_cffb ],_aada .Data [_bcae ],_ddfd );_cffb +=_dgbbg .RowStride ;_bcae +=_aada .RowStride ;};if _adca {for _ccfa =0;_ccfa < _ddga ;_ccfa ++{for _efbg =0;_efbg < _fdcd ;_efbg ++{_dgbbg .Data [_egeb +_efbg ]=_aada .Data [_cgeb +_efbg ];
};_egeb +=_dgbbg .RowStride ;_cgeb +=_aada .RowStride ;};};if _afab {for _ccfa =0;_ccfa < _ddga ;_ccfa ++{_dgbbg .Data [_eggae ]=_ceec (_dgbbg .Data [_eggae ],_aada .Data [_bfac ],_bgbf );_eggae +=_dgbbg .RowStride ;_bfac +=_aada .RowStride ;};};case PixNotSrc :for _ccfa =0;
_ccfa < _ddga ;_ccfa ++{_dgbbg .Data [_cffb ]=_ceec (_dgbbg .Data [_cffb ],^_aada .Data [_bcae ],_ddfd );_cffb +=_dgbbg .RowStride ;_bcae +=_aada .RowStride ;};if _adca {for _ccfa =0;_ccfa < _ddga ;_ccfa ++{for _efbg =0;_efbg < _fdcd ;_efbg ++{_dgbbg .Data [_egeb +_efbg ]=^_aada .Data [_cgeb +_efbg ];
};_egeb +=_dgbbg .RowStride ;_cgeb +=_aada .RowStride ;};};if _afab {for _ccfa =0;_ccfa < _ddga ;_ccfa ++{_dgbbg .Data [_eggae ]=_ceec (_dgbbg .Data [_eggae ],^_aada .Data [_bfac ],_bgbf );_eggae +=_dgbbg .RowStride ;_bfac +=_aada .RowStride ;};};case PixSrcOrDst :for _ccfa =0;
_ccfa < _ddga ;_ccfa ++{_dgbbg .Data [_cffb ]=_ceec (_dgbbg .Data [_cffb ],_aada .Data [_bcae ]|_dgbbg .Data [_cffb ],_ddfd );_cffb +=_dgbbg .RowStride ;_bcae +=_aada .RowStride ;};if _adca {for _ccfa =0;_ccfa < _ddga ;_ccfa ++{for _efbg =0;_efbg < _fdcd ;
_efbg ++{_dgbbg .Data [_egeb +_efbg ]|=_aada .Data [_cgeb +_efbg ];};_egeb +=_dgbbg .RowStride ;_cgeb +=_aada .RowStride ;};};if _afab {for _ccfa =0;_ccfa < _ddga ;_ccfa ++{_dgbbg .Data [_eggae ]=_ceec (_dgbbg .Data [_eggae ],_aada .Data [_bfac ]|_dgbbg .Data [_eggae ],_bgbf );
_eggae +=_dgbbg .RowStride ;_bfac +=_aada .RowStride ;};};case PixSrcAndDst :for _ccfa =0;_ccfa < _ddga ;_ccfa ++{_dgbbg .Data [_cffb ]=_ceec (_dgbbg .Data [_cffb ],_aada .Data [_bcae ]&_dgbbg .Data [_cffb ],_ddfd );_cffb +=_dgbbg .RowStride ;_bcae +=_aada .RowStride ;
};if _adca {for _ccfa =0;_ccfa < _ddga ;_ccfa ++{for _efbg =0;_efbg < _fdcd ;_efbg ++{_dgbbg .Data [_egeb +_efbg ]&=_aada .Data [_cgeb +_efbg ];};_egeb +=_dgbbg .RowStride ;_cgeb +=_aada .RowStride ;};};if _afab {for _ccfa =0;_ccfa < _ddga ;_ccfa ++{_dgbbg .Data [_eggae ]=_ceec (_dgbbg .Data [_eggae ],_aada .Data [_bfac ]&_dgbbg .Data [_eggae ],_bgbf );
_eggae +=_dgbbg .RowStride ;_bfac +=_aada .RowStride ;};};case PixSrcXorDst :for _ccfa =0;_ccfa < _ddga ;_ccfa ++{_dgbbg .Data [_cffb ]=_ceec (_dgbbg .Data [_cffb ],_aada .Data [_bcae ]^_dgbbg .Data [_cffb ],_ddfd );_cffb +=_dgbbg .RowStride ;_bcae +=_aada .RowStride ;
};if _adca {for _ccfa =0;_ccfa < _ddga ;_ccfa ++{for _efbg =0;_efbg < _fdcd ;_efbg ++{_dgbbg .Data [_egeb +_efbg ]^=_aada .Data [_cgeb +_efbg ];};_egeb +=_dgbbg .RowStride ;_cgeb +=_aada .RowStride ;};};if _afab {for _ccfa =0;_ccfa < _ddga ;_ccfa ++{_dgbbg .Data [_eggae ]=_ceec (_dgbbg .Data [_eggae ],_aada .Data [_bfac ]^_dgbbg .Data [_eggae ],_bgbf );
_eggae +=_dgbbg .RowStride ;_bfac +=_aada .RowStride ;};};case PixNotSrcOrDst :for _ccfa =0;_ccfa < _ddga ;_ccfa ++{_dgbbg .Data [_cffb ]=_ceec (_dgbbg .Data [_cffb ],^(_aada .Data [_bcae ])|_dgbbg .Data [_cffb ],_ddfd );_cffb +=_dgbbg .RowStride ;_bcae +=_aada .RowStride ;
};if _adca {for _ccfa =0;_ccfa < _ddga ;_ccfa ++{for _efbg =0;_efbg < _fdcd ;_efbg ++{_dgbbg .Data [_egeb +_efbg ]|=^(_aada .Data [_cgeb +_efbg ]);};_egeb +=_dgbbg .RowStride ;_cgeb +=_aada .RowStride ;};};if _afab {for _ccfa =0;_ccfa < _ddga ;_ccfa ++{_dgbbg .Data [_eggae ]=_ceec (_dgbbg .Data [_eggae ],^(_aada .Data [_bfac ])|_dgbbg .Data [_eggae ],_bgbf );
_eggae +=_dgbbg .RowStride ;_bfac +=_aada .RowStride ;};};case PixNotSrcAndDst :for _ccfa =0;_ccfa < _ddga ;_ccfa ++{_dgbbg .Data [_cffb ]=_ceec (_dgbbg .Data [_cffb ],^(_aada .Data [_bcae ])&_dgbbg .Data [_cffb ],_ddfd );_cffb +=_dgbbg .RowStride ;_bcae +=_aada .RowStride ;
};if _adca {for _ccfa =0;_ccfa < _ddga ;_ccfa ++{for _efbg =0;_efbg < _fdcd ;_efbg ++{_dgbbg .Data [_egeb +_efbg ]&=^_aada .Data [_cgeb +_efbg ];};_egeb +=_dgbbg .RowStride ;_cgeb +=_aada .RowStride ;};};if _afab {for _ccfa =0;_ccfa < _ddga ;_ccfa ++{_dgbbg .Data [_eggae ]=_ceec (_dgbbg .Data [_eggae ],^(_aada .Data [_bfac ])&_dgbbg .Data [_eggae ],_bgbf );
_eggae +=_dgbbg .RowStride ;_bfac +=_aada .RowStride ;};};case PixSrcOrNotDst :for _ccfa =0;_ccfa < _ddga ;_ccfa ++{_dgbbg .Data [_cffb ]=_ceec (_dgbbg .Data [_cffb ],_aada .Data [_bcae ]|^(_dgbbg .Data [_cffb ]),_ddfd );_cffb +=_dgbbg .RowStride ;_bcae +=_aada .RowStride ;
};if _adca {for _ccfa =0;_ccfa < _ddga ;_ccfa ++{for _efbg =0;_efbg < _fdcd ;_efbg ++{_dgbbg .Data [_egeb +_efbg ]=_aada .Data [_cgeb +_efbg ]|^(_dgbbg .Data [_egeb +_efbg ]);};_egeb +=_dgbbg .RowStride ;_cgeb +=_aada .RowStride ;};};if _afab {for _ccfa =0;
_ccfa < _ddga ;_ccfa ++{_dgbbg .Data [_eggae ]=_ceec (_dgbbg .Data [_eggae ],_aada .Data [_bfac ]|^(_dgbbg .Data [_eggae ]),_bgbf );_eggae +=_dgbbg .RowStride ;_bfac +=_aada .RowStride ;};};case PixSrcAndNotDst :for _ccfa =0;_ccfa < _ddga ;_ccfa ++{_dgbbg .Data [_cffb ]=_ceec (_dgbbg .Data [_cffb ],_aada .Data [_bcae ]&^(_dgbbg .Data [_cffb ]),_ddfd );
_cffb +=_dgbbg .RowStride ;_bcae +=_aada .RowStride ;};if _adca {for _ccfa =0;_ccfa < _ddga ;_ccfa ++{for _efbg =0;_efbg < _fdcd ;_efbg ++{_dgbbg .Data [_egeb +_efbg ]=_aada .Data [_cgeb +_efbg ]&^(_dgbbg .Data [_egeb +_efbg ]);};_egeb +=_dgbbg .RowStride ;
_cgeb +=_aada .RowStride ;};};if _afab {for _ccfa =0;_ccfa < _ddga ;_ccfa ++{_dgbbg .Data [_eggae ]=_ceec (_dgbbg .Data [_eggae ],_aada .Data [_bfac ]&^(_dgbbg .Data [_eggae ]),_bgbf );_eggae +=_dgbbg .RowStride ;_bfac +=_aada .RowStride ;};};case PixNotPixSrcOrDst :for _ccfa =0;
_ccfa < _ddga ;_ccfa ++{_dgbbg .Data [_cffb ]=_ceec (_dgbbg .Data [_cffb ],^(_aada .Data [_bcae ]|_dgbbg .Data [_cffb ]),_ddfd );_cffb +=_dgbbg .RowStride ;_bcae +=_aada .RowStride ;};if _adca {for _ccfa =0;_ccfa < _ddga ;_ccfa ++{for _efbg =0;_efbg < _fdcd ;
_efbg ++{_dgbbg .Data [_egeb +_efbg ]=^(_aada .Data [_cgeb +_efbg ]|_dgbbg .Data [_egeb +_efbg ]);};_egeb +=_dgbbg .RowStride ;_cgeb +=_aada .RowStride ;};};if _afab {for _ccfa =0;_ccfa < _ddga ;_ccfa ++{_dgbbg .Data [_eggae ]=_ceec (_dgbbg .Data [_eggae ],^(_aada .Data [_bfac ]|_dgbbg .Data [_eggae ]),_bgbf );
_eggae +=_dgbbg .RowStride ;_bfac +=_aada .RowStride ;};};case PixNotPixSrcAndDst :for _ccfa =0;_ccfa < _ddga ;_ccfa ++{_dgbbg .Data [_cffb ]=_ceec (_dgbbg .Data [_cffb ],^(_aada .Data [_bcae ]&_dgbbg .Data [_cffb ]),_ddfd );_cffb +=_dgbbg .RowStride ;
_bcae +=_aada .RowStride ;};if _adca {for _ccfa =0;_ccfa < _ddga ;_ccfa ++{for _efbg =0;_efbg < _fdcd ;_efbg ++{_dgbbg .Data [_egeb +_efbg ]=^(_aada .Data [_cgeb +_efbg ]&_dgbbg .Data [_egeb +_efbg ]);};_egeb +=_dgbbg .RowStride ;_cgeb +=_aada .RowStride ;
};};if _afab {for _ccfa =0;_ccfa < _ddga ;_ccfa ++{_dgbbg .Data [_eggae ]=_ceec (_dgbbg .Data [_eggae ],^(_aada .Data [_bfac ]&_dgbbg .Data [_eggae ]),_bgbf );_eggae +=_dgbbg .RowStride ;_bfac +=_aada .RowStride ;};};case PixNotPixSrcXorDst :for _ccfa =0;
_ccfa < _ddga ;_ccfa ++{_dgbbg .Data [_cffb ]=_ceec (_dgbbg .Data [_cffb ],^(_aada .Data [_bcae ]^_dgbbg .Data [_cffb ]),_ddfd );_cffb +=_dgbbg .RowStride ;_bcae +=_aada .RowStride ;};if _adca {for _ccfa =0;_ccfa < _ddga ;_ccfa ++{for _efbg =0;_efbg < _fdcd ;
_efbg ++{_dgbbg .Data [_egeb +_efbg ]=^(_aada .Data [_cgeb +_efbg ]^_dgbbg .Data [_egeb +_efbg ]);};_egeb +=_dgbbg .RowStride ;_cgeb +=_aada .RowStride ;};};if _afab {for _ccfa =0;_ccfa < _ddga ;_ccfa ++{_dgbbg .Data [_eggae ]=_ceec (_dgbbg .Data [_eggae ],^(_aada .Data [_bfac ]^_dgbbg .Data [_eggae ]),_bgbf );
_eggae +=_dgbbg .RowStride ;_bfac +=_aada .RowStride ;};};default:_g .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070e\u0072\u0061\u0074o\u0072:\u0020\u0025\u0064",_efce );return _a .Error ("\u0072\u0061\u0073\u0074er\u004f\u0070\u0056\u0041\u006c\u0069\u0067\u006e\u0065\u0064\u004c\u006f\u0077","\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");
};return nil ;};func _fddf (_gfee *Bitmap ,_ccabg *Bitmap ,_cecd *Selection ,_bdgg **Bitmap )(*Bitmap ,error ){const _fbgf ="\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u004d\u006f\u0072\u0070\u0068A\u0072\u0067\u0073\u0031";if _ccabg ==nil {return nil ,_a .Error (_fbgf ,"\u004d\u006f\u0072\u0070\u0068\u0041\u0072\u0067\u0073\u0031\u0020'\u0073\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066i\u006e\u0065\u0064");
};if _cecd ==nil {return nil ,_a .Error (_fbgf ,"\u004d\u006f\u0072\u0068p\u0041\u0072\u0067\u0073\u0031\u0020\u0027\u0073\u0065\u006c'\u0020n\u006f\u0074\u0020\u0064\u0065\u0066\u0069n\u0065\u0064");};_baec ,_bdca :=_cecd .Height ,_cecd .Width ;if _baec ==0||_bdca ==0{return nil ,_a .Error (_fbgf ,"\u0073\u0065\u006c\u0065ct\u0069\u006f\u006e\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u0020\u0030");
};if _gfee ==nil {_gfee =_ccabg .createTemplate ();*_bdgg =_ccabg ;return _gfee ,nil ;};_gfee .Width =_ccabg .Width ;_gfee .Height =_ccabg .Height ;_gfee .RowStride =_ccabg .RowStride ;_gfee .Color =_ccabg .Color ;_gfee .Data =make ([]byte ,_ccabg .RowStride *_ccabg .Height );
if _gfee ==_ccabg {*_bdgg =_ccabg .Copy ();}else {*_bdgg =_ccabg ;};return _gfee ,nil ;};func _gcff (_afbc ,_bgecc *Bitmap ,_dfee ,_abgd int )(_bcc error ){const _fbaa ="\u0073e\u0065d\u0066\u0069\u006c\u006c\u0042i\u006e\u0061r\u0079\u004c\u006f\u0077\u0034";
var (_ceecf ,_becgg ,_egeac ,_faccd int ;_gabd ,_acad ,_ccaa ,_adedg ,_gbgb ,_fada ,_eebaa byte ;);for _ceecf =0;_ceecf < _dfee ;_ceecf ++{_egeac =_ceecf *_afbc .RowStride ;_faccd =_ceecf *_bgecc .RowStride ;for _becgg =0;_becgg < _abgd ;_becgg ++{_gabd ,_bcc =_afbc .GetByte (_egeac +_becgg );
if _bcc !=nil {return _a .Wrap (_bcc ,_fbaa ,"\u0066i\u0072\u0073\u0074\u0020\u0067\u0065t");};_acad ,_bcc =_bgecc .GetByte (_faccd +_becgg );if _bcc !=nil {return _a .Wrap (_bcc ,_fbaa ,"\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0067\u0065\u0074");};
if _ceecf > 0{_ccaa ,_bcc =_afbc .GetByte (_egeac -_afbc .RowStride +_becgg );if _bcc !=nil {return _a .Wrap (_bcc ,_fbaa ,"\u0069\u0020\u003e \u0030");};_gabd |=_ccaa ;};if _becgg > 0{_adedg ,_bcc =_afbc .GetByte (_egeac +_becgg -1);if _bcc !=nil {return _a .Wrap (_bcc ,_fbaa ,"\u006a\u0020\u003e \u0030");
};_gabd |=_adedg <<7;};_gabd &=_acad ;if _gabd ==0||(^_gabd )==0{if _bcc =_afbc .SetByte (_egeac +_becgg ,_gabd );_bcc !=nil {return _a .Wrap (_bcc ,_fbaa ,"b\u0074\u0020\u003d\u003d 0\u0020|\u007c\u0020\u0028\u005e\u0062t\u0029\u0020\u003d\u003d\u0020\u0030");
};continue ;};for {_eebaa =_gabd ;_gabd =(_gabd |(_gabd >>1)|(_gabd <<1))&_acad ;if (_gabd ^_eebaa )==0{if _bcc =_afbc .SetByte (_egeac +_becgg ,_gabd );_bcc !=nil {return _a .Wrap (_bcc ,_fbaa ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0070\u0072\u0065\u0076 \u0062\u0079\u0074\u0065");
};break ;};};};};for _ceecf =_dfee -1;_ceecf >=0;_ceecf --{_egeac =_ceecf *_afbc .RowStride ;_faccd =_ceecf *_bgecc .RowStride ;for _becgg =_abgd -1;_becgg >=0;_becgg --{if _gabd ,_bcc =_afbc .GetByte (_egeac +_becgg );_bcc !=nil {return _a .Wrap (_bcc ,_fbaa ,"\u0072\u0065\u0076\u0065\u0072\u0073\u0065\u0020\u0066\u0069\u0072\u0073t\u0020\u0067\u0065\u0074");
};if _acad ,_bcc =_bgecc .GetByte (_faccd +_becgg );_bcc !=nil {return _a .Wrap (_bcc ,_fbaa ,"r\u0065\u0076\u0065\u0072se\u0020g\u0065\u0074\u0020\u006d\u0061s\u006b\u0020\u0062\u0079\u0074\u0065");};if _ceecf < _dfee -1{if _gbgb ,_bcc =_afbc .GetByte (_egeac +_afbc .RowStride +_becgg );
_bcc !=nil {return _a .Wrap (_bcc ,_fbaa ,"\u0072\u0065v\u0065\u0072\u0073e\u0020\u0069\u0020\u003c\u0020\u0068\u0020\u002d\u0031");};_gabd |=_gbgb ;};if _becgg < _abgd -1{if _fada ,_bcc =_afbc .GetByte (_egeac +_becgg +1);_bcc !=nil {return _a .Wrap (_bcc ,_fbaa ,"\u0072\u0065\u0076\u0065rs\u0065\u0020\u006a\u0020\u003c\u0020\u0077\u0070\u006c\u0020\u002d\u0020\u0031");
};_gabd |=_fada >>7;};_gabd &=_acad ;if _gabd ==0||(^_gabd )==0{if _bcc =_afbc .SetByte (_egeac +_becgg ,_gabd );_bcc !=nil {return _a .Wrap (_bcc ,_fbaa ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006d\u0061\u0073k\u0065\u0064\u0020\u0062\u0079\u0074\u0065\u0020\u0066\u0061i\u006c\u0065\u0064");
};continue ;};for {_eebaa =_gabd ;_gabd =(_gabd |(_gabd >>1)|(_gabd <<1))&_acad ;if (_gabd ^_eebaa )==0{if _bcc =_afbc .SetByte (_egeac +_becgg ,_gabd );_bcc !=nil {return _a .Wrap (_bcc ,_fbaa ,"\u0072e\u0076\u0065\u0072\u0073e\u0020\u0073\u0065\u0074\u0074i\u006eg\u0020p\u0072\u0065\u0076\u0020\u0062\u0079\u0074e");
};break ;};};};};return nil ;};func (_dbagf Points )Size ()int {return len (_dbagf )};func (_gcccg *Bitmaps )ClipToBitmap (s *Bitmap )(*Bitmaps ,error ){const _fcbbd ="B\u0069t\u006d\u0061\u0070\u0073\u002e\u0043\u006c\u0069p\u0054\u006f\u0042\u0069tm\u0061\u0070";
if _gcccg ==nil {return nil ,_a .Error (_fcbbd ,"\u0042\u0069\u0074\u006dap\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if s ==nil {return nil ,_a .Error (_fcbbd ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");
};_cacb :=len (_gcccg .Values );_cfag :=&Bitmaps {Values :make ([]*Bitmap ,_cacb ),Boxes :make ([]*_bf .Rectangle ,_cacb )};var (_agce ,_daagbg *Bitmap ;_fdbg *_bf .Rectangle ;_bgaca error ;);for _ffea :=0;_ffea < _cacb ;_ffea ++{if _agce ,_bgaca =_gcccg .GetBitmap (_ffea );
_bgaca !=nil {return nil ,_a .Wrap (_bgaca ,_fcbbd ,"");};if _fdbg ,_bgaca =_gcccg .GetBox (_ffea );_bgaca !=nil {return nil ,_a .Wrap (_bgaca ,_fcbbd ,"");};if _daagbg ,_bgaca =s .clipRectangle (_fdbg ,nil );_bgaca !=nil {return nil ,_a .Wrap (_bgaca ,_fcbbd ,"");
};if _daagbg ,_bgaca =_daagbg .And (_agce );_bgaca !=nil {return nil ,_a .Wrap (_bgaca ,_fcbbd ,"");};_cfag .Values [_ffea ]=_daagbg ;_cfag .Boxes [_ffea ]=_fdbg ;};return _cfag ,nil ;};func (_dedf *Bitmap )SetPadBits (value int ){_dedf .setPadBits (value )};
func _abfec (_cfdf ,_dca *Bitmap ,_beag ,_afdfg int )(*Bitmap ,error ){const _bcec ="\u0063\u006c\u006f\u0073\u0065\u0042\u0072\u0069\u0063\u006b";if _dca ==nil {return nil ,_a .Error (_bcec ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _beag < 1||_afdfg < 1{return nil ,_a .Error (_bcec ,"\u0068S\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0053\u0069z\u0065\u0020\u006e\u006f\u0074\u0020\u003e\u003d\u0020\u0031");};if _beag ==1&&_afdfg ==1{return _dca .Copy (),nil ;};if _beag ==1||_afdfg ==1{_fdea :=SelCreateBrick (_afdfg ,_beag ,_afdfg /2,_beag /2,SelHit );
var _gddf error ;_cfdf ,_gddf =_bgeca (_cfdf ,_dca ,_fdea );if _gddf !=nil {return nil ,_a .Wrap (_gddf ,_bcec ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};
return _cfdf ,nil ;};_gefdd :=SelCreateBrick (1,_beag ,0,_beag /2,SelHit );_fgfd :=SelCreateBrick (_afdfg ,1,_afdfg /2,0,SelHit );_cbce ,_fcgf :=_cfaa (nil ,_dca ,_gefdd );if _fcgf !=nil {return nil ,_a .Wrap (_fcgf ,_bcec ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};if _cfdf ,_fcgf =_cfaa (_cfdf ,_cbce ,_fgfd );_fcgf !=nil {return nil ,_a .Wrap (_fcgf ,_bcec ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};if _ ,_fcgf =_gbac (_cbce ,_cfdf ,_gefdd );_fcgf !=nil {return nil ,_a .Wrap (_fcgf ,_bcec ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};if _ ,_fcgf =_gbac (_cfdf ,_cbce ,_fgfd );_fcgf !=nil {return nil ,_a .Wrap (_fcgf ,_bcec ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};return _cfdf ,nil ;};func _dag ()(_bag [256]uint32 ){for _fbe :=0;_fbe < 256;_fbe ++{if _fbe &0x01!=0{_bag [_fbe ]|=0xf;
};if _fbe &0x02!=0{_bag [_fbe ]|=0xf0;};if _fbe &0x04!=0{_bag [_fbe ]|=0xf00;};if _fbe &0x08!=0{_bag [_fbe ]|=0xf000;};if _fbe &0x10!=0{_bag [_fbe ]|=0xf0000;};if _fbe &0x20!=0{_bag [_fbe ]|=0xf00000;};if _fbe &0x40!=0{_bag [_fbe ]|=0xf000000;};if _fbe &0x80!=0{_bag [_fbe ]|=0xf0000000;
};};return _bag ;};func _gbac (_acea ,_edca *Bitmap ,_dgcf *Selection )(*Bitmap ,error ){const _gcac ="\u0065\u0072\u006fd\u0065";var (_eaea error ;_cdec *Bitmap ;);_acea ,_eaea =_fddf (_acea ,_edca ,_dgcf ,&_cdec );if _eaea !=nil {return nil ,_a .Wrap (_eaea ,_gcac ,"");
};if _eaea =_acea .setAll ();_eaea !=nil {return nil ,_a .Wrap (_eaea ,_gcac ,"");};var _daca SelectionValue ;for _daddf :=0;_daddf < _dgcf .Height ;_daddf ++{for _eggf :=0;_eggf < _dgcf .Width ;_eggf ++{_daca =_dgcf .Data [_daddf ][_eggf ];if _daca ==SelHit {_eaea =_fabc (_acea ,_dgcf .Cx -_eggf ,_dgcf .Cy -_daddf ,_edca .Width ,_edca .Height ,PixSrcAndDst ,_cdec ,0,0);
if _eaea !=nil {return nil ,_a .Wrap (_eaea ,_gcac ,"");};};};};if MorphBC ==SymmetricMorphBC {return _acea ,nil ;};_cfbc ,_geaa ,_bfda ,_egea :=_dgcf .findMaxTranslations ();if _cfbc > 0{if _eaea =_acea .RasterOperation (0,0,_cfbc ,_edca .Height ,PixClr ,nil ,0,0);
_eaea !=nil {return nil ,_a .Wrap (_eaea ,_gcac ,"\u0078\u0070\u0020\u003e\u0020\u0030");};};if _bfda > 0{if _eaea =_acea .RasterOperation (_edca .Width -_bfda ,0,_bfda ,_edca .Height ,PixClr ,nil ,0,0);_eaea !=nil {return nil ,_a .Wrap (_eaea ,_gcac ,"\u0078\u006e\u0020\u003e\u0020\u0030");
};};if _geaa > 0{if _eaea =_acea .RasterOperation (0,0,_edca .Width ,_geaa ,PixClr ,nil ,0,0);_eaea !=nil {return nil ,_a .Wrap (_eaea ,_gcac ,"\u0079\u0070\u0020\u003e\u0020\u0030");};};if _egea > 0{if _eaea =_acea .RasterOperation (0,_edca .Height -_egea ,_edca .Width ,_egea ,PixClr ,nil ,0,0);
_eaea !=nil {return nil ,_a .Wrap (_eaea ,_gcac ,"\u0079\u006e\u0020\u003e\u0020\u0030");};};return _acea ,nil ;};func DilateBrick (d ,s *Bitmap ,hSize ,vSize int )(*Bitmap ,error ){return _afbg (d ,s ,hSize ,vSize )};func _ca (_de ,_bg *Bitmap )(_bgc error ){const _bfb ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0034";
_gda :=_bg .RowStride ;_dd :=_de .RowStride ;_ae :=_bg .RowStride *4-_de .RowStride ;var (_cdb ,_gg byte ;_ecb uint32 ;_bc ,_fa ,_eef ,_df ,_fb ,_ffe ,_fab int ;);for _eef =0;_eef < _bg .Height ;_eef ++{_bc =_eef *_gda ;_fa =4*_eef *_dd ;for _df =0;_df < _gda ;
_df ++{_cdb =_bg .Data [_bc +_df ];_ecb =_edfe [_cdb ];_ffe =_fa +_df *4;if _ae !=0&&(_df +1)*4> _de .RowStride {for _fb =_ae ;_fb > 0;_fb --{_gg =byte ((_ecb >>uint (_fb *8))&0xff);_fab =_ffe +(_ae -_fb );if _bgc =_de .SetByte (_fab ,_gg );_bgc !=nil {return _a .Wrapf (_bgc ,_bfb ,"D\u0069\u0066\u0066\u0065\u0072\u0065n\u0074\u0020\u0072\u006f\u0077\u0073\u0074\u0072\u0069d\u0065\u0073\u002e \u004b:\u0020\u0025\u0064",_fb );
};};}else if _bgc =_de .setFourBytes (_ffe ,_ecb );_bgc !=nil {return _a .Wrap (_bgc ,_bfb ,"");};if _bgc =_de .setFourBytes (_fa +_df *4,_edfe [_bg .Data [_bc +_df ]]);_bgc !=nil {return _a .Wrap (_bgc ,_bfb ,"");};};for _fb =1;_fb < 4;_fb ++{for _df =0;
_df < _dd ;_df ++{if _bgc =_de .SetByte (_fa +_fb *_dd +_df ,_de .Data [_fa +_df ]);_bgc !=nil {return _a .Wrapf (_bgc ,_bfb ,"\u0063\u006f\u0070\u0079\u0020\u0027\u0071\u0075\u0061\u0064\u0072\u0061\u0062l\u0065\u0027\u0020\u006c\u0069\u006ee\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0062\u0079\u0074\u0065\u003a \u0027\u0025\u0064\u0027",_fb ,_df );
};};};};return nil ;};func (_fagef *byHeight )Swap (i ,j int ){_fagef .Values [i ],_fagef .Values [j ]=_fagef .Values [j ],_fagef .Values [i ];if _fagef .Boxes !=nil {_fagef .Boxes [i ],_fagef .Boxes [j ]=_fagef .Boxes [j ],_fagef .Boxes [i ];};};func (_eedg *Bitmaps )Size ()int {return len (_eedg .Values )};
const (AsymmetricMorphBC BoundaryCondition =iota ;SymmetricMorphBC ;);func (_egad *Bitmaps )selectByIndexes (_daga []int )(*Bitmaps ,error ){_fdca :=&Bitmaps {};for _ ,_bcdff :=range _daga {_dcac ,_bgbcae :=_egad .GetBitmap (_bcdff );if _bgbcae !=nil {return nil ,_a .Wrap (_bgbcae ,"\u0073e\u006ce\u0063\u0074\u0042\u0079\u0049\u006e\u0064\u0065\u0078\u0065\u0073","");
};_fdca .AddBitmap (_dcac );};return _fdca ,nil ;};func _fggd (_gceg *Bitmap ,_fdefa ,_addf int ,_ceaa ,_bdag int ,_feafb RasterOperator ){var (_fccc bool ;_ffgd bool ;_dedfa int ;_dfbc int ;_fbbfc int ;_aadc int ;_gdeg bool ;_dfaf byte ;);_fecf :=8-(_fdefa &7);
_eecd :=_ggadb [_fecf ];_addfa :=_gceg .RowStride *_addf +(_fdefa >>3);if _ceaa < _fecf {_fccc =true ;_eecd &=_fgb [8-_fecf +_ceaa ];};if !_fccc {_dedfa =(_ceaa -_fecf )>>3;if _dedfa !=0{_ffgd =true ;_dfbc =_addfa +1;};};_fbbfc =(_fdefa +_ceaa )&7;if !(_fccc ||_fbbfc ==0){_gdeg =true ;
_dfaf =_fgb [_fbbfc ];_aadc =_addfa +1+_dedfa ;};var _defed ,_abef int ;switch _feafb {case PixClr :for _defed =0;_defed < _bdag ;_defed ++{_gceg .Data [_addfa ]=_ceec (_gceg .Data [_addfa ],0x0,_eecd );_addfa +=_gceg .RowStride ;};if _ffgd {for _defed =0;
_defed < _bdag ;_defed ++{for _abef =0;_abef < _dedfa ;_abef ++{_gceg .Data [_dfbc +_abef ]=0x0;};_dfbc +=_gceg .RowStride ;};};if _gdeg {for _defed =0;_defed < _bdag ;_defed ++{_gceg .Data [_aadc ]=_ceec (_gceg .Data [_aadc ],0x0,_dfaf );_aadc +=_gceg .RowStride ;
};};case PixSet :for _defed =0;_defed < _bdag ;_defed ++{_gceg .Data [_addfa ]=_ceec (_gceg .Data [_addfa ],0xff,_eecd );_addfa +=_gceg .RowStride ;};if _ffgd {for _defed =0;_defed < _bdag ;_defed ++{for _abef =0;_abef < _dedfa ;_abef ++{_gceg .Data [_dfbc +_abef ]=0xff;
};_dfbc +=_gceg .RowStride ;};};if _gdeg {for _defed =0;_defed < _bdag ;_defed ++{_gceg .Data [_aadc ]=_ceec (_gceg .Data [_aadc ],0xff,_dfaf );_aadc +=_gceg .RowStride ;};};case PixNotDst :for _defed =0;_defed < _bdag ;_defed ++{_gceg .Data [_addfa ]=_ceec (_gceg .Data [_addfa ],^_gceg .Data [_addfa ],_eecd );
_addfa +=_gceg .RowStride ;};if _ffgd {for _defed =0;_defed < _bdag ;_defed ++{for _abef =0;_abef < _dedfa ;_abef ++{_gceg .Data [_dfbc +_abef ]=^(_gceg .Data [_dfbc +_abef ]);};_dfbc +=_gceg .RowStride ;};};if _gdeg {for _defed =0;_defed < _bdag ;_defed ++{_gceg .Data [_aadc ]=_ceec (_gceg .Data [_aadc ],^_gceg .Data [_aadc ],_dfaf );
_aadc +=_gceg .RowStride ;};};};};func MakePixelSumTab8 ()[]int {return _ebag ()};func TstWordBitmapWithSpaces (t *_ac .T ,scale ...int )*Bitmap {_gdab :=1;if len (scale )> 0{_gdab =scale [0];};_ebfcaf :=3;_gdgf :=9+7+15+2*_ebfcaf +2*_ebfcaf ;_fafa :=5+_ebfcaf +5+2*_ebfcaf ;
_ecgbb :=New (_gdgf *_gdab ,_fafa *_gdab );_fdcg :=&Bitmaps {};var _cgadg *int ;_ebfcaf *=_gdab ;_dbca :=_ebfcaf ;_cgadg =&_dbca ;_dddcd :=_ebfcaf ;_egac :=TstDSymbol (t ,scale ...);TstAddSymbol (t ,_fdcg ,_egac ,_cgadg ,_dddcd ,1*_gdab );_egac =TstOSymbol (t ,scale ...);
TstAddSymbol (t ,_fdcg ,_egac ,_cgadg ,_dddcd ,_ebfcaf );_egac =TstISymbol (t ,scale ...);TstAddSymbol (t ,_fdcg ,_egac ,_cgadg ,_dddcd ,1*_gdab );_egac =TstTSymbol (t ,scale ...);TstAddSymbol (t ,_fdcg ,_egac ,_cgadg ,_dddcd ,_ebfcaf );_egac =TstNSymbol (t ,scale ...);
TstAddSymbol (t ,_fdcg ,_egac ,_cgadg ,_dddcd ,1*_gdab );_egac =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_fdcg ,_egac ,_cgadg ,_dddcd ,1*_gdab );_egac =TstWSymbol (t ,scale ...);TstAddSymbol (t ,_fdcg ,_egac ,_cgadg ,_dddcd ,0);*_cgadg =_ebfcaf ;_dddcd =5*_gdab +_ebfcaf ;
_egac =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_fdcg ,_egac ,_cgadg ,_dddcd ,1*_gdab );_egac =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_fdcg ,_egac ,_cgadg ,_dddcd ,_ebfcaf );_egac =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_fdcg ,_egac ,_cgadg ,_dddcd ,1*_gdab );
_egac =TstESymbol (t ,scale ...);TstAddSymbol (t ,_fdcg ,_egac ,_cgadg ,_dddcd ,1*_gdab );_egac =TstVSymbol (t ,scale ...);TstAddSymbol (t ,_fdcg ,_egac ,_cgadg ,_dddcd ,1*_gdab );_egac =TstESymbol (t ,scale ...);TstAddSymbol (t ,_fdcg ,_egac ,_cgadg ,_dddcd ,1*_gdab );
_egac =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_fdcg ,_egac ,_cgadg ,_dddcd ,0);TstWriteSymbols (t ,_fdcg ,_ecgbb );return _ecgbb ;};func (_gbge *Points )AddPoint (x ,y float32 ){*_gbge =append (*_gbge ,Point {x ,y })};func RankHausTest (p1 ,p2 ,p3 ,p4 *Bitmap ,delX ,delY float32 ,maxDiffW ,maxDiffH ,area1 ,area3 int ,rank float32 ,tab8 []int )(_acfc bool ,_ecdfb error ){const _acff ="\u0052\u0061\u006ek\u0048\u0061\u0075\u0073\u0054\u0065\u0073\u0074";
_dccbc ,_fdef :=p1 .Width ,p1 .Height ;_agec ,_ffcc :=p3 .Width ,p3 .Height ;if _bb .Abs (_dccbc -_agec )> maxDiffW {return false ,nil ;};if _bb .Abs (_fdef -_ffcc )> maxDiffH {return false ,nil ;};_cefe :=int (float32 (area1 )*(1.0-rank )+0.5);_caff :=int (float32 (area3 )*(1.0-rank )+0.5);
var _eaca ,_cfec int ;if delX >=0{_eaca =int (delX +0.5);}else {_eaca =int (delX -0.5);};if delY >=0{_cfec =int (delY +0.5);}else {_cfec =int (delY -0.5);};_gef :=p1 .CreateTemplate ();if _ecdfb =_gef .RasterOperation (0,0,_dccbc ,_fdef ,PixSrc ,p1 ,0,0);
_ecdfb !=nil {return false ,_a .Wrap (_ecdfb ,_acff ,"p\u0031\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _ecdfb =_gef .RasterOperation (_eaca ,_cfec ,_dccbc ,_fdef ,PixNotSrcAndDst ,p4 ,0,0);_ecdfb !=nil {return false ,_a .Wrap (_ecdfb ,_acff ,"\u0074 \u0026\u0020\u0021\u0070\u0034");
};_acfc ,_ecdfb =_gef .ThresholdPixelSum (_cefe ,tab8 );if _ecdfb !=nil {return false ,_a .Wrap (_ecdfb ,_acff ,"\u0074\u002d\u003e\u0074\u0068\u0072\u0065\u0073\u0068\u0031");};if _acfc {return false ,nil ;};if _ecdfb =_gef .RasterOperation (_eaca ,_cfec ,_agec ,_ffcc ,PixSrc ,p3 ,0,0);
_ecdfb !=nil {return false ,_a .Wrap (_ecdfb ,_acff ,"p\u0033\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _ecdfb =_gef .RasterOperation (0,0,_agec ,_ffcc ,PixNotSrcAndDst ,p2 ,0,0);_ecdfb !=nil {return false ,_a .Wrap (_ecdfb ,_acff ,"\u0074 \u0026\u0020\u0021\u0070\u0032");
};_acfc ,_ecdfb =_gef .ThresholdPixelSum (_caff ,tab8 );if _ecdfb !=nil {return false ,_a .Wrap (_ecdfb ,_acff ,"\u0074\u002d\u003e\u0074\u0068\u0072\u0065\u0073\u0068\u0033");};return !_acfc ,nil ;};func New (width ,height int )*Bitmap {_egbee :=_dged (width ,height );
_egbee .Data =make ([]byte ,height *_egbee .RowStride );return _egbee ;};func (_dda *Bitmap )GetByte (index int )(byte ,error ){if index > len (_dda .Data )-1||index < 0{return 0,_a .Errorf ("\u0047e\u0074\u0042\u0079\u0074\u0065","\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",index );
};return _dda .Data [index ],nil ;};func (_aace *Bitmap )setFourBytes (_bbe int ,_cbcb uint32 )error {if _bbe +3> len (_aace .Data )-1{return _a .Errorf ("\u0073\u0065\u0074F\u006f\u0075\u0072\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_bbe );
};_aace .Data [_bbe ]=byte ((_cbcb &0xff000000)>>24);_aace .Data [_bbe +1]=byte ((_cbcb &0xff0000)>>16);_aace .Data [_bbe +2]=byte ((_cbcb &0xff00)>>8);_aace .Data [_bbe +3]=byte (_cbcb &0xff);return nil ;};func MakePixelCentroidTab8 ()[]int {return _gfae ()};
func (_cfca *ClassedPoints )GroupByY ()([]*ClassedPoints ,error ){const _bgff ="\u0043\u006c\u0061\u0073se\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0072\u006f\u0075\u0070\u0042y\u0059";if _cfeg :=_cfca .validateIntSlice ();_cfeg !=nil {return nil ,_a .Wrap (_cfeg ,_bgff ,"");
};if _cfca .IntSlice .Size ()==0{return nil ,_a .Error (_bgff ,"\u004e\u006f\u0020\u0063la\u0073\u0073\u0065\u0073\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064");};_cfca .SortByY ();var (_gafd []*ClassedPoints ;_deeaf int ;);_defdc :=-1;var _gebg *ClassedPoints ;
for _eee :=0;_eee < len (_cfca .IntSlice );_eee ++{_deeaf =int (_cfca .YAtIndex (_eee ));if _deeaf !=_defdc {_gebg =&ClassedPoints {Points :_cfca .Points };_defdc =_deeaf ;_gafd =append (_gafd ,_gebg );};_gebg .IntSlice =append (_gebg .IntSlice ,_cfca .IntSlice [_eee ]);
};for _ ,_eage :=range _gafd {_eage .SortByX ();};return _gafd ,nil ;};func (_eccc *Bitmap )GetPixel (x ,y int )bool {_fee :=_eccc .GetByteIndex (x ,y );_adf :=_eccc .GetBitOffset (x );_ege :=uint (7-_adf );if _fee > len (_eccc .Data )-1{_g .Log .Debug ("\u0054\u0072\u0079\u0069\u006e\u0067\u0020\u0074\u006f\u0020\u0067\u0065\u0074\u0020\u0070\u0069\u0078\u0065\u006c\u0020o\u0075\u0074\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0064\u0061\u0074\u0061\u0020\u0072\u0061\u006e\u0067\u0065\u002e \u0078\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0079\u003a\u0027\u0025\u0064'\u002c\u0020\u0062m\u003a\u0020\u0027\u0025\u0073\u0027",x ,y ,_eccc );
return false ;};if (_eccc .Data [_fee ]>>_ege )&0x01>=1{return true ;};return false ;};func _gfea (_ebbg ,_ecgd *Bitmap ,_bggf *Selection )(*Bitmap ,error ){const _bbd ="\u006f\u0070\u0065\u006e";var _agfgd error ;_ebbg ,_agfgd =_gfeeg (_ebbg ,_ecgd ,_bggf );
if _agfgd !=nil {return nil ,_a .Wrap (_agfgd ,_bbd ,"");};_fddgf ,_agfgd :=_gbac (nil ,_ecgd ,_bggf );if _agfgd !=nil {return nil ,_a .Wrap (_agfgd ,_bbd ,"");};_ ,_agfgd =_cfaa (_ebbg ,_fddgf ,_bggf );if _agfgd !=nil {return nil ,_a .Wrap (_agfgd ,_bbd ,"");
};return _ebbg ,nil ;};func _cfbca (_gbdcd *Bitmap ,_ceee int )(*Bitmap ,error ){const _efbc ="\u0065x\u0070a\u006e\u0064\u0052\u0065\u0070\u006c\u0069\u0063\u0061\u0074\u0065";if _gbdcd ==nil {return nil ,_a .Error (_efbc ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _ceee <=0{return nil ,_a .Error (_efbc ,"i\u006e\u0076\u0061\u006cid\u0020f\u0061\u0063\u0074\u006f\u0072 \u002d\u0020\u003c\u003d\u0020\u0030");};if _ceee ==1{_ebedc ,_ccd :=_adgc (nil ,_gbdcd );if _ccd !=nil {return nil ,_a .Wrap (_ccd ,_efbc ,"\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u003d\u0020\u0031");
};return _ebedc ,nil ;};_bagee ,_bbeb :=_gb (_gbdcd ,_ceee ,_ceee );if _bbeb !=nil {return nil ,_a .Wrap (_bbeb ,_efbc ,"");};return _bagee ,nil ;};func (_gcbf *Bitmap )ConnComponents (bms *Bitmaps ,connectivity int )(_fgf *Boxes ,_fac error ){const _ccgg ="B\u0069\u0074\u006d\u0061p.\u0043o\u006e\u006e\u0043\u006f\u006dp\u006f\u006e\u0065\u006e\u0074\u0073";
if _gcbf ==nil {return nil ,_a .Error (_ccgg ,"\u0070r\u006f\u0076\u0069\u0064e\u0064\u0020\u0065\u006d\u0070t\u0079 \u0027b\u0027\u0020\u0062\u0069\u0074\u006d\u0061p");};if connectivity !=4&&connectivity !=8{return nil ,_a .Error (_ccgg ,"\u0063\u006f\u006ene\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u006e\u006f\u0074\u0020\u0034\u0020\u006f\u0072\u0020\u0038");
};if bms ==nil {if _fgf ,_fac =_gcbf .connComponentsBB (connectivity );_fac !=nil {return nil ,_a .Wrap (_fac ,_ccgg ,"");};}else {if _fgf ,_fac =_gcbf .connComponentsBitmapsBB (bms ,connectivity );_fac !=nil {return nil ,_a .Wrap (_fac ,_ccgg ,"");};};
return _fgf ,nil ;};func TstPSymbol (t *_ac .T )*Bitmap {t .Helper ();_gdcb :=New (5,8);_af .NoError (t ,_gdcb .SetPixel (0,0,1));_af .NoError (t ,_gdcb .SetPixel (1,0,1));_af .NoError (t ,_gdcb .SetPixel (2,0,1));_af .NoError (t ,_gdcb .SetPixel (3,0,1));
_af .NoError (t ,_gdcb .SetPixel (4,1,1));_af .NoError (t ,_gdcb .SetPixel (0,1,1));_af .NoError (t ,_gdcb .SetPixel (4,2,1));_af .NoError (t ,_gdcb .SetPixel (0,2,1));_af .NoError (t ,_gdcb .SetPixel (4,3,1));_af .NoError (t ,_gdcb .SetPixel (0,3,1));
_af .NoError (t ,_gdcb .SetPixel (0,4,1));_af .NoError (t ,_gdcb .SetPixel (1,4,1));_af .NoError (t ,_gdcb .SetPixel (2,4,1));_af .NoError (t ,_gdcb .SetPixel (3,4,1));_af .NoError (t ,_gdcb .SetPixel (0,5,1));_af .NoError (t ,_gdcb .SetPixel (0,6,1));
_af .NoError (t ,_gdcb .SetPixel (0,7,1));return _gdcb ;};func (_bacd *byWidth )Swap (i ,j int ){_bacd .Values [i ],_bacd .Values [j ]=_bacd .Values [j ],_bacd .Values [i ];if _bacd .Boxes !=nil {_bacd .Boxes [i ],_bacd .Boxes [j ]=_bacd .Boxes [j ],_bacd .Boxes [i ];
};};func (_eegf *Bitmap )GetComponents (components Component ,maxWidth ,maxHeight int )(_feac *Bitmaps ,_dece *Boxes ,_bafa error ){const _cccg ="B\u0069t\u006d\u0061\u0070\u002e\u0047\u0065\u0074\u0043o\u006d\u0070\u006f\u006een\u0074\u0073";if _eegf ==nil {return nil ,nil ,_a .Error (_cccg ,"\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0042\u0069\u0074\u006da\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069n\u0065\u0064\u002e");
};switch components {case ComponentConn ,ComponentCharacters ,ComponentWords :default:return nil ,nil ,_a .Error (_cccg ,"\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065n\u0074s\u0020\u0070\u0061\u0072\u0061\u006d\u0065t\u0065\u0072");
};if _eegf .Zero (){_dece =&Boxes {};_feac =&Bitmaps {};return _feac ,_dece ,nil ;};switch components {case ComponentConn :_feac =&Bitmaps {};if _dece ,_bafa =_eegf .ConnComponents (_feac ,8);_bafa !=nil {return nil ,nil ,_a .Wrap (_bafa ,_cccg ,"\u006e\u006f \u0070\u0072\u0065p\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};case ComponentCharacters :_efge ,_geafb :=MorphSequence (_eegf ,MorphProcess {Operation :MopClosing ,Arguments :[]int {1,6}});if _geafb !=nil {return nil ,nil ,_a .Wrap (_geafb ,_cccg ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};if _g .Log .IsLogLevel (_g .LogLevelTrace ){_g .Log .Trace ("\u0043o\u006d\u0070o\u006e\u0065\u006e\u0074C\u0068\u0061\u0072a\u0063\u0074\u0065\u0072\u0073\u0020\u0062\u0069\u0074ma\u0070\u0020\u0061f\u0074\u0065r\u0020\u0063\u006c\u006f\u0073\u0069n\u0067\u003a \u0025\u0073",_efge .String ());
};_gbbe :=&Bitmaps {};_dece ,_geafb =_efge .ConnComponents (_gbbe ,8);if _geafb !=nil {return nil ,nil ,_a .Wrap (_geafb ,_cccg ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};if _g .Log .IsLogLevel (_g .LogLevelTrace ){_g .Log .Trace ("\u0043\u006f\u006d\u0070\u006f\u006ee\u006e\u0074\u0043\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u0020a\u0066\u0074\u0065\u0072\u0020\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076i\u0074y\u003a\u0020\u0025\u0073",_gbbe .String ());
};if _feac ,_geafb =_gbbe .ClipToBitmap (_eegf );_geafb !=nil {return nil ,nil ,_a .Wrap (_geafb ,_cccg ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");};case ComponentWords :_daag :=1;
var _ddda *Bitmap ;switch {case _eegf .XResolution <=200:_ddda =_eegf ;case _eegf .XResolution <=400:_daag =2;_ddda ,_bafa =_dba (_eegf ,1,0,0,0);if _bafa !=nil {return nil ,nil ,_a .Wrap (_bafa ,_cccg ,"w\u006f\u0072\u0064\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0020\u002d \u0078\u0072\u0065s\u003c=\u0034\u0030\u0030");
};default:_daag =4;_ddda ,_bafa =_dba (_eegf ,1,1,0,0);if _bafa !=nil {return nil ,nil ,_a .Wrap (_bafa ,_cccg ,"\u0077\u006f\u0072\u0064 \u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073 \u002d \u0078\u0072\u0065\u0073\u0020\u003e\u00204\u0030\u0030");
};};_dfcd ,_ ,_dgad :=_edbb (_ddda );if _dgad !=nil {return nil ,nil ,_a .Wrap (_dgad ,_cccg ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};_caec ,_dgad :=_cfbca (_dfcd ,_daag );if _dgad !=nil {return nil ,nil ,_a .Wrap (_dgad ,_cccg ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");
};_ceb :=&Bitmaps {};if _dece ,_dgad =_caec .ConnComponents (_ceb ,4);_dgad !=nil {return nil ,nil ,_a .Wrap (_dgad ,_cccg ,"\u0077\u006f\u0072\u0064\u0020\u0070r\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u002c\u0020\u0063\u006f\u006en\u0065\u0063\u0074\u0020\u0065\u0078\u0070a\u006e\u0064\u0065\u0064");
};if _feac ,_dgad =_ceb .ClipToBitmap (_eegf );_dgad !=nil {return nil ,nil ,_a .Wrap (_dgad ,_cccg ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};};_feac ,_bafa =_feac .SelectBySize (maxWidth ,maxHeight ,LocSelectIfBoth ,SizeSelectIfLTE );
if _bafa !=nil {return nil ,nil ,_a .Wrap (_bafa ,_cccg ,"");};_dece ,_bafa =_dece .SelectBySize (maxWidth ,maxHeight ,LocSelectIfBoth ,SizeSelectIfLTE );if _bafa !=nil {return nil ,nil ,_a .Wrap (_bafa ,_cccg ,"");};return _feac ,_dece ,nil ;};var (_abbf =_ga ();
_edfe =_dag ();_eebfe =_afg (););func (_fbd Points )YSorter ()func (_aaced ,_babd int )bool {return func (_ffce ,_adgef int )bool {return _fbd [_ffce ].Y < _fbd [_adgef ].Y };};func (_acded *ClassedPoints )SortByX (){_acded ._cgfec =_acded .xSortFunction ();
_b .Sort (_acded )};func _bfea (_dce ,_faa *Bitmap ,_cccb int ,_edf []byte ,_cdae int )(_bfbc error ){const _cgcc ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0033";var (_ccf ,_ddg ,_gee ,_cdbb ,_dcg ,_cge ,_gbcg ,_bbf int ;
_aag ,_dddb ,_ab ,_cdc uint32 ;_ccce ,_dec byte ;_gab uint16 ;);_efg :=make ([]byte ,4);_gabb :=make ([]byte ,4);for _gee =0;_gee < _dce .Height -1;_gee ,_cdbb =_gee +2,_cdbb +1{_ccf =_gee *_dce .RowStride ;_ddg =_cdbb *_faa .RowStride ;for _dcg ,_cge =0,0;
_dcg < _cdae ;_dcg ,_cge =_dcg +4,_cge +1{for _gbcg =0;_gbcg < 4;_gbcg ++{_bbf =_ccf +_dcg +_gbcg ;if _bbf <=len (_dce .Data )-1&&_bbf < _ccf +_dce .RowStride {_efg [_gbcg ]=_dce .Data [_bbf ];}else {_efg [_gbcg ]=0x00;};_bbf =_ccf +_dce .RowStride +_dcg +_gbcg ;
if _bbf <=len (_dce .Data )-1&&_bbf < _ccf +(2*_dce .RowStride ){_gabb [_gbcg ]=_dce .Data [_bbf ];}else {_gabb [_gbcg ]=0x00;};};_aag =_f .BigEndian .Uint32 (_efg );_dddb =_f .BigEndian .Uint32 (_gabb );_ab =_aag &_dddb ;_ab |=_ab <<1;_cdc =_aag |_dddb ;
_cdc &=_cdc <<1;_dddb =_ab &_cdc ;_dddb &=0xaaaaaaaa;_aag =_dddb |(_dddb <<7);_ccce =byte (_aag >>24);_dec =byte ((_aag >>8)&0xff);_bbf =_ddg +_cge ;if _bbf +1==len (_faa .Data )-1||_bbf +1>=_ddg +_faa .RowStride {if _bfbc =_faa .SetByte (_bbf ,_edf [_ccce ]);
_bfbc !=nil {return _a .Wrapf (_bfbc ,_cgcc ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_bbf );};}else {_gab =(uint16 (_edf [_ccce ])<<8)|uint16 (_edf [_dec ]);if _bfbc =_faa .setTwoBytes (_bbf ,_gab );_bfbc !=nil {return _a .Wrapf (_bfbc ,_cgcc ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_bbf );
};_cge ++;};};};return nil ;};func _ffb (_bcf *Bitmap ,_cfb int ,_ebe []byte )(_baf *Bitmap ,_bfgd error ){const _bcg ="\u0072\u0065\u0064\u0075\u0063\u0065\u0052\u0061\u006e\u006b\u0042\u0069n\u0061\u0072\u0079\u0032";if _bcf ==nil {return nil ,_a .Error (_bcg ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");
};if _cfb < 1||_cfb > 4{return nil ,_a .Error (_bcg ,"\u006c\u0065\u0076\u0065\u006c\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0069\u006e\u0020\u0073e\u0074\u0020\u007b\u0031\u002c\u0032\u002c\u0033\u002c\u0034\u007d");};if _bcf .Height <=1{return nil ,_a .Errorf (_bcg ,"\u0073o\u0075\u0072c\u0065\u0020\u0068e\u0069\u0067\u0068\u0074\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061t\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0027\u0032\u0027\u0020-\u0020\u0069\u0073\u003a\u0020\u0027\u0025\u0064\u0027",_bcf .Height );
};_baf =New (_bcf .Width /2,_bcf .Height /2);if _ebe ==nil {_ebe =_ebbd ();};_bga :=_bgbca (_bcf .RowStride ,2*_baf .RowStride );switch _cfb {case 1:_bfgd =_bee (_bcf ,_baf ,_cfb ,_ebe ,_bga );case 2:_bfgd =_egbe (_bcf ,_baf ,_cfb ,_ebe ,_bga );case 3:_bfgd =_bfea (_bcf ,_baf ,_cfb ,_ebe ,_bga );
case 4:_bfgd =_dccf (_bcf ,_baf ,_cfb ,_ebe ,_bga );};if _bfgd !=nil {return nil ,_bfgd ;};return _baf ,nil ;};func (_ebfg *Bitmaps )selectByIndicator (_bbdc *_bb .NumSlice )(_dgaad *Bitmaps ,_eecbg error ){const _cceaa ="\u0042i\u0074\u006d\u0061\u0070s\u002e\u0073\u0065\u006c\u0065c\u0074B\u0079I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";
if _ebfg ==nil {return nil ,_a .Error (_cceaa ,"\u0027\u0062\u0027 b\u0069\u0074\u006d\u0061\u0070\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if _bbdc ==nil {return nil ,_a .Error (_cceaa ,"'\u006e\u0061\u0027\u0020\u0069\u006ed\u0069\u0063\u0061\u0074\u006f\u0072\u0073\u0020\u006eo\u0074\u0020\u0064e\u0066i\u006e\u0065\u0064");
};if len (_ebfg .Values )==0{return _ebfg ,nil ;};if len (*_bbdc )!=len (_ebfg .Values ){return nil ,_a .Errorf (_cceaa ,"\u006ea\u0020\u006ce\u006e\u0067\u0074\u0068:\u0020\u0025\u0064,\u0020\u0069\u0073\u0020\u0064\u0069\u0066\u0066\u0065re\u006e\u0074\u0020t\u0068\u0061n\u0020\u0062\u0069\u0074\u006d\u0061p\u0073\u003a \u0025\u0064",len (*_bbdc ),len (_ebfg .Values ));
};var _fdgf ,_acfcf ,_bfee int ;for _acfcf =0;_acfcf < len (*_bbdc );_acfcf ++{if _fdgf ,_eecbg =_bbdc .GetInt (_acfcf );_eecbg !=nil {return nil ,_a .Wrap (_eecbg ,_cceaa ,"f\u0069\u0072\u0073\u0074\u0020\u0063\u0068\u0065\u0063\u006b");};if _fdgf ==1{_bfee ++;
};};if _bfee ==len (_ebfg .Values ){return _ebfg ,nil ;};_dgaad =&Bitmaps {};_bfgad :=len (_ebfg .Values )==len (_ebfg .Boxes );for _acfcf =0;_acfcf < len (*_bbdc );_acfcf ++{if _fdgf =int ((*_bbdc )[_acfcf ]);_fdgf ==0{continue ;};_dgaad .Values =append (_dgaad .Values ,_ebfg .Values [_acfcf ]);
if _bfgad {_dgaad .Boxes =append (_dgaad .Boxes ,_ebfg .Boxes [_acfcf ]);};};return _dgaad ,nil ;};type Getter interface{GetBitmap ()*Bitmap ;};func _gfeeg (_aabf ,_caba *Bitmap ,_bafag *Selection )(*Bitmap ,error ){const _cgfg ="\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u004d\u006f\u0072\u0070\u0068A\u0072\u0067\u0073\u0032";
var _fef ,_eacac int ;if _caba ==nil {return nil ,_a .Error (_cgfg ,"s\u006fu\u0072\u0063\u0065\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");};if _bafag ==nil {return nil ,_a .Error (_cgfg ,"\u0073e\u006c \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};_fef =_bafag .Width ;_eacac =_bafag .Height ;if _fef ==0||_eacac ==0{return nil ,_a .Error (_cgfg ,"\u0073\u0065\u006c\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u0020\u0030");};if _aabf ==nil {return _caba .createTemplate (),nil ;};if _fbfe :=_aabf .resizeImageData (_caba );
_fbfe !=nil {return nil ,_fbfe ;};return _aabf ,nil ;};func (_acf *Bitmap )GetChocolateData ()[]byte {if _acf .Color ==Vanilla {_acf .inverseData ();};return _acf .Data ;};func (_fdga *Bitmap )createTemplate ()*Bitmap {return &Bitmap {Width :_fdga .Width ,Height :_fdga .Height ,RowStride :_fdga .RowStride ,Color :_fdga .Color ,Text :_fdga .Text ,BitmapNumber :_fdga .BitmapNumber ,Special :_fdga .Special ,Data :make ([]byte ,len (_fdga .Data ))};
};const _ebfca =5000;func _dg (_da *Bitmap ,_ef int )(*Bitmap ,error ){const _db ="\u0065x\u0070a\u006e\u0064\u0042\u0069\u006ea\u0072\u0079P\u006f\u0077\u0065\u0072\u0032";if _da ==nil {return nil ,_a .Error (_db ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _ef ==1{return _adgc (nil ,_da );};if _ef !=2&&_ef !=4&&_ef !=8{return nil ,_a .Error (_db ,"\u0066\u0061\u0063t\u006f\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0069n\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d\u0020\u0072\u0061\u006e\u0067\u0065");
};_cc :=_ef *_da .Width ;_afe :=_ef *_da .Height ;_efe :=New (_cc ,_afe );var _dge error ;switch _ef {case 2:_dge =_d (_efe ,_da );case 4:_dge =_ca (_efe ,_da );case 8:_dge =_bgg (_efe ,_da );};if _dge !=nil {return nil ,_a .Wrap (_dge ,_db ,"");};return _efe ,nil ;
};type Selection struct{Height ,Width int ;Cx ,Cy int ;Name string ;Data [][]SelectionValue ;};func (_gcba Points )GetIntX (i int )(int ,error ){if i >=len (_gcba ){return 0,_a .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065t\u0049\u006e\u0074\u0058","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return int (_gcba [i ].X ),nil ;};func TstImageBitmapData ()[]byte {return _dceb .Data };func Centroid (bm *Bitmap ,centTab ,sumTab []int )(Point ,error ){return bm .centroid (centTab ,sumTab )};func _afbg (_fccf ,_aedc *Bitmap ,_edcc ,_fcag int )(*Bitmap ,error ){const _abebe ="d\u0069\u006c\u0061\u0074\u0065\u0042\u0072\u0069\u0063\u006b";
if _aedc ==nil {_g .Log .Debug ("\u0064\u0069\u006c\u0061\u0074\u0065\u0042\u0072\u0069\u0063k\u0020\u0073\u006f\u0075\u0072\u0063\u0065 \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");return nil ,_a .Error (_abebe ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");
};if _edcc < 1||_fcag < 1{return nil ,_a .Error (_abebe ,"\u0068\u0053\u007a\u0069\u0065 \u0061\u006e\u0064\u0020\u0076\u0053\u0069\u007a\u0065\u0020\u0061\u0072\u0065 \u006e\u006f\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0031");
};if _edcc ==1&&_fcag ==1{_befe ,_fcge :=_adgc (_fccf ,_aedc );if _fcge !=nil {return nil ,_a .Wrap (_fcge ,_abebe ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u0026\u0026 \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _befe ,nil ;};if _edcc ==1||_fcag ==1{_aefdg :=SelCreateBrick (_fcag ,_edcc ,_fcag /2,_edcc /2,SelHit );_bfeg ,_fafg :=_cfaa (_fccf ,_aedc ,_aefdg );if _fafg !=nil {return nil ,_a .Wrap (_fafg ,_abebe ,"\u0068s\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _bfeg ,nil ;};_cafc :=SelCreateBrick (1,_edcc ,0,_edcc /2,SelHit );_bcag :=SelCreateBrick (_fcag ,1,_fcag /2,0,SelHit );_acfd ,_dcbd :=_cfaa (nil ,_aedc ,_cafc );if _dcbd !=nil {return nil ,_a .Wrap (_dcbd ,_abebe ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};_fccf ,_dcbd =_cfaa (_fccf ,_acfd ,_bcag );if _dcbd !=nil {return nil ,_a .Wrap (_dcbd ,_abebe ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};return _fccf ,nil ;};type fillSegment struct{_eadd int ;_bbef int ;_gaeea int ;_edgdc int ;
};func (_gaab *Bitmaps )SortByWidth (){_dfbg :=(*byWidth )(_gaab );_b .Sort (_dfbg )};func _cdag (_bae uint ,_afeb byte )byte {return _afeb >>_bae <<_bae };func TstASymbol (t *_ac .T )*Bitmap {t .Helper ();_efed :=New (6,6);_af .NoError (t ,_efed .SetPixel (1,0,1));
_af .NoError (t ,_efed .SetPixel (2,0,1));_af .NoError (t ,_efed .SetPixel (3,0,1));_af .NoError (t ,_efed .SetPixel (4,0,1));_af .NoError (t ,_efed .SetPixel (5,1,1));_af .NoError (t ,_efed .SetPixel (1,2,1));_af .NoError (t ,_efed .SetPixel (2,2,1));
_af .NoError (t ,_efed .SetPixel (3,2,1));_af .NoError (t ,_efed .SetPixel (4,2,1));_af .NoError (t ,_efed .SetPixel (5,2,1));_af .NoError (t ,_efed .SetPixel (0,3,1));_af .NoError (t ,_efed .SetPixel (5,3,1));_af .NoError (t ,_efed .SetPixel (0,4,1));
_af .NoError (t ,_efed .SetPixel (5,4,1));_af .NoError (t ,_efed .SetPixel (1,5,1));_af .NoError (t ,_efed .SetPixel (2,5,1));_af .NoError (t ,_efed .SetPixel (3,5,1));_af .NoError (t ,_efed .SetPixel (4,5,1));_af .NoError (t ,_efed .SetPixel (5,5,1));
return _efed ;};func (_bcgb *ClassedPoints )xSortFunction ()func (_bcafd int ,_dgdge int )bool {return func (_agbc ,_gabc int )bool {return _bcgb .XAtIndex (_agbc )< _bcgb .XAtIndex (_gabc )};};func _bgeca (_agcc ,_aecd *Bitmap ,_eafe *Selection )(*Bitmap ,error ){const _gegdc ="c\u006c\u006f\u0073\u0065\u0042\u0069\u0074\u006d\u0061\u0070";
var _afca error ;if _agcc ,_afca =_gfeeg (_agcc ,_aecd ,_eafe );_afca !=nil {return nil ,_afca ;};_gede ,_afca :=_cfaa (nil ,_aecd ,_eafe );if _afca !=nil {return nil ,_a .Wrap (_afca ,_gegdc ,"");};if _ ,_afca =_gbac (_agcc ,_gede ,_eafe );_afca !=nil {return nil ,_a .Wrap (_afca ,_gegdc ,"");
};return _agcc ,nil ;};func (_gaed *Bitmaps )AddBox (box *_bf .Rectangle ){_gaed .Boxes =append (_gaed .Boxes ,box )};func _ggcd (_dcgd ,_aacd *Bitmap ,_fabe ,_baag ,_afgf ,_eece ,_bgfa ,_cade ,_babb ,_gfc int ,_ddc CombinationOperator ,_dgac int )error {var _bgac int ;
_gcf :=func (){_bgac ++;_afgf +=_aacd .RowStride ;_eece +=_dcgd .RowStride ;_bgfa +=_dcgd .RowStride };for _bgac =_fabe ;_bgac < _baag ;_gcf (){var _cdee uint16 ;_bfbd :=_afgf ;for _dddc :=_eece ;_dddc <=_bgfa ;_dddc ++{_cbded ,_egbf :=_aacd .GetByte (_bfbd );
if _egbf !=nil {return _egbf ;};_geefe ,_egbf :=_dcgd .GetByte (_dddc );if _egbf !=nil {return _egbf ;};_cdee =(_cdee |(uint16 (_geefe )&0xff))<<uint (_gfc );_geefe =byte (_cdee >>8);if _egbf =_aacd .SetByte (_bfbd ,_eggc (_cbded ,_geefe ,_ddc ));_egbf !=nil {return _egbf ;
};_bfbd ++;_cdee <<=uint (_babb );if _dddc ==_bgfa {_geefe =byte (_cdee >>(8-uint8 (_gfc )));if _dgac !=0{_geefe =_cdag (uint (8+_cade ),_geefe );};_cbded ,_egbf =_aacd .GetByte (_bfbd );if _egbf !=nil {return _egbf ;};if _egbf =_aacd .SetByte (_bfbd ,_eggc (_cbded ,_geefe ,_ddc ));
_egbf !=nil {return _egbf ;};};};};return nil ;};func (_fegg *BitmapsArray )AddBitmaps (bm *Bitmaps ){_fegg .Values =append (_fegg .Values ,bm )};func TstOSymbol (t *_ac .T ,scale ...int )*Bitmap {_ffaa ,_dgce :=NewWithData (4,5,[]byte {0xF0,0x90,0x90,0x90,0xF0});
_af .NoError (t ,_dgce );return TstGetScaledSymbol (t ,_ffaa ,scale ...);};func _agcf (_fgfe *Bitmap ,_acac *_bb .Stack ,_efbbg ,_fead int )(_ddba *_bf .Rectangle ,_dabe error ){const _fedc ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";
if _fgfe ==nil {return nil ,_a .Error (_fedc ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _acac ==nil {return nil ,_a .Error (_fedc ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");
};_fgacb ,_eegfg :=_fgfe .Width ,_fgfe .Height ;_ccea :=_fgacb -1;_eacdg :=_eegfg -1;if _efbbg < 0||_efbbg > _ccea ||_fead < 0||_fead > _eacdg ||!_fgfe .GetPixel (_efbbg ,_fead ){return nil ,nil ;};var _caca *_bf .Rectangle ;_caca ,_dabe =Rect (100000,100000,0,0);
if _dabe !=nil {return nil ,_a .Wrap (_dabe ,_fedc ,"");};if _dabe =_dfba (_acac ,_efbbg ,_efbbg ,_fead ,1,_eacdg ,_caca );_dabe !=nil {return nil ,_a .Wrap (_dabe ,_fedc ,"\u0069\u006e\u0069t\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _dabe =_dfba (_acac ,_efbbg ,_efbbg ,_fead +1,-1,_eacdg ,_caca );
_dabe !=nil {return nil ,_a .Wrap (_dabe ,_fedc ,"\u0032\u006ed\u0020\u0069\u006ei\u0074\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};_caca .Min .X ,_caca .Max .X =_efbbg ,_efbbg ;_caca .Min .Y ,_caca .Max .Y =_fead ,_fead ;var (_babe *fillSegment ;
_aaba int ;);for _acac .Len ()> 0{if _babe ,_dabe =_efagc (_acac );_dabe !=nil {return nil ,_a .Wrap (_dabe ,_fedc ,"");};_fead =_babe ._gaeea ;for _efbbg =_babe ._eadd ;_efbbg >=0&&_fgfe .GetPixel (_efbbg ,_fead );_efbbg --{if _dabe =_fgfe .SetPixel (_efbbg ,_fead ,0);
_dabe !=nil {return nil ,_a .Wrap (_dabe ,_fedc ,"");};};if _efbbg >=_babe ._eadd {for _efbbg ++;_efbbg <=_babe ._bbef &&_efbbg <=_ccea &&!_fgfe .GetPixel (_efbbg ,_fead );_efbbg ++{};_aaba =_efbbg ;if !(_efbbg <=_babe ._bbef &&_efbbg <=_ccea ){continue ;
};}else {_aaba =_efbbg +1;if _aaba < _babe ._eadd -1{if _dabe =_dfba (_acac ,_aaba ,_babe ._eadd -1,_babe ._gaeea ,-_babe ._edgdc ,_eacdg ,_caca );_dabe !=nil {return nil ,_a .Wrap (_dabe ,_fedc ,"\u006c\u0065\u0061\u006b\u0020\u006f\u006e\u0020\u006c\u0065\u0066\u0074 \u0073\u0069\u0064\u0065");
};};_efbbg =_babe ._eadd +1;};for {for ;_efbbg <=_ccea &&_fgfe .GetPixel (_efbbg ,_fead );_efbbg ++{if _dabe =_fgfe .SetPixel (_efbbg ,_fead ,0);_dabe !=nil {return nil ,_a .Wrap (_dabe ,_fedc ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _dabe =_dfba (_acac ,_aaba ,_efbbg -1,_babe ._gaeea ,_babe ._edgdc ,_eacdg ,_caca );
_dabe !=nil {return nil ,_a .Wrap (_dabe ,_fedc ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _efbbg > _babe ._bbef +1{if _dabe =_dfba (_acac ,_babe ._bbef +1,_efbbg -1,_babe ._gaeea ,-_babe ._edgdc ,_eacdg ,_caca );_dabe !=nil {return nil ,_a .Wrap (_dabe ,_fedc ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};for _efbbg ++;_efbbg <=_babe ._bbef &&_efbbg <=_ccea &&!_fgfe .GetPixel (_efbbg ,_fead );_efbbg ++{};_aaba =_efbbg ;if !(_efbbg <=_babe ._bbef &&_efbbg <=_ccea ){break ;};};};_caca .Max .X ++;_caca .Max .Y ++;return _caca ,nil ;};func (_aba *Bitmap )nextOnPixel (_daee ,_adge int )(_ceg _bf .Point ,_dafbc bool ,_geef error ){const _dccb ="n\u0065\u0078\u0074\u004f\u006e\u0050\u0069\u0078\u0065\u006c";
_ceg ,_dafbc ,_geef =_aba .nextOnPixelLow (_aba .Width ,_aba .Height ,_aba .RowStride ,_daee ,_adge );if _geef !=nil {return _ceg ,false ,_a .Wrap (_geef ,_dccb ,"");};return _ceg ,_dafbc ,nil ;};func _bee (_efef ,_gaa *Bitmap ,_ced int ,_acb []byte ,_adef int )(_dgb error ){const _cgc ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0031";
var (_bagb ,_cde ,_fg ,_cbe ,_fe ,_adg ,_eeb ,_gbc int ;_gbe ,_cae uint32 ;_fff ,_ebeg byte ;_ddd uint16 ;);_cdbe :=make ([]byte ,4);_ebb :=make ([]byte ,4);for _fg =0;_fg < _efef .Height -1;_fg ,_cbe =_fg +2,_cbe +1{_bagb =_fg *_efef .RowStride ;_cde =_cbe *_gaa .RowStride ;
for _fe ,_adg =0,0;_fe < _adef ;_fe ,_adg =_fe +4,_adg +1{for _eeb =0;_eeb < 4;_eeb ++{_gbc =_bagb +_fe +_eeb ;if _gbc <=len (_efef .Data )-1&&_gbc < _bagb +_efef .RowStride {_cdbe [_eeb ]=_efef .Data [_gbc ];}else {_cdbe [_eeb ]=0x00;};_gbc =_bagb +_efef .RowStride +_fe +_eeb ;
if _gbc <=len (_efef .Data )-1&&_gbc < _bagb +(2*_efef .RowStride ){_ebb [_eeb ]=_efef .Data [_gbc ];}else {_ebb [_eeb ]=0x00;};};_gbe =_f .BigEndian .Uint32 (_cdbe );_cae =_f .BigEndian .Uint32 (_ebb );_cae |=_gbe ;_cae |=_cae <<1;_cae &=0xaaaaaaaa;_gbe =_cae |(_cae <<7);
_fff =byte (_gbe >>24);_ebeg =byte ((_gbe >>8)&0xff);_gbc =_cde +_adg ;if _gbc +1==len (_gaa .Data )-1||_gbc +1>=_cde +_gaa .RowStride {_gaa .Data [_gbc ]=_acb [_fff ];}else {_ddd =(uint16 (_acb [_fff ])<<8)|uint16 (_acb [_ebeg ]);if _dgb =_gaa .setTwoBytes (_gbc ,_ddd );
_dgb !=nil {return _a .Wrapf (_dgb ,_cgc ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_gbc );};_adg ++;};};};
return nil ;};func NewWithUnpaddedData (width ,height int ,data []byte )(*Bitmap ,error ){const _afd ="\u004e\u0065\u0077\u0057it\u0068\u0055\u006e\u0070\u0061\u0064\u0064\u0065\u0064\u0044\u0061\u0074\u0061";_bfcf :=_dged (width ,height );_bfcf .Data =data ;
if _ecbc :=((width *height )+7)>>3;len (data )< _ecbc {return nil ,_a .Errorf (_afd ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064a\u0074\u0061\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u003a\u0020\u0027\u0025\u0064\u0027\u002e\u0020\u0054\u0068\u0065\u0020\u0064\u0061t\u0061\u0020s\u0068\u006fu\u006c\u0064\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 l\u0065\u0061\u0073\u0074\u003a\u0020\u0027\u0025\u0064'\u0020\u0062\u0079\u0074\u0065\u0073",len (data ),_ecbc );
};if _cad :=_bfcf .addPadBits ();_cad !=nil {return nil ,_a .Wrap (_cad ,_afd ,"");};return _bfcf ,nil ;};func NewClassedPoints (points *Points ,classes _bb .IntSlice )(*ClassedPoints ,error ){const _egecd ="\u004e\u0065w\u0043\u006c\u0061s\u0073\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073";
if points ==nil {return nil ,_a .Error (_egecd ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0070\u006f\u0069\u006e\u0074\u0073");};if classes ==nil {return nil ,_a .Error (_egecd ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0063\u006c\u0061ss\u0065\u0073");
};_afdd :=&ClassedPoints {Points :points ,IntSlice :classes };if _dada :=_afdd .validateIntSlice ();_dada !=nil {return nil ,_a .Wrap (_dada ,_egecd ,"");};return _afdd ,nil ;};func (_bbbb Points )GetIntY (i int )(int ,error ){if i >=len (_bbbb ){return 0,_a .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065t\u0049\u006e\u0074\u0059","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return int (_bbbb [i ].Y ),nil ;};func (_fcbc *ClassedPoints )Swap (i ,j int ){_fcbc .IntSlice [i ],_fcbc .IntSlice [j ]=_fcbc .IntSlice [j ],_fcbc .IntSlice [i ];};func (_cada *Selection )findMaxTranslations ()(_eade ,_cdbdd ,_dbgc ,_gfege int ){for _cedab :=0;
_cedab < _cada .Height ;_cedab ++{for _cegc :=0;_cegc < _cada .Width ;_cegc ++{if _cada .Data [_cedab ][_cegc ]==SelHit {_eade =_fgdg (_eade ,_cada .Cx -_cegc );_cdbdd =_fgdg (_cdbdd ,_cada .Cy -_cedab );_dbgc =_fgdg (_dbgc ,_cegc -_cada .Cx );_gfege =_fgdg (_gfege ,_cedab -_cada .Cy );
};};};return _eade ,_cdbdd ,_dbgc ,_gfege ;};func _abcc (_fafb ,_cba *Bitmap ,_daad ,_ggad ,_eebc ,_cfbb ,_adfe int ,_fge CombinationOperator )error {var _bcff int ;_ffd :=func (){_bcff ++;_eebc +=_cba .RowStride ;_cfbb +=_fafb .RowStride ;_adfe +=_fafb .RowStride };
for _bcff =_daad ;_bcff < _ggad ;_ffd (){_afdec :=_eebc ;for _efee :=_cfbb ;_efee <=_adfe ;_efee ++{_gde ,_eabb :=_cba .GetByte (_afdec );if _eabb !=nil {return _eabb ;};_dade ,_eabb :=_fafb .GetByte (_efee );if _eabb !=nil {return _eabb ;};if _eabb =_cba .SetByte (_afdec ,_eggc (_gde ,_dade ,_fge ));
_eabb !=nil {return _eabb ;};_afdec ++;};};return nil ;};func _cgdb (_fcgef ...MorphProcess )(_fedf error ){const _edfd ="v\u0065r\u0069\u0066\u0079\u004d\u006f\u0072\u0070\u0068P\u0072\u006f\u0063\u0065ss\u0065\u0073";var _cded ,_dafgd int ;for _daff ,_bbbd :=range _fcgef {if _fedf =_bbbd .verify (_daff ,&_cded ,&_dafgd );
_fedf !=nil {return _a .Wrap (_fedf ,_edfd ,"");};};if _dafgd !=0&&_cded !=0{return _a .Error (_edfd ,"\u004d\u006f\u0072\u0070\u0068\u0020\u0073\u0065\u0071\u0075\u0065n\u0063\u0065\u0020\u002d\u0020\u0062\u006f\u0072d\u0065r\u0020\u0061\u0064\u0064\u0065\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u0065\u0074\u0020\u0072\u0065\u0064u\u0063\u0074\u0069\u006f\u006e\u0020\u006e\u006f\u0074\u0020\u0030");
};return nil ;};const (_ LocationFilter =iota ;LocSelectWidth ;LocSelectHeight ;LocSelectXVal ;LocSelectYVal ;LocSelectIfEither ;LocSelectIfBoth ;);func (_gca *Bitmap )GetVanillaData ()[]byte {if _gca .Color ==Chocolate {_gca .inverseData ();};return _gca .Data ;
};const (_edeb shift =iota ;_dadf ;);const (PixSrc RasterOperator =0xc;PixDst RasterOperator =0xa;PixNotSrc RasterOperator =0x3;PixNotDst RasterOperator =0x5;PixClr RasterOperator =0x0;PixSet RasterOperator =0xf;PixSrcOrDst RasterOperator =0xe;PixSrcAndDst RasterOperator =0x8;
PixSrcXorDst RasterOperator =0x6;PixNotSrcOrDst RasterOperator =0xb;PixNotSrcAndDst RasterOperator =0x2;PixSrcOrNotDst RasterOperator =0xd;PixSrcAndNotDst RasterOperator =0x4;PixNotPixSrcOrDst RasterOperator =0x1;PixNotPixSrcAndDst RasterOperator =0x7;
PixNotPixSrcXorDst RasterOperator =0x9;PixPaint =PixSrcOrDst ;PixSubtract =PixNotSrcAndDst ;PixMask =PixSrcAndDst ;);func (_cfa *Bitmap )GetBitOffset (x int )int {return x &0x07};func (_bba *Bitmap )setTwoBytes (_gfd int ,_degf uint16 )error {if _gfd +1> len (_bba .Data )-1{return _a .Errorf ("s\u0065\u0074\u0054\u0077\u006f\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_gfd );
};_bba .Data [_gfd ]=byte ((_degf &0xff00)>>8);_bba .Data [_gfd +1]=byte (_degf &0xff);return nil ;};func (_dbdb *Bitmaps )GroupByWidth ()(*BitmapsArray ,error ){const _gcge ="\u0047\u0072\u006fu\u0070\u0042\u0079\u0057\u0069\u0064\u0074\u0068";if len (_dbdb .Values )==0{return nil ,_a .Error (_gcge ,"\u006eo\u0020v\u0061\u006c\u0075\u0065\u0073 \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");
};_deadf :=&BitmapsArray {};_dbdb .SortByWidth ();_cddd :=-1;_cbcf :=-1;for _ddgg :=0;_ddgg < len (_dbdb .Values );_ddgg ++{_afea :=_dbdb .Values [_ddgg ].Width ;if _afea > _cddd {_cddd =_afea ;_cbcf ++;_deadf .Values =append (_deadf .Values ,&Bitmaps {});
};_deadf .Values [_cbcf ].AddBitmap (_dbdb .Values [_ddgg ]);};return _deadf ,nil ;};type BitmapsArray struct{Values []*Bitmaps ;Boxes []*_bf .Rectangle ;};func (_dafb *Bitmap )clearAll ()error {return _dafb .RasterOperation (0,0,_dafb .Width ,_dafb .Height ,PixClr ,nil ,0,0);
};func (_bac *Bitmap )SetByte (index int ,v byte )error {if index > len (_bac .Data )-1||index < 0{return _a .Errorf ("\u0053e\u0074\u0042\u0079\u0074\u0065","\u0069\u006e\u0064\u0065x \u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020%\u0064",index );
};_bac .Data [index ]=v ;return nil ;};func (_eacc *ClassedPoints )Less (i ,j int )bool {return _eacc ._cgfec (i ,j )};type Boxes []*_bf .Rectangle ;type byWidth Bitmaps ;func _bfcd (_gbf ,_adcc *Bitmap ,_ceed ,_dadd int )(*Bitmap ,error ){const _gaeef ="\u0063\u006c\u006f\u0073\u0065\u0053\u0061\u0066\u0065B\u0072\u0069\u0063\u006b";
if _adcc ==nil {return nil ,_a .Error (_gaeef ,"\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _ceed < 1||_dadd < 1{return nil ,_a .Error (_gaeef ,"\u0068s\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0073\u0069z\u0065\u0020\u006e\u006f\u0074\u0020\u003e\u003d\u0020\u0031");
};if _ceed ==1&&_dadd ==1{return _adgc (_gbf ,_adcc );};if MorphBC ==SymmetricMorphBC {_cffc ,_bdba :=_abfec (_gbf ,_adcc ,_ceed ,_dadd );if _bdba !=nil {return nil ,_a .Wrap (_bdba ,_gaeef ,"\u0053\u0079m\u006d\u0065\u0074r\u0069\u0063\u004d\u006f\u0072\u0070\u0068\u0042\u0043");
};return _cffc ,nil ;};_cgcb :=_fgdg (_ceed /2,_dadd /2);_adgb :=8*((_cgcb +7)/8);_beaf ,_agd :=_adcc .AddBorder (_adgb ,0);if _agd !=nil {return nil ,_a .Wrapf (_agd ,_gaeef ,"\u0042\u006f\u0072\u0064\u0065\u0072\u0053\u0069\u007ae\u003a\u0020\u0025\u0064",_adgb );
};var _abdg ,_aecf *Bitmap ;if _ceed ==1||_dadd ==1{_bead :=SelCreateBrick (_dadd ,_ceed ,_dadd /2,_ceed /2,SelHit );_abdg ,_agd =_bgeca (nil ,_beaf ,_bead );if _agd !=nil {return nil ,_a .Wrap (_agd ,_gaeef ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};}else {_cbeed :=SelCreateBrick (1,_ceed ,0,_ceed /2,SelHit );_ggab ,_ebcc :=_cfaa (nil ,_beaf ,_cbeed );if _ebcc !=nil {return nil ,_a .Wrap (_ebcc ,_gaeef ,"\u0072\u0065\u0067\u0075la\u0072\u0020\u002d\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0064\u0069\u006c\u0061t\u0065");
};_gacd :=SelCreateBrick (_dadd ,1,_dadd /2,0,SelHit );_abdg ,_ebcc =_cfaa (nil ,_ggab ,_gacd );if _ebcc !=nil {return nil ,_a .Wrap (_ebcc ,_gaeef ,"\u0072\u0065\u0067ul\u0061\u0072\u0020\u002d\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};if _ ,_ebcc =_gbac (_ggab ,_abdg ,_cbeed );_ebcc !=nil {return nil ,_a .Wrap (_ebcc ,_gaeef ,"r\u0065\u0067\u0075\u006car\u0020-\u0020\u0066\u0069\u0072\u0073t\u0020\u0065\u0072\u006f\u0064\u0065");};if _ ,_ebcc =_gbac (_abdg ,_ggab ,_gacd );_ebcc !=nil {return nil ,_a .Wrap (_ebcc ,_gaeef ,"\u0072\u0065\u0067\u0075la\u0072\u0020\u002d\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0065\u0072\u006fd\u0065");
};};if _aecf ,_agd =_abdg .RemoveBorder (_adgb );_agd !=nil {return nil ,_a .Wrap (_agd ,_gaeef ,"\u0072e\u0067\u0075\u006c\u0061\u0072");};if _gbf ==nil {return _aecf ,nil ;};if _ ,_agd =_adgc (_gbf ,_aecf );_agd !=nil {return nil ,_agd ;};return _gbf ,nil ;
};func (_daf *Bitmap )SizesEqual (s *Bitmap )bool {if _daf ==s {return true ;};if _daf .Width !=s .Width ||_daf .Height !=s .Height {return false ;};return true ;};func (_edfb MorphProcess )getWidthHeight ()(_faba ,_gabbfa int ){return _edfb .Arguments [0],_edfb .Arguments [1];
};func _ebag ()[]int {_efdca :=make ([]int ,256);for _bfca :=0;_bfca <=0xff;_bfca ++{_eadc :=byte (_bfca );_efdca [_eadc ]=int (_eadc &0x1)+(int (_eadc >>1)&0x1)+(int (_eadc >>2)&0x1)+(int (_eadc >>3)&0x1)+(int (_eadc >>4)&0x1)+(int (_eadc >>5)&0x1)+(int (_eadc >>6)&0x1)+(int (_eadc >>7)&0x1);
};return _efdca ;};var (_aeeg *Bitmap ;_dceb *Bitmap ;);func (_fdbb *Bitmap )setAll ()error {_ace :=_fabc (_fdbb ,0,0,_fdbb .Width ,_fdbb .Height ,PixSet ,nil ,0,0);if _ace !=nil {return _a .Wrap (_ace ,"\u0073\u0065\u0074\u0041\u006c\u006c","");};return nil ;
};func (_deca *Bitmap )And (s *Bitmap )(_fgd *Bitmap ,_acd error ){const _dgg ="\u0042\u0069\u0074\u006d\u0061\u0070\u002e\u0041\u006e\u0064";if _deca ==nil {return nil ,_a .Error (_dgg ,"\u0027b\u0069t\u006d\u0061\u0070\u0020\u0027b\u0027\u0020i\u0073\u0020\u006e\u0069\u006c");
};if s ==nil {return nil ,_a .Error (_dgg ,"\u0062\u0069\u0074\u006d\u0061\u0070\u0020\u0027\u0073\u0027\u0020\u0069s\u0020\u006e\u0069\u006c");};if !_deca .SizesEqual (s ){_g .Log .Debug ("\u0025\u0073\u0020-\u0020\u0042\u0069\u0074\u006d\u0061\u0070\u0020\u0027\u0073\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0073\u0069\u007a\u0065 \u0077\u0069\u0074\u0068\u0020\u0027\u0062\u0027",_dgg );
};if _fgd ,_acd =_adgc (_fgd ,_deca );_acd !=nil {return nil ,_a .Wrap (_acd ,_dgg ,"\u0063\u0061\u006e't\u0020\u0063\u0072\u0065\u0061\u0074\u0065\u0020\u0027\u0064\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _acd =_fgd .RasterOperation (0,0,_fgd .Width ,_fgd .Height ,PixSrcAndDst ,s ,0,0);
_acd !=nil {return nil ,_a .Wrap (_acd ,_dgg ,"");};return _fgd ,nil ;};const (SelDontCare SelectionValue =iota ;SelHit ;SelMiss ;);func (_cfddc *byWidth )Len ()int {return len (_cfddc .Values )};func _ebbd ()(_beb []byte ){_beb =make ([]byte ,256);for _cgfc :=0;
_cgfc < 256;_cgfc ++{_cgad :=byte (_cgfc );_beb [_cgad ]=(_cgad &0x01)|((_cgad &0x04)>>1)|((_cgad &0x10)>>2)|((_cgad &0x40)>>3)|((_cgad &0x02)<<3)|((_cgad &0x08)<<2)|((_cgad &0x20)<<1)|(_cgad &0x80);};return _beb ;};func (_bed *Bitmap )thresholdPixelSum (_bdge int )bool {var (_gdaa int ;
_cdca uint8 ;_abgc byte ;_deaf int ;);_eab :=_bed .RowStride ;_cbcg :=uint (_bed .Width &0x07);if _cbcg !=0{_cdca =uint8 ((0xff<<(8-_cbcg ))&0xff);_eab --;};for _cgdd :=0;_cgdd < _bed .Height ;_cgdd ++{for _deaf =0;_deaf < _eab ;_deaf ++{_abgc =_bed .Data [_cgdd *_bed .RowStride +_deaf ];
_gdaa +=int (_cdaee [_abgc ]);};if _cbcg !=0{_abgc =_bed .Data [_cgdd *_bed .RowStride +_deaf ]&_cdca ;_gdaa +=int (_cdaee [_abgc ]);};if _gdaa > _bdge {return true ;};};return false ;};func (_gaaf *Bitmap )Copy ()*Bitmap {_ebg :=make ([]byte ,len (_gaaf .Data ));
copy (_ebg ,_gaaf .Data );return &Bitmap {Width :_gaaf .Width ,Height :_gaaf .Height ,RowStride :_gaaf .RowStride ,Data :_ebg ,Color :_gaaf .Color ,Text :_gaaf .Text ,BitmapNumber :_gaaf .BitmapNumber ,Special :_gaaf .Special };};func _dbbc (_cbfd *Bitmap ,_cfafc ,_aedg int ,_ffceg ,_cbbc int ,_ceab RasterOperator ){var (_ccedc int ;
_fgac byte ;_ebad ,_badg int ;_gebgf int ;);_dggd :=_ffceg >>3;_aacg :=_ffceg &7;if _aacg > 0{_fgac =_fgb [_aacg ];};_ccedc =_cbfd .RowStride *_aedg +(_cfafc >>3);switch _ceab {case PixClr :for _ebad =0;_ebad < _cbbc ;_ebad ++{_gebgf =_ccedc +_ebad *_cbfd .RowStride ;
for _badg =0;_badg < _dggd ;_badg ++{_cbfd .Data [_gebgf ]=0x0;_gebgf ++;};if _aacg > 0{_cbfd .Data [_gebgf ]=_ceec (_cbfd .Data [_gebgf ],0x0,_fgac );};};case PixSet :for _ebad =0;_ebad < _cbbc ;_ebad ++{_gebgf =_ccedc +_ebad *_cbfd .RowStride ;for _badg =0;
_badg < _dggd ;_badg ++{_cbfd .Data [_gebgf ]=0xff;_gebgf ++;};if _aacg > 0{_cbfd .Data [_gebgf ]=_ceec (_cbfd .Data [_gebgf ],0xff,_fgac );};};case PixNotDst :for _ebad =0;_ebad < _cbbc ;_ebad ++{_gebgf =_ccedc +_ebad *_cbfd .RowStride ;for _badg =0;_badg < _dggd ;
_badg ++{_cbfd .Data [_gebgf ]=^_cbfd .Data [_gebgf ];_gebgf ++;};if _aacg > 0{_cbfd .Data [_gebgf ]=_ceec (_cbfd .Data [_gebgf ],^_cbfd .Data [_gebgf ],_fgac );};};};};func SelCreateBrick (h ,w int ,cy ,cx int ,tp SelectionValue )*Selection {_dfbd :=_gbcgd (h ,w ,"");
_dfbd .setOrigin (cy ,cx );var _edce ,_ffbf int ;for _edce =0;_edce < h ;_edce ++{for _ffbf =0;_ffbf < w ;_ffbf ++{_dfbd .Data [_edce ][_ffbf ]=tp ;};};return _dfbd ;};func _ga ()(_cda [256]uint16 ){for _dfg :=0;_dfg < 256;_dfg ++{if _dfg &0x01!=0{_cda [_dfg ]|=0x3;
};if _dfg &0x02!=0{_cda [_dfg ]|=0xc;};if _dfg &0x04!=0{_cda [_dfg ]|=0x30;};if _dfg &0x08!=0{_cda [_dfg ]|=0xc0;};if _dfg &0x10!=0{_cda [_dfg ]|=0x300;};if _dfg &0x20!=0{_cda [_dfg ]|=0xc00;};if _dfg &0x40!=0{_cda [_dfg ]|=0x3000;};if _dfg &0x80!=0{_cda [_dfg ]|=0xc000;
};};return _cda ;};func _gfeeb (_gfabd *Bitmap ,_ceca *Bitmap ,_gacf int )(_aefa error ){const _abgg ="\u0073\u0065\u0065\u0064\u0066\u0069\u006c\u006c\u0042\u0069\u006e\u0061r\u0079\u004c\u006f\u0077";_abfc :=_bgbca (_gfabd .Height ,_ceca .Height );_gbbd :=_bgbca (_gfabd .RowStride ,_ceca .RowStride );
switch _gacf {case 4:_aefa =_gcff (_gfabd ,_ceca ,_abfc ,_gbbd );case 8:_aefa =_ecgf (_gfabd ,_ceca ,_abfc ,_gbbd );default:return _a .Errorf (_abgg ,"\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0034\u0020\u006fr\u0020\u0038\u0020\u002d\u0020i\u0073\u003a \u0027\u0025\u0064\u0027",_gacf );
};if _aefa !=nil {return _a .Wrap (_aefa ,_abgg ,"");};return nil ;};func (_fgdd *Bitmap )addPadBits ()(_bcfg error ){const _abga ="\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0061\u0064\u0064\u0050\u0061d\u0042\u0069\u0074\u0073";_abe :=_fgdd .Width %8;
if _abe ==0{return nil ;};_agf :=_fgdd .Width /8;_aaa :=_e .NewReader (_fgdd .Data );_gfab :=make ([]byte ,_fgdd .Height *_fgdd .RowStride );_aaaa :=_e .NewWriterMSB (_gfab );_abec :=make ([]byte ,_agf );var (_aad int ;_fag uint64 ;);for _aad =0;_aad < _fgdd .Height ;
_aad ++{if _ ,_bcfg =_aaa .Read (_abec );_bcfg !=nil {return _a .Wrap (_bcfg ,_abga ,"\u0066u\u006c\u006c\u0020\u0062\u0079\u0074e");};if _ ,_bcfg =_aaaa .Write (_abec );_bcfg !=nil {return _a .Wrap (_bcfg ,_abga ,"\u0066\u0075\u006c\u006c\u0020\u0062\u0079\u0074\u0065\u0073");
};if _fag ,_bcfg =_aaa .ReadBits (byte (_abe ));_bcfg !=nil {return _a .Wrap (_bcfg ,_abga ,"\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0062\u0069\u0074\u0073");};if _bcfg =_aaaa .WriteByte (byte (_fag )<<uint (8-_abe ));_bcfg !=nil {return _a .Wrap (_bcfg ,_abga ,"\u006ca\u0073\u0074\u0020\u0062\u0079\u0074e");
};};_fgdd .Data =_aaaa .Data ();return nil ;};type Component int ;func (_dbde *Bitmaps )GetBitmap (i int )(*Bitmap ,error ){const _bdbf ="\u0047e\u0074\u0042\u0069\u0074\u006d\u0061p";if _dbde ==nil {return nil ,_a .Error (_bdbf ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0042\u0069\u0074ma\u0070\u0073");
};if i > len (_dbde .Values )-1{return nil ,_a .Errorf (_bdbf ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _dbde .Values [i ],nil ;};var _ _b .Interface =&ClassedPoints {};
func TstISymbol (t *_ac .T ,scale ...int )*Bitmap {_dbceg ,_bdcad :=NewWithData (1,5,[]byte {0x80,0x80,0x80,0x80,0x80});_af .NoError (t ,_bdcad );return TstGetScaledSymbol (t ,_dbceg ,scale ...);};func (_cefa *Bitmap )setEightFullBytes (_dfbe int ,_efa uint64 )error {if _dfbe +7> len (_cefa .Data )-1{return _a .Error ("\u0073\u0065\u0074\u0045\u0069\u0067\u0068\u0074\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_cefa .Data [_dfbe ]=byte ((_efa &0xff00000000000000)>>56);_cefa .Data [_dfbe +1]=byte ((_efa &0xff000000000000)>>48);_cefa .Data [_dfbe +2]=byte ((_efa &0xff0000000000)>>40);_cefa .Data [_dfbe +3]=byte ((_efa &0xff00000000)>>32);_cefa .Data [_dfbe +4]=byte ((_efa &0xff000000)>>24);
_cefa .Data [_dfbe +5]=byte ((_efa &0xff0000)>>16);_cefa .Data [_dfbe +6]=byte ((_efa &0xff00)>>8);_cefa .Data [_dfbe +7]=byte (_efa &0xff);return nil ;};func (_fgbf *Bitmaps )CountPixels ()*_bb .NumSlice {_eaef :=&_bb .NumSlice {};for _ ,_bfad :=range _fgbf .Values {_eaef .AddInt (_bfad .CountPixels ());
};return _eaef ;};func (_gfca CombinationOperator )String ()string {var _daec string ;switch _gfca {case CmbOpOr :_daec ="\u004f\u0052";case CmbOpAnd :_daec ="\u0041\u004e\u0044";case CmbOpXor :_daec ="\u0058\u004f\u0052";case CmbOpXNor :_daec ="\u0058\u004e\u004f\u0052";
case CmbOpReplace :_daec ="\u0052E\u0050\u004c\u0041\u0043\u0045";case CmbOpNot :_daec ="\u004e\u004f\u0054";};return _daec ;};func (_gfe *Bitmap )ClipRectangle (box *_bf .Rectangle )(_abf *Bitmap ,_dagb *_bf .Rectangle ,_beg error ){const _eaff ="\u0043\u006c\u0069\u0070\u0052\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065";
if box ==nil {return nil ,nil ,_a .Error (_eaff ,"\u0062o\u0078 \u0069\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};_acbd ,_gcbb :=_gfe .Width ,_gfe .Height ;_abg :=_bf .Rect (0,0,_acbd ,_gcbb );if !box .Overlaps (_abg ){return nil ,nil ,_a .Error (_eaff ,"b\u006f\u0078\u0020\u0064oe\u0073n\u0027\u0074\u0020\u006f\u0076e\u0072\u006c\u0061\u0070\u0020\u0062");
};_dgfc :=box .Intersect (_abg );_egg ,_aac :=_dgfc .Min .X ,_dgfc .Min .Y ;_dcd ,_fdfb :=_dgfc .Dx (),_dgfc .Dy ();_abf =New (_dcd ,_fdfb );_abf .Text =_gfe .Text ;if _beg =_abf .RasterOperation (0,0,_dcd ,_fdfb ,PixSrc ,_gfe ,_egg ,_aac );_beg !=nil {return nil ,nil ,_a .Wrap (_beg ,_eaff ,"\u0050\u0069\u0078\u0053\u0072\u0063\u0020\u0074\u006f\u0020\u0063\u006ci\u0070\u0070\u0065\u0064");
};_dagb =&_dgfc ;return _abf ,_dagb ,nil ;};func RasterOperation (dest *Bitmap ,dx ,dy ,dw ,dh int ,op RasterOperator ,src *Bitmap ,sx ,sy int )error {return _fabc (dest ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );};func (_bfbdc MorphProcess )verify (_feaf int ,_egga ,_ffbcf *int )error {const _acag ="\u004d\u006f\u0072\u0070hP\u0072\u006f\u0063\u0065\u0073\u0073\u002e\u0076\u0065\u0072\u0069\u0066\u0079";
switch _bfbdc .Operation {case MopDilation ,MopErosion ,MopOpening ,MopClosing :if len (_bfbdc .Arguments )!=2{return _a .Error (_acag ,"\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0064\u0027\u002c\u0020\u0027\u0065\u0027\u002c \u0027\u006f\u0027\u002c\u0020\u0027\u0063\u0027\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0032\u0020\u0061r\u0067\u0075\u006d\u0065\u006et\u0073");
};_defd ,_cbac :=_bfbdc .getWidthHeight ();if _defd <=0||_cbac <=0{return _a .Error (_acag ,"O\u0070er\u0061t\u0069o\u006e\u003a\u0020\u0027\u0064'\u002c\u0020\u0027e\u0027\u002c\u0020\u0027\u006f'\u002c\u0020\u0027c\u0027\u0020\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0062\u006f\u0074h w\u0069\u0064\u0074\u0068\u0020\u0061n\u0064\u0020\u0068\u0065\u0069\u0067\u0068\u0074\u0020\u0074\u006f\u0020b\u0065 \u003e\u003d\u0020\u0030");
};case MopRankBinaryReduction :_ead :=len (_bfbdc .Arguments );*_egga +=_ead ;if _ead < 1||_ead > 4{return _a .Error (_acag ,"\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0072\u0027\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u0031\u0020\u0061\u006e\u0064\u0020\u0061\u0074\u0020\u006d\u006fs\u0074\u0020\u0034\u0020\u0061\u0072g\u0075\u006d\u0065n\u0074\u0073");
};for _cdbf :=0;_cdbf < _ead ;_cdbf ++{if _bfbdc .Arguments [_cdbf ]< 1||_bfbdc .Arguments [_cdbf ]> 4{return _a .Error (_acag ,"\u0052\u0061\u006e\u006b\u0042\u0069n\u0061\u0072\u0079\u0052\u0065\u0064\u0075\u0063\u0074\u0069\u006f\u006e\u0020\u006c\u0065\u0076\u0065\u006c\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065 \u00280\u002c\u0020\u0034\u003e");
};};case MopReplicativeBinaryExpansion :if len (_bfbdc .Arguments )==0{return _a .Error (_acag ,"\u0052\u0065\u0070\u006c\u0069\u0063\u0061\u0074i\u0076\u0065\u0042in\u0061\u0072\u0079\u0045\u0078\u0070a\u006e\u0073\u0069\u006f\u006e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020o\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_cgcg :=_bfbdc .Arguments [0];if _cgcg !=2&&_cgcg !=4&&_cgcg !=8{return _a .Error (_acag ,"R\u0065\u0070\u006c\u0069\u0063\u0061\u0074\u0069\u0076\u0065\u0042\u0069\u006e\u0061\u0072\u0079\u0045\u0078\u0070\u0061\u006e\u0073\u0069\u006f\u006e\u0020m\u0075s\u0074\u0020\u0062\u0065 \u006f\u0066 \u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d");
};*_egga -=_cgge [_cgcg /4];case MopAddBorder :if len (_bfbdc .Arguments )==0{return _a .Error (_acag ,"\u0041\u0064\u0064B\u006f\u0072\u0064\u0065r\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dbb :=_bfbdc .Arguments [0];if _feaf > 0{return _a .Error (_acag ,"\u0041\u0064\u0064\u0042\u006f\u0072\u0064\u0065\u0072\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020f\u0069\u0072\u0073\u0074\u0020\u006d\u006f\u0072\u0070\u0068\u0020\u0070\u0072o\u0063\u0065\u0073\u0073");
};if _dbb < 1{return _a .Error (_acag ,"\u0041\u0064\u0064\u0042o\u0072\u0064\u0065\u0072\u0020\u0076\u0061\u006c\u0075\u0065 \u006co\u0077\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u0030");};*_ffbcf =_dbb ;};return nil ;};func _gfae ()[]int {_cfgfe :=make ([]int ,256);
_cfgfe [0]=0;_cfgfe [1]=7;var _gdeb int ;for _gdeb =2;_gdeb < 4;_gdeb ++{_cfgfe [_gdeb ]=_cfgfe [_gdeb -2]+6;};for _gdeb =4;_gdeb < 8;_gdeb ++{_cfgfe [_gdeb ]=_cfgfe [_gdeb -4]+5;};for _gdeb =8;_gdeb < 16;_gdeb ++{_cfgfe [_gdeb ]=_cfgfe [_gdeb -8]+4;};
for _gdeb =16;_gdeb < 32;_gdeb ++{_cfgfe [_gdeb ]=_cfgfe [_gdeb -16]+3;};for _gdeb =32;_gdeb < 64;_gdeb ++{_cfgfe [_gdeb ]=_cfgfe [_gdeb -32]+2;};for _gdeb =64;_gdeb < 128;_gdeb ++{_cfgfe [_gdeb ]=_cfgfe [_gdeb -64]+1;};for _gdeb =128;_gdeb < 256;_gdeb ++{_cfgfe [_gdeb ]=_cfgfe [_gdeb -128];
};return _cfgfe ;};func Rect (x ,y ,w ,h int )(*_bf .Rectangle ,error ){const _cfg ="b\u0069\u0074\u006d\u0061\u0070\u002e\u0052\u0065\u0063\u0074";if x < 0{w +=x ;x =0;if w <=0{return nil ,_a .Errorf (_cfg ,"x\u003a\u0027\u0025\u0064\u0027\u0020<\u0020\u0030\u0020\u0061\u006e\u0064\u0020\u0077\u003a \u0027\u0025\u0064'\u0020<\u003d\u0020\u0030",x ,w );
};};if y < 0{h +=y ;y =0;if h <=0{return nil ,_a .Error (_cfg ,"\u0079\u0020\u003c 0\u0020\u0061\u006e\u0064\u0020\u0062\u006f\u0078\u0020\u006f\u0066\u0066\u0020\u002b\u0071\u0075\u0061\u0064");};};_fbag :=_bf .Rect (x ,y ,x +w ,y +h );return &_fbag ,nil ;
};func (_ffee *Bitmap )SetPixel (x ,y int ,pixel byte )error {_adfd :=_ffee .GetByteIndex (x ,y );if _adfd > len (_ffee .Data )-1{return _a .Errorf ("\u0053\u0065\u0074\u0050\u0069\u0078\u0065\u006c","\u0069\u006e\u0064\u0065x \u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020%\u0064",_adfd );
};_fdg :=_ffee .GetBitOffset (x );_aae :=uint (7-_fdg );_bdb :=_ffee .Data [_adfd ];var _fbc byte ;if pixel ==1{_fbc =_bdb |(pixel &0x01<<_aae );}else {_fbc =_bdb &^(1<<_aae );};_ffee .Data [_adfd ]=_fbc ;return nil ;};func (_eebg *Bitmaps )SortByHeight (){_ggef :=(*byHeight )(_eebg );
_b .Sort (_ggef )};type SizeSelection int ;func TstWSymbol (t *_ac .T ,scale ...int )*Bitmap {_dcebg ,_gfeb :=NewWithData (5,5,[]byte {0x88,0x88,0xA8,0xD8,0x88});_af .NoError (t ,_gfeb );return TstGetScaledSymbol (t ,_dcebg ,scale ...);};func _adgc (_bgafc ,_abcf *Bitmap )(*Bitmap ,error ){if _abcf ==nil {return nil ,_a .Error ("\u0063\u006f\u0070\u0079\u0042\u0069\u0074\u006d\u0061\u0070","\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _abcf ==_bgafc {return _bgafc ,nil ;};if _bgafc ==nil {_bgafc =_abcf .createTemplate ();copy (_bgafc .Data ,_abcf .Data );return _bgafc ,nil ;};_ecg :=_bgafc .resizeImageData (_abcf );if _ecg !=nil {return nil ,_a .Wrap (_ecg ,"\u0063\u006f\u0070\u0079\u0042\u0069\u0074\u006d\u0061\u0070","");
};_bgafc .Text =_abcf .Text ;copy (_bgafc .Data ,_abcf .Data );return _bgafc ,nil ;};func _fgfa (_fabbd *Bitmap ,_bbbc *_bb .Stack ,_geag ,_cdbd int )(_dcdce *_bf .Rectangle ,_egcc error ){const _abbc ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";
if _fabbd ==nil {return nil ,_a .Error (_abbc ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _bbbc ==nil {return nil ,_a .Error (_abbc ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");
};_ffgde ,_dfcc :=_fabbd .Width ,_fabbd .Height ;_ecbca :=_ffgde -1;_dfbb :=_dfcc -1;if _geag < 0||_geag > _ecbca ||_cdbd < 0||_cdbd > _dfbb ||!_fabbd .GetPixel (_geag ,_cdbd ){return nil ,nil ;};_adda :=_bf .Rect (100000,100000,0,0);if _egcc =_dfba (_bbbc ,_geag ,_geag ,_cdbd ,1,_dfbb ,&_adda );
_egcc !=nil {return nil ,_a .Wrap (_egcc ,_abbc ,"\u0069\u006e\u0069t\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _egcc =_dfba (_bbbc ,_geag ,_geag ,_cdbd +1,-1,_dfbb ,&_adda );_egcc !=nil {return nil ,_a .Wrap (_egcc ,_abbc ,"\u0032\u006ed\u0020\u0069\u006ei\u0074\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");
};_adda .Min .X ,_adda .Max .X =_geag ,_geag ;_adda .Min .Y ,_adda .Max .Y =_cdbd ,_cdbd ;var (_gad *fillSegment ;_cefaea int ;);for _bbbc .Len ()> 0{if _gad ,_egcc =_efagc (_bbbc );_egcc !=nil {return nil ,_a .Wrap (_egcc ,_abbc ,"");};_cdbd =_gad ._gaeea ;
for _geag =_gad ._eadd -1;_geag >=0&&_fabbd .GetPixel (_geag ,_cdbd );_geag --{if _egcc =_fabbd .SetPixel (_geag ,_cdbd ,0);_egcc !=nil {return nil ,_a .Wrap (_egcc ,_abbc ,"\u0031s\u0074\u0020\u0073\u0065\u0074");};};if _geag >=_gad ._eadd -1{for {for _geag ++;
_geag <=_gad ._bbef +1&&_geag <=_ecbca &&!_fabbd .GetPixel (_geag ,_cdbd );_geag ++{};_cefaea =_geag ;if !(_geag <=_gad ._bbef +1&&_geag <=_ecbca ){break ;};for ;_geag <=_ecbca &&_fabbd .GetPixel (_geag ,_cdbd );_geag ++{if _egcc =_fabbd .SetPixel (_geag ,_cdbd ,0);
_egcc !=nil {return nil ,_a .Wrap (_egcc ,_abbc ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _egcc =_dfba (_bbbc ,_cefaea ,_geag -1,_gad ._gaeea ,_gad ._edgdc ,_dfbb ,&_adda );_egcc !=nil {return nil ,_a .Wrap (_egcc ,_abbc ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");
};if _geag > _gad ._bbef {if _egcc =_dfba (_bbbc ,_gad ._bbef +1,_geag -1,_gad ._gaeea ,-_gad ._edgdc ,_dfbb ,&_adda );_egcc !=nil {return nil ,_a .Wrap (_egcc ,_abbc ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};};continue ;};_cefaea =_geag +1;if _cefaea < _gad ._eadd {if _egcc =_dfba (_bbbc ,_cefaea ,_gad ._eadd -1,_gad ._gaeea ,-_gad ._edgdc ,_dfbb ,&_adda );_egcc !=nil {return nil ,_a .Wrap (_egcc ,_abbc ,"\u006c\u0065\u0061\u006b\u0020\u006f\u006e\u0020\u006c\u0065\u0066\u0074 \u0073\u0069\u0064\u0065");
};};_geag =_gad ._eadd ;for {for ;_geag <=_ecbca &&_fabbd .GetPixel (_geag ,_cdbd );_geag ++{if _egcc =_fabbd .SetPixel (_geag ,_cdbd ,0);_egcc !=nil {return nil ,_a .Wrap (_egcc ,_abbc ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _egcc =_dfba (_bbbc ,_cefaea ,_geag -1,_gad ._gaeea ,_gad ._edgdc ,_dfbb ,&_adda );
_egcc !=nil {return nil ,_a .Wrap (_egcc ,_abbc ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _geag > _gad ._bbef {if _egcc =_dfba (_bbbc ,_gad ._bbef +1,_geag -1,_gad ._gaeea ,-_gad ._edgdc ,_dfbb ,&_adda );_egcc !=nil {return nil ,_a .Wrap (_egcc ,_abbc ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};for _geag ++;_geag <=_gad ._bbef +1&&_geag <=_ecbca &&!_fabbd .GetPixel (_geag ,_cdbd );_geag ++{};_cefaea =_geag ;if !(_geag <=_gad ._bbef +1&&_geag <=_ecbca ){break ;};};};_adda .Max .X ++;_adda .Max .Y ++;return &_adda ,nil ;};func TstAddSymbol (t *_ac .T ,bms *Bitmaps ,sym *Bitmap ,x *int ,y int ,space int ){bms .AddBitmap (sym );
_bfae :=_bf .Rect (*x ,y ,*x +sym .Width ,y +sym .Height );bms .AddBox (&_bfae );*x +=sym .Width +space ;};func (_baed *Boxes )Add (box *_bf .Rectangle )error {if _baed ==nil {return _a .Error ("\u0042o\u0078\u0065\u0073\u002e\u0041\u0064d","\u0027\u0042\u006f\u0078es\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};*_baed =append (*_baed ,box );return nil ;};func (_gcdc *Boxes )SelectBySize (width ,height int ,tp LocationFilter ,relation SizeComparison )(_ddeb *Boxes ,_gbcgb error ){const _gfdg ="\u0042o\u0078e\u0073\u002e\u0053\u0065\u006ce\u0063\u0074B\u0079\u0053\u0069\u007a\u0065";
if _gcdc ==nil {return nil ,_a .Error (_gfdg ,"b\u006f\u0078\u0065\u0073 '\u0062'\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064");};if len (*_gcdc )==0{return _gcdc ,nil ;};switch tp {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_a .Errorf (_gfdg ,"\u0069\u006e\u0076al\u0069\u0064\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",tp );
};switch relation {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE :default:return nil ,_a .Errorf (_gfdg ,"i\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0020t\u0079\u0070\u0065:\u0020'\u0025\u0064\u0027",tp );
};_cdfcc :=_gcdc .makeSizeIndicator (width ,height ,tp ,relation );_adag ,_gbcgb :=_gcdc .selectWithIndicator (_cdfcc );if _gbcgb !=nil {return nil ,_a .Wrap (_gbcgb ,_gfdg ,"");};return _adag ,nil ;};func (_ggbe *Bitmap )RemoveBorder (borderSize int )(*Bitmap ,error ){if borderSize ==0{return _ggbe .Copy (),nil ;
};_ebea ,_eag :=_ggbe .removeBorderGeneral (borderSize ,borderSize ,borderSize ,borderSize );if _eag !=nil {return nil ,_a .Wrap (_eag ,"\u0052\u0065\u006do\u0076\u0065\u0042\u006f\u0072\u0064\u0065\u0072","");};return _ebea ,nil ;};func (_agac *Bitmaps )String ()string {_gdcde :=_ad .Builder {};
for _ ,_eeec :=range _agac .Values {_gdcde .WriteString (_eeec .String ());_gdcde .WriteRune ('\n');};return _gdcde .String ();};var _cgge =[5]int {1,2,3,0,4};func _dba (_deg *Bitmap ,_aee ...int )(_gac *Bitmap ,_dad error ){const _eac ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0043\u0061\u0073\u0063\u0061\u0064\u0065";
if _deg ==nil {return nil ,_a .Error (_eac ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if len (_aee )==0||len (_aee )> 4{return nil ,_a .Error (_eac ,"t\u0068\u0065\u0072\u0065\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0074\u0020\u006cea\u0073\u0074\u0020\u006fn\u0065\u0020\u0061\u006e\u0064\u0020\u0061\u0074\u0020mo\u0073\u0074 \u0034\u0020\u006c\u0065\u0076\u0065\u006c\u0073");
};if _aee [0]<=0{_g .Log .Debug ("\u006c\u0065\u0076\u0065\u006c\u0031\u0020\u003c\u003d\u0020\u0030 \u002d\u0020\u006e\u006f\u0020\u0072\u0065\u0064\u0075\u0063t\u0069\u006f\u006e");_gac ,_dad =_adgc (nil ,_deg );if _dad !=nil {return nil ,_a .Wrap (_dad ,_eac ,"l\u0065\u0076\u0065\u006c\u0031\u0020\u003c\u003d\u0020\u0030");
};return _gac ,nil ;};_gdg :=_ebbd ();_gac =_deg ;for _dgf ,_dcc :=range _aee {if _dcc <=0{break ;};_gac ,_dad =_ffb (_gac ,_dcc ,_gdg );if _dad !=nil {return nil ,_a .Wrapf (_dad ,_eac ,"\u006c\u0065\u0076\u0065\u006c\u0025\u0064\u0020\u0072\u0065\u0064\u0075c\u0074\u0069\u006f\u006e",_dgf );
};};return _gac ,nil ;};func TstGetScaledSymbol (t *_ac .T ,sm *Bitmap ,scale ...int )*Bitmap {if len (scale )==0{return sm ;};if scale [0]==1{return sm ;};_efagf ,_dagbeb :=MorphSequence (sm ,MorphProcess {Operation :MopReplicativeBinaryExpansion ,Arguments :scale });
_af .NoError (t ,_dagbeb );return _efagf ;};func TstImageBitmap ()*Bitmap {return _dceb .Copy ()};const (_ SizeSelection =iota ;SizeSelectByWidth ;SizeSelectByHeight ;SizeSelectByMaxDimension ;SizeSelectByArea ;SizeSelectByPerimeter ;);func (_bbg *Bitmap )CreateTemplate ()*Bitmap {return _bbg .createTemplate ()};
func (_faaf *Bitmap )AddBorderGeneral (left ,right ,top ,bot int ,val int )(*Bitmap ,error ){return _faaf .addBorderGeneral (left ,right ,top ,bot ,val );};func _dgcg (_defc ,_acbf *Bitmap ,_gcde ,_fbgc ,_eff uint ,_bfgfb ,_dgfa int ,_acee bool ,_bgbcf ,_adfb int )error {for _aacc :=_bfgfb ;
_aacc < _dgfa ;_aacc ++{if _bgbcf +1< len (_defc .Data ){_fddc :=_aacc +1==_dgfa ;_edbe ,_dedc :=_defc .GetByte (_bgbcf );if _dedc !=nil {return _dedc ;};_bgbcf ++;_edbe <<=_gcde ;_eebd ,_dedc :=_defc .GetByte (_bgbcf );if _dedc !=nil {return _dedc ;};
_eebd >>=_fbgc ;_fbbf :=_edbe |_eebd ;if _fddc &&!_acee {_fbbf =_cdag (_eff ,_fbbf );};_dedc =_acbf .SetByte (_adfb ,_fbbf );if _dedc !=nil {return _dedc ;};_adfb ++;if _fddc &&_acee {_ebgb ,_ebeaf :=_defc .GetByte (_bgbcf );if _ebeaf !=nil {return _ebeaf ;
};_ebgb <<=_gcde ;_fbbf =_cdag (_eff ,_ebgb );if _ebeaf =_acbf .SetByte (_adfb ,_fbbf );_ebeaf !=nil {return _ebeaf ;};};continue ;};_baedb ,_acde :=_defc .GetByte (_bgbcf );if _acde !=nil {_g .Log .Debug ("G\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0068\u0065\u0020\u0076\u0061l\u0075\u0065\u0020\u0061\u0074\u003a\u0020%\u0064\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020%\u0073",_bgbcf ,_acde );
return _acde ;};_baedb <<=_gcde ;_bgbcf ++;_acde =_acbf .SetByte (_adfb ,_baedb );if _acde !=nil {return _acde ;};_adfb ++;};return nil ;};type Point struct{X ,Y float32 ;};func _ebdf (_aecea *Bitmap ,_fbab ...MorphProcess )(_cgea *Bitmap ,_cfdg error ){const _ddcg ="\u006d\u006f\u0072\u0070\u0068\u0053\u0065\u0071\u0075\u0065\u006e\u0063\u0065";
if _aecea ==nil {return nil ,_a .Error (_ddcg ,"\u006d\u006f\u0072\u0070\u0068\u0053\u0065\u0071\u0075\u0065\u006e\u0063\u0065 \u0073\u006f\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};if len (_fbab )==0{return nil ,_a .Error (_ddcg ,"m\u006f\u0072\u0070\u0068\u0053\u0065q\u0075\u0065\u006e\u0063\u0065\u002c \u0073\u0065\u0071\u0075\u0065\u006e\u0063e\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");};if _cfdg =_cgdb (_fbab ...);
_cfdg !=nil {return nil ,_a .Wrap (_cfdg ,_ddcg ,"");};var _gcae ,_acdc ,_agb int ;_cgea =_aecea .Copy ();for _ ,_gccc :=range _fbab {switch _gccc .Operation {case MopDilation :_gcae ,_acdc =_gccc .getWidthHeight ();_cgea ,_cfdg =DilateBrick (nil ,_cgea ,_gcae ,_acdc );
if _cfdg !=nil {return nil ,_a .Wrap (_cfdg ,_ddcg ,"");};case MopErosion :_gcae ,_acdc =_gccc .getWidthHeight ();_cgea ,_cfdg =_bdgc (nil ,_cgea ,_gcae ,_acdc );if _cfdg !=nil {return nil ,_a .Wrap (_cfdg ,_ddcg ,"");};case MopOpening :_gcae ,_acdc =_gccc .getWidthHeight ();
_cgea ,_cfdg =_adab (nil ,_cgea ,_gcae ,_acdc );if _cfdg !=nil {return nil ,_a .Wrap (_cfdg ,_ddcg ,"");};case MopClosing :_gcae ,_acdc =_gccc .getWidthHeight ();_cgea ,_cfdg =_bfcd (nil ,_cgea ,_gcae ,_acdc );if _cfdg !=nil {return nil ,_a .Wrap (_cfdg ,_ddcg ,"");
};case MopRankBinaryReduction :_cgea ,_cfdg =_dba (_cgea ,_gccc .Arguments ...);if _cfdg !=nil {return nil ,_a .Wrap (_cfdg ,_ddcg ,"");};case MopReplicativeBinaryExpansion :_cgea ,_cfdg =_cfbca (_cgea ,_gccc .Arguments [0]);if _cfdg !=nil {return nil ,_a .Wrap (_cfdg ,_ddcg ,"");
};case MopAddBorder :_agb =_gccc .Arguments [0];_cgea ,_cfdg =_cgea .AddBorder (_agb ,0);if _cfdg !=nil {return nil ,_a .Wrap (_cfdg ,_ddcg ,"");};default:return nil ,_a .Error (_ddcg ,"i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006d\u006fr\u0070\u0068\u004f\u0070\u0065\u0072\u0061ti\u006f\u006e\u0020\u0070r\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0074\u006f t\u0068\u0065 \u0073\u0065\u0071\u0075\u0065\u006e\u0063\u0065");
};};if _agb > 0{_cgea ,_cfdg =_cgea .RemoveBorder (_agb );if _cfdg !=nil {return nil ,_a .Wrap (_cfdg ,_ddcg ,"\u0062\u006f\u0072\u0064\u0065\u0072\u0020\u003e\u0020\u0030");};};return _cgea ,nil ;};func (_aeed *Bitmap )InverseData (){_aeed .inverseData ()};
type MorphOperation int ;func (_abfb *Bitmap )setEightPartlyBytes (_dabg ,_ebef int ,_cdfa uint64 )(_ddae error ){var (_dbag byte ;_egeca int ;);const _gaag ="\u0073\u0065\u0074\u0045ig\u0068\u0074\u0050\u0061\u0072\u0074\u006c\u0079\u0042\u0079\u0074\u0065\u0073";
for _gbeg :=1;_gbeg <=_ebef ;_gbeg ++{_egeca =64-_gbeg *8;_dbag =byte (_cdfa >>uint (_egeca )&0xff);_g .Log .Trace ("\u0074\u0065\u006d\u0070\u003a\u0020\u0025\u0030\u0038\u0062\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a %\u0064,\u0020\u0069\u0064\u0078\u003a\u0020\u0025\u0064\u002c\u0020\u0066\u0075l\u006c\u0042\u0079\u0074\u0065\u0073\u004e\u0075\u006d\u0062\u0065\u0072\u003a\u0020\u0025\u0064\u002c \u0073\u0068\u0069\u0066\u0074\u003a\u0020\u0025\u0064",_dbag ,_dabg ,_dabg +_gbeg -1,_ebef ,_egeca );
if _ddae =_abfb .SetByte (_dabg +_gbeg -1,_dbag );_ddae !=nil {return _a .Wrap (_ddae ,_gaag ,"\u0066\u0075\u006c\u006c\u0042\u0079\u0074\u0065");};};_eacd :=_abfb .RowStride *8-_abfb .Width ;if _eacd ==0{return nil ;};_egeca -=8;_dbag =byte (_cdfa >>uint (_egeca )&0xff)<<uint (_eacd );
if _ddae =_abfb .SetByte (_dabg +_ebef ,_dbag );_ddae !=nil {return _a .Wrap (_ddae ,_gaag ,"\u0070\u0061\u0064\u0064\u0065\u0064");};return nil ;};func (_dbcg *byHeight )Len ()int {return len (_dbcg .Values )};func _dccf (_dgdc ,_cdea *Bitmap ,_cgaf int ,_bfc []byte ,_adea int )(_gbeb error ){const _def ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0034";
var (_dcge ,_gcg ,_bafe ,_cgee ,_cagg ,_gea ,_gce ,_dea int ;_cec ,_ddf uint32 ;_bgaf ,_bad byte ;_bea uint16 ;);_gcb :=make ([]byte ,4);_cgf :=make ([]byte ,4);for _bafe =0;_bafe < _dgdc .Height -1;_bafe ,_cgee =_bafe +2,_cgee +1{_dcge =_bafe *_dgdc .RowStride ;
_gcg =_cgee *_cdea .RowStride ;for _cagg ,_gea =0,0;_cagg < _adea ;_cagg ,_gea =_cagg +4,_gea +1{for _gce =0;_gce < 4;_gce ++{_dea =_dcge +_cagg +_gce ;if _dea <=len (_dgdc .Data )-1&&_dea < _dcge +_dgdc .RowStride {_gcb [_gce ]=_dgdc .Data [_dea ];}else {_gcb [_gce ]=0x00;
};_dea =_dcge +_dgdc .RowStride +_cagg +_gce ;if _dea <=len (_dgdc .Data )-1&&_dea < _dcge +(2*_dgdc .RowStride ){_cgf [_gce ]=_dgdc .Data [_dea ];}else {_cgf [_gce ]=0x00;};};_cec =_f .BigEndian .Uint32 (_gcb );_ddf =_f .BigEndian .Uint32 (_cgf );_ddf &=_cec ;
_ddf &=_ddf <<1;_ddf &=0xaaaaaaaa;_cec =_ddf |(_ddf <<7);_bgaf =byte (_cec >>24);_bad =byte ((_cec >>8)&0xff);_dea =_gcg +_gea ;if _dea +1==len (_cdea .Data )-1||_dea +1>=_gcg +_cdea .RowStride {_cdea .Data [_dea ]=_bfc [_bgaf ];if _gbeb =_cdea .SetByte (_dea ,_bfc [_bgaf ]);
_gbeb !=nil {return _a .Wrapf (_gbeb ,_def ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_dea );};}else {_bea =(uint16 (_bfc [_bgaf ])<<8)|uint16 (_bfc [_bad ]);if _gbeb =_cdea .setTwoBytes (_dea ,_bea );_gbeb !=nil {return _a .Wrapf (_gbeb ,_def ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_dea );
};_gea ++;};};};return nil ;};func CorrelationScore (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab []int )(_cbca float64 ,_dgfcb error ){const _cbfc ="\u0063\u006fr\u0072\u0065\u006ca\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065";
if bm1 ==nil ||bm2 ==nil {return 0,_a .Error (_cbfc ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0062\u0069\u0074ma\u0070\u0073");};if tab ==nil {return 0,_a .Error (_cbfc ,"\u0027\u0074\u0061\u0062\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};if area1 <=0||area2 <=0{return 0,_a .Error (_cbfc ,"\u0061\u0072\u0065\u0061s\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0067r\u0065a\u0074\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u0030");};_aeag ,_gdfc :=bm1 .Width ,bm1 .Height ;_febg ,_fgag :=bm2 .Width ,bm2 .Height ;
_aga :=_acda (_aeag -_febg );if _aga > maxDiffW {return 0,nil ;};_baga :=_acda (_gdfc -_fgag );if _baga > maxDiffH {return 0,nil ;};var _ccggc ,_ecfdb int ;if delX >=0{_ccggc =int (delX +0.5);}else {_ccggc =int (delX -0.5);};if delY >=0{_ecfdb =int (delY +0.5);
}else {_ecfdb =int (delY -0.5);};_cbfce :=_fgdg (_ecfdb ,0);_cdff :=_bgbca (_fgag +_ecfdb ,_gdfc );_gbdc :=bm1 .RowStride *_cbfce ;_deea :=bm2 .RowStride *(_cbfce -_ecfdb );_gfcf :=_fgdg (_ccggc ,0);_febc :=_bgbca (_febg +_ccggc ,_aeag );_gdgb :=bm2 .RowStride ;
var _edagg ,_gbbc int ;if _ccggc >=8{_edagg =_ccggc >>3;_gbdc +=_edagg ;_gfcf -=_edagg <<3;_febc -=_edagg <<3;_ccggc &=7;}else if _ccggc <=-8{_gbbc =-((_ccggc +7)>>3);_deea +=_gbbc ;_gdgb -=_gbbc ;_ccggc +=_gbbc <<3;};if _gfcf >=_febc ||_cbfce >=_cdff {return 0,nil ;
};_eaeb :=(_febc +7)>>3;var (_ebfc ,_fcc ,_ccae byte ;_ged ,_eaebf ,_cfcb int ;);switch {case _ccggc ==0:for _cfcb =_cbfce ;_cfcb < _cdff ;_cfcb ,_gbdc ,_deea =_cfcb +1,_gbdc +bm1 .RowStride ,_deea +bm2 .RowStride {for _eaebf =0;_eaebf < _eaeb ;_eaebf ++{_ccae =bm1 .Data [_gbdc +_eaebf ]&bm2 .Data [_deea +_eaebf ];
_ged +=tab [_ccae ];};};case _ccggc > 0:if _gdgb < _eaeb {for _cfcb =_cbfce ;_cfcb < _cdff ;_cfcb ,_gbdc ,_deea =_cfcb +1,_gbdc +bm1 .RowStride ,_deea +bm2 .RowStride {_ebfc ,_fcc =bm1 .Data [_gbdc ],bm2 .Data [_deea ]>>uint (_ccggc );_ccae =_ebfc &_fcc ;
_ged +=tab [_ccae ];for _eaebf =1;_eaebf < _gdgb ;_eaebf ++{_ebfc ,_fcc =bm1 .Data [_gbdc +_eaebf ],(bm2 .Data [_deea +_eaebf ]>>uint (_ccggc ))|(bm2 .Data [_deea +_eaebf -1]<<uint (8-_ccggc ));_ccae =_ebfc &_fcc ;_ged +=tab [_ccae ];};_ebfc =bm1 .Data [_gbdc +_eaebf ];
_fcc =bm2 .Data [_deea +_eaebf -1]<<uint (8-_ccggc );_ccae =_ebfc &_fcc ;_ged +=tab [_ccae ];};}else {for _cfcb =_cbfce ;_cfcb < _cdff ;_cfcb ,_gbdc ,_deea =_cfcb +1,_gbdc +bm1 .RowStride ,_deea +bm2 .RowStride {_ebfc ,_fcc =bm1 .Data [_gbdc ],bm2 .Data [_deea ]>>uint (_ccggc );
_ccae =_ebfc &_fcc ;_ged +=tab [_ccae ];for _eaebf =1;_eaebf < _eaeb ;_eaebf ++{_ebfc =bm1 .Data [_gbdc +_eaebf ];_fcc =(bm2 .Data [_deea +_eaebf ]>>uint (_ccggc ))|(bm2 .Data [_deea +_eaebf -1]<<uint (8-_ccggc ));_ccae =_ebfc &_fcc ;_ged +=tab [_ccae ];
};};};default:if _eaeb < _gdgb {for _cfcb =_cbfce ;_cfcb < _cdff ;_cfcb ,_gbdc ,_deea =_cfcb +1,_gbdc +bm1 .RowStride ,_deea +bm2 .RowStride {for _eaebf =0;_eaebf < _eaeb ;_eaebf ++{_ebfc =bm1 .Data [_gbdc +_eaebf ];_fcc =bm2 .Data [_deea +_eaebf ]<<uint (-_ccggc );
_fcc |=bm2 .Data [_deea +_eaebf +1]>>uint (8+_ccggc );_ccae =_ebfc &_fcc ;_ged +=tab [_ccae ];};};}else {for _cfcb =_cbfce ;_cfcb < _cdff ;_cfcb ,_gbdc ,_deea =_cfcb +1,_gbdc +bm1 .RowStride ,_deea +bm2 .RowStride {for _eaebf =0;_eaebf < _eaeb -1;_eaebf ++{_ebfc =bm1 .Data [_gbdc +_eaebf ];
_fcc =bm2 .Data [_deea +_eaebf ]<<uint (-_ccggc );_fcc |=bm2 .Data [_deea +_eaebf +1]>>uint (8+_ccggc );_ccae =_ebfc &_fcc ;_ged +=tab [_ccae ];};_ebfc =bm1 .Data [_gbdc +_eaebf ];_fcc =bm2 .Data [_deea +_eaebf ]<<uint (-_ccggc );_ccae =_ebfc &_fcc ;_ged +=tab [_ccae ];
};};};_cbca =float64 (_ged )*float64 (_ged )/(float64 (area1 )*float64 (area2 ));return _cbca ,nil ;};func _fabc (_fffef *Bitmap ,_ecdb ,_fabg ,_bddd ,_eeagc int ,_fbcd RasterOperator ,_fafd *Bitmap ,_bdbc ,_bdaced int )error {const _cggcf ="\u0072a\u0073t\u0065\u0072\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e";
if _fffef ==nil {return _a .Error (_cggcf ,"\u006e\u0069\u006c\u0020\u0027\u0064\u0065\u0073\u0074\u0027\u0020\u0042i\u0074\u006d\u0061\u0070");};if _fbcd ==PixDst {return nil ;};switch _fbcd {case PixClr ,PixSet ,PixNotDst :_ddbf (_fffef ,_ecdb ,_fabg ,_bddd ,_eeagc ,_fbcd );
return nil ;};if _fafd ==nil {_g .Log .Debug ("\u0052a\u0073\u0074e\u0072\u004f\u0070\u0065r\u0061\u0074\u0069o\u006e\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020bi\u0074\u006d\u0061p\u0020\u0069s\u0020\u006e\u006f\u0074\u0020\u0064e\u0066\u0069n\u0065\u0064");
return _a .Error (_cggcf ,"\u006e\u0069l\u0020\u0027\u0073r\u0063\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _aefg :=_gcgbf (_fffef ,_ecdb ,_fabg ,_bddd ,_eeagc ,_fbcd ,_fafd ,_bdbc ,_bdaced );_aefg !=nil {return _a .Wrap (_aefg ,_cggcf ,"");
};return nil ;};func (_adac *ClassedPoints )validateIntSlice ()error {const _afgab ="\u0076\u0061l\u0069\u0064\u0061t\u0065\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065";for _ ,_gcea :=range _adac .IntSlice {if _gcea >=(_adac .Points .Size ()){return _a .Errorf (_afgab ,"c\u006c\u0061\u0073\u0073\u0020\u0069\u0064\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0076\u0061\u006ci\u0064 \u0069\u006e\u0064\u0065x\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0070\u006f\u0069\u006e\u0074\u0073\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u003a\u0020\u0025\u0064",_gcea ,_adac .Points .Size ());
};};return nil ;};func _ddbf (_acgg *Bitmap ,_egaa ,_bbbba ,_aege ,_ebec int ,_fdaa RasterOperator ){if _egaa < 0{_aege +=_egaa ;_egaa =0;};_cbfg :=_egaa +_aege -_acgg .Width ;if _cbfg > 0{_aege -=_cbfg ;};if _bbbba < 0{_ebec +=_bbbba ;_bbbba =0;};_fdda :=_bbbba +_ebec -_acgg .Height ;
if _fdda > 0{_ebec -=_fdda ;};if _aege <=0||_ebec <=0{return ;};if (_egaa &7)==0{_dbbc (_acgg ,_egaa ,_bbbba ,_aege ,_ebec ,_fdaa );}else {_fggd (_acgg ,_egaa ,_bbbba ,_aege ,_ebec ,_fdaa );};};type Color int ;func (_dfgb *Bitmap )ToImage ()_bf .Image {_agg ,_dgeg :=_cg .NewImage (_dfgb .Width ,_dfgb .Height ,1,1,_dfgb .Data ,nil ,nil );
if _dgeg !=nil {_g .Log .Error ("\u0043\u006f\u006e\u0076\u0065\u0072\u0074\u0069\u006e\u0067\u0020j\u0062\u0069\u0067\u0032\u002e\u0042\u0069\u0074m\u0061p\u0020\u0074\u006f\u0020\u0069\u006d\u0061\u0067\u0065\u0075\u0074\u0069\u006c\u002e\u0049\u006d\u0061\u0067e\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_dgeg );
};return _agg ;};func TstFrameBitmapData ()[]byte {return _aeeg .Data };func (_aece *Bitmap )ThresholdPixelSum (thresh int ,tab8 []int )(_geee bool ,_adeb error ){const _geb ="\u0042i\u0074\u006d\u0061\u0070\u002e\u0054\u0068\u0072\u0065\u0073\u0068o\u006c\u0064\u0050\u0069\u0078\u0065\u006c\u0053\u0075\u006d";
if tab8 ==nil {tab8 =_ebag ();};_fabf :=_aece .Width >>3;_fda :=_aece .Width &7;_cbde :=byte (0xff<<uint (8-_fda ));var (_efb ,_cfd ,_dgc ,_abge int ;_cdeb byte ;);for _efb =0;_efb < _aece .Height ;_efb ++{_dgc =_aece .RowStride *_efb ;for _cfd =0;_cfd < _fabf ;
_cfd ++{_cdeb ,_adeb =_aece .GetByte (_dgc +_cfd );if _adeb !=nil {return false ,_a .Wrap (_adeb ,_geb ,"\u0066\u0075\u006c\u006c\u0042\u0079\u0074\u0065");};_abge +=tab8 [_cdeb ];};if _fda !=0{_cdeb ,_adeb =_aece .GetByte (_dgc +_cfd );if _adeb !=nil {return false ,_a .Wrap (_adeb ,_geb ,"p\u0061\u0072\u0074\u0069\u0061\u006c\u0042\u0079\u0074\u0065");
};_cdeb &=_cbde ;_abge +=tab8 [_cdeb ];};if _abge > thresh {return true ,nil ;};};return _geee ,nil ;};type Points []Point ;func CorrelationScoreThresholded (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab ,downcount []int ,scoreThreshold float32 )(bool ,error ){const _degd ="C\u006f\u0072\u0072\u0065\u006c\u0061t\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054h\u0072\u0065\u0073h\u006fl\u0064\u0065\u0064";
if bm1 ==nil {return false ,_a .Error (_degd ,"\u0063\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u0062\u006d1\u0020\u0069s\u0020\u006e\u0069\u006c");
};if bm2 ==nil {return false ,_a .Error (_degd ,"\u0063\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u0062\u006d2\u0020\u0069s\u0020\u006e\u0069\u006c");
};if area1 <=0||area2 <=0{return false ,_a .Error (_degd ,"c\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006fn\u0053\u0063\u006f\u0072\u0065\u0054\u0068re\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u002d\u0020\u0061\u0072\u0065\u0061s \u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u003e\u0020\u0030");
};if downcount ==nil {return false ,_a .Error (_degd ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u006f\u0020\u0027\u0064\u006f\u0077\u006e\u0063\u006f\u0075\u006e\u0074\u0027");};if tab ==nil {return false ,_a .Error (_degd ,"p\u0072\u006f\u0076\u0069de\u0064 \u006e\u0069\u006c\u0020\u0027s\u0075\u006d\u0074\u0061\u0062\u0027");
};_gegd ,_ccge :=bm1 .Width ,bm1 .Height ;_eba ,_fbea :=bm2 .Width ,bm2 .Height ;if _bb .Abs (_gegd -_eba )> maxDiffW {return false ,nil ;};if _bb .Abs (_ccge -_fbea )> maxDiffH {return false ,nil ;};_cdfccg :=int (delX +_bb .Sign (delX )*0.5);_gdbb :=int (delY +_bb .Sign (delY )*0.5);
_gcab :=int (_ec .Ceil (_ec .Sqrt (float64 (scoreThreshold )*float64 (area1 )*float64 (area2 ))));_eebcg :=bm2 .RowStride ;_cfcd :=_fgdg (_gdbb ,0);_geec :=_bgbca (_fbea +_gdbb ,_ccge );_gfcc :=bm1 .RowStride *_cfcd ;_gdc :=bm2 .RowStride *(_cfcd -_gdbb );
var _gcaf int ;if _geec <=_ccge {_gcaf =downcount [_geec -1];};_cdcb :=_fgdg (_cdfccg ,0);_dcdd :=_bgbca (_eba +_cdfccg ,_gegd );var _ggce ,_ccad int ;if _cdfccg >=8{_ggce =_cdfccg >>3;_gfcc +=_ggce ;_cdcb -=_ggce <<3;_dcdd -=_ggce <<3;_cdfccg &=7;}else if _cdfccg <=-8{_ccad =-((_cdfccg +7)>>3);
_gdc +=_ccad ;_eebcg -=_ccad ;_cdfccg +=_ccad <<3;};var (_ecdf ,_becgd ,_bfge int ;_accc ,_egc ,_defe byte ;);if _cdcb >=_dcdd ||_cfcd >=_geec {return false ,nil ;};_daacd :=(_dcdd +7)>>3;switch {case _cdfccg ==0:for _becgd =_cfcd ;_becgd < _geec ;_becgd ,_gfcc ,_gdc =_becgd +1,_gfcc +bm1 .RowStride ,_gdc +bm2 .RowStride {for _bfge =0;
_bfge < _daacd ;_bfge ++{_accc =bm1 .Data [_gfcc +_bfge ]&bm2 .Data [_gdc +_bfge ];_ecdf +=tab [_accc ];};if _ecdf >=_gcab {return true ,nil ;};if _dafg :=_ecdf +downcount [_becgd ]-_gcaf ;_dafg < _gcab {return false ,nil ;};};case _cdfccg > 0&&_eebcg < _daacd :for _becgd =_cfcd ;
_becgd < _geec ;_becgd ,_gfcc ,_gdc =_becgd +1,_gfcc +bm1 .RowStride ,_gdc +bm2 .RowStride {_egc =bm1 .Data [_gfcc ];_defe =bm2 .Data [_gdc ]>>uint (_cdfccg );_accc =_egc &_defe ;_ecdf +=tab [_accc ];for _bfge =1;_bfge < _eebcg ;_bfge ++{_egc =bm1 .Data [_gfcc +_bfge ];
_defe =bm2 .Data [_gdc +_bfge ]>>uint (_cdfccg )|bm2 .Data [_gdc +_bfge -1]<<uint (8-_cdfccg );_accc =_egc &_defe ;_ecdf +=tab [_accc ];};_egc =bm1 .Data [_gfcc +_bfge ];_defe =bm2 .Data [_gdc +_bfge -1]<<uint (8-_cdfccg );_accc =_egc &_defe ;_ecdf +=tab [_accc ];
if _ecdf >=_gcab {return true ,nil ;}else if _ecdf +downcount [_becgd ]-_gcaf < _gcab {return false ,nil ;};};case _cdfccg > 0&&_eebcg >=_daacd :for _becgd =_cfcd ;_becgd < _geec ;_becgd ,_gfcc ,_gdc =_becgd +1,_gfcc +bm1 .RowStride ,_gdc +bm2 .RowStride {_egc =bm1 .Data [_gfcc ];
_defe =bm2 .Data [_gdc ]>>uint (_cdfccg );_accc =_egc &_defe ;_ecdf +=tab [_accc ];for _bfge =1;_bfge < _daacd ;_bfge ++{_egc =bm1 .Data [_gfcc +_bfge ];_defe =bm2 .Data [_gdc +_bfge ]>>uint (_cdfccg );_defe |=bm2 .Data [_gdc +_bfge -1]<<uint (8-_cdfccg );
_accc =_egc &_defe ;_ecdf +=tab [_accc ];};if _ecdf >=_gcab {return true ,nil ;}else if _ecdf +downcount [_becgd ]-_gcaf < _gcab {return false ,nil ;};};case _daacd < _eebcg :for _becgd =_cfcd ;_becgd < _geec ;_becgd ,_gfcc ,_gdc =_becgd +1,_gfcc +bm1 .RowStride ,_gdc +bm2 .RowStride {for _bfge =0;
_bfge < _daacd ;_bfge ++{_egc =bm1 .Data [_gfcc +_bfge ];_defe =bm2 .Data [_gdc +_bfge ]<<uint (-_cdfccg );_defe |=bm2 .Data [_gdc +_bfge +1]>>uint (8+_cdfccg );_accc =_egc &_defe ;_ecdf +=tab [_accc ];};if _ecdf >=_gcab {return true ,nil ;}else if _deeb :=_ecdf +downcount [_becgd ]-_gcaf ;
_deeb < _gcab {return false ,nil ;};};case _eebcg >=_daacd :for _becgd =_cfcd ;_becgd < _geec ;_becgd ,_gfcc ,_gdc =_becgd +1,_gfcc +bm1 .RowStride ,_gdc +bm2 .RowStride {for _bfge =0;_bfge < _daacd ;_bfge ++{_egc =bm1 .Data [_gfcc +_bfge ];_defe =bm2 .Data [_gdc +_bfge ]<<uint (-_cdfccg );
_defe |=bm2 .Data [_gdc +_bfge +1]>>uint (8+_cdfccg );_accc =_egc &_defe ;_ecdf +=tab [_accc ];};_egc =bm1 .Data [_gfcc +_bfge ];_defe =bm2 .Data [_gdc +_bfge ]<<uint (-_cdfccg );_accc =_egc &_defe ;_ecdf +=tab [_accc ];if _ecdf >=_gcab {return true ,nil ;
}else if _ecdf +downcount [_becgd ]-_gcaf < _gcab {return false ,nil ;};};};_bfec :=float32 (_ecdf )*float32 (_ecdf )/(float32 (area1 )*float32 (area2 ));if _bfec >=scoreThreshold {_g .Log .Trace ("\u0063\u006f\u0075\u006e\u0074\u003a\u0020\u0025\u0064\u0020\u003c\u0020\u0074\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0020\u0025\u0064\u0020\u0062\u0075\u0074\u0020\u0073c\u006f\u0072\u0065\u0020\u0025\u0066\u0020\u003e\u003d\u0020\u0073\u0063\u006fr\u0065\u0054\u0068\u0072\u0065\u0073h\u006f\u006c\u0064 \u0025\u0066",_ecdf ,_gcab ,_bfec ,scoreThreshold );
};return false ,nil ;};func (_bdee *Bitmaps )WidthSorter ()func (_gbaca ,_fdcc int )bool {return func (_gafdd ,_ecgb int )bool {return _bdee .Values [_gafdd ].Width < _bdee .Values [_ecgb ].Width };};func TstESymbol (t *_ac .T ,scale ...int )*Bitmap {_ffcb ,_afbeg :=NewWithData (4,5,[]byte {0xF0,0x80,0xE0,0x80,0xF0});
_af .NoError (t ,_afbeg );return TstGetScaledSymbol (t ,_ffcb ,scale ...);};func init (){const _fgec ="\u0062\u0069\u0074\u006dap\u0073\u002e\u0069\u006e\u0069\u0074\u0069\u0061\u006c\u0069\u007a\u0061\u0074\u0069o\u006e";_aeeg =New (50,40);var _dcdba error ;
_aeeg ,_dcdba =_aeeg .AddBorder (2,1);if _dcdba !=nil {panic (_a .Wrap (_dcdba ,_fgec ,"f\u0072\u0061\u006d\u0065\u0042\u0069\u0074\u006d\u0061\u0070"));};_dceb ,_dcdba =NewWithData (50,22,_caae );if _dcdba !=nil {panic (_a .Wrap (_dcdba ,_fgec ,"i\u006d\u0061\u0067\u0065\u0042\u0069\u0074\u006d\u0061\u0070"));
};};func (_bbbbd *byWidth )Less (i ,j int )bool {return _bbbbd .Values [i ].Width < _bbbbd .Values [j ].Width };func (_fabeg *Boxes )selectWithIndicator (_beec *_bb .NumSlice )(_egbfc *Boxes ,_aaaaa error ){const _ebed ="\u0042o\u0078\u0065\u0073\u002es\u0065\u006c\u0065\u0063\u0074W\u0069t\u0068I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";
if _fabeg ==nil {return nil ,_a .Error (_ebed ,"b\u006f\u0078\u0065\u0073 '\u0062'\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064");};if _beec ==nil {return nil ,_a .Error (_ebed ,"\u0027\u006ea\u0027\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if len (*_beec )!=len (*_fabeg ){return nil ,_a .Error (_ebed ,"\u0062\u006f\u0078\u0065\u0073\u0020\u0027\u0062\u0027\u0020\u0068\u0061\u0073\u0020\u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006e\u0074\u0020s\u0069\u007a\u0065\u0020\u0074h\u0061\u006e \u0027\u006e\u0061\u0027");
};var _agfg ,_cdbg int ;for _agfa :=0;_agfa < len (*_beec );_agfa ++{if _agfg ,_aaaaa =_beec .GetInt (_agfa );_aaaaa !=nil {return nil ,_a .Wrap (_aaaaa ,_ebed ,"\u0063\u0068\u0065\u0063\u006b\u0069\u006e\u0067\u0020c\u006f\u0075\u006e\u0074");};if _agfg ==1{_cdbg ++;
};};if _cdbg ==len (*_fabeg ){return _fabeg ,nil ;};_dceg :=Boxes {};for _gbdf :=0;_gbdf < len (*_beec );_gbdf ++{_agfg =int ((*_beec )[_gbdf ]);if _agfg ==0{continue ;};_dceg =append (_dceg ,(*_fabeg )[_gbdf ]);};_egbfc =&_dceg ;return _egbfc ,nil ;};
func (_abbbf *Bitmap )setBit (_afc int ){_abbbf .Data [(_afc >>3)]|=0x80>>uint (_afc &7)};func _edbb (_baef *Bitmap )(_ceef *Bitmap ,_bbgf int ,_bgec error ){const _eae ="\u0042i\u0074\u006d\u0061\u0070.\u0077\u006f\u0072\u0064\u004da\u0073k\u0042y\u0044\u0069\u006c\u0061\u0074\u0069\u006fn";
if _baef ==nil {return nil ,0,_a .Errorf (_eae ,"\u0027\u0073\u0027\u0020bi\u0074\u006d\u0061\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");};var _geg ,_afcd *Bitmap ;if _geg ,_bgec =_adgc (nil ,_baef );_bgec !=nil {return nil ,0,_a .Wrap (_bgec ,_eae ,"\u0063\u006f\u0070\u0079\u0020\u0027\u0073\u0027");
};var (_bfdb [13]int ;_ddaf ,_fgg int ;);_cfc :=12;_dfd :=_bb .NewNumSlice (_cfc +1);_eecbb :=_bb .NewNumSlice (_cfc +1);var _caf *Boxes ;for _afa :=0;_afa <=_cfc ;_afa ++{if _afa ==0{if _afcd ,_bgec =_adgc (nil ,_geg );_bgec !=nil {return nil ,0,_a .Wrap (_bgec ,_eae ,"\u0066i\u0072\u0073\u0074\u0020\u0062\u006d2");
};}else {if _afcd ,_bgec =_ebdf (_geg ,MorphProcess {Operation :MopDilation ,Arguments :[]int {2,1}});_bgec !=nil {return nil ,0,_a .Wrap (_bgec ,_eae ,"\u0064\u0069\u006ca\u0074\u0069\u006f\u006e\u0020\u0062\u006d\u0032");};};if _caf ,_bgec =_afcd .connComponentsBB (4);
_bgec !=nil {return nil ,0,_a .Wrap (_bgec ,_eae ,"");};_bfdb [_afa ]=len (*_caf );_dfd .AddInt (_bfdb [_afa ]);switch _afa {case 0:_ddaf =_bfdb [0];default:_fgg =_bfdb [_afa -1]-_bfdb [_afa ];_eecbb .AddInt (_fgg );};_geg =_afcd ;};_cabf :=true ;_cfgf :=2;
var _dadba ,_acab int ;for _cfaf :=1;_cfaf < len (*_eecbb );_cfaf ++{if _dadba ,_bgec =_dfd .GetInt (_cfaf );_bgec !=nil {return nil ,0,_a .Wrap (_bgec ,_eae ,"\u0043\u0068\u0065\u0063ki\u006e\u0067\u0020\u0062\u0065\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0069o\u006e");
};if _cabf &&_dadba < int (0.3*float32 (_ddaf )){_cfgf =_cfaf +1;_cabf =false ;};if _fgg ,_bgec =_eecbb .GetInt (_cfaf );_bgec !=nil {return nil ,0,_a .Wrap (_bgec ,_eae ,"\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006ea\u0044\u0069\u0066\u0066");
};if _fgg > _acab {_acab =_fgg ;};};_cgbf :=_baef .XResolution ;if _cgbf ==0{_cgbf =150;};if _cgbf > 110{_cfgf ++;};if _cfgf < 2{_g .Log .Trace ("J\u0042\u0049\u0047\u0032\u0020\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0069\u0042\u0065\u0073\u0074 \u0074\u006f\u0020\u006d\u0069\u006e\u0069\u006d\u0075\u006d a\u006c\u006c\u006fw\u0061b\u006c\u0065");
_cfgf =2;};_bbgf =_cfgf +1;if _ceef ,_bgec =_abfec (nil ,_baef ,_cfgf +1,1);_bgec !=nil {return nil ,0,_a .Wrap (_bgec ,_eae ,"\u0067\u0065\u0074\u0074in\u0067\u0020\u006d\u0061\u0073\u006b\u0020\u0066\u0061\u0069\u006c\u0065\u0064");};return _ceef ,_bbgf ,nil ;
};func (_fcd *Bitmap )countPixels ()int {var (_ecf int ;_bgbc uint8 ;_eagfc byte ;_fbed int ;);_fbf :=_fcd .RowStride ;_fcg :=uint (_fcd .Width &0x07);if _fcg !=0{_bgbc =uint8 ((0xff<<(8-_fcg ))&0xff);_fbf --;};for _efd :=0;_efd < _fcd .Height ;_efd ++{for _fbed =0;
_fbed < _fbf ;_fbed ++{_eagfc =_fcd .Data [_efd *_fcd .RowStride +_fbed ];_ecf +=int (_cdaee [_eagfc ]);};if _fcg !=0{_ecf +=int (_cdaee [_fcd .Data [_efd *_fcd .RowStride +_fbed ]&_bgbc ]);};};return _ecf ;};func (_dcdb *ClassedPoints )SortByY (){_dcdb ._cgfec =_dcdb .ySortFunction ();
_b .Sort (_dcdb )};func (_fdbbb *byHeight )Less (i ,j int )bool {return _fdbbb .Values [i ].Height < _fdbbb .Values [j ].Height };func (_fbged *Bitmap )setPadBits (_dbfc int ){_ece :=8-_fbged .Width %8;if _ece ==8{return ;};_beac :=_fbged .Width /8;_eeba :=_ggadb [_ece ];
if _dbfc ==0{_eeba ^=_eeba ;};var _cgafg int ;for _cdfc :=0;_cdfc < _fbged .Height ;_cdfc ++{_cgafg =_cdfc *_fbged .RowStride +_beac ;if _dbfc ==0{_fbged .Data [_cgafg ]&=_eeba ;}else {_fbged .Data [_cgafg ]|=_eeba ;};};};type ClassedPoints struct{*Points ;
_bb .IntSlice ;_cgfec func (_dcgdd ,_ebbf int )bool ;};func (_bbeg *BitmapsArray )AddBox (box *_bf .Rectangle ){_bbeg .Boxes =append (_bbeg .Boxes ,box )};func (_dbff *Bitmap )connComponentsBitmapsBB (_gaf *Bitmaps ,_cccba int )(_cced *Boxes ,_cedac error ){const _gcga ="\u0063\u006f\u006enC\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0042\u0069\u0074\u006d\u0061\u0070\u0073\u0042\u0042";
if _cccba !=4&&_cccba !=8{return nil ,_a .Error (_gcga ,"\u0063\u006f\u006e\u006e\u0065\u0063t\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0027\u0034\u0027\u0020\u006fr\u0020\u0027\u0038\u0027");};if _gaf ==nil {return nil ,_a .Error (_gcga ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0042\u0069\u0074ma\u0070\u0073");
};if len (_gaf .Values )> 0{return nil ,_a .Error (_gcga ,"\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u006fn\u002d\u0065\u006d\u0070\u0074\u0079\u0020\u0042\u0069\u0074m\u0061\u0070\u0073");};if _dbff .Zero (){return &Boxes {},nil ;};
var (_acbe ,_bfgg ,_fffe ,_gbgc *Bitmap ;);_dbff .setPadBits (0);if _acbe ,_cedac =_adgc (nil ,_dbff );_cedac !=nil {return nil ,_a .Wrap (_cedac ,_gcga ,"\u0062\u006d\u0031");};if _bfgg ,_cedac =_adgc (nil ,_dbff );_cedac !=nil {return nil ,_a .Wrap (_cedac ,_gcga ,"\u0062\u006d\u0032");
};_eeag :=&_bb .Stack {};_eeag .Aux =&_bb .Stack {};_cced =&Boxes {};var (_ggeb ,_ggf int ;_aab _bf .Point ;_dbe bool ;_gdfed *_bf .Rectangle ;);for {if _aab ,_dbe ,_cedac =_acbe .nextOnPixel (_ggeb ,_ggf );_cedac !=nil {return nil ,_a .Wrap (_cedac ,_gcga ,"");
};if !_dbe {break ;};if _gdfed ,_cedac =_eafb (_acbe ,_eeag ,_aab .X ,_aab .Y ,_cccba );_cedac !=nil {return nil ,_a .Wrap (_cedac ,_gcga ,"");};if _cedac =_cced .Add (_gdfed );_cedac !=nil {return nil ,_a .Wrap (_cedac ,_gcga ,"");};if _fffe ,_cedac =_acbe .clipRectangle (_gdfed ,nil );
_cedac !=nil {return nil ,_a .Wrap (_cedac ,_gcga ,"\u0062\u006d\u0033");};if _gbgc ,_cedac =_bfgg .clipRectangle (_gdfed ,nil );_cedac !=nil {return nil ,_a .Wrap (_cedac ,_gcga ,"\u0062\u006d\u0034");};if _ ,_cedac =_dcgf (_fffe ,_fffe ,_gbgc );_cedac !=nil {return nil ,_a .Wrap (_cedac ,_gcga ,"\u0062m\u0033\u0020\u005e\u0020\u0062\u006d4");
};if _cedac =_bfgg .RasterOperation (_gdfed .Min .X ,_gdfed .Min .Y ,_gdfed .Dx (),_gdfed .Dy (),PixSrcXorDst ,_fffe ,0,0);_cedac !=nil {return nil ,_a .Wrap (_cedac ,_gcga ,"\u0062\u006d\u0032\u0020\u002d\u0058\u004f\u0052\u002d>\u0020\u0062\u006d\u0033");
};_gaf .AddBitmap (_fffe );_ggeb =_aab .X ;_ggf =_aab .Y ;};_gaf .Boxes =*_cced ;return _cced ,nil ;};func NewWithData (width ,height int ,data []byte )(*Bitmap ,error ){const _fde ="N\u0065\u0077\u0057\u0069\u0074\u0068\u0044\u0061\u0074\u0061";_age :=_dged (width ,height );
_age .Data =data ;if len (data )< height *_age .RowStride {return nil ,_a .Errorf (_fde ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064\u0061\u0074\u0061\u0020l\u0065\u006e\u0067\u0074\u0068\u003a \u0025\u0064\u0020\u002d\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e\u003a\u0020\u0025\u0064",len (data ),height *_age .RowStride );
};return _age ,nil ;};func _gb (_eca *Bitmap ,_cfe ,_bdf int )(*Bitmap ,error ){const _bfgf ="e\u0078\u0070\u0061\u006edB\u0069n\u0061\u0072\u0079\u0052\u0065p\u006c\u0069\u0063\u0061\u0074\u0065";if _eca ==nil {return nil ,_a .Error (_bfgf ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _cfe <=0||_bdf <=0{return nil ,_a .Error (_bfgf ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0073\u0063\u0061l\u0065\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020<\u003d\u0020\u0030");};if _cfe ==_bdf {if _cfe ==1{_bfd ,_ba :=_adgc (nil ,_eca );
if _ba !=nil {return nil ,_a .Wrap (_ba ,_bfgf ,"\u0078\u0046\u0061\u0063\u0074\u0020\u003d\u003d\u0020y\u0046\u0061\u0063\u0074");};return _bfd ,nil ;};if _cfe ==2||_cfe ==4||_cfe ==8{_ge ,_dbg :=_dg (_eca ,_cfe );if _dbg !=nil {return nil ,_a .Wrap (_dbg ,_bfgf ,"\u0078\u0046a\u0063\u0074\u0020i\u006e\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d");
};return _ge ,nil ;};};_adc :=_cfe *_eca .Width ;_eb :=_bdf *_eca .Height ;_fd :=New (_adc ,_eb );_cag :=_fd .RowStride ;var (_bfe ,_ecc ,_gdf ,_egb ,_dde int ;_dee byte ;_dfb error ;);for _ecc =0;_ecc < _eca .Height ;_ecc ++{_bfe =_bdf *_ecc *_cag ;for _gdf =0;
_gdf < _eca .Width ;_gdf ++{if _acg :=_eca .GetPixel (_gdf ,_ecc );_acg {_dde =_cfe *_gdf ;for _egb =0;_egb < _cfe ;_egb ++{_fd .setBit (_bfe *8+_dde +_egb );};};};for _egb =1;_egb < _bdf ;_egb ++{_adb :=_bfe +_egb *_cag ;for _gc :=0;_gc < _cag ;_gc ++{if _dee ,_dfb =_fd .GetByte (_bfe +_gc );
_dfb !=nil {return nil ,_a .Wrapf (_dfb ,_bfgf ,"\u0072\u0065\u0070\u006cic\u0061\u0074\u0069\u006e\u0067\u0020\u006c\u0069\u006e\u0065\u003a\u0020\u0027\u0025d\u0027",_egb );};if _dfb =_fd .SetByte (_adb +_gc ,_dee );_dfb !=nil {return nil ,_a .Wrap (_dfb ,_bfgf ,"\u0053\u0065\u0074\u0074in\u0067\u0020\u0062\u0079\u0074\u0065\u0020\u0066\u0061\u0069\u006c\u0065\u0064");
};};};};return _fd ,nil ;};func TstTSymbol (t *_ac .T ,scale ...int )*Bitmap {_eebgd ,_gacc :=NewWithData (5,5,[]byte {0xF8,0x20,0x20,0x20,0x20});_af .NoError (t ,_gacc );return TstGetScaledSymbol (t ,_eebgd ,scale ...);};type SizeComparison int ;func (_aeae *ClassedPoints )XAtIndex (i int )float32 {return (*_aeae .Points )[_aeae .IntSlice [i ]].X };
func MorphSequence (src *Bitmap ,sequence ...MorphProcess )(*Bitmap ,error ){return _ebdf (src ,sequence ...);};func (_gff *Bitmap )GetUnpaddedData ()([]byte ,error ){_gge :=uint (_gff .Width &0x07);if _gge ==0{return _gff .Data ,nil ;};_bggd :=_gff .Width *_gff .Height ;
if _bggd %8!=0{_bggd >>=3;_bggd ++;}else {_bggd >>=3;};_aed :=make ([]byte ,_bggd );_fad :=_e .NewWriterMSB (_aed );const _ecd ="\u0047e\u0074U\u006e\u0070\u0061\u0064\u0064\u0065\u0064\u0044\u0061\u0074\u0061";for _bdd :=0;_bdd < _gff .Height ;_bdd ++{for _fed :=0;
_fed < _gff .RowStride ;_fed ++{_fce :=_gff .Data [_bdd *_gff .RowStride +_fed ];if _fed !=_gff .RowStride -1{_cbb :=_fad .WriteByte (_fce );if _cbb !=nil {return nil ,_a .Wrap (_cbb ,_ecd ,"");};continue ;};for _dae :=uint (0);_dae < _gge ;_dae ++{_gfgg :=_fad .WriteBit (int (_fce >>(7-_dae )&0x01));
if _gfgg !=nil {return nil ,_a .Wrap (_gfgg ,_ecd ,"");};};};};return _aed ,nil ;};func _cgbc (_aaab *Bitmap ,_deb ,_bgcb ,_faeb ,_cgcgc int ,_dacc RasterOperator ,_dbd *Bitmap ,_bfgb ,_bdcc int )error {var (_ccdb bool ;_daea bool ;_gaea byte ;_cfde int ;
_bgafg int ;_facc int ;_gcbe int ;_deab bool ;_eebda int ;_eebe int ;_aageb int ;_ccca bool ;_faabg byte ;_ffgf int ;_eaeg int ;_aaeac int ;_bebb byte ;_ffga int ;_eagb int ;_bdff uint ;_dgbf uint ;_cgcf byte ;_dfbfc shift ;_aefdd bool ;_feee bool ;_gffe ,_adcd int ;
);if _bfgb &7!=0{_eagb =8-(_bfgb &7);};if _deb &7!=0{_bgafg =8-(_deb &7);};if _eagb ==0&&_bgafg ==0{_cgcf =_ggadb [0];}else {if _bgafg > _eagb {_bdff =uint (_bgafg -_eagb );}else {_bdff =uint (8-(_eagb -_bgafg ));};_dgbf =8-_bdff ;_cgcf =_ggadb [_bdff ];
};if (_deb &7)!=0{_ccdb =true ;_cfde =8-(_deb &7);_gaea =_ggadb [_cfde ];_facc =_aaab .RowStride *_bgcb +(_deb >>3);_gcbe =_dbd .RowStride *_bdcc +(_bfgb >>3);_ffga =8-(_bfgb &7);if _cfde > _ffga {_dfbfc =_edeb ;if _faeb >=_eagb {_aefdd =true ;};}else {_dfbfc =_dadf ;
};};if _faeb < _cfde {_daea =true ;_gaea &=_fgb [8-_cfde +_faeb ];};if !_daea {_eebda =(_faeb -_cfde )>>3;if _eebda !=0{_deab =true ;_eebe =_aaab .RowStride *_bgcb +((_deb +_bgafg )>>3);_aageb =_dbd .RowStride *_bdcc +((_bfgb +_bgafg )>>3);};};_ffgf =(_deb +_faeb )&7;
if !(_daea ||_ffgf ==0){_ccca =true ;_faabg =_fgb [_ffgf ];_eaeg =_aaab .RowStride *_bgcb +((_deb +_bgafg )>>3)+_eebda ;_aaeac =_dbd .RowStride *_bdcc +((_bfgb +_bgafg )>>3)+_eebda ;if _ffgf > int (_dgbf ){_feee =true ;};};switch _dacc {case PixSrc :if _ccdb {for _gffe =0;
_gffe < _cgcgc ;_gffe ++{if _dfbfc ==_edeb {_bebb =_dbd .Data [_gcbe ]<<_bdff ;if _aefdd {_bebb =_ceec (_bebb ,_dbd .Data [_gcbe +1]>>_dgbf ,_cgcf );};}else {_bebb =_dbd .Data [_gcbe ]>>_dgbf ;};_aaab .Data [_facc ]=_ceec (_aaab .Data [_facc ],_bebb ,_gaea );
_facc +=_aaab .RowStride ;_gcbe +=_dbd .RowStride ;};};if _deab {for _gffe =0;_gffe < _cgcgc ;_gffe ++{for _adcd =0;_adcd < _eebda ;_adcd ++{_bebb =_ceec (_dbd .Data [_aageb +_adcd ]<<_bdff ,_dbd .Data [_aageb +_adcd +1]>>_dgbf ,_cgcf );_aaab .Data [_eebe +_adcd ]=_bebb ;
};_eebe +=_aaab .RowStride ;_aageb +=_dbd .RowStride ;};};if _ccca {for _gffe =0;_gffe < _cgcgc ;_gffe ++{_bebb =_dbd .Data [_aaeac ]<<_bdff ;if _feee {_bebb =_ceec (_bebb ,_dbd .Data [_aaeac +1]>>_dgbf ,_cgcf );};_aaab .Data [_eaeg ]=_ceec (_aaab .Data [_eaeg ],_bebb ,_faabg );
_eaeg +=_aaab .RowStride ;_aaeac +=_dbd .RowStride ;};};case PixNotSrc :if _ccdb {for _gffe =0;_gffe < _cgcgc ;_gffe ++{if _dfbfc ==_edeb {_bebb =_dbd .Data [_gcbe ]<<_bdff ;if _aefdd {_bebb =_ceec (_bebb ,_dbd .Data [_gcbe +1]>>_dgbf ,_cgcf );};}else {_bebb =_dbd .Data [_gcbe ]>>_dgbf ;
};_aaab .Data [_facc ]=_ceec (_aaab .Data [_facc ],^_bebb ,_gaea );_facc +=_aaab .RowStride ;_gcbe +=_dbd .RowStride ;};};if _deab {for _gffe =0;_gffe < _cgcgc ;_gffe ++{for _adcd =0;_adcd < _eebda ;_adcd ++{_bebb =_ceec (_dbd .Data [_aageb +_adcd ]<<_bdff ,_dbd .Data [_aageb +_adcd +1]>>_dgbf ,_cgcf );
_aaab .Data [_eebe +_adcd ]=^_bebb ;};_eebe +=_aaab .RowStride ;_aageb +=_dbd .RowStride ;};};if _ccca {for _gffe =0;_gffe < _cgcgc ;_gffe ++{_bebb =_dbd .Data [_aaeac ]<<_bdff ;if _feee {_bebb =_ceec (_bebb ,_dbd .Data [_aaeac +1]>>_dgbf ,_cgcf );};_aaab .Data [_eaeg ]=_ceec (_aaab .Data [_eaeg ],^_bebb ,_faabg );
_eaeg +=_aaab .RowStride ;_aaeac +=_dbd .RowStride ;};};case PixSrcOrDst :if _ccdb {for _gffe =0;_gffe < _cgcgc ;_gffe ++{if _dfbfc ==_edeb {_bebb =_dbd .Data [_gcbe ]<<_bdff ;if _aefdd {_bebb =_ceec (_bebb ,_dbd .Data [_gcbe +1]>>_dgbf ,_cgcf );};}else {_bebb =_dbd .Data [_gcbe ]>>_dgbf ;
};_aaab .Data [_facc ]=_ceec (_aaab .Data [_facc ],_bebb |_aaab .Data [_facc ],_gaea );_facc +=_aaab .RowStride ;_gcbe +=_dbd .RowStride ;};};if _deab {for _gffe =0;_gffe < _cgcgc ;_gffe ++{for _adcd =0;_adcd < _eebda ;_adcd ++{_bebb =_ceec (_dbd .Data [_aageb +_adcd ]<<_bdff ,_dbd .Data [_aageb +_adcd +1]>>_dgbf ,_cgcf );
_aaab .Data [_eebe +_adcd ]|=_bebb ;};_eebe +=_aaab .RowStride ;_aageb +=_dbd .RowStride ;};};if _ccca {for _gffe =0;_gffe < _cgcgc ;_gffe ++{_bebb =_dbd .Data [_aaeac ]<<_bdff ;if _feee {_bebb =_ceec (_bebb ,_dbd .Data [_aaeac +1]>>_dgbf ,_cgcf );};_aaab .Data [_eaeg ]=_ceec (_aaab .Data [_eaeg ],_bebb |_aaab .Data [_eaeg ],_faabg );
_eaeg +=_aaab .RowStride ;_aaeac +=_dbd .RowStride ;};};case PixSrcAndDst :if _ccdb {for _gffe =0;_gffe < _cgcgc ;_gffe ++{if _dfbfc ==_edeb {_bebb =_dbd .Data [_gcbe ]<<_bdff ;if _aefdd {_bebb =_ceec (_bebb ,_dbd .Data [_gcbe +1]>>_dgbf ,_cgcf );};}else {_bebb =_dbd .Data [_gcbe ]>>_dgbf ;
};_aaab .Data [_facc ]=_ceec (_aaab .Data [_facc ],_bebb &_aaab .Data [_facc ],_gaea );_facc +=_aaab .RowStride ;_gcbe +=_dbd .RowStride ;};};if _deab {for _gffe =0;_gffe < _cgcgc ;_gffe ++{for _adcd =0;_adcd < _eebda ;_adcd ++{_bebb =_ceec (_dbd .Data [_aageb +_adcd ]<<_bdff ,_dbd .Data [_aageb +_adcd +1]>>_dgbf ,_cgcf );
_aaab .Data [_eebe +_adcd ]&=_bebb ;};_eebe +=_aaab .RowStride ;_aageb +=_dbd .RowStride ;};};if _ccca {for _gffe =0;_gffe < _cgcgc ;_gffe ++{_bebb =_dbd .Data [_aaeac ]<<_bdff ;if _feee {_bebb =_ceec (_bebb ,_dbd .Data [_aaeac +1]>>_dgbf ,_cgcf );};_aaab .Data [_eaeg ]=_ceec (_aaab .Data [_eaeg ],_bebb &_aaab .Data [_eaeg ],_faabg );
_eaeg +=_aaab .RowStride ;_aaeac +=_dbd .RowStride ;};};case PixSrcXorDst :if _ccdb {for _gffe =0;_gffe < _cgcgc ;_gffe ++{if _dfbfc ==_edeb {_bebb =_dbd .Data [_gcbe ]<<_bdff ;if _aefdd {_bebb =_ceec (_bebb ,_dbd .Data [_gcbe +1]>>_dgbf ,_cgcf );};}else {_bebb =_dbd .Data [_gcbe ]>>_dgbf ;
};_aaab .Data [_facc ]=_ceec (_aaab .Data [_facc ],_bebb ^_aaab .Data [_facc ],_gaea );_facc +=_aaab .RowStride ;_gcbe +=_dbd .RowStride ;};};if _deab {for _gffe =0;_gffe < _cgcgc ;_gffe ++{for _adcd =0;_adcd < _eebda ;_adcd ++{_bebb =_ceec (_dbd .Data [_aageb +_adcd ]<<_bdff ,_dbd .Data [_aageb +_adcd +1]>>_dgbf ,_cgcf );
_aaab .Data [_eebe +_adcd ]^=_bebb ;};_eebe +=_aaab .RowStride ;_aageb +=_dbd .RowStride ;};};if _ccca {for _gffe =0;_gffe < _cgcgc ;_gffe ++{_bebb =_dbd .Data [_aaeac ]<<_bdff ;if _feee {_bebb =_ceec (_bebb ,_dbd .Data [_aaeac +1]>>_dgbf ,_cgcf );};_aaab .Data [_eaeg ]=_ceec (_aaab .Data [_eaeg ],_bebb ^_aaab .Data [_eaeg ],_faabg );
_eaeg +=_aaab .RowStride ;_aaeac +=_dbd .RowStride ;};};case PixNotSrcOrDst :if _ccdb {for _gffe =0;_gffe < _cgcgc ;_gffe ++{if _dfbfc ==_edeb {_bebb =_dbd .Data [_gcbe ]<<_bdff ;if _aefdd {_bebb =_ceec (_bebb ,_dbd .Data [_gcbe +1]>>_dgbf ,_cgcf );};}else {_bebb =_dbd .Data [_gcbe ]>>_dgbf ;
};_aaab .Data [_facc ]=_ceec (_aaab .Data [_facc ],^_bebb |_aaab .Data [_facc ],_gaea );_facc +=_aaab .RowStride ;_gcbe +=_dbd .RowStride ;};};if _deab {for _gffe =0;_gffe < _cgcgc ;_gffe ++{for _adcd =0;_adcd < _eebda ;_adcd ++{_bebb =_ceec (_dbd .Data [_aageb +_adcd ]<<_bdff ,_dbd .Data [_aageb +_adcd +1]>>_dgbf ,_cgcf );
_aaab .Data [_eebe +_adcd ]|=^_bebb ;};_eebe +=_aaab .RowStride ;_aageb +=_dbd .RowStride ;};};if _ccca {for _gffe =0;_gffe < _cgcgc ;_gffe ++{_bebb =_dbd .Data [_aaeac ]<<_bdff ;if _feee {_bebb =_ceec (_bebb ,_dbd .Data [_aaeac +1]>>_dgbf ,_cgcf );};_aaab .Data [_eaeg ]=_ceec (_aaab .Data [_eaeg ],^_bebb |_aaab .Data [_eaeg ],_faabg );
_eaeg +=_aaab .RowStride ;_aaeac +=_dbd .RowStride ;};};case PixNotSrcAndDst :if _ccdb {for _gffe =0;_gffe < _cgcgc ;_gffe ++{if _dfbfc ==_edeb {_bebb =_dbd .Data [_gcbe ]<<_bdff ;if _aefdd {_bebb =_ceec (_bebb ,_dbd .Data [_gcbe +1]>>_dgbf ,_cgcf );};
}else {_bebb =_dbd .Data [_gcbe ]>>_dgbf ;};_aaab .Data [_facc ]=_ceec (_aaab .Data [_facc ],^_bebb &_aaab .Data [_facc ],_gaea );_facc +=_aaab .RowStride ;_gcbe +=_dbd .RowStride ;};};if _deab {for _gffe =0;_gffe < _cgcgc ;_gffe ++{for _adcd =0;_adcd < _eebda ;
_adcd ++{_bebb =_ceec (_dbd .Data [_aageb +_adcd ]<<_bdff ,_dbd .Data [_aageb +_adcd +1]>>_dgbf ,_cgcf );_aaab .Data [_eebe +_adcd ]&=^_bebb ;};_eebe +=_aaab .RowStride ;_aageb +=_dbd .RowStride ;};};if _ccca {for _gffe =0;_gffe < _cgcgc ;_gffe ++{_bebb =_dbd .Data [_aaeac ]<<_bdff ;
if _feee {_bebb =_ceec (_bebb ,_dbd .Data [_aaeac +1]>>_dgbf ,_cgcf );};_aaab .Data [_eaeg ]=_ceec (_aaab .Data [_eaeg ],^_bebb &_aaab .Data [_eaeg ],_faabg );_eaeg +=_aaab .RowStride ;_aaeac +=_dbd .RowStride ;};};case PixSrcOrNotDst :if _ccdb {for _gffe =0;
_gffe < _cgcgc ;_gffe ++{if _dfbfc ==_edeb {_bebb =_dbd .Data [_gcbe ]<<_bdff ;if _aefdd {_bebb =_ceec (_bebb ,_dbd .Data [_gcbe +1]>>_dgbf ,_cgcf );};}else {_bebb =_dbd .Data [_gcbe ]>>_dgbf ;};_aaab .Data [_facc ]=_ceec (_aaab .Data [_facc ],_bebb |^_aaab .Data [_facc ],_gaea );
_facc +=_aaab .RowStride ;_gcbe +=_dbd .RowStride ;};};if _deab {for _gffe =0;_gffe < _cgcgc ;_gffe ++{for _adcd =0;_adcd < _eebda ;_adcd ++{_bebb =_ceec (_dbd .Data [_aageb +_adcd ]<<_bdff ,_dbd .Data [_aageb +_adcd +1]>>_dgbf ,_cgcf );_aaab .Data [_eebe +_adcd ]=_bebb |^_aaab .Data [_eebe +_adcd ];
};_eebe +=_aaab .RowStride ;_aageb +=_dbd .RowStride ;};};if _ccca {for _gffe =0;_gffe < _cgcgc ;_gffe ++{_bebb =_dbd .Data [_aaeac ]<<_bdff ;if _feee {_bebb =_ceec (_bebb ,_dbd .Data [_aaeac +1]>>_dgbf ,_cgcf );};_aaab .Data [_eaeg ]=_ceec (_aaab .Data [_eaeg ],_bebb |^_aaab .Data [_eaeg ],_faabg );
_eaeg +=_aaab .RowStride ;_aaeac +=_dbd .RowStride ;};};case PixSrcAndNotDst :if _ccdb {for _gffe =0;_gffe < _cgcgc ;_gffe ++{if _dfbfc ==_edeb {_bebb =_dbd .Data [_gcbe ]<<_bdff ;if _aefdd {_bebb =_ceec (_bebb ,_dbd .Data [_gcbe +1]>>_dgbf ,_cgcf );};
}else {_bebb =_dbd .Data [_gcbe ]>>_dgbf ;};_aaab .Data [_facc ]=_ceec (_aaab .Data [_facc ],_bebb &^_aaab .Data [_facc ],_gaea );_facc +=_aaab .RowStride ;_gcbe +=_dbd .RowStride ;};};if _deab {for _gffe =0;_gffe < _cgcgc ;_gffe ++{for _adcd =0;_adcd < _eebda ;
_adcd ++{_bebb =_ceec (_dbd .Data [_aageb +_adcd ]<<_bdff ,_dbd .Data [_aageb +_adcd +1]>>_dgbf ,_cgcf );_aaab .Data [_eebe +_adcd ]=_bebb &^_aaab .Data [_eebe +_adcd ];};_eebe +=_aaab .RowStride ;_aageb +=_dbd .RowStride ;};};if _ccca {for _gffe =0;_gffe < _cgcgc ;
_gffe ++{_bebb =_dbd .Data [_aaeac ]<<_bdff ;if _feee {_bebb =_ceec (_bebb ,_dbd .Data [_aaeac +1]>>_dgbf ,_cgcf );};_aaab .Data [_eaeg ]=_ceec (_aaab .Data [_eaeg ],_bebb &^_aaab .Data [_eaeg ],_faabg );_eaeg +=_aaab .RowStride ;_aaeac +=_dbd .RowStride ;
};};case PixNotPixSrcOrDst :if _ccdb {for _gffe =0;_gffe < _cgcgc ;_gffe ++{if _dfbfc ==_edeb {_bebb =_dbd .Data [_gcbe ]<<_bdff ;if _aefdd {_bebb =_ceec (_bebb ,_dbd .Data [_gcbe +1]>>_dgbf ,_cgcf );};}else {_bebb =_dbd .Data [_gcbe ]>>_dgbf ;};_aaab .Data [_facc ]=_ceec (_aaab .Data [_facc ],^(_bebb |_aaab .Data [_facc ]),_gaea );
_facc +=_aaab .RowStride ;_gcbe +=_dbd .RowStride ;};};if _deab {for _gffe =0;_gffe < _cgcgc ;_gffe ++{for _adcd =0;_adcd < _eebda ;_adcd ++{_bebb =_ceec (_dbd .Data [_aageb +_adcd ]<<_bdff ,_dbd .Data [_aageb +_adcd +1]>>_dgbf ,_cgcf );_aaab .Data [_eebe +_adcd ]=^(_bebb |_aaab .Data [_eebe +_adcd ]);
};_eebe +=_aaab .RowStride ;_aageb +=_dbd .RowStride ;};};if _ccca {for _gffe =0;_gffe < _cgcgc ;_gffe ++{_bebb =_dbd .Data [_aaeac ]<<_bdff ;if _feee {_bebb =_ceec (_bebb ,_dbd .Data [_aaeac +1]>>_dgbf ,_cgcf );};_aaab .Data [_eaeg ]=_ceec (_aaab .Data [_eaeg ],^(_bebb |_aaab .Data [_eaeg ]),_faabg );
_eaeg +=_aaab .RowStride ;_aaeac +=_dbd .RowStride ;};};case PixNotPixSrcAndDst :if _ccdb {for _gffe =0;_gffe < _cgcgc ;_gffe ++{if _dfbfc ==_edeb {_bebb =_dbd .Data [_gcbe ]<<_bdff ;if _aefdd {_bebb =_ceec (_bebb ,_dbd .Data [_gcbe +1]>>_dgbf ,_cgcf );
};}else {_bebb =_dbd .Data [_gcbe ]>>_dgbf ;};_aaab .Data [_facc ]=_ceec (_aaab .Data [_facc ],^(_bebb &_aaab .Data [_facc ]),_gaea );_facc +=_aaab .RowStride ;_gcbe +=_dbd .RowStride ;};};if _deab {for _gffe =0;_gffe < _cgcgc ;_gffe ++{for _adcd =0;_adcd < _eebda ;
_adcd ++{_bebb =_ceec (_dbd .Data [_aageb +_adcd ]<<_bdff ,_dbd .Data [_aageb +_adcd +1]>>_dgbf ,_cgcf );_aaab .Data [_eebe +_adcd ]=^(_bebb &_aaab .Data [_eebe +_adcd ]);};_eebe +=_aaab .RowStride ;_aageb +=_dbd .RowStride ;};};if _ccca {for _gffe =0;
_gffe < _cgcgc ;_gffe ++{_bebb =_dbd .Data [_aaeac ]<<_bdff ;if _feee {_bebb =_ceec (_bebb ,_dbd .Data [_aaeac +1]>>_dgbf ,_cgcf );};_aaab .Data [_eaeg ]=_ceec (_aaab .Data [_eaeg ],^(_bebb &_aaab .Data [_eaeg ]),_faabg );_eaeg +=_aaab .RowStride ;_aaeac +=_dbd .RowStride ;
};};case PixNotPixSrcXorDst :if _ccdb {for _gffe =0;_gffe < _cgcgc ;_gffe ++{if _dfbfc ==_edeb {_bebb =_dbd .Data [_gcbe ]<<_bdff ;if _aefdd {_bebb =_ceec (_bebb ,_dbd .Data [_gcbe +1]>>_dgbf ,_cgcf );};}else {_bebb =_dbd .Data [_gcbe ]>>_dgbf ;};_aaab .Data [_facc ]=_ceec (_aaab .Data [_facc ],^(_bebb ^_aaab .Data [_facc ]),_gaea );
_facc +=_aaab .RowStride ;_gcbe +=_dbd .RowStride ;};};if _deab {for _gffe =0;_gffe < _cgcgc ;_gffe ++{for _adcd =0;_adcd < _eebda ;_adcd ++{_bebb =_ceec (_dbd .Data [_aageb +_adcd ]<<_bdff ,_dbd .Data [_aageb +_adcd +1]>>_dgbf ,_cgcf );_aaab .Data [_eebe +_adcd ]=^(_bebb ^_aaab .Data [_eebe +_adcd ]);
};_eebe +=_aaab .RowStride ;_aageb +=_dbd .RowStride ;};};if _ccca {for _gffe =0;_gffe < _cgcgc ;_gffe ++{_bebb =_dbd .Data [_aaeac ]<<_bdff ;if _feee {_bebb =_ceec (_bebb ,_dbd .Data [_aaeac +1]>>_dgbf ,_cgcf );};_aaab .Data [_eaeg ]=_ceec (_aaab .Data [_eaeg ],^(_bebb ^_aaab .Data [_eaeg ]),_faabg );
_eaeg +=_aaab .RowStride ;_aaeac +=_dbd .RowStride ;};};default:_g .Log .Debug ("\u004f\u0070e\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0074\u0020\u0070\u0065\u0072\u006d\u0069tt\u0065\u0064",_dacc );return _a .Error ("\u0072a\u0073t\u0065\u0072\u004f\u0070\u0047e\u006e\u0065r\u0061\u006c\u004c\u006f\u0077","\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065r\u0061\u0074\u0069\u006f\u006e\u0020\u006eo\u0074\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074\u0065\u0064");
};return nil ;};func (_ddfdc *BitmapsArray )GetBox (i int )(*_bf .Rectangle ,error ){const _ddbfe ="\u0042\u0069\u0074\u006dap\u0073\u0041\u0072\u0072\u0061\u0079\u002e\u0047\u0065\u0074\u0042\u006f\u0078";if _ddfdc ==nil {return nil ,_a .Error (_ddbfe ,"p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074m\u0061\u0070\u0073A\u0072r\u0061\u0079\u0027");
};if i > len (_ddfdc .Boxes )-1{return nil ,_a .Errorf (_ddbfe ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _ddfdc .Boxes [i ],nil ;};func HausTest (p1 ,p2 ,p3 ,p4 *Bitmap ,delX ,delY float32 ,maxDiffW ,maxDiffH int )(bool ,error ){const _abda ="\u0048\u0061\u0075\u0073\u0054\u0065\u0073\u0074";
_bfdc ,_ffbc :=p1 .Width ,p1 .Height ;_caa ,_bcbg :=p3 .Width ,p3 .Height ;if _bb .Abs (_bfdc -_caa )> maxDiffW {return false ,nil ;};if _bb .Abs (_ffbc -_bcbg )> maxDiffH {return false ,nil ;};_ccggf :=int (delX +_bb .Sign (delX )*0.5);_dcbg :=int (delY +_bb .Sign (delY )*0.5);
var _decb error ;_cebc :=p1 .CreateTemplate ();if _decb =_cebc .RasterOperation (0,0,_bfdc ,_ffbc ,PixSrc ,p1 ,0,0);_decb !=nil {return false ,_a .Wrap (_decb ,_abda ,"p\u0031\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _decb =_cebc .RasterOperation (_ccggf ,_dcbg ,_bfdc ,_ffbc ,PixNotSrcAndDst ,p4 ,0,0);
_decb !=nil {return false ,_a .Wrap (_decb ,_abda ,"\u0021p\u0034\u0020\u0026\u0020\u0074");};if _cebc .Zero (){return false ,nil ;};if _decb =_cebc .RasterOperation (_ccggf ,_dcbg ,_caa ,_bcbg ,PixSrc ,p3 ,0,0);_decb !=nil {return false ,_a .Wrap (_decb ,_abda ,"p\u0033\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");
};if _decb =_cebc .RasterOperation (0,0,_caa ,_bcbg ,PixNotSrcAndDst ,p2 ,0,0);_decb !=nil {return false ,_a .Wrap (_decb ,_abda ,"\u0021p\u0032\u0020\u0026\u0020\u0074");};return _cebc .Zero (),nil ;};func _dged (_gaca ,_baa int )*Bitmap {return &Bitmap {Width :_gaca ,Height :_baa ,RowStride :(_gaca +7)>>3};
};