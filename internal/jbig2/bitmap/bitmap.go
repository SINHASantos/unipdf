//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package bitmap ;import (_df "encoding/binary";_a "github.com/stretchr/testify/require";_dc "github.com/unidoc/unipdf/v4/common";_d "github.com/unidoc/unipdf/v4/internal/bitwise";_bf "github.com/unidoc/unipdf/v4/internal/imageutil";_b "github.com/unidoc/unipdf/v4/internal/jbig2/basic";
_eg "github.com/unidoc/unipdf/v4/internal/jbig2/errors";_dg "image";_c "math";_ge "sort";_gc "strings";_g "testing";);func (_bgc *Bitmap )SetByte (index int ,v byte )error {if index > len (_bgc .Data )-1||index < 0{return _eg .Errorf ("\u0053e\u0074\u0042\u0079\u0074\u0065","\u0069\u006e\u0064\u0065x \u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020%\u0064",index );
};_bgc .Data [index ]=v ;return nil ;};func (_fefe *Bitmap )addPadBits ()(_gacd error ){const _fabf ="\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0061\u0064\u0064\u0050\u0061d\u0042\u0069\u0074\u0073";_def :=_fefe .Width %8;if _def ==0{return nil ;};_cec :=_fefe .Width /8;
_bea :=_d .NewReader (_fefe .Data );_dfb :=make ([]byte ,_fefe .Height *_fefe .RowStride );_aaeb :=_d .NewWriterMSB (_dfb );_abg :=make ([]byte ,_cec );var (_bfag int ;_deaa uint64 ;);for _bfag =0;_bfag < _fefe .Height ;_bfag ++{if _ ,_gacd =_bea .Read (_abg );
_gacd !=nil {return _eg .Wrap (_gacd ,_fabf ,"\u0066u\u006c\u006c\u0020\u0062\u0079\u0074e");};if _ ,_gacd =_aaeb .Write (_abg );_gacd !=nil {return _eg .Wrap (_gacd ,_fabf ,"\u0066\u0075\u006c\u006c\u0020\u0062\u0079\u0074\u0065\u0073");};if _deaa ,_gacd =_bea .ReadBits (byte (_def ));
_gacd !=nil {return _eg .Wrap (_gacd ,_fabf ,"\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0062\u0069\u0074\u0073");};if _gacd =_aaeb .WriteByte (byte (_deaa )<<uint (8-_def ));_gacd !=nil {return _eg .Wrap (_gacd ,_fabf ,"\u006ca\u0073\u0074\u0020\u0062\u0079\u0074e");
};};_fefe .Data =_aaeb .Data ();return nil ;};func (_bfg *Bitmap )nextOnPixel (_gfeb ,_eddgb int )(_abgg _dg .Point ,_gebb bool ,_gcef error ){const _gbea ="n\u0065\u0078\u0074\u004f\u006e\u0050\u0069\u0078\u0065\u006c";_abgg ,_gebb ,_gcef =_bfg .nextOnPixelLow (_bfg .Width ,_bfg .Height ,_bfg .RowStride ,_gfeb ,_eddgb );
if _gcef !=nil {return _abgg ,false ,_eg .Wrap (_gcef ,_gbea ,"");};return _abgg ,_gebb ,nil ;};func TstPSymbol (t *_g .T )*Bitmap {t .Helper ();_dage :=New (5,8);_a .NoError (t ,_dage .SetPixel (0,0,1));_a .NoError (t ,_dage .SetPixel (1,0,1));_a .NoError (t ,_dage .SetPixel (2,0,1));
_a .NoError (t ,_dage .SetPixel (3,0,1));_a .NoError (t ,_dage .SetPixel (4,1,1));_a .NoError (t ,_dage .SetPixel (0,1,1));_a .NoError (t ,_dage .SetPixel (4,2,1));_a .NoError (t ,_dage .SetPixel (0,2,1));_a .NoError (t ,_dage .SetPixel (4,3,1));_a .NoError (t ,_dage .SetPixel (0,3,1));
_a .NoError (t ,_dage .SetPixel (0,4,1));_a .NoError (t ,_dage .SetPixel (1,4,1));_a .NoError (t ,_dage .SetPixel (2,4,1));_a .NoError (t ,_dage .SetPixel (3,4,1));_a .NoError (t ,_dage .SetPixel (0,5,1));_a .NoError (t ,_dage .SetPixel (0,6,1));_a .NoError (t ,_dage .SetPixel (0,7,1));
return _dage ;};func _fedg (_geae *Bitmap ,_bcaf *_b .Stack ,_cgag ,_ccac ,_cbee int )(_ffbag *_dg .Rectangle ,_efcc error ){const _dgea ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";if _geae ==nil {return nil ,_eg .Error (_dgea ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");
};if _bcaf ==nil {return nil ,_eg .Error (_dgea ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");};switch _cbee {case 4:if _ffbag ,_efcc =_eaba (_geae ,_bcaf ,_cgag ,_ccac );_efcc !=nil {return nil ,_eg .Wrap (_efcc ,_dgea ,"");
};return _ffbag ,nil ;case 8:if _ffbag ,_efcc =_fafbc (_geae ,_bcaf ,_cgag ,_ccac );_efcc !=nil {return nil ,_eg .Wrap (_efcc ,_dgea ,"");};return _ffbag ,nil ;default:return nil ,_eg .Errorf (_dgea ,"\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u0069\u0073 \u006eo\u0074\u0020\u0034\u0020\u006f\u0072\u0020\u0038\u003a\u0020\u0027\u0025\u0064\u0027",_cbee );
};};func _eggc (_debb *Bitmap ,_ccga ,_decc ,_aegcc ,_gaeb int ,_ffac RasterOperator ){if _ccga < 0{_aegcc +=_ccga ;_ccga =0;};_bgabd :=_ccga +_aegcc -_debb .Width ;if _bgabd > 0{_aegcc -=_bgabd ;};if _decc < 0{_gaeb +=_decc ;_decc =0;};_ccgeg :=_decc +_gaeb -_debb .Height ;
if _ccgeg > 0{_gaeb -=_ccgeg ;};if _aegcc <=0||_gaeb <=0{return ;};if (_ccga &7)==0{_ebffg (_debb ,_ccga ,_decc ,_aegcc ,_gaeb ,_ffac );}else {_gebeb (_debb ,_ccga ,_decc ,_aegcc ,_gaeb ,_ffac );};};func _edfc (_aed ,_dea *Bitmap ,_dcaa int ,_bdd []byte ,_gefd int )(_gfd error ){const _dfeg ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0033";
var (_cbb ,_cda ,_dbc ,_efbeb ,_ccc ,_fbca ,_gbe ,_bcf int ;_cg ,_bdb ,_dde ,_egad uint32 ;_ab ,_edg byte ;_gae uint16 ;);_dbde :=make ([]byte ,4);_fcfa :=make ([]byte ,4);for _dbc =0;_dbc < _aed .Height -1;_dbc ,_efbeb =_dbc +2,_efbeb +1{_cbb =_dbc *_aed .RowStride ;
_cda =_efbeb *_dea .RowStride ;for _ccc ,_fbca =0,0;_ccc < _gefd ;_ccc ,_fbca =_ccc +4,_fbca +1{for _gbe =0;_gbe < 4;_gbe ++{_bcf =_cbb +_ccc +_gbe ;if _bcf <=len (_aed .Data )-1&&_bcf < _cbb +_aed .RowStride {_dbde [_gbe ]=_aed .Data [_bcf ];}else {_dbde [_gbe ]=0x00;
};_bcf =_cbb +_aed .RowStride +_ccc +_gbe ;if _bcf <=len (_aed .Data )-1&&_bcf < _cbb +(2*_aed .RowStride ){_fcfa [_gbe ]=_aed .Data [_bcf ];}else {_fcfa [_gbe ]=0x00;};};_cg =_df .BigEndian .Uint32 (_dbde );_bdb =_df .BigEndian .Uint32 (_fcfa );_dde =_cg &_bdb ;
_dde |=_dde <<1;_egad =_cg |_bdb ;_egad &=_egad <<1;_bdb =_dde &_egad ;_bdb &=0xaaaaaaaa;_cg =_bdb |(_bdb <<7);_ab =byte (_cg >>24);_edg =byte ((_cg >>8)&0xff);_bcf =_cda +_fbca ;if _bcf +1==len (_dea .Data )-1||_bcf +1>=_cda +_dea .RowStride {if _gfd =_dea .SetByte (_bcf ,_bdd [_ab ]);
_gfd !=nil {return _eg .Wrapf (_gfd ,_dfeg ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_bcf );};}else {_gae =(uint16 (_bdd [_ab ])<<8)|uint16 (_bdd [_edg ]);if _gfd =_dea .setTwoBytes (_bcf ,_gae );_gfd !=nil {return _eg .Wrapf (_gfd ,_dfeg ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_bcf );
};_fbca ++;};};};return nil ;};func _fafbc (_fdbb *Bitmap ,_cabgb *_b .Stack ,_daeae ,_cbcd int )(_faed *_dg .Rectangle ,_fcdf error ){const _gecd ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";if _fdbb ==nil {return nil ,_eg .Error (_gecd ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");
};if _cabgb ==nil {return nil ,_eg .Error (_gecd ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");};_ggdgd ,_fcgc :=_fdbb .Width ,_fdbb .Height ;_abcec :=_ggdgd -1;_eabad :=_fcgc -1;if _daeae < 0||_daeae > _abcec ||_cbcd < 0||_cbcd > _eabad ||!_fdbb .GetPixel (_daeae ,_cbcd ){return nil ,nil ;
};_ecga :=_dg .Rect (100000,100000,0,0);if _fcdf =_debbf (_cabgb ,_daeae ,_daeae ,_cbcd ,1,_eabad ,&_ecga );_fcdf !=nil {return nil ,_eg .Wrap (_fcdf ,_gecd ,"\u0069\u006e\u0069t\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _fcdf =_debbf (_cabgb ,_daeae ,_daeae ,_cbcd +1,-1,_eabad ,&_ecga );
_fcdf !=nil {return nil ,_eg .Wrap (_fcdf ,_gecd ,"\u0032\u006ed\u0020\u0069\u006ei\u0074\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};_ecga .Min .X ,_ecga .Max .X =_daeae ,_daeae ;_ecga .Min .Y ,_ecga .Max .Y =_cbcd ,_cbcd ;var (_dfgf *fillSegment ;
_faaa int ;);for _cabgb .Len ()> 0{if _dfgf ,_fcdf =_bgce (_cabgb );_fcdf !=nil {return nil ,_eg .Wrap (_fcdf ,_gecd ,"");};_cbcd =_dfgf ._cabf ;for _daeae =_dfgf ._affeb -1;_daeae >=0&&_fdbb .GetPixel (_daeae ,_cbcd );_daeae --{if _fcdf =_fdbb .SetPixel (_daeae ,_cbcd ,0);
_fcdf !=nil {return nil ,_eg .Wrap (_fcdf ,_gecd ,"\u0031s\u0074\u0020\u0073\u0065\u0074");};};if _daeae >=_dfgf ._affeb -1{for {for _daeae ++;_daeae <=_dfgf ._afcc +1&&_daeae <=_abcec &&!_fdbb .GetPixel (_daeae ,_cbcd );_daeae ++{};_faaa =_daeae ;if !(_daeae <=_dfgf ._afcc +1&&_daeae <=_abcec ){break ;
};for ;_daeae <=_abcec &&_fdbb .GetPixel (_daeae ,_cbcd );_daeae ++{if _fcdf =_fdbb .SetPixel (_daeae ,_cbcd ,0);_fcdf !=nil {return nil ,_eg .Wrap (_fcdf ,_gecd ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _fcdf =_debbf (_cabgb ,_faaa ,_daeae -1,_dfgf ._cabf ,_dfgf ._bega ,_eabad ,&_ecga );
_fcdf !=nil {return nil ,_eg .Wrap (_fcdf ,_gecd ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _daeae > _dfgf ._afcc {if _fcdf =_debbf (_cabgb ,_dfgf ._afcc +1,_daeae -1,_dfgf ._cabf ,-_dfgf ._bega ,_eabad ,&_ecga );_fcdf !=nil {return nil ,_eg .Wrap (_fcdf ,_gecd ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};};continue ;};_faaa =_daeae +1;if _faaa < _dfgf ._affeb {if _fcdf =_debbf (_cabgb ,_faaa ,_dfgf ._affeb -1,_dfgf ._cabf ,-_dfgf ._bega ,_eabad ,&_ecga );_fcdf !=nil {return nil ,_eg .Wrap (_fcdf ,_gecd ,"\u006c\u0065\u0061\u006b\u0020\u006f\u006e\u0020\u006c\u0065\u0066\u0074 \u0073\u0069\u0064\u0065");
};};_daeae =_dfgf ._affeb ;for {for ;_daeae <=_abcec &&_fdbb .GetPixel (_daeae ,_cbcd );_daeae ++{if _fcdf =_fdbb .SetPixel (_daeae ,_cbcd ,0);_fcdf !=nil {return nil ,_eg .Wrap (_fcdf ,_gecd ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _fcdf =_debbf (_cabgb ,_faaa ,_daeae -1,_dfgf ._cabf ,_dfgf ._bega ,_eabad ,&_ecga );
_fcdf !=nil {return nil ,_eg .Wrap (_fcdf ,_gecd ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _daeae > _dfgf ._afcc {if _fcdf =_debbf (_cabgb ,_dfgf ._afcc +1,_daeae -1,_dfgf ._cabf ,-_dfgf ._bega ,_eabad ,&_ecga );_fcdf !=nil {return nil ,_eg .Wrap (_fcdf ,_gecd ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};for _daeae ++;_daeae <=_dfgf ._afcc +1&&_daeae <=_abcec &&!_fdbb .GetPixel (_daeae ,_cbcd );_daeae ++{};_faaa =_daeae ;if !(_daeae <=_dfgf ._afcc +1&&_daeae <=_abcec ){break ;};};};_ecga .Max .X ++;_ecga .Max .Y ++;return &_ecga ,nil ;};func (_fda *Bitmap )AddBorder (borderSize ,val int )(*Bitmap ,error ){if borderSize ==0{return _fda .Copy (),nil ;
};_afb ,_bba :=_fda .addBorderGeneral (borderSize ,borderSize ,borderSize ,borderSize ,val );if _bba !=nil {return nil ,_eg .Wrap (_bba ,"\u0041d\u0064\u0042\u006f\u0072\u0064\u0065r","");};return _afb ,nil ;};func TstWSymbol (t *_g .T ,scale ...int )*Bitmap {_ccca ,_gdgdg :=NewWithData (5,5,[]byte {0x88,0x88,0xA8,0xD8,0x88});
_a .NoError (t ,_gdgdg );return TstGetScaledSymbol (t ,_ccca ,scale ...);};func (_edff *byHeight )Less (i ,j int )bool {return _edff .Values [i ].Height < _edff .Values [j ].Height };func _fgeb (_afgd *Bitmap )(_bcbg *Bitmap ,_gfff int ,_acfg error ){const _fffd ="\u0042i\u0074\u006d\u0061\u0070.\u0077\u006f\u0072\u0064\u004da\u0073k\u0042y\u0044\u0069\u006c\u0061\u0074\u0069\u006fn";
if _afgd ==nil {return nil ,0,_eg .Errorf (_fffd ,"\u0027\u0073\u0027\u0020bi\u0074\u006d\u0061\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");};var _gabc ,_dfecf *Bitmap ;if _gabc ,_acfg =_cecd (nil ,_afgd );_acfg !=nil {return nil ,0,_eg .Wrap (_acfg ,_fffd ,"\u0063\u006f\u0070\u0079\u0020\u0027\u0073\u0027");
};var (_egeae [13]int ;_aebd ,_ggda int ;);_fcaae :=12;_afac :=_b .NewNumSlice (_fcaae +1);_acbc :=_b .NewNumSlice (_fcaae +1);var _eddab *Boxes ;for _aeefa :=0;_aeefa <=_fcaae ;_aeefa ++{if _aeefa ==0{if _dfecf ,_acfg =_cecd (nil ,_gabc );_acfg !=nil {return nil ,0,_eg .Wrap (_acfg ,_fffd ,"\u0066i\u0072\u0073\u0074\u0020\u0062\u006d2");
};}else {if _dfecf ,_acfg =_edfd (_gabc ,MorphProcess {Operation :MopDilation ,Arguments :[]int {2,1}});_acfg !=nil {return nil ,0,_eg .Wrap (_acfg ,_fffd ,"\u0064\u0069\u006ca\u0074\u0069\u006f\u006e\u0020\u0062\u006d\u0032");};};if _eddab ,_acfg =_dfecf .connComponentsBB (4);
_acfg !=nil {return nil ,0,_eg .Wrap (_acfg ,_fffd ,"");};_egeae [_aeefa ]=len (*_eddab );_afac .AddInt (_egeae [_aeefa ]);switch _aeefa {case 0:_aebd =_egeae [0];default:_ggda =_egeae [_aeefa -1]-_egeae [_aeefa ];_acbc .AddInt (_ggda );};_gabc =_dfecf ;
};_dcbf :=true ;_eabdc :=2;var _dbfb ,_gdg int ;for _cbce :=1;_cbce < len (*_acbc );_cbce ++{if _dbfb ,_acfg =_afac .GetInt (_cbce );_acfg !=nil {return nil ,0,_eg .Wrap (_acfg ,_fffd ,"\u0043\u0068\u0065\u0063ki\u006e\u0067\u0020\u0062\u0065\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0069o\u006e");
};if _dcbf &&_dbfb < int (0.3*float32 (_aebd )){_eabdc =_cbce +1;_dcbf =false ;};if _ggda ,_acfg =_acbc .GetInt (_cbce );_acfg !=nil {return nil ,0,_eg .Wrap (_acfg ,_fffd ,"\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006ea\u0044\u0069\u0066\u0066");
};if _ggda > _gdg {_gdg =_ggda ;};};_cffb :=_afgd .XResolution ;if _cffb ==0{_cffb =150;};if _cffb > 110{_eabdc ++;};if _eabdc < 2{_dc .Log .Trace ("J\u0042\u0049\u0047\u0032\u0020\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0069\u0042\u0065\u0073\u0074 \u0074\u006f\u0020\u006d\u0069\u006e\u0069\u006d\u0075\u006d a\u006c\u006c\u006fw\u0061b\u006c\u0065");
_eabdc =2;};_gfff =_eabdc +1;if _bcbg ,_acfg =_cfccg (nil ,_afgd ,_eabdc +1,1);_acfg !=nil {return nil ,0,_eg .Wrap (_acfg ,_fffd ,"\u0067\u0065\u0074\u0074in\u0067\u0020\u006d\u0061\u0073\u006b\u0020\u0066\u0061\u0069\u006c\u0065\u0064");};return _bcbg ,_gfff ,nil ;
};func _cafb (_fddb int )int {if _fddb < 0{return -_fddb ;};return _fddb ;};var _fgee =[5]int {1,2,3,0,4};func _agcd (_cfbc ,_dfbe *Bitmap ,_ggcfd ,_bfac int )(*Bitmap ,error ){const _fade ="\u0063\u006c\u006f\u0073\u0065\u0053\u0061\u0066\u0065B\u0072\u0069\u0063\u006b";
if _dfbe ==nil {return nil ,_eg .Error (_fade ,"\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _ggcfd < 1||_bfac < 1{return nil ,_eg .Error (_fade ,"\u0068s\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0073\u0069z\u0065\u0020\u006e\u006f\u0074\u0020\u003e\u003d\u0020\u0031");
};if _ggcfd ==1&&_bfac ==1{return _cecd (_cfbc ,_dfbe );};if MorphBC ==SymmetricMorphBC {_egcea ,_dae :=_cfccg (_cfbc ,_dfbe ,_ggcfd ,_bfac );if _dae !=nil {return nil ,_eg .Wrap (_dae ,_fade ,"\u0053\u0079m\u006d\u0065\u0074r\u0069\u0063\u004d\u006f\u0072\u0070\u0068\u0042\u0043");
};return _egcea ,nil ;};_eed :=_cbea (_ggcfd /2,_bfac /2);_gaff :=8*((_eed +7)/8);_dacb ,_bfda :=_dfbe .AddBorder (_gaff ,0);if _bfda !=nil {return nil ,_eg .Wrapf (_bfda ,_fade ,"\u0042\u006f\u0072\u0064\u0065\u0072\u0053\u0069\u007ae\u003a\u0020\u0025\u0064",_gaff );
};var _fbec ,_ffgbd *Bitmap ;if _ggcfd ==1||_bfac ==1{_fgb :=SelCreateBrick (_bfac ,_ggcfd ,_bfac /2,_ggcfd /2,SelHit );_fbec ,_bfda =_bbbd (nil ,_dacb ,_fgb );if _bfda !=nil {return nil ,_eg .Wrap (_bfda ,_fade ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};}else {_abbgg :=SelCreateBrick (1,_ggcfd ,0,_ggcfd /2,SelHit );_bcaa ,_dbbbg :=_acd (nil ,_dacb ,_abbgg );if _dbbbg !=nil {return nil ,_eg .Wrap (_dbbbg ,_fade ,"\u0072\u0065\u0067\u0075la\u0072\u0020\u002d\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0064\u0069\u006c\u0061t\u0065");
};_agdf :=SelCreateBrick (_bfac ,1,_bfac /2,0,SelHit );_fbec ,_dbbbg =_acd (nil ,_bcaa ,_agdf );if _dbbbg !=nil {return nil ,_eg .Wrap (_dbbbg ,_fade ,"\u0072\u0065\u0067ul\u0061\u0072\u0020\u002d\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};if _ ,_dbbbg =_eeffa (_bcaa ,_fbec ,_abbgg );_dbbbg !=nil {return nil ,_eg .Wrap (_dbbbg ,_fade ,"r\u0065\u0067\u0075\u006car\u0020-\u0020\u0066\u0069\u0072\u0073t\u0020\u0065\u0072\u006f\u0064\u0065");};if _ ,_dbbbg =_eeffa (_fbec ,_bcaa ,_agdf );_dbbbg !=nil {return nil ,_eg .Wrap (_dbbbg ,_fade ,"\u0072\u0065\u0067\u0075la\u0072\u0020\u002d\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0065\u0072\u006fd\u0065");
};};if _ffgbd ,_bfda =_fbec .RemoveBorder (_gaff );_bfda !=nil {return nil ,_eg .Wrap (_bfda ,_fade ,"\u0072e\u0067\u0075\u006c\u0061\u0072");};if _cfbc ==nil {return _ffgbd ,nil ;};if _ ,_bfda =_cecd (_cfbc ,_ffgbd );_bfda !=nil {return nil ,_bfda ;};
return _cfbc ,nil ;};func _cbea (_abbeb ,_ebc int )int {if _abbeb > _ebc {return _abbeb ;};return _ebc ;};type shift int ;func init (){for _ggdg :=0;_ggdg < 256;_ggdg ++{_aefb [_ggdg ]=uint8 (_ggdg &0x1)+(uint8 (_ggdg >>1)&0x1)+(uint8 (_ggdg >>2)&0x1)+(uint8 (_ggdg >>3)&0x1)+(uint8 (_ggdg >>4)&0x1)+(uint8 (_ggdg >>5)&0x1)+(uint8 (_ggdg >>6)&0x1)+(uint8 (_ggdg >>7)&0x1);
};};func (_gde *Bitmap )addBorderGeneral (_ebb ,_gbdd ,_fdd ,_adef int ,_aeg int )(*Bitmap ,error ){const _ecc ="\u0061\u0064d\u0042\u006f\u0072d\u0065\u0072\u0047\u0065\u006e\u0065\u0072\u0061\u006c";if _ebb < 0||_gbdd < 0||_fdd < 0||_adef < 0{return nil ,_eg .Error (_ecc ,"n\u0065\u0067\u0061\u0074iv\u0065 \u0062\u006f\u0072\u0064\u0065r\u0020\u0061\u0064\u0064\u0065\u0064");
};_fbcc ,_cfag :=_gde .Width ,_gde .Height ;_gebc :=_fbcc +_ebb +_gbdd ;_efg :=_cfag +_fdd +_adef ;_cdag :=New (_gebc ,_efg );_cdag .Color =_gde .Color ;_feab :=PixClr ;if _aeg > 0{_feab =PixSet ;};_fabd :=_cdag .RasterOperation (0,0,_ebb ,_efg ,_feab ,nil ,0,0);
if _fabd !=nil {return nil ,_eg .Wrap (_fabd ,_ecc ,"\u006c\u0065\u0066\u0074");};_fabd =_cdag .RasterOperation (_gebc -_gbdd ,0,_gbdd ,_efg ,_feab ,nil ,0,0);if _fabd !=nil {return nil ,_eg .Wrap (_fabd ,_ecc ,"\u0072\u0069\u0067h\u0074");};_fabd =_cdag .RasterOperation (0,0,_gebc ,_fdd ,_feab ,nil ,0,0);
if _fabd !=nil {return nil ,_eg .Wrap (_fabd ,_ecc ,"\u0074\u006f\u0070");};_fabd =_cdag .RasterOperation (0,_efg -_adef ,_gebc ,_adef ,_feab ,nil ,0,0);if _fabd !=nil {return nil ,_eg .Wrap (_fabd ,_ecc ,"\u0062\u006f\u0074\u0074\u006f\u006d");};_fabd =_cdag .RasterOperation (_ebb ,_fdd ,_fbcc ,_cfag ,PixSrc ,_gde ,0,0);
if _fabd !=nil {return nil ,_eg .Wrap (_fabd ,_ecc ,"\u0063\u006f\u0070\u0079");};return _cdag ,nil ;};func (_ffba *ClassedPoints )GroupByY ()([]*ClassedPoints ,error ){const _gcgc ="\u0043\u006c\u0061\u0073se\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0072\u006f\u0075\u0070\u0042y\u0059";
if _ddgf :=_ffba .validateIntSlice ();_ddgf !=nil {return nil ,_eg .Wrap (_ddgf ,_gcgc ,"");};if _ffba .IntSlice .Size ()==0{return nil ,_eg .Error (_gcgc ,"\u004e\u006f\u0020\u0063la\u0073\u0073\u0065\u0073\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064");
};_ffba .SortByY ();var (_ccag []*ClassedPoints ;_fcdb int ;);_eeeg :=-1;var _gagb *ClassedPoints ;for _bbggf :=0;_bbggf < len (_ffba .IntSlice );_bbggf ++{_fcdb =int (_ffba .YAtIndex (_bbggf ));if _fcdb !=_eeeg {_gagb =&ClassedPoints {Points :_ffba .Points };
_eeeg =_fcdb ;_ccag =append (_ccag ,_gagb );};_gagb .IntSlice =append (_gagb .IntSlice ,_ffba .IntSlice [_bbggf ]);};for _ ,_gfffe :=range _ccag {_gfffe .SortByX ();};return _ccag ,nil ;};func TstRSymbol (t *_g .T ,scale ...int )*Bitmap {_eeda ,_fgbf :=NewWithData (4,5,[]byte {0xF0,0x90,0xF0,0xA0,0x90});
_a .NoError (t ,_fgbf );return TstGetScaledSymbol (t ,_eeda ,scale ...);};func (_bcbc *BitmapsArray )AddBox (box *_dg .Rectangle ){_bcbc .Boxes =append (_bcbc .Boxes ,box )};const (_ LocationFilter =iota ;LocSelectWidth ;LocSelectHeight ;LocSelectXVal ;
LocSelectYVal ;LocSelectIfEither ;LocSelectIfBoth ;);const (_ SizeSelection =iota ;SizeSelectByWidth ;SizeSelectByHeight ;SizeSelectByMaxDimension ;SizeSelectByArea ;SizeSelectByPerimeter ;);func (_ffbf MorphProcess )getWidthHeight ()(_cdecc ,_abe int ){return _ffbf .Arguments [0],_ffbf .Arguments [1];
};func (_bbf *Bitmap )setBit (_fcge int ){_bbf .Data [(_fcge >>3)]|=0x80>>uint (_fcge &7)};func (_eec *Bitmap )RemoveBorderGeneral (left ,right ,top ,bot int )(*Bitmap ,error ){return _eec .removeBorderGeneral (left ,right ,top ,bot );};func (_fbccc *ClassedPoints )Len ()int {return _fbccc .IntSlice .Size ()};
func (_dcae *ClassedPoints )ySortFunction ()func (_afeb int ,_aded int )bool {return func (_eecdg ,_gbeae int )bool {return _dcae .YAtIndex (_eecdg )< _dcae .YAtIndex (_gbeae )};};func (_geeb CombinationOperator )String ()string {var _ddae string ;switch _geeb {case CmbOpOr :_ddae ="\u004f\u0052";
case CmbOpAnd :_ddae ="\u0041\u004e\u0044";case CmbOpXor :_ddae ="\u0058\u004f\u0052";case CmbOpXNor :_ddae ="\u0058\u004e\u004f\u0052";case CmbOpReplace :_ddae ="\u0052E\u0050\u004c\u0041\u0043\u0045";case CmbOpNot :_ddae ="\u004e\u004f\u0054";};return _ddae ;
};func (_aeaf *Bitmaps )WidthSorter ()func (_cegd ,_abgca int )bool {return func (_bfgbb ,_gdfc int )bool {return _aeaf .Values [_bfgbb ].Width < _aeaf .Values [_gdfc ].Width };};func _cdf (_ege ,_gadba *Bitmap ,_faf int ,_ead []byte ,_adc int )(_fdb error ){const _bcg ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0032";
var (_eefg ,_eegd ,_ffg ,_cdd ,_deg ,_cfa ,_cafd ,_dcf int ;_dad ,_cfb ,_egg ,_ffge uint32 ;_egea ,_bef byte ;_adf uint16 ;);_eff :=make ([]byte ,4);_gfe :=make ([]byte ,4);for _ffg =0;_ffg < _ege .Height -1;_ffg ,_cdd =_ffg +2,_cdd +1{_eefg =_ffg *_ege .RowStride ;
_eegd =_cdd *_gadba .RowStride ;for _deg ,_cfa =0,0;_deg < _adc ;_deg ,_cfa =_deg +4,_cfa +1{for _cafd =0;_cafd < 4;_cafd ++{_dcf =_eefg +_deg +_cafd ;if _dcf <=len (_ege .Data )-1&&_dcf < _eefg +_ege .RowStride {_eff [_cafd ]=_ege .Data [_dcf ];}else {_eff [_cafd ]=0x00;
};_dcf =_eefg +_ege .RowStride +_deg +_cafd ;if _dcf <=len (_ege .Data )-1&&_dcf < _eefg +(2*_ege .RowStride ){_gfe [_cafd ]=_ege .Data [_dcf ];}else {_gfe [_cafd ]=0x00;};};_dad =_df .BigEndian .Uint32 (_eff );_cfb =_df .BigEndian .Uint32 (_gfe );_egg =_dad &_cfb ;
_egg |=_egg <<1;_ffge =_dad |_cfb ;_ffge &=_ffge <<1;_cfb =_egg |_ffge ;_cfb &=0xaaaaaaaa;_dad =_cfb |(_cfb <<7);_egea =byte (_dad >>24);_bef =byte ((_dad >>8)&0xff);_dcf =_eegd +_cfa ;if _dcf +1==len (_gadba .Data )-1||_dcf +1>=_eegd +_gadba .RowStride {if _fdb =_gadba .SetByte (_dcf ,_ead [_egea ]);
_fdb !=nil {return _eg .Wrapf (_fdb ,_bcg ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_dcf );};}else {_adf =(uint16 (_ead [_egea ])<<8)|uint16 (_ead [_bef ]);if _fdb =_gadba .setTwoBytes (_dcf ,_adf );_fdb !=nil {return _eg .Wrapf (_fdb ,_bcg ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_dcf );
};_cfa ++;};};};return nil ;};func _feeg (_fdea ,_fcgf *Bitmap ,_feegb *Selection )(*Bitmap ,error ){const _dggd ="\u006f\u0070\u0065\u006e";var _dcbdg error ;_fdea ,_dcbdg =_cffa (_fdea ,_fcgf ,_feegb );if _dcbdg !=nil {return nil ,_eg .Wrap (_dcbdg ,_dggd ,"");
};_dedb ,_dcbdg :=_eeffa (nil ,_fcgf ,_feegb );if _dcbdg !=nil {return nil ,_eg .Wrap (_dcbdg ,_dggd ,"");};_ ,_dcbdg =_acd (_fdea ,_dedb ,_feegb );if _dcbdg !=nil {return nil ,_eg .Wrap (_dcbdg ,_dggd ,"");};return _fdea ,nil ;};func TstASymbol (t *_g .T )*Bitmap {t .Helper ();
_bdabcb :=New (6,6);_a .NoError (t ,_bdabcb .SetPixel (1,0,1));_a .NoError (t ,_bdabcb .SetPixel (2,0,1));_a .NoError (t ,_bdabcb .SetPixel (3,0,1));_a .NoError (t ,_bdabcb .SetPixel (4,0,1));_a .NoError (t ,_bdabcb .SetPixel (5,1,1));_a .NoError (t ,_bdabcb .SetPixel (1,2,1));
_a .NoError (t ,_bdabcb .SetPixel (2,2,1));_a .NoError (t ,_bdabcb .SetPixel (3,2,1));_a .NoError (t ,_bdabcb .SetPixel (4,2,1));_a .NoError (t ,_bdabcb .SetPixel (5,2,1));_a .NoError (t ,_bdabcb .SetPixel (0,3,1));_a .NoError (t ,_bdabcb .SetPixel (5,3,1));
_a .NoError (t ,_bdabcb .SetPixel (0,4,1));_a .NoError (t ,_bdabcb .SetPixel (5,4,1));_a .NoError (t ,_bdabcb .SetPixel (1,5,1));_a .NoError (t ,_bdabcb .SetPixel (2,5,1));_a .NoError (t ,_bdabcb .SetPixel (3,5,1));_a .NoError (t ,_bdabcb .SetPixel (4,5,1));
_a .NoError (t ,_bdabcb .SetPixel (5,5,1));return _bdabcb ;};func _bcfa (_bcfc uint ,_abcf byte )byte {return _abcf >>_bcfc <<_bcfc };func DilateBrick (d ,s *Bitmap ,hSize ,vSize int )(*Bitmap ,error ){return _abef (d ,s ,hSize ,vSize )};func (_eabc *Bitmap )setFourBytes (_dgfd int ,_fgag uint32 )error {if _dgfd +3> len (_eabc .Data )-1{return _eg .Errorf ("\u0073\u0065\u0074F\u006f\u0075\u0072\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_dgfd );
};_eabc .Data [_dgfd ]=byte ((_fgag &0xff000000)>>24);_eabc .Data [_dgfd +1]=byte ((_fgag &0xff0000)>>16);_eabc .Data [_dgfd +2]=byte ((_fgag &0xff00)>>8);_eabc .Data [_dgfd +3]=byte (_fgag &0xff);return nil ;};func _fgad (_bdfe *Bitmap ,_efc ,_gaed ,_gbddcg ,_cbed int ,_begfd RasterOperator ,_dgbc *Bitmap ,_gbfe ,_ggdf int )error {const _cdgb ="\u0072a\u0073t\u0065\u0072\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e";
if _bdfe ==nil {return _eg .Error (_cdgb ,"\u006e\u0069\u006c\u0020\u0027\u0064\u0065\u0073\u0074\u0027\u0020\u0042i\u0074\u006d\u0061\u0070");};if _begfd ==PixDst {return nil ;};switch _begfd {case PixClr ,PixSet ,PixNotDst :_eggc (_bdfe ,_efc ,_gaed ,_gbddcg ,_cbed ,_begfd );
return nil ;};if _dgbc ==nil {_dc .Log .Debug ("\u0052a\u0073\u0074e\u0072\u004f\u0070\u0065r\u0061\u0074\u0069o\u006e\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020bi\u0074\u006d\u0061p\u0020\u0069s\u0020\u006e\u006f\u0074\u0020\u0064e\u0066\u0069n\u0065\u0064");
return _eg .Error (_cdgb ,"\u006e\u0069l\u0020\u0027\u0073r\u0063\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _efgfc :=_egca (_bdfe ,_efc ,_gaed ,_gbddcg ,_cbed ,_begfd ,_dgbc ,_gbfe ,_ggdf );_efgfc !=nil {return _eg .Wrap (_efgfc ,_cdgb ,"");
};return nil ;};func (_dcca *Boxes )selectWithIndicator (_eefb *_b .NumSlice )(_cdgf *Boxes ,_gaf error ){const _dce ="\u0042o\u0078\u0065\u0073\u002es\u0065\u006c\u0065\u0063\u0074W\u0069t\u0068I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";if _dcca ==nil {return nil ,_eg .Error (_dce ,"b\u006f\u0078\u0065\u0073 '\u0062'\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064");
};if _eefb ==nil {return nil ,_eg .Error (_dce ,"\u0027\u006ea\u0027\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if len (*_eefb )!=len (*_dcca ){return nil ,_eg .Error (_dce ,"\u0062\u006f\u0078\u0065\u0073\u0020\u0027\u0062\u0027\u0020\u0068\u0061\u0073\u0020\u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006e\u0074\u0020s\u0069\u007a\u0065\u0020\u0074h\u0061\u006e \u0027\u006e\u0061\u0027");
};var _fbbg ,_aea int ;for _dcbd :=0;_dcbd < len (*_eefb );_dcbd ++{if _fbbg ,_gaf =_eefb .GetInt (_dcbd );_gaf !=nil {return nil ,_eg .Wrap (_gaf ,_dce ,"\u0063\u0068\u0065\u0063\u006b\u0069\u006e\u0067\u0020c\u006f\u0075\u006e\u0074");};if _fbbg ==1{_aea ++;
};};if _aea ==len (*_dcca ){return _dcca ,nil ;};_bede :=Boxes {};for _adfb :=0;_adfb < len (*_eefb );_adfb ++{_fbbg =int ((*_eefb )[_adfb ]);if _fbbg ==0{continue ;};_bede =append (_bede ,(*_dcca )[_adfb ]);};_cdgf =&_bede ;return _cdgf ,nil ;};type CombinationOperator int ;
func (_cecc *ClassedPoints )XAtIndex (i int )float32 {return (*_cecc .Points )[_cecc .IntSlice [i ]].X };func (_cdde *Bitmap )setAll ()error {_baff :=_fgad (_cdde ,0,0,_cdde .Width ,_cdde .Height ,PixSet ,nil ,0,0);if _baff !=nil {return _eg .Wrap (_baff ,"\u0073\u0065\u0074\u0041\u006c\u006c","");
};return nil ;};func _gcfg (_fab ,_abb *Bitmap ,_badb int ,_effd []byte ,_bfb int )(_dcfe error ){const _bag ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0034";var (_eag ,_fff ,_gda ,_bbg ,_cgf ,_gec ,_cfgf ,_fceb int ;
_bfe ,_fee uint32 ;_eba ,_fdg byte ;_ecg uint16 ;);_ggdd :=make ([]byte ,4);_cdb :=make ([]byte ,4);for _gda =0;_gda < _fab .Height -1;_gda ,_bbg =_gda +2,_bbg +1{_eag =_gda *_fab .RowStride ;_fff =_bbg *_abb .RowStride ;for _cgf ,_gec =0,0;_cgf < _bfb ;
_cgf ,_gec =_cgf +4,_gec +1{for _cfgf =0;_cfgf < 4;_cfgf ++{_fceb =_eag +_cgf +_cfgf ;if _fceb <=len (_fab .Data )-1&&_fceb < _eag +_fab .RowStride {_ggdd [_cfgf ]=_fab .Data [_fceb ];}else {_ggdd [_cfgf ]=0x00;};_fceb =_eag +_fab .RowStride +_cgf +_cfgf ;
if _fceb <=len (_fab .Data )-1&&_fceb < _eag +(2*_fab .RowStride ){_cdb [_cfgf ]=_fab .Data [_fceb ];}else {_cdb [_cfgf ]=0x00;};};_bfe =_df .BigEndian .Uint32 (_ggdd );_fee =_df .BigEndian .Uint32 (_cdb );_fee &=_bfe ;_fee &=_fee <<1;_fee &=0xaaaaaaaa;
_bfe =_fee |(_fee <<7);_eba =byte (_bfe >>24);_fdg =byte ((_bfe >>8)&0xff);_fceb =_fff +_gec ;if _fceb +1==len (_abb .Data )-1||_fceb +1>=_fff +_abb .RowStride {_abb .Data [_fceb ]=_effd [_eba ];if _dcfe =_abb .SetByte (_fceb ,_effd [_eba ]);_dcfe !=nil {return _eg .Wrapf (_dcfe ,_bag ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_fceb );
};}else {_ecg =(uint16 (_effd [_eba ])<<8)|uint16 (_effd [_fdg ]);if _dcfe =_abb .setTwoBytes (_fceb ,_ecg );_dcfe !=nil {return _eg .Wrapf (_dcfe ,_bag ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_fceb );
};_gec ++;};};};return nil ;};func (_efea *ClassedPoints )GetIntYByClass (i int )(int ,error ){const _bdea ="\u0043\u006c\u0061\u0073s\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047e\u0074I\u006e\u0074\u0059\u0042\u0079\u0043\u006ca\u0073\u0073";
if i >=_efea .IntSlice .Size (){return 0,_eg .Errorf (_bdea ,"\u0069\u003a\u0020\u0027\u0025\u0064\u0027 \u0069\u0073\u0020o\u0075\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065",i );
};return int (_efea .YAtIndex (i )),nil ;};func _bgd (_fc ,_dgb *Bitmap )(_ga error ){const _gb ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0038";_gf :=_dgb .RowStride ;_gfg :=_fc .RowStride ;var _bgdb ,_egc ,_fe ,_ceb ,_ac int ;
for _fe =0;_fe < _dgb .Height ;_fe ++{_bgdb =_fe *_gf ;_egc =8*_fe *_gfg ;for _ceb =0;_ceb < _gf ;_ceb ++{if _ga =_fc .setEightBytes (_egc +_ceb *8,_feaa [_dgb .Data [_bgdb +_ceb ]]);_ga !=nil {return _eg .Wrap (_ga ,_gb ,"");};};for _ac =1;_ac < 8;_ac ++{for _ceb =0;
_ceb < _gfg ;_ceb ++{if _ga =_fc .SetByte (_egc +_ac *_gfg +_ceb ,_fc .Data [_egc +_ceb ]);_ga !=nil {return _eg .Wrap (_ga ,_gb ,"");};};};};return nil ;};func _cfccg (_babe ,_dcgb *Bitmap ,_agbd ,_bgdga int )(*Bitmap ,error ){const _agac ="\u0063\u006c\u006f\u0073\u0065\u0042\u0072\u0069\u0063\u006b";
if _dcgb ==nil {return nil ,_eg .Error (_agac ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _agbd < 1||_bgdga < 1{return nil ,_eg .Error (_agac ,"\u0068S\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0053\u0069z\u0065\u0020\u006e\u006f\u0074\u0020\u003e\u003d\u0020\u0031");
};if _agbd ==1&&_bgdga ==1{return _dcgb .Copy (),nil ;};if _agbd ==1||_bgdga ==1{_cdabf :=SelCreateBrick (_bgdga ,_agbd ,_bgdga /2,_agbd /2,SelHit );var _ggca error ;_babe ,_ggca =_bbbd (_babe ,_dcgb ,_cdabf );if _ggca !=nil {return nil ,_eg .Wrap (_ggca ,_agac ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _babe ,nil ;};_adbca :=SelCreateBrick (1,_agbd ,0,_agbd /2,SelHit );_bced :=SelCreateBrick (_bgdga ,1,_bgdga /2,0,SelHit );_dcedg ,_bbaa :=_acd (nil ,_dcgb ,_adbca );if _bbaa !=nil {return nil ,_eg .Wrap (_bbaa ,_agac ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};if _babe ,_bbaa =_acd (_babe ,_dcedg ,_bced );_bbaa !=nil {return nil ,_eg .Wrap (_bbaa ,_agac ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};if _ ,_bbaa =_eeffa (_dcedg ,_babe ,_adbca );_bbaa !=nil {return nil ,_eg .Wrap (_bbaa ,_agac ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};if _ ,_bbaa =_eeffa (_babe ,_dcedg ,_bced );_bbaa !=nil {return nil ,_eg .Wrap (_bbaa ,_agac ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};return _babe ,nil ;};func (_fcgeb *ClassedPoints )GetIntXByClass (i int )(int ,error ){const _aaeba ="\u0043\u006c\u0061\u0073s\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047e\u0074I\u006e\u0074\u0059\u0042\u0079\u0043\u006ca\u0073\u0073";
if i >=_fcgeb .IntSlice .Size (){return 0,_eg .Errorf (_aaeba ,"\u0069\u003a\u0020\u0027\u0025\u0064\u0027 \u0069\u0073\u0020o\u0075\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065",i );
};return int (_fcgeb .XAtIndex (i )),nil ;};func ClipBoxToRectangle (box *_dg .Rectangle ,wi ,hi int )(_dfegc *_dg .Rectangle ,_gdfba error ){const _dbca ="\u0043l\u0069p\u0042\u006f\u0078\u0054\u006fR\u0065\u0063t\u0061\u006e\u0067\u006c\u0065";if box ==nil {return nil ,_eg .Error (_dbca ,"\u0027\u0062\u006f\u0078\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};if box .Min .X >=wi ||box .Min .Y >=hi ||box .Max .X <=0||box .Max .Y <=0{return nil ,_eg .Error (_dbca ,"\u0027\u0062\u006fx'\u0020\u006f\u0075\u0074\u0073\u0069\u0064\u0065\u0020\u0072\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065");};_efgf :=*box ;
_dfegc =&_efgf ;if _dfegc .Min .X < 0{_dfegc .Max .X +=_dfegc .Min .X ;_dfegc .Min .X =0;};if _dfegc .Min .Y < 0{_dfegc .Max .Y +=_dfegc .Min .Y ;_dfegc .Min .Y =0;};if _dfegc .Max .X > wi {_dfegc .Max .X =wi ;};if _dfegc .Max .Y > hi {_dfegc .Max .Y =hi ;
};return _dfegc ,nil ;};func (_ffbb *Bitmap )setTwoBytes (_efde int ,_cafde uint16 )error {if _efde +1> len (_ffbb .Data )-1{return _eg .Errorf ("s\u0065\u0074\u0054\u0077\u006f\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_efde );
};_ffbb .Data [_efde ]=byte ((_cafde &0xff00)>>8);_ffbb .Data [_efde +1]=byte (_cafde &0xff);return nil ;};func TstOSymbol (t *_g .T ,scale ...int )*Bitmap {_ebdc ,_fcbd :=NewWithData (4,5,[]byte {0xF0,0x90,0x90,0x90,0xF0});_a .NoError (t ,_fcbd );return TstGetScaledSymbol (t ,_ebdc ,scale ...);
};type BitmapsArray struct{Values []*Bitmaps ;Boxes []*_dg .Rectangle ;};func (_eaa *Bitmap )setEightPartlyBytes (_abaf ,_dffb int ,_deff uint64 )(_eeed error ){var (_fcbf byte ;_fbb int ;);const _fgf ="\u0073\u0065\u0074\u0045ig\u0068\u0074\u0050\u0061\u0072\u0074\u006c\u0079\u0042\u0079\u0074\u0065\u0073";
for _fbaa :=1;_fbaa <=_dffb ;_fbaa ++{_fbb =64-_fbaa *8;_fcbf =byte (_deff >>uint (_fbb )&0xff);_dc .Log .Trace ("\u0074\u0065\u006d\u0070\u003a\u0020\u0025\u0030\u0038\u0062\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a %\u0064,\u0020\u0069\u0064\u0078\u003a\u0020\u0025\u0064\u002c\u0020\u0066\u0075l\u006c\u0042\u0079\u0074\u0065\u0073\u004e\u0075\u006d\u0062\u0065\u0072\u003a\u0020\u0025\u0064\u002c \u0073\u0068\u0069\u0066\u0074\u003a\u0020\u0025\u0064",_fcbf ,_abaf ,_abaf +_fbaa -1,_dffb ,_fbb );
if _eeed =_eaa .SetByte (_abaf +_fbaa -1,_fcbf );_eeed !=nil {return _eg .Wrap (_eeed ,_fgf ,"\u0066\u0075\u006c\u006c\u0042\u0079\u0074\u0065");};};_ebga :=_eaa .RowStride *8-_eaa .Width ;if _ebga ==0{return nil ;};_fbb -=8;_fcbf =byte (_deff >>uint (_fbb )&0xff)<<uint (_ebga );
if _eeed =_eaa .SetByte (_abaf +_dffb ,_fcbf );_eeed !=nil {return _eg .Wrap (_eeed ,_fgf ,"\u0070\u0061\u0064\u0064\u0065\u0064");};return nil ;};func _fdffe (_ebdde *Bitmap ,_beadd ,_facf ,_aebc ,_beeb int ,_ggfa RasterOperator ,_bebc *Bitmap ,_dcee ,_dgaa int )error {var (_baede bool ;
_dadg bool ;_baeg byte ;_fcec int ;_eeffd int ;_gbdggf int ;_gdbd int ;_gacge bool ;_dec int ;_gdae int ;_dcec int ;_dded bool ;_aggf byte ;_cefd int ;_gdeb int ;_gdgd int ;_fddd byte ;_gebcg int ;_fbdg int ;_cfcde uint ;_dccac uint ;_fbdc byte ;_fadc shift ;
_adcg bool ;_gagf bool ;_afbfa ,_bgdgb int ;);if _dcee &7!=0{_fbdg =8-(_dcee &7);};if _beadd &7!=0{_eeffd =8-(_beadd &7);};if _fbdg ==0&&_eeffd ==0{_fbdc =_ecdg [0];}else {if _eeffd > _fbdg {_cfcde =uint (_eeffd -_fbdg );}else {_cfcde =uint (8-(_fbdg -_eeffd ));
};_dccac =8-_cfcde ;_fbdc =_ecdg [_cfcde ];};if (_beadd &7)!=0{_baede =true ;_fcec =8-(_beadd &7);_baeg =_ecdg [_fcec ];_gbdggf =_ebdde .RowStride *_facf +(_beadd >>3);_gdbd =_bebc .RowStride *_dgaa +(_dcee >>3);_gebcg =8-(_dcee &7);if _fcec > _gebcg {_fadc =_fed ;
if _aebc >=_fbdg {_adcg =true ;};}else {_fadc =_eaaa ;};};if _aebc < _fcec {_dadg =true ;_baeg &=_ddgeb [8-_fcec +_aebc ];};if !_dadg {_dec =(_aebc -_fcec )>>3;if _dec !=0{_gacge =true ;_gdae =_ebdde .RowStride *_facf +((_beadd +_eeffd )>>3);_dcec =_bebc .RowStride *_dgaa +((_dcee +_eeffd )>>3);
};};_cefd =(_beadd +_aebc )&7;if !(_dadg ||_cefd ==0){_dded =true ;_aggf =_ddgeb [_cefd ];_gdeb =_ebdde .RowStride *_facf +((_beadd +_eeffd )>>3)+_dec ;_gdgd =_bebc .RowStride *_dgaa +((_dcee +_eeffd )>>3)+_dec ;if _cefd > int (_dccac ){_gagf =true ;};
};switch _ggfa {case PixSrc :if _baede {for _afbfa =0;_afbfa < _beeb ;_afbfa ++{if _fadc ==_fed {_fddd =_bebc .Data [_gdbd ]<<_cfcde ;if _adcg {_fddd =_gbgb (_fddd ,_bebc .Data [_gdbd +1]>>_dccac ,_fbdc );};}else {_fddd =_bebc .Data [_gdbd ]>>_dccac ;};
_ebdde .Data [_gbdggf ]=_gbgb (_ebdde .Data [_gbdggf ],_fddd ,_baeg );_gbdggf +=_ebdde .RowStride ;_gdbd +=_bebc .RowStride ;};};if _gacge {for _afbfa =0;_afbfa < _beeb ;_afbfa ++{for _bgdgb =0;_bgdgb < _dec ;_bgdgb ++{_fddd =_gbgb (_bebc .Data [_dcec +_bgdgb ]<<_cfcde ,_bebc .Data [_dcec +_bgdgb +1]>>_dccac ,_fbdc );
_ebdde .Data [_gdae +_bgdgb ]=_fddd ;};_gdae +=_ebdde .RowStride ;_dcec +=_bebc .RowStride ;};};if _dded {for _afbfa =0;_afbfa < _beeb ;_afbfa ++{_fddd =_bebc .Data [_gdgd ]<<_cfcde ;if _gagf {_fddd =_gbgb (_fddd ,_bebc .Data [_gdgd +1]>>_dccac ,_fbdc );
};_ebdde .Data [_gdeb ]=_gbgb (_ebdde .Data [_gdeb ],_fddd ,_aggf );_gdeb +=_ebdde .RowStride ;_gdgd +=_bebc .RowStride ;};};case PixNotSrc :if _baede {for _afbfa =0;_afbfa < _beeb ;_afbfa ++{if _fadc ==_fed {_fddd =_bebc .Data [_gdbd ]<<_cfcde ;if _adcg {_fddd =_gbgb (_fddd ,_bebc .Data [_gdbd +1]>>_dccac ,_fbdc );
};}else {_fddd =_bebc .Data [_gdbd ]>>_dccac ;};_ebdde .Data [_gbdggf ]=_gbgb (_ebdde .Data [_gbdggf ],^_fddd ,_baeg );_gbdggf +=_ebdde .RowStride ;_gdbd +=_bebc .RowStride ;};};if _gacge {for _afbfa =0;_afbfa < _beeb ;_afbfa ++{for _bgdgb =0;_bgdgb < _dec ;
_bgdgb ++{_fddd =_gbgb (_bebc .Data [_dcec +_bgdgb ]<<_cfcde ,_bebc .Data [_dcec +_bgdgb +1]>>_dccac ,_fbdc );_ebdde .Data [_gdae +_bgdgb ]=^_fddd ;};_gdae +=_ebdde .RowStride ;_dcec +=_bebc .RowStride ;};};if _dded {for _afbfa =0;_afbfa < _beeb ;_afbfa ++{_fddd =_bebc .Data [_gdgd ]<<_cfcde ;
if _gagf {_fddd =_gbgb (_fddd ,_bebc .Data [_gdgd +1]>>_dccac ,_fbdc );};_ebdde .Data [_gdeb ]=_gbgb (_ebdde .Data [_gdeb ],^_fddd ,_aggf );_gdeb +=_ebdde .RowStride ;_gdgd +=_bebc .RowStride ;};};case PixSrcOrDst :if _baede {for _afbfa =0;_afbfa < _beeb ;
_afbfa ++{if _fadc ==_fed {_fddd =_bebc .Data [_gdbd ]<<_cfcde ;if _adcg {_fddd =_gbgb (_fddd ,_bebc .Data [_gdbd +1]>>_dccac ,_fbdc );};}else {_fddd =_bebc .Data [_gdbd ]>>_dccac ;};_ebdde .Data [_gbdggf ]=_gbgb (_ebdde .Data [_gbdggf ],_fddd |_ebdde .Data [_gbdggf ],_baeg );
_gbdggf +=_ebdde .RowStride ;_gdbd +=_bebc .RowStride ;};};if _gacge {for _afbfa =0;_afbfa < _beeb ;_afbfa ++{for _bgdgb =0;_bgdgb < _dec ;_bgdgb ++{_fddd =_gbgb (_bebc .Data [_dcec +_bgdgb ]<<_cfcde ,_bebc .Data [_dcec +_bgdgb +1]>>_dccac ,_fbdc );_ebdde .Data [_gdae +_bgdgb ]|=_fddd ;
};_gdae +=_ebdde .RowStride ;_dcec +=_bebc .RowStride ;};};if _dded {for _afbfa =0;_afbfa < _beeb ;_afbfa ++{_fddd =_bebc .Data [_gdgd ]<<_cfcde ;if _gagf {_fddd =_gbgb (_fddd ,_bebc .Data [_gdgd +1]>>_dccac ,_fbdc );};_ebdde .Data [_gdeb ]=_gbgb (_ebdde .Data [_gdeb ],_fddd |_ebdde .Data [_gdeb ],_aggf );
_gdeb +=_ebdde .RowStride ;_gdgd +=_bebc .RowStride ;};};case PixSrcAndDst :if _baede {for _afbfa =0;_afbfa < _beeb ;_afbfa ++{if _fadc ==_fed {_fddd =_bebc .Data [_gdbd ]<<_cfcde ;if _adcg {_fddd =_gbgb (_fddd ,_bebc .Data [_gdbd +1]>>_dccac ,_fbdc );
};}else {_fddd =_bebc .Data [_gdbd ]>>_dccac ;};_ebdde .Data [_gbdggf ]=_gbgb (_ebdde .Data [_gbdggf ],_fddd &_ebdde .Data [_gbdggf ],_baeg );_gbdggf +=_ebdde .RowStride ;_gdbd +=_bebc .RowStride ;};};if _gacge {for _afbfa =0;_afbfa < _beeb ;_afbfa ++{for _bgdgb =0;
_bgdgb < _dec ;_bgdgb ++{_fddd =_gbgb (_bebc .Data [_dcec +_bgdgb ]<<_cfcde ,_bebc .Data [_dcec +_bgdgb +1]>>_dccac ,_fbdc );_ebdde .Data [_gdae +_bgdgb ]&=_fddd ;};_gdae +=_ebdde .RowStride ;_dcec +=_bebc .RowStride ;};};if _dded {for _afbfa =0;_afbfa < _beeb ;
_afbfa ++{_fddd =_bebc .Data [_gdgd ]<<_cfcde ;if _gagf {_fddd =_gbgb (_fddd ,_bebc .Data [_gdgd +1]>>_dccac ,_fbdc );};_ebdde .Data [_gdeb ]=_gbgb (_ebdde .Data [_gdeb ],_fddd &_ebdde .Data [_gdeb ],_aggf );_gdeb +=_ebdde .RowStride ;_gdgd +=_bebc .RowStride ;
};};case PixSrcXorDst :if _baede {for _afbfa =0;_afbfa < _beeb ;_afbfa ++{if _fadc ==_fed {_fddd =_bebc .Data [_gdbd ]<<_cfcde ;if _adcg {_fddd =_gbgb (_fddd ,_bebc .Data [_gdbd +1]>>_dccac ,_fbdc );};}else {_fddd =_bebc .Data [_gdbd ]>>_dccac ;};_ebdde .Data [_gbdggf ]=_gbgb (_ebdde .Data [_gbdggf ],_fddd ^_ebdde .Data [_gbdggf ],_baeg );
_gbdggf +=_ebdde .RowStride ;_gdbd +=_bebc .RowStride ;};};if _gacge {for _afbfa =0;_afbfa < _beeb ;_afbfa ++{for _bgdgb =0;_bgdgb < _dec ;_bgdgb ++{_fddd =_gbgb (_bebc .Data [_dcec +_bgdgb ]<<_cfcde ,_bebc .Data [_dcec +_bgdgb +1]>>_dccac ,_fbdc );_ebdde .Data [_gdae +_bgdgb ]^=_fddd ;
};_gdae +=_ebdde .RowStride ;_dcec +=_bebc .RowStride ;};};if _dded {for _afbfa =0;_afbfa < _beeb ;_afbfa ++{_fddd =_bebc .Data [_gdgd ]<<_cfcde ;if _gagf {_fddd =_gbgb (_fddd ,_bebc .Data [_gdgd +1]>>_dccac ,_fbdc );};_ebdde .Data [_gdeb ]=_gbgb (_ebdde .Data [_gdeb ],_fddd ^_ebdde .Data [_gdeb ],_aggf );
_gdeb +=_ebdde .RowStride ;_gdgd +=_bebc .RowStride ;};};case PixNotSrcOrDst :if _baede {for _afbfa =0;_afbfa < _beeb ;_afbfa ++{if _fadc ==_fed {_fddd =_bebc .Data [_gdbd ]<<_cfcde ;if _adcg {_fddd =_gbgb (_fddd ,_bebc .Data [_gdbd +1]>>_dccac ,_fbdc );
};}else {_fddd =_bebc .Data [_gdbd ]>>_dccac ;};_ebdde .Data [_gbdggf ]=_gbgb (_ebdde .Data [_gbdggf ],^_fddd |_ebdde .Data [_gbdggf ],_baeg );_gbdggf +=_ebdde .RowStride ;_gdbd +=_bebc .RowStride ;};};if _gacge {for _afbfa =0;_afbfa < _beeb ;_afbfa ++{for _bgdgb =0;
_bgdgb < _dec ;_bgdgb ++{_fddd =_gbgb (_bebc .Data [_dcec +_bgdgb ]<<_cfcde ,_bebc .Data [_dcec +_bgdgb +1]>>_dccac ,_fbdc );_ebdde .Data [_gdae +_bgdgb ]|=^_fddd ;};_gdae +=_ebdde .RowStride ;_dcec +=_bebc .RowStride ;};};if _dded {for _afbfa =0;_afbfa < _beeb ;
_afbfa ++{_fddd =_bebc .Data [_gdgd ]<<_cfcde ;if _gagf {_fddd =_gbgb (_fddd ,_bebc .Data [_gdgd +1]>>_dccac ,_fbdc );};_ebdde .Data [_gdeb ]=_gbgb (_ebdde .Data [_gdeb ],^_fddd |_ebdde .Data [_gdeb ],_aggf );_gdeb +=_ebdde .RowStride ;_gdgd +=_bebc .RowStride ;
};};case PixNotSrcAndDst :if _baede {for _afbfa =0;_afbfa < _beeb ;_afbfa ++{if _fadc ==_fed {_fddd =_bebc .Data [_gdbd ]<<_cfcde ;if _adcg {_fddd =_gbgb (_fddd ,_bebc .Data [_gdbd +1]>>_dccac ,_fbdc );};}else {_fddd =_bebc .Data [_gdbd ]>>_dccac ;};_ebdde .Data [_gbdggf ]=_gbgb (_ebdde .Data [_gbdggf ],^_fddd &_ebdde .Data [_gbdggf ],_baeg );
_gbdggf +=_ebdde .RowStride ;_gdbd +=_bebc .RowStride ;};};if _gacge {for _afbfa =0;_afbfa < _beeb ;_afbfa ++{for _bgdgb =0;_bgdgb < _dec ;_bgdgb ++{_fddd =_gbgb (_bebc .Data [_dcec +_bgdgb ]<<_cfcde ,_bebc .Data [_dcec +_bgdgb +1]>>_dccac ,_fbdc );_ebdde .Data [_gdae +_bgdgb ]&=^_fddd ;
};_gdae +=_ebdde .RowStride ;_dcec +=_bebc .RowStride ;};};if _dded {for _afbfa =0;_afbfa < _beeb ;_afbfa ++{_fddd =_bebc .Data [_gdgd ]<<_cfcde ;if _gagf {_fddd =_gbgb (_fddd ,_bebc .Data [_gdgd +1]>>_dccac ,_fbdc );};_ebdde .Data [_gdeb ]=_gbgb (_ebdde .Data [_gdeb ],^_fddd &_ebdde .Data [_gdeb ],_aggf );
_gdeb +=_ebdde .RowStride ;_gdgd +=_bebc .RowStride ;};};case PixSrcOrNotDst :if _baede {for _afbfa =0;_afbfa < _beeb ;_afbfa ++{if _fadc ==_fed {_fddd =_bebc .Data [_gdbd ]<<_cfcde ;if _adcg {_fddd =_gbgb (_fddd ,_bebc .Data [_gdbd +1]>>_dccac ,_fbdc );
};}else {_fddd =_bebc .Data [_gdbd ]>>_dccac ;};_ebdde .Data [_gbdggf ]=_gbgb (_ebdde .Data [_gbdggf ],_fddd |^_ebdde .Data [_gbdggf ],_baeg );_gbdggf +=_ebdde .RowStride ;_gdbd +=_bebc .RowStride ;};};if _gacge {for _afbfa =0;_afbfa < _beeb ;_afbfa ++{for _bgdgb =0;
_bgdgb < _dec ;_bgdgb ++{_fddd =_gbgb (_bebc .Data [_dcec +_bgdgb ]<<_cfcde ,_bebc .Data [_dcec +_bgdgb +1]>>_dccac ,_fbdc );_ebdde .Data [_gdae +_bgdgb ]=_fddd |^_ebdde .Data [_gdae +_bgdgb ];};_gdae +=_ebdde .RowStride ;_dcec +=_bebc .RowStride ;};};
if _dded {for _afbfa =0;_afbfa < _beeb ;_afbfa ++{_fddd =_bebc .Data [_gdgd ]<<_cfcde ;if _gagf {_fddd =_gbgb (_fddd ,_bebc .Data [_gdgd +1]>>_dccac ,_fbdc );};_ebdde .Data [_gdeb ]=_gbgb (_ebdde .Data [_gdeb ],_fddd |^_ebdde .Data [_gdeb ],_aggf );_gdeb +=_ebdde .RowStride ;
_gdgd +=_bebc .RowStride ;};};case PixSrcAndNotDst :if _baede {for _afbfa =0;_afbfa < _beeb ;_afbfa ++{if _fadc ==_fed {_fddd =_bebc .Data [_gdbd ]<<_cfcde ;if _adcg {_fddd =_gbgb (_fddd ,_bebc .Data [_gdbd +1]>>_dccac ,_fbdc );};}else {_fddd =_bebc .Data [_gdbd ]>>_dccac ;
};_ebdde .Data [_gbdggf ]=_gbgb (_ebdde .Data [_gbdggf ],_fddd &^_ebdde .Data [_gbdggf ],_baeg );_gbdggf +=_ebdde .RowStride ;_gdbd +=_bebc .RowStride ;};};if _gacge {for _afbfa =0;_afbfa < _beeb ;_afbfa ++{for _bgdgb =0;_bgdgb < _dec ;_bgdgb ++{_fddd =_gbgb (_bebc .Data [_dcec +_bgdgb ]<<_cfcde ,_bebc .Data [_dcec +_bgdgb +1]>>_dccac ,_fbdc );
_ebdde .Data [_gdae +_bgdgb ]=_fddd &^_ebdde .Data [_gdae +_bgdgb ];};_gdae +=_ebdde .RowStride ;_dcec +=_bebc .RowStride ;};};if _dded {for _afbfa =0;_afbfa < _beeb ;_afbfa ++{_fddd =_bebc .Data [_gdgd ]<<_cfcde ;if _gagf {_fddd =_gbgb (_fddd ,_bebc .Data [_gdgd +1]>>_dccac ,_fbdc );
};_ebdde .Data [_gdeb ]=_gbgb (_ebdde .Data [_gdeb ],_fddd &^_ebdde .Data [_gdeb ],_aggf );_gdeb +=_ebdde .RowStride ;_gdgd +=_bebc .RowStride ;};};case PixNotPixSrcOrDst :if _baede {for _afbfa =0;_afbfa < _beeb ;_afbfa ++{if _fadc ==_fed {_fddd =_bebc .Data [_gdbd ]<<_cfcde ;
if _adcg {_fddd =_gbgb (_fddd ,_bebc .Data [_gdbd +1]>>_dccac ,_fbdc );};}else {_fddd =_bebc .Data [_gdbd ]>>_dccac ;};_ebdde .Data [_gbdggf ]=_gbgb (_ebdde .Data [_gbdggf ],^(_fddd |_ebdde .Data [_gbdggf ]),_baeg );_gbdggf +=_ebdde .RowStride ;_gdbd +=_bebc .RowStride ;
};};if _gacge {for _afbfa =0;_afbfa < _beeb ;_afbfa ++{for _bgdgb =0;_bgdgb < _dec ;_bgdgb ++{_fddd =_gbgb (_bebc .Data [_dcec +_bgdgb ]<<_cfcde ,_bebc .Data [_dcec +_bgdgb +1]>>_dccac ,_fbdc );_ebdde .Data [_gdae +_bgdgb ]=^(_fddd |_ebdde .Data [_gdae +_bgdgb ]);
};_gdae +=_ebdde .RowStride ;_dcec +=_bebc .RowStride ;};};if _dded {for _afbfa =0;_afbfa < _beeb ;_afbfa ++{_fddd =_bebc .Data [_gdgd ]<<_cfcde ;if _gagf {_fddd =_gbgb (_fddd ,_bebc .Data [_gdgd +1]>>_dccac ,_fbdc );};_ebdde .Data [_gdeb ]=_gbgb (_ebdde .Data [_gdeb ],^(_fddd |_ebdde .Data [_gdeb ]),_aggf );
_gdeb +=_ebdde .RowStride ;_gdgd +=_bebc .RowStride ;};};case PixNotPixSrcAndDst :if _baede {for _afbfa =0;_afbfa < _beeb ;_afbfa ++{if _fadc ==_fed {_fddd =_bebc .Data [_gdbd ]<<_cfcde ;if _adcg {_fddd =_gbgb (_fddd ,_bebc .Data [_gdbd +1]>>_dccac ,_fbdc );
};}else {_fddd =_bebc .Data [_gdbd ]>>_dccac ;};_ebdde .Data [_gbdggf ]=_gbgb (_ebdde .Data [_gbdggf ],^(_fddd &_ebdde .Data [_gbdggf ]),_baeg );_gbdggf +=_ebdde .RowStride ;_gdbd +=_bebc .RowStride ;};};if _gacge {for _afbfa =0;_afbfa < _beeb ;_afbfa ++{for _bgdgb =0;
_bgdgb < _dec ;_bgdgb ++{_fddd =_gbgb (_bebc .Data [_dcec +_bgdgb ]<<_cfcde ,_bebc .Data [_dcec +_bgdgb +1]>>_dccac ,_fbdc );_ebdde .Data [_gdae +_bgdgb ]=^(_fddd &_ebdde .Data [_gdae +_bgdgb ]);};_gdae +=_ebdde .RowStride ;_dcec +=_bebc .RowStride ;};
};if _dded {for _afbfa =0;_afbfa < _beeb ;_afbfa ++{_fddd =_bebc .Data [_gdgd ]<<_cfcde ;if _gagf {_fddd =_gbgb (_fddd ,_bebc .Data [_gdgd +1]>>_dccac ,_fbdc );};_ebdde .Data [_gdeb ]=_gbgb (_ebdde .Data [_gdeb ],^(_fddd &_ebdde .Data [_gdeb ]),_aggf );
_gdeb +=_ebdde .RowStride ;_gdgd +=_bebc .RowStride ;};};case PixNotPixSrcXorDst :if _baede {for _afbfa =0;_afbfa < _beeb ;_afbfa ++{if _fadc ==_fed {_fddd =_bebc .Data [_gdbd ]<<_cfcde ;if _adcg {_fddd =_gbgb (_fddd ,_bebc .Data [_gdbd +1]>>_dccac ,_fbdc );
};}else {_fddd =_bebc .Data [_gdbd ]>>_dccac ;};_ebdde .Data [_gbdggf ]=_gbgb (_ebdde .Data [_gbdggf ],^(_fddd ^_ebdde .Data [_gbdggf ]),_baeg );_gbdggf +=_ebdde .RowStride ;_gdbd +=_bebc .RowStride ;};};if _gacge {for _afbfa =0;_afbfa < _beeb ;_afbfa ++{for _bgdgb =0;
_bgdgb < _dec ;_bgdgb ++{_fddd =_gbgb (_bebc .Data [_dcec +_bgdgb ]<<_cfcde ,_bebc .Data [_dcec +_bgdgb +1]>>_dccac ,_fbdc );_ebdde .Data [_gdae +_bgdgb ]=^(_fddd ^_ebdde .Data [_gdae +_bgdgb ]);};_gdae +=_ebdde .RowStride ;_dcec +=_bebc .RowStride ;};
};if _dded {for _afbfa =0;_afbfa < _beeb ;_afbfa ++{_fddd =_bebc .Data [_gdgd ]<<_cfcde ;if _gagf {_fddd =_gbgb (_fddd ,_bebc .Data [_gdgd +1]>>_dccac ,_fbdc );};_ebdde .Data [_gdeb ]=_gbgb (_ebdde .Data [_gdeb ],^(_fddd ^_ebdde .Data [_gdeb ]),_aggf );
_gdeb +=_ebdde .RowStride ;_gdgd +=_bebc .RowStride ;};};default:_dc .Log .Debug ("\u004f\u0070e\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0074\u0020\u0070\u0065\u0072\u006d\u0069tt\u0065\u0064",_ggfa );
return _eg .Error ("\u0072a\u0073t\u0065\u0072\u004f\u0070\u0047e\u006e\u0065r\u0061\u006c\u004c\u006f\u0077","\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065r\u0061\u0074\u0069\u006f\u006e\u0020\u006eo\u0074\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074\u0065\u0064");
};return nil ;};func NewWithUnpaddedData (width ,height int ,data []byte )(*Bitmap ,error ){const _gfdg ="\u004e\u0065\u0077\u0057it\u0068\u0055\u006e\u0070\u0061\u0064\u0064\u0065\u0064\u0044\u0061\u0074\u0061";_gce :=_gdfb (width ,height );_gce .Data =data ;
if _eaga :=((width *height )+7)>>3;len (data )< _eaga {return nil ,_eg .Errorf (_gfdg ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064a\u0074\u0061\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u003a\u0020\u0027\u0025\u0064\u0027\u002e\u0020\u0054\u0068\u0065\u0020\u0064\u0061t\u0061\u0020s\u0068\u006fu\u006c\u0064\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 l\u0065\u0061\u0073\u0074\u003a\u0020\u0027\u0025\u0064'\u0020\u0062\u0079\u0074\u0065\u0073",len (data ),_eaga );
};if _afc :=_gce .addPadBits ();_afc !=nil {return nil ,_eg .Wrap (_afc ,_gfdg ,"");};return _gce ,nil ;};func (_geeee *byWidth )Swap (i ,j int ){_geeee .Values [i ],_geeee .Values [j ]=_geeee .Values [j ],_geeee .Values [i ];if _geeee .Boxes !=nil {_geeee .Boxes [i ],_geeee .Boxes [j ]=_geeee .Boxes [j ],_geeee .Boxes [i ];
};};func TstImageBitmapInverseData ()[]byte {_ggcfb :=_faga .Copy ();_ggcfb .InverseData ();return _ggcfb .Data ;};func _fged (_daac ,_bgbe *Bitmap ,_bdab ,_gdcd int )(_fecde error ){const _ddfc ="\u0073e\u0065d\u0066\u0069\u006c\u006c\u0042i\u006e\u0061r\u0079\u004c\u006f\u0077\u0034";
var (_bcedf ,_dddg ,_cefc ,_fbcbc int ;_bfee ,_ebad ,_bdabc ,_egadb ,_acgcg ,_cded ,_edgc byte ;);for _bcedf =0;_bcedf < _bdab ;_bcedf ++{_cefc =_bcedf *_daac .RowStride ;_fbcbc =_bcedf *_bgbe .RowStride ;for _dddg =0;_dddg < _gdcd ;_dddg ++{_bfee ,_fecde =_daac .GetByte (_cefc +_dddg );
if _fecde !=nil {return _eg .Wrap (_fecde ,_ddfc ,"\u0066i\u0072\u0073\u0074\u0020\u0067\u0065t");};_ebad ,_fecde =_bgbe .GetByte (_fbcbc +_dddg );if _fecde !=nil {return _eg .Wrap (_fecde ,_ddfc ,"\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0067\u0065\u0074");
};if _bcedf > 0{_bdabc ,_fecde =_daac .GetByte (_cefc -_daac .RowStride +_dddg );if _fecde !=nil {return _eg .Wrap (_fecde ,_ddfc ,"\u0069\u0020\u003e \u0030");};_bfee |=_bdabc ;};if _dddg > 0{_egadb ,_fecde =_daac .GetByte (_cefc +_dddg -1);if _fecde !=nil {return _eg .Wrap (_fecde ,_ddfc ,"\u006a\u0020\u003e \u0030");
};_bfee |=_egadb <<7;};_bfee &=_ebad ;if _bfee ==0||(^_bfee )==0{if _fecde =_daac .SetByte (_cefc +_dddg ,_bfee );_fecde !=nil {return _eg .Wrap (_fecde ,_ddfc ,"b\u0074\u0020\u003d\u003d 0\u0020|\u007c\u0020\u0028\u005e\u0062t\u0029\u0020\u003d\u003d\u0020\u0030");
};continue ;};for {_edgc =_bfee ;_bfee =(_bfee |(_bfee >>1)|(_bfee <<1))&_ebad ;if (_bfee ^_edgc )==0{if _fecde =_daac .SetByte (_cefc +_dddg ,_bfee );_fecde !=nil {return _eg .Wrap (_fecde ,_ddfc ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0070\u0072\u0065\u0076 \u0062\u0079\u0074\u0065");
};break ;};};};};for _bcedf =_bdab -1;_bcedf >=0;_bcedf --{_cefc =_bcedf *_daac .RowStride ;_fbcbc =_bcedf *_bgbe .RowStride ;for _dddg =_gdcd -1;_dddg >=0;_dddg --{if _bfee ,_fecde =_daac .GetByte (_cefc +_dddg );_fecde !=nil {return _eg .Wrap (_fecde ,_ddfc ,"\u0072\u0065\u0076\u0065\u0072\u0073\u0065\u0020\u0066\u0069\u0072\u0073t\u0020\u0067\u0065\u0074");
};if _ebad ,_fecde =_bgbe .GetByte (_fbcbc +_dddg );_fecde !=nil {return _eg .Wrap (_fecde ,_ddfc ,"r\u0065\u0076\u0065\u0072se\u0020g\u0065\u0074\u0020\u006d\u0061s\u006b\u0020\u0062\u0079\u0074\u0065");};if _bcedf < _bdab -1{if _acgcg ,_fecde =_daac .GetByte (_cefc +_daac .RowStride +_dddg );
_fecde !=nil {return _eg .Wrap (_fecde ,_ddfc ,"\u0072\u0065v\u0065\u0072\u0073e\u0020\u0069\u0020\u003c\u0020\u0068\u0020\u002d\u0031");};_bfee |=_acgcg ;};if _dddg < _gdcd -1{if _cded ,_fecde =_daac .GetByte (_cefc +_dddg +1);_fecde !=nil {return _eg .Wrap (_fecde ,_ddfc ,"\u0072\u0065\u0076\u0065rs\u0065\u0020\u006a\u0020\u003c\u0020\u0077\u0070\u006c\u0020\u002d\u0020\u0031");
};_bfee |=_cded >>7;};_bfee &=_ebad ;if _bfee ==0||(^_bfee )==0{if _fecde =_daac .SetByte (_cefc +_dddg ,_bfee );_fecde !=nil {return _eg .Wrap (_fecde ,_ddfc ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006d\u0061\u0073k\u0065\u0064\u0020\u0062\u0079\u0074\u0065\u0020\u0066\u0061i\u006c\u0065\u0064");
};continue ;};for {_edgc =_bfee ;_bfee =(_bfee |(_bfee >>1)|(_bfee <<1))&_ebad ;if (_bfee ^_edgc )==0{if _fecde =_daac .SetByte (_cefc +_dddg ,_bfee );_fecde !=nil {return _eg .Wrap (_fecde ,_ddfc ,"\u0072e\u0076\u0065\u0072\u0073e\u0020\u0073\u0065\u0074\u0074i\u006eg\u0020p\u0072\u0065\u0076\u0020\u0062\u0079\u0074e");
};break ;};};};};return nil ;};func (_aeba *Bitmaps )selectByIndexes (_cbgfc []int )(*Bitmaps ,error ){_ecad :=&Bitmaps {};for _ ,_ddcd :=range _cbgfc {_cbff ,_gfag :=_aeba .GetBitmap (_ddcd );if _gfag !=nil {return nil ,_eg .Wrap (_gfag ,"\u0073e\u006ce\u0063\u0074\u0042\u0079\u0049\u006e\u0064\u0065\u0078\u0065\u0073","");
};_ecad .AddBitmap (_cbff );};return _ecad ,nil ;};func New (width ,height int )*Bitmap {_efba :=_gdfb (width ,height );_efba .Data =make ([]byte ,height *_efba .RowStride );return _efba ;};func Rect (x ,y ,w ,h int )(*_dg .Rectangle ,error ){const _agb ="b\u0069\u0074\u006d\u0061\u0070\u002e\u0052\u0065\u0063\u0074";
if x < 0{w +=x ;x =0;if w <=0{return nil ,_eg .Errorf (_agb ,"x\u003a\u0027\u0025\u0064\u0027\u0020<\u0020\u0030\u0020\u0061\u006e\u0064\u0020\u0077\u003a \u0027\u0025\u0064'\u0020<\u003d\u0020\u0030",x ,w );};};if y < 0{h +=y ;y =0;if h <=0{return nil ,_eg .Error (_agb ,"\u0079\u0020\u003c 0\u0020\u0061\u006e\u0064\u0020\u0062\u006f\u0078\u0020\u006f\u0066\u0066\u0020\u002b\u0071\u0075\u0061\u0064");
};};_acgb :=_dg .Rect (x ,y ,x +w ,y +h );return &_acgb ,nil ;};func _bbcc (_ccbc *Bitmap ,_bgea *Bitmap ,_daee *Selection ,_agad **Bitmap )(*Bitmap ,error ){const _dfef ="\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u004d\u006f\u0072\u0070\u0068A\u0072\u0067\u0073\u0031";
if _bgea ==nil {return nil ,_eg .Error (_dfef ,"\u004d\u006f\u0072\u0070\u0068\u0041\u0072\u0067\u0073\u0031\u0020'\u0073\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066i\u006e\u0065\u0064");};if _daee ==nil {return nil ,_eg .Error (_dfef ,"\u004d\u006f\u0072\u0068p\u0041\u0072\u0067\u0073\u0031\u0020\u0027\u0073\u0065\u006c'\u0020n\u006f\u0074\u0020\u0064\u0065\u0066\u0069n\u0065\u0064");
};_caac ,_afde :=_daee .Height ,_daee .Width ;if _caac ==0||_afde ==0{return nil ,_eg .Error (_dfef ,"\u0073\u0065\u006c\u0065ct\u0069\u006f\u006e\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u0020\u0030");};if _ccbc ==nil {_ccbc =_bgea .createTemplate ();
*_agad =_bgea ;return _ccbc ,nil ;};_ccbc .Width =_bgea .Width ;_ccbc .Height =_bgea .Height ;_ccbc .RowStride =_bgea .RowStride ;_ccbc .Color =_bgea .Color ;_ccbc .Data =make ([]byte ,_bgea .RowStride *_bgea .Height );if _ccbc ==_bgea {*_agad =_bgea .Copy ();
}else {*_agad =_bgea ;};return _ccbc ,nil ;};func TstCSymbol (t *_g .T )*Bitmap {t .Helper ();_gdgb :=New (6,6);_a .NoError (t ,_gdgb .SetPixel (1,0,1));_a .NoError (t ,_gdgb .SetPixel (2,0,1));_a .NoError (t ,_gdgb .SetPixel (3,0,1));_a .NoError (t ,_gdgb .SetPixel (4,0,1));
_a .NoError (t ,_gdgb .SetPixel (0,1,1));_a .NoError (t ,_gdgb .SetPixel (5,1,1));_a .NoError (t ,_gdgb .SetPixel (0,2,1));_a .NoError (t ,_gdgb .SetPixel (0,3,1));_a .NoError (t ,_gdgb .SetPixel (0,4,1));_a .NoError (t ,_gdgb .SetPixel (5,4,1));_a .NoError (t ,_gdgb .SetPixel (1,5,1));
_a .NoError (t ,_gdgb .SetPixel (2,5,1));_a .NoError (t ,_gdgb .SetPixel (3,5,1));_a .NoError (t ,_gdgb .SetPixel (4,5,1));return _gdgb ;};func (_acgc *Bitmap )ConnComponents (bms *Bitmaps ,connectivity int )(_ffdg *Boxes ,_gdfe error ){const _cfba ="B\u0069\u0074\u006d\u0061p.\u0043o\u006e\u006e\u0043\u006f\u006dp\u006f\u006e\u0065\u006e\u0074\u0073";
if _acgc ==nil {return nil ,_eg .Error (_cfba ,"\u0070r\u006f\u0076\u0069\u0064e\u0064\u0020\u0065\u006d\u0070t\u0079 \u0027b\u0027\u0020\u0062\u0069\u0074\u006d\u0061p");};if connectivity !=4&&connectivity !=8{return nil ,_eg .Error (_cfba ,"\u0063\u006f\u006ene\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u006e\u006f\u0074\u0020\u0034\u0020\u006f\u0072\u0020\u0038");
};if bms ==nil {if _ffdg ,_gdfe =_acgc .connComponentsBB (connectivity );_gdfe !=nil {return nil ,_eg .Wrap (_gdfe ,_cfba ,"");};}else {if _ffdg ,_gdfe =_acgc .connComponentsBitmapsBB (bms ,connectivity );_gdfe !=nil {return nil ,_eg .Wrap (_gdfe ,_cfba ,"");
};};return _ffdg ,nil ;};func _geba (_bgca *Bitmap ,_gcgb ,_gdag ,_eceb ,_ecba int ,_gfcf RasterOperator ,_ddce *Bitmap ,_gbaa ,_fggf int )error {var (_babga byte ;_fbfd int ;_dfbgg int ;_ada ,_cgg int ;_fdff ,_fcgfd int ;);_ecfd :=_eceb >>3;_baab :=_eceb &7;
if _baab > 0{_babga =_ddgeb [_baab ];};_fbfd =_ddce .RowStride *_fggf +(_gbaa >>3);_dfbgg =_bgca .RowStride *_gdag +(_gcgb >>3);switch _gfcf {case PixSrc :for _fdff =0;_fdff < _ecba ;_fdff ++{_ada =_fbfd +_fdff *_ddce .RowStride ;_cgg =_dfbgg +_fdff *_bgca .RowStride ;
for _fcgfd =0;_fcgfd < _ecfd ;_fcgfd ++{_bgca .Data [_cgg ]=_ddce .Data [_ada ];_cgg ++;_ada ++;};if _baab > 0{_bgca .Data [_cgg ]=_gbgb (_bgca .Data [_cgg ],_ddce .Data [_ada ],_babga );};};case PixNotSrc :for _fdff =0;_fdff < _ecba ;_fdff ++{_ada =_fbfd +_fdff *_ddce .RowStride ;
_cgg =_dfbgg +_fdff *_bgca .RowStride ;for _fcgfd =0;_fcgfd < _ecfd ;_fcgfd ++{_bgca .Data [_cgg ]=^(_ddce .Data [_ada ]);_cgg ++;_ada ++;};if _baab > 0{_bgca .Data [_cgg ]=_gbgb (_bgca .Data [_cgg ],^_ddce .Data [_ada ],_babga );};};case PixSrcOrDst :for _fdff =0;
_fdff < _ecba ;_fdff ++{_ada =_fbfd +_fdff *_ddce .RowStride ;_cgg =_dfbgg +_fdff *_bgca .RowStride ;for _fcgfd =0;_fcgfd < _ecfd ;_fcgfd ++{_bgca .Data [_cgg ]|=_ddce .Data [_ada ];_cgg ++;_ada ++;};if _baab > 0{_bgca .Data [_cgg ]=_gbgb (_bgca .Data [_cgg ],_ddce .Data [_ada ]|_bgca .Data [_cgg ],_babga );
};};case PixSrcAndDst :for _fdff =0;_fdff < _ecba ;_fdff ++{_ada =_fbfd +_fdff *_ddce .RowStride ;_cgg =_dfbgg +_fdff *_bgca .RowStride ;for _fcgfd =0;_fcgfd < _ecfd ;_fcgfd ++{_bgca .Data [_cgg ]&=_ddce .Data [_ada ];_cgg ++;_ada ++;};if _baab > 0{_bgca .Data [_cgg ]=_gbgb (_bgca .Data [_cgg ],_ddce .Data [_ada ]&_bgca .Data [_cgg ],_babga );
};};case PixSrcXorDst :for _fdff =0;_fdff < _ecba ;_fdff ++{_ada =_fbfd +_fdff *_ddce .RowStride ;_cgg =_dfbgg +_fdff *_bgca .RowStride ;for _fcgfd =0;_fcgfd < _ecfd ;_fcgfd ++{_bgca .Data [_cgg ]^=_ddce .Data [_ada ];_cgg ++;_ada ++;};if _baab > 0{_bgca .Data [_cgg ]=_gbgb (_bgca .Data [_cgg ],_ddce .Data [_ada ]^_bgca .Data [_cgg ],_babga );
};};case PixNotSrcOrDst :for _fdff =0;_fdff < _ecba ;_fdff ++{_ada =_fbfd +_fdff *_ddce .RowStride ;_cgg =_dfbgg +_fdff *_bgca .RowStride ;for _fcgfd =0;_fcgfd < _ecfd ;_fcgfd ++{_bgca .Data [_cgg ]|=^(_ddce .Data [_ada ]);_cgg ++;_ada ++;};if _baab > 0{_bgca .Data [_cgg ]=_gbgb (_bgca .Data [_cgg ],^(_ddce .Data [_ada ])|_bgca .Data [_cgg ],_babga );
};};case PixNotSrcAndDst :for _fdff =0;_fdff < _ecba ;_fdff ++{_ada =_fbfd +_fdff *_ddce .RowStride ;_cgg =_dfbgg +_fdff *_bgca .RowStride ;for _fcgfd =0;_fcgfd < _ecfd ;_fcgfd ++{_bgca .Data [_cgg ]&=^(_ddce .Data [_ada ]);_cgg ++;_ada ++;};if _baab > 0{_bgca .Data [_cgg ]=_gbgb (_bgca .Data [_cgg ],^(_ddce .Data [_ada ])&_bgca .Data [_cgg ],_babga );
};};case PixSrcOrNotDst :for _fdff =0;_fdff < _ecba ;_fdff ++{_ada =_fbfd +_fdff *_ddce .RowStride ;_cgg =_dfbgg +_fdff *_bgca .RowStride ;for _fcgfd =0;_fcgfd < _ecfd ;_fcgfd ++{_bgca .Data [_cgg ]=_ddce .Data [_ada ]|^(_bgca .Data [_cgg ]);_cgg ++;_ada ++;
};if _baab > 0{_bgca .Data [_cgg ]=_gbgb (_bgca .Data [_cgg ],_ddce .Data [_ada ]|^(_bgca .Data [_cgg ]),_babga );};};case PixSrcAndNotDst :for _fdff =0;_fdff < _ecba ;_fdff ++{_ada =_fbfd +_fdff *_ddce .RowStride ;_cgg =_dfbgg +_fdff *_bgca .RowStride ;
for _fcgfd =0;_fcgfd < _ecfd ;_fcgfd ++{_bgca .Data [_cgg ]=_ddce .Data [_ada ]&^(_bgca .Data [_cgg ]);_cgg ++;_ada ++;};if _baab > 0{_bgca .Data [_cgg ]=_gbgb (_bgca .Data [_cgg ],_ddce .Data [_ada ]&^(_bgca .Data [_cgg ]),_babga );};};case PixNotPixSrcOrDst :for _fdff =0;
_fdff < _ecba ;_fdff ++{_ada =_fbfd +_fdff *_ddce .RowStride ;_cgg =_dfbgg +_fdff *_bgca .RowStride ;for _fcgfd =0;_fcgfd < _ecfd ;_fcgfd ++{_bgca .Data [_cgg ]=^(_ddce .Data [_ada ]|_bgca .Data [_cgg ]);_cgg ++;_ada ++;};if _baab > 0{_bgca .Data [_cgg ]=_gbgb (_bgca .Data [_cgg ],^(_ddce .Data [_ada ]|_bgca .Data [_cgg ]),_babga );
};};case PixNotPixSrcAndDst :for _fdff =0;_fdff < _ecba ;_fdff ++{_ada =_fbfd +_fdff *_ddce .RowStride ;_cgg =_dfbgg +_fdff *_bgca .RowStride ;for _fcgfd =0;_fcgfd < _ecfd ;_fcgfd ++{_bgca .Data [_cgg ]=^(_ddce .Data [_ada ]&_bgca .Data [_cgg ]);_cgg ++;
_ada ++;};if _baab > 0{_bgca .Data [_cgg ]=_gbgb (_bgca .Data [_cgg ],^(_ddce .Data [_ada ]&_bgca .Data [_cgg ]),_babga );};};case PixNotPixSrcXorDst :for _fdff =0;_fdff < _ecba ;_fdff ++{_ada =_fbfd +_fdff *_ddce .RowStride ;_cgg =_dfbgg +_fdff *_bgca .RowStride ;
for _fcgfd =0;_fcgfd < _ecfd ;_fcgfd ++{_bgca .Data [_cgg ]=^(_ddce .Data [_ada ]^_bgca .Data [_cgg ]);_cgg ++;_ada ++;};if _baab > 0{_bgca .Data [_cgg ]=_gbgb (_bgca .Data [_cgg ],^(_ddce .Data [_ada ]^_bgca .Data [_cgg ]),_babga );};};default:_dc .Log .Debug ("\u0050\u0072ov\u0069\u0064\u0065d\u0020\u0069\u006e\u0076ali\u0064 r\u0061\u0073\u0074\u0065\u0072\u0020\u006fpe\u0072\u0061\u0074\u006f\u0072\u003a\u0020%\u0076",_gfcf );
return _eg .Error ("\u0072\u0061\u0073\u0074er\u004f\u0070\u0042\u0079\u0074\u0065\u0041\u006c\u0069\u0067\u006e\u0065\u0064\u004co\u0077","\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");
};return nil ;};func (_deed *Bitmaps )selectByIndicator (_fgcd *_b .NumSlice )(_baadd *Bitmaps ,_cdgd error ){const _bacg ="\u0042i\u0074\u006d\u0061\u0070s\u002e\u0073\u0065\u006c\u0065c\u0074B\u0079I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";if _deed ==nil {return nil ,_eg .Error (_bacg ,"\u0027\u0062\u0027 b\u0069\u0074\u006d\u0061\u0070\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if _fgcd ==nil {return nil ,_eg .Error (_bacg ,"'\u006e\u0061\u0027\u0020\u0069\u006ed\u0069\u0063\u0061\u0074\u006f\u0072\u0073\u0020\u006eo\u0074\u0020\u0064e\u0066i\u006e\u0065\u0064");};if len (_deed .Values )==0{return _deed ,nil ;};if len (*_fgcd )!=len (_deed .Values ){return nil ,_eg .Errorf (_bacg ,"\u006ea\u0020\u006ce\u006e\u0067\u0074\u0068:\u0020\u0025\u0064,\u0020\u0069\u0073\u0020\u0064\u0069\u0066\u0066\u0065re\u006e\u0074\u0020t\u0068\u0061n\u0020\u0062\u0069\u0074\u006d\u0061p\u0073\u003a \u0025\u0064",len (*_fgcd ),len (_deed .Values ));
};var _gfea ,_ebeeg ,_edae int ;for _ebeeg =0;_ebeeg < len (*_fgcd );_ebeeg ++{if _gfea ,_cdgd =_fgcd .GetInt (_ebeeg );_cdgd !=nil {return nil ,_eg .Wrap (_cdgd ,_bacg ,"f\u0069\u0072\u0073\u0074\u0020\u0063\u0068\u0065\u0063\u006b");};if _gfea ==1{_edae ++;
};};if _edae ==len (_deed .Values ){return _deed ,nil ;};_baadd =&Bitmaps {};_cccd :=len (_deed .Values )==len (_deed .Boxes );for _ebeeg =0;_ebeeg < len (*_fgcd );_ebeeg ++{if _gfea =int ((*_fgcd )[_ebeeg ]);_gfea ==0{continue ;};_baadd .Values =append (_baadd .Values ,_deed .Values [_ebeeg ]);
if _cccd {_baadd .Boxes =append (_baadd .Boxes ,_deed .Boxes [_ebeeg ]);};};return _baadd ,nil ;};func _aegff (_abffa ,_bgfbb ,_bceg *Bitmap ,_gedf int )(*Bitmap ,error ){const _dcfc ="\u0073\u0065\u0065\u0064\u0046\u0069\u006c\u006c\u0042i\u006e\u0061\u0072\u0079";
if _bgfbb ==nil {return nil ,_eg .Error (_dcfc ,"s\u006fu\u0072\u0063\u0065\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");};if _bceg ==nil {return nil ,_eg .Error (_dcfc ,"'\u006da\u0073\u006b\u0027\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");
};if _gedf !=4&&_gedf !=8{return nil ,_eg .Error (_dcfc ,"\u0063\u006f\u006en\u0065\u0063\u0074\u0069v\u0069\u0074\u0079\u0020\u006e\u006f\u0074 \u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0034\u002c\u0038\u007d");};var _eefbg error ;
_abffa ,_eefbg =_cecd (_abffa ,_bgfbb );if _eefbg !=nil {return nil ,_eg .Wrap (_eefbg ,_dcfc ,"\u0063o\u0070y\u0020\u0073\u006f\u0075\u0072c\u0065\u0020t\u006f\u0020\u0027\u0064\u0027");};_fcgg :=_bgfbb .createTemplate ();_bceg .setPadBits (0);for _gfcgg :=0;
_gfcgg < _efbfg ;_gfcgg ++{_fcgg ,_eefbg =_cecd (_fcgg ,_abffa );if _eefbg !=nil {return nil ,_eg .Wrapf (_eefbg ,_dcfc ,"\u0069\u0074\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064",_gfcgg );};if _eefbg =_ggg (_abffa ,_bceg ,_gedf );
_eefbg !=nil {return nil ,_eg .Wrapf (_eefbg ,_dcfc ,"\u0069\u0074\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064",_gfcgg );};if _fcgg .Equals (_abffa ){break ;};};return _abffa ,nil ;};func _egca (_cga *Bitmap ,_ddbd ,_fadeg int ,_aaf ,_fdde int ,_cbag RasterOperator ,_dcdd *Bitmap ,_ebdf ,_edbac int )error {var _dfcd ,_ffcb ,_feb ,_cddf int ;
if _ddbd < 0{_ebdf -=_ddbd ;_aaf +=_ddbd ;_ddbd =0;};if _ebdf < 0{_ddbd -=_ebdf ;_aaf +=_ebdf ;_ebdf =0;};_dfcd =_ddbd +_aaf -_cga .Width ;if _dfcd > 0{_aaf -=_dfcd ;};_ffcb =_ebdf +_aaf -_dcdd .Width ;if _ffcb > 0{_aaf -=_ffcb ;};if _fadeg < 0{_edbac -=_fadeg ;
_fdde +=_fadeg ;_fadeg =0;};if _edbac < 0{_fadeg -=_edbac ;_fdde +=_edbac ;_edbac =0;};_feb =_fadeg +_fdde -_cga .Height ;if _feb > 0{_fdde -=_feb ;};_cddf =_edbac +_fdde -_dcdd .Height ;if _cddf > 0{_fdde -=_cddf ;};if _aaf <=0||_fdde <=0{return nil ;
};var _fdeg error ;switch {case _ddbd &7==0&&_ebdf &7==0:_fdeg =_geba (_cga ,_ddbd ,_fadeg ,_aaf ,_fdde ,_cbag ,_dcdd ,_ebdf ,_edbac );case _ddbd &7==_ebdf &7:_fdeg =_ggad (_cga ,_ddbd ,_fadeg ,_aaf ,_fdde ,_cbag ,_dcdd ,_ebdf ,_edbac );default:_fdeg =_fdffe (_cga ,_ddbd ,_fadeg ,_aaf ,_fdde ,_cbag ,_dcdd ,_ebdf ,_edbac );
};if _fdeg !=nil {return _eg .Wrap (_fdeg ,"r\u0061\u0073\u0074\u0065\u0072\u004f\u0070\u004c\u006f\u0077","");};return nil ;};const (Vanilla Color =iota ;Chocolate ;);func Centroids (bms []*Bitmap )(*Points ,error ){_fdc :=make ([]Point ,len (bms ));_egce :=_gfga ();
_dbded :=_bbca ();var _befe error ;for _fgae ,_cfaab :=range bms {_fdc [_fgae ],_befe =_cfaab .centroid (_egce ,_dbded );if _befe !=nil {return nil ,_befe ;};};_geff :=Points (_fdc );return &_geff ,nil ;};type Color int ;func (_bgcfb *ClassedPoints )validateIntSlice ()error {const _cafg ="\u0076\u0061l\u0069\u0064\u0061t\u0065\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065";
for _ ,_fbd :=range _bgcfb .IntSlice {if _fbd >=(_bgcfb .Points .Size ()){return _eg .Errorf (_cafg ,"c\u006c\u0061\u0073\u0073\u0020\u0069\u0064\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0076\u0061\u006ci\u0064 \u0069\u006e\u0064\u0065x\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0070\u006f\u0069\u006e\u0074\u0073\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u003a\u0020\u0025\u0064",_fbd ,_bgcfb .Points .Size ());
};};return nil ;};func (_dbcf *Bitmaps )String ()string {_fcfef :=_gc .Builder {};for _ ,_cbcc :=range _dbcf .Values {_fcfef .WriteString (_cbcc .String ());_fcfef .WriteRune ('\n');};return _fcfef .String ();};const _efbfg =5000;func (_egf *Bitmap )GetUnpaddedData ()([]byte ,error ){_fbfg :=uint (_egf .Width &0x07);
if _fbfg ==0{return _egf .Data ,nil ;};_bgeg :=_egf .Width *_egf .Height ;if _bgeg %8!=0{_bgeg >>=3;_bgeg ++;}else {_bgeg >>=3;};_cfgd :=make ([]byte ,_bgeg );_ced :=_d .NewWriterMSB (_cfgd );const _edd ="\u0047e\u0074U\u006e\u0070\u0061\u0064\u0064\u0065\u0064\u0044\u0061\u0074\u0061";
for _affc :=0;_affc < _egf .Height ;_affc ++{for _dbdb :=0;_dbdb < _egf .RowStride ;_dbdb ++{_gaa :=_egf .Data [_affc *_egf .RowStride +_dbdb ];if _dbdb !=_egf .RowStride -1{_egeac :=_ced .WriteByte (_gaa );if _egeac !=nil {return nil ,_eg .Wrap (_egeac ,_edd ,"");
};continue ;};for _babg :=uint (0);_babg < _fbfg ;_babg ++{_bgfb :=_ced .WriteBit (int (_gaa >>(7-_babg )&0x01));if _bgfb !=nil {return nil ,_eg .Wrap (_bgfb ,_edd ,"");};};};};return _cfgd ,nil ;};func RankHausTest (p1 ,p2 ,p3 ,p4 *Bitmap ,delX ,delY float32 ,maxDiffW ,maxDiffH ,area1 ,area3 int ,rank float32 ,tab8 []int )(_bcbe bool ,_bbgce error ){const _feac ="\u0052\u0061\u006ek\u0048\u0061\u0075\u0073\u0054\u0065\u0073\u0074";
_fde ,_afce :=p1 .Width ,p1 .Height ;_ffcea ,_efbea :=p3 .Width ,p3 .Height ;if _b .Abs (_fde -_ffcea )> maxDiffW {return false ,nil ;};if _b .Abs (_afce -_efbea )> maxDiffH {return false ,nil ;};_addf :=int (float32 (area1 )*(1.0-rank )+0.5);_eddgc :=int (float32 (area3 )*(1.0-rank )+0.5);
var _dgffc ,_dbbb int ;if delX >=0{_dgffc =int (delX +0.5);}else {_dgffc =int (delX -0.5);};if delY >=0{_dbbb =int (delY +0.5);}else {_dbbb =int (delY -0.5);};_bdca :=p1 .CreateTemplate ();if _bbgce =_bdca .RasterOperation (0,0,_fde ,_afce ,PixSrc ,p1 ,0,0);
_bbgce !=nil {return false ,_eg .Wrap (_bbgce ,_feac ,"p\u0031\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _bbgce =_bdca .RasterOperation (_dgffc ,_dbbb ,_fde ,_afce ,PixNotSrcAndDst ,p4 ,0,0);_bbgce !=nil {return false ,_eg .Wrap (_bbgce ,_feac ,"\u0074 \u0026\u0020\u0021\u0070\u0034");
};_bcbe ,_bbgce =_bdca .ThresholdPixelSum (_addf ,tab8 );if _bbgce !=nil {return false ,_eg .Wrap (_bbgce ,_feac ,"\u0074\u002d\u003e\u0074\u0068\u0072\u0065\u0073\u0068\u0031");};if _bcbe {return false ,nil ;};if _bbgce =_bdca .RasterOperation (_dgffc ,_dbbb ,_ffcea ,_efbea ,PixSrc ,p3 ,0,0);
_bbgce !=nil {return false ,_eg .Wrap (_bbgce ,_feac ,"p\u0033\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _bbgce =_bdca .RasterOperation (0,0,_ffcea ,_efbea ,PixNotSrcAndDst ,p2 ,0,0);_bbgce !=nil {return false ,_eg .Wrap (_bbgce ,_feac ,"\u0074 \u0026\u0020\u0021\u0070\u0032");
};_bcbe ,_bbgce =_bdca .ThresholdPixelSum (_eddgc ,tab8 );if _bbgce !=nil {return false ,_eg .Wrap (_bbgce ,_feac ,"\u0074\u002d\u003e\u0074\u0068\u0072\u0065\u0073\u0068\u0033");};return !_bcbe ,nil ;};func (_beea *Bitmaps )AddBox (box *_dg .Rectangle ){_beea .Boxes =append (_beea .Boxes ,box )};
func (_cddaf *Boxes )SelectBySize (width ,height int ,tp LocationFilter ,relation SizeComparison )(_egbb *Boxes ,_ddgdd error ){const _ecbd ="\u0042o\u0078e\u0073\u002e\u0053\u0065\u006ce\u0063\u0074B\u0079\u0053\u0069\u007a\u0065";if _cddaf ==nil {return nil ,_eg .Error (_ecbd ,"b\u006f\u0078\u0065\u0073 '\u0062'\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064");
};if len (*_cddaf )==0{return _cddaf ,nil ;};switch tp {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_eg .Errorf (_ecbd ,"\u0069\u006e\u0076al\u0069\u0064\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",tp );
};switch relation {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE :default:return nil ,_eg .Errorf (_ecbd ,"i\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0020t\u0079\u0070\u0065:\u0020'\u0025\u0064\u0027",tp );
};_fdgg :=_cddaf .makeSizeIndicator (width ,height ,tp ,relation );_aec ,_ddgdd :=_cddaf .selectWithIndicator (_fdgg );if _ddgdd !=nil {return nil ,_eg .Wrap (_ddgdd ,_ecbd ,"");};return _aec ,nil ;};func CorrelationScoreThresholded (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab ,downcount []int ,scoreThreshold float32 )(bool ,error ){const _bccg ="C\u006f\u0072\u0072\u0065\u006c\u0061t\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054h\u0072\u0065\u0073h\u006fl\u0064\u0065\u0064";
if bm1 ==nil {return false ,_eg .Error (_bccg ,"\u0063\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u0062\u006d1\u0020\u0069s\u0020\u006e\u0069\u006c");
};if bm2 ==nil {return false ,_eg .Error (_bccg ,"\u0063\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u0062\u006d2\u0020\u0069s\u0020\u006e\u0069\u006c");
};if area1 <=0||area2 <=0{return false ,_eg .Error (_bccg ,"c\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006fn\u0053\u0063\u006f\u0072\u0065\u0054\u0068re\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u002d\u0020\u0061\u0072\u0065\u0061s \u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u003e\u0020\u0030");
};if downcount ==nil {return false ,_eg .Error (_bccg ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u006f\u0020\u0027\u0064\u006f\u0077\u006e\u0063\u006f\u0075\u006e\u0074\u0027");};if tab ==nil {return false ,_eg .Error (_bccg ,"p\u0072\u006f\u0076\u0069de\u0064 \u006e\u0069\u006c\u0020\u0027s\u0075\u006d\u0074\u0061\u0062\u0027");
};_adeb ,_dbb :=bm1 .Width ,bm1 .Height ;_bcfg ,_bafg :=bm2 .Width ,bm2 .Height ;if _b .Abs (_adeb -_bcfg )> maxDiffW {return false ,nil ;};if _b .Abs (_dbb -_bafg )> maxDiffH {return false ,nil ;};_dafb :=int (delX +_b .Sign (delX )*0.5);_dgff :=int (delY +_b .Sign (delY )*0.5);
_cbgf :=int (_c .Ceil (_c .Sqrt (float64 (scoreThreshold )*float64 (area1 )*float64 (area2 ))));_fbg :=bm2 .RowStride ;_ecbf :=_cbea (_dgff ,0);_gdb :=_ded (_bafg +_dgff ,_dbb );_aedg :=bm1 .RowStride *_ecbf ;_daab :=bm2 .RowStride *(_ecbf -_dgff );var _fdf int ;
if _gdb <=_dbb {_fdf =downcount [_gdb -1];};_affe :=_cbea (_dafb ,0);_bbec :=_ded (_bcfg +_dafb ,_adeb );var _adbf ,_efeb int ;if _dafb >=8{_adbf =_dafb >>3;_aedg +=_adbf ;_affe -=_adbf <<3;_bbec -=_adbf <<3;_dafb &=7;}else if _dafb <=-8{_efeb =-((_dafb +7)>>3);
_daab +=_efeb ;_fbg -=_efeb ;_dafb +=_efeb <<3;};var (_gacb ,_bbee ,_beae int ;_efaa ,_dgfc ,_aegf byte ;);if _affe >=_bbec ||_ecbf >=_gdb {return false ,nil ;};_caea :=(_bbec +7)>>3;switch {case _dafb ==0:for _bbee =_ecbf ;_bbee < _gdb ;_bbee ,_aedg ,_daab =_bbee +1,_aedg +bm1 .RowStride ,_daab +bm2 .RowStride {for _beae =0;
_beae < _caea ;_beae ++{_efaa =bm1 .Data [_aedg +_beae ]&bm2 .Data [_daab +_beae ];_gacb +=tab [_efaa ];};if _gacb >=_cbgf {return true ,nil ;};if _agag :=_gacb +downcount [_bbee ]-_fdf ;_agag < _cbgf {return false ,nil ;};};case _dafb > 0&&_fbg < _caea :for _bbee =_ecbf ;
_bbee < _gdb ;_bbee ,_aedg ,_daab =_bbee +1,_aedg +bm1 .RowStride ,_daab +bm2 .RowStride {_dgfc =bm1 .Data [_aedg ];_aegf =bm2 .Data [_daab ]>>uint (_dafb );_efaa =_dgfc &_aegf ;_gacb +=tab [_efaa ];for _beae =1;_beae < _fbg ;_beae ++{_dgfc =bm1 .Data [_aedg +_beae ];
_aegf =bm2 .Data [_daab +_beae ]>>uint (_dafb )|bm2 .Data [_daab +_beae -1]<<uint (8-_dafb );_efaa =_dgfc &_aegf ;_gacb +=tab [_efaa ];};_dgfc =bm1 .Data [_aedg +_beae ];_aegf =bm2 .Data [_daab +_beae -1]<<uint (8-_dafb );_efaa =_dgfc &_aegf ;_gacb +=tab [_efaa ];
if _gacb >=_cbgf {return true ,nil ;}else if _gacb +downcount [_bbee ]-_fdf < _cbgf {return false ,nil ;};};case _dafb > 0&&_fbg >=_caea :for _bbee =_ecbf ;_bbee < _gdb ;_bbee ,_aedg ,_daab =_bbee +1,_aedg +bm1 .RowStride ,_daab +bm2 .RowStride {_dgfc =bm1 .Data [_aedg ];
_aegf =bm2 .Data [_daab ]>>uint (_dafb );_efaa =_dgfc &_aegf ;_gacb +=tab [_efaa ];for _beae =1;_beae < _caea ;_beae ++{_dgfc =bm1 .Data [_aedg +_beae ];_aegf =bm2 .Data [_daab +_beae ]>>uint (_dafb );_aegf |=bm2 .Data [_daab +_beae -1]<<uint (8-_dafb );
_efaa =_dgfc &_aegf ;_gacb +=tab [_efaa ];};if _gacb >=_cbgf {return true ,nil ;}else if _gacb +downcount [_bbee ]-_fdf < _cbgf {return false ,nil ;};};case _caea < _fbg :for _bbee =_ecbf ;_bbee < _gdb ;_bbee ,_aedg ,_daab =_bbee +1,_aedg +bm1 .RowStride ,_daab +bm2 .RowStride {for _beae =0;
_beae < _caea ;_beae ++{_dgfc =bm1 .Data [_aedg +_beae ];_aegf =bm2 .Data [_daab +_beae ]<<uint (-_dafb );_aegf |=bm2 .Data [_daab +_beae +1]>>uint (8+_dafb );_efaa =_dgfc &_aegf ;_gacb +=tab [_efaa ];};if _gacb >=_cbgf {return true ,nil ;}else if _cdc :=_gacb +downcount [_bbee ]-_fdf ;
_cdc < _cbgf {return false ,nil ;};};case _fbg >=_caea :for _bbee =_ecbf ;_bbee < _gdb ;_bbee ,_aedg ,_daab =_bbee +1,_aedg +bm1 .RowStride ,_daab +bm2 .RowStride {for _beae =0;_beae < _caea ;_beae ++{_dgfc =bm1 .Data [_aedg +_beae ];_aegf =bm2 .Data [_daab +_beae ]<<uint (-_dafb );
_aegf |=bm2 .Data [_daab +_beae +1]>>uint (8+_dafb );_efaa =_dgfc &_aegf ;_gacb +=tab [_efaa ];};_dgfc =bm1 .Data [_aedg +_beae ];_aegf =bm2 .Data [_daab +_beae ]<<uint (-_dafb );_efaa =_dgfc &_aegf ;_gacb +=tab [_efaa ];if _gacb >=_cbgf {return true ,nil ;
}else if _gacb +downcount [_bbee ]-_fdf < _cbgf {return false ,nil ;};};};_abce :=float32 (_gacb )*float32 (_gacb )/(float32 (area1 )*float32 (area2 ));if _abce >=scoreThreshold {_dc .Log .Trace ("\u0063\u006f\u0075\u006e\u0074\u003a\u0020\u0025\u0064\u0020\u003c\u0020\u0074\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0020\u0025\u0064\u0020\u0062\u0075\u0074\u0020\u0073c\u006f\u0072\u0065\u0020\u0025\u0066\u0020\u003e\u003d\u0020\u0073\u0063\u006fr\u0065\u0054\u0068\u0072\u0065\u0073h\u006f\u006c\u0064 \u0025\u0066",_gacb ,_cbgf ,_abce ,scoreThreshold );
};return false ,nil ;};type Getter interface{GetBitmap ()*Bitmap ;};func TstWriteSymbols (t *_g .T ,bms *Bitmaps ,src *Bitmap ){for _bbaec :=0;_bbaec < bms .Size ();_bbaec ++{_gbga :=bms .Values [_bbaec ];_babb :=bms .Boxes [_bbaec ];_gbb :=src .RasterOperation (_babb .Min .X ,_babb .Min .Y ,_gbga .Width ,_gbga .Height ,PixSrc ,_gbga ,0,0);
_a .NoError (t ,_gbb );};};func (_geeeb *Bitmaps )SortByHeight (){_baag :=(*byHeight )(_geeeb );_ge .Sort (_baag )};func SelCreateBrick (h ,w int ,cy ,cx int ,tp SelectionValue )*Selection {_fgegc :=_bagf (h ,w ,"");_fgegc .setOrigin (cy ,cx );var _ddac ,_ebgad int ;
for _ddac =0;_ddac < h ;_ddac ++{for _ebgad =0;_ebgad < w ;_ebgad ++{_fgegc .Data [_ddac ][_ebgad ]=tp ;};};return _fgegc ;};type Bitmap struct{Width ,Height int ;BitmapNumber int ;RowStride int ;Data []byte ;Color Color ;Special int ;Text string ;XResolution ,YResolution int ;
};func (_cge *Bitmap )RemoveBorder (borderSize int )(*Bitmap ,error ){if borderSize ==0{return _cge .Copy (),nil ;};_bbga ,_fga :=_cge .removeBorderGeneral (borderSize ,borderSize ,borderSize ,borderSize );if _fga !=nil {return nil ,_eg .Wrap (_fga ,"\u0052\u0065\u006do\u0076\u0065\u0042\u006f\u0072\u0064\u0065\u0072","");
};return _bbga ,nil ;};func Dilate (d *Bitmap ,s *Bitmap ,sel *Selection )(*Bitmap ,error ){return _acd (d ,s ,sel )};func RasterOperation (dest *Bitmap ,dx ,dy ,dw ,dh int ,op RasterOperator ,src *Bitmap ,sx ,sy int )error {return _fgad (dest ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );
};func (_ddfb Points )Size ()int {return len (_ddfb )};func (_dfea *Boxes )makeSizeIndicator (_bca ,_acge int ,_bagd LocationFilter ,_afed SizeComparison )*_b .NumSlice {_agee :=&_b .NumSlice {};var _gfba ,_fefa ,_baffd int ;for _ ,_efgb :=range *_dfea {_gfba =0;
_fefa ,_baffd =_efgb .Dx (),_efgb .Dy ();switch _bagd {case LocSelectWidth :if (_afed ==SizeSelectIfLT &&_fefa < _bca )||(_afed ==SizeSelectIfGT &&_fefa > _bca )||(_afed ==SizeSelectIfLTE &&_fefa <=_bca )||(_afed ==SizeSelectIfGTE &&_fefa >=_bca ){_gfba =1;
};case LocSelectHeight :if (_afed ==SizeSelectIfLT &&_baffd < _acge )||(_afed ==SizeSelectIfGT &&_baffd > _acge )||(_afed ==SizeSelectIfLTE &&_baffd <=_acge )||(_afed ==SizeSelectIfGTE &&_baffd >=_acge ){_gfba =1;};case LocSelectIfEither :if (_afed ==SizeSelectIfLT &&(_baffd < _acge ||_fefa < _bca ))||(_afed ==SizeSelectIfGT &&(_baffd > _acge ||_fefa > _bca ))||(_afed ==SizeSelectIfLTE &&(_baffd <=_acge ||_fefa <=_bca ))||(_afed ==SizeSelectIfGTE &&(_baffd >=_acge ||_fefa >=_bca )){_gfba =1;
};case LocSelectIfBoth :if (_afed ==SizeSelectIfLT &&(_baffd < _acge &&_fefa < _bca ))||(_afed ==SizeSelectIfGT &&(_baffd > _acge &&_fefa > _bca ))||(_afed ==SizeSelectIfLTE &&(_baffd <=_acge &&_fefa <=_bca ))||(_afed ==SizeSelectIfGTE &&(_baffd >=_acge &&_fefa >=_bca )){_gfba =1;
};};_agee .AddInt (_gfba );};return _agee ;};func (_bgae *byWidth )Less (i ,j int )bool {return _bgae .Values [i ].Width < _bgae .Values [j ].Width };func _cdff (_efed ...MorphProcess )(_becbb error ){const _gfcb ="v\u0065r\u0069\u0066\u0079\u004d\u006f\u0072\u0070\u0068P\u0072\u006f\u0063\u0065ss\u0065\u0073";
var _dfbd ,_affd int ;for _dba ,_aegc :=range _efed {if _becbb =_aegc .verify (_dba ,&_dfbd ,&_affd );_becbb !=nil {return _eg .Wrap (_becbb ,_gfcb ,"");};};if _affd !=0&&_dfbd !=0{return _eg .Error (_gfcb ,"\u004d\u006f\u0072\u0070\u0068\u0020\u0073\u0065\u0071\u0075\u0065n\u0063\u0065\u0020\u002d\u0020\u0062\u006f\u0072d\u0065r\u0020\u0061\u0064\u0064\u0065\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u0065\u0074\u0020\u0072\u0065\u0064u\u0063\u0074\u0069\u006f\u006e\u0020\u006e\u006f\u0074\u0020\u0030");
};return nil ;};func (_acb *Bitmap )SetPadBits (value int ){_acb .setPadBits (value )};func (_bgdcd *BitmapsArray )GetBox (i int )(*_dg .Rectangle ,error ){const _fffb ="\u0042\u0069\u0074\u006dap\u0073\u0041\u0072\u0072\u0061\u0079\u002e\u0047\u0065\u0074\u0042\u006f\u0078";
if _bgdcd ==nil {return nil ,_eg .Error (_fffb ,"p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074m\u0061\u0070\u0073A\u0072r\u0061\u0079\u0027");};if i > len (_bgdcd .Boxes )-1{return nil ,_eg .Errorf (_fffb ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _bgdcd .Boxes [i ],nil ;};func _ecaf (_cdbb ,_cgfdd *Bitmap ,_fbecd ,_bacd int )(_cdffa error ){const _edcf ="\u0073e\u0065d\u0066\u0069\u006c\u006c\u0042i\u006e\u0061r\u0079\u004c\u006f\u0077\u0038";var (_gcea ,_ffbc ,_fdfg ,_ffbg int ;_bbeb ,_faad ,_ggbf ,_faee ,_cddafa ,_decd ,_baafb ,_fadd byte ;
);for _gcea =0;_gcea < _fbecd ;_gcea ++{_fdfg =_gcea *_cdbb .RowStride ;_ffbg =_gcea *_cgfdd .RowStride ;for _ffbc =0;_ffbc < _bacd ;_ffbc ++{if _bbeb ,_cdffa =_cdbb .GetByte (_fdfg +_ffbc );_cdffa !=nil {return _eg .Wrap (_cdffa ,_edcf ,"\u0067e\u0074 \u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");
};if _faad ,_cdffa =_cgfdd .GetByte (_ffbg +_ffbc );_cdffa !=nil {return _eg .Wrap (_cdffa ,_edcf ,"\u0067\u0065\u0074\u0020\u006d\u0061\u0073\u006b\u0020\u0062\u0079\u0074\u0065");};if _gcea > 0{if _ggbf ,_cdffa =_cdbb .GetByte (_fdfg -_cdbb .RowStride +_ffbc );
_cdffa !=nil {return _eg .Wrap (_cdffa ,_edcf ,"\u0069\u0020\u003e\u0020\u0030\u0020\u0062\u0079\u0074\u0065");};_bbeb |=_ggbf |(_ggbf <<1)|(_ggbf >>1);if _ffbc > 0{if _fadd ,_cdffa =_cdbb .GetByte (_fdfg -_cdbb .RowStride +_ffbc -1);_cdffa !=nil {return _eg .Wrap (_cdffa ,_edcf ,"\u0069\u0020\u003e\u00200 \u0026\u0026\u0020\u006a\u0020\u003e\u0020\u0030\u0020\u0062\u0079\u0074\u0065");
};_bbeb |=_fadd <<7;};if _ffbc < _bacd -1{if _fadd ,_cdffa =_cdbb .GetByte (_fdfg -_cdbb .RowStride +_ffbc +1);_cdffa !=nil {return _eg .Wrap (_cdffa ,_edcf ,"\u006a\u0020<\u0020\u0077\u0070l\u0020\u002d\u0020\u0031\u0020\u0062\u0079\u0074\u0065");};_bbeb |=_fadd >>7;
};};if _ffbc > 0{if _faee ,_cdffa =_cdbb .GetByte (_fdfg +_ffbc -1);_cdffa !=nil {return _eg .Wrap (_cdffa ,_edcf ,"\u006a\u0020\u003e \u0030");};_bbeb |=_faee <<7;};_bbeb &=_faad ;if _bbeb ==0||^_bbeb ==0{if _cdffa =_cdbb .SetByte (_fdfg +_ffbc ,_bbeb );
_cdffa !=nil {return _eg .Wrap (_cdffa ,_edcf ,"\u0073e\u0074t\u0069\u006e\u0067\u0020\u0065m\u0070\u0074y\u0020\u0062\u0079\u0074\u0065");};};for {_baafb =_bbeb ;_bbeb =(_bbeb |(_bbeb >>1)|(_bbeb <<1))&_faad ;if (_bbeb ^_baafb )==0{if _cdffa =_cdbb .SetByte (_fdfg +_ffbc ,_bbeb );
_cdffa !=nil {return _eg .Wrap (_cdffa ,_edcf ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0070\u0072\u0065\u0076 \u0062\u0079\u0074\u0065");};break ;};};};};for _gcea =_fbecd -1;_gcea >=0;_gcea --{_fdfg =_gcea *_cdbb .RowStride ;_ffbg =_gcea *_cgfdd .RowStride ;
for _ffbc =_bacd -1;_ffbc >=0;_ffbc --{if _bbeb ,_cdffa =_cdbb .GetByte (_fdfg +_ffbc );_cdffa !=nil {return _eg .Wrap (_cdffa ,_edcf ,"\u0072\u0065\u0076er\u0073\u0065\u0020\u0067\u0065\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");
};if _faad ,_cdffa =_cgfdd .GetByte (_ffbg +_ffbc );_cdffa !=nil {return _eg .Wrap (_cdffa ,_edcf ,"r\u0065\u0076\u0065\u0072se\u0020g\u0065\u0074\u0020\u006d\u0061s\u006b\u0020\u0062\u0079\u0074\u0065");};if _gcea < _fbecd -1{if _cddafa ,_cdffa =_cdbb .GetByte (_fdfg +_cdbb .RowStride +_ffbc );
_cdffa !=nil {return _eg .Wrap (_cdffa ,_edcf ,"\u0069\u0020\u003c\u0020h\u0020\u002d\u0020\u0031\u0020\u002d\u003e\u0020\u0067\u0065t\u0020s\u006f\u0075\u0072\u0063\u0065\u0020\u0062y\u0074\u0065");};_bbeb |=_cddafa |(_cddafa <<1)|_cddafa >>1;if _ffbc > 0{if _fadd ,_cdffa =_cdbb .GetByte (_fdfg +_cdbb .RowStride +_ffbc -1);
_cdffa !=nil {return _eg .Wrap (_cdffa ,_edcf ,"\u0069\u0020\u003c h\u002d\u0031\u0020\u0026\u0020\u006a\u0020\u003e\u00200\u0020-\u003e \u0067e\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");};_bbeb |=_fadd <<7;};if _ffbc < _bacd -1{if _fadd ,_cdffa =_cdbb .GetByte (_fdfg +_cdbb .RowStride +_ffbc +1);
_cdffa !=nil {return _eg .Wrap (_cdffa ,_edcf ,"\u0069\u0020\u003c\u0020\u0068\u002d\u0031\u0020\u0026\u0026\u0020\u006a\u0020\u003c\u0077\u0070\u006c\u002d\u0031\u0020\u002d\u003e\u0020\u0067e\u0074\u0020\u0073\u006f\u0075r\u0063\u0065 \u0062\u0079\u0074\u0065");
};_bbeb |=_fadd >>7;};};if _ffbc < _bacd -1{if _decd ,_cdffa =_cdbb .GetByte (_fdfg +_ffbc +1);_cdffa !=nil {return _eg .Wrap (_cdffa ,_edcf ,"\u006a\u0020<\u0020\u0077\u0070\u006c\u0020\u002d\u0031\u0020\u002d\u003e\u0020\u0067\u0065\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020by\u0074\u0065");
};_bbeb |=_decd >>7;};_bbeb &=_faad ;if _bbeb ==0||(^_bbeb )==0{if _cdffa =_cdbb .SetByte (_fdfg +_ffbc ,_bbeb );_cdffa !=nil {return _eg .Wrap (_cdffa ,_edcf ,"\u0073e\u0074 \u006d\u0061\u0073\u006b\u0065\u0064\u0020\u0062\u0079\u0074\u0065");};};for {_baafb =_bbeb ;
_bbeb =(_bbeb |(_bbeb >>1)|(_bbeb <<1))&_faad ;if (_bbeb ^_baafb )==0{if _cdffa =_cdbb .SetByte (_fdfg +_ffbc ,_bbeb );_cdffa !=nil {return _eg .Wrap (_cdffa ,_edcf ,"r\u0065\u0076\u0065\u0072se\u0020s\u0065\u0074\u0020\u0070\u0072e\u0076\u0020\u0062\u0079\u0074\u0065");
};break ;};};};};return nil ;};func (_bae *Bitmap )SetPixel (x ,y int ,pixel byte )error {_dfc :=_bae .GetByteIndex (x ,y );if _dfc > len (_bae .Data )-1{return _eg .Errorf ("\u0053\u0065\u0074\u0050\u0069\u0078\u0065\u006c","\u0069\u006e\u0064\u0065x \u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020%\u0064",_dfc );
};_cbg :=_bae .GetBitOffset (x );_baaf :=uint (7-_cbg );_cca :=_bae .Data [_dfc ];var _gea byte ;if pixel ==1{_gea =_cca |(pixel &0x01<<_baaf );}else {_gea =_cca &^(1<<_baaf );};_bae .Data [_dfc ]=_gea ;return nil ;};func _ba ()(_fgg [256]uint16 ){for _bc :=0;
_bc < 256;_bc ++{if _bc &0x01!=0{_fgg [_bc ]|=0x3;};if _bc &0x02!=0{_fgg [_bc ]|=0xc;};if _bc &0x04!=0{_fgg [_bc ]|=0x30;};if _bc &0x08!=0{_fgg [_bc ]|=0xc0;};if _bc &0x10!=0{_fgg [_bc ]|=0x300;};if _bc &0x20!=0{_fgg [_bc ]|=0xc00;};if _bc &0x40!=0{_fgg [_bc ]|=0x3000;
};if _bc &0x80!=0{_fgg [_bc ]|=0xc000;};};return _fgg ;};func Blit (src *Bitmap ,dst *Bitmap ,x ,y int ,op CombinationOperator )error {var _ccfe ,_cabg int ;_fefed :=src .RowStride -1;if x < 0{_cabg =-x ;x =0;}else if x +src .Width > dst .Width {_fefed -=src .Width +x -dst .Width ;
};if y < 0{_ccfe =-y ;y =0;_cabg +=src .RowStride ;_fefed +=src .RowStride ;}else if y +src .Height > dst .Height {_ccfe =src .Height +y -dst .Height ;};var (_acf int ;_cdda error ;);_ddfe :=x &0x07;_bbgg :=8-_ddfe ;_eaee :=src .Width &0x07;_aggg :=_bbgg -_eaee ;
_aced :=_bbgg &0x07!=0;_beac :=src .Width <=((_fefed -_cabg )<<3)+_bbgg ;_bcgf :=dst .GetByteIndex (x ,y );_dffa :=_ccfe +dst .Height ;if src .Height > _dffa {_acf =_dffa ;}else {_acf =src .Height ;};switch {case !_aced :_cdda =_ddb (src ,dst ,_ccfe ,_acf ,_bcgf ,_cabg ,_fefed ,op );
case _beac :_cdda =_daaa (src ,dst ,_ccfe ,_acf ,_bcgf ,_cabg ,_fefed ,_aggg ,_ddfe ,_bbgg ,op );default:_cdda =_baed (src ,dst ,_ccfe ,_acf ,_bcgf ,_cabg ,_fefed ,_aggg ,_ddfe ,_bbgg ,op ,_eaee );};return _cdda ;};func (_gggg *Selection )setOrigin (_aadc ,_cfbab int ){_gggg .Cy ,_gggg .Cx =_aadc ,_cfbab };
func (_eea *Bitmap )ToImage ()_dg .Image {_bbgc ,_bagg :=_bf .NewImage (_eea .Width ,_eea .Height ,1,1,_eea .Data ,nil ,nil );if _bagg !=nil {_dc .Log .Error ("\u0043\u006f\u006e\u0076\u0065\u0072\u0074\u0069\u006e\u0067\u0020j\u0062\u0069\u0067\u0032\u002e\u0042\u0069\u0074m\u0061p\u0020\u0074\u006f\u0020\u0069\u006d\u0061\u0067\u0065\u0075\u0074\u0069\u006c\u002e\u0049\u006d\u0061\u0067e\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_bagg );
};return _bbgc ;};type Boxes []*_dg .Rectangle ;func _abef (_gcca ,_aagb *Bitmap ,_gegd ,_egag int )(*Bitmap ,error ){const _abca ="d\u0069\u006c\u0061\u0074\u0065\u0042\u0072\u0069\u0063\u006b";if _aagb ==nil {_dc .Log .Debug ("\u0064\u0069\u006c\u0061\u0074\u0065\u0042\u0072\u0069\u0063k\u0020\u0073\u006f\u0075\u0072\u0063\u0065 \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
return nil ,_eg .Error (_abca ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _gegd < 1||_egag < 1{return nil ,_eg .Error (_abca ,"\u0068\u0053\u007a\u0069\u0065 \u0061\u006e\u0064\u0020\u0076\u0053\u0069\u007a\u0065\u0020\u0061\u0072\u0065 \u006e\u006f\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0031");
};if _gegd ==1&&_egag ==1{_abgga ,_ecec :=_cecd (_gcca ,_aagb );if _ecec !=nil {return nil ,_eg .Wrap (_ecec ,_abca ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u0026\u0026 \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _abgga ,nil ;};if _gegd ==1||_egag ==1{_aeee :=SelCreateBrick (_egag ,_gegd ,_egag /2,_gegd /2,SelHit );_bedf ,_caca :=_acd (_gcca ,_aagb ,_aeee );if _caca !=nil {return nil ,_eg .Wrap (_caca ,_abca ,"\u0068s\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _bedf ,nil ;};_bffgb :=SelCreateBrick (1,_gegd ,0,_gegd /2,SelHit );_eddc :=SelCreateBrick (_egag ,1,_egag /2,0,SelHit );_fcde ,_ceaf :=_acd (nil ,_aagb ,_bffgb );if _ceaf !=nil {return nil ,_eg .Wrap (_ceaf ,_abca ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};_gcca ,_ceaf =_acd (_gcca ,_fcde ,_eddc );if _ceaf !=nil {return nil ,_eg .Wrap (_ceaf ,_abca ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};return _gcca ,nil ;};func _dfcg (_abde *Bitmap ,_ebcgb int )(*Bitmap ,error ){const _ggdga ="\u0065x\u0070a\u006e\u0064\u0052\u0065\u0070\u006c\u0069\u0063\u0061\u0074\u0065";
if _abde ==nil {return nil ,_eg .Error (_ggdga ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _ebcgb <=0{return nil ,_eg .Error (_ggdga ,"i\u006e\u0076\u0061\u006cid\u0020f\u0061\u0063\u0074\u006f\u0072 \u002d\u0020\u003c\u003d\u0020\u0030");
};if _ebcgb ==1{_acac ,_dgcc :=_cecd (nil ,_abde );if _dgcc !=nil {return nil ,_eg .Wrap (_dgcc ,_ggdga ,"\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u003d\u0020\u0031");};return _acac ,nil ;};_egbc ,_cdfb :=_bgda (_abde ,_ebcgb ,_ebcgb );if _cdfb !=nil {return nil ,_eg .Wrap (_cdfb ,_ggdga ,"");
};return _egbc ,nil ;};func _gfga ()[]int {_bbd :=make ([]int ,256);_bbd [0]=0;_bbd [1]=7;var _gbddc int ;for _gbddc =2;_gbddc < 4;_gbddc ++{_bbd [_gbddc ]=_bbd [_gbddc -2]+6;};for _gbddc =4;_gbddc < 8;_gbddc ++{_bbd [_gbddc ]=_bbd [_gbddc -4]+5;};for _gbddc =8;
_gbddc < 16;_gbddc ++{_bbd [_gbddc ]=_bbd [_gbddc -8]+4;};for _gbddc =16;_gbddc < 32;_gbddc ++{_bbd [_gbddc ]=_bbd [_gbddc -16]+3;};for _gbddc =32;_gbddc < 64;_gbddc ++{_bbd [_gbddc ]=_bbd [_gbddc -32]+2;};for _gbddc =64;_gbddc < 128;_gbddc ++{_bbd [_gbddc ]=_bbd [_gbddc -64]+1;
};for _gbddc =128;_gbddc < 256;_gbddc ++{_bbd [_gbddc ]=_bbd [_gbddc -128];};return _bbd ;};type byWidth Bitmaps ;func (_ebbd *byHeight )Len ()int {return len (_ebbd .Values )};func (_dbbc *Selection )findMaxTranslations ()(_adba ,_fega ,_gegde ,_fcfg int ){for _bgec :=0;
_bgec < _dbbc .Height ;_bgec ++{for _baee :=0;_baee < _dbbc .Width ;_baee ++{if _dbbc .Data [_bgec ][_baee ]==SelHit {_adba =_cbea (_adba ,_dbbc .Cx -_baee );_fega =_cbea (_fega ,_dbbc .Cy -_bgec );_gegde =_cbea (_gegde ,_baee -_dbbc .Cx );_fcfg =_cbea (_fcfg ,_bgec -_dbbc .Cy );
};};};return _adba ,_fega ,_gegde ,_fcfg ;};func Extract (roi _dg .Rectangle ,src *Bitmap )(*Bitmap ,error ){_dacfa :=New (roi .Dx (),roi .Dy ());_gfdge :=roi .Min .X &0x07;_bcceg :=8-_gfdge ;_aceb :=uint (8-_dacfa .Width &0x07);_gadc :=src .GetByteIndex (roi .Min .X ,roi .Min .Y );
_aeab :=src .GetByteIndex (roi .Max .X -1,roi .Min .Y );_bac :=_dacfa .RowStride ==_aeab +1-_gadc ;var _gged int ;for _abf :=roi .Min .Y ;_abf < roi .Max .Y ;_abf ++{_edbb :=_gadc ;_dcd :=_gged ;switch {case _gadc ==_aeab :_bacc ,_bbe :=src .GetByte (_edbb );
if _bbe !=nil {return nil ,_bbe ;};_bacc <<=uint (_gfdge );_bbe =_dacfa .SetByte (_dcd ,_bcfa (_aceb ,_bacc ));if _bbe !=nil {return nil ,_bbe ;};case _gfdge ==0:for _fddc :=_gadc ;_fddc <=_aeab ;_fddc ++{_bebg ,_afa :=src .GetByte (_edbb );if _afa !=nil {return nil ,_afa ;
};_edbb ++;if _fddc ==_aeab &&_bac {_bebg =_bcfa (_aceb ,_bebg );};_afa =_dacfa .SetByte (_dcd ,_bebg );if _afa !=nil {return nil ,_afa ;};_dcd ++;};default:_bgb :=_cgfd (src ,_dacfa ,uint (_gfdge ),uint (_bcceg ),_aceb ,_gadc ,_aeab ,_bac ,_edbb ,_dcd );
if _bgb !=nil {return nil ,_bgb ;};};_gadc +=src .RowStride ;_aeab +=src .RowStride ;_gged +=_dacfa .RowStride ;};return _dacfa ,nil ;};func _bagf (_bbgaa ,_ececb int ,_fcdfc string )*Selection {_bfeg :=&Selection {Height :_bbgaa ,Width :_ececb ,Name :_fcdfc };
_bfeg .Data =make ([][]SelectionValue ,_bbgaa );for _dbcb :=0;_dbcb < _bbgaa ;_dbcb ++{_bfeg .Data [_dbcb ]=make ([]SelectionValue ,_ececb );};return _bfeg ;};func _acd (_ffga *Bitmap ,_aacb *Bitmap ,_bdfa *Selection )(*Bitmap ,error ){var (_fgbg *Bitmap ;
_acedg error ;);_ffga ,_acedg =_bbcc (_ffga ,_aacb ,_bdfa ,&_fgbg );if _acedg !=nil {return nil ,_acedg ;};if _acedg =_ffga .clearAll ();_acedg !=nil {return nil ,_acedg ;};var _bcfd SelectionValue ;for _ebec :=0;_ebec < _bdfa .Height ;_ebec ++{for _bcdda :=0;
_bcdda < _bdfa .Width ;_bcdda ++{_bcfd =_bdfa .Data [_ebec ][_bcdda ];if _bcfd ==SelHit {if _acedg =_ffga .RasterOperation (_bcdda -_bdfa .Cx ,_ebec -_bdfa .Cy ,_aacb .Width ,_aacb .Height ,PixSrcOrDst ,_fgbg ,0,0);_acedg !=nil {return nil ,_acedg ;};};
};};return _ffga ,nil ;};func CombineBytes (oldByte ,newByte byte ,op CombinationOperator )byte {return _afbf (oldByte ,newByte ,op );};func _eaba (_bcgg *Bitmap ,_fegf *_b .Stack ,_eddcd ,_bacf int )(_ffaa *_dg .Rectangle ,_ebeg error ){const _bbae ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";
if _bcgg ==nil {return nil ,_eg .Error (_bbae ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _fegf ==nil {return nil ,_eg .Error (_bbae ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");
};_dgcd ,_edbed :=_bcgg .Width ,_bcgg .Height ;_afdc :=_dgcd -1;_ddff :=_edbed -1;if _eddcd < 0||_eddcd > _afdc ||_bacf < 0||_bacf > _ddff ||!_bcgg .GetPixel (_eddcd ,_bacf ){return nil ,nil ;};var _beba *_dg .Rectangle ;_beba ,_ebeg =Rect (100000,100000,0,0);
if _ebeg !=nil {return nil ,_eg .Wrap (_ebeg ,_bbae ,"");};if _ebeg =_debbf (_fegf ,_eddcd ,_eddcd ,_bacf ,1,_ddff ,_beba );_ebeg !=nil {return nil ,_eg .Wrap (_ebeg ,_bbae ,"\u0069\u006e\u0069t\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _ebeg =_debbf (_fegf ,_eddcd ,_eddcd ,_bacf +1,-1,_ddff ,_beba );
_ebeg !=nil {return nil ,_eg .Wrap (_ebeg ,_bbae ,"\u0032\u006ed\u0020\u0069\u006ei\u0074\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};_beba .Min .X ,_beba .Max .X =_eddcd ,_eddcd ;_beba .Min .Y ,_beba .Max .Y =_bacf ,_bacf ;var (_fbcbg *fillSegment ;
_bafa int ;);for _fegf .Len ()> 0{if _fbcbg ,_ebeg =_bgce (_fegf );_ebeg !=nil {return nil ,_eg .Wrap (_ebeg ,_bbae ,"");};_bacf =_fbcbg ._cabf ;for _eddcd =_fbcbg ._affeb ;_eddcd >=0&&_bcgg .GetPixel (_eddcd ,_bacf );_eddcd --{if _ebeg =_bcgg .SetPixel (_eddcd ,_bacf ,0);
_ebeg !=nil {return nil ,_eg .Wrap (_ebeg ,_bbae ,"");};};if _eddcd >=_fbcbg ._affeb {for _eddcd ++;_eddcd <=_fbcbg ._afcc &&_eddcd <=_afdc &&!_bcgg .GetPixel (_eddcd ,_bacf );_eddcd ++{};_bafa =_eddcd ;if !(_eddcd <=_fbcbg ._afcc &&_eddcd <=_afdc ){continue ;
};}else {_bafa =_eddcd +1;if _bafa < _fbcbg ._affeb -1{if _ebeg =_debbf (_fegf ,_bafa ,_fbcbg ._affeb -1,_fbcbg ._cabf ,-_fbcbg ._bega ,_ddff ,_beba );_ebeg !=nil {return nil ,_eg .Wrap (_ebeg ,_bbae ,"\u006c\u0065\u0061\u006b\u0020\u006f\u006e\u0020\u006c\u0065\u0066\u0074 \u0073\u0069\u0064\u0065");
};};_eddcd =_fbcbg ._affeb +1;};for {for ;_eddcd <=_afdc &&_bcgg .GetPixel (_eddcd ,_bacf );_eddcd ++{if _ebeg =_bcgg .SetPixel (_eddcd ,_bacf ,0);_ebeg !=nil {return nil ,_eg .Wrap (_ebeg ,_bbae ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _ebeg =_debbf (_fegf ,_bafa ,_eddcd -1,_fbcbg ._cabf ,_fbcbg ._bega ,_ddff ,_beba );
_ebeg !=nil {return nil ,_eg .Wrap (_ebeg ,_bbae ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _eddcd > _fbcbg ._afcc +1{if _ebeg =_debbf (_fegf ,_fbcbg ._afcc +1,_eddcd -1,_fbcbg ._cabf ,-_fbcbg ._bega ,_ddff ,_beba );_ebeg !=nil {return nil ,_eg .Wrap (_ebeg ,_bbae ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};for _eddcd ++;_eddcd <=_fbcbg ._afcc &&_eddcd <=_afdc &&!_bcgg .GetPixel (_eddcd ,_bacf );_eddcd ++{};_bafa =_eddcd ;if !(_eddcd <=_fbcbg ._afcc &&_eddcd <=_afdc ){break ;};};};_beba .Max .X ++;_beba .Max .Y ++;return _beba ,nil ;};func (_aedae *Bitmap )connComponentsBB (_geee int )(_fefcf *Boxes ,_agea error ){const _dfbg ="\u0042\u0069\u0074ma\u0070\u002e\u0063\u006f\u006e\u006e\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0042\u0042";
if _geee !=4&&_geee !=8{return nil ,_eg .Error (_dfbg ,"\u0063\u006f\u006e\u006e\u0065\u0063t\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0027\u0034\u0027\u0020\u006fr\u0020\u0027\u0038\u0027");};if _aedae .Zero (){return &Boxes {},nil ;
};_aedae .setPadBits (0);_bbgd ,_agea :=_cecd (nil ,_aedae );if _agea !=nil {return nil ,_eg .Wrap (_agea ,_dfbg ,"\u0062\u006d\u0031");};_afdf :=&_b .Stack {};_afdf .Aux =&_b .Stack {};_fefcf =&Boxes {};var (_dfbfc ,_cddge int ;_bfgb _dg .Point ;_eeff bool ;
_cfgb *_dg .Rectangle ;);for {if _bfgb ,_eeff ,_agea =_bbgd .nextOnPixel (_cddge ,_dfbfc );_agea !=nil {return nil ,_eg .Wrap (_agea ,_dfbg ,"");};if !_eeff {break ;};if _cfgb ,_agea =_fedg (_bbgd ,_afdf ,_bfgb .X ,_bfgb .Y ,_geee );_agea !=nil {return nil ,_eg .Wrap (_agea ,_dfbg ,"");
};if _agea =_fefcf .Add (_cfgb );_agea !=nil {return nil ,_eg .Wrap (_agea ,_dfbg ,"");};_cddge =_bfgb .X ;_dfbfc =_bfgb .Y ;};return _fefcf ,nil ;};type BoundaryCondition int ;func (_aebe Points )GetGeometry (i int )(_afdff ,_eedg float32 ,_gbfd error ){if i > len (_aebe )-1{return 0,0,_eg .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};_agaa :=_aebe [i ];return _agaa .X ,_agaa .Y ,nil ;};func NewClassedPoints (points *Points ,classes _b .IntSlice )(*ClassedPoints ,error ){const _dfa ="\u004e\u0065w\u0043\u006c\u0061s\u0073\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073";if points ==nil {return nil ,_eg .Error (_dfa ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0070\u006f\u0069\u006e\u0074\u0073");
};if classes ==nil {return nil ,_eg .Error (_dfa ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0063\u006c\u0061ss\u0065\u0073");};_gfgec :=&ClassedPoints {Points :points ,IntSlice :classes };if _cdbc :=_gfgec .validateIntSlice ();_cdbc !=nil {return nil ,_eg .Wrap (_cdbc ,_dfa ,"");
};return _gfgec ,nil ;};func (_dfbgd *ClassedPoints )SortByY (){_dfbgd ._eeacb =_dfbgd .ySortFunction ();_ge .Sort (_dfbgd )};func (_fae *Bitmap )setPadBits (_ccf int ){_cbbc :=8-_fae .Width %8;if _cbbc ==8{return ;};_fcfe :=_fae .Width /8;_gab :=_ecdg [_cbbc ];
if _ccf ==0{_gab ^=_gab ;};var _gceg int ;for _geg :=0;_geg < _fae .Height ;_geg ++{_gceg =_geg *_fae .RowStride +_fcfe ;if _ccf ==0{_fae .Data [_gceg ]&=_gab ;}else {_fae .Data [_gceg ]|=_gab ;};};};func (_afcf *Bitmap )And (s *Bitmap )(_eca *Bitmap ,_ggcf error ){const _cdaf ="\u0042\u0069\u0074\u006d\u0061\u0070\u002e\u0041\u006e\u0064";
if _afcf ==nil {return nil ,_eg .Error (_cdaf ,"\u0027b\u0069t\u006d\u0061\u0070\u0020\u0027b\u0027\u0020i\u0073\u0020\u006e\u0069\u006c");};if s ==nil {return nil ,_eg .Error (_cdaf ,"\u0062\u0069\u0074\u006d\u0061\u0070\u0020\u0027\u0073\u0027\u0020\u0069s\u0020\u006e\u0069\u006c");
};if !_afcf .SizesEqual (s ){_dc .Log .Debug ("\u0025\u0073\u0020-\u0020\u0042\u0069\u0074\u006d\u0061\u0070\u0020\u0027\u0073\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0073\u0069\u007a\u0065 \u0077\u0069\u0074\u0068\u0020\u0027\u0062\u0027",_cdaf );
};if _eca ,_ggcf =_cecd (_eca ,_afcf );_ggcf !=nil {return nil ,_eg .Wrap (_ggcf ,_cdaf ,"\u0063\u0061\u006e't\u0020\u0063\u0072\u0065\u0061\u0074\u0065\u0020\u0027\u0064\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _ggcf =_eca .RasterOperation (0,0,_eca .Width ,_eca .Height ,PixSrcAndDst ,s ,0,0);
_ggcf !=nil {return nil ,_eg .Wrap (_ggcf ,_cdaf ,"");};return _eca ,nil ;};type Component int ;type Bitmaps struct{Values []*Bitmap ;Boxes []*_dg .Rectangle ;};func (_gebe *Bitmap )GetBitOffset (x int )int {return x &0x07};func _gebeb (_adaf *Bitmap ,_gca ,_bdbf int ,_bfc ,_cdaa int ,_eefef RasterOperator ){var (_fgfe bool ;
_cfad bool ;_cddab int ;_eege int ;_fdag int ;_agbf int ;_dfce bool ;_efdg byte ;);_cgaa :=8-(_gca &7);_agbda :=_ecdg [_cgaa ];_ffae :=_adaf .RowStride *_bdbf +(_gca >>3);if _bfc < _cgaa {_fgfe =true ;_agbda &=_ddgeb [8-_cgaa +_bfc ];};if !_fgfe {_cddab =(_bfc -_cgaa )>>3;
if _cddab !=0{_cfad =true ;_eege =_ffae +1;};};_fdag =(_gca +_bfc )&7;if !(_fgfe ||_fdag ==0){_dfce =true ;_efdg =_ddgeb [_fdag ];_agbf =_ffae +1+_cddab ;};var _egcc ,_ccaf int ;switch _eefef {case PixClr :for _egcc =0;_egcc < _cdaa ;_egcc ++{_adaf .Data [_ffae ]=_gbgb (_adaf .Data [_ffae ],0x0,_agbda );
_ffae +=_adaf .RowStride ;};if _cfad {for _egcc =0;_egcc < _cdaa ;_egcc ++{for _ccaf =0;_ccaf < _cddab ;_ccaf ++{_adaf .Data [_eege +_ccaf ]=0x0;};_eege +=_adaf .RowStride ;};};if _dfce {for _egcc =0;_egcc < _cdaa ;_egcc ++{_adaf .Data [_agbf ]=_gbgb (_adaf .Data [_agbf ],0x0,_efdg );
_agbf +=_adaf .RowStride ;};};case PixSet :for _egcc =0;_egcc < _cdaa ;_egcc ++{_adaf .Data [_ffae ]=_gbgb (_adaf .Data [_ffae ],0xff,_agbda );_ffae +=_adaf .RowStride ;};if _cfad {for _egcc =0;_egcc < _cdaa ;_egcc ++{for _ccaf =0;_ccaf < _cddab ;_ccaf ++{_adaf .Data [_eege +_ccaf ]=0xff;
};_eege +=_adaf .RowStride ;};};if _dfce {for _egcc =0;_egcc < _cdaa ;_egcc ++{_adaf .Data [_agbf ]=_gbgb (_adaf .Data [_agbf ],0xff,_efdg );_agbf +=_adaf .RowStride ;};};case PixNotDst :for _egcc =0;_egcc < _cdaa ;_egcc ++{_adaf .Data [_ffae ]=_gbgb (_adaf .Data [_ffae ],^_adaf .Data [_ffae ],_agbda );
_ffae +=_adaf .RowStride ;};if _cfad {for _egcc =0;_egcc < _cdaa ;_egcc ++{for _ccaf =0;_ccaf < _cddab ;_ccaf ++{_adaf .Data [_eege +_ccaf ]=^(_adaf .Data [_eege +_ccaf ]);};_eege +=_adaf .RowStride ;};};if _dfce {for _egcc =0;_egcc < _cdaa ;_egcc ++{_adaf .Data [_agbf ]=_gbgb (_adaf .Data [_agbf ],^_adaf .Data [_agbf ],_efdg );
_agbf +=_adaf .RowStride ;};};};};const (ComponentConn Component =iota ;ComponentCharacters ;ComponentWords ;);func (_bffg *Bitmap )clearAll ()error {return _bffg .RasterOperation (0,0,_bffg .Width ,_bffg .Height ,PixClr ,nil ,0,0);};func _cecd (_dcg ,_affac *Bitmap )(*Bitmap ,error ){if _affac ==nil {return nil ,_eg .Error ("\u0063\u006f\u0070\u0079\u0042\u0069\u0074\u006d\u0061\u0070","\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _affac ==_dcg {return _dcg ,nil ;};if _dcg ==nil {_dcg =_affac .createTemplate ();copy (_dcg .Data ,_affac .Data );return _dcg ,nil ;};_ebe :=_dcg .resizeImageData (_affac );if _ebe !=nil {return nil ,_eg .Wrap (_ebe ,"\u0063\u006f\u0070\u0079\u0042\u0069\u0074\u006d\u0061\u0070","");
};_dcg .Text =_affac .Text ;copy (_dcg .Data ,_affac .Data );return _dcg ,nil ;};func (_cfaa *Bitmap )GetPixel (x ,y int )bool {_afe :=_cfaa .GetByteIndex (x ,y );_dff :=_cfaa .GetBitOffset (x );_aae :=uint (7-_dff );if _afe > len (_cfaa .Data )-1{_dc .Log .Debug ("\u0054\u0072\u0079\u0069\u006e\u0067\u0020\u0074\u006f\u0020\u0067\u0065\u0074\u0020\u0070\u0069\u0078\u0065\u006c\u0020o\u0075\u0074\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0064\u0061\u0074\u0061\u0020\u0072\u0061\u006e\u0067\u0065\u002e \u0078\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0079\u003a\u0027\u0025\u0064'\u002c\u0020\u0062m\u003a\u0020\u0027\u0025\u0073\u0027",x ,y ,_cfaa );
return false ;};if (_cfaa .Data [_afe ]>>_aae )&0x01>=1{return true ;};return false ;};func (_aaaeb *Bitmaps )makeSizeIndicator (_abedd ,_ebac int ,_bcafa LocationFilter ,_fadg SizeComparison )(_dagg *_b .NumSlice ,_gbec error ){const _cbfdb ="\u0042i\u0074\u006d\u0061\u0070s\u002e\u006d\u0061\u006b\u0065S\u0069z\u0065I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";
if _aaaeb ==nil {return nil ,_eg .Error (_cbfdb ,"\u0062\u0069\u0074ma\u0070\u0073\u0020\u0027\u0062\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};switch _bcafa {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_eg .Errorf (_cbfdb ,"\u0070\u0072\u006f\u0076\u0069d\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u006fc\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",_bcafa );
};switch _fadg {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE ,SizeSelectIfEQ :default:return nil ,_eg .Errorf (_cbfdb ,"\u0069\u006e\u0076\u0061li\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025d\u0027",_fadg );
};_dagg =&_b .NumSlice {};var (_gddb ,_bbdc ,_bdbg int ;_cfca *Bitmap ;);for _ ,_cfca =range _aaaeb .Values {_gddb =0;_bbdc ,_bdbg =_cfca .Width ,_cfca .Height ;switch _bcafa {case LocSelectWidth :if (_fadg ==SizeSelectIfLT &&_bbdc < _abedd )||(_fadg ==SizeSelectIfGT &&_bbdc > _abedd )||(_fadg ==SizeSelectIfLTE &&_bbdc <=_abedd )||(_fadg ==SizeSelectIfGTE &&_bbdc >=_abedd )||(_fadg ==SizeSelectIfEQ &&_bbdc ==_abedd ){_gddb =1;
};case LocSelectHeight :if (_fadg ==SizeSelectIfLT &&_bdbg < _ebac )||(_fadg ==SizeSelectIfGT &&_bdbg > _ebac )||(_fadg ==SizeSelectIfLTE &&_bdbg <=_ebac )||(_fadg ==SizeSelectIfGTE &&_bdbg >=_ebac )||(_fadg ==SizeSelectIfEQ &&_bdbg ==_ebac ){_gddb =1;
};case LocSelectIfEither :if (_fadg ==SizeSelectIfLT &&(_bbdc < _abedd ||_bdbg < _ebac ))||(_fadg ==SizeSelectIfGT &&(_bbdc > _abedd ||_bdbg > _ebac ))||(_fadg ==SizeSelectIfLTE &&(_bbdc <=_abedd ||_bdbg <=_ebac ))||(_fadg ==SizeSelectIfGTE &&(_bbdc >=_abedd ||_bdbg >=_ebac ))||(_fadg ==SizeSelectIfEQ &&(_bbdc ==_abedd ||_bdbg ==_ebac )){_gddb =1;
};case LocSelectIfBoth :if (_fadg ==SizeSelectIfLT &&(_bbdc < _abedd &&_bdbg < _ebac ))||(_fadg ==SizeSelectIfGT &&(_bbdc > _abedd &&_bdbg > _ebac ))||(_fadg ==SizeSelectIfLTE &&(_bbdc <=_abedd &&_bdbg <=_ebac ))||(_fadg ==SizeSelectIfGTE &&(_bbdc >=_abedd &&_bdbg >=_ebac ))||(_fadg ==SizeSelectIfEQ &&(_bbdc ==_abedd &&_bdbg ==_ebac )){_gddb =1;
};};_dagg .AddInt (_gddb );};return _dagg ,nil ;};func (_bbgcf *Bitmaps )ClipToBitmap (s *Bitmap )(*Bitmaps ,error ){const _acae ="B\u0069t\u006d\u0061\u0070\u0073\u002e\u0043\u006c\u0069p\u0054\u006f\u0042\u0069tm\u0061\u0070";if _bbgcf ==nil {return nil ,_eg .Error (_acae ,"\u0042\u0069\u0074\u006dap\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if s ==nil {return nil ,_eg .Error (_acae ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};_ccafd :=len (_bbgcf .Values );_fag :=&Bitmaps {Values :make ([]*Bitmap ,_ccafd ),Boxes :make ([]*_dg .Rectangle ,_ccafd )};
var (_cage ,_ceaa *Bitmap ;_fdgf *_dg .Rectangle ;_fcac error ;);for _bgcac :=0;_bgcac < _ccafd ;_bgcac ++{if _cage ,_fcac =_bbgcf .GetBitmap (_bgcac );_fcac !=nil {return nil ,_eg .Wrap (_fcac ,_acae ,"");};if _fdgf ,_fcac =_bbgcf .GetBox (_bgcac );_fcac !=nil {return nil ,_eg .Wrap (_fcac ,_acae ,"");
};if _ceaa ,_fcac =s .clipRectangle (_fdgf ,nil );_fcac !=nil {return nil ,_eg .Wrap (_fcac ,_acae ,"");};if _ceaa ,_fcac =_ceaa .And (_cage );_fcac !=nil {return nil ,_eg .Wrap (_fcac ,_acae ,"");};_fag .Values [_bgcac ]=_ceaa ;_fag .Boxes [_bgcac ]=_fdgf ;
};return _fag ,nil ;};func (_fbccf *ClassedPoints )xSortFunction ()func (_cgdd int ,_eceeg int )bool {return func (_cabb ,_ffgg int )bool {return _fbccf .XAtIndex (_cabb )< _fbccf .XAtIndex (_ffgg )};};func (_dgcg *Bitmap )GetChocolateData ()[]byte {if _dgcg .Color ==Vanilla {_dgcg .inverseData ();
};return _dgcg .Data ;};func _gdfb (_gefb ,_add int )*Bitmap {return &Bitmap {Width :_gefb ,Height :_add ,RowStride :(_gefb +7)>>3};};func (_efac *Bitmaps )Size ()int {return len (_efac .Values )};var (_cbdb *Bitmap ;_faga *Bitmap ;);func TstFrameBitmapData ()[]byte {return _cbdb .Data };
func TstImageBitmap ()*Bitmap {return _faga .Copy ()};func _bbbd (_gcfgg ,_fbfe *Bitmap ,_faae *Selection )(*Bitmap ,error ){const _adda ="c\u006c\u006f\u0073\u0065\u0042\u0069\u0074\u006d\u0061\u0070";var _fcd error ;if _gcfgg ,_fcd =_cffa (_gcfgg ,_fbfe ,_faae );
_fcd !=nil {return nil ,_fcd ;};_gaag ,_fcd :=_acd (nil ,_fbfe ,_faae );if _fcd !=nil {return nil ,_eg .Wrap (_fcd ,_adda ,"");};if _ ,_fcd =_eeffa (_gcfgg ,_gaag ,_faae );_fcd !=nil {return nil ,_eg .Wrap (_fcd ,_adda ,"");};return _gcfgg ,nil ;};func (_edfg *Bitmap )SetDefaultPixel (){for _ebgb :=range _edfg .Data {_edfg .Data [_ebgb ]=byte (0xff);
};};type Points []Point ;func TstNSymbol (t *_g .T ,scale ...int )*Bitmap {_efcf ,_acde :=NewWithData (4,5,[]byte {0x90,0xD0,0xB0,0x90,0x90});_a .NoError (t ,_acde );return TstGetScaledSymbol (t ,_efcf ,scale ...);};func (_bgbf Points )YSorter ()func (_becbd ,_bgdc int )bool {return func (_begf ,_dgba int )bool {return _bgbf [_begf ].Y < _bgbf [_dgba ].Y };
};func _bbca ()[]int {_afab :=make ([]int ,256);for _befg :=0;_befg <=0xff;_befg ++{_ecae :=byte (_befg );_afab [_ecae ]=int (_ecae &0x1)+(int (_ecae >>1)&0x1)+(int (_ecae >>2)&0x1)+(int (_ecae >>3)&0x1)+(int (_ecae >>4)&0x1)+(int (_ecae >>5)&0x1)+(int (_ecae >>6)&0x1)+(int (_ecae >>7)&0x1);
};return _afab ;};func _bgce (_eaef *_b .Stack )(_befeg *fillSegment ,_daead error ){const _gafb ="\u0070\u006f\u0070\u0046\u0069\u006c\u006c\u0053\u0065g\u006d\u0065\u006e\u0074";if _eaef ==nil {return nil ,_eg .Error (_gafb ,"\u006ei\u006c \u0073\u0074\u0061\u0063\u006b \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");
};if _eaef .Aux ==nil {return nil ,_eg .Error (_gafb ,"a\u0075x\u0053\u0074\u0061\u0063\u006b\u0020\u006e\u006ft\u0020\u0064\u0065\u0066in\u0065\u0064");};_bdbce ,_bcdc :=_eaef .Pop ();if !_bcdc {return nil ,nil ;};_bged ,_bcdc :=_bdbce .(*fillSegment );
if !_bcdc {return nil ,_eg .Error (_gafb ,"\u0073\u0074\u0061ck\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020c\u006fn\u0074a\u0069n\u0020\u002a\u0066\u0069\u006c\u006c\u0053\u0065\u0067\u006d\u0065\u006e\u0074");};_befeg =&fillSegment {_bged ._affeb ,_bged ._afcc ,_bged ._cabf +_bged ._bega ,_bged ._bega };
_eaef .Aux .Push (_bged );return _befeg ,nil ;};func _cffa (_adbcb ,_gaae *Bitmap ,_gcg *Selection )(*Bitmap ,error ){const _aefa ="\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u004d\u006f\u0072\u0070\u0068A\u0072\u0067\u0073\u0032";var _cccf ,_bcefc int ;
if _gaae ==nil {return nil ,_eg .Error (_aefa ,"s\u006fu\u0072\u0063\u0065\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");};if _gcg ==nil {return nil ,_eg .Error (_aefa ,"\u0073e\u006c \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};_cccf =_gcg .Width ;_bcefc =_gcg .Height ;if _cccf ==0||_bcefc ==0{return nil ,_eg .Error (_aefa ,"\u0073\u0065\u006c\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u0020\u0030");};if _adbcb ==nil {return _gaae .createTemplate (),nil ;};if _caacd :=_adbcb .resizeImageData (_gaae );
_caacd !=nil {return nil ,_caacd ;};return _adbcb ,nil ;};func (_dcedb Points )GetIntX (i int )(int ,error ){if i >=len (_dcedb ){return 0,_eg .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065t\u0049\u006e\u0074\u0058","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return int (_dcedb [i ].X ),nil ;};func (_cedf *Bitmap )removeBorderGeneral (_efee ,_fac ,_dgg ,_dab int )(*Bitmap ,error ){const _bbbf ="\u0072\u0065\u006d\u006fve\u0042\u006f\u0072\u0064\u0065\u0072\u0047\u0065\u006e\u0065\u0072\u0061\u006c";if _efee < 0||_fac < 0||_dgg < 0||_dab < 0{return nil ,_eg .Error (_bbbf ,"\u006e\u0065g\u0061\u0074\u0069\u0076\u0065\u0020\u0062\u0072\u006f\u0064\u0065\u0072\u0020\u0072\u0065\u006d\u006f\u0076\u0065\u0020\u0076\u0061lu\u0065\u0073");
};_gfgc ,_dgfg :=_cedf .Width ,_cedf .Height ;_cddg :=_gfgc -_efee -_fac ;_ebag :=_dgfg -_dgg -_dab ;if _cddg <=0{return nil ,_eg .Errorf (_bbbf ,"w\u0069\u0064\u0074\u0068: \u0025d\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u003e\u0020\u0030",_cddg );
};if _ebag <=0{return nil ,_eg .Errorf (_bbbf ,"\u0068\u0065\u0069\u0067ht\u003a\u0020\u0025\u0064\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u003e \u0030",_ebag );};_gge :=New (_cddg ,_ebag );_gge .Color =_cedf .Color ;_dgcgf :=_gge .RasterOperation (0,0,_cddg ,_ebag ,PixSrc ,_cedf ,_efee ,_dgg );
if _dgcgf !=nil {return nil ,_eg .Wrap (_dgcgf ,_bbbf ,"");};return _gge ,nil ;};func (_fbf *Bitmap )Copy ()*Bitmap {_bde :=make ([]byte ,len (_fbf .Data ));copy (_bde ,_fbf .Data );return &Bitmap {Width :_fbf .Width ,Height :_fbf .Height ,RowStride :_fbf .RowStride ,Data :_bde ,Color :_fbf .Color ,Text :_fbf .Text ,BitmapNumber :_fbf .BitmapNumber ,Special :_fbf .Special };
};func (_cfd *Bitmap )thresholdPixelSum (_cffe int )bool {var (_bfd int ;_fcaa uint8 ;_gba byte ;_bggf int ;);_ddcc :=_cfd .RowStride ;_bcba :=uint (_cfd .Width &0x07);if _bcba !=0{_fcaa =uint8 ((0xff<<(8-_bcba ))&0xff);_ddcc --;};for _fafb :=0;_fafb < _cfd .Height ;
_fafb ++{for _bggf =0;_bggf < _ddcc ;_bggf ++{_gba =_cfd .Data [_fafb *_cfd .RowStride +_bggf ];_bfd +=int (_aefb [_gba ]);};if _bcba !=0{_gba =_cfd .Data [_fafb *_cfd .RowStride +_bggf ]&_fcaa ;_bfd +=int (_aefb [_gba ]);};if _bfd > _cffe {return true ;
};};return false ;};var _aefb [256]uint8 ;func (_facg *Bitmaps )AddBitmap (bm *Bitmap ){_facg .Values =append (_facg .Values ,bm )};func (_caa *Bitmap )Zero ()bool {_gbdgd :=_caa .Width /8;_bbaf :=_caa .Width &7;var _gac byte ;if _bbaf !=0{_gac =byte (0xff<<uint (8-_bbaf ));
};var _bfbf ,_ggb ,_aca int ;for _ggb =0;_ggb < _caa .Height ;_ggb ++{_bfbf =_caa .RowStride *_ggb ;for _aca =0;_aca < _gbdgd ;_aca ,_bfbf =_aca +1,_bfbf +1{if _caa .Data [_bfbf ]!=0{return false ;};};if _bbaf > 0{if _caa .Data [_bfbf ]&_gac !=0{return false ;
};};};return true ;};func (_deb *Bitmap )setEightBytes (_aga int ,_ebbg uint64 )error {_dafg :=_deb .RowStride -(_aga %_deb .RowStride );if _deb .RowStride !=_deb .Width >>3{_dafg --;};if _dafg >=8{return _deb .setEightFullBytes (_aga ,_ebbg );};return _deb .setEightPartlyBytes (_aga ,_dafg ,_ebbg );
};var (_ddgeb =[]byte {0x00,0x80,0xC0,0xE0,0xF0,0xF8,0xFC,0xFE,0xFF};_ecdg =[]byte {0x00,0x01,0x03,0x07,0x0F,0x1F,0x3F,0x7F,0xFF};);func (_egd Points )GetIntY (i int )(int ,error ){if i >=len (_egd ){return 0,_eg .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065t\u0049\u006e\u0074\u0059","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return int (_egd [i ].Y ),nil ;};var _fegg =[]byte {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3E,0x78,0x27,0xC2,0x27,0x91,0x00,0x22,0x48,0x21,0x03,0x24,0x91,0x00,0x22,0x48,0x21,0x02,0xA4,0x95,0x00,0x22,0x48,0x21,0x02,0x64,0x9B,0x00,0x3C,0x78,0x21,0x02,0x27,0x91,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x15,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
const (SelDontCare SelectionValue =iota ;SelHit ;SelMiss ;);func (_efad *Bitmaps )SelectBySize (width ,height int ,tp LocationFilter ,relation SizeComparison )(_cgaga *Bitmaps ,_eccc error ){const _bcea ="B\u0069t\u006d\u0061\u0070\u0073\u002e\u0053\u0065\u006ce\u0063\u0074\u0042\u0079Si\u007a\u0065";
if _efad ==nil {return nil ,_eg .Error (_bcea ,"\u0027\u0062\u0027 B\u0069\u0074\u006d\u0061\u0070\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};switch tp {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_eg .Errorf (_bcea ,"\u0070\u0072\u006f\u0076\u0069d\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u006fc\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",tp );
};switch relation {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE ,SizeSelectIfEQ :default:return nil ,_eg .Errorf (_bcea ,"\u0069\u006e\u0076\u0061li\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025d\u0027",relation );
};_ffged ,_eccc :=_efad .makeSizeIndicator (width ,height ,tp ,relation );if _eccc !=nil {return nil ,_eg .Wrap (_eccc ,_bcea ,"");};_cgaga ,_eccc =_efad .selectByIndicator (_ffged );if _eccc !=nil {return nil ,_eg .Wrap (_eccc ,_bcea ,"");};return _cgaga ,nil ;
};type byHeight Bitmaps ;func (_agcb *Bitmaps )GroupByWidth ()(*BitmapsArray ,error ){const _fgge ="\u0047\u0072\u006fu\u0070\u0042\u0079\u0057\u0069\u0064\u0074\u0068";if len (_agcb .Values )==0{return nil ,_eg .Error (_fgge ,"\u006eo\u0020v\u0061\u006c\u0075\u0065\u0073 \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");
};_dbcag :=&BitmapsArray {};_agcb .SortByWidth ();_addd :=-1;_fbde :=-1;for _gdaec :=0;_gdaec < len (_agcb .Values );_gdaec ++{_cadd :=_agcb .Values [_gdaec ].Width ;if _cadd > _addd {_addd =_cadd ;_fbde ++;_dbcag .Values =append (_dbcag .Values ,&Bitmaps {});
};_dbcag .Values [_fbde ].AddBitmap (_agcb .Values [_gdaec ]);};return _dbcag ,nil ;};func _gbd (_fea *Bitmap ,_cfg int )(*Bitmap ,error ){const _ca ="\u0065x\u0070a\u006e\u0064\u0042\u0069\u006ea\u0072\u0079P\u006f\u0077\u0065\u0072\u0032";if _fea ==nil {return nil ,_eg .Error (_ca ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _cfg ==1{return _cecd (nil ,_fea );};if _cfg !=2&&_cfg !=4&&_cfg !=8{return nil ,_eg .Error (_ca ,"\u0066\u0061\u0063t\u006f\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0069n\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d\u0020\u0072\u0061\u006e\u0067\u0065");
};_ccg :=_cfg *_fea .Width ;_ag :=_cfg *_fea .Height ;_gad :=New (_ccg ,_ag );var _db error ;switch _cfg {case 2:_db =_bd (_gad ,_fea );case 4:_db =_ged (_gad ,_fea );case 8:_db =_bgd (_gad ,_fea );};if _db !=nil {return nil ,_eg .Wrap (_db ,_ca ,"");};
return _gad ,nil ;};func _becc ()(_bgf []byte ){_bgf =make ([]byte ,256);for _cbfe :=0;_cbfe < 256;_cbfe ++{_eegf :=byte (_cbfe );_bgf [_eegf ]=(_eegf &0x01)|((_eegf &0x04)>>1)|((_eegf &0x10)>>2)|((_eegf &0x40)>>3)|((_eegf &0x02)<<3)|((_eegf &0x08)<<2)|((_eegf &0x20)<<1)|(_eegf &0x80);
};return _bgf ;};func (_agdg *Bitmap )CountPixels ()int {return _agdg .countPixels ()};type SizeSelection int ;func (_eccg *Bitmaps )SelectByIndexes (idx []int )(*Bitmaps ,error ){const _bfdaa ="B\u0069\u0074\u006d\u0061\u0070\u0073.\u0053\u006f\u0072\u0074\u0049\u006e\u0064\u0065\u0078e\u0073\u0042\u0079H\u0065i\u0067\u0068\u0074";
_aaec ,_gbdfc :=_eccg .selectByIndexes (idx );if _gbdfc !=nil {return nil ,_eg .Wrap (_gbdfc ,_bfdaa ,"");};return _aaec ,nil ;};func (_cecb *BitmapsArray )AddBitmaps (bm *Bitmaps ){_cecb .Values =append (_cecb .Values ,bm )};func TstESymbol (t *_g .T ,scale ...int )*Bitmap {_ecgfe ,_bcag :=NewWithData (4,5,[]byte {0xF0,0x80,0xE0,0x80,0xF0});
_a .NoError (t ,_bcag );return TstGetScaledSymbol (t ,_ecgfe ,scale ...);};func (_adbc *Bitmap )GetByteIndex (x ,y int )int {return y *_adbc .RowStride +(x >>3)};func (_gfcg *ClassedPoints )YAtIndex (i int )float32 {return (*_gfcg .Points )[_gfcg .IntSlice [i ]].Y };
func _gbgb (_cgcb ,_affacf ,_ecgg byte )byte {return (_cgcb &^(_ecgg ))|(_affacf &_ecgg )};func (_gdde *Bitmaps )CountPixels ()*_b .NumSlice {_afec :=&_b .NumSlice {};for _ ,_egbf :=range _gdde .Values {_afec .AddInt (_egbf .CountPixels ());};return _afec ;
};type SizeComparison int ;func _bb (_dbe *Bitmap ,_cad int ,_dca []byte )(_dag *Bitmap ,_gdc error ){const _efbe ="\u0072\u0065\u0064\u0075\u0063\u0065\u0052\u0061\u006e\u006b\u0042\u0069n\u0061\u0072\u0079\u0032";if _dbe ==nil {return nil ,_eg .Error (_efbe ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");
};if _cad < 1||_cad > 4{return nil ,_eg .Error (_efbe ,"\u006c\u0065\u0076\u0065\u006c\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0069\u006e\u0020\u0073e\u0074\u0020\u007b\u0031\u002c\u0032\u002c\u0033\u002c\u0034\u007d");};if _dbe .Height <=1{return nil ,_eg .Errorf (_efbe ,"\u0073o\u0075\u0072c\u0065\u0020\u0068e\u0069\u0067\u0068\u0074\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061t\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0027\u0032\u0027\u0020-\u0020\u0069\u0073\u003a\u0020\u0027\u0025\u0064\u0027",_dbe .Height );
};_dag =New (_dbe .Width /2,_dbe .Height /2);if _dca ==nil {_dca =_becc ();};_acg :=_ded (_dbe .RowStride ,2*_dag .RowStride );switch _cad {case 1:_gdc =_fef (_dbe ,_dag ,_cad ,_dca ,_acg );case 2:_gdc =_cdf (_dbe ,_dag ,_cad ,_dca ,_acg );case 3:_gdc =_edfc (_dbe ,_dag ,_cad ,_dca ,_acg );
case 4:_gdc =_gcfg (_dbe ,_dag ,_cad ,_dca ,_acg );};if _gdc !=nil {return nil ,_gdc ;};return _dag ,nil ;};type RasterOperator int ;func (_fdab *Boxes )Get (i int )(*_dg .Rectangle ,error ){const _gebef ="\u0042o\u0078\u0065\u0073\u002e\u0047\u0065t";
if _fdab ==nil {return nil ,_eg .Error (_gebef ,"\u0027\u0042\u006f\u0078es\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if i > len (*_fdab )-1{return nil ,_eg .Errorf (_gebef ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return (*_fdab )[i ],nil ;};func (_efga MorphProcess )verify (_efbf int ,_ebfc ,_ebgfg *int )error {const _babc ="\u004d\u006f\u0072\u0070hP\u0072\u006f\u0063\u0065\u0073\u0073\u002e\u0076\u0065\u0072\u0069\u0066\u0079";switch _efga .Operation {case MopDilation ,MopErosion ,MopOpening ,MopClosing :if len (_efga .Arguments )!=2{return _eg .Error (_babc ,"\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0064\u0027\u002c\u0020\u0027\u0065\u0027\u002c \u0027\u006f\u0027\u002c\u0020\u0027\u0063\u0027\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0032\u0020\u0061r\u0067\u0075\u006d\u0065\u006et\u0073");
};_gfge ,_dbcc :=_efga .getWidthHeight ();if _gfge <=0||_dbcc <=0{return _eg .Error (_babc ,"O\u0070er\u0061t\u0069o\u006e\u003a\u0020\u0027\u0064'\u002c\u0020\u0027e\u0027\u002c\u0020\u0027\u006f'\u002c\u0020\u0027c\u0027\u0020\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0062\u006f\u0074h w\u0069\u0064\u0074\u0068\u0020\u0061n\u0064\u0020\u0068\u0065\u0069\u0067\u0068\u0074\u0020\u0074\u006f\u0020b\u0065 \u003e\u003d\u0020\u0030");
};case MopRankBinaryReduction :_agedg :=len (_efga .Arguments );*_ebfc +=_agedg ;if _agedg < 1||_agedg > 4{return _eg .Error (_babc ,"\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0072\u0027\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u0031\u0020\u0061\u006e\u0064\u0020\u0061\u0074\u0020\u006d\u006fs\u0074\u0020\u0034\u0020\u0061\u0072g\u0075\u006d\u0065n\u0074\u0073");
};for _ecgc :=0;_ecgc < _agedg ;_ecgc ++{if _efga .Arguments [_ecgc ]< 1||_efga .Arguments [_ecgc ]> 4{return _eg .Error (_babc ,"\u0052\u0061\u006e\u006b\u0042\u0069n\u0061\u0072\u0079\u0052\u0065\u0064\u0075\u0063\u0074\u0069\u006f\u006e\u0020\u006c\u0065\u0076\u0065\u006c\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065 \u00280\u002c\u0020\u0034\u003e");
};};case MopReplicativeBinaryExpansion :if len (_efga .Arguments )==0{return _eg .Error (_babc ,"\u0052\u0065\u0070\u006c\u0069\u0063\u0061\u0074i\u0076\u0065\u0042in\u0061\u0072\u0079\u0045\u0078\u0070a\u006e\u0073\u0069\u006f\u006e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020o\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_gcba :=_efga .Arguments [0];if _gcba !=2&&_gcba !=4&&_gcba !=8{return _eg .Error (_babc ,"R\u0065\u0070\u006c\u0069\u0063\u0061\u0074\u0069\u0076\u0065\u0042\u0069\u006e\u0061\u0072\u0079\u0045\u0078\u0070\u0061\u006e\u0073\u0069\u006f\u006e\u0020m\u0075s\u0074\u0020\u0062\u0065 \u006f\u0066 \u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d");
};*_ebfc -=_fgee [_gcba /4];case MopAddBorder :if len (_efga .Arguments )==0{return _eg .Error (_babc ,"\u0041\u0064\u0064B\u006f\u0072\u0064\u0065r\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gcc :=_efga .Arguments [0];if _efbf > 0{return _eg .Error (_babc ,"\u0041\u0064\u0064\u0042\u006f\u0072\u0064\u0065\u0072\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020f\u0069\u0072\u0073\u0074\u0020\u006d\u006f\u0072\u0070\u0068\u0020\u0070\u0072o\u0063\u0065\u0073\u0073");
};if _gcc < 1{return _eg .Error (_babc ,"\u0041\u0064\u0064\u0042o\u0072\u0064\u0065\u0072\u0020\u0076\u0061\u006c\u0075\u0065 \u006co\u0077\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u0030");};*_ebgfg =_gcc ;};return nil ;};func (_ebff *Bitmap )nextOnPixelLow (_caag ,_aeb ,_ggdc ,_eda ,_aeed int )(_cbe _dg .Point ,_efe bool ,_ddge error ){const _cbfeb ="B\u0069\u0074\u006d\u0061p.\u006ee\u0078\u0074\u004f\u006e\u0050i\u0078\u0065\u006c\u004c\u006f\u0077";
var (_ecag int ;_cdfd byte ;);_bdee :=_aeed *_ggdc ;_gebcc :=_bdee +(_eda /8);if _cdfd ,_ddge =_ebff .GetByte (_gebcc );_ddge !=nil {return _cbe ,false ,_eg .Wrap (_ddge ,_cbfeb ,"\u0078\u0053\u0074\u0061\u0072\u0074\u0020\u0061\u006e\u0064 \u0079\u0053\u0074\u0061\u0072\u0074\u0020o\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065");
};if _cdfd !=0{_bgab :=_eda -(_eda %8)+7;for _ecag =_eda ;_ecag <=_bgab &&_ecag < _caag ;_ecag ++{if _ebff .GetPixel (_ecag ,_aeed ){_cbe .X =_ecag ;_cbe .Y =_aeed ;return _cbe ,true ,nil ;};};};_gbg :=(_eda /8)+1;_ecag =8*_gbg ;var _aag int ;for _gebcc =_bdee +_gbg ;
_ecag < _caag ;_gebcc ,_ecag =_gebcc +1,_ecag +8{if _cdfd ,_ddge =_ebff .GetByte (_gebcc );_ddge !=nil {return _cbe ,false ,_eg .Wrap (_ddge ,_cbfeb ,"r\u0065\u0073\u0074\u0020of\u0020t\u0068\u0065\u0020\u006c\u0069n\u0065\u0020\u0062\u0079\u0074\u0065");
};if _cdfd ==0{continue ;};for _aag =0;_aag < 8&&_ecag < _caag ;_aag ,_ecag =_aag +1,_ecag +1{if _ebff .GetPixel (_ecag ,_aeed ){_cbe .X =_ecag ;_cbe .Y =_aeed ;return _cbe ,true ,nil ;};};};for _fgeg :=_aeed +1;_fgeg < _aeb ;_fgeg ++{_bdee =_fgeg *_ggdc ;
for _gebcc ,_ecag =_bdee ,0;_ecag < _caag ;_gebcc ,_ecag =_gebcc +1,_ecag +8{if _cdfd ,_ddge =_ebff .GetByte (_gebcc );_ddge !=nil {return _cbe ,false ,_eg .Wrap (_ddge ,_cbfeb ,"\u0066o\u006cl\u006f\u0077\u0069\u006e\u0067\u0020\u006c\u0069\u006e\u0065\u0073");
};if _cdfd ==0{continue ;};for _aag =0;_aag < 8&&_ecag < _caag ;_aag ,_ecag =_aag +1,_ecag +1{if _ebff .GetPixel (_ecag ,_fgeg ){_cbe .X =_ecag ;_cbe .Y =_fgeg ;return _cbe ,true ,nil ;};};};};return _cbe ,false ,nil ;};const (_fed shift =iota ;_eaaa ;
);func _ggad (_ecgfg *Bitmap ,_efec ,_baad ,_ecdde ,_bacaa int ,_dedbf RasterOperator ,_abed *Bitmap ,_dggfb ,_ccgc int )error {var (_ececc bool ;_eagaa bool ;_begfe int ;_facd int ;_badac int ;_bfad bool ;_daaab byte ;_bdbc int ;_febd int ;_gded int ;
_eggb ,_eaec int ;);_dfeec :=8-(_efec &7);_aeff :=_ecdg [_dfeec ];_fecg :=_ecgfg .RowStride *_baad +(_efec >>3);_ddd :=_abed .RowStride *_ccgc +(_dggfb >>3);if _ecdde < _dfeec {_ececc =true ;_aeff &=_ddgeb [8-_dfeec +_ecdde ];};if !_ececc {_begfe =(_ecdde -_dfeec )>>3;
if _begfe > 0{_eagaa =true ;_facd =_fecg +1;_badac =_ddd +1;};};_bdbc =(_efec +_ecdde )&7;if !(_ececc ||_bdbc ==0){_bfad =true ;_daaab =_ddgeb [_bdbc ];_febd =_fecg +1+_begfe ;_gded =_ddd +1+_begfe ;};switch _dedbf {case PixSrc :for _eggb =0;_eggb < _bacaa ;
_eggb ++{_ecgfg .Data [_fecg ]=_gbgb (_ecgfg .Data [_fecg ],_abed .Data [_ddd ],_aeff );_fecg +=_ecgfg .RowStride ;_ddd +=_abed .RowStride ;};if _eagaa {for _eggb =0;_eggb < _bacaa ;_eggb ++{for _eaec =0;_eaec < _begfe ;_eaec ++{_ecgfg .Data [_facd +_eaec ]=_abed .Data [_badac +_eaec ];
};_facd +=_ecgfg .RowStride ;_badac +=_abed .RowStride ;};};if _bfad {for _eggb =0;_eggb < _bacaa ;_eggb ++{_ecgfg .Data [_febd ]=_gbgb (_ecgfg .Data [_febd ],_abed .Data [_gded ],_daaab );_febd +=_ecgfg .RowStride ;_gded +=_abed .RowStride ;};};case PixNotSrc :for _eggb =0;
_eggb < _bacaa ;_eggb ++{_ecgfg .Data [_fecg ]=_gbgb (_ecgfg .Data [_fecg ],^_abed .Data [_ddd ],_aeff );_fecg +=_ecgfg .RowStride ;_ddd +=_abed .RowStride ;};if _eagaa {for _eggb =0;_eggb < _bacaa ;_eggb ++{for _eaec =0;_eaec < _begfe ;_eaec ++{_ecgfg .Data [_facd +_eaec ]=^_abed .Data [_badac +_eaec ];
};_facd +=_ecgfg .RowStride ;_badac +=_abed .RowStride ;};};if _bfad {for _eggb =0;_eggb < _bacaa ;_eggb ++{_ecgfg .Data [_febd ]=_gbgb (_ecgfg .Data [_febd ],^_abed .Data [_gded ],_daaab );_febd +=_ecgfg .RowStride ;_gded +=_abed .RowStride ;};};case PixSrcOrDst :for _eggb =0;
_eggb < _bacaa ;_eggb ++{_ecgfg .Data [_fecg ]=_gbgb (_ecgfg .Data [_fecg ],_abed .Data [_ddd ]|_ecgfg .Data [_fecg ],_aeff );_fecg +=_ecgfg .RowStride ;_ddd +=_abed .RowStride ;};if _eagaa {for _eggb =0;_eggb < _bacaa ;_eggb ++{for _eaec =0;_eaec < _begfe ;
_eaec ++{_ecgfg .Data [_facd +_eaec ]|=_abed .Data [_badac +_eaec ];};_facd +=_ecgfg .RowStride ;_badac +=_abed .RowStride ;};};if _bfad {for _eggb =0;_eggb < _bacaa ;_eggb ++{_ecgfg .Data [_febd ]=_gbgb (_ecgfg .Data [_febd ],_abed .Data [_gded ]|_ecgfg .Data [_febd ],_daaab );
_febd +=_ecgfg .RowStride ;_gded +=_abed .RowStride ;};};case PixSrcAndDst :for _eggb =0;_eggb < _bacaa ;_eggb ++{_ecgfg .Data [_fecg ]=_gbgb (_ecgfg .Data [_fecg ],_abed .Data [_ddd ]&_ecgfg .Data [_fecg ],_aeff );_fecg +=_ecgfg .RowStride ;_ddd +=_abed .RowStride ;
};if _eagaa {for _eggb =0;_eggb < _bacaa ;_eggb ++{for _eaec =0;_eaec < _begfe ;_eaec ++{_ecgfg .Data [_facd +_eaec ]&=_abed .Data [_badac +_eaec ];};_facd +=_ecgfg .RowStride ;_badac +=_abed .RowStride ;};};if _bfad {for _eggb =0;_eggb < _bacaa ;_eggb ++{_ecgfg .Data [_febd ]=_gbgb (_ecgfg .Data [_febd ],_abed .Data [_gded ]&_ecgfg .Data [_febd ],_daaab );
_febd +=_ecgfg .RowStride ;_gded +=_abed .RowStride ;};};case PixSrcXorDst :for _eggb =0;_eggb < _bacaa ;_eggb ++{_ecgfg .Data [_fecg ]=_gbgb (_ecgfg .Data [_fecg ],_abed .Data [_ddd ]^_ecgfg .Data [_fecg ],_aeff );_fecg +=_ecgfg .RowStride ;_ddd +=_abed .RowStride ;
};if _eagaa {for _eggb =0;_eggb < _bacaa ;_eggb ++{for _eaec =0;_eaec < _begfe ;_eaec ++{_ecgfg .Data [_facd +_eaec ]^=_abed .Data [_badac +_eaec ];};_facd +=_ecgfg .RowStride ;_badac +=_abed .RowStride ;};};if _bfad {for _eggb =0;_eggb < _bacaa ;_eggb ++{_ecgfg .Data [_febd ]=_gbgb (_ecgfg .Data [_febd ],_abed .Data [_gded ]^_ecgfg .Data [_febd ],_daaab );
_febd +=_ecgfg .RowStride ;_gded +=_abed .RowStride ;};};case PixNotSrcOrDst :for _eggb =0;_eggb < _bacaa ;_eggb ++{_ecgfg .Data [_fecg ]=_gbgb (_ecgfg .Data [_fecg ],^(_abed .Data [_ddd ])|_ecgfg .Data [_fecg ],_aeff );_fecg +=_ecgfg .RowStride ;_ddd +=_abed .RowStride ;
};if _eagaa {for _eggb =0;_eggb < _bacaa ;_eggb ++{for _eaec =0;_eaec < _begfe ;_eaec ++{_ecgfg .Data [_facd +_eaec ]|=^(_abed .Data [_badac +_eaec ]);};_facd +=_ecgfg .RowStride ;_badac +=_abed .RowStride ;};};if _bfad {for _eggb =0;_eggb < _bacaa ;_eggb ++{_ecgfg .Data [_febd ]=_gbgb (_ecgfg .Data [_febd ],^(_abed .Data [_gded ])|_ecgfg .Data [_febd ],_daaab );
_febd +=_ecgfg .RowStride ;_gded +=_abed .RowStride ;};};case PixNotSrcAndDst :for _eggb =0;_eggb < _bacaa ;_eggb ++{_ecgfg .Data [_fecg ]=_gbgb (_ecgfg .Data [_fecg ],^(_abed .Data [_ddd ])&_ecgfg .Data [_fecg ],_aeff );_fecg +=_ecgfg .RowStride ;_ddd +=_abed .RowStride ;
};if _eagaa {for _eggb =0;_eggb < _bacaa ;_eggb ++{for _eaec =0;_eaec < _begfe ;_eaec ++{_ecgfg .Data [_facd +_eaec ]&=^_abed .Data [_badac +_eaec ];};_facd +=_ecgfg .RowStride ;_badac +=_abed .RowStride ;};};if _bfad {for _eggb =0;_eggb < _bacaa ;_eggb ++{_ecgfg .Data [_febd ]=_gbgb (_ecgfg .Data [_febd ],^(_abed .Data [_gded ])&_ecgfg .Data [_febd ],_daaab );
_febd +=_ecgfg .RowStride ;_gded +=_abed .RowStride ;};};case PixSrcOrNotDst :for _eggb =0;_eggb < _bacaa ;_eggb ++{_ecgfg .Data [_fecg ]=_gbgb (_ecgfg .Data [_fecg ],_abed .Data [_ddd ]|^(_ecgfg .Data [_fecg ]),_aeff );_fecg +=_ecgfg .RowStride ;_ddd +=_abed .RowStride ;
};if _eagaa {for _eggb =0;_eggb < _bacaa ;_eggb ++{for _eaec =0;_eaec < _begfe ;_eaec ++{_ecgfg .Data [_facd +_eaec ]=_abed .Data [_badac +_eaec ]|^(_ecgfg .Data [_facd +_eaec ]);};_facd +=_ecgfg .RowStride ;_badac +=_abed .RowStride ;};};if _bfad {for _eggb =0;
_eggb < _bacaa ;_eggb ++{_ecgfg .Data [_febd ]=_gbgb (_ecgfg .Data [_febd ],_abed .Data [_gded ]|^(_ecgfg .Data [_febd ]),_daaab );_febd +=_ecgfg .RowStride ;_gded +=_abed .RowStride ;};};case PixSrcAndNotDst :for _eggb =0;_eggb < _bacaa ;_eggb ++{_ecgfg .Data [_fecg ]=_gbgb (_ecgfg .Data [_fecg ],_abed .Data [_ddd ]&^(_ecgfg .Data [_fecg ]),_aeff );
_fecg +=_ecgfg .RowStride ;_ddd +=_abed .RowStride ;};if _eagaa {for _eggb =0;_eggb < _bacaa ;_eggb ++{for _eaec =0;_eaec < _begfe ;_eaec ++{_ecgfg .Data [_facd +_eaec ]=_abed .Data [_badac +_eaec ]&^(_ecgfg .Data [_facd +_eaec ]);};_facd +=_ecgfg .RowStride ;
_badac +=_abed .RowStride ;};};if _bfad {for _eggb =0;_eggb < _bacaa ;_eggb ++{_ecgfg .Data [_febd ]=_gbgb (_ecgfg .Data [_febd ],_abed .Data [_gded ]&^(_ecgfg .Data [_febd ]),_daaab );_febd +=_ecgfg .RowStride ;_gded +=_abed .RowStride ;};};case PixNotPixSrcOrDst :for _eggb =0;
_eggb < _bacaa ;_eggb ++{_ecgfg .Data [_fecg ]=_gbgb (_ecgfg .Data [_fecg ],^(_abed .Data [_ddd ]|_ecgfg .Data [_fecg ]),_aeff );_fecg +=_ecgfg .RowStride ;_ddd +=_abed .RowStride ;};if _eagaa {for _eggb =0;_eggb < _bacaa ;_eggb ++{for _eaec =0;_eaec < _begfe ;
_eaec ++{_ecgfg .Data [_facd +_eaec ]=^(_abed .Data [_badac +_eaec ]|_ecgfg .Data [_facd +_eaec ]);};_facd +=_ecgfg .RowStride ;_badac +=_abed .RowStride ;};};if _bfad {for _eggb =0;_eggb < _bacaa ;_eggb ++{_ecgfg .Data [_febd ]=_gbgb (_ecgfg .Data [_febd ],^(_abed .Data [_gded ]|_ecgfg .Data [_febd ]),_daaab );
_febd +=_ecgfg .RowStride ;_gded +=_abed .RowStride ;};};case PixNotPixSrcAndDst :for _eggb =0;_eggb < _bacaa ;_eggb ++{_ecgfg .Data [_fecg ]=_gbgb (_ecgfg .Data [_fecg ],^(_abed .Data [_ddd ]&_ecgfg .Data [_fecg ]),_aeff );_fecg +=_ecgfg .RowStride ;_ddd +=_abed .RowStride ;
};if _eagaa {for _eggb =0;_eggb < _bacaa ;_eggb ++{for _eaec =0;_eaec < _begfe ;_eaec ++{_ecgfg .Data [_facd +_eaec ]=^(_abed .Data [_badac +_eaec ]&_ecgfg .Data [_facd +_eaec ]);};_facd +=_ecgfg .RowStride ;_badac +=_abed .RowStride ;};};if _bfad {for _eggb =0;
_eggb < _bacaa ;_eggb ++{_ecgfg .Data [_febd ]=_gbgb (_ecgfg .Data [_febd ],^(_abed .Data [_gded ]&_ecgfg .Data [_febd ]),_daaab );_febd +=_ecgfg .RowStride ;_gded +=_abed .RowStride ;};};case PixNotPixSrcXorDst :for _eggb =0;_eggb < _bacaa ;_eggb ++{_ecgfg .Data [_fecg ]=_gbgb (_ecgfg .Data [_fecg ],^(_abed .Data [_ddd ]^_ecgfg .Data [_fecg ]),_aeff );
_fecg +=_ecgfg .RowStride ;_ddd +=_abed .RowStride ;};if _eagaa {for _eggb =0;_eggb < _bacaa ;_eggb ++{for _eaec =0;_eaec < _begfe ;_eaec ++{_ecgfg .Data [_facd +_eaec ]=^(_abed .Data [_badac +_eaec ]^_ecgfg .Data [_facd +_eaec ]);};_facd +=_ecgfg .RowStride ;
_badac +=_abed .RowStride ;};};if _bfad {for _eggb =0;_eggb < _bacaa ;_eggb ++{_ecgfg .Data [_febd ]=_gbgb (_ecgfg .Data [_febd ],^(_abed .Data [_gded ]^_ecgfg .Data [_febd ]),_daaab );_febd +=_ecgfg .RowStride ;_gded +=_abed .RowStride ;};};default:_dc .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070e\u0072\u0061\u0074o\u0072:\u0020\u0025\u0064",_dedbf );
return _eg .Error ("\u0072\u0061\u0073\u0074er\u004f\u0070\u0056\u0041\u006c\u0069\u0067\u006e\u0065\u0064\u004c\u006f\u0077","\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");
};return nil ;};func (_cfae *Bitmap )RasterOperation (dx ,dy ,dw ,dh int ,op RasterOperator ,src *Bitmap ,sx ,sy int )error {return _fgad (_cfae ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );};func _dcc (_gag *Bitmap ,_efb ...int )(_ebg *Bitmap ,_bec error ){const _bga ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0043\u0061\u0073\u0063\u0061\u0064\u0065";
if _gag ==nil {return nil ,_eg .Error (_bga ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if len (_efb )==0||len (_efb )> 4{return nil ,_eg .Error (_bga ,"t\u0068\u0065\u0072\u0065\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0074\u0020\u006cea\u0073\u0074\u0020\u006fn\u0065\u0020\u0061\u006e\u0064\u0020\u0061\u0074\u0020mo\u0073\u0074 \u0034\u0020\u006c\u0065\u0076\u0065\u006c\u0073");
};if _efb [0]<=0{_dc .Log .Debug ("\u006c\u0065\u0076\u0065\u006c\u0031\u0020\u003c\u003d\u0020\u0030 \u002d\u0020\u006e\u006f\u0020\u0072\u0065\u0064\u0075\u0063t\u0069\u006f\u006e");_ebg ,_bec =_cecd (nil ,_gag );if _bec !=nil {return nil ,_eg .Wrap (_bec ,_bga ,"l\u0065\u0076\u0065\u006c\u0031\u0020\u003c\u003d\u0020\u0030");
};return _ebg ,nil ;};_gga :=_becc ();_ebg =_gag ;for _bcb ,_geda :=range _efb {if _geda <=0{break ;};_ebg ,_bec =_bb (_ebg ,_geda ,_gga );if _bec !=nil {return nil ,_eg .Wrapf (_bec ,_bga ,"\u006c\u0065\u0076\u0065\u006c\u0025\u0064\u0020\u0072\u0065\u0064\u0075c\u0074\u0069\u006f\u006e",_bcb );
};};return _ebg ,nil ;};func _cgfd (_ecee ,_cagd *Bitmap ,_fdgd ,_bee ,_ebcd uint ,_beab ,_ffa int ,_gaba bool ,_dbgef ,_cfcd int )error {for _bbcd :=_beab ;_bbcd < _ffa ;_bbcd ++{if _dbgef +1< len (_ecee .Data ){_acef :=_bbcd +1==_ffa ;_ffeg ,_bdff :=_ecee .GetByte (_dbgef );
if _bdff !=nil {return _bdff ;};_dbgef ++;_ffeg <<=_fdgd ;_dfbf ,_bdff :=_ecee .GetByte (_dbgef );if _bdff !=nil {return _bdff ;};_dfbf >>=_bee ;_bbba :=_ffeg |_dfbf ;if _acef &&!_gaba {_bbba =_bcfa (_ebcd ,_bbba );};_bdff =_cagd .SetByte (_cfcd ,_bbba );
if _bdff !=nil {return _bdff ;};_cfcd ++;if _acef &&_gaba {_ffce ,_fbaaa :=_ecee .GetByte (_dbgef );if _fbaaa !=nil {return _fbaaa ;};_ffce <<=_fdgd ;_bbba =_bcfa (_ebcd ,_ffce );if _fbaaa =_cagd .SetByte (_cfcd ,_bbba );_fbaaa !=nil {return _fbaaa ;};
};continue ;};_ebgc ,_eage :=_ecee .GetByte (_dbgef );if _eage !=nil {_dc .Log .Debug ("G\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0068\u0065\u0020\u0076\u0061l\u0075\u0065\u0020\u0061\u0074\u003a\u0020%\u0064\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020%\u0073",_dbgef ,_eage );
return _eage ;};_ebgc <<=_fdgd ;_dbgef ++;_eage =_cagd .SetByte (_cfcd ,_ebgc );if _eage !=nil {return _eage ;};_cfcd ++;};return nil ;};func (_cgce *Bitmap )centroid (_aeedg ,_gcfce []int )(Point ,error ){_acebb :=Point {};_cgce .setPadBits (0);if len (_aeedg )==0{_aeedg =_gfga ();
};if len (_gcfce )==0{_gcfce =_bbca ();};var _daad ,_aedaeb ,_bbfa ,_gfed ,_ecdda ,_daba int ;var _ecdf byte ;for _ecdda =0;_ecdda < _cgce .Height ;_ecdda ++{_fbe :=_cgce .RowStride *_ecdda ;_gfed =0;for _daba =0;_daba < _cgce .RowStride ;_daba ++{_ecdf =_cgce .Data [_fbe +_daba ];
if _ecdf !=0{_gfed +=_gcfce [_ecdf ];_daad +=_aeedg [_ecdf ]+_daba *8*_gcfce [_ecdf ];};};_bbfa +=_gfed ;_aedaeb +=_gfed *_ecdda ;};if _bbfa !=0{_acebb .X =float32 (_daad )/float32 (_bbfa );_acebb .Y =float32 (_aedaeb )/float32 (_bbfa );};return _acebb ,nil ;
};const (AsymmetricMorphBC BoundaryCondition =iota ;SymmetricMorphBC ;);func (_fge *Bitmap )CreateTemplate ()*Bitmap {return _fge .createTemplate ()};func (_edda *Bitmap )GetVanillaData ()[]byte {if _edda .Color ==Chocolate {_edda .inverseData ();};return _edda .Data ;
};func (_dbgd Points )XSorter ()func (_ccad ,_egfe int )bool {return func (_dfede ,_abba int )bool {return _dbgd [_dfede ].X < _dbgd [_abba ].X };};func _eddcc (_facc ,_ffag *Bitmap ,_babf ,_dcda int )(*Bitmap ,error ){const _gaef ="\u006fp\u0065\u006e\u0042\u0072\u0069\u0063k";
if _ffag ==nil {return nil ,_eg .Error (_gaef ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _babf < 1&&_dcda < 1{return nil ,_eg .Error (_gaef ,"\u0068\u0053\u0069\u007ae \u003c\u0020\u0031\u0020\u0026\u0026\u0020\u0076\u0053\u0069\u007a\u0065\u0020\u003c \u0031");
};if _babf ==1&&_dcda ==1{return _ffag .Copy (),nil ;};if _babf ==1||_dcda ==1{var _abff error ;_bfgd :=SelCreateBrick (_dcda ,_babf ,_dcda /2,_babf /2,SelHit );_facc ,_abff =_feeg (_facc ,_ffag ,_bfgd );if _abff !=nil {return nil ,_eg .Wrap (_abff ,_gaef ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _facc ,nil ;};_gfged :=SelCreateBrick (1,_babf ,0,_babf /2,SelHit );_cfcb :=SelCreateBrick (_dcda ,1,_dcda /2,0,SelHit );_cce ,_cddgc :=_eeffa (nil ,_ffag ,_gfged );if _cddgc !=nil {return nil ,_eg .Wrap (_cddgc ,_gaef ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};_facc ,_cddgc =_eeffa (_facc ,_cce ,_cfcb );if _cddgc !=nil {return nil ,_eg .Wrap (_cddgc ,_gaef ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};_ ,_cddgc =_acd (_cce ,_facc ,_gfged );if _cddgc !=nil {return nil ,_eg .Wrap (_cddgc ,_gaef ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};_ ,_cddgc =_acd (_facc ,_cce ,_cfcb );if _cddgc !=nil {return nil ,_eg .Wrap (_cddgc ,_gaef ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};return _facc ,nil ;};var MorphBC BoundaryCondition ;func _edfd (_dgaf *Bitmap ,_dgbd ...MorphProcess )(_eccf *Bitmap ,_gegb error ){const _fbeg ="\u006d\u006f\u0072\u0070\u0068\u0053\u0065\u0071\u0075\u0065\u006e\u0063\u0065";
if _dgaf ==nil {return nil ,_eg .Error (_fbeg ,"\u006d\u006f\u0072\u0070\u0068\u0053\u0065\u0071\u0075\u0065\u006e\u0063\u0065 \u0073\u006f\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};if len (_dgbd )==0{return nil ,_eg .Error (_fbeg ,"m\u006f\u0072\u0070\u0068\u0053\u0065q\u0075\u0065\u006e\u0063\u0065\u002c \u0073\u0065\u0071\u0075\u0065\u006e\u0063e\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");};if _gegb =_cdff (_dgbd ...);
_gegb !=nil {return nil ,_eg .Wrap (_gegb ,_fbeg ,"");};var _ccge ,_ffdf ,_dgeg int ;_eccf =_dgaf .Copy ();for _ ,_cfegc :=range _dgbd {switch _cfegc .Operation {case MopDilation :_ccge ,_ffdf =_cfegc .getWidthHeight ();_eccf ,_gegb =DilateBrick (nil ,_eccf ,_ccge ,_ffdf );
if _gegb !=nil {return nil ,_eg .Wrap (_gegb ,_fbeg ,"");};case MopErosion :_ccge ,_ffdf =_cfegc .getWidthHeight ();_eccf ,_gegb =_cbggf (nil ,_eccf ,_ccge ,_ffdf );if _gegb !=nil {return nil ,_eg .Wrap (_gegb ,_fbeg ,"");};case MopOpening :_ccge ,_ffdf =_cfegc .getWidthHeight ();
_eccf ,_gegb =_eddcc (nil ,_eccf ,_ccge ,_ffdf );if _gegb !=nil {return nil ,_eg .Wrap (_gegb ,_fbeg ,"");};case MopClosing :_ccge ,_ffdf =_cfegc .getWidthHeight ();_eccf ,_gegb =_agcd (nil ,_eccf ,_ccge ,_ffdf );if _gegb !=nil {return nil ,_eg .Wrap (_gegb ,_fbeg ,"");
};case MopRankBinaryReduction :_eccf ,_gegb =_dcc (_eccf ,_cfegc .Arguments ...);if _gegb !=nil {return nil ,_eg .Wrap (_gegb ,_fbeg ,"");};case MopReplicativeBinaryExpansion :_eccf ,_gegb =_dfcg (_eccf ,_cfegc .Arguments [0]);if _gegb !=nil {return nil ,_eg .Wrap (_gegb ,_fbeg ,"");
};case MopAddBorder :_dgeg =_cfegc .Arguments [0];_eccf ,_gegb =_eccf .AddBorder (_dgeg ,0);if _gegb !=nil {return nil ,_eg .Wrap (_gegb ,_fbeg ,"");};default:return nil ,_eg .Error (_fbeg ,"i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006d\u006fr\u0070\u0068\u004f\u0070\u0065\u0072\u0061ti\u006f\u006e\u0020\u0070r\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0074\u006f t\u0068\u0065 \u0073\u0065\u0071\u0075\u0065\u006e\u0063\u0065");
};};if _dgeg > 0{_eccf ,_gegb =_eccf .RemoveBorder (_dgeg );if _gegb !=nil {return nil ,_eg .Wrap (_gegb ,_fbeg ,"\u0062\u006f\u0072\u0064\u0065\u0072\u0020\u003e\u0020\u0030");};};return _eccf ,nil ;};func _gcb (_gbc ,_efgbf *Bitmap ,_bdf CombinationOperator )*Bitmap {_aedf :=New (_gbc .Width ,_gbc .Height );
for _cde :=0;_cde < len (_aedf .Data );_cde ++{_aedf .Data [_cde ]=_afbf (_gbc .Data [_cde ],_efgbf .Data [_cde ],_bdf );};return _aedf ;};func (_bbbef *Bitmaps )GetBox (i int )(*_dg .Rectangle ,error ){const _edge ="\u0047\u0065\u0074\u0042\u006f\u0078";
if _bbbef ==nil {return nil ,_eg .Error (_edge ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074\u006d\u0061\u0070s\u0027");};if i > len (_bbbef .Boxes )-1{return nil ,_eg .Errorf (_edge ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _bbbef .Boxes [i ],nil ;};func (_ceac *Bitmap )inverseData (){if _aaa :=_ceac .RasterOperation (0,0,_ceac .Width ,_ceac .Height ,PixNotDst ,nil ,0,0);_aaa !=nil {_dc .Log .Debug ("\u0049n\u0076\u0065\u0072\u0073e\u0020\u0064\u0061\u0074\u0061 \u0066a\u0069l\u0065\u0064\u003a\u0020\u0027\u0025\u0076'",_aaa );
};if _ceac .Color ==Chocolate {_ceac .Color =Vanilla ;}else {_ceac .Color =Chocolate ;};};func (_cfec *Bitmaps )SortByWidth (){_cgde :=(*byWidth )(_cfec );_ge .Sort (_cgde )};func (_ggf *Bitmap )ClipRectangle (box *_dg .Rectangle )(_gadf *Bitmap ,_dbec *_dg .Rectangle ,_egb error ){const _fec ="\u0043\u006c\u0069\u0070\u0052\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065";
if box ==nil {return nil ,nil ,_eg .Error (_fec ,"\u0062o\u0078 \u0069\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};_bab ,_age :=_ggf .Width ,_ggf .Height ;_gcfb :=_dg .Rect (0,0,_bab ,_age );if !box .Overlaps (_gcfb ){return nil ,nil ,_eg .Error (_fec ,"b\u006f\u0078\u0020\u0064oe\u0073n\u0027\u0074\u0020\u006f\u0076e\u0072\u006c\u0061\u0070\u0020\u0062");
};_gff :=box .Intersect (_gcfb );_befd ,_efbc :=_gff .Min .X ,_gff .Min .Y ;_afba ,_degf :=_gff .Dx (),_gff .Dy ();_gadf =New (_afba ,_degf );_gadf .Text =_ggf .Text ;if _egb =_gadf .RasterOperation (0,0,_afba ,_degf ,PixSrc ,_ggf ,_befd ,_efbc );_egb !=nil {return nil ,nil ,_eg .Wrap (_egb ,_fec ,"\u0050\u0069\u0078\u0053\u0072\u0063\u0020\u0074\u006f\u0020\u0063\u006ci\u0070\u0070\u0065\u0064");
};_dbec =&_gff ;return _gadf ,_dbec ,nil ;};func (_bgg *Bitmap )Equals (s *Bitmap )bool {if len (_bgg .Data )!=len (s .Data )||_bgg .Width !=s .Width ||_bgg .Height !=s .Height {return false ;};for _ceg :=0;_ceg < _bgg .Height ;_ceg ++{_abc :=_ceg *_bgg .RowStride ;
for _affa :=0;_affa < _bgg .RowStride ;_affa ++{if _bgg .Data [_abc +_affa ]!=s .Data [_abc +_affa ]{return false ;};};};return true ;};type MorphProcess struct{Operation MorphOperation ;Arguments []int ;};func (_cab *Bitmap )ThresholdPixelSum (thresh int ,tab8 []int )(_bdbd bool ,_ffe error ){const _bda ="\u0042i\u0074\u006d\u0061\u0070\u002e\u0054\u0068\u0072\u0065\u0073\u0068o\u006c\u0064\u0050\u0069\u0078\u0065\u006c\u0053\u0075\u006d";
if tab8 ==nil {tab8 =_bbca ();};_bbbe :=_cab .Width >>3;_aedc :=_cab .Width &7;_cfgdc :=byte (0xff<<uint (8-_aedc ));var (_dcfeb ,_ffc ,_ade ,_dee int ;_feee byte ;);for _dcfeb =0;_dcfeb < _cab .Height ;_dcfeb ++{_ade =_cab .RowStride *_dcfeb ;for _ffc =0;
_ffc < _bbbe ;_ffc ++{_feee ,_ffe =_cab .GetByte (_ade +_ffc );if _ffe !=nil {return false ,_eg .Wrap (_ffe ,_bda ,"\u0066\u0075\u006c\u006c\u0042\u0079\u0074\u0065");};_dee +=tab8 [_feee ];};if _aedc !=0{_feee ,_ffe =_cab .GetByte (_ade +_ffc );if _ffe !=nil {return false ,_eg .Wrap (_ffe ,_bda ,"p\u0061\u0072\u0074\u0069\u0061\u006c\u0042\u0079\u0074\u0065");
};_feee &=_cfgdc ;_dee +=tab8 [_feee ];};if _dee > thresh {return true ,nil ;};};return _bdbd ,nil ;};func _eeffa (_dbfg ,_daea *Bitmap ,_eegfe *Selection )(*Bitmap ,error ){const _eadc ="\u0065\u0072\u006fd\u0065";var (_cfed error ;_fdgdg *Bitmap ;);_dbfg ,_cfed =_bbcc (_dbfg ,_daea ,_eegfe ,&_fdgdg );
if _cfed !=nil {return nil ,_eg .Wrap (_cfed ,_eadc ,"");};if _cfed =_dbfg .setAll ();_cfed !=nil {return nil ,_eg .Wrap (_cfed ,_eadc ,"");};var _ddgb SelectionValue ;for _bgeb :=0;_bgeb < _eegfe .Height ;_bgeb ++{for _abd :=0;_abd < _eegfe .Width ;_abd ++{_ddgb =_eegfe .Data [_bgeb ][_abd ];
if _ddgb ==SelHit {_cfed =_fgad (_dbfg ,_eegfe .Cx -_abd ,_eegfe .Cy -_bgeb ,_daea .Width ,_daea .Height ,PixSrcAndDst ,_fdgdg ,0,0);if _cfed !=nil {return nil ,_eg .Wrap (_cfed ,_eadc ,"");};};};};if MorphBC ==SymmetricMorphBC {return _dbfg ,nil ;};_bffa ,_ffccd ,_gbdf ,_fafc :=_eegfe .findMaxTranslations ();
if _bffa > 0{if _cfed =_dbfg .RasterOperation (0,0,_bffa ,_daea .Height ,PixClr ,nil ,0,0);_cfed !=nil {return nil ,_eg .Wrap (_cfed ,_eadc ,"\u0078\u0070\u0020\u003e\u0020\u0030");};};if _gbdf > 0{if _cfed =_dbfg .RasterOperation (_daea .Width -_gbdf ,0,_gbdf ,_daea .Height ,PixClr ,nil ,0,0);
_cfed !=nil {return nil ,_eg .Wrap (_cfed ,_eadc ,"\u0078\u006e\u0020\u003e\u0020\u0030");};};if _ffccd > 0{if _cfed =_dbfg .RasterOperation (0,0,_daea .Width ,_ffccd ,PixClr ,nil ,0,0);_cfed !=nil {return nil ,_eg .Wrap (_cfed ,_eadc ,"\u0079\u0070\u0020\u003e\u0020\u0030");
};};if _fafc > 0{if _cfed =_dbfg .RasterOperation (0,_daea .Height -_fafc ,_daea .Width ,_fafc ,PixClr ,nil ,0,0);_cfed !=nil {return nil ,_eg .Wrap (_cfed ,_eadc ,"\u0079\u006e\u0020\u003e\u0020\u0030");};};return _dbfg ,nil ;};func (_bcfad *Bitmap )GetComponents (components Component ,maxWidth ,maxHeight int )(_afg *Bitmaps ,_adg *Boxes ,_cfbe error ){const _efbec ="B\u0069t\u006d\u0061\u0070\u002e\u0047\u0065\u0074\u0043o\u006d\u0070\u006f\u006een\u0074\u0073";
if _bcfad ==nil {return nil ,nil ,_eg .Error (_efbec ,"\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0042\u0069\u0074\u006da\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069n\u0065\u0064\u002e");};switch components {case ComponentConn ,ComponentCharacters ,ComponentWords :default:return nil ,nil ,_eg .Error (_efbec ,"\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065n\u0074s\u0020\u0070\u0061\u0072\u0061\u006d\u0065t\u0065\u0072");
};if _bcfad .Zero (){_adg =&Boxes {};_afg =&Bitmaps {};return _afg ,_adg ,nil ;};switch components {case ComponentConn :_afg =&Bitmaps {};if _adg ,_cfbe =_bcfad .ConnComponents (_afg ,8);_cfbe !=nil {return nil ,nil ,_eg .Wrap (_cfbe ,_efbec ,"\u006e\u006f \u0070\u0072\u0065p\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};case ComponentCharacters :_acabd ,_efbg :=MorphSequence (_bcfad ,MorphProcess {Operation :MopClosing ,Arguments :[]int {1,6}});if _efbg !=nil {return nil ,nil ,_eg .Wrap (_efbg ,_efbec ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};if _dc .Log .IsLogLevel (_dc .LogLevelTrace ){_dc .Log .Trace ("\u0043o\u006d\u0070o\u006e\u0065\u006e\u0074C\u0068\u0061\u0072a\u0063\u0074\u0065\u0072\u0073\u0020\u0062\u0069\u0074ma\u0070\u0020\u0061f\u0074\u0065r\u0020\u0063\u006c\u006f\u0073\u0069n\u0067\u003a \u0025\u0073",_acabd .String ());
};_ebda :=&Bitmaps {};_adg ,_efbg =_acabd .ConnComponents (_ebda ,8);if _efbg !=nil {return nil ,nil ,_eg .Wrap (_efbg ,_efbec ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};if _dc .Log .IsLogLevel (_dc .LogLevelTrace ){_dc .Log .Trace ("\u0043\u006f\u006d\u0070\u006f\u006ee\u006e\u0074\u0043\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u0020a\u0066\u0074\u0065\u0072\u0020\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076i\u0074y\u003a\u0020\u0025\u0073",_ebda .String ());
};if _afg ,_efbg =_ebda .ClipToBitmap (_bcfad );_efbg !=nil {return nil ,nil ,_eg .Wrap (_efbg ,_efbec ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");};case ComponentWords :_fefc :=1;
var _abgb *Bitmap ;switch {case _bcfad .XResolution <=200:_abgb =_bcfad ;case _bcfad .XResolution <=400:_fefc =2;_abgb ,_cfbe =_dcc (_bcfad ,1,0,0,0);if _cfbe !=nil {return nil ,nil ,_eg .Wrap (_cfbe ,_efbec ,"w\u006f\u0072\u0064\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0020\u002d \u0078\u0072\u0065s\u003c=\u0034\u0030\u0030");
};default:_fefc =4;_abgb ,_cfbe =_dcc (_bcfad ,1,1,0,0);if _cfbe !=nil {return nil ,nil ,_eg .Wrap (_cfbe ,_efbec ,"\u0077\u006f\u0072\u0064 \u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073 \u002d \u0078\u0072\u0065\u0073\u0020\u003e\u00204\u0030\u0030");
};};_bcac ,_ ,_aeef :=_fgeb (_abgb );if _aeef !=nil {return nil ,nil ,_eg .Wrap (_aeef ,_efbec ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};_aeda ,_aeef :=_dfcg (_bcac ,_fefc );if _aeef !=nil {return nil ,nil ,_eg .Wrap (_aeef ,_efbec ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");
};_feeca :=&Bitmaps {};if _adg ,_aeef =_aeda .ConnComponents (_feeca ,4);_aeef !=nil {return nil ,nil ,_eg .Wrap (_aeef ,_efbec ,"\u0077\u006f\u0072\u0064\u0020\u0070r\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u002c\u0020\u0063\u006f\u006en\u0065\u0063\u0074\u0020\u0065\u0078\u0070a\u006e\u0064\u0065\u0064");
};if _afg ,_aeef =_feeca .ClipToBitmap (_bcfad );_aeef !=nil {return nil ,nil ,_eg .Wrap (_aeef ,_efbec ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};};_afg ,_cfbe =_afg .SelectBySize (maxWidth ,maxHeight ,LocSelectIfBoth ,SizeSelectIfLTE );
if _cfbe !=nil {return nil ,nil ,_eg .Wrap (_cfbe ,_efbec ,"");};_adg ,_cfbe =_adg .SelectBySize (maxWidth ,maxHeight ,LocSelectIfBoth ,SizeSelectIfLTE );if _cfbe !=nil {return nil ,nil ,_eg .Wrap (_cfbe ,_efbec ,"");};return _afg ,_adg ,nil ;};func MakePixelCentroidTab8 ()[]int {return _gfga ()};
func TstISymbol (t *_g .T ,scale ...int )*Bitmap {_dcab ,_dfga :=NewWithData (1,5,[]byte {0x80,0x80,0x80,0x80,0x80});_a .NoError (t ,_dfga );return TstGetScaledSymbol (t ,_dcab ,scale ...);};func _ddb (_ebee ,_eefdd *Bitmap ,_agga ,_bed ,_ccd ,_gfb ,_deeb int ,_acc CombinationOperator )error {var _ffbe int ;
_ecd :=func (){_ffbe ++;_ccd +=_eefdd .RowStride ;_gfb +=_ebee .RowStride ;_deeb +=_ebee .RowStride };for _ffbe =_agga ;_ffbe < _bed ;_ecd (){_eded :=_ccd ;for _cdagd :=_gfb ;_cdagd <=_deeb ;_cdagd ++{_afd ,_egadf :=_eefdd .GetByte (_eded );if _egadf !=nil {return _egadf ;
};_dacc ,_egadf :=_ebee .GetByte (_cdagd );if _egadf !=nil {return _egadf ;};if _egadf =_eefdd .SetByte (_eded ,_afbf (_afd ,_dacc ,_acc ));_egadf !=nil {return _egadf ;};_eded ++;};};return nil ;};func TstVSymbol (t *_g .T ,scale ...int )*Bitmap {_eade ,_ebgaa :=NewWithData (5,5,[]byte {0x88,0x88,0x88,0x50,0x20});
_a .NoError (t ,_ebgaa );return TstGetScaledSymbol (t ,_eade ,scale ...);};func Centroid (bm *Bitmap ,centTab ,sumTab []int )(Point ,error ){return bm .centroid (centTab ,sumTab )};func (_fddcg *ClassedPoints )Swap (i ,j int ){_fddcg .IntSlice [i ],_fddcg .IntSlice [j ]=_fddcg .IntSlice [j ],_fddcg .IntSlice [i ];
};func _daaa (_gcff ,_bcdf *Bitmap ,_dgce ,_feag ,_ddgd ,_bffga ,_aged ,_bfbg ,_dfgg ,_caeb int ,_beaa CombinationOperator )error {var _cac int ;_becb :=func (){_cac ++;_ddgd +=_bcdf .RowStride ;_bffga +=_gcff .RowStride ;_aged +=_gcff .RowStride };for _cac =_dgce ;
_cac < _feag ;_becb (){var _ffgb uint16 ;_cdba :=_ddgd ;for _ddgc :=_bffga ;_ddgc <=_aged ;_ddgc ++{_efgg ,_ecf :=_bcdf .GetByte (_cdba );if _ecf !=nil {return _ecf ;};_dggf ,_ecf :=_gcff .GetByte (_ddgc );if _ecf !=nil {return _ecf ;};_ffgb =(_ffgb |uint16 (_dggf ))<<uint (_caeb );
_dggf =byte (_ffgb >>8);if _ddgc ==_aged {_dggf =_bcfa (uint (_bfbg ),_dggf );};if _ecf =_bcdf .SetByte (_cdba ,_afbf (_efgg ,_dggf ,_beaa ));_ecf !=nil {return _ecf ;};_cdba ++;_ffgb <<=uint (_dfgg );};};return nil ;};func MorphSequence (src *Bitmap ,sequence ...MorphProcess )(*Bitmap ,error ){return _edfd (src ,sequence ...);
};func _eega (_gfgg ,_bcce ,_ace *Bitmap )(*Bitmap ,error ){const _dcb ="\u0073\u0075\u0062\u0074\u0072\u0061\u0063\u0074";if _bcce ==nil {return nil ,_eg .Error (_dcb ,"'\u0073\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _ace ==nil {return nil ,_eg .Error (_dcb ,"'\u0073\u0032\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");
};var _acab error ;switch {case _gfgg ==_bcce :if _acab =_gfgg .RasterOperation (0,0,_bcce .Width ,_bcce .Height ,PixNotSrcAndDst ,_ace ,0,0);_acab !=nil {return nil ,_eg .Wrap (_acab ,_dcb ,"\u0064 \u003d\u003d\u0020\u0073\u0031");};case _gfgg ==_ace :if _acab =_gfgg .RasterOperation (0,0,_bcce .Width ,_bcce .Height ,PixNotSrcAndDst ,_bcce ,0,0);
_acab !=nil {return nil ,_eg .Wrap (_acab ,_dcb ,"\u0064 \u003d\u003d\u0020\u0073\u0032");};default:_gfgg ,_acab =_cecd (_gfgg ,_bcce );if _acab !=nil {return nil ,_eg .Wrap (_acab ,_dcb ,"");};if _acab =_gfgg .RasterOperation (0,0,_bcce .Width ,_bcce .Height ,PixNotSrcAndDst ,_ace ,0,0);
_acab !=nil {return nil ,_eg .Wrap (_acab ,_dcb ,"\u0064e\u0066\u0061\u0075\u006c\u0074");};};return _gfgg ,nil ;};func (_dggb Points )Get (i int )(Point ,error ){if i > len (_dggb )-1{return Point {},_eg .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _dggb [i ],nil ;};func TstAddSymbol (t *_g .T ,bms *Bitmaps ,sym *Bitmap ,x *int ,y int ,space int ){bms .AddBitmap (sym );_gaec :=_dg .Rect (*x ,y ,*x +sym .Width ,y +sym .Height );bms .AddBox (&_gaec );*x +=sym .Width +space ;};func (_bdgc *byHeight )Swap (i ,j int ){_bdgc .Values [i ],_bdgc .Values [j ]=_bdgc .Values [j ],_bdgc .Values [i ];
if _bdgc .Boxes !=nil {_bdgc .Boxes [i ],_bdgc .Boxes [j ]=_bdgc .Boxes [j ],_bdgc .Boxes [i ];};};type fillSegment struct{_affeb int ;_afcc int ;_cabf int ;_bega int ;};func _debbf (_fcdd *_b .Stack ,_aadb ,_ggac ,_ffacc ,_fedga ,_aafg int ,_bdfad *_dg .Rectangle )(_bbfg error ){const _bgac ="\u0070\u0075\u0073\u0068\u0046\u0069\u006c\u006c\u0053\u0065\u0067m\u0065\u006e\u0074\u0042\u006f\u0075\u006e\u0064\u0069\u006eg\u0042\u006f\u0078";
if _fcdd ==nil {return _eg .Error (_bgac ,"\u006ei\u006c \u0073\u0074\u0061\u0063\u006b \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};if _bdfad ==nil {return _eg .Error (_bgac ,"\u0070\u0072\u006f\u0076i\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0069\u006da\u0067e\u002e\u0052\u0065\u0063\u0074\u0061\u006eg\u006c\u0065");
};_bdfad .Min .X =_b .Min (_bdfad .Min .X ,_aadb );_bdfad .Max .X =_b .Max (_bdfad .Max .X ,_ggac );_bdfad .Min .Y =_b .Min (_bdfad .Min .Y ,_ffacc );_bdfad .Max .Y =_b .Max (_bdfad .Max .Y ,_ffacc );if !(_ffacc +_fedga >=0&&_ffacc +_fedga <=_aafg ){return nil ;
};if _fcdd .Aux ==nil {return _eg .Error (_bgac ,"a\u0075x\u0053\u0074\u0061\u0063\u006b\u0020\u006e\u006ft\u0020\u0064\u0065\u0066in\u0065\u0064");};var _fedb *fillSegment ;_faeg ,_dade :=_fcdd .Aux .Pop ();if _dade {if _fedb ,_dade =_faeg .(*fillSegment );
!_dade {return _eg .Error (_bgac ,"a\u0075\u0078\u0053\u0074\u0061\u0063k\u0020\u0064\u0061\u0074\u0061\u0020i\u0073\u0020\u006e\u006f\u0074\u0020\u0061 \u002a\u0066\u0069\u006c\u006c\u0053\u0065\u0067\u006d\u0065n\u0074");};}else {_fedb =&fillSegment {};
};_fedb ._affeb =_aadb ;_fedb ._afcc =_ggac ;_fedb ._cabf =_ffacc ;_fedb ._bega =_fedga ;_fcdd .Push (_fedb );return nil ;};func _bad ()(_edc [256]uint32 ){for _gfc :=0;_gfc < 256;_gfc ++{if _gfc &0x01!=0{_edc [_gfc ]|=0xf;};if _gfc &0x02!=0{_edc [_gfc ]|=0xf0;
};if _gfc &0x04!=0{_edc [_gfc ]|=0xf00;};if _gfc &0x08!=0{_edc [_gfc ]|=0xf000;};if _gfc &0x10!=0{_edc [_gfc ]|=0xf0000;};if _gfc &0x20!=0{_edc [_gfc ]|=0xf00000;};if _gfc &0x40!=0{_edc [_gfc ]|=0xf000000;};if _gfc &0x80!=0{_edc [_gfc ]|=0xf0000000;};};
return _edc ;};type SelectionValue int ;func (_bgcge *Bitmap )setEightFullBytes (_adfd int ,_afcd uint64 )error {if _adfd +7> len (_bgcge .Data )-1{return _eg .Error ("\u0073\u0065\u0074\u0045\u0069\u0067\u0068\u0074\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_bgcge .Data [_adfd ]=byte ((_afcd &0xff00000000000000)>>56);_bgcge .Data [_adfd +1]=byte ((_afcd &0xff000000000000)>>48);_bgcge .Data [_adfd +2]=byte ((_afcd &0xff0000000000)>>40);_bgcge .Data [_adfd +3]=byte ((_afcd &0xff00000000)>>32);_bgcge .Data [_adfd +4]=byte ((_afcd &0xff000000)>>24);
_bgcge .Data [_adfd +5]=byte ((_afcd &0xff0000)>>16);_bgcge .Data [_adfd +6]=byte ((_afcd &0xff00)>>8);_bgcge .Data [_adfd +7]=byte (_afcd &0xff);return nil ;};func TstWordBitmapWithSpaces (t *_g .T ,scale ...int )*Bitmap {_ggea :=1;if len (scale )> 0{_ggea =scale [0];
};_adea :=3;_bagad :=9+7+15+2*_adea +2*_adea ;_addc :=5+_adea +5+2*_adea ;_fdgdf :=New (_bagad *_ggea ,_addc *_ggea );_cgfa :=&Bitmaps {};var _cedfg *int ;_adea *=_ggea ;_bgag :=_adea ;_cedfg =&_bgag ;_dfcda :=_adea ;_abea :=TstDSymbol (t ,scale ...);TstAddSymbol (t ,_cgfa ,_abea ,_cedfg ,_dfcda ,1*_ggea );
_abea =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_cgfa ,_abea ,_cedfg ,_dfcda ,_adea );_abea =TstISymbol (t ,scale ...);TstAddSymbol (t ,_cgfa ,_abea ,_cedfg ,_dfcda ,1*_ggea );_abea =TstTSymbol (t ,scale ...);TstAddSymbol (t ,_cgfa ,_abea ,_cedfg ,_dfcda ,_adea );
_abea =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_cgfa ,_abea ,_cedfg ,_dfcda ,1*_ggea );_abea =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_cgfa ,_abea ,_cedfg ,_dfcda ,1*_ggea );_abea =TstWSymbol (t ,scale ...);TstAddSymbol (t ,_cgfa ,_abea ,_cedfg ,_dfcda ,0);
*_cedfg =_adea ;_dfcda =5*_ggea +_adea ;_abea =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_cgfa ,_abea ,_cedfg ,_dfcda ,1*_ggea );_abea =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_cgfa ,_abea ,_cedfg ,_dfcda ,_adea );_abea =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_cgfa ,_abea ,_cedfg ,_dfcda ,1*_ggea );
_abea =TstESymbol (t ,scale ...);TstAddSymbol (t ,_cgfa ,_abea ,_cedfg ,_dfcda ,1*_ggea );_abea =TstVSymbol (t ,scale ...);TstAddSymbol (t ,_cgfa ,_abea ,_cedfg ,_dfcda ,1*_ggea );_abea =TstESymbol (t ,scale ...);TstAddSymbol (t ,_cgfa ,_abea ,_cedfg ,_dfcda ,1*_ggea );
_abea =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_cgfa ,_abea ,_cedfg ,_dfcda ,0);TstWriteSymbols (t ,_cgfa ,_fdgdf );return _fdgdf ;};func (_gebd *Bitmap )createTemplate ()*Bitmap {return &Bitmap {Width :_gebd .Width ,Height :_gebd .Height ,RowStride :_gebd .RowStride ,Color :_gebd .Color ,Text :_gebd .Text ,BitmapNumber :_gebd .BitmapNumber ,Special :_gebd .Special ,Data :make ([]byte ,len (_gebd .Data ))};
};func (_ebfd *Bitmap )connComponentsBitmapsBB (_afdg *Bitmaps ,_fcbe int )(_edcb *Boxes ,_dggc error ){const _aad ="\u0063\u006f\u006enC\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0042\u0069\u0074\u006d\u0061\u0070\u0073\u0042\u0042";if _fcbe !=4&&_fcbe !=8{return nil ,_eg .Error (_aad ,"\u0063\u006f\u006e\u006e\u0065\u0063t\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0027\u0034\u0027\u0020\u006fr\u0020\u0027\u0038\u0027");
};if _afdg ==nil {return nil ,_eg .Error (_aad ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0042\u0069\u0074ma\u0070\u0073");};if len (_afdg .Values )> 0{return nil ,_eg .Error (_aad ,"\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u006fn\u002d\u0065\u006d\u0070\u0074\u0079\u0020\u0042\u0069\u0074m\u0061\u0070\u0073");
};if _ebfd .Zero (){return &Boxes {},nil ;};var (_ebdd ,_afaf ,_fggd ,_ggce *Bitmap ;);_ebfd .setPadBits (0);if _ebdd ,_dggc =_cecd (nil ,_ebfd );_dggc !=nil {return nil ,_eg .Wrap (_dggc ,_aad ,"\u0062\u006d\u0031");};if _afaf ,_dggc =_cecd (nil ,_ebfd );
_dggc !=nil {return nil ,_eg .Wrap (_dggc ,_aad ,"\u0062\u006d\u0032");};_dfd :=&_b .Stack {};_dfd .Aux =&_b .Stack {};_edcb =&Boxes {};var (_gdd ,_cdgff int ;_bead _dg .Point ;_aaed bool ;_abgc *_dg .Rectangle ;);for {if _bead ,_aaed ,_dggc =_ebdd .nextOnPixel (_gdd ,_cdgff );
_dggc !=nil {return nil ,_eg .Wrap (_dggc ,_aad ,"");};if !_aaed {break ;};if _abgc ,_dggc =_fedg (_ebdd ,_dfd ,_bead .X ,_bead .Y ,_fcbe );_dggc !=nil {return nil ,_eg .Wrap (_dggc ,_aad ,"");};if _dggc =_edcb .Add (_abgc );_dggc !=nil {return nil ,_eg .Wrap (_dggc ,_aad ,"");
};if _fggd ,_dggc =_ebdd .clipRectangle (_abgc ,nil );_dggc !=nil {return nil ,_eg .Wrap (_dggc ,_aad ,"\u0062\u006d\u0033");};if _ggce ,_dggc =_afaf .clipRectangle (_abgc ,nil );_dggc !=nil {return nil ,_eg .Wrap (_dggc ,_aad ,"\u0062\u006d\u0034");};
if _ ,_dggc =_degff (_fggd ,_fggd ,_ggce );_dggc !=nil {return nil ,_eg .Wrap (_dggc ,_aad ,"\u0062m\u0033\u0020\u005e\u0020\u0062\u006d4");};if _dggc =_afaf .RasterOperation (_abgc .Min .X ,_abgc .Min .Y ,_abgc .Dx (),_abgc .Dy (),PixSrcXorDst ,_fggd ,0,0);
_dggc !=nil {return nil ,_eg .Wrap (_dggc ,_aad ,"\u0062\u006d\u0032\u0020\u002d\u0058\u004f\u0052\u002d>\u0020\u0062\u006d\u0033");};_afdg .AddBitmap (_fggd );_gdd =_bead .X ;_cdgff =_bead .Y ;};_afdg .Boxes =*_edcb ;return _edcb ,nil ;};func _ffb ()(_aff [256]uint64 ){for _eaf :=0;
_eaf < 256;_eaf ++{if _eaf &0x01!=0{_aff [_eaf ]|=0xff;};if _eaf &0x02!=0{_aff [_eaf ]|=0xff00;};if _eaf &0x04!=0{_aff [_eaf ]|=0xff0000;};if _eaf &0x08!=0{_aff [_eaf ]|=0xff000000;};if _eaf &0x10!=0{_aff [_eaf ]|=0xff00000000;};if _eaf &0x20!=0{_aff [_eaf ]|=0xff0000000000;
};if _eaf &0x40!=0{_aff [_eaf ]|=0xff000000000000;};if _eaf &0x80!=0{_aff [_eaf ]|=0xff00000000000000;};};return _aff ;};func (_dccf *Boxes )Add (box *_dg .Rectangle )error {if _dccf ==nil {return _eg .Error ("\u0042o\u0078\u0065\u0073\u002e\u0041\u0064d","\u0027\u0042\u006f\u0078es\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};*_dccf =append (*_dccf ,box );return nil ;};func MakePixelSumTab8 ()[]int {return _bbca ()};func _ged (_gd ,_dgc *Bitmap )(_f error ){const _ece ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0034";
_bg :=_dgc .RowStride ;_dfe :=_gd .RowStride ;_cc :=_dgc .RowStride *4-_gd .RowStride ;var (_fa ,_eab byte ;_ae uint32 ;_ce ,_da ,_ef ,_eabd ,_ggc ,_cbd ,_fb int ;);for _ef =0;_ef < _dgc .Height ;_ef ++{_ce =_ef *_bg ;_da =4*_ef *_dfe ;for _eabd =0;_eabd < _bg ;
_eabd ++{_fa =_dgc .Data [_ce +_eabd ];_ae =_fdcf [_fa ];_cbd =_da +_eabd *4;if _cc !=0&&(_eabd +1)*4> _gd .RowStride {for _ggc =_cc ;_ggc > 0;_ggc --{_eab =byte ((_ae >>uint (_ggc *8))&0xff);_fb =_cbd +(_cc -_ggc );if _f =_gd .SetByte (_fb ,_eab );_f !=nil {return _eg .Wrapf (_f ,_ece ,"D\u0069\u0066\u0066\u0065\u0072\u0065n\u0074\u0020\u0072\u006f\u0077\u0073\u0074\u0072\u0069d\u0065\u0073\u002e \u004b:\u0020\u0025\u0064",_ggc );
};};}else if _f =_gd .setFourBytes (_cbd ,_ae );_f !=nil {return _eg .Wrap (_f ,_ece ,"");};if _f =_gd .setFourBytes (_da +_eabd *4,_fdcf [_dgc .Data [_ce +_eabd ]]);_f !=nil {return _eg .Wrap (_f ,_ece ,"");};};for _ggc =1;_ggc < 4;_ggc ++{for _eabd =0;
_eabd < _dfe ;_eabd ++{if _f =_gd .SetByte (_da +_ggc *_dfe +_eabd ,_gd .Data [_da +_eabd ]);_f !=nil {return _eg .Wrapf (_f ,_ece ,"\u0063\u006f\u0070\u0079\u0020\u0027\u0071\u0075\u0061\u0064\u0072\u0061\u0062l\u0065\u0027\u0020\u006c\u0069\u006ee\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0062\u0079\u0074\u0065\u003a \u0027\u0025\u0064\u0027",_ggc ,_eabd );
};};};};return nil ;};func TstImageBitmapData ()[]byte {return _faga .Data };func (_ggfc *byWidth )Len ()int {return len (_ggfc .Values )};func (_defc *Bitmaps )GetBitmap (i int )(*Bitmap ,error ){const _fbge ="\u0047e\u0074\u0042\u0069\u0074\u006d\u0061p";
if _defc ==nil {return nil ,_eg .Error (_fbge ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0042\u0069\u0074ma\u0070\u0073");};if i > len (_defc .Values )-1{return nil ,_eg .Errorf (_fbge ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _defc .Values [i ],nil ;};var (_fdef =_ba ();_fdcf =_bad ();_feaa =_ffb (););func _degff (_ddf ,_bdaa ,_abgd *Bitmap )(*Bitmap ,error ){const _bbag ="\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0078\u006f\u0072";if _bdaa ==nil {return nil ,_eg .Error (_bbag ,"'\u0062\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");
};if _abgd ==nil {return nil ,_eg .Error (_bbag ,"'\u0062\u0032\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _ddf ==_abgd {return nil ,_eg .Error (_bbag ,"'\u0064\u0027\u0020\u003d\u003d\u0020\u0027\u0062\u0032\u0027");};if !_bdaa .SizesEqual (_abgd ){_dc .Log .Debug ("\u0025s\u0020\u002d \u0042\u0069\u0074\u006da\u0070\u0020\u0027b\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074 e\u0071\u0075\u0061l\u0020\u0073i\u007a\u0065\u0020\u0077\u0069\u0074h\u0020\u0027b\u0032\u0027",_bbag );
};var _fgfb error ;if _ddf ,_fgfb =_cecd (_ddf ,_bdaa );_fgfb !=nil {return nil ,_eg .Wrap (_fgfb ,_bbag ,"\u0063\u0061n\u0027\u0074\u0020c\u0072\u0065\u0061\u0074\u0065\u0020\u0027\u0064\u0027");};if _fgfb =_ddf .RasterOperation (0,0,_ddf .Width ,_ddf .Height ,PixSrcXorDst ,_abgd ,0,0);
_fgfb !=nil {return nil ,_eg .Wrap (_fgfb ,_bbag ,"");};return _ddf ,nil ;};const (CmbOpOr CombinationOperator =iota ;CmbOpAnd ;CmbOpXor ;CmbOpXNor ;CmbOpReplace ;CmbOpNot ;);var _ _ge .Interface =&ClassedPoints {};func (_eedf *Bitmaps )HeightSorter ()func (_ffdd ,_aecd int )bool {return func (_aeec ,_ggacd int )bool {_abcb :=_eedf .Values [_aeec ].Height < _eedf .Values [_ggacd ].Height ;
_dc .Log .Debug ("H\u0065i\u0067\u0068\u0074\u003a\u0020\u0025\u0076\u0020<\u0020\u0025\u0076\u0020= \u0025\u0076",_eedf .Values [_aeec ].Height ,_eedf .Values [_ggacd ].Height ,_abcb );return _abcb ;};};func TstTSymbol (t *_g .T ,scale ...int )*Bitmap {_cdfdg ,_cefdc :=NewWithData (5,5,[]byte {0xF8,0x20,0x20,0x20,0x20});
_a .NoError (t ,_cefdc );return TstGetScaledSymbol (t ,_cdfdg ,scale ...);};func _bd (_be ,_cd *Bitmap )(_ee error ){const _ea ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0032";_eef :=_cd .RowStride ;
_ec :=_be .RowStride ;var (_cb byte ;_gg uint16 ;_dd ,_eeg ,_cf ,_cbf ,_gcf int ;);for _cf =0;_cf < _cd .Height ;_cf ++{_dd =_cf *_eef ;_eeg =2*_cf *_ec ;for _cbf =0;_cbf < _eef ;_cbf ++{_cb =_cd .Data [_dd +_cbf ];_gg =_fdef [_cb ];_gcf =_eeg +_cbf *2;
if _be .RowStride !=_cd .RowStride *2&&(_cbf +1)*2> _be .RowStride {_ee =_be .SetByte (_gcf ,byte (_gg >>8));}else {_ee =_be .setTwoBytes (_gcf ,_gg );};if _ee !=nil {return _eg .Wrap (_ee ,_ea ,"");};};for _cbf =0;_cbf < _ec ;_cbf ++{_gcf =_eeg +_ec +_cbf ;
_cb =_be .Data [_eeg +_cbf ];if _ee =_be .SetByte (_gcf ,_cb );_ee !=nil {return _eg .Wrapf (_ee ,_ea ,"c\u006f\u0070\u0079\u0020\u0064\u006fu\u0062\u006c\u0065\u0064\u0020\u006ci\u006e\u0065\u003a\u0020\u0027\u0025\u0064'\u002c\u0020\u0042\u0079\u0074\u0065\u003a\u0020\u0027\u0025d\u0027",_eeg +_cbf ,_eeg +_ec +_cbf );
};};};return nil ;};func _ded (_efdef ,_bebf int )int {if _efdef < _bebf {return _efdef ;};return _bebf ;};const (PixSrc RasterOperator =0xc;PixDst RasterOperator =0xa;PixNotSrc RasterOperator =0x3;PixNotDst RasterOperator =0x5;PixClr RasterOperator =0x0;
PixSet RasterOperator =0xf;PixSrcOrDst RasterOperator =0xe;PixSrcAndDst RasterOperator =0x8;PixSrcXorDst RasterOperator =0x6;PixNotSrcOrDst RasterOperator =0xb;PixNotSrcAndDst RasterOperator =0x2;PixSrcOrNotDst RasterOperator =0xd;PixSrcAndNotDst RasterOperator =0x4;
PixNotPixSrcOrDst RasterOperator =0x1;PixNotPixSrcAndDst RasterOperator =0x7;PixNotPixSrcXorDst RasterOperator =0x9;PixPaint =PixSrcOrDst ;PixSubtract =PixNotSrcAndDst ;PixMask =PixSrcAndDst ;);func (_egcg *Points )Add (pt *Points )error {const _ecab ="\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0041\u0064\u0064";
if _egcg ==nil {return _eg .Error (_ecab ,"\u0070o\u0069n\u0074\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if pt ==nil {return _eg .Error (_ecab ,"a\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0070\u006f\u0069\u006e\u0074\u0073\u0020\u006eo\u0074\u0020\u0064e\u0066i\u006e\u0065\u0064");
};*_egcg =append (*_egcg ,*pt ...);return nil ;};func NewWithData (width ,height int ,data []byte )(*Bitmap ,error ){const _gedb ="N\u0065\u0077\u0057\u0069\u0074\u0068\u0044\u0061\u0074\u0061";_bcc :=_gdfb (width ,height );_bcc .Data =data ;if len (data )< height *_bcc .RowStride {return nil ,_eg .Errorf (_gedb ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064\u0061\u0074\u0061\u0020l\u0065\u006e\u0067\u0074\u0068\u003a \u0025\u0064\u0020\u002d\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e\u003a\u0020\u0025\u0064",len (data ),height *_bcc .RowStride );
};return _bcc ,nil ;};type Point struct{X ,Y float32 ;};func (_bbb *Bitmap )InverseData (){_bbb .inverseData ()};func (_aba *Bitmap )Equivalent (s *Bitmap )bool {return _aba .equivalent (s )};func CorrelationScoreSimple (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab []int )(_fad float64 ,_agbg error ){const _dcaf ="\u0043\u006f\u0072\u0072el\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0053\u0069\u006d\u0070l\u0065";
if bm1 ==nil ||bm2 ==nil {return _fad ,_eg .Error (_dcaf ,"n\u0069l\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u0073 \u0070\u0072\u006f\u0076id\u0065\u0064");};if tab ==nil {return _fad ,_eg .Error (_dcaf ,"\u0074\u0061\u0062\u0020\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if area1 ==0||area2 ==0{return _fad ,_eg .Error (_dcaf ,"\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0061\u0072e\u0061\u0073\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u003e\u0020\u0030");};_ggbe ,_cbaf :=bm1 .Width ,bm1 .Height ;_dced ,_eafc :=bm2 .Width ,bm2 .Height ;
if _cafb (_ggbe -_dced )> maxDiffW {return 0,nil ;};if _cafb (_cbaf -_eafc )> maxDiffH {return 0,nil ;};var _cdfe ,_dfed int ;if delX >=0{_cdfe =int (delX +0.5);}else {_cdfe =int (delX -0.5);};if delY >=0{_dfed =int (delY +0.5);}else {_dfed =int (delY -0.5);
};_ffdgc :=bm1 .createTemplate ();if _agbg =_ffdgc .RasterOperation (_cdfe ,_dfed ,_dced ,_eafc ,PixSrc ,bm2 ,0,0);_agbg !=nil {return _fad ,_eg .Wrap (_agbg ,_dcaf ,"\u0062m\u0032 \u0074\u006f\u0020\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065");};
if _agbg =_ffdgc .RasterOperation (0,0,_ggbe ,_cbaf ,PixSrcAndDst ,bm1 ,0,0);_agbg !=nil {return _fad ,_eg .Wrap (_agbg ,_dcaf ,"b\u006d\u0031\u0020\u0061\u006e\u0064\u0020\u0062\u006d\u0054");};_dafc :=_ffdgc .countPixels ();_fad =float64 (_dafc )*float64 (_dafc )/(float64 (area1 )*float64 (area2 ));
return _fad ,nil ;};type ClassedPoints struct{*Points ;_b .IntSlice ;_eeacb func (_cfea ,_badbb int )bool ;};const (MopDilation MorphOperation =iota ;MopErosion ;MopOpening ;MopClosing ;MopRankBinaryReduction ;MopReplicativeBinaryExpansion ;MopAddBorder ;
);func (_egaa *Bitmap )clipRectangle (_egab ,_abbg *_dg .Rectangle )(_cade *Bitmap ,_cbgd error ){const _dbge ="\u0063\u006c\u0069\u0070\u0052\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065";if _egab ==nil {return nil ,_eg .Error (_dbge ,"\u0070r\u006fv\u0069\u0064\u0065\u0064\u0020n\u0069\u006c \u0027\u0062\u006f\u0078\u0027");
};_ccgd ,_daa :=_egaa .Width ,_egaa .Height ;_agda ,_cbgd :=ClipBoxToRectangle (_egab ,_ccgd ,_daa );if _cbgd !=nil {_dc .Log .Warning ("\u0027\u0062ox\u0027\u0020\u0064o\u0065\u0073\u006e\u0027t o\u0076er\u006c\u0061\u0070\u0020\u0062\u0069\u0074ma\u0070\u0020\u0027\u0062\u0027\u003a\u0020%\u0076",_cbgd );
return nil ,nil ;};_bebb ,_ggcc :=_agda .Min .X ,_agda .Min .Y ;_bada ,_gfa :=_agda .Max .X -_agda .Min .X ,_agda .Max .Y -_agda .Min .Y ;_cade =New (_bada ,_gfa );_cade .Text =_egaa .Text ;if _cbgd =_cade .RasterOperation (0,0,_bada ,_gfa ,PixSrc ,_egaa ,_bebb ,_ggcc );
_cbgd !=nil {return nil ,_eg .Wrap (_cbgd ,_dbge ,"");};if _abbg !=nil {*_abbg =*_agda ;};return _cade ,nil ;};func _fef (_geb ,_bcd *Bitmap ,_cea int ,_dbg []byte ,_gadb int )(_fca error ){const _baa ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0031";
var (_eae ,_fbc ,_gdf ,_aa ,_ceec ,_aee ,_fd ,_ebd int ;_dac ,_fcf uint32 ;_agg ,_efd byte ;_dfec uint16 ;);_ebgf :=make ([]byte ,4);_de :=make ([]byte ,4);for _gdf =0;_gdf < _geb .Height -1;_gdf ,_aa =_gdf +2,_aa +1{_eae =_gdf *_geb .RowStride ;_fbc =_aa *_bcd .RowStride ;
for _ceec ,_aee =0,0;_ceec < _gadb ;_ceec ,_aee =_ceec +4,_aee +1{for _fd =0;_fd < 4;_fd ++{_ebd =_eae +_ceec +_fd ;if _ebd <=len (_geb .Data )-1&&_ebd < _eae +_geb .RowStride {_ebgf [_fd ]=_geb .Data [_ebd ];}else {_ebgf [_fd ]=0x00;};_ebd =_eae +_geb .RowStride +_ceec +_fd ;
if _ebd <=len (_geb .Data )-1&&_ebd < _eae +(2*_geb .RowStride ){_de [_fd ]=_geb .Data [_ebd ];}else {_de [_fd ]=0x00;};};_dac =_df .BigEndian .Uint32 (_ebgf );_fcf =_df .BigEndian .Uint32 (_de );_fcf |=_dac ;_fcf |=_fcf <<1;_fcf &=0xaaaaaaaa;_dac =_fcf |(_fcf <<7);
_agg =byte (_dac >>24);_efd =byte ((_dac >>8)&0xff);_ebd =_fbc +_aee ;if _ebd +1==len (_bcd .Data )-1||_ebd +1>=_fbc +_bcd .RowStride {_bcd .Data [_ebd ]=_dbg [_agg ];}else {_dfec =(uint16 (_dbg [_agg ])<<8)|uint16 (_dbg [_efd ]);if _fca =_bcd .setTwoBytes (_ebd ,_dfec );
_fca !=nil {return _eg .Wrapf (_fca ,_baa ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_ebd );};_aee ++;};};
};return nil ;};func (_feec *Bitmap )GetByte (index int )(byte ,error ){if index > len (_feec .Data )-1||index < 0{return 0,_eg .Errorf ("\u0047e\u0074\u0042\u0079\u0074\u0065","\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",index );
};return _feec .Data [index ],nil ;};func _ebffg (_cgcg *Bitmap ,_fdfa ,_dcac int ,_gdgg ,_fabg int ,_ggbc RasterOperator ){var (_fcbeg int ;_cbdd byte ;_daae ,_fdda int ;_cabd int ;);_bbfc :=_gdgg >>3;_egfg :=_gdgg &7;if _egfg > 0{_cbdd =_ddgeb [_egfg ];
};_fcbeg =_cgcg .RowStride *_dcac +(_fdfa >>3);switch _ggbc {case PixClr :for _daae =0;_daae < _fabg ;_daae ++{_cabd =_fcbeg +_daae *_cgcg .RowStride ;for _fdda =0;_fdda < _bbfc ;_fdda ++{_cgcg .Data [_cabd ]=0x0;_cabd ++;};if _egfg > 0{_cgcg .Data [_cabd ]=_gbgb (_cgcg .Data [_cabd ],0x0,_cbdd );
};};case PixSet :for _daae =0;_daae < _fabg ;_daae ++{_cabd =_fcbeg +_daae *_cgcg .RowStride ;for _fdda =0;_fdda < _bbfc ;_fdda ++{_cgcg .Data [_cabd ]=0xff;_cabd ++;};if _egfg > 0{_cgcg .Data [_cabd ]=_gbgb (_cgcg .Data [_cabd ],0xff,_cbdd );};};case PixNotDst :for _daae =0;
_daae < _fabg ;_daae ++{_cabd =_fcbeg +_daae *_cgcg .RowStride ;for _fdda =0;_fdda < _bbfc ;_fdda ++{_cgcg .Data [_cabd ]=^_cgcg .Data [_cabd ];_cabd ++;};if _egfg > 0{_cgcg .Data [_cabd ]=_gbgb (_cgcg .Data [_cabd ],^_cgcg .Data [_cabd ],_cbdd );};};};
};func (_cefg *ClassedPoints )SortByX (){_cefg ._eeacb =_cefg .xSortFunction ();_ge .Sort (_cefg )};func (_eefe *Bitmap )String ()string {var _cccc ="\u000a";for _bffe :=0;_bffe < _eefe .Height ;_bffe ++{var _gaeg string ;for _gee :=0;_gee < _eefe .Width ;
_gee ++{_gbdg :=_eefe .GetPixel (_gee ,_bffe );if _gbdg {_gaeg +="\u0031";}else {_gaeg +="\u0030";};};_cccc +=_gaeg +"\u000a";};return _cccc ;};func (_cfbf *BitmapsArray )GetBitmaps (i int )(*Bitmaps ,error ){const _gfgef ="\u0042\u0069\u0074ma\u0070\u0073\u0041\u0072\u0072\u0061\u0079\u002e\u0047\u0065\u0074\u0042\u0069\u0074\u006d\u0061\u0070\u0073";
if _cfbf ==nil {return nil ,_eg .Error (_gfgef ,"p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074m\u0061\u0070\u0073A\u0072r\u0061\u0079\u0027");};if i > len (_cfbf .Values )-1{return nil ,_eg .Errorf (_gfgef ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _cfbf .Values [i ],nil ;};func (_ffde *Bitmaps )GroupByHeight ()(*BitmapsArray ,error ){const _debbb ="\u0047\u0072\u006f\u0075\u0070\u0042\u0079\u0048\u0065\u0069\u0067\u0068\u0074";if len (_ffde .Values )==0{return nil ,_eg .Error (_debbb ,"\u006eo\u0020v\u0061\u006c\u0075\u0065\u0073 \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");
};_ceaac :=&BitmapsArray {};_ffde .SortByHeight ();_fbac :=-1;_cgcgd :=-1;for _abfc :=0;_abfc < len (_ffde .Values );_abfc ++{_afbc :=_ffde .Values [_abfc ].Height ;if _afbc > _fbac {_fbac =_afbc ;_cgcgd ++;_ceaac .Values =append (_ceaac .Values ,&Bitmaps {});
};_ceaac .Values [_cgcgd ].AddBitmap (_ffde .Values [_abfc ]);};return _ceaac ,nil ;};func CorrelationScore (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab []int )(_dagb float64 ,_aabd error ){const _ecgd ="\u0063\u006fr\u0072\u0065\u006ca\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065";
if bm1 ==nil ||bm2 ==nil {return 0,_eg .Error (_ecgd ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0062\u0069\u0074ma\u0070\u0073");};if tab ==nil {return 0,_eg .Error (_ecgd ,"\u0027\u0074\u0061\u0062\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};if area1 <=0||area2 <=0{return 0,_eg .Error (_ecgd ,"\u0061\u0072\u0065\u0061s\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0067r\u0065a\u0074\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u0030");};_gbf ,_gddd :=bm1 .Width ,bm1 .Height ;_dge ,_gacg :=bm2 .Width ,bm2 .Height ;
_gcfc :=_cafb (_gbf -_dge );if _gcfc > maxDiffW {return 0,nil ;};_bfdg :=_cafb (_gddd -_gacg );if _bfdg > maxDiffH {return 0,nil ;};var _efbca ,_ffdb int ;if delX >=0{_efbca =int (delX +0.5);}else {_efbca =int (delX -0.5);};if delY >=0{_ffdb =int (delY +0.5);
}else {_ffdb =int (delY -0.5);};_feg :=_cbea (_ffdb ,0);_ccb :=_ded (_gacg +_ffdb ,_gddd );_ebcg :=bm1 .RowStride *_feg ;_acfgf :=bm2 .RowStride *(_feg -_ffdb );_dcgf :=_cbea (_efbca ,0);_cgfe :=_ded (_dge +_efbca ,_gbf );_bcef :=bm2 .RowStride ;var _gaege ,_cffg int ;
if _efbca >=8{_gaege =_efbca >>3;_ebcg +=_gaege ;_dcgf -=_gaege <<3;_cgfe -=_gaege <<3;_efbca &=7;}else if _efbca <=-8{_cffg =-((_efbca +7)>>3);_acfgf +=_cffg ;_bcef -=_cffg ;_efbca +=_cffg <<3;};if _dcgf >=_cgfe ||_feg >=_ccb {return 0,nil ;};_cbcf :=(_cgfe +7)>>3;
var (_agc ,_baga ,_cdec byte ;_ggfd ,_edea ,_ddba int ;);switch {case _efbca ==0:for _ddba =_feg ;_ddba < _ccb ;_ddba ,_ebcg ,_acfgf =_ddba +1,_ebcg +bm1 .RowStride ,_acfgf +bm2 .RowStride {for _edea =0;_edea < _cbcf ;_edea ++{_cdec =bm1 .Data [_ebcg +_edea ]&bm2 .Data [_acfgf +_edea ];
_ggfd +=tab [_cdec ];};};case _efbca > 0:if _bcef < _cbcf {for _ddba =_feg ;_ddba < _ccb ;_ddba ,_ebcg ,_acfgf =_ddba +1,_ebcg +bm1 .RowStride ,_acfgf +bm2 .RowStride {_agc ,_baga =bm1 .Data [_ebcg ],bm2 .Data [_acfgf ]>>uint (_efbca );_cdec =_agc &_baga ;
_ggfd +=tab [_cdec ];for _edea =1;_edea < _bcef ;_edea ++{_agc ,_baga =bm1 .Data [_ebcg +_edea ],(bm2 .Data [_acfgf +_edea ]>>uint (_efbca ))|(bm2 .Data [_acfgf +_edea -1]<<uint (8-_efbca ));_cdec =_agc &_baga ;_ggfd +=tab [_cdec ];};_agc =bm1 .Data [_ebcg +_edea ];
_baga =bm2 .Data [_acfgf +_edea -1]<<uint (8-_efbca );_cdec =_agc &_baga ;_ggfd +=tab [_cdec ];};}else {for _ddba =_feg ;_ddba < _ccb ;_ddba ,_ebcg ,_acfgf =_ddba +1,_ebcg +bm1 .RowStride ,_acfgf +bm2 .RowStride {_agc ,_baga =bm1 .Data [_ebcg ],bm2 .Data [_acfgf ]>>uint (_efbca );
_cdec =_agc &_baga ;_ggfd +=tab [_cdec ];for _edea =1;_edea < _cbcf ;_edea ++{_agc =bm1 .Data [_ebcg +_edea ];_baga =(bm2 .Data [_acfgf +_edea ]>>uint (_efbca ))|(bm2 .Data [_acfgf +_edea -1]<<uint (8-_efbca ));_cdec =_agc &_baga ;_ggfd +=tab [_cdec ];
};};};default:if _cbcf < _bcef {for _ddba =_feg ;_ddba < _ccb ;_ddba ,_ebcg ,_acfgf =_ddba +1,_ebcg +bm1 .RowStride ,_acfgf +bm2 .RowStride {for _edea =0;_edea < _cbcf ;_edea ++{_agc =bm1 .Data [_ebcg +_edea ];_baga =bm2 .Data [_acfgf +_edea ]<<uint (-_efbca );
_baga |=bm2 .Data [_acfgf +_edea +1]>>uint (8+_efbca );_cdec =_agc &_baga ;_ggfd +=tab [_cdec ];};};}else {for _ddba =_feg ;_ddba < _ccb ;_ddba ,_ebcg ,_acfgf =_ddba +1,_ebcg +bm1 .RowStride ,_acfgf +bm2 .RowStride {for _edea =0;_edea < _cbcf -1;_edea ++{_agc =bm1 .Data [_ebcg +_edea ];
_baga =bm2 .Data [_acfgf +_edea ]<<uint (-_efbca );_baga |=bm2 .Data [_acfgf +_edea +1]>>uint (8+_efbca );_cdec =_agc &_baga ;_ggfd +=tab [_cdec ];};_agc =bm1 .Data [_ebcg +_edea ];_baga =bm2 .Data [_acfgf +_edea ]<<uint (-_efbca );_cdec =_agc &_baga ;
_ggfd +=tab [_cdec ];};};};_dagb =float64 (_ggfd )*float64 (_ggfd )/(float64 (area1 )*float64 (area2 ));return _dagb ,nil ;};func (_bgdg *Bitmap )SizesEqual (s *Bitmap )bool {if _bgdg ==s {return true ;};if _bgdg .Width !=s .Width ||_bgdg .Height !=s .Height {return false ;
};return true ;};func init (){const _adbce ="\u0062\u0069\u0074\u006dap\u0073\u002e\u0069\u006e\u0069\u0074\u0069\u0061\u006c\u0069\u007a\u0061\u0074\u0069o\u006e";_cbdb =New (50,40);var _gdcb error ;_cbdb ,_gdcb =_cbdb .AddBorder (2,1);if _gdcb !=nil {panic (_eg .Wrap (_gdcb ,_adbce ,"f\u0072\u0061\u006d\u0065\u0042\u0069\u0074\u006d\u0061\u0070"));
};_faga ,_gdcb =NewWithData (50,22,_fegg );if _gdcb !=nil {panic (_eg .Wrap (_gdcb ,_adbce ,"i\u006d\u0061\u0067\u0065\u0042\u0069\u0074\u006d\u0061\u0070"));};};func (_eadb *Bitmap )equivalent (_eddg *Bitmap )bool {if _eadb ==_eddg {return true ;};if !_eadb .SizesEqual (_eddg ){return false ;
};_bce :=_gcb (_eadb ,_eddg ,CmbOpXor );_cbgg :=_eadb .countPixels ();_aab :=int (0.25*float32 (_cbgg ));if _bce .thresholdPixelSum (_aab ){return false ;};var (_ebf [9][9]int ;_abbe [18][9]int ;_ddc [9][18]int ;_gecb int ;_eac int ;);_aaea :=9;_eefd :=_eadb .Height /_aaea ;
_agdgb :=_eadb .Width /_aaea ;_dda ,_dacf :=_eefd /2,_agdgb /2;if _eefd < _agdgb {_dda =_agdgb /2;_dacf =_eefd /2;};_daf :=float64 (_dda )*float64 (_dacf )*_c .Pi ;_ggbd :=int (float64 (_eefd *_agdgb /2)*0.9);_ebae :=int (float64 (_agdgb *_eefd /2)*0.9);
for _eecd :=0;_eecd < _aaea ;_eecd ++{_cged :=_agdgb *_eecd +_gecb ;var _bdc int ;if _eecd ==_aaea -1{_gecb =0;_bdc =_eadb .Width ;}else {_bdc =_cged +_agdgb ;if ((_eadb .Width -_gecb )%_aaea )> 0{_gecb ++;_bdc ++;};};for _eecf :=0;_eecf < _aaea ;_eecf ++{_dgd :=_eefd *_eecf +_eac ;
var _fafa int ;if _eecf ==_aaea -1{_eac =0;_fafa =_eadb .Height ;}else {_fafa =_dgd +_eefd ;if (_eadb .Height -_eac )%_aaea > 0{_eac ++;_fafa ++;};};var _aefe ,_cgc ,_cfe ,_cfeg int ;_dffe :=(_cged +_bdc )/2;_egeacd :=(_dgd +_fafa )/2;for _ede :=_cged ;
_ede < _bdc ;_ede ++{for _cbfd :=_dgd ;_cbfd < _fafa ;_cbfd ++{if _bce .GetPixel (_ede ,_cbfd ){if _ede < _dffe {_aefe ++;}else {_cgc ++;};if _cbfd < _egeacd {_cfeg ++;}else {_cfe ++;};};};};_ebf [_eecd ][_eecf ]=_aefe +_cgc ;_abbe [_eecd *2][_eecf ]=_aefe ;
_abbe [_eecd *2+1][_eecf ]=_cgc ;_ddc [_eecd ][_eecf *2]=_cfeg ;_ddc [_eecd ][_eecf *2+1]=_cfe ;};};for _fbcb :=0;_fbcb < _aaea *2-1;_fbcb ++{for _cef :=0;_cef < (_aaea -1);_cef ++{var _ceda int ;for _fcg :=0;_fcg < 2;_fcg ++{for _cbge :=0;_cbge < 2;_cbge ++{_ceda +=_abbe [_fbcb +_fcg ][_cef +_cbge ];
};};if _ceda > _ebae {return false ;};};};for _eggd :=0;_eggd < (_aaea -1);_eggd ++{for _ecb :=0;_ecb < ((_aaea *2)-1);_ecb ++{var _dgf int ;for _gbdgg :=0;_gbdgg < 2;_gbdgg ++{for _eee :=0;_eee < 2;_eee ++{_dgf +=_ddc [_eggd +_gbdgg ][_ecb +_eee ];};};
if _dgf > _ggbd {return false ;};};};for _effe :=0;_effe < (_aaea -2);_effe ++{for _bgcg :=0;_bgcg < (_aaea -2);_bgcg ++{var _aabb ,_befda int ;for _eeac :=0;_eeac < 3;_eeac ++{for _dbf :=0;_dbf < 3;_dbf ++{if _eeac ==_dbf {_aabb +=_ebf [_effe +_eeac ][_bgcg +_dbf ];
};if (2-_eeac )==_dbf {_befda +=_ebf [_effe +_eeac ][_bgcg +_dbf ];};};};if _aabb > _ebae ||_befda > _ebae {return false ;};};};for _fba :=0;_fba < (_aaea -1);_fba ++{for _fdaf :=0;_fdaf < (_aaea -1);_fdaf ++{var _bcfff int ;for _cfc :=0;_cfc < 2;_cfc ++{for _eaca :=0;
_eaca < 2;_eaca ++{_bcfff +=_ebf [_fba +_cfc ][_fdaf +_eaca ];};};if float64 (_bcfff )> _daf {return false ;};};};return true ;};const (_ SizeComparison =iota ;SizeSelectIfLT ;SizeSelectIfGT ;SizeSelectIfLTE ;SizeSelectIfGTE ;SizeSelectIfEQ ;);func TstGetScaledSymbol (t *_g .T ,sm *Bitmap ,scale ...int )*Bitmap {if len (scale )==0{return sm ;
};if scale [0]==1{return sm ;};_dfecd ,_eede :=MorphSequence (sm ,MorphProcess {Operation :MopReplicativeBinaryExpansion ,Arguments :scale });_a .NoError (t ,_eede );return _dfecd ;};func _bgda (_agd *Bitmap ,_caf ,_ddg int )(*Bitmap ,error ){const _ggd ="e\u0078\u0070\u0061\u006edB\u0069n\u0061\u0072\u0079\u0052\u0065p\u006c\u0069\u0063\u0061\u0074\u0065";
if _agd ==nil {return nil ,_eg .Error (_ggd ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _caf <=0||_ddg <=0{return nil ,_eg .Error (_ggd ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0073\u0063\u0061l\u0065\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020<\u003d\u0020\u0030");
};if _caf ==_ddg {if _caf ==1{_aef ,_bge :=_cecd (nil ,_agd );if _bge !=nil {return nil ,_eg .Wrap (_bge ,_ggd ,"\u0078\u0046\u0061\u0063\u0074\u0020\u003d\u003d\u0020y\u0046\u0061\u0063\u0074");};return _aef ,nil ;};if _caf ==2||_caf ==4||_caf ==8{_ega ,_cff :=_gbd (_agd ,_caf );
if _cff !=nil {return nil ,_eg .Wrap (_cff ,_ggd ,"\u0078\u0046a\u0063\u0074\u0020i\u006e\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d");};return _ega ,nil ;};};_bfa :=_caf *_agd .Width ;_dgbf :=_ddg *_agd .Height ;_fcb :=New (_bfa ,_dgbf );_ff :=_fcb .RowStride ;
var (_af ,_fce ,_beb ,_ed ,_ffd int ;_fg byte ;_dbd error ;);for _fce =0;_fce < _agd .Height ;_fce ++{_af =_ddg *_fce *_ff ;for _beb =0;_beb < _agd .Width ;_beb ++{if _cae :=_agd .GetPixel (_beb ,_fce );_cae {_ffd =_caf *_beb ;for _ed =0;_ed < _caf ;_ed ++{_fcb .setBit (_af *8+_ffd +_ed );
};};};for _ed =1;_ed < _ddg ;_ed ++{_edf :=_af +_ed *_ff ;for _adb :=0;_adb < _ff ;_adb ++{if _fg ,_dbd =_fcb .GetByte (_af +_adb );_dbd !=nil {return nil ,_eg .Wrapf (_dbd ,_ggd ,"\u0072\u0065\u0070\u006cic\u0061\u0074\u0069\u006e\u0067\u0020\u006c\u0069\u006e\u0065\u003a\u0020\u0027\u0025d\u0027",_ed );
};if _dbd =_fcb .SetByte (_edf +_adb ,_fg );_dbd !=nil {return nil ,_eg .Wrap (_dbd ,_ggd ,"\u0053\u0065\u0074\u0074in\u0067\u0020\u0062\u0079\u0074\u0065\u0020\u0066\u0061\u0069\u006c\u0065\u0064");};};};};return _fcb ,nil ;};func TstWordBitmap (t *_g .T ,scale ...int )*Bitmap {_babce :=1;
if len (scale )> 0{_babce =scale [0];};_dbad :=3;_dbda :=9+7+15+2*_dbad ;_fgeef :=5+_dbad +5;_bfgbd :=New (_dbda *_babce ,_fgeef *_babce );_ffdga :=&Bitmaps {};var _cddgd *int ;_dbad *=_babce ;_bcead :=0;_cddgd =&_bcead ;_bfae :=0;_fbfb :=TstDSymbol (t ,scale ...);
TstAddSymbol (t ,_ffdga ,_fbfb ,_cddgd ,_bfae ,1*_babce );_fbfb =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_ffdga ,_fbfb ,_cddgd ,_bfae ,_dbad );_fbfb =TstISymbol (t ,scale ...);TstAddSymbol (t ,_ffdga ,_fbfb ,_cddgd ,_bfae ,1*_babce );_fbfb =TstTSymbol (t ,scale ...);
TstAddSymbol (t ,_ffdga ,_fbfb ,_cddgd ,_bfae ,_dbad );_fbfb =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_ffdga ,_fbfb ,_cddgd ,_bfae ,1*_babce );_fbfb =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_ffdga ,_fbfb ,_cddgd ,_bfae ,1*_babce );_fbfb =TstWSymbol (t ,scale ...);
TstAddSymbol (t ,_ffdga ,_fbfb ,_cddgd ,_bfae ,0);*_cddgd =0;_bfae =5*_babce +_dbad ;_fbfb =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_ffdga ,_fbfb ,_cddgd ,_bfae ,1*_babce );_fbfb =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_ffdga ,_fbfb ,_cddgd ,_bfae ,_dbad );
_fbfb =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_ffdga ,_fbfb ,_cddgd ,_bfae ,1*_babce );_fbfb =TstESymbol (t ,scale ...);TstAddSymbol (t ,_ffdga ,_fbfb ,_cddgd ,_bfae ,1*_babce );_fbfb =TstVSymbol (t ,scale ...);TstAddSymbol (t ,_ffdga ,_fbfb ,_cddgd ,_bfae ,1*_babce );
_fbfb =TstESymbol (t ,scale ...);TstAddSymbol (t ,_ffdga ,_fbfb ,_cddgd ,_bfae ,1*_babce );_fbfb =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_ffdga ,_fbfb ,_cddgd ,_bfae ,0);TstWriteSymbols (t ,_ffdga ,_bfgbd );return _bfgbd ;};func _afbf (_debd ,_cbbd byte ,_baca CombinationOperator )byte {switch _baca {case CmbOpOr :return _cbbd |_debd ;
case CmbOpAnd :return _cbbd &_debd ;case CmbOpXor :return _cbbd ^_debd ;case CmbOpXNor :return ^(_cbbd ^_debd );case CmbOpNot :return ^(_cbbd );default:return _cbbd ;};};func (_cbc *Bitmap )AddBorderGeneral (left ,right ,top ,bot int ,val int )(*Bitmap ,error ){return _cbc .addBorderGeneral (left ,right ,top ,bot ,val );
};func Copy (d ,s *Bitmap )(*Bitmap ,error ){return _cecd (d ,s )};func TstDSymbol (t *_g .T ,scale ...int )*Bitmap {_fcc ,_bgge :=NewWithData (4,5,[]byte {0xf0,0x90,0x90,0x90,0xE0});_a .NoError (t ,_bgge );return TstGetScaledSymbol (t ,_fcc ,scale ...);
};type MorphOperation int ;func _cbggf (_fecb ,_ggcg *Bitmap ,_bdaac ,_bbfd int )(*Bitmap ,error ){const _cedc ="\u0065\u0072\u006f\u0064\u0065\u0042\u0072\u0069\u0063\u006b";if _ggcg ==nil {return nil ,_eg .Error (_cedc ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _bdaac < 1||_bbfd < 1{return nil ,_eg .Error (_cedc ,"\u0068\u0073\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0073\u0069\u007a\u0065\u0020\u0061\u0072e\u0020\u006e\u006f\u0074\u0020\u0067\u0072e\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006fr\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0031");
};if _bdaac ==1&&_bbfd ==1{_fggb ,_dadd :=_cecd (_fecb ,_ggcg );if _dadd !=nil {return nil ,_eg .Wrap (_dadd ,_cedc ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u0026\u0026 \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _fggb ,nil ;};if _bdaac ==1||_bbfd ==1{_eead :=SelCreateBrick (_bbfd ,_bdaac ,_bbfd /2,_bdaac /2,SelHit );_babec ,_bfef :=_eeffa (_fecb ,_ggcg ,_eead );if _bfef !=nil {return nil ,_eg .Wrap (_bfef ,_cedc ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _babec ,nil ;};_bdec :=SelCreateBrick (1,_bdaac ,0,_bdaac /2,SelHit );_adbb :=SelCreateBrick (_bbfd ,1,_bbfd /2,0,SelHit );_fdgc ,_ecdff :=_eeffa (nil ,_ggcg ,_bdec );if _ecdff !=nil {return nil ,_eg .Wrap (_ecdff ,_cedc ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};_fecb ,_ecdff =_eeffa (_fecb ,_fdgc ,_adbb );if _ecdff !=nil {return nil ,_eg .Wrap (_ecdff ,_cedc ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};return _fecb ,nil ;};func _cee (_eb *Bitmap ,_ad *Bitmap ,_bff int )(_efa error ){const _gef ="e\u0078\u0070\u0061\u006edB\u0069n\u0061\u0072\u0079\u0050\u006fw\u0065\u0072\u0032\u004c\u006f\u0077";
switch _bff {case 2:_efa =_bd (_eb ,_ad );case 4:_efa =_ged (_eb ,_ad );case 8:_efa =_bgd (_eb ,_ad );default:return _eg .Error (_gef ,"\u0065\u0078p\u0061\u006e\u0073\u0069o\u006e\u0020f\u0061\u0063\u0074\u006f\u0072\u0020\u006e\u006ft\u0020\u0069\u006e\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d\u0020r\u0061\u006e\u0067\u0065");
};if _efa !=nil {_efa =_eg .Wrap (_efa ,_gef ,"");};return _efa ;};func (_edbe *Points )AddPoint (x ,y float32 ){*_edbe =append (*_edbe ,Point {x ,y })};func HausTest (p1 ,p2 ,p3 ,p4 *Bitmap ,delX ,delY float32 ,maxDiffW ,maxDiffH int )(bool ,error ){const _eaae ="\u0048\u0061\u0075\u0073\u0054\u0065\u0073\u0074";
_gdeg ,_cdab :=p1 .Width ,p1 .Height ;_edba ,_gebf :=p3 .Width ,p3 .Height ;if _b .Abs (_gdeg -_edba )> maxDiffW {return false ,nil ;};if _b .Abs (_cdab -_gebf )> maxDiffH {return false ,nil ;};_aaca :=int (delX +_b .Sign (delX )*0.5);_ffdc :=int (delY +_b .Sign (delY )*0.5);
var _fecd error ;_cfcc :=p1 .CreateTemplate ();if _fecd =_cfcc .RasterOperation (0,0,_gdeg ,_cdab ,PixSrc ,p1 ,0,0);_fecd !=nil {return false ,_eg .Wrap (_fecd ,_eaae ,"p\u0031\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _fecd =_cfcc .RasterOperation (_aaca ,_ffdc ,_gdeg ,_cdab ,PixNotSrcAndDst ,p4 ,0,0);
_fecd !=nil {return false ,_eg .Wrap (_fecd ,_eaae ,"\u0021p\u0034\u0020\u0026\u0020\u0074");};if _cfcc .Zero (){return false ,nil ;};if _fecd =_cfcc .RasterOperation (_aaca ,_ffdc ,_edba ,_gebf ,PixSrc ,p3 ,0,0);_fecd !=nil {return false ,_eg .Wrap (_fecd ,_eaae ,"p\u0033\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");
};if _fecd =_cfcc .RasterOperation (0,0,_edba ,_gebf ,PixNotSrcAndDst ,p2 ,0,0);_fecd !=nil {return false ,_eg .Wrap (_fecd ,_eaae ,"\u0021p\u0032\u0020\u0026\u0020\u0074");};return _cfcc .Zero (),nil ;};func (_baf *Bitmap )countPixels ()int {var (_dfg int ;
_bffb uint8 ;_dga byte ;_faa int ;);_efaf :=_baf .RowStride ;_dffg :=uint (_baf .Width &0x07);if _dffg !=0{_bffb =uint8 ((0xff<<(8-_dffg ))&0xff);_efaf --;};for _baec :=0;_baec < _baf .Height ;_baec ++{for _faa =0;_faa < _efaf ;_faa ++{_dga =_baf .Data [_baec *_baf .RowStride +_faa ];
_dfg +=int (_aefb [_dga ]);};if _dffg !=0{_dfg +=int (_aefb [_baf .Data [_baec *_baf .RowStride +_faa ]&_bffb ]);};};return _dfg ;};func (_ggfg *ClassedPoints )Less (i ,j int )bool {return _ggfg ._eeacb (i ,j )};func TstFrameBitmap ()*Bitmap {return _cbdb .Copy ()};
type LocationFilter int ;type Selection struct{Height ,Width int ;Cx ,Cy int ;Name string ;Data [][]SelectionValue ;};func _ggg (_agdb *Bitmap ,_faac *Bitmap ,_bdfac int )(_fefg error ){const _aaff ="\u0073\u0065\u0065\u0064\u0066\u0069\u006c\u006c\u0042\u0069\u006e\u0061r\u0079\u004c\u006f\u0077";
_ceafg :=_ded (_agdb .Height ,_faac .Height );_aade :=_ded (_agdb .RowStride ,_faac .RowStride );switch _bdfac {case 4:_fefg =_fged (_agdb ,_faac ,_ceafg ,_aade );case 8:_fefg =_ecaf (_agdb ,_faac ,_ceafg ,_aade );default:return _eg .Errorf (_aaff ,"\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0034\u0020\u006fr\u0020\u0038\u0020\u002d\u0020i\u0073\u003a \u0027\u0025\u0064\u0027",_bdfac );
};if _fefg !=nil {return _eg .Wrap (_fefg ,_aaff ,"");};return nil ;};func (_fdad *Bitmap )resizeImageData (_adbd *Bitmap )error {if _adbd ==nil {return _eg .Error ("\u0072e\u0073i\u007a\u0065\u0049\u006d\u0061\u0067\u0065\u0044\u0061\u0074\u0061","\u0073r\u0063 \u0069\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _fdad .SizesEqual (_adbd ){return nil ;};_fdad .Data =make ([]byte ,len (_adbd .Data ));_fdad .Width =_adbd .Width ;_fdad .Height =_adbd .Height ;_fdad .RowStride =_adbd .RowStride ;return nil ;};func _baed (_dfee ,_bbc *Bitmap ,_debc ,_cag ,_fgc ,_aac ,_ffcc ,_ageb ,_cfbb ,_cba int ,_acaf CombinationOperator ,_bcdd int )error {var _edeb int ;
_fafg :=func (){_edeb ++;_fgc +=_bbc .RowStride ;_aac +=_dfee .RowStride ;_ffcc +=_dfee .RowStride };for _edeb =_debc ;_edeb < _cag ;_fafg (){var _bafc uint16 ;_fecc :=_fgc ;for _cgd :=_aac ;_cgd <=_ffcc ;_cgd ++{_ecdd ,_edb :=_bbc .GetByte (_fecc );if _edb !=nil {return _edb ;
};_egge ,_edb :=_dfee .GetByte (_cgd );if _edb !=nil {return _edb ;};_bafc =(_bafc |(uint16 (_egge )&0xff))<<uint (_cba );_egge =byte (_bafc >>8);if _edb =_bbc .SetByte (_fecc ,_afbf (_ecdd ,_egge ,_acaf ));_edb !=nil {return _edb ;};_fecc ++;_bafc <<=uint (_cfbb );
if _cgd ==_ffcc {_egge =byte (_bafc >>(8-uint8 (_cba )));if _bcdd !=0{_egge =_bcfa (uint (8+_ageb ),_egge );};_ecdd ,_edb =_bbc .GetByte (_fecc );if _edb !=nil {return _edb ;};if _edb =_bbc .SetByte (_fecc ,_afbf (_ecdd ,_egge ,_acaf ));_edb !=nil {return _edb ;
};};};};return nil ;};