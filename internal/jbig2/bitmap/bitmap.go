//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package bitmap ;import (_a "encoding/binary";_dc "github.com/stretchr/testify/require";_gc "github.com/unidoc/unipdf/v4/common";_ef "github.com/unidoc/unipdf/v4/internal/bitwise";_f "github.com/unidoc/unipdf/v4/internal/imageutil";_ca "github.com/unidoc/unipdf/v4/internal/jbig2/basic";
_c "github.com/unidoc/unipdf/v4/internal/jbig2/errors";_fa "image";_da "math";_e "sort";_cd "strings";_g "testing";);func (_bgc *Bitmap )GetUnpaddedData ()([]byte ,error ){_bebb :=uint (_bgc .Width &0x07);if _bebb ==0{return _bgc .Data ,nil ;};_efd :=_bgc .Width *_bgc .Height ;
if _efd %8!=0{_efd >>=3;_efd ++;}else {_efd >>=3;};_bfcg :=make ([]byte ,_efd );_bdf :=_ef .NewWriterMSB (_bfcg );const _gbbc ="\u0047e\u0074U\u006e\u0070\u0061\u0064\u0064\u0065\u0064\u0044\u0061\u0074\u0061";for _becd :=0;_becd < _bgc .Height ;_becd ++{for _gbba :=0;
_gbba < _bgc .RowStride ;_gbba ++{_abcb :=_bgc .Data [_becd *_bgc .RowStride +_gbba ];if _gbba !=_bgc .RowStride -1{_bcfd :=_bdf .WriteByte (_abcb );if _bcfd !=nil {return nil ,_c .Wrap (_bcfd ,_gbbc ,"");};continue ;};for _ffe :=uint (0);_ffe < _bebb ;
_ffe ++{_ffb :=_bdf .WriteBit (int (_abcb >>(7-_ffe )&0x01));if _ffb !=nil {return nil ,_c .Wrap (_ffb ,_gbbc ,"");};};};};return _bfcg ,nil ;};func TstWordBitmap (t *_g .T ,scale ...int )*Bitmap {_eabb :=1;if len (scale )> 0{_eabb =scale [0];};_cacdd :=3;
_bdbe :=9+7+15+2*_cacdd ;_eaae :=5+_cacdd +5;_ceagg :=New (_bdbe *_eabb ,_eaae *_eabb );_gbcfg :=&Bitmaps {};var _edgg *int ;_cacdd *=_eabb ;_gegff :=0;_edgg =&_gegff ;_efaf :=0;_cagaa :=TstDSymbol (t ,scale ...);TstAddSymbol (t ,_gbcfg ,_cagaa ,_edgg ,_efaf ,1*_eabb );
_cagaa =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_gbcfg ,_cagaa ,_edgg ,_efaf ,_cacdd );_cagaa =TstISymbol (t ,scale ...);TstAddSymbol (t ,_gbcfg ,_cagaa ,_edgg ,_efaf ,1*_eabb );_cagaa =TstTSymbol (t ,scale ...);TstAddSymbol (t ,_gbcfg ,_cagaa ,_edgg ,_efaf ,_cacdd );
_cagaa =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_gbcfg ,_cagaa ,_edgg ,_efaf ,1*_eabb );_cagaa =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_gbcfg ,_cagaa ,_edgg ,_efaf ,1*_eabb );_cagaa =TstWSymbol (t ,scale ...);TstAddSymbol (t ,_gbcfg ,_cagaa ,_edgg ,_efaf ,0);
*_edgg =0;_efaf =5*_eabb +_cacdd ;_cagaa =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_gbcfg ,_cagaa ,_edgg ,_efaf ,1*_eabb );_cagaa =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_gbcfg ,_cagaa ,_edgg ,_efaf ,_cacdd );_cagaa =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_gbcfg ,_cagaa ,_edgg ,_efaf ,1*_eabb );
_cagaa =TstESymbol (t ,scale ...);TstAddSymbol (t ,_gbcfg ,_cagaa ,_edgg ,_efaf ,1*_eabb );_cagaa =TstVSymbol (t ,scale ...);TstAddSymbol (t ,_gbcfg ,_cagaa ,_edgg ,_efaf ,1*_eabb );_cagaa =TstESymbol (t ,scale ...);TstAddSymbol (t ,_gbcfg ,_cagaa ,_edgg ,_efaf ,1*_eabb );
_cagaa =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_gbcfg ,_cagaa ,_edgg ,_efaf ,0);TstWriteSymbols (t ,_gbcfg ,_ceagg );return _ceagg ;};func _ecb (_gbd *Bitmap ,_cca int ,_ecg []byte )(_cdc *Bitmap ,_dfc error ){const _bec ="\u0072\u0065\u0064\u0075\u0063\u0065\u0052\u0061\u006e\u006b\u0042\u0069n\u0061\u0072\u0079\u0032";
if _gbd ==nil {return nil ,_c .Error (_bec ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _cca < 1||_cca > 4{return nil ,_c .Error (_bec ,"\u006c\u0065\u0076\u0065\u006c\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0069\u006e\u0020\u0073e\u0074\u0020\u007b\u0031\u002c\u0032\u002c\u0033\u002c\u0034\u007d");
};if _gbd .Height <=1{return nil ,_c .Errorf (_bec ,"\u0073o\u0075\u0072c\u0065\u0020\u0068e\u0069\u0067\u0068\u0074\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061t\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0027\u0032\u0027\u0020-\u0020\u0069\u0073\u003a\u0020\u0027\u0025\u0064\u0027",_gbd .Height );
};_cdc =New (_gbd .Width /2,_gbd .Height /2);if _ecg ==nil {_ecg =_fcf ();};_cag :=_bccb (_gbd .RowStride ,2*_cdc .RowStride );switch _cca {case 1:_dfc =_edda (_gbd ,_cdc ,_cca ,_ecg ,_cag );case 2:_dfc =_cdbc (_gbd ,_cdc ,_cca ,_ecg ,_cag );case 3:_dfc =_beeb (_gbd ,_cdc ,_cca ,_ecg ,_cag );
case 4:_dfc =_beb (_gbd ,_cdc ,_cca ,_ecg ,_cag );};if _dfc !=nil {return nil ,_dfc ;};return _cdc ,nil ;};func (_dafef Points )Get (i int )(Point ,error ){if i > len (_dafef )-1{return Point {},_c .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _dafef [i ],nil ;};func _fbf (_gage *Bitmap ,_fgbd *Bitmap ,_fecb int )(_fdfdf error ){const _efdc ="\u0073\u0065\u0065\u0064\u0066\u0069\u006c\u006c\u0042\u0069\u006e\u0061r\u0079\u004c\u006f\u0077";_gdcg :=_bccb (_gage .Height ,_fgbd .Height );
_gfffc :=_bccb (_gage .RowStride ,_fgbd .RowStride );switch _fecb {case 4:_fdfdf =_fcdd (_gage ,_fgbd ,_gdcg ,_gfffc );case 8:_fdfdf =_ffbgd (_gage ,_fgbd ,_gdcg ,_gfffc );default:return _c .Errorf (_efdc ,"\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0034\u0020\u006fr\u0020\u0038\u0020\u002d\u0020i\u0073\u003a \u0027\u0025\u0064\u0027",_fecb );
};if _fdfdf !=nil {return _c .Wrap (_fdfdf ,_efdc ,"");};return nil ;};func _ccfga (_edba ,_cfeb *Bitmap ,_eaeb *Selection )(*Bitmap ,error ){const _aabeg ="\u006f\u0070\u0065\u006e";var _aea error ;_edba ,_aea =_eeff (_edba ,_cfeb ,_eaeb );if _aea !=nil {return nil ,_c .Wrap (_aea ,_aabeg ,"");
};_dbd ,_aea :=_bacb (nil ,_cfeb ,_eaeb );if _aea !=nil {return nil ,_c .Wrap (_aea ,_aabeg ,"");};_ ,_aea =_ebef (_edba ,_dbd ,_eaeb );if _aea !=nil {return nil ,_c .Wrap (_aea ,_aabeg ,"");};return _edba ,nil ;};func (_agb *Bitmap )ToImage ()_fa .Image {_gead ,_dce :=_f .NewImage (_agb .Width ,_agb .Height ,1,1,_agb .Data ,nil ,nil );
if _dce !=nil {_gc .Log .Error ("\u0043\u006f\u006e\u0076\u0065\u0072\u0074\u0069\u006e\u0067\u0020j\u0062\u0069\u0067\u0032\u002e\u0042\u0069\u0074m\u0061p\u0020\u0074\u006f\u0020\u0069\u006d\u0061\u0067\u0065\u0075\u0074\u0069\u006c\u002e\u0049\u006d\u0061\u0067e\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_dce );
};return _gead ;};func _fbdb (_daca ,_ceef *Bitmap ,_cfcg CombinationOperator )*Bitmap {_cdbf :=New (_daca .Width ,_daca .Height );for _dcbfa :=0;_dcbfa < len (_cdbf .Data );_dcbfa ++{_cdbf .Data [_dcbfa ]=_gfffe (_daca .Data [_dcbfa ],_ceef .Data [_dcbfa ],_cfcg );
};return _cdbf ;};func NewWithUnpaddedData (width ,height int ,data []byte )(*Bitmap ,error ){const _aed ="\u004e\u0065\u0077\u0057it\u0068\u0055\u006e\u0070\u0061\u0064\u0064\u0065\u0064\u0044\u0061\u0074\u0061";_efc :=_aae (width ,height );_efc .Data =data ;
if _cgg :=((width *height )+7)>>3;len (data )< _cgg {return nil ,_c .Errorf (_aed ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064a\u0074\u0061\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u003a\u0020\u0027\u0025\u0064\u0027\u002e\u0020\u0054\u0068\u0065\u0020\u0064\u0061t\u0061\u0020s\u0068\u006fu\u006c\u0064\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 l\u0065\u0061\u0073\u0074\u003a\u0020\u0027\u0025\u0064'\u0020\u0062\u0079\u0074\u0065\u0073",len (data ),_cgg );
};if _fcgf :=_efc .addPadBits ();_fcgf !=nil {return nil ,_c .Wrap (_fcgf ,_aed ,"");};return _efc ,nil ;};func TstNSymbol (t *_g .T ,scale ...int )*Bitmap {_fgeg ,_dabca :=NewWithData (4,5,[]byte {0x90,0xD0,0xB0,0x90,0x90});_dc .NoError (t ,_dabca );return TstGetScaledSymbol (t ,_fgeg ,scale ...);
};func (_bgege Points )XSorter ()func (_baf ,_gdc int )bool {return func (_dcgd ,_facf int )bool {return _bgege [_dcgd ].X < _bgege [_facf ].X };};func (_bcb *Bitmap )SetPadBits (value int ){_bcb .setPadBits (value )};func (_cbd *Bitmap )RemoveBorderGeneral (left ,right ,top ,bot int )(*Bitmap ,error ){return _cbd .removeBorderGeneral (left ,right ,top ,bot );
};func (_fegd *Bitmap )GetByteIndex (x ,y int )int {return y *_fegd .RowStride +(x >>3)};func (_eceee *ClassedPoints )SortByY (){_eceee ._bfgf =_eceee .ySortFunction ();_e .Sort (_eceee )};func New (width ,height int )*Bitmap {_bff :=_aae (width ,height );
_bff .Data =make ([]byte ,height *_bff .RowStride );return _bff ;};func (_bcbg *Selection )findMaxTranslations ()(_bdce ,_fbcff ,_aafge ,_bddg int ){for _ggda :=0;_ggda < _bcbg .Height ;_ggda ++{for _ddag :=0;_ddag < _bcbg .Width ;_ddag ++{if _bcbg .Data [_ggda ][_ddag ]==SelHit {_bdce =_acad (_bdce ,_bcbg .Cx -_ddag );
_fbcff =_acad (_fbcff ,_bcbg .Cy -_ggda );_aafge =_acad (_aafge ,_ddag -_bcbg .Cx );_bddg =_acad (_bddg ,_ggda -_bcbg .Cy );};};};return _bdce ,_fbcff ,_aafge ,_bddg ;};func init (){for _aaba :=0;_aaba < 256;_aaba ++{_dfa [_aaba ]=uint8 (_aaba &0x1)+(uint8 (_aaba >>1)&0x1)+(uint8 (_aaba >>2)&0x1)+(uint8 (_aaba >>3)&0x1)+(uint8 (_aaba >>4)&0x1)+(uint8 (_aaba >>5)&0x1)+(uint8 (_aaba >>6)&0x1)+(uint8 (_aaba >>7)&0x1);
};};func (_aegeb *Bitmap )GetChocolateData ()[]byte {if _aegeb .Color ==Vanilla {_aegeb .inverseData ();};return _aegeb .Data ;};func (_gacgg *Bitmaps )AddBitmap (bm *Bitmap ){_gacgg .Values =append (_gacgg .Values ,bm )};type Bitmap struct{Width ,Height int ;
BitmapNumber int ;RowStride int ;Data []byte ;Color Color ;Special int ;Text string ;XResolution ,YResolution int ;};func _gfffe (_cda ,_efb byte ,_bebdf CombinationOperator )byte {switch _bebdf {case CmbOpOr :return _efb |_cda ;case CmbOpAnd :return _efb &_cda ;
case CmbOpXor :return _efb ^_cda ;case CmbOpXNor :return ^(_efb ^_cda );case CmbOpNot :return ^(_efb );default:return _efb ;};};func (_ecgf *Bitmap )AddBorderGeneral (left ,right ,top ,bot int ,val int )(*Bitmap ,error ){return _ecgf .addBorderGeneral (left ,right ,top ,bot ,val );
};func _edda (_aab ,_dgb *Bitmap ,_cf int ,_fafg []byte ,_cbcf int )(_ecca error ){const _ebf ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0031";var (_cfg ,_eccb ,_gcf ,_aad ,_ead ,_gff ,_cfgf ,_fce int ;
_bf ,_dfg uint32 ;_cdgd ,_gda byte ;_fbd uint16 ;);_eg :=make ([]byte ,4);_de :=make ([]byte ,4);for _gcf =0;_gcf < _aab .Height -1;_gcf ,_aad =_gcf +2,_aad +1{_cfg =_gcf *_aab .RowStride ;_eccb =_aad *_dgb .RowStride ;for _ead ,_gff =0,0;_ead < _cbcf ;
_ead ,_gff =_ead +4,_gff +1{for _cfgf =0;_cfgf < 4;_cfgf ++{_fce =_cfg +_ead +_cfgf ;if _fce <=len (_aab .Data )-1&&_fce < _cfg +_aab .RowStride {_eg [_cfgf ]=_aab .Data [_fce ];}else {_eg [_cfgf ]=0x00;};_fce =_cfg +_aab .RowStride +_ead +_cfgf ;if _fce <=len (_aab .Data )-1&&_fce < _cfg +(2*_aab .RowStride ){_de [_cfgf ]=_aab .Data [_fce ];
}else {_de [_cfgf ]=0x00;};};_bf =_a .BigEndian .Uint32 (_eg );_dfg =_a .BigEndian .Uint32 (_de );_dfg |=_bf ;_dfg |=_dfg <<1;_dfg &=0xaaaaaaaa;_bf =_dfg |(_dfg <<7);_cdgd =byte (_bf >>24);_gda =byte ((_bf >>8)&0xff);_fce =_eccb +_gff ;if _fce +1==len (_dgb .Data )-1||_fce +1>=_eccb +_dgb .RowStride {_dgb .Data [_fce ]=_fafg [_cdgd ];
}else {_fbd =(uint16 (_fafg [_cdgd ])<<8)|uint16 (_fafg [_gda ]);if _ecca =_dgb .setTwoBytes (_fce ,_fbd );_ecca !=nil {return _c .Wrapf (_ecca ,_ebf ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_fce );
};_gff ++;};};};return nil ;};func (_eee *Bitmap )setFourBytes (_fcca int ,_gbdb uint32 )error {if _fcca +3> len (_eee .Data )-1{return _c .Errorf ("\u0073\u0065\u0074F\u006f\u0075\u0072\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_fcca );
};_eee .Data [_fcca ]=byte ((_gbdb &0xff000000)>>24);_eee .Data [_fcca +1]=byte ((_gbdb &0xff0000)>>16);_eee .Data [_fcca +2]=byte ((_gbdb &0xff00)>>8);_eee .Data [_fcca +3]=byte (_gbdb &0xff);return nil ;};func TstAddSymbol (t *_g .T ,bms *Bitmaps ,sym *Bitmap ,x *int ,y int ,space int ){bms .AddBitmap (sym );
_bddf :=_fa .Rect (*x ,y ,*x +sym .Width ,y +sym .Height );bms .AddBox (&_bddf );*x +=sym .Width +space ;};func RankHausTest (p1 ,p2 ,p3 ,p4 *Bitmap ,delX ,delY float32 ,maxDiffW ,maxDiffH ,area1 ,area3 int ,rank float32 ,tab8 []int )(_bdbge bool ,_gbae error ){const _fdge ="\u0052\u0061\u006ek\u0048\u0061\u0075\u0073\u0054\u0065\u0073\u0074";
_bgdd ,_eegb :=p1 .Width ,p1 .Height ;_gcda ,_aedc :=p3 .Width ,p3 .Height ;if _ca .Abs (_bgdd -_gcda )> maxDiffW {return false ,nil ;};if _ca .Abs (_eegb -_aedc )> maxDiffH {return false ,nil ;};_fcdc :=int (float32 (area1 )*(1.0-rank )+0.5);_ecdb :=int (float32 (area3 )*(1.0-rank )+0.5);
var _fdcec ,_acgd int ;if delX >=0{_fdcec =int (delX +0.5);}else {_fdcec =int (delX -0.5);};if delY >=0{_acgd =int (delY +0.5);}else {_acgd =int (delY -0.5);};_aabe :=p1 .CreateTemplate ();if _gbae =_aabe .RasterOperation (0,0,_bgdd ,_eegb ,PixSrc ,p1 ,0,0);
_gbae !=nil {return false ,_c .Wrap (_gbae ,_fdge ,"p\u0031\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _gbae =_aabe .RasterOperation (_fdcec ,_acgd ,_bgdd ,_eegb ,PixNotSrcAndDst ,p4 ,0,0);_gbae !=nil {return false ,_c .Wrap (_gbae ,_fdge ,"\u0074 \u0026\u0020\u0021\u0070\u0034");
};_bdbge ,_gbae =_aabe .ThresholdPixelSum (_fcdc ,tab8 );if _gbae !=nil {return false ,_c .Wrap (_gbae ,_fdge ,"\u0074\u002d\u003e\u0074\u0068\u0072\u0065\u0073\u0068\u0031");};if _bdbge {return false ,nil ;};if _gbae =_aabe .RasterOperation (_fdcec ,_acgd ,_gcda ,_aedc ,PixSrc ,p3 ,0,0);
_gbae !=nil {return false ,_c .Wrap (_gbae ,_fdge ,"p\u0033\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _gbae =_aabe .RasterOperation (0,0,_gcda ,_aedc ,PixNotSrcAndDst ,p2 ,0,0);_gbae !=nil {return false ,_c .Wrap (_gbae ,_fdge ,"\u0074 \u0026\u0020\u0021\u0070\u0032");
};_bdbge ,_gbae =_aabe .ThresholdPixelSum (_ecdb ,tab8 );if _gbae !=nil {return false ,_c .Wrap (_gbae ,_fdge ,"\u0074\u002d\u003e\u0074\u0068\u0072\u0065\u0073\u0068\u0033");};return !_bdbge ,nil ;};func (_dfgb Points )YSorter ()func (_ddad ,_eeeb int )bool {return func (_cabgf ,_bcca int )bool {return _dfgb [_cabgf ].Y < _dfgb [_bcca ].Y };
};func (_gde *Bitmap )nextOnPixelLow (_fdeg ,_fef ,_ccgf ,_bbgd ,_gbcf int )(_ade _fa .Point ,_cbbg bool ,_aca error ){const _cgfe ="B\u0069\u0074\u006d\u0061p.\u006ee\u0078\u0074\u004f\u006e\u0050i\u0078\u0065\u006c\u004c\u006f\u0077";var (_bcg int ;_efgf byte ;
);_dacb :=_gbcf *_ccgf ;_cacg :=_dacb +(_bbgd /8);if _efgf ,_aca =_gde .GetByte (_cacg );_aca !=nil {return _ade ,false ,_c .Wrap (_aca ,_cgfe ,"\u0078\u0053\u0074\u0061\u0072\u0074\u0020\u0061\u006e\u0064 \u0079\u0053\u0074\u0061\u0072\u0074\u0020o\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065");
};if _efgf !=0{_egdc :=_bbgd -(_bbgd %8)+7;for _bcg =_bbgd ;_bcg <=_egdc &&_bcg < _fdeg ;_bcg ++{if _gde .GetPixel (_bcg ,_gbcf ){_ade .X =_bcg ;_ade .Y =_gbcf ;return _ade ,true ,nil ;};};};_cadb :=(_bbgd /8)+1;_bcg =8*_cadb ;var _fegc int ;for _cacg =_dacb +_cadb ;
_bcg < _fdeg ;_cacg ,_bcg =_cacg +1,_bcg +8{if _efgf ,_aca =_gde .GetByte (_cacg );_aca !=nil {return _ade ,false ,_c .Wrap (_aca ,_cgfe ,"r\u0065\u0073\u0074\u0020of\u0020t\u0068\u0065\u0020\u006c\u0069n\u0065\u0020\u0062\u0079\u0074\u0065");};if _efgf ==0{continue ;
};for _fegc =0;_fegc < 8&&_bcg < _fdeg ;_fegc ,_bcg =_fegc +1,_bcg +1{if _gde .GetPixel (_bcg ,_gbcf ){_ade .X =_bcg ;_ade .Y =_gbcf ;return _ade ,true ,nil ;};};};for _dcb :=_gbcf +1;_dcb < _fef ;_dcb ++{_dacb =_dcb *_ccgf ;for _cacg ,_bcg =_dacb ,0;_bcg < _fdeg ;
_cacg ,_bcg =_cacg +1,_bcg +8{if _efgf ,_aca =_gde .GetByte (_cacg );_aca !=nil {return _ade ,false ,_c .Wrap (_aca ,_cgfe ,"\u0066o\u006cl\u006f\u0077\u0069\u006e\u0067\u0020\u006c\u0069\u006e\u0065\u0073");};if _efgf ==0{continue ;};for _fegc =0;_fegc < 8&&_bcg < _fdeg ;
_fegc ,_bcg =_fegc +1,_bcg +1{if _gde .GetPixel (_bcg ,_dcb ){_ade .X =_bcg ;_ade .Y =_dcb ;return _ade ,true ,nil ;};};};};return _ade ,false ,nil ;};type SizeComparison int ;const _fbdd =5000;func (_cfac *Bitmap )setBit (_defe int ){_cfac .Data [(_defe >>3)]|=0x80>>uint (_defe &7)};
func Blit (src *Bitmap ,dst *Bitmap ,x ,y int ,op CombinationOperator )error {var _aaac ,_fdbd int ;_bbd :=src .RowStride -1;if x < 0{_fdbd =-x ;x =0;}else if x +src .Width > dst .Width {_bbd -=src .Width +x -dst .Width ;};if y < 0{_aaac =-y ;y =0;_fdbd +=src .RowStride ;
_bbd +=src .RowStride ;}else if y +src .Height > dst .Height {_aaac =src .Height +y -dst .Height ;};var (_afed int ;_edac error ;);_gdgf :=x &0x07;_bcae :=8-_gdgf ;_dbge :=src .Width &0x07;_gdbg :=_bcae -_dbge ;_cbbd :=_bcae &0x07!=0;_ecdf :=src .Width <=((_bbd -_fdbd )<<3)+_bcae ;
_dbgef :=dst .GetByteIndex (x ,y );_cacd :=_aaac +dst .Height ;if src .Height > _cacd {_afed =_cacd ;}else {_afed =src .Height ;};switch {case !_cbbd :_edac =_ffbd (src ,dst ,_aaac ,_afed ,_dbgef ,_fdbd ,_bbd ,op );case _ecdf :_edac =_eeaf (src ,dst ,_aaac ,_afed ,_dbgef ,_fdbd ,_bbd ,_gdbg ,_gdgf ,_bcae ,op );
default:_edac =_bdc (src ,dst ,_aaac ,_afed ,_dbgef ,_fdbd ,_bbd ,_gdbg ,_gdgf ,_bcae ,op ,_dbge );};return _edac ;};func (_bfd *Bitmap )removeBorderGeneral (_gaeeb ,_gcfb ,_ccgb ,_ddgf int )(*Bitmap ,error ){const _afdg ="\u0072\u0065\u006d\u006fve\u0042\u006f\u0072\u0064\u0065\u0072\u0047\u0065\u006e\u0065\u0072\u0061\u006c";
if _gaeeb < 0||_gcfb < 0||_ccgb < 0||_ddgf < 0{return nil ,_c .Error (_afdg ,"\u006e\u0065g\u0061\u0074\u0069\u0076\u0065\u0020\u0062\u0072\u006f\u0064\u0065\u0072\u0020\u0072\u0065\u006d\u006f\u0076\u0065\u0020\u0076\u0061lu\u0065\u0073");};_cded ,_bcc :=_bfd .Width ,_bfd .Height ;
_eagc :=_cded -_gaeeb -_gcfb ;_ecbb :=_bcc -_ccgb -_ddgf ;if _eagc <=0{return nil ,_c .Errorf (_afdg ,"w\u0069\u0064\u0074\u0068: \u0025d\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u003e\u0020\u0030",_eagc );};if _ecbb <=0{return nil ,_c .Errorf (_afdg ,"\u0068\u0065\u0069\u0067ht\u003a\u0020\u0025\u0064\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u003e \u0030",_ecbb );
};_gge :=New (_eagc ,_ecbb );_gge .Color =_bfd .Color ;_ccgg :=_gge .RasterOperation (0,0,_eagc ,_ecbb ,PixSrc ,_bfd ,_gaeeb ,_ccgb );if _ccgg !=nil {return nil ,_c .Wrap (_ccgg ,_afdg ,"");};return _gge ,nil ;};func (_egec *ClassedPoints )xSortFunction ()func (_abaf int ,_cecg int )bool {return func (_cgae ,_badbg int )bool {return _egec .XAtIndex (_cgae )< _egec .XAtIndex (_badbg )};
};func (_ecee *ClassedPoints )GetIntYByClass (i int )(int ,error ){const _acga ="\u0043\u006c\u0061\u0073s\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047e\u0074I\u006e\u0074\u0059\u0042\u0079\u0043\u006ca\u0073\u0073";if i >=_ecee .IntSlice .Size (){return 0,_c .Errorf (_acga ,"\u0069\u003a\u0020\u0027\u0025\u0064\u0027 \u0069\u0073\u0020o\u0075\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065",i );
};return int (_ecee .YAtIndex (i )),nil ;};type byHeight Bitmaps ;func TstFrameBitmap ()*Bitmap {return _dbab .Copy ()};func _cagg (_dgbg *Bitmap ,_egfc ,_cagaf int ,_bcfgg ,_fcgb int ,_cbcfe RasterOperator ){var (_bcag int ;_gfda byte ;_eacec ,_ggdgd int ;
_dbcb int ;);_fccba :=_bcfgg >>3;_gabee :=_bcfgg &7;if _gabee > 0{_gfda =_feea [_gabee ];};_bcag =_dgbg .RowStride *_cagaf +(_egfc >>3);switch _cbcfe {case PixClr :for _eacec =0;_eacec < _fcgb ;_eacec ++{_dbcb =_bcag +_eacec *_dgbg .RowStride ;for _ggdgd =0;
_ggdgd < _fccba ;_ggdgd ++{_dgbg .Data [_dbcb ]=0x0;_dbcb ++;};if _gabee > 0{_dgbg .Data [_dbcb ]=_deabca (_dgbg .Data [_dbcb ],0x0,_gfda );};};case PixSet :for _eacec =0;_eacec < _fcgb ;_eacec ++{_dbcb =_bcag +_eacec *_dgbg .RowStride ;for _ggdgd =0;_ggdgd < _fccba ;
_ggdgd ++{_dgbg .Data [_dbcb ]=0xff;_dbcb ++;};if _gabee > 0{_dgbg .Data [_dbcb ]=_deabca (_dgbg .Data [_dbcb ],0xff,_gfda );};};case PixNotDst :for _eacec =0;_eacec < _fcgb ;_eacec ++{_dbcb =_bcag +_eacec *_dgbg .RowStride ;for _ggdgd =0;_ggdgd < _fccba ;
_ggdgd ++{_dgbg .Data [_dbcb ]=^_dgbg .Data [_dbcb ];_dbcb ++;};if _gabee > 0{_dgbg .Data [_dbcb ]=_deabca (_dgbg .Data [_dbcb ],^_dgbg .Data [_dbcb ],_gfda );};};};};func Copy (d ,s *Bitmap )(*Bitmap ,error ){return _ace (d ,s )};type SelectionValue int ;
func (_dgeg *Bitmap )connComponentsBitmapsBB (_caff *Bitmaps ,_bdfd int )(_eecc *Boxes ,_ced error ){const _baa ="\u0063\u006f\u006enC\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0042\u0069\u0074\u006d\u0061\u0070\u0073\u0042\u0042";if _bdfd !=4&&_bdfd !=8{return nil ,_c .Error (_baa ,"\u0063\u006f\u006e\u006e\u0065\u0063t\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0027\u0034\u0027\u0020\u006fr\u0020\u0027\u0038\u0027");
};if _caff ==nil {return nil ,_c .Error (_baa ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0042\u0069\u0074ma\u0070\u0073");};if len (_caff .Values )> 0{return nil ,_c .Error (_baa ,"\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u006fn\u002d\u0065\u006d\u0070\u0074\u0079\u0020\u0042\u0069\u0074m\u0061\u0070\u0073");
};if _dgeg .Zero (){return &Boxes {},nil ;};var (_bfcb ,_aba ,_cbgc ,_aecc *Bitmap ;);_dgeg .setPadBits (0);if _bfcb ,_ced =_ace (nil ,_dgeg );_ced !=nil {return nil ,_c .Wrap (_ced ,_baa ,"\u0062\u006d\u0031");};if _aba ,_ced =_ace (nil ,_dgeg );_ced !=nil {return nil ,_c .Wrap (_ced ,_baa ,"\u0062\u006d\u0032");
};_cdgf :=&_ca .Stack {};_cdgf .Aux =&_ca .Stack {};_eecc =&Boxes {};var (_bdd ,_bbefb int ;_eeed _fa .Point ;_eaf bool ;_bgf *_fa .Rectangle ;);for {if _eeed ,_eaf ,_ced =_bfcb .nextOnPixel (_bdd ,_bbefb );_ced !=nil {return nil ,_c .Wrap (_ced ,_baa ,"");
};if !_eaf {break ;};if _bgf ,_ced =_fadcf (_bfcb ,_cdgf ,_eeed .X ,_eeed .Y ,_bdfd );_ced !=nil {return nil ,_c .Wrap (_ced ,_baa ,"");};if _ced =_eecc .Add (_bgf );_ced !=nil {return nil ,_c .Wrap (_ced ,_baa ,"");};if _cbgc ,_ced =_bfcb .clipRectangle (_bgf ,nil );
_ced !=nil {return nil ,_c .Wrap (_ced ,_baa ,"\u0062\u006d\u0033");};if _aecc ,_ced =_aba .clipRectangle (_bgf ,nil );_ced !=nil {return nil ,_c .Wrap (_ced ,_baa ,"\u0062\u006d\u0034");};if _ ,_ced =_ggea (_cbgc ,_cbgc ,_aecc );_ced !=nil {return nil ,_c .Wrap (_ced ,_baa ,"\u0062m\u0033\u0020\u005e\u0020\u0062\u006d4");
};if _ced =_aba .RasterOperation (_bgf .Min .X ,_bgf .Min .Y ,_bgf .Dx (),_bgf .Dy (),PixSrcXorDst ,_cbgc ,0,0);_ced !=nil {return nil ,_c .Wrap (_ced ,_baa ,"\u0062\u006d\u0032\u0020\u002d\u0058\u004f\u0052\u002d>\u0020\u0062\u006d\u0033");};_caff .AddBitmap (_cbgc );
_bdd =_eeed .X ;_bbefb =_eeed .Y ;};_caff .Boxes =*_eecc ;return _eecc ,nil ;};func _fgbb (_gdea ,_bcfg *Bitmap ,_beaa ,_bcba int )(*Bitmap ,error ){const _becc ="d\u0069\u006c\u0061\u0074\u0065\u0042\u0072\u0069\u0063\u006b";if _bcfg ==nil {_gc .Log .Debug ("\u0064\u0069\u006c\u0061\u0074\u0065\u0042\u0072\u0069\u0063k\u0020\u0073\u006f\u0075\u0072\u0063\u0065 \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
return nil ,_c .Error (_becc ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _beaa < 1||_bcba < 1{return nil ,_c .Error (_becc ,"\u0068\u0053\u007a\u0069\u0065 \u0061\u006e\u0064\u0020\u0076\u0053\u0069\u007a\u0065\u0020\u0061\u0072\u0065 \u006e\u006f\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0031");
};if _beaa ==1&&_bcba ==1{_ccfdf ,_bcgce :=_ace (_gdea ,_bcfg );if _bcgce !=nil {return nil ,_c .Wrap (_bcgce ,_becc ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u0026\u0026 \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _ccfdf ,nil ;};if _beaa ==1||_bcba ==1{_fbdbd :=SelCreateBrick (_bcba ,_beaa ,_bcba /2,_beaa /2,SelHit );_gcdae ,_bgfe :=_ebef (_gdea ,_bcfg ,_fbdbd );if _bgfe !=nil {return nil ,_c .Wrap (_bgfe ,_becc ,"\u0068s\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _gcdae ,nil ;};_ddbf :=SelCreateBrick (1,_beaa ,0,_beaa /2,SelHit );_ecfe :=SelCreateBrick (_bcba ,1,_bcba /2,0,SelHit );_bgag ,_abfb :=_ebef (nil ,_bcfg ,_ddbf );if _abfb !=nil {return nil ,_c .Wrap (_abfb ,_becc ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};_gdea ,_abfb =_ebef (_gdea ,_bgag ,_ecfe );if _abfb !=nil {return nil ,_c .Wrap (_abfb ,_becc ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};return _gdea ,nil ;};func (_ccd *Bitmap )setEightPartlyBytes (_gcfca ,_egdd int ,_fegf uint64 )(_dace error ){var (_geg byte ;
_ddfd int ;);const _abeda ="\u0073\u0065\u0074\u0045ig\u0068\u0074\u0050\u0061\u0072\u0074\u006c\u0079\u0042\u0079\u0074\u0065\u0073";for _cfd :=1;_cfd <=_egdd ;_cfd ++{_ddfd =64-_cfd *8;_geg =byte (_fegf >>uint (_ddfd )&0xff);_gc .Log .Trace ("\u0074\u0065\u006d\u0070\u003a\u0020\u0025\u0030\u0038\u0062\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a %\u0064,\u0020\u0069\u0064\u0078\u003a\u0020\u0025\u0064\u002c\u0020\u0066\u0075l\u006c\u0042\u0079\u0074\u0065\u0073\u004e\u0075\u006d\u0062\u0065\u0072\u003a\u0020\u0025\u0064\u002c \u0073\u0068\u0069\u0066\u0074\u003a\u0020\u0025\u0064",_geg ,_gcfca ,_gcfca +_cfd -1,_egdd ,_ddfd );
if _dace =_ccd .SetByte (_gcfca +_cfd -1,_geg );_dace !=nil {return _c .Wrap (_dace ,_abeda ,"\u0066\u0075\u006c\u006c\u0042\u0079\u0074\u0065");};};_fecg :=_ccd .RowStride *8-_ccd .Width ;if _fecg ==0{return nil ;};_ddfd -=8;_geg =byte (_fegf >>uint (_ddfd )&0xff)<<uint (_fecg );
if _dace =_ccd .SetByte (_gcfca +_egdd ,_geg );_dace !=nil {return _c .Wrap (_dace ,_abeda ,"\u0070\u0061\u0064\u0064\u0065\u0064");};return nil ;};const (AsymmetricMorphBC BoundaryCondition =iota ;SymmetricMorphBC ;);func TstImageBitmapInverseData ()[]byte {_fcdb :=_fbca .Copy ();
_fcdb .InverseData ();return _fcdb .Data ;};func (_ccg *Bitmap )Equivalent (s *Bitmap )bool {return _ccg .equivalent (s )};func (_ccce *ClassedPoints )SortByX (){_ccce ._bfgf =_ccce .xSortFunction ();_e .Sort (_ccce )};func (_bfdc *Bitmap )setEightFullBytes (_daeb int ,_aebe uint64 )error {if _daeb +7> len (_bfdc .Data )-1{return _c .Error ("\u0073\u0065\u0074\u0045\u0069\u0067\u0068\u0074\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_bfdc .Data [_daeb ]=byte ((_aebe &0xff00000000000000)>>56);_bfdc .Data [_daeb +1]=byte ((_aebe &0xff000000000000)>>48);_bfdc .Data [_daeb +2]=byte ((_aebe &0xff0000000000)>>40);_bfdc .Data [_daeb +3]=byte ((_aebe &0xff00000000)>>32);_bfdc .Data [_daeb +4]=byte ((_aebe &0xff000000)>>24);
_bfdc .Data [_daeb +5]=byte ((_aebe &0xff0000)>>16);_bfdc .Data [_daeb +6]=byte ((_aebe &0xff00)>>8);_bfdc .Data [_daeb +7]=byte (_aebe &0xff);return nil ;};func (_fg *Bitmap )ClipRectangle (box *_fa .Rectangle )(_bfb *Bitmap ,_ffdg *_fa .Rectangle ,_gcfd error ){const _cbg ="\u0043\u006c\u0069\u0070\u0052\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065";
if box ==nil {return nil ,nil ,_c .Error (_cbg ,"\u0062o\u0078 \u0069\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};_gbe ,_aegb :=_fg .Width ,_fg .Height ;_gbdd :=_fa .Rect (0,0,_gbe ,_aegb );if !box .Overlaps (_gbdd ){return nil ,nil ,_c .Error (_cbg ,"b\u006f\u0078\u0020\u0064oe\u0073n\u0027\u0074\u0020\u006f\u0076e\u0072\u006c\u0061\u0070\u0020\u0062");
};_ege :=box .Intersect (_gbdd );_edc ,_gee :=_ege .Min .X ,_ege .Min .Y ;_aebc ,_gfg :=_ege .Dx (),_ege .Dy ();_bfb =New (_aebc ,_gfg );_bfb .Text =_fg .Text ;if _gcfd =_bfb .RasterOperation (0,0,_aebc ,_gfg ,PixSrc ,_fg ,_edc ,_gee );_gcfd !=nil {return nil ,nil ,_c .Wrap (_gcfd ,_cbg ,"\u0050\u0069\u0078\u0053\u0072\u0063\u0020\u0074\u006f\u0020\u0063\u006ci\u0070\u0070\u0065\u0064");
};_ffdg =&_ege ;return _bfb ,_ffdg ,nil ;};type Component int ;func _dfag (_ccaf uint ,_ecaa byte )byte {return _ecaa >>_ccaf <<_ccaf };func (_gbc *Bitmap )AddBorder (borderSize ,val int )(*Bitmap ,error ){if borderSize ==0{return _gbc .Copy (),nil ;};
_gbb ,_ddf :=_gbc .addBorderGeneral (borderSize ,borderSize ,borderSize ,borderSize ,val );if _ddf !=nil {return nil ,_c .Wrap (_ddf ,"\u0041d\u0064\u0042\u006f\u0072\u0064\u0065r","");};return _gbb ,nil ;};func (_bedaf *byHeight )Swap (i ,j int ){_bedaf .Values [i ],_bedaf .Values [j ]=_bedaf .Values [j ],_bedaf .Values [i ];
if _bedaf .Boxes !=nil {_bedaf .Boxes [i ],_bedaf .Boxes [j ]=_bedaf .Boxes [j ],_bedaf .Boxes [i ];};};func (_dgfb *ClassedPoints )GroupByY ()([]*ClassedPoints ,error ){const _eaaa ="\u0043\u006c\u0061\u0073se\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0072\u006f\u0075\u0070\u0042y\u0059";
if _edaf :=_dgfb .validateIntSlice ();_edaf !=nil {return nil ,_c .Wrap (_edaf ,_eaaa ,"");};if _dgfb .IntSlice .Size ()==0{return nil ,_c .Error (_eaaa ,"\u004e\u006f\u0020\u0063la\u0073\u0073\u0065\u0073\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064");
};_dgfb .SortByY ();var (_cfgfe []*ClassedPoints ;_fdfg int ;);_ecbfa :=-1;var _agca *ClassedPoints ;for _fgcd :=0;_fgcd < len (_dgfb .IntSlice );_fgcd ++{_fdfg =int (_dgfb .YAtIndex (_fgcd ));if _fdfg !=_ecbfa {_agca =&ClassedPoints {Points :_dgfb .Points };
_ecbfa =_fdfg ;_cfgfe =append (_cfgfe ,_agca );};_agca .IntSlice =append (_agca .IntSlice ,_dgfb .IntSlice [_fgcd ]);};for _ ,_edege :=range _cfgfe {_edege .SortByX ();};return _cfgfe ,nil ;};func (_cgef *Bitmap )Zero ()bool {_dcag :=_cgef .Width /8;_gdb :=_cgef .Width &7;
var _dbe byte ;if _gdb !=0{_dbe =byte (0xff<<uint (8-_gdb ));};var _gcfc ,_cdd ,_aggeg int ;for _cdd =0;_cdd < _cgef .Height ;_cdd ++{_gcfc =_cgef .RowStride *_cdd ;for _aggeg =0;_aggeg < _dcag ;_aggeg ,_gcfc =_aggeg +1,_gcfc +1{if _cgef .Data [_gcfc ]!=0{return false ;
};};if _gdb > 0{if _cgef .Data [_gcfc ]&_dbe !=0{return false ;};};};return true ;};func _adeg (_daabb ,_eacf *Bitmap ,_gfgac ,_gedf int )(*Bitmap ,error ){const _gfbfe ="\u0063\u006c\u006f\u0073\u0065\u0053\u0061\u0066\u0065B\u0072\u0069\u0063\u006b";
if _eacf ==nil {return nil ,_c .Error (_gfbfe ,"\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _gfgac < 1||_gedf < 1{return nil ,_c .Error (_gfbfe ,"\u0068s\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0073\u0069z\u0065\u0020\u006e\u006f\u0074\u0020\u003e\u003d\u0020\u0031");
};if _gfgac ==1&&_gedf ==1{return _ace (_daabb ,_eacf );};if MorphBC ==SymmetricMorphBC {_dceg ,_aeca :=_ccbc (_daabb ,_eacf ,_gfgac ,_gedf );if _aeca !=nil {return nil ,_c .Wrap (_aeca ,_gfbfe ,"\u0053\u0079m\u006d\u0065\u0074r\u0069\u0063\u004d\u006f\u0072\u0070\u0068\u0042\u0043");
};return _dceg ,nil ;};_agdg :=_acad (_gfgac /2,_gedf /2);_edg :=8*((_agdg +7)/8);_cffg ,_cfaa :=_eacf .AddBorder (_edg ,0);if _cfaa !=nil {return nil ,_c .Wrapf (_cfaa ,_gfbfe ,"\u0042\u006f\u0072\u0064\u0065\u0072\u0053\u0069\u007ae\u003a\u0020\u0025\u0064",_edg );
};var _dfgg ,_dgef *Bitmap ;if _gfgac ==1||_gedf ==1{_fbbg :=SelCreateBrick (_gedf ,_gfgac ,_gedf /2,_gfgac /2,SelHit );_dfgg ,_cfaa =_bacf (nil ,_cffg ,_fbbg );if _cfaa !=nil {return nil ,_c .Wrap (_cfaa ,_gfbfe ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};}else {_bccc :=SelCreateBrick (1,_gfgac ,0,_gfgac /2,SelHit );_babe ,_babb :=_ebef (nil ,_cffg ,_bccc );if _babb !=nil {return nil ,_c .Wrap (_babb ,_gfbfe ,"\u0072\u0065\u0067\u0075la\u0072\u0020\u002d\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0064\u0069\u006c\u0061t\u0065");
};_ffc :=SelCreateBrick (_gedf ,1,_gedf /2,0,SelHit );_dfgg ,_babb =_ebef (nil ,_babe ,_ffc );if _babb !=nil {return nil ,_c .Wrap (_babb ,_gfbfe ,"\u0072\u0065\u0067ul\u0061\u0072\u0020\u002d\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};if _ ,_babb =_bacb (_babe ,_dfgg ,_bccc );_babb !=nil {return nil ,_c .Wrap (_babb ,_gfbfe ,"r\u0065\u0067\u0075\u006car\u0020-\u0020\u0066\u0069\u0072\u0073t\u0020\u0065\u0072\u006f\u0064\u0065");};if _ ,_babb =_bacb (_dfgg ,_babe ,_ffc );_babb !=nil {return nil ,_c .Wrap (_babb ,_gfbfe ,"\u0072\u0065\u0067\u0075la\u0072\u0020\u002d\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0065\u0072\u006fd\u0065");
};};if _dgef ,_cfaa =_dfgg .RemoveBorder (_edg );_cfaa !=nil {return nil ,_c .Wrap (_cfaa ,_gfbfe ,"\u0072e\u0067\u0075\u006c\u0061\u0072");};if _daabb ==nil {return _dgef ,nil ;};if _ ,_cfaa =_ace (_daabb ,_dgef );_cfaa !=nil {return nil ,_cfaa ;};return _daabb ,nil ;
};func (_aff *Boxes )Get (i int )(*_fa .Rectangle ,error ){const _aafg ="\u0042o\u0078\u0065\u0073\u002e\u0047\u0065t";if _aff ==nil {return nil ,_c .Error (_aafg ,"\u0027\u0042\u006f\u0078es\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if i > len (*_aff )-1{return nil ,_c .Errorf (_aafg ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return (*_aff )[i ],nil ;};type Boxes []*_fa .Rectangle ;
func _aafe (_gcfce *Bitmap ,_cddc *Bitmap ,_badcf *Selection ,_acdc **Bitmap )(*Bitmap ,error ){const _ffbf ="\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u004d\u006f\u0072\u0070\u0068A\u0072\u0067\u0073\u0031";if _cddc ==nil {return nil ,_c .Error (_ffbf ,"\u004d\u006f\u0072\u0070\u0068\u0041\u0072\u0067\u0073\u0031\u0020'\u0073\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066i\u006e\u0065\u0064");
};if _badcf ==nil {return nil ,_c .Error (_ffbf ,"\u004d\u006f\u0072\u0068p\u0041\u0072\u0067\u0073\u0031\u0020\u0027\u0073\u0065\u006c'\u0020n\u006f\u0074\u0020\u0064\u0065\u0066\u0069n\u0065\u0064");};_efa ,_gfgc :=_badcf .Height ,_badcf .Width ;if _efa ==0||_gfgc ==0{return nil ,_c .Error (_ffbf ,"\u0073\u0065\u006c\u0065ct\u0069\u006f\u006e\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u0020\u0030");
};if _gcfce ==nil {_gcfce =_cddc .createTemplate ();*_acdc =_cddc ;return _gcfce ,nil ;};_gcfce .Width =_cddc .Width ;_gcfce .Height =_cddc .Height ;_gcfce .RowStride =_cddc .RowStride ;_gcfce .Color =_cddc .Color ;_gcfce .Data =make ([]byte ,_cddc .RowStride *_cddc .Height );
if _gcfce ==_cddc {*_acdc =_cddc .Copy ();}else {*_acdc =_cddc ;};return _gcfce ,nil ;};func (_aaec *byHeight )Len ()int {return len (_aaec .Values )};type SizeSelection int ;func (_aece *Bitmap )equivalent (_fge *Bitmap )bool {if _aece ==_fge {return true ;
};if !_aece .SizesEqual (_fge ){return false ;};_fgdf :=_fbdb (_aece ,_fge ,CmbOpXor );_cead :=_aece .countPixels ();_bage :=int (0.25*float32 (_cead ));if _fgdf .thresholdPixelSum (_bage ){return false ;};var (_badb [9][9]int ;_aecf [18][9]int ;_ada [9][18]int ;
_fdgc int ;_fga int ;);_cgf :=9;_gfgg :=_aece .Height /_cgf ;_acg :=_aece .Width /_cgf ;_cecd ,_cfc :=_gfgg /2,_acg /2;if _gfgg < _acg {_cecd =_acg /2;_cfc =_gfgg /2;};_bbg :=float64 (_cecd )*float64 (_cfc )*_da .Pi ;_fdcc :=int (float64 (_gfgg *_acg /2)*0.9);
_fgdfe :=int (float64 (_acg *_gfgg /2)*0.9);for _dbb :=0;_dbb < _cgf ;_dbb ++{_bgg :=_acg *_dbb +_fdgc ;var _ddda int ;if _dbb ==_cgf -1{_fdgc =0;_ddda =_aece .Width ;}else {_ddda =_bgg +_acg ;if ((_aece .Width -_fdgc )%_cgf )> 0{_fdgc ++;_ddda ++;};};
for _afbb :=0;_afbb < _cgf ;_afbb ++{_dgba :=_gfgg *_afbb +_fga ;var _cga int ;if _afbb ==_cgf -1{_fga =0;_cga =_aece .Height ;}else {_cga =_dgba +_gfgg ;if (_aece .Height -_fga )%_cgf > 0{_fga ++;_cga ++;};};var _gfa ,_egeg ,_feec ,_eede int ;_cggb :=(_bgg +_ddda )/2;
_bcd :=(_dgba +_cga )/2;for _cagd :=_bgg ;_cagd < _ddda ;_cagd ++{for _aaf :=_dgba ;_aaf < _cga ;_aaf ++{if _fgdf .GetPixel (_cagd ,_aaf ){if _cagd < _cggb {_gfa ++;}else {_egeg ++;};if _aaf < _bcd {_eede ++;}else {_feec ++;};};};};_badb [_dbb ][_afbb ]=_gfa +_egeg ;
_aecf [_dbb *2][_afbb ]=_gfa ;_aecf [_dbb *2+1][_afbb ]=_egeg ;_ada [_dbb ][_afbb *2]=_eede ;_ada [_dbb ][_afbb *2+1]=_feec ;};};for _ebea :=0;_ebea < _cgf *2-1;_ebea ++{for _abcg :=0;_abcg < (_cgf -1);_abcg ++{var _ffa int ;for _abed :=0;_abed < 2;_abed ++{for _bbaa :=0;
_bbaa < 2;_bbaa ++{_ffa +=_aecf [_ebea +_abed ][_abcg +_bbaa ];};};if _ffa > _fgdfe {return false ;};};};for _dgfg :=0;_dgfg < (_cgf -1);_dgfg ++{for _efgd :=0;_efgd < ((_cgf *2)-1);_efgd ++{var _efdg int ;for _fdeeg :=0;_fdeeg < 2;_fdeeg ++{for _fbgaa :=0;
_fbgaa < 2;_fbgaa ++{_efdg +=_ada [_dgfg +_fdeeg ][_efgd +_fbgaa ];};};if _efdg > _fdcc {return false ;};};};for _fgg :=0;_fgg < (_cgf -2);_fgg ++{for _feecg :=0;_feecg < (_cgf -2);_feecg ++{var _fdbe ,_bfe int ;for _ccfc :=0;_ccfc < 3;_ccfc ++{for _aacf :=0;
_aacf < 3;_aacf ++{if _ccfc ==_aacf {_fdbe +=_badb [_fgg +_ccfc ][_feecg +_aacf ];};if (2-_ccfc )==_aacf {_bfe +=_badb [_fgg +_ccfc ][_feecg +_aacf ];};};};if _fdbe > _fgdfe ||_bfe > _fgdfe {return false ;};};};for _fcda :=0;_fcda < (_cgf -1);_fcda ++{for _edeg :=0;
_edeg < (_cgf -1);_edeg ++{var _afe int ;for _ffbg :=0;_ffbg < 2;_ffbg ++{for _dabg :=0;_dabg < 2;_dabg ++{_afe +=_badb [_fcda +_ffbg ][_edeg +_dabg ];};};if float64 (_afe )> _bbg {return false ;};};};return true ;};func (_fgbe *BitmapsArray )AddBox (box *_fa .Rectangle ){_fgbe .Boxes =append (_fgbe .Boxes ,box )};
func TstDSymbol (t *_g .T ,scale ...int )*Bitmap {_ebbga ,_fceb :=NewWithData (4,5,[]byte {0xf0,0x90,0x90,0x90,0xE0});_dc .NoError (t ,_fceb );return TstGetScaledSymbol (t ,_ebbga ,scale ...);};func (_cebe *Bitmaps )SelectByIndexes (idx []int )(*Bitmaps ,error ){const _gaec ="B\u0069\u0074\u006d\u0061\u0070\u0073.\u0053\u006f\u0072\u0074\u0049\u006e\u0064\u0065\u0078e\u0073\u0042\u0079H\u0065i\u0067\u0068\u0074";
_bfdb ,_cbdg :=_cebe .selectByIndexes (idx );if _cbdg !=nil {return nil ,_c .Wrap (_cbdg ,_gaec ,"");};return _bfdb ,nil ;};func HausTest (p1 ,p2 ,p3 ,p4 *Bitmap ,delX ,delY float32 ,maxDiffW ,maxDiffH int )(bool ,error ){const _eaac ="\u0048\u0061\u0075\u0073\u0054\u0065\u0073\u0074";
_dfff ,_gdf :=p1 .Width ,p1 .Height ;_beec ,_efef :=p3 .Width ,p3 .Height ;if _ca .Abs (_dfff -_beec )> maxDiffW {return false ,nil ;};if _ca .Abs (_gdf -_efef )> maxDiffH {return false ,nil ;};_fadc :=int (delX +_ca .Sign (delX )*0.5);_cbfca :=int (delY +_ca .Sign (delY )*0.5);
var _gagga error ;_gcfcae :=p1 .CreateTemplate ();if _gagga =_gcfcae .RasterOperation (0,0,_dfff ,_gdf ,PixSrc ,p1 ,0,0);_gagga !=nil {return false ,_c .Wrap (_gagga ,_eaac ,"p\u0031\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _gagga =_gcfcae .RasterOperation (_fadc ,_cbfca ,_dfff ,_gdf ,PixNotSrcAndDst ,p4 ,0,0);
_gagga !=nil {return false ,_c .Wrap (_gagga ,_eaac ,"\u0021p\u0034\u0020\u0026\u0020\u0074");};if _gcfcae .Zero (){return false ,nil ;};if _gagga =_gcfcae .RasterOperation (_fadc ,_cbfca ,_beec ,_efef ,PixSrc ,p3 ,0,0);_gagga !=nil {return false ,_c .Wrap (_gagga ,_eaac ,"p\u0033\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");
};if _gagga =_gcfcae .RasterOperation (0,0,_beec ,_efef ,PixNotSrcAndDst ,p2 ,0,0);_gagga !=nil {return false ,_c .Wrap (_gagga ,_eaac ,"\u0021p\u0032\u0020\u0026\u0020\u0074");};return _gcfcae .Zero (),nil ;};func (_fdg *Bitmap )ThresholdPixelSum (thresh int ,tab8 []int )(_aee bool ,_gac error ){const _afbc ="\u0042i\u0074\u006d\u0061\u0070\u002e\u0054\u0068\u0072\u0065\u0073\u0068o\u006c\u0064\u0050\u0069\u0078\u0065\u006c\u0053\u0075\u006d";
if tab8 ==nil {tab8 =_bfbd ();};_efg :=_fdg .Width >>3;_eca :=_fdg .Width &7;_fdce :=byte (0xff<<uint (8-_eca ));var (_ggg ,_cgb ,_fgd ,_eda int ;_dac byte ;);for _ggg =0;_ggg < _fdg .Height ;_ggg ++{_fgd =_fdg .RowStride *_ggg ;for _cgb =0;_cgb < _efg ;
_cgb ++{_dac ,_gac =_fdg .GetByte (_fgd +_cgb );if _gac !=nil {return false ,_c .Wrap (_gac ,_afbc ,"\u0066\u0075\u006c\u006c\u0042\u0079\u0074\u0065");};_eda +=tab8 [_dac ];};if _eca !=0{_dac ,_gac =_fdg .GetByte (_fgd +_cgb );if _gac !=nil {return false ,_c .Wrap (_gac ,_afbc ,"p\u0061\u0072\u0074\u0069\u0061\u006c\u0042\u0079\u0074\u0065");
};_dac &=_fdce ;_eda +=tab8 [_dac ];};if _eda > thresh {return true ,nil ;};};return _aee ,nil ;};func NewClassedPoints (points *Points ,classes _ca .IntSlice )(*ClassedPoints ,error ){const _egggc ="\u004e\u0065w\u0043\u006c\u0061s\u0073\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073";
if points ==nil {return nil ,_c .Error (_egggc ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0070\u006f\u0069\u006e\u0074\u0073");};if classes ==nil {return nil ,_c .Error (_egggc ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0063\u006c\u0061ss\u0065\u0073");
};_gfaf :=&ClassedPoints {Points :points ,IntSlice :classes };if _ddce :=_gfaf .validateIntSlice ();_ddce !=nil {return nil ,_c .Wrap (_ddce ,_egggc ,"");};return _gfaf ,nil ;};func _edee (_cafe ,_fgef *Bitmap ,_dccg ,_dbca int )(*Bitmap ,error ){const _gbaed ="\u006fp\u0065\u006e\u0042\u0072\u0069\u0063k";
if _fgef ==nil {return nil ,_c .Error (_gbaed ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _dccg < 1&&_dbca < 1{return nil ,_c .Error (_gbaed ,"\u0068\u0053\u0069\u007ae \u003c\u0020\u0031\u0020\u0026\u0026\u0020\u0076\u0053\u0069\u007a\u0065\u0020\u003c \u0031");
};if _dccg ==1&&_dbca ==1{return _fgef .Copy (),nil ;};if _dccg ==1||_dbca ==1{var _fgdfc error ;_ddfda :=SelCreateBrick (_dbca ,_dccg ,_dbca /2,_dccg /2,SelHit );_cafe ,_fgdfc =_ccfga (_cafe ,_fgef ,_ddfda );if _fgdfc !=nil {return nil ,_c .Wrap (_fgdfc ,_gbaed ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _cafe ,nil ;};_dgca :=SelCreateBrick (1,_dccg ,0,_dccg /2,SelHit );_gede :=SelCreateBrick (_dbca ,1,_dbca /2,0,SelHit );_cfag ,_agcg :=_bacb (nil ,_fgef ,_dgca );if _agcg !=nil {return nil ,_c .Wrap (_agcg ,_gbaed ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};_cafe ,_agcg =_bacb (_cafe ,_cfag ,_gede );if _agcg !=nil {return nil ,_c .Wrap (_agcg ,_gbaed ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};_ ,_agcg =_ebef (_cfag ,_cafe ,_dgca );if _agcg !=nil {return nil ,_c .Wrap (_agcg ,_gbaed ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};_ ,_agcg =_ebef (_cafe ,_cfag ,_gede );if _agcg !=nil {return nil ,_c .Wrap (_agcg ,_gbaed ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};return _cafe ,nil ;};const (Vanilla Color =iota ;Chocolate ;);func (_ebg *Bitmap )String ()string {var _gaee ="\u000a";
for _dgfc :=0;_dgfc < _ebg .Height ;_dgfc ++{var _ddgb string ;for _dee :=0;_dee < _ebg .Width ;_dee ++{_ggb :=_ebg .GetPixel (_dee ,_dgfc );if _ggb {_ddgb +="\u0031";}else {_ddgb +="\u0030";};};_gaee +=_ddgb +"\u000a";};return _gaee ;};const (_ LocationFilter =iota ;
LocSelectWidth ;LocSelectHeight ;LocSelectXVal ;LocSelectYVal ;LocSelectIfEither ;LocSelectIfBoth ;);func (_aebea *Points )Add (pt *Points )error {const _agce ="\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0041\u0064\u0064";if _aebea ==nil {return _c .Error (_agce ,"\u0070o\u0069n\u0074\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if pt ==nil {return _c .Error (_agce ,"a\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0070\u006f\u0069\u006e\u0074\u0073\u0020\u006eo\u0074\u0020\u0064e\u0066i\u006e\u0065\u0064");};*_aebea =append (*_aebea ,*pt ...);return nil ;};func (_degf *Bitmaps )makeSizeIndicator (_fgaa ,_gabg int ,_bfgfe LocationFilter ,_cfaad SizeComparison )(_cgac *_ca .NumSlice ,_beded error ){const _fegg ="\u0042i\u0074\u006d\u0061\u0070s\u002e\u006d\u0061\u006b\u0065S\u0069z\u0065I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";
if _degf ==nil {return nil ,_c .Error (_fegg ,"\u0062\u0069\u0074ma\u0070\u0073\u0020\u0027\u0062\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};switch _bfgfe {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_c .Errorf (_fegg ,"\u0070\u0072\u006f\u0076\u0069d\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u006fc\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",_bfgfe );
};switch _cfaad {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE ,SizeSelectIfEQ :default:return nil ,_c .Errorf (_fegg ,"\u0069\u006e\u0076\u0061li\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025d\u0027",_cfaad );
};_cgac =&_ca .NumSlice {};var (_fadege ,_eebc ,_fddbc int ;_fgeb *Bitmap ;);for _ ,_fgeb =range _degf .Values {_fadege =0;_eebc ,_fddbc =_fgeb .Width ,_fgeb .Height ;switch _bfgfe {case LocSelectWidth :if (_cfaad ==SizeSelectIfLT &&_eebc < _fgaa )||(_cfaad ==SizeSelectIfGT &&_eebc > _fgaa )||(_cfaad ==SizeSelectIfLTE &&_eebc <=_fgaa )||(_cfaad ==SizeSelectIfGTE &&_eebc >=_fgaa )||(_cfaad ==SizeSelectIfEQ &&_eebc ==_fgaa ){_fadege =1;
};case LocSelectHeight :if (_cfaad ==SizeSelectIfLT &&_fddbc < _gabg )||(_cfaad ==SizeSelectIfGT &&_fddbc > _gabg )||(_cfaad ==SizeSelectIfLTE &&_fddbc <=_gabg )||(_cfaad ==SizeSelectIfGTE &&_fddbc >=_gabg )||(_cfaad ==SizeSelectIfEQ &&_fddbc ==_gabg ){_fadege =1;
};case LocSelectIfEither :if (_cfaad ==SizeSelectIfLT &&(_eebc < _fgaa ||_fddbc < _gabg ))||(_cfaad ==SizeSelectIfGT &&(_eebc > _fgaa ||_fddbc > _gabg ))||(_cfaad ==SizeSelectIfLTE &&(_eebc <=_fgaa ||_fddbc <=_gabg ))||(_cfaad ==SizeSelectIfGTE &&(_eebc >=_fgaa ||_fddbc >=_gabg ))||(_cfaad ==SizeSelectIfEQ &&(_eebc ==_fgaa ||_fddbc ==_gabg )){_fadege =1;
};case LocSelectIfBoth :if (_cfaad ==SizeSelectIfLT &&(_eebc < _fgaa &&_fddbc < _gabg ))||(_cfaad ==SizeSelectIfGT &&(_eebc > _fgaa &&_fddbc > _gabg ))||(_cfaad ==SizeSelectIfLTE &&(_eebc <=_fgaa &&_fddbc <=_gabg ))||(_cfaad ==SizeSelectIfGTE &&(_eebc >=_fgaa &&_fddbc >=_gabg ))||(_cfaad ==SizeSelectIfEQ &&(_eebc ==_fgaa &&_fddbc ==_gabg )){_fadege =1;
};};_cgac .AddInt (_fadege );};return _cgac ,nil ;};const (CmbOpOr CombinationOperator =iota ;CmbOpAnd ;CmbOpXor ;CmbOpXNor ;CmbOpReplace ;CmbOpNot ;);func (_fca *Bitmap )SetDefaultPixel (){for _dccbe :=range _fca .Data {_fca .Data [_dccbe ]=byte (0xff);
};};func TstRSymbol (t *_g .T ,scale ...int )*Bitmap {_gbca ,_abad :=NewWithData (4,5,[]byte {0xF0,0x90,0xF0,0xA0,0x90});_dc .NoError (t ,_abad );return TstGetScaledSymbol (t ,_gbca ,scale ...);};func _aae (_egg ,_feg int )*Bitmap {return &Bitmap {Width :_egg ,Height :_feg ,RowStride :(_egg +7)>>3};
};type RasterOperator int ;func (_ddbb *ClassedPoints )Len ()int {return _ddbb .IntSlice .Size ()};func _fadcf (_ecac *Bitmap ,_ccfdd *_ca .Stack ,_fgad ,_adfce ,_ecda int )(_dgfe *_fa .Rectangle ,_efbg error ){const _faff ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";
if _ecac ==nil {return nil ,_c .Error (_faff ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _ccfdd ==nil {return nil ,_c .Error (_faff ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");
};switch _ecda {case 4:if _dgfe ,_efbg =_ebc (_ecac ,_ccfdd ,_fgad ,_adfce );_efbg !=nil {return nil ,_c .Wrap (_efbg ,_faff ,"");};return _dgfe ,nil ;case 8:if _dgfe ,_efbg =_geee (_ecac ,_ccfdd ,_fgad ,_adfce );_efbg !=nil {return nil ,_c .Wrap (_efbg ,_faff ,"");
};return _dgfe ,nil ;default:return nil ,_c .Errorf (_faff ,"\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u0069\u0073 \u006eo\u0074\u0020\u0034\u0020\u006f\u0072\u0020\u0038\u003a\u0020\u0027\u0025\u0064\u0027",_ecda );
};};var _ _e .Interface =&ClassedPoints {};func (_cffdg *Bitmaps )SortByWidth (){_acef :=(*byWidth )(_cffdg );_e .Sort (_acef )};func _cggbf (_gcfdf ,_bbcf *Bitmap ,_eece ,_gaab ,_gaae uint ,_bfge ,_abegd int ,_bcdb bool ,_dga ,_gbdc int )error {for _daab :=_bfge ;
_daab < _abegd ;_daab ++{if _dga +1< len (_gcfdf .Data ){_efff :=_daab +1==_abegd ;_bdaa ,_adg :=_gcfdf .GetByte (_dga );if _adg !=nil {return _adg ;};_dga ++;_bdaa <<=_eece ;_ecfc ,_adg :=_gcfdf .GetByte (_dga );if _adg !=nil {return _adg ;};_ecfc >>=_gaab ;
_gcd :=_bdaa |_ecfc ;if _efff &&!_bcdb {_gcd =_dfag (_gaae ,_gcd );};_adg =_bbcf .SetByte (_gbdc ,_gcd );if _adg !=nil {return _adg ;};_gbdc ++;if _efff &&_bcdb {_bcgf ,_cdba :=_gcfdf .GetByte (_dga );if _cdba !=nil {return _cdba ;};_bcgf <<=_eece ;_gcd =_dfag (_gaae ,_bcgf );
if _cdba =_bbcf .SetByte (_gbdc ,_gcd );_cdba !=nil {return _cdba ;};};continue ;};_cbcb ,_ddb :=_gcfdf .GetByte (_dga );if _ddb !=nil {_gc .Log .Debug ("G\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0068\u0065\u0020\u0076\u0061l\u0075\u0065\u0020\u0061\u0074\u003a\u0020%\u0064\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020%\u0073",_dga ,_ddb );
return _ddb ;};_cbcb <<=_eece ;_dga ++;_ddb =_bbcf .SetByte (_gbdc ,_cbcb );if _ddb !=nil {return _ddb ;};_gbdc ++;};return nil ;};func (_egbf *Points )AddPoint (x ,y float32 ){*_egbf =append (*_egbf ,Point {x ,y })};func _geab (_dcd ,_baag *Bitmap ,_edde ,_cfbg int )(*Bitmap ,error ){const _cbbb ="\u0065\u0072\u006f\u0064\u0065\u0042\u0072\u0069\u0063\u006b";
if _baag ==nil {return nil ,_c .Error (_cbbb ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _edde < 1||_cfbg < 1{return nil ,_c .Error (_cbbb ,"\u0068\u0073\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0073\u0069\u007a\u0065\u0020\u0061\u0072e\u0020\u006e\u006f\u0074\u0020\u0067\u0072e\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006fr\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0031");
};if _edde ==1&&_cfbg ==1{_deda ,_efcdf :=_ace (_dcd ,_baag );if _efcdf !=nil {return nil ,_c .Wrap (_efcdf ,_cbbb ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u0026\u0026 \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _deda ,nil ;};if _edde ==1||_cfbg ==1{_edbg :=SelCreateBrick (_cfbg ,_edde ,_cfbg /2,_edde /2,SelHit );_agefd ,_agcd :=_bacb (_dcd ,_baag ,_edbg );if _agcd !=nil {return nil ,_c .Wrap (_agcd ,_cbbb ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _agefd ,nil ;};_eedc :=SelCreateBrick (1,_edde ,0,_edde /2,SelHit );_dada :=SelCreateBrick (_cfbg ,1,_cfbg /2,0,SelHit );_eccba ,_gagff :=_bacb (nil ,_baag ,_eedc );if _gagff !=nil {return nil ,_c .Wrap (_gagff ,_cbbb ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};_dcd ,_gagff =_bacb (_dcd ,_eccba ,_dada );if _gagff !=nil {return nil ,_c .Wrap (_gagff ,_cbbb ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};return _dcd ,nil ;};func _beeb (_ede ,_dae *Bitmap ,_cde int ,_fcd []byte ,_bca int )(_dde error ){const _eag ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0033";
var (_aec ,_afa ,_aggd ,_ceg ,_cbaf ,_abc ,_gdac ,_cad int ;_ecf ,_eec ,_egd ,_gag uint32 ;_ccf ,_cfa byte ;_cbca uint16 ;);_fbg :=make ([]byte ,4);_fbge :=make ([]byte ,4);for _aggd =0;_aggd < _ede .Height -1;_aggd ,_ceg =_aggd +2,_ceg +1{_aec =_aggd *_ede .RowStride ;
_afa =_ceg *_dae .RowStride ;for _cbaf ,_abc =0,0;_cbaf < _bca ;_cbaf ,_abc =_cbaf +4,_abc +1{for _gdac =0;_gdac < 4;_gdac ++{_cad =_aec +_cbaf +_gdac ;if _cad <=len (_ede .Data )-1&&_cad < _aec +_ede .RowStride {_fbg [_gdac ]=_ede .Data [_cad ];}else {_fbg [_gdac ]=0x00;
};_cad =_aec +_ede .RowStride +_cbaf +_gdac ;if _cad <=len (_ede .Data )-1&&_cad < _aec +(2*_ede .RowStride ){_fbge [_gdac ]=_ede .Data [_cad ];}else {_fbge [_gdac ]=0x00;};};_ecf =_a .BigEndian .Uint32 (_fbg );_eec =_a .BigEndian .Uint32 (_fbge );_egd =_ecf &_eec ;
_egd |=_egd <<1;_gag =_ecf |_eec ;_gag &=_gag <<1;_eec =_egd &_gag ;_eec &=0xaaaaaaaa;_ecf =_eec |(_eec <<7);_ccf =byte (_ecf >>24);_cfa =byte ((_ecf >>8)&0xff);_cad =_afa +_abc ;if _cad +1==len (_dae .Data )-1||_cad +1>=_afa +_dae .RowStride {if _dde =_dae .SetByte (_cad ,_fcd [_ccf ]);
_dde !=nil {return _c .Wrapf (_dde ,_eag ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_cad );};}else {_cbca =(uint16 (_fcd [_ccf ])<<8)|uint16 (_fcd [_cfa ]);if _dde =_dae .setTwoBytes (_cad ,_cbca );_dde !=nil {return _c .Wrapf (_dde ,_eag ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_cad );
};_abc ++;};};};return nil ;};func (_debd *byWidth )Len ()int {return len (_debd .Values )};func (_dgd *Bitmap )clearAll ()error {return _dgd .RasterOperation (0,0,_dgd .Width ,_dgd .Height ,PixClr ,nil ,0,0);};func _ba (_fd ,_bb *Bitmap )(_eaca error ){const _gb ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0038";
_cdg :=_bb .RowStride ;_eeb :=_fd .RowStride ;var _dd ,_bd ,_ddg ,_fdc ,_gfe int ;for _ddg =0;_ddg < _bb .Height ;_ddg ++{_dd =_ddg *_cdg ;_bd =8*_ddg *_eeb ;for _fdc =0;_fdc < _cdg ;_fdc ++{if _eaca =_fd .setEightBytes (_bd +_fdc *8,_ggdg [_bb .Data [_dd +_fdc ]]);
_eaca !=nil {return _c .Wrap (_eaca ,_gb ,"");};};for _gfe =1;_gfe < 8;_gfe ++{for _fdc =0;_fdc < _eeb ;_fdc ++{if _eaca =_fd .SetByte (_bd +_gfe *_eeb +_fdc ,_fd .Data [_bd +_fdc ]);_eaca !=nil {return _c .Wrap (_eaca ,_gb ,"");};};};};return nil ;};func (_ccfd *Bitmap )inverseData (){if _befa :=_ccfd .RasterOperation (0,0,_ccfd .Width ,_ccfd .Height ,PixNotDst ,nil ,0,0);
_befa !=nil {_gc .Log .Debug ("\u0049n\u0076\u0065\u0072\u0073e\u0020\u0064\u0061\u0074\u0061 \u0066a\u0069l\u0065\u0064\u003a\u0020\u0027\u0025\u0076'",_befa );};if _ccfd .Color ==Chocolate {_ccfd .Color =Vanilla ;}else {_ccfd .Color =Chocolate ;};};var _ccdd =[5]int {1,2,3,0,4};
func Dilate (d *Bitmap ,s *Bitmap ,sel *Selection )(*Bitmap ,error ){return _ebef (d ,s ,sel )};func _fggf (_ccbca *_ca .Stack ,_ccag ,_fcde ,_dfgc ,_gece ,_efab int ,_fcdce *_fa .Rectangle )(_ecga error ){const _ccegc ="\u0070\u0075\u0073\u0068\u0046\u0069\u006c\u006c\u0053\u0065\u0067m\u0065\u006e\u0074\u0042\u006f\u0075\u006e\u0064\u0069\u006eg\u0042\u006f\u0078";
if _ccbca ==nil {return _c .Error (_ccegc ,"\u006ei\u006c \u0073\u0074\u0061\u0063\u006b \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};if _fcdce ==nil {return _c .Error (_ccegc ,"\u0070\u0072\u006f\u0076i\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0069\u006da\u0067e\u002e\u0052\u0065\u0063\u0074\u0061\u006eg\u006c\u0065");
};_fcdce .Min .X =_ca .Min (_fcdce .Min .X ,_ccag );_fcdce .Max .X =_ca .Max (_fcdce .Max .X ,_fcde );_fcdce .Min .Y =_ca .Min (_fcdce .Min .Y ,_dfgc );_fcdce .Max .Y =_ca .Max (_fcdce .Max .Y ,_dfgc );if !(_dfgc +_gece >=0&&_dfgc +_gece <=_efab ){return nil ;
};if _ccbca .Aux ==nil {return _c .Error (_ccegc ,"a\u0075x\u0053\u0074\u0061\u0063\u006b\u0020\u006e\u006ft\u0020\u0064\u0065\u0066in\u0065\u0064");};var _eegbc *fillSegment ;_gfdg ,_dbbfg :=_ccbca .Aux .Pop ();if _dbbfg {if _eegbc ,_dbbfg =_gfdg .(*fillSegment );
!_dbbfg {return _c .Error (_ccegc ,"a\u0075\u0078\u0053\u0074\u0061\u0063k\u0020\u0064\u0061\u0074\u0061\u0020i\u0073\u0020\u006e\u006f\u0074\u0020\u0061 \u002a\u0066\u0069\u006c\u006c\u0053\u0065\u0067\u006d\u0065n\u0074");};}else {_eegbc =&fillSegment {};
};_eegbc ._bega =_ccag ;_eegbc ._aedfa =_fcde ;_eegbc ._agae =_dfgc ;_eegbc ._bcabd =_gece ;_ccbca .Push (_eegbc );return nil ;};func (_eedcg *byHeight )Less (i ,j int )bool {return _eedcg .Values [i ].Height < _eedcg .Values [j ].Height };func (_bade *Boxes )SelectBySize (width ,height int ,tp LocationFilter ,relation SizeComparison )(_aaaa *Boxes ,_fadeg error ){const _dagg ="\u0042o\u0078e\u0073\u002e\u0053\u0065\u006ce\u0063\u0074B\u0079\u0053\u0069\u007a\u0065";
if _bade ==nil {return nil ,_c .Error (_dagg ,"b\u006f\u0078\u0065\u0073 '\u0062'\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064");};if len (*_bade )==0{return _bade ,nil ;};switch tp {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_c .Errorf (_dagg ,"\u0069\u006e\u0076al\u0069\u0064\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",tp );
};switch relation {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE :default:return nil ,_c .Errorf (_dagg ,"i\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0020t\u0079\u0070\u0065:\u0020'\u0025\u0064\u0027",tp );
};_fgc :=_bade .makeSizeIndicator (width ,height ,tp ,relation );_gdaca ,_fadeg :=_bade .selectWithIndicator (_fgc );if _fadeg !=nil {return nil ,_c .Wrap (_fadeg ,_dagg ,"");};return _gdaca ,nil ;};func _fc (_fcg ,_eed *Bitmap )(_fad error ){const _cc ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0034";
_ag :=_eed .RowStride ;_gf :=_fcg .RowStride ;_acf :=_eed .RowStride *4-_fcg .RowStride ;var (_afd ,_gab byte ;_ce uint32 ;_cae ,_eb ,_eac ,_b ,_dcc ,_gaf ,_abe int ;);for _eac =0;_eac < _eed .Height ;_eac ++{_cae =_eac *_ag ;_eb =4*_eac *_gf ;for _b =0;
_b < _ag ;_b ++{_afd =_eed .Data [_cae +_b ];_ce =_ffaf [_afd ];_gaf =_eb +_b *4;if _acf !=0&&(_b +1)*4> _fcg .RowStride {for _dcc =_acf ;_dcc > 0;_dcc --{_gab =byte ((_ce >>uint (_dcc *8))&0xff);_abe =_gaf +(_acf -_dcc );if _fad =_fcg .SetByte (_abe ,_gab );
_fad !=nil {return _c .Wrapf (_fad ,_cc ,"D\u0069\u0066\u0066\u0065\u0072\u0065n\u0074\u0020\u0072\u006f\u0077\u0073\u0074\u0072\u0069d\u0065\u0073\u002e \u004b:\u0020\u0025\u0064",_dcc );};};}else if _fad =_fcg .setFourBytes (_gaf ,_ce );_fad !=nil {return _c .Wrap (_fad ,_cc ,"");
};if _fad =_fcg .setFourBytes (_eb +_b *4,_ffaf [_eed .Data [_cae +_b ]]);_fad !=nil {return _c .Wrap (_fad ,_cc ,"");};};for _dcc =1;_dcc < 4;_dcc ++{for _b =0;_b < _gf ;_b ++{if _fad =_fcg .SetByte (_eb +_dcc *_gf +_b ,_fcg .Data [_eb +_b ]);_fad !=nil {return _c .Wrapf (_fad ,_cc ,"\u0063\u006f\u0070\u0079\u0020\u0027\u0071\u0075\u0061\u0064\u0072\u0061\u0062l\u0065\u0027\u0020\u006c\u0069\u006ee\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0062\u0079\u0074\u0065\u003a \u0027\u0025\u0064\u0027",_dcc ,_b );
};};};};return nil ;};func _fba (_bed int )int {if _bed < 0{return -_bed ;};return _bed ;};func (_gabab *Bitmap )createTemplate ()*Bitmap {return &Bitmap {Width :_gabab .Width ,Height :_gabab .Height ,RowStride :_gabab .RowStride ,Color :_gabab .Color ,Text :_gabab .Text ,BitmapNumber :_gabab .BitmapNumber ,Special :_gabab .Special ,Data :make ([]byte ,len (_gabab .Data ))};
};func Centroid (bm *Bitmap ,centTab ,sumTab []int )(Point ,error ){return bm .centroid (centTab ,sumTab )};func (_dad *Bitmap )addBorderGeneral (_daa ,_ecgc ,_acc ,_cbgf int ,_cbfe int )(*Bitmap ,error ){const _agd ="\u0061\u0064d\u0042\u006f\u0072d\u0065\u0072\u0047\u0065\u006e\u0065\u0072\u0061\u006c";
if _daa < 0||_ecgc < 0||_acc < 0||_cbgf < 0{return nil ,_c .Error (_agd ,"n\u0065\u0067\u0061\u0074iv\u0065 \u0062\u006f\u0072\u0064\u0065r\u0020\u0061\u0064\u0064\u0065\u0064");};_bag ,_abb :=_dad .Width ,_dad .Height ;_dcg :=_bag +_daa +_ecgc ;_aacc :=_abb +_acc +_cbgf ;
_ggc :=New (_dcg ,_aacc );_ggc .Color =_dad .Color ;_fae :=PixClr ;if _cbfe > 0{_fae =PixSet ;};_beg :=_ggc .RasterOperation (0,0,_daa ,_aacc ,_fae ,nil ,0,0);if _beg !=nil {return nil ,_c .Wrap (_beg ,_agd ,"\u006c\u0065\u0066\u0074");};_beg =_ggc .RasterOperation (_dcg -_ecgc ,0,_ecgc ,_aacc ,_fae ,nil ,0,0);
if _beg !=nil {return nil ,_c .Wrap (_beg ,_agd ,"\u0072\u0069\u0067h\u0074");};_beg =_ggc .RasterOperation (0,0,_dcg ,_acc ,_fae ,nil ,0,0);if _beg !=nil {return nil ,_c .Wrap (_beg ,_agd ,"\u0074\u006f\u0070");};_beg =_ggc .RasterOperation (0,_aacc -_cbgf ,_dcg ,_cbgf ,_fae ,nil ,0,0);
if _beg !=nil {return nil ,_c .Wrap (_beg ,_agd ,"\u0062\u006f\u0074\u0074\u006f\u006d");};_beg =_ggc .RasterOperation (_daa ,_acc ,_bag ,_abb ,PixSrc ,_dad ,0,0);if _beg !=nil {return nil ,_c .Wrap (_beg ,_agd ,"\u0063\u006f\u0070\u0079");};return _ggc ,nil ;
};func _cbf (_eacb *Bitmap ,_gae *Bitmap ,_fe int )(_bea error ){const _cbb ="e\u0078\u0070\u0061\u006edB\u0069n\u0061\u0072\u0079\u0050\u006fw\u0065\u0072\u0032\u004c\u006f\u0077";switch _fe {case 2:_bea =_ff (_eacb ,_gae );case 4:_bea =_fc (_eacb ,_gae );
case 8:_bea =_ba (_eacb ,_gae );default:return _c .Error (_cbb ,"\u0065\u0078p\u0061\u006e\u0073\u0069o\u006e\u0020f\u0061\u0063\u0074\u006f\u0072\u0020\u006e\u006ft\u0020\u0069\u006e\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d\u0020r\u0061\u006e\u0067\u0065");
};if _bea !=nil {_bea =_c .Wrap (_bea ,_cbb ,"");};return _bea ;};func (_facd *ClassedPoints )YAtIndex (i int )float32 {return (*_facd .Points )[_facd .IntSlice [i ]].Y };func (_adac *Bitmaps )ClipToBitmap (s *Bitmap )(*Bitmaps ,error ){const _ccdda ="B\u0069t\u006d\u0061\u0070\u0073\u002e\u0043\u006c\u0069p\u0054\u006f\u0042\u0069tm\u0061\u0070";
if _adac ==nil {return nil ,_c .Error (_ccdda ,"\u0042\u0069\u0074\u006dap\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if s ==nil {return nil ,_c .Error (_ccdda ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");
};_eebfe :=len (_adac .Values );_aefg :=&Bitmaps {Values :make ([]*Bitmap ,_eebfe ),Boxes :make ([]*_fa .Rectangle ,_eebfe )};var (_dfea ,_cefd *Bitmap ;_daed *_fa .Rectangle ;_fddd error ;);for _acgfa :=0;_acgfa < _eebfe ;_acgfa ++{if _dfea ,_fddd =_adac .GetBitmap (_acgfa );
_fddd !=nil {return nil ,_c .Wrap (_fddd ,_ccdda ,"");};if _daed ,_fddd =_adac .GetBox (_acgfa );_fddd !=nil {return nil ,_c .Wrap (_fddd ,_ccdda ,"");};if _cefd ,_fddd =s .clipRectangle (_daed ,nil );_fddd !=nil {return nil ,_c .Wrap (_fddd ,_ccdda ,"");
};if _cefd ,_fddd =_cefd .And (_dfea );_fddd !=nil {return nil ,_c .Wrap (_fddd ,_ccdda ,"");};_aefg .Values [_acgfa ]=_cefd ;_aefg .Boxes [_acgfa ]=_daed ;};return _aefg ,nil ;};func _geee (_dgceg *Bitmap ,_bfdf *_ca .Stack ,_cbgfa ,_bbge int )(_fcff *_fa .Rectangle ,_ccde error ){const _ecce ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";
if _dgceg ==nil {return nil ,_c .Error (_ecce ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _bfdf ==nil {return nil ,_c .Error (_ecce ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");
};_ggca ,_eged :=_dgceg .Width ,_dgceg .Height ;_bfgff :=_ggca -1;_bcde :=_eged -1;if _cbgfa < 0||_cbgfa > _bfgff ||_bbge < 0||_bbge > _bcde ||!_dgceg .GetPixel (_cbgfa ,_bbge ){return nil ,nil ;};_affage :=_fa .Rect (100000,100000,0,0);if _ccde =_fggf (_bfdf ,_cbgfa ,_cbgfa ,_bbge ,1,_bcde ,&_affage );
_ccde !=nil {return nil ,_c .Wrap (_ccde ,_ecce ,"\u0069\u006e\u0069t\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _ccde =_fggf (_bfdf ,_cbgfa ,_cbgfa ,_bbge +1,-1,_bcde ,&_affage );_ccde !=nil {return nil ,_c .Wrap (_ccde ,_ecce ,"\u0032\u006ed\u0020\u0069\u006ei\u0074\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");
};_affage .Min .X ,_affage .Max .X =_cbgfa ,_cbgfa ;_affage .Min .Y ,_affage .Max .Y =_bbge ,_bbge ;var (_dfee *fillSegment ;_bdaaa int ;);for _bfdf .Len ()> 0{if _dfee ,_ccde =_gebe (_bfdf );_ccde !=nil {return nil ,_c .Wrap (_ccde ,_ecce ,"");};_bbge =_dfee ._agae ;
for _cbgfa =_dfee ._bega -1;_cbgfa >=0&&_dgceg .GetPixel (_cbgfa ,_bbge );_cbgfa --{if _ccde =_dgceg .SetPixel (_cbgfa ,_bbge ,0);_ccde !=nil {return nil ,_c .Wrap (_ccde ,_ecce ,"\u0031s\u0074\u0020\u0073\u0065\u0074");};};if _cbgfa >=_dfee ._bega -1{for {for _cbgfa ++;
_cbgfa <=_dfee ._aedfa +1&&_cbgfa <=_bfgff &&!_dgceg .GetPixel (_cbgfa ,_bbge );_cbgfa ++{};_bdaaa =_cbgfa ;if !(_cbgfa <=_dfee ._aedfa +1&&_cbgfa <=_bfgff ){break ;};for ;_cbgfa <=_bfgff &&_dgceg .GetPixel (_cbgfa ,_bbge );_cbgfa ++{if _ccde =_dgceg .SetPixel (_cbgfa ,_bbge ,0);
_ccde !=nil {return nil ,_c .Wrap (_ccde ,_ecce ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _ccde =_fggf (_bfdf ,_bdaaa ,_cbgfa -1,_dfee ._agae ,_dfee ._bcabd ,_bcde ,&_affage );_ccde !=nil {return nil ,_c .Wrap (_ccde ,_ecce ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");
};if _cbgfa > _dfee ._aedfa {if _ccde =_fggf (_bfdf ,_dfee ._aedfa +1,_cbgfa -1,_dfee ._agae ,-_dfee ._bcabd ,_bcde ,&_affage );_ccde !=nil {return nil ,_c .Wrap (_ccde ,_ecce ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};};continue ;};_bdaaa =_cbgfa +1;if _bdaaa < _dfee ._bega {if _ccde =_fggf (_bfdf ,_bdaaa ,_dfee ._bega -1,_dfee ._agae ,-_dfee ._bcabd ,_bcde ,&_affage );_ccde !=nil {return nil ,_c .Wrap (_ccde ,_ecce ,"\u006c\u0065\u0061\u006b\u0020\u006f\u006e\u0020\u006c\u0065\u0066\u0074 \u0073\u0069\u0064\u0065");
};};_cbgfa =_dfee ._bega ;for {for ;_cbgfa <=_bfgff &&_dgceg .GetPixel (_cbgfa ,_bbge );_cbgfa ++{if _ccde =_dgceg .SetPixel (_cbgfa ,_bbge ,0);_ccde !=nil {return nil ,_c .Wrap (_ccde ,_ecce ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _ccde =_fggf (_bfdf ,_bdaaa ,_cbgfa -1,_dfee ._agae ,_dfee ._bcabd ,_bcde ,&_affage );
_ccde !=nil {return nil ,_c .Wrap (_ccde ,_ecce ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _cbgfa > _dfee ._aedfa {if _ccde =_fggf (_bfdf ,_dfee ._aedfa +1,_cbgfa -1,_dfee ._agae ,-_dfee ._bcabd ,_bcde ,&_affage );_ccde !=nil {return nil ,_c .Wrap (_ccde ,_ecce ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};for _cbgfa ++;_cbgfa <=_dfee ._aedfa +1&&_cbgfa <=_bfgff &&!_dgceg .GetPixel (_cbgfa ,_bbge );_cbgfa ++{};_bdaaa =_cbgfa ;if !(_cbgfa <=_dfee ._aedfa +1&&_cbgfa <=_bfgff ){break ;};};};_affage .Max .X ++;_affage .Max .Y ++;return &_affage ,nil ;};func (_bgaad *Bitmaps )SelectBySize (width ,height int ,tp LocationFilter ,relation SizeComparison )(_aaad *Bitmaps ,_dacf error ){const _agfga ="B\u0069t\u006d\u0061\u0070\u0073\u002e\u0053\u0065\u006ce\u0063\u0074\u0042\u0079Si\u007a\u0065";
if _bgaad ==nil {return nil ,_c .Error (_agfga ,"\u0027\u0062\u0027 B\u0069\u0074\u006d\u0061\u0070\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};switch tp {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_c .Errorf (_agfga ,"\u0070\u0072\u006f\u0076\u0069d\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u006fc\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",tp );
};switch relation {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE ,SizeSelectIfEQ :default:return nil ,_c .Errorf (_agfga ,"\u0069\u006e\u0076\u0061li\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025d\u0027",relation );
};_bbbd ,_dacf :=_bgaad .makeSizeIndicator (width ,height ,tp ,relation );if _dacf !=nil {return nil ,_c .Wrap (_dacf ,_agfga ,"");};_aaad ,_dacf =_bgaad .selectByIndicator (_bbbd );if _dacf !=nil {return nil ,_c .Wrap (_dacf ,_agfga ,"");};return _aaad ,nil ;
};func (_ggcb *ClassedPoints )Swap (i ,j int ){_ggcb .IntSlice [i ],_ggcb .IntSlice [j ]=_ggcb .IntSlice [j ],_ggcb .IntSlice [i ];};func CorrelationScoreThresholded (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab ,downcount []int ,scoreThreshold float32 )(bool ,error ){const _gggff ="C\u006f\u0072\u0072\u0065\u006c\u0061t\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054h\u0072\u0065\u0073h\u006fl\u0064\u0065\u0064";
if bm1 ==nil {return false ,_c .Error (_gggff ,"\u0063\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u0062\u006d1\u0020\u0069s\u0020\u006e\u0069\u006c");
};if bm2 ==nil {return false ,_c .Error (_gggff ,"\u0063\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u0062\u006d2\u0020\u0069s\u0020\u006e\u0069\u006c");
};if area1 <=0||area2 <=0{return false ,_c .Error (_gggff ,"c\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006fn\u0053\u0063\u006f\u0072\u0065\u0054\u0068re\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u002d\u0020\u0061\u0072\u0065\u0061s \u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u003e\u0020\u0030");
};if downcount ==nil {return false ,_c .Error (_gggff ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u006f\u0020\u0027\u0064\u006f\u0077\u006e\u0063\u006f\u0075\u006e\u0074\u0027");};if tab ==nil {return false ,_c .Error (_gggff ,"p\u0072\u006f\u0076\u0069de\u0064 \u006e\u0069\u006c\u0020\u0027s\u0075\u006d\u0074\u0061\u0062\u0027");
};_ebbg ,_fccf :=bm1 .Width ,bm1 .Height ;_cged ,_adc :=bm2 .Width ,bm2 .Height ;if _ca .Abs (_ebbg -_cged )> maxDiffW {return false ,nil ;};if _ca .Abs (_fccf -_adc )> maxDiffH {return false ,nil ;};_feecf :=int (delX +_ca .Sign (delX )*0.5);_daea :=int (delY +_ca .Sign (delY )*0.5);
_egfa :=int (_da .Ceil (_da .Sqrt (float64 (scoreThreshold )*float64 (area1 )*float64 (area2 ))));_gagf :=bm2 .RowStride ;_acaa :=_acad (_daea ,0);_bcbc :=_bccb (_adc +_daea ,_fccf );_ffge :=bm1 .RowStride *_acaa ;_gebb :=bm2 .RowStride *(_acaa -_daea );
var _cbdb int ;if _bcbc <=_fccf {_cbdb =downcount [_bcbc -1];};_bfee :=_acad (_feecf ,0);_gced :=_bccb (_cged +_feecf ,_ebbg );var _fadg ,_eafb int ;if _feecf >=8{_fadg =_feecf >>3;_ffge +=_fadg ;_bfee -=_fadg <<3;_gced -=_fadg <<3;_feecf &=7;}else if _feecf <=-8{_eafb =-((_feecf +7)>>3);
_gebb +=_eafb ;_gagf -=_eafb ;_feecf +=_eafb <<3;};var (_dbc ,_afce ,_cbgfd int ;_cbfc ,_cfce ,_cdca byte ;);if _bfee >=_gced ||_acaa >=_bcbc {return false ,nil ;};_aaea :=(_gced +7)>>3;switch {case _feecf ==0:for _afce =_acaa ;_afce < _bcbc ;_afce ,_ffge ,_gebb =_afce +1,_ffge +bm1 .RowStride ,_gebb +bm2 .RowStride {for _cbgfd =0;
_cbgfd < _aaea ;_cbgfd ++{_cbfc =bm1 .Data [_ffge +_cbgfd ]&bm2 .Data [_gebb +_cbgfd ];_dbc +=tab [_cbfc ];};if _dbc >=_egfa {return true ,nil ;};if _efba :=_dbc +downcount [_afce ]-_cbdb ;_efba < _egfa {return false ,nil ;};};case _feecf > 0&&_gagf < _aaea :for _afce =_acaa ;
_afce < _bcbc ;_afce ,_ffge ,_gebb =_afce +1,_ffge +bm1 .RowStride ,_gebb +bm2 .RowStride {_cfce =bm1 .Data [_ffge ];_cdca =bm2 .Data [_gebb ]>>uint (_feecf );_cbfc =_cfce &_cdca ;_dbc +=tab [_cbfc ];for _cbgfd =1;_cbgfd < _gagf ;_cbgfd ++{_cfce =bm1 .Data [_ffge +_cbgfd ];
_cdca =bm2 .Data [_gebb +_cbgfd ]>>uint (_feecf )|bm2 .Data [_gebb +_cbgfd -1]<<uint (8-_feecf );_cbfc =_cfce &_cdca ;_dbc +=tab [_cbfc ];};_cfce =bm1 .Data [_ffge +_cbgfd ];_cdca =bm2 .Data [_gebb +_cbgfd -1]<<uint (8-_feecf );_cbfc =_cfce &_cdca ;_dbc +=tab [_cbfc ];
if _dbc >=_egfa {return true ,nil ;}else if _dbc +downcount [_afce ]-_cbdb < _egfa {return false ,nil ;};};case _feecf > 0&&_gagf >=_aaea :for _afce =_acaa ;_afce < _bcbc ;_afce ,_ffge ,_gebb =_afce +1,_ffge +bm1 .RowStride ,_gebb +bm2 .RowStride {_cfce =bm1 .Data [_ffge ];
_cdca =bm2 .Data [_gebb ]>>uint (_feecf );_cbfc =_cfce &_cdca ;_dbc +=tab [_cbfc ];for _cbgfd =1;_cbgfd < _aaea ;_cbgfd ++{_cfce =bm1 .Data [_ffge +_cbgfd ];_cdca =bm2 .Data [_gebb +_cbgfd ]>>uint (_feecf );_cdca |=bm2 .Data [_gebb +_cbgfd -1]<<uint (8-_feecf );
_cbfc =_cfce &_cdca ;_dbc +=tab [_cbfc ];};if _dbc >=_egfa {return true ,nil ;}else if _dbc +downcount [_afce ]-_cbdb < _egfa {return false ,nil ;};};case _aaea < _gagf :for _afce =_acaa ;_afce < _bcbc ;_afce ,_ffge ,_gebb =_afce +1,_ffge +bm1 .RowStride ,_gebb +bm2 .RowStride {for _cbgfd =0;
_cbgfd < _aaea ;_cbgfd ++{_cfce =bm1 .Data [_ffge +_cbgfd ];_cdca =bm2 .Data [_gebb +_cbgfd ]<<uint (-_feecf );_cdca |=bm2 .Data [_gebb +_cbgfd +1]>>uint (8+_feecf );_cbfc =_cfce &_cdca ;_dbc +=tab [_cbfc ];};if _dbc >=_egfa {return true ,nil ;}else if _fdca :=_dbc +downcount [_afce ]-_cbdb ;
_fdca < _egfa {return false ,nil ;};};case _gagf >=_aaea :for _afce =_acaa ;_afce < _bcbc ;_afce ,_ffge ,_gebb =_afce +1,_ffge +bm1 .RowStride ,_gebb +bm2 .RowStride {for _cbgfd =0;_cbgfd < _aaea ;_cbgfd ++{_cfce =bm1 .Data [_ffge +_cbgfd ];_cdca =bm2 .Data [_gebb +_cbgfd ]<<uint (-_feecf );
_cdca |=bm2 .Data [_gebb +_cbgfd +1]>>uint (8+_feecf );_cbfc =_cfce &_cdca ;_dbc +=tab [_cbfc ];};_cfce =bm1 .Data [_ffge +_cbgfd ];_cdca =bm2 .Data [_gebb +_cbgfd ]<<uint (-_feecf );_cbfc =_cfce &_cdca ;_dbc +=tab [_cbfc ];if _dbc >=_egfa {return true ,nil ;
}else if _dbc +downcount [_afce ]-_cbdb < _egfa {return false ,nil ;};};};_cage :=float32 (_dbc )*float32 (_dbc )/(float32 (area1 )*float32 (area2 ));if _cage >=scoreThreshold {_gc .Log .Trace ("\u0063\u006f\u0075\u006e\u0074\u003a\u0020\u0025\u0064\u0020\u003c\u0020\u0074\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0020\u0025\u0064\u0020\u0062\u0075\u0074\u0020\u0073c\u006f\u0072\u0065\u0020\u0025\u0066\u0020\u003e\u003d\u0020\u0073\u0063\u006fr\u0065\u0054\u0068\u0072\u0065\u0073h\u006f\u006c\u0064 \u0025\u0066",_dbc ,_egfa ,_cage ,scoreThreshold );
};return false ,nil ;};type LocationFilter int ;func _bacb (_febb ,_acabd *Bitmap ,_dadf *Selection )(*Bitmap ,error ){const _bacc ="\u0065\u0072\u006fd\u0065";var (_baef error ;_eggd *Bitmap ;);_febb ,_baef =_aafe (_febb ,_acabd ,_dadf ,&_eggd );if _baef !=nil {return nil ,_c .Wrap (_baef ,_bacc ,"");
};if _baef =_febb .setAll ();_baef !=nil {return nil ,_c .Wrap (_baef ,_bacc ,"");};var _ceed SelectionValue ;for _dgbc :=0;_dgbc < _dadf .Height ;_dgbc ++{for _dadc :=0;_dadc < _dadf .Width ;_dadc ++{_ceed =_dadf .Data [_dgbc ][_dadc ];if _ceed ==SelHit {_baef =_dgec (_febb ,_dadf .Cx -_dadc ,_dadf .Cy -_dgbc ,_acabd .Width ,_acabd .Height ,PixSrcAndDst ,_eggd ,0,0);
if _baef !=nil {return nil ,_c .Wrap (_baef ,_bacc ,"");};};};};if MorphBC ==SymmetricMorphBC {return _febb ,nil ;};_cgeg ,_agbg ,_eccbd ,_fdfb :=_dadf .findMaxTranslations ();if _cgeg > 0{if _baef =_febb .RasterOperation (0,0,_cgeg ,_acabd .Height ,PixClr ,nil ,0,0);
_baef !=nil {return nil ,_c .Wrap (_baef ,_bacc ,"\u0078\u0070\u0020\u003e\u0020\u0030");};};if _eccbd > 0{if _baef =_febb .RasterOperation (_acabd .Width -_eccbd ,0,_eccbd ,_acabd .Height ,PixClr ,nil ,0,0);_baef !=nil {return nil ,_c .Wrap (_baef ,_bacc ,"\u0078\u006e\u0020\u003e\u0020\u0030");
};};if _agbg > 0{if _baef =_febb .RasterOperation (0,0,_acabd .Width ,_agbg ,PixClr ,nil ,0,0);_baef !=nil {return nil ,_c .Wrap (_baef ,_bacc ,"\u0079\u0070\u0020\u003e\u0020\u0030");};};if _fdfb > 0{if _baef =_febb .RasterOperation (0,_acabd .Height -_fdfb ,_acabd .Width ,_fdfb ,PixClr ,nil ,0,0);
_baef !=nil {return nil ,_c .Wrap (_baef ,_bacc ,"\u0079\u006e\u0020\u003e\u0020\u0030");};};return _febb ,nil ;};func MakePixelSumTab8 ()[]int {return _bfbd ()};func _bbcb (_fgbg *Bitmap ,_bgaa int )(*Bitmap ,error ){const _abfe ="\u0065x\u0070a\u006e\u0064\u0052\u0065\u0070\u006c\u0069\u0063\u0061\u0074\u0065";
if _fgbg ==nil {return nil ,_c .Error (_abfe ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _bgaa <=0{return nil ,_c .Error (_abfe ,"i\u006e\u0076\u0061\u006cid\u0020f\u0061\u0063\u0074\u006f\u0072 \u002d\u0020\u003c\u003d\u0020\u0030");
};if _bgaa ==1{_eafc ,_bfad :=_ace (nil ,_fgbg );if _bfad !=nil {return nil ,_c .Wrap (_bfad ,_abfe ,"\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u003d\u0020\u0031");};return _eafc ,nil ;};_cdbfe ,_dbeb :=_db (_fgbg ,_bgaa ,_bgaa );if _dbeb !=nil {return nil ,_c .Wrap (_dbeb ,_abfe ,"");
};return _cdbfe ,nil ;};func (_acee *Bitmaps )GroupByWidth ()(*BitmapsArray ,error ){const _fgfa ="\u0047\u0072\u006fu\u0070\u0042\u0079\u0057\u0069\u0064\u0074\u0068";if len (_acee .Values )==0{return nil ,_c .Error (_fgfa ,"\u006eo\u0020v\u0061\u006c\u0075\u0065\u0073 \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");
};_fbfa :=&BitmapsArray {};_acee .SortByWidth ();_dbdg :=-1;_aaed :=-1;for _bgfg :=0;_bgfg < len (_acee .Values );_bgfg ++{_ecacf :=_acee .Values [_bgfg ].Width ;if _ecacf > _dbdg {_dbdg =_ecacf ;_aaed ++;_fbfa .Values =append (_fbfa .Values ,&Bitmaps {});
};_fbfa .Values [_aaed ].AddBitmap (_acee .Values [_bgfg ]);};return _fbfa ,nil ;};type CombinationOperator int ;func (_bedac MorphProcess )getWidthHeight ()(_bege ,_ebgc int ){return _bedac .Arguments [0],_bedac .Arguments [1];};type Color int ;func NewWithData (width ,height int ,data []byte )(*Bitmap ,error ){const _fdda ="N\u0065\u0077\u0057\u0069\u0074\u0068\u0044\u0061\u0074\u0061";
_eggg :=_aae (width ,height );_eggg .Data =data ;if len (data )< height *_eggg .RowStride {return nil ,_c .Errorf (_fdda ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064\u0061\u0074\u0061\u0020l\u0065\u006e\u0067\u0074\u0068\u003a \u0025\u0064\u0020\u002d\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e\u003a\u0020\u0025\u0064",len (data ),height *_eggg .RowStride );
};return _eggg ,nil ;};type MorphProcess struct{Operation MorphOperation ;Arguments []int ;};func (_bdgc Points )Size ()int {return len (_bdgc )};func (_efcg *Bitmap )Copy ()*Bitmap {_gdad :=make ([]byte ,len (_efcg .Data ));copy (_gdad ,_efcg .Data );
return &Bitmap {Width :_efcg .Width ,Height :_efcg .Height ,RowStride :_efcg .RowStride ,Data :_gdad ,Color :_efcg .Color ,Text :_efcg .Text ,BitmapNumber :_efcg .BitmapNumber ,Special :_efcg .Special };};type fillSegment struct{_bega int ;_aedfa int ;
_agae int ;_bcabd int ;};func (_gcfee Points )GetGeometry (i int )(_efdd ,_eaef float32 ,_defc error ){if i > len (_gcfee )-1{return 0,0,_c .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};_babg :=_gcfee [i ];return _babg .X ,_babg .Y ,nil ;};func _abab (_aagb *Bitmap ,_cdf ,_dcbff ,_edff ,_dgadb int ,_facea RasterOperator ,_gfca *Bitmap ,_feed ,_gdgb int )error {var (_bacg byte ;_ggfc int ;_fgcba int ;_gdfb ,_dbbg int ;_feee ,_bdeg int ;
);_gdgad :=_edff >>3;_cdfa :=_edff &7;if _cdfa > 0{_bacg =_feea [_cdfa ];};_ggfc =_gfca .RowStride *_gdgb +(_feed >>3);_fgcba =_aagb .RowStride *_dcbff +(_cdf >>3);switch _facea {case PixSrc :for _feee =0;_feee < _dgadb ;_feee ++{_gdfb =_ggfc +_feee *_gfca .RowStride ;
_dbbg =_fgcba +_feee *_aagb .RowStride ;for _bdeg =0;_bdeg < _gdgad ;_bdeg ++{_aagb .Data [_dbbg ]=_gfca .Data [_gdfb ];_dbbg ++;_gdfb ++;};if _cdfa > 0{_aagb .Data [_dbbg ]=_deabca (_aagb .Data [_dbbg ],_gfca .Data [_gdfb ],_bacg );};};case PixNotSrc :for _feee =0;
_feee < _dgadb ;_feee ++{_gdfb =_ggfc +_feee *_gfca .RowStride ;_dbbg =_fgcba +_feee *_aagb .RowStride ;for _bdeg =0;_bdeg < _gdgad ;_bdeg ++{_aagb .Data [_dbbg ]=^(_gfca .Data [_gdfb ]);_dbbg ++;_gdfb ++;};if _cdfa > 0{_aagb .Data [_dbbg ]=_deabca (_aagb .Data [_dbbg ],^_gfca .Data [_gdfb ],_bacg );
};};case PixSrcOrDst :for _feee =0;_feee < _dgadb ;_feee ++{_gdfb =_ggfc +_feee *_gfca .RowStride ;_dbbg =_fgcba +_feee *_aagb .RowStride ;for _bdeg =0;_bdeg < _gdgad ;_bdeg ++{_aagb .Data [_dbbg ]|=_gfca .Data [_gdfb ];_dbbg ++;_gdfb ++;};if _cdfa > 0{_aagb .Data [_dbbg ]=_deabca (_aagb .Data [_dbbg ],_gfca .Data [_gdfb ]|_aagb .Data [_dbbg ],_bacg );
};};case PixSrcAndDst :for _feee =0;_feee < _dgadb ;_feee ++{_gdfb =_ggfc +_feee *_gfca .RowStride ;_dbbg =_fgcba +_feee *_aagb .RowStride ;for _bdeg =0;_bdeg < _gdgad ;_bdeg ++{_aagb .Data [_dbbg ]&=_gfca .Data [_gdfb ];_dbbg ++;_gdfb ++;};if _cdfa > 0{_aagb .Data [_dbbg ]=_deabca (_aagb .Data [_dbbg ],_gfca .Data [_gdfb ]&_aagb .Data [_dbbg ],_bacg );
};};case PixSrcXorDst :for _feee =0;_feee < _dgadb ;_feee ++{_gdfb =_ggfc +_feee *_gfca .RowStride ;_dbbg =_fgcba +_feee *_aagb .RowStride ;for _bdeg =0;_bdeg < _gdgad ;_bdeg ++{_aagb .Data [_dbbg ]^=_gfca .Data [_gdfb ];_dbbg ++;_gdfb ++;};if _cdfa > 0{_aagb .Data [_dbbg ]=_deabca (_aagb .Data [_dbbg ],_gfca .Data [_gdfb ]^_aagb .Data [_dbbg ],_bacg );
};};case PixNotSrcOrDst :for _feee =0;_feee < _dgadb ;_feee ++{_gdfb =_ggfc +_feee *_gfca .RowStride ;_dbbg =_fgcba +_feee *_aagb .RowStride ;for _bdeg =0;_bdeg < _gdgad ;_bdeg ++{_aagb .Data [_dbbg ]|=^(_gfca .Data [_gdfb ]);_dbbg ++;_gdfb ++;};if _cdfa > 0{_aagb .Data [_dbbg ]=_deabca (_aagb .Data [_dbbg ],^(_gfca .Data [_gdfb ])|_aagb .Data [_dbbg ],_bacg );
};};case PixNotSrcAndDst :for _feee =0;_feee < _dgadb ;_feee ++{_gdfb =_ggfc +_feee *_gfca .RowStride ;_dbbg =_fgcba +_feee *_aagb .RowStride ;for _bdeg =0;_bdeg < _gdgad ;_bdeg ++{_aagb .Data [_dbbg ]&=^(_gfca .Data [_gdfb ]);_dbbg ++;_gdfb ++;};if _cdfa > 0{_aagb .Data [_dbbg ]=_deabca (_aagb .Data [_dbbg ],^(_gfca .Data [_gdfb ])&_aagb .Data [_dbbg ],_bacg );
};};case PixSrcOrNotDst :for _feee =0;_feee < _dgadb ;_feee ++{_gdfb =_ggfc +_feee *_gfca .RowStride ;_dbbg =_fgcba +_feee *_aagb .RowStride ;for _bdeg =0;_bdeg < _gdgad ;_bdeg ++{_aagb .Data [_dbbg ]=_gfca .Data [_gdfb ]|^(_aagb .Data [_dbbg ]);_dbbg ++;
_gdfb ++;};if _cdfa > 0{_aagb .Data [_dbbg ]=_deabca (_aagb .Data [_dbbg ],_gfca .Data [_gdfb ]|^(_aagb .Data [_dbbg ]),_bacg );};};case PixSrcAndNotDst :for _feee =0;_feee < _dgadb ;_feee ++{_gdfb =_ggfc +_feee *_gfca .RowStride ;_dbbg =_fgcba +_feee *_aagb .RowStride ;
for _bdeg =0;_bdeg < _gdgad ;_bdeg ++{_aagb .Data [_dbbg ]=_gfca .Data [_gdfb ]&^(_aagb .Data [_dbbg ]);_dbbg ++;_gdfb ++;};if _cdfa > 0{_aagb .Data [_dbbg ]=_deabca (_aagb .Data [_dbbg ],_gfca .Data [_gdfb ]&^(_aagb .Data [_dbbg ]),_bacg );};};case PixNotPixSrcOrDst :for _feee =0;
_feee < _dgadb ;_feee ++{_gdfb =_ggfc +_feee *_gfca .RowStride ;_dbbg =_fgcba +_feee *_aagb .RowStride ;for _bdeg =0;_bdeg < _gdgad ;_bdeg ++{_aagb .Data [_dbbg ]=^(_gfca .Data [_gdfb ]|_aagb .Data [_dbbg ]);_dbbg ++;_gdfb ++;};if _cdfa > 0{_aagb .Data [_dbbg ]=_deabca (_aagb .Data [_dbbg ],^(_gfca .Data [_gdfb ]|_aagb .Data [_dbbg ]),_bacg );
};};case PixNotPixSrcAndDst :for _feee =0;_feee < _dgadb ;_feee ++{_gdfb =_ggfc +_feee *_gfca .RowStride ;_dbbg =_fgcba +_feee *_aagb .RowStride ;for _bdeg =0;_bdeg < _gdgad ;_bdeg ++{_aagb .Data [_dbbg ]=^(_gfca .Data [_gdfb ]&_aagb .Data [_dbbg ]);_dbbg ++;
_gdfb ++;};if _cdfa > 0{_aagb .Data [_dbbg ]=_deabca (_aagb .Data [_dbbg ],^(_gfca .Data [_gdfb ]&_aagb .Data [_dbbg ]),_bacg );};};case PixNotPixSrcXorDst :for _feee =0;_feee < _dgadb ;_feee ++{_gdfb =_ggfc +_feee *_gfca .RowStride ;_dbbg =_fgcba +_feee *_aagb .RowStride ;
for _bdeg =0;_bdeg < _gdgad ;_bdeg ++{_aagb .Data [_dbbg ]=^(_gfca .Data [_gdfb ]^_aagb .Data [_dbbg ]);_dbbg ++;_gdfb ++;};if _cdfa > 0{_aagb .Data [_dbbg ]=_deabca (_aagb .Data [_dbbg ],^(_gfca .Data [_gdfb ]^_aagb .Data [_dbbg ]),_bacg );};};default:_gc .Log .Debug ("\u0050\u0072ov\u0069\u0064\u0065d\u0020\u0069\u006e\u0076ali\u0064 r\u0061\u0073\u0074\u0065\u0072\u0020\u006fpe\u0072\u0061\u0074\u006f\u0072\u003a\u0020%\u0076",_facea );
return _c .Error ("\u0072\u0061\u0073\u0074er\u004f\u0070\u0042\u0079\u0074\u0065\u0041\u006c\u0069\u0067\u006e\u0065\u0064\u004co\u0077","\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");
};return nil ;};func (_dafe *Bitmap )centroid (_dbce ,_defea []int )(Point ,error ){_bdab :=Point {};_dafe .setPadBits (0);if len (_dbce )==0{_dbce =_cbbda ();};if len (_defea )==0{_defea =_bfbd ();};var _cbbgd ,_dgad ,_eddf ,_cgfa ,_gcbg ,_ecfa int ;var _dfcb byte ;
for _gcbg =0;_gcbg < _dafe .Height ;_gcbg ++{_cffd :=_dafe .RowStride *_gcbg ;_cgfa =0;for _ecfa =0;_ecfa < _dafe .RowStride ;_ecfa ++{_dfcb =_dafe .Data [_cffd +_ecfa ];if _dfcb !=0{_cgfa +=_defea [_dfcb ];_cbbgd +=_dbce [_dfcb ]+_ecfa *8*_defea [_dfcb ];
};};_eddf +=_cgfa ;_dgad +=_cgfa *_gcbg ;};if _eddf !=0{_bdab .X =float32 (_cbbgd )/float32 (_eddf );_bdab .Y =float32 (_dgad )/float32 (_eddf );};return _bdab ,nil ;};func Rect (x ,y ,w ,h int )(*_fa .Rectangle ,error ){const _fbe ="b\u0069\u0074\u006d\u0061\u0070\u002e\u0052\u0065\u0063\u0074";
if x < 0{w +=x ;x =0;if w <=0{return nil ,_c .Errorf (_fbe ,"x\u003a\u0027\u0025\u0064\u0027\u0020<\u0020\u0030\u0020\u0061\u006e\u0064\u0020\u0077\u003a \u0027\u0025\u0064'\u0020<\u003d\u0020\u0030",x ,w );};};if y < 0{h +=y ;y =0;if h <=0{return nil ,_c .Error (_fbe ,"\u0079\u0020\u003c 0\u0020\u0061\u006e\u0064\u0020\u0062\u006f\u0078\u0020\u006f\u0066\u0066\u0020\u002b\u0071\u0075\u0061\u0064");
};};_agga :=_fa .Rect (x ,y ,x +w ,y +h );return &_agga ,nil ;};func _eeff (_eace ,_aagf *Bitmap ,_cedf *Selection )(*Bitmap ,error ){const _dgeag ="\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u004d\u006f\u0072\u0070\u0068A\u0072\u0067\u0073\u0032";var _bgga ,_geabe int ;
if _aagf ==nil {return nil ,_c .Error (_dgeag ,"s\u006fu\u0072\u0063\u0065\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");};if _cedf ==nil {return nil ,_c .Error (_dgeag ,"\u0073e\u006c \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};_bgga =_cedf .Width ;_geabe =_cedf .Height ;if _bgga ==0||_geabe ==0{return nil ,_c .Error (_dgeag ,"\u0073\u0065\u006c\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u0020\u0030");};if _eace ==nil {return _aagf .createTemplate (),nil ;};if _dbeg :=_eace .resizeImageData (_aagf );
_dbeg !=nil {return nil ,_dbeg ;};return _eace ,nil ;};func _ggea (_ffgg ,_cegg ,_gggf *Bitmap )(*Bitmap ,error ){const _abcf ="\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0078\u006f\u0072";if _cegg ==nil {return nil ,_c .Error (_abcf ,"'\u0062\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");
};if _gggf ==nil {return nil ,_c .Error (_abcf ,"'\u0062\u0032\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _ffgg ==_gggf {return nil ,_c .Error (_abcf ,"'\u0064\u0027\u0020\u003d\u003d\u0020\u0027\u0062\u0032\u0027");};if !_cegg .SizesEqual (_gggf ){_gc .Log .Debug ("\u0025s\u0020\u002d \u0042\u0069\u0074\u006da\u0070\u0020\u0027b\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074 e\u0071\u0075\u0061l\u0020\u0073i\u007a\u0065\u0020\u0077\u0069\u0074h\u0020\u0027b\u0032\u0027",_abcf );
};var _gfga error ;if _ffgg ,_gfga =_ace (_ffgg ,_cegg );_gfga !=nil {return nil ,_c .Wrap (_gfga ,_abcf ,"\u0063\u0061n\u0027\u0074\u0020c\u0072\u0065\u0061\u0074\u0065\u0020\u0027\u0064\u0027");};if _gfga =_ffgg .RasterOperation (0,0,_ffgg .Width ,_ffgg .Height ,PixSrcXorDst ,_gggf ,0,0);
_gfga !=nil {return nil ,_c .Wrap (_gfga ,_abcf ,"");};return _ffgg ,nil ;};func _gfd (_gacde *Bitmap ,_efcdeg ,_fdcae ,_efcac ,_cgbf int ,_cgbfg RasterOperator ,_cdea *Bitmap ,_effa ,_agaf int )error {var (_cfgbb bool ;_aabb bool ;_dbdd byte ;_fgbf int ;
_gcgb int ;_beegb int ;_fffd int ;_aaeba bool ;_aedab int ;_fgcg int ;_edab int ;_bacbb bool ;_acfga byte ;_fdbed int ;_gdfbd int ;_cdaf int ;_efcdb byte ;_dbgd int ;_aabbd int ;_gfea uint ;_dgfbb uint ;_fecgc byte ;_bdcb shift ;_febf bool ;_becddc bool ;
_dedb ,_cdcd int ;);if _effa &7!=0{_aabbd =8-(_effa &7);};if _efcdeg &7!=0{_gcgb =8-(_efcdeg &7);};if _aabbd ==0&&_gcgb ==0{_fecgc =_ccaa [0];}else {if _gcgb > _aabbd {_gfea =uint (_gcgb -_aabbd );}else {_gfea =uint (8-(_aabbd -_gcgb ));};_dgfbb =8-_gfea ;
_fecgc =_ccaa [_gfea ];};if (_efcdeg &7)!=0{_cfgbb =true ;_fgbf =8-(_efcdeg &7);_dbdd =_ccaa [_fgbf ];_beegb =_gacde .RowStride *_fdcae +(_efcdeg >>3);_fffd =_cdea .RowStride *_agaf +(_effa >>3);_dbgd =8-(_effa &7);if _fgbf > _dbgd {_bdcb =_fdeee ;if _efcac >=_aabbd {_febf =true ;
};}else {_bdcb =_cgfc ;};};if _efcac < _fgbf {_aabb =true ;_dbdd &=_feea [8-_fgbf +_efcac ];};if !_aabb {_aedab =(_efcac -_fgbf )>>3;if _aedab !=0{_aaeba =true ;_fgcg =_gacde .RowStride *_fdcae +((_efcdeg +_gcgb )>>3);_edab =_cdea .RowStride *_agaf +((_effa +_gcgb )>>3);
};};_fdbed =(_efcdeg +_efcac )&7;if !(_aabb ||_fdbed ==0){_bacbb =true ;_acfga =_feea [_fdbed ];_gdfbd =_gacde .RowStride *_fdcae +((_efcdeg +_gcgb )>>3)+_aedab ;_cdaf =_cdea .RowStride *_agaf +((_effa +_gcgb )>>3)+_aedab ;if _fdbed > int (_dgfbb ){_becddc =true ;
};};switch _cgbfg {case PixSrc :if _cfgbb {for _dedb =0;_dedb < _cgbf ;_dedb ++{if _bdcb ==_fdeee {_efcdb =_cdea .Data [_fffd ]<<_gfea ;if _febf {_efcdb =_deabca (_efcdb ,_cdea .Data [_fffd +1]>>_dgfbb ,_fecgc );};}else {_efcdb =_cdea .Data [_fffd ]>>_dgfbb ;
};_gacde .Data [_beegb ]=_deabca (_gacde .Data [_beegb ],_efcdb ,_dbdd );_beegb +=_gacde .RowStride ;_fffd +=_cdea .RowStride ;};};if _aaeba {for _dedb =0;_dedb < _cgbf ;_dedb ++{for _cdcd =0;_cdcd < _aedab ;_cdcd ++{_efcdb =_deabca (_cdea .Data [_edab +_cdcd ]<<_gfea ,_cdea .Data [_edab +_cdcd +1]>>_dgfbb ,_fecgc );
_gacde .Data [_fgcg +_cdcd ]=_efcdb ;};_fgcg +=_gacde .RowStride ;_edab +=_cdea .RowStride ;};};if _bacbb {for _dedb =0;_dedb < _cgbf ;_dedb ++{_efcdb =_cdea .Data [_cdaf ]<<_gfea ;if _becddc {_efcdb =_deabca (_efcdb ,_cdea .Data [_cdaf +1]>>_dgfbb ,_fecgc );
};_gacde .Data [_gdfbd ]=_deabca (_gacde .Data [_gdfbd ],_efcdb ,_acfga );_gdfbd +=_gacde .RowStride ;_cdaf +=_cdea .RowStride ;};};case PixNotSrc :if _cfgbb {for _dedb =0;_dedb < _cgbf ;_dedb ++{if _bdcb ==_fdeee {_efcdb =_cdea .Data [_fffd ]<<_gfea ;
if _febf {_efcdb =_deabca (_efcdb ,_cdea .Data [_fffd +1]>>_dgfbb ,_fecgc );};}else {_efcdb =_cdea .Data [_fffd ]>>_dgfbb ;};_gacde .Data [_beegb ]=_deabca (_gacde .Data [_beegb ],^_efcdb ,_dbdd );_beegb +=_gacde .RowStride ;_fffd +=_cdea .RowStride ;};
};if _aaeba {for _dedb =0;_dedb < _cgbf ;_dedb ++{for _cdcd =0;_cdcd < _aedab ;_cdcd ++{_efcdb =_deabca (_cdea .Data [_edab +_cdcd ]<<_gfea ,_cdea .Data [_edab +_cdcd +1]>>_dgfbb ,_fecgc );_gacde .Data [_fgcg +_cdcd ]=^_efcdb ;};_fgcg +=_gacde .RowStride ;
_edab +=_cdea .RowStride ;};};if _bacbb {for _dedb =0;_dedb < _cgbf ;_dedb ++{_efcdb =_cdea .Data [_cdaf ]<<_gfea ;if _becddc {_efcdb =_deabca (_efcdb ,_cdea .Data [_cdaf +1]>>_dgfbb ,_fecgc );};_gacde .Data [_gdfbd ]=_deabca (_gacde .Data [_gdfbd ],^_efcdb ,_acfga );
_gdfbd +=_gacde .RowStride ;_cdaf +=_cdea .RowStride ;};};case PixSrcOrDst :if _cfgbb {for _dedb =0;_dedb < _cgbf ;_dedb ++{if _bdcb ==_fdeee {_efcdb =_cdea .Data [_fffd ]<<_gfea ;if _febf {_efcdb =_deabca (_efcdb ,_cdea .Data [_fffd +1]>>_dgfbb ,_fecgc );
};}else {_efcdb =_cdea .Data [_fffd ]>>_dgfbb ;};_gacde .Data [_beegb ]=_deabca (_gacde .Data [_beegb ],_efcdb |_gacde .Data [_beegb ],_dbdd );_beegb +=_gacde .RowStride ;_fffd +=_cdea .RowStride ;};};if _aaeba {for _dedb =0;_dedb < _cgbf ;_dedb ++{for _cdcd =0;
_cdcd < _aedab ;_cdcd ++{_efcdb =_deabca (_cdea .Data [_edab +_cdcd ]<<_gfea ,_cdea .Data [_edab +_cdcd +1]>>_dgfbb ,_fecgc );_gacde .Data [_fgcg +_cdcd ]|=_efcdb ;};_fgcg +=_gacde .RowStride ;_edab +=_cdea .RowStride ;};};if _bacbb {for _dedb =0;_dedb < _cgbf ;
_dedb ++{_efcdb =_cdea .Data [_cdaf ]<<_gfea ;if _becddc {_efcdb =_deabca (_efcdb ,_cdea .Data [_cdaf +1]>>_dgfbb ,_fecgc );};_gacde .Data [_gdfbd ]=_deabca (_gacde .Data [_gdfbd ],_efcdb |_gacde .Data [_gdfbd ],_acfga );_gdfbd +=_gacde .RowStride ;_cdaf +=_cdea .RowStride ;
};};case PixSrcAndDst :if _cfgbb {for _dedb =0;_dedb < _cgbf ;_dedb ++{if _bdcb ==_fdeee {_efcdb =_cdea .Data [_fffd ]<<_gfea ;if _febf {_efcdb =_deabca (_efcdb ,_cdea .Data [_fffd +1]>>_dgfbb ,_fecgc );};}else {_efcdb =_cdea .Data [_fffd ]>>_dgfbb ;};
_gacde .Data [_beegb ]=_deabca (_gacde .Data [_beegb ],_efcdb &_gacde .Data [_beegb ],_dbdd );_beegb +=_gacde .RowStride ;_fffd +=_cdea .RowStride ;};};if _aaeba {for _dedb =0;_dedb < _cgbf ;_dedb ++{for _cdcd =0;_cdcd < _aedab ;_cdcd ++{_efcdb =_deabca (_cdea .Data [_edab +_cdcd ]<<_gfea ,_cdea .Data [_edab +_cdcd +1]>>_dgfbb ,_fecgc );
_gacde .Data [_fgcg +_cdcd ]&=_efcdb ;};_fgcg +=_gacde .RowStride ;_edab +=_cdea .RowStride ;};};if _bacbb {for _dedb =0;_dedb < _cgbf ;_dedb ++{_efcdb =_cdea .Data [_cdaf ]<<_gfea ;if _becddc {_efcdb =_deabca (_efcdb ,_cdea .Data [_cdaf +1]>>_dgfbb ,_fecgc );
};_gacde .Data [_gdfbd ]=_deabca (_gacde .Data [_gdfbd ],_efcdb &_gacde .Data [_gdfbd ],_acfga );_gdfbd +=_gacde .RowStride ;_cdaf +=_cdea .RowStride ;};};case PixSrcXorDst :if _cfgbb {for _dedb =0;_dedb < _cgbf ;_dedb ++{if _bdcb ==_fdeee {_efcdb =_cdea .Data [_fffd ]<<_gfea ;
if _febf {_efcdb =_deabca (_efcdb ,_cdea .Data [_fffd +1]>>_dgfbb ,_fecgc );};}else {_efcdb =_cdea .Data [_fffd ]>>_dgfbb ;};_gacde .Data [_beegb ]=_deabca (_gacde .Data [_beegb ],_efcdb ^_gacde .Data [_beegb ],_dbdd );_beegb +=_gacde .RowStride ;_fffd +=_cdea .RowStride ;
};};if _aaeba {for _dedb =0;_dedb < _cgbf ;_dedb ++{for _cdcd =0;_cdcd < _aedab ;_cdcd ++{_efcdb =_deabca (_cdea .Data [_edab +_cdcd ]<<_gfea ,_cdea .Data [_edab +_cdcd +1]>>_dgfbb ,_fecgc );_gacde .Data [_fgcg +_cdcd ]^=_efcdb ;};_fgcg +=_gacde .RowStride ;
_edab +=_cdea .RowStride ;};};if _bacbb {for _dedb =0;_dedb < _cgbf ;_dedb ++{_efcdb =_cdea .Data [_cdaf ]<<_gfea ;if _becddc {_efcdb =_deabca (_efcdb ,_cdea .Data [_cdaf +1]>>_dgfbb ,_fecgc );};_gacde .Data [_gdfbd ]=_deabca (_gacde .Data [_gdfbd ],_efcdb ^_gacde .Data [_gdfbd ],_acfga );
_gdfbd +=_gacde .RowStride ;_cdaf +=_cdea .RowStride ;};};case PixNotSrcOrDst :if _cfgbb {for _dedb =0;_dedb < _cgbf ;_dedb ++{if _bdcb ==_fdeee {_efcdb =_cdea .Data [_fffd ]<<_gfea ;if _febf {_efcdb =_deabca (_efcdb ,_cdea .Data [_fffd +1]>>_dgfbb ,_fecgc );
};}else {_efcdb =_cdea .Data [_fffd ]>>_dgfbb ;};_gacde .Data [_beegb ]=_deabca (_gacde .Data [_beegb ],^_efcdb |_gacde .Data [_beegb ],_dbdd );_beegb +=_gacde .RowStride ;_fffd +=_cdea .RowStride ;};};if _aaeba {for _dedb =0;_dedb < _cgbf ;_dedb ++{for _cdcd =0;
_cdcd < _aedab ;_cdcd ++{_efcdb =_deabca (_cdea .Data [_edab +_cdcd ]<<_gfea ,_cdea .Data [_edab +_cdcd +1]>>_dgfbb ,_fecgc );_gacde .Data [_fgcg +_cdcd ]|=^_efcdb ;};_fgcg +=_gacde .RowStride ;_edab +=_cdea .RowStride ;};};if _bacbb {for _dedb =0;_dedb < _cgbf ;
_dedb ++{_efcdb =_cdea .Data [_cdaf ]<<_gfea ;if _becddc {_efcdb =_deabca (_efcdb ,_cdea .Data [_cdaf +1]>>_dgfbb ,_fecgc );};_gacde .Data [_gdfbd ]=_deabca (_gacde .Data [_gdfbd ],^_efcdb |_gacde .Data [_gdfbd ],_acfga );_gdfbd +=_gacde .RowStride ;_cdaf +=_cdea .RowStride ;
};};case PixNotSrcAndDst :if _cfgbb {for _dedb =0;_dedb < _cgbf ;_dedb ++{if _bdcb ==_fdeee {_efcdb =_cdea .Data [_fffd ]<<_gfea ;if _febf {_efcdb =_deabca (_efcdb ,_cdea .Data [_fffd +1]>>_dgfbb ,_fecgc );};}else {_efcdb =_cdea .Data [_fffd ]>>_dgfbb ;
};_gacde .Data [_beegb ]=_deabca (_gacde .Data [_beegb ],^_efcdb &_gacde .Data [_beegb ],_dbdd );_beegb +=_gacde .RowStride ;_fffd +=_cdea .RowStride ;};};if _aaeba {for _dedb =0;_dedb < _cgbf ;_dedb ++{for _cdcd =0;_cdcd < _aedab ;_cdcd ++{_efcdb =_deabca (_cdea .Data [_edab +_cdcd ]<<_gfea ,_cdea .Data [_edab +_cdcd +1]>>_dgfbb ,_fecgc );
_gacde .Data [_fgcg +_cdcd ]&=^_efcdb ;};_fgcg +=_gacde .RowStride ;_edab +=_cdea .RowStride ;};};if _bacbb {for _dedb =0;_dedb < _cgbf ;_dedb ++{_efcdb =_cdea .Data [_cdaf ]<<_gfea ;if _becddc {_efcdb =_deabca (_efcdb ,_cdea .Data [_cdaf +1]>>_dgfbb ,_fecgc );
};_gacde .Data [_gdfbd ]=_deabca (_gacde .Data [_gdfbd ],^_efcdb &_gacde .Data [_gdfbd ],_acfga );_gdfbd +=_gacde .RowStride ;_cdaf +=_cdea .RowStride ;};};case PixSrcOrNotDst :if _cfgbb {for _dedb =0;_dedb < _cgbf ;_dedb ++{if _bdcb ==_fdeee {_efcdb =_cdea .Data [_fffd ]<<_gfea ;
if _febf {_efcdb =_deabca (_efcdb ,_cdea .Data [_fffd +1]>>_dgfbb ,_fecgc );};}else {_efcdb =_cdea .Data [_fffd ]>>_dgfbb ;};_gacde .Data [_beegb ]=_deabca (_gacde .Data [_beegb ],_efcdb |^_gacde .Data [_beegb ],_dbdd );_beegb +=_gacde .RowStride ;_fffd +=_cdea .RowStride ;
};};if _aaeba {for _dedb =0;_dedb < _cgbf ;_dedb ++{for _cdcd =0;_cdcd < _aedab ;_cdcd ++{_efcdb =_deabca (_cdea .Data [_edab +_cdcd ]<<_gfea ,_cdea .Data [_edab +_cdcd +1]>>_dgfbb ,_fecgc );_gacde .Data [_fgcg +_cdcd ]=_efcdb |^_gacde .Data [_fgcg +_cdcd ];
};_fgcg +=_gacde .RowStride ;_edab +=_cdea .RowStride ;};};if _bacbb {for _dedb =0;_dedb < _cgbf ;_dedb ++{_efcdb =_cdea .Data [_cdaf ]<<_gfea ;if _becddc {_efcdb =_deabca (_efcdb ,_cdea .Data [_cdaf +1]>>_dgfbb ,_fecgc );};_gacde .Data [_gdfbd ]=_deabca (_gacde .Data [_gdfbd ],_efcdb |^_gacde .Data [_gdfbd ],_acfga );
_gdfbd +=_gacde .RowStride ;_cdaf +=_cdea .RowStride ;};};case PixSrcAndNotDst :if _cfgbb {for _dedb =0;_dedb < _cgbf ;_dedb ++{if _bdcb ==_fdeee {_efcdb =_cdea .Data [_fffd ]<<_gfea ;if _febf {_efcdb =_deabca (_efcdb ,_cdea .Data [_fffd +1]>>_dgfbb ,_fecgc );
};}else {_efcdb =_cdea .Data [_fffd ]>>_dgfbb ;};_gacde .Data [_beegb ]=_deabca (_gacde .Data [_beegb ],_efcdb &^_gacde .Data [_beegb ],_dbdd );_beegb +=_gacde .RowStride ;_fffd +=_cdea .RowStride ;};};if _aaeba {for _dedb =0;_dedb < _cgbf ;_dedb ++{for _cdcd =0;
_cdcd < _aedab ;_cdcd ++{_efcdb =_deabca (_cdea .Data [_edab +_cdcd ]<<_gfea ,_cdea .Data [_edab +_cdcd +1]>>_dgfbb ,_fecgc );_gacde .Data [_fgcg +_cdcd ]=_efcdb &^_gacde .Data [_fgcg +_cdcd ];};_fgcg +=_gacde .RowStride ;_edab +=_cdea .RowStride ;};};
if _bacbb {for _dedb =0;_dedb < _cgbf ;_dedb ++{_efcdb =_cdea .Data [_cdaf ]<<_gfea ;if _becddc {_efcdb =_deabca (_efcdb ,_cdea .Data [_cdaf +1]>>_dgfbb ,_fecgc );};_gacde .Data [_gdfbd ]=_deabca (_gacde .Data [_gdfbd ],_efcdb &^_gacde .Data [_gdfbd ],_acfga );
_gdfbd +=_gacde .RowStride ;_cdaf +=_cdea .RowStride ;};};case PixNotPixSrcOrDst :if _cfgbb {for _dedb =0;_dedb < _cgbf ;_dedb ++{if _bdcb ==_fdeee {_efcdb =_cdea .Data [_fffd ]<<_gfea ;if _febf {_efcdb =_deabca (_efcdb ,_cdea .Data [_fffd +1]>>_dgfbb ,_fecgc );
};}else {_efcdb =_cdea .Data [_fffd ]>>_dgfbb ;};_gacde .Data [_beegb ]=_deabca (_gacde .Data [_beegb ],^(_efcdb |_gacde .Data [_beegb ]),_dbdd );_beegb +=_gacde .RowStride ;_fffd +=_cdea .RowStride ;};};if _aaeba {for _dedb =0;_dedb < _cgbf ;_dedb ++{for _cdcd =0;
_cdcd < _aedab ;_cdcd ++{_efcdb =_deabca (_cdea .Data [_edab +_cdcd ]<<_gfea ,_cdea .Data [_edab +_cdcd +1]>>_dgfbb ,_fecgc );_gacde .Data [_fgcg +_cdcd ]=^(_efcdb |_gacde .Data [_fgcg +_cdcd ]);};_fgcg +=_gacde .RowStride ;_edab +=_cdea .RowStride ;};
};if _bacbb {for _dedb =0;_dedb < _cgbf ;_dedb ++{_efcdb =_cdea .Data [_cdaf ]<<_gfea ;if _becddc {_efcdb =_deabca (_efcdb ,_cdea .Data [_cdaf +1]>>_dgfbb ,_fecgc );};_gacde .Data [_gdfbd ]=_deabca (_gacde .Data [_gdfbd ],^(_efcdb |_gacde .Data [_gdfbd ]),_acfga );
_gdfbd +=_gacde .RowStride ;_cdaf +=_cdea .RowStride ;};};case PixNotPixSrcAndDst :if _cfgbb {for _dedb =0;_dedb < _cgbf ;_dedb ++{if _bdcb ==_fdeee {_efcdb =_cdea .Data [_fffd ]<<_gfea ;if _febf {_efcdb =_deabca (_efcdb ,_cdea .Data [_fffd +1]>>_dgfbb ,_fecgc );
};}else {_efcdb =_cdea .Data [_fffd ]>>_dgfbb ;};_gacde .Data [_beegb ]=_deabca (_gacde .Data [_beegb ],^(_efcdb &_gacde .Data [_beegb ]),_dbdd );_beegb +=_gacde .RowStride ;_fffd +=_cdea .RowStride ;};};if _aaeba {for _dedb =0;_dedb < _cgbf ;_dedb ++{for _cdcd =0;
_cdcd < _aedab ;_cdcd ++{_efcdb =_deabca (_cdea .Data [_edab +_cdcd ]<<_gfea ,_cdea .Data [_edab +_cdcd +1]>>_dgfbb ,_fecgc );_gacde .Data [_fgcg +_cdcd ]=^(_efcdb &_gacde .Data [_fgcg +_cdcd ]);};_fgcg +=_gacde .RowStride ;_edab +=_cdea .RowStride ;};
};if _bacbb {for _dedb =0;_dedb < _cgbf ;_dedb ++{_efcdb =_cdea .Data [_cdaf ]<<_gfea ;if _becddc {_efcdb =_deabca (_efcdb ,_cdea .Data [_cdaf +1]>>_dgfbb ,_fecgc );};_gacde .Data [_gdfbd ]=_deabca (_gacde .Data [_gdfbd ],^(_efcdb &_gacde .Data [_gdfbd ]),_acfga );
_gdfbd +=_gacde .RowStride ;_cdaf +=_cdea .RowStride ;};};case PixNotPixSrcXorDst :if _cfgbb {for _dedb =0;_dedb < _cgbf ;_dedb ++{if _bdcb ==_fdeee {_efcdb =_cdea .Data [_fffd ]<<_gfea ;if _febf {_efcdb =_deabca (_efcdb ,_cdea .Data [_fffd +1]>>_dgfbb ,_fecgc );
};}else {_efcdb =_cdea .Data [_fffd ]>>_dgfbb ;};_gacde .Data [_beegb ]=_deabca (_gacde .Data [_beegb ],^(_efcdb ^_gacde .Data [_beegb ]),_dbdd );_beegb +=_gacde .RowStride ;_fffd +=_cdea .RowStride ;};};if _aaeba {for _dedb =0;_dedb < _cgbf ;_dedb ++{for _cdcd =0;
_cdcd < _aedab ;_cdcd ++{_efcdb =_deabca (_cdea .Data [_edab +_cdcd ]<<_gfea ,_cdea .Data [_edab +_cdcd +1]>>_dgfbb ,_fecgc );_gacde .Data [_fgcg +_cdcd ]=^(_efcdb ^_gacde .Data [_fgcg +_cdcd ]);};_fgcg +=_gacde .RowStride ;_edab +=_cdea .RowStride ;};
};if _bacbb {for _dedb =0;_dedb < _cgbf ;_dedb ++{_efcdb =_cdea .Data [_cdaf ]<<_gfea ;if _becddc {_efcdb =_deabca (_efcdb ,_cdea .Data [_cdaf +1]>>_dgfbb ,_fecgc );};_gacde .Data [_gdfbd ]=_deabca (_gacde .Data [_gdfbd ],^(_efcdb ^_gacde .Data [_gdfbd ]),_acfga );
_gdfbd +=_gacde .RowStride ;_cdaf +=_cdea .RowStride ;};};default:_gc .Log .Debug ("\u004f\u0070e\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0074\u0020\u0070\u0065\u0072\u006d\u0069tt\u0065\u0064",_cgbfg );
return _c .Error ("\u0072a\u0073t\u0065\u0072\u004f\u0070\u0047e\u006e\u0065r\u0061\u006c\u004c\u006f\u0077","\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065r\u0061\u0074\u0069\u006f\u006e\u0020\u006eo\u0074\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074\u0065\u0064");
};return nil ;};func (_dfb Points )GetIntX (i int )(int ,error ){if i >=len (_dfb ){return 0,_c .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065t\u0049\u006e\u0074\u0058","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return int (_dfb [i ].X ),nil ;};func MorphSequence (src *Bitmap ,sequence ...MorphProcess )(*Bitmap ,error ){return _gccca (src ,sequence ...);};func (_afb *Bitmap )And (s *Bitmap )(_gea *Bitmap ,_gdd error ){const _fcec ="\u0042\u0069\u0074\u006d\u0061\u0070\u002e\u0041\u006e\u0064";
if _afb ==nil {return nil ,_c .Error (_fcec ,"\u0027b\u0069t\u006d\u0061\u0070\u0020\u0027b\u0027\u0020i\u0073\u0020\u006e\u0069\u006c");};if s ==nil {return nil ,_c .Error (_fcec ,"\u0062\u0069\u0074\u006d\u0061\u0070\u0020\u0027\u0073\u0027\u0020\u0069s\u0020\u006e\u0069\u006c");
};if !_afb .SizesEqual (s ){_gc .Log .Debug ("\u0025\u0073\u0020-\u0020\u0042\u0069\u0074\u006d\u0061\u0070\u0020\u0027\u0073\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0073\u0069\u007a\u0065 \u0077\u0069\u0074\u0068\u0020\u0027\u0062\u0027",_fcec );
};if _gea ,_gdd =_ace (_gea ,_afb );_gdd !=nil {return nil ,_c .Wrap (_gdd ,_fcec ,"\u0063\u0061\u006e't\u0020\u0063\u0072\u0065\u0061\u0074\u0065\u0020\u0027\u0064\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _gdd =_gea .RasterOperation (0,0,_gea .Width ,_gea .Height ,PixSrcAndDst ,s ,0,0);
_gdd !=nil {return nil ,_c .Wrap (_gdd ,_fcec ,"");};return _gea ,nil ;};func (_aefd *BitmapsArray )AddBitmaps (bm *Bitmaps ){_aefd .Values =append (_aefd .Values ,bm )};func _fdb (_ebec *Bitmap ,_aege ...int )(_dab *Bitmap ,_dgg error ){const _bead ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0043\u0061\u0073\u0063\u0061\u0064\u0065";
if _ebec ==nil {return nil ,_c .Error (_bead ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if len (_aege )==0||len (_aege )> 4{return nil ,_c .Error (_bead ,"t\u0068\u0065\u0072\u0065\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0074\u0020\u006cea\u0073\u0074\u0020\u006fn\u0065\u0020\u0061\u006e\u0064\u0020\u0061\u0074\u0020mo\u0073\u0074 \u0034\u0020\u006c\u0065\u0076\u0065\u006c\u0073");
};if _aege [0]<=0{_gc .Log .Debug ("\u006c\u0065\u0076\u0065\u006c\u0031\u0020\u003c\u003d\u0020\u0030 \u002d\u0020\u006e\u006f\u0020\u0072\u0065\u0064\u0075\u0063t\u0069\u006f\u006e");_dab ,_dgg =_ace (nil ,_ebec );if _dgg !=nil {return nil ,_c .Wrap (_dgg ,_bead ,"l\u0065\u0076\u0065\u006c\u0031\u0020\u003c\u003d\u0020\u0030");
};return _dab ,nil ;};_fde :=_fcf ();_dab =_ebec ;for _fdee ,_ffg :=range _aege {if _ffg <=0{break ;};_dab ,_dgg =_ecb (_dab ,_ffg ,_fde );if _dgg !=nil {return nil ,_c .Wrapf (_dgg ,_bead ,"\u006c\u0065\u0076\u0065\u006c\u0025\u0064\u0020\u0072\u0065\u0064\u0075c\u0074\u0069\u006f\u006e",_fdee );
};};return _dab ,nil ;};const (_fdeee shift =iota ;_cgfc ;);type MorphOperation int ;func (_aedg *ClassedPoints )validateIntSlice ()error {const _adf ="\u0076\u0061l\u0069\u0064\u0061t\u0065\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065";for _ ,_adce :=range _aedg .IntSlice {if _adce >=(_aedg .Points .Size ()){return _c .Errorf (_adf ,"c\u006c\u0061\u0073\u0073\u0020\u0069\u0064\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0076\u0061\u006ci\u0064 \u0069\u006e\u0064\u0065x\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0070\u006f\u0069\u006e\u0074\u0073\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u003a\u0020\u0025\u0064",_adce ,_aedg .Points .Size ());
};};return nil ;};func _ace (_dcadb ,_gaa *Bitmap )(*Bitmap ,error ){if _gaa ==nil {return nil ,_c .Error ("\u0063\u006f\u0070\u0079\u0042\u0069\u0074\u006d\u0061\u0070","\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _gaa ==_dcadb {return _dcadb ,nil ;};if _dcadb ==nil {_dcadb =_gaa .createTemplate ();copy (_dcadb .Data ,_gaa .Data );return _dcadb ,nil ;};_bge :=_dcadb .resizeImageData (_gaa );if _bge !=nil {return nil ,_c .Wrap (_bge ,"\u0063\u006f\u0070\u0079\u0042\u0069\u0074\u006d\u0061\u0070","");
};_dcadb .Text =_gaa .Text ;copy (_dcadb .Data ,_gaa .Data );return _dcadb ,nil ;};func (_bbeb *Bitmap )SizesEqual (s *Bitmap )bool {if _bbeb ==s {return true ;};if _bbeb .Width !=s .Width ||_bbeb .Height !=s .Height {return false ;};return true ;};const (SelDontCare SelectionValue =iota ;
SelHit ;SelMiss ;);func _bccb (_daf ,_agcf int )int {if _daf < _agcf {return _daf ;};return _agcf ;};func (_cdec *Bitmap )CountPixels ()int {return _cdec .countPixels ()};func _ebc (_eeda *Bitmap ,_aafb *_ca .Stack ,_cbaed ,_adfa int )(_cbba *_fa .Rectangle ,_cdaa error ){const _agcef ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";
if _eeda ==nil {return nil ,_c .Error (_agcef ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _aafb ==nil {return nil ,_c .Error (_agcef ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");
};_gaggf ,_egff :=_eeda .Width ,_eeda .Height ;_eaba :=_gaggf -1;_cdac :=_egff -1;if _cbaed < 0||_cbaed > _eaba ||_adfa < 0||_adfa > _cdac ||!_eeda .GetPixel (_cbaed ,_adfa ){return nil ,nil ;};var _aggaf *_fa .Rectangle ;_aggaf ,_cdaa =Rect (100000,100000,0,0);
if _cdaa !=nil {return nil ,_c .Wrap (_cdaa ,_agcef ,"");};if _cdaa =_fggf (_aafb ,_cbaed ,_cbaed ,_adfa ,1,_cdac ,_aggaf );_cdaa !=nil {return nil ,_c .Wrap (_cdaa ,_agcef ,"\u0069\u006e\u0069t\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _cdaa =_fggf (_aafb ,_cbaed ,_cbaed ,_adfa +1,-1,_cdac ,_aggaf );
_cdaa !=nil {return nil ,_c .Wrap (_cdaa ,_agcef ,"\u0032\u006ed\u0020\u0069\u006ei\u0074\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};_aggaf .Min .X ,_aggaf .Max .X =_cbaed ,_cbaed ;_aggaf .Min .Y ,_aggaf .Max .Y =_adfa ,_adfa ;var (_cef *fillSegment ;
_bgdda int ;);for _aafb .Len ()> 0{if _cef ,_cdaa =_gebe (_aafb );_cdaa !=nil {return nil ,_c .Wrap (_cdaa ,_agcef ,"");};_adfa =_cef ._agae ;for _cbaed =_cef ._bega ;_cbaed >=0&&_eeda .GetPixel (_cbaed ,_adfa );_cbaed --{if _cdaa =_eeda .SetPixel (_cbaed ,_adfa ,0);
_cdaa !=nil {return nil ,_c .Wrap (_cdaa ,_agcef ,"");};};if _cbaed >=_cef ._bega {for _cbaed ++;_cbaed <=_cef ._aedfa &&_cbaed <=_eaba &&!_eeda .GetPixel (_cbaed ,_adfa );_cbaed ++{};_bgdda =_cbaed ;if !(_cbaed <=_cef ._aedfa &&_cbaed <=_eaba ){continue ;
};}else {_bgdda =_cbaed +1;if _bgdda < _cef ._bega -1{if _cdaa =_fggf (_aafb ,_bgdda ,_cef ._bega -1,_cef ._agae ,-_cef ._bcabd ,_cdac ,_aggaf );_cdaa !=nil {return nil ,_c .Wrap (_cdaa ,_agcef ,"\u006c\u0065\u0061\u006b\u0020\u006f\u006e\u0020\u006c\u0065\u0066\u0074 \u0073\u0069\u0064\u0065");
};};_cbaed =_cef ._bega +1;};for {for ;_cbaed <=_eaba &&_eeda .GetPixel (_cbaed ,_adfa );_cbaed ++{if _cdaa =_eeda .SetPixel (_cbaed ,_adfa ,0);_cdaa !=nil {return nil ,_c .Wrap (_cdaa ,_agcef ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _cdaa =_fggf (_aafb ,_bgdda ,_cbaed -1,_cef ._agae ,_cef ._bcabd ,_cdac ,_aggaf );
_cdaa !=nil {return nil ,_c .Wrap (_cdaa ,_agcef ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _cbaed > _cef ._aedfa +1{if _cdaa =_fggf (_aafb ,_cef ._aedfa +1,_cbaed -1,_cef ._agae ,-_cef ._bcabd ,_cdac ,_aggaf );_cdaa !=nil {return nil ,_c .Wrap (_cdaa ,_agcef ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};for _cbaed ++;_cbaed <=_cef ._aedfa &&_cbaed <=_eaba &&!_eeda .GetPixel (_cbaed ,_adfa );_cbaed ++{};_bgdda =_cbaed ;if !(_cbaed <=_cef ._aedfa &&_cbaed <=_eaba ){break ;};};};_aggaf .Max .X ++;_aggaf .Max .Y ++;return _aggaf ,nil ;};func (_dfae Points )GetIntY (i int )(int ,error ){if i >=len (_dfae ){return 0,_c .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065t\u0049\u006e\u0074\u0059","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return int (_dfae [i ].Y ),nil ;};func (_cebc *Bitmaps )HeightSorter ()func (_dcde ,_cgaf int )bool {return func (_baad ,_dgaag int )bool {_afdcc :=_cebc .Values [_baad ].Height < _cebc .Values [_dgaag ].Height ;_gc .Log .Debug ("H\u0065i\u0067\u0068\u0074\u003a\u0020\u0025\u0076\u0020<\u0020\u0025\u0076\u0020= \u0025\u0076",_cebc .Values [_baad ].Height ,_cebc .Values [_dgaag ].Height ,_afdcc );
return _afdcc ;};};func _gccca (_gec *Bitmap ,_agefg ...MorphProcess )(_dgfgb *Bitmap ,_dggg error ){const _befd ="\u006d\u006f\u0072\u0070\u0068\u0053\u0065\u0071\u0075\u0065\u006e\u0063\u0065";if _gec ==nil {return nil ,_c .Error (_befd ,"\u006d\u006f\u0072\u0070\u0068\u0053\u0065\u0071\u0075\u0065\u006e\u0063\u0065 \u0073\u006f\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};if len (_agefg )==0{return nil ,_c .Error (_befd ,"m\u006f\u0072\u0070\u0068\u0053\u0065q\u0075\u0065\u006e\u0063\u0065\u002c \u0073\u0065\u0071\u0075\u0065\u006e\u0063e\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");};if _dggg =_dbegd (_agefg ...);
_dggg !=nil {return nil ,_c .Wrap (_dggg ,_befd ,"");};var _egde ,_dced ,_cccgd int ;_dgfgb =_gec .Copy ();for _ ,_deff :=range _agefg {switch _deff .Operation {case MopDilation :_egde ,_dced =_deff .getWidthHeight ();_dgfgb ,_dggg =DilateBrick (nil ,_dgfgb ,_egde ,_dced );
if _dggg !=nil {return nil ,_c .Wrap (_dggg ,_befd ,"");};case MopErosion :_egde ,_dced =_deff .getWidthHeight ();_dgfgb ,_dggg =_geab (nil ,_dgfgb ,_egde ,_dced );if _dggg !=nil {return nil ,_c .Wrap (_dggg ,_befd ,"");};case MopOpening :_egde ,_dced =_deff .getWidthHeight ();
_dgfgb ,_dggg =_edee (nil ,_dgfgb ,_egde ,_dced );if _dggg !=nil {return nil ,_c .Wrap (_dggg ,_befd ,"");};case MopClosing :_egde ,_dced =_deff .getWidthHeight ();_dgfgb ,_dggg =_adeg (nil ,_dgfgb ,_egde ,_dced );if _dggg !=nil {return nil ,_c .Wrap (_dggg ,_befd ,"");
};case MopRankBinaryReduction :_dgfgb ,_dggg =_fdb (_dgfgb ,_deff .Arguments ...);if _dggg !=nil {return nil ,_c .Wrap (_dggg ,_befd ,"");};case MopReplicativeBinaryExpansion :_dgfgb ,_dggg =_bbcb (_dgfgb ,_deff .Arguments [0]);if _dggg !=nil {return nil ,_c .Wrap (_dggg ,_befd ,"");
};case MopAddBorder :_cccgd =_deff .Arguments [0];_dgfgb ,_dggg =_dgfgb .AddBorder (_cccgd ,0);if _dggg !=nil {return nil ,_c .Wrap (_dggg ,_befd ,"");};default:return nil ,_c .Error (_befd ,"i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006d\u006fr\u0070\u0068\u004f\u0070\u0065\u0072\u0061ti\u006f\u006e\u0020\u0070r\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0074\u006f t\u0068\u0065 \u0073\u0065\u0071\u0075\u0065\u006e\u0063\u0065");
};};if _cccgd > 0{_dgfgb ,_dggg =_dgfgb .RemoveBorder (_cccgd );if _dggg !=nil {return nil ,_c .Wrap (_dggg ,_befd ,"\u0062\u006f\u0072\u0064\u0065\u0072\u0020\u003e\u0020\u0030");};};return _dgfgb ,nil ;};func (_gdga *ClassedPoints )Less (i ,j int )bool {return _gdga ._bfgf (i ,j )};
func _bab ()(_ecc [256]uint16 ){for _gfeg :=0;_gfeg < 256;_gfeg ++{if _gfeg &0x01!=0{_ecc [_gfeg ]|=0x3;};if _gfeg &0x02!=0{_ecc [_gfeg ]|=0xc;};if _gfeg &0x04!=0{_ecc [_gfeg ]|=0x30;};if _gfeg &0x08!=0{_ecc [_gfeg ]|=0xc0;};if _gfeg &0x10!=0{_ecc [_gfeg ]|=0x300;
};if _gfeg &0x20!=0{_ecc [_gfeg ]|=0xc00;};if _gfeg &0x40!=0{_ecc [_gfeg ]|=0x3000;};if _gfeg &0x80!=0{_ecc [_gfeg ]|=0xc000;};};return _ecc ;};type Point struct{X ,Y float32 ;};func (_deed *Bitmap )thresholdPixelSum (_bgd int )bool {var (_cbe int ;_edf uint8 ;
_gccf byte ;_fead int ;);_bfg :=_deed .RowStride ;_fgf :=uint (_deed .Width &0x07);if _fgf !=0{_edf =uint8 ((0xff<<(8-_fgf ))&0xff);_bfg --;};for _adeb :=0;_adeb < _deed .Height ;_adeb ++{for _fead =0;_fead < _bfg ;_fead ++{_gccf =_deed .Data [_adeb *_deed .RowStride +_fead ];
_cbe +=int (_dfa [_gccf ]);};if _fgf !=0{_gccf =_deed .Data [_adeb *_deed .RowStride +_fead ]&_edf ;_cbe +=int (_dfa [_gccf ]);};if _cbe > _bgd {return true ;};};return false ;};func TstImageBitmapData ()[]byte {return _fbca .Data };func _ebef (_cfcd *Bitmap ,_gfgd *Bitmap ,_acfg *Selection )(*Bitmap ,error ){var (_adcb *Bitmap ;
_ccggb error ;);_cfcd ,_ccggb =_aafe (_cfcd ,_gfgd ,_acfg ,&_adcb );if _ccggb !=nil {return nil ,_ccggb ;};if _ccggb =_cfcd .clearAll ();_ccggb !=nil {return nil ,_ccggb ;};var _dfga SelectionValue ;for _gbgb :=0;_gbgb < _acfg .Height ;_gbgb ++{for _cccg :=0;
_cccg < _acfg .Width ;_cccg ++{_dfga =_acfg .Data [_gbgb ][_cccg ];if _dfga ==SelHit {if _ccggb =_cfcd .RasterOperation (_cccg -_acfg .Cx ,_gbgb -_acfg .Cy ,_gfgd .Width ,_gfgd .Height ,PixSrcOrDst ,_adcb ,0,0);_ccggb !=nil {return nil ,_ccggb ;};};};};
return _cfcd ,nil ;};type BoundaryCondition int ;const (PixSrc RasterOperator =0xc;PixDst RasterOperator =0xa;PixNotSrc RasterOperator =0x3;PixNotDst RasterOperator =0x5;PixClr RasterOperator =0x0;PixSet RasterOperator =0xf;PixSrcOrDst RasterOperator =0xe;
PixSrcAndDst RasterOperator =0x8;PixSrcXorDst RasterOperator =0x6;PixNotSrcOrDst RasterOperator =0xb;PixNotSrcAndDst RasterOperator =0x2;PixSrcOrNotDst RasterOperator =0xd;PixSrcAndNotDst RasterOperator =0x4;PixNotPixSrcOrDst RasterOperator =0x1;PixNotPixSrcAndDst RasterOperator =0x7;
PixNotPixSrcXorDst RasterOperator =0x9;PixPaint =PixSrcOrDst ;PixSubtract =PixNotSrcAndDst ;PixMask =PixSrcAndDst ;);func (_cfgb *Bitmap )RasterOperation (dx ,dy ,dw ,dh int ,op RasterOperator ,src *Bitmap ,sx ,sy int )error {return _dgec (_cfgb ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );
};func (_bbfa *Bitmaps )selectByIndicator (_baagd *_ca .NumSlice )(_ecff *Bitmaps ,_dadb error ){const _efac ="\u0042i\u0074\u006d\u0061\u0070s\u002e\u0073\u0065\u006c\u0065c\u0074B\u0079I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";if _bbfa ==nil {return nil ,_c .Error (_efac ,"\u0027\u0062\u0027 b\u0069\u0074\u006d\u0061\u0070\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if _baagd ==nil {return nil ,_c .Error (_efac ,"'\u006e\u0061\u0027\u0020\u0069\u006ed\u0069\u0063\u0061\u0074\u006f\u0072\u0073\u0020\u006eo\u0074\u0020\u0064e\u0066i\u006e\u0065\u0064");};if len (_bbfa .Values )==0{return _bbfa ,nil ;};if len (*_baagd )!=len (_bbfa .Values ){return nil ,_c .Errorf (_efac ,"\u006ea\u0020\u006ce\u006e\u0067\u0074\u0068:\u0020\u0025\u0064,\u0020\u0069\u0073\u0020\u0064\u0069\u0066\u0066\u0065re\u006e\u0074\u0020t\u0068\u0061n\u0020\u0062\u0069\u0074\u006d\u0061p\u0073\u003a \u0025\u0064",len (*_baagd ),len (_bbfa .Values ));
};var _adcc ,_efdga ,_gbbab int ;for _efdga =0;_efdga < len (*_baagd );_efdga ++{if _adcc ,_dadb =_baagd .GetInt (_efdga );_dadb !=nil {return nil ,_c .Wrap (_dadb ,_efac ,"f\u0069\u0072\u0073\u0074\u0020\u0063\u0068\u0065\u0063\u006b");};if _adcc ==1{_gbbab ++;
};};if _gbbab ==len (_bbfa .Values ){return _bbfa ,nil ;};_ecff =&Bitmaps {};_cgeb :=len (_bbfa .Values )==len (_bbfa .Boxes );for _efdga =0;_efdga < len (*_baagd );_efdga ++{if _adcc =int ((*_baagd )[_efdga ]);_adcc ==0{continue ;};_ecff .Values =append (_ecff .Values ,_bbfa .Values [_efdga ]);
if _cgeb {_ecff .Boxes =append (_ecff .Boxes ,_bbfa .Boxes [_efdga ]);};};return _ecff ,nil ;};func (_cccb *Bitmaps )WidthSorter ()func (_fgcbd ,_fda int )bool {return func (_bcdg ,_dfbe int )bool {return _cccb .Values [_bcdg ].Width < _cccb .Values [_dfbe ].Width };
};func _ccbc (_gfbb ,_gafcc *Bitmap ,_bce ,_bcfb int )(*Bitmap ,error ){const _dbef ="\u0063\u006c\u006f\u0073\u0065\u0042\u0072\u0069\u0063\u006b";if _gafcc ==nil {return nil ,_c .Error (_dbef ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _bce < 1||_bcfb < 1{return nil ,_c .Error (_dbef ,"\u0068S\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0053\u0069z\u0065\u0020\u006e\u006f\u0074\u0020\u003e\u003d\u0020\u0031");};if _bce ==1&&_bcfb ==1{return _gafcc .Copy (),nil ;};if _bce ==1||_bcfb ==1{_aabc :=SelCreateBrick (_bcfb ,_bce ,_bcfb /2,_bce /2,SelHit );
var _degb error ;_gfbb ,_degb =_bacf (_gfbb ,_gafcc ,_aabc );if _degb !=nil {return nil ,_c .Wrap (_degb ,_dbef ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};
return _gfbb ,nil ;};_efee :=SelCreateBrick (1,_bce ,0,_bce /2,SelHit );_dcff :=SelCreateBrick (_bcfb ,1,_bcfb /2,0,SelHit );_aaee ,_efgc :=_ebef (nil ,_gafcc ,_efee );if _efgc !=nil {return nil ,_c .Wrap (_efgc ,_dbef ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};if _gfbb ,_efgc =_ebef (_gfbb ,_aaee ,_dcff );_efgc !=nil {return nil ,_c .Wrap (_efgc ,_dbef ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};if _ ,_efgc =_bacb (_aaee ,_gfbb ,_efee );_efgc !=nil {return nil ,_c .Wrap (_efgc ,_dbef ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};if _ ,_efgc =_bacb (_gfbb ,_aaee ,_dcff );_efgc !=nil {return nil ,_c .Wrap (_efgc ,_dbef ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};return _gfbb ,nil ;};func TstWriteSymbols (t *_g .T ,bms *Bitmaps ,src *Bitmap ){for _agfc :=0;_agfc < bms .Size ();
_agfc ++{_fgdc :=bms .Values [_agfc ];_cedfb :=bms .Boxes [_agfc ];_bgbgd :=src .RasterOperation (_cedfb .Min .X ,_cedfb .Min .Y ,_fgdc .Width ,_fgdc .Height ,PixSrc ,_fgdc ,0,0);_dc .NoError (t ,_bgbgd );};};func (_bde *ClassedPoints )ySortFunction ()func (_edfdb int ,_dbbfb int )bool {return func (_ggbdd ,_bedge int )bool {return _bde .YAtIndex (_ggbdd )< _bde .YAtIndex (_bedge )};
};type ClassedPoints struct{*Points ;_ca .IntSlice ;_bfgf func (_dcgfa ,_adbg int )bool ;};func (_bgfb *Bitmaps )selectByIndexes (_efgfb []int )(*Bitmaps ,error ){_fgdd :=&Bitmaps {};for _ ,_fdgg :=range _efgfb {_gebgf ,_dcedf :=_bgfb .GetBitmap (_fdgg );
if _dcedf !=nil {return nil ,_c .Wrap (_dcedf ,"\u0073e\u006ce\u0063\u0074\u0042\u0079\u0049\u006e\u0064\u0065\u0078\u0065\u0073","");};_fgdd .AddBitmap (_gebgf );};return _fgdd ,nil ;};func (_caed *Bitmap )setTwoBytes (_gfff int ,_acgf uint16 )error {if _gfff +1> len (_caed .Data )-1{return _c .Errorf ("s\u0065\u0074\u0054\u0077\u006f\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_gfff );
};_caed .Data [_gfff ]=byte ((_acgf &0xff00)>>8);_caed .Data [_gfff +1]=byte (_acgf &0xff);return nil ;};type Points []Point ;func DilateBrick (d ,s *Bitmap ,hSize ,vSize int )(*Bitmap ,error ){return _fgbb (d ,s ,hSize ,vSize )};func (_acgb *byWidth )Less (i ,j int )bool {return _acgb .Values [i ].Width < _acgb .Values [j ].Width };
func _ffbgd (_dbbd ,_afaga *Bitmap ,_dceb ,_ddaa int )(_fbgf error ){const _ffafe ="\u0073e\u0065d\u0066\u0069\u006c\u006c\u0042i\u006e\u0061r\u0079\u004c\u006f\u0077\u0038";var (_fafb ,_gbbg ,_acgg ,_gcae int ;_baba ,_gecb ,_gbgf ,_gcec ,_dcadg ,_bccd ,_gfeac ,_bddcg byte ;
);for _fafb =0;_fafb < _dceb ;_fafb ++{_acgg =_fafb *_dbbd .RowStride ;_gcae =_fafb *_afaga .RowStride ;for _gbbg =0;_gbbg < _ddaa ;_gbbg ++{if _baba ,_fbgf =_dbbd .GetByte (_acgg +_gbbg );_fbgf !=nil {return _c .Wrap (_fbgf ,_ffafe ,"\u0067e\u0074 \u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");
};if _gecb ,_fbgf =_afaga .GetByte (_gcae +_gbbg );_fbgf !=nil {return _c .Wrap (_fbgf ,_ffafe ,"\u0067\u0065\u0074\u0020\u006d\u0061\u0073\u006b\u0020\u0062\u0079\u0074\u0065");};if _fafb > 0{if _gbgf ,_fbgf =_dbbd .GetByte (_acgg -_dbbd .RowStride +_gbbg );
_fbgf !=nil {return _c .Wrap (_fbgf ,_ffafe ,"\u0069\u0020\u003e\u0020\u0030\u0020\u0062\u0079\u0074\u0065");};_baba |=_gbgf |(_gbgf <<1)|(_gbgf >>1);if _gbbg > 0{if _bddcg ,_fbgf =_dbbd .GetByte (_acgg -_dbbd .RowStride +_gbbg -1);_fbgf !=nil {return _c .Wrap (_fbgf ,_ffafe ,"\u0069\u0020\u003e\u00200 \u0026\u0026\u0020\u006a\u0020\u003e\u0020\u0030\u0020\u0062\u0079\u0074\u0065");
};_baba |=_bddcg <<7;};if _gbbg < _ddaa -1{if _bddcg ,_fbgf =_dbbd .GetByte (_acgg -_dbbd .RowStride +_gbbg +1);_fbgf !=nil {return _c .Wrap (_fbgf ,_ffafe ,"\u006a\u0020<\u0020\u0077\u0070l\u0020\u002d\u0020\u0031\u0020\u0062\u0079\u0074\u0065");};_baba |=_bddcg >>7;
};};if _gbbg > 0{if _gcec ,_fbgf =_dbbd .GetByte (_acgg +_gbbg -1);_fbgf !=nil {return _c .Wrap (_fbgf ,_ffafe ,"\u006a\u0020\u003e \u0030");};_baba |=_gcec <<7;};_baba &=_gecb ;if _baba ==0||^_baba ==0{if _fbgf =_dbbd .SetByte (_acgg +_gbbg ,_baba );_fbgf !=nil {return _c .Wrap (_fbgf ,_ffafe ,"\u0073e\u0074t\u0069\u006e\u0067\u0020\u0065m\u0070\u0074y\u0020\u0062\u0079\u0074\u0065");
};};for {_gfeac =_baba ;_baba =(_baba |(_baba >>1)|(_baba <<1))&_gecb ;if (_baba ^_gfeac )==0{if _fbgf =_dbbd .SetByte (_acgg +_gbbg ,_baba );_fbgf !=nil {return _c .Wrap (_fbgf ,_ffafe ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0070\u0072\u0065\u0076 \u0062\u0079\u0074\u0065");
};break ;};};};};for _fafb =_dceb -1;_fafb >=0;_fafb --{_acgg =_fafb *_dbbd .RowStride ;_gcae =_fafb *_afaga .RowStride ;for _gbbg =_ddaa -1;_gbbg >=0;_gbbg --{if _baba ,_fbgf =_dbbd .GetByte (_acgg +_gbbg );_fbgf !=nil {return _c .Wrap (_fbgf ,_ffafe ,"\u0072\u0065\u0076er\u0073\u0065\u0020\u0067\u0065\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");
};if _gecb ,_fbgf =_afaga .GetByte (_gcae +_gbbg );_fbgf !=nil {return _c .Wrap (_fbgf ,_ffafe ,"r\u0065\u0076\u0065\u0072se\u0020g\u0065\u0074\u0020\u006d\u0061s\u006b\u0020\u0062\u0079\u0074\u0065");};if _fafb < _dceb -1{if _dcadg ,_fbgf =_dbbd .GetByte (_acgg +_dbbd .RowStride +_gbbg );
_fbgf !=nil {return _c .Wrap (_fbgf ,_ffafe ,"\u0069\u0020\u003c\u0020h\u0020\u002d\u0020\u0031\u0020\u002d\u003e\u0020\u0067\u0065t\u0020s\u006f\u0075\u0072\u0063\u0065\u0020\u0062y\u0074\u0065");};_baba |=_dcadg |(_dcadg <<1)|_dcadg >>1;if _gbbg > 0{if _bddcg ,_fbgf =_dbbd .GetByte (_acgg +_dbbd .RowStride +_gbbg -1);
_fbgf !=nil {return _c .Wrap (_fbgf ,_ffafe ,"\u0069\u0020\u003c h\u002d\u0031\u0020\u0026\u0020\u006a\u0020\u003e\u00200\u0020-\u003e \u0067e\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");};_baba |=_bddcg <<7;};if _gbbg < _ddaa -1{if _bddcg ,_fbgf =_dbbd .GetByte (_acgg +_dbbd .RowStride +_gbbg +1);
_fbgf !=nil {return _c .Wrap (_fbgf ,_ffafe ,"\u0069\u0020\u003c\u0020\u0068\u002d\u0031\u0020\u0026\u0026\u0020\u006a\u0020\u003c\u0077\u0070\u006c\u002d\u0031\u0020\u002d\u003e\u0020\u0067e\u0074\u0020\u0073\u006f\u0075r\u0063\u0065 \u0062\u0079\u0074\u0065");
};_baba |=_bddcg >>7;};};if _gbbg < _ddaa -1{if _bccd ,_fbgf =_dbbd .GetByte (_acgg +_gbbg +1);_fbgf !=nil {return _c .Wrap (_fbgf ,_ffafe ,"\u006a\u0020<\u0020\u0077\u0070\u006c\u0020\u002d\u0031\u0020\u002d\u003e\u0020\u0067\u0065\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020by\u0074\u0065");
};_baba |=_bccd >>7;};_baba &=_gecb ;if _baba ==0||(^_baba )==0{if _fbgf =_dbbd .SetByte (_acgg +_gbbg ,_baba );_fbgf !=nil {return _c .Wrap (_fbgf ,_ffafe ,"\u0073e\u0074 \u006d\u0061\u0073\u006b\u0065\u0064\u0020\u0062\u0079\u0074\u0065");};};for {_gfeac =_baba ;
_baba =(_baba |(_baba >>1)|(_baba <<1))&_gecb ;if (_baba ^_gfeac )==0{if _fbgf =_dbbd .SetByte (_acgg +_gbbg ,_baba );_fbgf !=nil {return _c .Wrap (_fbgf ,_ffafe ,"r\u0065\u0076\u0065\u0072se\u0020s\u0065\u0074\u0020\u0070\u0072e\u0076\u0020\u0062\u0079\u0074\u0065");
};break ;};};};};return nil ;};func _bfbd ()[]int {_bcabe :=make ([]int ,256);for _afbga :=0;_afbga <=0xff;_afbga ++{_dgae :=byte (_afbga );_bcabe [_dgae ]=int (_dgae &0x1)+(int (_dgae >>1)&0x1)+(int (_dgae >>2)&0x1)+(int (_dgae >>3)&0x1)+(int (_dgae >>4)&0x1)+(int (_dgae >>5)&0x1)+(int (_dgae >>6)&0x1)+(int (_dgae >>7)&0x1);
};return _bcabe ;};func (_eead *Boxes )Add (box *_fa .Rectangle )error {if _eead ==nil {return _c .Error ("\u0042o\u0078\u0065\u0073\u002e\u0041\u0064d","\u0027\u0042\u006f\u0078es\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};*_eead =append (*_eead ,box );return nil ;};func _fcdd (_fged ,_ddddg *Bitmap ,_dacaf ,_aced int )(_cgbg error ){const _aabf ="\u0073e\u0065d\u0066\u0069\u006c\u006c\u0042i\u006e\u0061r\u0079\u004c\u006f\u0077\u0034";var (_ddfbf ,_adbb ,_eebf ,_efaa int ;
_dgcd ,_dead ,_bdfe ,_dcdb ,_fcac ,_abee ,_ggfa byte ;);for _ddfbf =0;_ddfbf < _dacaf ;_ddfbf ++{_eebf =_ddfbf *_fged .RowStride ;_efaa =_ddfbf *_ddddg .RowStride ;for _adbb =0;_adbb < _aced ;_adbb ++{_dgcd ,_cgbg =_fged .GetByte (_eebf +_adbb );if _cgbg !=nil {return _c .Wrap (_cgbg ,_aabf ,"\u0066i\u0072\u0073\u0074\u0020\u0067\u0065t");
};_dead ,_cgbg =_ddddg .GetByte (_efaa +_adbb );if _cgbg !=nil {return _c .Wrap (_cgbg ,_aabf ,"\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0067\u0065\u0074");};if _ddfbf > 0{_bdfe ,_cgbg =_fged .GetByte (_eebf -_fged .RowStride +_adbb );if _cgbg !=nil {return _c .Wrap (_cgbg ,_aabf ,"\u0069\u0020\u003e \u0030");
};_dgcd |=_bdfe ;};if _adbb > 0{_dcdb ,_cgbg =_fged .GetByte (_eebf +_adbb -1);if _cgbg !=nil {return _c .Wrap (_cgbg ,_aabf ,"\u006a\u0020\u003e \u0030");};_dgcd |=_dcdb <<7;};_dgcd &=_dead ;if _dgcd ==0||(^_dgcd )==0{if _cgbg =_fged .SetByte (_eebf +_adbb ,_dgcd );
_cgbg !=nil {return _c .Wrap (_cgbg ,_aabf ,"b\u0074\u0020\u003d\u003d 0\u0020|\u007c\u0020\u0028\u005e\u0062t\u0029\u0020\u003d\u003d\u0020\u0030");};continue ;};for {_ggfa =_dgcd ;_dgcd =(_dgcd |(_dgcd >>1)|(_dgcd <<1))&_dead ;if (_dgcd ^_ggfa )==0{if _cgbg =_fged .SetByte (_eebf +_adbb ,_dgcd );
_cgbg !=nil {return _c .Wrap (_cgbg ,_aabf ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0070\u0072\u0065\u0076 \u0062\u0079\u0074\u0065");};break ;};};};};for _ddfbf =_dacaf -1;_ddfbf >=0;_ddfbf --{_eebf =_ddfbf *_fged .RowStride ;_efaa =_ddfbf *_ddddg .RowStride ;
for _adbb =_aced -1;_adbb >=0;_adbb --{if _dgcd ,_cgbg =_fged .GetByte (_eebf +_adbb );_cgbg !=nil {return _c .Wrap (_cgbg ,_aabf ,"\u0072\u0065\u0076\u0065\u0072\u0073\u0065\u0020\u0066\u0069\u0072\u0073t\u0020\u0067\u0065\u0074");};if _dead ,_cgbg =_ddddg .GetByte (_efaa +_adbb );
_cgbg !=nil {return _c .Wrap (_cgbg ,_aabf ,"r\u0065\u0076\u0065\u0072se\u0020g\u0065\u0074\u0020\u006d\u0061s\u006b\u0020\u0062\u0079\u0074\u0065");};if _ddfbf < _dacaf -1{if _fcac ,_cgbg =_fged .GetByte (_eebf +_fged .RowStride +_adbb );_cgbg !=nil {return _c .Wrap (_cgbg ,_aabf ,"\u0072\u0065v\u0065\u0072\u0073e\u0020\u0069\u0020\u003c\u0020\u0068\u0020\u002d\u0031");
};_dgcd |=_fcac ;};if _adbb < _aced -1{if _abee ,_cgbg =_fged .GetByte (_eebf +_adbb +1);_cgbg !=nil {return _c .Wrap (_cgbg ,_aabf ,"\u0072\u0065\u0076\u0065rs\u0065\u0020\u006a\u0020\u003c\u0020\u0077\u0070\u006c\u0020\u002d\u0020\u0031");};_dgcd |=_abee >>7;
};_dgcd &=_dead ;if _dgcd ==0||(^_dgcd )==0{if _cgbg =_fged .SetByte (_eebf +_adbb ,_dgcd );_cgbg !=nil {return _c .Wrap (_cgbg ,_aabf ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006d\u0061\u0073k\u0065\u0064\u0020\u0062\u0079\u0074\u0065\u0020\u0066\u0061i\u006c\u0065\u0064");
};continue ;};for {_ggfa =_dgcd ;_dgcd =(_dgcd |(_dgcd >>1)|(_dgcd <<1))&_dead ;if (_dgcd ^_ggfa )==0{if _cgbg =_fged .SetByte (_eebf +_adbb ,_dgcd );_cgbg !=nil {return _c .Wrap (_cgbg ,_aabf ,"\u0072e\u0076\u0065\u0072\u0073e\u0020\u0073\u0065\u0074\u0074i\u006eg\u0020p\u0072\u0065\u0076\u0020\u0062\u0079\u0074e");
};break ;};};};};return nil ;};func _dgcf (_bccf *Bitmap ,_cafg ,_cdeag ,_bfffe ,_fdfd int ,_gcff RasterOperator ){if _cafg < 0{_bfffe +=_cafg ;_cafg =0;};_aaeed :=_cafg +_bfffe -_bccf .Width ;if _aaeed > 0{_bfffe -=_aaeed ;};if _cdeag < 0{_fdfd +=_cdeag ;
_cdeag =0;};_fdbb :=_cdeag +_fdfd -_bccf .Height ;if _fdbb > 0{_fdfd -=_fdbb ;};if _bfffe <=0||_fdfd <=0{return ;};if (_cafg &7)==0{_cagg (_bccf ,_cafg ,_cdeag ,_bfffe ,_fdfd ,_gcff );}else {_afdc (_bccf ,_cafg ,_cdeag ,_bfffe ,_fdfd ,_gcff );};};func _eeaf (_agf ,_gca *Bitmap ,_bede ,_efdb ,_fbcf ,_ecef ,_ffdd ,_dgfa ,_gccb ,_fdeegc int ,_dec CombinationOperator )error {var _ggcg int ;
_bfec :=func (){_ggcg ++;_fbcf +=_gca .RowStride ;_ecef +=_agf .RowStride ;_ffdd +=_agf .RowStride };for _ggcg =_bede ;_ggcg < _efdb ;_bfec (){var _dagc uint16 ;_dccbb :=_fbcf ;for _bffb :=_ecef ;_bffb <=_ffdd ;_bffb ++{_bbef ,_faa :=_gca .GetByte (_dccbb );
if _faa !=nil {return _faa ;};_bfgb ,_faa :=_agf .GetByte (_bffb );if _faa !=nil {return _faa ;};_dagc =(_dagc |uint16 (_bfgb ))<<uint (_fdeegc );_bfgb =byte (_dagc >>8);if _bffb ==_ffdd {_bfgb =_dfag (uint (_dgfa ),_bfgb );};if _faa =_gca .SetByte (_dccbb ,_gfffe (_bbef ,_bfgb ,_dec ));
_faa !=nil {return _faa ;};_dccbb ++;_dagc <<=uint (_gccb );};};return nil ;};func TstWSymbol (t *_g .T ,scale ...int )*Bitmap {_ecdfa ,_cdgg :=NewWithData (5,5,[]byte {0x88,0x88,0xA8,0xD8,0x88});_dc .NoError (t ,_cdgg );return TstGetScaledSymbol (t ,_ecdfa ,scale ...);
};func (_bbabe *Bitmaps )GetBitmap (i int )(*Bitmap ,error ){const _fgga ="\u0047e\u0074\u0042\u0069\u0074\u006d\u0061p";if _bbabe ==nil {return nil ,_c .Error (_fgga ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0042\u0069\u0074ma\u0070\u0073");
};if i > len (_bbabe .Values )-1{return nil ,_c .Errorf (_fgga ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _bbabe .Values [i ],nil ;};var (_dbab *Bitmap ;
_fbca *Bitmap ;);func _acad (_deb ,_ecd int )int {if _deb > _ecd {return _deb ;};return _ecd ;};func TstWordBitmapWithSpaces (t *_g .T ,scale ...int )*Bitmap {_ddcfb :=1;if len (scale )> 0{_ddcfb =scale [0];};_agbd :=3;_cede :=9+7+15+2*_agbd +2*_agbd ;
_bdfa :=5+_agbd +5+2*_agbd ;_ccac :=New (_cede *_ddcfb ,_bdfa *_ddcfb );_gdae :=&Bitmaps {};var _ffag *int ;_agbd *=_ddcfb ;_gdda :=_agbd ;_ffag =&_gdda ;_cgc :=_agbd ;_fcded :=TstDSymbol (t ,scale ...);TstAddSymbol (t ,_gdae ,_fcded ,_ffag ,_cgc ,1*_ddcfb );
_fcded =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_gdae ,_fcded ,_ffag ,_cgc ,_agbd );_fcded =TstISymbol (t ,scale ...);TstAddSymbol (t ,_gdae ,_fcded ,_ffag ,_cgc ,1*_ddcfb );_fcded =TstTSymbol (t ,scale ...);TstAddSymbol (t ,_gdae ,_fcded ,_ffag ,_cgc ,_agbd );
_fcded =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_gdae ,_fcded ,_ffag ,_cgc ,1*_ddcfb );_fcded =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_gdae ,_fcded ,_ffag ,_cgc ,1*_ddcfb );_fcded =TstWSymbol (t ,scale ...);TstAddSymbol (t ,_gdae ,_fcded ,_ffag ,_cgc ,0);
*_ffag =_agbd ;_cgc =5*_ddcfb +_agbd ;_fcded =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_gdae ,_fcded ,_ffag ,_cgc ,1*_ddcfb );_fcded =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_gdae ,_fcded ,_ffag ,_cgc ,_agbd );_fcded =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_gdae ,_fcded ,_ffag ,_cgc ,1*_ddcfb );
_fcded =TstESymbol (t ,scale ...);TstAddSymbol (t ,_gdae ,_fcded ,_ffag ,_cgc ,1*_ddcfb );_fcded =TstVSymbol (t ,scale ...);TstAddSymbol (t ,_gdae ,_fcded ,_ffag ,_cgc ,1*_ddcfb );_fcded =TstESymbol (t ,scale ...);TstAddSymbol (t ,_gdae ,_fcded ,_ffag ,_cgc ,1*_ddcfb );
_fcded =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_gdae ,_fcded ,_ffag ,_cgc ,0);TstWriteSymbols (t ,_gdae ,_ccac );return _ccac ;};var _ggcf =[]byte {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3E,0x78,0x27,0xC2,0x27,0x91,0x00,0x22,0x48,0x21,0x03,0x24,0x91,0x00,0x22,0x48,0x21,0x02,0xA4,0x95,0x00,0x22,0x48,0x21,0x02,0x64,0x9B,0x00,0x3C,0x78,0x21,0x02,0x27,0x91,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x15,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
func (_dgde *Bitmap )nextOnPixel (_afc ,_egc int )(_ged _fa .Point ,_efcd bool ,_fec error ){const _aebf ="n\u0065\u0078\u0074\u004f\u006e\u0050\u0069\u0078\u0065\u006c";_ged ,_efcd ,_fec =_dgde .nextOnPixelLow (_dgde .Width ,_dgde .Height ,_dgde .RowStride ,_afc ,_egc );
if _fec !=nil {return _ged ,false ,_c .Wrap (_fec ,_aebf ,"");};return _ged ,_efcd ,nil ;};func Extract (roi _fa .Rectangle ,src *Bitmap )(*Bitmap ,error ){_bdb :=New (roi .Dx (),roi .Dy ());_dddb :=roi .Min .X &0x07;_fggc :=8-_dddb ;_bdbf :=uint (8-_bdb .Width &0x07);
_bgbg :=src .GetByteIndex (roi .Min .X ,roi .Min .Y );_gcb :=src .GetByteIndex (roi .Max .X -1,roi .Min .Y );_acae :=_bdb .RowStride ==_gcb +1-_bgbg ;var _dge int ;for _cee :=roi .Min .Y ;_cee < roi .Max .Y ;_cee ++{_bdbg :=_bgbg ;_feb :=_dge ;switch {case _bgbg ==_gcb :_abdd ,_aaeb :=src .GetByte (_bdbg );
if _aaeb !=nil {return nil ,_aaeb ;};_abdd <<=uint (_dddb );_aaeb =_bdb .SetByte (_feb ,_dfag (_bdbf ,_abdd ));if _aaeb !=nil {return nil ,_aaeb ;};case _dddb ==0:for _ecgg :=_bgbg ;_ecgg <=_gcb ;_ecgg ++{_gagg ,_ccbg :=src .GetByte (_bdbg );if _ccbg !=nil {return nil ,_ccbg ;
};_bdbg ++;if _ecgg ==_gcb &&_acae {_gagg =_dfag (_bdbf ,_gagg );};_ccbg =_bdb .SetByte (_feb ,_gagg );if _ccbg !=nil {return nil ,_ccbg ;};_feb ++;};default:_bae :=_cggbf (src ,_bdb ,uint (_dddb ),uint (_fggc ),_bdbf ,_bgbg ,_gcb ,_acae ,_bdbg ,_feb );
if _bae !=nil {return nil ,_bae ;};};_bgbg +=src .RowStride ;_gcb +=src .RowStride ;_dge +=_bdb .RowStride ;};return _bdb ,nil ;};func _aacd (_feac ,_gafc ,_fffa *Bitmap )(*Bitmap ,error ){const _dfca ="\u0073\u0075\u0062\u0074\u0072\u0061\u0063\u0074";
if _gafc ==nil {return nil ,_c .Error (_dfca ,"'\u0073\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _fffa ==nil {return nil ,_c .Error (_dfca ,"'\u0073\u0032\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};var _ddfgf error ;switch {case _feac ==_gafc :if _ddfgf =_feac .RasterOperation (0,0,_gafc .Width ,_gafc .Height ,PixNotSrcAndDst ,_fffa ,0,0);
_ddfgf !=nil {return nil ,_c .Wrap (_ddfgf ,_dfca ,"\u0064 \u003d\u003d\u0020\u0073\u0031");};case _feac ==_fffa :if _ddfgf =_feac .RasterOperation (0,0,_gafc .Width ,_gafc .Height ,PixNotSrcAndDst ,_gafc ,0,0);_ddfgf !=nil {return nil ,_c .Wrap (_ddfgf ,_dfca ,"\u0064 \u003d\u003d\u0020\u0073\u0032");
};default:_feac ,_ddfgf =_ace (_feac ,_gafc );if _ddfgf !=nil {return nil ,_c .Wrap (_ddfgf ,_dfca ,"");};if _ddfgf =_feac .RasterOperation (0,0,_gafc .Width ,_gafc .Height ,PixNotSrcAndDst ,_fffa ,0,0);_ddfgf !=nil {return nil ,_c .Wrap (_ddfgf ,_dfca ,"\u0064e\u0066\u0061\u0075\u006c\u0074");
};};return _feac ,nil ;};func (_ddfg *Bitmap )SetPixel (x ,y int ,pixel byte )error {_befb :=_ddfg .GetByteIndex (x ,y );if _befb > len (_ddfg .Data )-1{return _c .Errorf ("\u0053\u0065\u0074\u0050\u0069\u0078\u0065\u006c","\u0069\u006e\u0064\u0065x \u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020%\u0064",_befb );
};_fbb :=_ddfg .GetBitOffset (x );_ceb :=uint (7-_fbb );_ccc :=_ddfg .Data [_befb ];var _eggf byte ;if pixel ==1{_eggf =_ccc |(pixel &0x01<<_ceb );}else {_eggf =_ccc &^(1<<_ceb );};_ddfg .Data [_befb ]=_eggf ;return nil ;};func ClipBoxToRectangle (box *_fa .Rectangle ,wi ,hi int )(_afg *_fa .Rectangle ,_bgeg error ){const _ddga ="\u0043l\u0069p\u0042\u006f\u0078\u0054\u006fR\u0065\u0063t\u0061\u006e\u0067\u006c\u0065";
if box ==nil {return nil ,_c .Error (_ddga ,"\u0027\u0062\u006f\u0078\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");};if box .Min .X >=wi ||box .Min .Y >=hi ||box .Max .X <=0||box .Max .Y <=0{return nil ,_c .Error (_ddga ,"\u0027\u0062\u006fx'\u0020\u006f\u0075\u0074\u0073\u0069\u0064\u0065\u0020\u0072\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065");
};_eaa :=*box ;_afg =&_eaa ;if _afg .Min .X < 0{_afg .Max .X +=_afg .Min .X ;_afg .Min .X =0;};if _afg .Min .Y < 0{_afg .Max .Y +=_afg .Min .Y ;_afg .Min .Y =0;};if _afg .Max .X > wi {_afg .Max .X =wi ;};if _afg .Max .Y > hi {_afg .Max .Y =hi ;};return _afg ,nil ;
};func CorrelationScoreSimple (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab []int )(_fgcb float64 ,_eceg error ){const _ddfb ="\u0043\u006f\u0072\u0072el\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0053\u0069\u006d\u0070l\u0065";
if bm1 ==nil ||bm2 ==nil {return _fgcb ,_c .Error (_ddfb ,"n\u0069l\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u0073 \u0070\u0072\u006f\u0076id\u0065\u0064");};if tab ==nil {return _fgcb ,_c .Error (_ddfb ,"\u0074\u0061\u0062\u0020\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if area1 ==0||area2 ==0{return _fgcb ,_c .Error (_ddfb ,"\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0061\u0072e\u0061\u0073\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u003e\u0020\u0030");};_cfe ,_ded :=bm1 .Width ,bm1 .Height ;_efcde ,_gabec :=bm2 .Width ,bm2 .Height ;
if _fba (_cfe -_efcde )> maxDiffW {return 0,nil ;};if _fba (_ded -_gabec )> maxDiffH {return 0,nil ;};var _gcfe ,_ageg int ;if delX >=0{_gcfe =int (delX +0.5);}else {_gcfe =int (delX -0.5);};if delY >=0{_ageg =int (delY +0.5);}else {_ageg =int (delY -0.5);
};_dabc :=bm1 .createTemplate ();if _eceg =_dabc .RasterOperation (_gcfe ,_ageg ,_efcde ,_gabec ,PixSrc ,bm2 ,0,0);_eceg !=nil {return _fgcb ,_c .Wrap (_eceg ,_ddfb ,"\u0062m\u0032 \u0074\u006f\u0020\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065");};
if _eceg =_dabc .RasterOperation (0,0,_cfe ,_ded ,PixSrcAndDst ,bm1 ,0,0);_eceg !=nil {return _fgcb ,_c .Wrap (_eceg ,_ddfb ,"b\u006d\u0031\u0020\u0061\u006e\u0064\u0020\u0062\u006d\u0054");};_aecg :=_dabc .countPixels ();_fgcb =float64 (_aecg )*float64 (_aecg )/(float64 (area1 )*float64 (area2 ));
return _fgcb ,nil ;};func (_ceeg MorphProcess )verify (_bgca int ,_ecfca ,_fadcb *int )error {const _accc ="\u004d\u006f\u0072\u0070hP\u0072\u006f\u0063\u0065\u0073\u0073\u002e\u0076\u0065\u0072\u0069\u0066\u0079";switch _ceeg .Operation {case MopDilation ,MopErosion ,MopOpening ,MopClosing :if len (_ceeg .Arguments )!=2{return _c .Error (_accc ,"\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0064\u0027\u002c\u0020\u0027\u0065\u0027\u002c \u0027\u006f\u0027\u002c\u0020\u0027\u0063\u0027\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0032\u0020\u0061r\u0067\u0075\u006d\u0065\u006et\u0073");
};_ega ,_gdbgg :=_ceeg .getWidthHeight ();if _ega <=0||_gdbgg <=0{return _c .Error (_accc ,"O\u0070er\u0061t\u0069o\u006e\u003a\u0020\u0027\u0064'\u002c\u0020\u0027e\u0027\u002c\u0020\u0027\u006f'\u002c\u0020\u0027c\u0027\u0020\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0062\u006f\u0074h w\u0069\u0064\u0074\u0068\u0020\u0061n\u0064\u0020\u0068\u0065\u0069\u0067\u0068\u0074\u0020\u0074\u006f\u0020b\u0065 \u003e\u003d\u0020\u0030");
};case MopRankBinaryReduction :_ebbb :=len (_ceeg .Arguments );*_ecfca +=_ebbb ;if _ebbb < 1||_ebbb > 4{return _c .Error (_accc ,"\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0072\u0027\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u0031\u0020\u0061\u006e\u0064\u0020\u0061\u0074\u0020\u006d\u006fs\u0074\u0020\u0034\u0020\u0061\u0072g\u0075\u006d\u0065n\u0074\u0073");
};for _bcgc :=0;_bcgc < _ebbb ;_bcgc ++{if _ceeg .Arguments [_bcgc ]< 1||_ceeg .Arguments [_bcgc ]> 4{return _c .Error (_accc ,"\u0052\u0061\u006e\u006b\u0042\u0069n\u0061\u0072\u0079\u0052\u0065\u0064\u0075\u0063\u0074\u0069\u006f\u006e\u0020\u006c\u0065\u0076\u0065\u006c\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065 \u00280\u002c\u0020\u0034\u003e");
};};case MopReplicativeBinaryExpansion :if len (_ceeg .Arguments )==0{return _c .Error (_accc ,"\u0052\u0065\u0070\u006c\u0069\u0063\u0061\u0074i\u0076\u0065\u0042in\u0061\u0072\u0079\u0045\u0078\u0070a\u006e\u0073\u0069\u006f\u006e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020o\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_bece :=_ceeg .Arguments [0];if _bece !=2&&_bece !=4&&_bece !=8{return _c .Error (_accc ,"R\u0065\u0070\u006c\u0069\u0063\u0061\u0074\u0069\u0076\u0065\u0042\u0069\u006e\u0061\u0072\u0079\u0045\u0078\u0070\u0061\u006e\u0073\u0069\u006f\u006e\u0020m\u0075s\u0074\u0020\u0062\u0065 \u006f\u0066 \u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d");
};*_ecfca -=_ccdd [_bece /4];case MopAddBorder :if len (_ceeg .Arguments )==0{return _c .Error (_accc ,"\u0041\u0064\u0064B\u006f\u0072\u0064\u0065r\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_aedf :=_ceeg .Arguments [0];if _bgca > 0{return _c .Error (_accc ,"\u0041\u0064\u0064\u0042\u006f\u0072\u0064\u0065\u0072\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020f\u0069\u0072\u0073\u0074\u0020\u006d\u006f\u0072\u0070\u0068\u0020\u0070\u0072o\u0063\u0065\u0073\u0073");
};if _aedf < 1{return _c .Error (_accc ,"\u0041\u0064\u0064\u0042o\u0072\u0064\u0065\u0072\u0020\u0076\u0061\u006c\u0075\u0065 \u006co\u0077\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u0030");};*_fadcb =_aedf ;};return nil ;};func (_efcc *Bitmap )GetVanillaData ()[]byte {if _efcc .Color ==Chocolate {_efcc .inverseData ();
};return _efcc .Data ;};func RasterOperation (dest *Bitmap ,dx ,dy ,dw ,dh int ,op RasterOperator ,src *Bitmap ,sx ,sy int )error {return _dgec (dest ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );};func _dfbc (_eaed ,_gbdfd int ,_bdaaf string )*Selection {_caa :=&Selection {Height :_eaed ,Width :_gbdfd ,Name :_bdaaf };
_caa .Data =make ([][]SelectionValue ,_eaed );for _geabg :=0;_geabg < _eaed ;_geabg ++{_caa .Data [_geabg ]=make ([]SelectionValue ,_gbdfd );};return _caa ;};func CombineBytes (oldByte ,newByte byte ,op CombinationOperator )byte {return _gfffe (oldByte ,newByte ,op );
};func _dgec (_dccc *Bitmap ,_bddcb ,_fbec ,_dabd ,_cagb int ,_gbdf RasterOperator ,_ccge *Bitmap ,_fddbe ,_ceab int )error {const _becdd ="\u0072a\u0073t\u0065\u0072\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e";if _dccc ==nil {return _c .Error (_becdd ,"\u006e\u0069\u006c\u0020\u0027\u0064\u0065\u0073\u0074\u0027\u0020\u0042i\u0074\u006d\u0061\u0070");
};if _gbdf ==PixDst {return nil ;};switch _gbdf {case PixClr ,PixSet ,PixNotDst :_dgcf (_dccc ,_bddcb ,_fbec ,_dabd ,_cagb ,_gbdf );return nil ;};if _ccge ==nil {_gc .Log .Debug ("\u0052a\u0073\u0074e\u0072\u004f\u0070\u0065r\u0061\u0074\u0069o\u006e\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020bi\u0074\u006d\u0061p\u0020\u0069s\u0020\u006e\u006f\u0074\u0020\u0064e\u0066\u0069n\u0065\u0064");
return _c .Error (_becdd ,"\u006e\u0069l\u0020\u0027\u0073r\u0063\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _cbga :=_eeceb (_dccc ,_bddcb ,_fbec ,_dabd ,_cagb ,_gbdf ,_ccge ,_fddbe ,_ceab );_cbga !=nil {return _c .Wrap (_cbga ,_becdd ,"");
};return nil ;};func _bdc (_efcgb ,_efca *Bitmap ,_bcab ,_dega ,_eea ,_bbab ,_bcdf ,_cbeb ,_aaab ,_gfac int ,_fdcg CombinationOperator ,_ddge int )error {var _bfeg int ;_acd :=func (){_bfeg ++;_eea +=_efca .RowStride ;_bbab +=_efcgb .RowStride ;_bcdf +=_efcgb .RowStride };
for _bfeg =_bcab ;_bfeg < _dega ;_acd (){var _fbba uint16 ;_bbgb :=_eea ;for _gfaae :=_bbab ;_gfaae <=_bcdf ;_gfaae ++{_cdeb ,_dag :=_efca .GetByte (_bbgb );if _dag !=nil {return _dag ;};_cbed ,_dag :=_efcgb .GetByte (_gfaae );if _dag !=nil {return _dag ;
};_fbba =(_fbba |(uint16 (_cbed )&0xff))<<uint (_gfac );_cbed =byte (_fbba >>8);if _dag =_efca .SetByte (_bbgb ,_gfffe (_cdeb ,_cbed ,_fdcg ));_dag !=nil {return _dag ;};_bbgb ++;_fbba <<=uint (_aaab );if _gfaae ==_bcdf {_cbed =byte (_fbba >>(8-uint8 (_gfac )));
if _ddge !=0{_cbed =_dfag (uint (8+_cbeb ),_cbed );};_cdeb ,_dag =_efca .GetByte (_bbgb );if _dag !=nil {return _dag ;};if _dag =_efca .SetByte (_bbgb ,_gfffe (_cdeb ,_cbed ,_fdcg ));_dag !=nil {return _dag ;};};};};return nil ;};func _ffbd (_aeda ,_bbc *Bitmap ,_bfcga ,_dgdc ,_ceba ,_ccba ,_dbff int ,_afca CombinationOperator )error {var _aebcg int ;
_gfaa :=func (){_aebcg ++;_ceba +=_bbc .RowStride ;_ccba +=_aeda .RowStride ;_dbff +=_aeda .RowStride };for _aebcg =_bfcga ;_aebcg < _dgdc ;_gfaa (){_cfde :=_ceba ;for _agde :=_ccba ;_agde <=_dbff ;_agde ++{_fcead ,_fccg :=_bbc .GetByte (_cfde );if _fccg !=nil {return _fccg ;
};_age ,_fccg :=_aeda .GetByte (_agde );if _fccg !=nil {return _fccg ;};if _fccg =_bbc .SetByte (_cfde ,_gfffe (_fcead ,_age ,_afca ));_fccg !=nil {return _fccg ;};_cfde ++;};};return nil ;};func (_fdfe *ClassedPoints )GetIntXByClass (i int )(int ,error ){const _edbgg ="\u0043\u006c\u0061\u0073s\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047e\u0074I\u006e\u0074\u0059\u0042\u0079\u0043\u006ca\u0073\u0073";
if i >=_fdfe .IntSlice .Size (){return 0,_c .Errorf (_edbgg ,"\u0069\u003a\u0020\u0027\u0025\u0064\u0027 \u0069\u0073\u0020o\u0075\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065",i );
};return int (_fdfe .XAtIndex (i )),nil ;};const (ComponentConn Component =iota ;ComponentCharacters ;ComponentWords ;);func (_eab *Bitmap )countPixels ()int {var (_bcad int ;_bgce uint8 ;_cabd byte ;_fbc int ;);_abba :=_eab .RowStride ;_cega :=uint (_eab .Width &0x07);
if _cega !=0{_bgce =uint8 ((0xff<<(8-_cega ))&0xff);_abba --;};for _ggcd :=0;_ggcd < _eab .Height ;_ggcd ++{for _fbc =0;_fbc < _abba ;_fbc ++{_cabd =_eab .Data [_ggcd *_eab .RowStride +_fbc ];_bcad +=int (_dfa [_cabd ]);};if _cega !=0{_bcad +=int (_dfa [_eab .Data [_ggcd *_eab .RowStride +_fbc ]&_bgce ]);
};};return _bcad ;};func (_dfdb *Bitmap )GetByte (index int )(byte ,error ){if index > len (_dfdb .Data )-1||index < 0{return 0,_c .Errorf ("\u0047e\u0074\u0042\u0079\u0074\u0065","\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",index );
};return _dfdb .Data [index ],nil ;};func (_ffce *Selection )setOrigin (_afaf ,_ggdb int ){_ffce .Cy ,_ffce .Cx =_afaf ,_ggdb };func (_cbfeg CombinationOperator )String ()string {var _afdad string ;switch _cbfeg {case CmbOpOr :_afdad ="\u004f\u0052";case CmbOpAnd :_afdad ="\u0041\u004e\u0044";
case CmbOpXor :_afdad ="\u0058\u004f\u0052";case CmbOpXNor :_afdad ="\u0058\u004e\u004f\u0052";case CmbOpReplace :_afdad ="\u0052E\u0050\u004c\u0041\u0043\u0045";case CmbOpNot :_afdad ="\u004e\u004f\u0054";};return _afdad ;};type Selection struct{Height ,Width int ;
Cx ,Cy int ;Name string ;Data [][]SelectionValue ;};type shift int ;var _dfa [256]uint8 ;func SelCreateBrick (h ,w int ,cy ,cx int ,tp SelectionValue )*Selection {_gabeb :=_dfbc (h ,w ,"");_gabeb .setOrigin (cy ,cx );var _gcdg ,_ddfdb int ;for _gcdg =0;
_gcdg < h ;_gcdg ++{for _ddfdb =0;_ddfdb < w ;_ddfdb ++{_gabeb .Data [_gcdg ][_ddfdb ]=tp ;};};return _gabeb ;};func _gbf (_ebe *Bitmap ,_fac int )(*Bitmap ,error ){const _be ="\u0065x\u0070a\u006e\u0064\u0042\u0069\u006ea\u0072\u0079P\u006f\u0077\u0065\u0072\u0032";
if _ebe ==nil {return nil ,_c .Error (_be ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _fac ==1{return _ace (nil ,_ebe );};if _fac !=2&&_fac !=4&&_fac !=8{return nil ,_c .Error (_be ,"\u0066\u0061\u0063t\u006f\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0069n\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d\u0020\u0072\u0061\u006e\u0067\u0065");
};_fadf :=_fac *_ebe .Width ;_bc :=_fac *_ebe .Height ;_fdd :=New (_fadf ,_bc );var _ed error ;switch _fac {case 2:_ed =_ff (_fdd ,_ebe );case 4:_ed =_fc (_fdd ,_ebe );case 8:_ed =_ba (_fdd ,_ebe );};if _ed !=nil {return nil ,_c .Wrap (_ed ,_be ,"");};
return _fdd ,nil ;};func (_dcac *Boxes )makeSizeIndicator (_afbe ,_edb int ,_gacc LocationFilter ,_cgbee SizeComparison )*_ca .NumSlice {_efe :=&_ca .NumSlice {};var _fgb ,_ecbcb ,_cdde int ;for _ ,_dggc :=range *_dcac {_fgb =0;_ecbcb ,_cdde =_dggc .Dx (),_dggc .Dy ();
switch _gacc {case LocSelectWidth :if (_cgbee ==SizeSelectIfLT &&_ecbcb < _afbe )||(_cgbee ==SizeSelectIfGT &&_ecbcb > _afbe )||(_cgbee ==SizeSelectIfLTE &&_ecbcb <=_afbe )||(_cgbee ==SizeSelectIfGTE &&_ecbcb >=_afbe ){_fgb =1;};case LocSelectHeight :if (_cgbee ==SizeSelectIfLT &&_cdde < _edb )||(_cgbee ==SizeSelectIfGT &&_cdde > _edb )||(_cgbee ==SizeSelectIfLTE &&_cdde <=_edb )||(_cgbee ==SizeSelectIfGTE &&_cdde >=_edb ){_fgb =1;
};case LocSelectIfEither :if (_cgbee ==SizeSelectIfLT &&(_cdde < _edb ||_ecbcb < _afbe ))||(_cgbee ==SizeSelectIfGT &&(_cdde > _edb ||_ecbcb > _afbe ))||(_cgbee ==SizeSelectIfLTE &&(_cdde <=_edb ||_ecbcb <=_afbe ))||(_cgbee ==SizeSelectIfGTE &&(_cdde >=_edb ||_ecbcb >=_afbe )){_fgb =1;
};case LocSelectIfBoth :if (_cgbee ==SizeSelectIfLT &&(_cdde < _edb &&_ecbcb < _afbe ))||(_cgbee ==SizeSelectIfGT &&(_cdde > _edb &&_ecbcb > _afbe ))||(_cgbee ==SizeSelectIfLTE &&(_cdde <=_edb &&_ecbcb <=_afbe ))||(_cgbee ==SizeSelectIfGTE &&(_cdde >=_edb &&_ecbcb >=_afbe )){_fgb =1;
};};_efe .AddInt (_fgb );};return _efe ;};func TstImageBitmap ()*Bitmap {return _fbca .Copy ()};const (_ SizeComparison =iota ;SizeSelectIfLT ;SizeSelectIfGT ;SizeSelectIfLTE ;SizeSelectIfGTE ;SizeSelectIfEQ ;);func (_dbfg *BitmapsArray )GetBitmaps (i int )(*Bitmaps ,error ){const _dfbg ="\u0042\u0069\u0074ma\u0070\u0073\u0041\u0072\u0072\u0061\u0079\u002e\u0047\u0065\u0074\u0042\u0069\u0074\u006d\u0061\u0070\u0073";
if _dbfg ==nil {return nil ,_c .Error (_dfbg ,"p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074m\u0061\u0070\u0073A\u0072r\u0061\u0079\u0027");};if i > len (_dbfg .Values )-1{return nil ,_c .Errorf (_dfbg ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _dbfg .Values [i ],nil ;};func (_gfbf *Bitmap )ConnComponents (bms *Bitmaps ,connectivity int )(_dcba *Boxes ,_bdca error ){const _gega ="B\u0069\u0074\u006d\u0061p.\u0043o\u006e\u006e\u0043\u006f\u006dp\u006f\u006e\u0065\u006e\u0074\u0073";if _gfbf ==nil {return nil ,_c .Error (_gega ,"\u0070r\u006f\u0076\u0069\u0064e\u0064\u0020\u0065\u006d\u0070t\u0079 \u0027b\u0027\u0020\u0062\u0069\u0074\u006d\u0061p");
};if connectivity !=4&&connectivity !=8{return nil ,_c .Error (_gega ,"\u0063\u006f\u006ene\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u006e\u006f\u0074\u0020\u0034\u0020\u006f\u0072\u0020\u0038");};if bms ==nil {if _dcba ,_bdca =_gfbf .connComponentsBB (connectivity );
_bdca !=nil {return nil ,_c .Wrap (_bdca ,_gega ,"");};}else {if _dcba ,_bdca =_gfbf .connComponentsBitmapsBB (bms ,connectivity );_bdca !=nil {return nil ,_c .Wrap (_bdca ,_gega ,"");};};return _dcba ,nil ;};func (_aeccg *byWidth )Swap (i ,j int ){_aeccg .Values [i ],_aeccg .Values [j ]=_aeccg .Values [j ],_aeccg .Values [i ];
if _aeccg .Boxes !=nil {_aeccg .Boxes [i ],_aeccg .Boxes [j ]=_aeccg .Boxes [j ],_aeccg .Boxes [i ];};};const (MopDilation MorphOperation =iota ;MopErosion ;MopOpening ;MopClosing ;MopRankBinaryReduction ;MopReplicativeBinaryExpansion ;MopAddBorder ;);
func (_ddcfd *Bitmaps )SortByHeight (){_fccag :=(*byHeight )(_ddcfd );_e .Sort (_fccag )};type Bitmaps struct{Values []*Bitmap ;Boxes []*_fa .Rectangle ;};func TstVSymbol (t *_g .T ,scale ...int )*Bitmap {_dgcde ,_ecffe :=NewWithData (5,5,[]byte {0x88,0x88,0x88,0x50,0x20});
_dc .NoError (t ,_ecffe );return TstGetScaledSymbol (t ,_dgcde ,scale ...);};func (_gdge *Bitmap )setPadBits (_fccb int ){_gcc :=8-_gdge .Width %8;if _gcc ==8{return ;};_abd :=_gdge .Width /8;_gdgd :=_ccaa [_gcc ];if _fccb ==0{_gdgd ^=_gdgd ;};var _defg int ;
for _gccc :=0;_gccc < _gdge .Height ;_gccc ++{_defg =_gccc *_gdge .RowStride +_abd ;if _fccb ==0{_gdge .Data [_defg ]&=_gdgd ;}else {_gdge .Data [_defg ]|=_gdgd ;};};};func TstOSymbol (t *_g .T ,scale ...int )*Bitmap {_ffca ,_feecb :=NewWithData (4,5,[]byte {0xF0,0x90,0x90,0x90,0xF0});
_dc .NoError (t ,_feecb );return TstGetScaledSymbol (t ,_ffca ,scale ...);};var (_feea =[]byte {0x00,0x80,0xC0,0xE0,0xF0,0xF8,0xFC,0xFE,0xFF};_ccaa =[]byte {0x00,0x01,0x03,0x07,0x0F,0x1F,0x3F,0x7F,0xFF};);func Centroids (bms []*Bitmap )(*Points ,error ){_edfd :=make ([]Point ,len (bms ));
_eef :=_cbbda ();_acadg :=_bfbd ();var _fbeg error ;for _gfacg ,_gcaf :=range bms {_edfd [_gfacg ],_fbeg =_gcaf .centroid (_eef ,_acadg );if _fbeg !=nil {return nil ,_fbeg ;};};_ebfc :=Points (_edfd );return &_ebfc ,nil ;};func (_gfcf *Bitmap )connComponentsBB (_ecdc int )(_dbga *Boxes ,_agef error ){const _cgd ="\u0042\u0069\u0074ma\u0070\u002e\u0063\u006f\u006e\u006e\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0042\u0042";
if _ecdc !=4&&_ecdc !=8{return nil ,_c .Error (_cgd ,"\u0063\u006f\u006e\u006e\u0065\u0063t\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0027\u0034\u0027\u0020\u006fr\u0020\u0027\u0038\u0027");};if _gfcf .Zero (){return &Boxes {},nil ;
};_gfcf .setPadBits (0);_gged ,_agef :=_ace (nil ,_gfcf );if _agef !=nil {return nil ,_c .Wrap (_agef ,_cgd ,"\u0062\u006d\u0031");};_gbfe :=&_ca .Stack {};_gbfe .Aux =&_ca .Stack {};_dbga =&Boxes {};var (_ggf ,_dddc int ;_gba _fa .Point ;_ebde bool ;_befc *_fa .Rectangle ;
);for {if _gba ,_ebde ,_agef =_gged .nextOnPixel (_dddc ,_ggf );_agef !=nil {return nil ,_c .Wrap (_agef ,_cgd ,"");};if !_ebde {break ;};if _befc ,_agef =_fadcf (_gged ,_gbfe ,_gba .X ,_gba .Y ,_ecdc );_agef !=nil {return nil ,_c .Wrap (_agef ,_cgd ,"");
};if _agef =_dbga .Add (_befc );_agef !=nil {return nil ,_c .Wrap (_agef ,_cgd ,"");};_dddc =_gba .X ;_ggf =_gba .Y ;};return _dbga ,nil ;};func (_fbddf *Bitmaps )AddBox (box *_fa .Rectangle ){_fbddf .Boxes =append (_fbddf .Boxes ,box )};func (_edae *Bitmaps )Size ()int {return len (_edae .Values )};
func MakePixelCentroidTab8 ()[]int {return _cbbda ()};func _gebe (_cabea *_ca .Stack )(_feae *fillSegment ,_abgd error ){const _ccfe ="\u0070\u006f\u0070\u0046\u0069\u006c\u006c\u0053\u0065g\u006d\u0065\u006e\u0074";if _cabea ==nil {return nil ,_c .Error (_ccfe ,"\u006ei\u006c \u0073\u0074\u0061\u0063\u006b \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");
};if _cabea .Aux ==nil {return nil ,_c .Error (_ccfe ,"a\u0075x\u0053\u0074\u0061\u0063\u006b\u0020\u006e\u006ft\u0020\u0064\u0065\u0066in\u0065\u0064");};_bfda ,_adca :=_cabea .Pop ();if !_adca {return nil ,nil ;};_ebfb ,_adca :=_bfda .(*fillSegment );
if !_adca {return nil ,_c .Error (_ccfe ,"\u0073\u0074\u0061ck\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020c\u006fn\u0074a\u0069n\u0020\u002a\u0066\u0069\u006c\u006c\u0053\u0065\u0067\u006d\u0065\u006e\u0074");};_feae =&fillSegment {_ebfb ._bega ,_ebfb ._aedfa ,_ebfb ._agae +_ebfb ._bcabd ,_ebfb ._bcabd };
_cabea .Aux .Push (_ebfb );return _feae ,nil ;};func (_fee *Bitmap )CreateTemplate ()*Bitmap {return _fee .createTemplate ()};func _dbegd (_dbfb ...MorphProcess )(_efbe error ){const _gad ="v\u0065r\u0069\u0066\u0079\u004d\u006f\u0072\u0070\u0068P\u0072\u006f\u0063\u0065ss\u0065\u0073";
var _ecad ,_bgee int ;for _faac ,_fdcea :=range _dbfb {if _efbe =_fdcea .verify (_faac ,&_ecad ,&_bgee );_efbe !=nil {return _c .Wrap (_efbe ,_gad ,"");};};if _bgee !=0&&_ecad !=0{return _c .Error (_gad ,"\u004d\u006f\u0072\u0070\u0068\u0020\u0073\u0065\u0071\u0075\u0065n\u0063\u0065\u0020\u002d\u0020\u0062\u006f\u0072d\u0065r\u0020\u0061\u0064\u0064\u0065\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u0065\u0074\u0020\u0072\u0065\u0064u\u0063\u0074\u0069\u006f\u006e\u0020\u006e\u006f\u0074\u0020\u0030");
};return nil ;};func _deabca (_dddg ,_bbfd ,_ebfa byte )byte {return (_dddg &^(_ebfa ))|(_bbfd &_ebfa )};func (_dfdg *Bitmap )GetPixel (x ,y int )bool {_ccfg :=_dfdg .GetByteIndex (x ,y );_ebed :=_dfdg .GetBitOffset (x );_ddcf :=uint (7-_ebed );if _ccfg > len (_dfdg .Data )-1{_gc .Log .Debug ("\u0054\u0072\u0079\u0069\u006e\u0067\u0020\u0074\u006f\u0020\u0067\u0065\u0074\u0020\u0070\u0069\u0078\u0065\u006c\u0020o\u0075\u0074\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0064\u0061\u0074\u0061\u0020\u0072\u0061\u006e\u0067\u0065\u002e \u0078\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0079\u003a\u0027\u0025\u0064'\u002c\u0020\u0062m\u003a\u0020\u0027\u0025\u0073\u0027",x ,y ,_dfdg );
return false ;};if (_dfdg .Data [_ccfg ]>>_ddcf )&0x01>=1{return true ;};return false ;};func _fcf ()(_gabe []byte ){_gabe =make ([]byte ,256);for _aagc :=0;_aagc < 256;_aagc ++{_bda :=byte (_aagc );_gabe [_bda ]=(_bda &0x01)|((_bda &0x04)>>1)|((_bda &0x10)>>2)|((_bda &0x40)>>3)|((_bda &0x02)<<3)|((_bda &0x08)<<2)|((_bda &0x20)<<1)|(_bda &0x80);
};return _gabe ;};type BitmapsArray struct{Values []*Bitmaps ;Boxes []*_fa .Rectangle ;};func TstFrameBitmapData ()[]byte {return _dbab .Data };func TstESymbol (t *_g .T ,scale ...int )*Bitmap {_eedd ,_bfdd :=NewWithData (4,5,[]byte {0xF0,0x80,0xE0,0x80,0xF0});
_dc .NoError (t ,_bfdd );return TstGetScaledSymbol (t ,_eedd ,scale ...);};func (_bagf *Bitmaps )GroupByHeight ()(*BitmapsArray ,error ){const _dbcad ="\u0047\u0072\u006f\u0075\u0070\u0042\u0079\u0048\u0065\u0069\u0067\u0068\u0074";if len (_bagf .Values )==0{return nil ,_c .Error (_dbcad ,"\u006eo\u0020v\u0061\u006c\u0075\u0065\u0073 \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");
};_gbff :=&BitmapsArray {};_bagf .SortByHeight ();_cddf :=-1;_bcdc :=-1;for _fcecf :=0;_fcecf < len (_bagf .Values );_fcecf ++{_cdcdg :=_bagf .Values [_fcecf ].Height ;if _cdcdg > _cddf {_cddf =_cdcdg ;_bcdc ++;_gbff .Values =append (_gbff .Values ,&Bitmaps {});
};_gbff .Values [_bcdc ].AddBitmap (_bagf .Values [_fcecf ]);};return _gbff ,nil ;};func (_gcg *Bitmap )addPadBits ()(_afda error ){const _cdbg ="\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0061\u0064\u0064\u0050\u0061d\u0042\u0069\u0074\u0073";_bdaf :=_gcg .Width %8;
if _bdaf ==0{return nil ;};_ececc :=_gcg .Width /8;_bba :=_ef .NewReader (_gcg .Data );_egga :=make ([]byte ,_gcg .Height *_gcg .RowStride );_bfa :=_ef .NewWriterMSB (_egga );_ccb :=make ([]byte ,_ececc );var (_dda int ;_gbg uint64 ;);for _dda =0;_dda < _gcg .Height ;
_dda ++{if _ ,_afda =_bba .Read (_ccb );_afda !=nil {return _c .Wrap (_afda ,_cdbg ,"\u0066u\u006c\u006c\u0020\u0062\u0079\u0074e");};if _ ,_afda =_bfa .Write (_ccb );_afda !=nil {return _c .Wrap (_afda ,_cdbg ,"\u0066\u0075\u006c\u006c\u0020\u0062\u0079\u0074\u0065\u0073");
};if _gbg ,_afda =_bba .ReadBits (byte (_bdaf ));_afda !=nil {return _c .Wrap (_afda ,_cdbg ,"\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0062\u0069\u0074\u0073");};if _afda =_bfa .WriteByte (byte (_gbg )<<uint (8-_bdaf ));_afda !=nil {return _c .Wrap (_afda ,_cdbg ,"\u006ca\u0073\u0074\u0020\u0062\u0079\u0074e");
};};_gcg .Data =_bfa .Data ();return nil ;};func _afdc (_cfad *Bitmap ,_cfcgf ,_bccab int ,_fcdca ,_fagg int ,_affag RasterOperator ){var (_eggad bool ;_ceaa bool ;_babgf int ;_fffg int ;_fadegg int ;_aaff int ;_agbgd bool ;_bcfgd byte ;);_bbefba :=8-(_cfcgf &7);
_aafc :=_ccaa [_bbefba ];_cbbf :=_cfad .RowStride *_bccab +(_cfcgf >>3);if _fcdca < _bbefba {_eggad =true ;_aafc &=_feea [8-_bbefba +_fcdca ];};if !_eggad {_babgf =(_fcdca -_bbefba )>>3;if _babgf !=0{_ceaa =true ;_fffg =_cbbf +1;};};_fadegg =(_cfcgf +_fcdca )&7;
if !(_eggad ||_fadegg ==0){_agbgd =true ;_bcfgd =_feea [_fadegg ];_aaff =_cbbf +1+_babgf ;};var _efbb ,_dcce int ;switch _affag {case PixClr :for _efbb =0;_efbb < _fagg ;_efbb ++{_cfad .Data [_cbbf ]=_deabca (_cfad .Data [_cbbf ],0x0,_aafc );_cbbf +=_cfad .RowStride ;
};if _ceaa {for _efbb =0;_efbb < _fagg ;_efbb ++{for _dcce =0;_dcce < _babgf ;_dcce ++{_cfad .Data [_fffg +_dcce ]=0x0;};_fffg +=_cfad .RowStride ;};};if _agbgd {for _efbb =0;_efbb < _fagg ;_efbb ++{_cfad .Data [_aaff ]=_deabca (_cfad .Data [_aaff ],0x0,_bcfgd );
_aaff +=_cfad .RowStride ;};};case PixSet :for _efbb =0;_efbb < _fagg ;_efbb ++{_cfad .Data [_cbbf ]=_deabca (_cfad .Data [_cbbf ],0xff,_aafc );_cbbf +=_cfad .RowStride ;};if _ceaa {for _efbb =0;_efbb < _fagg ;_efbb ++{for _dcce =0;_dcce < _babgf ;_dcce ++{_cfad .Data [_fffg +_dcce ]=0xff;
};_fffg +=_cfad .RowStride ;};};if _agbgd {for _efbb =0;_efbb < _fagg ;_efbb ++{_cfad .Data [_aaff ]=_deabca (_cfad .Data [_aaff ],0xff,_bcfgd );_aaff +=_cfad .RowStride ;};};case PixNotDst :for _efbb =0;_efbb < _fagg ;_efbb ++{_cfad .Data [_cbbf ]=_deabca (_cfad .Data [_cbbf ],^_cfad .Data [_cbbf ],_aafc );
_cbbf +=_cfad .RowStride ;};if _ceaa {for _efbb =0;_efbb < _fagg ;_efbb ++{for _dcce =0;_dcce < _babgf ;_dcce ++{_cfad .Data [_fffg +_dcce ]=^(_cfad .Data [_fffg +_dcce ]);};_fffg +=_cfad .RowStride ;};};if _agbgd {for _efbb =0;_efbb < _fagg ;_efbb ++{_cfad .Data [_aaff ]=_deabca (_cfad .Data [_aaff ],^_cfad .Data [_aaff ],_bcfgd );
_aaff +=_cfad .RowStride ;};};};};func (_gfge *Bitmap )SetByte (index int ,v byte )error {if index > len (_gfge .Data )-1||index < 0{return _c .Errorf ("\u0053e\u0074\u0042\u0079\u0074\u0065","\u0069\u006e\u0064\u0065x \u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020%\u0064",index );
};_gfge .Data [index ]=v ;return nil ;};func (_fcb *ClassedPoints )XAtIndex (i int )float32 {return (*_fcb .Points )[_fcb .IntSlice [i ]].X };type byWidth Bitmaps ;var MorphBC BoundaryCondition ;func (_deg *Bitmap )resizeImageData (_efce *Bitmap )error {if _efce ==nil {return _c .Error ("\u0072e\u0073i\u007a\u0065\u0049\u006d\u0061\u0067\u0065\u0044\u0061\u0074\u0061","\u0073r\u0063 \u0069\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _deg .SizesEqual (_efce ){return nil ;};_deg .Data =make ([]byte ,len (_efce .Data ));_deg .Width =_efce .Width ;_deg .Height =_efce .Height ;_deg .RowStride =_efce .RowStride ;return nil ;};const (_ SizeSelection =iota ;SizeSelectByWidth ;SizeSelectByHeight ;
SizeSelectByMaxDimension ;SizeSelectByArea ;SizeSelectByPerimeter ;);func _ffd ()(_aga [256]uint64 ){for _cdb :=0;_cdb < 256;_cdb ++{if _cdb &0x01!=0{_aga [_cdb ]|=0xff;};if _cdb &0x02!=0{_aga [_cdb ]|=0xff00;};if _cdb &0x04!=0{_aga [_cdb ]|=0xff0000;};
if _cdb &0x08!=0{_aga [_cdb ]|=0xff000000;};if _cdb &0x10!=0{_aga [_cdb ]|=0xff00000000;};if _cdb &0x20!=0{_aga [_cdb ]|=0xff0000000000;};if _cdb &0x40!=0{_aga [_cdb ]|=0xff000000000000;};if _cdb &0x80!=0{_aga [_cdb ]|=0xff00000000000000;};};return _aga ;
};func _bacf (_adb ,_abag *Bitmap ,_geea *Selection )(*Bitmap ,error ){const _fagc ="c\u006c\u006f\u0073\u0065\u0042\u0069\u0074\u006d\u0061\u0070";var _becec error ;if _adb ,_becec =_eeff (_adb ,_abag ,_geea );_becec !=nil {return nil ,_becec ;};_facb ,_becec :=_ebef (nil ,_abag ,_geea );
if _becec !=nil {return nil ,_c .Wrap (_becec ,_fagc ,"");};if _ ,_becec =_bacb (_adb ,_facb ,_geea );_becec !=nil {return nil ,_c .Wrap (_becec ,_fagc ,"");};return _adb ,nil ;};func _fcfa (_ccdg *Bitmap )(_gfaac *Bitmap ,_dddd int ,_cgdd error ){const _cbdf ="\u0042i\u0074\u006d\u0061\u0070.\u0077\u006f\u0072\u0064\u004da\u0073k\u0042y\u0044\u0069\u006c\u0061\u0074\u0069\u006fn";
if _ccdg ==nil {return nil ,0,_c .Errorf (_cbdf ,"\u0027\u0073\u0027\u0020bi\u0074\u006d\u0061\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");};var _bgcd ,_bedg *Bitmap ;if _bgcd ,_cgdd =_ace (nil ,_ccdg );_cgdd !=nil {return nil ,0,_c .Wrap (_cgdd ,_cbdf ,"\u0063\u006f\u0070\u0079\u0020\u0027\u0073\u0027");
};var (_fdf [13]int ;_gefc ,_eebg int ;);_ggbd :=12;_bcfe :=_ca .NewNumSlice (_ggbd +1);_cfaf :=_ca .NewNumSlice (_ggbd +1);var _ffaa *Boxes ;for _dgea :=0;_dgea <=_ggbd ;_dgea ++{if _dgea ==0{if _bedg ,_cgdd =_ace (nil ,_bgcd );_cgdd !=nil {return nil ,0,_c .Wrap (_cgdd ,_cbdf ,"\u0066i\u0072\u0073\u0074\u0020\u0062\u006d2");
};}else {if _bedg ,_cgdd =_gccca (_bgcd ,MorphProcess {Operation :MopDilation ,Arguments :[]int {2,1}});_cgdd !=nil {return nil ,0,_c .Wrap (_cgdd ,_cbdf ,"\u0064\u0069\u006ca\u0074\u0069\u006f\u006e\u0020\u0062\u006d\u0032");};};if _ffaa ,_cgdd =_bedg .connComponentsBB (4);
_cgdd !=nil {return nil ,0,_c .Wrap (_cgdd ,_cbdf ,"");};_fdf [_dgea ]=len (*_ffaa );_bcfe .AddInt (_fdf [_dgea ]);switch _dgea {case 0:_gefc =_fdf [0];default:_eebg =_fdf [_dgea -1]-_fdf [_dgea ];_cfaf .AddInt (_eebg );};_bgcd =_bedg ;};_eabc :=true ;
_adab :=2;var _cadf ,_cgee int ;for _afag :=1;_afag < len (*_cfaf );_afag ++{if _cadf ,_cgdd =_bcfe .GetInt (_afag );_cgdd !=nil {return nil ,0,_c .Wrap (_cgdd ,_cbdf ,"\u0043\u0068\u0065\u0063ki\u006e\u0067\u0020\u0062\u0065\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0069o\u006e");
};if _eabc &&_cadf < int (0.3*float32 (_gefc )){_adab =_afag +1;_eabc =false ;};if _eebg ,_cgdd =_cfaf .GetInt (_afag );_cgdd !=nil {return nil ,0,_c .Wrap (_cgdd ,_cbdf ,"\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006ea\u0044\u0069\u0066\u0066");
};if _eebg > _cgee {_cgee =_eebg ;};};_gabc :=_ccdg .XResolution ;if _gabc ==0{_gabc =150;};if _gabc > 110{_adab ++;};if _adab < 2{_gc .Log .Trace ("J\u0042\u0049\u0047\u0032\u0020\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0069\u0042\u0065\u0073\u0074 \u0074\u006f\u0020\u006d\u0069\u006e\u0069\u006d\u0075\u006d a\u006c\u006c\u006fw\u0061b\u006c\u0065");
_adab =2;};_dddd =_adab +1;if _gfaac ,_cgdd =_ccbc (nil ,_ccdg ,_adab +1,1);_cgdd !=nil {return nil ,0,_c .Wrap (_cgdd ,_cbdf ,"\u0067\u0065\u0074\u0074in\u0067\u0020\u006d\u0061\u0073\u006b\u0020\u0066\u0061\u0069\u006c\u0065\u0064");};return _gfaac ,_dddd ,nil ;
};func (_cgbe *Bitmap )clipRectangle (_dff ,_gbbad *_fa .Rectangle )(_abeg *Bitmap ,_abg error ){const _bac ="\u0063\u006c\u0069\u0070\u0052\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065";if _dff ==nil {return nil ,_c .Error (_bac ,"\u0070r\u006fv\u0069\u0064\u0065\u0064\u0020n\u0069\u006c \u0027\u0062\u006f\u0078\u0027");
};_cce ,_gacd :=_cgbe .Width ,_cgbe .Height ;_dcf ,_abg :=ClipBoxToRectangle (_dff ,_cce ,_gacd );if _abg !=nil {_gc .Log .Warning ("\u0027\u0062ox\u0027\u0020\u0064o\u0065\u0073\u006e\u0027t o\u0076er\u006c\u0061\u0070\u0020\u0062\u0069\u0074ma\u0070\u0020\u0027\u0062\u0027\u003a\u0020%\u0076",_abg );
return nil ,nil ;};_facg ,_edef :=_dcf .Min .X ,_dcf .Min .Y ;_bbf ,_fbga :=_dcf .Max .X -_dcf .Min .X ,_dcf .Max .Y -_dcf .Min .Y ;_abeg =New (_bbf ,_fbga );_abeg .Text =_cgbe .Text ;if _abg =_abeg .RasterOperation (0,0,_bbf ,_fbga ,PixSrc ,_cgbe ,_facg ,_edef );
_abg !=nil {return nil ,_c .Wrap (_abg ,_bac ,"");};if _gbbad !=nil {*_gbbad =*_dcf ;};return _abeg ,nil ;};func (_cbgg *Bitmap )setEightBytes (_fag int ,_agc uint64 )error {_cagf :=_cbgg .RowStride -(_fag %_cbgg .RowStride );if _cbgg .RowStride !=_cbgg .Width >>3{_cagf --;
};if _cagf >=8{return _cbgg .setEightFullBytes (_fag ,_agc );};return _cbgg .setEightPartlyBytes (_fag ,_cagf ,_agc );};func (_bcfee *Bitmaps )CountPixels ()*_ca .NumSlice {_gfbd :=&_ca .NumSlice {};for _ ,_dgaa :=range _bcfee .Values {_gfbd .AddInt (_dgaa .CountPixels ());
};return _gfbd ;};func _eeceb (_cecc *Bitmap ,_bbda ,_cabe int ,_bdgb ,_ebdf int ,_baee RasterOperator ,_agac *Bitmap ,_cfcc ,_fgac int )error {var _cgbed ,_ccfca ,_fagf ,_gedd int ;if _bbda < 0{_cfcc -=_bbda ;_bdgb +=_bbda ;_bbda =0;};if _cfcc < 0{_bbda -=_cfcc ;
_bdgb +=_cfcc ;_cfcc =0;};_cgbed =_bbda +_bdgb -_cecc .Width ;if _cgbed > 0{_bdgb -=_cgbed ;};_ccfca =_cfcc +_bdgb -_agac .Width ;if _ccfca > 0{_bdgb -=_ccfca ;};if _cabe < 0{_fgac -=_cabe ;_ebdf +=_cabe ;_cabe =0;};if _fgac < 0{_cabe -=_fgac ;_ebdf +=_fgac ;
_fgac =0;};_fagf =_cabe +_ebdf -_cecc .Height ;if _fagf > 0{_ebdf -=_fagf ;};_gedd =_fgac +_ebdf -_agac .Height ;if _gedd > 0{_ebdf -=_gedd ;};if _bdgb <=0||_ebdf <=0{return nil ;};var _babea error ;switch {case _bbda &7==0&&_cfcc &7==0:_babea =_abab (_cecc ,_bbda ,_cabe ,_bdgb ,_ebdf ,_baee ,_agac ,_cfcc ,_fgac );
case _bbda &7==_cfcc &7:_babea =_beeg (_cecc ,_bbda ,_cabe ,_bdgb ,_ebdf ,_baee ,_agac ,_cfcc ,_fgac );default:_babea =_gfd (_cecc ,_bbda ,_cabe ,_bdgb ,_ebdf ,_baee ,_agac ,_cfcc ,_fgac );};if _babea !=nil {return _c .Wrap (_babea ,"r\u0061\u0073\u0074\u0065\u0072\u004f\u0070\u004c\u006f\u0077","");
};return nil ;};func (_cdeg *Bitmap )GetBitOffset (x int )int {return x &0x07};func _beeg (_dcgfb *Bitmap ,_bgaae ,_eba ,_ggec ,_daaa int ,_agefc RasterOperator ,_edbc *Bitmap ,_bdga ,_cbbge int )error {var (_aefb bool ;_fafga bool ;_cdcf int ;_eeag int ;
_adaf int ;_cdfb bool ;_dgce byte ;_faec int ;_aaag int ;_badec int ;_cgag ,_cbae int ;);_gacb :=8-(_bgaae &7);_dgbe :=_ccaa [_gacb ];_ddcbb :=_dcgfb .RowStride *_eba +(_bgaae >>3);_begec :=_edbc .RowStride *_cbbge +(_bdga >>3);if _ggec < _gacb {_aefb =true ;
_dgbe &=_feea [8-_gacb +_ggec ];};if !_aefb {_cdcf =(_ggec -_gacb )>>3;if _cdcf > 0{_fafga =true ;_eeag =_ddcbb +1;_adaf =_begec +1;};};_faec =(_bgaae +_ggec )&7;if !(_aefb ||_faec ==0){_cdfb =true ;_dgce =_feea [_faec ];_aaag =_ddcbb +1+_cdcf ;_badec =_begec +1+_cdcf ;
};switch _agefc {case PixSrc :for _cgag =0;_cgag < _daaa ;_cgag ++{_dcgfb .Data [_ddcbb ]=_deabca (_dcgfb .Data [_ddcbb ],_edbc .Data [_begec ],_dgbe );_ddcbb +=_dcgfb .RowStride ;_begec +=_edbc .RowStride ;};if _fafga {for _cgag =0;_cgag < _daaa ;_cgag ++{for _cbae =0;
_cbae < _cdcf ;_cbae ++{_dcgfb .Data [_eeag +_cbae ]=_edbc .Data [_adaf +_cbae ];};_eeag +=_dcgfb .RowStride ;_adaf +=_edbc .RowStride ;};};if _cdfb {for _cgag =0;_cgag < _daaa ;_cgag ++{_dcgfb .Data [_aaag ]=_deabca (_dcgfb .Data [_aaag ],_edbc .Data [_badec ],_dgce );
_aaag +=_dcgfb .RowStride ;_badec +=_edbc .RowStride ;};};case PixNotSrc :for _cgag =0;_cgag < _daaa ;_cgag ++{_dcgfb .Data [_ddcbb ]=_deabca (_dcgfb .Data [_ddcbb ],^_edbc .Data [_begec ],_dgbe );_ddcbb +=_dcgfb .RowStride ;_begec +=_edbc .RowStride ;
};if _fafga {for _cgag =0;_cgag < _daaa ;_cgag ++{for _cbae =0;_cbae < _cdcf ;_cbae ++{_dcgfb .Data [_eeag +_cbae ]=^_edbc .Data [_adaf +_cbae ];};_eeag +=_dcgfb .RowStride ;_adaf +=_edbc .RowStride ;};};if _cdfb {for _cgag =0;_cgag < _daaa ;_cgag ++{_dcgfb .Data [_aaag ]=_deabca (_dcgfb .Data [_aaag ],^_edbc .Data [_badec ],_dgce );
_aaag +=_dcgfb .RowStride ;_badec +=_edbc .RowStride ;};};case PixSrcOrDst :for _cgag =0;_cgag < _daaa ;_cgag ++{_dcgfb .Data [_ddcbb ]=_deabca (_dcgfb .Data [_ddcbb ],_edbc .Data [_begec ]|_dcgfb .Data [_ddcbb ],_dgbe );_ddcbb +=_dcgfb .RowStride ;_begec +=_edbc .RowStride ;
};if _fafga {for _cgag =0;_cgag < _daaa ;_cgag ++{for _cbae =0;_cbae < _cdcf ;_cbae ++{_dcgfb .Data [_eeag +_cbae ]|=_edbc .Data [_adaf +_cbae ];};_eeag +=_dcgfb .RowStride ;_adaf +=_edbc .RowStride ;};};if _cdfb {for _cgag =0;_cgag < _daaa ;_cgag ++{_dcgfb .Data [_aaag ]=_deabca (_dcgfb .Data [_aaag ],_edbc .Data [_badec ]|_dcgfb .Data [_aaag ],_dgce );
_aaag +=_dcgfb .RowStride ;_badec +=_edbc .RowStride ;};};case PixSrcAndDst :for _cgag =0;_cgag < _daaa ;_cgag ++{_dcgfb .Data [_ddcbb ]=_deabca (_dcgfb .Data [_ddcbb ],_edbc .Data [_begec ]&_dcgfb .Data [_ddcbb ],_dgbe );_ddcbb +=_dcgfb .RowStride ;_begec +=_edbc .RowStride ;
};if _fafga {for _cgag =0;_cgag < _daaa ;_cgag ++{for _cbae =0;_cbae < _cdcf ;_cbae ++{_dcgfb .Data [_eeag +_cbae ]&=_edbc .Data [_adaf +_cbae ];};_eeag +=_dcgfb .RowStride ;_adaf +=_edbc .RowStride ;};};if _cdfb {for _cgag =0;_cgag < _daaa ;_cgag ++{_dcgfb .Data [_aaag ]=_deabca (_dcgfb .Data [_aaag ],_edbc .Data [_badec ]&_dcgfb .Data [_aaag ],_dgce );
_aaag +=_dcgfb .RowStride ;_badec +=_edbc .RowStride ;};};case PixSrcXorDst :for _cgag =0;_cgag < _daaa ;_cgag ++{_dcgfb .Data [_ddcbb ]=_deabca (_dcgfb .Data [_ddcbb ],_edbc .Data [_begec ]^_dcgfb .Data [_ddcbb ],_dgbe );_ddcbb +=_dcgfb .RowStride ;_begec +=_edbc .RowStride ;
};if _fafga {for _cgag =0;_cgag < _daaa ;_cgag ++{for _cbae =0;_cbae < _cdcf ;_cbae ++{_dcgfb .Data [_eeag +_cbae ]^=_edbc .Data [_adaf +_cbae ];};_eeag +=_dcgfb .RowStride ;_adaf +=_edbc .RowStride ;};};if _cdfb {for _cgag =0;_cgag < _daaa ;_cgag ++{_dcgfb .Data [_aaag ]=_deabca (_dcgfb .Data [_aaag ],_edbc .Data [_badec ]^_dcgfb .Data [_aaag ],_dgce );
_aaag +=_dcgfb .RowStride ;_badec +=_edbc .RowStride ;};};case PixNotSrcOrDst :for _cgag =0;_cgag < _daaa ;_cgag ++{_dcgfb .Data [_ddcbb ]=_deabca (_dcgfb .Data [_ddcbb ],^(_edbc .Data [_begec ])|_dcgfb .Data [_ddcbb ],_dgbe );_ddcbb +=_dcgfb .RowStride ;
_begec +=_edbc .RowStride ;};if _fafga {for _cgag =0;_cgag < _daaa ;_cgag ++{for _cbae =0;_cbae < _cdcf ;_cbae ++{_dcgfb .Data [_eeag +_cbae ]|=^(_edbc .Data [_adaf +_cbae ]);};_eeag +=_dcgfb .RowStride ;_adaf +=_edbc .RowStride ;};};if _cdfb {for _cgag =0;
_cgag < _daaa ;_cgag ++{_dcgfb .Data [_aaag ]=_deabca (_dcgfb .Data [_aaag ],^(_edbc .Data [_badec ])|_dcgfb .Data [_aaag ],_dgce );_aaag +=_dcgfb .RowStride ;_badec +=_edbc .RowStride ;};};case PixNotSrcAndDst :for _cgag =0;_cgag < _daaa ;_cgag ++{_dcgfb .Data [_ddcbb ]=_deabca (_dcgfb .Data [_ddcbb ],^(_edbc .Data [_begec ])&_dcgfb .Data [_ddcbb ],_dgbe );
_ddcbb +=_dcgfb .RowStride ;_begec +=_edbc .RowStride ;};if _fafga {for _cgag =0;_cgag < _daaa ;_cgag ++{for _cbae =0;_cbae < _cdcf ;_cbae ++{_dcgfb .Data [_eeag +_cbae ]&=^_edbc .Data [_adaf +_cbae ];};_eeag +=_dcgfb .RowStride ;_adaf +=_edbc .RowStride ;
};};if _cdfb {for _cgag =0;_cgag < _daaa ;_cgag ++{_dcgfb .Data [_aaag ]=_deabca (_dcgfb .Data [_aaag ],^(_edbc .Data [_badec ])&_dcgfb .Data [_aaag ],_dgce );_aaag +=_dcgfb .RowStride ;_badec +=_edbc .RowStride ;};};case PixSrcOrNotDst :for _cgag =0;_cgag < _daaa ;
_cgag ++{_dcgfb .Data [_ddcbb ]=_deabca (_dcgfb .Data [_ddcbb ],_edbc .Data [_begec ]|^(_dcgfb .Data [_ddcbb ]),_dgbe );_ddcbb +=_dcgfb .RowStride ;_begec +=_edbc .RowStride ;};if _fafga {for _cgag =0;_cgag < _daaa ;_cgag ++{for _cbae =0;_cbae < _cdcf ;
_cbae ++{_dcgfb .Data [_eeag +_cbae ]=_edbc .Data [_adaf +_cbae ]|^(_dcgfb .Data [_eeag +_cbae ]);};_eeag +=_dcgfb .RowStride ;_adaf +=_edbc .RowStride ;};};if _cdfb {for _cgag =0;_cgag < _daaa ;_cgag ++{_dcgfb .Data [_aaag ]=_deabca (_dcgfb .Data [_aaag ],_edbc .Data [_badec ]|^(_dcgfb .Data [_aaag ]),_dgce );
_aaag +=_dcgfb .RowStride ;_badec +=_edbc .RowStride ;};};case PixSrcAndNotDst :for _cgag =0;_cgag < _daaa ;_cgag ++{_dcgfb .Data [_ddcbb ]=_deabca (_dcgfb .Data [_ddcbb ],_edbc .Data [_begec ]&^(_dcgfb .Data [_ddcbb ]),_dgbe );_ddcbb +=_dcgfb .RowStride ;
_begec +=_edbc .RowStride ;};if _fafga {for _cgag =0;_cgag < _daaa ;_cgag ++{for _cbae =0;_cbae < _cdcf ;_cbae ++{_dcgfb .Data [_eeag +_cbae ]=_edbc .Data [_adaf +_cbae ]&^(_dcgfb .Data [_eeag +_cbae ]);};_eeag +=_dcgfb .RowStride ;_adaf +=_edbc .RowStride ;
};};if _cdfb {for _cgag =0;_cgag < _daaa ;_cgag ++{_dcgfb .Data [_aaag ]=_deabca (_dcgfb .Data [_aaag ],_edbc .Data [_badec ]&^(_dcgfb .Data [_aaag ]),_dgce );_aaag +=_dcgfb .RowStride ;_badec +=_edbc .RowStride ;};};case PixNotPixSrcOrDst :for _cgag =0;
_cgag < _daaa ;_cgag ++{_dcgfb .Data [_ddcbb ]=_deabca (_dcgfb .Data [_ddcbb ],^(_edbc .Data [_begec ]|_dcgfb .Data [_ddcbb ]),_dgbe );_ddcbb +=_dcgfb .RowStride ;_begec +=_edbc .RowStride ;};if _fafga {for _cgag =0;_cgag < _daaa ;_cgag ++{for _cbae =0;
_cbae < _cdcf ;_cbae ++{_dcgfb .Data [_eeag +_cbae ]=^(_edbc .Data [_adaf +_cbae ]|_dcgfb .Data [_eeag +_cbae ]);};_eeag +=_dcgfb .RowStride ;_adaf +=_edbc .RowStride ;};};if _cdfb {for _cgag =0;_cgag < _daaa ;_cgag ++{_dcgfb .Data [_aaag ]=_deabca (_dcgfb .Data [_aaag ],^(_edbc .Data [_badec ]|_dcgfb .Data [_aaag ]),_dgce );
_aaag +=_dcgfb .RowStride ;_badec +=_edbc .RowStride ;};};case PixNotPixSrcAndDst :for _cgag =0;_cgag < _daaa ;_cgag ++{_dcgfb .Data [_ddcbb ]=_deabca (_dcgfb .Data [_ddcbb ],^(_edbc .Data [_begec ]&_dcgfb .Data [_ddcbb ]),_dgbe );_ddcbb +=_dcgfb .RowStride ;
_begec +=_edbc .RowStride ;};if _fafga {for _cgag =0;_cgag < _daaa ;_cgag ++{for _cbae =0;_cbae < _cdcf ;_cbae ++{_dcgfb .Data [_eeag +_cbae ]=^(_edbc .Data [_adaf +_cbae ]&_dcgfb .Data [_eeag +_cbae ]);};_eeag +=_dcgfb .RowStride ;_adaf +=_edbc .RowStride ;
};};if _cdfb {for _cgag =0;_cgag < _daaa ;_cgag ++{_dcgfb .Data [_aaag ]=_deabca (_dcgfb .Data [_aaag ],^(_edbc .Data [_badec ]&_dcgfb .Data [_aaag ]),_dgce );_aaag +=_dcgfb .RowStride ;_badec +=_edbc .RowStride ;};};case PixNotPixSrcXorDst :for _cgag =0;
_cgag < _daaa ;_cgag ++{_dcgfb .Data [_ddcbb ]=_deabca (_dcgfb .Data [_ddcbb ],^(_edbc .Data [_begec ]^_dcgfb .Data [_ddcbb ]),_dgbe );_ddcbb +=_dcgfb .RowStride ;_begec +=_edbc .RowStride ;};if _fafga {for _cgag =0;_cgag < _daaa ;_cgag ++{for _cbae =0;
_cbae < _cdcf ;_cbae ++{_dcgfb .Data [_eeag +_cbae ]=^(_edbc .Data [_adaf +_cbae ]^_dcgfb .Data [_eeag +_cbae ]);};_eeag +=_dcgfb .RowStride ;_adaf +=_edbc .RowStride ;};};if _cdfb {for _cgag =0;_cgag < _daaa ;_cgag ++{_dcgfb .Data [_aaag ]=_deabca (_dcgfb .Data [_aaag ],^(_edbc .Data [_badec ]^_dcgfb .Data [_aaag ]),_dgce );
_aaag +=_dcgfb .RowStride ;_badec +=_edbc .RowStride ;};};default:_gc .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070e\u0072\u0061\u0074o\u0072:\u0020\u0025\u0064",_agefc );return _c .Error ("\u0072\u0061\u0073\u0074er\u004f\u0070\u0056\u0041\u006c\u0069\u0067\u006e\u0065\u0064\u004c\u006f\u0077","\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");
};return nil ;};func _cdbc (_caga ,_dgf *Bitmap ,_fea int ,_fff []byte ,_aggf int )(_dccb error ){const _fddb ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0032";var (_agge ,_gfb ,_bfc ,_gfc ,_bgb ,_bee ,_aac ,_ad int ;
_ffgb ,_eeg ,_bbe ,_ebfg uint32 ;_def ,_ecbe byte ;_bdg uint16 ;);_gef :=make ([]byte ,4);_dcca :=make ([]byte ,4);for _bfc =0;_bfc < _caga .Height -1;_bfc ,_gfc =_bfc +2,_gfc +1{_agge =_bfc *_caga .RowStride ;_gfb =_gfc *_dgf .RowStride ;for _bgb ,_bee =0,0;
_bgb < _aggf ;_bgb ,_bee =_bgb +4,_bee +1{for _aac =0;_aac < 4;_aac ++{_ad =_agge +_bgb +_aac ;if _ad <=len (_caga .Data )-1&&_ad < _agge +_caga .RowStride {_gef [_aac ]=_caga .Data [_ad ];}else {_gef [_aac ]=0x00;};_ad =_agge +_caga .RowStride +_bgb +_aac ;
if _ad <=len (_caga .Data )-1&&_ad < _agge +(2*_caga .RowStride ){_dcca [_aac ]=_caga .Data [_ad ];}else {_dcca [_aac ]=0x00;};};_ffgb =_a .BigEndian .Uint32 (_gef );_eeg =_a .BigEndian .Uint32 (_dcca );_bbe =_ffgb &_eeg ;_bbe |=_bbe <<1;_ebfg =_ffgb |_eeg ;
_ebfg &=_ebfg <<1;_eeg =_bbe |_ebfg ;_eeg &=0xaaaaaaaa;_ffgb =_eeg |(_eeg <<7);_def =byte (_ffgb >>24);_ecbe =byte ((_ffgb >>8)&0xff);_ad =_gfb +_bee ;if _ad +1==len (_dgf .Data )-1||_ad +1>=_gfb +_dgf .RowStride {if _dccb =_dgf .SetByte (_ad ,_fff [_def ]);
_dccb !=nil {return _c .Wrapf (_dccb ,_fddb ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_ad );};}else {_bdg =(uint16 (_fff [_def ])<<8)|uint16 (_fff [_ecbe ]);if _dccb =_dgf .setTwoBytes (_ad ,_bdg );_dccb !=nil {return _c .Wrapf (_dccb ,_fddb ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_ad );
};_bee ++;};};};return nil ;};func (_fcea *Bitmap )setAll ()error {_gbbb :=_dgec (_fcea ,0,0,_fcea .Width ,_fcea .Height ,PixSet ,nil ,0,0);if _gbbb !=nil {return _c .Wrap (_gbbb ,"\u0073\u0065\u0074\u0041\u006c\u006c","");};return nil ;};func (_cac *Bitmap )RemoveBorder (borderSize int )(*Bitmap ,error ){if borderSize ==0{return _cac .Copy (),nil ;
};_ecec ,_dgcg :=_cac .removeBorderGeneral (borderSize ,borderSize ,borderSize ,borderSize );if _dgcg !=nil {return nil ,_c .Wrap (_dgcg ,"\u0052\u0065\u006do\u0076\u0065\u0042\u006f\u0072\u0064\u0065\u0072","");};return _ecec ,nil ;};func init (){const _bfeeb ="\u0062\u0069\u0074\u006dap\u0073\u002e\u0069\u006e\u0069\u0074\u0069\u0061\u006c\u0069\u007a\u0061\u0074\u0069o\u006e";
_dbab =New (50,40);var _cebeb error ;_dbab ,_cebeb =_dbab .AddBorder (2,1);if _cebeb !=nil {panic (_c .Wrap (_cebeb ,_bfeeb ,"f\u0072\u0061\u006d\u0065\u0042\u0069\u0074\u006d\u0061\u0070"));};_fbca ,_cebeb =NewWithData (50,22,_ggcf );if _cebeb !=nil {panic (_c .Wrap (_cebeb ,_bfeeb ,"i\u006d\u0061\u0067\u0065\u0042\u0069\u0074\u006d\u0061\u0070"));
};};func _df ()(_geb [256]uint32 ){for _eff :=0;_eff < 256;_eff ++{if _eff &0x01!=0{_geb [_eff ]|=0xf;};if _eff &0x02!=0{_geb [_eff ]|=0xf0;};if _eff &0x04!=0{_geb [_eff ]|=0xf00;};if _eff &0x08!=0{_geb [_eff ]|=0xf000;};if _eff &0x10!=0{_geb [_eff ]|=0xf0000;
};if _eff &0x20!=0{_geb [_eff ]|=0xf00000;};if _eff &0x40!=0{_geb [_eff ]|=0xf000000;};if _eff &0x80!=0{_geb [_eff ]|=0xf0000000;};};return _geb ;};func _ff (_ab ,_ga *Bitmap )(_ae error ){const _aa ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0032";
_ee :=_ga .RowStride ;_ea :=_ab .RowStride ;var (_caf byte ;_ac uint16 ;_dca ,_af ,_gd ,_fb ,_cb int ;);for _gd =0;_gd < _ga .Height ;_gd ++{_dca =_gd *_ee ;_af =2*_gd *_ea ;for _fb =0;_fb < _ee ;_fb ++{_caf =_ga .Data [_dca +_fb ];_ac =_deabc [_caf ];
_cb =_af +_fb *2;if _ab .RowStride !=_ga .RowStride *2&&(_fb +1)*2> _ab .RowStride {_ae =_ab .SetByte (_cb ,byte (_ac >>8));}else {_ae =_ab .setTwoBytes (_cb ,_ac );};if _ae !=nil {return _c .Wrap (_ae ,_aa ,"");};};for _fb =0;_fb < _ea ;_fb ++{_cb =_af +_ea +_fb ;
_caf =_ab .Data [_af +_fb ];if _ae =_ab .SetByte (_cb ,_caf );_ae !=nil {return _c .Wrapf (_ae ,_aa ,"c\u006f\u0070\u0079\u0020\u0064\u006fu\u0062\u006c\u0065\u0064\u0020\u006ci\u006e\u0065\u003a\u0020\u0027\u0025\u0064'\u002c\u0020\u0042\u0079\u0074\u0065\u003a\u0020\u0027\u0025d\u0027",_af +_fb ,_af +_ea +_fb );
};};};return nil ;};func (_gffg *Bitmaps )String ()string {_bbbg :=_cd .Builder {};for _ ,_ceag :=range _gffg .Values {_bbbg .WriteString (_ceag .String ());_bbbg .WriteRune ('\n');};return _bbbg .String ();};func _cbbda ()[]int {_dfge :=make ([]int ,256);
_dfge [0]=0;_dfge [1]=7;var _bcgcb int ;for _bcgcb =2;_bcgcb < 4;_bcgcb ++{_dfge [_bcgcb ]=_dfge [_bcgcb -2]+6;};for _bcgcb =4;_bcgcb < 8;_bcgcb ++{_dfge [_bcgcb ]=_dfge [_bcgcb -4]+5;};for _bcgcb =8;_bcgcb < 16;_bcgcb ++{_dfge [_bcgcb ]=_dfge [_bcgcb -8]+4;
};for _bcgcb =16;_bcgcb < 32;_bcgcb ++{_dfge [_bcgcb ]=_dfge [_bcgcb -16]+3;};for _bcgcb =32;_bcgcb < 64;_bcgcb ++{_dfge [_bcgcb ]=_dfge [_bcgcb -32]+2;};for _bcgcb =64;_bcgcb < 128;_bcgcb ++{_dfge [_bcgcb ]=_dfge [_bcgcb -64]+1;};for _bcgcb =128;_bcgcb < 256;
_bcgcb ++{_dfge [_bcgcb ]=_dfge [_bcgcb -128];};return _dfge ;};func (_aef *Bitmap )Equals (s *Bitmap )bool {if len (_aef .Data )!=len (s .Data )||_aef .Width !=s .Width ||_aef .Height !=s .Height {return false ;};for _fcc :=0;_fcc < _aef .Height ;_fcc ++{_fade :=_fcc *_aef .RowStride ;
for _badc :=0;_badc < _aef .RowStride ;_badc ++{if _aef .Data [_fade +_badc ]!=s .Data [_fade +_badc ]{return false ;};};};return true ;};func (_cfb *Bitmap )GetComponents (components Component ,maxWidth ,maxHeight int )(_beda *Bitmaps ,_acb *Boxes ,_abf error ){const _gce ="B\u0069t\u006d\u0061\u0070\u002e\u0047\u0065\u0074\u0043o\u006d\u0070\u006f\u006een\u0074\u0073";
if _cfb ==nil {return nil ,nil ,_c .Error (_gce ,"\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0042\u0069\u0074\u006da\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069n\u0065\u0064\u002e");};switch components {case ComponentConn ,ComponentCharacters ,ComponentWords :default:return nil ,nil ,_c .Error (_gce ,"\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065n\u0074s\u0020\u0070\u0061\u0072\u0061\u006d\u0065t\u0065\u0072");
};if _cfb .Zero (){_acb =&Boxes {};_beda =&Bitmaps {};return _beda ,_acb ,nil ;};switch components {case ComponentConn :_beda =&Bitmaps {};if _acb ,_abf =_cfb .ConnComponents (_beda ,8);_abf !=nil {return nil ,nil ,_c .Wrap (_abf ,_gce ,"\u006e\u006f \u0070\u0072\u0065p\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};case ComponentCharacters :_bfff ,_aada :=MorphSequence (_cfb ,MorphProcess {Operation :MopClosing ,Arguments :[]int {1,6}});if _aada !=nil {return nil ,nil ,_c .Wrap (_aada ,_gce ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};if _gc .Log .IsLogLevel (_gc .LogLevelTrace ){_gc .Log .Trace ("\u0043o\u006d\u0070o\u006e\u0065\u006e\u0074C\u0068\u0061\u0072a\u0063\u0074\u0065\u0072\u0073\u0020\u0062\u0069\u0074ma\u0070\u0020\u0061f\u0074\u0065r\u0020\u0063\u006c\u006f\u0073\u0069n\u0067\u003a \u0025\u0073",_bfff .String ());
};_gfegb :=&Bitmaps {};_acb ,_aada =_bfff .ConnComponents (_gfegb ,8);if _aada !=nil {return nil ,nil ,_c .Wrap (_aada ,_gce ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};if _gc .Log .IsLogLevel (_gc .LogLevelTrace ){_gc .Log .Trace ("\u0043\u006f\u006d\u0070\u006f\u006ee\u006e\u0074\u0043\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u0020a\u0066\u0074\u0065\u0072\u0020\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076i\u0074y\u003a\u0020\u0025\u0073",_gfegb .String ());
};if _beda ,_aada =_gfegb .ClipToBitmap (_cfb );_aada !=nil {return nil ,nil ,_c .Wrap (_aada ,_gce ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");};case ComponentWords :_cff :=1;
var _cdab *Bitmap ;switch {case _cfb .XResolution <=200:_cdab =_cfb ;case _cfb .XResolution <=400:_cff =2;_cdab ,_abf =_fdb (_cfb ,1,0,0,0);if _abf !=nil {return nil ,nil ,_c .Wrap (_abf ,_gce ,"w\u006f\u0072\u0064\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0020\u002d \u0078\u0072\u0065s\u003c=\u0034\u0030\u0030");
};default:_cff =4;_cdab ,_abf =_fdb (_cfb ,1,1,0,0);if _abf !=nil {return nil ,nil ,_c .Wrap (_abf ,_gce ,"\u0077\u006f\u0072\u0064 \u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073 \u002d \u0078\u0072\u0065\u0073\u0020\u003e\u00204\u0030\u0030");
};};_aeee ,_ ,_ccfb :=_fcfa (_cdab );if _ccfb !=nil {return nil ,nil ,_c .Wrap (_ccfb ,_gce ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};_eeee ,_ccfb :=_bbcb (_aeee ,_cff );if _ccfb !=nil {return nil ,nil ,_c .Wrap (_ccfb ,_gce ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");
};_gebg :=&Bitmaps {};if _acb ,_ccfb =_eeee .ConnComponents (_gebg ,4);_ccfb !=nil {return nil ,nil ,_c .Wrap (_ccfb ,_gce ,"\u0077\u006f\u0072\u0064\u0020\u0070r\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u002c\u0020\u0063\u006f\u006en\u0065\u0063\u0074\u0020\u0065\u0078\u0070a\u006e\u0064\u0065\u0064");
};if _beda ,_ccfb =_gebg .ClipToBitmap (_cfb );_ccfb !=nil {return nil ,nil ,_c .Wrap (_ccfb ,_gce ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};};_beda ,_abf =_beda .SelectBySize (maxWidth ,maxHeight ,LocSelectIfBoth ,SizeSelectIfLTE );
if _abf !=nil {return nil ,nil ,_c .Wrap (_abf ,_gce ,"");};_acb ,_abf =_acb .SelectBySize (maxWidth ,maxHeight ,LocSelectIfBoth ,SizeSelectIfLTE );if _abf !=nil {return nil ,nil ,_c .Wrap (_abf ,_gce ,"");};return _beda ,_acb ,nil ;};func TstISymbol (t *_g .T ,scale ...int )*Bitmap {_dbag ,_adfb :=NewWithData (1,5,[]byte {0x80,0x80,0x80,0x80,0x80});
_dc .NoError (t ,_adfb );return TstGetScaledSymbol (t ,_dbag ,scale ...);};func TstTSymbol (t *_g .T ,scale ...int )*Bitmap {_bdgcd ,_dgdcc :=NewWithData (5,5,[]byte {0xF8,0x20,0x20,0x20,0x20});_dc .NoError (t ,_dgdcc );return TstGetScaledSymbol (t ,_bdgcd ,scale ...);
};func (_abbaa *Bitmaps )GetBox (i int )(*_fa .Rectangle ,error ){const _ebaf ="\u0047\u0065\u0074\u0042\u006f\u0078";if _abbaa ==nil {return nil ,_c .Error (_ebaf ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074\u006d\u0061\u0070s\u0027");
};if i > len (_abbaa .Boxes )-1{return nil ,_c .Errorf (_ebaf ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _abbaa .Boxes [i ],nil ;};var (_deabc =_bab ();
_ffaf =_df ();_ggdg =_ffd (););func CorrelationScore (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab []int )(_agfg float64 ,_geed error ){const _bdff ="\u0063\u006fr\u0072\u0065\u006ca\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065";
if bm1 ==nil ||bm2 ==nil {return 0,_c .Error (_bdff ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0062\u0069\u0074ma\u0070\u0073");};if tab ==nil {return 0,_c .Error (_bdff ,"\u0027\u0074\u0061\u0062\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};if area1 <=0||area2 <=0{return 0,_c .Error (_bdff ,"\u0061\u0072\u0065\u0061s\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0067r\u0065a\u0074\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u0030");};_bcbf ,_dgga :=bm1 .Width ,bm1 .Height ;_eada ,_fcfb :=bm2 .Width ,bm2 .Height ;
_eabg :=_fba (_bcbf -_eada );if _eabg > maxDiffW {return 0,nil ;};_affa :=_fba (_dgga -_fcfb );if _affa > maxDiffH {return 0,nil ;};var _agfb ,_ffaag int ;if delX >=0{_agfb =int (delX +0.5);}else {_agfb =int (delX -0.5);};if delY >=0{_ffaag =int (delY +0.5);
}else {_ffaag =int (delY -0.5);};_gdbe :=_acad (_ffaag ,0);_dcgf :=_bccb (_fcfb +_ffaag ,_dgga );_afbg :=bm1 .RowStride *_gdbe ;_bga :=bm2 .RowStride *(_gdbe -_ffaag );_afba :=_acad (_agfb ,0);_fedf :=_bccb (_eada +_agfb ,_bcbf );_acab :=bm2 .RowStride ;
var _deab ,_geac int ;if _agfb >=8{_deab =_agfb >>3;_afbg +=_deab ;_afba -=_deab <<3;_fedf -=_deab <<3;_agfb &=7;}else if _agfb <=-8{_geac =-((_agfb +7)>>3);_bga +=_geac ;_acab -=_geac ;_agfb +=_geac <<3;};if _afba >=_fedf ||_gdbe >=_dcgf {return 0,nil ;
};_bgde :=(_fedf +7)>>3;var (_dabe ,_bddc ,_eeec byte ;_cabg ,_bbcfb ,_cfga int ;);switch {case _agfb ==0:for _cfga =_gdbe ;_cfga < _dcgf ;_cfga ,_afbg ,_bga =_cfga +1,_afbg +bm1 .RowStride ,_bga +bm2 .RowStride {for _bbcfb =0;_bbcfb < _bgde ;_bbcfb ++{_eeec =bm1 .Data [_afbg +_bbcfb ]&bm2 .Data [_bga +_bbcfb ];
_cabg +=tab [_eeec ];};};case _agfb > 0:if _acab < _bgde {for _cfga =_gdbe ;_cfga < _dcgf ;_cfga ,_afbg ,_bga =_cfga +1,_afbg +bm1 .RowStride ,_bga +bm2 .RowStride {_dabe ,_bddc =bm1 .Data [_afbg ],bm2 .Data [_bga ]>>uint (_agfb );_eeec =_dabe &_bddc ;
_cabg +=tab [_eeec ];for _bbcfb =1;_bbcfb < _acab ;_bbcfb ++{_dabe ,_bddc =bm1 .Data [_afbg +_bbcfb ],(bm2 .Data [_bga +_bbcfb ]>>uint (_agfb ))|(bm2 .Data [_bga +_bbcfb -1]<<uint (8-_agfb ));_eeec =_dabe &_bddc ;_cabg +=tab [_eeec ];};_dabe =bm1 .Data [_afbg +_bbcfb ];
_bddc =bm2 .Data [_bga +_bbcfb -1]<<uint (8-_agfb );_eeec =_dabe &_bddc ;_cabg +=tab [_eeec ];};}else {for _cfga =_gdbe ;_cfga < _dcgf ;_cfga ,_afbg ,_bga =_cfga +1,_afbg +bm1 .RowStride ,_bga +bm2 .RowStride {_dabe ,_bddc =bm1 .Data [_afbg ],bm2 .Data [_bga ]>>uint (_agfb );
_eeec =_dabe &_bddc ;_cabg +=tab [_eeec ];for _bbcfb =1;_bbcfb < _bgde ;_bbcfb ++{_dabe =bm1 .Data [_afbg +_bbcfb ];_bddc =(bm2 .Data [_bga +_bbcfb ]>>uint (_agfb ))|(bm2 .Data [_bga +_bbcfb -1]<<uint (8-_agfb ));_eeec =_dabe &_bddc ;_cabg +=tab [_eeec ];
};};};default:if _bgde < _acab {for _cfga =_gdbe ;_cfga < _dcgf ;_cfga ,_afbg ,_bga =_cfga +1,_afbg +bm1 .RowStride ,_bga +bm2 .RowStride {for _bbcfb =0;_bbcfb < _bgde ;_bbcfb ++{_dabe =bm1 .Data [_afbg +_bbcfb ];_bddc =bm2 .Data [_bga +_bbcfb ]<<uint (-_agfb );
_bddc |=bm2 .Data [_bga +_bbcfb +1]>>uint (8+_agfb );_eeec =_dabe &_bddc ;_cabg +=tab [_eeec ];};};}else {for _cfga =_gdbe ;_cfga < _dcgf ;_cfga ,_afbg ,_bga =_cfga +1,_afbg +bm1 .RowStride ,_bga +bm2 .RowStride {for _bbcfb =0;_bbcfb < _bgde -1;_bbcfb ++{_dabe =bm1 .Data [_afbg +_bbcfb ];
_bddc =bm2 .Data [_bga +_bbcfb ]<<uint (-_agfb );_bddc |=bm2 .Data [_bga +_bbcfb +1]>>uint (8+_agfb );_eeec =_dabe &_bddc ;_cabg +=tab [_eeec ];};_dabe =bm1 .Data [_afbg +_bbcfb ];_bddc =bm2 .Data [_bga +_bbcfb ]<<uint (-_agfb );_eeec =_dabe &_bddc ;_cabg +=tab [_eeec ];
};};};_agfg =float64 (_cabg )*float64 (_cabg )/(float64 (area1 )*float64 (area2 ));return _agfg ,nil ;};func (_cec *Bitmap )InverseData (){_cec .inverseData ()};type Getter interface{GetBitmap ()*Bitmap ;};func TstASymbol (t *_g .T )*Bitmap {t .Helper ();
_eedcd :=New (6,6);_dc .NoError (t ,_eedcd .SetPixel (1,0,1));_dc .NoError (t ,_eedcd .SetPixel (2,0,1));_dc .NoError (t ,_eedcd .SetPixel (3,0,1));_dc .NoError (t ,_eedcd .SetPixel (4,0,1));_dc .NoError (t ,_eedcd .SetPixel (5,1,1));_dc .NoError (t ,_eedcd .SetPixel (1,2,1));
_dc .NoError (t ,_eedcd .SetPixel (2,2,1));_dc .NoError (t ,_eedcd .SetPixel (3,2,1));_dc .NoError (t ,_eedcd .SetPixel (4,2,1));_dc .NoError (t ,_eedcd .SetPixel (5,2,1));_dc .NoError (t ,_eedcd .SetPixel (0,3,1));_dc .NoError (t ,_eedcd .SetPixel (5,3,1));
_dc .NoError (t ,_eedcd .SetPixel (0,4,1));_dc .NoError (t ,_eedcd .SetPixel (5,4,1));_dc .NoError (t ,_eedcd .SetPixel (1,5,1));_dc .NoError (t ,_eedcd .SetPixel (2,5,1));_dc .NoError (t ,_eedcd .SetPixel (3,5,1));_dc .NoError (t ,_eedcd .SetPixel (4,5,1));
_dc .NoError (t ,_eedcd .SetPixel (5,5,1));return _eedcd ;};func _beb (_ecbc ,_dbg *Bitmap ,_aeb int ,_gaba []byte ,_dgbf int )(_ece error ){const _dfd ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0034";
var (_dgc ,_aaa ,_gfbe ,_cge ,_aag ,_cbab ,_eddb ,_eae int ;_cea ,_egb uint32 ;_bef ,_cab byte ;_ebfe uint16 ;);_dfe :=make ([]byte ,4);_egdg :=make ([]byte ,4);for _gfbe =0;_gfbe < _ecbc .Height -1;_gfbe ,_cge =_gfbe +2,_cge +1{_dgc =_gfbe *_ecbc .RowStride ;
_aaa =_cge *_dbg .RowStride ;for _aag ,_cbab =0,0;_aag < _dgbf ;_aag ,_cbab =_aag +4,_cbab +1{for _eddb =0;_eddb < 4;_eddb ++{_eae =_dgc +_aag +_eddb ;if _eae <=len (_ecbc .Data )-1&&_eae < _dgc +_ecbc .RowStride {_dfe [_eddb ]=_ecbc .Data [_eae ];}else {_dfe [_eddb ]=0x00;
};_eae =_dgc +_ecbc .RowStride +_aag +_eddb ;if _eae <=len (_ecbc .Data )-1&&_eae < _dgc +(2*_ecbc .RowStride ){_egdg [_eddb ]=_ecbc .Data [_eae ];}else {_egdg [_eddb ]=0x00;};};_cea =_a .BigEndian .Uint32 (_dfe );_egb =_a .BigEndian .Uint32 (_egdg );_egb &=_cea ;
_egb &=_egb <<1;_egb &=0xaaaaaaaa;_cea =_egb |(_egb <<7);_bef =byte (_cea >>24);_cab =byte ((_cea >>8)&0xff);_eae =_aaa +_cbab ;if _eae +1==len (_dbg .Data )-1||_eae +1>=_aaa +_dbg .RowStride {_dbg .Data [_eae ]=_gaba [_bef ];if _ece =_dbg .SetByte (_eae ,_gaba [_bef ]);
_ece !=nil {return _c .Wrapf (_ece ,_dfd ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_eae );};}else {_ebfe =(uint16 (_gaba [_bef ])<<8)|uint16 (_gaba [_cab ]);if _ece =_dbg .setTwoBytes (_eae ,_ebfe );_ece !=nil {return _c .Wrapf (_ece ,_dfd ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_eae );
};_cbab ++;};};};return nil ;};func TstCSymbol (t *_g .T )*Bitmap {t .Helper ();_ecdag :=New (6,6);_dc .NoError (t ,_ecdag .SetPixel (1,0,1));_dc .NoError (t ,_ecdag .SetPixel (2,0,1));_dc .NoError (t ,_ecdag .SetPixel (3,0,1));_dc .NoError (t ,_ecdag .SetPixel (4,0,1));
_dc .NoError (t ,_ecdag .SetPixel (0,1,1));_dc .NoError (t ,_ecdag .SetPixel (5,1,1));_dc .NoError (t ,_ecdag .SetPixel (0,2,1));_dc .NoError (t ,_ecdag .SetPixel (0,3,1));_dc .NoError (t ,_ecdag .SetPixel (0,4,1));_dc .NoError (t ,_ecdag .SetPixel (5,4,1));
_dc .NoError (t ,_ecdag .SetPixel (1,5,1));_dc .NoError (t ,_ecdag .SetPixel (2,5,1));_dc .NoError (t ,_ecdag .SetPixel (3,5,1));_dc .NoError (t ,_ecdag .SetPixel (4,5,1));return _ecdag ;};func (_eedec *BitmapsArray )GetBox (i int )(*_fa .Rectangle ,error ){const _gccd ="\u0042\u0069\u0074\u006dap\u0073\u0041\u0072\u0072\u0061\u0079\u002e\u0047\u0065\u0074\u0042\u006f\u0078";
if _eedec ==nil {return nil ,_c .Error (_gccd ,"p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074m\u0061\u0070\u0073A\u0072r\u0061\u0079\u0027");};if i > len (_eedec .Boxes )-1{return nil ,_c .Errorf (_gccd ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _eedec .Boxes [i ],nil ;};func (_eadb *Boxes )selectWithIndicator (_gedc *_ca .NumSlice )(_ebd *Boxes ,_cceg error ){const _egf ="\u0042o\u0078\u0065\u0073\u002es\u0065\u006c\u0065\u0063\u0074W\u0069t\u0068I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";
if _eadb ==nil {return nil ,_c .Error (_egf ,"b\u006f\u0078\u0065\u0073 '\u0062'\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064");};if _gedc ==nil {return nil ,_c .Error (_egf ,"\u0027\u006ea\u0027\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if len (*_gedc )!=len (*_eadb ){return nil ,_c .Error (_egf ,"\u0062\u006f\u0078\u0065\u0073\u0020\u0027\u0062\u0027\u0020\u0068\u0061\u0073\u0020\u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006e\u0074\u0020s\u0069\u007a\u0065\u0020\u0074h\u0061\u006e \u0027\u006e\u0061\u0027");
};var _cgff ,_fgcc int ;for _dcbf :=0;_dcbf < len (*_gedc );_dcbf ++{if _cgff ,_cceg =_gedc .GetInt (_dcbf );_cceg !=nil {return nil ,_c .Wrap (_cceg ,_egf ,"\u0063\u0068\u0065\u0063\u006b\u0069\u006e\u0067\u0020c\u006f\u0075\u006e\u0074");};if _cgff ==1{_fgcc ++;
};};if _fgcc ==len (*_eadb ){return _eadb ,nil ;};_gabf :=Boxes {};for _bgec :=0;_bgec < len (*_gedc );_bgec ++{_cgff =int ((*_gedc )[_bgec ]);if _cgff ==0{continue ;};_gabf =append (_gabf ,(*_eadb )[_bgec ]);};_ebd =&_gabf ;return _ebd ,nil ;};func TstGetScaledSymbol (t *_g .T ,sm *Bitmap ,scale ...int )*Bitmap {if len (scale )==0{return sm ;
};if scale [0]==1{return sm ;};_dfef ,_daec :=MorphSequence (sm ,MorphProcess {Operation :MopReplicativeBinaryExpansion ,Arguments :scale });_dc .NoError (t ,_daec );return _dfef ;};func TstPSymbol (t *_g .T )*Bitmap {t .Helper ();_eaec :=New (5,8);_dc .NoError (t ,_eaec .SetPixel (0,0,1));
_dc .NoError (t ,_eaec .SetPixel (1,0,1));_dc .NoError (t ,_eaec .SetPixel (2,0,1));_dc .NoError (t ,_eaec .SetPixel (3,0,1));_dc .NoError (t ,_eaec .SetPixel (4,1,1));_dc .NoError (t ,_eaec .SetPixel (0,1,1));_dc .NoError (t ,_eaec .SetPixel (4,2,1));
_dc .NoError (t ,_eaec .SetPixel (0,2,1));_dc .NoError (t ,_eaec .SetPixel (4,3,1));_dc .NoError (t ,_eaec .SetPixel (0,3,1));_dc .NoError (t ,_eaec .SetPixel (0,4,1));_dc .NoError (t ,_eaec .SetPixel (1,4,1));_dc .NoError (t ,_eaec .SetPixel (2,4,1));
_dc .NoError (t ,_eaec .SetPixel (3,4,1));_dc .NoError (t ,_eaec .SetPixel (0,5,1));_dc .NoError (t ,_eaec .SetPixel (0,6,1));_dc .NoError (t ,_eaec .SetPixel (0,7,1));return _eaec ;};func _fbbaa (_ecefb ,_gacgc ,_aebcc *Bitmap ,_cade int )(*Bitmap ,error ){const _eaga ="\u0073\u0065\u0065\u0064\u0046\u0069\u006c\u006c\u0042i\u006e\u0061\u0072\u0079";
if _gacgc ==nil {return nil ,_c .Error (_eaga ,"s\u006fu\u0072\u0063\u0065\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");};if _aebcc ==nil {return nil ,_c .Error (_eaga ,"'\u006da\u0073\u006b\u0027\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");
};if _cade !=4&&_cade !=8{return nil ,_c .Error (_eaga ,"\u0063\u006f\u006en\u0065\u0063\u0074\u0069v\u0069\u0074\u0079\u0020\u006e\u006f\u0074 \u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0034\u002c\u0038\u007d");};var _edaa error ;_ecefb ,_edaa =_ace (_ecefb ,_gacgc );
if _edaa !=nil {return nil ,_c .Wrap (_edaa ,_eaga ,"\u0063o\u0070y\u0020\u0073\u006f\u0075\u0072c\u0065\u0020t\u006f\u0020\u0027\u0064\u0027");};_ffgeg :=_gacgc .createTemplate ();_aebcc .setPadBits (0);for _adfc :=0;_adfc < _fbdd ;_adfc ++{_ffgeg ,_edaa =_ace (_ffgeg ,_ecefb );
if _edaa !=nil {return nil ,_c .Wrapf (_edaa ,_eaga ,"\u0069\u0074\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064",_adfc );};if _edaa =_fbf (_ecefb ,_aebcc ,_cade );_edaa !=nil {return nil ,_c .Wrapf (_edaa ,_eaga ,"\u0069\u0074\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064",_adfc );
};if _ffgeg .Equals (_ecefb ){break ;};};return _ecefb ,nil ;};func _db (_edd *Bitmap ,_bad ,_gg int )(*Bitmap ,error ){const _bcf ="e\u0078\u0070\u0061\u006edB\u0069n\u0061\u0072\u0079\u0052\u0065p\u006c\u0069\u0063\u0061\u0074\u0065";if _edd ==nil {return nil ,_c .Error (_bcf ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _bad <=0||_gg <=0{return nil ,_c .Error (_bcf ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0073\u0063\u0061l\u0065\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020<\u003d\u0020\u0030");};if _bad ==_gg {if _bad ==1{_ec ,_dba :=_ace (nil ,_edd );
if _dba !=nil {return nil ,_c .Wrap (_dba ,_bcf ,"\u0078\u0046\u0061\u0063\u0074\u0020\u003d\u003d\u0020y\u0046\u0061\u0063\u0074");};return _ec ,nil ;};if _bad ==2||_bad ==4||_bad ==8{_dbf ,_ge :=_gbf (_edd ,_bad );if _ge !=nil {return nil ,_c .Wrap (_ge ,_bcf ,"\u0078\u0046a\u0063\u0074\u0020i\u006e\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d");
};return _dbf ,nil ;};};_aeg :=_bad *_edd .Width ;_cba :=_gg *_edd .Height ;_dg :=New (_aeg ,_cba );_agg :=_dg .RowStride ;var (_ggd ,_cbc ,_fed ,_dcad ,_cg int ;_ddd byte ;_bg error ;);for _cbc =0;_cbc < _edd .Height ;_cbc ++{_ggd =_gg *_cbc *_agg ;for _fed =0;
_fed < _edd .Width ;_fed ++{if _faf :=_edd .GetPixel (_fed ,_cbc );_faf {_cg =_bad *_fed ;for _dcad =0;_dcad < _bad ;_dcad ++{_dg .setBit (_ggd *8+_cg +_dcad );};};};for _dcad =1;_dcad < _gg ;_dcad ++{_ddc :=_ggd +_dcad *_agg ;for _ebb :=0;_ebb < _agg ;
_ebb ++{if _ddd ,_bg =_dg .GetByte (_ggd +_ebb );_bg !=nil {return nil ,_c .Wrapf (_bg ,_bcf ,"\u0072\u0065\u0070\u006cic\u0061\u0074\u0069\u006e\u0067\u0020\u006c\u0069\u006e\u0065\u003a\u0020\u0027\u0025d\u0027",_dcad );};if _bg =_dg .SetByte (_ddc +_ebb ,_ddd );
_bg !=nil {return nil ,_c .Wrap (_bg ,_bcf ,"\u0053\u0065\u0074\u0074in\u0067\u0020\u0062\u0079\u0074\u0065\u0020\u0066\u0061\u0069\u006c\u0065\u0064");};};};};return _dg ,nil ;};