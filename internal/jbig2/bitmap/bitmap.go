//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package bitmap ;import (_g "encoding/binary";_fe "github.com/stretchr/testify/require";_aa "github.com/unidoc/unipdf/v3/common";_a "github.com/unidoc/unipdf/v3/internal/bitwise";_fd "github.com/unidoc/unipdf/v3/internal/imageutil";_e "github.com/unidoc/unipdf/v3/internal/jbig2/basic";
_c "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_ee "image";_ec "math";_ff "sort";_d "strings";_cd "testing";);func (_afab *Bitmap )clipRectangle (_ced ,_ccb *_ee .Rectangle )(_bbb *Bitmap ,_ccfg error ){const _aaebf ="\u0063\u006c\u0069\u0070\u0052\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065";
if _ced ==nil {return nil ,_c .Error (_aaebf ,"\u0070r\u006fv\u0069\u0064\u0065\u0064\u0020n\u0069\u006c \u0027\u0062\u006f\u0078\u0027");};_dgc ,_eaca :=_afab .Width ,_afab .Height ;_edgd ,_ccfg :=ClipBoxToRectangle (_ced ,_dgc ,_eaca );if _ccfg !=nil {_aa .Log .Warning ("\u0027\u0062ox\u0027\u0020\u0064o\u0065\u0073\u006e\u0027t o\u0076er\u006c\u0061\u0070\u0020\u0062\u0069\u0074ma\u0070\u0020\u0027\u0062\u0027\u003a\u0020%\u0076",_ccfg );
return nil ,nil ;};_fcbg ,_eacb :=_edgd .Min .X ,_edgd .Min .Y ;_ggaa ,_eebc :=_edgd .Max .X -_edgd .Min .X ,_edgd .Max .Y -_edgd .Min .Y ;_bbb =New (_ggaa ,_eebc );_bbb .Text =_afab .Text ;if _ccfg =_bbb .RasterOperation (0,0,_ggaa ,_eebc ,PixSrc ,_afab ,_fcbg ,_eacb );
_ccfg !=nil {return nil ,_c .Wrap (_ccfg ,_aaebf ,"");};if _ccb !=nil {*_ccb =*_edgd ;};return _bbb ,nil ;};type BoundaryCondition int ;func (_cfcg *Bitmaps )SortByWidth (){_aacd :=(*byWidth )(_cfcg );_ff .Sort (_aacd )};func (_feef Points )GetGeometry (i int )(_cefa ,_fgdd float32 ,_gbcc error ){if i > len (_feef )-1{return 0,0,_c .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};_acab :=_feef [i ];return _acab .X ,_acab .Y ,nil ;};func _eeddg (_efc ,_bfaf ,_bffb *Bitmap )(*Bitmap ,error ){const _dedc ="\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0078\u006f\u0072";if _bfaf ==nil {return nil ,_c .Error (_dedc ,"'\u0062\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");
};if _bffb ==nil {return nil ,_c .Error (_dedc ,"'\u0062\u0032\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _efc ==_bffb {return nil ,_c .Error (_dedc ,"'\u0064\u0027\u0020\u003d\u003d\u0020\u0027\u0062\u0032\u0027");};if !_bfaf .SizesEqual (_bffb ){_aa .Log .Debug ("\u0025s\u0020\u002d \u0042\u0069\u0074\u006da\u0070\u0020\u0027b\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074 e\u0071\u0075\u0061l\u0020\u0073i\u007a\u0065\u0020\u0077\u0069\u0074h\u0020\u0027b\u0032\u0027",_dedc );
};var _ffgf error ;if _efc ,_ffgf =_fcbc (_efc ,_bfaf );_ffgf !=nil {return nil ,_c .Wrap (_ffgf ,_dedc ,"\u0063\u0061n\u0027\u0074\u0020c\u0072\u0065\u0061\u0074\u0065\u0020\u0027\u0064\u0027");};if _ffgf =_efc .RasterOperation (0,0,_efc .Width ,_efc .Height ,PixSrcXorDst ,_bffb ,0,0);
_ffgf !=nil {return nil ,_c .Wrap (_ffgf ,_dedc ,"");};return _efc ,nil ;};func CorrelationScoreThresholded (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab ,downcount []int ,scoreThreshold float32 )(bool ,error ){const _fdg ="C\u006f\u0072\u0072\u0065\u006c\u0061t\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054h\u0072\u0065\u0073h\u006fl\u0064\u0065\u0064";
if bm1 ==nil {return false ,_c .Error (_fdg ,"\u0063\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u0062\u006d1\u0020\u0069s\u0020\u006e\u0069\u006c");
};if bm2 ==nil {return false ,_c .Error (_fdg ,"\u0063\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u0062\u006d2\u0020\u0069s\u0020\u006e\u0069\u006c");
};if area1 <=0||area2 <=0{return false ,_c .Error (_fdg ,"c\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006fn\u0053\u0063\u006f\u0072\u0065\u0054\u0068re\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u002d\u0020\u0061\u0072\u0065\u0061s \u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u003e\u0020\u0030");
};if downcount ==nil {return false ,_c .Error (_fdg ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u006f\u0020\u0027\u0064\u006f\u0077\u006e\u0063\u006f\u0075\u006e\u0074\u0027");};if tab ==nil {return false ,_c .Error (_fdg ,"p\u0072\u006f\u0076\u0069de\u0064 \u006e\u0069\u006c\u0020\u0027s\u0075\u006d\u0074\u0061\u0062\u0027");
};_aggd ,_fefa :=bm1 .Width ,bm1 .Height ;_fbcf ,_dagc :=bm2 .Width ,bm2 .Height ;if _e .Abs (_aggd -_fbcf )> maxDiffW {return false ,nil ;};if _e .Abs (_fefa -_dagc )> maxDiffH {return false ,nil ;};_bcdf :=int (delX +_e .Sign (delX )*0.5);_bbgg :=int (delY +_e .Sign (delY )*0.5);
_geac :=int (_ec .Ceil (_ec .Sqrt (float64 (scoreThreshold )*float64 (area1 )*float64 (area2 ))));_aced :=bm2 .RowStride ;_ecd :=_fbbe (_bbgg ,0);_cbba :=_aegb (_dagc +_bbgg ,_fefa );_fcec :=bm1 .RowStride *_ecd ;_fcac :=bm2 .RowStride *(_ecd -_bbgg );
var _ecaac int ;if _cbba <=_fefa {_ecaac =downcount [_cbba -1];};_gbc :=_fbbe (_bcdf ,0);_cgbc :=_aegb (_fbcf +_bcdf ,_aggd );var _dgeb ,_acea int ;if _bcdf >=8{_dgeb =_bcdf >>3;_fcec +=_dgeb ;_gbc -=_dgeb <<3;_cgbc -=_dgeb <<3;_bcdf &=7;}else if _bcdf <=-8{_acea =-((_bcdf +7)>>3);
_fcac +=_acea ;_aced -=_acea ;_bcdf +=_acea <<3;};var (_bfgg ,_efaa ,_gbcb int ;_efec ,_fbcd ,_gbee byte ;);if _gbc >=_cgbc ||_ecd >=_cbba {return false ,nil ;};_efbd :=(_cgbc +7)>>3;switch {case _bcdf ==0:for _efaa =_ecd ;_efaa < _cbba ;_efaa ,_fcec ,_fcac =_efaa +1,_fcec +bm1 .RowStride ,_fcac +bm2 .RowStride {for _gbcb =0;
_gbcb < _efbd ;_gbcb ++{_efec =bm1 .Data [_fcec +_gbcb ]&bm2 .Data [_fcac +_gbcb ];_bfgg +=tab [_efec ];};if _bfgg >=_geac {return true ,nil ;};if _gggd :=_bfgg +downcount [_efaa ]-_ecaac ;_gggd < _geac {return false ,nil ;};};case _bcdf > 0&&_aced < _efbd :for _efaa =_ecd ;
_efaa < _cbba ;_efaa ,_fcec ,_fcac =_efaa +1,_fcec +bm1 .RowStride ,_fcac +bm2 .RowStride {_fbcd =bm1 .Data [_fcec ];_gbee =bm2 .Data [_fcac ]>>uint (_bcdf );_efec =_fbcd &_gbee ;_bfgg +=tab [_efec ];for _gbcb =1;_gbcb < _aced ;_gbcb ++{_fbcd =bm1 .Data [_fcec +_gbcb ];
_gbee =bm2 .Data [_fcac +_gbcb ]>>uint (_bcdf )|bm2 .Data [_fcac +_gbcb -1]<<uint (8-_bcdf );_efec =_fbcd &_gbee ;_bfgg +=tab [_efec ];};_fbcd =bm1 .Data [_fcec +_gbcb ];_gbee =bm2 .Data [_fcac +_gbcb -1]<<uint (8-_bcdf );_efec =_fbcd &_gbee ;_bfgg +=tab [_efec ];
if _bfgg >=_geac {return true ,nil ;}else if _bfgg +downcount [_efaa ]-_ecaac < _geac {return false ,nil ;};};case _bcdf > 0&&_aced >=_efbd :for _efaa =_ecd ;_efaa < _cbba ;_efaa ,_fcec ,_fcac =_efaa +1,_fcec +bm1 .RowStride ,_fcac +bm2 .RowStride {_fbcd =bm1 .Data [_fcec ];
_gbee =bm2 .Data [_fcac ]>>uint (_bcdf );_efec =_fbcd &_gbee ;_bfgg +=tab [_efec ];for _gbcb =1;_gbcb < _efbd ;_gbcb ++{_fbcd =bm1 .Data [_fcec +_gbcb ];_gbee =bm2 .Data [_fcac +_gbcb ]>>uint (_bcdf );_gbee |=bm2 .Data [_fcac +_gbcb -1]<<uint (8-_bcdf );
_efec =_fbcd &_gbee ;_bfgg +=tab [_efec ];};if _bfgg >=_geac {return true ,nil ;}else if _bfgg +downcount [_efaa ]-_ecaac < _geac {return false ,nil ;};};case _efbd < _aced :for _efaa =_ecd ;_efaa < _cbba ;_efaa ,_fcec ,_fcac =_efaa +1,_fcec +bm1 .RowStride ,_fcac +bm2 .RowStride {for _gbcb =0;
_gbcb < _efbd ;_gbcb ++{_fbcd =bm1 .Data [_fcec +_gbcb ];_gbee =bm2 .Data [_fcac +_gbcb ]<<uint (-_bcdf );_gbee |=bm2 .Data [_fcac +_gbcb +1]>>uint (8+_bcdf );_efec =_fbcd &_gbee ;_bfgg +=tab [_efec ];};if _bfgg >=_geac {return true ,nil ;}else if _cffb :=_bfgg +downcount [_efaa ]-_ecaac ;
_cffb < _geac {return false ,nil ;};};case _aced >=_efbd :for _efaa =_ecd ;_efaa < _cbba ;_efaa ,_fcec ,_fcac =_efaa +1,_fcec +bm1 .RowStride ,_fcac +bm2 .RowStride {for _gbcb =0;_gbcb < _efbd ;_gbcb ++{_fbcd =bm1 .Data [_fcec +_gbcb ];_gbee =bm2 .Data [_fcac +_gbcb ]<<uint (-_bcdf );
_gbee |=bm2 .Data [_fcac +_gbcb +1]>>uint (8+_bcdf );_efec =_fbcd &_gbee ;_bfgg +=tab [_efec ];};_fbcd =bm1 .Data [_fcec +_gbcb ];_gbee =bm2 .Data [_fcac +_gbcb ]<<uint (-_bcdf );_efec =_fbcd &_gbee ;_bfgg +=tab [_efec ];if _bfgg >=_geac {return true ,nil ;
}else if _bfgg +downcount [_efaa ]-_ecaac < _geac {return false ,nil ;};};};_dcbd :=float32 (_bfgg )*float32 (_bfgg )/(float32 (area1 )*float32 (area2 ));if _dcbd >=scoreThreshold {_aa .Log .Trace ("\u0063\u006f\u0075\u006e\u0074\u003a\u0020\u0025\u0064\u0020\u003c\u0020\u0074\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0020\u0025\u0064\u0020\u0062\u0075\u0074\u0020\u0073c\u006f\u0072\u0065\u0020\u0025\u0066\u0020\u003e\u003d\u0020\u0073\u0063\u006fr\u0065\u0054\u0068\u0072\u0065\u0073h\u006f\u006c\u0064 \u0025\u0066",_bfgg ,_geac ,_dcbd ,scoreThreshold );
};return false ,nil ;};func (_febd *byHeight )Swap (i ,j int ){_febd .Values [i ],_febd .Values [j ]=_febd .Values [j ],_febd .Values [i ];if _febd .Boxes !=nil {_febd .Boxes [i ],_febd .Boxes [j ]=_febd .Boxes [j ],_febd .Boxes [i ];};};func (_babg *ClassedPoints )Less (i ,j int )bool {return _babg ._dbea (i ,j )};
func _gbbc (_fead *Bitmap ,_eecf ,_efff ,_ecbc ,_effe int ,_cfec RasterOperator ,_dbbd *Bitmap ,_cegd ,_dacdc int )error {var (_gbcdb bool ;_gacd bool ;_bcgc byte ;_ecaaf int ;_agb int ;_bdag int ;_faag int ;_gcgg bool ;_agbg int ;_dbcf int ;_fdbf int ;
_fbda bool ;_fefbg byte ;_bcddb int ;_cbdg int ;_cfdd int ;_cefb byte ;_fggg int ;_fccb int ;_dafd uint ;_dfdg uint ;_geggb byte ;_dgbf shift ;_aade bool ;_ggef bool ;_eced ,_cbaed int ;);if _cegd &7!=0{_fccb =8-(_cegd &7);};if _eecf &7!=0{_agb =8-(_eecf &7);
};if _fccb ==0&&_agb ==0{_geggb =_gdee [0];}else {if _agb > _fccb {_dafd =uint (_agb -_fccb );}else {_dafd =uint (8-(_fccb -_agb ));};_dfdg =8-_dafd ;_geggb =_gdee [_dafd ];};if (_eecf &7)!=0{_gbcdb =true ;_ecaaf =8-(_eecf &7);_bcgc =_gdee [_ecaaf ];_bdag =_fead .RowStride *_efff +(_eecf >>3);
_faag =_dbbd .RowStride *_dacdc +(_cegd >>3);_fggg =8-(_cegd &7);if _ecaaf > _fggg {_dgbf =_beea ;if _ecbc >=_fccb {_aade =true ;};}else {_dgbf =_bggg ;};};if _ecbc < _ecaaf {_gacd =true ;_bcgc &=_egfga [8-_ecaaf +_ecbc ];};if !_gacd {_agbg =(_ecbc -_ecaaf )>>3;
if _agbg !=0{_gcgg =true ;_dbcf =_fead .RowStride *_efff +((_eecf +_agb )>>3);_fdbf =_dbbd .RowStride *_dacdc +((_cegd +_agb )>>3);};};_bcddb =(_eecf +_ecbc )&7;if !(_gacd ||_bcddb ==0){_fbda =true ;_fefbg =_egfga [_bcddb ];_cbdg =_fead .RowStride *_efff +((_eecf +_agb )>>3)+_agbg ;
_cfdd =_dbbd .RowStride *_dacdc +((_cegd +_agb )>>3)+_agbg ;if _bcddb > int (_dfdg ){_ggef =true ;};};switch _cfec {case PixSrc :if _gbcdb {for _eced =0;_eced < _effe ;_eced ++{if _dgbf ==_beea {_cefb =_dbbd .Data [_faag ]<<_dafd ;if _aade {_cefb =_eaga (_cefb ,_dbbd .Data [_faag +1]>>_dfdg ,_geggb );
};}else {_cefb =_dbbd .Data [_faag ]>>_dfdg ;};_fead .Data [_bdag ]=_eaga (_fead .Data [_bdag ],_cefb ,_bcgc );_bdag +=_fead .RowStride ;_faag +=_dbbd .RowStride ;};};if _gcgg {for _eced =0;_eced < _effe ;_eced ++{for _cbaed =0;_cbaed < _agbg ;_cbaed ++{_cefb =_eaga (_dbbd .Data [_fdbf +_cbaed ]<<_dafd ,_dbbd .Data [_fdbf +_cbaed +1]>>_dfdg ,_geggb );
_fead .Data [_dbcf +_cbaed ]=_cefb ;};_dbcf +=_fead .RowStride ;_fdbf +=_dbbd .RowStride ;};};if _fbda {for _eced =0;_eced < _effe ;_eced ++{_cefb =_dbbd .Data [_cfdd ]<<_dafd ;if _ggef {_cefb =_eaga (_cefb ,_dbbd .Data [_cfdd +1]>>_dfdg ,_geggb );};_fead .Data [_cbdg ]=_eaga (_fead .Data [_cbdg ],_cefb ,_fefbg );
_cbdg +=_fead .RowStride ;_cfdd +=_dbbd .RowStride ;};};case PixNotSrc :if _gbcdb {for _eced =0;_eced < _effe ;_eced ++{if _dgbf ==_beea {_cefb =_dbbd .Data [_faag ]<<_dafd ;if _aade {_cefb =_eaga (_cefb ,_dbbd .Data [_faag +1]>>_dfdg ,_geggb );};}else {_cefb =_dbbd .Data [_faag ]>>_dfdg ;
};_fead .Data [_bdag ]=_eaga (_fead .Data [_bdag ],^_cefb ,_bcgc );_bdag +=_fead .RowStride ;_faag +=_dbbd .RowStride ;};};if _gcgg {for _eced =0;_eced < _effe ;_eced ++{for _cbaed =0;_cbaed < _agbg ;_cbaed ++{_cefb =_eaga (_dbbd .Data [_fdbf +_cbaed ]<<_dafd ,_dbbd .Data [_fdbf +_cbaed +1]>>_dfdg ,_geggb );
_fead .Data [_dbcf +_cbaed ]=^_cefb ;};_dbcf +=_fead .RowStride ;_fdbf +=_dbbd .RowStride ;};};if _fbda {for _eced =0;_eced < _effe ;_eced ++{_cefb =_dbbd .Data [_cfdd ]<<_dafd ;if _ggef {_cefb =_eaga (_cefb ,_dbbd .Data [_cfdd +1]>>_dfdg ,_geggb );};_fead .Data [_cbdg ]=_eaga (_fead .Data [_cbdg ],^_cefb ,_fefbg );
_cbdg +=_fead .RowStride ;_cfdd +=_dbbd .RowStride ;};};case PixSrcOrDst :if _gbcdb {for _eced =0;_eced < _effe ;_eced ++{if _dgbf ==_beea {_cefb =_dbbd .Data [_faag ]<<_dafd ;if _aade {_cefb =_eaga (_cefb ,_dbbd .Data [_faag +1]>>_dfdg ,_geggb );};}else {_cefb =_dbbd .Data [_faag ]>>_dfdg ;
};_fead .Data [_bdag ]=_eaga (_fead .Data [_bdag ],_cefb |_fead .Data [_bdag ],_bcgc );_bdag +=_fead .RowStride ;_faag +=_dbbd .RowStride ;};};if _gcgg {for _eced =0;_eced < _effe ;_eced ++{for _cbaed =0;_cbaed < _agbg ;_cbaed ++{_cefb =_eaga (_dbbd .Data [_fdbf +_cbaed ]<<_dafd ,_dbbd .Data [_fdbf +_cbaed +1]>>_dfdg ,_geggb );
_fead .Data [_dbcf +_cbaed ]|=_cefb ;};_dbcf +=_fead .RowStride ;_fdbf +=_dbbd .RowStride ;};};if _fbda {for _eced =0;_eced < _effe ;_eced ++{_cefb =_dbbd .Data [_cfdd ]<<_dafd ;if _ggef {_cefb =_eaga (_cefb ,_dbbd .Data [_cfdd +1]>>_dfdg ,_geggb );};_fead .Data [_cbdg ]=_eaga (_fead .Data [_cbdg ],_cefb |_fead .Data [_cbdg ],_fefbg );
_cbdg +=_fead .RowStride ;_cfdd +=_dbbd .RowStride ;};};case PixSrcAndDst :if _gbcdb {for _eced =0;_eced < _effe ;_eced ++{if _dgbf ==_beea {_cefb =_dbbd .Data [_faag ]<<_dafd ;if _aade {_cefb =_eaga (_cefb ,_dbbd .Data [_faag +1]>>_dfdg ,_geggb );};}else {_cefb =_dbbd .Data [_faag ]>>_dfdg ;
};_fead .Data [_bdag ]=_eaga (_fead .Data [_bdag ],_cefb &_fead .Data [_bdag ],_bcgc );_bdag +=_fead .RowStride ;_faag +=_dbbd .RowStride ;};};if _gcgg {for _eced =0;_eced < _effe ;_eced ++{for _cbaed =0;_cbaed < _agbg ;_cbaed ++{_cefb =_eaga (_dbbd .Data [_fdbf +_cbaed ]<<_dafd ,_dbbd .Data [_fdbf +_cbaed +1]>>_dfdg ,_geggb );
_fead .Data [_dbcf +_cbaed ]&=_cefb ;};_dbcf +=_fead .RowStride ;_fdbf +=_dbbd .RowStride ;};};if _fbda {for _eced =0;_eced < _effe ;_eced ++{_cefb =_dbbd .Data [_cfdd ]<<_dafd ;if _ggef {_cefb =_eaga (_cefb ,_dbbd .Data [_cfdd +1]>>_dfdg ,_geggb );};_fead .Data [_cbdg ]=_eaga (_fead .Data [_cbdg ],_cefb &_fead .Data [_cbdg ],_fefbg );
_cbdg +=_fead .RowStride ;_cfdd +=_dbbd .RowStride ;};};case PixSrcXorDst :if _gbcdb {for _eced =0;_eced < _effe ;_eced ++{if _dgbf ==_beea {_cefb =_dbbd .Data [_faag ]<<_dafd ;if _aade {_cefb =_eaga (_cefb ,_dbbd .Data [_faag +1]>>_dfdg ,_geggb );};}else {_cefb =_dbbd .Data [_faag ]>>_dfdg ;
};_fead .Data [_bdag ]=_eaga (_fead .Data [_bdag ],_cefb ^_fead .Data [_bdag ],_bcgc );_bdag +=_fead .RowStride ;_faag +=_dbbd .RowStride ;};};if _gcgg {for _eced =0;_eced < _effe ;_eced ++{for _cbaed =0;_cbaed < _agbg ;_cbaed ++{_cefb =_eaga (_dbbd .Data [_fdbf +_cbaed ]<<_dafd ,_dbbd .Data [_fdbf +_cbaed +1]>>_dfdg ,_geggb );
_fead .Data [_dbcf +_cbaed ]^=_cefb ;};_dbcf +=_fead .RowStride ;_fdbf +=_dbbd .RowStride ;};};if _fbda {for _eced =0;_eced < _effe ;_eced ++{_cefb =_dbbd .Data [_cfdd ]<<_dafd ;if _ggef {_cefb =_eaga (_cefb ,_dbbd .Data [_cfdd +1]>>_dfdg ,_geggb );};_fead .Data [_cbdg ]=_eaga (_fead .Data [_cbdg ],_cefb ^_fead .Data [_cbdg ],_fefbg );
_cbdg +=_fead .RowStride ;_cfdd +=_dbbd .RowStride ;};};case PixNotSrcOrDst :if _gbcdb {for _eced =0;_eced < _effe ;_eced ++{if _dgbf ==_beea {_cefb =_dbbd .Data [_faag ]<<_dafd ;if _aade {_cefb =_eaga (_cefb ,_dbbd .Data [_faag +1]>>_dfdg ,_geggb );};
}else {_cefb =_dbbd .Data [_faag ]>>_dfdg ;};_fead .Data [_bdag ]=_eaga (_fead .Data [_bdag ],^_cefb |_fead .Data [_bdag ],_bcgc );_bdag +=_fead .RowStride ;_faag +=_dbbd .RowStride ;};};if _gcgg {for _eced =0;_eced < _effe ;_eced ++{for _cbaed =0;_cbaed < _agbg ;
_cbaed ++{_cefb =_eaga (_dbbd .Data [_fdbf +_cbaed ]<<_dafd ,_dbbd .Data [_fdbf +_cbaed +1]>>_dfdg ,_geggb );_fead .Data [_dbcf +_cbaed ]|=^_cefb ;};_dbcf +=_fead .RowStride ;_fdbf +=_dbbd .RowStride ;};};if _fbda {for _eced =0;_eced < _effe ;_eced ++{_cefb =_dbbd .Data [_cfdd ]<<_dafd ;
if _ggef {_cefb =_eaga (_cefb ,_dbbd .Data [_cfdd +1]>>_dfdg ,_geggb );};_fead .Data [_cbdg ]=_eaga (_fead .Data [_cbdg ],^_cefb |_fead .Data [_cbdg ],_fefbg );_cbdg +=_fead .RowStride ;_cfdd +=_dbbd .RowStride ;};};case PixNotSrcAndDst :if _gbcdb {for _eced =0;
_eced < _effe ;_eced ++{if _dgbf ==_beea {_cefb =_dbbd .Data [_faag ]<<_dafd ;if _aade {_cefb =_eaga (_cefb ,_dbbd .Data [_faag +1]>>_dfdg ,_geggb );};}else {_cefb =_dbbd .Data [_faag ]>>_dfdg ;};_fead .Data [_bdag ]=_eaga (_fead .Data [_bdag ],^_cefb &_fead .Data [_bdag ],_bcgc );
_bdag +=_fead .RowStride ;_faag +=_dbbd .RowStride ;};};if _gcgg {for _eced =0;_eced < _effe ;_eced ++{for _cbaed =0;_cbaed < _agbg ;_cbaed ++{_cefb =_eaga (_dbbd .Data [_fdbf +_cbaed ]<<_dafd ,_dbbd .Data [_fdbf +_cbaed +1]>>_dfdg ,_geggb );_fead .Data [_dbcf +_cbaed ]&=^_cefb ;
};_dbcf +=_fead .RowStride ;_fdbf +=_dbbd .RowStride ;};};if _fbda {for _eced =0;_eced < _effe ;_eced ++{_cefb =_dbbd .Data [_cfdd ]<<_dafd ;if _ggef {_cefb =_eaga (_cefb ,_dbbd .Data [_cfdd +1]>>_dfdg ,_geggb );};_fead .Data [_cbdg ]=_eaga (_fead .Data [_cbdg ],^_cefb &_fead .Data [_cbdg ],_fefbg );
_cbdg +=_fead .RowStride ;_cfdd +=_dbbd .RowStride ;};};case PixSrcOrNotDst :if _gbcdb {for _eced =0;_eced < _effe ;_eced ++{if _dgbf ==_beea {_cefb =_dbbd .Data [_faag ]<<_dafd ;if _aade {_cefb =_eaga (_cefb ,_dbbd .Data [_faag +1]>>_dfdg ,_geggb );};
}else {_cefb =_dbbd .Data [_faag ]>>_dfdg ;};_fead .Data [_bdag ]=_eaga (_fead .Data [_bdag ],_cefb |^_fead .Data [_bdag ],_bcgc );_bdag +=_fead .RowStride ;_faag +=_dbbd .RowStride ;};};if _gcgg {for _eced =0;_eced < _effe ;_eced ++{for _cbaed =0;_cbaed < _agbg ;
_cbaed ++{_cefb =_eaga (_dbbd .Data [_fdbf +_cbaed ]<<_dafd ,_dbbd .Data [_fdbf +_cbaed +1]>>_dfdg ,_geggb );_fead .Data [_dbcf +_cbaed ]=_cefb |^_fead .Data [_dbcf +_cbaed ];};_dbcf +=_fead .RowStride ;_fdbf +=_dbbd .RowStride ;};};if _fbda {for _eced =0;
_eced < _effe ;_eced ++{_cefb =_dbbd .Data [_cfdd ]<<_dafd ;if _ggef {_cefb =_eaga (_cefb ,_dbbd .Data [_cfdd +1]>>_dfdg ,_geggb );};_fead .Data [_cbdg ]=_eaga (_fead .Data [_cbdg ],_cefb |^_fead .Data [_cbdg ],_fefbg );_cbdg +=_fead .RowStride ;_cfdd +=_dbbd .RowStride ;
};};case PixSrcAndNotDst :if _gbcdb {for _eced =0;_eced < _effe ;_eced ++{if _dgbf ==_beea {_cefb =_dbbd .Data [_faag ]<<_dafd ;if _aade {_cefb =_eaga (_cefb ,_dbbd .Data [_faag +1]>>_dfdg ,_geggb );};}else {_cefb =_dbbd .Data [_faag ]>>_dfdg ;};_fead .Data [_bdag ]=_eaga (_fead .Data [_bdag ],_cefb &^_fead .Data [_bdag ],_bcgc );
_bdag +=_fead .RowStride ;_faag +=_dbbd .RowStride ;};};if _gcgg {for _eced =0;_eced < _effe ;_eced ++{for _cbaed =0;_cbaed < _agbg ;_cbaed ++{_cefb =_eaga (_dbbd .Data [_fdbf +_cbaed ]<<_dafd ,_dbbd .Data [_fdbf +_cbaed +1]>>_dfdg ,_geggb );_fead .Data [_dbcf +_cbaed ]=_cefb &^_fead .Data [_dbcf +_cbaed ];
};_dbcf +=_fead .RowStride ;_fdbf +=_dbbd .RowStride ;};};if _fbda {for _eced =0;_eced < _effe ;_eced ++{_cefb =_dbbd .Data [_cfdd ]<<_dafd ;if _ggef {_cefb =_eaga (_cefb ,_dbbd .Data [_cfdd +1]>>_dfdg ,_geggb );};_fead .Data [_cbdg ]=_eaga (_fead .Data [_cbdg ],_cefb &^_fead .Data [_cbdg ],_fefbg );
_cbdg +=_fead .RowStride ;_cfdd +=_dbbd .RowStride ;};};case PixNotPixSrcOrDst :if _gbcdb {for _eced =0;_eced < _effe ;_eced ++{if _dgbf ==_beea {_cefb =_dbbd .Data [_faag ]<<_dafd ;if _aade {_cefb =_eaga (_cefb ,_dbbd .Data [_faag +1]>>_dfdg ,_geggb );
};}else {_cefb =_dbbd .Data [_faag ]>>_dfdg ;};_fead .Data [_bdag ]=_eaga (_fead .Data [_bdag ],^(_cefb |_fead .Data [_bdag ]),_bcgc );_bdag +=_fead .RowStride ;_faag +=_dbbd .RowStride ;};};if _gcgg {for _eced =0;_eced < _effe ;_eced ++{for _cbaed =0;
_cbaed < _agbg ;_cbaed ++{_cefb =_eaga (_dbbd .Data [_fdbf +_cbaed ]<<_dafd ,_dbbd .Data [_fdbf +_cbaed +1]>>_dfdg ,_geggb );_fead .Data [_dbcf +_cbaed ]=^(_cefb |_fead .Data [_dbcf +_cbaed ]);};_dbcf +=_fead .RowStride ;_fdbf +=_dbbd .RowStride ;};};if _fbda {for _eced =0;
_eced < _effe ;_eced ++{_cefb =_dbbd .Data [_cfdd ]<<_dafd ;if _ggef {_cefb =_eaga (_cefb ,_dbbd .Data [_cfdd +1]>>_dfdg ,_geggb );};_fead .Data [_cbdg ]=_eaga (_fead .Data [_cbdg ],^(_cefb |_fead .Data [_cbdg ]),_fefbg );_cbdg +=_fead .RowStride ;_cfdd +=_dbbd .RowStride ;
};};case PixNotPixSrcAndDst :if _gbcdb {for _eced =0;_eced < _effe ;_eced ++{if _dgbf ==_beea {_cefb =_dbbd .Data [_faag ]<<_dafd ;if _aade {_cefb =_eaga (_cefb ,_dbbd .Data [_faag +1]>>_dfdg ,_geggb );};}else {_cefb =_dbbd .Data [_faag ]>>_dfdg ;};_fead .Data [_bdag ]=_eaga (_fead .Data [_bdag ],^(_cefb &_fead .Data [_bdag ]),_bcgc );
_bdag +=_fead .RowStride ;_faag +=_dbbd .RowStride ;};};if _gcgg {for _eced =0;_eced < _effe ;_eced ++{for _cbaed =0;_cbaed < _agbg ;_cbaed ++{_cefb =_eaga (_dbbd .Data [_fdbf +_cbaed ]<<_dafd ,_dbbd .Data [_fdbf +_cbaed +1]>>_dfdg ,_geggb );_fead .Data [_dbcf +_cbaed ]=^(_cefb &_fead .Data [_dbcf +_cbaed ]);
};_dbcf +=_fead .RowStride ;_fdbf +=_dbbd .RowStride ;};};if _fbda {for _eced =0;_eced < _effe ;_eced ++{_cefb =_dbbd .Data [_cfdd ]<<_dafd ;if _ggef {_cefb =_eaga (_cefb ,_dbbd .Data [_cfdd +1]>>_dfdg ,_geggb );};_fead .Data [_cbdg ]=_eaga (_fead .Data [_cbdg ],^(_cefb &_fead .Data [_cbdg ]),_fefbg );
_cbdg +=_fead .RowStride ;_cfdd +=_dbbd .RowStride ;};};case PixNotPixSrcXorDst :if _gbcdb {for _eced =0;_eced < _effe ;_eced ++{if _dgbf ==_beea {_cefb =_dbbd .Data [_faag ]<<_dafd ;if _aade {_cefb =_eaga (_cefb ,_dbbd .Data [_faag +1]>>_dfdg ,_geggb );
};}else {_cefb =_dbbd .Data [_faag ]>>_dfdg ;};_fead .Data [_bdag ]=_eaga (_fead .Data [_bdag ],^(_cefb ^_fead .Data [_bdag ]),_bcgc );_bdag +=_fead .RowStride ;_faag +=_dbbd .RowStride ;};};if _gcgg {for _eced =0;_eced < _effe ;_eced ++{for _cbaed =0;
_cbaed < _agbg ;_cbaed ++{_cefb =_eaga (_dbbd .Data [_fdbf +_cbaed ]<<_dafd ,_dbbd .Data [_fdbf +_cbaed +1]>>_dfdg ,_geggb );_fead .Data [_dbcf +_cbaed ]=^(_cefb ^_fead .Data [_dbcf +_cbaed ]);};_dbcf +=_fead .RowStride ;_fdbf +=_dbbd .RowStride ;};};if _fbda {for _eced =0;
_eced < _effe ;_eced ++{_cefb =_dbbd .Data [_cfdd ]<<_dafd ;if _ggef {_cefb =_eaga (_cefb ,_dbbd .Data [_cfdd +1]>>_dfdg ,_geggb );};_fead .Data [_cbdg ]=_eaga (_fead .Data [_cbdg ],^(_cefb ^_fead .Data [_cbdg ]),_fefbg );_cbdg +=_fead .RowStride ;_cfdd +=_dbbd .RowStride ;
};};default:_aa .Log .Debug ("\u004f\u0070e\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0074\u0020\u0070\u0065\u0072\u006d\u0069tt\u0065\u0064",_cfec );return _c .Error ("\u0072a\u0073t\u0065\u0072\u004f\u0070\u0047e\u006e\u0065r\u0061\u006c\u004c\u006f\u0077","\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065r\u0061\u0074\u0069\u006f\u006e\u0020\u006eo\u0074\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074\u0065\u0064");
};return nil ;};type byWidth Bitmaps ;func (_cge *Bitmap )And (s *Bitmap )(_aeg *Bitmap ,_ded error ){const _ddc ="\u0042\u0069\u0074\u006d\u0061\u0070\u002e\u0041\u006e\u0064";if _cge ==nil {return nil ,_c .Error (_ddc ,"\u0027b\u0069t\u006d\u0061\u0070\u0020\u0027b\u0027\u0020i\u0073\u0020\u006e\u0069\u006c");
};if s ==nil {return nil ,_c .Error (_ddc ,"\u0062\u0069\u0074\u006d\u0061\u0070\u0020\u0027\u0073\u0027\u0020\u0069s\u0020\u006e\u0069\u006c");};if !_cge .SizesEqual (s ){_aa .Log .Debug ("\u0025\u0073\u0020-\u0020\u0042\u0069\u0074\u006d\u0061\u0070\u0020\u0027\u0073\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0073\u0069\u007a\u0065 \u0077\u0069\u0074\u0068\u0020\u0027\u0062\u0027",_ddc );
};if _aeg ,_ded =_fcbc (_aeg ,_cge );_ded !=nil {return nil ,_c .Wrap (_ded ,_ddc ,"\u0063\u0061\u006e't\u0020\u0063\u0072\u0065\u0061\u0074\u0065\u0020\u0027\u0064\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _ded =_aeg .RasterOperation (0,0,_aeg .Width ,_aeg .Height ,PixSrcAndDst ,s ,0,0);
_ded !=nil {return nil ,_c .Wrap (_ded ,_ddc ,"");};return _aeg ,nil ;};var (_egcde =_gb ();_dfge =_gfb ();_ccfe =_cdb (););func (_gcf *Bitmap )resizeImageData (_fcbf *Bitmap )error {if _fcbf ==nil {return _c .Error ("\u0072e\u0073i\u007a\u0065\u0049\u006d\u0061\u0067\u0065\u0044\u0061\u0074\u0061","\u0073r\u0063 \u0069\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _gcf .SizesEqual (_fcbf ){return nil ;};_gcf .Data =make ([]byte ,len (_fcbf .Data ));_gcf .Width =_fcbf .Width ;_gcf .Height =_fcbf .Height ;_gcf .RowStride =_fcbf .RowStride ;return nil ;};func _edca (_bdce *Bitmap ,_agdg ,_eeag ,_egda ,_dbde int ,_cfeeb RasterOperator ,_dbce *Bitmap ,_geaa ,_becd int )error {const _bdbg ="\u0072a\u0073t\u0065\u0072\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e";
if _bdce ==nil {return _c .Error (_bdbg ,"\u006e\u0069\u006c\u0020\u0027\u0064\u0065\u0073\u0074\u0027\u0020\u0042i\u0074\u006d\u0061\u0070");};if _cfeeb ==PixDst {return nil ;};switch _cfeeb {case PixClr ,PixSet ,PixNotDst :_fcf (_bdce ,_agdg ,_eeag ,_egda ,_dbde ,_cfeeb );
return nil ;};if _dbce ==nil {_aa .Log .Debug ("\u0052a\u0073\u0074e\u0072\u004f\u0070\u0065r\u0061\u0074\u0069o\u006e\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020bi\u0074\u006d\u0061p\u0020\u0069s\u0020\u006e\u006f\u0074\u0020\u0064e\u0066\u0069n\u0065\u0064");
return _c .Error (_bdbg ,"\u006e\u0069l\u0020\u0027\u0073r\u0063\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _dfae :=_cgaf (_bdce ,_agdg ,_eeag ,_egda ,_dbde ,_cfeeb ,_dbce ,_geaa ,_becd );_dfae !=nil {return _c .Wrap (_dfae ,_bdbg ,"");};return nil ;
};func TstDSymbol (t *_cd .T ,scale ...int )*Bitmap {_baaa ,_bcdg :=NewWithData (4,5,[]byte {0xf0,0x90,0x90,0x90,0xE0});_fe .NoError (t ,_bcdg );return TstGetScaledSymbol (t ,_baaa ,scale ...);};func Centroids (bms []*Bitmap )(*Points ,error ){_fec :=make ([]Point ,len (bms ));
_dcab :=_dfbfc ();_bbeb :=_fcdbf ();var _eecb error ;for _bgb ,_ddf :=range bms {_fec [_bgb ],_eecb =_ddf .centroid (_dcab ,_bbeb );if _eecb !=nil {return nil ,_eecb ;};};_addgg :=Points (_fec );return &_addgg ,nil ;};func (_efcaa *ClassedPoints )validateIntSlice ()error {const _gcee ="\u0076\u0061l\u0069\u0064\u0061t\u0065\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065";
for _ ,_gabfg :=range _efcaa .IntSlice {if _gabfg >=(_efcaa .Points .Size ()){return _c .Errorf (_gcee ,"c\u006c\u0061\u0073\u0073\u0020\u0069\u0064\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0076\u0061\u006ci\u0064 \u0069\u006e\u0064\u0065x\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0070\u006f\u0069\u006e\u0074\u0073\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u003a\u0020\u0025\u0064",_gabfg ,_efcaa .Points .Size ());
};};return nil ;};func init (){for _gbe :=0;_gbe < 256;_gbe ++{_fcg [_gbe ]=uint8 (_gbe &0x1)+(uint8 (_gbe >>1)&0x1)+(uint8 (_gbe >>2)&0x1)+(uint8 (_gbe >>3)&0x1)+(uint8 (_gbe >>4)&0x1)+(uint8 (_gbe >>5)&0x1)+(uint8 (_gbe >>6)&0x1)+(uint8 (_gbe >>7)&0x1);
};};func (_edd *Bitmap )CountPixels ()int {return _edd .countPixels ()};func _bdec (_eff ,_cagc *Bitmap ,_gagg ,_dcgc ,_dff ,_eefa ,_ace int ,_caaacg CombinationOperator )error {var _faab int ;_ebbee :=func (){_faab ++;_dff +=_cagc .RowStride ;_eefa +=_eff .RowStride ;
_ace +=_eff .RowStride };for _faab =_gagg ;_faab < _dcgc ;_ebbee (){_cdeg :=_dff ;for _badb :=_eefa ;_badb <=_ace ;_badb ++{_eacbc ,_dfbb :=_cagc .GetByte (_cdeg );if _dfbb !=nil {return _dfbb ;};_eafc ,_dfbb :=_eff .GetByte (_badb );if _dfbb !=nil {return _dfbb ;
};if _dfbb =_cagc .SetByte (_cdeg ,_cege (_eacbc ,_eafc ,_caaacg ));_dfbb !=nil {return _dfbb ;};_cdeg ++;};};return nil ;};func TstGetScaledSymbol (t *_cd .T ,sm *Bitmap ,scale ...int )*Bitmap {if len (scale )==0{return sm ;};if scale [0]==1{return sm ;
};_edgdc ,_ccfgc :=MorphSequence (sm ,MorphProcess {Operation :MopReplicativeBinaryExpansion ,Arguments :scale });_fe .NoError (t ,_ccfgc );return _edgdc ;};func _ggfe (_cddb ,_cbef *Bitmap ,_ccgf ,_ggag ,_cfbe uint ,_eaee ,_gbeg int ,_gdga bool ,_faafd ,_cddbf int )error {for _edac :=_eaee ;
_edac < _gbeg ;_edac ++{if _faafd +1< len (_cddb .Data ){_cggfa :=_edac +1==_gbeg ;_adage ,_geb :=_cddb .GetByte (_faafd );if _geb !=nil {return _geb ;};_faafd ++;_adage <<=_ccgf ;_bfcbc ,_geb :=_cddb .GetByte (_faafd );if _geb !=nil {return _geb ;};_bfcbc >>=_ggag ;
_eegg :=_adage |_bfcbc ;if _cggfa &&!_gdga {_eegg =_eabg (_cfbe ,_eegg );};_geb =_cbef .SetByte (_cddbf ,_eegg );if _geb !=nil {return _geb ;};_cddbf ++;if _cggfa &&_gdga {_bgede ,_dafe :=_cddb .GetByte (_faafd );if _dafe !=nil {return _dafe ;};_bgede <<=_ccgf ;
_eegg =_eabg (_cfbe ,_bgede );if _dafe =_cbef .SetByte (_cddbf ,_eegg );_dafe !=nil {return _dafe ;};};continue ;};_cca ,_ebg :=_cddb .GetByte (_faafd );if _ebg !=nil {_aa .Log .Debug ("G\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0068\u0065\u0020\u0076\u0061l\u0075\u0065\u0020\u0061\u0074\u003a\u0020%\u0064\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020%\u0073",_faafd ,_ebg );
return _ebg ;};_cca <<=_ccgf ;_faafd ++;_ebg =_cbef .SetByte (_cddbf ,_cca );if _ebg !=nil {return _ebg ;};_cddbf ++;};return nil ;};func _bece (_bfef ,_aegce *Bitmap ,_faee ,_eadc int )(*Bitmap ,error ){const _aedc ="d\u0069\u006c\u0061\u0074\u0065\u0042\u0072\u0069\u0063\u006b";
if _aegce ==nil {_aa .Log .Debug ("\u0064\u0069\u006c\u0061\u0074\u0065\u0042\u0072\u0069\u0063k\u0020\u0073\u006f\u0075\u0072\u0063\u0065 \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");return nil ,_c .Error (_aedc ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");
};if _faee < 1||_eadc < 1{return nil ,_c .Error (_aedc ,"\u0068\u0053\u007a\u0069\u0065 \u0061\u006e\u0064\u0020\u0076\u0053\u0069\u007a\u0065\u0020\u0061\u0072\u0065 \u006e\u006f\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0031");
};if _faee ==1&&_eadc ==1{_caec ,_eaebb :=_fcbc (_bfef ,_aegce );if _eaebb !=nil {return nil ,_c .Wrap (_eaebb ,_aedc ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u0026\u0026 \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _caec ,nil ;};if _faee ==1||_eadc ==1{_gbea :=SelCreateBrick (_eadc ,_faee ,_eadc /2,_faee /2,SelHit );_dccbb ,_ecafb :=_eddc (_bfef ,_aegce ,_gbea );if _ecafb !=nil {return nil ,_c .Wrap (_ecafb ,_aedc ,"\u0068s\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _dccbb ,nil ;};_fgfb :=SelCreateBrick (1,_faee ,0,_faee /2,SelHit );_egd :=SelCreateBrick (_eadc ,1,_eadc /2,0,SelHit );_ccdf ,_affe :=_eddc (nil ,_aegce ,_fgfb );if _affe !=nil {return nil ,_c .Wrap (_affe ,_aedc ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};_bfef ,_affe =_eddc (_bfef ,_ccdf ,_egd );if _affe !=nil {return nil ,_c .Wrap (_affe ,_aedc ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};return _bfef ,nil ;};func DilateBrick (d ,s *Bitmap ,hSize ,vSize int )(*Bitmap ,error ){return _bece (d ,s ,hSize ,vSize )};
func (_gbga *Selection )setOrigin (_cafb ,_eaag int ){_gbga .Cy ,_gbga .Cx =_cafb ,_eaag };func (_ccd *Bitmap )addBorderGeneral (_bbgf ,_adfb ,_ddb ,_babf int ,_caaac int )(*Bitmap ,error ){const _ebbb ="\u0061\u0064d\u0042\u006f\u0072d\u0065\u0072\u0047\u0065\u006e\u0065\u0072\u0061\u006c";
if _bbgf < 0||_adfb < 0||_ddb < 0||_babf < 0{return nil ,_c .Error (_ebbb ,"n\u0065\u0067\u0061\u0074iv\u0065 \u0062\u006f\u0072\u0064\u0065r\u0020\u0061\u0064\u0064\u0065\u0064");};_edc ,_geg :=_ccd .Width ,_ccd .Height ;_gfa :=_edc +_bbgf +_adfb ;_aag :=_geg +_ddb +_babf ;
_aea :=New (_gfa ,_aag );_aea .Color =_ccd .Color ;_adag :=PixClr ;if _caaac > 0{_adag =PixSet ;};_dfe :=_aea .RasterOperation (0,0,_bbgf ,_aag ,_adag ,nil ,0,0);if _dfe !=nil {return nil ,_c .Wrap (_dfe ,_ebbb ,"\u006c\u0065\u0066\u0074");};_dfe =_aea .RasterOperation (_gfa -_adfb ,0,_adfb ,_aag ,_adag ,nil ,0,0);
if _dfe !=nil {return nil ,_c .Wrap (_dfe ,_ebbb ,"\u0072\u0069\u0067h\u0074");};_dfe =_aea .RasterOperation (0,0,_gfa ,_ddb ,_adag ,nil ,0,0);if _dfe !=nil {return nil ,_c .Wrap (_dfe ,_ebbb ,"\u0074\u006f\u0070");};_dfe =_aea .RasterOperation (0,_aag -_babf ,_gfa ,_babf ,_adag ,nil ,0,0);
if _dfe !=nil {return nil ,_c .Wrap (_dfe ,_ebbb ,"\u0062\u006f\u0074\u0074\u006f\u006d");};_dfe =_aea .RasterOperation (_bbgf ,_ddb ,_edc ,_geg ,PixSrc ,_ccd ,0,0);if _dfe !=nil {return nil ,_c .Wrap (_dfe ,_ebbb ,"\u0063\u006f\u0070\u0079");};return _aea ,nil ;
};func _faaf ()(_afg []byte ){_afg =make ([]byte ,256);for _egc :=0;_egc < 256;_egc ++{_dga :=byte (_egc );_afg [_dga ]=(_dga &0x01)|((_dga &0x04)>>1)|((_dga &0x10)>>2)|((_dga &0x40)>>3)|((_dga &0x02)<<3)|((_dga &0x08)<<2)|((_dga &0x20)<<1)|(_dga &0x80);
};return _afg ;};func CombineBytes (oldByte ,newByte byte ,op CombinationOperator )byte {return _cege (oldByte ,newByte ,op );};func (_gcdf *ClassedPoints )SortByY (){_gcdf ._dbea =_gcdf .ySortFunction ();_ff .Sort (_gcdf )};func (_aebd *Bitmaps )GroupByWidth ()(*BitmapsArray ,error ){const _ebgg ="\u0047\u0072\u006fu\u0070\u0042\u0079\u0057\u0069\u0064\u0074\u0068";
if len (_aebd .Values )==0{return nil ,_c .Error (_ebgg ,"\u006eo\u0020v\u0061\u006c\u0075\u0065\u0073 \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};_ebfbd :=&BitmapsArray {};_aebd .SortByWidth ();_fcfa :=-1;_fdef :=-1;for _agcf :=0;_agcf < len (_aebd .Values );
_agcf ++{_ebda :=_aebd .Values [_agcf ].Width ;if _ebda > _fcfa {_fcfa =_ebda ;_fdef ++;_ebfbd .Values =append (_ebfbd .Values ,&Bitmaps {});};_ebfbd .Values [_fdef ].AddBitmap (_aebd .Values [_agcf ]);};return _ebfbd ,nil ;};func (_dee *Bitmap )AddBorderGeneral (left ,right ,top ,bot int ,val int )(*Bitmap ,error ){return _dee .addBorderGeneral (left ,right ,top ,bot ,val );
};func _decb (_affa *Bitmap ,_aegca int )(*Bitmap ,error ){const _dgfgd ="\u0065x\u0070a\u006e\u0064\u0052\u0065\u0070\u006c\u0069\u0063\u0061\u0074\u0065";if _affa ==nil {return nil ,_c .Error (_dgfgd ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _aegca <=0{return nil ,_c .Error (_dgfgd ,"i\u006e\u0076\u0061\u006cid\u0020f\u0061\u0063\u0074\u006f\u0072 \u002d\u0020\u003c\u003d\u0020\u0030");};if _aegca ==1{_dadc ,_dccd :=_fcbc (nil ,_affa );if _dccd !=nil {return nil ,_c .Wrap (_dccd ,_dgfgd ,"\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u003d\u0020\u0031");
};return _dadc ,nil ;};_fgfbf ,_fefd :=_dfa (_affa ,_aegca ,_aegca );if _fefd !=nil {return nil ,_c .Wrap (_fefd ,_dgfgd ,"");};return _fgfbf ,nil ;};const (Vanilla Color =iota ;Chocolate ;);func (_dadd *Boxes )SelectBySize (width ,height int ,tp LocationFilter ,relation SizeComparison )(_cbabc *Boxes ,_ebfcb error ){const _efcf ="\u0042o\u0078e\u0073\u002e\u0053\u0065\u006ce\u0063\u0074B\u0079\u0053\u0069\u007a\u0065";
if _dadd ==nil {return nil ,_c .Error (_efcf ,"b\u006f\u0078\u0065\u0073 '\u0062'\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064");};if len (*_dadd )==0{return _dadd ,nil ;};switch tp {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_c .Errorf (_efcf ,"\u0069\u006e\u0076al\u0069\u0064\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",tp );
};switch relation {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE :default:return nil ,_c .Errorf (_efcf ,"i\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0020t\u0079\u0070\u0065:\u0020'\u0025\u0064\u0027",tp );
};_cbegf :=_dadd .makeSizeIndicator (width ,height ,tp ,relation );_baad ,_ebfcb :=_dadd .selectWithIndicator (_cbegf );if _ebfcb !=nil {return nil ,_c .Wrap (_ebfcb ,_efcf ,"");};return _baad ,nil ;};func _fcbc (_fbfgg ,_abdg *Bitmap )(*Bitmap ,error ){if _abdg ==nil {return nil ,_c .Error ("\u0063\u006f\u0070\u0079\u0042\u0069\u0074\u006d\u0061\u0070","\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _abdg ==_fbfgg {return _fbfgg ,nil ;};if _fbfgg ==nil {_fbfgg =_abdg .createTemplate ();copy (_fbfgg .Data ,_abdg .Data );return _fbfgg ,nil ;};_ddg :=_fbfgg .resizeImageData (_abdg );if _ddg !=nil {return nil ,_c .Wrap (_ddg ,"\u0063\u006f\u0070\u0079\u0042\u0069\u0074\u006d\u0061\u0070","");
};_fbfgg .Text =_abdg .Text ;copy (_fbfgg .Data ,_abdg .Data );return _fbfgg ,nil ;};func MakePixelCentroidTab8 ()[]int {return _dfbfc ()};func (_aadd *ClassedPoints )Len ()int {return _aadd .IntSlice .Size ()};func _dgce (_ddefe ,_dafgd *Bitmap ,_bfcfd *Selection )(*Bitmap ,error ){const _egca ="c\u006c\u006f\u0073\u0065\u0042\u0069\u0074\u006d\u0061\u0070";
var _ddd error ;if _ddefe ,_ddd =_aead (_ddefe ,_dafgd ,_bfcfd );_ddd !=nil {return nil ,_ddd ;};_afaa ,_ddd :=_eddc (nil ,_dafgd ,_bfcfd );if _ddd !=nil {return nil ,_c .Wrap (_ddd ,_egca ,"");};if _ ,_ddd =_fgd (_ddefe ,_afaa ,_bfcfd );_ddd !=nil {return nil ,_c .Wrap (_ddd ,_egca ,"");
};return _ddefe ,nil ;};func _dfc (_fbg ,_edb *Bitmap ,_feg int ,_ada []byte ,_cbab int )(_becg error ){const _dfg ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0033";var (_bfg ,_ggd ,_ebfg ,_eae ,_bfc ,_gbg ,_cbd ,_gc int ;
_dgee ,_dbf ,_fdbc ,_aba uint32 ;_bagg ,_aad byte ;_cadg uint16 ;);_ead :=make ([]byte ,4);_ffdf :=make ([]byte ,4);for _ebfg =0;_ebfg < _fbg .Height -1;_ebfg ,_eae =_ebfg +2,_eae +1{_bfg =_ebfg *_fbg .RowStride ;_ggd =_eae *_edb .RowStride ;for _bfc ,_gbg =0,0;
_bfc < _cbab ;_bfc ,_gbg =_bfc +4,_gbg +1{for _cbd =0;_cbd < 4;_cbd ++{_gc =_bfg +_bfc +_cbd ;if _gc <=len (_fbg .Data )-1&&_gc < _bfg +_fbg .RowStride {_ead [_cbd ]=_fbg .Data [_gc ];}else {_ead [_cbd ]=0x00;};_gc =_bfg +_fbg .RowStride +_bfc +_cbd ;if _gc <=len (_fbg .Data )-1&&_gc < _bfg +(2*_fbg .RowStride ){_ffdf [_cbd ]=_fbg .Data [_gc ];
}else {_ffdf [_cbd ]=0x00;};};_dgee =_g .BigEndian .Uint32 (_ead );_dbf =_g .BigEndian .Uint32 (_ffdf );_fdbc =_dgee &_dbf ;_fdbc |=_fdbc <<1;_aba =_dgee |_dbf ;_aba &=_aba <<1;_dbf =_fdbc &_aba ;_dbf &=0xaaaaaaaa;_dgee =_dbf |(_dbf <<7);_bagg =byte (_dgee >>24);
_aad =byte ((_dgee >>8)&0xff);_gc =_ggd +_gbg ;if _gc +1==len (_edb .Data )-1||_gc +1>=_ggd +_edb .RowStride {if _becg =_edb .SetByte (_gc ,_ada [_bagg ]);_becg !=nil {return _c .Wrapf (_becg ,_dfg ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_gc );
};}else {_cadg =(uint16 (_ada [_bagg ])<<8)|uint16 (_ada [_aad ]);if _becg =_edb .setTwoBytes (_gc ,_cadg );_becg !=nil {return _c .Wrapf (_becg ,_dfg ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_gc );
};_gbg ++;};};};return nil ;};func _fabd (_cdeag *Bitmap ,_eeaf *_e .Stack ,_gaadd ,_dafc ,_fefbf int )(_ffde *_ee .Rectangle ,_dcgec error ){const _fgdf ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";if _cdeag ==nil {return nil ,_c .Error (_fgdf ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");
};if _eeaf ==nil {return nil ,_c .Error (_fgdf ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");};switch _fefbf {case 4:if _ffde ,_dcgec =_fdgc (_cdeag ,_eeaf ,_gaadd ,_dafc );_dcgec !=nil {return nil ,_c .Wrap (_dcgec ,_fgdf ,"");
};return _ffde ,nil ;case 8:if _ffde ,_dcgec =_ebgcc (_cdeag ,_eeaf ,_gaadd ,_dafc );_dcgec !=nil {return nil ,_c .Wrap (_dcgec ,_fgdf ,"");};return _ffde ,nil ;default:return nil ,_c .Errorf (_fgdf ,"\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u0069\u0073 \u006eo\u0074\u0020\u0034\u0020\u006f\u0072\u0020\u0038\u003a\u0020\u0027\u0025\u0064\u0027",_fefbf );
};};func (_gedc *Bitmap )setAll ()error {_begc :=_edca (_gedc ,0,0,_gedc .Width ,_gedc .Height ,PixSet ,nil ,0,0);if _begc !=nil {return _c .Wrap (_begc ,"\u0073\u0065\u0074\u0041\u006c\u006c","");};return nil ;};func (_afec *Bitmap )connComponentsBB (_ecf int )(_feee *Boxes ,_feb error ){const _age ="\u0042\u0069\u0074ma\u0070\u002e\u0063\u006f\u006e\u006e\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0042\u0042";
if _ecf !=4&&_ecf !=8{return nil ,_c .Error (_age ,"\u0063\u006f\u006e\u006e\u0065\u0063t\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0027\u0034\u0027\u0020\u006fr\u0020\u0027\u0038\u0027");};if _afec .Zero (){return &Boxes {},nil ;
};_afec .setPadBits (0);_ccbf ,_feb :=_fcbc (nil ,_afec );if _feb !=nil {return nil ,_c .Wrap (_feb ,_age ,"\u0062\u006d\u0031");};_ebgd :=&_e .Stack {};_ebgd .Aux =&_e .Stack {};_feee =&Boxes {};var (_adee ,_gbdf int ;_dabe _ee .Point ;_bbcbe bool ;_bdaa *_ee .Rectangle ;
);for {if _dabe ,_bbcbe ,_feb =_ccbf .nextOnPixel (_gbdf ,_adee );_feb !=nil {return nil ,_c .Wrap (_feb ,_age ,"");};if !_bbcbe {break ;};if _bdaa ,_feb =_fabd (_ccbf ,_ebgd ,_dabe .X ,_dabe .Y ,_ecf );_feb !=nil {return nil ,_c .Wrap (_feb ,_age ,"");
};if _feb =_feee .Add (_bdaa );_feb !=nil {return nil ,_c .Wrap (_feb ,_age ,"");};_gbdf =_dabe .X ;_adee =_dabe .Y ;};return _feee ,nil ;};func (_eadg *Boxes )Add (box *_ee .Rectangle )error {if _eadg ==nil {return _c .Error ("\u0042o\u0078\u0065\u0073\u002e\u0041\u0064d","\u0027\u0042\u006f\u0078es\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};*_eadg =append (*_eadg ,box );return nil ;};func (_cce *Bitmap )createTemplate ()*Bitmap {return &Bitmap {Width :_cce .Width ,Height :_cce .Height ,RowStride :_cce .RowStride ,Color :_cce .Color ,Text :_cce .Text ,BitmapNumber :_cce .BitmapNumber ,Special :_cce .Special ,Data :make ([]byte ,len (_cce .Data ))};
};func (_cebb *Boxes )selectWithIndicator (_fad *_e .NumSlice )(_bgcc *Boxes ,_ffc error ){const _faea ="\u0042o\u0078\u0065\u0073\u002es\u0065\u006c\u0065\u0063\u0074W\u0069t\u0068I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";if _cebb ==nil {return nil ,_c .Error (_faea ,"b\u006f\u0078\u0065\u0073 '\u0062'\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064");
};if _fad ==nil {return nil ,_c .Error (_faea ,"\u0027\u006ea\u0027\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if len (*_fad )!=len (*_cebb ){return nil ,_c .Error (_faea ,"\u0062\u006f\u0078\u0065\u0073\u0020\u0027\u0062\u0027\u0020\u0068\u0061\u0073\u0020\u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006e\u0074\u0020s\u0069\u007a\u0065\u0020\u0074h\u0061\u006e \u0027\u006e\u0061\u0027");
};var _ceec ,_bcbe int ;for _gaf :=0;_gaf < len (*_fad );_gaf ++{if _ceec ,_ffc =_fad .GetInt (_gaf );_ffc !=nil {return nil ,_c .Wrap (_ffc ,_faea ,"\u0063\u0068\u0065\u0063\u006b\u0069\u006e\u0067\u0020c\u006f\u0075\u006e\u0074");};if _ceec ==1{_bcbe ++;
};};if _bcbe ==len (*_cebb ){return _cebb ,nil ;};_cagf :=Boxes {};for _cgeg :=0;_cgeg < len (*_fad );_cgeg ++{_ceec =int ((*_fad )[_cgeg ]);if _ceec ==0{continue ;};_cagf =append (_cagf ,(*_cebb )[_cgeg ]);};_bgcc =&_cagf ;return _bgcc ,nil ;};func (_cfeb *Bitmap )SetDefaultPixel (){for _ddef :=range _cfeb .Data {_cfeb .Data [_ddef ]=byte (0xff);
};};const (MopDilation MorphOperation =iota ;MopErosion ;MopOpening ;MopClosing ;MopRankBinaryReduction ;MopReplicativeBinaryExpansion ;MopAddBorder ;);var _fed =[5]int {1,2,3,0,4};func TstOSymbol (t *_cd .T ,scale ...int )*Bitmap {_bbagg ,_gdcaa :=NewWithData (4,5,[]byte {0xF0,0x90,0x90,0x90,0xF0});
_fe .NoError (t ,_gdcaa );return TstGetScaledSymbol (t ,_bbagg ,scale ...);};func _edbc (_fadb ,_cgda *Bitmap ,_deeb ,_eddg int )(_eagg error ){const _ebfcc ="\u0073e\u0065d\u0066\u0069\u006c\u006c\u0042i\u006e\u0061r\u0079\u004c\u006f\u0077\u0034";var (_bcgcf ,_gaegd ,_fcgb ,_dccc int ;
_egbd ,_cfef ,_acff ,_fbad ,_daee ,_cbege ,_bgfb byte ;);for _bcgcf =0;_bcgcf < _deeb ;_bcgcf ++{_fcgb =_bcgcf *_fadb .RowStride ;_dccc =_bcgcf *_cgda .RowStride ;for _gaegd =0;_gaegd < _eddg ;_gaegd ++{_egbd ,_eagg =_fadb .GetByte (_fcgb +_gaegd );if _eagg !=nil {return _c .Wrap (_eagg ,_ebfcc ,"\u0066i\u0072\u0073\u0074\u0020\u0067\u0065t");
};_cfef ,_eagg =_cgda .GetByte (_dccc +_gaegd );if _eagg !=nil {return _c .Wrap (_eagg ,_ebfcc ,"\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0067\u0065\u0074");};if _bcgcf > 0{_acff ,_eagg =_fadb .GetByte (_fcgb -_fadb .RowStride +_gaegd );if _eagg !=nil {return _c .Wrap (_eagg ,_ebfcc ,"\u0069\u0020\u003e \u0030");
};_egbd |=_acff ;};if _gaegd > 0{_fbad ,_eagg =_fadb .GetByte (_fcgb +_gaegd -1);if _eagg !=nil {return _c .Wrap (_eagg ,_ebfcc ,"\u006a\u0020\u003e \u0030");};_egbd |=_fbad <<7;};_egbd &=_cfef ;if _egbd ==0||(^_egbd )==0{if _eagg =_fadb .SetByte (_fcgb +_gaegd ,_egbd );
_eagg !=nil {return _c .Wrap (_eagg ,_ebfcc ,"b\u0074\u0020\u003d\u003d 0\u0020|\u007c\u0020\u0028\u005e\u0062t\u0029\u0020\u003d\u003d\u0020\u0030");};continue ;};for {_bgfb =_egbd ;_egbd =(_egbd |(_egbd >>1)|(_egbd <<1))&_cfef ;if (_egbd ^_bgfb )==0{if _eagg =_fadb .SetByte (_fcgb +_gaegd ,_egbd );
_eagg !=nil {return _c .Wrap (_eagg ,_ebfcc ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0070\u0072\u0065\u0076 \u0062\u0079\u0074\u0065");};break ;};};};};for _bcgcf =_deeb -1;_bcgcf >=0;_bcgcf --{_fcgb =_bcgcf *_fadb .RowStride ;_dccc =_bcgcf *_cgda .RowStride ;
for _gaegd =_eddg -1;_gaegd >=0;_gaegd --{if _egbd ,_eagg =_fadb .GetByte (_fcgb +_gaegd );_eagg !=nil {return _c .Wrap (_eagg ,_ebfcc ,"\u0072\u0065\u0076\u0065\u0072\u0073\u0065\u0020\u0066\u0069\u0072\u0073t\u0020\u0067\u0065\u0074");};if _cfef ,_eagg =_cgda .GetByte (_dccc +_gaegd );
_eagg !=nil {return _c .Wrap (_eagg ,_ebfcc ,"r\u0065\u0076\u0065\u0072se\u0020g\u0065\u0074\u0020\u006d\u0061s\u006b\u0020\u0062\u0079\u0074\u0065");};if _bcgcf < _deeb -1{if _daee ,_eagg =_fadb .GetByte (_fcgb +_fadb .RowStride +_gaegd );_eagg !=nil {return _c .Wrap (_eagg ,_ebfcc ,"\u0072\u0065v\u0065\u0072\u0073e\u0020\u0069\u0020\u003c\u0020\u0068\u0020\u002d\u0031");
};_egbd |=_daee ;};if _gaegd < _eddg -1{if _cbege ,_eagg =_fadb .GetByte (_fcgb +_gaegd +1);_eagg !=nil {return _c .Wrap (_eagg ,_ebfcc ,"\u0072\u0065\u0076\u0065rs\u0065\u0020\u006a\u0020\u003c\u0020\u0077\u0070\u006c\u0020\u002d\u0020\u0031");};_egbd |=_cbege >>7;
};_egbd &=_cfef ;if _egbd ==0||(^_egbd )==0{if _eagg =_fadb .SetByte (_fcgb +_gaegd ,_egbd );_eagg !=nil {return _c .Wrap (_eagg ,_ebfcc ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006d\u0061\u0073k\u0065\u0064\u0020\u0062\u0079\u0074\u0065\u0020\u0066\u0061i\u006c\u0065\u0064");
};continue ;};for {_bgfb =_egbd ;_egbd =(_egbd |(_egbd >>1)|(_egbd <<1))&_cfef ;if (_egbd ^_bgfb )==0{if _eagg =_fadb .SetByte (_fcgb +_gaegd ,_egbd );_eagg !=nil {return _c .Wrap (_eagg ,_ebfcc ,"\u0072e\u0076\u0065\u0072\u0073e\u0020\u0073\u0065\u0074\u0074i\u006eg\u0020p\u0072\u0065\u0076\u0020\u0062\u0079\u0074e");
};break ;};};};};return nil ;};func TstAddSymbol (t *_cd .T ,bms *Bitmaps ,sym *Bitmap ,x *int ,y int ,space int ){bms .AddBitmap (sym );_becdd :=_ee .Rect (*x ,y ,*x +sym .Width ,y +sym .Height );bms .AddBox (&_becdd );*x +=sym .Width +space ;};func RankHausTest (p1 ,p2 ,p3 ,p4 *Bitmap ,delX ,delY float32 ,maxDiffW ,maxDiffH ,area1 ,area3 int ,rank float32 ,tab8 []int )(_edde bool ,_dceee error ){const _fbee ="\u0052\u0061\u006ek\u0048\u0061\u0075\u0073\u0054\u0065\u0073\u0074";
_fccg ,_faae :=p1 .Width ,p1 .Height ;_bdbc ,_cagea :=p3 .Width ,p3 .Height ;if _e .Abs (_fccg -_bdbc )> maxDiffW {return false ,nil ;};if _e .Abs (_faae -_cagea )> maxDiffH {return false ,nil ;};_ddgb :=int (float32 (area1 )*(1.0-rank )+0.5);_cabde :=int (float32 (area3 )*(1.0-rank )+0.5);
var _fefab ,_dgbd int ;if delX >=0{_fefab =int (delX +0.5);}else {_fefab =int (delX -0.5);};if delY >=0{_dgbd =int (delY +0.5);}else {_dgbd =int (delY -0.5);};_gdbf :=p1 .CreateTemplate ();if _dceee =_gdbf .RasterOperation (0,0,_fccg ,_faae ,PixSrc ,p1 ,0,0);
_dceee !=nil {return false ,_c .Wrap (_dceee ,_fbee ,"p\u0031\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _dceee =_gdbf .RasterOperation (_fefab ,_dgbd ,_fccg ,_faae ,PixNotSrcAndDst ,p4 ,0,0);_dceee !=nil {return false ,_c .Wrap (_dceee ,_fbee ,"\u0074 \u0026\u0020\u0021\u0070\u0034");
};_edde ,_dceee =_gdbf .ThresholdPixelSum (_ddgb ,tab8 );if _dceee !=nil {return false ,_c .Wrap (_dceee ,_fbee ,"\u0074\u002d\u003e\u0074\u0068\u0072\u0065\u0073\u0068\u0031");};if _edde {return false ,nil ;};if _dceee =_gdbf .RasterOperation (_fefab ,_dgbd ,_bdbc ,_cagea ,PixSrc ,p3 ,0,0);
_dceee !=nil {return false ,_c .Wrap (_dceee ,_fbee ,"p\u0033\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _dceee =_gdbf .RasterOperation (0,0,_bdbc ,_cagea ,PixNotSrcAndDst ,p2 ,0,0);_dceee !=nil {return false ,_c .Wrap (_dceee ,_fbee ,"\u0074 \u0026\u0020\u0021\u0070\u0032");
};_edde ,_dceee =_gdbf .ThresholdPixelSum (_cabde ,tab8 );if _dceee !=nil {return false ,_c .Wrap (_dceee ,_fbee ,"\u0074\u002d\u003e\u0074\u0068\u0072\u0065\u0073\u0068\u0033");};return !_edde ,nil ;};type LocationFilter int ;func (_fca *Bitmap )RemoveBorder (borderSize int )(*Bitmap ,error ){if borderSize ==0{return _fca .Copy (),nil ;
};_deca ,_ecaa :=_fca .removeBorderGeneral (borderSize ,borderSize ,borderSize ,borderSize );if _ecaa !=nil {return nil ,_c .Wrap (_ecaa ,"\u0052\u0065\u006do\u0076\u0065\u0042\u006f\u0072\u0064\u0065\u0072","");};return _deca ,nil ;};func (_edg *Bitmap )ThresholdPixelSum (thresh int ,tab8 []int )(_bbda bool ,_caaa error ){const _ebaa ="\u0042i\u0074\u006d\u0061\u0070\u002e\u0054\u0068\u0072\u0065\u0073\u0068o\u006c\u0064\u0050\u0069\u0078\u0065\u006c\u0053\u0075\u006d";
if tab8 ==nil {tab8 =_fcdbf ();};_egg :=_edg .Width >>3;_agfg :=_edg .Width &7;_ffdfc :=byte (0xff<<uint (8-_agfg ));var (_gfd ,_bac ,_bgd ,_eaf int ;_gcg byte ;);for _gfd =0;_gfd < _edg .Height ;_gfd ++{_bgd =_edg .RowStride *_gfd ;for _bac =0;_bac < _egg ;
_bac ++{_gcg ,_caaa =_edg .GetByte (_bgd +_bac );if _caaa !=nil {return false ,_c .Wrap (_caaa ,_ebaa ,"\u0066\u0075\u006c\u006c\u0042\u0079\u0074\u0065");};_eaf +=tab8 [_gcg ];};if _agfg !=0{_gcg ,_caaa =_edg .GetByte (_bgd +_bac );if _caaa !=nil {return false ,_c .Wrap (_caaa ,_ebaa ,"p\u0061\u0072\u0074\u0069\u0061\u006c\u0042\u0079\u0074\u0065");
};_gcg &=_ffdfc ;_eaf +=tab8 [_gcg ];};if _eaf > thresh {return true ,nil ;};};return _bbda ,nil ;};func _acfb (_gbcd *Bitmap ,_ggac ,_gegd ,_bcga ,_gada int ,_eaed RasterOperator ,_fced *Bitmap ,_dgbb ,_abbg int )error {var (_fabe byte ;_cbag int ;_ccdd int ;
_efag ,_dffb int ;_bceb ,_cbgd int ;);_afbec :=_bcga >>3;_aeaa :=_bcga &7;if _aeaa > 0{_fabe =_egfga [_aeaa ];};_cbag =_fced .RowStride *_abbg +(_dgbb >>3);_ccdd =_gbcd .RowStride *_gegd +(_ggac >>3);switch _eaed {case PixSrc :for _bceb =0;_bceb < _gada ;
_bceb ++{_efag =_cbag +_bceb *_fced .RowStride ;_dffb =_ccdd +_bceb *_gbcd .RowStride ;for _cbgd =0;_cbgd < _afbec ;_cbgd ++{_gbcd .Data [_dffb ]=_fced .Data [_efag ];_dffb ++;_efag ++;};if _aeaa > 0{_gbcd .Data [_dffb ]=_eaga (_gbcd .Data [_dffb ],_fced .Data [_efag ],_fabe );
};};case PixNotSrc :for _bceb =0;_bceb < _gada ;_bceb ++{_efag =_cbag +_bceb *_fced .RowStride ;_dffb =_ccdd +_bceb *_gbcd .RowStride ;for _cbgd =0;_cbgd < _afbec ;_cbgd ++{_gbcd .Data [_dffb ]=^(_fced .Data [_efag ]);_dffb ++;_efag ++;};if _aeaa > 0{_gbcd .Data [_dffb ]=_eaga (_gbcd .Data [_dffb ],^_fced .Data [_efag ],_fabe );
};};case PixSrcOrDst :for _bceb =0;_bceb < _gada ;_bceb ++{_efag =_cbag +_bceb *_fced .RowStride ;_dffb =_ccdd +_bceb *_gbcd .RowStride ;for _cbgd =0;_cbgd < _afbec ;_cbgd ++{_gbcd .Data [_dffb ]|=_fced .Data [_efag ];_dffb ++;_efag ++;};if _aeaa > 0{_gbcd .Data [_dffb ]=_eaga (_gbcd .Data [_dffb ],_fced .Data [_efag ]|_gbcd .Data [_dffb ],_fabe );
};};case PixSrcAndDst :for _bceb =0;_bceb < _gada ;_bceb ++{_efag =_cbag +_bceb *_fced .RowStride ;_dffb =_ccdd +_bceb *_gbcd .RowStride ;for _cbgd =0;_cbgd < _afbec ;_cbgd ++{_gbcd .Data [_dffb ]&=_fced .Data [_efag ];_dffb ++;_efag ++;};if _aeaa > 0{_gbcd .Data [_dffb ]=_eaga (_gbcd .Data [_dffb ],_fced .Data [_efag ]&_gbcd .Data [_dffb ],_fabe );
};};case PixSrcXorDst :for _bceb =0;_bceb < _gada ;_bceb ++{_efag =_cbag +_bceb *_fced .RowStride ;_dffb =_ccdd +_bceb *_gbcd .RowStride ;for _cbgd =0;_cbgd < _afbec ;_cbgd ++{_gbcd .Data [_dffb ]^=_fced .Data [_efag ];_dffb ++;_efag ++;};if _aeaa > 0{_gbcd .Data [_dffb ]=_eaga (_gbcd .Data [_dffb ],_fced .Data [_efag ]^_gbcd .Data [_dffb ],_fabe );
};};case PixNotSrcOrDst :for _bceb =0;_bceb < _gada ;_bceb ++{_efag =_cbag +_bceb *_fced .RowStride ;_dffb =_ccdd +_bceb *_gbcd .RowStride ;for _cbgd =0;_cbgd < _afbec ;_cbgd ++{_gbcd .Data [_dffb ]|=^(_fced .Data [_efag ]);_dffb ++;_efag ++;};if _aeaa > 0{_gbcd .Data [_dffb ]=_eaga (_gbcd .Data [_dffb ],^(_fced .Data [_efag ])|_gbcd .Data [_dffb ],_fabe );
};};case PixNotSrcAndDst :for _bceb =0;_bceb < _gada ;_bceb ++{_efag =_cbag +_bceb *_fced .RowStride ;_dffb =_ccdd +_bceb *_gbcd .RowStride ;for _cbgd =0;_cbgd < _afbec ;_cbgd ++{_gbcd .Data [_dffb ]&=^(_fced .Data [_efag ]);_dffb ++;_efag ++;};if _aeaa > 0{_gbcd .Data [_dffb ]=_eaga (_gbcd .Data [_dffb ],^(_fced .Data [_efag ])&_gbcd .Data [_dffb ],_fabe );
};};case PixSrcOrNotDst :for _bceb =0;_bceb < _gada ;_bceb ++{_efag =_cbag +_bceb *_fced .RowStride ;_dffb =_ccdd +_bceb *_gbcd .RowStride ;for _cbgd =0;_cbgd < _afbec ;_cbgd ++{_gbcd .Data [_dffb ]=_fced .Data [_efag ]|^(_gbcd .Data [_dffb ]);_dffb ++;
_efag ++;};if _aeaa > 0{_gbcd .Data [_dffb ]=_eaga (_gbcd .Data [_dffb ],_fced .Data [_efag ]|^(_gbcd .Data [_dffb ]),_fabe );};};case PixSrcAndNotDst :for _bceb =0;_bceb < _gada ;_bceb ++{_efag =_cbag +_bceb *_fced .RowStride ;_dffb =_ccdd +_bceb *_gbcd .RowStride ;
for _cbgd =0;_cbgd < _afbec ;_cbgd ++{_gbcd .Data [_dffb ]=_fced .Data [_efag ]&^(_gbcd .Data [_dffb ]);_dffb ++;_efag ++;};if _aeaa > 0{_gbcd .Data [_dffb ]=_eaga (_gbcd .Data [_dffb ],_fced .Data [_efag ]&^(_gbcd .Data [_dffb ]),_fabe );};};case PixNotPixSrcOrDst :for _bceb =0;
_bceb < _gada ;_bceb ++{_efag =_cbag +_bceb *_fced .RowStride ;_dffb =_ccdd +_bceb *_gbcd .RowStride ;for _cbgd =0;_cbgd < _afbec ;_cbgd ++{_gbcd .Data [_dffb ]=^(_fced .Data [_efag ]|_gbcd .Data [_dffb ]);_dffb ++;_efag ++;};if _aeaa > 0{_gbcd .Data [_dffb ]=_eaga (_gbcd .Data [_dffb ],^(_fced .Data [_efag ]|_gbcd .Data [_dffb ]),_fabe );
};};case PixNotPixSrcAndDst :for _bceb =0;_bceb < _gada ;_bceb ++{_efag =_cbag +_bceb *_fced .RowStride ;_dffb =_ccdd +_bceb *_gbcd .RowStride ;for _cbgd =0;_cbgd < _afbec ;_cbgd ++{_gbcd .Data [_dffb ]=^(_fced .Data [_efag ]&_gbcd .Data [_dffb ]);_dffb ++;
_efag ++;};if _aeaa > 0{_gbcd .Data [_dffb ]=_eaga (_gbcd .Data [_dffb ],^(_fced .Data [_efag ]&_gbcd .Data [_dffb ]),_fabe );};};case PixNotPixSrcXorDst :for _bceb =0;_bceb < _gada ;_bceb ++{_efag =_cbag +_bceb *_fced .RowStride ;_dffb =_ccdd +_bceb *_gbcd .RowStride ;
for _cbgd =0;_cbgd < _afbec ;_cbgd ++{_gbcd .Data [_dffb ]=^(_fced .Data [_efag ]^_gbcd .Data [_dffb ]);_dffb ++;_efag ++;};if _aeaa > 0{_gbcd .Data [_dffb ]=_eaga (_gbcd .Data [_dffb ],^(_fced .Data [_efag ]^_gbcd .Data [_dffb ]),_fabe );};};default:_aa .Log .Debug ("\u0050\u0072ov\u0069\u0064\u0065d\u0020\u0069\u006e\u0076ali\u0064 r\u0061\u0073\u0074\u0065\u0072\u0020\u006fpe\u0072\u0061\u0074\u006f\u0072\u003a\u0020%\u0076",_eaed );
return _c .Error ("\u0072\u0061\u0073\u0074er\u004f\u0070\u0042\u0079\u0074\u0065\u0041\u006c\u0069\u0067\u006e\u0065\u0064\u004co\u0077","\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");
};return nil ;};func (_gcd *Bitmap )setEightBytes (_edgc int ,_cbae uint64 )error {_bbbd :=_gcd .RowStride -(_edgc %_gcd .RowStride );if _gcd .RowStride !=_gcd .Width >>3{_bbbd --;};if _bbbd >=8{return _gcd .setEightFullBytes (_edgc ,_cbae );};return _gcd .setEightPartlyBytes (_edgc ,_bbbd ,_cbae );
};func (_babdf *Bitmaps )HeightSorter ()func (_dged ,_ddacd int )bool {return func (_dacb ,_cabdc int )bool {_gffc :=_babdf .Values [_dacb ].Height < _babdf .Values [_cabdc ].Height ;_aa .Log .Debug ("H\u0065i\u0067\u0068\u0074\u003a\u0020\u0025\u0076\u0020<\u0020\u0025\u0076\u0020= \u0025\u0076",_babdf .Values [_dacb ].Height ,_babdf .Values [_cabdc ].Height ,_gffc );
return _gffc ;};};func (_bfag *Bitmap )GetChocolateData ()[]byte {if _bfag .Color ==Vanilla {_bfag .inverseData ();};return _bfag .Data ;};var (_dbdef *Bitmap ;_bgbc *Bitmap ;);func _cacc (_fbce ,_eagc ,_ebfgg *Bitmap ,_aegba int )(*Bitmap ,error ){const _gecc ="\u0073\u0065\u0065\u0064\u0046\u0069\u006c\u006c\u0042i\u006e\u0061\u0072\u0079";
if _eagc ==nil {return nil ,_c .Error (_gecc ,"s\u006fu\u0072\u0063\u0065\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");};if _ebfgg ==nil {return nil ,_c .Error (_gecc ,"'\u006da\u0073\u006b\u0027\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");
};if _aegba !=4&&_aegba !=8{return nil ,_c .Error (_gecc ,"\u0063\u006f\u006en\u0065\u0063\u0074\u0069v\u0069\u0074\u0079\u0020\u006e\u006f\u0074 \u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0034\u002c\u0038\u007d");};var _efabb error ;
_fbce ,_efabb =_fcbc (_fbce ,_eagc );if _efabb !=nil {return nil ,_c .Wrap (_efabb ,_gecc ,"\u0063o\u0070y\u0020\u0073\u006f\u0075\u0072c\u0065\u0020t\u006f\u0020\u0027\u0064\u0027");};_dgeg :=_eagc .createTemplate ();_ebfgg .setPadBits (0);for _ddfd :=0;
_ddfd < _bagb ;_ddfd ++{_dgeg ,_efabb =_fcbc (_dgeg ,_fbce );if _efabb !=nil {return nil ,_c .Wrapf (_efabb ,_gecc ,"\u0069\u0074\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064",_ddfd );};if _efabb =_aga (_fbce ,_ebfgg ,_aegba );_efabb !=nil {return nil ,_c .Wrapf (_efabb ,_gecc ,"\u0069\u0074\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064",_ddfd );
};if _dgeg .Equals (_fbce ){break ;};};return _fbce ,nil ;};func _dceg (_addba *_e .Stack )(_acffe *fillSegment ,_dffg error ){const _addec ="\u0070\u006f\u0070\u0046\u0069\u006c\u006c\u0053\u0065g\u006d\u0065\u006e\u0074";if _addba ==nil {return nil ,_c .Error (_addec ,"\u006ei\u006c \u0073\u0074\u0061\u0063\u006b \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");
};if _addba .Aux ==nil {return nil ,_c .Error (_addec ,"a\u0075x\u0053\u0074\u0061\u0063\u006b\u0020\u006e\u006ft\u0020\u0064\u0065\u0066in\u0065\u0064");};_dafgb ,_cadd :=_addba .Pop ();if !_cadd {return nil ,nil ;};_dgfbc ,_cadd :=_dafgb .(*fillSegment );
if !_cadd {return nil ,_c .Error (_addec ,"\u0073\u0074\u0061ck\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020c\u006fn\u0074a\u0069n\u0020\u002a\u0066\u0069\u006c\u006c\u0053\u0065\u0067\u006d\u0065\u006e\u0074");};_acffe =&fillSegment {_dgfbc ._ccdc ,_dgfbc ._ggab ,_dgfbc ._ebdg +_dgfbc ._afbcf ,_dgfbc ._afbcf };
_addba .Aux .Push (_dgfbc );return _acffe ,nil ;};const (AsymmetricMorphBC BoundaryCondition =iota ;SymmetricMorphBC ;);func TstASymbol (t *_cd .T )*Bitmap {t .Helper ();_aegccd :=New (6,6);_fe .NoError (t ,_aegccd .SetPixel (1,0,1));_fe .NoError (t ,_aegccd .SetPixel (2,0,1));
_fe .NoError (t ,_aegccd .SetPixel (3,0,1));_fe .NoError (t ,_aegccd .SetPixel (4,0,1));_fe .NoError (t ,_aegccd .SetPixel (5,1,1));_fe .NoError (t ,_aegccd .SetPixel (1,2,1));_fe .NoError (t ,_aegccd .SetPixel (2,2,1));_fe .NoError (t ,_aegccd .SetPixel (3,2,1));
_fe .NoError (t ,_aegccd .SetPixel (4,2,1));_fe .NoError (t ,_aegccd .SetPixel (5,2,1));_fe .NoError (t ,_aegccd .SetPixel (0,3,1));_fe .NoError (t ,_aegccd .SetPixel (5,3,1));_fe .NoError (t ,_aegccd .SetPixel (0,4,1));_fe .NoError (t ,_aegccd .SetPixel (5,4,1));
_fe .NoError (t ,_aegccd .SetPixel (1,5,1));_fe .NoError (t ,_aegccd .SetPixel (2,5,1));_fe .NoError (t ,_aegccd .SetPixel (3,5,1));_fe .NoError (t ,_aegccd .SetPixel (4,5,1));_fe .NoError (t ,_aegccd .SetPixel (5,5,1));return _aegccd ;};func (_eaec *byHeight )Less (i ,j int )bool {return _eaec .Values [i ].Height < _eaec .Values [j ].Height };
type RasterOperator int ;func _dd (_cad *Bitmap ,_ac ...int )(_cgg *Bitmap ,_baba error ){const _fff ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0043\u0061\u0073\u0063\u0061\u0064\u0065";if _cad ==nil {return nil ,_c .Error (_fff ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");
};if len (_ac )==0||len (_ac )> 4{return nil ,_c .Error (_fff ,"t\u0068\u0065\u0072\u0065\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0074\u0020\u006cea\u0073\u0074\u0020\u006fn\u0065\u0020\u0061\u006e\u0064\u0020\u0061\u0074\u0020mo\u0073\u0074 \u0034\u0020\u006c\u0065\u0076\u0065\u006c\u0073");
};if _ac [0]<=0{_aa .Log .Debug ("\u006c\u0065\u0076\u0065\u006c\u0031\u0020\u003c\u003d\u0020\u0030 \u002d\u0020\u006e\u006f\u0020\u0072\u0065\u0064\u0075\u0063t\u0069\u006f\u006e");_cgg ,_baba =_fcbc (nil ,_cad );if _baba !=nil {return nil ,_c .Wrap (_baba ,_fff ,"l\u0065\u0076\u0065\u006c\u0031\u0020\u003c\u003d\u0020\u0030");
};return _cgg ,nil ;};_dfd :=_faaf ();_cgg =_cad ;for _cdbe ,_dac :=range _ac {if _dac <=0{break ;};_cgg ,_baba =_fgc (_cgg ,_dac ,_dfd );if _baba !=nil {return nil ,_c .Wrapf (_baba ,_fff ,"\u006c\u0065\u0076\u0065\u006c\u0025\u0064\u0020\u0072\u0065\u0064\u0075c\u0074\u0069\u006f\u006e",_cdbe );
};};return _cgg ,nil ;};func _eecfc (_fagg *_e .Stack ,_aeebf ,_gdfbe ,_acec ,_gebb ,_ffgb int ,_ffcc *_ee .Rectangle )(_afgc error ){const _dddgc ="\u0070\u0075\u0073\u0068\u0046\u0069\u006c\u006c\u0053\u0065\u0067m\u0065\u006e\u0074\u0042\u006f\u0075\u006e\u0064\u0069\u006eg\u0042\u006f\u0078";
if _fagg ==nil {return _c .Error (_dddgc ,"\u006ei\u006c \u0073\u0074\u0061\u0063\u006b \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};if _ffcc ==nil {return _c .Error (_dddgc ,"\u0070\u0072\u006f\u0076i\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0069\u006da\u0067e\u002e\u0052\u0065\u0063\u0074\u0061\u006eg\u006c\u0065");
};_ffcc .Min .X =_e .Min (_ffcc .Min .X ,_aeebf );_ffcc .Max .X =_e .Max (_ffcc .Max .X ,_gdfbe );_ffcc .Min .Y =_e .Min (_ffcc .Min .Y ,_acec );_ffcc .Max .Y =_e .Max (_ffcc .Max .Y ,_acec );if !(_acec +_gebb >=0&&_acec +_gebb <=_ffgb ){return nil ;};
if _fagg .Aux ==nil {return _c .Error (_dddgc ,"a\u0075x\u0053\u0074\u0061\u0063\u006b\u0020\u006e\u006ft\u0020\u0064\u0065\u0066in\u0065\u0064");};var _fcbbf *fillSegment ;_fggbe ,_fggga :=_fagg .Aux .Pop ();if _fggga {if _fcbbf ,_fggga =_fggbe .(*fillSegment );
!_fggga {return _c .Error (_dddgc ,"a\u0075\u0078\u0053\u0074\u0061\u0063k\u0020\u0064\u0061\u0074\u0061\u0020i\u0073\u0020\u006e\u006f\u0074\u0020\u0061 \u002a\u0066\u0069\u006c\u006c\u0053\u0065\u0067\u006d\u0065n\u0074");};}else {_fcbbf =&fillSegment {};
};_fcbbf ._ccdc =_aeebf ;_fcbbf ._ggab =_gdfbe ;_fcbbf ._ebdg =_acec ;_fcbbf ._afbcf =_gebb ;_fagg .Push (_fcbbf );return nil ;};type MorphProcess struct{Operation MorphOperation ;Arguments []int ;};func (_dad *Bitmap )GetVanillaData ()[]byte {if _dad .Color ==Chocolate {_dad .inverseData ();
};return _dad .Data ;};func _gdca (_cefe int )int {if _cefe < 0{return -_cefe ;};return _cefe ;};func (_bbe *Bitmap )GetUnpaddedData ()([]byte ,error ){_egaf :=uint (_bbe .Width &0x07);if _egaf ==0{return _bbe .Data ,nil ;};_fgg :=_bbe .Width *_bbe .Height ;
if _fgg %8!=0{_fgg >>=3;_fgg ++;}else {_fgg >>=3;};_ged :=make ([]byte ,_fgg );_gag :=_a .NewWriterMSB (_ged );const _dca ="\u0047e\u0074U\u006e\u0070\u0061\u0064\u0064\u0065\u0064\u0044\u0061\u0074\u0061";for _gad :=0;_gad < _bbe .Height ;_gad ++{for _egad :=0;
_egad < _bbe .RowStride ;_egad ++{_cgc :=_bbe .Data [_gad *_bbe .RowStride +_egad ];if _egad !=_bbe .RowStride -1{_aee :=_gag .WriteByte (_cgc );if _aee !=nil {return nil ,_c .Wrap (_aee ,_dca ,"");};continue ;};for _cdg :=uint (0);_cdg < _egaf ;_cdg ++{_gba :=_gag .WriteBit (int (_cgc >>(7-_cdg )&0x01));
if _gba !=nil {return nil ,_c .Wrap (_gba ,_dca ,"");};};};};return _ged ,nil ;};const (PixSrc RasterOperator =0xc;PixDst RasterOperator =0xa;PixNotSrc RasterOperator =0x3;PixNotDst RasterOperator =0x5;PixClr RasterOperator =0x0;PixSet RasterOperator =0xf;
PixSrcOrDst RasterOperator =0xe;PixSrcAndDst RasterOperator =0x8;PixSrcXorDst RasterOperator =0x6;PixNotSrcOrDst RasterOperator =0xb;PixNotSrcAndDst RasterOperator =0x2;PixSrcOrNotDst RasterOperator =0xd;PixSrcAndNotDst RasterOperator =0x4;PixNotPixSrcOrDst RasterOperator =0x1;
PixNotPixSrcAndDst RasterOperator =0x7;PixNotPixSrcXorDst RasterOperator =0x9;PixPaint =PixSrcOrDst ;PixSubtract =PixNotSrcAndDst ;PixMask =PixSrcAndDst ;);func (_cab *Bitmap )Equals (s *Bitmap )bool {if len (_cab .Data )!=len (s .Data )||_cab .Width !=s .Width ||_cab .Height !=s .Height {return false ;
};for _dfac :=0;_dfac < _cab .Height ;_dfac ++{_egac :=_dfac *_cab .RowStride ;for _gea :=0;_gea < _cab .RowStride ;_gea ++{if _cab .Data [_egac +_gea ]!=s .Data [_egac +_gea ]{return false ;};};};return true ;};func TstNSymbol (t *_cd .T ,scale ...int )*Bitmap {_adaa ,_ecgg :=NewWithData (4,5,[]byte {0x90,0xD0,0xB0,0x90,0x90});
_fe .NoError (t ,_ecgg );return TstGetScaledSymbol (t ,_adaa ,scale ...);};var _cgeb =[]byte {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3E,0x78,0x27,0xC2,0x27,0x91,0x00,0x22,0x48,0x21,0x03,0x24,0x91,0x00,0x22,0x48,0x21,0x02,0xA4,0x95,0x00,0x22,0x48,0x21,0x02,0x64,0x9B,0x00,0x3C,0x78,0x21,0x02,0x27,0x91,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x15,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
func _fgd (_geaf ,_bbab *Bitmap ,_egcge *Selection )(*Bitmap ,error ){const _cdfce ="\u0065\u0072\u006fd\u0065";var (_deac error ;_gbab *Bitmap ;);_geaf ,_deac =_dcge (_geaf ,_bbab ,_egcge ,&_gbab );if _deac !=nil {return nil ,_c .Wrap (_deac ,_cdfce ,"");
};if _deac =_geaf .setAll ();_deac !=nil {return nil ,_c .Wrap (_deac ,_cdfce ,"");};var _ccgg SelectionValue ;for _ege :=0;_ege < _egcge .Height ;_ege ++{for _cdga :=0;_cdga < _egcge .Width ;_cdga ++{_ccgg =_egcge .Data [_ege ][_cdga ];if _ccgg ==SelHit {_deac =_edca (_geaf ,_egcge .Cx -_cdga ,_egcge .Cy -_ege ,_bbab .Width ,_bbab .Height ,PixSrcAndDst ,_gbab ,0,0);
if _deac !=nil {return nil ,_c .Wrap (_deac ,_cdfce ,"");};};};};if MorphBC ==SymmetricMorphBC {return _geaf ,nil ;};_aded ,_ccged ,_geca ,_abaf :=_egcge .findMaxTranslations ();if _aded > 0{if _deac =_geaf .RasterOperation (0,0,_aded ,_bbab .Height ,PixClr ,nil ,0,0);
_deac !=nil {return nil ,_c .Wrap (_deac ,_cdfce ,"\u0078\u0070\u0020\u003e\u0020\u0030");};};if _geca > 0{if _deac =_geaf .RasterOperation (_bbab .Width -_geca ,0,_geca ,_bbab .Height ,PixClr ,nil ,0,0);_deac !=nil {return nil ,_c .Wrap (_deac ,_cdfce ,"\u0078\u006e\u0020\u003e\u0020\u0030");
};};if _ccged > 0{if _deac =_geaf .RasterOperation (0,0,_bbab .Width ,_ccged ,PixClr ,nil ,0,0);_deac !=nil {return nil ,_c .Wrap (_deac ,_cdfce ,"\u0079\u0070\u0020\u003e\u0020\u0030");};};if _abaf > 0{if _deac =_geaf .RasterOperation (0,_bbab .Height -_abaf ,_bbab .Width ,_abaf ,PixClr ,nil ,0,0);
_deac !=nil {return nil ,_c .Wrap (_deac ,_cdfce ,"\u0079\u006e\u0020\u003e\u0020\u0030");};};return _geaf ,nil ;};func MorphSequence (src *Bitmap ,sequence ...MorphProcess )(*Bitmap ,error ){return _caae (src ,sequence ...);};func (_gfcc Points )YSorter ()func (_ddfa ,_ffad int )bool {return func (_ebe ,_fcgfc int )bool {return _gfcc [_ebe ].Y < _gfcc [_fcgfc ].Y };
};func (_fac *ClassedPoints )GroupByY ()([]*ClassedPoints ,error ){const _ccdfa ="\u0043\u006c\u0061\u0073se\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0072\u006f\u0075\u0070\u0042y\u0059";if _cegc :=_fac .validateIntSlice ();_cegc !=nil {return nil ,_c .Wrap (_cegc ,_ccdfa ,"");
};if _fac .IntSlice .Size ()==0{return nil ,_c .Error (_ccdfa ,"\u004e\u006f\u0020\u0063la\u0073\u0073\u0065\u0073\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064");};_fac .SortByY ();var (_cgfed []*ClassedPoints ;_fgee int ;);_bbeaa :=-1;var _bggc *ClassedPoints ;
for _gfdg :=0;_gfdg < len (_fac .IntSlice );_gfdg ++{_fgee =int (_fac .YAtIndex (_gfdg ));if _fgee !=_bbeaa {_bggc =&ClassedPoints {Points :_fac .Points };_bbeaa =_fgee ;_cgfed =append (_cgfed ,_bggc );};_bggc .IntSlice =append (_bggc .IntSlice ,_fac .IntSlice [_gfdg ]);
};for _ ,_gfff :=range _cgfed {_gfff .SortByX ();};return _cgfed ,nil ;};func Extract (roi _ee .Rectangle ,src *Bitmap )(*Bitmap ,error ){_cfcd :=New (roi .Dx (),roi .Dy ());_ggaf :=roi .Min .X &0x07;_dfag :=8-_ggaf ;_ccge :=uint (8-_cfcd .Width &0x07);
_afbf :=src .GetByteIndex (roi .Min .X ,roi .Min .Y );_bgcd :=src .GetByteIndex (roi .Max .X -1,roi .Min .Y );_dfbf :=_cfcd .RowStride ==_bgcd +1-_afbf ;var _bfcag int ;for _aacg :=roi .Min .Y ;_aacg < roi .Max .Y ;_aacg ++{_fagb :=_afbf ;_dgg :=_bfcag ;
switch {case _afbf ==_bgcd :_acdb ,_bcde :=src .GetByte (_fagb );if _bcde !=nil {return nil ,_bcde ;};_acdb <<=uint (_ggaf );_bcde =_cfcd .SetByte (_dgg ,_eabg (_ccge ,_acdb ));if _bcde !=nil {return nil ,_bcde ;};case _ggaf ==0:for _gcbg :=_afbf ;_gcbg <=_bgcd ;
_gcbg ++{_defa ,_afdd :=src .GetByte (_fagb );if _afdd !=nil {return nil ,_afdd ;};_fagb ++;if _gcbg ==_bgcd &&_dfbf {_defa =_eabg (_ccge ,_defa );};_afdd =_cfcd .SetByte (_dgg ,_defa );if _afdd !=nil {return nil ,_afdd ;};_dgg ++;};default:_fgad :=_ggfe (src ,_cfcd ,uint (_ggaf ),uint (_dfag ),_ccge ,_afbf ,_bgcd ,_dfbf ,_fagb ,_dgg );
if _fgad !=nil {return nil ,_fgad ;};};_afbf +=src .RowStride ;_bgcd +=src .RowStride ;_bfcag +=_cfcd .RowStride ;};return _cfcd ,nil ;};func _eddc (_efd *Bitmap ,_cbf *Bitmap ,_cdca *Selection )(*Bitmap ,error ){var (_fbed *Bitmap ;_dgfd error ;);_efd ,_dgfd =_dcge (_efd ,_cbf ,_cdca ,&_fbed );
if _dgfd !=nil {return nil ,_dgfd ;};if _dgfd =_efd .clearAll ();_dgfd !=nil {return nil ,_dgfd ;};var _abca SelectionValue ;for _ecca :=0;_ecca < _cdca .Height ;_ecca ++{for _dgff :=0;_dgff < _cdca .Width ;_dgff ++{_abca =_cdca .Data [_ecca ][_dgff ];
if _abca ==SelHit {if _dgfd =_efd .RasterOperation (_dgff -_cdca .Cx ,_ecca -_cdca .Cy ,_cbf .Width ,_cbf .Height ,PixSrcOrDst ,_fbed ,0,0);_dgfd !=nil {return nil ,_dgfd ;};};};};return _efd ,nil ;};func _affd (_abgf ,_cabdeb *Bitmap ,_ecfc ,_fbge int )(*Bitmap ,error ){const _ccecd ="\u0065\u0072\u006f\u0064\u0065\u0042\u0072\u0069\u0063\u006b";
if _cabdeb ==nil {return nil ,_c .Error (_ccecd ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _ecfc < 1||_fbge < 1{return nil ,_c .Error (_ccecd ,"\u0068\u0073\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0073\u0069\u007a\u0065\u0020\u0061\u0072e\u0020\u006e\u006f\u0074\u0020\u0067\u0072e\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006fr\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0031");
};if _ecfc ==1&&_fbge ==1{_acdc ,_bbag :=_fcbc (_abgf ,_cabdeb );if _bbag !=nil {return nil ,_c .Wrap (_bbag ,_ccecd ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u0026\u0026 \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _acdc ,nil ;};if _ecfc ==1||_fbge ==1{_eea :=SelCreateBrick (_fbge ,_ecfc ,_fbge /2,_ecfc /2,SelHit );_ebc ,_bgce :=_fgd (_abgf ,_cabdeb ,_eea );if _bgce !=nil {return nil ,_c .Wrap (_bgce ,_ccecd ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _ebc ,nil ;};_dfgaa :=SelCreateBrick (1,_ecfc ,0,_ecfc /2,SelHit );_bbea :=SelCreateBrick (_fbge ,1,_fbge /2,0,SelHit );_abcaf ,_fcgg :=_fgd (nil ,_cabdeb ,_dfgaa );if _fcgg !=nil {return nil ,_c .Wrap (_fcgg ,_ccecd ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};_abgf ,_fcgg =_fgd (_abgf ,_abcaf ,_bbea );if _fcgg !=nil {return nil ,_c .Wrap (_fcgg ,_ccecd ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};return _abgf ,nil ;};func TstFrameBitmap ()*Bitmap {return _dbdef .Copy ()};func Blit (src *Bitmap ,dst *Bitmap ,x ,y int ,op CombinationOperator )error {var _bfga ,_eec int ;
_ecea :=src .RowStride -1;if x < 0{_eec =-x ;x =0;}else if x +src .Width > dst .Width {_ecea -=src .Width +x -dst .Width ;};if y < 0{_bfga =-y ;y =0;_eec +=src .RowStride ;_ecea +=src .RowStride ;}else if y +src .Height > dst .Height {_bfga =src .Height +y -dst .Height ;
};var (_abdge int ;_bbfb error ;);_aagf :=x &0x07;_egafa :=8-_aagf ;_cdgc :=src .Width &0x07;_cage :=_egafa -_cdgc ;_bfca :=_egafa &0x07!=0;_dda :=src .Width <=((_ecea -_eec )<<3)+_egafa ;_cee :=dst .GetByteIndex (x ,y );_gfae :=_bfga +dst .Height ;if src .Height > _gfae {_abdge =_gfae ;
}else {_abdge =src .Height ;};switch {case !_bfca :_bbfb =_bdec (src ,dst ,_bfga ,_abdge ,_cee ,_eec ,_ecea ,op );case _dda :_bbfb =_gcad (src ,dst ,_bfga ,_abdge ,_cee ,_eec ,_ecea ,_cage ,_aagf ,_egafa ,op );default:_bbfb =_gdaga (src ,dst ,_bfga ,_abdge ,_cee ,_eec ,_ecea ,_cage ,_aagf ,_egafa ,op ,_cdgc );
};return _bbfb ;};func (_egge *Boxes )Get (i int )(*_ee .Rectangle ,error ){const _gced ="\u0042o\u0078\u0065\u0073\u002e\u0047\u0065t";if _egge ==nil {return nil ,_c .Error (_gced ,"\u0027\u0042\u006f\u0078es\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if i > len (*_egge )-1{return nil ,_c .Errorf (_gced ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return (*_egge )[i ],nil ;};func (_fga *Bitmap )setFourBytes (_eeff int ,_cdfc uint32 )error {if _eeff +3> len (_fga .Data )-1{return _c .Errorf ("\u0073\u0065\u0074F\u006f\u0075\u0072\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_eeff );
};_fga .Data [_eeff ]=byte ((_cdfc &0xff000000)>>24);_fga .Data [_eeff +1]=byte ((_cdfc &0xff0000)>>16);_fga .Data [_eeff +2]=byte ((_cdfc &0xff00)>>8);_fga .Data [_eeff +3]=byte (_cdfc &0xff);return nil ;};func _gdaga (_faed ,_gfef *Bitmap ,_bfcb ,_bae ,_edfeg ,_ecag ,_dgab ,_aaca ,_fcbbe ,_accd int ,_cbbf CombinationOperator ,_afbe int )error {var _ggcb int ;
_fgf :=func (){_ggcb ++;_edfeg +=_gfef .RowStride ;_ecag +=_faed .RowStride ;_dgab +=_faed .RowStride };for _ggcb =_bfcb ;_ggcb < _bae ;_fgf (){var _afe uint16 ;_abeea :=_edfeg ;for _dedd :=_ecag ;_dedd <=_dgab ;_dedd ++{_gff ,_fee :=_gfef .GetByte (_abeea );
if _fee !=nil {return _fee ;};_gec ,_fee :=_faed .GetByte (_dedd );if _fee !=nil {return _fee ;};_afe =(_afe |(uint16 (_gec )&0xff))<<uint (_accd );_gec =byte (_afe >>8);if _fee =_gfef .SetByte (_abeea ,_cege (_gff ,_gec ,_cbbf ));_fee !=nil {return _fee ;
};_abeea ++;_afe <<=uint (_fcbbe );if _dedd ==_dgab {_gec =byte (_afe >>(8-uint8 (_accd )));if _afbe !=0{_gec =_eabg (uint (8+_aaca ),_gec );};_gff ,_fee =_gfef .GetByte (_abeea );if _fee !=nil {return _fee ;};if _fee =_gfef .SetByte (_abeea ,_cege (_gff ,_gec ,_cbbf ));
_fee !=nil {return _fee ;};};};};return nil ;};func (_fcb *Bitmap )GetByte (index int )(byte ,error ){if index > len (_fcb .Data )-1||index < 0{return 0,_c .Errorf ("\u0047e\u0074\u0042\u0079\u0074\u0065","\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",index );
};return _fcb .Data [index ],nil ;};func (_acbg *Bitmap )setBit (_aaef int ){_acbg .Data [(_aaef >>3)]|=0x80>>uint (_aaef &7)};func _gb ()(_dgfe [256]uint16 ){for _bab :=0;_bab < 256;_bab ++{if _bab &0x01!=0{_dgfe [_bab ]|=0x3;};if _bab &0x02!=0{_dgfe [_bab ]|=0xc;
};if _bab &0x04!=0{_dgfe [_bab ]|=0x30;};if _bab &0x08!=0{_dgfe [_bab ]|=0xc0;};if _bab &0x10!=0{_dgfe [_bab ]|=0x300;};if _bab &0x20!=0{_dgfe [_bab ]|=0xc00;};if _bab &0x40!=0{_dgfe [_bab ]|=0x3000;};if _bab &0x80!=0{_dgfe [_bab ]|=0xc000;};};return _dgfe ;
};func HausTest (p1 ,p2 ,p3 ,p4 *Bitmap ,delX ,delY float32 ,maxDiffW ,maxDiffH int )(bool ,error ){const _ecgb ="\u0048\u0061\u0075\u0073\u0054\u0065\u0073\u0074";_afaf ,_badd :=p1 .Width ,p1 .Height ;_ddga ,_ffeg :=p3 .Width ,p3 .Height ;if _e .Abs (_afaf -_ddga )> maxDiffW {return false ,nil ;
};if _e .Abs (_badd -_ffeg )> maxDiffH {return false ,nil ;};_geba :=int (delX +_e .Sign (delX )*0.5);_aeeaa :=int (delY +_e .Sign (delY )*0.5);var _fba error ;_fgfgg :=p1 .CreateTemplate ();if _fba =_fgfgg .RasterOperation (0,0,_afaf ,_badd ,PixSrc ,p1 ,0,0);
_fba !=nil {return false ,_c .Wrap (_fba ,_ecgb ,"p\u0031\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _fba =_fgfgg .RasterOperation (_geba ,_aeeaa ,_afaf ,_badd ,PixNotSrcAndDst ,p4 ,0,0);_fba !=nil {return false ,_c .Wrap (_fba ,_ecgb ,"\u0021p\u0034\u0020\u0026\u0020\u0074");
};if _fgfgg .Zero (){return false ,nil ;};if _fba =_fgfgg .RasterOperation (_geba ,_aeeaa ,_ddga ,_ffeg ,PixSrc ,p3 ,0,0);_fba !=nil {return false ,_c .Wrap (_fba ,_ecgb ,"p\u0033\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _fba =_fgfgg .RasterOperation (0,0,_ddga ,_ffeg ,PixNotSrcAndDst ,p2 ,0,0);
_fba !=nil {return false ,_c .Wrap (_fba ,_ecgb ,"\u0021p\u0032\u0020\u0026\u0020\u0074");};return _fgfgg .Zero (),nil ;};func (_egcd *Bitmap )SetPadBits (value int ){_egcd .setPadBits (value )};type Getter interface{GetBitmap ()*Bitmap ;};func TstWordBitmapWithSpaces (t *_cd .T ,scale ...int )*Bitmap {_ddda :=1;
if len (scale )> 0{_ddda =scale [0];};_gdage :=3;_bbbeg :=9+7+15+2*_gdage +2*_gdage ;_fbdc :=5+_gdage +5+2*_gdage ;_abgc :=New (_bbbeg *_ddda ,_fbdc *_ddda );_fabg :=&Bitmaps {};var _daac *int ;_gdage *=_ddda ;_fdca :=_gdage ;_daac =&_fdca ;_cgdc :=_gdage ;
_dbcd :=TstDSymbol (t ,scale ...);TstAddSymbol (t ,_fabg ,_dbcd ,_daac ,_cgdc ,1*_ddda );_dbcd =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_fabg ,_dbcd ,_daac ,_cgdc ,_gdage );_dbcd =TstISymbol (t ,scale ...);TstAddSymbol (t ,_fabg ,_dbcd ,_daac ,_cgdc ,1*_ddda );
_dbcd =TstTSymbol (t ,scale ...);TstAddSymbol (t ,_fabg ,_dbcd ,_daac ,_cgdc ,_gdage );_dbcd =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_fabg ,_dbcd ,_daac ,_cgdc ,1*_ddda );_dbcd =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_fabg ,_dbcd ,_daac ,_cgdc ,1*_ddda );
_dbcd =TstWSymbol (t ,scale ...);TstAddSymbol (t ,_fabg ,_dbcd ,_daac ,_cgdc ,0);*_daac =_gdage ;_cgdc =5*_ddda +_gdage ;_dbcd =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_fabg ,_dbcd ,_daac ,_cgdc ,1*_ddda );_dbcd =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_fabg ,_dbcd ,_daac ,_cgdc ,_gdage );
_dbcd =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_fabg ,_dbcd ,_daac ,_cgdc ,1*_ddda );_dbcd =TstESymbol (t ,scale ...);TstAddSymbol (t ,_fabg ,_dbcd ,_daac ,_cgdc ,1*_ddda );_dbcd =TstVSymbol (t ,scale ...);TstAddSymbol (t ,_fabg ,_dbcd ,_daac ,_cgdc ,1*_ddda );
_dbcd =TstESymbol (t ,scale ...);TstAddSymbol (t ,_fabg ,_dbcd ,_daac ,_cgdc ,1*_ddda );_dbcd =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_fabg ,_dbcd ,_daac ,_cgdc ,0);TstWriteSymbols (t ,_fabg ,_abgc );return _abgc ;};func _gcad (_eefg ,_efgg *Bitmap ,_fegb ,_edfb ,_gdb ,_bfcge ,_acg ,_aegc ,_cebc ,_adb int ,_baeg CombinationOperator )error {var _fag int ;
_fbgb :=func (){_fag ++;_gdb +=_efgg .RowStride ;_bfcge +=_eefg .RowStride ;_acg +=_eefg .RowStride };for _fag =_fegb ;_fag < _edfb ;_fbgb (){var _fbbg uint16 ;_gdfc :=_gdb ;for _cdce :=_bfcge ;_cdce <=_acg ;_cdce ++{_adde ,_cdda :=_efgg .GetByte (_gdfc );
if _cdda !=nil {return _cdda ;};_bfcf ,_cdda :=_eefg .GetByte (_cdce );if _cdda !=nil {return _cdda ;};_fbbg =(_fbbg |uint16 (_bfcf ))<<uint (_adb );_bfcf =byte (_fbbg >>8);if _cdce ==_acg {_bfcf =_eabg (uint (_aegc ),_bfcf );};if _cdda =_efgg .SetByte (_gdfc ,_cege (_adde ,_bfcf ,_baeg ));
_cdda !=nil {return _cdda ;};_gdfc ++;_fbbg <<=uint (_cebc );};};return nil ;};func (_gdbg *ClassedPoints )Swap (i ,j int ){_gdbg .IntSlice [i ],_gdbg .IntSlice [j ]=_gdbg .IntSlice [j ],_gdbg .IntSlice [i ];};func _cdgae (_cegda ,_gecaa int ,_bbga string )*Selection {_dedf :=&Selection {Height :_cegda ,Width :_gecaa ,Name :_bbga };
_dedf .Data =make ([][]SelectionValue ,_cegda );for _dgbc :=0;_dgbc < _cegda ;_dgbc ++{_dedf .Data [_dgbc ]=make ([]SelectionValue ,_gecaa );};return _dedf ;};func (_cgea *Bitmap )SetByte (index int ,v byte )error {if index > len (_cgea .Data )-1||index < 0{return _c .Errorf ("\u0053e\u0074\u0042\u0079\u0074\u0065","\u0069\u006e\u0064\u0065x \u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020%\u0064",index );
};_cgea .Data [index ]=v ;return nil ;};func (_gfcf *Bitmap )ToImage ()_ee .Image {_cfg ,_bcce :=_fd .NewImage (_gfcf .Width ,_gfcf .Height ,1,1,_gfcf .Data ,nil ,nil );if _bcce !=nil {_aa .Log .Error ("\u0043\u006f\u006e\u0076\u0065\u0072\u0074\u0069\u006e\u0067\u0020j\u0062\u0069\u0067\u0032\u002e\u0042\u0069\u0074m\u0061p\u0020\u0074\u006f\u0020\u0069\u006d\u0061\u0067\u0065\u0075\u0074\u0069\u006c\u002e\u0049\u006d\u0061\u0067e\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_bcce );
};return _cfg ;};func (_gacc Points )Size ()int {return len (_gacc )};func (_fgce Points )Get (i int )(Point ,error ){if i > len (_fgce )-1{return Point {},_c .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _fgce [i ],nil ;};func _aae (_eedd *Bitmap ,_fg int )(*Bitmap ,error ){const _aeb ="\u0065x\u0070a\u006e\u0064\u0042\u0069\u006ea\u0072\u0079P\u006f\u0077\u0065\u0072\u0032";if _eedd ==nil {return nil ,_c .Error (_aeb ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _fg ==1{return _fcbc (nil ,_eedd );};if _fg !=2&&_fg !=4&&_fg !=8{return nil ,_c .Error (_aeb ,"\u0066\u0061\u0063t\u006f\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0069n\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d\u0020\u0072\u0061\u006e\u0067\u0065");
};_gfc :=_fg *_eedd .Width ;_bc :=_fg *_eedd .Height ;_aaa :=New (_gfc ,_bc );var _caa error ;switch _fg {case 2:_caa =_eed (_aaa ,_eedd );case 4:_caa =_fef (_aaa ,_eedd );case 8:_caa =_cg (_aaa ,_eedd );};if _caa !=nil {return nil ,_c .Wrap (_caa ,_aeb ,"");
};return _aaa ,nil ;};func (_ebfc *Bitmap )GetByteIndex (x ,y int )int {return y *_ebfc .RowStride +(x >>3)};func (_eeef *Bitmap )equivalent (_efgf *Bitmap )bool {if _eeef ==_efgf {return true ;};if !_eeef .SizesEqual (_efgf ){return false ;};_geef :=_daead (_eeef ,_efgf ,CmbOpXor );
_def :=_eeef .countPixels ();_dgca :=int (0.25*float32 (_def ));if _geef .thresholdPixelSum (_dgca ){return false ;};var (_bda [9][9]int ;_edda [18][9]int ;_fgeb [9][18]int ;_aab int ;_caag int ;);_gcb :=9;_bce :=_eeef .Height /_gcb ;_cabb :=_eeef .Width /_gcb ;
_fbba ,_bfagb :=_bce /2,_cabb /2;if _bce < _cabb {_fbba =_cabb /2;_bfagb =_bce /2;};_eab :=float64 (_fbba )*float64 (_bfagb )*_ec .Pi ;_gaad :=int (float64 (_bce *_cabb /2)*0.9);_cfd :=int (float64 (_cabb *_bce /2)*0.9);for _fbfg :=0;_fbfg < _gcb ;_fbfg ++{_ecaf :=_cabb *_fbfg +_aab ;
var _cade int ;if _fbfg ==_gcb -1{_aab =0;_cade =_eeef .Width ;}else {_cade =_ecaf +_cabb ;if ((_eeef .Width -_aab )%_gcb )> 0{_aab ++;_cade ++;};};for _edgdd :=0;_edgdd < _gcb ;_edgdd ++{_bgee :=_bce *_edgdd +_caag ;var _acb int ;if _edgdd ==_gcb -1{_caag =0;
_acb =_eeef .Height ;}else {_acb =_bgee +_bce ;if (_eeef .Height -_caag )%_gcb > 0{_caag ++;_acb ++;};};var _bgfa ,_aefe ,_bfcg ,_efee int ;_edec :=(_ecaf +_cade )/2;_bad :=(_bgee +_acb )/2;for _cfb :=_ecaf ;_cfb < _cade ;_cfb ++{for _fffd :=_bgee ;_fffd < _acb ;
_fffd ++{if _geef .GetPixel (_cfb ,_fffd ){if _cfb < _edec {_bgfa ++;}else {_aefe ++;};if _fffd < _bad {_efee ++;}else {_bfcg ++;};};};};_bda [_fbfg ][_edgdd ]=_bgfa +_aefe ;_edda [_fbfg *2][_edgdd ]=_bgfa ;_edda [_fbfg *2+1][_edgdd ]=_aefe ;_fgeb [_fbfg ][_edgdd *2]=_efee ;
_fgeb [_fbfg ][_edgdd *2+1]=_bfcg ;};};for _cbc :=0;_cbc < _gcb *2-1;_cbc ++{for _beg :=0;_beg < (_gcb -1);_beg ++{var _abf int ;for _gabf :=0;_gabf < 2;_gabf ++{for _ebaag :=0;_ebaag < 2;_ebaag ++{_abf +=_edda [_cbc +_gabf ][_beg +_ebaag ];};};if _abf > _cfd {return false ;
};};};for _bbf :=0;_bbf < (_gcb -1);_bbf ++{for _ecbd :=0;_ecbd < ((_gcb *2)-1);_ecbd ++{var _cff int ;for _bbdc :=0;_bbdc < 2;_bbdc ++{for _bff :=0;_bff < 2;_bff ++{_cff +=_fgeb [_bbf +_bbdc ][_ecbd +_bff ];};};if _cff > _gaad {return false ;};};};for _bfe :=0;
_bfe < (_gcb -2);_bfe ++{for _cae :=0;_cae < (_gcb -2);_cae ++{var _edfe ,_ffdg int ;for _baga :=0;_baga < 3;_baga ++{for _defg :=0;_defg < 3;_defg ++{if _baga ==_defg {_edfe +=_bda [_bfe +_baga ][_cae +_defg ];};if (2-_baga )==_defg {_ffdg +=_bda [_bfe +_baga ][_cae +_defg ];
};};};if _edfe > _cfd ||_ffdg > _cfd {return false ;};};};for _dgbe :=0;_dgbe < (_gcb -1);_dgbe ++{for _bdad :=0;_bdad < (_gcb -1);_bdad ++{var _bceg int ;for _gadd :=0;_gadd < 2;_gadd ++{for _eda :=0;_eda < 2;_eda ++{_bceg +=_bda [_dgbe +_gadd ][_bdad +_eda ];
};};if float64 (_bceg )> _eab {return false ;};};};return true ;};const _bagb =5000;type Boxes []*_ee .Rectangle ;func (_ebdb *BitmapsArray )AddBitmaps (bm *Bitmaps ){_ebdb .Values =append (_ebdb .Values ,bm )};func (_aedf *Bitmaps )WidthSorter ()func (_efga ,_ecba int )bool {return func (_gddd ,_cfbf int )bool {return _aedf .Values [_gddd ].Width < _aedf .Values [_cfbf ].Width };
};type Bitmaps struct{Values []*Bitmap ;Boxes []*_ee .Rectangle ;};func (_ddeg *Bitmap )inverseData (){if _aebc :=_ddeg .RasterOperation (0,0,_ddeg .Width ,_ddeg .Height ,PixNotDst ,nil ,0,0);_aebc !=nil {_aa .Log .Debug ("\u0049n\u0076\u0065\u0072\u0073e\u0020\u0064\u0061\u0074\u0061 \u0066a\u0069l\u0065\u0064\u003a\u0020\u0027\u0025\u0076'",_aebc );
};if _ddeg .Color ==Chocolate {_ddeg .Color =Vanilla ;}else {_ddeg .Color =Chocolate ;};};func New (width ,height int )*Bitmap {_dec :=_dcg (width ,height );_dec .Data =make ([]byte ,height *_dec .RowStride );return _dec ;};func (_fcdb *Bitmap )thresholdPixelSum (_cfag int )bool {var (_ffef int ;
_bbcb uint8 ;_bagge byte ;_cdba int ;);_agge :=_fcdb .RowStride ;_ccbc :=uint (_fcdb .Width &0x07);if _ccbc !=0{_bbcb =uint8 ((0xff<<(8-_ccbc ))&0xff);_agge --;};for _ccfgf :=0;_ccfgf < _fcdb .Height ;_ccfgf ++{for _cdba =0;_cdba < _agge ;_cdba ++{_bagge =_fcdb .Data [_ccfgf *_fcdb .RowStride +_cdba ];
_ffef +=int (_fcg [_bagge ]);};if _ccbc !=0{_bagge =_fcdb .Data [_ccfgf *_fcdb .RowStride +_cdba ]&_bbcb ;_ffef +=int (_fcg [_bagge ]);};if _ffef > _cfag {return true ;};};return false ;};func (_cfcf *Boxes )makeSizeIndicator (_ccbb ,_eega int ,_ebag LocationFilter ,_egf SizeComparison )*_e .NumSlice {_dgba :=&_e .NumSlice {};
var _eage ,_eaeg ,_dfeg int ;for _ ,_egaad :=range *_cfcf {_eage =0;_eaeg ,_dfeg =_egaad .Dx (),_egaad .Dy ();switch _ebag {case LocSelectWidth :if (_egf ==SizeSelectIfLT &&_eaeg < _ccbb )||(_egf ==SizeSelectIfGT &&_eaeg > _ccbb )||(_egf ==SizeSelectIfLTE &&_eaeg <=_ccbb )||(_egf ==SizeSelectIfGTE &&_eaeg >=_ccbb ){_eage =1;
};case LocSelectHeight :if (_egf ==SizeSelectIfLT &&_dfeg < _eega )||(_egf ==SizeSelectIfGT &&_dfeg > _eega )||(_egf ==SizeSelectIfLTE &&_dfeg <=_eega )||(_egf ==SizeSelectIfGTE &&_dfeg >=_eega ){_eage =1;};case LocSelectIfEither :if (_egf ==SizeSelectIfLT &&(_dfeg < _eega ||_eaeg < _ccbb ))||(_egf ==SizeSelectIfGT &&(_dfeg > _eega ||_eaeg > _ccbb ))||(_egf ==SizeSelectIfLTE &&(_dfeg <=_eega ||_eaeg <=_ccbb ))||(_egf ==SizeSelectIfGTE &&(_dfeg >=_eega ||_eaeg >=_ccbb )){_eage =1;
};case LocSelectIfBoth :if (_egf ==SizeSelectIfLT &&(_dfeg < _eega &&_eaeg < _ccbb ))||(_egf ==SizeSelectIfGT &&(_dfeg > _eega &&_eaeg > _ccbb ))||(_egf ==SizeSelectIfLTE &&(_dfeg <=_eega &&_eaeg <=_ccbb ))||(_egf ==SizeSelectIfGTE &&(_dfeg >=_eega &&_eaeg >=_ccbb )){_eage =1;
};};_dgba .AddInt (_eage );};return _dgba ;};type shift int ;type ClassedPoints struct{*Points ;_e .IntSlice ;_dbea func (_acfg ,_gbf int )bool ;};func (_cbg *Bitmap )setPadBits (_bdd int ){_gagc :=8-_cbg .Width %8;if _gagc ==8{return ;};_ccbd :=_cbg .Width /8;
_fgga :=_gdee [_gagc ];if _bdd ==0{_fgga ^=_fgga ;};var _dcbb int ;for _eefc :=0;_eefc < _cbg .Height ;_eefc ++{_dcbb =_eefc *_cbg .RowStride +_ccbd ;if _bdd ==0{_cbg .Data [_dcbb ]&=_fgga ;}else {_cbg .Data [_dcbb ]|=_fgga ;};};};func TstWriteSymbols (t *_cd .T ,bms *Bitmaps ,src *Bitmap ){for _afdg :=0;
_afdg < bms .Size ();_afdg ++{_dfda :=bms .Values [_afdg ];_eggb :=bms .Boxes [_afdg ];_ecgfd :=src .RasterOperation (_eggb .Min .X ,_eggb .Min .Y ,_dfda .Width ,_dfda .Height ,PixSrc ,_dfda ,0,0);_fe .NoError (t ,_ecgfd );};};func (_dbfe *Bitmap )ClipRectangle (box *_ee .Rectangle )(_dce *Bitmap ,_afb *_ee .Rectangle ,_agd error ){const _egce ="\u0043\u006c\u0069\u0070\u0052\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065";
if box ==nil {return nil ,nil ,_c .Error (_egce ,"\u0062o\u0078 \u0069\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};_abeg ,_fce :=_dbfe .Width ,_dbfe .Height ;_gfec :=_ee .Rect (0,0,_abeg ,_fce );if !box .Overlaps (_gfec ){return nil ,nil ,_c .Error (_egce ,"b\u006f\u0078\u0020\u0064oe\u0073n\u0027\u0074\u0020\u006f\u0076e\u0072\u006c\u0061\u0070\u0020\u0062");
};_gaa :=box .Intersect (_gfec );_ecb ,_eeb :=_gaa .Min .X ,_gaa .Min .Y ;_ccfb ,_addfa :=_gaa .Dx (),_gaa .Dy ();_dce =New (_ccfb ,_addfa );_dce .Text =_dbfe .Text ;if _agd =_dce .RasterOperation (0,0,_ccfb ,_addfa ,PixSrc ,_dbfe ,_ecb ,_eeb );_agd !=nil {return nil ,nil ,_c .Wrap (_agd ,_egce ,"\u0050\u0069\u0078\u0053\u0072\u0063\u0020\u0074\u006f\u0020\u0063\u006ci\u0070\u0070\u0065\u0064");
};_afb =&_gaa ;return _dce ,_afb ,nil ;};func _dgfg (_aff ,_fcc *Bitmap ,_bgg int ,_bcc []byte ,_bcd int )(_fgb error ){const _dcf ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0034";
var (_ggf ,_agg ,_fddf ,_dea ,_abe ,_baf ,_afa ,_abc int ;_faf ,_gdc uint32 ;_fdf ,_add byte ;_cccd uint16 ;);_ebb :=make ([]byte ,4);_daea :=make ([]byte ,4);for _fddf =0;_fddf < _aff .Height -1;_fddf ,_dea =_fddf +2,_dea +1{_ggf =_fddf *_aff .RowStride ;
_agg =_dea *_fcc .RowStride ;for _abe ,_baf =0,0;_abe < _bcd ;_abe ,_baf =_abe +4,_baf +1{for _afa =0;_afa < 4;_afa ++{_abc =_ggf +_abe +_afa ;if _abc <=len (_aff .Data )-1&&_abc < _ggf +_aff .RowStride {_ebb [_afa ]=_aff .Data [_abc ];}else {_ebb [_afa ]=0x00;
};_abc =_ggf +_aff .RowStride +_abe +_afa ;if _abc <=len (_aff .Data )-1&&_abc < _ggf +(2*_aff .RowStride ){_daea [_afa ]=_aff .Data [_abc ];}else {_daea [_afa ]=0x00;};};_faf =_g .BigEndian .Uint32 (_ebb );_gdc =_g .BigEndian .Uint32 (_daea );_gdc &=_faf ;
_gdc &=_gdc <<1;_gdc &=0xaaaaaaaa;_faf =_gdc |(_gdc <<7);_fdf =byte (_faf >>24);_add =byte ((_faf >>8)&0xff);_abc =_agg +_baf ;if _abc +1==len (_fcc .Data )-1||_abc +1>=_agg +_fcc .RowStride {_fcc .Data [_abc ]=_bcc [_fdf ];if _fgb =_fcc .SetByte (_abc ,_bcc [_fdf ]);
_fgb !=nil {return _c .Wrapf (_fgb ,_dcf ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_abc );};}else {_cccd =(uint16 (_bcc [_fdf ])<<8)|uint16 (_bcc [_add ]);if _fgb =_fcc .setTwoBytes (_abc ,_cccd );_fgb !=nil {return _c .Wrapf (_fgb ,_dcf ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_abc );
};_baf ++;};};};return nil ;};func _aga (_caage *Bitmap ,_aeca *Bitmap ,_gbff int )(_ffdgc error ){const _fbgef ="\u0073\u0065\u0065\u0064\u0066\u0069\u006c\u006c\u0042\u0069\u006e\u0061r\u0079\u004c\u006f\u0077";_aeeb :=_aegb (_caage .Height ,_aeca .Height );
_decfc :=_aegb (_caage .RowStride ,_aeca .RowStride );switch _gbff {case 4:_ffdgc =_edbc (_caage ,_aeca ,_aeeb ,_decfc );case 8:_ffdgc =_fbcfg (_caage ,_aeca ,_aeeb ,_decfc );default:return _c .Errorf (_fbgef ,"\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0034\u0020\u006fr\u0020\u0038\u0020\u002d\u0020i\u0073\u003a \u0027\u0025\u0064\u0027",_gbff );
};if _ffdgc !=nil {return _c .Wrap (_ffdgc ,_fbgef ,"");};return nil ;};func (_cfdc *Bitmaps )AddBitmap (bm *Bitmap ){_cfdc .Values =append (_cfdc .Values ,bm )};func MakePixelSumTab8 ()[]int {return _fcdbf ()};func (_gbgg *ClassedPoints )ySortFunction ()func (_fbcdf int ,_aagg int )bool {return func (_dcggf ,_dfbc int )bool {return _gbgg .YAtIndex (_dcggf )< _gbgg .YAtIndex (_dfbc )};
};func _cg (_aef ,_bfa *Bitmap )(_cdd error ){const _cc ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0038";_dcd :=_bfa .RowStride ;_gda :=_aef .RowStride ;var _cag ,_ag ,_ccc ,_db ,_fbf int ;for _ccc =0;
_ccc < _bfa .Height ;_ccc ++{_cag =_ccc *_dcd ;_ag =8*_ccc *_gda ;for _db =0;_db < _dcd ;_db ++{if _cdd =_aef .setEightBytes (_ag +_db *8,_ccfe [_bfa .Data [_cag +_db ]]);_cdd !=nil {return _c .Wrap (_cdd ,_cc ,"");};};for _fbf =1;_fbf < 8;_fbf ++{for _db =0;
_db < _gda ;_db ++{if _cdd =_aef .SetByte (_ag +_fbf *_gda +_db ,_aef .Data [_ag +_db ]);_cdd !=nil {return _c .Wrap (_cdd ,_cc ,"");};};};};return nil ;};func _dcge (_afbc *Bitmap ,_aegcc *Bitmap ,_dffd *Selection ,_adce **Bitmap )(*Bitmap ,error ){const _cfcfg ="\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u004d\u006f\u0072\u0070\u0068A\u0072\u0067\u0073\u0031";
if _aegcc ==nil {return nil ,_c .Error (_cfcfg ,"\u004d\u006f\u0072\u0070\u0068\u0041\u0072\u0067\u0073\u0031\u0020'\u0073\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066i\u006e\u0065\u0064");};if _dffd ==nil {return nil ,_c .Error (_cfcfg ,"\u004d\u006f\u0072\u0068p\u0041\u0072\u0067\u0073\u0031\u0020\u0027\u0073\u0065\u006c'\u0020n\u006f\u0074\u0020\u0064\u0065\u0066\u0069n\u0065\u0064");
};_degb ,_ccgc :=_dffd .Height ,_dffd .Width ;if _degb ==0||_ccgc ==0{return nil ,_c .Error (_cfcfg ,"\u0073\u0065\u006c\u0065ct\u0069\u006f\u006e\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u0020\u0030");};if _afbc ==nil {_afbc =_aegcc .createTemplate ();
*_adce =_aegcc ;return _afbc ,nil ;};_afbc .Width =_aegcc .Width ;_afbc .Height =_aegcc .Height ;_afbc .RowStride =_aegcc .RowStride ;_afbc .Color =_aegcc .Color ;_afbc .Data =make ([]byte ,_aegcc .RowStride *_aegcc .Height );if _afbc ==_aegcc {*_adce =_aegcc .Copy ();
}else {*_adce =_aegcc ;};return _afbc ,nil ;};func _fcf (_eacgg *Bitmap ,_cbde ,_afed ,_acde ,_ageg int ,_dfgd RasterOperator ){if _cbde < 0{_acde +=_cbde ;_cbde =0;};_ceef :=_cbde +_acde -_eacgg .Width ;if _ceef > 0{_acde -=_ceef ;};if _afed < 0{_ageg +=_afed ;
_afed =0;};_cafd :=_afed +_ageg -_eacgg .Height ;if _cafd > 0{_ageg -=_cafd ;};if _acde <=0||_ageg <=0{return ;};if (_cbde &7)==0{_faagd (_eacgg ,_cbde ,_afed ,_acde ,_ageg ,_dfgd );}else {_agdf (_eacgg ,_cbde ,_afed ,_acde ,_ageg ,_dfgd );};};func (_fefb *Bitmap )connComponentsBitmapsBB (_cbbg *Bitmaps ,_addg int )(_fgbe *Boxes ,_cded error ){const _decf ="\u0063\u006f\u006enC\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0042\u0069\u0074\u006d\u0061\u0070\u0073\u0042\u0042";
if _addg !=4&&_addg !=8{return nil ,_c .Error (_decf ,"\u0063\u006f\u006e\u006e\u0065\u0063t\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0027\u0034\u0027\u0020\u006fr\u0020\u0027\u0038\u0027");};if _cbbg ==nil {return nil ,_c .Error (_decf ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0042\u0069\u0074ma\u0070\u0073");
};if len (_cbbg .Values )> 0{return nil ,_c .Error (_decf ,"\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u006fn\u002d\u0065\u006d\u0070\u0074\u0079\u0020\u0042\u0069\u0074m\u0061\u0070\u0073");};if _fefb .Zero (){return &Boxes {},nil ;};
var (_bgccc ,_dcfc ,_fadf ,_ecgf *Bitmap ;);_fefb .setPadBits (0);if _bgccc ,_cded =_fcbc (nil ,_fefb );_cded !=nil {return nil ,_c .Wrap (_cded ,_decf ,"\u0062\u006d\u0031");};if _dcfc ,_cded =_fcbc (nil ,_fefb );_cded !=nil {return nil ,_c .Wrap (_cded ,_decf ,"\u0062\u006d\u0032");
};_eadb :=&_e .Stack {};_eadb .Aux =&_e .Stack {};_fgbe =&Boxes {};var (_gaeg ,_fbgg int ;_fgfe _ee .Point ;_eccd bool ;_abdf *_ee .Rectangle ;);for {if _fgfe ,_eccd ,_cded =_bgccc .nextOnPixel (_gaeg ,_fbgg );_cded !=nil {return nil ,_c .Wrap (_cded ,_decf ,"");
};if !_eccd {break ;};if _abdf ,_cded =_fabd (_bgccc ,_eadb ,_fgfe .X ,_fgfe .Y ,_addg );_cded !=nil {return nil ,_c .Wrap (_cded ,_decf ,"");};if _cded =_fgbe .Add (_abdf );_cded !=nil {return nil ,_c .Wrap (_cded ,_decf ,"");};if _fadf ,_cded =_bgccc .clipRectangle (_abdf ,nil );
_cded !=nil {return nil ,_c .Wrap (_cded ,_decf ,"\u0062\u006d\u0033");};if _ecgf ,_cded =_dcfc .clipRectangle (_abdf ,nil );_cded !=nil {return nil ,_c .Wrap (_cded ,_decf ,"\u0062\u006d\u0034");};if _ ,_cded =_eeddg (_fadf ,_fadf ,_ecgf );_cded !=nil {return nil ,_c .Wrap (_cded ,_decf ,"\u0062m\u0033\u0020\u005e\u0020\u0062\u006d4");
};if _cded =_dcfc .RasterOperation (_abdf .Min .X ,_abdf .Min .Y ,_abdf .Dx (),_abdf .Dy (),PixSrcXorDst ,_fadf ,0,0);_cded !=nil {return nil ,_c .Wrap (_cded ,_decf ,"\u0062\u006d\u0032\u0020\u002d\u0058\u004f\u0052\u002d>\u0020\u0062\u006d\u0033");};
_cbbg .AddBitmap (_fadf );_gaeg =_fgfe .X ;_fbgg =_fgfe .Y ;};_cbbg .Boxes =*_fgbe ;return _fgbe ,nil ;};func (_bgf *Bitmap )InverseData (){_bgf .inverseData ()};func _ebgcc (_baddg *Bitmap ,_fggc *_e .Stack ,_cbgbc ,_cec int )(_cgba *_ee .Rectangle ,_fbgca error ){const _affff ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";
if _baddg ==nil {return nil ,_c .Error (_affff ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _fggc ==nil {return nil ,_c .Error (_affff ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");
};_feab ,_acffd :=_baddg .Width ,_baddg .Height ;_ffeb :=_feab -1;_agda :=_acffd -1;if _cbgbc < 0||_cbgbc > _ffeb ||_cec < 0||_cec > _agda ||!_baddg .GetPixel (_cbgbc ,_cec ){return nil ,nil ;};_eedc :=_ee .Rect (100000,100000,0,0);if _fbgca =_eecfc (_fggc ,_cbgbc ,_cbgbc ,_cec ,1,_agda ,&_eedc );
_fbgca !=nil {return nil ,_c .Wrap (_fbgca ,_affff ,"\u0069\u006e\u0069t\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _fbgca =_eecfc (_fggc ,_cbgbc ,_cbgbc ,_cec +1,-1,_agda ,&_eedc );_fbgca !=nil {return nil ,_c .Wrap (_fbgca ,_affff ,"\u0032\u006ed\u0020\u0069\u006ei\u0074\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");
};_eedc .Min .X ,_eedc .Max .X =_cbgbc ,_cbgbc ;_eedc .Min .Y ,_eedc .Max .Y =_cec ,_cec ;var (_ebcd *fillSegment ;_feeg int ;);for _fggc .Len ()> 0{if _ebcd ,_fbgca =_dceg (_fggc );_fbgca !=nil {return nil ,_c .Wrap (_fbgca ,_affff ,"");};_cec =_ebcd ._ebdg ;
for _cbgbc =_ebcd ._ccdc -1;_cbgbc >=0&&_baddg .GetPixel (_cbgbc ,_cec );_cbgbc --{if _fbgca =_baddg .SetPixel (_cbgbc ,_cec ,0);_fbgca !=nil {return nil ,_c .Wrap (_fbgca ,_affff ,"\u0031s\u0074\u0020\u0073\u0065\u0074");};};if _cbgbc >=_ebcd ._ccdc -1{for {for _cbgbc ++;
_cbgbc <=_ebcd ._ggab +1&&_cbgbc <=_ffeb &&!_baddg .GetPixel (_cbgbc ,_cec );_cbgbc ++{};_feeg =_cbgbc ;if !(_cbgbc <=_ebcd ._ggab +1&&_cbgbc <=_ffeb ){break ;};for ;_cbgbc <=_ffeb &&_baddg .GetPixel (_cbgbc ,_cec );_cbgbc ++{if _fbgca =_baddg .SetPixel (_cbgbc ,_cec ,0);
_fbgca !=nil {return nil ,_c .Wrap (_fbgca ,_affff ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _fbgca =_eecfc (_fggc ,_feeg ,_cbgbc -1,_ebcd ._ebdg ,_ebcd ._afbcf ,_agda ,&_eedc );_fbgca !=nil {return nil ,_c .Wrap (_fbgca ,_affff ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");
};if _cbgbc > _ebcd ._ggab {if _fbgca =_eecfc (_fggc ,_ebcd ._ggab +1,_cbgbc -1,_ebcd ._ebdg ,-_ebcd ._afbcf ,_agda ,&_eedc );_fbgca !=nil {return nil ,_c .Wrap (_fbgca ,_affff ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};};continue ;};_feeg =_cbgbc +1;if _feeg < _ebcd ._ccdc {if _fbgca =_eecfc (_fggc ,_feeg ,_ebcd ._ccdc -1,_ebcd ._ebdg ,-_ebcd ._afbcf ,_agda ,&_eedc );_fbgca !=nil {return nil ,_c .Wrap (_fbgca ,_affff ,"\u006c\u0065\u0061\u006b\u0020\u006f\u006e\u0020\u006c\u0065\u0066\u0074 \u0073\u0069\u0064\u0065");
};};_cbgbc =_ebcd ._ccdc ;for {for ;_cbgbc <=_ffeb &&_baddg .GetPixel (_cbgbc ,_cec );_cbgbc ++{if _fbgca =_baddg .SetPixel (_cbgbc ,_cec ,0);_fbgca !=nil {return nil ,_c .Wrap (_fbgca ,_affff ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _fbgca =_eecfc (_fggc ,_feeg ,_cbgbc -1,_ebcd ._ebdg ,_ebcd ._afbcf ,_agda ,&_eedc );
_fbgca !=nil {return nil ,_c .Wrap (_fbgca ,_affff ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _cbgbc > _ebcd ._ggab {if _fbgca =_eecfc (_fggc ,_ebcd ._ggab +1,_cbgbc -1,_ebcd ._ebdg ,-_ebcd ._afbcf ,_agda ,&_eedc );_fbgca !=nil {return nil ,_c .Wrap (_fbgca ,_affff ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};for _cbgbc ++;_cbgbc <=_ebcd ._ggab +1&&_cbgbc <=_ffeb &&!_baddg .GetPixel (_cbgbc ,_cec );_cbgbc ++{};_feeg =_cbgbc ;if !(_cbgbc <=_ebcd ._ggab +1&&_cbgbc <=_ffeb ){break ;};};};_eedc .Max .X ++;_eedc .Max .Y ++;return &_eedc ,nil ;};func (_dde *Bitmap )GetPixel (x ,y int )bool {_edf :=_dde .GetByteIndex (x ,y );
_gaec :=_dde .GetBitOffset (x );_cgbd :=uint (7-_gaec );if _edf > len (_dde .Data )-1{_aa .Log .Debug ("\u0054\u0072\u0079\u0069\u006e\u0067\u0020\u0074\u006f\u0020\u0067\u0065\u0074\u0020\u0070\u0069\u0078\u0065\u006c\u0020o\u0075\u0074\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0064\u0061\u0074\u0061\u0020\u0072\u0061\u006e\u0067\u0065\u002e \u0078\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0079\u003a\u0027\u0025\u0064'\u002c\u0020\u0062m\u003a\u0020\u0027\u0025\u0073\u0027",x ,y ,_dde );
return false ;};if (_dde .Data [_edf ]>>_cgbd )&0x01>=1{return true ;};return false ;};func (_dcea *Bitmaps )CountPixels ()*_e .NumSlice {_bgced :=&_e .NumSlice {};for _ ,_cbac :=range _dcea .Values {_bgced .AddInt (_cbac .CountPixels ());};return _bgced ;
};func _fbbe (_eegb ,_gceg int )int {if _eegb > _gceg {return _eegb ;};return _gceg ;};type SizeSelection int ;func (_eafg *ClassedPoints )SortByX (){_eafg ._dbea =_eafg .xSortFunction ();_ff .Sort (_eafg )};func Copy (d ,s *Bitmap )(*Bitmap ,error ){return _fcbc (d ,s )};
func _fbcfg (_fefg ,_ccdb *Bitmap ,_afff ,_aecad int )(_cabbg error ){const _dagdc ="\u0073e\u0065d\u0066\u0069\u006c\u006c\u0042i\u006e\u0061r\u0079\u004c\u006f\u0077\u0038";var (_gbeb ,_fddc ,_fagd ,_dbbc int ;_cdad ,_agea ,_dbcc ,_bdab ,_deb ,_bfge ,_bdgf ,_bdac byte ;
);for _gbeb =0;_gbeb < _afff ;_gbeb ++{_fagd =_gbeb *_fefg .RowStride ;_dbbc =_gbeb *_ccdb .RowStride ;for _fddc =0;_fddc < _aecad ;_fddc ++{if _cdad ,_cabbg =_fefg .GetByte (_fagd +_fddc );_cabbg !=nil {return _c .Wrap (_cabbg ,_dagdc ,"\u0067e\u0074 \u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");
};if _agea ,_cabbg =_ccdb .GetByte (_dbbc +_fddc );_cabbg !=nil {return _c .Wrap (_cabbg ,_dagdc ,"\u0067\u0065\u0074\u0020\u006d\u0061\u0073\u006b\u0020\u0062\u0079\u0074\u0065");};if _gbeb > 0{if _dbcc ,_cabbg =_fefg .GetByte (_fagd -_fefg .RowStride +_fddc );
_cabbg !=nil {return _c .Wrap (_cabbg ,_dagdc ,"\u0069\u0020\u003e\u0020\u0030\u0020\u0062\u0079\u0074\u0065");};_cdad |=_dbcc |(_dbcc <<1)|(_dbcc >>1);if _fddc > 0{if _bdac ,_cabbg =_fefg .GetByte (_fagd -_fefg .RowStride +_fddc -1);_cabbg !=nil {return _c .Wrap (_cabbg ,_dagdc ,"\u0069\u0020\u003e\u00200 \u0026\u0026\u0020\u006a\u0020\u003e\u0020\u0030\u0020\u0062\u0079\u0074\u0065");
};_cdad |=_bdac <<7;};if _fddc < _aecad -1{if _bdac ,_cabbg =_fefg .GetByte (_fagd -_fefg .RowStride +_fddc +1);_cabbg !=nil {return _c .Wrap (_cabbg ,_dagdc ,"\u006a\u0020<\u0020\u0077\u0070l\u0020\u002d\u0020\u0031\u0020\u0062\u0079\u0074\u0065");};_cdad |=_bdac >>7;
};};if _fddc > 0{if _bdab ,_cabbg =_fefg .GetByte (_fagd +_fddc -1);_cabbg !=nil {return _c .Wrap (_cabbg ,_dagdc ,"\u006a\u0020\u003e \u0030");};_cdad |=_bdab <<7;};_cdad &=_agea ;if _cdad ==0||^_cdad ==0{if _cabbg =_fefg .SetByte (_fagd +_fddc ,_cdad );
_cabbg !=nil {return _c .Wrap (_cabbg ,_dagdc ,"\u0073e\u0074t\u0069\u006e\u0067\u0020\u0065m\u0070\u0074y\u0020\u0062\u0079\u0074\u0065");};};for {_bdgf =_cdad ;_cdad =(_cdad |(_cdad >>1)|(_cdad <<1))&_agea ;if (_cdad ^_bdgf )==0{if _cabbg =_fefg .SetByte (_fagd +_fddc ,_cdad );
_cabbg !=nil {return _c .Wrap (_cabbg ,_dagdc ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0070\u0072\u0065\u0076 \u0062\u0079\u0074\u0065");};break ;};};};};for _gbeb =_afff -1;_gbeb >=0;_gbeb --{_fagd =_gbeb *_fefg .RowStride ;_dbbc =_gbeb *_ccdb .RowStride ;
for _fddc =_aecad -1;_fddc >=0;_fddc --{if _cdad ,_cabbg =_fefg .GetByte (_fagd +_fddc );_cabbg !=nil {return _c .Wrap (_cabbg ,_dagdc ,"\u0072\u0065\u0076er\u0073\u0065\u0020\u0067\u0065\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");
};if _agea ,_cabbg =_ccdb .GetByte (_dbbc +_fddc );_cabbg !=nil {return _c .Wrap (_cabbg ,_dagdc ,"r\u0065\u0076\u0065\u0072se\u0020g\u0065\u0074\u0020\u006d\u0061s\u006b\u0020\u0062\u0079\u0074\u0065");};if _gbeb < _afff -1{if _deb ,_cabbg =_fefg .GetByte (_fagd +_fefg .RowStride +_fddc );
_cabbg !=nil {return _c .Wrap (_cabbg ,_dagdc ,"\u0069\u0020\u003c\u0020h\u0020\u002d\u0020\u0031\u0020\u002d\u003e\u0020\u0067\u0065t\u0020s\u006f\u0075\u0072\u0063\u0065\u0020\u0062y\u0074\u0065");};_cdad |=_deb |(_deb <<1)|_deb >>1;if _fddc > 0{if _bdac ,_cabbg =_fefg .GetByte (_fagd +_fefg .RowStride +_fddc -1);
_cabbg !=nil {return _c .Wrap (_cabbg ,_dagdc ,"\u0069\u0020\u003c h\u002d\u0031\u0020\u0026\u0020\u006a\u0020\u003e\u00200\u0020-\u003e \u0067e\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");};_cdad |=_bdac <<7;};if _fddc < _aecad -1{if _bdac ,_cabbg =_fefg .GetByte (_fagd +_fefg .RowStride +_fddc +1);
_cabbg !=nil {return _c .Wrap (_cabbg ,_dagdc ,"\u0069\u0020\u003c\u0020\u0068\u002d\u0031\u0020\u0026\u0026\u0020\u006a\u0020\u003c\u0077\u0070\u006c\u002d\u0031\u0020\u002d\u003e\u0020\u0067e\u0074\u0020\u0073\u006f\u0075r\u0063\u0065 \u0062\u0079\u0074\u0065");
};_cdad |=_bdac >>7;};};if _fddc < _aecad -1{if _bfge ,_cabbg =_fefg .GetByte (_fagd +_fddc +1);_cabbg !=nil {return _c .Wrap (_cabbg ,_dagdc ,"\u006a\u0020<\u0020\u0077\u0070\u006c\u0020\u002d\u0031\u0020\u002d\u003e\u0020\u0067\u0065\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020by\u0074\u0065");
};_cdad |=_bfge >>7;};_cdad &=_agea ;if _cdad ==0||(^_cdad )==0{if _cabbg =_fefg .SetByte (_fagd +_fddc ,_cdad );_cabbg !=nil {return _c .Wrap (_cabbg ,_dagdc ,"\u0073e\u0074 \u006d\u0061\u0073\u006b\u0065\u0064\u0020\u0062\u0079\u0074\u0065");};};for {_bdgf =_cdad ;
_cdad =(_cdad |(_cdad >>1)|(_cdad <<1))&_agea ;if (_cdad ^_bdgf )==0{if _cabbg =_fefg .SetByte (_fagd +_fddc ,_cdad );_cabbg !=nil {return _c .Wrap (_cabbg ,_dagdc ,"r\u0065\u0076\u0065\u0072se\u0020s\u0065\u0074\u0020\u0070\u0072e\u0076\u0020\u0062\u0079\u0074\u0065");
};break ;};};};};return nil ;};var _fcg [256]uint8 ;func CorrelationScore (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab []int )(_egcgd float64 ,_fbd error ){const _ebd ="\u0063\u006fr\u0072\u0065\u006ca\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065";
if bm1 ==nil ||bm2 ==nil {return 0,_c .Error (_ebd ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0062\u0069\u0074ma\u0070\u0073");};if tab ==nil {return 0,_c .Error (_ebd ,"\u0027\u0074\u0061\u0062\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};if area1 <=0||area2 <=0{return 0,_c .Error (_ebd ,"\u0061\u0072\u0065\u0061s\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0067r\u0065a\u0074\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u0030");};_gafg ,_gebd :=bm1 .Width ,bm1 .Height ;_caaab ,_gfeca :=bm2 .Width ,bm2 .Height ;
_cdfa :=_gdca (_gafg -_caaab );if _cdfa > maxDiffW {return 0,nil ;};_adab :=_gdca (_gebd -_gfeca );if _adab > maxDiffH {return 0,nil ;};var _geeg ,_dggd int ;if delX >=0{_geeg =int (delX +0.5);}else {_geeg =int (delX -0.5);};if delY >=0{_dggd =int (delY +0.5);
}else {_dggd =int (delY -0.5);};_ecee :=_fbbe (_dggd ,0);_bcdb :=_aegb (_gfeca +_dggd ,_gebd );_faeac :=bm1 .RowStride *_ecee ;_dbfa :=bm2 .RowStride *(_ecee -_dggd );_dbec :=_fbbe (_geeg ,0);_fcgf :=_aegb (_caaab +_geeg ,_gafg );_eabb :=bm2 .RowStride ;
var _fgfg ,_feff int ;if _geeg >=8{_fgfg =_geeg >>3;_faeac +=_fgfg ;_dbec -=_fgfg <<3;_fcgf -=_fgfg <<3;_geeg &=7;}else if _geeg <=-8{_feff =-((_geeg +7)>>3);_dbfa +=_feff ;_eabb -=_feff ;_geeg +=_feff <<3;};if _dbec >=_fcgf ||_ecee >=_bcdb {return 0,nil ;
};_babc :=(_fcgf +7)>>3;var (_efaba ,_cdgg ,_cbce byte ;_feed ,_abg ,_gfcg int ;);switch {case _geeg ==0:for _gfcg =_ecee ;_gfcg < _bcdb ;_gfcg ,_faeac ,_dbfa =_gfcg +1,_faeac +bm1 .RowStride ,_dbfa +bm2 .RowStride {for _abg =0;_abg < _babc ;_abg ++{_cbce =bm1 .Data [_faeac +_abg ]&bm2 .Data [_dbfa +_abg ];
_feed +=tab [_cbce ];};};case _geeg > 0:if _eabb < _babc {for _gfcg =_ecee ;_gfcg < _bcdb ;_gfcg ,_faeac ,_dbfa =_gfcg +1,_faeac +bm1 .RowStride ,_dbfa +bm2 .RowStride {_efaba ,_cdgg =bm1 .Data [_faeac ],bm2 .Data [_dbfa ]>>uint (_geeg );_cbce =_efaba &_cdgg ;
_feed +=tab [_cbce ];for _abg =1;_abg < _eabb ;_abg ++{_efaba ,_cdgg =bm1 .Data [_faeac +_abg ],(bm2 .Data [_dbfa +_abg ]>>uint (_geeg ))|(bm2 .Data [_dbfa +_abg -1]<<uint (8-_geeg ));_cbce =_efaba &_cdgg ;_feed +=tab [_cbce ];};_efaba =bm1 .Data [_faeac +_abg ];
_cdgg =bm2 .Data [_dbfa +_abg -1]<<uint (8-_geeg );_cbce =_efaba &_cdgg ;_feed +=tab [_cbce ];};}else {for _gfcg =_ecee ;_gfcg < _bcdb ;_gfcg ,_faeac ,_dbfa =_gfcg +1,_faeac +bm1 .RowStride ,_dbfa +bm2 .RowStride {_efaba ,_cdgg =bm1 .Data [_faeac ],bm2 .Data [_dbfa ]>>uint (_geeg );
_cbce =_efaba &_cdgg ;_feed +=tab [_cbce ];for _abg =1;_abg < _babc ;_abg ++{_efaba =bm1 .Data [_faeac +_abg ];_cdgg =(bm2 .Data [_dbfa +_abg ]>>uint (_geeg ))|(bm2 .Data [_dbfa +_abg -1]<<uint (8-_geeg ));_cbce =_efaba &_cdgg ;_feed +=tab [_cbce ];};};
};default:if _babc < _eabb {for _gfcg =_ecee ;_gfcg < _bcdb ;_gfcg ,_faeac ,_dbfa =_gfcg +1,_faeac +bm1 .RowStride ,_dbfa +bm2 .RowStride {for _abg =0;_abg < _babc ;_abg ++{_efaba =bm1 .Data [_faeac +_abg ];_cdgg =bm2 .Data [_dbfa +_abg ]<<uint (-_geeg );
_cdgg |=bm2 .Data [_dbfa +_abg +1]>>uint (8+_geeg );_cbce =_efaba &_cdgg ;_feed +=tab [_cbce ];};};}else {for _gfcg =_ecee ;_gfcg < _bcdb ;_gfcg ,_faeac ,_dbfa =_gfcg +1,_faeac +bm1 .RowStride ,_dbfa +bm2 .RowStride {for _abg =0;_abg < _babc -1;_abg ++{_efaba =bm1 .Data [_faeac +_abg ];
_cdgg =bm2 .Data [_dbfa +_abg ]<<uint (-_geeg );_cdgg |=bm2 .Data [_dbfa +_abg +1]>>uint (8+_geeg );_cbce =_efaba &_cdgg ;_feed +=tab [_cbce ];};_efaba =bm1 .Data [_faeac +_abg ];_cdgg =bm2 .Data [_dbfa +_abg ]<<uint (-_geeg );_cbce =_efaba &_cdgg ;_feed +=tab [_cbce ];
};};};_egcgd =float64 (_feed )*float64 (_feed )/(float64 (area1 )*float64 (area2 ));return _egcgd ,nil ;};func _fcdbf ()[]int {_dfggc :=make ([]int ,256);for _cgbb :=0;_cgbb <=0xff;_cgbb ++{_fgfgge :=byte (_cgbb );_dfggc [_fgfgge ]=int (_fgfgge &0x1)+(int (_fgfgge >>1)&0x1)+(int (_fgfgge >>2)&0x1)+(int (_fgfgge >>3)&0x1)+(int (_fgfgge >>4)&0x1)+(int (_fgfgge >>5)&0x1)+(int (_fgfgge >>6)&0x1)+(int (_fgfgge >>7)&0x1);
};return _dfggc ;};func _fgc (_gga *Bitmap ,_cdbed int ,_ge []byte )(_efbf *Bitmap ,_agf error ){const _ffb ="\u0072\u0065\u0064\u0075\u0063\u0065\u0052\u0061\u006e\u006b\u0042\u0069n\u0061\u0072\u0079\u0032";if _gga ==nil {return nil ,_c .Error (_ffb ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");
};if _cdbed < 1||_cdbed > 4{return nil ,_c .Error (_ffb ,"\u006c\u0065\u0076\u0065\u006c\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0069\u006e\u0020\u0073e\u0074\u0020\u007b\u0031\u002c\u0032\u002c\u0033\u002c\u0034\u007d");};if _gga .Height <=1{return nil ,_c .Errorf (_ffb ,"\u0073o\u0075\u0072c\u0065\u0020\u0068e\u0069\u0067\u0068\u0074\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061t\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0027\u0032\u0027\u0020-\u0020\u0069\u0073\u003a\u0020\u0027\u0025\u0064\u0027",_gga .Height );
};_efbf =New (_gga .Width /2,_gga .Height /2);if _ge ==nil {_ge =_faaf ();};_ad :=_aegb (_gga .RowStride ,2*_efbf .RowStride );switch _cdbed {case 1:_agf =_cb (_gga ,_efbf ,_cdbed ,_ge ,_ad );case 2:_agf =_eedf (_gga ,_efbf ,_cdbed ,_ge ,_ad );case 3:_agf =_dfc (_gga ,_efbf ,_cdbed ,_ge ,_ad );
case 4:_agf =_dgfg (_gga ,_efbf ,_cdbed ,_ge ,_ad );};if _agf !=nil {return nil ,_agf ;};return _efbf ,nil ;};func NewWithData (width ,height int ,data []byte )(*Bitmap ,error ){const _fbb ="N\u0065\u0077\u0057\u0069\u0074\u0068\u0044\u0061\u0074\u0061";
_cga :=_dcg (width ,height );_cga .Data =data ;if len (data )< height *_cga .RowStride {return nil ,_c .Errorf (_fbb ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064\u0061\u0074\u0061\u0020l\u0065\u006e\u0067\u0074\u0068\u003a \u0025\u0064\u0020\u002d\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e\u003a\u0020\u0025\u0064",len (data ),height *_cga .RowStride );
};return _cga ,nil ;};type fillSegment struct{_ccdc int ;_ggab int ;_ebdg int ;_afbcf int ;};func _fef (_eb ,_dgf *Bitmap )(_dgb error ){const _ba ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0034";
_dag :=_dgf .RowStride ;_aeda :=_eb .RowStride ;_bbc :=_dgf .RowStride *4-_eb .RowStride ;var (_fde ,_efa byte ;_be uint32 ;_bec ,_aac ,_gg ,_gd ,_fb ,_bf ,_bag int ;);for _gg =0;_gg < _dgf .Height ;_gg ++{_bec =_gg *_dag ;_aac =4*_gg *_aeda ;for _gd =0;
_gd < _dag ;_gd ++{_fde =_dgf .Data [_bec +_gd ];_be =_dfge [_fde ];_bf =_aac +_gd *4;if _bbc !=0&&(_gd +1)*4> _eb .RowStride {for _fb =_bbc ;_fb > 0;_fb --{_efa =byte ((_be >>uint (_fb *8))&0xff);_bag =_bf +(_bbc -_fb );if _dgb =_eb .SetByte (_bag ,_efa );
_dgb !=nil {return _c .Wrapf (_dgb ,_ba ,"D\u0069\u0066\u0066\u0065\u0072\u0065n\u0074\u0020\u0072\u006f\u0077\u0073\u0074\u0072\u0069d\u0065\u0073\u002e \u004b:\u0020\u0025\u0064",_fb );};};}else if _dgb =_eb .setFourBytes (_bf ,_be );_dgb !=nil {return _c .Wrap (_dgb ,_ba ,"");
};if _dgb =_eb .setFourBytes (_aac +_gd *4,_dfge [_dgf .Data [_bec +_gd ]]);_dgb !=nil {return _c .Wrap (_dgb ,_ba ,"");};};for _fb =1;_fb < 4;_fb ++{for _gd =0;_gd < _aeda ;_gd ++{if _dgb =_eb .SetByte (_aac +_fb *_aeda +_gd ,_eb .Data [_aac +_gd ]);_dgb !=nil {return _c .Wrapf (_dgb ,_ba ,"\u0063\u006f\u0070\u0079\u0020\u0027\u0071\u0075\u0061\u0064\u0072\u0061\u0062l\u0065\u0027\u0020\u006c\u0069\u006ee\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0062\u0079\u0074\u0065\u003a \u0027\u0025\u0064\u0027",_fb ,_gd );
};};};};return nil ;};func NewWithUnpaddedData (width ,height int ,data []byte )(*Bitmap ,error ){const _agfa ="\u004e\u0065\u0077\u0057it\u0068\u0055\u006e\u0070\u0061\u0064\u0064\u0065\u0064\u0044\u0061\u0074\u0061";_aada :=_dcg (width ,height );_aada .Data =data ;
if _cgb :=((width *height )+7)>>3;len (data )< _cgb {return nil ,_c .Errorf (_agfa ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064a\u0074\u0061\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u003a\u0020\u0027\u0025\u0064\u0027\u002e\u0020\u0054\u0068\u0065\u0020\u0064\u0061t\u0061\u0020s\u0068\u006fu\u006c\u0064\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 l\u0065\u0061\u0073\u0074\u003a\u0020\u0027\u0025\u0064'\u0020\u0062\u0079\u0074\u0065\u0073",len (data ),_cgb );
};if _cfe :=_aada .addPadBits ();_cfe !=nil {return nil ,_c .Wrap (_cfe ,_agfa ,"");};return _aada ,nil ;};func (_fcab *Bitmap )centroid (_dfbbb ,_cgd []int )(Point ,error ){_fecg :=Point {};_fcab .setPadBits (0);if len (_dfbbb )==0{_dfbbb =_dfbfc ();};
if len (_cgd )==0{_cgd =_fcdbf ();};var _cdee ,_geacb ,_dbg ,_fadd ,_gdbe ,_aabd int ;var _bfee byte ;for _gdbe =0;_gdbe < _fcab .Height ;_gdbe ++{_ebbd :=_fcab .RowStride *_gdbe ;_fadd =0;for _aabd =0;_aabd < _fcab .RowStride ;_aabd ++{_bfee =_fcab .Data [_ebbd +_aabd ];
if _bfee !=0{_fadd +=_cgd [_bfee ];_cdee +=_dfbbb [_bfee ]+_aabd *8*_cgd [_bfee ];};};_dbg +=_fadd ;_geacb +=_fadd *_gdbe ;};if _dbg !=0{_fecg .X =float32 (_cdee )/float32 (_dbg );_fecg .Y =float32 (_geacb )/float32 (_dbg );};return _fecg ,nil ;};type byHeight Bitmaps ;
func (_fbggg *Bitmaps )ClipToBitmap (s *Bitmap )(*Bitmaps ,error ){const _gbffb ="B\u0069t\u006d\u0061\u0070\u0073\u002e\u0043\u006c\u0069p\u0054\u006f\u0042\u0069tm\u0061\u0070";if _fbggg ==nil {return nil ,_c .Error (_gbffb ,"\u0042\u0069\u0074\u006dap\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if s ==nil {return nil ,_c .Error (_gbffb ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};_bagaf :=len (_fbggg .Values );_becgg :=&Bitmaps {Values :make ([]*Bitmap ,_bagaf ),Boxes :make ([]*_ee .Rectangle ,_bagaf )};
var (_dgfbe ,_cccc *Bitmap ;_cdggd *_ee .Rectangle ;_aeed error ;);for _cggc :=0;_cggc < _bagaf ;_cggc ++{if _dgfbe ,_aeed =_fbggg .GetBitmap (_cggc );_aeed !=nil {return nil ,_c .Wrap (_aeed ,_gbffb ,"");};if _cdggd ,_aeed =_fbggg .GetBox (_cggc );_aeed !=nil {return nil ,_c .Wrap (_aeed ,_gbffb ,"");
};if _cccc ,_aeed =s .clipRectangle (_cdggd ,nil );_aeed !=nil {return nil ,_c .Wrap (_aeed ,_gbffb ,"");};if _cccc ,_aeed =_cccc .And (_dgfbe );_aeed !=nil {return nil ,_c .Wrap (_aeed ,_gbffb ,"");};_becgg .Values [_cggc ]=_cccc ;_becgg .Boxes [_cggc ]=_cdggd ;
};return _becgg ,nil ;};func (_bbfa MorphProcess )getWidthHeight ()(_gfeb ,_edgda int ){return _bbfa .Arguments [0],_bbfa .Arguments [1];};func _dfa (_dba *Bitmap ,_efb ,_dcc int )(*Bitmap ,error ){const _fc ="e\u0078\u0070\u0061\u006edB\u0069n\u0061\u0072\u0079\u0052\u0065p\u006c\u0069\u0063\u0061\u0074\u0065";
if _dba ==nil {return nil ,_c .Error (_fc ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _efb <=0||_dcc <=0{return nil ,_c .Error (_fc ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0073\u0063\u0061l\u0065\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020<\u003d\u0020\u0030");
};if _efb ==_dcc {if _efb ==1{_fge ,_dge :=_fcbc (nil ,_dba );if _dge !=nil {return nil ,_c .Wrap (_dge ,_fc ,"\u0078\u0046\u0061\u0063\u0074\u0020\u003d\u003d\u0020y\u0046\u0061\u0063\u0074");};return _fge ,nil ;};if _efb ==2||_efb ==4||_efb ==8{_dcb ,_fbe :=_aae (_dba ,_efb );
if _fbe !=nil {return nil ,_c .Wrap (_fbe ,_fc ,"\u0078\u0046a\u0063\u0074\u0020i\u006e\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d");};return _dcb ,nil ;};};_ed :=_efb *_dba .Width ;_fa :=_dcc *_dba .Height ;_fgeg :=New (_ed ,_fa );_cf :=_fgeg .RowStride ;
var (_efe ,_ce ,_fdea ,_gdf ,_gfe int ;_eeg byte ;_dab error ;);for _ce =0;_ce < _dba .Height ;_ce ++{_efe =_dcc *_ce *_cf ;for _fdea =0;_fdea < _dba .Width ;_fdea ++{if _ea :=_dba .GetPixel (_fdea ,_ce );_ea {_gfe =_efb *_fdea ;for _gdf =0;_gdf < _efb ;
_gdf ++{_fgeg .setBit (_efe *8+_gfe +_gdf );};};};for _gdf =1;_gdf < _dcc ;_gdf ++{_aacc :=_efe +_gdf *_cf ;for _fbc :=0;_fbc < _cf ;_fbc ++{if _eeg ,_dab =_fgeg .GetByte (_efe +_fbc );_dab !=nil {return nil ,_c .Wrapf (_dab ,_fc ,"\u0072\u0065\u0070\u006cic\u0061\u0074\u0069\u006e\u0067\u0020\u006c\u0069\u006e\u0065\u003a\u0020\u0027\u0025d\u0027",_gdf );
};if _dab =_fgeg .SetByte (_aacc +_fbc ,_eeg );_dab !=nil {return nil ,_c .Wrap (_dab ,_fc ,"\u0053\u0065\u0074\u0074in\u0067\u0020\u0062\u0079\u0074\u0065\u0020\u0066\u0061\u0069\u006c\u0065\u0064");};};};};return _fgeg ,nil ;};func _gef (_addc ,_cbb ,_gabd *Bitmap )(*Bitmap ,error ){const _dbb ="\u0073\u0075\u0062\u0074\u0072\u0061\u0063\u0074";
if _cbb ==nil {return nil ,_c .Error (_dbb ,"'\u0073\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _gabd ==nil {return nil ,_c .Error (_dbb ,"'\u0073\u0032\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};var _bba error ;switch {case _addc ==_cbb :if _bba =_addc .RasterOperation (0,0,_cbb .Width ,_cbb .Height ,PixNotSrcAndDst ,_gabd ,0,0);
_bba !=nil {return nil ,_c .Wrap (_bba ,_dbb ,"\u0064 \u003d\u003d\u0020\u0073\u0031");};case _addc ==_gabd :if _bba =_addc .RasterOperation (0,0,_cbb .Width ,_cbb .Height ,PixNotSrcAndDst ,_cbb ,0,0);_bba !=nil {return nil ,_c .Wrap (_bba ,_dbb ,"\u0064 \u003d\u003d\u0020\u0073\u0032");
};default:_addc ,_bba =_fcbc (_addc ,_cbb );if _bba !=nil {return nil ,_c .Wrap (_bba ,_dbb ,"");};if _bba =_addc .RasterOperation (0,0,_cbb .Width ,_cbb .Height ,PixNotSrcAndDst ,_gabd ,0,0);_bba !=nil {return nil ,_c .Wrap (_bba ,_dbb ,"\u0064e\u0066\u0061\u0075\u006c\u0074");
};};return _addc ,nil ;};func _aead (_gcga ,_fbae *Bitmap ,_eabf *Selection )(*Bitmap ,error ){const _cfccd ="\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u004d\u006f\u0072\u0070\u0068A\u0072\u0067\u0073\u0032";var _abec ,_eaac int ;if _fbae ==nil {return nil ,_c .Error (_cfccd ,"s\u006fu\u0072\u0063\u0065\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");
};if _eabf ==nil {return nil ,_c .Error (_cfccd ,"\u0073e\u006c \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};_abec =_eabf .Width ;_eaac =_eabf .Height ;if _abec ==0||_eaac ==0{return nil ,_c .Error (_cfccd ,"\u0073\u0065\u006c\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u0020\u0030");
};if _gcga ==nil {return _fbae .createTemplate (),nil ;};if _feea :=_gcga .resizeImageData (_fbae );_feea !=nil {return nil ,_feea ;};return _gcga ,nil ;};func (_fcfb *byWidth )Less (i ,j int )bool {return _fcfb .Values [i ].Width < _fcfb .Values [j ].Width };
func (_aaeba *Bitmaps )SortByHeight (){_gcfec :=(*byHeight )(_aaeba );_ff .Sort (_gcfec )};func (_dbdb *ClassedPoints )xSortFunction ()func (_degbg int ,_fafe int )bool {return func (_bggb ,_ffee int )bool {return _dbdb .XAtIndex (_bggb )< _dbdb .XAtIndex (_ffee )};
};func _egfg (_fdag ...MorphProcess )(_baea error ){const _fggb ="v\u0065r\u0069\u0066\u0079\u004d\u006f\u0072\u0070\u0068P\u0072\u006f\u0063\u0065ss\u0065\u0073";var _edbg ,_cgec int ;for _gge ,_gcfc :=range _fdag {if _baea =_gcfc .verify (_gge ,&_edbg ,&_cgec );
_baea !=nil {return _c .Wrap (_baea ,_fggb ,"");};};if _cgec !=0&&_edbg !=0{return _c .Error (_fggb ,"\u004d\u006f\u0072\u0070\u0068\u0020\u0073\u0065\u0071\u0075\u0065n\u0063\u0065\u0020\u002d\u0020\u0062\u006f\u0072d\u0065r\u0020\u0061\u0064\u0064\u0065\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u0065\u0074\u0020\u0072\u0065\u0064u\u0063\u0074\u0069\u006f\u006e\u0020\u006e\u006f\u0074\u0020\u0030");
};return nil ;};func _bdbf (_faeacf ,_efae *Bitmap ,_eaa ,_adgb int )(*Bitmap ,error ){const _ceeg ="\u006fp\u0065\u006e\u0042\u0072\u0069\u0063k";if _efae ==nil {return nil ,_c .Error (_ceeg ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");
};if _eaa < 1&&_adgb < 1{return nil ,_c .Error (_ceeg ,"\u0068\u0053\u0069\u007ae \u003c\u0020\u0031\u0020\u0026\u0026\u0020\u0076\u0053\u0069\u007a\u0065\u0020\u003c \u0031");};if _eaa ==1&&_adgb ==1{return _efae .Copy (),nil ;};if _eaa ==1||_adgb ==1{var _cfcc error ;
_gbbe :=SelCreateBrick (_adgb ,_eaa ,_adgb /2,_eaa /2,SelHit );_faeacf ,_cfcc =_afcc (_faeacf ,_efae ,_gbbe );if _cfcc !=nil {return nil ,_c .Wrap (_cfcc ,_ceeg ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _faeacf ,nil ;};_fede :=SelCreateBrick (1,_eaa ,0,_eaa /2,SelHit );_fgebg :=SelCreateBrick (_adgb ,1,_adgb /2,0,SelHit );_babd ,_bfba :=_fgd (nil ,_efae ,_fede );if _bfba !=nil {return nil ,_c .Wrap (_bfba ,_ceeg ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};_faeacf ,_bfba =_fgd (_faeacf ,_babd ,_fgebg );if _bfba !=nil {return nil ,_c .Wrap (_bfba ,_ceeg ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};_ ,_bfba =_eddc (_babd ,_faeacf ,_fede );if _bfba !=nil {return nil ,_c .Wrap (_bfba ,_ceeg ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};_ ,_bfba =_eddc (_faeacf ,_babd ,_fgebg );if _bfba !=nil {return nil ,_c .Wrap (_bfba ,_ceeg ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};return _faeacf ,nil ;};func _gfb ()(_caf [256]uint32 ){for _efg :=0;_efg < 256;_efg ++{if _efg &0x01!=0{_caf [_efg ]|=0xf;
};if _efg &0x02!=0{_caf [_efg ]|=0xf0;};if _efg &0x04!=0{_caf [_efg ]|=0xf00;};if _efg &0x08!=0{_caf [_efg ]|=0xf000;};if _efg &0x10!=0{_caf [_efg ]|=0xf0000;};if _efg &0x20!=0{_caf [_efg ]|=0xf00000;};if _efg &0x40!=0{_caf [_efg ]|=0xf000000;};if _efg &0x80!=0{_caf [_efg ]|=0xf0000000;
};};return _caf ;};func TstTSymbol (t *_cd .T ,scale ...int )*Bitmap {_febdf ,_ceea :=NewWithData (5,5,[]byte {0xF8,0x20,0x20,0x20,0x20});_fe .NoError (t ,_ceea );return TstGetScaledSymbol (t ,_febdf ,scale ...);};func (_dfbee *Selection )findMaxTranslations ()(_faaa ,_eggec ,_dedba ,_gcec int ){for _aabc :=0;
_aabc < _dfbee .Height ;_aabc ++{for _ebaf :=0;_ebaf < _dfbee .Width ;_ebaf ++{if _dfbee .Data [_aabc ][_ebaf ]==SelHit {_faaa =_fbbe (_faaa ,_dfbee .Cx -_ebaf );_eggec =_fbbe (_eggec ,_dfbee .Cy -_aabc );_dedba =_fbbe (_dedba ,_ebaf -_dfbee .Cx );_gcec =_fbbe (_gcec ,_aabc -_dfbee .Cy );
};};};return _faaa ,_eggec ,_dedba ,_gcec ;};func _eaga (_dcaf ,_dddg ,_babfg byte )byte {return (_dcaf &^(_babfg ))|(_dddg &_babfg )};const (_ LocationFilter =iota ;LocSelectWidth ;LocSelectHeight ;LocSelectXVal ;LocSelectYVal ;LocSelectIfEither ;LocSelectIfBoth ;
);func (_gdfg *Bitmaps )Size ()int {return len (_gdfg .Values )};func (_ddfg *Bitmaps )selectByIndexes (_dgbac []int )(*Bitmaps ,error ){_efce :=&Bitmaps {};for _ ,_afbd :=range _dgbac {_fbeea ,_dgfdb :=_ddfg .GetBitmap (_afbd );if _dgfdb !=nil {return nil ,_c .Wrap (_dgfdb ,"\u0073e\u006ce\u0063\u0074\u0042\u0079\u0049\u006e\u0064\u0065\u0078\u0065\u0073","");
};_efce .AddBitmap (_fbeea );};return _efce ,nil ;};func TstWordBitmap (t *_cd .T ,scale ...int )*Bitmap {_fccgb :=1;if len (scale )> 0{_fccgb =scale [0];};_bddd :=3;_bcf :=9+7+15+2*_bddd ;_babfc :=5+_bddd +5;_cbdc :=New (_bcf *_fccgb ,_babfc *_fccgb );
_daef :=&Bitmaps {};var _fcce *int ;_bddd *=_fccgb ;_egag :=0;_fcce =&_egag ;_eccg :=0;_dabb :=TstDSymbol (t ,scale ...);TstAddSymbol (t ,_daef ,_dabb ,_fcce ,_eccg ,1*_fccgb );_dabb =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_daef ,_dabb ,_fcce ,_eccg ,_bddd );
_dabb =TstISymbol (t ,scale ...);TstAddSymbol (t ,_daef ,_dabb ,_fcce ,_eccg ,1*_fccgb );_dabb =TstTSymbol (t ,scale ...);TstAddSymbol (t ,_daef ,_dabb ,_fcce ,_eccg ,_bddd );_dabb =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_daef ,_dabb ,_fcce ,_eccg ,1*_fccgb );
_dabb =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_daef ,_dabb ,_fcce ,_eccg ,1*_fccgb );_dabb =TstWSymbol (t ,scale ...);TstAddSymbol (t ,_daef ,_dabb ,_fcce ,_eccg ,0);*_fcce =0;_eccg =5*_fccgb +_bddd ;_dabb =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_daef ,_dabb ,_fcce ,_eccg ,1*_fccgb );
_dabb =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_daef ,_dabb ,_fcce ,_eccg ,_bddd );_dabb =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_daef ,_dabb ,_fcce ,_eccg ,1*_fccgb );_dabb =TstESymbol (t ,scale ...);TstAddSymbol (t ,_daef ,_dabb ,_fcce ,_eccg ,1*_fccgb );
_dabb =TstVSymbol (t ,scale ...);TstAddSymbol (t ,_daef ,_dabb ,_fcce ,_eccg ,1*_fccgb );_dabb =TstESymbol (t ,scale ...);TstAddSymbol (t ,_daef ,_dabb ,_fcce ,_eccg ,1*_fccgb );_dabb =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_daef ,_dabb ,_fcce ,_eccg ,0);
TstWriteSymbols (t ,_daef ,_cbdc );return _cbdc ;};type Points []Point ;func (_ffe *Bitmap )Copy ()*Bitmap {_bgcf :=make ([]byte ,len (_ffe .Data ));copy (_bgcf ,_ffe .Data );return &Bitmap {Width :_ffe .Width ,Height :_ffe .Height ,RowStride :_ffe .RowStride ,Data :_bgcf ,Color :_ffe .Color ,Text :_ffe .Text ,BitmapNumber :_ffe .BitmapNumber ,Special :_ffe .Special };
};func (_dbc *ClassedPoints )GetIntYByClass (i int )(int ,error ){const _dbdfg ="\u0043\u006c\u0061\u0073s\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047e\u0074I\u006e\u0074\u0059\u0042\u0079\u0043\u006ca\u0073\u0073";if i >=_dbc .IntSlice .Size (){return 0,_c .Errorf (_dbdfg ,"\u0069\u003a\u0020\u0027\u0025\u0064\u0027 \u0069\u0073\u0020o\u0075\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065",i );
};return int (_dbc .YAtIndex (i )),nil ;};var MorphBC BoundaryCondition ;func (_bddg *Bitmaps )String ()string {_defgb :=_d .Builder {};for _ ,_cdbd :=range _bddg .Values {_defgb .WriteString (_cdbd .String ());_defgb .WriteRune ('\n');};return _defgb .String ();
};type Color int ;func TstVSymbol (t *_cd .T ,scale ...int )*Bitmap {_ffcb ,_abdc :=NewWithData (5,5,[]byte {0x88,0x88,0x88,0x50,0x20});_fe .NoError (t ,_abdc );return TstGetScaledSymbol (t ,_ffcb ,scale ...);};func (_beda *byWidth )Swap (i ,j int ){_beda .Values [i ],_beda .Values [j ]=_beda .Values [j ],_beda .Values [i ];
if _beda .Boxes !=nil {_beda .Boxes [i ],_beda .Boxes [j ]=_beda .Boxes [j ],_beda .Boxes [i ];};};func (_egacb *Bitmap )setTwoBytes (_fdc int ,_cde uint16 )error {if _fdc +1> len (_egacb .Data )-1{return _c .Errorf ("s\u0065\u0074\u0054\u0077\u006f\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_fdc );
};_egacb .Data [_fdc ]=byte ((_cde &0xff00)>>8);_egacb .Data [_fdc +1]=byte (_cde &0xff);return nil ;};func _caae (_faeeb *Bitmap ,_fgae ...MorphProcess )(_efdf *Bitmap ,_ccbe error ){const _fddd ="\u006d\u006f\u0072\u0070\u0068\u0053\u0065\u0071\u0075\u0065\u006e\u0063\u0065";
if _faeeb ==nil {return nil ,_c .Error (_fddd ,"\u006d\u006f\u0072\u0070\u0068\u0053\u0065\u0071\u0075\u0065\u006e\u0063\u0065 \u0073\u006f\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};if len (_fgae )==0{return nil ,_c .Error (_fddd ,"m\u006f\u0072\u0070\u0068\u0053\u0065q\u0075\u0065\u006e\u0063\u0065\u002c \u0073\u0065\u0071\u0075\u0065\u006e\u0063e\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");};if _ccbe =_egfg (_fgae ...);
_ccbe !=nil {return nil ,_c .Wrap (_ccbe ,_fddd ,"");};var _bbeg ,_gdgb ,_acga int ;_efdf =_faeeb .Copy ();for _ ,_edea :=range _fgae {switch _edea .Operation {case MopDilation :_bbeg ,_gdgb =_edea .getWidthHeight ();_efdf ,_ccbe =DilateBrick (nil ,_efdf ,_bbeg ,_gdgb );
if _ccbe !=nil {return nil ,_c .Wrap (_ccbe ,_fddd ,"");};case MopErosion :_bbeg ,_gdgb =_edea .getWidthHeight ();_efdf ,_ccbe =_affd (nil ,_efdf ,_bbeg ,_gdgb );if _ccbe !=nil {return nil ,_c .Wrap (_ccbe ,_fddd ,"");};case MopOpening :_bbeg ,_gdgb =_edea .getWidthHeight ();
_efdf ,_ccbe =_bdbf (nil ,_efdf ,_bbeg ,_gdgb );if _ccbe !=nil {return nil ,_c .Wrap (_ccbe ,_fddd ,"");};case MopClosing :_bbeg ,_gdgb =_edea .getWidthHeight ();_efdf ,_ccbe =_agc (nil ,_efdf ,_bbeg ,_gdgb );if _ccbe !=nil {return nil ,_c .Wrap (_ccbe ,_fddd ,"");
};case MopRankBinaryReduction :_efdf ,_ccbe =_dd (_efdf ,_edea .Arguments ...);if _ccbe !=nil {return nil ,_c .Wrap (_ccbe ,_fddd ,"");};case MopReplicativeBinaryExpansion :_efdf ,_ccbe =_decb (_efdf ,_edea .Arguments [0]);if _ccbe !=nil {return nil ,_c .Wrap (_ccbe ,_fddd ,"");
};case MopAddBorder :_acga =_edea .Arguments [0];_efdf ,_ccbe =_efdf .AddBorder (_acga ,0);if _ccbe !=nil {return nil ,_c .Wrap (_ccbe ,_fddd ,"");};default:return nil ,_c .Error (_fddd ,"i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006d\u006fr\u0070\u0068\u004f\u0070\u0065\u0072\u0061ti\u006f\u006e\u0020\u0070r\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0074\u006f t\u0068\u0065 \u0073\u0065\u0071\u0075\u0065\u006e\u0063\u0065");
};};if _acga > 0{_efdf ,_ccbe =_efdf .RemoveBorder (_acga );if _ccbe !=nil {return nil ,_c .Wrap (_ccbe ,_fddd ,"\u0062\u006f\u0072\u0064\u0065\u0072\u0020\u003e\u0020\u0030");};};return _efdf ,nil ;};func Dilate (d *Bitmap ,s *Bitmap ,sel *Selection )(*Bitmap ,error ){return _eddc (d ,s ,sel )};
func (_fggbeb *BitmapsArray )GetBitmaps (i int )(*Bitmaps ,error ){const _egfc ="\u0042\u0069\u0074ma\u0070\u0073\u0041\u0072\u0072\u0061\u0079\u002e\u0047\u0065\u0074\u0042\u0069\u0074\u006d\u0061\u0070\u0073";if _fggbeb ==nil {return nil ,_c .Error (_egfc ,"p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074m\u0061\u0070\u0073A\u0072r\u0061\u0079\u0027");
};if i > len (_fggbeb .Values )-1{return nil ,_c .Errorf (_egfc ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _fggbeb .Values [i ],nil ;};func (_cabdb *Bitmaps )selectByIndicator (_cfgc *_e .NumSlice )(_gcde *Bitmaps ,_gedd error ){const _faaae ="\u0042i\u0074\u006d\u0061\u0070s\u002e\u0073\u0065\u006c\u0065c\u0074B\u0079I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";
if _cabdb ==nil {return nil ,_c .Error (_faaae ,"\u0027\u0062\u0027 b\u0069\u0074\u006d\u0061\u0070\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if _cfgc ==nil {return nil ,_c .Error (_faaae ,"'\u006e\u0061\u0027\u0020\u0069\u006ed\u0069\u0063\u0061\u0074\u006f\u0072\u0073\u0020\u006eo\u0074\u0020\u0064e\u0066i\u006e\u0065\u0064");
};if len (_cabdb .Values )==0{return _cabdb ,nil ;};if len (*_cfgc )!=len (_cabdb .Values ){return nil ,_c .Errorf (_faaae ,"\u006ea\u0020\u006ce\u006e\u0067\u0074\u0068:\u0020\u0025\u0064,\u0020\u0069\u0073\u0020\u0064\u0069\u0066\u0066\u0065re\u006e\u0074\u0020t\u0068\u0061n\u0020\u0062\u0069\u0074\u006d\u0061p\u0073\u003a \u0025\u0064",len (*_cfgc ),len (_cabdb .Values ));
};var _ceac ,_cfcdd ,_gcda int ;for _cfcdd =0;_cfcdd < len (*_cfgc );_cfcdd ++{if _ceac ,_gedd =_cfgc .GetInt (_cfcdd );_gedd !=nil {return nil ,_c .Wrap (_gedd ,_faaae ,"f\u0069\u0072\u0073\u0074\u0020\u0063\u0068\u0065\u0063\u006b");};if _ceac ==1{_gcda ++;
};};if _gcda ==len (_cabdb .Values ){return _cabdb ,nil ;};_gcde =&Bitmaps {};_gfdba :=len (_cabdb .Values )==len (_cabdb .Boxes );for _cfcdd =0;_cfcdd < len (*_cfgc );_cfcdd ++{if _ceac =int ((*_cfgc )[_cfcdd ]);_ceac ==0{continue ;};_gcde .Values =append (_gcde .Values ,_cabdb .Values [_cfcdd ]);
if _gfdba {_gcde .Boxes =append (_gcde .Boxes ,_cabdb .Boxes [_cfcdd ]);};};return _gcde ,nil ;};const (SelDontCare SelectionValue =iota ;SelHit ;SelMiss ;);func (_ffg *Bitmap )clearAll ()error {return _ffg .RasterOperation (0,0,_ffg .Width ,_ffg .Height ,PixClr ,nil ,0,0);
};func _ggfg (_bea *Bitmap )(_adcf *Bitmap ,_bcec int ,_efea error ){const _dcdd ="\u0042i\u0074\u006d\u0061\u0070.\u0077\u006f\u0072\u0064\u004da\u0073k\u0042y\u0044\u0069\u006c\u0061\u0074\u0069\u006fn";if _bea ==nil {return nil ,0,_c .Errorf (_dcdd ,"\u0027\u0073\u0027\u0020bi\u0074\u006d\u0061\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");
};var _adaf ,_gefg *Bitmap ;if _adaf ,_efea =_fcbc (nil ,_bea );_efea !=nil {return nil ,0,_c .Wrap (_efea ,_dcdd ,"\u0063\u006f\u0070\u0079\u0020\u0027\u0073\u0027");};var (_bdbb [13]int ;_bdea ,_ccde int ;);_eedg :=12;_gcfe :=_e .NewNumSlice (_eedg +1);
_cafg :=_e .NewNumSlice (_eedg +1);var _eebg *Boxes ;for _eafb :=0;_eafb <=_eedg ;_eafb ++{if _eafb ==0{if _gefg ,_efea =_fcbc (nil ,_adaf );_efea !=nil {return nil ,0,_c .Wrap (_efea ,_dcdd ,"\u0066i\u0072\u0073\u0074\u0020\u0062\u006d2");};}else {if _gefg ,_efea =_caae (_adaf ,MorphProcess {Operation :MopDilation ,Arguments :[]int {2,1}});
_efea !=nil {return nil ,0,_c .Wrap (_efea ,_dcdd ,"\u0064\u0069\u006ca\u0074\u0069\u006f\u006e\u0020\u0062\u006d\u0032");};};if _eebg ,_efea =_gefg .connComponentsBB (4);_efea !=nil {return nil ,0,_c .Wrap (_efea ,_dcdd ,"");};_bdbb [_eafb ]=len (*_eebg );
_gcfe .AddInt (_bdbb [_eafb ]);switch _eafb {case 0:_bdea =_bdbb [0];default:_ccde =_bdbb [_eafb -1]-_bdbb [_eafb ];_cafg .AddInt (_ccde );};_adaf =_gefg ;};_gdef :=true ;_dagd :=2;var _gacb ,_ebfb int ;for _bedb :=1;_bedb < len (*_cafg );_bedb ++{if _gacb ,_efea =_gcfe .GetInt (_bedb );
_efea !=nil {return nil ,0,_c .Wrap (_efea ,_dcdd ,"\u0043\u0068\u0065\u0063ki\u006e\u0067\u0020\u0062\u0065\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0069o\u006e");};if _gdef &&_gacb < int (0.3*float32 (_bdea )){_dagd =_bedb +1;_gdef =false ;};
if _ccde ,_efea =_cafg .GetInt (_bedb );_efea !=nil {return nil ,0,_c .Wrap (_efea ,_dcdd ,"\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006ea\u0044\u0069\u0066\u0066");};if _ccde > _ebfb {_ebfb =_ccde ;};};_ecgc :=_bea .XResolution ;if _ecgc ==0{_ecgc =150;
};if _ecgc > 110{_dagd ++;};if _dagd < 2{_aa .Log .Trace ("J\u0042\u0049\u0047\u0032\u0020\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0069\u0042\u0065\u0073\u0074 \u0074\u006f\u0020\u006d\u0069\u006e\u0069\u006d\u0075\u006d a\u006c\u006c\u006fw\u0061b\u006c\u0065");
_dagd =2;};_bcec =_dagd +1;if _adcf ,_efea =_afce (nil ,_bea ,_dagd +1,1);_efea !=nil {return nil ,0,_c .Wrap (_efea ,_dcdd ,"\u0067\u0065\u0074\u0074in\u0067\u0020\u006d\u0061\u0073\u006b\u0020\u0066\u0061\u0069\u006c\u0065\u0064");};return _adcf ,_bcec ,nil ;
};func (_aaba *Bitmaps )SelectByIndexes (idx []int )(*Bitmaps ,error ){const _gceda ="B\u0069\u0074\u006d\u0061\u0070\u0073.\u0053\u006f\u0072\u0074\u0049\u006e\u0064\u0065\u0078e\u0073\u0042\u0079H\u0065i\u0067\u0068\u0074";_gdfcc ,_eafd :=_aaba .selectByIndexes (idx );
if _eafd !=nil {return nil ,_c .Wrap (_eafd ,_gceda ,"");};return _gdfcc ,nil ;};func (_decc *ClassedPoints )GetIntXByClass (i int )(int ,error ){const _daa ="\u0043\u006c\u0061\u0073s\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047e\u0074I\u006e\u0074\u0059\u0042\u0079\u0043\u006ca\u0073\u0073";
if i >=_decc .IntSlice .Size (){return 0,_c .Errorf (_daa ,"\u0069\u003a\u0020\u0027\u0025\u0064\u0027 \u0069\u0073\u0020o\u0075\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065",i );
};return int (_decc .XAtIndex (i )),nil ;};type Bitmap struct{Width ,Height int ;BitmapNumber int ;RowStride int ;Data []byte ;Color Color ;Special int ;Text string ;XResolution ,YResolution int ;};func Centroid (bm *Bitmap ,centTab ,sumTab []int )(Point ,error ){return bm .centroid (centTab ,sumTab )};
func _dfbfc ()[]int {_fbgc :=make ([]int ,256);_fbgc [0]=0;_fbgc [1]=7;var _ffac int ;for _ffac =2;_ffac < 4;_ffac ++{_fbgc [_ffac ]=_fbgc [_ffac -2]+6;};for _ffac =4;_ffac < 8;_ffac ++{_fbgc [_ffac ]=_fbgc [_ffac -4]+5;};for _ffac =8;_ffac < 16;_ffac ++{_fbgc [_ffac ]=_fbgc [_ffac -8]+4;
};for _ffac =16;_ffac < 32;_ffac ++{_fbgc [_ffac ]=_fbgc [_ffac -16]+3;};for _ffac =32;_ffac < 64;_ffac ++{_fbgc [_ffac ]=_fbgc [_ffac -32]+2;};for _ffac =64;_ffac < 128;_ffac ++{_fbgc [_ffac ]=_fbgc [_ffac -64]+1;};for _ffac =128;_ffac < 256;_ffac ++{_fbgc [_ffac ]=_fbgc [_ffac -128];
};return _fbgc ;};func (_dgfb *Bitmap )SetPixel (x ,y int ,pixel byte )error {_aaeb :=_dgfb .GetByteIndex (x ,y );if _aaeb > len (_dgfb .Data )-1{return _c .Errorf ("\u0053\u0065\u0074\u0050\u0069\u0078\u0065\u006c","\u0069\u006e\u0064\u0065x \u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020%\u0064",_aaeb );
};_ggcg :=_dgfb .GetBitOffset (x );_dfgf :=uint (7-_ggcg );_dedb :=_dgfb .Data [_aaeb ];var _abag byte ;if pixel ==1{_abag =_dedb |(pixel &0x01<<_dfgf );}else {_abag =_dedb &^(1<<_dfgf );};_dgfb .Data [_aaeb ]=_abag ;return nil ;};func _afce (_gead ,_cbbb *Bitmap ,_bgeef ,_abb int )(*Bitmap ,error ){const _egff ="\u0063\u006c\u006f\u0073\u0065\u0042\u0072\u0069\u0063\u006b";
if _cbbb ==nil {return nil ,_c .Error (_egff ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _bgeef < 1||_abb < 1{return nil ,_c .Error (_egff ,"\u0068S\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0053\u0069z\u0065\u0020\u006e\u006f\u0074\u0020\u003e\u003d\u0020\u0031");
};if _bgeef ==1&&_abb ==1{return _cbbb .Copy (),nil ;};if _bgeef ==1||_abb ==1{_bga :=SelCreateBrick (_abb ,_bgeef ,_abb /2,_bgeef /2,SelHit );var _dagcb error ;_gead ,_dagcb =_dgce (_gead ,_cbbb ,_bga );if _dagcb !=nil {return nil ,_c .Wrap (_dagcb ,_egff ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _gead ,nil ;};_fffcd :=SelCreateBrick (1,_bgeef ,0,_bgeef /2,SelHit );_cbad :=SelCreateBrick (_abb ,1,_abb /2,0,SelHit );_cfcdg ,_dgced :=_eddc (nil ,_cbbb ,_fffcd );if _dgced !=nil {return nil ,_c .Wrap (_dgced ,_egff ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};if _gead ,_dgced =_eddc (_gead ,_cfcdg ,_cbad );_dgced !=nil {return nil ,_c .Wrap (_dgced ,_egff ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};if _ ,_dgced =_fgd (_cfcdg ,_gead ,_fffcd );_dgced !=nil {return nil ,_c .Wrap (_dgced ,_egff ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};if _ ,_dgced =_fgd (_gead ,_cfcdg ,_cbad );_dgced !=nil {return nil ,_c .Wrap (_dgced ,_egff ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};return _gead ,nil ;};func (_aeea *Bitmap )RemoveBorderGeneral (left ,right ,top ,bot int )(*Bitmap ,error ){return _aeea .removeBorderGeneral (left ,right ,top ,bot );
};func (_egeg Points )GetIntX (i int )(int ,error ){if i >=len (_egeg ){return 0,_c .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065t\u0049\u006e\u0074\u0058","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return int (_egeg [i ].X ),nil ;};type Component int ;func (_fgbf *Bitmaps )GetBitmap (i int )(*Bitmap ,error ){const _aaccc ="\u0047e\u0074\u0042\u0069\u0074\u006d\u0061p";if _fgbf ==nil {return nil ,_c .Error (_aaccc ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0042\u0069\u0074ma\u0070\u0073");
};if i > len (_fgbf .Values )-1{return nil ,_c .Errorf (_aaccc ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _fgbf .Values [i ],nil ;};func (_ccca *Points )AddPoint (x ,y float32 ){*_ccca =append (*_ccca ,Point {x ,y })};
func TstESymbol (t *_cd .T ,scale ...int )*Bitmap {_edfca ,_caaae :=NewWithData (4,5,[]byte {0xF0,0x80,0xE0,0x80,0xF0});_fe .NoError (t ,_caaae );return TstGetScaledSymbol (t ,_edfca ,scale ...);};func _eed (_b ,_bb *Bitmap )(_fda error ){const _gf ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0032";
_ae :=_bb .RowStride ;_dg :=_b .RowStride ;var (_fdd byte ;_df uint16 ;_dc ,_da ,_ef ,_aed ,_ca int ;);for _ef =0;_ef < _bb .Height ;_ef ++{_dc =_ef *_ae ;_da =2*_ef *_dg ;for _aed =0;_aed < _ae ;_aed ++{_fdd =_bb .Data [_dc +_aed ];_df =_egcde [_fdd ];
_ca =_da +_aed *2;if _b .RowStride !=_bb .RowStride *2&&(_aed +1)*2> _b .RowStride {_fda =_b .SetByte (_ca ,byte (_df >>8));}else {_fda =_b .setTwoBytes (_ca ,_df );};if _fda !=nil {return _c .Wrap (_fda ,_gf ,"");};};for _aed =0;_aed < _dg ;_aed ++{_ca =_da +_dg +_aed ;
_fdd =_b .Data [_da +_aed ];if _fda =_b .SetByte (_ca ,_fdd );_fda !=nil {return _c .Wrapf (_fda ,_gf ,"c\u006f\u0070\u0079\u0020\u0064\u006fu\u0062\u006c\u0065\u0064\u0020\u006ci\u006e\u0065\u003a\u0020\u0027\u0025\u0064'\u002c\u0020\u0042\u0079\u0074\u0065\u003a\u0020\u0027\u0025d\u0027",_da +_aed ,_da +_dg +_aed );
};};};return nil ;};func Rect (x ,y ,w ,h int )(*_ee .Rectangle ,error ){const _adg ="b\u0069\u0074\u006d\u0061\u0070\u002e\u0052\u0065\u0063\u0074";if x < 0{w +=x ;x =0;if w <=0{return nil ,_c .Errorf (_adg ,"x\u003a\u0027\u0025\u0064\u0027\u0020<\u0020\u0030\u0020\u0061\u006e\u0064\u0020\u0077\u003a \u0027\u0025\u0064'\u0020<\u003d\u0020\u0030",x ,w );
};};if y < 0{h +=y ;y =0;if h <=0{return nil ,_c .Error (_adg ,"\u0079\u0020\u003c 0\u0020\u0061\u006e\u0064\u0020\u0062\u006f\u0078\u0020\u006f\u0066\u0066\u0020\u002b\u0071\u0075\u0061\u0064");};};_gfca :=_ee .Rect (x ,y ,x +w ,y +h );return &_gfca ,nil ;
};func (_eddb *Bitmaps )makeSizeIndicator (_afdf ,_gdgcf int ,_cbff LocationFilter ,_ebcdd SizeComparison )(_fgfeb *_e .NumSlice ,_eefe error ){const _aafd ="\u0042i\u0074\u006d\u0061\u0070s\u002e\u006d\u0061\u006b\u0065S\u0069z\u0065I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";
if _eddb ==nil {return nil ,_c .Error (_aafd ,"\u0062\u0069\u0074ma\u0070\u0073\u0020\u0027\u0062\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};switch _cbff {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_c .Errorf (_aafd ,"\u0070\u0072\u006f\u0076\u0069d\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u006fc\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",_cbff );
};switch _ebcdd {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE ,SizeSelectIfEQ :default:return nil ,_c .Errorf (_aafd ,"\u0069\u006e\u0076\u0061li\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025d\u0027",_ebcdd );
};_fgfeb =&_e .NumSlice {};var (_cbca ,_gdaea ,_gffcg int ;_cccbf *Bitmap ;);for _ ,_cccbf =range _eddb .Values {_cbca =0;_gdaea ,_gffcg =_cccbf .Width ,_cccbf .Height ;switch _cbff {case LocSelectWidth :if (_ebcdd ==SizeSelectIfLT &&_gdaea < _afdf )||(_ebcdd ==SizeSelectIfGT &&_gdaea > _afdf )||(_ebcdd ==SizeSelectIfLTE &&_gdaea <=_afdf )||(_ebcdd ==SizeSelectIfGTE &&_gdaea >=_afdf )||(_ebcdd ==SizeSelectIfEQ &&_gdaea ==_afdf ){_cbca =1;
};case LocSelectHeight :if (_ebcdd ==SizeSelectIfLT &&_gffcg < _gdgcf )||(_ebcdd ==SizeSelectIfGT &&_gffcg > _gdgcf )||(_ebcdd ==SizeSelectIfLTE &&_gffcg <=_gdgcf )||(_ebcdd ==SizeSelectIfGTE &&_gffcg >=_gdgcf )||(_ebcdd ==SizeSelectIfEQ &&_gffcg ==_gdgcf ){_cbca =1;
};case LocSelectIfEither :if (_ebcdd ==SizeSelectIfLT &&(_gdaea < _afdf ||_gffcg < _gdgcf ))||(_ebcdd ==SizeSelectIfGT &&(_gdaea > _afdf ||_gffcg > _gdgcf ))||(_ebcdd ==SizeSelectIfLTE &&(_gdaea <=_afdf ||_gffcg <=_gdgcf ))||(_ebcdd ==SizeSelectIfGTE &&(_gdaea >=_afdf ||_gffcg >=_gdgcf ))||(_ebcdd ==SizeSelectIfEQ &&(_gdaea ==_afdf ||_gffcg ==_gdgcf )){_cbca =1;
};case LocSelectIfBoth :if (_ebcdd ==SizeSelectIfLT &&(_gdaea < _afdf &&_gffcg < _gdgcf ))||(_ebcdd ==SizeSelectIfGT &&(_gdaea > _afdf &&_gffcg > _gdgcf ))||(_ebcdd ==SizeSelectIfLTE &&(_gdaea <=_afdf &&_gffcg <=_gdgcf ))||(_ebcdd ==SizeSelectIfGTE &&(_gdaea >=_afdf &&_gffcg >=_gdgcf ))||(_ebcdd ==SizeSelectIfEQ &&(_gdaea ==_afdf &&_gffcg ==_gdgcf )){_cbca =1;
};};_fgfeb .AddInt (_cbca );};return _fgfeb ,nil ;};type CombinationOperator int ;func TstFrameBitmapData ()[]byte {return _dbdef .Data };func SelCreateBrick (h ,w int ,cy ,cx int ,tp SelectionValue )*Selection {_ddab :=_cdgae (h ,w ,"");_ddab .setOrigin (cy ,cx );
var _eggd ,_gfbc int ;for _eggd =0;_eggd < h ;_eggd ++{for _gfbc =0;_gfbc < w ;_gfbc ++{_ddab .Data [_eggd ][_gfbc ]=tp ;};};return _ddab ;};func (_cea *Bitmap )SizesEqual (s *Bitmap )bool {if _cea ==s {return true ;};if _cea .Width !=s .Width ||_cea .Height !=s .Height {return false ;
};return true ;};func (_fgbec MorphProcess )verify (_gadf int ,_dgaa ,_eefgb *int )error {const _gbac ="\u004d\u006f\u0072\u0070hP\u0072\u006f\u0063\u0065\u0073\u0073\u002e\u0076\u0065\u0072\u0069\u0066\u0079";switch _fgbec .Operation {case MopDilation ,MopErosion ,MopOpening ,MopClosing :if len (_fgbec .Arguments )!=2{return _c .Error (_gbac ,"\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0064\u0027\u002c\u0020\u0027\u0065\u0027\u002c \u0027\u006f\u0027\u002c\u0020\u0027\u0063\u0027\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0032\u0020\u0061r\u0067\u0075\u006d\u0065\u006et\u0073");
};_eacg ,_cda :=_fgbec .getWidthHeight ();if _eacg <=0||_cda <=0{return _c .Error (_gbac ,"O\u0070er\u0061t\u0069o\u006e\u003a\u0020\u0027\u0064'\u002c\u0020\u0027e\u0027\u002c\u0020\u0027\u006f'\u002c\u0020\u0027c\u0027\u0020\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0062\u006f\u0074h w\u0069\u0064\u0074\u0068\u0020\u0061n\u0064\u0020\u0068\u0065\u0069\u0067\u0068\u0074\u0020\u0074\u006f\u0020b\u0065 \u003e\u003d\u0020\u0030");
};case MopRankBinaryReduction :_bfbb :=len (_fgbec .Arguments );*_dgaa +=_bfbb ;if _bfbb < 1||_bfbb > 4{return _c .Error (_gbac ,"\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0072\u0027\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u0031\u0020\u0061\u006e\u0064\u0020\u0061\u0074\u0020\u006d\u006fs\u0074\u0020\u0034\u0020\u0061\u0072g\u0075\u006d\u0065n\u0074\u0073");
};for _bbdd :=0;_bbdd < _bfbb ;_bbdd ++{if _fgbec .Arguments [_bbdd ]< 1||_fgbec .Arguments [_bbdd ]> 4{return _c .Error (_gbac ,"\u0052\u0061\u006e\u006b\u0042\u0069n\u0061\u0072\u0079\u0052\u0065\u0064\u0075\u0063\u0074\u0069\u006f\u006e\u0020\u006c\u0065\u0076\u0065\u006c\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065 \u00280\u002c\u0020\u0034\u003e");
};};case MopReplicativeBinaryExpansion :if len (_fgbec .Arguments )==0{return _c .Error (_gbac ,"\u0052\u0065\u0070\u006c\u0069\u0063\u0061\u0074i\u0076\u0065\u0042in\u0061\u0072\u0079\u0045\u0078\u0070a\u006e\u0073\u0069\u006f\u006e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020o\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_defbc :=_fgbec .Arguments [0];if _defbc !=2&&_defbc !=4&&_defbc !=8{return _c .Error (_gbac ,"R\u0065\u0070\u006c\u0069\u0063\u0061\u0074\u0069\u0076\u0065\u0042\u0069\u006e\u0061\u0072\u0079\u0045\u0078\u0070\u0061\u006e\u0073\u0069\u006f\u006e\u0020m\u0075s\u0074\u0020\u0062\u0065 \u006f\u0066 \u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d");
};*_dgaa -=_fed [_defbc /4];case MopAddBorder :if len (_fgbec .Arguments )==0{return _c .Error (_gbac ,"\u0041\u0064\u0064B\u006f\u0072\u0064\u0065r\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gaed :=_fgbec .Arguments [0];if _gadf > 0{return _c .Error (_gbac ,"\u0041\u0064\u0064\u0042\u006f\u0072\u0064\u0065\u0072\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020f\u0069\u0072\u0073\u0074\u0020\u006d\u006f\u0072\u0070\u0068\u0020\u0070\u0072o\u0063\u0065\u0073\u0073");
};if _gaed < 1{return _c .Error (_gbac ,"\u0041\u0064\u0064\u0042o\u0072\u0064\u0065\u0072\u0020\u0076\u0061\u006c\u0075\u0065 \u006co\u0077\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u0030");};*_eefgb =_gaed ;};return nil ;};type SelectionValue int ;func _dcg (_addf ,_deg int )*Bitmap {return &Bitmap {Width :_addf ,Height :_deg ,RowStride :(_addf +7)>>3};
};func _cgaf (_gfce *Bitmap ,_cfgg ,_eccaa int ,_ecfb ,_aedb int ,_aabg RasterOperator ,_gafc *Bitmap ,_gfcd ,_bbdda int )error {var _dfbe ,_ebgc ,_gecg ,_cbee int ;if _cfgg < 0{_gfcd -=_cfgg ;_ecfb +=_cfgg ;_cfgg =0;};if _gfcd < 0{_cfgg -=_gfcd ;_ecfb +=_gfcd ;
_gfcd =0;};_dfbe =_cfgg +_ecfb -_gfce .Width ;if _dfbe > 0{_ecfb -=_dfbe ;};_ebgc =_gfcd +_ecfb -_gafc .Width ;if _ebgc > 0{_ecfb -=_ebgc ;};if _eccaa < 0{_bbdda -=_eccaa ;_aedb +=_eccaa ;_eccaa =0;};if _bbdda < 0{_eccaa -=_bbdda ;_aedb +=_bbdda ;_bbdda =0;
};_gecg =_eccaa +_aedb -_gfce .Height ;if _gecg > 0{_aedb -=_gecg ;};_cbee =_bbdda +_aedb -_gafc .Height ;if _cbee > 0{_aedb -=_cbee ;};if _ecfb <=0||_aedb <=0{return nil ;};var _dddf error ;switch {case _cfgg &7==0&&_gfcd &7==0:_dddf =_acfb (_gfce ,_cfgg ,_eccaa ,_ecfb ,_aedb ,_aabg ,_gafc ,_gfcd ,_bbdda );
case _cfgg &7==_gfcd &7:_dddf =_gfdb (_gfce ,_cfgg ,_eccaa ,_ecfb ,_aedb ,_aabg ,_gafc ,_gfcd ,_bbdda );default:_dddf =_gbbc (_gfce ,_cfgg ,_eccaa ,_ecfb ,_aedb ,_aabg ,_gafc ,_gfcd ,_bbdda );};if _dddf !=nil {return _c .Wrap (_dddf ,"r\u0061\u0073\u0074\u0065\u0072\u004f\u0070\u004c\u006f\u0077","");
};return nil ;};func (_gagb Points )XSorter ()func (_ddec ,_ddgba int )bool {return func (_ecge ,_gbaa int )bool {return _gagb [_ecge ].X < _gagb [_gbaa ].X };};func (_ccgb *Bitmaps )SelectBySize (width ,height int ,tp LocationFilter ,relation SizeComparison )(_acad *Bitmaps ,_dffa error ){const _cacb ="B\u0069t\u006d\u0061\u0070\u0073\u002e\u0053\u0065\u006ce\u0063\u0074\u0042\u0079Si\u007a\u0065";
if _ccgb ==nil {return nil ,_c .Error (_cacb ,"\u0027\u0062\u0027 B\u0069\u0074\u006d\u0061\u0070\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};switch tp {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_c .Errorf (_cacb ,"\u0070\u0072\u006f\u0076\u0069d\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u006fc\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",tp );
};switch relation {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE ,SizeSelectIfEQ :default:return nil ,_c .Errorf (_cacb ,"\u0069\u006e\u0076\u0061li\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025d\u0027",relation );
};_bbff ,_dffa :=_ccgb .makeSizeIndicator (width ,height ,tp ,relation );if _dffa !=nil {return nil ,_c .Wrap (_dffa ,_cacb ,"");};_acad ,_dffa =_ccgb .selectByIndicator (_bbff );if _dffa !=nil {return nil ,_c .Wrap (_dffa ,_cacb ,"");};return _acad ,nil ;
};func CorrelationScoreSimple (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab []int )(_efge float64 ,_bbef error ){const _gdeb ="\u0043\u006f\u0072\u0072el\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0053\u0069\u006d\u0070l\u0065";
if bm1 ==nil ||bm2 ==nil {return _efge ,_c .Error (_gdeb ,"n\u0069l\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u0073 \u0070\u0072\u006f\u0076id\u0065\u0064");};if tab ==nil {return _efge ,_c .Error (_gdeb ,"\u0074\u0061\u0062\u0020\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if area1 ==0||area2 ==0{return _efge ,_c .Error (_gdeb ,"\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0061\u0072e\u0061\u0073\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u003e\u0020\u0030");};_ffca ,_dcgg :=bm1 .Width ,bm1 .Height ;_dafg ,_dced :=bm2 .Width ,bm2 .Height ;
if _gdca (_ffca -_dafg )> maxDiffW {return 0,nil ;};if _gdca (_dcgg -_dced )> maxDiffH {return 0,nil ;};var _dccg ,_ffcf int ;if delX >=0{_dccg =int (delX +0.5);}else {_dccg =int (delX -0.5);};if delY >=0{_ffcf =int (delY +0.5);}else {_ffcf =int (delY -0.5);
};_dbed :=bm1 .createTemplate ();if _bbef =_dbed .RasterOperation (_dccg ,_ffcf ,_dafg ,_dced ,PixSrc ,bm2 ,0,0);_bbef !=nil {return _efge ,_c .Wrap (_bbef ,_gdeb ,"\u0062m\u0032 \u0074\u006f\u0020\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065");};if _bbef =_dbed .RasterOperation (0,0,_ffca ,_dcgg ,PixSrcAndDst ,bm1 ,0,0);
_bbef !=nil {return _efge ,_c .Wrap (_bbef ,_gdeb ,"b\u006d\u0031\u0020\u0061\u006e\u0064\u0020\u0062\u006d\u0054");};_bbaf :=_dbed .countPixels ();_efge =float64 (_bbaf )*float64 (_bbaf )/(float64 (area1 )*float64 (area2 ));return _efge ,nil ;};func RasterOperation (dest *Bitmap ,dx ,dy ,dw ,dh int ,op RasterOperator ,src *Bitmap ,sx ,sy int )error {return _edca (dest ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );
};func TstRSymbol (t *_cd .T ,scale ...int )*Bitmap {_ffbec ,_cfeec :=NewWithData (4,5,[]byte {0xF0,0x90,0xF0,0xA0,0x90});_fe .NoError (t ,_cfeec );return TstGetScaledSymbol (t ,_ffbec ,scale ...);};func TstCSymbol (t *_cd .T )*Bitmap {t .Helper ();_eegab :=New (6,6);
_fe .NoError (t ,_eegab .SetPixel (1,0,1));_fe .NoError (t ,_eegab .SetPixel (2,0,1));_fe .NoError (t ,_eegab .SetPixel (3,0,1));_fe .NoError (t ,_eegab .SetPixel (4,0,1));_fe .NoError (t ,_eegab .SetPixel (0,1,1));_fe .NoError (t ,_eegab .SetPixel (5,1,1));
_fe .NoError (t ,_eegab .SetPixel (0,2,1));_fe .NoError (t ,_eegab .SetPixel (0,3,1));_fe .NoError (t ,_eegab .SetPixel (0,4,1));_fe .NoError (t ,_eegab .SetPixel (5,4,1));_fe .NoError (t ,_eegab .SetPixel (1,5,1));_fe .NoError (t ,_eegab .SetPixel (2,5,1));
_fe .NoError (t ,_eegab .SetPixel (3,5,1));_fe .NoError (t ,_eegab .SetPixel (4,5,1));return _eegab ;};func (_dedbb *BitmapsArray )AddBox (box *_ee .Rectangle ){_dedbb .Boxes =append (_dedbb .Boxes ,box )};func (_bbbe *ClassedPoints )YAtIndex (i int )float32 {return (*_bbbe .Points )[_bbbe .IntSlice [i ]].Y };
func TstWSymbol (t *_cd .T ,scale ...int )*Bitmap {_cede ,_dgcbf :=NewWithData (5,5,[]byte {0x88,0x88,0xA8,0xD8,0x88});_fe .NoError (t ,_dgcbf );return TstGetScaledSymbol (t ,_cede ,scale ...);};type BitmapsArray struct{Values []*Bitmaps ;Boxes []*_ee .Rectangle ;
};const (CmbOpOr CombinationOperator =iota ;CmbOpAnd ;CmbOpXor ;CmbOpXNor ;CmbOpReplace ;CmbOpNot ;);var _ _ff .Interface =&ClassedPoints {};func (_dceeb CombinationOperator )String ()string {var _efeca string ;switch _dceeb {case CmbOpOr :_efeca ="\u004f\u0052";
case CmbOpAnd :_efeca ="\u0041\u004e\u0044";case CmbOpXor :_efeca ="\u0058\u004f\u0052";case CmbOpXNor :_efeca ="\u0058\u004e\u004f\u0052";case CmbOpReplace :_efeca ="\u0052E\u0050\u004c\u0041\u0043\u0045";case CmbOpNot :_efeca ="\u004e\u004f\u0054";};
return _efeca ;};func _faagd (_bdecf *Bitmap ,_dgcb ,_fbdd int ,_aace ,_cddc int ,_bgae RasterOperator ){var (_gdda int ;_edbb byte ;_gdeff ,_ecdc int ;_gffg int ;);_fcag :=_aace >>3;_deda :=_aace &7;if _deda > 0{_edbb =_egfga [_deda ];};_gdda =_bdecf .RowStride *_fbdd +(_dgcb >>3);
switch _bgae {case PixClr :for _gdeff =0;_gdeff < _cddc ;_gdeff ++{_gffg =_gdda +_gdeff *_bdecf .RowStride ;for _ecdc =0;_ecdc < _fcag ;_ecdc ++{_bdecf .Data [_gffg ]=0x0;_gffg ++;};if _deda > 0{_bdecf .Data [_gffg ]=_eaga (_bdecf .Data [_gffg ],0x0,_edbb );
};};case PixSet :for _gdeff =0;_gdeff < _cddc ;_gdeff ++{_gffg =_gdda +_gdeff *_bdecf .RowStride ;for _ecdc =0;_ecdc < _fcag ;_ecdc ++{_bdecf .Data [_gffg ]=0xff;_gffg ++;};if _deda > 0{_bdecf .Data [_gffg ]=_eaga (_bdecf .Data [_gffg ],0xff,_edbb );};
};case PixNotDst :for _gdeff =0;_gdeff < _cddc ;_gdeff ++{_gffg =_gdda +_gdeff *_bdecf .RowStride ;for _ecdc =0;_ecdc < _fcag ;_ecdc ++{_bdecf .Data [_gffg ]=^_bdecf .Data [_gffg ];_gffg ++;};if _deda > 0{_bdecf .Data [_gffg ]=_eaga (_bdecf .Data [_gffg ],^_bdecf .Data [_gffg ],_edbb );
};};};};func TstImageBitmapInverseData ()[]byte {_fdbb :=_bgbc .Copy ();_fdbb .InverseData ();return _fdbb .Data ;};func (_aaeed Points )GetIntY (i int )(int ,error ){if i >=len (_aaeed ){return 0,_c .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065t\u0049\u006e\u0074\u0059","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return int (_aaeed [i ].Y ),nil ;};func (_eac *Bitmap )Equivalent (s *Bitmap )bool {return _eac .equivalent (s )};func (_befb *Bitmap )RasterOperation (dx ,dy ,dw ,dh int ,op RasterOperator ,src *Bitmap ,sx ,sy int )error {return _edca (_befb ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );
};func NewClassedPoints (points *Points ,classes _e .IntSlice )(*ClassedPoints ,error ){const _abaa ="\u004e\u0065w\u0043\u006c\u0061s\u0073\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073";if points ==nil {return nil ,_c .Error (_abaa ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0070\u006f\u0069\u006e\u0074\u0073");
};if classes ==nil {return nil ,_c .Error (_abaa ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0063\u006c\u0061ss\u0065\u0073");};_adbe :=&ClassedPoints {Points :points ,IntSlice :classes };if _cedg :=_adbe .validateIntSlice ();_cedg !=nil {return nil ,_c .Wrap (_cedg ,_abaa ,"");
};return _adbe ,nil ;};func _aegb (_bccc ,_gbb int )int {if _bccc < _gbb {return _bccc ;};return _gbb ;};func (_cdc *Bitmap )AddBorder (borderSize ,val int )(*Bitmap ,error ){if borderSize ==0{return _cdc .Copy (),nil ;};_agfb ,_cfa :=_cdc .addBorderGeneral (borderSize ,borderSize ,borderSize ,borderSize ,val );
if _cfa !=nil {return nil ,_c .Wrap (_cfa ,"\u0041d\u0064\u0042\u006f\u0072\u0064\u0065r","");};return _agfb ,nil ;};func (_aaf *Bitmap )CreateTemplate ()*Bitmap {return _aaf .createTemplate ()};func _cdb ()(_eba [256]uint64 ){for _ga :=0;_ga < 256;_ga ++{if _ga &0x01!=0{_eba [_ga ]|=0xff;
};if _ga &0x02!=0{_eba [_ga ]|=0xff00;};if _ga &0x04!=0{_eba [_ga ]|=0xff0000;};if _ga &0x08!=0{_eba [_ga ]|=0xff000000;};if _ga &0x10!=0{_eba [_ga ]|=0xff00000000;};if _ga &0x20!=0{_eba [_ga ]|=0xff0000000000;};if _ga &0x40!=0{_eba [_ga ]|=0xff000000000000;
};if _ga &0x80!=0{_eba [_ga ]|=0xff00000000000000;};};return _eba ;};func (_dbgg *Points )Add (pt *Points )error {const _acbeg ="\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0041\u0064\u0064";if _dbgg ==nil {return _c .Error (_acbeg ,"\u0070o\u0069n\u0074\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if pt ==nil {return _c .Error (_acbeg ,"a\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0070\u006f\u0069\u006e\u0074\u0073\u0020\u006eo\u0074\u0020\u0064e\u0066i\u006e\u0065\u0064");};*_dbgg =append (*_dbgg ,*pt ...);return nil ;};func (_aeebd *Bitmaps )AddBox (box *_ee .Rectangle ){_aeebd .Boxes =append (_aeebd .Boxes ,box )};
func _daead (_egafd ,_baed *Bitmap ,_ecg CombinationOperator )*Bitmap {_degd :=New (_egafd .Width ,_egafd .Height );for _cfacc :=0;_cfacc < len (_degd .Data );_cfacc ++{_degd .Data [_cfacc ]=_cege (_egafd .Data [_cfacc ],_baed .Data [_cfacc ],_ecg );};
return _degd ;};func _eabg (_bcb uint ,_baa byte )byte {return _baa >>_bcb <<_bcb };type Selection struct{Height ,Width int ;Cx ,Cy int ;Name string ;Data [][]SelectionValue ;};func (_fdde *Bitmap )GetComponents (components Component ,maxWidth ,maxHeight int )(_deddc *Bitmaps ,_cbeb *Boxes ,_babaa error ){const _bdb ="B\u0069t\u006d\u0061\u0070\u002e\u0047\u0065\u0074\u0043o\u006d\u0070\u006f\u006een\u0074\u0073";
if _fdde ==nil {return nil ,nil ,_c .Error (_bdb ,"\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0042\u0069\u0074\u006da\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069n\u0065\u0064\u002e");};switch components {case ComponentConn ,ComponentCharacters ,ComponentWords :default:return nil ,nil ,_c .Error (_bdb ,"\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065n\u0074s\u0020\u0070\u0061\u0072\u0061\u006d\u0065t\u0065\u0072");
};if _fdde .Zero (){_cbeb =&Boxes {};_deddc =&Bitmaps {};return _deddc ,_cbeb ,nil ;};switch components {case ComponentConn :_deddc =&Bitmaps {};if _cbeb ,_babaa =_fdde .ConnComponents (_deddc ,8);_babaa !=nil {return nil ,nil ,_c .Wrap (_babaa ,_bdb ,"\u006e\u006f \u0070\u0072\u0065p\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};case ComponentCharacters :_aegbc ,_edbf :=MorphSequence (_fdde ,MorphProcess {Operation :MopClosing ,Arguments :[]int {1,6}});if _edbf !=nil {return nil ,nil ,_c .Wrap (_edbf ,_bdb ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};if _aa .Log .IsLogLevel (_aa .LogLevelTrace ){_aa .Log .Trace ("\u0043o\u006d\u0070o\u006e\u0065\u006e\u0074C\u0068\u0061\u0072a\u0063\u0074\u0065\u0072\u0073\u0020\u0062\u0069\u0074ma\u0070\u0020\u0061f\u0074\u0065r\u0020\u0063\u006c\u006f\u0073\u0069n\u0067\u003a \u0025\u0073",_aegbc .String ());
};_cafc :=&Bitmaps {};_cbeb ,_edbf =_aegbc .ConnComponents (_cafc ,8);if _edbf !=nil {return nil ,nil ,_c .Wrap (_edbf ,_bdb ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};if _aa .Log .IsLogLevel (_aa .LogLevelTrace ){_aa .Log .Trace ("\u0043\u006f\u006d\u0070\u006f\u006ee\u006e\u0074\u0043\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u0020a\u0066\u0074\u0065\u0072\u0020\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076i\u0074y\u003a\u0020\u0025\u0073",_cafc .String ());
};if _deddc ,_edbf =_cafc .ClipToBitmap (_fdde );_edbf !=nil {return nil ,nil ,_c .Wrap (_edbf ,_bdb ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");};case ComponentWords :_cggb :=1;
var _aca *Bitmap ;switch {case _fdde .XResolution <=200:_aca =_fdde ;case _fdde .XResolution <=400:_cggb =2;_aca ,_babaa =_dd (_fdde ,1,0,0,0);if _babaa !=nil {return nil ,nil ,_c .Wrap (_babaa ,_bdb ,"w\u006f\u0072\u0064\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0020\u002d \u0078\u0072\u0065s\u003c=\u0034\u0030\u0030");
};default:_cggb =4;_aca ,_babaa =_dd (_fdde ,1,1,0,0);if _babaa !=nil {return nil ,nil ,_c .Wrap (_babaa ,_bdb ,"\u0077\u006f\u0072\u0064 \u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073 \u002d \u0078\u0072\u0065\u0073\u0020\u003e\u00204\u0030\u0030");
};};_ffea ,_ ,_cdcc :=_ggfg (_aca );if _cdcc !=nil {return nil ,nil ,_c .Wrap (_cdcc ,_bdb ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};_ebga ,_cdcc :=_decb (_ffea ,_cggb );if _cdcc !=nil {return nil ,nil ,_c .Wrap (_cdcc ,_bdb ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");
};_ccba :=&Bitmaps {};if _cbeb ,_cdcc =_ebga .ConnComponents (_ccba ,4);_cdcc !=nil {return nil ,nil ,_c .Wrap (_cdcc ,_bdb ,"\u0077\u006f\u0072\u0064\u0020\u0070r\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u002c\u0020\u0063\u006f\u006en\u0065\u0063\u0074\u0020\u0065\u0078\u0070a\u006e\u0064\u0065\u0064");
};if _deddc ,_cdcc =_ccba .ClipToBitmap (_fdde );_cdcc !=nil {return nil ,nil ,_c .Wrap (_cdcc ,_bdb ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};};_deddc ,_babaa =_deddc .SelectBySize (maxWidth ,maxHeight ,LocSelectIfBoth ,SizeSelectIfLTE );
if _babaa !=nil {return nil ,nil ,_c .Wrap (_babaa ,_bdb ,"");};_cbeb ,_babaa =_cbeb .SelectBySize (maxWidth ,maxHeight ,LocSelectIfBoth ,SizeSelectIfLTE );if _babaa !=nil {return nil ,nil ,_c .Wrap (_babaa ,_bdb ,"");};return _deddc ,_cbeb ,nil ;};func (_bfb *Bitmap )setEightPartlyBytes (_eaeb ,_ebbe int ,_gegb uint64 )(_abd error ){var (_ecef byte ;
_gdcd int ;);const _dbdd ="\u0073\u0065\u0074\u0045ig\u0068\u0074\u0050\u0061\u0072\u0074\u006c\u0079\u0042\u0079\u0074\u0065\u0073";for _bfed :=1;_bfed <=_ebbe ;_bfed ++{_gdcd =64-_bfed *8;_ecef =byte (_gegb >>uint (_gdcd )&0xff);_aa .Log .Trace ("\u0074\u0065\u006d\u0070\u003a\u0020\u0025\u0030\u0038\u0062\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a %\u0064,\u0020\u0069\u0064\u0078\u003a\u0020\u0025\u0064\u002c\u0020\u0066\u0075l\u006c\u0042\u0079\u0074\u0065\u0073\u004e\u0075\u006d\u0062\u0065\u0072\u003a\u0020\u0025\u0064\u002c \u0073\u0068\u0069\u0066\u0074\u003a\u0020\u0025\u0064",_ecef ,_eaeb ,_eaeb +_bfed -1,_ebbe ,_gdcd );
if _abd =_bfb .SetByte (_eaeb +_bfed -1,_ecef );_abd !=nil {return _c .Wrap (_abd ,_dbdd ,"\u0066\u0075\u006c\u006c\u0042\u0079\u0074\u0065");};};_cbcc :=_bfb .RowStride *8-_bfb .Width ;if _cbcc ==0{return nil ;};_gdcd -=8;_ecef =byte (_gegb >>uint (_gdcd )&0xff)<<uint (_cbcc );
if _abd =_bfb .SetByte (_eaeb +_ebbe ,_ecef );_abd !=nil {return _c .Wrap (_abd ,_dbdd ,"\u0070\u0061\u0064\u0064\u0065\u0064");};return nil ;};func (_gbdg *Bitmap )GetBitOffset (x int )int {return x &0x07};const (_ SizeSelection =iota ;SizeSelectByWidth ;
SizeSelectByHeight ;SizeSelectByMaxDimension ;SizeSelectByArea ;SizeSelectByPerimeter ;);func _eedf (_beb ,_cbe *Bitmap ,_af int ,_gac []byte ,_bg int )(_ceg error ){const _bd ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0032";
var (_cdf ,_fea ,_ccf ,_cgf ,_cef ,_gae ,_gfbe ,_eg int ;_gfbea ,_ega ,_bbd ,_bee uint32 ;_cggf ,_gbd byte ;_bgc uint16 ;);_daf :=make ([]byte ,4);_befc :=make ([]byte ,4);for _ccf =0;_ccf < _beb .Height -1;_ccf ,_cgf =_ccf +2,_cgf +1{_cdf =_ccf *_beb .RowStride ;
_fea =_cgf *_cbe .RowStride ;for _cef ,_gae =0,0;_cef < _bg ;_cef ,_gae =_cef +4,_gae +1{for _gfbe =0;_gfbe < 4;_gfbe ++{_eg =_cdf +_cef +_gfbe ;if _eg <=len (_beb .Data )-1&&_eg < _cdf +_beb .RowStride {_daf [_gfbe ]=_beb .Data [_eg ];}else {_daf [_gfbe ]=0x00;
};_eg =_cdf +_beb .RowStride +_cef +_gfbe ;if _eg <=len (_beb .Data )-1&&_eg < _cdf +(2*_beb .RowStride ){_befc [_gfbe ]=_beb .Data [_eg ];}else {_befc [_gfbe ]=0x00;};};_gfbea =_g .BigEndian .Uint32 (_daf );_ega =_g .BigEndian .Uint32 (_befc );_bbd =_gfbea &_ega ;
_bbd |=_bbd <<1;_bee =_gfbea |_ega ;_bee &=_bee <<1;_ega =_bbd |_bee ;_ega &=0xaaaaaaaa;_gfbea =_ega |(_ega <<7);_cggf =byte (_gfbea >>24);_gbd =byte ((_gfbea >>8)&0xff);_eg =_fea +_gae ;if _eg +1==len (_cbe .Data )-1||_eg +1>=_fea +_cbe .RowStride {if _ceg =_cbe .SetByte (_eg ,_gac [_cggf ]);
_ceg !=nil {return _c .Wrapf (_ceg ,_bd ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_eg );};}else {_bgc =(uint16 (_gac [_cggf ])<<8)|uint16 (_gac [_gbd ]);if _ceg =_cbe .setTwoBytes (_eg ,_bgc );_ceg !=nil {return _c .Wrapf (_ceg ,_bd ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_eg );
};_gae ++;};};};return nil ;};func _ggg (_dfb *Bitmap ,_dbd *Bitmap ,_de int )(_gde error ){const _eca ="e\u0078\u0070\u0061\u006edB\u0069n\u0061\u0072\u0079\u0050\u006fw\u0065\u0072\u0032\u004c\u006f\u0077";switch _de {case 2:_gde =_eed (_dfb ,_dbd );
case 4:_gde =_fef (_dfb ,_dbd );case 8:_gde =_cg (_dfb ,_dbd );default:return _c .Error (_eca ,"\u0065\u0078p\u0061\u006e\u0073\u0069o\u006e\u0020f\u0061\u0063\u0074\u006f\u0072\u0020\u006e\u006ft\u0020\u0069\u006e\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d\u0020r\u0061\u006e\u0067\u0065");
};if _gde !=nil {_gde =_c .Wrap (_gde ,_eca ,"");};return _gde ;};const (_beea shift =iota ;_bggg ;);func TstImageBitmap ()*Bitmap {return _bgbc .Copy ()};func ClipBoxToRectangle (box *_ee .Rectangle ,wi ,hi int )(_bged *_ee .Rectangle ,_adc error ){const _cbdd ="\u0043l\u0069p\u0042\u006f\u0078\u0054\u006fR\u0065\u0063t\u0061\u006e\u0067\u006c\u0065";
if box ==nil {return nil ,_c .Error (_cbdd ,"\u0027\u0062\u006f\u0078\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");};if box .Min .X >=wi ||box .Min .Y >=hi ||box .Max .X <=0||box .Max .Y <=0{return nil ,_c .Error (_cbdd ,"\u0027\u0062\u006fx'\u0020\u006f\u0075\u0074\u0073\u0069\u0064\u0065\u0020\u0072\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065");
};_deaf :=*box ;_bged =&_deaf ;if _bged .Min .X < 0{_bged .Max .X +=_bged .Min .X ;_bged .Min .X =0;};if _bged .Min .Y < 0{_bged .Max .Y +=_bged .Min .Y ;_bged .Min .Y =0;};if _bged .Max .X > wi {_bged .Max .X =wi ;};if _bged .Max .Y > hi {_bged .Max .Y =hi ;
};return _bged ,nil ;};func (_bggd *byHeight )Len ()int {return len (_bggd .Values )};func _gfdb (_egbg *Bitmap ,_cbgb ,_eegf ,_gbda ,_cefac int ,_ggfc RasterOperator ,_gcc *Bitmap ,_dgaf ,_edfc int )error {var (_bcdd bool ;_abfa bool ;_fbcg int ;_egba int ;
_fcda int ;_ccbcb bool ;_bdbe byte ;_efggb int ;_cace int ;_badg int ;_ebae ,_geaca int ;);_fcdca :=8-(_cbgb &7);_gdbd :=_gdee [_fcdca ];_effd :=_egbg .RowStride *_eegf +(_cbgb >>3);_gfeba :=_gcc .RowStride *_edfc +(_dgaf >>3);if _gbda < _fcdca {_bcdd =true ;
_gdbd &=_egfga [8-_fcdca +_gbda ];};if !_bcdd {_fbcg =(_gbda -_fcdca )>>3;if _fbcg > 0{_abfa =true ;_egba =_effd +1;_fcda =_gfeba +1;};};_efggb =(_cbgb +_gbda )&7;if !(_bcdd ||_efggb ==0){_ccbcb =true ;_bdbe =_egfga [_efggb ];_cace =_effd +1+_fbcg ;_badg =_gfeba +1+_fbcg ;
};switch _ggfc {case PixSrc :for _ebae =0;_ebae < _cefac ;_ebae ++{_egbg .Data [_effd ]=_eaga (_egbg .Data [_effd ],_gcc .Data [_gfeba ],_gdbd );_effd +=_egbg .RowStride ;_gfeba +=_gcc .RowStride ;};if _abfa {for _ebae =0;_ebae < _cefac ;_ebae ++{for _geaca =0;
_geaca < _fbcg ;_geaca ++{_egbg .Data [_egba +_geaca ]=_gcc .Data [_fcda +_geaca ];};_egba +=_egbg .RowStride ;_fcda +=_gcc .RowStride ;};};if _ccbcb {for _ebae =0;_ebae < _cefac ;_ebae ++{_egbg .Data [_cace ]=_eaga (_egbg .Data [_cace ],_gcc .Data [_badg ],_bdbe );
_cace +=_egbg .RowStride ;_badg +=_gcc .RowStride ;};};case PixNotSrc :for _ebae =0;_ebae < _cefac ;_ebae ++{_egbg .Data [_effd ]=_eaga (_egbg .Data [_effd ],^_gcc .Data [_gfeba ],_gdbd );_effd +=_egbg .RowStride ;_gfeba +=_gcc .RowStride ;};if _abfa {for _ebae =0;
_ebae < _cefac ;_ebae ++{for _geaca =0;_geaca < _fbcg ;_geaca ++{_egbg .Data [_egba +_geaca ]=^_gcc .Data [_fcda +_geaca ];};_egba +=_egbg .RowStride ;_fcda +=_gcc .RowStride ;};};if _ccbcb {for _ebae =0;_ebae < _cefac ;_ebae ++{_egbg .Data [_cace ]=_eaga (_egbg .Data [_cace ],^_gcc .Data [_badg ],_bdbe );
_cace +=_egbg .RowStride ;_badg +=_gcc .RowStride ;};};case PixSrcOrDst :for _ebae =0;_ebae < _cefac ;_ebae ++{_egbg .Data [_effd ]=_eaga (_egbg .Data [_effd ],_gcc .Data [_gfeba ]|_egbg .Data [_effd ],_gdbd );_effd +=_egbg .RowStride ;_gfeba +=_gcc .RowStride ;
};if _abfa {for _ebae =0;_ebae < _cefac ;_ebae ++{for _geaca =0;_geaca < _fbcg ;_geaca ++{_egbg .Data [_egba +_geaca ]|=_gcc .Data [_fcda +_geaca ];};_egba +=_egbg .RowStride ;_fcda +=_gcc .RowStride ;};};if _ccbcb {for _ebae =0;_ebae < _cefac ;_ebae ++{_egbg .Data [_cace ]=_eaga (_egbg .Data [_cace ],_gcc .Data [_badg ]|_egbg .Data [_cace ],_bdbe );
_cace +=_egbg .RowStride ;_badg +=_gcc .RowStride ;};};case PixSrcAndDst :for _ebae =0;_ebae < _cefac ;_ebae ++{_egbg .Data [_effd ]=_eaga (_egbg .Data [_effd ],_gcc .Data [_gfeba ]&_egbg .Data [_effd ],_gdbd );_effd +=_egbg .RowStride ;_gfeba +=_gcc .RowStride ;
};if _abfa {for _ebae =0;_ebae < _cefac ;_ebae ++{for _geaca =0;_geaca < _fbcg ;_geaca ++{_egbg .Data [_egba +_geaca ]&=_gcc .Data [_fcda +_geaca ];};_egba +=_egbg .RowStride ;_fcda +=_gcc .RowStride ;};};if _ccbcb {for _ebae =0;_ebae < _cefac ;_ebae ++{_egbg .Data [_cace ]=_eaga (_egbg .Data [_cace ],_gcc .Data [_badg ]&_egbg .Data [_cace ],_bdbe );
_cace +=_egbg .RowStride ;_badg +=_gcc .RowStride ;};};case PixSrcXorDst :for _ebae =0;_ebae < _cefac ;_ebae ++{_egbg .Data [_effd ]=_eaga (_egbg .Data [_effd ],_gcc .Data [_gfeba ]^_egbg .Data [_effd ],_gdbd );_effd +=_egbg .RowStride ;_gfeba +=_gcc .RowStride ;
};if _abfa {for _ebae =0;_ebae < _cefac ;_ebae ++{for _geaca =0;_geaca < _fbcg ;_geaca ++{_egbg .Data [_egba +_geaca ]^=_gcc .Data [_fcda +_geaca ];};_egba +=_egbg .RowStride ;_fcda +=_gcc .RowStride ;};};if _ccbcb {for _ebae =0;_ebae < _cefac ;_ebae ++{_egbg .Data [_cace ]=_eaga (_egbg .Data [_cace ],_gcc .Data [_badg ]^_egbg .Data [_cace ],_bdbe );
_cace +=_egbg .RowStride ;_badg +=_gcc .RowStride ;};};case PixNotSrcOrDst :for _ebae =0;_ebae < _cefac ;_ebae ++{_egbg .Data [_effd ]=_eaga (_egbg .Data [_effd ],^(_gcc .Data [_gfeba ])|_egbg .Data [_effd ],_gdbd );_effd +=_egbg .RowStride ;_gfeba +=_gcc .RowStride ;
};if _abfa {for _ebae =0;_ebae < _cefac ;_ebae ++{for _geaca =0;_geaca < _fbcg ;_geaca ++{_egbg .Data [_egba +_geaca ]|=^(_gcc .Data [_fcda +_geaca ]);};_egba +=_egbg .RowStride ;_fcda +=_gcc .RowStride ;};};if _ccbcb {for _ebae =0;_ebae < _cefac ;_ebae ++{_egbg .Data [_cace ]=_eaga (_egbg .Data [_cace ],^(_gcc .Data [_badg ])|_egbg .Data [_cace ],_bdbe );
_cace +=_egbg .RowStride ;_badg +=_gcc .RowStride ;};};case PixNotSrcAndDst :for _ebae =0;_ebae < _cefac ;_ebae ++{_egbg .Data [_effd ]=_eaga (_egbg .Data [_effd ],^(_gcc .Data [_gfeba ])&_egbg .Data [_effd ],_gdbd );_effd +=_egbg .RowStride ;_gfeba +=_gcc .RowStride ;
};if _abfa {for _ebae =0;_ebae < _cefac ;_ebae ++{for _geaca =0;_geaca < _fbcg ;_geaca ++{_egbg .Data [_egba +_geaca ]&=^_gcc .Data [_fcda +_geaca ];};_egba +=_egbg .RowStride ;_fcda +=_gcc .RowStride ;};};if _ccbcb {for _ebae =0;_ebae < _cefac ;_ebae ++{_egbg .Data [_cace ]=_eaga (_egbg .Data [_cace ],^(_gcc .Data [_badg ])&_egbg .Data [_cace ],_bdbe );
_cace +=_egbg .RowStride ;_badg +=_gcc .RowStride ;};};case PixSrcOrNotDst :for _ebae =0;_ebae < _cefac ;_ebae ++{_egbg .Data [_effd ]=_eaga (_egbg .Data [_effd ],_gcc .Data [_gfeba ]|^(_egbg .Data [_effd ]),_gdbd );_effd +=_egbg .RowStride ;_gfeba +=_gcc .RowStride ;
};if _abfa {for _ebae =0;_ebae < _cefac ;_ebae ++{for _geaca =0;_geaca < _fbcg ;_geaca ++{_egbg .Data [_egba +_geaca ]=_gcc .Data [_fcda +_geaca ]|^(_egbg .Data [_egba +_geaca ]);};_egba +=_egbg .RowStride ;_fcda +=_gcc .RowStride ;};};if _ccbcb {for _ebae =0;
_ebae < _cefac ;_ebae ++{_egbg .Data [_cace ]=_eaga (_egbg .Data [_cace ],_gcc .Data [_badg ]|^(_egbg .Data [_cace ]),_bdbe );_cace +=_egbg .RowStride ;_badg +=_gcc .RowStride ;};};case PixSrcAndNotDst :for _ebae =0;_ebae < _cefac ;_ebae ++{_egbg .Data [_effd ]=_eaga (_egbg .Data [_effd ],_gcc .Data [_gfeba ]&^(_egbg .Data [_effd ]),_gdbd );
_effd +=_egbg .RowStride ;_gfeba +=_gcc .RowStride ;};if _abfa {for _ebae =0;_ebae < _cefac ;_ebae ++{for _geaca =0;_geaca < _fbcg ;_geaca ++{_egbg .Data [_egba +_geaca ]=_gcc .Data [_fcda +_geaca ]&^(_egbg .Data [_egba +_geaca ]);};_egba +=_egbg .RowStride ;
_fcda +=_gcc .RowStride ;};};if _ccbcb {for _ebae =0;_ebae < _cefac ;_ebae ++{_egbg .Data [_cace ]=_eaga (_egbg .Data [_cace ],_gcc .Data [_badg ]&^(_egbg .Data [_cace ]),_bdbe );_cace +=_egbg .RowStride ;_badg +=_gcc .RowStride ;};};case PixNotPixSrcOrDst :for _ebae =0;
_ebae < _cefac ;_ebae ++{_egbg .Data [_effd ]=_eaga (_egbg .Data [_effd ],^(_gcc .Data [_gfeba ]|_egbg .Data [_effd ]),_gdbd );_effd +=_egbg .RowStride ;_gfeba +=_gcc .RowStride ;};if _abfa {for _ebae =0;_ebae < _cefac ;_ebae ++{for _geaca =0;_geaca < _fbcg ;
_geaca ++{_egbg .Data [_egba +_geaca ]=^(_gcc .Data [_fcda +_geaca ]|_egbg .Data [_egba +_geaca ]);};_egba +=_egbg .RowStride ;_fcda +=_gcc .RowStride ;};};if _ccbcb {for _ebae =0;_ebae < _cefac ;_ebae ++{_egbg .Data [_cace ]=_eaga (_egbg .Data [_cace ],^(_gcc .Data [_badg ]|_egbg .Data [_cace ]),_bdbe );
_cace +=_egbg .RowStride ;_badg +=_gcc .RowStride ;};};case PixNotPixSrcAndDst :for _ebae =0;_ebae < _cefac ;_ebae ++{_egbg .Data [_effd ]=_eaga (_egbg .Data [_effd ],^(_gcc .Data [_gfeba ]&_egbg .Data [_effd ]),_gdbd );_effd +=_egbg .RowStride ;_gfeba +=_gcc .RowStride ;
};if _abfa {for _ebae =0;_ebae < _cefac ;_ebae ++{for _geaca =0;_geaca < _fbcg ;_geaca ++{_egbg .Data [_egba +_geaca ]=^(_gcc .Data [_fcda +_geaca ]&_egbg .Data [_egba +_geaca ]);};_egba +=_egbg .RowStride ;_fcda +=_gcc .RowStride ;};};if _ccbcb {for _ebae =0;
_ebae < _cefac ;_ebae ++{_egbg .Data [_cace ]=_eaga (_egbg .Data [_cace ],^(_gcc .Data [_badg ]&_egbg .Data [_cace ]),_bdbe );_cace +=_egbg .RowStride ;_badg +=_gcc .RowStride ;};};case PixNotPixSrcXorDst :for _ebae =0;_ebae < _cefac ;_ebae ++{_egbg .Data [_effd ]=_eaga (_egbg .Data [_effd ],^(_gcc .Data [_gfeba ]^_egbg .Data [_effd ]),_gdbd );
_effd +=_egbg .RowStride ;_gfeba +=_gcc .RowStride ;};if _abfa {for _ebae =0;_ebae < _cefac ;_ebae ++{for _geaca =0;_geaca < _fbcg ;_geaca ++{_egbg .Data [_egba +_geaca ]=^(_gcc .Data [_fcda +_geaca ]^_egbg .Data [_egba +_geaca ]);};_egba +=_egbg .RowStride ;
_fcda +=_gcc .RowStride ;};};if _ccbcb {for _ebae =0;_ebae < _cefac ;_ebae ++{_egbg .Data [_cace ]=_eaga (_egbg .Data [_cace ],^(_gcc .Data [_badg ]^_egbg .Data [_cace ]),_bdbe );_cace +=_egbg .RowStride ;_badg +=_gcc .RowStride ;};};default:_aa .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070e\u0072\u0061\u0074o\u0072:\u0020\u0025\u0064",_ggfc );
return _c .Error ("\u0072\u0061\u0073\u0074er\u004f\u0070\u0056\u0041\u006c\u0069\u0067\u006e\u0065\u0064\u004c\u006f\u0077","\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");
};return nil ;};func (_gegg *Bitmap )ConnComponents (bms *Bitmaps ,connectivity int )(_bebc *Boxes ,_fffc error ){const _fdeb ="B\u0069\u0074\u006d\u0061p.\u0043o\u006e\u006e\u0043\u006f\u006dp\u006f\u006e\u0065\u006e\u0074\u0073";if _gegg ==nil {return nil ,_c .Error (_fdeb ,"\u0070r\u006f\u0076\u0069\u0064e\u0064\u0020\u0065\u006d\u0070t\u0079 \u0027b\u0027\u0020\u0062\u0069\u0074\u006d\u0061p");
};if connectivity !=4&&connectivity !=8{return nil ,_c .Error (_fdeb ,"\u0063\u006f\u006ene\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u006e\u006f\u0074\u0020\u0034\u0020\u006f\u0072\u0020\u0038");};if bms ==nil {if _bebc ,_fffc =_gegg .connComponentsBB (connectivity );
_fffc !=nil {return nil ,_c .Wrap (_fffc ,_fdeb ,"");};}else {if _bebc ,_fffc =_gegg .connComponentsBitmapsBB (bms ,connectivity );_fffc !=nil {return nil ,_c .Wrap (_fffc ,_fdeb ,"");};};return _bebc ,nil ;};func _afcc (_fcdc ,_edge *Bitmap ,_aaec *Selection )(*Bitmap ,error ){const _cgaa ="\u006f\u0070\u0065\u006e";
var _gdfb error ;_fcdc ,_gdfb =_aead (_fcdc ,_edge ,_aaec );if _gdfb !=nil {return nil ,_c .Wrap (_gdfb ,_cgaa ,"");};_dacd ,_gdfb :=_fgd (nil ,_edge ,_aaec );if _gdfb !=nil {return nil ,_c .Wrap (_gdfb ,_cgaa ,"");};_ ,_gdfb =_eddc (_fcdc ,_dacd ,_aaec );
if _gdfb !=nil {return nil ,_c .Wrap (_gdfb ,_cgaa ,"");};return _fcdc ,nil ;};func (_gca *Bitmap )countPixels ()int {var (_aaee int ;_acf uint8 ;_abee byte ;_egcg int ;);_addb :=_gca .RowStride ;_ecc :=uint (_gca .Width &0x07);if _ecc !=0{_acf =uint8 ((0xff<<(8-_ecc ))&0xff);
_addb --;};for _eeea :=0;_eeea < _gca .Height ;_eeea ++{for _egcg =0;_egcg < _addb ;_egcg ++{_abee =_gca .Data [_eeea *_gca .RowStride +_egcg ];_aaee +=int (_fcg [_abee ]);};if _ecc !=0{_aaee +=int (_fcg [_gca .Data [_eeea *_gca .RowStride +_egcg ]&_acf ]);
};};return _aaee ;};func (_agfbg *Bitmap )Zero ()bool {_bdf :=_agfbg .Width /8;_befca :=_agfbg .Width &7;var _ade byte ;if _befca !=0{_ade =byte (0xff<<uint (8-_befca ));};var _bde ,_fgbb ,_bcda int ;for _fgbb =0;_fgbb < _agfbg .Height ;_fgbb ++{_bde =_agfbg .RowStride *_fgbb ;
for _bcda =0;_bcda < _bdf ;_bcda ,_bde =_bcda +1,_bde +1{if _agfbg .Data [_bde ]!=0{return false ;};};if _befca > 0{if _agfbg .Data [_bde ]&_ade !=0{return false ;};};};return true ;};func (_eded *Bitmap )setEightFullBytes (_cbeg int ,_fae uint64 )error {if _cbeg +7> len (_eded .Data )-1{return _c .Error ("\u0073\u0065\u0074\u0045\u0069\u0067\u0068\u0074\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_eded .Data [_cbeg ]=byte ((_fae &0xff00000000000000)>>56);_eded .Data [_cbeg +1]=byte ((_fae &0xff000000000000)>>48);_eded .Data [_cbeg +2]=byte ((_fae &0xff0000000000)>>40);_eded .Data [_cbeg +3]=byte ((_fae &0xff00000000)>>32);_eded .Data [_cbeg +4]=byte ((_fae &0xff000000)>>24);
_eded .Data [_cbeg +5]=byte ((_fae &0xff0000)>>16);_eded .Data [_cbeg +6]=byte ((_fae &0xff00)>>8);_eded .Data [_cbeg +7]=byte (_fae &0xff);return nil ;};func TstPSymbol (t *_cd .T )*Bitmap {t .Helper ();_acfe :=New (5,8);_fe .NoError (t ,_acfe .SetPixel (0,0,1));
_fe .NoError (t ,_acfe .SetPixel (1,0,1));_fe .NoError (t ,_acfe .SetPixel (2,0,1));_fe .NoError (t ,_acfe .SetPixel (3,0,1));_fe .NoError (t ,_acfe .SetPixel (4,1,1));_fe .NoError (t ,_acfe .SetPixel (0,1,1));_fe .NoError (t ,_acfe .SetPixel (4,2,1));
_fe .NoError (t ,_acfe .SetPixel (0,2,1));_fe .NoError (t ,_acfe .SetPixel (4,3,1));_fe .NoError (t ,_acfe .SetPixel (0,3,1));_fe .NoError (t ,_acfe .SetPixel (0,4,1));_fe .NoError (t ,_acfe .SetPixel (1,4,1));_fe .NoError (t ,_acfe .SetPixel (2,4,1));
_fe .NoError (t ,_acfe .SetPixel (3,4,1));_fe .NoError (t ,_acfe .SetPixel (0,5,1));_fe .NoError (t ,_acfe .SetPixel (0,6,1));_fe .NoError (t ,_acfe .SetPixel (0,7,1));return _acfe ;};func _agdf (_cacd *Bitmap ,_bgeea ,_adcd int ,_egdd ,_ggb int ,_ccgcg RasterOperator ){var (_aaded bool ;
_adgd bool ;_dbdfe int ;_affc int ;_efad int ;_aadaf int ;_egdc bool ;_eeedc byte ;);_adca :=8-(_bgeea &7);_cgdb :=_gdee [_adca ];_ggdf :=_cacd .RowStride *_adcd +(_bgeea >>3);if _egdd < _adca {_aaded =true ;_cgdb &=_egfga [8-_adca +_egdd ];};if !_aaded {_dbdfe =(_egdd -_adca )>>3;
if _dbdfe !=0{_adgd =true ;_affc =_ggdf +1;};};_efad =(_bgeea +_egdd )&7;if !(_aaded ||_efad ==0){_egdc =true ;_eeedc =_egfga [_efad ];_aadaf =_ggdf +1+_dbdfe ;};var _aefb ,_cfcce int ;switch _ccgcg {case PixClr :for _aefb =0;_aefb < _ggb ;_aefb ++{_cacd .Data [_ggdf ]=_eaga (_cacd .Data [_ggdf ],0x0,_cgdb );
_ggdf +=_cacd .RowStride ;};if _adgd {for _aefb =0;_aefb < _ggb ;_aefb ++{for _cfcce =0;_cfcce < _dbdfe ;_cfcce ++{_cacd .Data [_affc +_cfcce ]=0x0;};_affc +=_cacd .RowStride ;};};if _egdc {for _aefb =0;_aefb < _ggb ;_aefb ++{_cacd .Data [_aadaf ]=_eaga (_cacd .Data [_aadaf ],0x0,_eeedc );
_aadaf +=_cacd .RowStride ;};};case PixSet :for _aefb =0;_aefb < _ggb ;_aefb ++{_cacd .Data [_ggdf ]=_eaga (_cacd .Data [_ggdf ],0xff,_cgdb );_ggdf +=_cacd .RowStride ;};if _adgd {for _aefb =0;_aefb < _ggb ;_aefb ++{for _cfcce =0;_cfcce < _dbdfe ;_cfcce ++{_cacd .Data [_affc +_cfcce ]=0xff;
};_affc +=_cacd .RowStride ;};};if _egdc {for _aefb =0;_aefb < _ggb ;_aefb ++{_cacd .Data [_aadaf ]=_eaga (_cacd .Data [_aadaf ],0xff,_eeedc );_aadaf +=_cacd .RowStride ;};};case PixNotDst :for _aefb =0;_aefb < _ggb ;_aefb ++{_cacd .Data [_ggdf ]=_eaga (_cacd .Data [_ggdf ],^_cacd .Data [_ggdf ],_cgdb );
_ggdf +=_cacd .RowStride ;};if _adgd {for _aefb =0;_aefb < _ggb ;_aefb ++{for _cfcce =0;_cfcce < _dbdfe ;_cfcce ++{_cacd .Data [_affc +_cfcce ]=^(_cacd .Data [_affc +_cfcce ]);};_affc +=_cacd .RowStride ;};};if _egdc {for _aefb =0;_aefb < _ggb ;_aefb ++{_cacd .Data [_aadaf ]=_eaga (_cacd .Data [_aadaf ],^_cacd .Data [_aadaf ],_eeedc );
_aadaf +=_cacd .RowStride ;};};};};func init (){const _dbga ="\u0062\u0069\u0074\u006dap\u0073\u002e\u0069\u006e\u0069\u0074\u0069\u0061\u006c\u0069\u007a\u0061\u0074\u0069o\u006e";_dbdef =New (50,40);var _bfec error ;_dbdef ,_bfec =_dbdef .AddBorder (2,1);
if _bfec !=nil {panic (_c .Wrap (_bfec ,_dbga ,"f\u0072\u0061\u006d\u0065\u0042\u0069\u0074\u006d\u0061\u0070"));};_bgbc ,_bfec =NewWithData (50,22,_cgeb );if _bfec !=nil {panic (_c .Wrap (_bfec ,_dbga ,"i\u006d\u0061\u0067\u0065\u0042\u0069\u0074\u006d\u0061\u0070"));
};};type MorphOperation int ;const (_ SizeComparison =iota ;SizeSelectIfLT ;SizeSelectIfGT ;SizeSelectIfLTE ;SizeSelectIfGTE ;SizeSelectIfEQ ;);func (_ebbf *Bitmap )String ()string {var _ffda ="\u000a";for _bbg :=0;_bbg < _ebbf .Height ;_bbg ++{var _gfg string ;
for _bed :=0;_bed < _ebbf .Width ;_bed ++{_gdg :=_ebbf .GetPixel (_bed ,_bbg );if _gdg {_gfg +="\u0031";}else {_gfg +="\u0030";};};_ffda +=_gfg +"\u000a";};return _ffda ;};func _cege (_cddd ,_acbe byte ,_befg CombinationOperator )byte {switch _befg {case CmbOpOr :return _acbe |_cddd ;
case CmbOpAnd :return _acbe &_cddd ;case CmbOpXor :return _acbe ^_cddd ;case CmbOpXNor :return ^(_acbe ^_cddd );case CmbOpNot :return ^(_acbe );default:return _acbe ;};};const (ComponentConn Component =iota ;ComponentCharacters ;ComponentWords ;);type Point struct{X ,Y float32 ;
};type SizeComparison int ;func (_gddg *BitmapsArray )GetBox (i int )(*_ee .Rectangle ,error ){const _bcded ="\u0042\u0069\u0074\u006dap\u0073\u0041\u0072\u0072\u0061\u0079\u002e\u0047\u0065\u0074\u0042\u006f\u0078";if _gddg ==nil {return nil ,_c .Error (_bcded ,"p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074m\u0061\u0070\u0073A\u0072r\u0061\u0079\u0027");
};if i > len (_gddg .Boxes )-1{return nil ,_c .Errorf (_bcded ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _gddg .Boxes [i ],nil ;};func (_eef *Bitmap )removeBorderGeneral (_ddbc ,_cfac ,_ffbe ,_gce int )(*Bitmap ,error ){const _ece ="\u0072\u0065\u006d\u006fve\u0042\u006f\u0072\u0064\u0065\u0072\u0047\u0065\u006e\u0065\u0072\u0061\u006c";
if _ddbc < 0||_cfac < 0||_ffbe < 0||_gce < 0{return nil ,_c .Error (_ece ,"\u006e\u0065g\u0061\u0074\u0069\u0076\u0065\u0020\u0062\u0072\u006f\u0064\u0065\u0072\u0020\u0072\u0065\u006d\u006f\u0076\u0065\u0020\u0076\u0061lu\u0065\u0073");};_egaa ,_cfc :=_eef .Width ,_eef .Height ;
_aedag :=_egaa -_ddbc -_cfac ;_egb :=_cfc -_ffbe -_gce ;if _aedag <=0{return nil ,_c .Errorf (_ece ,"w\u0069\u0064\u0074\u0068: \u0025d\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u003e\u0020\u0030",_aedag );};if _egb <=0{return nil ,_c .Errorf (_ece ,"\u0068\u0065\u0069\u0067ht\u003a\u0020\u0025\u0064\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u003e \u0030",_egb );
};_ecac :=New (_aedag ,_egb );_ecac .Color =_eef .Color ;_dgd :=_ecac .RasterOperation (0,0,_aedag ,_egb ,PixSrc ,_eef ,_ddbc ,_ffbe );if _dgd !=nil {return nil ,_c .Wrap (_dgd ,_ece ,"");};return _ecac ,nil ;};var (_egfga =[]byte {0x00,0x80,0xC0,0xE0,0xF0,0xF8,0xFC,0xFE,0xFF};
_gdee =[]byte {0x00,0x01,0x03,0x07,0x0F,0x1F,0x3F,0x7F,0xFF};);func (_afcee *byWidth )Len ()int {return len (_afcee .Values )};func (_fcbb *Bitmap )nextOnPixel (_bfac ,_cabd int )(_gcgb _ee .Point ,_cgfe bool ,_daed error ){const _dgea ="n\u0065\u0078\u0074\u004f\u006e\u0050\u0069\u0078\u0065\u006c";
_gcgb ,_cgfe ,_daed =_fcbb .nextOnPixelLow (_fcbb .Width ,_fcbb .Height ,_fcbb .RowStride ,_bfac ,_cabd );if _daed !=nil {return _gcgb ,false ,_c .Wrap (_daed ,_dgea ,"");};return _gcgb ,_cgfe ,nil ;};func TstImageBitmapData ()[]byte {return _bgbc .Data };
func _fdgc (_fabef *Bitmap ,_fedeb *_e .Stack ,_ddaa ,_geafd int )(_caab *_ee .Rectangle ,_edbe error ){const _egcf ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";if _fabef ==nil {return nil ,_c .Error (_egcf ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");
};if _fedeb ==nil {return nil ,_c .Error (_egcf ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");};_bbed ,_caga :=_fabef .Width ,_fabef .Height ;_egcb :=_bbed -1;_gdgc :=_caga -1;if _ddaa < 0||_ddaa > _egcb ||_geafd < 0||_geafd > _gdgc ||!_fabef .GetPixel (_ddaa ,_geafd ){return nil ,nil ;
};var _ddege *_ee .Rectangle ;_ddege ,_edbe =Rect (100000,100000,0,0);if _edbe !=nil {return nil ,_c .Wrap (_edbe ,_egcf ,"");};if _edbe =_eecfc (_fedeb ,_ddaa ,_ddaa ,_geafd ,1,_gdgc ,_ddege );_edbe !=nil {return nil ,_c .Wrap (_edbe ,_egcf ,"\u0069\u006e\u0069t\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");
};if _edbe =_eecfc (_fedeb ,_ddaa ,_ddaa ,_geafd +1,-1,_gdgc ,_ddege );_edbe !=nil {return nil ,_c .Wrap (_edbe ,_egcf ,"\u0032\u006ed\u0020\u0069\u006ei\u0074\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};_ddege .Min .X ,_ddege .Max .X =_ddaa ,_ddaa ;
_ddege .Min .Y ,_ddege .Max .Y =_geafd ,_geafd ;var (_gcac *fillSegment ;_gfcgf int ;);for _fedeb .Len ()> 0{if _gcac ,_edbe =_dceg (_fedeb );_edbe !=nil {return nil ,_c .Wrap (_edbe ,_egcf ,"");};_geafd =_gcac ._ebdg ;for _ddaa =_gcac ._ccdc ;_ddaa >=0&&_fabef .GetPixel (_ddaa ,_geafd );
_ddaa --{if _edbe =_fabef .SetPixel (_ddaa ,_geafd ,0);_edbe !=nil {return nil ,_c .Wrap (_edbe ,_egcf ,"");};};if _ddaa >=_gcac ._ccdc {for _ddaa ++;_ddaa <=_gcac ._ggab &&_ddaa <=_egcb &&!_fabef .GetPixel (_ddaa ,_geafd );_ddaa ++{};_gfcgf =_ddaa ;if !(_ddaa <=_gcac ._ggab &&_ddaa <=_egcb ){continue ;
};}else {_gfcgf =_ddaa +1;if _gfcgf < _gcac ._ccdc -1{if _edbe =_eecfc (_fedeb ,_gfcgf ,_gcac ._ccdc -1,_gcac ._ebdg ,-_gcac ._afbcf ,_gdgc ,_ddege );_edbe !=nil {return nil ,_c .Wrap (_edbe ,_egcf ,"\u006c\u0065\u0061\u006b\u0020\u006f\u006e\u0020\u006c\u0065\u0066\u0074 \u0073\u0069\u0064\u0065");
};};_ddaa =_gcac ._ccdc +1;};for {for ;_ddaa <=_egcb &&_fabef .GetPixel (_ddaa ,_geafd );_ddaa ++{if _edbe =_fabef .SetPixel (_ddaa ,_geafd ,0);_edbe !=nil {return nil ,_c .Wrap (_edbe ,_egcf ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _edbe =_eecfc (_fedeb ,_gfcgf ,_ddaa -1,_gcac ._ebdg ,_gcac ._afbcf ,_gdgc ,_ddege );
_edbe !=nil {return nil ,_c .Wrap (_edbe ,_egcf ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _ddaa > _gcac ._ggab +1{if _edbe =_eecfc (_fedeb ,_gcac ._ggab +1,_ddaa -1,_gcac ._ebdg ,-_gcac ._afbcf ,_gdgc ,_ddege );_edbe !=nil {return nil ,_c .Wrap (_edbe ,_egcf ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};for _ddaa ++;_ddaa <=_gcac ._ggab &&_ddaa <=_egcb &&!_fabef .GetPixel (_ddaa ,_geafd );_ddaa ++{};_gfcgf =_ddaa ;if !(_ddaa <=_gcac ._ggab &&_ddaa <=_egcb ){break ;};};};_ddege .Max .X ++;_ddege .Max .Y ++;return _ddege ,nil ;};func (_fgda *ClassedPoints )XAtIndex (i int )float32 {return (*_fgda .Points )[_fgda .IntSlice [i ]].X };
func (_acd *Bitmap )nextOnPixelLow (_eagb ,_fdfd ,_agff ,_afc ,_dcee int )(_afd _ee .Point ,_fab bool ,_bca error ){const _fdbg ="B\u0069\u0074\u006d\u0061p.\u006ee\u0078\u0074\u004f\u006e\u0050i\u0078\u0065\u006c\u004c\u006f\u0077";var (_defb int ;_fcbga byte ;
);_ebbfg :=_dcee *_agff ;_gbgd :=_ebbfg +(_afc /8);if _fcbga ,_bca =_acd .GetByte (_gbgd );_bca !=nil {return _afd ,false ,_c .Wrap (_bca ,_fdbg ,"\u0078\u0053\u0074\u0061\u0072\u0074\u0020\u0061\u006e\u0064 \u0079\u0053\u0074\u0061\u0072\u0074\u0020o\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065");
};if _fcbga !=0{_eeed :=_afc -(_afc %8)+7;for _defb =_afc ;_defb <=_eeed &&_defb < _eagb ;_defb ++{if _acd .GetPixel (_defb ,_dcee ){_afd .X =_defb ;_afd .Y =_dcee ;return _afd ,true ,nil ;};};};_fcd :=(_afc /8)+1;_defb =8*_fcd ;var _bdg int ;for _gbgd =_ebbfg +_fcd ;
_defb < _eagb ;_gbgd ,_defb =_gbgd +1,_defb +8{if _fcbga ,_bca =_acd .GetByte (_gbgd );_bca !=nil {return _afd ,false ,_c .Wrap (_bca ,_fdbg ,"r\u0065\u0073\u0074\u0020of\u0020t\u0068\u0065\u0020\u006c\u0069n\u0065\u0020\u0062\u0079\u0074\u0065");};if _fcbga ==0{continue ;
};for _bdg =0;_bdg < 8&&_defb < _eagb ;_bdg ,_defb =_bdg +1,_defb +1{if _acd .GetPixel (_defb ,_dcee ){_afd .X =_defb ;_afd .Y =_dcee ;return _afd ,true ,nil ;};};};for _abae :=_dcee +1;_abae < _fdfd ;_abae ++{_ebbfg =_abae *_agff ;for _gbgd ,_defb =_ebbfg ,0;
_defb < _eagb ;_gbgd ,_defb =_gbgd +1,_defb +8{if _fcbga ,_bca =_acd .GetByte (_gbgd );_bca !=nil {return _afd ,false ,_c .Wrap (_bca ,_fdbg ,"\u0066o\u006cl\u006f\u0077\u0069\u006e\u0067\u0020\u006c\u0069\u006e\u0065\u0073");};if _fcbga ==0{continue ;
};for _bdg =0;_bdg < 8&&_defb < _eagb ;_bdg ,_defb =_bdg +1,_defb +1{if _acd .GetPixel (_defb ,_abae ){_afd .X =_defb ;_afd .Y =_abae ;return _afd ,true ,nil ;};};};};return _afd ,false ,nil ;};func (_bge *Bitmap )addPadBits ()(_cdbc error ){const _eee ="\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0061\u0064\u0064\u0050\u0061d\u0042\u0069\u0074\u0073";
_ede :=_bge .Width %8;if _ede ==0{return nil ;};_aeaf :=_bge .Width /8;_acc :=_a .NewReader (_bge .Data );_bcg :=make ([]byte ,_bge .Height *_bge .RowStride );_ffa :=_a .NewWriterMSB (_bcg );_dfgg :=make ([]byte ,_aeaf );var (_fgbd int ;_dgfbb uint64 ;
);for _fgbd =0;_fgbd < _bge .Height ;_fgbd ++{if _ ,_cdbc =_acc .Read (_dfgg );_cdbc !=nil {return _c .Wrap (_cdbc ,_eee ,"\u0066u\u006c\u006c\u0020\u0062\u0079\u0074e");};if _ ,_cdbc =_ffa .Write (_dfgg );_cdbc !=nil {return _c .Wrap (_cdbc ,_eee ,"\u0066\u0075\u006c\u006c\u0020\u0062\u0079\u0074\u0065\u0073");
};if _dgfbb ,_cdbc =_acc .ReadBits (byte (_ede ));_cdbc !=nil {return _c .Wrap (_cdbc ,_eee ,"\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0062\u0069\u0074\u0073");};if _cdbc =_ffa .WriteByte (byte (_dgfbb )<<uint (8-_ede ));_cdbc !=nil {return _c .Wrap (_cdbc ,_eee ,"\u006ca\u0073\u0074\u0020\u0062\u0079\u0074e");
};};_bge .Data =_ffa .Data ();return nil ;};func (_ebbeg *Bitmaps )GroupByHeight ()(*BitmapsArray ,error ){const _fegd ="\u0047\u0072\u006f\u0075\u0070\u0042\u0079\u0048\u0065\u0069\u0067\u0068\u0074";if len (_ebbeg .Values )==0{return nil ,_c .Error (_fegd ,"\u006eo\u0020v\u0061\u006c\u0075\u0065\u0073 \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");
};_ffdbe :=&BitmapsArray {};_ebbeg .SortByHeight ();_gcdfd :=-1;_defad :=-1;for _bcbf :=0;_bcbf < len (_ebbeg .Values );_bcbf ++{_dcgee :=_ebbeg .Values [_bcbf ].Height ;if _dcgee > _gcdfd {_gcdfd =_dcgee ;_defad ++;_ffdbe .Values =append (_ffdbe .Values ,&Bitmaps {});
};_ffdbe .Values [_defad ].AddBitmap (_ebbeg .Values [_bcbf ]);};return _ffdbe ,nil ;};func TstISymbol (t *_cd .T ,scale ...int )*Bitmap {_ccdcb ,_bbgga :=NewWithData (1,5,[]byte {0x80,0x80,0x80,0x80,0x80});_fe .NoError (t ,_bbgga );return TstGetScaledSymbol (t ,_ccdcb ,scale ...);
};func (_cfaccc *Bitmaps )GetBox (i int )(*_ee .Rectangle ,error ){const _agfe ="\u0047\u0065\u0074\u0042\u006f\u0078";if _cfaccc ==nil {return nil ,_c .Error (_agfe ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074\u006d\u0061\u0070s\u0027");
};if i > len (_cfaccc .Boxes )-1{return nil ,_c .Errorf (_agfe ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _cfaccc .Boxes [i ],nil ;};func _cb (_bef ,_faa *Bitmap ,_fdb int ,_dbe []byte ,_gdae int )(_aec error ){const _efab ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0031";
var (_gee ,_dbdf ,_ffd ,_eag ,_gdag ,_ab ,_gdd ,_dae int ;_ggc ,_daga uint32 ;_adf ,_cba byte ;_gab uint16 ;);_ceb :=make ([]byte ,4);_ebf :=make ([]byte ,4);for _ffd =0;_ffd < _bef .Height -1;_ffd ,_eag =_ffd +2,_eag +1{_gee =_ffd *_bef .RowStride ;_dbdf =_eag *_faa .RowStride ;
for _gdag ,_ab =0,0;_gdag < _gdae ;_gdag ,_ab =_gdag +4,_ab +1{for _gdd =0;_gdd < 4;_gdd ++{_dae =_gee +_gdag +_gdd ;if _dae <=len (_bef .Data )-1&&_dae < _gee +_bef .RowStride {_ceb [_gdd ]=_bef .Data [_dae ];}else {_ceb [_gdd ]=0x00;};_dae =_gee +_bef .RowStride +_gdag +_gdd ;
if _dae <=len (_bef .Data )-1&&_dae < _gee +(2*_bef .RowStride ){_ebf [_gdd ]=_bef .Data [_dae ];}else {_ebf [_gdd ]=0x00;};};_ggc =_g .BigEndian .Uint32 (_ceb );_daga =_g .BigEndian .Uint32 (_ebf );_daga |=_ggc ;_daga |=_daga <<1;_daga &=0xaaaaaaaa;_ggc =_daga |(_daga <<7);
_adf =byte (_ggc >>24);_cba =byte ((_ggc >>8)&0xff);_dae =_dbdf +_ab ;if _dae +1==len (_faa .Data )-1||_dae +1>=_dbdf +_faa .RowStride {_faa .Data [_dae ]=_dbe [_adf ];}else {_gab =(uint16 (_dbe [_adf ])<<8)|uint16 (_dbe [_cba ]);if _aec =_faa .setTwoBytes (_dae ,_gab );
_aec !=nil {return _c .Wrapf (_aec ,_efab ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_dae );};_ab ++;};};};
return nil ;};func _agc (_fgcb ,_cdea *Bitmap ,_bgfd ,_gadc int )(*Bitmap ,error ){const _aaac ="\u0063\u006c\u006f\u0073\u0065\u0053\u0061\u0066\u0065B\u0072\u0069\u0063\u006b";if _cdea ==nil {return nil ,_c .Error (_aaac ,"\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0069\u0073\u0020\u006e\u0069\u006c");
};if _bgfd < 1||_gadc < 1{return nil ,_c .Error (_aaac ,"\u0068s\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0073\u0069z\u0065\u0020\u006e\u006f\u0074\u0020\u003e\u003d\u0020\u0031");};if _bgfd ==1&&_gadc ==1{return _fcbc (_fgcb ,_cdea );};if MorphBC ==SymmetricMorphBC {_dcfe ,_cfee :=_afce (_fgcb ,_cdea ,_bgfd ,_gadc );
if _cfee !=nil {return nil ,_c .Wrap (_cfee ,_aaac ,"\u0053\u0079m\u006d\u0065\u0074r\u0069\u0063\u004d\u006f\u0072\u0070\u0068\u0042\u0043");};return _dcfe ,nil ;};_gcff :=_fbbe (_bgfd /2,_gadc /2);_faad :=8*((_gcff +7)/8);_gbbg ,_bdc :=_cdea .AddBorder (_faad ,0);
if _bdc !=nil {return nil ,_c .Wrapf (_bdc ,_aaac ,"\u0042\u006f\u0072\u0064\u0065\u0072\u0053\u0069\u007ae\u003a\u0020\u0025\u0064",_faad );};var _efca ,_ffdb *Bitmap ;if _bgfd ==1||_gadc ==1{_dfga :=SelCreateBrick (_gadc ,_bgfd ,_gadc /2,_bgfd /2,SelHit );
_efca ,_bdc =_dgce (nil ,_gbbg ,_dfga );if _bdc !=nil {return nil ,_c .Wrap (_bdc ,_aaac ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};}else {_eddd :=SelCreateBrick (1,_bgfd ,0,_bgfd /2,SelHit );
_cccb ,_ffbd :=_eddc (nil ,_gbbg ,_eddd );if _ffbd !=nil {return nil ,_c .Wrap (_ffbd ,_aaac ,"\u0072\u0065\u0067\u0075la\u0072\u0020\u002d\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0064\u0069\u006c\u0061t\u0065");};_fdeab :=SelCreateBrick (_gadc ,1,_gadc /2,0,SelHit );
_efca ,_ffbd =_eddc (nil ,_cccb ,_fdeab );if _ffbd !=nil {return nil ,_c .Wrap (_ffbd ,_aaac ,"\u0072\u0065\u0067ul\u0061\u0072\u0020\u002d\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};if _ ,_ffbd =_fgd (_cccb ,_efca ,_eddd );
_ffbd !=nil {return nil ,_c .Wrap (_ffbd ,_aaac ,"r\u0065\u0067\u0075\u006car\u0020-\u0020\u0066\u0069\u0072\u0073t\u0020\u0065\u0072\u006f\u0064\u0065");};if _ ,_ffbd =_fgd (_efca ,_cccb ,_fdeab );_ffbd !=nil {return nil ,_c .Wrap (_ffbd ,_aaac ,"\u0072\u0065\u0067\u0075la\u0072\u0020\u002d\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0065\u0072\u006fd\u0065");
};};if _ffdb ,_bdc =_efca .RemoveBorder (_faad );_bdc !=nil {return nil ,_c .Wrap (_bdc ,_aaac ,"\u0072e\u0067\u0075\u006c\u0061\u0072");};if _fgcb ==nil {return _ffdb ,nil ;};if _ ,_bdc =_fcbc (_fgcb ,_ffdb );_bdc !=nil {return nil ,_bdc ;};return _fgcb ,nil ;
};