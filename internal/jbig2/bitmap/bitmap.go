//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package bitmap ;import (_fc "encoding/binary";_c "github.com/stretchr/testify/require";_b "github.com/unidoc/unipdf/v3/common";_ga "github.com/unidoc/unipdf/v3/internal/bitwise";_e "github.com/unidoc/unipdf/v3/internal/imageutil";_cd "github.com/unidoc/unipdf/v3/internal/jbig2/basic";
_g "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_ff "image";_gd "math";_d "sort";_cb "strings";_a "testing";);func (_gadf CombinationOperator )String ()string {var _dcc string ;switch _gadf {case CmbOpOr :_dcc ="\u004f\u0052";case CmbOpAnd :_dcc ="\u0041\u004e\u0044";
case CmbOpXor :_dcc ="\u0058\u004f\u0052";case CmbOpXNor :_dcc ="\u0058\u004e\u004f\u0052";case CmbOpReplace :_dcc ="\u0052E\u0050\u004c\u0041\u0043\u0045";case CmbOpNot :_dcc ="\u004e\u004f\u0054";};return _dcc ;};func _cdf (_dfe ,_fdf int )*Bitmap {return &Bitmap {Width :_dfe ,Height :_fdf ,RowStride :(_dfe +7)>>3};
};func TstWordBitmap (t *_a .T ,scale ...int )*Bitmap {_ecdc :=1;if len (scale )> 0{_ecdc =scale [0];};_ccgc :=3;_baeec :=9+7+15+2*_ccgc ;_fgeef :=5+_ccgc +5;_ffcee :=New (_baeec *_ecdc ,_fgeef *_ecdc );_ccfbf :=&Bitmaps {};var _cced *int ;_ccgc *=_ecdc ;
_ebagd :=0;_cced =&_ebagd ;_edgb :=0;_bdge :=TstDSymbol (t ,scale ...);TstAddSymbol (t ,_ccfbf ,_bdge ,_cced ,_edgb ,1*_ecdc );_bdge =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_ccfbf ,_bdge ,_cced ,_edgb ,_ccgc );_bdge =TstISymbol (t ,scale ...);TstAddSymbol (t ,_ccfbf ,_bdge ,_cced ,_edgb ,1*_ecdc );
_bdge =TstTSymbol (t ,scale ...);TstAddSymbol (t ,_ccfbf ,_bdge ,_cced ,_edgb ,_ccgc );_bdge =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_ccfbf ,_bdge ,_cced ,_edgb ,1*_ecdc );_bdge =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_ccfbf ,_bdge ,_cced ,_edgb ,1*_ecdc );
_bdge =TstWSymbol (t ,scale ...);TstAddSymbol (t ,_ccfbf ,_bdge ,_cced ,_edgb ,0);*_cced =0;_edgb =5*_ecdc +_ccgc ;_bdge =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_ccfbf ,_bdge ,_cced ,_edgb ,1*_ecdc );_bdge =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_ccfbf ,_bdge ,_cced ,_edgb ,_ccgc );
_bdge =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_ccfbf ,_bdge ,_cced ,_edgb ,1*_ecdc );_bdge =TstESymbol (t ,scale ...);TstAddSymbol (t ,_ccfbf ,_bdge ,_cced ,_edgb ,1*_ecdc );_bdge =TstVSymbol (t ,scale ...);TstAddSymbol (t ,_ccfbf ,_bdge ,_cced ,_edgb ,1*_ecdc );
_bdge =TstESymbol (t ,scale ...);TstAddSymbol (t ,_ccfbf ,_bdge ,_cced ,_edgb ,1*_ecdc );_bdge =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_ccfbf ,_bdge ,_cced ,_edgb ,0);TstWriteSymbols (t ,_ccfbf ,_ffcee );return _ffcee ;};func _fbba (_affa *Bitmap ,_gfca ,_cbfga ,_cfce ,_badgd int ,_acbg RasterOperator ,_aaag *Bitmap ,_fgcda ,_age int )error {var (_bbbb bool ;
_abaa bool ;_acbea byte ;_ceaa int ;_ccfce int ;_cdcaa int ;_gbbe int ;_gfee bool ;_fafge int ;_cdcb int ;_egdc int ;_abfga bool ;_edbg byte ;_dfab int ;_fgce int ;_gecd int ;_efabe byte ;_cfcc int ;_adfg int ;_gcgbf uint ;_cgee uint ;_dadc byte ;_becec shift ;
_baabd bool ;_fcff bool ;_baabc ,_ggga int ;);if _fgcda &7!=0{_adfg =8-(_fgcda &7);};if _gfca &7!=0{_ccfce =8-(_gfca &7);};if _adfg ==0&&_ccfce ==0{_dadc =_gbfbd [0];}else {if _ccfce > _adfg {_gcgbf =uint (_ccfce -_adfg );}else {_gcgbf =uint (8-(_adfg -_ccfce ));
};_cgee =8-_gcgbf ;_dadc =_gbfbd [_gcgbf ];};if (_gfca &7)!=0{_bbbb =true ;_ceaa =8-(_gfca &7);_acbea =_gbfbd [_ceaa ];_cdcaa =_affa .RowStride *_cbfga +(_gfca >>3);_gbbe =_aaag .RowStride *_age +(_fgcda >>3);_cfcc =8-(_fgcda &7);if _ceaa > _cfcc {_becec =_acgf ;
if _cfce >=_adfg {_baabd =true ;};}else {_becec =_abae ;};};if _cfce < _ceaa {_abaa =true ;_acbea &=_ceaad [8-_ceaa +_cfce ];};if !_abaa {_fafge =(_cfce -_ceaa )>>3;if _fafge !=0{_gfee =true ;_cdcb =_affa .RowStride *_cbfga +((_gfca +_ccfce )>>3);_egdc =_aaag .RowStride *_age +((_fgcda +_ccfce )>>3);
};};_dfab =(_gfca +_cfce )&7;if !(_abaa ||_dfab ==0){_abfga =true ;_edbg =_ceaad [_dfab ];_fgce =_affa .RowStride *_cbfga +((_gfca +_ccfce )>>3)+_fafge ;_gecd =_aaag .RowStride *_age +((_fgcda +_ccfce )>>3)+_fafge ;if _dfab > int (_cgee ){_fcff =true ;
};};switch _acbg {case PixSrc :if _bbbb {for _baabc =0;_baabc < _badgd ;_baabc ++{if _becec ==_acgf {_efabe =_aaag .Data [_gbbe ]<<_gcgbf ;if _baabd {_efabe =_accd (_efabe ,_aaag .Data [_gbbe +1]>>_cgee ,_dadc );};}else {_efabe =_aaag .Data [_gbbe ]>>_cgee ;
};_affa .Data [_cdcaa ]=_accd (_affa .Data [_cdcaa ],_efabe ,_acbea );_cdcaa +=_affa .RowStride ;_gbbe +=_aaag .RowStride ;};};if _gfee {for _baabc =0;_baabc < _badgd ;_baabc ++{for _ggga =0;_ggga < _fafge ;_ggga ++{_efabe =_accd (_aaag .Data [_egdc +_ggga ]<<_gcgbf ,_aaag .Data [_egdc +_ggga +1]>>_cgee ,_dadc );
_affa .Data [_cdcb +_ggga ]=_efabe ;};_cdcb +=_affa .RowStride ;_egdc +=_aaag .RowStride ;};};if _abfga {for _baabc =0;_baabc < _badgd ;_baabc ++{_efabe =_aaag .Data [_gecd ]<<_gcgbf ;if _fcff {_efabe =_accd (_efabe ,_aaag .Data [_gecd +1]>>_cgee ,_dadc );
};_affa .Data [_fgce ]=_accd (_affa .Data [_fgce ],_efabe ,_edbg );_fgce +=_affa .RowStride ;_gecd +=_aaag .RowStride ;};};case PixNotSrc :if _bbbb {for _baabc =0;_baabc < _badgd ;_baabc ++{if _becec ==_acgf {_efabe =_aaag .Data [_gbbe ]<<_gcgbf ;if _baabd {_efabe =_accd (_efabe ,_aaag .Data [_gbbe +1]>>_cgee ,_dadc );
};}else {_efabe =_aaag .Data [_gbbe ]>>_cgee ;};_affa .Data [_cdcaa ]=_accd (_affa .Data [_cdcaa ],^_efabe ,_acbea );_cdcaa +=_affa .RowStride ;_gbbe +=_aaag .RowStride ;};};if _gfee {for _baabc =0;_baabc < _badgd ;_baabc ++{for _ggga =0;_ggga < _fafge ;
_ggga ++{_efabe =_accd (_aaag .Data [_egdc +_ggga ]<<_gcgbf ,_aaag .Data [_egdc +_ggga +1]>>_cgee ,_dadc );_affa .Data [_cdcb +_ggga ]=^_efabe ;};_cdcb +=_affa .RowStride ;_egdc +=_aaag .RowStride ;};};if _abfga {for _baabc =0;_baabc < _badgd ;_baabc ++{_efabe =_aaag .Data [_gecd ]<<_gcgbf ;
if _fcff {_efabe =_accd (_efabe ,_aaag .Data [_gecd +1]>>_cgee ,_dadc );};_affa .Data [_fgce ]=_accd (_affa .Data [_fgce ],^_efabe ,_edbg );_fgce +=_affa .RowStride ;_gecd +=_aaag .RowStride ;};};case PixSrcOrDst :if _bbbb {for _baabc =0;_baabc < _badgd ;
_baabc ++{if _becec ==_acgf {_efabe =_aaag .Data [_gbbe ]<<_gcgbf ;if _baabd {_efabe =_accd (_efabe ,_aaag .Data [_gbbe +1]>>_cgee ,_dadc );};}else {_efabe =_aaag .Data [_gbbe ]>>_cgee ;};_affa .Data [_cdcaa ]=_accd (_affa .Data [_cdcaa ],_efabe |_affa .Data [_cdcaa ],_acbea );
_cdcaa +=_affa .RowStride ;_gbbe +=_aaag .RowStride ;};};if _gfee {for _baabc =0;_baabc < _badgd ;_baabc ++{for _ggga =0;_ggga < _fafge ;_ggga ++{_efabe =_accd (_aaag .Data [_egdc +_ggga ]<<_gcgbf ,_aaag .Data [_egdc +_ggga +1]>>_cgee ,_dadc );_affa .Data [_cdcb +_ggga ]|=_efabe ;
};_cdcb +=_affa .RowStride ;_egdc +=_aaag .RowStride ;};};if _abfga {for _baabc =0;_baabc < _badgd ;_baabc ++{_efabe =_aaag .Data [_gecd ]<<_gcgbf ;if _fcff {_efabe =_accd (_efabe ,_aaag .Data [_gecd +1]>>_cgee ,_dadc );};_affa .Data [_fgce ]=_accd (_affa .Data [_fgce ],_efabe |_affa .Data [_fgce ],_edbg );
_fgce +=_affa .RowStride ;_gecd +=_aaag .RowStride ;};};case PixSrcAndDst :if _bbbb {for _baabc =0;_baabc < _badgd ;_baabc ++{if _becec ==_acgf {_efabe =_aaag .Data [_gbbe ]<<_gcgbf ;if _baabd {_efabe =_accd (_efabe ,_aaag .Data [_gbbe +1]>>_cgee ,_dadc );
};}else {_efabe =_aaag .Data [_gbbe ]>>_cgee ;};_affa .Data [_cdcaa ]=_accd (_affa .Data [_cdcaa ],_efabe &_affa .Data [_cdcaa ],_acbea );_cdcaa +=_affa .RowStride ;_gbbe +=_aaag .RowStride ;};};if _gfee {for _baabc =0;_baabc < _badgd ;_baabc ++{for _ggga =0;
_ggga < _fafge ;_ggga ++{_efabe =_accd (_aaag .Data [_egdc +_ggga ]<<_gcgbf ,_aaag .Data [_egdc +_ggga +1]>>_cgee ,_dadc );_affa .Data [_cdcb +_ggga ]&=_efabe ;};_cdcb +=_affa .RowStride ;_egdc +=_aaag .RowStride ;};};if _abfga {for _baabc =0;_baabc < _badgd ;
_baabc ++{_efabe =_aaag .Data [_gecd ]<<_gcgbf ;if _fcff {_efabe =_accd (_efabe ,_aaag .Data [_gecd +1]>>_cgee ,_dadc );};_affa .Data [_fgce ]=_accd (_affa .Data [_fgce ],_efabe &_affa .Data [_fgce ],_edbg );_fgce +=_affa .RowStride ;_gecd +=_aaag .RowStride ;
};};case PixSrcXorDst :if _bbbb {for _baabc =0;_baabc < _badgd ;_baabc ++{if _becec ==_acgf {_efabe =_aaag .Data [_gbbe ]<<_gcgbf ;if _baabd {_efabe =_accd (_efabe ,_aaag .Data [_gbbe +1]>>_cgee ,_dadc );};}else {_efabe =_aaag .Data [_gbbe ]>>_cgee ;};
_affa .Data [_cdcaa ]=_accd (_affa .Data [_cdcaa ],_efabe ^_affa .Data [_cdcaa ],_acbea );_cdcaa +=_affa .RowStride ;_gbbe +=_aaag .RowStride ;};};if _gfee {for _baabc =0;_baabc < _badgd ;_baabc ++{for _ggga =0;_ggga < _fafge ;_ggga ++{_efabe =_accd (_aaag .Data [_egdc +_ggga ]<<_gcgbf ,_aaag .Data [_egdc +_ggga +1]>>_cgee ,_dadc );
_affa .Data [_cdcb +_ggga ]^=_efabe ;};_cdcb +=_affa .RowStride ;_egdc +=_aaag .RowStride ;};};if _abfga {for _baabc =0;_baabc < _badgd ;_baabc ++{_efabe =_aaag .Data [_gecd ]<<_gcgbf ;if _fcff {_efabe =_accd (_efabe ,_aaag .Data [_gecd +1]>>_cgee ,_dadc );
};_affa .Data [_fgce ]=_accd (_affa .Data [_fgce ],_efabe ^_affa .Data [_fgce ],_edbg );_fgce +=_affa .RowStride ;_gecd +=_aaag .RowStride ;};};case PixNotSrcOrDst :if _bbbb {for _baabc =0;_baabc < _badgd ;_baabc ++{if _becec ==_acgf {_efabe =_aaag .Data [_gbbe ]<<_gcgbf ;
if _baabd {_efabe =_accd (_efabe ,_aaag .Data [_gbbe +1]>>_cgee ,_dadc );};}else {_efabe =_aaag .Data [_gbbe ]>>_cgee ;};_affa .Data [_cdcaa ]=_accd (_affa .Data [_cdcaa ],^_efabe |_affa .Data [_cdcaa ],_acbea );_cdcaa +=_affa .RowStride ;_gbbe +=_aaag .RowStride ;
};};if _gfee {for _baabc =0;_baabc < _badgd ;_baabc ++{for _ggga =0;_ggga < _fafge ;_ggga ++{_efabe =_accd (_aaag .Data [_egdc +_ggga ]<<_gcgbf ,_aaag .Data [_egdc +_ggga +1]>>_cgee ,_dadc );_affa .Data [_cdcb +_ggga ]|=^_efabe ;};_cdcb +=_affa .RowStride ;
_egdc +=_aaag .RowStride ;};};if _abfga {for _baabc =0;_baabc < _badgd ;_baabc ++{_efabe =_aaag .Data [_gecd ]<<_gcgbf ;if _fcff {_efabe =_accd (_efabe ,_aaag .Data [_gecd +1]>>_cgee ,_dadc );};_affa .Data [_fgce ]=_accd (_affa .Data [_fgce ],^_efabe |_affa .Data [_fgce ],_edbg );
_fgce +=_affa .RowStride ;_gecd +=_aaag .RowStride ;};};case PixNotSrcAndDst :if _bbbb {for _baabc =0;_baabc < _badgd ;_baabc ++{if _becec ==_acgf {_efabe =_aaag .Data [_gbbe ]<<_gcgbf ;if _baabd {_efabe =_accd (_efabe ,_aaag .Data [_gbbe +1]>>_cgee ,_dadc );
};}else {_efabe =_aaag .Data [_gbbe ]>>_cgee ;};_affa .Data [_cdcaa ]=_accd (_affa .Data [_cdcaa ],^_efabe &_affa .Data [_cdcaa ],_acbea );_cdcaa +=_affa .RowStride ;_gbbe +=_aaag .RowStride ;};};if _gfee {for _baabc =0;_baabc < _badgd ;_baabc ++{for _ggga =0;
_ggga < _fafge ;_ggga ++{_efabe =_accd (_aaag .Data [_egdc +_ggga ]<<_gcgbf ,_aaag .Data [_egdc +_ggga +1]>>_cgee ,_dadc );_affa .Data [_cdcb +_ggga ]&=^_efabe ;};_cdcb +=_affa .RowStride ;_egdc +=_aaag .RowStride ;};};if _abfga {for _baabc =0;_baabc < _badgd ;
_baabc ++{_efabe =_aaag .Data [_gecd ]<<_gcgbf ;if _fcff {_efabe =_accd (_efabe ,_aaag .Data [_gecd +1]>>_cgee ,_dadc );};_affa .Data [_fgce ]=_accd (_affa .Data [_fgce ],^_efabe &_affa .Data [_fgce ],_edbg );_fgce +=_affa .RowStride ;_gecd +=_aaag .RowStride ;
};};case PixSrcOrNotDst :if _bbbb {for _baabc =0;_baabc < _badgd ;_baabc ++{if _becec ==_acgf {_efabe =_aaag .Data [_gbbe ]<<_gcgbf ;if _baabd {_efabe =_accd (_efabe ,_aaag .Data [_gbbe +1]>>_cgee ,_dadc );};}else {_efabe =_aaag .Data [_gbbe ]>>_cgee ;
};_affa .Data [_cdcaa ]=_accd (_affa .Data [_cdcaa ],_efabe |^_affa .Data [_cdcaa ],_acbea );_cdcaa +=_affa .RowStride ;_gbbe +=_aaag .RowStride ;};};if _gfee {for _baabc =0;_baabc < _badgd ;_baabc ++{for _ggga =0;_ggga < _fafge ;_ggga ++{_efabe =_accd (_aaag .Data [_egdc +_ggga ]<<_gcgbf ,_aaag .Data [_egdc +_ggga +1]>>_cgee ,_dadc );
_affa .Data [_cdcb +_ggga ]=_efabe |^_affa .Data [_cdcb +_ggga ];};_cdcb +=_affa .RowStride ;_egdc +=_aaag .RowStride ;};};if _abfga {for _baabc =0;_baabc < _badgd ;_baabc ++{_efabe =_aaag .Data [_gecd ]<<_gcgbf ;if _fcff {_efabe =_accd (_efabe ,_aaag .Data [_gecd +1]>>_cgee ,_dadc );
};_affa .Data [_fgce ]=_accd (_affa .Data [_fgce ],_efabe |^_affa .Data [_fgce ],_edbg );_fgce +=_affa .RowStride ;_gecd +=_aaag .RowStride ;};};case PixSrcAndNotDst :if _bbbb {for _baabc =0;_baabc < _badgd ;_baabc ++{if _becec ==_acgf {_efabe =_aaag .Data [_gbbe ]<<_gcgbf ;
if _baabd {_efabe =_accd (_efabe ,_aaag .Data [_gbbe +1]>>_cgee ,_dadc );};}else {_efabe =_aaag .Data [_gbbe ]>>_cgee ;};_affa .Data [_cdcaa ]=_accd (_affa .Data [_cdcaa ],_efabe &^_affa .Data [_cdcaa ],_acbea );_cdcaa +=_affa .RowStride ;_gbbe +=_aaag .RowStride ;
};};if _gfee {for _baabc =0;_baabc < _badgd ;_baabc ++{for _ggga =0;_ggga < _fafge ;_ggga ++{_efabe =_accd (_aaag .Data [_egdc +_ggga ]<<_gcgbf ,_aaag .Data [_egdc +_ggga +1]>>_cgee ,_dadc );_affa .Data [_cdcb +_ggga ]=_efabe &^_affa .Data [_cdcb +_ggga ];
};_cdcb +=_affa .RowStride ;_egdc +=_aaag .RowStride ;};};if _abfga {for _baabc =0;_baabc < _badgd ;_baabc ++{_efabe =_aaag .Data [_gecd ]<<_gcgbf ;if _fcff {_efabe =_accd (_efabe ,_aaag .Data [_gecd +1]>>_cgee ,_dadc );};_affa .Data [_fgce ]=_accd (_affa .Data [_fgce ],_efabe &^_affa .Data [_fgce ],_edbg );
_fgce +=_affa .RowStride ;_gecd +=_aaag .RowStride ;};};case PixNotPixSrcOrDst :if _bbbb {for _baabc =0;_baabc < _badgd ;_baabc ++{if _becec ==_acgf {_efabe =_aaag .Data [_gbbe ]<<_gcgbf ;if _baabd {_efabe =_accd (_efabe ,_aaag .Data [_gbbe +1]>>_cgee ,_dadc );
};}else {_efabe =_aaag .Data [_gbbe ]>>_cgee ;};_affa .Data [_cdcaa ]=_accd (_affa .Data [_cdcaa ],^(_efabe |_affa .Data [_cdcaa ]),_acbea );_cdcaa +=_affa .RowStride ;_gbbe +=_aaag .RowStride ;};};if _gfee {for _baabc =0;_baabc < _badgd ;_baabc ++{for _ggga =0;
_ggga < _fafge ;_ggga ++{_efabe =_accd (_aaag .Data [_egdc +_ggga ]<<_gcgbf ,_aaag .Data [_egdc +_ggga +1]>>_cgee ,_dadc );_affa .Data [_cdcb +_ggga ]=^(_efabe |_affa .Data [_cdcb +_ggga ]);};_cdcb +=_affa .RowStride ;_egdc +=_aaag .RowStride ;};};if _abfga {for _baabc =0;
_baabc < _badgd ;_baabc ++{_efabe =_aaag .Data [_gecd ]<<_gcgbf ;if _fcff {_efabe =_accd (_efabe ,_aaag .Data [_gecd +1]>>_cgee ,_dadc );};_affa .Data [_fgce ]=_accd (_affa .Data [_fgce ],^(_efabe |_affa .Data [_fgce ]),_edbg );_fgce +=_affa .RowStride ;
_gecd +=_aaag .RowStride ;};};case PixNotPixSrcAndDst :if _bbbb {for _baabc =0;_baabc < _badgd ;_baabc ++{if _becec ==_acgf {_efabe =_aaag .Data [_gbbe ]<<_gcgbf ;if _baabd {_efabe =_accd (_efabe ,_aaag .Data [_gbbe +1]>>_cgee ,_dadc );};}else {_efabe =_aaag .Data [_gbbe ]>>_cgee ;
};_affa .Data [_cdcaa ]=_accd (_affa .Data [_cdcaa ],^(_efabe &_affa .Data [_cdcaa ]),_acbea );_cdcaa +=_affa .RowStride ;_gbbe +=_aaag .RowStride ;};};if _gfee {for _baabc =0;_baabc < _badgd ;_baabc ++{for _ggga =0;_ggga < _fafge ;_ggga ++{_efabe =_accd (_aaag .Data [_egdc +_ggga ]<<_gcgbf ,_aaag .Data [_egdc +_ggga +1]>>_cgee ,_dadc );
_affa .Data [_cdcb +_ggga ]=^(_efabe &_affa .Data [_cdcb +_ggga ]);};_cdcb +=_affa .RowStride ;_egdc +=_aaag .RowStride ;};};if _abfga {for _baabc =0;_baabc < _badgd ;_baabc ++{_efabe =_aaag .Data [_gecd ]<<_gcgbf ;if _fcff {_efabe =_accd (_efabe ,_aaag .Data [_gecd +1]>>_cgee ,_dadc );
};_affa .Data [_fgce ]=_accd (_affa .Data [_fgce ],^(_efabe &_affa .Data [_fgce ]),_edbg );_fgce +=_affa .RowStride ;_gecd +=_aaag .RowStride ;};};case PixNotPixSrcXorDst :if _bbbb {for _baabc =0;_baabc < _badgd ;_baabc ++{if _becec ==_acgf {_efabe =_aaag .Data [_gbbe ]<<_gcgbf ;
if _baabd {_efabe =_accd (_efabe ,_aaag .Data [_gbbe +1]>>_cgee ,_dadc );};}else {_efabe =_aaag .Data [_gbbe ]>>_cgee ;};_affa .Data [_cdcaa ]=_accd (_affa .Data [_cdcaa ],^(_efabe ^_affa .Data [_cdcaa ]),_acbea );_cdcaa +=_affa .RowStride ;_gbbe +=_aaag .RowStride ;
};};if _gfee {for _baabc =0;_baabc < _badgd ;_baabc ++{for _ggga =0;_ggga < _fafge ;_ggga ++{_efabe =_accd (_aaag .Data [_egdc +_ggga ]<<_gcgbf ,_aaag .Data [_egdc +_ggga +1]>>_cgee ,_dadc );_affa .Data [_cdcb +_ggga ]=^(_efabe ^_affa .Data [_cdcb +_ggga ]);
};_cdcb +=_affa .RowStride ;_egdc +=_aaag .RowStride ;};};if _abfga {for _baabc =0;_baabc < _badgd ;_baabc ++{_efabe =_aaag .Data [_gecd ]<<_gcgbf ;if _fcff {_efabe =_accd (_efabe ,_aaag .Data [_gecd +1]>>_cgee ,_dadc );};_affa .Data [_fgce ]=_accd (_affa .Data [_fgce ],^(_efabe ^_affa .Data [_fgce ]),_edbg );
_fgce +=_affa .RowStride ;_gecd +=_aaag .RowStride ;};};default:_b .Log .Debug ("\u004f\u0070e\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0074\u0020\u0070\u0065\u0072\u006d\u0069tt\u0065\u0064",_acbg );return _g .Error ("\u0072a\u0073t\u0065\u0072\u004f\u0070\u0047e\u006e\u0065r\u0061\u006c\u004c\u006f\u0077","\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065r\u0061\u0074\u0069\u006f\u006e\u0020\u006eo\u0074\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074\u0065\u0064");
};return nil ;};type LocationFilter int ;const (MopDilation MorphOperation =iota ;MopErosion ;MopOpening ;MopClosing ;MopRankBinaryReduction ;MopReplicativeBinaryExpansion ;MopAddBorder ;);func CorrelationScore (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab []int )(_eeea float64 ,_cfbe error ){const _bba ="\u0063\u006fr\u0072\u0065\u006ca\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065";
if bm1 ==nil ||bm2 ==nil {return 0,_g .Error (_bba ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0062\u0069\u0074ma\u0070\u0073");};if tab ==nil {return 0,_g .Error (_bba ,"\u0027\u0074\u0061\u0062\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};if area1 <=0||area2 <=0{return 0,_g .Error (_bba ,"\u0061\u0072\u0065\u0061s\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0067r\u0065a\u0074\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u0030");};_aaf ,_cdab :=bm1 .Width ,bm1 .Height ;_ecbe ,_cgbc :=bm2 .Width ,bm2 .Height ;
_ccgga :=_gebfc (_aaf -_ecbe );if _ccgga > maxDiffW {return 0,nil ;};_efdf :=_gebfc (_cdab -_cgbc );if _efdf > maxDiffH {return 0,nil ;};var _eeeaa ,_ceb int ;if delX >=0{_eeeaa =int (delX +0.5);}else {_eeeaa =int (delX -0.5);};if delY >=0{_ceb =int (delY +0.5);
}else {_ceb =int (delY -0.5);};_ggad :=_abfcf (_ceb ,0);_cfab :=_cddf (_cgbc +_ceb ,_cdab );_gef :=bm1 .RowStride *_ggad ;_dcae :=bm2 .RowStride *(_ggad -_ceb );_ffcg :=_abfcf (_eeeaa ,0);_edeb :=_cddf (_ecbe +_eeeaa ,_aaf );_fbfcc :=bm2 .RowStride ;var _ecdf ,_fge int ;
if _eeeaa >=8{_ecdf =_eeeaa >>3;_gef +=_ecdf ;_ffcg -=_ecdf <<3;_edeb -=_ecdf <<3;_eeeaa &=7;}else if _eeeaa <=-8{_fge =-((_eeeaa +7)>>3);_dcae +=_fge ;_fbfcc -=_fge ;_eeeaa +=_fge <<3;};if _ffcg >=_edeb ||_ggad >=_cfab {return 0,nil ;};_bfc :=(_edeb +7)>>3;
var (_begbb ,_bcaa ,_cafe byte ;_egbc ,_bdd ,_cfd int ;);switch {case _eeeaa ==0:for _cfd =_ggad ;_cfd < _cfab ;_cfd ,_gef ,_dcae =_cfd +1,_gef +bm1 .RowStride ,_dcae +bm2 .RowStride {for _bdd =0;_bdd < _bfc ;_bdd ++{_cafe =bm1 .Data [_gef +_bdd ]&bm2 .Data [_dcae +_bdd ];
_egbc +=tab [_cafe ];};};case _eeeaa > 0:if _fbfcc < _bfc {for _cfd =_ggad ;_cfd < _cfab ;_cfd ,_gef ,_dcae =_cfd +1,_gef +bm1 .RowStride ,_dcae +bm2 .RowStride {_begbb ,_bcaa =bm1 .Data [_gef ],bm2 .Data [_dcae ]>>uint (_eeeaa );_cafe =_begbb &_bcaa ;
_egbc +=tab [_cafe ];for _bdd =1;_bdd < _fbfcc ;_bdd ++{_begbb ,_bcaa =bm1 .Data [_gef +_bdd ],(bm2 .Data [_dcae +_bdd ]>>uint (_eeeaa ))|(bm2 .Data [_dcae +_bdd -1]<<uint (8-_eeeaa ));_cafe =_begbb &_bcaa ;_egbc +=tab [_cafe ];};_begbb =bm1 .Data [_gef +_bdd ];
_bcaa =bm2 .Data [_dcae +_bdd -1]<<uint (8-_eeeaa );_cafe =_begbb &_bcaa ;_egbc +=tab [_cafe ];};}else {for _cfd =_ggad ;_cfd < _cfab ;_cfd ,_gef ,_dcae =_cfd +1,_gef +bm1 .RowStride ,_dcae +bm2 .RowStride {_begbb ,_bcaa =bm1 .Data [_gef ],bm2 .Data [_dcae ]>>uint (_eeeaa );
_cafe =_begbb &_bcaa ;_egbc +=tab [_cafe ];for _bdd =1;_bdd < _bfc ;_bdd ++{_begbb =bm1 .Data [_gef +_bdd ];_bcaa =(bm2 .Data [_dcae +_bdd ]>>uint (_eeeaa ))|(bm2 .Data [_dcae +_bdd -1]<<uint (8-_eeeaa ));_cafe =_begbb &_bcaa ;_egbc +=tab [_cafe ];};};
};default:if _bfc < _fbfcc {for _cfd =_ggad ;_cfd < _cfab ;_cfd ,_gef ,_dcae =_cfd +1,_gef +bm1 .RowStride ,_dcae +bm2 .RowStride {for _bdd =0;_bdd < _bfc ;_bdd ++{_begbb =bm1 .Data [_gef +_bdd ];_bcaa =bm2 .Data [_dcae +_bdd ]<<uint (-_eeeaa );_bcaa |=bm2 .Data [_dcae +_bdd +1]>>uint (8+_eeeaa );
_cafe =_begbb &_bcaa ;_egbc +=tab [_cafe ];};};}else {for _cfd =_ggad ;_cfd < _cfab ;_cfd ,_gef ,_dcae =_cfd +1,_gef +bm1 .RowStride ,_dcae +bm2 .RowStride {for _bdd =0;_bdd < _bfc -1;_bdd ++{_begbb =bm1 .Data [_gef +_bdd ];_bcaa =bm2 .Data [_dcae +_bdd ]<<uint (-_eeeaa );
_bcaa |=bm2 .Data [_dcae +_bdd +1]>>uint (8+_eeeaa );_cafe =_begbb &_bcaa ;_egbc +=tab [_cafe ];};_begbb =bm1 .Data [_gef +_bdd ];_bcaa =bm2 .Data [_dcae +_bdd ]<<uint (-_eeeaa );_cafe =_begbb &_bcaa ;_egbc +=tab [_cafe ];};};};_eeea =float64 (_egbc )*float64 (_egbc )/(float64 (area1 )*float64 (area2 ));
return _eeea ,nil ;};type Point struct{X ,Y float32 ;};func (_abd *Bitmap )AddBorderGeneral (left ,right ,top ,bot int ,val int )(*Bitmap ,error ){return _abd .addBorderGeneral (left ,right ,top ,bot ,val );};func _gdfa (_agbc ,_ggdfa *Bitmap ,_fagb ,_ccfg int )(*Bitmap ,error ){const _aaecg ="\u0063\u006c\u006f\u0073\u0065\u0053\u0061\u0066\u0065B\u0072\u0069\u0063\u006b";
if _ggdfa ==nil {return nil ,_g .Error (_aaecg ,"\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _fagb < 1||_ccfg < 1{return nil ,_g .Error (_aaecg ,"\u0068s\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0073\u0069z\u0065\u0020\u006e\u006f\u0074\u0020\u003e\u003d\u0020\u0031");
};if _fagb ==1&&_ccfg ==1{return _cgde (_agbc ,_ggdfa );};if MorphBC ==SymmetricMorphBC {_faab ,_fgfde :=_deeg (_agbc ,_ggdfa ,_fagb ,_ccfg );if _fgfde !=nil {return nil ,_g .Wrap (_fgfde ,_aaecg ,"\u0053\u0079m\u006d\u0065\u0074r\u0069\u0063\u004d\u006f\u0072\u0070\u0068\u0042\u0043");
};return _faab ,nil ;};_fbdda :=_abfcf (_fagb /2,_ccfg /2);_bbc :=8*((_fbdda +7)/8);_ceeg ,_aeea :=_ggdfa .AddBorder (_bbc ,0);if _aeea !=nil {return nil ,_g .Wrapf (_aeea ,_aaecg ,"\u0042\u006f\u0072\u0064\u0065\u0072\u0053\u0069\u007ae\u003a\u0020\u0025\u0064",_bbc );
};var _afeagg ,_dgea *Bitmap ;if _fagb ==1||_ccfg ==1{_bgfg :=SelCreateBrick (_ccfg ,_fagb ,_ccfg /2,_fagb /2,SelHit );_afeagg ,_aeea =_gbbdb (nil ,_ceeg ,_bgfg );if _aeea !=nil {return nil ,_g .Wrap (_aeea ,_aaecg ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};}else {_cbded :=SelCreateBrick (1,_fagb ,0,_fagb /2,SelHit );_cfdb ,_aedb :=_cfcge (nil ,_ceeg ,_cbded );if _aedb !=nil {return nil ,_g .Wrap (_aedb ,_aaecg ,"\u0072\u0065\u0067\u0075la\u0072\u0020\u002d\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0064\u0069\u006c\u0061t\u0065");
};_agcb :=SelCreateBrick (_ccfg ,1,_ccfg /2,0,SelHit );_afeagg ,_aedb =_cfcge (nil ,_cfdb ,_agcb );if _aedb !=nil {return nil ,_g .Wrap (_aedb ,_aaecg ,"\u0072\u0065\u0067ul\u0061\u0072\u0020\u002d\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};if _ ,_aedb =_dgbcf (_cfdb ,_afeagg ,_cbded );_aedb !=nil {return nil ,_g .Wrap (_aedb ,_aaecg ,"r\u0065\u0067\u0075\u006car\u0020-\u0020\u0066\u0069\u0072\u0073t\u0020\u0065\u0072\u006f\u0064\u0065");};if _ ,_aedb =_dgbcf (_afeagg ,_cfdb ,_agcb );_aedb !=nil {return nil ,_g .Wrap (_aedb ,_aaecg ,"\u0072\u0065\u0067\u0075la\u0072\u0020\u002d\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0065\u0072\u006fd\u0065");
};};if _dgea ,_aeea =_afeagg .RemoveBorder (_bbc );_aeea !=nil {return nil ,_g .Wrap (_aeea ,_aaecg ,"\u0072e\u0067\u0075\u006c\u0061\u0072");};if _agbc ==nil {return _dgea ,nil ;};if _ ,_aeea =_cgde (_agbc ,_dgea );_aeea !=nil {return nil ,_aeea ;};return _agbc ,nil ;
};var _ddeb =[5]int {1,2,3,0,4};const (PixSrc RasterOperator =0xc;PixDst RasterOperator =0xa;PixNotSrc RasterOperator =0x3;PixNotDst RasterOperator =0x5;PixClr RasterOperator =0x0;PixSet RasterOperator =0xf;PixSrcOrDst RasterOperator =0xe;PixSrcAndDst RasterOperator =0x8;
PixSrcXorDst RasterOperator =0x6;PixNotSrcOrDst RasterOperator =0xb;PixNotSrcAndDst RasterOperator =0x2;PixSrcOrNotDst RasterOperator =0xd;PixSrcAndNotDst RasterOperator =0x4;PixNotPixSrcOrDst RasterOperator =0x1;PixNotPixSrcAndDst RasterOperator =0x7;
PixNotPixSrcXorDst RasterOperator =0x9;PixPaint =PixSrcOrDst ;PixSubtract =PixNotSrcAndDst ;PixMask =PixSrcAndDst ;);var (_ceaad =[]byte {0x00,0x80,0xC0,0xE0,0xF0,0xF8,0xFC,0xFE,0xFF};_gbfbd =[]byte {0x00,0x01,0x03,0x07,0x0F,0x1F,0x3F,0x7F,0xFF};);func (_baed *Points )Add (pt *Points )error {const _dcee ="\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0041\u0064\u0064";
if _baed ==nil {return _g .Error (_dcee ,"\u0070o\u0069n\u0074\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if pt ==nil {return _g .Error (_dcee ,"a\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0070\u006f\u0069\u006e\u0074\u0073\u0020\u006eo\u0074\u0020\u0064e\u0066i\u006e\u0065\u0064");
};*_baed =append (*_baed ,*pt ...);return nil ;};func (_bca *Bitmap )And (s *Bitmap )(_agb *Bitmap ,_fefc error ){const _dfb ="\u0042\u0069\u0074\u006d\u0061\u0070\u002e\u0041\u006e\u0064";if _bca ==nil {return nil ,_g .Error (_dfb ,"\u0027b\u0069t\u006d\u0061\u0070\u0020\u0027b\u0027\u0020i\u0073\u0020\u006e\u0069\u006c");
};if s ==nil {return nil ,_g .Error (_dfb ,"\u0062\u0069\u0074\u006d\u0061\u0070\u0020\u0027\u0073\u0027\u0020\u0069s\u0020\u006e\u0069\u006c");};if !_bca .SizesEqual (s ){_b .Log .Debug ("\u0025\u0073\u0020-\u0020\u0042\u0069\u0074\u006d\u0061\u0070\u0020\u0027\u0073\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0073\u0069\u007a\u0065 \u0077\u0069\u0074\u0068\u0020\u0027\u0062\u0027",_dfb );
};if _agb ,_fefc =_cgde (_agb ,_bca );_fefc !=nil {return nil ,_g .Wrap (_fefc ,_dfb ,"\u0063\u0061\u006e't\u0020\u0063\u0072\u0065\u0061\u0074\u0065\u0020\u0027\u0064\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _fefc =_agb .RasterOperation (0,0,_agb .Width ,_agb .Height ,PixSrcAndDst ,s ,0,0);
_fefc !=nil {return nil ,_g .Wrap (_fefc ,_dfb ,"");};return _agb ,nil ;};func (_dbcf *Bitmap )Equals (s *Bitmap )bool {if len (_dbcf .Data )!=len (s .Data )||_dbcf .Width !=s .Width ||_dbcf .Height !=s .Height {return false ;};for _bad :=0;_bad < _dbcf .Height ;
_bad ++{_dae :=_bad *_dbcf .RowStride ;for _eec :=0;_eec < _dbcf .RowStride ;_eec ++{if _dbcf .Data [_dae +_eec ]!=s .Data [_dae +_eec ]{return false ;};};};return true ;};func (_ffeg *byWidth )Less (i ,j int )bool {return _ffeg .Values [i ].Width < _ffeg .Values [j ].Width };
func init (){for _efdg :=0;_efdg < 256;_efdg ++{_ffa [_efdg ]=uint8 (_efdg &0x1)+(uint8 (_efdg >>1)&0x1)+(uint8 (_efdg >>2)&0x1)+(uint8 (_efdg >>3)&0x1)+(uint8 (_efdg >>4)&0x1)+(uint8 (_efdg >>5)&0x1)+(uint8 (_efdg >>6)&0x1)+(uint8 (_efdg >>7)&0x1);};};
func _fdee (_aeae *Bitmap ,_ggcb *_cd .Stack ,_gcgca ,_ecgfb ,_gaaae int )(_aded *_ff .Rectangle ,_bbgdef error ){const _dbba ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";if _aeae ==nil {return nil ,_g .Error (_dbba ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");
};if _ggcb ==nil {return nil ,_g .Error (_dbba ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");};switch _gaaae {case 4:if _aded ,_bbgdef =_dbfe (_aeae ,_ggcb ,_gcgca ,_ecgfb );_bbgdef !=nil {return nil ,_g .Wrap (_bbgdef ,_dbba ,"");
};return _aded ,nil ;case 8:if _aded ,_bbgdef =_ffad (_aeae ,_ggcb ,_gcgca ,_ecgfb );_bbgdef !=nil {return nil ,_g .Wrap (_bbgdef ,_dbba ,"");};return _aded ,nil ;default:return nil ,_g .Errorf (_dbba ,"\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u0069\u0073 \u006eo\u0074\u0020\u0034\u0020\u006f\u0072\u0020\u0038\u003a\u0020\u0027\u0025\u0064\u0027",_gaaae );
};};func (_ccfcb *Bitmap )GetByte (index int )(byte ,error ){if index > len (_ccfcb .Data )-1||index < 0{return 0,_g .Errorf ("\u0047e\u0074\u0042\u0079\u0074\u0065","\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",index );
};return _ccfcb .Data [index ],nil ;};func Blit (src *Bitmap ,dst *Bitmap ,x ,y int ,op CombinationOperator )error {var _cbdg ,_cdbe int ;_aea :=src .RowStride -1;if x < 0{_cdbe =-x ;x =0;}else if x +src .Width > dst .Width {_aea -=src .Width +x -dst .Width ;
};if y < 0{_cbdg =-y ;y =0;_cdbe +=src .RowStride ;_aea +=src .RowStride ;}else if y +src .Height > dst .Height {_cbdg =src .Height +y -dst .Height ;};var (_eac int ;_fea error ;);_cbg :=x &0x07;_adba :=8-_cbg ;_geda :=src .Width &0x07;_efdgd :=_adba -_geda ;
_ega :=_adba &0x07!=0;_caca :=src .Width <=((_aea -_cdbe )<<3)+_adba ;_affe :=dst .GetByteIndex (x ,y );_gbdd :=_cbdg +dst .Height ;if src .Height > _gbdd {_eac =_gbdd ;}else {_eac =src .Height ;};switch {case !_ega :_fea =_ccdc (src ,dst ,_cbdg ,_eac ,_affe ,_cdbe ,_aea ,op );
case _caca :_fea =_eefba (src ,dst ,_cbdg ,_eac ,_affe ,_cdbe ,_aea ,_efdgd ,_cbg ,_adba ,op );default:_fea =_gcgc (src ,dst ,_cbdg ,_eac ,_affe ,_cdbe ,_aea ,_efdgd ,_cbg ,_adba ,op ,_geda );};return _fea ;};func _fgcb (_bffdg ,_efab byte ,_aeaf CombinationOperator )byte {switch _aeaf {case CmbOpOr :return _efab |_bffdg ;
case CmbOpAnd :return _efab &_bffdg ;case CmbOpXor :return _efab ^_bffdg ;case CmbOpXNor :return ^(_efab ^_bffdg );case CmbOpNot :return ^(_efab );default:return _efab ;};};func _gdc (_ffc ,_egb *Bitmap ,_ddc int ,_cfcb []byte ,_dbc int )(_abg error ){const _acg ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0033";
var (_dgb ,_ege ,_bcb ,_bcbg ,_ggg ,_ada ,_gca ,_aba int ;_cbae ,_fed ,_bgbg ,_gec uint32 ;_dce ,_bff byte ;_cca uint16 ;);_cda :=make ([]byte ,4);_ccae :=make ([]byte ,4);for _bcb =0;_bcb < _ffc .Height -1;_bcb ,_bcbg =_bcb +2,_bcbg +1{_dgb =_bcb *_ffc .RowStride ;
_ege =_bcbg *_egb .RowStride ;for _ggg ,_ada =0,0;_ggg < _dbc ;_ggg ,_ada =_ggg +4,_ada +1{for _gca =0;_gca < 4;_gca ++{_aba =_dgb +_ggg +_gca ;if _aba <=len (_ffc .Data )-1&&_aba < _dgb +_ffc .RowStride {_cda [_gca ]=_ffc .Data [_aba ];}else {_cda [_gca ]=0x00;
};_aba =_dgb +_ffc .RowStride +_ggg +_gca ;if _aba <=len (_ffc .Data )-1&&_aba < _dgb +(2*_ffc .RowStride ){_ccae [_gca ]=_ffc .Data [_aba ];}else {_ccae [_gca ]=0x00;};};_cbae =_fc .BigEndian .Uint32 (_cda );_fed =_fc .BigEndian .Uint32 (_ccae );_bgbg =_cbae &_fed ;
_bgbg |=_bgbg <<1;_gec =_cbae |_fed ;_gec &=_gec <<1;_fed =_bgbg &_gec ;_fed &=0xaaaaaaaa;_cbae =_fed |(_fed <<7);_dce =byte (_cbae >>24);_bff =byte ((_cbae >>8)&0xff);_aba =_ege +_ada ;if _aba +1==len (_egb .Data )-1||_aba +1>=_ege +_egb .RowStride {if _abg =_egb .SetByte (_aba ,_cfcb [_dce ]);
_abg !=nil {return _g .Wrapf (_abg ,_acg ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_aba );};}else {_cca =(uint16 (_cfcb [_dce ])<<8)|uint16 (_cfcb [_bff ]);if _abg =_egb .setTwoBytes (_aba ,_cca );_abg !=nil {return _g .Wrapf (_abg ,_acg ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_aba );
};_ada ++;};};};return nil ;};func (_bfbf *Bitmap )connComponentsBB (_aecf int )(_fag *Boxes ,_ggcd error ){const _bgefd ="\u0042\u0069\u0074ma\u0070\u002e\u0063\u006f\u006e\u006e\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0042\u0042";
if _aecf !=4&&_aecf !=8{return nil ,_g .Error (_bgefd ,"\u0063\u006f\u006e\u006e\u0065\u0063t\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0027\u0034\u0027\u0020\u006fr\u0020\u0027\u0038\u0027");};if _bfbf .Zero (){return &Boxes {},nil ;
};_bfbf .setPadBits (0);_faf ,_ggcd :=_cgde (nil ,_bfbf );if _ggcd !=nil {return nil ,_g .Wrap (_ggcd ,_bgefd ,"\u0062\u006d\u0031");};_dedc :=&_cd .Stack {};_dedc .Aux =&_cd .Stack {};_fag =&Boxes {};var (_decc ,_feca int ;_bbb _ff .Point ;_gdad bool ;
_fee *_ff .Rectangle ;);for {if _bbb ,_gdad ,_ggcd =_faf .nextOnPixel (_feca ,_decc );_ggcd !=nil {return nil ,_g .Wrap (_ggcd ,_bgefd ,"");};if !_gdad {break ;};if _fee ,_ggcd =_fdee (_faf ,_dedc ,_bbb .X ,_bbb .Y ,_aecf );_ggcd !=nil {return nil ,_g .Wrap (_ggcd ,_bgefd ,"");
};if _ggcd =_fag .Add (_fee );_ggcd !=nil {return nil ,_g .Wrap (_ggcd ,_bgefd ,"");};_feca =_bbb .X ;_decc =_bbb .Y ;};return _fag ,nil ;};func _efaf ()[]int {_ebdb :=make ([]int ,256);for _bbefe :=0;_bbefe <=0xff;_bbefe ++{_gdca :=byte (_bbefe );_ebdb [_gdca ]=int (_gdca &0x1)+(int (_gdca >>1)&0x1)+(int (_gdca >>2)&0x1)+(int (_gdca >>3)&0x1)+(int (_gdca >>4)&0x1)+(int (_gdca >>5)&0x1)+(int (_gdca >>6)&0x1)+(int (_gdca >>7)&0x1);
};return _ebdb ;};func _gda (_de ,_bg *Bitmap )(_ccd error ){const _fa ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0038";_dad :=_bg .RowStride ;_daf :=_de .RowStride ;var _fcc ,_dee ,_dag ,_gaa ,_afe int ;
for _dag =0;_dag < _bg .Height ;_dag ++{_fcc =_dag *_dad ;_dee =8*_dag *_daf ;for _gaa =0;_gaa < _dad ;_gaa ++{if _ccd =_de .setEightBytes (_dee +_gaa *8,_fbbc [_bg .Data [_fcc +_gaa ]]);_ccd !=nil {return _g .Wrap (_ccd ,_fa ,"");};};for _afe =1;_afe < 8;
_afe ++{for _gaa =0;_gaa < _daf ;_gaa ++{if _ccd =_de .SetByte (_dee +_afe *_daf +_gaa ,_de .Data [_dee +_gaa ]);_ccd !=nil {return _g .Wrap (_ccd ,_fa ,"");};};};};return nil ;};func (_accgb *Bitmap )inverseData (){if _ddbb :=_accgb .RasterOperation (0,0,_accgb .Width ,_accgb .Height ,PixNotDst ,nil ,0,0);
_ddbb !=nil {_b .Log .Debug ("\u0049n\u0076\u0065\u0072\u0073e\u0020\u0064\u0061\u0074\u0061 \u0066a\u0069l\u0065\u0064\u003a\u0020\u0027\u0025\u0076'",_ddbb );};if _accgb .Color ==Chocolate {_accgb .Color =Vanilla ;}else {_accgb .Color =Chocolate ;};};
func _fggb (_fbcd ,_bfac *Bitmap ,_eada *Selection )(*Bitmap ,error ){const _fabf ="\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u004d\u006f\u0072\u0070\u0068A\u0072\u0067\u0073\u0032";var _fggd ,_ddg int ;if _bfac ==nil {return nil ,_g .Error (_fabf ,"s\u006fu\u0072\u0063\u0065\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");
};if _eada ==nil {return nil ,_g .Error (_fabf ,"\u0073e\u006c \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};_fggd =_eada .Width ;_ddg =_eada .Height ;if _fggd ==0||_ddg ==0{return nil ,_g .Error (_fabf ,"\u0073\u0065\u006c\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u0020\u0030");
};if _fbcd ==nil {return _bfac .createTemplate (),nil ;};if _acef :=_fbcd .resizeImageData (_bfac );_acef !=nil {return nil ,_acef ;};return _fbcd ,nil ;};type MorphProcess struct{Operation MorphOperation ;Arguments []int ;};func Centroids (bms []*Bitmap )(*Points ,error ){_fbde :=make ([]Point ,len (bms ));
_bagb :=_fddb ();_dfga :=_efaf ();var _dddb error ;for _cfcg ,_gbfb :=range bms {_fbde [_cfcg ],_dddb =_gbfb .centroid (_bagb ,_dfga );if _dddb !=nil {return nil ,_dddb ;};};_cdac :=Points (_fbde );return &_cdac ,nil ;};func NewWithUnpaddedData (width ,height int ,data []byte )(*Bitmap ,error ){const _ebeg ="\u004e\u0065\u0077\u0057it\u0068\u0055\u006e\u0070\u0061\u0064\u0064\u0065\u0064\u0044\u0061\u0074\u0061";
_ebbc :=_cdf (width ,height );_ebbc .Data =data ;if _cbafe :=((width *height )+7)>>3;len (data )< _cbafe {return nil ,_g .Errorf (_ebeg ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064a\u0074\u0061\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u003a\u0020\u0027\u0025\u0064\u0027\u002e\u0020\u0054\u0068\u0065\u0020\u0064\u0061t\u0061\u0020s\u0068\u006fu\u006c\u0064\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 l\u0065\u0061\u0073\u0074\u003a\u0020\u0027\u0025\u0064'\u0020\u0062\u0079\u0074\u0065\u0073",len (data ),_cbafe );
};if _fae :=_ebbc .addPadBits ();_fae !=nil {return nil ,_g .Wrap (_fae ,_ebeg ,"");};return _ebbc ,nil ;};const (CmbOpOr CombinationOperator =iota ;CmbOpAnd ;CmbOpXor ;CmbOpXNor ;CmbOpReplace ;CmbOpNot ;);func _gcad (_fdecb *Bitmap ,_edbe ,_dafe ,_fgfb ,_bged int ,_fdab RasterOperator ){if _edbe < 0{_fgfb +=_edbe ;
_edbe =0;};_cecc :=_edbe +_fgfb -_fdecb .Width ;if _cecc > 0{_fgfb -=_cecc ;};if _dafe < 0{_bged +=_dafe ;_dafe =0;};_dfac :=_dafe +_bged -_fdecb .Height ;if _dfac > 0{_bged -=_dfac ;};if _fgfb <=0||_bged <=0{return ;};if (_edbe &7)==0{_dbeca (_fdecb ,_edbe ,_dafe ,_fgfb ,_bged ,_fdab );
}else {_cgeb (_fdecb ,_edbe ,_dafe ,_fgfb ,_bged ,_fdab );};};func _fdfc (_gedd ,_aedgg *Bitmap ,_aafa ,_fadc int )(*Bitmap ,error ){const _dcfcd ="\u0065\u0072\u006f\u0064\u0065\u0042\u0072\u0069\u0063\u006b";if _aedgg ==nil {return nil ,_g .Error (_dcfcd ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _aafa < 1||_fadc < 1{return nil ,_g .Error (_dcfcd ,"\u0068\u0073\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0073\u0069\u007a\u0065\u0020\u0061\u0072e\u0020\u006e\u006f\u0074\u0020\u0067\u0072e\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006fr\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0031");
};if _aafa ==1&&_fadc ==1{_gegc ,_cafc :=_cgde (_gedd ,_aedgg );if _cafc !=nil {return nil ,_g .Wrap (_cafc ,_dcfcd ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u0026\u0026 \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _gegc ,nil ;};if _aafa ==1||_fadc ==1{_ebcf :=SelCreateBrick (_fadc ,_aafa ,_fadc /2,_aafa /2,SelHit );_efge ,_ffge :=_dgbcf (_gedd ,_aedgg ,_ebcf );if _ffge !=nil {return nil ,_g .Wrap (_ffge ,_dcfcd ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _efge ,nil ;};_cdg :=SelCreateBrick (1,_aafa ,0,_aafa /2,SelHit );_bdb :=SelCreateBrick (_fadc ,1,_fadc /2,0,SelHit );_ebdg ,_cade :=_dgbcf (nil ,_aedgg ,_cdg );if _cade !=nil {return nil ,_g .Wrap (_cade ,_dcfcd ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};_gedd ,_cade =_dgbcf (_gedd ,_ebdg ,_bdb );if _cade !=nil {return nil ,_g .Wrap (_cade ,_dcfcd ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};return _gedd ,nil ;};func CorrelationScoreSimple (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab []int )(_bcaad float64 ,_gceda error ){const _cdbg ="\u0043\u006f\u0072\u0072el\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0053\u0069\u006d\u0070l\u0065";
if bm1 ==nil ||bm2 ==nil {return _bcaad ,_g .Error (_cdbg ,"n\u0069l\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u0073 \u0070\u0072\u006f\u0076id\u0065\u0064");};if tab ==nil {return _bcaad ,_g .Error (_cdbg ,"\u0074\u0061\u0062\u0020\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if area1 ==0||area2 ==0{return _bcaad ,_g .Error (_cdbg ,"\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0061\u0072e\u0061\u0073\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u003e\u0020\u0030");};_bdea ,_cdbdd :=bm1 .Width ,bm1 .Height ;
_ggadc ,_aadd :=bm2 .Width ,bm2 .Height ;if _gebfc (_bdea -_ggadc )> maxDiffW {return 0,nil ;};if _gebfc (_cdbdd -_aadd )> maxDiffH {return 0,nil ;};var _ccaf ,_edgc int ;if delX >=0{_ccaf =int (delX +0.5);}else {_ccaf =int (delX -0.5);};if delY >=0{_edgc =int (delY +0.5);
}else {_edgc =int (delY -0.5);};_efagf :=bm1 .createTemplate ();if _gceda =_efagf .RasterOperation (_ccaf ,_edgc ,_ggadc ,_aadd ,PixSrc ,bm2 ,0,0);_gceda !=nil {return _bcaad ,_g .Wrap (_gceda ,_cdbg ,"\u0062m\u0032 \u0074\u006f\u0020\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065");
};if _gceda =_efagf .RasterOperation (0,0,_bdea ,_cdbdd ,PixSrcAndDst ,bm1 ,0,0);_gceda !=nil {return _bcaad ,_g .Wrap (_gceda ,_cdbg ,"b\u006d\u0031\u0020\u0061\u006e\u0064\u0020\u0062\u006d\u0054");};_eagb :=_efagf .countPixels ();_bcaad =float64 (_eagb )*float64 (_eagb )/(float64 (area1 )*float64 (area2 ));
return _bcaad ,nil ;};func (_bgfc Points )XSorter ()func (_fgbg ,_cgcd int )bool {return func (_ceggb ,_bbbgc int )bool {return _bgfc [_ceggb ].X < _bgfc [_bbbgc ].X };};func _cddf (_cdaed ,_abfg int )int {if _cdaed < _abfg {return _cdaed ;};return _abfg ;
};func (_dbd *Bitmap )RemoveBorder (borderSize int )(*Bitmap ,error ){if borderSize ==0{return _dbd .Copy (),nil ;};_fbg ,_cgb :=_dbd .removeBorderGeneral (borderSize ,borderSize ,borderSize ,borderSize );if _cgb !=nil {return nil ,_g .Wrap (_cgb ,"\u0052\u0065\u006do\u0076\u0065\u0042\u006f\u0072\u0064\u0065\u0072","");
};return _fbg ,nil ;};func (_fda *Bitmap )setEightPartlyBytes (_ccdf ,_eefdg int ,_cac uint64 )(_acd error ){var (_fcdb byte ;_cfea int ;);const _eggc ="\u0073\u0065\u0074\u0045ig\u0068\u0074\u0050\u0061\u0072\u0074\u006c\u0079\u0042\u0079\u0074\u0065\u0073";
for _cage :=1;_cage <=_eefdg ;_cage ++{_cfea =64-_cage *8;_fcdb =byte (_cac >>uint (_cfea )&0xff);_b .Log .Trace ("\u0074\u0065\u006d\u0070\u003a\u0020\u0025\u0030\u0038\u0062\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a %\u0064,\u0020\u0069\u0064\u0078\u003a\u0020\u0025\u0064\u002c\u0020\u0066\u0075l\u006c\u0042\u0079\u0074\u0065\u0073\u004e\u0075\u006d\u0062\u0065\u0072\u003a\u0020\u0025\u0064\u002c \u0073\u0068\u0069\u0066\u0074\u003a\u0020\u0025\u0064",_fcdb ,_ccdf ,_ccdf +_cage -1,_eefdg ,_cfea );
if _acd =_fda .SetByte (_ccdf +_cage -1,_fcdb );_acd !=nil {return _g .Wrap (_acd ,_eggc ,"\u0066\u0075\u006c\u006c\u0042\u0079\u0074\u0065");};};_begb :=_fda .RowStride *8-_fda .Width ;if _begb ==0{return nil ;};_cfea -=8;_fcdb =byte (_cac >>uint (_cfea )&0xff)<<uint (_begb );
if _acd =_fda .SetByte (_ccdf +_eefdg ,_fcdb );_acd !=nil {return _g .Wrap (_acd ,_eggc ,"\u0070\u0061\u0064\u0064\u0065\u0064");};return nil ;};func TstPSymbol (t *_a .T )*Bitmap {t .Helper ();_bcfb :=New (5,8);_c .NoError (t ,_bcfb .SetPixel (0,0,1));
_c .NoError (t ,_bcfb .SetPixel (1,0,1));_c .NoError (t ,_bcfb .SetPixel (2,0,1));_c .NoError (t ,_bcfb .SetPixel (3,0,1));_c .NoError (t ,_bcfb .SetPixel (4,1,1));_c .NoError (t ,_bcfb .SetPixel (0,1,1));_c .NoError (t ,_bcfb .SetPixel (4,2,1));_c .NoError (t ,_bcfb .SetPixel (0,2,1));
_c .NoError (t ,_bcfb .SetPixel (4,3,1));_c .NoError (t ,_bcfb .SetPixel (0,3,1));_c .NoError (t ,_bcfb .SetPixel (0,4,1));_c .NoError (t ,_bcfb .SetPixel (1,4,1));_c .NoError (t ,_bcfb .SetPixel (2,4,1));_c .NoError (t ,_bcfb .SetPixel (3,4,1));_c .NoError (t ,_bcfb .SetPixel (0,5,1));
_c .NoError (t ,_bcfb .SetPixel (0,6,1));_c .NoError (t ,_bcfb .SetPixel (0,7,1));return _bcfb ;};func HausTest (p1 ,p2 ,p3 ,p4 *Bitmap ,delX ,delY float32 ,maxDiffW ,maxDiffH int )(bool ,error ){const _efb ="\u0048\u0061\u0075\u0073\u0054\u0065\u0073\u0074";
_bbbg ,_dega :=p1 .Width ,p1 .Height ;_cggf ,_fecg :=p3 .Width ,p3 .Height ;if _cd .Abs (_bbbg -_cggf )> maxDiffW {return false ,nil ;};if _cd .Abs (_dega -_fecg )> maxDiffH {return false ,nil ;};_cegg :=int (delX +_cd .Sign (delX )*0.5);_caff :=int (delY +_cd .Sign (delY )*0.5);
var _ccgd error ;_gcdc :=p1 .CreateTemplate ();if _ccgd =_gcdc .RasterOperation (0,0,_bbbg ,_dega ,PixSrc ,p1 ,0,0);_ccgd !=nil {return false ,_g .Wrap (_ccgd ,_efb ,"p\u0031\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _ccgd =_gcdc .RasterOperation (_cegg ,_caff ,_bbbg ,_dega ,PixNotSrcAndDst ,p4 ,0,0);
_ccgd !=nil {return false ,_g .Wrap (_ccgd ,_efb ,"\u0021p\u0034\u0020\u0026\u0020\u0074");};if _gcdc .Zero (){return false ,nil ;};if _ccgd =_gcdc .RasterOperation (_cegg ,_caff ,_cggf ,_fecg ,PixSrc ,p3 ,0,0);_ccgd !=nil {return false ,_g .Wrap (_ccgd ,_efb ,"p\u0033\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");
};if _ccgd =_gcdc .RasterOperation (0,0,_cggf ,_fecg ,PixNotSrcAndDst ,p2 ,0,0);_ccgd !=nil {return false ,_g .Wrap (_ccgd ,_efb ,"\u0021p\u0032\u0020\u0026\u0020\u0074");};return _gcdc .Zero (),nil ;};func (_ddbe *Bitmap )GetVanillaData ()[]byte {if _ddbe .Color ==Chocolate {_ddbe .inverseData ();
};return _ddbe .Data ;};func (_acc *Bitmap )CreateTemplate ()*Bitmap {return _acc .createTemplate ()};func (_gaba *Bitmap )equivalent (_eabf *Bitmap )bool {if _gaba ==_eabf {return true ;};if !_gaba .SizesEqual (_eabf ){return false ;};_bbeb :=_aefa (_gaba ,_eabf ,CmbOpXor );
_gea :=_gaba .countPixels ();_cdca :=int (0.25*float32 (_gea ));if _bbeb .thresholdPixelSum (_cdca ){return false ;};var (_egc [9][9]int ;_bbgd [18][9]int ;_bbge [9][18]int ;_abf int ;_cffc int ;);_dade :=9;_ddf :=_gaba .Height /_dade ;_bec :=_gaba .Width /_dade ;
_caef ,_bea :=_ddf /2,_bec /2;if _ddf < _bec {_caef =_bec /2;_bea =_ddf /2;};_ade :=float64 (_caef )*float64 (_bea )*_gd .Pi ;_aegg :=int (float64 (_ddf *_bec /2)*0.9);_gfd :=int (float64 (_bec *_ddf /2)*0.9);for _abfb :=0;_abfb < _dade ;_abfb ++{_eefb :=_bec *_abfb +_abf ;
var _bcfa int ;if _abfb ==_dade -1{_abf =0;_bcfa =_gaba .Width ;}else {_bcfa =_eefb +_bec ;if ((_gaba .Width -_abf )%_dade )> 0{_abf ++;_bcfa ++;};};for _fbd :=0;_fbd < _dade ;_fbd ++{_gfef :=_ddf *_fbd +_cffc ;var _agcd int ;if _fbd ==_dade -1{_cffc =0;
_agcd =_gaba .Height ;}else {_agcd =_gfef +_ddf ;if (_gaba .Height -_cffc )%_dade > 0{_cffc ++;_agcd ++;};};var _efe ,_gade ,_aaec ,_fgcd int ;_dcg :=(_eefb +_bcfa )/2;_fgbb :=(_gfef +_agcd )/2;for _aegd :=_eefb ;_aegd < _bcfa ;_aegd ++{for _gaf :=_gfef ;
_gaf < _agcd ;_gaf ++{if _bbeb .GetPixel (_aegd ,_gaf ){if _aegd < _dcg {_efe ++;}else {_gade ++;};if _gaf < _fgbb {_fgcd ++;}else {_aaec ++;};};};};_egc [_abfb ][_fbd ]=_efe +_gade ;_bbgd [_abfb *2][_fbd ]=_efe ;_bbgd [_abfb *2+1][_fbd ]=_gade ;_bbge [_abfb ][_fbd *2]=_fgcd ;
_bbge [_abfb ][_fbd *2+1]=_aaec ;};};for _dadb :=0;_dadb < _dade *2-1;_dadb ++{for _gaef :=0;_gaef < (_dade -1);_gaef ++{var _dge int ;for _gebc :=0;_gebc < 2;_gebc ++{for _gdf :=0;_gdf < 2;_gdf ++{_dge +=_bbgd [_dadb +_gebc ][_gaef +_gdf ];};};if _dge > _gfd {return false ;
};};};for _cfa :=0;_cfa < (_dade -1);_cfa ++{for _ebca :=0;_ebca < ((_dade *2)-1);_ebca ++{var _acgg int ;for _ebbg :=0;_ebbg < 2;_ebbg ++{for _aga :=0;_aga < 2;_aga ++{_acgg +=_bbge [_cfa +_ebbg ][_ebca +_aga ];};};if _acgg > _aegg {return false ;};};
};for _ecgf :=0;_ecgf < (_dade -2);_ecgf ++{for _cbdb :=0;_cbdb < (_dade -2);_cbdb ++{var _agce ,_dac int ;for _dcb :=0;_dcb < 3;_dcb ++{for _acga :=0;_acga < 3;_acga ++{if _dcb ==_acga {_agce +=_egc [_ecgf +_dcb ][_cbdb +_acga ];};if (2-_dcb )==_acga {_dac +=_egc [_ecgf +_dcb ][_cbdb +_acga ];
};};};if _agce > _gfd ||_dac > _gfd {return false ;};};};for _afega :=0;_afega < (_dade -1);_afega ++{for _cdbb :=0;_cdbb < (_dade -1);_cdbb ++{var _gcfd int ;for _faea :=0;_faea < 2;_faea ++{for _fegd :=0;_fegd < 2;_fegd ++{_gcfd +=_egc [_afega +_faea ][_cdbb +_fegd ];
};};if float64 (_gcfd )> _ade {return false ;};};};return true ;};type Selection struct{Height ,Width int ;Cx ,Cy int ;Name string ;Data [][]SelectionValue ;};func _dbfe (_gage *Bitmap ,_bfea *_cd .Stack ,_aaeg ,_fgdb int )(_dgbb *_ff .Rectangle ,_edaa error ){const _degd ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";
if _gage ==nil {return nil ,_g .Error (_degd ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _bfea ==nil {return nil ,_g .Error (_degd ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");
};_baf ,_ffbb :=_gage .Width ,_gage .Height ;_fgda :=_baf -1;_gbbab :=_ffbb -1;if _aaeg < 0||_aaeg > _fgda ||_fgdb < 0||_fgdb > _gbbab ||!_gage .GetPixel (_aaeg ,_fgdb ){return nil ,nil ;};var _cgdf *_ff .Rectangle ;_cgdf ,_edaa =Rect (100000,100000,0,0);
if _edaa !=nil {return nil ,_g .Wrap (_edaa ,_degd ,"");};if _edaa =_efbg (_bfea ,_aaeg ,_aaeg ,_fgdb ,1,_gbbab ,_cgdf );_edaa !=nil {return nil ,_g .Wrap (_edaa ,_degd ,"\u0069\u006e\u0069t\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _edaa =_efbg (_bfea ,_aaeg ,_aaeg ,_fgdb +1,-1,_gbbab ,_cgdf );
_edaa !=nil {return nil ,_g .Wrap (_edaa ,_degd ,"\u0032\u006ed\u0020\u0069\u006ei\u0074\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};_cgdf .Min .X ,_cgdf .Max .X =_aaeg ,_aaeg ;_cgdf .Min .Y ,_cgdf .Max .Y =_fgdb ,_fgdb ;var (_bdgce *fillSegment ;
_cadc int ;);for _bfea .Len ()> 0{if _bdgce ,_edaa =_cdbdf (_bfea );_edaa !=nil {return nil ,_g .Wrap (_edaa ,_degd ,"");};_fgdb =_bdgce ._deab ;for _aaeg =_bdgce ._gebd ;_aaeg >=0&&_gage .GetPixel (_aaeg ,_fgdb );_aaeg --{if _edaa =_gage .SetPixel (_aaeg ,_fgdb ,0);
_edaa !=nil {return nil ,_g .Wrap (_edaa ,_degd ,"");};};if _aaeg >=_bdgce ._gebd {for _aaeg ++;_aaeg <=_bdgce ._bfbce &&_aaeg <=_fgda &&!_gage .GetPixel (_aaeg ,_fgdb );_aaeg ++{};_cadc =_aaeg ;if !(_aaeg <=_bdgce ._bfbce &&_aaeg <=_fgda ){continue ;};
}else {_cadc =_aaeg +1;if _cadc < _bdgce ._gebd -1{if _edaa =_efbg (_bfea ,_cadc ,_bdgce ._gebd -1,_bdgce ._deab ,-_bdgce ._bdeb ,_gbbab ,_cgdf );_edaa !=nil {return nil ,_g .Wrap (_edaa ,_degd ,"\u006c\u0065\u0061\u006b\u0020\u006f\u006e\u0020\u006c\u0065\u0066\u0074 \u0073\u0069\u0064\u0065");
};};_aaeg =_bdgce ._gebd +1;};for {for ;_aaeg <=_fgda &&_gage .GetPixel (_aaeg ,_fgdb );_aaeg ++{if _edaa =_gage .SetPixel (_aaeg ,_fgdb ,0);_edaa !=nil {return nil ,_g .Wrap (_edaa ,_degd ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _edaa =_efbg (_bfea ,_cadc ,_aaeg -1,_bdgce ._deab ,_bdgce ._bdeb ,_gbbab ,_cgdf );
_edaa !=nil {return nil ,_g .Wrap (_edaa ,_degd ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _aaeg > _bdgce ._bfbce +1{if _edaa =_efbg (_bfea ,_bdgce ._bfbce +1,_aaeg -1,_bdgce ._deab ,-_bdgce ._bdeb ,_gbbab ,_cgdf );_edaa !=nil {return nil ,_g .Wrap (_edaa ,_degd ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};for _aaeg ++;_aaeg <=_bdgce ._bfbce &&_aaeg <=_fgda &&!_gage .GetPixel (_aaeg ,_fgdb );_aaeg ++{};_cadc =_aaeg ;if !(_aaeg <=_bdgce ._bfbce &&_aaeg <=_fgda ){break ;};};};_cgdf .Max .X ++;_cgdf .Max .Y ++;return _cgdf ,nil ;};func Rect (x ,y ,w ,h int )(*_ff .Rectangle ,error ){const _bdc ="b\u0069\u0074\u006d\u0061\u0070\u002e\u0052\u0065\u0063\u0074";
if x < 0{w +=x ;x =0;if w <=0{return nil ,_g .Errorf (_bdc ,"x\u003a\u0027\u0025\u0064\u0027\u0020<\u0020\u0030\u0020\u0061\u006e\u0064\u0020\u0077\u003a \u0027\u0025\u0064'\u0020<\u003d\u0020\u0030",x ,w );};};if y < 0{h +=y ;y =0;if h <=0{return nil ,_g .Error (_bdc ,"\u0079\u0020\u003c 0\u0020\u0061\u006e\u0064\u0020\u0062\u006f\u0078\u0020\u006f\u0066\u0066\u0020\u002b\u0071\u0075\u0061\u0064");
};};_aedg :=_ff .Rect (x ,y ,x +w ,y +h );return &_aedg ,nil ;};func (_cbbf *ClassedPoints )GetIntYByClass (i int )(int ,error ){const _dacd ="\u0043\u006c\u0061\u0073s\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047e\u0074I\u006e\u0074\u0059\u0042\u0079\u0043\u006ca\u0073\u0073";
if i >=_cbbf .IntSlice .Size (){return 0,_g .Errorf (_dacd ,"\u0069\u003a\u0020\u0027\u0025\u0064\u0027 \u0069\u0073\u0020o\u0075\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065",i );
};return int (_cbbf .YAtIndex (i )),nil ;};func _dgbcf (_bgegg ,_gfgb *Bitmap ,_bac *Selection )(*Bitmap ,error ){const _face ="\u0065\u0072\u006fd\u0065";var (_gdac error ;_bdee *Bitmap ;);_bgegg ,_gdac =_bdeae (_bgegg ,_gfgb ,_bac ,&_bdee );if _gdac !=nil {return nil ,_g .Wrap (_gdac ,_face ,"");
};if _gdac =_bgegg .setAll ();_gdac !=nil {return nil ,_g .Wrap (_gdac ,_face ,"");};var _gcdee SelectionValue ;for _defb :=0;_defb < _bac .Height ;_defb ++{for _dege :=0;_dege < _bac .Width ;_dege ++{_gcdee =_bac .Data [_defb ][_dege ];if _gcdee ==SelHit {_gdac =_gddaa (_bgegg ,_bac .Cx -_dege ,_bac .Cy -_defb ,_gfgb .Width ,_gfgb .Height ,PixSrcAndDst ,_bdee ,0,0);
if _gdac !=nil {return nil ,_g .Wrap (_gdac ,_face ,"");};};};};if MorphBC ==SymmetricMorphBC {return _bgegg ,nil ;};_cdfe ,_cedc ,_daabg ,_gbfa :=_bac .findMaxTranslations ();if _cdfe > 0{if _gdac =_bgegg .RasterOperation (0,0,_cdfe ,_gfgb .Height ,PixClr ,nil ,0,0);
_gdac !=nil {return nil ,_g .Wrap (_gdac ,_face ,"\u0078\u0070\u0020\u003e\u0020\u0030");};};if _daabg > 0{if _gdac =_bgegg .RasterOperation (_gfgb .Width -_daabg ,0,_daabg ,_gfgb .Height ,PixClr ,nil ,0,0);_gdac !=nil {return nil ,_g .Wrap (_gdac ,_face ,"\u0078\u006e\u0020\u003e\u0020\u0030");
};};if _cedc > 0{if _gdac =_bgegg .RasterOperation (0,0,_gfgb .Width ,_cedc ,PixClr ,nil ,0,0);_gdac !=nil {return nil ,_g .Wrap (_gdac ,_face ,"\u0079\u0070\u0020\u003e\u0020\u0030");};};if _gbfa > 0{if _gdac =_bgegg .RasterOperation (0,_gfgb .Height -_gbfa ,_gfgb .Width ,_gbfa ,PixClr ,nil ,0,0);
_gdac !=nil {return nil ,_g .Wrap (_gdac ,_face ,"\u0079\u006e\u0020\u003e\u0020\u0030");};};return _bgegg ,nil ;};func _cfcge (_gccf *Bitmap ,_cbbd *Bitmap ,_aeb *Selection )(*Bitmap ,error ){var (_fbbd *Bitmap ;_gdfad error ;);_gccf ,_gdfad =_bdeae (_gccf ,_cbbd ,_aeb ,&_fbbd );
if _gdfad !=nil {return nil ,_gdfad ;};if _gdfad =_gccf .clearAll ();_gdfad !=nil {return nil ,_gdfad ;};var _gcbgd SelectionValue ;for _bbgde :=0;_bbgde < _aeb .Height ;_bbgde ++{for _babg :=0;_babg < _aeb .Width ;_babg ++{_gcbgd =_aeb .Data [_bbgde ][_babg ];
if _gcbgd ==SelHit {if _gdfad =_gccf .RasterOperation (_babg -_aeb .Cx ,_bbgde -_aeb .Cy ,_cbbd .Width ,_cbbd .Height ,PixSrcOrDst ,_fbbd ,0,0);_gdfad !=nil {return nil ,_gdfad ;};};};};return _gccf ,nil ;};var (_cdgf *Bitmap ;_debg *Bitmap ;);func _aefa (_cdcae ,_dbeg *Bitmap ,_dabd CombinationOperator )*Bitmap {_bfb :=New (_cdcae .Width ,_cdcae .Height );
for _gebcd :=0;_gebcd < len (_bfb .Data );_gebcd ++{_bfb .Data [_gebcd ]=_fgcb (_cdcae .Data [_gebcd ],_dbeg .Data [_gebcd ],_dabd );};return _bfb ;};func _fddb ()[]int {_dabdc :=make ([]int ,256);_dabdc [0]=0;_dabdc [1]=7;var _fbae int ;for _fbae =2;_fbae < 4;
_fbae ++{_dabdc [_fbae ]=_dabdc [_fbae -2]+6;};for _fbae =4;_fbae < 8;_fbae ++{_dabdc [_fbae ]=_dabdc [_fbae -4]+5;};for _fbae =8;_fbae < 16;_fbae ++{_dabdc [_fbae ]=_dabdc [_fbae -8]+4;};for _fbae =16;_fbae < 32;_fbae ++{_dabdc [_fbae ]=_dabdc [_fbae -16]+3;
};for _fbae =32;_fbae < 64;_fbae ++{_dabdc [_fbae ]=_dabdc [_fbae -32]+2;};for _fbae =64;_fbae < 128;_fbae ++{_dabdc [_fbae ]=_dabdc [_fbae -64]+1;};for _fbae =128;_fbae < 256;_fbae ++{_dabdc [_fbae ]=_dabdc [_fbae -128];};return _dabdc ;};func (_ebg *Boxes )selectWithIndicator (_cddc *_cd .NumSlice )(_gbe *Boxes ,_faba error ){const _ffb ="\u0042o\u0078\u0065\u0073\u002es\u0065\u006c\u0065\u0063\u0074W\u0069t\u0068I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";
if _ebg ==nil {return nil ,_g .Error (_ffb ,"b\u006f\u0078\u0065\u0073 '\u0062'\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064");};if _cddc ==nil {return nil ,_g .Error (_ffb ,"\u0027\u006ea\u0027\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if len (*_cddc )!=len (*_ebg ){return nil ,_g .Error (_ffb ,"\u0062\u006f\u0078\u0065\u0073\u0020\u0027\u0062\u0027\u0020\u0068\u0061\u0073\u0020\u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006e\u0074\u0020s\u0069\u007a\u0065\u0020\u0074h\u0061\u006e \u0027\u006e\u0061\u0027");
};var _ecdb ,_cdff int ;for _egff :=0;_egff < len (*_cddc );_egff ++{if _ecdb ,_faba =_cddc .GetInt (_egff );_faba !=nil {return nil ,_g .Wrap (_faba ,_ffb ,"\u0063\u0068\u0065\u0063\u006b\u0069\u006e\u0067\u0020c\u006f\u0075\u006e\u0074");};if _ecdb ==1{_cdff ++;
};};if _cdff ==len (*_ebg ){return _ebg ,nil ;};_cfed :=Boxes {};for _ccdb :=0;_ccdb < len (*_cddc );_ccdb ++{_ecdb =int ((*_cddc )[_ccdb ]);if _ecdb ==0{continue ;};_cfed =append (_cfed ,(*_ebg )[_ccdb ]);};_gbe =&_cfed ;return _gbe ,nil ;};func TstAddSymbol (t *_a .T ,bms *Bitmaps ,sym *Bitmap ,x *int ,y int ,space int ){bms .AddBitmap (sym );
_fbfg :=_ff .Rect (*x ,y ,*x +sym .Width ,y +sym .Height );bms .AddBox (&_fbfg );*x +=sym .Width +space ;};func (_ccfe MorphProcess )verify (_eegf int ,_cdffc ,_ccba *int )error {const _cfda ="\u004d\u006f\u0072\u0070hP\u0072\u006f\u0063\u0065\u0073\u0073\u002e\u0076\u0065\u0072\u0069\u0066\u0079";
switch _ccfe .Operation {case MopDilation ,MopErosion ,MopOpening ,MopClosing :if len (_ccfe .Arguments )!=2{return _g .Error (_cfda ,"\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0064\u0027\u002c\u0020\u0027\u0065\u0027\u002c \u0027\u006f\u0027\u002c\u0020\u0027\u0063\u0027\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0032\u0020\u0061r\u0067\u0075\u006d\u0065\u006et\u0073");
};_bgac ,_adfd :=_ccfe .getWidthHeight ();if _bgac <=0||_adfd <=0{return _g .Error (_cfda ,"O\u0070er\u0061t\u0069o\u006e\u003a\u0020\u0027\u0064'\u002c\u0020\u0027e\u0027\u002c\u0020\u0027\u006f'\u002c\u0020\u0027c\u0027\u0020\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0062\u006f\u0074h w\u0069\u0064\u0074\u0068\u0020\u0061n\u0064\u0020\u0068\u0065\u0069\u0067\u0068\u0074\u0020\u0074\u006f\u0020b\u0065 \u003e\u003d\u0020\u0030");
};case MopRankBinaryReduction :_gfba :=len (_ccfe .Arguments );*_cdffc +=_gfba ;if _gfba < 1||_gfba > 4{return _g .Error (_cfda ,"\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0072\u0027\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u0031\u0020\u0061\u006e\u0064\u0020\u0061\u0074\u0020\u006d\u006fs\u0074\u0020\u0034\u0020\u0061\u0072g\u0075\u006d\u0065n\u0074\u0073");
};for _gadce :=0;_gadce < _gfba ;_gadce ++{if _ccfe .Arguments [_gadce ]< 1||_ccfe .Arguments [_gadce ]> 4{return _g .Error (_cfda ,"\u0052\u0061\u006e\u006b\u0042\u0069n\u0061\u0072\u0079\u0052\u0065\u0064\u0075\u0063\u0074\u0069\u006f\u006e\u0020\u006c\u0065\u0076\u0065\u006c\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065 \u00280\u002c\u0020\u0034\u003e");
};};case MopReplicativeBinaryExpansion :if len (_ccfe .Arguments )==0{return _g .Error (_cfda ,"\u0052\u0065\u0070\u006c\u0069\u0063\u0061\u0074i\u0076\u0065\u0042in\u0061\u0072\u0079\u0045\u0078\u0070a\u006e\u0073\u0069\u006f\u006e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020o\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_gfaf :=_ccfe .Arguments [0];if _gfaf !=2&&_gfaf !=4&&_gfaf !=8{return _g .Error (_cfda ,"R\u0065\u0070\u006c\u0069\u0063\u0061\u0074\u0069\u0076\u0065\u0042\u0069\u006e\u0061\u0072\u0079\u0045\u0078\u0070\u0061\u006e\u0073\u0069\u006f\u006e\u0020m\u0075s\u0074\u0020\u0062\u0065 \u006f\u0066 \u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d");
};*_cdffc -=_ddeb [_gfaf /4];case MopAddBorder :if len (_ccfe .Arguments )==0{return _g .Error (_cfda ,"\u0041\u0064\u0064B\u006f\u0072\u0064\u0065r\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dfaf :=_ccfe .Arguments [0];if _eegf > 0{return _g .Error (_cfda ,"\u0041\u0064\u0064\u0042\u006f\u0072\u0064\u0065\u0072\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020f\u0069\u0072\u0073\u0074\u0020\u006d\u006f\u0072\u0070\u0068\u0020\u0070\u0072o\u0063\u0065\u0073\u0073");
};if _dfaf < 1{return _g .Error (_cfda ,"\u0041\u0064\u0064\u0042o\u0072\u0064\u0065\u0072\u0020\u0076\u0061\u006c\u0075\u0065 \u006co\u0077\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u0030");};*_ccba =_dfaf ;};return nil ;};type byWidth Bitmaps ;func (_gcbc *Bitmap )GetChocolateData ()[]byte {if _gcbc .Color ==Vanilla {_gcbc .inverseData ();
};return _gcbc .Data ;};const (SelDontCare SelectionValue =iota ;SelHit ;SelMiss ;);func _ccdc (_gcfdf ,_eae *Bitmap ,_ddae ,_baab ,_ccgb ,_eaaa ,_afdf int ,_cec CombinationOperator )error {var _gedb int ;_fbbeg :=func (){_gedb ++;_ccgb +=_eae .RowStride ;
_eaaa +=_gcfdf .RowStride ;_afdf +=_gcfdf .RowStride };for _gedb =_ddae ;_gedb < _baab ;_fbbeg (){_bdag :=_ccgb ;for _ebd :=_eaaa ;_ebd <=_afdf ;_ebd ++{_afeag ,_ffcf :=_eae .GetByte (_bdag );if _ffcf !=nil {return _ffcf ;};_fgaf ,_ffcf :=_gcfdf .GetByte (_ebd );
if _ffcf !=nil {return _ffcf ;};if _ffcf =_eae .SetByte (_bdag ,_fgcb (_afeag ,_fgaf ,_cec ));_ffcf !=nil {return _ffcf ;};_bdag ++;};};return nil ;};func TstImageBitmapData ()[]byte {return _debg .Data };func _abfcf (_feccc ,_debd int )int {if _feccc > _debd {return _feccc ;
};return _debd ;};func (_cbd *Bitmap )Zero ()bool {_afde :=_cbd .Width /8;_gdb :=_cbd .Width &7;var _deg byte ;if _gdb !=0{_deg =byte (0xff<<uint (8-_gdb ));};var _dcec ,_caa ,_gac int ;for _caa =0;_caa < _cbd .Height ;_caa ++{_dcec =_cbd .RowStride *_caa ;
for _gac =0;_gac < _afde ;_gac ,_dcec =_gac +1,_dcec +1{if _cbd .Data [_dcec ]!=0{return false ;};};if _gdb > 0{if _cbd .Data [_dcec ]&_deg !=0{return false ;};};};return true ;};type BoundaryCondition int ;func MorphSequence (src *Bitmap ,sequence ...MorphProcess )(*Bitmap ,error ){return _cagc (src ,sequence ...);
};type Bitmap struct{Width ,Height int ;BitmapNumber int ;RowStride int ;Data []byte ;Color Color ;Special int ;Text string ;XResolution ,YResolution int ;};type shift int ;type Component int ;func TstImageBitmap ()*Bitmap {return _debg .Copy ()};type MorphOperation int ;
func (_cgbfb *Bitmaps )ClipToBitmap (s *Bitmap )(*Bitmaps ,error ){const _dfgc ="B\u0069t\u006d\u0061\u0070\u0073\u002e\u0043\u006c\u0069p\u0054\u006f\u0042\u0069tm\u0061\u0070";if _cgbfb ==nil {return nil ,_g .Error (_dfgc ,"\u0042\u0069\u0074\u006dap\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if s ==nil {return nil ,_g .Error (_dfgc ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};_fagd :=len (_cgbfb .Values );_daac :=&Bitmaps {Values :make ([]*Bitmap ,_fagd ),Boxes :make ([]*_ff .Rectangle ,_fagd )};
var (_gafce ,_gdcgc *Bitmap ;_fage *_ff .Rectangle ;_cfbbf error ;);for _dgee :=0;_dgee < _fagd ;_dgee ++{if _gafce ,_cfbbf =_cgbfb .GetBitmap (_dgee );_cfbbf !=nil {return nil ,_g .Wrap (_cfbbf ,_dfgc ,"");};if _fage ,_cfbbf =_cgbfb .GetBox (_dgee );_cfbbf !=nil {return nil ,_g .Wrap (_cfbbf ,_dfgc ,"");
};if _gdcgc ,_cfbbf =s .clipRectangle (_fage ,nil );_cfbbf !=nil {return nil ,_g .Wrap (_cfbbf ,_dfgc ,"");};if _gdcgc ,_cfbbf =_gdcgc .And (_gafce );_cfbbf !=nil {return nil ,_g .Wrap (_cfbbf ,_dfgc ,"");};_daac .Values [_dgee ]=_gdcgc ;_daac .Boxes [_dgee ]=_fage ;
};return _daac ,nil ;};func (_bccg *Boxes )Add (box *_ff .Rectangle )error {if _bccg ==nil {return _g .Error ("\u0042o\u0078\u0065\u0073\u002e\u0041\u0064d","\u0027\u0042\u006f\u0078es\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};*_bccg =append (*_bccg ,box );return nil ;};func _dbeca (_dgdb *Bitmap ,_ggde ,_gbfd int ,_ebbcac ,_bdcf int ,_cega RasterOperator ){var (_bgede int ;_aegde byte ;_eggbc ,_cdfbb int ;_afgc int ;);_ecgb :=_ebbcac >>3;_bdbb :=_ebbcac &7;if _bdbb > 0{_aegde =_ceaad [_bdbb ];
};_bgede =_dgdb .RowStride *_gbfd +(_ggde >>3);switch _cega {case PixClr :for _eggbc =0;_eggbc < _bdcf ;_eggbc ++{_afgc =_bgede +_eggbc *_dgdb .RowStride ;for _cdfbb =0;_cdfbb < _ecgb ;_cdfbb ++{_dgdb .Data [_afgc ]=0x0;_afgc ++;};if _bdbb > 0{_dgdb .Data [_afgc ]=_accd (_dgdb .Data [_afgc ],0x0,_aegde );
};};case PixSet :for _eggbc =0;_eggbc < _bdcf ;_eggbc ++{_afgc =_bgede +_eggbc *_dgdb .RowStride ;for _cdfbb =0;_cdfbb < _ecgb ;_cdfbb ++{_dgdb .Data [_afgc ]=0xff;_afgc ++;};if _bdbb > 0{_dgdb .Data [_afgc ]=_accd (_dgdb .Data [_afgc ],0xff,_aegde );};
};case PixNotDst :for _eggbc =0;_eggbc < _bdcf ;_eggbc ++{_afgc =_bgede +_eggbc *_dgdb .RowStride ;for _cdfbb =0;_cdfbb < _ecgb ;_cdfbb ++{_dgdb .Data [_afgc ]=^_dgdb .Data [_afgc ];_afgc ++;};if _bdbb > 0{_dgdb .Data [_afgc ]=_accd (_dgdb .Data [_afgc ],^_dgdb .Data [_afgc ],_aegde );
};};};};func (_fddc *Bitmap )SetPixel (x ,y int ,pixel byte )error {_dadg :=_fddc .GetByteIndex (x ,y );if _dadg > len (_fddc .Data )-1{return _g .Errorf ("\u0053\u0065\u0074\u0050\u0069\u0078\u0065\u006c","\u0069\u006e\u0064\u0065x \u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020%\u0064",_dadg );
};_deef :=_fddc .GetBitOffset (x );_daab :=uint (7-_deef );_dgf :=_fddc .Data [_dadg ];var _aec byte ;if pixel ==1{_aec =_dgf |(pixel &0x01<<_daab );}else {_aec =_dgf &^(1<<_daab );};_fddc .Data [_dadg ]=_aec ;return nil ;};func (_gbc Points )Get (i int )(Point ,error ){if i > len (_gbc )-1{return Point {},_g .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _gbc [i ],nil ;};var MorphBC BoundaryCondition ;func (_abdd *Bitmap )nextOnPixelLow (_bgg ,_bab ,_bdff ,_caec ,_abce int )(_fga _ff .Point ,_cbf bool ,_bfad error ){const _gabe ="B\u0069\u0074\u006d\u0061p.\u006ee\u0078\u0074\u004f\u006e\u0050i\u0078\u0065\u006c\u004c\u006f\u0077";
var (_dgef int ;_decf byte ;);_aabf :=_abce *_bdff ;_gbde :=_aabf +(_caec /8);if _decf ,_bfad =_abdd .GetByte (_gbde );_bfad !=nil {return _fga ,false ,_g .Wrap (_bfad ,_gabe ,"\u0078\u0053\u0074\u0061\u0072\u0074\u0020\u0061\u006e\u0064 \u0079\u0053\u0074\u0061\u0072\u0074\u0020o\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065");
};if _decf !=0{_dfdd :=_caec -(_caec %8)+7;for _dgef =_caec ;_dgef <=_dfdd &&_dgef < _bgg ;_dgef ++{if _abdd .GetPixel (_dgef ,_abce ){_fga .X =_dgef ;_fga .Y =_abce ;return _fga ,true ,nil ;};};};_ggd :=(_caec /8)+1;_dgef =8*_ggd ;var _gead int ;for _gbde =_aabf +_ggd ;
_dgef < _bgg ;_gbde ,_dgef =_gbde +1,_dgef +8{if _decf ,_bfad =_abdd .GetByte (_gbde );_bfad !=nil {return _fga ,false ,_g .Wrap (_bfad ,_gabe ,"r\u0065\u0073\u0074\u0020of\u0020t\u0068\u0065\u0020\u006c\u0069n\u0065\u0020\u0062\u0079\u0074\u0065");};if _decf ==0{continue ;
};for _gead =0;_gead < 8&&_dgef < _bgg ;_gead ,_dgef =_gead +1,_dgef +1{if _abdd .GetPixel (_dgef ,_abce ){_fga .X =_dgef ;_fga .Y =_abce ;return _fga ,true ,nil ;};};};for _gacf :=_abce +1;_gacf < _bab ;_gacf ++{_aabf =_gacf *_bdff ;for _gbde ,_dgef =_aabf ,0;
_dgef < _bgg ;_gbde ,_dgef =_gbde +1,_dgef +8{if _decf ,_bfad =_abdd .GetByte (_gbde );_bfad !=nil {return _fga ,false ,_g .Wrap (_bfad ,_gabe ,"\u0066o\u006cl\u006f\u0077\u0069\u006e\u0067\u0020\u006c\u0069\u006e\u0065\u0073");};if _decf ==0{continue ;
};for _gead =0;_gead < 8&&_dgef < _bgg ;_gead ,_dgef =_gead +1,_dgef +1{if _abdd .GetPixel (_dgef ,_gacf ){_fga .X =_dgef ;_fga .Y =_gacf ;return _fga ,true ,nil ;};};};};return _fga ,false ,nil ;};func (_dedd *Bitmap )GetBitOffset (x int )int {return x &0x07};
func (_gacd Points )GetIntX (i int )(int ,error ){if i >=len (_gacd ){return 0,_g .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065t\u0049\u006e\u0074\u0058","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return int (_gacd [i ].X ),nil ;};func (_fagg Points )GetIntY (i int )(int ,error ){if i >=len (_fagg ){return 0,_g .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065t\u0049\u006e\u0074\u0059","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return int (_fagg [i ].Y ),nil ;};func (_befa *ClassedPoints )GroupByY ()([]*ClassedPoints ,error ){const _cdbfe ="\u0043\u006c\u0061\u0073se\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0072\u006f\u0075\u0070\u0042y\u0059";if _aebf :=_befa .validateIntSlice ();
_aebf !=nil {return nil ,_g .Wrap (_aebf ,_cdbfe ,"");};if _befa .IntSlice .Size ()==0{return nil ,_g .Error (_cdbfe ,"\u004e\u006f\u0020\u0063la\u0073\u0073\u0065\u0073\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064");};_befa .SortByY ();var (_adac []*ClassedPoints ;
_ffgf int ;);_dfec :=-1;var _afca *ClassedPoints ;for _ebbdf :=0;_ebbdf < len (_befa .IntSlice );_ebbdf ++{_ffgf =int (_befa .YAtIndex (_ebbdf ));if _ffgf !=_dfec {_afca =&ClassedPoints {Points :_befa .Points };_dfec =_ffgf ;_adac =append (_adac ,_afca );
};_afca .IntSlice =append (_afca .IntSlice ,_befa .IntSlice [_ebbdf ]);};for _ ,_dgda :=range _adac {_dgda .SortByX ();};return _adac ,nil ;};func _beee (_afb ,_faa *Bitmap ,_feg int ,_dda []byte ,_gcb int )(_eee error ){const _eea ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0031";
var (_fef ,_ecf ,_ae ,_fbe ,_ffd ,_bda ,_baa ,_edc int ;_fgfd ,_eed uint32 ;_eefd ,_bbd byte ;_cce uint16 ;);_aff :=make ([]byte ,4);_dg :=make ([]byte ,4);for _ae =0;_ae < _afb .Height -1;_ae ,_fbe =_ae +2,_fbe +1{_fef =_ae *_afb .RowStride ;_ecf =_fbe *_faa .RowStride ;
for _ffd ,_bda =0,0;_ffd < _gcb ;_ffd ,_bda =_ffd +4,_bda +1{for _baa =0;_baa < 4;_baa ++{_edc =_fef +_ffd +_baa ;if _edc <=len (_afb .Data )-1&&_edc < _fef +_afb .RowStride {_aff [_baa ]=_afb .Data [_edc ];}else {_aff [_baa ]=0x00;};_edc =_fef +_afb .RowStride +_ffd +_baa ;
if _edc <=len (_afb .Data )-1&&_edc < _fef +(2*_afb .RowStride ){_dg [_baa ]=_afb .Data [_edc ];}else {_dg [_baa ]=0x00;};};_fgfd =_fc .BigEndian .Uint32 (_aff );_eed =_fc .BigEndian .Uint32 (_dg );_eed |=_fgfd ;_eed |=_eed <<1;_eed &=0xaaaaaaaa;_fgfd =_eed |(_eed <<7);
_eefd =byte (_fgfd >>24);_bbd =byte ((_fgfd >>8)&0xff);_edc =_ecf +_bda ;if _edc +1==len (_faa .Data )-1||_edc +1>=_ecf +_faa .RowStride {_faa .Data [_edc ]=_dda [_eefd ];}else {_cce =(uint16 (_dda [_eefd ])<<8)|uint16 (_dda [_bbd ]);if _eee =_faa .setTwoBytes (_edc ,_cce );
_eee !=nil {return _g .Wrapf (_eee ,_eea ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_edc );};_bda ++;};};};
return nil ;};func (_dedad *ClassedPoints )GetIntXByClass (i int )(int ,error ){const _fcdgc ="\u0043\u006c\u0061\u0073s\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047e\u0074I\u006e\u0074\u0059\u0042\u0079\u0043\u006ca\u0073\u0073";if i >=_dedad .IntSlice .Size (){return 0,_g .Errorf (_fcdgc ,"\u0069\u003a\u0020\u0027\u0025\u0064\u0027 \u0069\u0073\u0020o\u0075\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065",i );
};return int (_dedad .XAtIndex (i )),nil ;};func _ed (_fcdd *Bitmap ,_dec ,_def int )(*Bitmap ,error ){const _gag ="e\u0078\u0070\u0061\u006edB\u0069n\u0061\u0072\u0079\u0052\u0065p\u006c\u0069\u0063\u0061\u0074\u0065";if _fcdd ==nil {return nil ,_g .Error (_gag ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _dec <=0||_def <=0{return nil ,_g .Error (_gag ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0073\u0063\u0061l\u0065\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020<\u003d\u0020\u0030");};if _dec ==_def {if _dec ==1{_eef ,_ccg :=_cgde (nil ,_fcdd );
if _ccg !=nil {return nil ,_g .Wrap (_ccg ,_gag ,"\u0078\u0046\u0061\u0063\u0074\u0020\u003d\u003d\u0020y\u0046\u0061\u0063\u0074");};return _eef ,nil ;};if _dec ==2||_dec ==4||_dec ==8{_eg ,_ede :=_fd (_fcdd ,_dec );if _ede !=nil {return nil ,_g .Wrap (_ede ,_gag ,"\u0078\u0046a\u0063\u0074\u0020i\u006e\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d");
};return _eg ,nil ;};};_bef :=_dec *_fcdd .Width ;_db :=_def *_fcdd .Height ;_cgg :=New (_bef ,_db );_ebf :=_cgg .RowStride ;var (_fgf ,_feb ,_cdcf ,_bf ,_gad int ;_eeb byte ;_cdbf error ;);for _feb =0;_feb < _fcdd .Height ;_feb ++{_fgf =_def *_feb *_ebf ;
for _cdcf =0;_cdcf < _fcdd .Width ;_cdcf ++{if _ded :=_fcdd .GetPixel (_cdcf ,_feb );_ded {_gad =_dec *_cdcf ;for _bf =0;_bf < _dec ;_bf ++{_cgg .setBit (_fgf *8+_gad +_bf );};};};for _bf =1;_bf < _def ;_bf ++{_bcf :=_fgf +_bf *_ebf ;for _fce :=0;_fce < _ebf ;
_fce ++{if _eeb ,_cdbf =_cgg .GetByte (_fgf +_fce );_cdbf !=nil {return nil ,_g .Wrapf (_cdbf ,_gag ,"\u0072\u0065\u0070\u006cic\u0061\u0074\u0069\u006e\u0067\u0020\u006c\u0069\u006e\u0065\u003a\u0020\u0027\u0025d\u0027",_bf );};if _cdbf =_cgg .SetByte (_bcf +_fce ,_eeb );
_cdbf !=nil {return nil ,_g .Wrap (_cdbf ,_gag ,"\u0053\u0065\u0074\u0074in\u0067\u0020\u0062\u0079\u0074\u0065\u0020\u0066\u0061\u0069\u006c\u0065\u0064");};};};};return _cgg ,nil ;};func (_agg *Bitmap )ClipRectangle (box *_ff .Rectangle )(_gcc *Bitmap ,_fcca *_ff .Rectangle ,_bbg error ){const _dcfd ="\u0043\u006c\u0069\u0070\u0052\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065";
if box ==nil {return nil ,nil ,_g .Error (_dcfd ,"\u0062o\u0078 \u0069\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};_fdc ,_defea :=_agg .Width ,_agg .Height ;_ccb :=_ff .Rect (0,0,_fdc ,_defea );if !box .Overlaps (_ccb ){return nil ,nil ,_g .Error (_dcfd ,"b\u006f\u0078\u0020\u0064oe\u0073n\u0027\u0074\u0020\u006f\u0076e\u0072\u006c\u0061\u0070\u0020\u0062");
};_eeed :=box .Intersect (_ccb );_bcc ,_ffe :=_eeed .Min .X ,_eeed .Min .Y ;_dde ,_beb :=_eeed .Dx (),_eeed .Dy ();_gcc =New (_dde ,_beb );_gcc .Text =_agg .Text ;if _bbg =_gcc .RasterOperation (0,0,_dde ,_beb ,PixSrc ,_agg ,_bcc ,_ffe );_bbg !=nil {return nil ,nil ,_g .Wrap (_bbg ,_dcfd ,"\u0050\u0069\u0078\u0053\u0072\u0063\u0020\u0074\u006f\u0020\u0063\u006ci\u0070\u0070\u0065\u0064");
};_fcca =&_eeed ;return _gcc ,_fcca ,nil ;};type fillSegment struct{_gebd int ;_bfbce int ;_deab int ;_bdeb int ;};func (_cea *Bitmap )setEightBytes (_fbbe int ,_aacg uint64 )error {_bffd :=_cea .RowStride -(_fbbe %_cea .RowStride );if _cea .RowStride !=_cea .Width >>3{_bffd --;
};if _bffd >=8{return _cea .setEightFullBytes (_fbbe ,_aacg );};return _cea .setEightPartlyBytes (_fbbe ,_bffd ,_aacg );};type ClassedPoints struct{*Points ;_cd .IntSlice ;_dbcd func (_fafg ,_bfacf int )bool ;};func (_bfbb *Bitmaps )AddBox (box *_ff .Rectangle ){_bfbb .Boxes =append (_bfbb .Boxes ,box )};
func _fffb (_daaa ,_ddab ,_gabeb *Bitmap )(*Bitmap ,error ){const _bcd ="\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0078\u006f\u0072";if _ddab ==nil {return nil ,_g .Error (_bcd ,"'\u0062\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _gabeb ==nil {return nil ,_g .Error (_bcd ,"'\u0062\u0032\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");
};if _daaa ==_gabeb {return nil ,_g .Error (_bcd ,"'\u0064\u0027\u0020\u003d\u003d\u0020\u0027\u0062\u0032\u0027");};if !_ddab .SizesEqual (_gabeb ){_b .Log .Debug ("\u0025s\u0020\u002d \u0042\u0069\u0074\u006da\u0070\u0020\u0027b\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074 e\u0071\u0075\u0061l\u0020\u0073i\u007a\u0065\u0020\u0077\u0069\u0074h\u0020\u0027b\u0032\u0027",_bcd );
};var _adce error ;if _daaa ,_adce =_cgde (_daaa ,_ddab );_adce !=nil {return nil ,_g .Wrap (_adce ,_bcd ,"\u0063\u0061n\u0027\u0074\u0020c\u0072\u0065\u0061\u0074\u0065\u0020\u0027\u0064\u0027");};if _adce =_daaa .RasterOperation (0,0,_daaa .Width ,_daaa .Height ,PixSrcXorDst ,_gabeb ,0,0);
_adce !=nil {return nil ,_g .Wrap (_adce ,_bcd ,"");};return _daaa ,nil ;};type SizeSelection int ;func (_agf *Bitmap )setAll ()error {_cdcad :=_gddaa (_agf ,0,0,_agf .Width ,_agf .Height ,PixSet ,nil ,0,0);if _cdcad !=nil {return _g .Wrap (_cdcad ,"\u0073\u0065\u0074\u0041\u006c\u006c","");
};return nil ;};func (_ffcea *Bitmap )setPadBits (_dgba int ){_cefg :=8-_ffcea .Width %8;if _cefg ==8{return ;};_aef :=_ffcea .Width /8;_eadb :=_gbfbd [_cefg ];if _dgba ==0{_eadb ^=_eadb ;};var _ggc int ;for _caee :=0;_caee < _ffcea .Height ;_caee ++{_ggc =_caee *_ffcea .RowStride +_aef ;
if _dgba ==0{_ffcea .Data [_ggc ]&=_eadb ;}else {_ffcea .Data [_ggc ]|=_eadb ;};};};func TstGetScaledSymbol (t *_a .T ,sm *Bitmap ,scale ...int )*Bitmap {if len (scale )==0{return sm ;};if scale [0]==1{return sm ;};_gfedg ,_eedda :=MorphSequence (sm ,MorphProcess {Operation :MopReplicativeBinaryExpansion ,Arguments :scale });
_c .NoError (t ,_eedda );return _gfedg ;};func (_aac *Bitmap )ToImage ()_ff .Image {_edb ,_fgca :=_e .NewImage (_aac .Width ,_aac .Height ,1,1,_aac .Data ,nil ,nil );if _fgca !=nil {_b .Log .Error ("\u0043\u006f\u006e\u0076\u0065\u0072\u0074\u0069\u006e\u0067\u0020j\u0062\u0069\u0067\u0032\u002e\u0042\u0069\u0074m\u0061p\u0020\u0074\u006f\u0020\u0069\u006d\u0061\u0067\u0065\u0075\u0074\u0069\u006c\u002e\u0049\u006d\u0061\u0067e\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_fgca );
};return _edb ;};func New (width ,height int )*Bitmap {_egf :=_cdf (width ,height );_egf .Data =make ([]byte ,height *_egf .RowStride );return _egf ;};func (_bfa *Bitmap )clipRectangle (_eafe ,_aae *_ff .Rectangle )(_adbd *Bitmap ,_beea error ){const _eca ="\u0063\u006c\u0069\u0070\u0052\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065";
if _eafe ==nil {return nil ,_g .Error (_eca ,"\u0070r\u006fv\u0069\u0064\u0065\u0064\u0020n\u0069\u006c \u0027\u0062\u006f\u0078\u0027");};_ead ,_fccd :=_bfa .Width ,_bfa .Height ;_gabg ,_beea :=ClipBoxToRectangle (_eafe ,_ead ,_fccd );if _beea !=nil {_b .Log .Warning ("\u0027\u0062ox\u0027\u0020\u0064o\u0065\u0073\u006e\u0027t o\u0076er\u006c\u0061\u0070\u0020\u0062\u0069\u0074ma\u0070\u0020\u0027\u0062\u0027\u003a\u0020%\u0076",_beea );
return nil ,nil ;};_cffg ,_adf :=_gabg .Min .X ,_gabg .Min .Y ;_ebbca ,_gbgb :=_gabg .Max .X -_gabg .Min .X ,_gabg .Max .Y -_gabg .Min .Y ;_adbd =New (_ebbca ,_gbgb );_adbd .Text =_bfa .Text ;if _beea =_adbd .RasterOperation (0,0,_ebbca ,_gbgb ,PixSrc ,_bfa ,_cffg ,_adf );
_beea !=nil {return nil ,_g .Wrap (_beea ,_eca ,"");};if _aae !=nil {*_aae =*_gabg ;};return _adbd ,nil ;};func (_defe *Bitmap )AddBorder (borderSize ,val int )(*Bitmap ,error ){if borderSize ==0{return _defe .Copy (),nil ;};_ffg ,_gcgd :=_defe .addBorderGeneral (borderSize ,borderSize ,borderSize ,borderSize ,val );
if _gcgd !=nil {return nil ,_g .Wrap (_gcgd ,"\u0041d\u0064\u0042\u006f\u0072\u0064\u0065r","");};return _ffg ,nil ;};func _cggb (_gbff ,_deee *Bitmap ,_dfeef ,_afaa int )(*Bitmap ,error ){const _eda ="\u006fp\u0065\u006e\u0042\u0072\u0069\u0063k";if _deee ==nil {return nil ,_g .Error (_eda ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");
};if _dfeef < 1&&_afaa < 1{return nil ,_g .Error (_eda ,"\u0068\u0053\u0069\u007ae \u003c\u0020\u0031\u0020\u0026\u0026\u0020\u0076\u0053\u0069\u007a\u0065\u0020\u003c \u0031");};if _dfeef ==1&&_afaa ==1{return _deee .Copy (),nil ;};if _dfeef ==1||_afaa ==1{var _cdef error ;
_eefce :=SelCreateBrick (_afaa ,_dfeef ,_afaa /2,_dfeef /2,SelHit );_gbff ,_cdef =_eccb (_gbff ,_deee ,_eefce );if _cdef !=nil {return nil ,_g .Wrap (_cdef ,_eda ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _gbff ,nil ;};_eafa :=SelCreateBrick (1,_dfeef ,0,_dfeef /2,SelHit );_dage :=SelCreateBrick (_afaa ,1,_afaa /2,0,SelHit );_gbge ,_dfed :=_dgbcf (nil ,_deee ,_eafa );if _dfed !=nil {return nil ,_g .Wrap (_dfed ,_eda ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};_gbff ,_dfed =_dgbcf (_gbff ,_gbge ,_dage );if _dfed !=nil {return nil ,_g .Wrap (_dfed ,_eda ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};_ ,_dfed =_cfcge (_gbge ,_gbff ,_eafa );if _dfed !=nil {return nil ,_g .Wrap (_dfed ,_eda ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};_ ,_dfed =_cfcge (_gbff ,_gbge ,_dage );if _dfed !=nil {return nil ,_g .Wrap (_dfed ,_eda ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};return _gbff ,nil ;};func (_ccagc *Bitmap )ConnComponents (bms *Bitmaps ,connectivity int )(_gaee *Boxes ,_eefg error ){const _bcdd ="B\u0069\u0074\u006d\u0061p.\u0043o\u006e\u006e\u0043\u006f\u006dp\u006f\u006e\u0065\u006e\u0074\u0073";
if _ccagc ==nil {return nil ,_g .Error (_bcdd ,"\u0070r\u006f\u0076\u0069\u0064e\u0064\u0020\u0065\u006d\u0070t\u0079 \u0027b\u0027\u0020\u0062\u0069\u0074\u006d\u0061p");};if connectivity !=4&&connectivity !=8{return nil ,_g .Error (_bcdd ,"\u0063\u006f\u006ene\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u006e\u006f\u0074\u0020\u0034\u0020\u006f\u0072\u0020\u0038");
};if bms ==nil {if _gaee ,_eefg =_ccagc .connComponentsBB (connectivity );_eefg !=nil {return nil ,_g .Wrap (_eefg ,_bcdd ,"");};}else {if _gaee ,_eefg =_ccagc .connComponentsBitmapsBB (bms ,connectivity );_eefg !=nil {return nil ,_g .Wrap (_eefg ,_bcdd ,"");
};};return _gaee ,nil ;};func TstESymbol (t *_a .T ,scale ...int )*Bitmap {_gdcf ,_befcg :=NewWithData (4,5,[]byte {0xF0,0x80,0xE0,0x80,0xF0});_c .NoError (t ,_befcg );return TstGetScaledSymbol (t ,_gdcf ,scale ...);};func _bdeae (_cfabb *Bitmap ,_add *Bitmap ,_febeg *Selection ,_ggb **Bitmap )(*Bitmap ,error ){const _ffff ="\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u004d\u006f\u0072\u0070\u0068A\u0072\u0067\u0073\u0031";
if _add ==nil {return nil ,_g .Error (_ffff ,"\u004d\u006f\u0072\u0070\u0068\u0041\u0072\u0067\u0073\u0031\u0020'\u0073\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066i\u006e\u0065\u0064");};if _febeg ==nil {return nil ,_g .Error (_ffff ,"\u004d\u006f\u0072\u0068p\u0041\u0072\u0067\u0073\u0031\u0020\u0027\u0073\u0065\u006c'\u0020n\u006f\u0074\u0020\u0064\u0065\u0066\u0069n\u0065\u0064");
};_acbae ,_afdc :=_febeg .Height ,_febeg .Width ;if _acbae ==0||_afdc ==0{return nil ,_g .Error (_ffff ,"\u0073\u0065\u006c\u0065ct\u0069\u006f\u006e\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u0020\u0030");};if _cfabb ==nil {_cfabb =_add .createTemplate ();
*_ggb =_add ;return _cfabb ,nil ;};_cfabb .Width =_add .Width ;_cfabb .Height =_add .Height ;_cfabb .RowStride =_add .RowStride ;_cfabb .Color =_add .Color ;_cfabb .Data =make ([]byte ,_add .RowStride *_add .Height );if _cfabb ==_add {*_ggb =_add .Copy ();
}else {*_ggb =_add ;};return _cfabb ,nil ;};func (_deda Points )Size ()int {return len (_deda )};func _ce (_ced ,_fcdg *Bitmap ,_ea int ,_bgb []byte ,_gcef int )(_eff error ){const _ecd ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0032";
var (_fde ,_gfa ,_eaf ,_cgd ,_ddb ,_fdd ,_bdad ,_bae int ;_gcg ,_cba ,_dbfa ,_fac uint32 ;_cff ,_adc byte ;_gadd uint16 ;);_bde :=make ([]byte ,4);_bdef :=make ([]byte ,4);for _eaf =0;_eaf < _ced .Height -1;_eaf ,_cgd =_eaf +2,_cgd +1{_fde =_eaf *_ced .RowStride ;
_gfa =_cgd *_fcdg .RowStride ;for _ddb ,_fdd =0,0;_ddb < _gcef ;_ddb ,_fdd =_ddb +4,_fdd +1{for _bdad =0;_bdad < 4;_bdad ++{_bae =_fde +_ddb +_bdad ;if _bae <=len (_ced .Data )-1&&_bae < _fde +_ced .RowStride {_bde [_bdad ]=_ced .Data [_bae ];}else {_bde [_bdad ]=0x00;
};_bae =_fde +_ced .RowStride +_ddb +_bdad ;if _bae <=len (_ced .Data )-1&&_bae < _fde +(2*_ced .RowStride ){_bdef [_bdad ]=_ced .Data [_bae ];}else {_bdef [_bdad ]=0x00;};};_gcg =_fc .BigEndian .Uint32 (_bde );_cba =_fc .BigEndian .Uint32 (_bdef );_dbfa =_gcg &_cba ;
_dbfa |=_dbfa <<1;_fac =_gcg |_cba ;_fac &=_fac <<1;_cba =_dbfa |_fac ;_cba &=0xaaaaaaaa;_gcg =_cba |(_cba <<7);_cff =byte (_gcg >>24);_adc =byte ((_gcg >>8)&0xff);_bae =_gfa +_fdd ;if _bae +1==len (_fcdg .Data )-1||_bae +1>=_gfa +_fcdg .RowStride {if _eff =_fcdg .SetByte (_bae ,_bgb [_cff ]);
_eff !=nil {return _g .Wrapf (_eff ,_ecd ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_bae );};}else {_gadd =(uint16 (_bgb [_cff ])<<8)|uint16 (_bgb [_adc ]);if _eff =_fcdg .setTwoBytes (_bae ,_gadd );_eff !=nil {return _g .Wrapf (_eff ,_ecd ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_bae );
};_fdd ++;};};};return nil ;};func (_bed *Bitmap )removeBorderGeneral (_cdd ,_dbe ,_dfc ,_fbge int )(*Bitmap ,error ){const _bgdb ="\u0072\u0065\u006d\u006fve\u0042\u006f\u0072\u0064\u0065\u0072\u0047\u0065\u006e\u0065\u0072\u0061\u006c";if _cdd < 0||_dbe < 0||_dfc < 0||_fbge < 0{return nil ,_g .Error (_bgdb ,"\u006e\u0065g\u0061\u0074\u0069\u0076\u0065\u0020\u0062\u0072\u006f\u0064\u0065\u0072\u0020\u0072\u0065\u006d\u006f\u0076\u0065\u0020\u0076\u0061lu\u0065\u0073");
};_dgbc ,_fecc :=_bed .Width ,_bed .Height ;_efaa :=_dgbc -_cdd -_dbe ;_afc :=_fecc -_dfc -_fbge ;if _efaa <=0{return nil ,_g .Errorf (_bgdb ,"w\u0069\u0064\u0074\u0068: \u0025d\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u003e\u0020\u0030",_efaa );
};if _afc <=0{return nil ,_g .Errorf (_bgdb ,"\u0068\u0065\u0069\u0067ht\u003a\u0020\u0025\u0064\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u003e \u0030",_afc );};_gffc :=New (_efaa ,_afc );_gffc .Color =_bed .Color ;_edfa :=_gffc .RasterOperation (0,0,_efaa ,_afc ,PixSrc ,_bed ,_cdd ,_dfc );
if _edfa !=nil {return nil ,_g .Wrap (_edfa ,_bgdb ,"");};return _gffc ,nil ;};func _gbbdb (_gaaa ,_dbde *Bitmap ,_fgff *Selection )(*Bitmap ,error ){const _dbcfb ="c\u006c\u006f\u0073\u0065\u0042\u0069\u0074\u006d\u0061\u0070";var _aadc error ;if _gaaa ,_aadc =_fggb (_gaaa ,_dbde ,_fgff );
_aadc !=nil {return nil ,_aadc ;};_ebagc ,_aadc :=_cfcge (nil ,_dbde ,_fgff );if _aadc !=nil {return nil ,_g .Wrap (_aadc ,_dbcfb ,"");};if _ ,_aadc =_dgbcf (_gaaa ,_ebagc ,_fgff );_aadc !=nil {return nil ,_g .Wrap (_aadc ,_dbcfb ,"");};return _gaaa ,nil ;
};func _bacc (_ddce ...MorphProcess )(_egd error ){const _befce ="v\u0065r\u0069\u0066\u0079\u004d\u006f\u0072\u0070\u0068P\u0072\u006f\u0063\u0065ss\u0065\u0073";var _abeg ,_abgdd int ;for _fgee ,_ggdg :=range _ddce {if _egd =_ggdg .verify (_fgee ,&_abeg ,&_abgdd );
_egd !=nil {return _g .Wrap (_egd ,_befce ,"");};};if _abgdd !=0&&_abeg !=0{return _g .Error (_befce ,"\u004d\u006f\u0072\u0070\u0068\u0020\u0073\u0065\u0071\u0075\u0065n\u0063\u0065\u0020\u002d\u0020\u0062\u006f\u0072d\u0065r\u0020\u0061\u0064\u0064\u0065\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u0065\u0074\u0020\u0072\u0065\u0064u\u0063\u0074\u0069\u006f\u006e\u0020\u006e\u006f\u0074\u0020\u0030");
};return nil ;};func RankHausTest (p1 ,p2 ,p3 ,p4 *Bitmap ,delX ,delY float32 ,maxDiffW ,maxDiffH ,area1 ,area3 int ,rank float32 ,tab8 []int )(_egeg bool ,_dcda error ){const _gedaa ="\u0052\u0061\u006ek\u0048\u0061\u0075\u0073\u0054\u0065\u0073\u0074";
_cfbb ,_ddfb :=p1 .Width ,p1 .Height ;_gge ,_gdeb :=p3 .Width ,p3 .Height ;if _cd .Abs (_cfbb -_gge )> maxDiffW {return false ,nil ;};if _cd .Abs (_ddfb -_gdeb )> maxDiffH {return false ,nil ;};_deff :=int (float32 (area1 )*(1.0-rank )+0.5);_gdea :=int (float32 (area3 )*(1.0-rank )+0.5);
var _eedd ,_dcbd int ;if delX >=0{_eedd =int (delX +0.5);}else {_eedd =int (delX -0.5);};if delY >=0{_dcbd =int (delY +0.5);}else {_dcbd =int (delY -0.5);};_dgbd :=p1 .CreateTemplate ();if _dcda =_dgbd .RasterOperation (0,0,_cfbb ,_ddfb ,PixSrc ,p1 ,0,0);
_dcda !=nil {return false ,_g .Wrap (_dcda ,_gedaa ,"p\u0031\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _dcda =_dgbd .RasterOperation (_eedd ,_dcbd ,_cfbb ,_ddfb ,PixNotSrcAndDst ,p4 ,0,0);_dcda !=nil {return false ,_g .Wrap (_dcda ,_gedaa ,"\u0074 \u0026\u0020\u0021\u0070\u0034");
};_egeg ,_dcda =_dgbd .ThresholdPixelSum (_deff ,tab8 );if _dcda !=nil {return false ,_g .Wrap (_dcda ,_gedaa ,"\u0074\u002d\u003e\u0074\u0068\u0072\u0065\u0073\u0068\u0031");};if _egeg {return false ,nil ;};if _dcda =_dgbd .RasterOperation (_eedd ,_dcbd ,_gge ,_gdeb ,PixSrc ,p3 ,0,0);
_dcda !=nil {return false ,_g .Wrap (_dcda ,_gedaa ,"p\u0033\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _dcda =_dgbd .RasterOperation (0,0,_gge ,_gdeb ,PixNotSrcAndDst ,p2 ,0,0);_dcda !=nil {return false ,_g .Wrap (_dcda ,_gedaa ,"\u0074 \u0026\u0020\u0021\u0070\u0032");
};_egeg ,_dcda =_dgbd .ThresholdPixelSum (_gdea ,tab8 );if _dcda !=nil {return false ,_g .Wrap (_dcda ,_gedaa ,"\u0074\u002d\u003e\u0074\u0068\u0072\u0065\u0073\u0068\u0033");};return !_egeg ,nil ;};func (_fcab *Bitmaps )GroupByWidth ()(*BitmapsArray ,error ){const _afac ="\u0047\u0072\u006fu\u0070\u0042\u0079\u0057\u0069\u0064\u0074\u0068";
if len (_fcab .Values )==0{return nil ,_g .Error (_afac ,"\u006eo\u0020v\u0061\u006c\u0075\u0065\u0073 \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};_dgfc :=&BitmapsArray {};_fcab .SortByWidth ();_aacb :=-1;_efba :=-1;for _deea :=0;_deea < len (_fcab .Values );
_deea ++{_fdgc :=_fcab .Values [_deea ].Width ;if _fdgc > _aacb {_aacb =_fdgc ;_efba ++;_dgfc .Values =append (_dgfc .Values ,&Bitmaps {});};_dgfc .Values [_efba ].AddBitmap (_fcab .Values [_deea ]);};return _dgfc ,nil ;};func (_gbbd *Bitmap )Equivalent (s *Bitmap )bool {return _gbbd .equivalent (s )};
func CorrelationScoreThresholded (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab ,downcount []int ,scoreThreshold float32 )(bool ,error ){const _eebb ="C\u006f\u0072\u0072\u0065\u006c\u0061t\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054h\u0072\u0065\u0073h\u006fl\u0064\u0065\u0064";
if bm1 ==nil {return false ,_g .Error (_eebb ,"\u0063\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u0062\u006d1\u0020\u0069s\u0020\u006e\u0069\u006c");
};if bm2 ==nil {return false ,_g .Error (_eebb ,"\u0063\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u0062\u006d2\u0020\u0069s\u0020\u006e\u0069\u006c");
};if area1 <=0||area2 <=0{return false ,_g .Error (_eebb ,"c\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006fn\u0053\u0063\u006f\u0072\u0065\u0054\u0068re\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u002d\u0020\u0061\u0072\u0065\u0061s \u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u003e\u0020\u0030");
};if downcount ==nil {return false ,_g .Error (_eebb ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u006f\u0020\u0027\u0064\u006f\u0077\u006e\u0063\u006f\u0075\u006e\u0074\u0027");};if tab ==nil {return false ,_g .Error (_eebb ,"p\u0072\u006f\u0076\u0069de\u0064 \u006e\u0069\u006c\u0020\u0027s\u0075\u006d\u0074\u0061\u0062\u0027");
};_aee ,_gcbg :=bm1 .Width ,bm1 .Height ;_bgba ,_fgbd :=bm2 .Width ,bm2 .Height ;if _cd .Abs (_aee -_bgba )> maxDiffW {return false ,nil ;};if _cd .Abs (_gcbg -_fgbd )> maxDiffH {return false ,nil ;};_geaa :=int (delX +_cd .Sign (delX )*0.5);_bga :=int (delY +_cd .Sign (delY )*0.5);
_ffaf :=int (_gd .Ceil (_gd .Sqrt (float64 (scoreThreshold )*float64 (area1 )*float64 (area2 ))));_agbe :=bm2 .RowStride ;_fagc :=_abfcf (_bga ,0);_cacg :=_cddf (_fgbd +_bga ,_gcbg );_afce :=bm1 .RowStride *_fagc ;_dggc :=bm2 .RowStride *(_fagc -_bga );
var _bgga int ;if _cacg <=_gcbg {_bgga =downcount [_cacg -1];};_egad :=_abfcf (_geaa ,0);_gcgb :=_cddf (_bgba +_geaa ,_aee );var _cbee ,_bce int ;if _geaa >=8{_cbee =_geaa >>3;_afce +=_cbee ;_egad -=_cbee <<3;_gcgb -=_cbee <<3;_geaa &=7;}else if _geaa <=-8{_bce =-((_geaa +7)>>3);
_dggc +=_bce ;_agbe -=_bce ;_geaa +=_bce <<3;};var (_dada ,_ccc ,_dbff int ;_bfbc ,_bdgf ,_bbdef byte ;);if _egad >=_gcgb ||_fagc >=_cacg {return false ,nil ;};_ddea :=(_gcgb +7)>>3;switch {case _geaa ==0:for _ccc =_fagc ;_ccc < _cacg ;_ccc ,_afce ,_dggc =_ccc +1,_afce +bm1 .RowStride ,_dggc +bm2 .RowStride {for _dbff =0;
_dbff < _ddea ;_dbff ++{_bfbc =bm1 .Data [_afce +_dbff ]&bm2 .Data [_dggc +_dbff ];_dada +=tab [_bfbc ];};if _dada >=_ffaf {return true ,nil ;};if _ddac :=_dada +downcount [_ccc ]-_bgga ;_ddac < _ffaf {return false ,nil ;};};case _geaa > 0&&_agbe < _ddea :for _ccc =_fagc ;
_ccc < _cacg ;_ccc ,_afce ,_dggc =_ccc +1,_afce +bm1 .RowStride ,_dggc +bm2 .RowStride {_bdgf =bm1 .Data [_afce ];_bbdef =bm2 .Data [_dggc ]>>uint (_geaa );_bfbc =_bdgf &_bbdef ;_dada +=tab [_bfbc ];for _dbff =1;_dbff < _agbe ;_dbff ++{_bdgf =bm1 .Data [_afce +_dbff ];
_bbdef =bm2 .Data [_dggc +_dbff ]>>uint (_geaa )|bm2 .Data [_dggc +_dbff -1]<<uint (8-_geaa );_bfbc =_bdgf &_bbdef ;_dada +=tab [_bfbc ];};_bdgf =bm1 .Data [_afce +_dbff ];_bbdef =bm2 .Data [_dggc +_dbff -1]<<uint (8-_geaa );_bfbc =_bdgf &_bbdef ;_dada +=tab [_bfbc ];
if _dada >=_ffaf {return true ,nil ;}else if _dada +downcount [_ccc ]-_bgga < _ffaf {return false ,nil ;};};case _geaa > 0&&_agbe >=_ddea :for _ccc =_fagc ;_ccc < _cacg ;_ccc ,_afce ,_dggc =_ccc +1,_afce +bm1 .RowStride ,_dggc +bm2 .RowStride {_bdgf =bm1 .Data [_afce ];
_bbdef =bm2 .Data [_dggc ]>>uint (_geaa );_bfbc =_bdgf &_bbdef ;_dada +=tab [_bfbc ];for _dbff =1;_dbff < _ddea ;_dbff ++{_bdgf =bm1 .Data [_afce +_dbff ];_bbdef =bm2 .Data [_dggc +_dbff ]>>uint (_geaa );_bbdef |=bm2 .Data [_dggc +_dbff -1]<<uint (8-_geaa );
_bfbc =_bdgf &_bbdef ;_dada +=tab [_bfbc ];};if _dada >=_ffaf {return true ,nil ;}else if _dada +downcount [_ccc ]-_bgga < _ffaf {return false ,nil ;};};case _ddea < _agbe :for _ccc =_fagc ;_ccc < _cacg ;_ccc ,_afce ,_dggc =_ccc +1,_afce +bm1 .RowStride ,_dggc +bm2 .RowStride {for _dbff =0;
_dbff < _ddea ;_dbff ++{_bdgf =bm1 .Data [_afce +_dbff ];_bbdef =bm2 .Data [_dggc +_dbff ]<<uint (-_geaa );_bbdef |=bm2 .Data [_dggc +_dbff +1]>>uint (8+_geaa );_bfbc =_bdgf &_bbdef ;_dada +=tab [_bfbc ];};if _dada >=_ffaf {return true ,nil ;}else if _ccad :=_dada +downcount [_ccc ]-_bgga ;
_ccad < _ffaf {return false ,nil ;};};case _agbe >=_ddea :for _ccc =_fagc ;_ccc < _cacg ;_ccc ,_afce ,_dggc =_ccc +1,_afce +bm1 .RowStride ,_dggc +bm2 .RowStride {for _dbff =0;_dbff < _ddea ;_dbff ++{_bdgf =bm1 .Data [_afce +_dbff ];_bbdef =bm2 .Data [_dggc +_dbff ]<<uint (-_geaa );
_bbdef |=bm2 .Data [_dggc +_dbff +1]>>uint (8+_geaa );_bfbc =_bdgf &_bbdef ;_dada +=tab [_bfbc ];};_bdgf =bm1 .Data [_afce +_dbff ];_bbdef =bm2 .Data [_dggc +_dbff ]<<uint (-_geaa );_bfbc =_bdgf &_bbdef ;_dada +=tab [_bfbc ];if _dada >=_ffaf {return true ,nil ;
}else if _dada +downcount [_ccc ]-_bgga < _ffaf {return false ,nil ;};};};_cbef :=float32 (_dada )*float32 (_dada )/(float32 (area1 )*float32 (area2 ));if _cbef >=scoreThreshold {_b .Log .Trace ("\u0063\u006f\u0075\u006e\u0074\u003a\u0020\u0025\u0064\u0020\u003c\u0020\u0074\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0020\u0025\u0064\u0020\u0062\u0075\u0074\u0020\u0073c\u006f\u0072\u0065\u0020\u0025\u0066\u0020\u003e\u003d\u0020\u0073\u0063\u006fr\u0065\u0054\u0068\u0072\u0065\u0073h\u006f\u006c\u0064 \u0025\u0066",_dada ,_ffaf ,_cbef ,scoreThreshold );
};return false ,nil ;};func (_aggc *Boxes )makeSizeIndicator (_edca ,_acb int ,_ddbef LocationFilter ,_gfb SizeComparison )*_cd .NumSlice {_gceb :=&_cd .NumSlice {};var _dbdf ,_bada ,_dfbg int ;for _ ,_gdda :=range *_aggc {_dbdf =0;_bada ,_dfbg =_gdda .Dx (),_gdda .Dy ();
switch _ddbef {case LocSelectWidth :if (_gfb ==SizeSelectIfLT &&_bada < _edca )||(_gfb ==SizeSelectIfGT &&_bada > _edca )||(_gfb ==SizeSelectIfLTE &&_bada <=_edca )||(_gfb ==SizeSelectIfGTE &&_bada >=_edca ){_dbdf =1;};case LocSelectHeight :if (_gfb ==SizeSelectIfLT &&_dfbg < _acb )||(_gfb ==SizeSelectIfGT &&_dfbg > _acb )||(_gfb ==SizeSelectIfLTE &&_dfbg <=_acb )||(_gfb ==SizeSelectIfGTE &&_dfbg >=_acb ){_dbdf =1;
};case LocSelectIfEither :if (_gfb ==SizeSelectIfLT &&(_dfbg < _acb ||_bada < _edca ))||(_gfb ==SizeSelectIfGT &&(_dfbg > _acb ||_bada > _edca ))||(_gfb ==SizeSelectIfLTE &&(_dfbg <=_acb ||_bada <=_edca ))||(_gfb ==SizeSelectIfGTE &&(_dfbg >=_acb ||_bada >=_edca )){_dbdf =1;
};case LocSelectIfBoth :if (_gfb ==SizeSelectIfLT &&(_dfbg < _acb &&_bada < _edca ))||(_gfb ==SizeSelectIfGT &&(_dfbg > _acb &&_bada > _edca ))||(_gfb ==SizeSelectIfLTE &&(_dfbg <=_acb &&_bada <=_edca ))||(_gfb ==SizeSelectIfGTE &&(_dfbg >=_acb &&_bada >=_edca )){_dbdf =1;
};};_gceb .AddInt (_dbdf );};return _gceb ;};func _ggcf (_ffga ,_daee int ,_dcac string )*Selection {_eecb :=&Selection {Height :_ffga ,Width :_daee ,Name :_dcac };_eecb .Data =make ([][]SelectionValue ,_ffga );for _gffcg :=0;_gffcg < _ffga ;_gffcg ++{_eecb .Data [_gffcg ]=make ([]SelectionValue ,_daee );
};return _eecb ;};func (_adacg *Bitmaps )selectByIndexes (_ecfaa []int )(*Bitmaps ,error ){_dgbe :=&Bitmaps {};for _ ,_decg :=range _ecfaa {_dbfag ,_ebaa :=_adacg .GetBitmap (_decg );if _ebaa !=nil {return nil ,_g .Wrap (_ebaa ,"\u0073e\u006ce\u0063\u0074\u0042\u0079\u0049\u006e\u0064\u0065\u0078\u0065\u0073","");
};_dgbe .AddBitmap (_dbfag );};return _dgbe ,nil ;};const (_ SizeSelection =iota ;SizeSelectByWidth ;SizeSelectByHeight ;SizeSelectByMaxDimension ;SizeSelectByArea ;SizeSelectByPerimeter ;);func (_beg *Bitmap )SizesEqual (s *Bitmap )bool {if _beg ==s {return true ;
};if _beg .Width !=s .Width ||_beg .Height !=s .Height {return false ;};return true ;};func _fbf ()(_dc [256]uint16 ){for _cfc :=0;_cfc < 256;_cfc ++{if _cfc &0x01!=0{_dc [_cfc ]|=0x3;};if _cfc &0x02!=0{_dc [_cfc ]|=0xc;};if _cfc &0x04!=0{_dc [_cfc ]|=0x30;
};if _cfc &0x08!=0{_dc [_cfc ]|=0xc0;};if _cfc &0x10!=0{_dc [_cfc ]|=0x300;};if _cfc &0x20!=0{_dc [_cfc ]|=0xc00;};if _cfc &0x40!=0{_dc [_cfc ]|=0x3000;};if _cfc &0x80!=0{_dc [_cfc ]|=0xc000;};};return _dc ;};func _deeg (_fbdd ,_gbba *Bitmap ,_badd ,_egbb int )(*Bitmap ,error ){const _dfdf ="\u0063\u006c\u006f\u0073\u0065\u0042\u0072\u0069\u0063\u006b";
if _gbba ==nil {return nil ,_g .Error (_dfdf ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _badd < 1||_egbb < 1{return nil ,_g .Error (_dfdf ,"\u0068S\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0053\u0069z\u0065\u0020\u006e\u006f\u0074\u0020\u003e\u003d\u0020\u0031");
};if _badd ==1&&_egbb ==1{return _gbba .Copy (),nil ;};if _badd ==1||_egbb ==1{_egcc :=SelCreateBrick (_egbb ,_badd ,_egbb /2,_badd /2,SelHit );var _cbdd error ;_fbdd ,_cbdd =_gbbdb (_fbdd ,_gbba ,_egcc );if _cbdd !=nil {return nil ,_g .Wrap (_cbdd ,_dfdf ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _fbdd ,nil ;};_agdc :=SelCreateBrick (1,_badd ,0,_badd /2,SelHit );_cbfa :=SelCreateBrick (_egbb ,1,_egbb /2,0,SelHit );_edfb ,_ddcg :=_cfcge (nil ,_gbba ,_agdc );if _ddcg !=nil {return nil ,_g .Wrap (_ddcg ,_dfdf ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};if _fbdd ,_ddcg =_cfcge (_fbdd ,_edfb ,_cbfa );_ddcg !=nil {return nil ,_g .Wrap (_ddcg ,_dfdf ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};if _ ,_ddcg =_dgbcf (_edfb ,_fbdd ,_agdc );_ddcg !=nil {return nil ,_g .Wrap (_ddcg ,_dfdf ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};if _ ,_ddcg =_dgbcf (_fbdd ,_edfb ,_cbfa );_ddcg !=nil {return nil ,_g .Wrap (_ddcg ,_dfdf ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};return _fbdd ,nil ;};func (_bece *Bitmap )resizeImageData (_gfed *Bitmap )error {if _gfed ==nil {return _g .Error ("\u0072e\u0073i\u007a\u0065\u0049\u006d\u0061\u0067\u0065\u0044\u0061\u0074\u0061","\u0073r\u0063 \u0069\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _bece .SizesEqual (_gfed ){return nil ;};_bece .Data =make ([]byte ,len (_gfed .Data ));_bece .Width =_gfed .Width ;_bece .Height =_gfed .Height ;_bece .RowStride =_gfed .RowStride ;return nil ;};func (_ebcb *ClassedPoints )xSortFunction ()func (_acbe int ,_cffgc int )bool {return func (_bebg ,_fcdf int )bool {return _ebcb .XAtIndex (_bebg )< _ebcb .XAtIndex (_fcdf )};
};func (_bdbbf *Selection )findMaxTranslations ()(_agced ,_bcee ,_cbce ,_ggcaa int ){for _fedbg :=0;_fedbg < _bdbbf .Height ;_fedbg ++{for _fbdecc :=0;_fbdecc < _bdbbf .Width ;_fbdecc ++{if _bdbbf .Data [_fedbg ][_fbdecc ]==SelHit {_agced =_abfcf (_agced ,_bdbbf .Cx -_fbdecc );
_bcee =_abfcf (_bcee ,_bdbbf .Cy -_fedbg );_cbce =_abfcf (_cbce ,_fbdecc -_bdbbf .Cx );_ggcaa =_abfcf (_ggcaa ,_fedbg -_bdbbf .Cy );};};};return _agced ,_bcee ,_cbce ,_ggcaa ;};func _gece (_cbfg *Bitmap ,_ccef ,_eaae ,_daad ,_bdcc int ,_dbegf RasterOperator ,_ggef *Bitmap ,_dcba ,_bddd int )error {var (_dffg bool ;
_febba bool ;_agcbc int ;_ffagd int ;_febg int ;_gffdg bool ;_bcaf byte ;_debdb int ;_degc int ;_fged int ;_gcdb ,_eacc int ;);_aabb :=8-(_ccef &7);_efeb :=_gbfbd [_aabb ];_ebcc :=_cbfg .RowStride *_eaae +(_ccef >>3);_cbcac :=_ggef .RowStride *_bddd +(_dcba >>3);
if _daad < _aabb {_dffg =true ;_efeb &=_ceaad [8-_aabb +_daad ];};if !_dffg {_agcbc =(_daad -_aabb )>>3;if _agcbc > 0{_febba =true ;_ffagd =_ebcc +1;_febg =_cbcac +1;};};_debdb =(_ccef +_daad )&7;if !(_dffg ||_debdb ==0){_gffdg =true ;_bcaf =_ceaad [_debdb ];
_degc =_ebcc +1+_agcbc ;_fged =_cbcac +1+_agcbc ;};switch _dbegf {case PixSrc :for _gcdb =0;_gcdb < _bdcc ;_gcdb ++{_cbfg .Data [_ebcc ]=_accd (_cbfg .Data [_ebcc ],_ggef .Data [_cbcac ],_efeb );_ebcc +=_cbfg .RowStride ;_cbcac +=_ggef .RowStride ;};if _febba {for _gcdb =0;
_gcdb < _bdcc ;_gcdb ++{for _eacc =0;_eacc < _agcbc ;_eacc ++{_cbfg .Data [_ffagd +_eacc ]=_ggef .Data [_febg +_eacc ];};_ffagd +=_cbfg .RowStride ;_febg +=_ggef .RowStride ;};};if _gffdg {for _gcdb =0;_gcdb < _bdcc ;_gcdb ++{_cbfg .Data [_degc ]=_accd (_cbfg .Data [_degc ],_ggef .Data [_fged ],_bcaf );
_degc +=_cbfg .RowStride ;_fged +=_ggef .RowStride ;};};case PixNotSrc :for _gcdb =0;_gcdb < _bdcc ;_gcdb ++{_cbfg .Data [_ebcc ]=_accd (_cbfg .Data [_ebcc ],^_ggef .Data [_cbcac ],_efeb );_ebcc +=_cbfg .RowStride ;_cbcac +=_ggef .RowStride ;};if _febba {for _gcdb =0;
_gcdb < _bdcc ;_gcdb ++{for _eacc =0;_eacc < _agcbc ;_eacc ++{_cbfg .Data [_ffagd +_eacc ]=^_ggef .Data [_febg +_eacc ];};_ffagd +=_cbfg .RowStride ;_febg +=_ggef .RowStride ;};};if _gffdg {for _gcdb =0;_gcdb < _bdcc ;_gcdb ++{_cbfg .Data [_degc ]=_accd (_cbfg .Data [_degc ],^_ggef .Data [_fged ],_bcaf );
_degc +=_cbfg .RowStride ;_fged +=_ggef .RowStride ;};};case PixSrcOrDst :for _gcdb =0;_gcdb < _bdcc ;_gcdb ++{_cbfg .Data [_ebcc ]=_accd (_cbfg .Data [_ebcc ],_ggef .Data [_cbcac ]|_cbfg .Data [_ebcc ],_efeb );_ebcc +=_cbfg .RowStride ;_cbcac +=_ggef .RowStride ;
};if _febba {for _gcdb =0;_gcdb < _bdcc ;_gcdb ++{for _eacc =0;_eacc < _agcbc ;_eacc ++{_cbfg .Data [_ffagd +_eacc ]|=_ggef .Data [_febg +_eacc ];};_ffagd +=_cbfg .RowStride ;_febg +=_ggef .RowStride ;};};if _gffdg {for _gcdb =0;_gcdb < _bdcc ;_gcdb ++{_cbfg .Data [_degc ]=_accd (_cbfg .Data [_degc ],_ggef .Data [_fged ]|_cbfg .Data [_degc ],_bcaf );
_degc +=_cbfg .RowStride ;_fged +=_ggef .RowStride ;};};case PixSrcAndDst :for _gcdb =0;_gcdb < _bdcc ;_gcdb ++{_cbfg .Data [_ebcc ]=_accd (_cbfg .Data [_ebcc ],_ggef .Data [_cbcac ]&_cbfg .Data [_ebcc ],_efeb );_ebcc +=_cbfg .RowStride ;_cbcac +=_ggef .RowStride ;
};if _febba {for _gcdb =0;_gcdb < _bdcc ;_gcdb ++{for _eacc =0;_eacc < _agcbc ;_eacc ++{_cbfg .Data [_ffagd +_eacc ]&=_ggef .Data [_febg +_eacc ];};_ffagd +=_cbfg .RowStride ;_febg +=_ggef .RowStride ;};};if _gffdg {for _gcdb =0;_gcdb < _bdcc ;_gcdb ++{_cbfg .Data [_degc ]=_accd (_cbfg .Data [_degc ],_ggef .Data [_fged ]&_cbfg .Data [_degc ],_bcaf );
_degc +=_cbfg .RowStride ;_fged +=_ggef .RowStride ;};};case PixSrcXorDst :for _gcdb =0;_gcdb < _bdcc ;_gcdb ++{_cbfg .Data [_ebcc ]=_accd (_cbfg .Data [_ebcc ],_ggef .Data [_cbcac ]^_cbfg .Data [_ebcc ],_efeb );_ebcc +=_cbfg .RowStride ;_cbcac +=_ggef .RowStride ;
};if _febba {for _gcdb =0;_gcdb < _bdcc ;_gcdb ++{for _eacc =0;_eacc < _agcbc ;_eacc ++{_cbfg .Data [_ffagd +_eacc ]^=_ggef .Data [_febg +_eacc ];};_ffagd +=_cbfg .RowStride ;_febg +=_ggef .RowStride ;};};if _gffdg {for _gcdb =0;_gcdb < _bdcc ;_gcdb ++{_cbfg .Data [_degc ]=_accd (_cbfg .Data [_degc ],_ggef .Data [_fged ]^_cbfg .Data [_degc ],_bcaf );
_degc +=_cbfg .RowStride ;_fged +=_ggef .RowStride ;};};case PixNotSrcOrDst :for _gcdb =0;_gcdb < _bdcc ;_gcdb ++{_cbfg .Data [_ebcc ]=_accd (_cbfg .Data [_ebcc ],^(_ggef .Data [_cbcac ])|_cbfg .Data [_ebcc ],_efeb );_ebcc +=_cbfg .RowStride ;_cbcac +=_ggef .RowStride ;
};if _febba {for _gcdb =0;_gcdb < _bdcc ;_gcdb ++{for _eacc =0;_eacc < _agcbc ;_eacc ++{_cbfg .Data [_ffagd +_eacc ]|=^(_ggef .Data [_febg +_eacc ]);};_ffagd +=_cbfg .RowStride ;_febg +=_ggef .RowStride ;};};if _gffdg {for _gcdb =0;_gcdb < _bdcc ;_gcdb ++{_cbfg .Data [_degc ]=_accd (_cbfg .Data [_degc ],^(_ggef .Data [_fged ])|_cbfg .Data [_degc ],_bcaf );
_degc +=_cbfg .RowStride ;_fged +=_ggef .RowStride ;};};case PixNotSrcAndDst :for _gcdb =0;_gcdb < _bdcc ;_gcdb ++{_cbfg .Data [_ebcc ]=_accd (_cbfg .Data [_ebcc ],^(_ggef .Data [_cbcac ])&_cbfg .Data [_ebcc ],_efeb );_ebcc +=_cbfg .RowStride ;_cbcac +=_ggef .RowStride ;
};if _febba {for _gcdb =0;_gcdb < _bdcc ;_gcdb ++{for _eacc =0;_eacc < _agcbc ;_eacc ++{_cbfg .Data [_ffagd +_eacc ]&=^_ggef .Data [_febg +_eacc ];};_ffagd +=_cbfg .RowStride ;_febg +=_ggef .RowStride ;};};if _gffdg {for _gcdb =0;_gcdb < _bdcc ;_gcdb ++{_cbfg .Data [_degc ]=_accd (_cbfg .Data [_degc ],^(_ggef .Data [_fged ])&_cbfg .Data [_degc ],_bcaf );
_degc +=_cbfg .RowStride ;_fged +=_ggef .RowStride ;};};case PixSrcOrNotDst :for _gcdb =0;_gcdb < _bdcc ;_gcdb ++{_cbfg .Data [_ebcc ]=_accd (_cbfg .Data [_ebcc ],_ggef .Data [_cbcac ]|^(_cbfg .Data [_ebcc ]),_efeb );_ebcc +=_cbfg .RowStride ;_cbcac +=_ggef .RowStride ;
};if _febba {for _gcdb =0;_gcdb < _bdcc ;_gcdb ++{for _eacc =0;_eacc < _agcbc ;_eacc ++{_cbfg .Data [_ffagd +_eacc ]=_ggef .Data [_febg +_eacc ]|^(_cbfg .Data [_ffagd +_eacc ]);};_ffagd +=_cbfg .RowStride ;_febg +=_ggef .RowStride ;};};if _gffdg {for _gcdb =0;
_gcdb < _bdcc ;_gcdb ++{_cbfg .Data [_degc ]=_accd (_cbfg .Data [_degc ],_ggef .Data [_fged ]|^(_cbfg .Data [_degc ]),_bcaf );_degc +=_cbfg .RowStride ;_fged +=_ggef .RowStride ;};};case PixSrcAndNotDst :for _gcdb =0;_gcdb < _bdcc ;_gcdb ++{_cbfg .Data [_ebcc ]=_accd (_cbfg .Data [_ebcc ],_ggef .Data [_cbcac ]&^(_cbfg .Data [_ebcc ]),_efeb );
_ebcc +=_cbfg .RowStride ;_cbcac +=_ggef .RowStride ;};if _febba {for _gcdb =0;_gcdb < _bdcc ;_gcdb ++{for _eacc =0;_eacc < _agcbc ;_eacc ++{_cbfg .Data [_ffagd +_eacc ]=_ggef .Data [_febg +_eacc ]&^(_cbfg .Data [_ffagd +_eacc ]);};_ffagd +=_cbfg .RowStride ;
_febg +=_ggef .RowStride ;};};if _gffdg {for _gcdb =0;_gcdb < _bdcc ;_gcdb ++{_cbfg .Data [_degc ]=_accd (_cbfg .Data [_degc ],_ggef .Data [_fged ]&^(_cbfg .Data [_degc ]),_bcaf );_degc +=_cbfg .RowStride ;_fged +=_ggef .RowStride ;};};case PixNotPixSrcOrDst :for _gcdb =0;
_gcdb < _bdcc ;_gcdb ++{_cbfg .Data [_ebcc ]=_accd (_cbfg .Data [_ebcc ],^(_ggef .Data [_cbcac ]|_cbfg .Data [_ebcc ]),_efeb );_ebcc +=_cbfg .RowStride ;_cbcac +=_ggef .RowStride ;};if _febba {for _gcdb =0;_gcdb < _bdcc ;_gcdb ++{for _eacc =0;_eacc < _agcbc ;
_eacc ++{_cbfg .Data [_ffagd +_eacc ]=^(_ggef .Data [_febg +_eacc ]|_cbfg .Data [_ffagd +_eacc ]);};_ffagd +=_cbfg .RowStride ;_febg +=_ggef .RowStride ;};};if _gffdg {for _gcdb =0;_gcdb < _bdcc ;_gcdb ++{_cbfg .Data [_degc ]=_accd (_cbfg .Data [_degc ],^(_ggef .Data [_fged ]|_cbfg .Data [_degc ]),_bcaf );
_degc +=_cbfg .RowStride ;_fged +=_ggef .RowStride ;};};case PixNotPixSrcAndDst :for _gcdb =0;_gcdb < _bdcc ;_gcdb ++{_cbfg .Data [_ebcc ]=_accd (_cbfg .Data [_ebcc ],^(_ggef .Data [_cbcac ]&_cbfg .Data [_ebcc ]),_efeb );_ebcc +=_cbfg .RowStride ;_cbcac +=_ggef .RowStride ;
};if _febba {for _gcdb =0;_gcdb < _bdcc ;_gcdb ++{for _eacc =0;_eacc < _agcbc ;_eacc ++{_cbfg .Data [_ffagd +_eacc ]=^(_ggef .Data [_febg +_eacc ]&_cbfg .Data [_ffagd +_eacc ]);};_ffagd +=_cbfg .RowStride ;_febg +=_ggef .RowStride ;};};if _gffdg {for _gcdb =0;
_gcdb < _bdcc ;_gcdb ++{_cbfg .Data [_degc ]=_accd (_cbfg .Data [_degc ],^(_ggef .Data [_fged ]&_cbfg .Data [_degc ]),_bcaf );_degc +=_cbfg .RowStride ;_fged +=_ggef .RowStride ;};};case PixNotPixSrcXorDst :for _gcdb =0;_gcdb < _bdcc ;_gcdb ++{_cbfg .Data [_ebcc ]=_accd (_cbfg .Data [_ebcc ],^(_ggef .Data [_cbcac ]^_cbfg .Data [_ebcc ]),_efeb );
_ebcc +=_cbfg .RowStride ;_cbcac +=_ggef .RowStride ;};if _febba {for _gcdb =0;_gcdb < _bdcc ;_gcdb ++{for _eacc =0;_eacc < _agcbc ;_eacc ++{_cbfg .Data [_ffagd +_eacc ]=^(_ggef .Data [_febg +_eacc ]^_cbfg .Data [_ffagd +_eacc ]);};_ffagd +=_cbfg .RowStride ;
_febg +=_ggef .RowStride ;};};if _gffdg {for _gcdb =0;_gcdb < _bdcc ;_gcdb ++{_cbfg .Data [_degc ]=_accd (_cbfg .Data [_degc ],^(_ggef .Data [_fged ]^_cbfg .Data [_degc ]),_bcaf );_degc +=_cbfg .RowStride ;_fged +=_ggef .RowStride ;};};default:_b .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070e\u0072\u0061\u0074o\u0072:\u0020\u0025\u0064",_dbegf );
return _g .Error ("\u0072\u0061\u0073\u0074er\u004f\u0070\u0056\u0041\u006c\u0069\u0067\u006e\u0065\u0064\u004c\u006f\u0077","\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");
};return nil ;};func _efgf (_bbf ,_baba *Bitmap ,_dagg ,_efgc ,_aggb uint ,_bfdb ,_fefcc int ,_ccfa bool ,_bdec ,_badaa int )error {for _gafd :=_bfdb ;_gafd < _fefcc ;_gafd ++{if _bdec +1< len (_bbf .Data ){_eeg :=_gafd +1==_fefcc ;_gde ,_ccag :=_bbf .GetByte (_bdec );
if _ccag !=nil {return _ccag ;};_bdec ++;_gde <<=_dagg ;_fcea ,_ccag :=_bbf .GetByte (_bdec );if _ccag !=nil {return _ccag ;};_fcea >>=_efgc ;_agab :=_gde |_fcea ;if _eeg &&!_ccfa {_agab =_afbb (_aggb ,_agab );};_ccag =_baba .SetByte (_badaa ,_agab );if _ccag !=nil {return _ccag ;
};_badaa ++;if _eeg &&_ccfa {_acbf ,_cbed :=_bbf .GetByte (_bdec );if _cbed !=nil {return _cbed ;};_acbf <<=_dagg ;_agab =_afbb (_aggb ,_acbf );if _cbed =_baba .SetByte (_badaa ,_agab );_cbed !=nil {return _cbed ;};};continue ;};_dgfe ,_efag :=_bbf .GetByte (_bdec );
if _efag !=nil {_b .Log .Debug ("G\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0068\u0065\u0020\u0076\u0061l\u0075\u0065\u0020\u0061\u0074\u003a\u0020%\u0064\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020%\u0073",_bdec ,_efag );return _efag ;};_dgfe <<=_dagg ;
_bdec ++;_efag =_baba .SetByte (_badaa ,_dgfe );if _efag !=nil {return _efag ;};_badaa ++;};return nil ;};var _ffa [256]uint8 ;func _aeggb (_gcdd ,_aefc *Bitmap ,_bebeg ,_bgee int )(_gebg error ){const _fdabb ="\u0073e\u0065d\u0066\u0069\u006c\u006c\u0042i\u006e\u0061r\u0079\u004c\u006f\u0077\u0034";
var (_daef ,_ccbab ,_eaab ,_bdfcd int ;_fecb ,_eebba ,_cddfb ,_edbb ,_gfbab ,_gdgb ,_ccaa byte ;);for _daef =0;_daef < _bebeg ;_daef ++{_eaab =_daef *_gcdd .RowStride ;_bdfcd =_daef *_aefc .RowStride ;for _ccbab =0;_ccbab < _bgee ;_ccbab ++{_fecb ,_gebg =_gcdd .GetByte (_eaab +_ccbab );
if _gebg !=nil {return _g .Wrap (_gebg ,_fdabb ,"\u0066i\u0072\u0073\u0074\u0020\u0067\u0065t");};_eebba ,_gebg =_aefc .GetByte (_bdfcd +_ccbab );if _gebg !=nil {return _g .Wrap (_gebg ,_fdabb ,"\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0067\u0065\u0074");
};if _daef > 0{_cddfb ,_gebg =_gcdd .GetByte (_eaab -_gcdd .RowStride +_ccbab );if _gebg !=nil {return _g .Wrap (_gebg ,_fdabb ,"\u0069\u0020\u003e \u0030");};_fecb |=_cddfb ;};if _ccbab > 0{_edbb ,_gebg =_gcdd .GetByte (_eaab +_ccbab -1);if _gebg !=nil {return _g .Wrap (_gebg ,_fdabb ,"\u006a\u0020\u003e \u0030");
};_fecb |=_edbb <<7;};_fecb &=_eebba ;if _fecb ==0||(^_fecb )==0{if _gebg =_gcdd .SetByte (_eaab +_ccbab ,_fecb );_gebg !=nil {return _g .Wrap (_gebg ,_fdabb ,"b\u0074\u0020\u003d\u003d 0\u0020|\u007c\u0020\u0028\u005e\u0062t\u0029\u0020\u003d\u003d\u0020\u0030");
};continue ;};for {_ccaa =_fecb ;_fecb =(_fecb |(_fecb >>1)|(_fecb <<1))&_eebba ;if (_fecb ^_ccaa )==0{if _gebg =_gcdd .SetByte (_eaab +_ccbab ,_fecb );_gebg !=nil {return _g .Wrap (_gebg ,_fdabb ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0070\u0072\u0065\u0076 \u0062\u0079\u0074\u0065");
};break ;};};};};for _daef =_bebeg -1;_daef >=0;_daef --{_eaab =_daef *_gcdd .RowStride ;_bdfcd =_daef *_aefc .RowStride ;for _ccbab =_bgee -1;_ccbab >=0;_ccbab --{if _fecb ,_gebg =_gcdd .GetByte (_eaab +_ccbab );_gebg !=nil {return _g .Wrap (_gebg ,_fdabb ,"\u0072\u0065\u0076\u0065\u0072\u0073\u0065\u0020\u0066\u0069\u0072\u0073t\u0020\u0067\u0065\u0074");
};if _eebba ,_gebg =_aefc .GetByte (_bdfcd +_ccbab );_gebg !=nil {return _g .Wrap (_gebg ,_fdabb ,"r\u0065\u0076\u0065\u0072se\u0020g\u0065\u0074\u0020\u006d\u0061s\u006b\u0020\u0062\u0079\u0074\u0065");};if _daef < _bebeg -1{if _gfbab ,_gebg =_gcdd .GetByte (_eaab +_gcdd .RowStride +_ccbab );
_gebg !=nil {return _g .Wrap (_gebg ,_fdabb ,"\u0072\u0065v\u0065\u0072\u0073e\u0020\u0069\u0020\u003c\u0020\u0068\u0020\u002d\u0031");};_fecb |=_gfbab ;};if _ccbab < _bgee -1{if _gdgb ,_gebg =_gcdd .GetByte (_eaab +_ccbab +1);_gebg !=nil {return _g .Wrap (_gebg ,_fdabb ,"\u0072\u0065\u0076\u0065rs\u0065\u0020\u006a\u0020\u003c\u0020\u0077\u0070\u006c\u0020\u002d\u0020\u0031");
};_fecb |=_gdgb >>7;};_fecb &=_eebba ;if _fecb ==0||(^_fecb )==0{if _gebg =_gcdd .SetByte (_eaab +_ccbab ,_fecb );_gebg !=nil {return _g .Wrap (_gebg ,_fdabb ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006d\u0061\u0073k\u0065\u0064\u0020\u0062\u0079\u0074\u0065\u0020\u0066\u0061i\u006c\u0065\u0064");
};continue ;};for {_ccaa =_fecb ;_fecb =(_fecb |(_fecb >>1)|(_fecb <<1))&_eebba ;if (_fecb ^_ccaa )==0{if _gebg =_gcdd .SetByte (_eaab +_ccbab ,_fecb );_gebg !=nil {return _g .Wrap (_gebg ,_fdabb ,"\u0072e\u0076\u0065\u0072\u0073e\u0020\u0073\u0065\u0074\u0074i\u006eg\u0020p\u0072\u0065\u0076\u0020\u0062\u0079\u0074e");
};break ;};};};};return nil ;};var (_aaa =_fbf ();_bffg =_dcf ();_fbbc =_gae (););func (_edce *ClassedPoints )YAtIndex (i int )float32 {return (*_edce .Points )[_edce .IntSlice [i ]].Y };func (_gagf *Bitmap )addPadBits ()(_eafg error ){const _fgd ="\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0061\u0064\u0064\u0050\u0061d\u0042\u0069\u0074\u0073";
_bgec :=_gagf .Width %8;if _bgec ==0{return nil ;};_cfb :=_gagf .Width /8;_fab :=_ga .NewReader (_gagf .Data );_gffd :=make ([]byte ,_gagf .Height *_gagf .RowStride );_adbb :=_ga .NewWriterMSB (_gffd );_dadf :=make ([]byte ,_cfb );var (_fgdc int ;_baeb uint64 ;
);for _fgdc =0;_fgdc < _gagf .Height ;_fgdc ++{if _ ,_eafg =_fab .Read (_dadf );_eafg !=nil {return _g .Wrap (_eafg ,_fgd ,"\u0066u\u006c\u006c\u0020\u0062\u0079\u0074e");};if _ ,_eafg =_adbb .Write (_dadf );_eafg !=nil {return _g .Wrap (_eafg ,_fgd ,"\u0066\u0075\u006c\u006c\u0020\u0062\u0079\u0074\u0065\u0073");
};if _baeb ,_eafg =_fab .ReadBits (byte (_bgec ));_eafg !=nil {return _g .Wrap (_eafg ,_fgd ,"\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0062\u0069\u0074\u0073");};if _eafg =_adbb .WriteByte (byte (_baeb )<<uint (8-_bgec ));_eafg !=nil {return _g .Wrap (_eafg ,_fgd ,"\u006ca\u0073\u0074\u0020\u0062\u0079\u0074e");
};};_gagf .Data =_adbb .Data ();return nil ;};func (_efg *Bitmap )setBit (_efc int ){_efg .Data [(_efc >>3)]|=0x80>>uint (_efc &7)};const (_ SizeComparison =iota ;SizeSelectIfLT ;SizeSelectIfGT ;SizeSelectIfLTE ;SizeSelectIfGTE ;SizeSelectIfEQ ;);func (_fedbe *Points )AddPoint (x ,y float32 ){*_fedbe =append (*_fedbe ,Point {x ,y })};
type BitmapsArray struct{Values []*Bitmaps ;Boxes []*_ff .Rectangle ;};func TstImageBitmapInverseData ()[]byte {_cecdd :=_debg .Copy ();_cecdd .InverseData ();return _cecdd .Data ;};func _gcgc (_cbca ,_fbgb *Bitmap ,_ece ,_ggag ,_dbca ,_abfge ,_ebee ,_gcbe ,_effb ,_ffag int ,_bfd CombinationOperator ,_gedc int )error {var _ddbd int ;
_bbga :=func (){_ddbd ++;_dbca +=_fbgb .RowStride ;_abfge +=_cbca .RowStride ;_ebee +=_cbca .RowStride };for _ddbd =_ece ;_ddbd < _ggag ;_bbga (){var _fgbfe uint16 ;_dedg :=_dbca ;for _fad :=_abfge ;_fad <=_ebee ;_fad ++{_fabg ,_ccgbd :=_fbgb .GetByte (_dedg );
if _ccgbd !=nil {return _ccgbd ;};_fefcg ,_ccgbd :=_cbca .GetByte (_fad );if _ccgbd !=nil {return _ccgbd ;};_fgbfe =(_fgbfe |(uint16 (_fefcg )&0xff))<<uint (_ffag );_fefcg =byte (_fgbfe >>8);if _ccgbd =_fbgb .SetByte (_dedg ,_fgcb (_fabg ,_fefcg ,_bfd ));
_ccgbd !=nil {return _ccgbd ;};_dedg ++;_fgbfe <<=uint (_effb );if _fad ==_ebee {_fefcg =byte (_fgbfe >>(8-uint8 (_ffag )));if _gedc !=0{_fefcg =_afbb (uint (8+_gcbe ),_fefcg );};_fabg ,_ccgbd =_fbgb .GetByte (_dedg );if _ccgbd !=nil {return _ccgbd ;};
if _ccgbd =_fbgb .SetByte (_dedg ,_fgcb (_fabg ,_fefcg ,_bfd ));_ccgbd !=nil {return _ccgbd ;};};};};return nil ;};func _aede (_aebb ,_fefg ,_dfgd *Bitmap ,_dfag int )(*Bitmap ,error ){const _dbfg ="\u0073\u0065\u0065\u0064\u0046\u0069\u006c\u006c\u0042i\u006e\u0061\u0072\u0079";
if _fefg ==nil {return nil ,_g .Error (_dbfg ,"s\u006fu\u0072\u0063\u0065\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");};if _dfgd ==nil {return nil ,_g .Error (_dbfg ,"'\u006da\u0073\u006b\u0027\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");
};if _dfag !=4&&_dfag !=8{return nil ,_g .Error (_dbfg ,"\u0063\u006f\u006en\u0065\u0063\u0074\u0069v\u0069\u0074\u0079\u0020\u006e\u006f\u0074 \u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0034\u002c\u0038\u007d");};var _fgcea error ;_aebb ,_fgcea =_cgde (_aebb ,_fefg );
if _fgcea !=nil {return nil ,_g .Wrap (_fgcea ,_dbfg ,"\u0063o\u0070y\u0020\u0073\u006f\u0075\u0072c\u0065\u0020t\u006f\u0020\u0027\u0064\u0027");};_dgbdc :=_fefg .createTemplate ();_dfgd .setPadBits (0);for _bbca :=0;_bbca < _ggda ;_bbca ++{_dgbdc ,_fgcea =_cgde (_dgbdc ,_aebb );
if _fgcea !=nil {return nil ,_g .Wrapf (_fgcea ,_dbfg ,"\u0069\u0074\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064",_bbca );};if _fgcea =_caad (_aebb ,_dfgd ,_dfag );_fgcea !=nil {return nil ,_g .Wrapf (_fgcea ,_dbfg ,"\u0069\u0074\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064",_bbca );
};if _dgbdc .Equals (_aebb ){break ;};};return _aebb ,nil ;};func (_bdcd Points )YSorter ()func (_abege ,_abgc int )bool {return func (_eeee ,_feeb int )bool {return _bdcd [_eeee ].Y < _bdcd [_feeb ].Y };};func _fd (_ee *Bitmap ,_bd int )(*Bitmap ,error ){const _ge ="\u0065x\u0070a\u006e\u0064\u0042\u0069\u006ea\u0072\u0079P\u006f\u0077\u0065\u0072\u0032";
if _ee ==nil {return nil ,_g .Error (_ge ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _bd ==1{return _cgde (nil ,_ee );};if _bd !=2&&_bd !=4&&_bd !=8{return nil ,_g .Error (_ge ,"\u0066\u0061\u0063t\u006f\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0069n\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d\u0020\u0072\u0061\u006e\u0067\u0065");
};_efa :=_bd *_ee .Width ;_bdg :=_bd *_ee .Height ;_be :=New (_efa ,_bdg );var _ebe error ;switch _bd {case 2:_ebe =_dd (_be ,_ee );case 4:_ebe =_gab (_be ,_ee );case 8:_ebe =_gda (_be ,_ee );};if _ebe !=nil {return nil ,_g .Wrap (_ebe ,_ge ,"");};return _be ,nil ;
};func (_cdfg *byHeight )Less (i ,j int )bool {return _cdfg .Values [i ].Height < _cdfg .Values [j ].Height };const (AsymmetricMorphBC BoundaryCondition =iota ;SymmetricMorphBC ;);func (_abef *Bitmaps )SortByHeight (){_cedg :=(*byHeight )(_abef );_d .Sort (_cedg )};
func (_bdgg *Bitmaps )GetBitmap (i int )(*Bitmap ,error ){const _fbafc ="\u0047e\u0074\u0042\u0069\u0074\u006d\u0061p";if _bdgg ==nil {return nil ,_g .Error (_fbafc ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0042\u0069\u0074ma\u0070\u0073");
};if i > len (_bdgg .Values )-1{return nil ,_g .Errorf (_fbafc ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _bdgg .Values [i ],nil ;};func (_fcaf *ClassedPoints )Less (i ,j int )bool {return _fcaf ._dbcd (i ,j )};
type SizeComparison int ;func (_bdcda *ClassedPoints )Len ()int {return _bdcda .IntSlice .Size ()};func (_ccfc *Bitmap )CountPixels ()int {return _ccfc .countPixels ()};func (_ccadb *Bitmaps )WidthSorter ()func (_caacf ,_dced int )bool {return func (_gdead ,_edgg int )bool {return _ccadb .Values [_gdead ].Width < _ccadb .Values [_edgg ].Width };
};func RasterOperation (dest *Bitmap ,dx ,dy ,dw ,dh int ,op RasterOperator ,src *Bitmap ,sx ,sy int )error {return _gddaa (dest ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );};func _ccfb (_gaag *Bitmap ,_ggfb int )(*Bitmap ,error ){const _ddca ="\u0065x\u0070a\u006e\u0064\u0052\u0065\u0070\u006c\u0069\u0063\u0061\u0074\u0065";
if _gaag ==nil {return nil ,_g .Error (_ddca ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _ggfb <=0{return nil ,_g .Error (_ddca ,"i\u006e\u0076\u0061\u006cid\u0020f\u0061\u0063\u0074\u006f\u0072 \u002d\u0020\u003c\u003d\u0020\u0030");
};if _ggfb ==1{_facec ,_ddfa :=_cgde (nil ,_gaag );if _ddfa !=nil {return nil ,_g .Wrap (_ddfa ,_ddca ,"\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u003d\u0020\u0031");};return _facec ,nil ;};_fcfd ,_bgab :=_ed (_gaag ,_ggfb ,_ggfb );if _bgab !=nil {return nil ,_g .Wrap (_bgab ,_ddca ,"");
};return _fcfd ,nil ;};type RasterOperator int ;const (_ LocationFilter =iota ;LocSelectWidth ;LocSelectHeight ;LocSelectXVal ;LocSelectYVal ;LocSelectIfEither ;LocSelectIfBoth ;);func (_dfcg *Bitmap )setFourBytes (_gced int ,_fefe uint32 )error {if _gced +3> len (_dfcg .Data )-1{return _g .Errorf ("\u0073\u0065\u0074F\u006f\u0075\u0072\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_gced );
};_dfcg .Data [_gced ]=byte ((_fefe &0xff000000)>>24);_dfcg .Data [_gced +1]=byte ((_fefe &0xff0000)>>16);_dfcg .Data [_gced +2]=byte ((_fefe &0xff00)>>8);_dfcg .Data [_gced +3]=byte (_fefe &0xff);return nil ;};func (_faef *Bitmap )Copy ()*Bitmap {_gcf :=make ([]byte ,len (_faef .Data ));
copy (_gcf ,_faef .Data );return &Bitmap {Width :_faef .Width ,Height :_faef .Height ,RowStride :_faef .RowStride ,Data :_gcf ,Color :_faef .Color ,Text :_faef .Text ,BitmapNumber :_faef .BitmapNumber ,Special :_faef .Special };};func (_cfbd *Bitmap )thresholdPixelSum (_gbgba int )bool {var (_gdg int ;
_fgfa uint8 ;_gee byte ;_cgab int ;);_cdae :=_cfbd .RowStride ;_eafb :=uint (_cfbd .Width &0x07);if _eafb !=0{_fgfa =uint8 ((0xff<<(8-_eafb ))&0xff);_cdae --;};for _afeaf :=0;_afeaf < _cfbd .Height ;_afeaf ++{for _cgab =0;_cgab < _cdae ;_cgab ++{_gee =_cfbd .Data [_afeaf *_cfbd .RowStride +_cgab ];
_gdg +=int (_ffa [_gee ]);};if _eafb !=0{_gee =_cfbd .Data [_afeaf *_cfbd .RowStride +_cgab ]&_fgfa ;_gdg +=int (_ffa [_gee ]);};if _gdg > _gbgba {return true ;};};return false ;};func (_bdgb *Bitmap )addBorderGeneral (_cag ,_abe ,_cdbd ,_deb int ,_ecb int )(*Bitmap ,error ){const _cbde ="\u0061\u0064d\u0042\u006f\u0072d\u0065\u0072\u0047\u0065\u006e\u0065\u0072\u0061\u006c";
if _cag < 0||_abe < 0||_cdbd < 0||_deb < 0{return nil ,_g .Error (_cbde ,"n\u0065\u0067\u0061\u0074iv\u0065 \u0062\u006f\u0072\u0064\u0065r\u0020\u0061\u0064\u0064\u0065\u0064");};_cef ,_bgef :=_bdgb .Width ,_bdgb .Height ;_fffd :=_cef +_cag +_abe ;_bfge :=_bgef +_cdbd +_deb ;
_fccb :=New (_fffd ,_bfge );_fccb .Color =_bdgb .Color ;_gfc :=PixClr ;if _ecb > 0{_gfc =PixSet ;};_egee :=_fccb .RasterOperation (0,0,_cag ,_bfge ,_gfc ,nil ,0,0);if _egee !=nil {return nil ,_g .Wrap (_egee ,_cbde ,"\u006c\u0065\u0066\u0074");};_egee =_fccb .RasterOperation (_fffd -_abe ,0,_abe ,_bfge ,_gfc ,nil ,0,0);
if _egee !=nil {return nil ,_g .Wrap (_egee ,_cbde ,"\u0072\u0069\u0067h\u0074");};_egee =_fccb .RasterOperation (0,0,_fffd ,_cdbd ,_gfc ,nil ,0,0);if _egee !=nil {return nil ,_g .Wrap (_egee ,_cbde ,"\u0074\u006f\u0070");};_egee =_fccb .RasterOperation (0,_bfge -_deb ,_fffd ,_deb ,_gfc ,nil ,0,0);
if _egee !=nil {return nil ,_g .Wrap (_egee ,_cbde ,"\u0062\u006f\u0074\u0074\u006f\u006d");};_egee =_fccb .RasterOperation (_cag ,_cdbd ,_cef ,_bgef ,PixSrc ,_bdgb ,0,0);if _egee !=nil {return nil ,_g .Wrap (_egee ,_cbde ,"\u0063\u006f\u0070\u0079");};
return _fccb ,nil ;};func (_ceec *byHeight )Len ()int {return len (_ceec .Values )};func (_edd *Bitmap )GetUnpaddedData ()([]byte ,error ){_aed :=uint (_edd .Width &0x07);if _aed ==0{return _edd .Data ,nil ;};_accg :=_edd .Width *_edd .Height ;if _accg %8!=0{_accg >>=3;
_accg ++;}else {_accg >>=3;};_fgc :=make ([]byte ,_accg );_eab :=_ga .NewWriterMSB (_fgc );const _fdg ="\u0047e\u0074U\u006e\u0070\u0061\u0064\u0064\u0065\u0064\u0044\u0061\u0074\u0061";for _ebef :=0;_ebef < _edd .Height ;_ebef ++{for _ddaa :=0;_ddaa < _edd .RowStride ;
_ddaa ++{_egg :=_edd .Data [_ebef *_edd .RowStride +_ddaa ];if _ddaa !=_edd .RowStride -1{_baag :=_eab .WriteByte (_egg );if _baag !=nil {return nil ,_g .Wrap (_baag ,_fdg ,"");};continue ;};for _edf :=uint (0);_edf < _aed ;_edf ++{_edcf :=_eab .WriteBit (int (_egg >>(7-_edf )&0x01));
if _edcf !=nil {return nil ,_g .Wrap (_edcf ,_fdg ,"");};};};};return _fgc ,nil ;};func _cgeb (_gcbcc *Bitmap ,_gfda ,_abgcc int ,_acbeg ,_ffceg int ,_edaf RasterOperator ){var (_aggba bool ;_eefdc bool ;_fbgg int ;_dggcd int ;_adg int ;_cebe int ;_effa bool ;
_bgbc byte ;);_bedf :=8-(_gfda &7);_bbfb :=_gbfbd [_bedf ];_dcff :=_gcbcc .RowStride *_abgcc +(_gfda >>3);if _acbeg < _bedf {_aggba =true ;_bbfb &=_ceaad [8-_bedf +_acbeg ];};if !_aggba {_fbgg =(_acbeg -_bedf )>>3;if _fbgg !=0{_eefdc =true ;_dggcd =_dcff +1;
};};_adg =(_gfda +_acbeg )&7;if !(_aggba ||_adg ==0){_effa =true ;_bgbc =_ceaad [_adg ];_cebe =_dcff +1+_fbgg ;};var _acaa ,_baee int ;switch _edaf {case PixClr :for _acaa =0;_acaa < _ffceg ;_acaa ++{_gcbcc .Data [_dcff ]=_accd (_gcbcc .Data [_dcff ],0x0,_bbfb );
_dcff +=_gcbcc .RowStride ;};if _eefdc {for _acaa =0;_acaa < _ffceg ;_acaa ++{for _baee =0;_baee < _fbgg ;_baee ++{_gcbcc .Data [_dggcd +_baee ]=0x0;};_dggcd +=_gcbcc .RowStride ;};};if _effa {for _acaa =0;_acaa < _ffceg ;_acaa ++{_gcbcc .Data [_cebe ]=_accd (_gcbcc .Data [_cebe ],0x0,_bgbc );
_cebe +=_gcbcc .RowStride ;};};case PixSet :for _acaa =0;_acaa < _ffceg ;_acaa ++{_gcbcc .Data [_dcff ]=_accd (_gcbcc .Data [_dcff ],0xff,_bbfb );_dcff +=_gcbcc .RowStride ;};if _eefdc {for _acaa =0;_acaa < _ffceg ;_acaa ++{for _baee =0;_baee < _fbgg ;
_baee ++{_gcbcc .Data [_dggcd +_baee ]=0xff;};_dggcd +=_gcbcc .RowStride ;};};if _effa {for _acaa =0;_acaa < _ffceg ;_acaa ++{_gcbcc .Data [_cebe ]=_accd (_gcbcc .Data [_cebe ],0xff,_bgbc );_cebe +=_gcbcc .RowStride ;};};case PixNotDst :for _acaa =0;_acaa < _ffceg ;
_acaa ++{_gcbcc .Data [_dcff ]=_accd (_gcbcc .Data [_dcff ],^_gcbcc .Data [_dcff ],_bbfb );_dcff +=_gcbcc .RowStride ;};if _eefdc {for _acaa =0;_acaa < _ffceg ;_acaa ++{for _baee =0;_baee < _fbgg ;_baee ++{_gcbcc .Data [_dggcd +_baee ]=^(_gcbcc .Data [_dggcd +_baee ]);
};_dggcd +=_gcbcc .RowStride ;};};if _effa {for _acaa =0;_acaa < _ffceg ;_acaa ++{_gcbcc .Data [_cebe ]=_accd (_gcbcc .Data [_cebe ],^_gcbcc .Data [_cebe ],_bgbc );_cebe +=_gcbcc .RowStride ;};};};};const (Vanilla Color =iota ;Chocolate ;);func (_cceb *Bitmap )SetDefaultPixel (){for _gebf :=range _cceb .Data {_cceb .Data [_gebf ]=byte (0xff);
};};func (_dfae *Bitmaps )CountPixels ()*_cd .NumSlice {_fcdc :=&_cd .NumSlice {};for _ ,_aaca :=range _dfae .Values {_fcdc .AddInt (_aaca .CountPixels ());};return _fcdc ;};func (_fdgb *Bitmap )countPixels ()int {var (_agca int ;_gga uint8 ;_aca byte ;
_fgb int ;);_cffd :=_fdgb .RowStride ;_gddc :=uint (_fdgb .Width &0x07);if _gddc !=0{_gga =uint8 ((0xff<<(8-_gddc ))&0xff);_cffd --;};for _cfg :=0;_cfg < _fdgb .Height ;_cfg ++{for _fgb =0;_fgb < _cffd ;_fgb ++{_aca =_fdgb .Data [_cfg *_fdgb .RowStride +_fgb ];
_agca +=int (_ffa [_aca ]);};if _gddc !=0{_agca +=int (_ffa [_fdgb .Data [_cfg *_fdgb .RowStride +_fgb ]&_gga ]);};};return _agca ;};func (_aag *Boxes )SelectBySize (width ,height int ,tp LocationFilter ,relation SizeComparison )(_ggf *Boxes ,_bgeg error ){const _cfaf ="\u0042o\u0078e\u0073\u002e\u0053\u0065\u006ce\u0063\u0074B\u0079\u0053\u0069\u007a\u0065";
if _aag ==nil {return nil ,_g .Error (_cfaf ,"b\u006f\u0078\u0065\u0073 '\u0062'\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064");};if len (*_aag )==0{return _aag ,nil ;};switch tp {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_g .Errorf (_cfaf ,"\u0069\u006e\u0076al\u0069\u0064\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",tp );
};switch relation {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE :default:return nil ,_g .Errorf (_cfaf ,"i\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0020t\u0079\u0070\u0065:\u0020'\u0025\u0064\u0027",tp );
};_fedd :=_aag .makeSizeIndicator (width ,height ,tp ,relation );_ebbd ,_bgeg :=_aag .selectWithIndicator (_fedd );if _bgeg !=nil {return nil ,_g .Wrap (_bgeg ,_cfaf ,"");};return _ebbd ,nil ;};func (_abgd *Bitmap )SetPadBits (value int ){_abgd .setPadBits (value )};
func (_bbaf Points )GetGeometry (i int )(_ffec ,_fcgb float32 ,_gddf error ){if i > len (_bbaf )-1{return 0,0,_g .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};_aefg :=_bbaf [i ];return _aefg .X ,_aefg .Y ,nil ;};func (_gcd *Bitmap )String ()string {var _badg ="\u000a";for _fbfc :=0;_fbfc < _gcd .Height ;_fbfc ++{var _cde string ;for _cae :=0;_cae < _gcd .Width ;_cae ++{_cfe :=_gcd .GetPixel (_cae ,_fbfc );
if _cfe {_cde +="\u0031";}else {_cde +="\u0030";};};_badg +=_cde +"\u000a";};return _badg ;};func TstFrameBitmap ()*Bitmap {return _cdgf .Copy ()};func (_debf *BitmapsArray )AddBitmaps (bm *Bitmaps ){_debf .Values =append (_debf .Values ,bm )};func _gddaa (_faeb *Bitmap ,_gbcc ,_dbgd ,_gffa ,_faaa int ,_fdde RasterOperator ,_caac *Bitmap ,_dfecb ,_ffbg int )error {const _cdaf ="\u0072a\u0073t\u0065\u0072\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e";
if _faeb ==nil {return _g .Error (_cdaf ,"\u006e\u0069\u006c\u0020\u0027\u0064\u0065\u0073\u0074\u0027\u0020\u0042i\u0074\u006d\u0061\u0070");};if _fdde ==PixDst {return nil ;};switch _fdde {case PixClr ,PixSet ,PixNotDst :_gcad (_faeb ,_gbcc ,_dbgd ,_gffa ,_faaa ,_fdde );
return nil ;};if _caac ==nil {_b .Log .Debug ("\u0052a\u0073\u0074e\u0072\u004f\u0070\u0065r\u0061\u0074\u0069o\u006e\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020bi\u0074\u006d\u0061p\u0020\u0069s\u0020\u006e\u006f\u0074\u0020\u0064e\u0066\u0069n\u0065\u0064");
return _g .Error (_cdaf ,"\u006e\u0069l\u0020\u0027\u0073r\u0063\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _gdbf :=_fegeg (_faeb ,_gbcc ,_dbgd ,_gffa ,_faaa ,_fdde ,_caac ,_dfecb ,_ffbg );_gdbf !=nil {return _g .Wrap (_gdbf ,_cdaf ,"");};return nil ;
};func TstWriteSymbols (t *_a .T ,bms *Bitmaps ,src *Bitmap ){for _bfgc :=0;_bfgc < bms .Size ();_bfgc ++{_afee :=bms .Values [_bfgc ];_gded :=bms .Boxes [_bfgc ];_faced :=src .RasterOperation (_gded .Min .X ,_gded .Min .Y ,_afee .Width ,_afee .Height ,PixSrc ,_afee ,0,0);
_c .NoError (t ,_faced );};};func (_ccgbf *BitmapsArray )GetBox (i int )(*_ff .Rectangle ,error ){const _cdee ="\u0042\u0069\u0074\u006dap\u0073\u0041\u0072\u0072\u0061\u0079\u002e\u0047\u0065\u0074\u0042\u006f\u0078";if _ccgbf ==nil {return nil ,_g .Error (_cdee ,"p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074m\u0061\u0070\u0073A\u0072r\u0061\u0079\u0027");
};if i > len (_ccgbf .Boxes )-1{return nil ,_g .Errorf (_cdee ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _ccgbf .Boxes [i ],nil ;};func CombineBytes (oldByte ,newByte byte ,op CombinationOperator )byte {return _fgcb (oldByte ,newByte ,op );
};func TstISymbol (t *_a .T ,scale ...int )*Bitmap {_bcfd ,_aecb :=NewWithData (1,5,[]byte {0x80,0x80,0x80,0x80,0x80});_c .NoError (t ,_aecb );return TstGetScaledSymbol (t ,_bcfd ,scale ...);};func _gab (_gc ,_ec *Bitmap )(_cad error ){const _ag ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0034";
_gbb :=_ec .RowStride ;_daa :=_gc .RowStride ;_aab :=_ec .RowStride *4-_gc .RowStride ;var (_daaf ,_fe byte ;_cg uint32 ;_eb ,_bbe ,_ef ,_af ,_ad ,_fg ,_df int ;);for _ef =0;_ef < _ec .Height ;_ef ++{_eb =_ef *_gbb ;_bbe =4*_ef *_daa ;for _af =0;_af < _gbb ;
_af ++{_daaf =_ec .Data [_eb +_af ];_cg =_bffg [_daaf ];_fg =_bbe +_af *4;if _aab !=0&&(_af +1)*4> _gc .RowStride {for _ad =_aab ;_ad > 0;_ad --{_fe =byte ((_cg >>uint (_ad *8))&0xff);_df =_fg +(_aab -_ad );if _cad =_gc .SetByte (_df ,_fe );_cad !=nil {return _g .Wrapf (_cad ,_ag ,"D\u0069\u0066\u0066\u0065\u0072\u0065n\u0074\u0020\u0072\u006f\u0077\u0073\u0074\u0072\u0069d\u0065\u0073\u002e \u004b:\u0020\u0025\u0064",_ad );
};};}else if _cad =_gc .setFourBytes (_fg ,_cg );_cad !=nil {return _g .Wrap (_cad ,_ag ,"");};if _cad =_gc .setFourBytes (_bbe +_af *4,_bffg [_ec .Data [_eb +_af ]]);_cad !=nil {return _g .Wrap (_cad ,_ag ,"");};};for _ad =1;_ad < 4;_ad ++{for _af =0;
_af < _daa ;_af ++{if _cad =_gc .SetByte (_bbe +_ad *_daa +_af ,_gc .Data [_bbe +_af ]);_cad !=nil {return _g .Wrapf (_cad ,_ag ,"\u0063\u006f\u0070\u0079\u0020\u0027\u0071\u0075\u0061\u0064\u0072\u0061\u0062l\u0065\u0027\u0020\u006c\u0069\u006ee\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0062\u0079\u0074\u0065\u003a \u0027\u0025\u0064\u0027",_ad ,_af );
};};};};return nil ;};func _gfea (_gfff *Bitmap ,_cbfc ,_faebd ,_cfdaa ,_dbea int ,_dbfd RasterOperator ,_bfga *Bitmap ,_bebe ,_cecd int )error {var (_dacc byte ;_ggadg int ;_badgb int ;_gagb ,_efca int ;_gedag ,_gefa int ;);_bfee :=_cfdaa >>3;_caea :=_cfdaa &7;
if _caea > 0{_dacc =_ceaad [_caea ];};_ggadg =_bfga .RowStride *_cecd +(_bebe >>3);_badgb =_gfff .RowStride *_faebd +(_cbfc >>3);switch _dbfd {case PixSrc :for _gedag =0;_gedag < _dbea ;_gedag ++{_gagb =_ggadg +_gedag *_bfga .RowStride ;_efca =_badgb +_gedag *_gfff .RowStride ;
for _gefa =0;_gefa < _bfee ;_gefa ++{_gfff .Data [_efca ]=_bfga .Data [_gagb ];_efca ++;_gagb ++;};if _caea > 0{_gfff .Data [_efca ]=_accd (_gfff .Data [_efca ],_bfga .Data [_gagb ],_dacc );};};case PixNotSrc :for _gedag =0;_gedag < _dbea ;_gedag ++{_gagb =_ggadg +_gedag *_bfga .RowStride ;
_efca =_badgb +_gedag *_gfff .RowStride ;for _gefa =0;_gefa < _bfee ;_gefa ++{_gfff .Data [_efca ]=^(_bfga .Data [_gagb ]);_efca ++;_gagb ++;};if _caea > 0{_gfff .Data [_efca ]=_accd (_gfff .Data [_efca ],^_bfga .Data [_gagb ],_dacc );};};case PixSrcOrDst :for _gedag =0;
_gedag < _dbea ;_gedag ++{_gagb =_ggadg +_gedag *_bfga .RowStride ;_efca =_badgb +_gedag *_gfff .RowStride ;for _gefa =0;_gefa < _bfee ;_gefa ++{_gfff .Data [_efca ]|=_bfga .Data [_gagb ];_efca ++;_gagb ++;};if _caea > 0{_gfff .Data [_efca ]=_accd (_gfff .Data [_efca ],_bfga .Data [_gagb ]|_gfff .Data [_efca ],_dacc );
};};case PixSrcAndDst :for _gedag =0;_gedag < _dbea ;_gedag ++{_gagb =_ggadg +_gedag *_bfga .RowStride ;_efca =_badgb +_gedag *_gfff .RowStride ;for _gefa =0;_gefa < _bfee ;_gefa ++{_gfff .Data [_efca ]&=_bfga .Data [_gagb ];_efca ++;_gagb ++;};if _caea > 0{_gfff .Data [_efca ]=_accd (_gfff .Data [_efca ],_bfga .Data [_gagb ]&_gfff .Data [_efca ],_dacc );
};};case PixSrcXorDst :for _gedag =0;_gedag < _dbea ;_gedag ++{_gagb =_ggadg +_gedag *_bfga .RowStride ;_efca =_badgb +_gedag *_gfff .RowStride ;for _gefa =0;_gefa < _bfee ;_gefa ++{_gfff .Data [_efca ]^=_bfga .Data [_gagb ];_efca ++;_gagb ++;};if _caea > 0{_gfff .Data [_efca ]=_accd (_gfff .Data [_efca ],_bfga .Data [_gagb ]^_gfff .Data [_efca ],_dacc );
};};case PixNotSrcOrDst :for _gedag =0;_gedag < _dbea ;_gedag ++{_gagb =_ggadg +_gedag *_bfga .RowStride ;_efca =_badgb +_gedag *_gfff .RowStride ;for _gefa =0;_gefa < _bfee ;_gefa ++{_gfff .Data [_efca ]|=^(_bfga .Data [_gagb ]);_efca ++;_gagb ++;};if _caea > 0{_gfff .Data [_efca ]=_accd (_gfff .Data [_efca ],^(_bfga .Data [_gagb ])|_gfff .Data [_efca ],_dacc );
};};case PixNotSrcAndDst :for _gedag =0;_gedag < _dbea ;_gedag ++{_gagb =_ggadg +_gedag *_bfga .RowStride ;_efca =_badgb +_gedag *_gfff .RowStride ;for _gefa =0;_gefa < _bfee ;_gefa ++{_gfff .Data [_efca ]&=^(_bfga .Data [_gagb ]);_efca ++;_gagb ++;};if _caea > 0{_gfff .Data [_efca ]=_accd (_gfff .Data [_efca ],^(_bfga .Data [_gagb ])&_gfff .Data [_efca ],_dacc );
};};case PixSrcOrNotDst :for _gedag =0;_gedag < _dbea ;_gedag ++{_gagb =_ggadg +_gedag *_bfga .RowStride ;_efca =_badgb +_gedag *_gfff .RowStride ;for _gefa =0;_gefa < _bfee ;_gefa ++{_gfff .Data [_efca ]=_bfga .Data [_gagb ]|^(_gfff .Data [_efca ]);_efca ++;
_gagb ++;};if _caea > 0{_gfff .Data [_efca ]=_accd (_gfff .Data [_efca ],_bfga .Data [_gagb ]|^(_gfff .Data [_efca ]),_dacc );};};case PixSrcAndNotDst :for _gedag =0;_gedag < _dbea ;_gedag ++{_gagb =_ggadg +_gedag *_bfga .RowStride ;_efca =_badgb +_gedag *_gfff .RowStride ;
for _gefa =0;_gefa < _bfee ;_gefa ++{_gfff .Data [_efca ]=_bfga .Data [_gagb ]&^(_gfff .Data [_efca ]);_efca ++;_gagb ++;};if _caea > 0{_gfff .Data [_efca ]=_accd (_gfff .Data [_efca ],_bfga .Data [_gagb ]&^(_gfff .Data [_efca ]),_dacc );};};case PixNotPixSrcOrDst :for _gedag =0;
_gedag < _dbea ;_gedag ++{_gagb =_ggadg +_gedag *_bfga .RowStride ;_efca =_badgb +_gedag *_gfff .RowStride ;for _gefa =0;_gefa < _bfee ;_gefa ++{_gfff .Data [_efca ]=^(_bfga .Data [_gagb ]|_gfff .Data [_efca ]);_efca ++;_gagb ++;};if _caea > 0{_gfff .Data [_efca ]=_accd (_gfff .Data [_efca ],^(_bfga .Data [_gagb ]|_gfff .Data [_efca ]),_dacc );
};};case PixNotPixSrcAndDst :for _gedag =0;_gedag < _dbea ;_gedag ++{_gagb =_ggadg +_gedag *_bfga .RowStride ;_efca =_badgb +_gedag *_gfff .RowStride ;for _gefa =0;_gefa < _bfee ;_gefa ++{_gfff .Data [_efca ]=^(_bfga .Data [_gagb ]&_gfff .Data [_efca ]);
_efca ++;_gagb ++;};if _caea > 0{_gfff .Data [_efca ]=_accd (_gfff .Data [_efca ],^(_bfga .Data [_gagb ]&_gfff .Data [_efca ]),_dacc );};};case PixNotPixSrcXorDst :for _gedag =0;_gedag < _dbea ;_gedag ++{_gagb =_ggadg +_gedag *_bfga .RowStride ;_efca =_badgb +_gedag *_gfff .RowStride ;
for _gefa =0;_gefa < _bfee ;_gefa ++{_gfff .Data [_efca ]=^(_bfga .Data [_gagb ]^_gfff .Data [_efca ]);_efca ++;_gagb ++;};if _caea > 0{_gfff .Data [_efca ]=_accd (_gfff .Data [_efca ],^(_bfga .Data [_gagb ]^_gfff .Data [_efca ]),_dacc );};};default:_b .Log .Debug ("\u0050\u0072ov\u0069\u0064\u0065d\u0020\u0069\u006e\u0076ali\u0064 r\u0061\u0073\u0074\u0065\u0072\u0020\u006fpe\u0072\u0061\u0074\u006f\u0072\u003a\u0020%\u0076",_dbfd );
return _g .Error ("\u0072\u0061\u0073\u0074er\u004f\u0070\u0042\u0079\u0074\u0065\u0041\u006c\u0069\u0067\u006e\u0065\u0064\u004co\u0077","\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");
};return nil ;};func _accd (_bgc ,_dfecg ,_bagc byte )byte {return (_bgc &^(_bagc ))|(_dfecg &_bagc )};func _fdfe (_bbcf ,_eabg *Bitmap ,_bddf ,_bgcd int )(_dbb error ){const _eedb ="\u0073e\u0065d\u0066\u0069\u006c\u006c\u0042i\u006e\u0061r\u0079\u004c\u006f\u0077\u0038";
var (_cfcba ,_abge ,_cffcb ,_gebca int ;_cged ,_bdab ,_ddfg ,_eedde ,_aaff ,_dddbg ,_efgfa ,_daada byte ;);for _cfcba =0;_cfcba < _bddf ;_cfcba ++{_cffcb =_cfcba *_bbcf .RowStride ;_gebca =_cfcba *_eabg .RowStride ;for _abge =0;_abge < _bgcd ;_abge ++{if _cged ,_dbb =_bbcf .GetByte (_cffcb +_abge );
_dbb !=nil {return _g .Wrap (_dbb ,_eedb ,"\u0067e\u0074 \u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");};if _bdab ,_dbb =_eabg .GetByte (_gebca +_abge );_dbb !=nil {return _g .Wrap (_dbb ,_eedb ,"\u0067\u0065\u0074\u0020\u006d\u0061\u0073\u006b\u0020\u0062\u0079\u0074\u0065");
};if _cfcba > 0{if _ddfg ,_dbb =_bbcf .GetByte (_cffcb -_bbcf .RowStride +_abge );_dbb !=nil {return _g .Wrap (_dbb ,_eedb ,"\u0069\u0020\u003e\u0020\u0030\u0020\u0062\u0079\u0074\u0065");};_cged |=_ddfg |(_ddfg <<1)|(_ddfg >>1);if _abge > 0{if _daada ,_dbb =_bbcf .GetByte (_cffcb -_bbcf .RowStride +_abge -1);
_dbb !=nil {return _g .Wrap (_dbb ,_eedb ,"\u0069\u0020\u003e\u00200 \u0026\u0026\u0020\u006a\u0020\u003e\u0020\u0030\u0020\u0062\u0079\u0074\u0065");};_cged |=_daada <<7;};if _abge < _bgcd -1{if _daada ,_dbb =_bbcf .GetByte (_cffcb -_bbcf .RowStride +_abge +1);
_dbb !=nil {return _g .Wrap (_dbb ,_eedb ,"\u006a\u0020<\u0020\u0077\u0070l\u0020\u002d\u0020\u0031\u0020\u0062\u0079\u0074\u0065");};_cged |=_daada >>7;};};if _abge > 0{if _eedde ,_dbb =_bbcf .GetByte (_cffcb +_abge -1);_dbb !=nil {return _g .Wrap (_dbb ,_eedb ,"\u006a\u0020\u003e \u0030");
};_cged |=_eedde <<7;};_cged &=_bdab ;if _cged ==0||^_cged ==0{if _dbb =_bbcf .SetByte (_cffcb +_abge ,_cged );_dbb !=nil {return _g .Wrap (_dbb ,_eedb ,"\u0073e\u0074t\u0069\u006e\u0067\u0020\u0065m\u0070\u0074y\u0020\u0062\u0079\u0074\u0065");};};for {_efgfa =_cged ;
_cged =(_cged |(_cged >>1)|(_cged <<1))&_bdab ;if (_cged ^_efgfa )==0{if _dbb =_bbcf .SetByte (_cffcb +_abge ,_cged );_dbb !=nil {return _g .Wrap (_dbb ,_eedb ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0070\u0072\u0065\u0076 \u0062\u0079\u0074\u0065");
};break ;};};};};for _cfcba =_bddf -1;_cfcba >=0;_cfcba --{_cffcb =_cfcba *_bbcf .RowStride ;_gebca =_cfcba *_eabg .RowStride ;for _abge =_bgcd -1;_abge >=0;_abge --{if _cged ,_dbb =_bbcf .GetByte (_cffcb +_abge );_dbb !=nil {return _g .Wrap (_dbb ,_eedb ,"\u0072\u0065\u0076er\u0073\u0065\u0020\u0067\u0065\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");
};if _bdab ,_dbb =_eabg .GetByte (_gebca +_abge );_dbb !=nil {return _g .Wrap (_dbb ,_eedb ,"r\u0065\u0076\u0065\u0072se\u0020g\u0065\u0074\u0020\u006d\u0061s\u006b\u0020\u0062\u0079\u0074\u0065");};if _cfcba < _bddf -1{if _aaff ,_dbb =_bbcf .GetByte (_cffcb +_bbcf .RowStride +_abge );
_dbb !=nil {return _g .Wrap (_dbb ,_eedb ,"\u0069\u0020\u003c\u0020h\u0020\u002d\u0020\u0031\u0020\u002d\u003e\u0020\u0067\u0065t\u0020s\u006f\u0075\u0072\u0063\u0065\u0020\u0062y\u0074\u0065");};_cged |=_aaff |(_aaff <<1)|_aaff >>1;if _abge > 0{if _daada ,_dbb =_bbcf .GetByte (_cffcb +_bbcf .RowStride +_abge -1);
_dbb !=nil {return _g .Wrap (_dbb ,_eedb ,"\u0069\u0020\u003c h\u002d\u0031\u0020\u0026\u0020\u006a\u0020\u003e\u00200\u0020-\u003e \u0067e\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");};_cged |=_daada <<7;};if _abge < _bgcd -1{if _daada ,_dbb =_bbcf .GetByte (_cffcb +_bbcf .RowStride +_abge +1);
_dbb !=nil {return _g .Wrap (_dbb ,_eedb ,"\u0069\u0020\u003c\u0020\u0068\u002d\u0031\u0020\u0026\u0026\u0020\u006a\u0020\u003c\u0077\u0070\u006c\u002d\u0031\u0020\u002d\u003e\u0020\u0067e\u0074\u0020\u0073\u006f\u0075r\u0063\u0065 \u0062\u0079\u0074\u0065");
};_cged |=_daada >>7;};};if _abge < _bgcd -1{if _dddbg ,_dbb =_bbcf .GetByte (_cffcb +_abge +1);_dbb !=nil {return _g .Wrap (_dbb ,_eedb ,"\u006a\u0020<\u0020\u0077\u0070\u006c\u0020\u002d\u0031\u0020\u002d\u003e\u0020\u0067\u0065\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020by\u0074\u0065");
};_cged |=_dddbg >>7;};_cged &=_bdab ;if _cged ==0||(^_cged )==0{if _dbb =_bbcf .SetByte (_cffcb +_abge ,_cged );_dbb !=nil {return _g .Wrap (_dbb ,_eedb ,"\u0073e\u0074 \u006d\u0061\u0073\u006b\u0065\u0064\u0020\u0062\u0079\u0074\u0065");};};for {_efgfa =_cged ;
_cged =(_cged |(_cged >>1)|(_cged <<1))&_bdab ;if (_cged ^_efgfa )==0{if _dbb =_bbcf .SetByte (_cffcb +_abge ,_cged );_dbb !=nil {return _g .Wrap (_dbb ,_eedb ,"r\u0065\u0076\u0065\u0072se\u0020s\u0065\u0074\u0020\u0070\u0072e\u0076\u0020\u0062\u0079\u0074\u0065");
};break ;};};};};return nil ;};func TstVSymbol (t *_a .T ,scale ...int )*Bitmap {_bfda ,_acgd :=NewWithData (5,5,[]byte {0x88,0x88,0x88,0x50,0x20});_c .NoError (t ,_acgd );return TstGetScaledSymbol (t ,_bfda ,scale ...);};var _daba =[]byte {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3E,0x78,0x27,0xC2,0x27,0x91,0x00,0x22,0x48,0x21,0x03,0x24,0x91,0x00,0x22,0x48,0x21,0x02,0xA4,0x95,0x00,0x22,0x48,0x21,0x02,0x64,0x9B,0x00,0x3C,0x78,0x21,0x02,0x27,0x91,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x15,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
func _eccb (_cfca ,_bfdbd *Bitmap ,_agda *Selection )(*Bitmap ,error ){const _eddb ="\u006f\u0070\u0065\u006e";var _cdgc error ;_cfca ,_cdgc =_fggb (_cfca ,_bfdbd ,_agda );if _cdgc !=nil {return nil ,_g .Wrap (_cdgc ,_eddb ,"");};_ccbb ,_cdgc :=_dgbcf (nil ,_bfdbd ,_agda );
if _cdgc !=nil {return nil ,_g .Wrap (_cdgc ,_eddb ,"");};_ ,_cdgc =_cfcge (_cfca ,_ccbb ,_agda );if _cdgc !=nil {return nil ,_g .Wrap (_cdgc ,_eddb ,"");};return _cfca ,nil ;};func (_dbda *Bitmap )ThresholdPixelSum (thresh int ,tab8 []int )(_ffce bool ,_gggg error ){const _eba ="\u0042i\u0074\u006d\u0061\u0070\u002e\u0054\u0068\u0072\u0065\u0073\u0068o\u006c\u0064\u0050\u0069\u0078\u0065\u006c\u0053\u0075\u006d";
if tab8 ==nil {tab8 =_efaf ();};_accc :=_dbda .Width >>3;_gcda :=_dbda .Width &7;_cdcc :=byte (0xff<<uint (8-_gcda ));var (_ccga ,_bdgc ,_edea ,_gbda int ;_dfef byte ;);for _ccga =0;_ccga < _dbda .Height ;_ccga ++{_edea =_dbda .RowStride *_ccga ;for _bdgc =0;
_bdgc < _accc ;_bdgc ++{_dfef ,_gggg =_dbda .GetByte (_edea +_bdgc );if _gggg !=nil {return false ,_g .Wrap (_gggg ,_eba ,"\u0066\u0075\u006c\u006c\u0042\u0079\u0074\u0065");};_gbda +=tab8 [_dfef ];};if _gcda !=0{_dfef ,_gggg =_dbda .GetByte (_edea +_bdgc );
if _gggg !=nil {return false ,_g .Wrap (_gggg ,_eba ,"p\u0061\u0072\u0074\u0069\u0061\u006c\u0042\u0079\u0074\u0065");};_dfef &=_cdcc ;_gbda +=tab8 [_dfef ];};if _gbda > thresh {return true ,nil ;};};return _ffce ,nil ;};func (_ebagb *Bitmaps )makeSizeIndicator (_ebac ,_fdcg int ,_efga LocationFilter ,_gbccd SizeComparison )(_eecdd *_cd .NumSlice ,_cdbeb error ){const _debc ="\u0042i\u0074\u006d\u0061\u0070s\u002e\u006d\u0061\u006b\u0065S\u0069z\u0065I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";
if _ebagb ==nil {return nil ,_g .Error (_debc ,"\u0062\u0069\u0074ma\u0070\u0073\u0020\u0027\u0062\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};switch _efga {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_g .Errorf (_debc ,"\u0070\u0072\u006f\u0076\u0069d\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u006fc\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",_efga );
};switch _gbccd {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE ,SizeSelectIfEQ :default:return nil ,_g .Errorf (_debc ,"\u0069\u006e\u0076\u0061li\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025d\u0027",_gbccd );
};_eecdd =&_cd .NumSlice {};var (_babc ,_cbec ,_cebg int ;_bdba *Bitmap ;);for _ ,_bdba =range _ebagb .Values {_babc =0;_cbec ,_cebg =_bdba .Width ,_bdba .Height ;switch _efga {case LocSelectWidth :if (_gbccd ==SizeSelectIfLT &&_cbec < _ebac )||(_gbccd ==SizeSelectIfGT &&_cbec > _ebac )||(_gbccd ==SizeSelectIfLTE &&_cbec <=_ebac )||(_gbccd ==SizeSelectIfGTE &&_cbec >=_ebac )||(_gbccd ==SizeSelectIfEQ &&_cbec ==_ebac ){_babc =1;
};case LocSelectHeight :if (_gbccd ==SizeSelectIfLT &&_cebg < _fdcg )||(_gbccd ==SizeSelectIfGT &&_cebg > _fdcg )||(_gbccd ==SizeSelectIfLTE &&_cebg <=_fdcg )||(_gbccd ==SizeSelectIfGTE &&_cebg >=_fdcg )||(_gbccd ==SizeSelectIfEQ &&_cebg ==_fdcg ){_babc =1;
};case LocSelectIfEither :if (_gbccd ==SizeSelectIfLT &&(_cbec < _ebac ||_cebg < _fdcg ))||(_gbccd ==SizeSelectIfGT &&(_cbec > _ebac ||_cebg > _fdcg ))||(_gbccd ==SizeSelectIfLTE &&(_cbec <=_ebac ||_cebg <=_fdcg ))||(_gbccd ==SizeSelectIfGTE &&(_cbec >=_ebac ||_cebg >=_fdcg ))||(_gbccd ==SizeSelectIfEQ &&(_cbec ==_ebac ||_cebg ==_fdcg )){_babc =1;
};case LocSelectIfBoth :if (_gbccd ==SizeSelectIfLT &&(_cbec < _ebac &&_cebg < _fdcg ))||(_gbccd ==SizeSelectIfGT &&(_cbec > _ebac &&_cebg > _fdcg ))||(_gbccd ==SizeSelectIfLTE &&(_cbec <=_ebac &&_cebg <=_fdcg ))||(_gbccd ==SizeSelectIfGTE &&(_cbec >=_ebac &&_cebg >=_fdcg ))||(_gbccd ==SizeSelectIfEQ &&(_cbec ==_ebac &&_cebg ==_fdcg )){_babc =1;
};};_eecdd .AddInt (_babc );};return _eecdd ,nil ;};func ClipBoxToRectangle (box *_ff .Rectangle ,wi ,hi int )(_ffcd *_ff .Rectangle ,_ddd error ){const _eefc ="\u0043l\u0069p\u0042\u006f\u0078\u0054\u006fR\u0065\u0063t\u0061\u006e\u0067\u006c\u0065";if box ==nil {return nil ,_g .Error (_eefc ,"\u0027\u0062\u006f\u0078\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};if box .Min .X >=wi ||box .Min .Y >=hi ||box .Max .X <=0||box .Max .Y <=0{return nil ,_g .Error (_eefc ,"\u0027\u0062\u006fx'\u0020\u006f\u0075\u0074\u0073\u0069\u0064\u0065\u0020\u0072\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065");};_cbb :=*box ;
_ffcd =&_cbb ;if _ffcd .Min .X < 0{_ffcd .Max .X +=_ffcd .Min .X ;_ffcd .Min .X =0;};if _ffcd .Min .Y < 0{_ffcd .Max .Y +=_ffcd .Min .Y ;_ffcd .Min .Y =0;};if _ffcd .Max .X > wi {_ffcd .Max .X =wi ;};if _ffcd .Max .Y > hi {_ffcd .Max .Y =hi ;};return _ffcd ,nil ;
};func (_cgc *Bitmap )clearAll ()error {return _cgc .RasterOperation (0,0,_cgc .Width ,_cgc .Height ,PixClr ,nil ,0,0);};func _cgf (_afa *Bitmap ,_dcd ...int )(_dbf *Bitmap ,_cga error ){const _bfe ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0043\u0061\u0073\u0063\u0061\u0064\u0065";
if _afa ==nil {return nil ,_g .Error (_bfe ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if len (_dcd )==0||len (_dcd )> 4{return nil ,_g .Error (_bfe ,"t\u0068\u0065\u0072\u0065\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0074\u0020\u006cea\u0073\u0074\u0020\u006fn\u0065\u0020\u0061\u006e\u0064\u0020\u0061\u0074\u0020mo\u0073\u0074 \u0034\u0020\u006c\u0065\u0076\u0065\u006c\u0073");
};if _dcd [0]<=0{_b .Log .Debug ("\u006c\u0065\u0076\u0065\u006c\u0031\u0020\u003c\u003d\u0020\u0030 \u002d\u0020\u006e\u006f\u0020\u0072\u0065\u0064\u0075\u0063t\u0069\u006f\u006e");_dbf ,_cga =_cgde (nil ,_afa );if _cga !=nil {return nil ,_g .Wrap (_cga ,_bfe ,"l\u0065\u0076\u0065\u006c\u0031\u0020\u003c\u003d\u0020\u0030");
};return _dbf ,nil ;};_agc :=_egef ();_dbf =_afa ;for _geb ,_bcg :=range _dcd {if _bcg <=0{break ;};_dbf ,_cga =_ebb (_dbf ,_bcg ,_agc );if _cga !=nil {return nil ,_g .Wrapf (_cga ,_bfe ,"\u006c\u0065\u0076\u0065\u006c\u0025\u0064\u0020\u0072\u0065\u0064\u0075c\u0074\u0069\u006f\u006e",_geb );
};};return _dbf ,nil ;};func (_efdge *Bitmap )GetByteIndex (x ,y int )int {return y *_efdge .RowStride +(x >>3)};func _efbg (_ebgd *_cd .Stack ,_baaa ,_dbffd ,_dafc ,_gdcg ,_gbbg int ,_eaca *_ff .Rectangle )(_dccc error ){const _afeae ="\u0070\u0075\u0073\u0068\u0046\u0069\u006c\u006c\u0053\u0065\u0067m\u0065\u006e\u0074\u0042\u006f\u0075\u006e\u0064\u0069\u006eg\u0042\u006f\u0078";
if _ebgd ==nil {return _g .Error (_afeae ,"\u006ei\u006c \u0073\u0074\u0061\u0063\u006b \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};if _eaca ==nil {return _g .Error (_afeae ,"\u0070\u0072\u006f\u0076i\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0069\u006da\u0067e\u002e\u0052\u0065\u0063\u0074\u0061\u006eg\u006c\u0065");
};_eaca .Min .X =_cd .Min (_eaca .Min .X ,_baaa );_eaca .Max .X =_cd .Max (_eaca .Max .X ,_dbffd );_eaca .Min .Y =_cd .Min (_eaca .Min .Y ,_dafc );_eaca .Max .Y =_cd .Max (_eaca .Max .Y ,_dafc );if !(_dafc +_gdcg >=0&&_dafc +_gdcg <=_gbbg ){return nil ;
};if _ebgd .Aux ==nil {return _g .Error (_afeae ,"a\u0075x\u0053\u0074\u0061\u0063\u006b\u0020\u006e\u006ft\u0020\u0064\u0065\u0066in\u0065\u0064");};var _fdba *fillSegment ;_dfecc ,_ageg :=_ebgd .Aux .Pop ();if _ageg {if _fdba ,_ageg =_dfecc .(*fillSegment );
!_ageg {return _g .Error (_afeae ,"a\u0075\u0078\u0053\u0074\u0061\u0063k\u0020\u0064\u0061\u0074\u0061\u0020i\u0073\u0020\u006e\u006f\u0074\u0020\u0061 \u002a\u0066\u0069\u006c\u006c\u0053\u0065\u0067\u006d\u0065n\u0074");};}else {_fdba =&fillSegment {};
};_fdba ._gebd =_baaa ;_fdba ._bfbce =_dbffd ;_fdba ._deab =_dafc ;_fdba ._bdeb =_gdcg ;_ebgd .Push (_fdba );return nil ;};func (_egcb *Bitmaps )GroupByHeight ()(*BitmapsArray ,error ){const _bgabc ="\u0047\u0072\u006f\u0075\u0070\u0042\u0079\u0048\u0065\u0069\u0067\u0068\u0074";
if len (_egcb .Values )==0{return nil ,_g .Error (_bgabc ,"\u006eo\u0020v\u0061\u006c\u0075\u0065\u0073 \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};_aeeab :=&BitmapsArray {};_egcb .SortByHeight ();_ccdac :=-1;_bccd :=-1;for _efebf :=0;_efebf < len (_egcb .Values );
_efebf ++{_gcgfb :=_egcb .Values [_efebf ].Height ;if _gcgfb > _ccdac {_ccdac =_gcgfb ;_bccd ++;_aeeab .Values =append (_aeeab .Values ,&Bitmaps {});};_aeeab .Values [_bccd ].AddBitmap (_egcb .Values [_efebf ]);};return _aeeab ,nil ;};func (_aad *Bitmap )setTwoBytes (_fgbf int ,_afea uint16 )error {if _fgbf +1> len (_aad .Data )-1{return _g .Errorf ("s\u0065\u0074\u0054\u0077\u006f\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_fgbf );
};_aad .Data [_fgbf ]=byte ((_afea &0xff00)>>8);_aad .Data [_fgbf +1]=byte (_afea &0xff);return nil ;};func (_ecda *Bitmap )SetByte (index int ,v byte )error {if index > len (_ecda .Data )-1||index < 0{return _g .Errorf ("\u0053e\u0074\u0042\u0079\u0074\u0065","\u0069\u006e\u0064\u0065x \u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020%\u0064",index );
};_ecda .Data [index ]=v ;return nil ;};func NewClassedPoints (points *Points ,classes _cd .IntSlice )(*ClassedPoints ,error ){const _badc ="\u004e\u0065w\u0043\u006c\u0061s\u0073\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073";if points ==nil {return nil ,_g .Error (_badc ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0070\u006f\u0069\u006e\u0074\u0073");
};if classes ==nil {return nil ,_g .Error (_badc ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0063\u006c\u0061ss\u0065\u0073");};_gdeac :=&ClassedPoints {Points :points ,IntSlice :classes };if _feebb :=_gdeac .validateIntSlice ();
_feebb !=nil {return nil ,_g .Wrap (_feebb ,_badc ,"");};return _gdeac ,nil ;};func (_agfe *Bitmaps )AddBitmap (bm *Bitmap ){_agfe .Values =append (_agfe .Values ,bm )};func _cdc (_afeg *Bitmap ,_gf *Bitmap ,_fcd int )(_bge error ){const _adb ="e\u0078\u0070\u0061\u006edB\u0069n\u0061\u0072\u0079\u0050\u006fw\u0065\u0072\u0032\u004c\u006f\u0077";
switch _fcd {case 2:_bge =_dd (_afeg ,_gf );case 4:_bge =_gab (_afeg ,_gf );case 8:_bge =_gda (_afeg ,_gf );default:return _g .Error (_adb ,"\u0065\u0078p\u0061\u006e\u0073\u0069o\u006e\u0020f\u0061\u0063\u0074\u006f\u0072\u0020\u006e\u006ft\u0020\u0069\u006e\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d\u0020r\u0061\u006e\u0067\u0065");
};if _bge !=nil {_bge =_g .Wrap (_bge ,_adb ,"");};return _bge ;};func _afbb (_cfag uint ,_eeae byte )byte {return _eeae >>_cfag <<_cfag };func _dcf ()(_gbd [256]uint32 ){for _cbc :=0;_cbc < 256;_cbc ++{if _cbc &0x01!=0{_gbd [_cbc ]|=0xf;};if _cbc &0x02!=0{_gbd [_cbc ]|=0xf0;
};if _cbc &0x04!=0{_gbd [_cbc ]|=0xf00;};if _cbc &0x08!=0{_gbd [_cbc ]|=0xf000;};if _cbc &0x10!=0{_gbd [_cbc ]|=0xf0000;};if _cbc &0x20!=0{_gbd [_cbc ]|=0xf00000;};if _cbc &0x40!=0{_gbd [_cbc ]|=0xf000000;};if _cbc &0x80!=0{_gbd [_cbc ]|=0xf0000000;};};
return _gbd ;};func _fegeg (_fbfcd *Bitmap ,_bdfc ,_eggd int ,_begf ,_fegb int ,_edeg RasterOperator ,_cbcdd *Bitmap ,_fbdec ,_bffe int )error {var _deddg ,_ggbc ,_fcfg ,_bbdeb int ;if _bdfc < 0{_fbdec -=_bdfc ;_begf +=_bdfc ;_bdfc =0;};if _fbdec < 0{_bdfc -=_fbdec ;
_begf +=_fbdec ;_fbdec =0;};_deddg =_bdfc +_begf -_fbfcd .Width ;if _deddg > 0{_begf -=_deddg ;};_ggbc =_fbdec +_begf -_cbcdd .Width ;if _ggbc > 0{_begf -=_ggbc ;};if _eggd < 0{_bffe -=_eggd ;_fegb +=_eggd ;_eggd =0;};if _bffe < 0{_eggd -=_bffe ;_fegb +=_bffe ;
_bffe =0;};_fcfg =_eggd +_fegb -_fbfcd .Height ;if _fcfg > 0{_fegb -=_fcfg ;};_bbdeb =_bffe +_fegb -_cbcdd .Height ;if _bbdeb > 0{_fegb -=_bbdeb ;};if _begf <=0||_fegb <=0{return nil ;};var _bfbd error ;switch {case _bdfc &7==0&&_fbdec &7==0:_bfbd =_gfea (_fbfcd ,_bdfc ,_eggd ,_begf ,_fegb ,_edeg ,_cbcdd ,_fbdec ,_bffe );
case _bdfc &7==_fbdec &7:_bfbd =_gece (_fbfcd ,_bdfc ,_eggd ,_begf ,_fegb ,_edeg ,_cbcdd ,_fbdec ,_bffe );default:_bfbd =_fbba (_fbfcd ,_bdfc ,_eggd ,_begf ,_fegb ,_edeg ,_cbcdd ,_fbdec ,_bffe );};if _bfbd !=nil {return _g .Wrap (_bfbd ,"r\u0061\u0073\u0074\u0065\u0072\u004f\u0070\u004c\u006f\u0077","");
};return nil ;};func (_cbfcg *Bitmaps )SelectByIndexes (idx []int )(*Bitmaps ,error ){const _geea ="B\u0069\u0074\u006d\u0061\u0070\u0073.\u0053\u006f\u0072\u0074\u0049\u006e\u0064\u0065\u0078e\u0073\u0042\u0079H\u0065i\u0067\u0068\u0074";_dbdag ,_bdce :=_cbfcg .selectByIndexes (idx );
if _bdce !=nil {return nil ,_g .Wrap (_bdce ,_geea ,"");};return _dbdag ,nil ;};func (_fbddae *BitmapsArray )AddBox (box *_ff .Rectangle ){_fbddae .Boxes =append (_fbddae .Boxes ,box )};func DilateBrick (d ,s *Bitmap ,hSize ,vSize int )(*Bitmap ,error ){return _dacf (d ,s ,hSize ,vSize )};
func (_adbdf *Bitmap )createTemplate ()*Bitmap {return &Bitmap {Width :_adbdf .Width ,Height :_adbdf .Height ,RowStride :_adbdf .RowStride ,Color :_adbdf .Color ,Text :_adbdf .Text ,BitmapNumber :_adbdf .BitmapNumber ,Special :_adbdf .Special ,Data :make ([]byte ,len (_adbdf .Data ))};
};func Dilate (d *Bitmap ,s *Bitmap ,sel *Selection )(*Bitmap ,error ){return _cfcge (d ,s ,sel )};type Color int ;func Copy (d ,s *Bitmap )(*Bitmap ,error ){return _cgde (d ,s )};func _dd (_aa ,_fb *Bitmap )(_bc error ){const _bb ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0032";
_ac :=_fb .RowStride ;_gb :=_aa .RowStride ;var (_cdb byte ;_cf uint16 ;_ba ,_ca ,_da ,_cc ,_fbc int ;);for _da =0;_da < _fb .Height ;_da ++{_ba =_da *_ac ;_ca =2*_da *_gb ;for _cc =0;_cc < _ac ;_cc ++{_cdb =_fb .Data [_ba +_cc ];_cf =_aaa [_cdb ];_fbc =_ca +_cc *2;
if _aa .RowStride !=_fb .RowStride *2&&(_cc +1)*2> _aa .RowStride {_bc =_aa .SetByte (_fbc ,byte (_cf >>8));}else {_bc =_aa .setTwoBytes (_fbc ,_cf );};if _bc !=nil {return _g .Wrap (_bc ,_bb ,"");};};for _cc =0;_cc < _gb ;_cc ++{_fbc =_ca +_gb +_cc ;_cdb =_aa .Data [_ca +_cc ];
if _bc =_aa .SetByte (_fbc ,_cdb );_bc !=nil {return _g .Wrapf (_bc ,_bb ,"c\u006f\u0070\u0079\u0020\u0064\u006fu\u0062\u006c\u0065\u0064\u0020\u006ci\u006e\u0065\u003a\u0020\u0027\u0025\u0064'\u002c\u0020\u0042\u0079\u0074\u0065\u003a\u0020\u0027\u0025d\u0027",_ca +_cc ,_ca +_gb +_cc );
};};};return nil ;};func _ffad (_fdff *Bitmap ,_deed *_cd .Stack ,_afba ,_fdea int )(_accga *_ff .Rectangle ,_abea error ){const _eeef ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";if _fdff ==nil {return nil ,_g .Error (_eeef ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");
};if _deed ==nil {return nil ,_g .Error (_eeef ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");};_ecbc ,_gba :=_fdff .Width ,_fdff .Height ;_bgedg :=_ecbc -1;_bggb :=_gba -1;if _afba < 0||_afba > _bgedg ||_fdea < 0||_fdea > _bggb ||!_fdff .GetPixel (_afba ,_fdea ){return nil ,nil ;
};_cbge :=_ff .Rect (100000,100000,0,0);if _abea =_efbg (_deed ,_afba ,_afba ,_fdea ,1,_bggb ,&_cbge );_abea !=nil {return nil ,_g .Wrap (_abea ,_eeef ,"\u0069\u006e\u0069t\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _abea =_efbg (_deed ,_afba ,_afba ,_fdea +1,-1,_bggb ,&_cbge );
_abea !=nil {return nil ,_g .Wrap (_abea ,_eeef ,"\u0032\u006ed\u0020\u0069\u006ei\u0074\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};_cbge .Min .X ,_cbge .Max .X =_afba ,_afba ;_cbge .Min .Y ,_cbge .Max .Y =_fdea ,_fdea ;var (_fgea *fillSegment ;
_agcdbb int ;);for _deed .Len ()> 0{if _fgea ,_abea =_cdbdf (_deed );_abea !=nil {return nil ,_g .Wrap (_abea ,_eeef ,"");};_fdea =_fgea ._deab ;for _afba =_fgea ._gebd -1;_afba >=0&&_fdff .GetPixel (_afba ,_fdea );_afba --{if _abea =_fdff .SetPixel (_afba ,_fdea ,0);
_abea !=nil {return nil ,_g .Wrap (_abea ,_eeef ,"\u0031s\u0074\u0020\u0073\u0065\u0074");};};if _afba >=_fgea ._gebd -1{for {for _afba ++;_afba <=_fgea ._bfbce +1&&_afba <=_bgedg &&!_fdff .GetPixel (_afba ,_fdea );_afba ++{};_agcdbb =_afba ;if !(_afba <=_fgea ._bfbce +1&&_afba <=_bgedg ){break ;
};for ;_afba <=_bgedg &&_fdff .GetPixel (_afba ,_fdea );_afba ++{if _abea =_fdff .SetPixel (_afba ,_fdea ,0);_abea !=nil {return nil ,_g .Wrap (_abea ,_eeef ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _abea =_efbg (_deed ,_agcdbb ,_afba -1,_fgea ._deab ,_fgea ._bdeb ,_bggb ,&_cbge );
_abea !=nil {return nil ,_g .Wrap (_abea ,_eeef ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _afba > _fgea ._bfbce {if _abea =_efbg (_deed ,_fgea ._bfbce +1,_afba -1,_fgea ._deab ,-_fgea ._bdeb ,_bggb ,&_cbge );_abea !=nil {return nil ,_g .Wrap (_abea ,_eeef ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};};continue ;};_agcdbb =_afba +1;if _agcdbb < _fgea ._gebd {if _abea =_efbg (_deed ,_agcdbb ,_fgea ._gebd -1,_fgea ._deab ,-_fgea ._bdeb ,_bggb ,&_cbge );_abea !=nil {return nil ,_g .Wrap (_abea ,_eeef ,"\u006c\u0065\u0061\u006b\u0020\u006f\u006e\u0020\u006c\u0065\u0066\u0074 \u0073\u0069\u0064\u0065");
};};_afba =_fgea ._gebd ;for {for ;_afba <=_bgedg &&_fdff .GetPixel (_afba ,_fdea );_afba ++{if _abea =_fdff .SetPixel (_afba ,_fdea ,0);_abea !=nil {return nil ,_g .Wrap (_abea ,_eeef ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _abea =_efbg (_deed ,_agcdbb ,_afba -1,_fgea ._deab ,_fgea ._bdeb ,_bggb ,&_cbge );
_abea !=nil {return nil ,_g .Wrap (_abea ,_eeef ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _afba > _fgea ._bfbce {if _abea =_efbg (_deed ,_fgea ._bfbce +1,_afba -1,_fgea ._deab ,-_fgea ._bdeb ,_bggb ,&_cbge );_abea !=nil {return nil ,_g .Wrap (_abea ,_eeef ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};for _afba ++;_afba <=_fgea ._bfbce +1&&_afba <=_bgedg &&!_fdff .GetPixel (_afba ,_fdea );_afba ++{};_agcdbb =_afba ;if !(_afba <=_fgea ._bfbce +1&&_afba <=_bgedg ){break ;};};};_cbge .Max .X ++;_cbge .Max .Y ++;return &_cbge ,nil ;};func TstRSymbol (t *_a .T ,scale ...int )*Bitmap {_gbad ,_bgfe :=NewWithData (4,5,[]byte {0xF0,0x90,0xF0,0xA0,0x90});
_c .NoError (t ,_bgfe );return TstGetScaledSymbol (t ,_gbad ,scale ...);};func _gae ()(_dbg [256]uint64 ){for _ged :=0;_ged < 256;_ged ++{if _ged &0x01!=0{_dbg [_ged ]|=0xff;};if _ged &0x02!=0{_dbg [_ged ]|=0xff00;};if _ged &0x04!=0{_dbg [_ged ]|=0xff0000;
};if _ged &0x08!=0{_dbg [_ged ]|=0xff000000;};if _ged &0x10!=0{_dbg [_ged ]|=0xff00000000;};if _ged &0x20!=0{_dbg [_ged ]|=0xff0000000000;};if _ged &0x40!=0{_dbg [_ged ]|=0xff000000000000;};if _ged &0x80!=0{_dbg [_ged ]|=0xff00000000000000;};};return _dbg ;
};func (_eced *ClassedPoints )Swap (i ,j int ){_eced .IntSlice [i ],_eced .IntSlice [j ]=_eced .IntSlice [j ],_eced .IntSlice [i ];};func (_dbbe *Bitmaps )GetBox (i int )(*_ff .Rectangle ,error ){const _ecfa ="\u0047\u0065\u0074\u0042\u006f\u0078";if _dbbe ==nil {return nil ,_g .Error (_ecfa ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074\u006d\u0061\u0070s\u0027");
};if i > len (_dbbe .Boxes )-1{return nil ,_g .Errorf (_ecfa ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _dbbe .Boxes [i ],nil ;};func (_gcfe *ClassedPoints )XAtIndex (i int )float32 {return (*_gcfe .Points )[_gcfe .IntSlice [i ]].X };
func (_fedf *Bitmaps )HeightSorter ()func (_fbaa ,_cfaba int )bool {return func (_cdabg ,_baac int )bool {_ggfa :=_fedf .Values [_cdabg ].Height < _fedf .Values [_baac ].Height ;_b .Log .Debug ("H\u0065i\u0067\u0068\u0074\u003a\u0020\u0025\u0076\u0020<\u0020\u0025\u0076\u0020= \u0025\u0076",_fedf .Values [_cdabg ].Height ,_fedf .Values [_baac ].Height ,_ggfa );
return _ggfa ;};};func Extract (roi _ff .Rectangle ,src *Bitmap )(*Bitmap ,error ){_abdf :=New (roi .Dx (),roi .Dy ());_afff :=roi .Min .X &0x07;_afed :=8-_afff ;_afegg :=uint (8-_abdf .Width &0x07);_degg :=src .GetByteIndex (roi .Min .X ,roi .Min .Y );
_afbbb :=src .GetByteIndex (roi .Max .X -1,roi .Min .Y );_afg :=_abdf .RowStride ==_afbbb +1-_degg ;var _ccgg int ;for _fbgaf :=roi .Min .Y ;_fbgaf < roi .Max .Y ;_fbgaf ++{_fade :=_degg ;_bag :=_ccgg ;switch {case _degg ==_afbbb :_daed ,_cbcd :=src .GetByte (_fade );
if _cbcd !=nil {return nil ,_cbcd ;};_daed <<=uint (_afff );_cbcd =_abdf .SetByte (_bag ,_afbb (_afegg ,_daed ));if _cbcd !=nil {return nil ,_cbcd ;};case _afff ==0:for _aeaa :=_degg ;_aeaa <=_afbbb ;_aeaa ++{_gbf ,_dbec :=src .GetByte (_fade );if _dbec !=nil {return nil ,_dbec ;
};_fade ++;if _aeaa ==_afbbb &&_afg {_gbf =_afbb (_afegg ,_gbf );};_dbec =_abdf .SetByte (_bag ,_gbf );if _dbec !=nil {return nil ,_dbec ;};_bag ++;};default:_afec :=_efgf (src ,_abdf ,uint (_afff ),uint (_afed ),_afegg ,_degg ,_afbbb ,_afg ,_fade ,_bag );
if _afec !=nil {return nil ,_afec ;};};_degg +=src .RowStride ;_afbbb +=src .RowStride ;_ccgg +=_abdf .RowStride ;};return _abdf ,nil ;};func (_adde *Bitmaps )SortByWidth (){_dga :=(*byWidth )(_adde );_d .Sort (_dga )};func (_agcdb *ClassedPoints )validateIntSlice ()error {const _ddacf ="\u0076\u0061l\u0069\u0064\u0061t\u0065\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065";
for _ ,_bfbg :=range _agcdb .IntSlice {if _bfbg >=(_agcdb .Points .Size ()){return _g .Errorf (_ddacf ,"c\u006c\u0061\u0073\u0073\u0020\u0069\u0064\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0076\u0061\u006ci\u0064 \u0069\u006e\u0064\u0065x\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0070\u006f\u0069\u006e\u0074\u0073\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u003a\u0020\u0025\u0064",_bfbg ,_agcdb .Points .Size ());
};};return nil ;};func _dacf (_fcg ,_gcefc *Bitmap ,_ebfg ,_cbbg int )(*Bitmap ,error ){const _gcec ="d\u0069\u006c\u0061\u0074\u0065\u0042\u0072\u0069\u0063\u006b";if _gcefc ==nil {_b .Log .Debug ("\u0064\u0069\u006c\u0061\u0074\u0065\u0042\u0072\u0069\u0063k\u0020\u0073\u006f\u0075\u0072\u0063\u0065 \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
return nil ,_g .Error (_gcec ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _ebfg < 1||_cbbg < 1{return nil ,_g .Error (_gcec ,"\u0068\u0053\u007a\u0069\u0065 \u0061\u006e\u0064\u0020\u0076\u0053\u0069\u007a\u0065\u0020\u0061\u0072\u0065 \u006e\u006f\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0031");
};if _ebfg ==1&&_cbbg ==1{_dfee ,_dedf :=_cgde (_fcg ,_gcefc );if _dedf !=nil {return nil ,_g .Wrap (_dedf ,_gcec ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u0026\u0026 \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _dfee ,nil ;};if _ebfg ==1||_cbbg ==1{_bdgbg :=SelCreateBrick (_cbbg ,_ebfg ,_cbbg /2,_ebfg /2,SelHit );_gabad ,_dedfc :=_cfcge (_fcg ,_gcefc ,_bdgbg );if _dedfc !=nil {return nil ,_g .Wrap (_dedfc ,_gcec ,"\u0068s\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _gabad ,nil ;};_cbbe :=SelCreateBrick (1,_ebfg ,0,_ebfg /2,SelHit );_aadf :=SelCreateBrick (_cbbg ,1,_cbbg /2,0,SelHit );_acbb ,_gbed :=_cfcge (nil ,_gcefc ,_cbbe );if _gbed !=nil {return nil ,_g .Wrap (_gbed ,_gcec ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};_fcg ,_gbed =_cfcge (_fcg ,_acbb ,_aadf );if _gbed !=nil {return nil ,_g .Wrap (_gbed ,_gcec ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};return _fcg ,nil ;};func TstFrameBitmapData ()[]byte {return _cdgf .Data };func (_bbef MorphProcess )getWidthHeight ()(_afffe ,_fffg int ){return _bbef .Arguments [0],_bbef .Arguments [1];
};const (_acgf shift =iota ;_abae ;);func (_fcddf *Bitmap )nextOnPixel (_fgdg ,_bdae int )(_eggb _ff .Point ,_fbb bool ,_gadc error ){const _bbgef ="n\u0065\u0078\u0074\u004f\u006e\u0050\u0069\u0078\u0065\u006c";_eggb ,_fbb ,_gadc =_fcddf .nextOnPixelLow (_fcddf .Width ,_fcddf .Height ,_fcddf .RowStride ,_fgdg ,_bdae );
if _gadc !=nil {return _eggb ,false ,_g .Wrap (_gadc ,_bbgef ,"");};return _eggb ,_fbb ,nil ;};func (_faeg *BitmapsArray )GetBitmaps (i int )(*Bitmaps ,error ){const _fgcf ="\u0042\u0069\u0074ma\u0070\u0073\u0041\u0072\u0072\u0061\u0079\u002e\u0047\u0065\u0074\u0042\u0069\u0074\u006d\u0061\u0070\u0073";
if _faeg ==nil {return nil ,_g .Error (_fgcf ,"p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074m\u0061\u0070\u0073A\u0072r\u0061\u0079\u0027");};if i > len (_faeg .Values )-1{return nil ,_g .Errorf (_fgcf ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _faeg .Values [i ],nil ;};func TstCSymbol (t *_a .T )*Bitmap {t .Helper ();_cfdf :=New (6,6);_c .NoError (t ,_cfdf .SetPixel (1,0,1));_c .NoError (t ,_cfdf .SetPixel (2,0,1));_c .NoError (t ,_cfdf .SetPixel (3,0,1));_c .NoError (t ,_cfdf .SetPixel (4,0,1));
_c .NoError (t ,_cfdf .SetPixel (0,1,1));_c .NoError (t ,_cfdf .SetPixel (5,1,1));_c .NoError (t ,_cfdf .SetPixel (0,2,1));_c .NoError (t ,_cfdf .SetPixel (0,3,1));_c .NoError (t ,_cfdf .SetPixel (0,4,1));_c .NoError (t ,_cfdf .SetPixel (5,4,1));_c .NoError (t ,_cfdf .SetPixel (1,5,1));
_c .NoError (t ,_cfdf .SetPixel (2,5,1));_c .NoError (t ,_cfdf .SetPixel (3,5,1));_c .NoError (t ,_cfdf .SetPixel (4,5,1));return _cfdf ;};func (_dgfa *byWidth )Len ()int {return len (_dgfa .Values )};func (_becb *Boxes )Get (i int )(*_ff .Rectangle ,error ){const _fgbbb ="\u0042o\u0078\u0065\u0073\u002e\u0047\u0065t";
if _becb ==nil {return nil ,_g .Error (_fgbbb ,"\u0027\u0042\u006f\u0078es\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if i > len (*_becb )-1{return nil ,_g .Errorf (_fgbbb ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return (*_becb )[i ],nil ;};func (_ecg *Bitmap )InverseData (){_ecg .inverseData ()};type CombinationOperator int ;func (_cbfgaf *Bitmaps )selectByIndicator (_gcgbfb *_cd .NumSlice )(_acbeac *Bitmaps ,_caeab error ){const _dbbae ="\u0042i\u0074\u006d\u0061\u0070s\u002e\u0073\u0065\u006c\u0065c\u0074B\u0079I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";
if _cbfgaf ==nil {return nil ,_g .Error (_dbbae ,"\u0027\u0062\u0027 b\u0069\u0074\u006d\u0061\u0070\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if _gcgbfb ==nil {return nil ,_g .Error (_dbbae ,"'\u006e\u0061\u0027\u0020\u0069\u006ed\u0069\u0063\u0061\u0074\u006f\u0072\u0073\u0020\u006eo\u0074\u0020\u0064e\u0066i\u006e\u0065\u0064");
};if len (_cbfgaf .Values )==0{return _cbfgaf ,nil ;};if len (*_gcgbfb )!=len (_cbfgaf .Values ){return nil ,_g .Errorf (_dbbae ,"\u006ea\u0020\u006ce\u006e\u0067\u0074\u0068:\u0020\u0025\u0064,\u0020\u0069\u0073\u0020\u0064\u0069\u0066\u0066\u0065re\u006e\u0074\u0020t\u0068\u0061n\u0020\u0062\u0069\u0074\u006d\u0061p\u0073\u003a \u0025\u0064",len (*_gcgbfb ),len (_cbfgaf .Values ));
};var _bggbe ,_dcgc ,_agdcf int ;for _dcgc =0;_dcgc < len (*_gcgbfb );_dcgc ++{if _bggbe ,_caeab =_gcgbfb .GetInt (_dcgc );_caeab !=nil {return nil ,_g .Wrap (_caeab ,_dbbae ,"f\u0069\u0072\u0073\u0074\u0020\u0063\u0068\u0065\u0063\u006b");};if _bggbe ==1{_agdcf ++;
};};if _agdcf ==len (_cbfgaf .Values ){return _cbfgaf ,nil ;};_acbeac =&Bitmaps {};_dgc :=len (_cbfgaf .Values )==len (_cbfgaf .Boxes );for _dcgc =0;_dcgc < len (*_gcgbfb );_dcgc ++{if _bggbe =int ((*_gcgbfb )[_dcgc ]);_bggbe ==0{continue ;};_acbeac .Values =append (_acbeac .Values ,_cbfgaf .Values [_dcgc ]);
if _dgc {_acbeac .Boxes =append (_acbeac .Boxes ,_cbfgaf .Boxes [_dcgc ]);};};return _acbeac ,nil ;};func NewWithData (width ,height int ,data []byte )(*Bitmap ,error ){const _gff ="N\u0065\u0077\u0057\u0069\u0074\u0068\u0044\u0061\u0074\u0061";_dece :=_cdf (width ,height );
_dece .Data =data ;if len (data )< height *_dece .RowStride {return nil ,_g .Errorf (_gff ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064\u0061\u0074\u0061\u0020l\u0065\u006e\u0067\u0074\u0068\u003a \u0025\u0064\u0020\u002d\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e\u003a\u0020\u0025\u0064",len (data ),height *_dece .RowStride );
};return _dece ,nil ;};func _cge (_fca ,_dfa *Bitmap ,_cbcc int ,_dbce []byte ,_gcgf int )(_afd error ){const _efd ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0034";var (_fedb ,_dab ,_bdf ,_dba ,_fff ,_fdb ,_gfe ,_gdd int ;
_cede ,_gbg uint32 ;_fec ,_fcec byte ;_ebc uint16 ;);_eaa :=make ([]byte ,4);_cbaf :=make ([]byte ,4);for _bdf =0;_bdf < _fca .Height -1;_bdf ,_dba =_bdf +2,_dba +1{_fedb =_bdf *_fca .RowStride ;_dab =_dba *_dfa .RowStride ;for _fff ,_fdb =0,0;_fff < _gcgf ;
_fff ,_fdb =_fff +4,_fdb +1{for _gfe =0;_gfe < 4;_gfe ++{_gdd =_fedb +_fff +_gfe ;if _gdd <=len (_fca .Data )-1&&_gdd < _fedb +_fca .RowStride {_eaa [_gfe ]=_fca .Data [_gdd ];}else {_eaa [_gfe ]=0x00;};_gdd =_fedb +_fca .RowStride +_fff +_gfe ;if _gdd <=len (_fca .Data )-1&&_gdd < _fedb +(2*_fca .RowStride ){_cbaf [_gfe ]=_fca .Data [_gdd ];
}else {_cbaf [_gfe ]=0x00;};};_cede =_fc .BigEndian .Uint32 (_eaa );_gbg =_fc .BigEndian .Uint32 (_cbaf );_gbg &=_cede ;_gbg &=_gbg <<1;_gbg &=0xaaaaaaaa;_cede =_gbg |(_gbg <<7);_fec =byte (_cede >>24);_fcec =byte ((_cede >>8)&0xff);_gdd =_dab +_fdb ;if _gdd +1==len (_dfa .Data )-1||_gdd +1>=_dab +_dfa .RowStride {_dfa .Data [_gdd ]=_dbce [_fec ];
if _afd =_dfa .SetByte (_gdd ,_dbce [_fec ]);_afd !=nil {return _g .Wrapf (_afd ,_efd ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_gdd );};}else {_ebc =(uint16 (_dbce [_fec ])<<8)|uint16 (_dbce [_fcec ]);if _afd =_dfa .setTwoBytes (_gdd ,_ebc );_afd !=nil {return _g .Wrapf (_afd ,_efd ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_gdd );
};_fdb ++;};};};return nil ;};func _gebfc (_adfa int )int {if _adfa < 0{return -_adfa ;};return _adfa ;};func TstWordBitmapWithSpaces (t *_a .T ,scale ...int )*Bitmap {_ddec :=1;if len (scale )> 0{_ddec =scale [0];};_babf :=3;_eegb :=9+7+15+2*_babf +2*_babf ;
_efdfd :=5+_babf +5+2*_babf ;_afcg :=New (_eegb *_ddec ,_efdfd *_ddec );_gccb :=&Bitmaps {};var _cdacf *int ;_babf *=_ddec ;_ggff :=_babf ;_cdacf =&_ggff ;_gegcb :=_babf ;_dcgd :=TstDSymbol (t ,scale ...);TstAddSymbol (t ,_gccb ,_dcgd ,_cdacf ,_gegcb ,1*_ddec );
_dcgd =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_gccb ,_dcgd ,_cdacf ,_gegcb ,_babf );_dcgd =TstISymbol (t ,scale ...);TstAddSymbol (t ,_gccb ,_dcgd ,_cdacf ,_gegcb ,1*_ddec );_dcgd =TstTSymbol (t ,scale ...);TstAddSymbol (t ,_gccb ,_dcgd ,_cdacf ,_gegcb ,_babf );
_dcgd =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_gccb ,_dcgd ,_cdacf ,_gegcb ,1*_ddec );_dcgd =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_gccb ,_dcgd ,_cdacf ,_gegcb ,1*_ddec );_dcgd =TstWSymbol (t ,scale ...);TstAddSymbol (t ,_gccb ,_dcgd ,_cdacf ,_gegcb ,0);
*_cdacf =_babf ;_gegcb =5*_ddec +_babf ;_dcgd =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_gccb ,_dcgd ,_cdacf ,_gegcb ,1*_ddec );_dcgd =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_gccb ,_dcgd ,_cdacf ,_gegcb ,_babf );_dcgd =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_gccb ,_dcgd ,_cdacf ,_gegcb ,1*_ddec );
_dcgd =TstESymbol (t ,scale ...);TstAddSymbol (t ,_gccb ,_dcgd ,_cdacf ,_gegcb ,1*_ddec );_dcgd =TstVSymbol (t ,scale ...);TstAddSymbol (t ,_gccb ,_dcgd ,_cdacf ,_gegcb ,1*_ddec );_dcgd =TstESymbol (t ,scale ...);TstAddSymbol (t ,_gccb ,_dcgd ,_cdacf ,_gegcb ,1*_ddec );
_dcgd =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_gccb ,_dcgd ,_cdacf ,_gegcb ,0);TstWriteSymbols (t ,_gccb ,_afcg );return _afcg ;};func TstOSymbol (t *_a .T ,scale ...int )*Bitmap {_fcgbb ,_cbbc :=NewWithData (4,5,[]byte {0xF0,0x90,0x90,0x90,0xF0});
_c .NoError (t ,_cbbc );return TstGetScaledSymbol (t ,_fcgbb ,scale ...);};func (_gcgfg *Bitmap )connComponentsBitmapsBB (_fgfdf *Bitmaps ,_ebag int )(_fcf *Boxes ,_afbf error ){const _dbcb ="\u0063\u006f\u006enC\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0042\u0069\u0074\u006d\u0061\u0070\u0073\u0042\u0042";
if _ebag !=4&&_ebag !=8{return nil ,_g .Error (_dbcb ,"\u0063\u006f\u006e\u006e\u0065\u0063t\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0027\u0034\u0027\u0020\u006fr\u0020\u0027\u0038\u0027");};if _fgfdf ==nil {return nil ,_g .Error (_dbcb ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0042\u0069\u0074ma\u0070\u0073");
};if len (_fgfdf .Values )> 0{return nil ,_g .Error (_dbcb ,"\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u006fn\u002d\u0065\u006d\u0070\u0074\u0079\u0020\u0042\u0069\u0074m\u0061\u0070\u0073");};if _gcgfg .Zero (){return &Boxes {},nil ;
};var (_aada ,_abdff ,_bfdg ,_ceff *Bitmap ;);_gcgfg .setPadBits (0);if _aada ,_afbf =_cgde (nil ,_gcgfg );_afbf !=nil {return nil ,_g .Wrap (_afbf ,_dbcb ,"\u0062\u006d\u0031");};if _abdff ,_afbf =_cgde (nil ,_gcgfg );_afbf !=nil {return nil ,_g .Wrap (_afbf ,_dbcb ,"\u0062\u006d\u0032");
};_eag :=&_cd .Stack {};_eag .Aux =&_cd .Stack {};_fcf =&Boxes {};var (_agd ,_dcfc int ;_fdcc _ff .Point ;_beab bool ;_daaad *_ff .Rectangle ;);for {if _fdcc ,_beab ,_afbf =_aada .nextOnPixel (_agd ,_dcfc );_afbf !=nil {return nil ,_g .Wrap (_afbf ,_dbcb ,"");
};if !_beab {break ;};if _daaad ,_afbf =_fdee (_aada ,_eag ,_fdcc .X ,_fdcc .Y ,_ebag );_afbf !=nil {return nil ,_g .Wrap (_afbf ,_dbcb ,"");};if _afbf =_fcf .Add (_daaad );_afbf !=nil {return nil ,_g .Wrap (_afbf ,_dbcb ,"");};if _bfdg ,_afbf =_aada .clipRectangle (_daaad ,nil );
_afbf !=nil {return nil ,_g .Wrap (_afbf ,_dbcb ,"\u0062\u006d\u0033");};if _ceff ,_afbf =_abdff .clipRectangle (_daaad ,nil );_afbf !=nil {return nil ,_g .Wrap (_afbf ,_dbcb ,"\u0062\u006d\u0034");};if _ ,_afbf =_fffb (_bfdg ,_bfdg ,_ceff );_afbf !=nil {return nil ,_g .Wrap (_afbf ,_dbcb ,"\u0062m\u0033\u0020\u005e\u0020\u0062\u006d4");
};if _afbf =_abdff .RasterOperation (_daaad .Min .X ,_daaad .Min .Y ,_daaad .Dx (),_daaad .Dy (),PixSrcXorDst ,_bfdg ,0,0);_afbf !=nil {return nil ,_g .Wrap (_afbf ,_dbcb ,"\u0062\u006d\u0032\u0020\u002d\u0058\u004f\u0052\u002d>\u0020\u0062\u006d\u0033");
};_fgfdf .AddBitmap (_bfdg );_agd =_fdcc .X ;_dcfc =_fdcc .Y ;};_fgfdf .Boxes =*_fcf ;return _fcf ,nil ;};func (_bfg *Bitmap )RemoveBorderGeneral (left ,right ,top ,bot int )(*Bitmap ,error ){return _bfg .removeBorderGeneral (left ,right ,top ,bot );};
type Points []Point ;func (_eafed *byHeight )Swap (i ,j int ){_eafed .Values [i ],_eafed .Values [j ]=_eafed .Values [j ],_eafed .Values [i ];if _eafed .Boxes !=nil {_eafed .Boxes [i ],_eafed .Boxes [j ]=_eafed .Boxes [j ],_eafed .Boxes [i ];};};func _cdbdf (_eece *_cd .Stack )(_ggfe *fillSegment ,_dbceb error ){const _gbbbc ="\u0070\u006f\u0070\u0046\u0069\u006c\u006c\u0053\u0065g\u006d\u0065\u006e\u0074";
if _eece ==nil {return nil ,_g .Error (_gbbbc ,"\u006ei\u006c \u0073\u0074\u0061\u0063\u006b \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};if _eece .Aux ==nil {return nil ,_g .Error (_gbbbc ,"a\u0075x\u0053\u0074\u0061\u0063\u006b\u0020\u006e\u006ft\u0020\u0064\u0065\u0066in\u0065\u0064");
};_gcade ,_gffe :=_eece .Pop ();if !_gffe {return nil ,nil ;};_cddd ,_gffe :=_gcade .(*fillSegment );if !_gffe {return nil ,_g .Error (_gbbbc ,"\u0073\u0074\u0061ck\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020c\u006fn\u0074a\u0069n\u0020\u002a\u0066\u0069\u006c\u006c\u0053\u0065\u0067\u006d\u0065\u006e\u0074");
};_ggfe =&fillSegment {_cddd ._gebd ,_cddd ._bfbce ,_cddd ._deab +_cddd ._bdeb ,_cddd ._bdeb };_eece .Aux .Push (_cddd );return _ggfe ,nil ;};func _ebb (_gce *Bitmap ,_bgd int ,_ab []byte )(_fba *Bitmap ,_ccf error ){const _gg ="\u0072\u0065\u0064\u0075\u0063\u0065\u0052\u0061\u006e\u006b\u0042\u0069n\u0061\u0072\u0079\u0032";
if _gce ==nil {return nil ,_g .Error (_gg ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _bgd < 1||_bgd > 4{return nil ,_g .Error (_gg ,"\u006c\u0065\u0076\u0065\u006c\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0069\u006e\u0020\u0073e\u0074\u0020\u007b\u0031\u002c\u0032\u002c\u0033\u002c\u0034\u007d");
};if _gce .Height <=1{return nil ,_g .Errorf (_gg ,"\u0073o\u0075\u0072c\u0065\u0020\u0068e\u0069\u0067\u0068\u0074\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061t\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0027\u0032\u0027\u0020-\u0020\u0069\u0073\u003a\u0020\u0027\u0025\u0064\u0027",_gce .Height );
};_fba =New (_gce .Width /2,_gce .Height /2);if _ab ==nil {_ab =_egef ();};_bee :=_cddf (_gce .RowStride ,2*_fba .RowStride );switch _bgd {case 1:_ccf =_beee (_gce ,_fba ,_bgd ,_ab ,_bee );case 2:_ccf =_ce (_gce ,_fba ,_bgd ,_ab ,_bee );case 3:_ccf =_gdc (_gce ,_fba ,_bgd ,_ab ,_bee );
case 4:_ccf =_cge (_gce ,_fba ,_bgd ,_ab ,_bee );};if _ccf !=nil {return nil ,_ccf ;};return _fba ,nil ;};func _caad (_aeab *Bitmap ,_faaef *Bitmap ,_bbbe int )(_cddg error ){const _bffge ="\u0073\u0065\u0065\u0064\u0066\u0069\u006c\u006c\u0042\u0069\u006e\u0061r\u0079\u004c\u006f\u0077";
_dfcb :=_cddf (_aeab .Height ,_faaef .Height );_aega :=_cddf (_aeab .RowStride ,_faaef .RowStride );switch _bbbe {case 4:_cddg =_aeggb (_aeab ,_faaef ,_dfcb ,_aega );case 8:_cddg =_fdfe (_aeab ,_faaef ,_dfcb ,_aega );default:return _g .Errorf (_bffge ,"\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0034\u0020\u006fr\u0020\u0038\u0020\u002d\u0020i\u0073\u003a \u0027\u0025\u0064\u0027",_bbbe );
};if _cddg !=nil {return _g .Wrap (_cddg ,_bffge ,"");};return nil ;};func (_daea *Bitmaps )String ()string {_gaga :=_cb .Builder {};for _ ,_bgedgb :=range _daea .Values {_gaga .WriteString (_bgedgb .String ());_gaga .WriteRune ('\n');};return _gaga .String ();
};func TstDSymbol (t *_a .T ,scale ...int )*Bitmap {_bfde ,_eagc :=NewWithData (4,5,[]byte {0xf0,0x90,0x90,0x90,0xE0});_c .NoError (t ,_eagc );return TstGetScaledSymbol (t ,_bfde ,scale ...);};func (_eaeg *ClassedPoints )SortByY (){_eaeg ._dbcd =_eaeg .ySortFunction ();
_d .Sort (_eaeg )};func (_cfdac *ClassedPoints )SortByX (){_cfdac ._dbcd =_cfdac .xSortFunction ();_d .Sort (_cfdac )};func (_fbag *Bitmap )GetPixel (x ,y int )bool {_dfd :=_fbag .GetByteIndex (x ,y );_aeg :=_fbag .GetBitOffset (x );_fbfa :=uint (7-_aeg );
if _dfd > len (_fbag .Data )-1{_b .Log .Debug ("\u0054\u0072\u0079\u0069\u006e\u0067\u0020\u0074\u006f\u0020\u0067\u0065\u0074\u0020\u0070\u0069\u0078\u0065\u006c\u0020o\u0075\u0074\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0064\u0061\u0074\u0061\u0020\u0072\u0061\u006e\u0067\u0065\u002e \u0078\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0079\u003a\u0027\u0025\u0064'\u002c\u0020\u0062m\u003a\u0020\u0027\u0025\u0073\u0027",x ,y ,_fbag );
return false ;};if (_fbag .Data [_dfd ]>>_fbfa )&0x01>=1{return true ;};return false ;};func (_aafag *byWidth )Swap (i ,j int ){_aafag .Values [i ],_aafag .Values [j ]=_aafag .Values [j ],_aafag .Values [i ];if _aafag .Boxes !=nil {_aafag .Boxes [i ],_aafag .Boxes [j ]=_aafag .Boxes [j ],_aafag .Boxes [i ];
};};func TstNSymbol (t *_a .T ,scale ...int )*Bitmap {_cecf ,_edcg :=NewWithData (4,5,[]byte {0x90,0xD0,0xB0,0x90,0x90});_c .NoError (t ,_edcg );return TstGetScaledSymbol (t ,_cecf ,scale ...);};type byHeight Bitmaps ;func TstWSymbol (t *_a .T ,scale ...int )*Bitmap {_faccb ,_dgff :=NewWithData (5,5,[]byte {0x88,0x88,0xA8,0xD8,0x88});
_c .NoError (t ,_dgff );return TstGetScaledSymbol (t ,_faccb ,scale ...);};func (_aadab *Bitmap )RasterOperation (dx ,dy ,dw ,dh int ,op RasterOperator ,src *Bitmap ,sx ,sy int )error {return _gddaa (_aadab ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );};func TstTSymbol (t *_a .T ,scale ...int )*Bitmap {_dcbg ,_egbcg :=NewWithData (5,5,[]byte {0xF8,0x20,0x20,0x20,0x20});
_c .NoError (t ,_egbcg );return TstGetScaledSymbol (t ,_dcbg ,scale ...);};func (_eabe *Bitmap )GetComponents (components Component ,maxWidth ,maxHeight int )(_febb *Bitmaps ,_adca *Boxes ,_daae error ){const _acba ="B\u0069t\u006d\u0061\u0070\u002e\u0047\u0065\u0074\u0043o\u006d\u0070\u006f\u006een\u0074\u0073";
if _eabe ==nil {return nil ,nil ,_g .Error (_acba ,"\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0042\u0069\u0074\u006da\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069n\u0065\u0064\u002e");};switch components {case ComponentConn ,ComponentCharacters ,ComponentWords :default:return nil ,nil ,_g .Error (_acba ,"\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065n\u0074s\u0020\u0070\u0061\u0072\u0061\u006d\u0065t\u0065\u0072");
};if _eabe .Zero (){_adca =&Boxes {};_febb =&Bitmaps {};return _febb ,_adca ,nil ;};switch components {case ComponentConn :_febb =&Bitmaps {};if _adca ,_daae =_eabe .ConnComponents (_febb ,8);_daae !=nil {return nil ,nil ,_g .Wrap (_daae ,_acba ,"\u006e\u006f \u0070\u0072\u0065p\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};case ComponentCharacters :_feac ,_dedgd :=MorphSequence (_eabe ,MorphProcess {Operation :MopClosing ,Arguments :[]int {1,6}});if _dedgd !=nil {return nil ,nil ,_g .Wrap (_dedgd ,_acba ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};if _b .Log .IsLogLevel (_b .LogLevelTrace ){_b .Log .Trace ("\u0043o\u006d\u0070o\u006e\u0065\u006e\u0074C\u0068\u0061\u0072a\u0063\u0074\u0065\u0072\u0073\u0020\u0062\u0069\u0074ma\u0070\u0020\u0061f\u0074\u0065r\u0020\u0063\u006c\u006f\u0073\u0069n\u0067\u003a \u0025\u0073",_feac .String ());
};_facc :=&Bitmaps {};_adca ,_dedgd =_feac .ConnComponents (_facc ,8);if _dedgd !=nil {return nil ,nil ,_g .Wrap (_dedgd ,_acba ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};if _b .Log .IsLogLevel (_b .LogLevelTrace ){_b .Log .Trace ("\u0043\u006f\u006d\u0070\u006f\u006ee\u006e\u0074\u0043\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u0020a\u0066\u0074\u0065\u0072\u0020\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076i\u0074y\u003a\u0020\u0025\u0073",_facc .String ());
};if _febb ,_dedgd =_facc .ClipToBitmap (_eabe );_dedgd !=nil {return nil ,nil ,_g .Wrap (_dedgd ,_acba ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");};case ComponentWords :_fege :=1;
var _bbde *Bitmap ;switch {case _eabe .XResolution <=200:_bbde =_eabe ;case _eabe .XResolution <=400:_fege =2;_bbde ,_daae =_cgf (_eabe ,1,0,0,0);if _daae !=nil {return nil ,nil ,_g .Wrap (_daae ,_acba ,"w\u006f\u0072\u0064\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0020\u002d \u0078\u0072\u0065s\u003c=\u0034\u0030\u0030");
};default:_fege =4;_bbde ,_daae =_cgf (_eabe ,1,1,0,0);if _daae !=nil {return nil ,nil ,_g .Wrap (_daae ,_acba ,"\u0077\u006f\u0072\u0064 \u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073 \u002d \u0078\u0072\u0065\u0073\u0020\u003e\u00204\u0030\u0030");
};};_bedd ,_ ,_ggaf :=_eeca (_bbde );if _ggaf !=nil {return nil ,nil ,_g .Wrap (_ggaf ,_acba ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};_gfg ,_ggaf :=_ccfb (_bedd ,_fege );if _ggaf !=nil {return nil ,nil ,_g .Wrap (_ggaf ,_acba ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");
};_eeeg :=&Bitmaps {};if _adca ,_ggaf =_gfg .ConnComponents (_eeeg ,4);_ggaf !=nil {return nil ,nil ,_g .Wrap (_ggaf ,_acba ,"\u0077\u006f\u0072\u0064\u0020\u0070r\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u002c\u0020\u0063\u006f\u006en\u0065\u0063\u0074\u0020\u0065\u0078\u0070a\u006e\u0064\u0065\u0064");
};if _febb ,_ggaf =_eeeg .ClipToBitmap (_eabe );_ggaf !=nil {return nil ,nil ,_g .Wrap (_ggaf ,_acba ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};};_febb ,_daae =_febb .SelectBySize (maxWidth ,maxHeight ,LocSelectIfBoth ,SizeSelectIfLTE );
if _daae !=nil {return nil ,nil ,_g .Wrap (_daae ,_acba ,"");};_adca ,_daae =_adca .SelectBySize (maxWidth ,maxHeight ,LocSelectIfBoth ,SizeSelectIfLTE );if _daae !=nil {return nil ,nil ,_g .Wrap (_daae ,_acba ,"");};return _febb ,_adca ,nil ;};func _cgde (_dgg ,_febe *Bitmap )(*Bitmap ,error ){if _febe ==nil {return nil ,_g .Error ("\u0063\u006f\u0070\u0079\u0042\u0069\u0074\u006d\u0061\u0070","\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _febe ==_dgg {return _dgg ,nil ;};if _dgg ==nil {_dgg =_febe .createTemplate ();copy (_dgg .Data ,_febe .Data );return _dgg ,nil ;};_afcf :=_dgg .resizeImageData (_febe );if _afcf !=nil {return nil ,_g .Wrap (_afcf ,"\u0063\u006f\u0070\u0079\u0042\u0069\u0074\u006d\u0061\u0070","");
};_dgg .Text =_febe .Text ;copy (_dgg .Data ,_febe .Data );return _dgg ,nil ;};func _eeca (_befc *Bitmap )(_fdaa *Bitmap ,_edcab int ,_bgf error ){const _cbfd ="\u0042i\u0074\u006d\u0061\u0070.\u0077\u006f\u0072\u0064\u004da\u0073k\u0042y\u0044\u0069\u006c\u0061\u0074\u0069\u006fn";
if _befc ==nil {return nil ,0,_g .Errorf (_cbfd ,"\u0027\u0073\u0027\u0020bi\u0074\u006d\u0061\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");};var _gfbe ,_geg *Bitmap ;if _gfbe ,_bgf =_cgde (nil ,_befc );_bgf !=nil {return nil ,0,_g .Wrap (_bgf ,_cbfd ,"\u0063\u006f\u0070\u0079\u0020\u0027\u0073\u0027");
};var (_dfg [13]int ;_dfbe ,_cegd int ;);_gcbd :=12;_ecae :=_cd .NewNumSlice (_gcbd +1);_edgf :=_cd .NewNumSlice (_gcbd +1);var _defa *Boxes ;for _afae :=0;_afae <=_gcbd ;_afae ++{if _afae ==0{if _geg ,_bgf =_cgde (nil ,_gfbe );_bgf !=nil {return nil ,0,_g .Wrap (_bgf ,_cbfd ,"\u0066i\u0072\u0073\u0074\u0020\u0062\u006d2");
};}else {if _geg ,_bgf =_cagc (_gfbe ,MorphProcess {Operation :MopDilation ,Arguments :[]int {2,1}});_bgf !=nil {return nil ,0,_g .Wrap (_bgf ,_cbfd ,"\u0064\u0069\u006ca\u0074\u0069\u006f\u006e\u0020\u0062\u006d\u0032");};};if _defa ,_bgf =_geg .connComponentsBB (4);
_bgf !=nil {return nil ,0,_g .Wrap (_bgf ,_cbfd ,"");};_dfg [_afae ]=len (*_defa );_ecae .AddInt (_dfg [_afae ]);switch _afae {case 0:_dfbe =_dfg [0];default:_cegd =_dfg [_afae -1]-_dfg [_afae ];_edgf .AddInt (_cegd );};_gfbe =_geg ;};_fgba :=true ;_cead :=2;
var _dca ,_fabe int ;for _cdfb :=1;_cdfb < len (*_edgf );_cdfb ++{if _dca ,_bgf =_ecae .GetInt (_cdfb );_bgf !=nil {return nil ,0,_g .Wrap (_bgf ,_cbfd ,"\u0043\u0068\u0065\u0063ki\u006e\u0067\u0020\u0062\u0065\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0069o\u006e");
};if _fgba &&_dca < int (0.3*float32 (_dfbe )){_cead =_cdfb +1;_fgba =false ;};if _cegd ,_bgf =_edgf .GetInt (_cdfb );_bgf !=nil {return nil ,0,_g .Wrap (_bgf ,_cbfd ,"\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006ea\u0044\u0069\u0066\u0066");};
if _cegd > _fabe {_fabe =_cegd ;};};_feag :=_befc .XResolution ;if _feag ==0{_feag =150;};if _feag > 110{_cead ++;};if _cead < 2{_b .Log .Trace ("J\u0042\u0049\u0047\u0032\u0020\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0069\u0042\u0065\u0073\u0074 \u0074\u006f\u0020\u006d\u0069\u006e\u0069\u006d\u0075\u006d a\u006c\u006c\u006fw\u0061b\u006c\u0065");
_cead =2;};_edcab =_cead +1;if _fdaa ,_bgf =_deeg (nil ,_befc ,_cead +1,1);_bgf !=nil {return nil ,0,_g .Wrap (_bgf ,_cbfd ,"\u0067\u0065\u0074\u0074in\u0067\u0020\u006d\u0061\u0073\u006b\u0020\u0066\u0061\u0069\u006c\u0065\u0064");};return _fdaa ,_edcab ,nil ;
};func init (){const _fgdag ="\u0062\u0069\u0074\u006dap\u0073\u002e\u0069\u006e\u0069\u0074\u0069\u0061\u006c\u0069\u007a\u0061\u0074\u0069o\u006e";_cdgf =New (50,40);var _ccgda error ;_cdgf ,_ccgda =_cdgf .AddBorder (2,1);if _ccgda !=nil {panic (_g .Wrap (_ccgda ,_fgdag ,"f\u0072\u0061\u006d\u0065\u0042\u0069\u0074\u006d\u0061\u0070"));
};_debg ,_ccgda =NewWithData (50,22,_daba );if _ccgda !=nil {panic (_g .Wrap (_ccgda ,_fgdag ,"i\u006d\u0061\u0067\u0065\u0042\u0069\u0074\u006d\u0061\u0070"));};};func (_eggce *ClassedPoints )ySortFunction ()func (_cgbf int ,_dcfb int )bool {return func (_fdec ,_aafb int )bool {return _eggce .YAtIndex (_fdec )< _eggce .YAtIndex (_aafb )};
};func (_gbbba *Selection )setOrigin (_fcddc ,_acbaa int ){_gbbba .Cy ,_gbbba .Cx =_fcddc ,_acbaa };type SelectionValue int ;type Getter interface{GetBitmap ()*Bitmap ;};func _cagc (_baca *Bitmap ,_daaaf ...MorphProcess )(_dgdd *Bitmap ,_eaff error ){const _ebfa ="\u006d\u006f\u0072\u0070\u0068\u0053\u0065\u0071\u0075\u0065\u006e\u0063\u0065";
if _baca ==nil {return nil ,_g .Error (_ebfa ,"\u006d\u006f\u0072\u0070\u0068\u0053\u0065\u0071\u0075\u0065\u006e\u0063\u0065 \u0073\u006f\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};if len (_daaaf )==0{return nil ,_g .Error (_ebfa ,"m\u006f\u0072\u0070\u0068\u0053\u0065q\u0075\u0065\u006e\u0063\u0065\u002c \u0073\u0065\u0071\u0075\u0065\u006e\u0063e\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");};if _eaff =_bacc (_daaaf ...);
_eaff !=nil {return nil ,_g .Wrap (_eaff ,_ebfa ,"");};var _ecaf ,_dadfa ,_ccda int ;_dgdd =_baca .Copy ();for _ ,_defg :=range _daaaf {switch _defg .Operation {case MopDilation :_ecaf ,_dadfa =_defg .getWidthHeight ();_dgdd ,_eaff =DilateBrick (nil ,_dgdd ,_ecaf ,_dadfa );
if _eaff !=nil {return nil ,_g .Wrap (_eaff ,_ebfa ,"");};case MopErosion :_ecaf ,_dadfa =_defg .getWidthHeight ();_dgdd ,_eaff =_fdfc (nil ,_dgdd ,_ecaf ,_dadfa );if _eaff !=nil {return nil ,_g .Wrap (_eaff ,_ebfa ,"");};case MopOpening :_ecaf ,_dadfa =_defg .getWidthHeight ();
_dgdd ,_eaff =_cggb (nil ,_dgdd ,_ecaf ,_dadfa );if _eaff !=nil {return nil ,_g .Wrap (_eaff ,_ebfa ,"");};case MopClosing :_ecaf ,_dadfa =_defg .getWidthHeight ();_dgdd ,_eaff =_gdfa (nil ,_dgdd ,_ecaf ,_dadfa );if _eaff !=nil {return nil ,_g .Wrap (_eaff ,_ebfa ,"");
};case MopRankBinaryReduction :_dgdd ,_eaff =_cgf (_dgdd ,_defg .Arguments ...);if _eaff !=nil {return nil ,_g .Wrap (_eaff ,_ebfa ,"");};case MopReplicativeBinaryExpansion :_dgdd ,_eaff =_ccfb (_dgdd ,_defg .Arguments [0]);if _eaff !=nil {return nil ,_g .Wrap (_eaff ,_ebfa ,"");
};case MopAddBorder :_ccda =_defg .Arguments [0];_dgdd ,_eaff =_dgdd .AddBorder (_ccda ,0);if _eaff !=nil {return nil ,_g .Wrap (_eaff ,_ebfa ,"");};default:return nil ,_g .Error (_ebfa ,"i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006d\u006fr\u0070\u0068\u004f\u0070\u0065\u0072\u0061ti\u006f\u006e\u0020\u0070r\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0074\u006f t\u0068\u0065 \u0073\u0065\u0071\u0075\u0065\u006e\u0063\u0065");
};};if _ccda > 0{_dgdd ,_eaff =_dgdd .RemoveBorder (_ccda );if _eaff !=nil {return nil ,_g .Wrap (_eaff ,_ebfa ,"\u0062\u006f\u0072\u0064\u0065\u0072\u0020\u003e\u0020\u0030");};};return _dgdd ,nil ;};const (ComponentConn Component =iota ;ComponentCharacters ;
ComponentWords ;);const _ggda =5000;type Bitmaps struct{Values []*Bitmap ;Boxes []*_ff .Rectangle ;};func _eefba (_cgcc ,_beca *Bitmap ,_fbaf ,_decfc ,_edg ,_ceg ,_cbe ,_gbbb ,_gcfdff ,_gafc int ,_fded CombinationOperator )error {var _dfeff int ;_gbga :=func (){_dfeff ++;
_edg +=_beca .RowStride ;_ceg +=_cgcc .RowStride ;_cbe +=_cgcc .RowStride };for _dfeff =_fbaf ;_dfeff < _decfc ;_gbga (){var _cacc uint16 ;_gdbe :=_edg ;for _aead :=_ceg ;_aead <=_cbe ;_aead ++{_caf ,_fbga :=_beca .GetByte (_gdbe );if _fbga !=nil {return _fbga ;
};_gcde ,_fbga :=_cgcc .GetByte (_aead );if _fbga !=nil {return _fbga ;};_cacc =(_cacc |uint16 (_gcde ))<<uint (_gafc );_gcde =byte (_cacc >>8);if _aead ==_cbe {_gcde =_afbb (uint (_gbbb ),_gcde );};if _fbga =_beca .SetByte (_gdbe ,_fgcb (_caf ,_gcde ,_fded ));
_fbga !=nil {return _fbga ;};_gdbe ++;_cacc <<=uint (_gcfdff );};};return nil ;};func _egef ()(_abc []byte ){_abc =make ([]byte ,256);for _ace :=0;_ace < 256;_ace ++{_edcc :=byte (_ace );_abc [_edcc ]=(_edcc &0x01)|((_edcc &0x04)>>1)|((_edcc &0x10)>>2)|((_edcc &0x40)>>3)|((_edcc &0x02)<<3)|((_edcc &0x08)<<2)|((_edcc &0x20)<<1)|(_edcc &0x80);
};return _abc ;};type Boxes []*_ff .Rectangle ;func (_eecd *Bitmap )centroid (_afge ,_gebb []int )(Point ,error ){_dgd :=Point {};_eecd .setPadBits (0);if len (_afge )==0{_afge =_fddb ();};if len (_gebb )==0{_gebb =_efaf ();};var _bgfb ,_bccf ,_ecc ,_cgea ,_ffafd ,_gcba int ;
var _dea byte ;for _ffafd =0;_ffafd < _eecd .Height ;_ffafd ++{_faca :=_eecd .RowStride *_ffafd ;_cgea =0;for _gcba =0;_gcba < _eecd .RowStride ;_gcba ++{_dea =_eecd .Data [_faca +_gcba ];if _dea !=0{_cgea +=_gebb [_dea ];_bgfb +=_afge [_dea ]+_gcba *8*_gebb [_dea ];
};};_ecc +=_cgea ;_bccf +=_cgea *_ffafd ;};if _ecc !=0{_dgd .X =float32 (_bgfb )/float32 (_ecc );_dgd .Y =float32 (_bccf )/float32 (_ecc );};return _dgd ,nil ;};func _ggca (_fgg ,_ffgb ,_fbcb *Bitmap )(*Bitmap ,error ){const _baeg ="\u0073\u0075\u0062\u0074\u0072\u0061\u0063\u0074";
if _ffgb ==nil {return nil ,_g .Error (_baeg ,"'\u0073\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _fbcb ==nil {return nil ,_g .Error (_baeg ,"'\u0073\u0032\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};var _ggdf error ;switch {case _fgg ==_ffgb :if _ggdf =_fgg .RasterOperation (0,0,_ffgb .Width ,_ffgb .Height ,PixNotSrcAndDst ,_fbcb ,0,0);
_ggdf !=nil {return nil ,_g .Wrap (_ggdf ,_baeg ,"\u0064 \u003d\u003d\u0020\u0073\u0031");};case _fgg ==_fbcb :if _ggdf =_fgg .RasterOperation (0,0,_ffgb .Width ,_ffgb .Height ,PixNotSrcAndDst ,_ffgb ,0,0);_ggdf !=nil {return nil ,_g .Wrap (_ggdf ,_baeg ,"\u0064 \u003d\u003d\u0020\u0073\u0032");
};default:_fgg ,_ggdf =_cgde (_fgg ,_ffgb );if _ggdf !=nil {return nil ,_g .Wrap (_ggdf ,_baeg ,"");};if _ggdf =_fgg .RasterOperation (0,0,_ffgb .Width ,_ffgb .Height ,PixNotSrcAndDst ,_fbcb ,0,0);_ggdf !=nil {return nil ,_g .Wrap (_ggdf ,_baeg ,"\u0064e\u0066\u0061\u0075\u006c\u0074");
};};return _fgg ,nil ;};func MakePixelSumTab8 ()[]int {return _efaf ()};func TstASymbol (t *_a .T )*Bitmap {t .Helper ();_dceb :=New (6,6);_c .NoError (t ,_dceb .SetPixel (1,0,1));_c .NoError (t ,_dceb .SetPixel (2,0,1));_c .NoError (t ,_dceb .SetPixel (3,0,1));
_c .NoError (t ,_dceb .SetPixel (4,0,1));_c .NoError (t ,_dceb .SetPixel (5,1,1));_c .NoError (t ,_dceb .SetPixel (1,2,1));_c .NoError (t ,_dceb .SetPixel (2,2,1));_c .NoError (t ,_dceb .SetPixel (3,2,1));_c .NoError (t ,_dceb .SetPixel (4,2,1));_c .NoError (t ,_dceb .SetPixel (5,2,1));
_c .NoError (t ,_dceb .SetPixel (0,3,1));_c .NoError (t ,_dceb .SetPixel (5,3,1));_c .NoError (t ,_dceb .SetPixel (0,4,1));_c .NoError (t ,_dceb .SetPixel (5,4,1));_c .NoError (t ,_dceb .SetPixel (1,5,1));_c .NoError (t ,_dceb .SetPixel (2,5,1));_c .NoError (t ,_dceb .SetPixel (3,5,1));
_c .NoError (t ,_dceb .SetPixel (4,5,1));_c .NoError (t ,_dceb .SetPixel (5,5,1));return _dceb ;};func SelCreateBrick (h ,w int ,cy ,cx int ,tp SelectionValue )*Selection {_aaae :=_ggcf (h ,w ,"");_aaae .setOrigin (cy ,cx );var _ffgef ,_gbgf int ;for _ffgef =0;
_ffgef < h ;_ffgef ++{for _gbgf =0;_gbgf < w ;_gbgf ++{_aaae .Data [_ffgef ][_gbgf ]=tp ;};};return _aaae ;};func MakePixelCentroidTab8 ()[]int {return _fddb ()};func (_gcga *Bitmaps )SelectBySize (width ,height int ,tp LocationFilter ,relation SizeComparison )(_egbg *Bitmaps ,_eebf error ){const _dbfad ="B\u0069t\u006d\u0061\u0070\u0073\u002e\u0053\u0065\u006ce\u0063\u0074\u0042\u0079Si\u007a\u0065";
if _gcga ==nil {return nil ,_g .Error (_dbfad ,"\u0027\u0062\u0027 B\u0069\u0074\u006d\u0061\u0070\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};switch tp {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_g .Errorf (_dbfad ,"\u0070\u0072\u006f\u0076\u0069d\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u006fc\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",tp );
};switch relation {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE ,SizeSelectIfEQ :default:return nil ,_g .Errorf (_dbfad ,"\u0069\u006e\u0076\u0061li\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025d\u0027",relation );
};_cbddg ,_eebf :=_gcga .makeSizeIndicator (width ,height ,tp ,relation );if _eebf !=nil {return nil ,_g .Wrap (_eebf ,_dbfad ,"");};_egbg ,_eebf =_gcga .selectByIndicator (_cbddg );if _eebf !=nil {return nil ,_g .Wrap (_eebf ,_dbfad ,"");};return _egbg ,nil ;
};func (_bgda *Bitmaps )Size ()int {return len (_bgda .Values )};var _ _d .Interface =&ClassedPoints {};func Centroid (bm *Bitmap ,centTab ,sumTab []int )(Point ,error ){return bm .centroid (centTab ,sumTab )};func (_fdge *Bitmap )setEightFullBytes (_eabb int ,_abfc uint64 )error {if _eabb +7> len (_fdge .Data )-1{return _g .Error ("\u0073\u0065\u0074\u0045\u0069\u0067\u0068\u0074\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_fdge .Data [_eabb ]=byte ((_abfc &0xff00000000000000)>>56);_fdge .Data [_eabb +1]=byte ((_abfc &0xff000000000000)>>48);_fdge .Data [_eabb +2]=byte ((_abfc &0xff0000000000)>>40);_fdge .Data [_eabb +3]=byte ((_abfc &0xff00000000)>>32);_fdge .Data [_eabb +4]=byte ((_abfc &0xff000000)>>24);
_fdge .Data [_eabb +5]=byte ((_abfc &0xff0000)>>16);_fdge .Data [_eabb +6]=byte ((_abfc &0xff00)>>8);_fdge .Data [_eabb +7]=byte (_abfc &0xff);return nil ;};