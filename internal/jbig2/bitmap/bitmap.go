//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package bitmap ;import (_cf "encoding/binary";_ea "github.com/stretchr/testify/require";_cg "github.com/unidoc/unipdf/v3/common";_f "github.com/unidoc/unipdf/v3/internal/bitwise";_a "github.com/unidoc/unipdf/v3/internal/imageutil";_d "github.com/unidoc/unipdf/v3/internal/jbig2/basic";
_e "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_ca "image";_cd "math";_cc "sort";_b "strings";_c "testing";);type Boxes []*_ca .Rectangle ;var _bff [256]uint8 ;func _bb (_ab *Bitmap ,_bbf int )(*Bitmap ,error ){const _cad ="\u0065x\u0070a\u006e\u0064\u0042\u0069\u006ea\u0072\u0079P\u006f\u0077\u0065\u0072\u0032";
if _ab ==nil {return nil ,_e .Error (_cad ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _bbf ==1{return _ebg (nil ,_ab );};if _bbf !=2&&_bbf !=4&&_bbf !=8{return nil ,_e .Error (_cad ,"\u0066\u0061\u0063t\u006f\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0069n\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d\u0020\u0072\u0061\u006e\u0067\u0065");
};_cac :=_bbf *_ab .Width ;_ffd :=_bbf *_ab .Height ;_caae :=New (_cac ,_ffd );var _cb error ;switch _bbf {case 2:_cb =_fb (_caae ,_ab );case 4:_cb =_geg (_caae ,_ab );case 8:_cb =_fdc (_caae ,_ab );};if _cb !=nil {return nil ,_e .Wrap (_cb ,_cad ,"");
};return _caae ,nil ;};type ClassedPoints struct{*Points ;_d .IntSlice ;_ddfc func (_abae ,_gcdg int )bool ;};func _agbe (_fdffff ,_deea ,_ggcdd *Bitmap ,_ddda int )(*Bitmap ,error ){const _dbfa ="\u0073\u0065\u0065\u0064\u0046\u0069\u006c\u006c\u0042i\u006e\u0061\u0072\u0079";
if _deea ==nil {return nil ,_e .Error (_dbfa ,"s\u006fu\u0072\u0063\u0065\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");};if _ggcdd ==nil {return nil ,_e .Error (_dbfa ,"'\u006da\u0073\u006b\u0027\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");
};if _ddda !=4&&_ddda !=8{return nil ,_e .Error (_dbfa ,"\u0063\u006f\u006en\u0065\u0063\u0074\u0069v\u0069\u0074\u0079\u0020\u006e\u006f\u0074 \u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0034\u002c\u0038\u007d");};var _ddfd error ;_fdffff ,_ddfd =_ebg (_fdffff ,_deea );
if _ddfd !=nil {return nil ,_e .Wrap (_ddfd ,_dbfa ,"\u0063o\u0070y\u0020\u0073\u006f\u0075\u0072c\u0065\u0020t\u006f\u0020\u0027\u0064\u0027");};_dffe :=_deea .createTemplate ();_ggcdd .setPadBits (0);for _bdgec :=0;_bdgec < _cecf ;_bdgec ++{_dffe ,_ddfd =_ebg (_dffe ,_fdffff );
if _ddfd !=nil {return nil ,_e .Wrapf (_ddfd ,_dbfa ,"\u0069\u0074\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064",_bdgec );};if _ddfd =_gaeg (_fdffff ,_ggcdd ,_ddda );_ddfd !=nil {return nil ,_e .Wrapf (_ddfd ,_dbfa ,"\u0069\u0074\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064",_bdgec );
};if _dffe .Equals (_fdffff ){break ;};};return _fdffff ,nil ;};func (_eebbb *Bitmap )CreateTemplate ()*Bitmap {return _eebbb .createTemplate ()};func (_efd *Bitmap )And (s *Bitmap )(_fdaf *Bitmap ,_eadc error ){const _bga ="\u0042\u0069\u0074\u006d\u0061\u0070\u002e\u0041\u006e\u0064";
if _efd ==nil {return nil ,_e .Error (_bga ,"\u0027b\u0069t\u006d\u0061\u0070\u0020\u0027b\u0027\u0020i\u0073\u0020\u006e\u0069\u006c");};if s ==nil {return nil ,_e .Error (_bga ,"\u0062\u0069\u0074\u006d\u0061\u0070\u0020\u0027\u0073\u0027\u0020\u0069s\u0020\u006e\u0069\u006c");
};if !_efd .SizesEqual (s ){_cg .Log .Debug ("\u0025\u0073\u0020-\u0020\u0042\u0069\u0074\u006d\u0061\u0070\u0020\u0027\u0073\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0073\u0069\u007a\u0065 \u0077\u0069\u0074\u0068\u0020\u0027\u0062\u0027",_bga );
};if _fdaf ,_eadc =_ebg (_fdaf ,_efd );_eadc !=nil {return nil ,_e .Wrap (_eadc ,_bga ,"\u0063\u0061\u006e't\u0020\u0063\u0072\u0065\u0061\u0074\u0065\u0020\u0027\u0064\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _eadc =_fdaf .RasterOperation (0,0,_fdaf .Width ,_fdaf .Height ,PixSrcAndDst ,s ,0,0);
_eadc !=nil {return nil ,_e .Wrap (_eadc ,_bga ,"");};return _fdaf ,nil ;};func (_fge *Bitmap )setEightBytes (_fcfb int ,_acag uint64 )error {_gad :=_fge .RowStride -(_fcfb %_fge .RowStride );if _fge .RowStride !=_fge .Width >>3{_gad --;};if _gad >=8{return _fge .setEightFullBytes (_fcfb ,_acag );
};return _fge .setEightPartlyBytes (_fcfb ,_gad ,_acag );};func _bcdb (_gdg ,_gfbf ,_bed *Bitmap )(*Bitmap ,error ){const _fcc ="\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0078\u006f\u0072";if _gfbf ==nil {return nil ,_e .Error (_fcc ,"'\u0062\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");
};if _bed ==nil {return nil ,_e .Error (_fcc ,"'\u0062\u0032\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _gdg ==_bed {return nil ,_e .Error (_fcc ,"'\u0064\u0027\u0020\u003d\u003d\u0020\u0027\u0062\u0032\u0027");};if !_gfbf .SizesEqual (_bed ){_cg .Log .Debug ("\u0025s\u0020\u002d \u0042\u0069\u0074\u006da\u0070\u0020\u0027b\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074 e\u0071\u0075\u0061l\u0020\u0073i\u007a\u0065\u0020\u0077\u0069\u0074h\u0020\u0027b\u0032\u0027",_fcc );
};var _efae error ;if _gdg ,_efae =_ebg (_gdg ,_gfbf );_efae !=nil {return nil ,_e .Wrap (_efae ,_fcc ,"\u0063\u0061n\u0027\u0074\u0020c\u0072\u0065\u0061\u0074\u0065\u0020\u0027\u0064\u0027");};if _efae =_gdg .RasterOperation (0,0,_gdg .Width ,_gdg .Height ,PixSrcXorDst ,_bed ,0,0);
_efae !=nil {return nil ,_e .Wrap (_efae ,_fcc ,"");};return _gdg ,nil ;};type byHeight Bitmaps ;func (_gbdgf *Bitmaps )GetBox (i int )(*_ca .Rectangle ,error ){const _dabe ="\u0047\u0065\u0074\u0042\u006f\u0078";if _gbdgf ==nil {return nil ,_e .Error (_dabe ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074\u006d\u0061\u0070s\u0027");
};if i > len (_gbdgf .Boxes )-1{return nil ,_e .Errorf (_dabe ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _gbdgf .Boxes [i ],nil ;};const (_ SizeComparison =iota ;
SizeSelectIfLT ;SizeSelectIfGT ;SizeSelectIfLTE ;SizeSelectIfGTE ;SizeSelectIfEQ ;);func TstGetScaledSymbol (t *_c .T ,sm *Bitmap ,scale ...int )*Bitmap {if len (scale )==0{return sm ;};if scale [0]==1{return sm ;};_beaec ,_agaa :=MorphSequence (sm ,MorphProcess {Operation :MopReplicativeBinaryExpansion ,Arguments :scale });
_ea .NoError (t ,_agaa );return _beaec ;};func TstFrameBitmap ()*Bitmap {return _caca .Copy ()};func (_bffg Points )Size ()int {return len (_bffg )};func (_fbcbd *Bitmap )InverseData (){_fbcbd .inverseData ()};func (_add *Bitmap )SetByte (index int ,v byte )error {if index > len (_add .Data )-1||index < 0{return _e .Errorf ("\u0053e\u0074\u0042\u0079\u0074\u0065","\u0069\u006e\u0064\u0065x \u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020%\u0064",index );
};_add .Data [index ]=v ;return nil ;};func init (){for _gdc :=0;_gdc < 256;_gdc ++{_bff [_gdc ]=uint8 (_gdc &0x1)+(uint8 (_gdc >>1)&0x1)+(uint8 (_gdc >>2)&0x1)+(uint8 (_gdc >>3)&0x1)+(uint8 (_gdc >>4)&0x1)+(uint8 (_gdc >>5)&0x1)+(uint8 (_gdc >>6)&0x1)+(uint8 (_gdc >>7)&0x1);
};};func (_cddae *Bitmap )setTwoBytes (_ddac int ,_cacgg uint16 )error {if _ddac +1> len (_cddae .Data )-1{return _e .Errorf ("s\u0065\u0074\u0054\u0077\u006f\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_ddac );
};_cddae .Data [_ddac ]=byte ((_cacgg &0xff00)>>8);_cddae .Data [_ddac +1]=byte (_cacgg &0xff);return nil ;};func _eec (_dcfg ,_afff *Bitmap ,_gecaf ,_dece int )(*Bitmap ,error ){const _bebdg ="\u006fp\u0065\u006e\u0042\u0072\u0069\u0063k";if _afff ==nil {return nil ,_e .Error (_bebdg ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");
};if _gecaf < 1&&_dece < 1{return nil ,_e .Error (_bebdg ,"\u0068\u0053\u0069\u007ae \u003c\u0020\u0031\u0020\u0026\u0026\u0020\u0076\u0053\u0069\u007a\u0065\u0020\u003c \u0031");};if _gecaf ==1&&_dece ==1{return _afff .Copy (),nil ;};if _gecaf ==1||_dece ==1{var _ccge error ;
_aef :=SelCreateBrick (_dece ,_gecaf ,_dece /2,_gecaf /2,SelHit );_dcfg ,_ccge =_efgd (_dcfg ,_afff ,_aef );if _ccge !=nil {return nil ,_e .Wrap (_ccge ,_bebdg ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _dcfg ,nil ;};_daa :=SelCreateBrick (1,_gecaf ,0,_gecaf /2,SelHit );_eef :=SelCreateBrick (_dece ,1,_dece /2,0,SelHit );_adac ,_efede :=_efac (nil ,_afff ,_daa );if _efede !=nil {return nil ,_e .Wrap (_efede ,_bebdg ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};_dcfg ,_efede =_efac (_dcfg ,_adac ,_eef );if _efede !=nil {return nil ,_e .Wrap (_efede ,_bebdg ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};_ ,_efede =_eebc (_adac ,_dcfg ,_daa );if _efede !=nil {return nil ,_e .Wrap (_efede ,_bebdg ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};_ ,_efede =_eebc (_dcfg ,_adac ,_eef );if _efede !=nil {return nil ,_e .Wrap (_efede ,_bebdg ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};return _dcfg ,nil ;};var _ _cc .Interface =&ClassedPoints {};func TstPSymbol (t *_c .T )*Bitmap {t .Helper ();
_efba :=New (5,8);_ea .NoError (t ,_efba .SetPixel (0,0,1));_ea .NoError (t ,_efba .SetPixel (1,0,1));_ea .NoError (t ,_efba .SetPixel (2,0,1));_ea .NoError (t ,_efba .SetPixel (3,0,1));_ea .NoError (t ,_efba .SetPixel (4,1,1));_ea .NoError (t ,_efba .SetPixel (0,1,1));
_ea .NoError (t ,_efba .SetPixel (4,2,1));_ea .NoError (t ,_efba .SetPixel (0,2,1));_ea .NoError (t ,_efba .SetPixel (4,3,1));_ea .NoError (t ,_efba .SetPixel (0,3,1));_ea .NoError (t ,_efba .SetPixel (0,4,1));_ea .NoError (t ,_efba .SetPixel (1,4,1));
_ea .NoError (t ,_efba .SetPixel (2,4,1));_ea .NoError (t ,_efba .SetPixel (3,4,1));_ea .NoError (t ,_efba .SetPixel (0,5,1));_ea .NoError (t ,_efba .SetPixel (0,6,1));_ea .NoError (t ,_efba .SetPixel (0,7,1));return _efba ;};func (_agf *Bitmap )addPadBits ()(_cbbd error ){const _edgf ="\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0061\u0064\u0064\u0050\u0061d\u0042\u0069\u0074\u0073";
_agcd :=_agf .Width %8;if _agcd ==0{return nil ;};_gbfg :=_agf .Width /8;_fba :=_f .NewReader (_agf .Data );_ddae :=make ([]byte ,_agf .Height *_agf .RowStride );_bag :=_f .NewWriterMSB (_ddae );_bbgf :=make ([]byte ,_gbfg );var (_gafd int ;_cgd uint64 ;
);for _gafd =0;_gafd < _agf .Height ;_gafd ++{if _ ,_cbbd =_fba .Read (_bbgf );_cbbd !=nil {return _e .Wrap (_cbbd ,_edgf ,"\u0066u\u006c\u006c\u0020\u0062\u0079\u0074e");};if _ ,_cbbd =_bag .Write (_bbgf );_cbbd !=nil {return _e .Wrap (_cbbd ,_edgf ,"\u0066\u0075\u006c\u006c\u0020\u0062\u0079\u0074\u0065\u0073");
};if _cgd ,_cbbd =_fba .ReadBits (byte (_agcd ));_cbbd !=nil {return _e .Wrap (_cbbd ,_edgf ,"\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0062\u0069\u0074\u0073");};if _cbbd =_bag .WriteByte (byte (_cgd )<<uint (8-_agcd ));_cbbd !=nil {return _e .Wrap (_cbbd ,_edgf ,"\u006ca\u0073\u0074\u0020\u0062\u0079\u0074e");
};};_agf .Data =_bag .Data ();return nil ;};func TstAddSymbol (t *_c .T ,bms *Bitmaps ,sym *Bitmap ,x *int ,y int ,space int ){bms .AddBitmap (sym );_efeag :=_ca .Rect (*x ,y ,*x +sym .Width ,y +sym .Height );bms .AddBox (&_efeag );*x +=sym .Width +space ;
};func (_dbfd *Bitmap )setEightFullBytes (_dgdc int ,_egf uint64 )error {if _dgdc +7> len (_dbfd .Data )-1{return _e .Error ("\u0073\u0065\u0074\u0045\u0069\u0067\u0068\u0074\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_dbfd .Data [_dgdc ]=byte ((_egf &0xff00000000000000)>>56);_dbfd .Data [_dgdc +1]=byte ((_egf &0xff000000000000)>>48);_dbfd .Data [_dgdc +2]=byte ((_egf &0xff0000000000)>>40);_dbfd .Data [_dgdc +3]=byte ((_egf &0xff00000000)>>32);_dbfd .Data [_dgdc +4]=byte ((_egf &0xff000000)>>24);
_dbfd .Data [_dgdc +5]=byte ((_egf &0xff0000)>>16);_dbfd .Data [_dgdc +6]=byte ((_egf &0xff00)>>8);_dbfd .Data [_dgdc +7]=byte (_egf &0xff);return nil ;};func CorrelationScore (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab []int )(_ffeb float64 ,_dec error ){const _cdgf ="\u0063\u006fr\u0072\u0065\u006ca\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065";
if bm1 ==nil ||bm2 ==nil {return 0,_e .Error (_cdgf ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0062\u0069\u0074ma\u0070\u0073");};if tab ==nil {return 0,_e .Error (_cdgf ,"\u0027\u0074\u0061\u0062\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};if area1 <=0||area2 <=0{return 0,_e .Error (_cdgf ,"\u0061\u0072\u0065\u0061s\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0067r\u0065a\u0074\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u0030");};_gbbfc ,_ebga :=bm1 .Width ,bm1 .Height ;_facd ,_ffee :=bm2 .Width ,bm2 .Height ;
_ebfe :=_fcdg (_gbbfc -_facd );if _ebfe > maxDiffW {return 0,nil ;};_gbfd :=_fcdg (_ebga -_ffee );if _gbfd > maxDiffH {return 0,nil ;};var _gbab ,_bdbb int ;if delX >=0{_gbab =int (delX +0.5);}else {_gbab =int (delX -0.5);};if delY >=0{_bdbb =int (delY +0.5);
}else {_bdbb =int (delY -0.5);};_fdbc :=_bad (_bdbb ,0);_bfa :=_ccfc (_ffee +_bdbb ,_ebga );_cbce :=bm1 .RowStride *_fdbc ;_dgabd :=bm2 .RowStride *(_fdbc -_bdbb );_dea :=_bad (_gbab ,0);_abca :=_ccfc (_facd +_gbab ,_gbbfc );_gccdd :=bm2 .RowStride ;var _dggg ,_cfea int ;
if _gbab >=8{_dggg =_gbab >>3;_cbce +=_dggg ;_dea -=_dggg <<3;_abca -=_dggg <<3;_gbab &=7;}else if _gbab <=-8{_cfea =-((_gbab +7)>>3);_dgabd +=_cfea ;_gccdd -=_cfea ;_gbab +=_cfea <<3;};if _dea >=_abca ||_fdbc >=_bfa {return 0,nil ;};_cadbf :=(_abca +7)>>3;
var (_ffbc ,_dedce ,_abec byte ;_ffcf ,_gabf ,_dab int ;);switch {case _gbab ==0:for _dab =_fdbc ;_dab < _bfa ;_dab ,_cbce ,_dgabd =_dab +1,_cbce +bm1 .RowStride ,_dgabd +bm2 .RowStride {for _gabf =0;_gabf < _cadbf ;_gabf ++{_abec =bm1 .Data [_cbce +_gabf ]&bm2 .Data [_dgabd +_gabf ];
_ffcf +=tab [_abec ];};};case _gbab > 0:if _gccdd < _cadbf {for _dab =_fdbc ;_dab < _bfa ;_dab ,_cbce ,_dgabd =_dab +1,_cbce +bm1 .RowStride ,_dgabd +bm2 .RowStride {_ffbc ,_dedce =bm1 .Data [_cbce ],bm2 .Data [_dgabd ]>>uint (_gbab );_abec =_ffbc &_dedce ;
_ffcf +=tab [_abec ];for _gabf =1;_gabf < _gccdd ;_gabf ++{_ffbc ,_dedce =bm1 .Data [_cbce +_gabf ],(bm2 .Data [_dgabd +_gabf ]>>uint (_gbab ))|(bm2 .Data [_dgabd +_gabf -1]<<uint (8-_gbab ));_abec =_ffbc &_dedce ;_ffcf +=tab [_abec ];};_ffbc =bm1 .Data [_cbce +_gabf ];
_dedce =bm2 .Data [_dgabd +_gabf -1]<<uint (8-_gbab );_abec =_ffbc &_dedce ;_ffcf +=tab [_abec ];};}else {for _dab =_fdbc ;_dab < _bfa ;_dab ,_cbce ,_dgabd =_dab +1,_cbce +bm1 .RowStride ,_dgabd +bm2 .RowStride {_ffbc ,_dedce =bm1 .Data [_cbce ],bm2 .Data [_dgabd ]>>uint (_gbab );
_abec =_ffbc &_dedce ;_ffcf +=tab [_abec ];for _gabf =1;_gabf < _cadbf ;_gabf ++{_ffbc =bm1 .Data [_cbce +_gabf ];_dedce =(bm2 .Data [_dgabd +_gabf ]>>uint (_gbab ))|(bm2 .Data [_dgabd +_gabf -1]<<uint (8-_gbab ));_abec =_ffbc &_dedce ;_ffcf +=tab [_abec ];
};};};default:if _cadbf < _gccdd {for _dab =_fdbc ;_dab < _bfa ;_dab ,_cbce ,_dgabd =_dab +1,_cbce +bm1 .RowStride ,_dgabd +bm2 .RowStride {for _gabf =0;_gabf < _cadbf ;_gabf ++{_ffbc =bm1 .Data [_cbce +_gabf ];_dedce =bm2 .Data [_dgabd +_gabf ]<<uint (-_gbab );
_dedce |=bm2 .Data [_dgabd +_gabf +1]>>uint (8+_gbab );_abec =_ffbc &_dedce ;_ffcf +=tab [_abec ];};};}else {for _dab =_fdbc ;_dab < _bfa ;_dab ,_cbce ,_dgabd =_dab +1,_cbce +bm1 .RowStride ,_dgabd +bm2 .RowStride {for _gabf =0;_gabf < _cadbf -1;_gabf ++{_ffbc =bm1 .Data [_cbce +_gabf ];
_dedce =bm2 .Data [_dgabd +_gabf ]<<uint (-_gbab );_dedce |=bm2 .Data [_dgabd +_gabf +1]>>uint (8+_gbab );_abec =_ffbc &_dedce ;_ffcf +=tab [_abec ];};_ffbc =bm1 .Data [_cbce +_gabf ];_dedce =bm2 .Data [_dgabd +_gabf ]<<uint (-_gbab );_abec =_ffbc &_dedce ;
_ffcf +=tab [_abec ];};};};_ffeb =float64 (_ffcf )*float64 (_ffcf )/(float64 (area1 )*float64 (area2 ));return _ffeb ,nil ;};func _dbeae (_cdb ,_cfff ,_fbcg *Bitmap )(*Bitmap ,error ){const _ccdb ="\u0073\u0075\u0062\u0074\u0072\u0061\u0063\u0074";if _cfff ==nil {return nil ,_e .Error (_ccdb ,"'\u0073\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");
};if _fbcg ==nil {return nil ,_e .Error (_ccdb ,"'\u0073\u0032\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};var _fdgdf error ;switch {case _cdb ==_cfff :if _fdgdf =_cdb .RasterOperation (0,0,_cfff .Width ,_cfff .Height ,PixNotSrcAndDst ,_fbcg ,0,0);
_fdgdf !=nil {return nil ,_e .Wrap (_fdgdf ,_ccdb ,"\u0064 \u003d\u003d\u0020\u0073\u0031");};case _cdb ==_fbcg :if _fdgdf =_cdb .RasterOperation (0,0,_cfff .Width ,_cfff .Height ,PixNotSrcAndDst ,_cfff ,0,0);_fdgdf !=nil {return nil ,_e .Wrap (_fdgdf ,_ccdb ,"\u0064 \u003d\u003d\u0020\u0073\u0032");
};default:_cdb ,_fdgdf =_ebg (_cdb ,_cfff );if _fdgdf !=nil {return nil ,_e .Wrap (_fdgdf ,_ccdb ,"");};if _fdgdf =_cdb .RasterOperation (0,0,_cfff .Width ,_cfff .Height ,PixNotSrcAndDst ,_fbcg ,0,0);_fdgdf !=nil {return nil ,_e .Wrap (_fdgdf ,_ccdb ,"\u0064e\u0066\u0061\u0075\u006c\u0074");
};};return _cdb ,nil ;};func _cbfc (_dbfdb *Bitmap ,_gcba ,_ddce ,_aecg ,_aebe int ,_afgb RasterOperator ,_feaf *Bitmap ,_cbae ,_gdagd int )error {var (_dafc byte ;_dbdb int ;_bdac int ;_gefc ,_cfgg int ;_fga ,_cgfc int ;);_dedf :=_aecg >>3;_eebgd :=_aecg &7;
if _eebgd > 0{_dafc =_ggge [_eebgd ];};_dbdb =_feaf .RowStride *_gdagd +(_cbae >>3);_bdac =_dbfdb .RowStride *_ddce +(_gcba >>3);switch _afgb {case PixSrc :for _fga =0;_fga < _aebe ;_fga ++{_gefc =_dbdb +_fga *_feaf .RowStride ;_cfgg =_bdac +_fga *_dbfdb .RowStride ;
for _cgfc =0;_cgfc < _dedf ;_cgfc ++{_dbfdb .Data [_cfgg ]=_feaf .Data [_gefc ];_cfgg ++;_gefc ++;};if _eebgd > 0{_dbfdb .Data [_cfgg ]=_ffbgf (_dbfdb .Data [_cfgg ],_feaf .Data [_gefc ],_dafc );};};case PixNotSrc :for _fga =0;_fga < _aebe ;_fga ++{_gefc =_dbdb +_fga *_feaf .RowStride ;
_cfgg =_bdac +_fga *_dbfdb .RowStride ;for _cgfc =0;_cgfc < _dedf ;_cgfc ++{_dbfdb .Data [_cfgg ]=^(_feaf .Data [_gefc ]);_cfgg ++;_gefc ++;};if _eebgd > 0{_dbfdb .Data [_cfgg ]=_ffbgf (_dbfdb .Data [_cfgg ],^_feaf .Data [_gefc ],_dafc );};};case PixSrcOrDst :for _fga =0;
_fga < _aebe ;_fga ++{_gefc =_dbdb +_fga *_feaf .RowStride ;_cfgg =_bdac +_fga *_dbfdb .RowStride ;for _cgfc =0;_cgfc < _dedf ;_cgfc ++{_dbfdb .Data [_cfgg ]|=_feaf .Data [_gefc ];_cfgg ++;_gefc ++;};if _eebgd > 0{_dbfdb .Data [_cfgg ]=_ffbgf (_dbfdb .Data [_cfgg ],_feaf .Data [_gefc ]|_dbfdb .Data [_cfgg ],_dafc );
};};case PixSrcAndDst :for _fga =0;_fga < _aebe ;_fga ++{_gefc =_dbdb +_fga *_feaf .RowStride ;_cfgg =_bdac +_fga *_dbfdb .RowStride ;for _cgfc =0;_cgfc < _dedf ;_cgfc ++{_dbfdb .Data [_cfgg ]&=_feaf .Data [_gefc ];_cfgg ++;_gefc ++;};if _eebgd > 0{_dbfdb .Data [_cfgg ]=_ffbgf (_dbfdb .Data [_cfgg ],_feaf .Data [_gefc ]&_dbfdb .Data [_cfgg ],_dafc );
};};case PixSrcXorDst :for _fga =0;_fga < _aebe ;_fga ++{_gefc =_dbdb +_fga *_feaf .RowStride ;_cfgg =_bdac +_fga *_dbfdb .RowStride ;for _cgfc =0;_cgfc < _dedf ;_cgfc ++{_dbfdb .Data [_cfgg ]^=_feaf .Data [_gefc ];_cfgg ++;_gefc ++;};if _eebgd > 0{_dbfdb .Data [_cfgg ]=_ffbgf (_dbfdb .Data [_cfgg ],_feaf .Data [_gefc ]^_dbfdb .Data [_cfgg ],_dafc );
};};case PixNotSrcOrDst :for _fga =0;_fga < _aebe ;_fga ++{_gefc =_dbdb +_fga *_feaf .RowStride ;_cfgg =_bdac +_fga *_dbfdb .RowStride ;for _cgfc =0;_cgfc < _dedf ;_cgfc ++{_dbfdb .Data [_cfgg ]|=^(_feaf .Data [_gefc ]);_cfgg ++;_gefc ++;};if _eebgd > 0{_dbfdb .Data [_cfgg ]=_ffbgf (_dbfdb .Data [_cfgg ],^(_feaf .Data [_gefc ])|_dbfdb .Data [_cfgg ],_dafc );
};};case PixNotSrcAndDst :for _fga =0;_fga < _aebe ;_fga ++{_gefc =_dbdb +_fga *_feaf .RowStride ;_cfgg =_bdac +_fga *_dbfdb .RowStride ;for _cgfc =0;_cgfc < _dedf ;_cgfc ++{_dbfdb .Data [_cfgg ]&=^(_feaf .Data [_gefc ]);_cfgg ++;_gefc ++;};if _eebgd > 0{_dbfdb .Data [_cfgg ]=_ffbgf (_dbfdb .Data [_cfgg ],^(_feaf .Data [_gefc ])&_dbfdb .Data [_cfgg ],_dafc );
};};case PixSrcOrNotDst :for _fga =0;_fga < _aebe ;_fga ++{_gefc =_dbdb +_fga *_feaf .RowStride ;_cfgg =_bdac +_fga *_dbfdb .RowStride ;for _cgfc =0;_cgfc < _dedf ;_cgfc ++{_dbfdb .Data [_cfgg ]=_feaf .Data [_gefc ]|^(_dbfdb .Data [_cfgg ]);_cfgg ++;_gefc ++;
};if _eebgd > 0{_dbfdb .Data [_cfgg ]=_ffbgf (_dbfdb .Data [_cfgg ],_feaf .Data [_gefc ]|^(_dbfdb .Data [_cfgg ]),_dafc );};};case PixSrcAndNotDst :for _fga =0;_fga < _aebe ;_fga ++{_gefc =_dbdb +_fga *_feaf .RowStride ;_cfgg =_bdac +_fga *_dbfdb .RowStride ;
for _cgfc =0;_cgfc < _dedf ;_cgfc ++{_dbfdb .Data [_cfgg ]=_feaf .Data [_gefc ]&^(_dbfdb .Data [_cfgg ]);_cfgg ++;_gefc ++;};if _eebgd > 0{_dbfdb .Data [_cfgg ]=_ffbgf (_dbfdb .Data [_cfgg ],_feaf .Data [_gefc ]&^(_dbfdb .Data [_cfgg ]),_dafc );};};case PixNotPixSrcOrDst :for _fga =0;
_fga < _aebe ;_fga ++{_gefc =_dbdb +_fga *_feaf .RowStride ;_cfgg =_bdac +_fga *_dbfdb .RowStride ;for _cgfc =0;_cgfc < _dedf ;_cgfc ++{_dbfdb .Data [_cfgg ]=^(_feaf .Data [_gefc ]|_dbfdb .Data [_cfgg ]);_cfgg ++;_gefc ++;};if _eebgd > 0{_dbfdb .Data [_cfgg ]=_ffbgf (_dbfdb .Data [_cfgg ],^(_feaf .Data [_gefc ]|_dbfdb .Data [_cfgg ]),_dafc );
};};case PixNotPixSrcAndDst :for _fga =0;_fga < _aebe ;_fga ++{_gefc =_dbdb +_fga *_feaf .RowStride ;_cfgg =_bdac +_fga *_dbfdb .RowStride ;for _cgfc =0;_cgfc < _dedf ;_cgfc ++{_dbfdb .Data [_cfgg ]=^(_feaf .Data [_gefc ]&_dbfdb .Data [_cfgg ]);_cfgg ++;
_gefc ++;};if _eebgd > 0{_dbfdb .Data [_cfgg ]=_ffbgf (_dbfdb .Data [_cfgg ],^(_feaf .Data [_gefc ]&_dbfdb .Data [_cfgg ]),_dafc );};};case PixNotPixSrcXorDst :for _fga =0;_fga < _aebe ;_fga ++{_gefc =_dbdb +_fga *_feaf .RowStride ;_cfgg =_bdac +_fga *_dbfdb .RowStride ;
for _cgfc =0;_cgfc < _dedf ;_cgfc ++{_dbfdb .Data [_cfgg ]=^(_feaf .Data [_gefc ]^_dbfdb .Data [_cfgg ]);_cfgg ++;_gefc ++;};if _eebgd > 0{_dbfdb .Data [_cfgg ]=_ffbgf (_dbfdb .Data [_cfgg ],^(_feaf .Data [_gefc ]^_dbfdb .Data [_cfgg ]),_dafc );};};default:_cg .Log .Debug ("\u0050\u0072ov\u0069\u0064\u0065d\u0020\u0069\u006e\u0076ali\u0064 r\u0061\u0073\u0074\u0065\u0072\u0020\u006fpe\u0072\u0061\u0074\u006f\u0072\u003a\u0020%\u0076",_afgb );
return _e .Error ("\u0072\u0061\u0073\u0074er\u004f\u0070\u0042\u0079\u0074\u0065\u0041\u006c\u0069\u0067\u006e\u0065\u0064\u004co\u0077","\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");
};return nil ;};func _geg (_ad ,_gc *Bitmap )(_dg error ){const _dfa ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0034";_cdd :=_gc .RowStride ;_cgc :=_ad .RowStride ;_gf :=_gc .RowStride *4-_ad .RowStride ;
var (_ac ,_dfe byte ;_cag uint32 ;_aga ,_ga ,_ada ,_ffg ,_fec ,_cdf ,_caa int ;);for _ada =0;_ada < _gc .Height ;_ada ++{_aga =_ada *_cdd ;_ga =4*_ada *_cgc ;for _ffg =0;_ffg < _cdd ;_ffg ++{_ac =_gc .Data [_aga +_ffg ];_cag =_dcaa [_ac ];_cdf =_ga +_ffg *4;
if _gf !=0&&(_ffg +1)*4> _ad .RowStride {for _fec =_gf ;_fec > 0;_fec --{_dfe =byte ((_cag >>uint (_fec *8))&0xff);_caa =_cdf +(_gf -_fec );if _dg =_ad .SetByte (_caa ,_dfe );_dg !=nil {return _e .Wrapf (_dg ,_dfa ,"D\u0069\u0066\u0066\u0065\u0072\u0065n\u0074\u0020\u0072\u006f\u0077\u0073\u0074\u0072\u0069d\u0065\u0073\u002e \u004b:\u0020\u0025\u0064",_fec );
};};}else if _dg =_ad .setFourBytes (_cdf ,_cag );_dg !=nil {return _e .Wrap (_dg ,_dfa ,"");};if _dg =_ad .setFourBytes (_ga +_ffg *4,_dcaa [_gc .Data [_aga +_ffg ]]);_dg !=nil {return _e .Wrap (_dg ,_dfa ,"");};};for _fec =1;_fec < 4;_fec ++{for _ffg =0;
_ffg < _cgc ;_ffg ++{if _dg =_ad .SetByte (_ga +_fec *_cgc +_ffg ,_ad .Data [_ga +_ffg ]);_dg !=nil {return _e .Wrapf (_dg ,_dfa ,"\u0063\u006f\u0070\u0079\u0020\u0027\u0071\u0075\u0061\u0064\u0072\u0061\u0062l\u0065\u0027\u0020\u006c\u0069\u006ee\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0062\u0079\u0074\u0065\u003a \u0027\u0025\u0064\u0027",_fec ,_ffg );
};};};};return nil ;};func Blit (src *Bitmap ,dst *Bitmap ,x ,y int ,op CombinationOperator )error {var _efdc ,_dcb int ;_gbaaa :=src .RowStride -1;if x < 0{_dcb =-x ;x =0;}else if x +src .Width > dst .Width {_gbaaa -=src .Width +x -dst .Width ;};if y < 0{_efdc =-y ;
y =0;_dcb +=src .RowStride ;_gbaaa +=src .RowStride ;}else if y +src .Height > dst .Height {_efdc =src .Height +y -dst .Height ;};var (_cdce int ;_acae error ;);_egae :=x &0x07;_fdd :=8-_egae ;_acaf :=src .Width &0x07;_ggcd :=_fdd -_acaf ;_cadb :=_fdd &0x07!=0;
_gdad :=src .Width <=((_gbaaa -_dcb )<<3)+_fdd ;_ddfg :=dst .GetByteIndex (x ,y );_efbb :=_efdc +dst .Height ;if src .Height > _efbb {_cdce =_efbb ;}else {_cdce =src .Height ;};switch {case !_cadb :_acae =_cbge (src ,dst ,_efdc ,_cdce ,_ddfg ,_dcb ,_gbaaa ,op );
case _gdad :_acae =_fccb (src ,dst ,_efdc ,_cdce ,_ddfg ,_dcb ,_gbaaa ,_ggcd ,_egae ,_fdd ,op );default:_acae =_ffde (src ,dst ,_efdc ,_cdce ,_ddfg ,_dcb ,_gbaaa ,_ggcd ,_egae ,_fdd ,op ,_acaf );};return _acae ;};func _bceg (_dbag *Bitmap ,_gbbb ,_efff ,_ggac ,_adde int ,_adfd RasterOperator ,_affd *Bitmap ,_eaae ,_acgdb int )error {var (_edfa bool ;
_gcaf bool ;_dcdgg byte ;_aafb int ;_bdcd int ;_dcdd int ;_efcdd int ;_addd bool ;_dcfga int ;_caee int ;_cgcd int ;_acbe bool ;_bffea byte ;_bggfe int ;_eccbc int ;_efcb int ;_dgba byte ;_eaab int ;_fafbc int ;_ecde uint ;_befb uint ;_geff byte ;_dcaf shift ;
_dfeg bool ;_edfe bool ;_afgc ,_aadd int ;);if _eaae &7!=0{_fafbc =8-(_eaae &7);};if _gbbb &7!=0{_bdcd =8-(_gbbb &7);};if _fafbc ==0&&_bdcd ==0{_geff =_fgddg [0];}else {if _bdcd > _fafbc {_ecde =uint (_bdcd -_fafbc );}else {_ecde =uint (8-(_fafbc -_bdcd ));
};_befb =8-_ecde ;_geff =_fgddg [_ecde ];};if (_gbbb &7)!=0{_edfa =true ;_aafb =8-(_gbbb &7);_dcdgg =_fgddg [_aafb ];_dcdd =_dbag .RowStride *_efff +(_gbbb >>3);_efcdd =_affd .RowStride *_acgdb +(_eaae >>3);_eaab =8-(_eaae &7);if _aafb > _eaab {_dcaf =_eddd ;
if _ggac >=_fafbc {_dfeg =true ;};}else {_dcaf =_dgca ;};};if _ggac < _aafb {_gcaf =true ;_dcdgg &=_ggge [8-_aafb +_ggac ];};if !_gcaf {_dcfga =(_ggac -_aafb )>>3;if _dcfga !=0{_addd =true ;_caee =_dbag .RowStride *_efff +((_gbbb +_bdcd )>>3);_cgcd =_affd .RowStride *_acgdb +((_eaae +_bdcd )>>3);
};};_bggfe =(_gbbb +_ggac )&7;if !(_gcaf ||_bggfe ==0){_acbe =true ;_bffea =_ggge [_bggfe ];_eccbc =_dbag .RowStride *_efff +((_gbbb +_bdcd )>>3)+_dcfga ;_efcb =_affd .RowStride *_acgdb +((_eaae +_bdcd )>>3)+_dcfga ;if _bggfe > int (_befb ){_edfe =true ;
};};switch _adfd {case PixSrc :if _edfa {for _afgc =0;_afgc < _adde ;_afgc ++{if _dcaf ==_eddd {_dgba =_affd .Data [_efcdd ]<<_ecde ;if _dfeg {_dgba =_ffbgf (_dgba ,_affd .Data [_efcdd +1]>>_befb ,_geff );};}else {_dgba =_affd .Data [_efcdd ]>>_befb ;};
_dbag .Data [_dcdd ]=_ffbgf (_dbag .Data [_dcdd ],_dgba ,_dcdgg );_dcdd +=_dbag .RowStride ;_efcdd +=_affd .RowStride ;};};if _addd {for _afgc =0;_afgc < _adde ;_afgc ++{for _aadd =0;_aadd < _dcfga ;_aadd ++{_dgba =_ffbgf (_affd .Data [_cgcd +_aadd ]<<_ecde ,_affd .Data [_cgcd +_aadd +1]>>_befb ,_geff );
_dbag .Data [_caee +_aadd ]=_dgba ;};_caee +=_dbag .RowStride ;_cgcd +=_affd .RowStride ;};};if _acbe {for _afgc =0;_afgc < _adde ;_afgc ++{_dgba =_affd .Data [_efcb ]<<_ecde ;if _edfe {_dgba =_ffbgf (_dgba ,_affd .Data [_efcb +1]>>_befb ,_geff );};_dbag .Data [_eccbc ]=_ffbgf (_dbag .Data [_eccbc ],_dgba ,_bffea );
_eccbc +=_dbag .RowStride ;_efcb +=_affd .RowStride ;};};case PixNotSrc :if _edfa {for _afgc =0;_afgc < _adde ;_afgc ++{if _dcaf ==_eddd {_dgba =_affd .Data [_efcdd ]<<_ecde ;if _dfeg {_dgba =_ffbgf (_dgba ,_affd .Data [_efcdd +1]>>_befb ,_geff );};}else {_dgba =_affd .Data [_efcdd ]>>_befb ;
};_dbag .Data [_dcdd ]=_ffbgf (_dbag .Data [_dcdd ],^_dgba ,_dcdgg );_dcdd +=_dbag .RowStride ;_efcdd +=_affd .RowStride ;};};if _addd {for _afgc =0;_afgc < _adde ;_afgc ++{for _aadd =0;_aadd < _dcfga ;_aadd ++{_dgba =_ffbgf (_affd .Data [_cgcd +_aadd ]<<_ecde ,_affd .Data [_cgcd +_aadd +1]>>_befb ,_geff );
_dbag .Data [_caee +_aadd ]=^_dgba ;};_caee +=_dbag .RowStride ;_cgcd +=_affd .RowStride ;};};if _acbe {for _afgc =0;_afgc < _adde ;_afgc ++{_dgba =_affd .Data [_efcb ]<<_ecde ;if _edfe {_dgba =_ffbgf (_dgba ,_affd .Data [_efcb +1]>>_befb ,_geff );};_dbag .Data [_eccbc ]=_ffbgf (_dbag .Data [_eccbc ],^_dgba ,_bffea );
_eccbc +=_dbag .RowStride ;_efcb +=_affd .RowStride ;};};case PixSrcOrDst :if _edfa {for _afgc =0;_afgc < _adde ;_afgc ++{if _dcaf ==_eddd {_dgba =_affd .Data [_efcdd ]<<_ecde ;if _dfeg {_dgba =_ffbgf (_dgba ,_affd .Data [_efcdd +1]>>_befb ,_geff );};}else {_dgba =_affd .Data [_efcdd ]>>_befb ;
};_dbag .Data [_dcdd ]=_ffbgf (_dbag .Data [_dcdd ],_dgba |_dbag .Data [_dcdd ],_dcdgg );_dcdd +=_dbag .RowStride ;_efcdd +=_affd .RowStride ;};};if _addd {for _afgc =0;_afgc < _adde ;_afgc ++{for _aadd =0;_aadd < _dcfga ;_aadd ++{_dgba =_ffbgf (_affd .Data [_cgcd +_aadd ]<<_ecde ,_affd .Data [_cgcd +_aadd +1]>>_befb ,_geff );
_dbag .Data [_caee +_aadd ]|=_dgba ;};_caee +=_dbag .RowStride ;_cgcd +=_affd .RowStride ;};};if _acbe {for _afgc =0;_afgc < _adde ;_afgc ++{_dgba =_affd .Data [_efcb ]<<_ecde ;if _edfe {_dgba =_ffbgf (_dgba ,_affd .Data [_efcb +1]>>_befb ,_geff );};_dbag .Data [_eccbc ]=_ffbgf (_dbag .Data [_eccbc ],_dgba |_dbag .Data [_eccbc ],_bffea );
_eccbc +=_dbag .RowStride ;_efcb +=_affd .RowStride ;};};case PixSrcAndDst :if _edfa {for _afgc =0;_afgc < _adde ;_afgc ++{if _dcaf ==_eddd {_dgba =_affd .Data [_efcdd ]<<_ecde ;if _dfeg {_dgba =_ffbgf (_dgba ,_affd .Data [_efcdd +1]>>_befb ,_geff );};
}else {_dgba =_affd .Data [_efcdd ]>>_befb ;};_dbag .Data [_dcdd ]=_ffbgf (_dbag .Data [_dcdd ],_dgba &_dbag .Data [_dcdd ],_dcdgg );_dcdd +=_dbag .RowStride ;_efcdd +=_affd .RowStride ;};};if _addd {for _afgc =0;_afgc < _adde ;_afgc ++{for _aadd =0;_aadd < _dcfga ;
_aadd ++{_dgba =_ffbgf (_affd .Data [_cgcd +_aadd ]<<_ecde ,_affd .Data [_cgcd +_aadd +1]>>_befb ,_geff );_dbag .Data [_caee +_aadd ]&=_dgba ;};_caee +=_dbag .RowStride ;_cgcd +=_affd .RowStride ;};};if _acbe {for _afgc =0;_afgc < _adde ;_afgc ++{_dgba =_affd .Data [_efcb ]<<_ecde ;
if _edfe {_dgba =_ffbgf (_dgba ,_affd .Data [_efcb +1]>>_befb ,_geff );};_dbag .Data [_eccbc ]=_ffbgf (_dbag .Data [_eccbc ],_dgba &_dbag .Data [_eccbc ],_bffea );_eccbc +=_dbag .RowStride ;_efcb +=_affd .RowStride ;};};case PixSrcXorDst :if _edfa {for _afgc =0;
_afgc < _adde ;_afgc ++{if _dcaf ==_eddd {_dgba =_affd .Data [_efcdd ]<<_ecde ;if _dfeg {_dgba =_ffbgf (_dgba ,_affd .Data [_efcdd +1]>>_befb ,_geff );};}else {_dgba =_affd .Data [_efcdd ]>>_befb ;};_dbag .Data [_dcdd ]=_ffbgf (_dbag .Data [_dcdd ],_dgba ^_dbag .Data [_dcdd ],_dcdgg );
_dcdd +=_dbag .RowStride ;_efcdd +=_affd .RowStride ;};};if _addd {for _afgc =0;_afgc < _adde ;_afgc ++{for _aadd =0;_aadd < _dcfga ;_aadd ++{_dgba =_ffbgf (_affd .Data [_cgcd +_aadd ]<<_ecde ,_affd .Data [_cgcd +_aadd +1]>>_befb ,_geff );_dbag .Data [_caee +_aadd ]^=_dgba ;
};_caee +=_dbag .RowStride ;_cgcd +=_affd .RowStride ;};};if _acbe {for _afgc =0;_afgc < _adde ;_afgc ++{_dgba =_affd .Data [_efcb ]<<_ecde ;if _edfe {_dgba =_ffbgf (_dgba ,_affd .Data [_efcb +1]>>_befb ,_geff );};_dbag .Data [_eccbc ]=_ffbgf (_dbag .Data [_eccbc ],_dgba ^_dbag .Data [_eccbc ],_bffea );
_eccbc +=_dbag .RowStride ;_efcb +=_affd .RowStride ;};};case PixNotSrcOrDst :if _edfa {for _afgc =0;_afgc < _adde ;_afgc ++{if _dcaf ==_eddd {_dgba =_affd .Data [_efcdd ]<<_ecde ;if _dfeg {_dgba =_ffbgf (_dgba ,_affd .Data [_efcdd +1]>>_befb ,_geff );
};}else {_dgba =_affd .Data [_efcdd ]>>_befb ;};_dbag .Data [_dcdd ]=_ffbgf (_dbag .Data [_dcdd ],^_dgba |_dbag .Data [_dcdd ],_dcdgg );_dcdd +=_dbag .RowStride ;_efcdd +=_affd .RowStride ;};};if _addd {for _afgc =0;_afgc < _adde ;_afgc ++{for _aadd =0;
_aadd < _dcfga ;_aadd ++{_dgba =_ffbgf (_affd .Data [_cgcd +_aadd ]<<_ecde ,_affd .Data [_cgcd +_aadd +1]>>_befb ,_geff );_dbag .Data [_caee +_aadd ]|=^_dgba ;};_caee +=_dbag .RowStride ;_cgcd +=_affd .RowStride ;};};if _acbe {for _afgc =0;_afgc < _adde ;
_afgc ++{_dgba =_affd .Data [_efcb ]<<_ecde ;if _edfe {_dgba =_ffbgf (_dgba ,_affd .Data [_efcb +1]>>_befb ,_geff );};_dbag .Data [_eccbc ]=_ffbgf (_dbag .Data [_eccbc ],^_dgba |_dbag .Data [_eccbc ],_bffea );_eccbc +=_dbag .RowStride ;_efcb +=_affd .RowStride ;
};};case PixNotSrcAndDst :if _edfa {for _afgc =0;_afgc < _adde ;_afgc ++{if _dcaf ==_eddd {_dgba =_affd .Data [_efcdd ]<<_ecde ;if _dfeg {_dgba =_ffbgf (_dgba ,_affd .Data [_efcdd +1]>>_befb ,_geff );};}else {_dgba =_affd .Data [_efcdd ]>>_befb ;};_dbag .Data [_dcdd ]=_ffbgf (_dbag .Data [_dcdd ],^_dgba &_dbag .Data [_dcdd ],_dcdgg );
_dcdd +=_dbag .RowStride ;_efcdd +=_affd .RowStride ;};};if _addd {for _afgc =0;_afgc < _adde ;_afgc ++{for _aadd =0;_aadd < _dcfga ;_aadd ++{_dgba =_ffbgf (_affd .Data [_cgcd +_aadd ]<<_ecde ,_affd .Data [_cgcd +_aadd +1]>>_befb ,_geff );_dbag .Data [_caee +_aadd ]&=^_dgba ;
};_caee +=_dbag .RowStride ;_cgcd +=_affd .RowStride ;};};if _acbe {for _afgc =0;_afgc < _adde ;_afgc ++{_dgba =_affd .Data [_efcb ]<<_ecde ;if _edfe {_dgba =_ffbgf (_dgba ,_affd .Data [_efcb +1]>>_befb ,_geff );};_dbag .Data [_eccbc ]=_ffbgf (_dbag .Data [_eccbc ],^_dgba &_dbag .Data [_eccbc ],_bffea );
_eccbc +=_dbag .RowStride ;_efcb +=_affd .RowStride ;};};case PixSrcOrNotDst :if _edfa {for _afgc =0;_afgc < _adde ;_afgc ++{if _dcaf ==_eddd {_dgba =_affd .Data [_efcdd ]<<_ecde ;if _dfeg {_dgba =_ffbgf (_dgba ,_affd .Data [_efcdd +1]>>_befb ,_geff );
};}else {_dgba =_affd .Data [_efcdd ]>>_befb ;};_dbag .Data [_dcdd ]=_ffbgf (_dbag .Data [_dcdd ],_dgba |^_dbag .Data [_dcdd ],_dcdgg );_dcdd +=_dbag .RowStride ;_efcdd +=_affd .RowStride ;};};if _addd {for _afgc =0;_afgc < _adde ;_afgc ++{for _aadd =0;
_aadd < _dcfga ;_aadd ++{_dgba =_ffbgf (_affd .Data [_cgcd +_aadd ]<<_ecde ,_affd .Data [_cgcd +_aadd +1]>>_befb ,_geff );_dbag .Data [_caee +_aadd ]=_dgba |^_dbag .Data [_caee +_aadd ];};_caee +=_dbag .RowStride ;_cgcd +=_affd .RowStride ;};};if _acbe {for _afgc =0;
_afgc < _adde ;_afgc ++{_dgba =_affd .Data [_efcb ]<<_ecde ;if _edfe {_dgba =_ffbgf (_dgba ,_affd .Data [_efcb +1]>>_befb ,_geff );};_dbag .Data [_eccbc ]=_ffbgf (_dbag .Data [_eccbc ],_dgba |^_dbag .Data [_eccbc ],_bffea );_eccbc +=_dbag .RowStride ;_efcb +=_affd .RowStride ;
};};case PixSrcAndNotDst :if _edfa {for _afgc =0;_afgc < _adde ;_afgc ++{if _dcaf ==_eddd {_dgba =_affd .Data [_efcdd ]<<_ecde ;if _dfeg {_dgba =_ffbgf (_dgba ,_affd .Data [_efcdd +1]>>_befb ,_geff );};}else {_dgba =_affd .Data [_efcdd ]>>_befb ;};_dbag .Data [_dcdd ]=_ffbgf (_dbag .Data [_dcdd ],_dgba &^_dbag .Data [_dcdd ],_dcdgg );
_dcdd +=_dbag .RowStride ;_efcdd +=_affd .RowStride ;};};if _addd {for _afgc =0;_afgc < _adde ;_afgc ++{for _aadd =0;_aadd < _dcfga ;_aadd ++{_dgba =_ffbgf (_affd .Data [_cgcd +_aadd ]<<_ecde ,_affd .Data [_cgcd +_aadd +1]>>_befb ,_geff );_dbag .Data [_caee +_aadd ]=_dgba &^_dbag .Data [_caee +_aadd ];
};_caee +=_dbag .RowStride ;_cgcd +=_affd .RowStride ;};};if _acbe {for _afgc =0;_afgc < _adde ;_afgc ++{_dgba =_affd .Data [_efcb ]<<_ecde ;if _edfe {_dgba =_ffbgf (_dgba ,_affd .Data [_efcb +1]>>_befb ,_geff );};_dbag .Data [_eccbc ]=_ffbgf (_dbag .Data [_eccbc ],_dgba &^_dbag .Data [_eccbc ],_bffea );
_eccbc +=_dbag .RowStride ;_efcb +=_affd .RowStride ;};};case PixNotPixSrcOrDst :if _edfa {for _afgc =0;_afgc < _adde ;_afgc ++{if _dcaf ==_eddd {_dgba =_affd .Data [_efcdd ]<<_ecde ;if _dfeg {_dgba =_ffbgf (_dgba ,_affd .Data [_efcdd +1]>>_befb ,_geff );
};}else {_dgba =_affd .Data [_efcdd ]>>_befb ;};_dbag .Data [_dcdd ]=_ffbgf (_dbag .Data [_dcdd ],^(_dgba |_dbag .Data [_dcdd ]),_dcdgg );_dcdd +=_dbag .RowStride ;_efcdd +=_affd .RowStride ;};};if _addd {for _afgc =0;_afgc < _adde ;_afgc ++{for _aadd =0;
_aadd < _dcfga ;_aadd ++{_dgba =_ffbgf (_affd .Data [_cgcd +_aadd ]<<_ecde ,_affd .Data [_cgcd +_aadd +1]>>_befb ,_geff );_dbag .Data [_caee +_aadd ]=^(_dgba |_dbag .Data [_caee +_aadd ]);};_caee +=_dbag .RowStride ;_cgcd +=_affd .RowStride ;};};if _acbe {for _afgc =0;
_afgc < _adde ;_afgc ++{_dgba =_affd .Data [_efcb ]<<_ecde ;if _edfe {_dgba =_ffbgf (_dgba ,_affd .Data [_efcb +1]>>_befb ,_geff );};_dbag .Data [_eccbc ]=_ffbgf (_dbag .Data [_eccbc ],^(_dgba |_dbag .Data [_eccbc ]),_bffea );_eccbc +=_dbag .RowStride ;
_efcb +=_affd .RowStride ;};};case PixNotPixSrcAndDst :if _edfa {for _afgc =0;_afgc < _adde ;_afgc ++{if _dcaf ==_eddd {_dgba =_affd .Data [_efcdd ]<<_ecde ;if _dfeg {_dgba =_ffbgf (_dgba ,_affd .Data [_efcdd +1]>>_befb ,_geff );};}else {_dgba =_affd .Data [_efcdd ]>>_befb ;
};_dbag .Data [_dcdd ]=_ffbgf (_dbag .Data [_dcdd ],^(_dgba &_dbag .Data [_dcdd ]),_dcdgg );_dcdd +=_dbag .RowStride ;_efcdd +=_affd .RowStride ;};};if _addd {for _afgc =0;_afgc < _adde ;_afgc ++{for _aadd =0;_aadd < _dcfga ;_aadd ++{_dgba =_ffbgf (_affd .Data [_cgcd +_aadd ]<<_ecde ,_affd .Data [_cgcd +_aadd +1]>>_befb ,_geff );
_dbag .Data [_caee +_aadd ]=^(_dgba &_dbag .Data [_caee +_aadd ]);};_caee +=_dbag .RowStride ;_cgcd +=_affd .RowStride ;};};if _acbe {for _afgc =0;_afgc < _adde ;_afgc ++{_dgba =_affd .Data [_efcb ]<<_ecde ;if _edfe {_dgba =_ffbgf (_dgba ,_affd .Data [_efcb +1]>>_befb ,_geff );
};_dbag .Data [_eccbc ]=_ffbgf (_dbag .Data [_eccbc ],^(_dgba &_dbag .Data [_eccbc ]),_bffea );_eccbc +=_dbag .RowStride ;_efcb +=_affd .RowStride ;};};case PixNotPixSrcXorDst :if _edfa {for _afgc =0;_afgc < _adde ;_afgc ++{if _dcaf ==_eddd {_dgba =_affd .Data [_efcdd ]<<_ecde ;
if _dfeg {_dgba =_ffbgf (_dgba ,_affd .Data [_efcdd +1]>>_befb ,_geff );};}else {_dgba =_affd .Data [_efcdd ]>>_befb ;};_dbag .Data [_dcdd ]=_ffbgf (_dbag .Data [_dcdd ],^(_dgba ^_dbag .Data [_dcdd ]),_dcdgg );_dcdd +=_dbag .RowStride ;_efcdd +=_affd .RowStride ;
};};if _addd {for _afgc =0;_afgc < _adde ;_afgc ++{for _aadd =0;_aadd < _dcfga ;_aadd ++{_dgba =_ffbgf (_affd .Data [_cgcd +_aadd ]<<_ecde ,_affd .Data [_cgcd +_aadd +1]>>_befb ,_geff );_dbag .Data [_caee +_aadd ]=^(_dgba ^_dbag .Data [_caee +_aadd ]);
};_caee +=_dbag .RowStride ;_cgcd +=_affd .RowStride ;};};if _acbe {for _afgc =0;_afgc < _adde ;_afgc ++{_dgba =_affd .Data [_efcb ]<<_ecde ;if _edfe {_dgba =_ffbgf (_dgba ,_affd .Data [_efcb +1]>>_befb ,_geff );};_dbag .Data [_eccbc ]=_ffbgf (_dbag .Data [_eccbc ],^(_dgba ^_dbag .Data [_eccbc ]),_bffea );
_eccbc +=_dbag .RowStride ;_efcb +=_affd .RowStride ;};};default:_cg .Log .Debug ("\u004f\u0070e\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0074\u0020\u0070\u0065\u0072\u006d\u0069tt\u0065\u0064",_adfd );
return _e .Error ("\u0072a\u0073t\u0065\u0072\u004f\u0070\u0047e\u006e\u0065r\u0061\u006c\u004c\u006f\u0077","\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065r\u0061\u0074\u0069\u006f\u006e\u0020\u006eo\u0074\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074\u0065\u0064");
};return nil ;};func (_bceab *ClassedPoints )SortByY (){_bceab ._ddfc =_bceab .ySortFunction ();_cc .Sort (_bceab )};type MorphOperation int ;func _abaf (_deae ,_cfdg *Bitmap ,_aegc ,_eege int )(*Bitmap ,error ){const _geab ="\u0063\u006c\u006f\u0073\u0065\u0042\u0072\u0069\u0063\u006b";
if _cfdg ==nil {return nil ,_e .Error (_geab ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _aegc < 1||_eege < 1{return nil ,_e .Error (_geab ,"\u0068S\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0053\u0069z\u0065\u0020\u006e\u006f\u0074\u0020\u003e\u003d\u0020\u0031");
};if _aegc ==1&&_eege ==1{return _cfdg .Copy (),nil ;};if _aegc ==1||_eege ==1{_fcda :=SelCreateBrick (_eege ,_aegc ,_eege /2,_aegc /2,SelHit );var _beea error ;_deae ,_beea =_dfdg (_deae ,_cfdg ,_fcda );if _beea !=nil {return nil ,_e .Wrap (_beea ,_geab ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _deae ,nil ;};_acagd :=SelCreateBrick (1,_aegc ,0,_aegc /2,SelHit );_bgaa :=SelCreateBrick (_eege ,1,_eege /2,0,SelHit );_bfba ,_bged :=_eebc (nil ,_cfdg ,_acagd );if _bged !=nil {return nil ,_e .Wrap (_bged ,_geab ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};if _deae ,_bged =_eebc (_deae ,_bfba ,_bgaa );_bged !=nil {return nil ,_e .Wrap (_bged ,_geab ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};if _ ,_bged =_efac (_bfba ,_deae ,_acagd );_bged !=nil {return nil ,_e .Wrap (_bged ,_geab ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};if _ ,_bged =_efac (_deae ,_bfba ,_bgaa );_bged !=nil {return nil ,_e .Wrap (_bged ,_geab ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};return _deae ,nil ;};func _egec (_gda ,_gff *Bitmap ,_afa int ,_acc []byte ,_cdc int )(_bbc error ){const _gaf ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0031";
var (_cea ,_dfad ,_gfa ,_abee ,_dgad ,_bgb ,_fcd ,_eee int ;_afab ,_fee uint32 ;_cdab ,_dcf byte ;_adc uint16 ;);_fdb :=make ([]byte ,4);_bca :=make ([]byte ,4);for _gfa =0;_gfa < _gda .Height -1;_gfa ,_abee =_gfa +2,_abee +1{_cea =_gfa *_gda .RowStride ;
_dfad =_abee *_gff .RowStride ;for _dgad ,_bgb =0,0;_dgad < _cdc ;_dgad ,_bgb =_dgad +4,_bgb +1{for _fcd =0;_fcd < 4;_fcd ++{_eee =_cea +_dgad +_fcd ;if _eee <=len (_gda .Data )-1&&_eee < _cea +_gda .RowStride {_fdb [_fcd ]=_gda .Data [_eee ];}else {_fdb [_fcd ]=0x00;
};_eee =_cea +_gda .RowStride +_dgad +_fcd ;if _eee <=len (_gda .Data )-1&&_eee < _cea +(2*_gda .RowStride ){_bca [_fcd ]=_gda .Data [_eee ];}else {_bca [_fcd ]=0x00;};};_afab =_cf .BigEndian .Uint32 (_fdb );_fee =_cf .BigEndian .Uint32 (_bca );_fee |=_afab ;
_fee |=_fee <<1;_fee &=0xaaaaaaaa;_afab =_fee |(_fee <<7);_cdab =byte (_afab >>24);_dcf =byte ((_afab >>8)&0xff);_eee =_dfad +_bgb ;if _eee +1==len (_gff .Data )-1||_eee +1>=_dfad +_gff .RowStride {_gff .Data [_eee ]=_acc [_cdab ];}else {_adc =(uint16 (_acc [_cdab ])<<8)|uint16 (_acc [_dcf ]);
if _bbc =_gff .setTwoBytes (_eee ,_adc );_bbc !=nil {return _e .Wrapf (_bbc ,_gaf ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_eee );
};_bgb ++;};};};return nil ;};func _dfdg (_efc ,_gcde *Bitmap ,_cbbfa *Selection )(*Bitmap ,error ){const _feeb ="c\u006c\u006f\u0073\u0065\u0042\u0069\u0074\u006d\u0061\u0070";var _fdafd error ;if _efc ,_fdafd =_ecad (_efc ,_gcde ,_cbbfa );_fdafd !=nil {return nil ,_fdafd ;
};_fbgc ,_fdafd :=_eebc (nil ,_gcde ,_cbbfa );if _fdafd !=nil {return nil ,_e .Wrap (_fdafd ,_feeb ,"");};if _ ,_fdafd =_efac (_efc ,_fbgc ,_cbbfa );_fdafd !=nil {return nil ,_e .Wrap (_fdafd ,_feeb ,"");};return _efc ,nil ;};func (_aebg *Bitmap )CountPixels ()int {return _aebg .countPixels ()};
type Color int ;func (_gce *Bitmap )addBorderGeneral (_acce ,_gbb ,_gegc ,_gcf int ,_geaf int )(*Bitmap ,error ){const _abdb ="\u0061\u0064d\u0042\u006f\u0072d\u0065\u0072\u0047\u0065\u006e\u0065\u0072\u0061\u006c";if _acce < 0||_gbb < 0||_gegc < 0||_gcf < 0{return nil ,_e .Error (_abdb ,"n\u0065\u0067\u0061\u0074iv\u0065 \u0062\u006f\u0072\u0064\u0065r\u0020\u0061\u0064\u0064\u0065\u0064");
};_bfbf ,_bggc :=_gce .Width ,_gce .Height ;_adad :=_bfbf +_acce +_gbb ;_age :=_bggc +_gegc +_gcf ;_ggf :=New (_adad ,_age );_ggf .Color =_gce .Color ;_dfaf :=PixClr ;if _geaf > 0{_dfaf =PixSet ;};_fgbc :=_ggf .RasterOperation (0,0,_acce ,_age ,_dfaf ,nil ,0,0);
if _fgbc !=nil {return nil ,_e .Wrap (_fgbc ,_abdb ,"\u006c\u0065\u0066\u0074");};_fgbc =_ggf .RasterOperation (_adad -_gbb ,0,_gbb ,_age ,_dfaf ,nil ,0,0);if _fgbc !=nil {return nil ,_e .Wrap (_fgbc ,_abdb ,"\u0072\u0069\u0067h\u0074");};_fgbc =_ggf .RasterOperation (0,0,_adad ,_gegc ,_dfaf ,nil ,0,0);
if _fgbc !=nil {return nil ,_e .Wrap (_fgbc ,_abdb ,"\u0074\u006f\u0070");};_fgbc =_ggf .RasterOperation (0,_age -_gcf ,_adad ,_gcf ,_dfaf ,nil ,0,0);if _fgbc !=nil {return nil ,_e .Wrap (_fgbc ,_abdb ,"\u0062\u006f\u0074\u0074\u006f\u006d");};_fgbc =_ggf .RasterOperation (_acce ,_gegc ,_bfbf ,_bggc ,PixSrc ,_gce ,0,0);
if _fgbc !=nil {return nil ,_e .Wrap (_fgbc ,_abdb ,"\u0063\u006f\u0070\u0079");};return _ggf ,nil ;};func Dilate (d *Bitmap ,s *Bitmap ,sel *Selection )(*Bitmap ,error ){return _eebc (d ,s ,sel )};func _ecad (_ebbe ,_gadg *Bitmap ,_bbff *Selection )(*Bitmap ,error ){const _bgea ="\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u004d\u006f\u0072\u0070\u0068A\u0072\u0067\u0073\u0032";
var _ccce ,_bgbf int ;if _gadg ==nil {return nil ,_e .Error (_bgea ,"s\u006fu\u0072\u0063\u0065\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");};if _bbff ==nil {return nil ,_e .Error (_bgea ,"\u0073e\u006c \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};_ccce =_bbff .Width ;_bgbf =_bbff .Height ;if _ccce ==0||_bgbf ==0{return nil ,_e .Error (_bgea ,"\u0073\u0065\u006c\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u0020\u0030");};if _ebbe ==nil {return _gadg .createTemplate (),nil ;};if _ffbfb :=_ebbe .resizeImageData (_gadg );
_ffbfb !=nil {return nil ,_ffbfb ;};return _ebbe ,nil ;};func (_caed *Bitmap )SetPadBits (value int ){_caed .setPadBits (value )};func (_gbfa *ClassedPoints )validateIntSlice ()error {const _bgeb ="\u0076\u0061l\u0069\u0064\u0061t\u0065\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065";
for _ ,_gddd :=range _gbfa .IntSlice {if _gddd >=(_gbfa .Points .Size ()){return _e .Errorf (_bgeb ,"c\u006c\u0061\u0073\u0073\u0020\u0069\u0064\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0076\u0061\u006ci\u0064 \u0069\u006e\u0064\u0065x\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0070\u006f\u0069\u006e\u0074\u0073\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u003a\u0020\u0025\u0064",_gddd ,_gbfa .Points .Size ());
};};return nil ;};type byWidth Bitmaps ;func _ceb (_dgc *Bitmap ,_ege int ,_eab []byte )(_eeb *Bitmap ,_ead error ){const _cade ="\u0072\u0065\u0064\u0075\u0063\u0065\u0052\u0061\u006e\u006b\u0042\u0069n\u0061\u0072\u0079\u0032";if _dgc ==nil {return nil ,_e .Error (_cade ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");
};if _ege < 1||_ege > 4{return nil ,_e .Error (_cade ,"\u006c\u0065\u0076\u0065\u006c\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0069\u006e\u0020\u0073e\u0074\u0020\u007b\u0031\u002c\u0032\u002c\u0033\u002c\u0034\u007d");};if _dgc .Height <=1{return nil ,_e .Errorf (_cade ,"\u0073o\u0075\u0072c\u0065\u0020\u0068e\u0069\u0067\u0068\u0074\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061t\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0027\u0032\u0027\u0020-\u0020\u0069\u0073\u003a\u0020\u0027\u0025\u0064\u0027",_dgc .Height );
};_eeb =New (_dgc .Width /2,_dgc .Height /2);if _eab ==nil {_eab =_aeb ();};_dgd :=_ccfc (_dgc .RowStride ,2*_eeb .RowStride );switch _ege {case 1:_ead =_egec (_dgc ,_eeb ,_ege ,_eab ,_dgd );case 2:_ead =_gfaf (_dgc ,_eeb ,_ege ,_eab ,_dgd );case 3:_ead =_bde (_dgc ,_eeb ,_ege ,_eab ,_dgd );
case 4:_ead =_cacb (_dgc ,_eeb ,_ege ,_eab ,_dgd );};if _ead !=nil {return nil ,_ead ;};return _eeb ,nil ;};func DilateBrick (d ,s *Bitmap ,hSize ,vSize int )(*Bitmap ,error ){return _cdgg (d ,s ,hSize ,vSize )};func _bgbc (_bgdd ,_faecc *Bitmap ,_gbcb ,_efcd int )(*Bitmap ,error ){const _acgb ="\u0065\u0072\u006f\u0064\u0065\u0042\u0072\u0069\u0063\u006b";
if _faecc ==nil {return nil ,_e .Error (_acgb ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _gbcb < 1||_efcd < 1{return nil ,_e .Error (_acgb ,"\u0068\u0073\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0073\u0069\u007a\u0065\u0020\u0061\u0072e\u0020\u006e\u006f\u0074\u0020\u0067\u0072e\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006fr\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0031");
};if _gbcb ==1&&_efcd ==1{_cafd ,_cabc :=_ebg (_bgdd ,_faecc );if _cabc !=nil {return nil ,_e .Wrap (_cabc ,_acgb ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u0026\u0026 \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _cafd ,nil ;};if _gbcb ==1||_efcd ==1{_cceb :=SelCreateBrick (_efcd ,_gbcb ,_efcd /2,_gbcb /2,SelHit );_cba ,_cdfgf :=_efac (_bgdd ,_faecc ,_cceb );if _cdfgf !=nil {return nil ,_e .Wrap (_cdfgf ,_acgb ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _cba ,nil ;};_acgc :=SelCreateBrick (1,_gbcb ,0,_gbcb /2,SelHit );_cbfg :=SelCreateBrick (_efcd ,1,_efcd /2,0,SelHit );_ceag ,_dfgg :=_efac (nil ,_faecc ,_acgc );if _dfgg !=nil {return nil ,_e .Wrap (_dfgg ,_acgb ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};_bgdd ,_dfgg =_efac (_bgdd ,_ceag ,_cbfg );if _dfgg !=nil {return nil ,_e .Wrap (_dfgg ,_acgb ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};return _bgdd ,nil ;};func (_gfee *Bitmap )createTemplate ()*Bitmap {return &Bitmap {Width :_gfee .Width ,Height :_gfee .Height ,RowStride :_gfee .RowStride ,Color :_gfee .Color ,Text :_gfee .Text ,BitmapNumber :_gfee .BitmapNumber ,Special :_gfee .Special ,Data :make ([]byte ,len (_gfee .Data ))};
};var _ggfe =[5]int {1,2,3,0,4};func _dcff (_bdge *Bitmap ,_cgbed ,_fafa int ,_fcbb ,_dbbae int ,_addcg RasterOperator ){var (_febb int ;_eebbd byte ;_agbc ,_effeg int ;_cbea int ;);_dccbf :=_fcbb >>3;_fafbf :=_fcbb &7;if _fafbf > 0{_eebbd =_ggge [_fafbf ];
};_febb =_bdge .RowStride *_fafa +(_cgbed >>3);switch _addcg {case PixClr :for _agbc =0;_agbc < _dbbae ;_agbc ++{_cbea =_febb +_agbc *_bdge .RowStride ;for _effeg =0;_effeg < _dccbf ;_effeg ++{_bdge .Data [_cbea ]=0x0;_cbea ++;};if _fafbf > 0{_bdge .Data [_cbea ]=_ffbgf (_bdge .Data [_cbea ],0x0,_eebbd );
};};case PixSet :for _agbc =0;_agbc < _dbbae ;_agbc ++{_cbea =_febb +_agbc *_bdge .RowStride ;for _effeg =0;_effeg < _dccbf ;_effeg ++{_bdge .Data [_cbea ]=0xff;_cbea ++;};if _fafbf > 0{_bdge .Data [_cbea ]=_ffbgf (_bdge .Data [_cbea ],0xff,_eebbd );};
};case PixNotDst :for _agbc =0;_agbc < _dbbae ;_agbc ++{_cbea =_febb +_agbc *_bdge .RowStride ;for _effeg =0;_effeg < _dccbf ;_effeg ++{_bdge .Data [_cbea ]=^_bdge .Data [_cbea ];_cbea ++;};if _fafbf > 0{_bdge .Data [_cbea ]=_ffbgf (_bdge .Data [_cbea ],^_bdge .Data [_cbea ],_eebbd );
};};};};type Points []Point ;func (_dgf *Bitmap )RemoveBorder (borderSize int )(*Bitmap ,error ){if borderSize ==0{return _dgf .Copy (),nil ;};_abda ,_gbc :=_dgf .removeBorderGeneral (borderSize ,borderSize ,borderSize ,borderSize );if _gbc !=nil {return nil ,_e .Wrap (_gbc ,"\u0052\u0065\u006do\u0076\u0065\u0042\u006f\u0072\u0064\u0065\u0072","");
};return _abda ,nil ;};func _daf ()(_cgb [256]uint32 ){for _fdg :=0;_fdg < 256;_fdg ++{if _fdg &0x01!=0{_cgb [_fdg ]|=0xf;};if _fdg &0x02!=0{_cgb [_fdg ]|=0xf0;};if _fdg &0x04!=0{_cgb [_fdg ]|=0xf00;};if _fdg &0x08!=0{_cgb [_fdg ]|=0xf000;};if _fdg &0x10!=0{_cgb [_fdg ]|=0xf0000;
};if _fdg &0x20!=0{_cgb [_fdg ]|=0xf00000;};if _fdg &0x40!=0{_cgb [_fdg ]|=0xf000000;};if _fdg &0x80!=0{_cgb [_fdg ]|=0xf0000000;};};return _cgb ;};var (_ggge =[]byte {0x00,0x80,0xC0,0xE0,0xF0,0xF8,0xFC,0xFE,0xFF};_fgddg =[]byte {0x00,0x01,0x03,0x07,0x0F,0x1F,0x3F,0x7F,0xFF};
);func TstWordBitmapWithSpaces (t *_c .T ,scale ...int )*Bitmap {_acdag :=1;if len (scale )> 0{_acdag =scale [0];};_fcabb :=3;_aabf :=9+7+15+2*_fcabb +2*_fcabb ;_cegg :=5+_fcabb +5+2*_fcabb ;_bdfg :=New (_aabf *_acdag ,_cegg *_acdag );_febd :=&Bitmaps {};
var _bdcee *int ;_fcabb *=_acdag ;_gbce :=_fcabb ;_bdcee =&_gbce ;_bbge :=_fcabb ;_dgbcc :=TstDSymbol (t ,scale ...);TstAddSymbol (t ,_febd ,_dgbcc ,_bdcee ,_bbge ,1*_acdag );_dgbcc =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_febd ,_dgbcc ,_bdcee ,_bbge ,_fcabb );
_dgbcc =TstISymbol (t ,scale ...);TstAddSymbol (t ,_febd ,_dgbcc ,_bdcee ,_bbge ,1*_acdag );_dgbcc =TstTSymbol (t ,scale ...);TstAddSymbol (t ,_febd ,_dgbcc ,_bdcee ,_bbge ,_fcabb );_dgbcc =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_febd ,_dgbcc ,_bdcee ,_bbge ,1*_acdag );
_dgbcc =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_febd ,_dgbcc ,_bdcee ,_bbge ,1*_acdag );_dgbcc =TstWSymbol (t ,scale ...);TstAddSymbol (t ,_febd ,_dgbcc ,_bdcee ,_bbge ,0);*_bdcee =_fcabb ;_bbge =5*_acdag +_fcabb ;_dgbcc =TstOSymbol (t ,scale ...);
TstAddSymbol (t ,_febd ,_dgbcc ,_bdcee ,_bbge ,1*_acdag );_dgbcc =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_febd ,_dgbcc ,_bdcee ,_bbge ,_fcabb );_dgbcc =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_febd ,_dgbcc ,_bdcee ,_bbge ,1*_acdag );_dgbcc =TstESymbol (t ,scale ...);
TstAddSymbol (t ,_febd ,_dgbcc ,_bdcee ,_bbge ,1*_acdag );_dgbcc =TstVSymbol (t ,scale ...);TstAddSymbol (t ,_febd ,_dgbcc ,_bdcee ,_bbge ,1*_acdag );_dgbcc =TstESymbol (t ,scale ...);TstAddSymbol (t ,_febd ,_dgbcc ,_bdcee ,_bbge ,1*_acdag );_dgbcc =TstRSymbol (t ,scale ...);
TstAddSymbol (t ,_febd ,_dgbcc ,_bdcee ,_bbge ,0);TstWriteSymbols (t ,_febd ,_bdfg );return _bdfg ;};func _cacb (_ceg ,_fbc *Bitmap ,_gbaaf int ,_gfg []byte ,_fdf int )(_deg error ){const _beb ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0034";
var (_bcdg ,_fac ,_dccf ,_gg ,_aca ,_bge ,_eca ,_bgg int ;_cfe ,_bda uint32 ;_efe ,_dde byte ;_abf uint16 ;);_fbb :=make ([]byte ,4);_dbbb :=make ([]byte ,4);for _dccf =0;_dccf < _ceg .Height -1;_dccf ,_gg =_dccf +2,_gg +1{_bcdg =_dccf *_ceg .RowStride ;
_fac =_gg *_fbc .RowStride ;for _aca ,_bge =0,0;_aca < _fdf ;_aca ,_bge =_aca +4,_bge +1{for _eca =0;_eca < 4;_eca ++{_bgg =_bcdg +_aca +_eca ;if _bgg <=len (_ceg .Data )-1&&_bgg < _bcdg +_ceg .RowStride {_fbb [_eca ]=_ceg .Data [_bgg ];}else {_fbb [_eca ]=0x00;
};_bgg =_bcdg +_ceg .RowStride +_aca +_eca ;if _bgg <=len (_ceg .Data )-1&&_bgg < _bcdg +(2*_ceg .RowStride ){_dbbb [_eca ]=_ceg .Data [_bgg ];}else {_dbbb [_eca ]=0x00;};};_cfe =_cf .BigEndian .Uint32 (_fbb );_bda =_cf .BigEndian .Uint32 (_dbbb );_bda &=_cfe ;
_bda &=_bda <<1;_bda &=0xaaaaaaaa;_cfe =_bda |(_bda <<7);_efe =byte (_cfe >>24);_dde =byte ((_cfe >>8)&0xff);_bgg =_fac +_bge ;if _bgg +1==len (_fbc .Data )-1||_bgg +1>=_fac +_fbc .RowStride {_fbc .Data [_bgg ]=_gfg [_efe ];if _deg =_fbc .SetByte (_bgg ,_gfg [_efe ]);
_deg !=nil {return _e .Wrapf (_deg ,_beb ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_bgg );};}else {_abf =(uint16 (_gfg [_efe ])<<8)|uint16 (_gfg [_dde ]);if _deg =_fbc .setTwoBytes (_bgg ,_abf );_deg !=nil {return _e .Wrapf (_deg ,_beb ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_bgg );
};_bge ++;};};};return nil ;};func _dcea (_facb uint ,_ebdc byte )byte {return _ebdc >>_facb <<_facb };func _ffbgf (_efecaf ,_dbcb ,_fecd byte )byte {return (_efecaf &^(_fecd ))|(_dbcb &_fecd )};func NewWithUnpaddedData (width ,height int ,data []byte )(*Bitmap ,error ){const _eegb ="\u004e\u0065\u0077\u0057it\u0068\u0055\u006e\u0070\u0061\u0064\u0064\u0065\u0064\u0044\u0061\u0074\u0061";
_fdgd :=_aafe (width ,height );_fdgd .Data =data ;if _bgeg :=((width *height )+7)>>3;len (data )< _bgeg {return nil ,_e .Errorf (_eegb ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064a\u0074\u0061\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u003a\u0020\u0027\u0025\u0064\u0027\u002e\u0020\u0054\u0068\u0065\u0020\u0064\u0061t\u0061\u0020s\u0068\u006fu\u006c\u0064\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 l\u0065\u0061\u0073\u0074\u003a\u0020\u0027\u0025\u0064'\u0020\u0062\u0079\u0074\u0065\u0073",len (data ),_bgeg );
};if _ccec :=_fdgd .addPadBits ();_ccec !=nil {return nil ,_e .Wrap (_ccec ,_eegb ,"");};return _fdgd ,nil ;};func (_cga *Bitmap )GetComponents (components Component ,maxWidth ,maxHeight int )(_ddgd *Bitmaps ,_cgaa *Boxes ,_bdae error ){const _dfaae ="B\u0069t\u006d\u0061\u0070\u002e\u0047\u0065\u0074\u0043o\u006d\u0070\u006f\u006een\u0074\u0073";
if _cga ==nil {return nil ,nil ,_e .Error (_dfaae ,"\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0042\u0069\u0074\u006da\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069n\u0065\u0064\u002e");};switch components {case ComponentConn ,ComponentCharacters ,ComponentWords :default:return nil ,nil ,_e .Error (_dfaae ,"\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065n\u0074s\u0020\u0070\u0061\u0072\u0061\u006d\u0065t\u0065\u0072");
};if _cga .Zero (){_cgaa =&Boxes {};_ddgd =&Bitmaps {};return _ddgd ,_cgaa ,nil ;};switch components {case ComponentConn :_ddgd =&Bitmaps {};if _cgaa ,_bdae =_cga .ConnComponents (_ddgd ,8);_bdae !=nil {return nil ,nil ,_e .Wrap (_bdae ,_dfaae ,"\u006e\u006f \u0070\u0072\u0065p\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};case ComponentCharacters :_cdgdf ,_egdd :=MorphSequence (_cga ,MorphProcess {Operation :MopClosing ,Arguments :[]int {1,6}});if _egdd !=nil {return nil ,nil ,_e .Wrap (_egdd ,_dfaae ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};if _cg .Log .IsLogLevel (_cg .LogLevelTrace ){_cg .Log .Trace ("\u0043o\u006d\u0070o\u006e\u0065\u006e\u0074C\u0068\u0061\u0072a\u0063\u0074\u0065\u0072\u0073\u0020\u0062\u0069\u0074ma\u0070\u0020\u0061f\u0074\u0065r\u0020\u0063\u006c\u006f\u0073\u0069n\u0067\u003a \u0025\u0073",_cdgdf .String ());
};_dfg :=&Bitmaps {};_cgaa ,_egdd =_cdgdf .ConnComponents (_dfg ,8);if _egdd !=nil {return nil ,nil ,_e .Wrap (_egdd ,_dfaae ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};if _cg .Log .IsLogLevel (_cg .LogLevelTrace ){_cg .Log .Trace ("\u0043\u006f\u006d\u0070\u006f\u006ee\u006e\u0074\u0043\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u0020a\u0066\u0074\u0065\u0072\u0020\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076i\u0074y\u003a\u0020\u0025\u0073",_dfg .String ());
};if _ddgd ,_egdd =_dfg .ClipToBitmap (_cga );_egdd !=nil {return nil ,nil ,_e .Wrap (_egdd ,_dfaae ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");};case ComponentWords :_cfcc :=1;
var _dcee *Bitmap ;switch {case _cga .XResolution <=200:_dcee =_cga ;case _cga .XResolution <=400:_cfcc =2;_dcee ,_bdae =_fgg (_cga ,1,0,0,0);if _bdae !=nil {return nil ,nil ,_e .Wrap (_bdae ,_dfaae ,"w\u006f\u0072\u0064\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0020\u002d \u0078\u0072\u0065s\u003c=\u0034\u0030\u0030");
};default:_cfcc =4;_dcee ,_bdae =_fgg (_cga ,1,1,0,0);if _bdae !=nil {return nil ,nil ,_e .Wrap (_bdae ,_dfaae ,"\u0077\u006f\u0072\u0064 \u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073 \u002d \u0078\u0072\u0065\u0073\u0020\u003e\u00204\u0030\u0030");
};};_egfd ,_ ,_feab :=_dcfb (_dcee );if _feab !=nil {return nil ,nil ,_e .Wrap (_feab ,_dfaae ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};_fcdb ,_feab :=_efece (_egfd ,_cfcc );if _feab !=nil {return nil ,nil ,_e .Wrap (_feab ,_dfaae ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");
};_effe :=&Bitmaps {};if _cgaa ,_feab =_fcdb .ConnComponents (_effe ,4);_feab !=nil {return nil ,nil ,_e .Wrap (_feab ,_dfaae ,"\u0077\u006f\u0072\u0064\u0020\u0070r\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u002c\u0020\u0063\u006f\u006en\u0065\u0063\u0074\u0020\u0065\u0078\u0070a\u006e\u0064\u0065\u0064");
};if _ddgd ,_feab =_effe .ClipToBitmap (_cga );_feab !=nil {return nil ,nil ,_e .Wrap (_feab ,_dfaae ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};};_ddgd ,_bdae =_ddgd .SelectBySize (maxWidth ,maxHeight ,LocSelectIfBoth ,SizeSelectIfLTE );
if _bdae !=nil {return nil ,nil ,_e .Wrap (_bdae ,_dfaae ,"");};_cgaa ,_bdae =_cgaa .SelectBySize (maxWidth ,maxHeight ,LocSelectIfBoth ,SizeSelectIfLTE );if _bdae !=nil {return nil ,nil ,_e .Wrap (_bdae ,_dfaae ,"");};return _ddgd ,_cgaa ,nil ;};func Centroid (bm *Bitmap ,centTab ,sumTab []int )(Point ,error ){return bm .centroid (centTab ,sumTab )};
const (PixSrc RasterOperator =0xc;PixDst RasterOperator =0xa;PixNotSrc RasterOperator =0x3;PixNotDst RasterOperator =0x5;PixClr RasterOperator =0x0;PixSet RasterOperator =0xf;PixSrcOrDst RasterOperator =0xe;PixSrcAndDst RasterOperator =0x8;PixSrcXorDst RasterOperator =0x6;
PixNotSrcOrDst RasterOperator =0xb;PixNotSrcAndDst RasterOperator =0x2;PixSrcOrNotDst RasterOperator =0xd;PixSrcAndNotDst RasterOperator =0x4;PixNotPixSrcOrDst RasterOperator =0x1;PixNotPixSrcAndDst RasterOperator =0x7;PixNotPixSrcXorDst RasterOperator =0x9;
PixPaint =PixSrcOrDst ;PixSubtract =PixNotSrcAndDst ;PixMask =PixSrcAndDst ;);func (_eceg *Bitmap )resizeImageData (_cbf *Bitmap )error {if _cbf ==nil {return _e .Error ("\u0072e\u0073i\u007a\u0065\u0049\u006d\u0061\u0067\u0065\u0044\u0061\u0074\u0061","\u0073r\u0063 \u0069\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _eceg .SizesEqual (_cbf ){return nil ;};_eceg .Data =make ([]byte ,len (_cbf .Data ));_eceg .Width =_cbf .Width ;_eceg .Height =_cbf .Height ;_eceg .RowStride =_cbf .RowStride ;return nil ;};func (_bgdg *Bitmaps )selectByIndicator (_dbad *_d .NumSlice )(_fbee *Bitmaps ,_gcfc error ){const _ggcdf ="\u0042i\u0074\u006d\u0061\u0070s\u002e\u0073\u0065\u006c\u0065c\u0074B\u0079I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";
if _bgdg ==nil {return nil ,_e .Error (_ggcdf ,"\u0027\u0062\u0027 b\u0069\u0074\u006d\u0061\u0070\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if _dbad ==nil {return nil ,_e .Error (_ggcdf ,"'\u006e\u0061\u0027\u0020\u0069\u006ed\u0069\u0063\u0061\u0074\u006f\u0072\u0073\u0020\u006eo\u0074\u0020\u0064e\u0066i\u006e\u0065\u0064");
};if len (_bgdg .Values )==0{return _bgdg ,nil ;};if len (*_dbad )!=len (_bgdg .Values ){return nil ,_e .Errorf (_ggcdf ,"\u006ea\u0020\u006ce\u006e\u0067\u0074\u0068:\u0020\u0025\u0064,\u0020\u0069\u0073\u0020\u0064\u0069\u0066\u0066\u0065re\u006e\u0074\u0020t\u0068\u0061n\u0020\u0062\u0069\u0074\u006d\u0061p\u0073\u003a \u0025\u0064",len (*_dbad ),len (_bgdg .Values ));
};var _dgcg ,_eeged ,_fcdc int ;for _eeged =0;_eeged < len (*_dbad );_eeged ++{if _dgcg ,_gcfc =_dbad .GetInt (_eeged );_gcfc !=nil {return nil ,_e .Wrap (_gcfc ,_ggcdf ,"f\u0069\u0072\u0073\u0074\u0020\u0063\u0068\u0065\u0063\u006b");};if _dgcg ==1{_fcdc ++;
};};if _fcdc ==len (_bgdg .Values ){return _bgdg ,nil ;};_fbee =&Bitmaps {};_cacfc :=len (_bgdg .Values )==len (_bgdg .Boxes );for _eeged =0;_eeged < len (*_dbad );_eeged ++{if _dgcg =int ((*_dbad )[_eeged ]);_dgcg ==0{continue ;};_fbee .Values =append (_fbee .Values ,_bgdg .Values [_eeged ]);
if _cacfc {_fbee .Boxes =append (_fbee .Boxes ,_bgdg .Boxes [_eeged ]);};};return _fbee ,nil ;};func (_cead *Bitmap )SetDefaultPixel (){for _dbea :=range _cead .Data {_cead .Data [_dbea ]=byte (0xff);};};func TstFrameBitmapData ()[]byte {return _caca .Data };
type LocationFilter int ;func (_gdade *byWidth )Less (i ,j int )bool {return _gdade .Values [i ].Width < _gdade .Values [j ].Width };func (_gbfcg *Bitmaps )makeSizeIndicator (_faae ,_ddace int ,_ebgac LocationFilter ,_bdeba SizeComparison )(_aagf *_d .NumSlice ,_gbdd error ){const _adddb ="\u0042i\u0074\u006d\u0061\u0070s\u002e\u006d\u0061\u006b\u0065S\u0069z\u0065I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";
if _gbfcg ==nil {return nil ,_e .Error (_adddb ,"\u0062\u0069\u0074ma\u0070\u0073\u0020\u0027\u0062\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};switch _ebgac {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_e .Errorf (_adddb ,"\u0070\u0072\u006f\u0076\u0069d\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u006fc\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",_ebgac );
};switch _bdeba {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE ,SizeSelectIfEQ :default:return nil ,_e .Errorf (_adddb ,"\u0069\u006e\u0076\u0061li\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025d\u0027",_bdeba );
};_aagf =&_d .NumSlice {};var (_gfge ,_gfeg ,_acff int ;_bbaa *Bitmap ;);for _ ,_bbaa =range _gbfcg .Values {_gfge =0;_gfeg ,_acff =_bbaa .Width ,_bbaa .Height ;switch _ebgac {case LocSelectWidth :if (_bdeba ==SizeSelectIfLT &&_gfeg < _faae )||(_bdeba ==SizeSelectIfGT &&_gfeg > _faae )||(_bdeba ==SizeSelectIfLTE &&_gfeg <=_faae )||(_bdeba ==SizeSelectIfGTE &&_gfeg >=_faae )||(_bdeba ==SizeSelectIfEQ &&_gfeg ==_faae ){_gfge =1;
};case LocSelectHeight :if (_bdeba ==SizeSelectIfLT &&_acff < _ddace )||(_bdeba ==SizeSelectIfGT &&_acff > _ddace )||(_bdeba ==SizeSelectIfLTE &&_acff <=_ddace )||(_bdeba ==SizeSelectIfGTE &&_acff >=_ddace )||(_bdeba ==SizeSelectIfEQ &&_acff ==_ddace ){_gfge =1;
};case LocSelectIfEither :if (_bdeba ==SizeSelectIfLT &&(_gfeg < _faae ||_acff < _ddace ))||(_bdeba ==SizeSelectIfGT &&(_gfeg > _faae ||_acff > _ddace ))||(_bdeba ==SizeSelectIfLTE &&(_gfeg <=_faae ||_acff <=_ddace ))||(_bdeba ==SizeSelectIfGTE &&(_gfeg >=_faae ||_acff >=_ddace ))||(_bdeba ==SizeSelectIfEQ &&(_gfeg ==_faae ||_acff ==_ddace )){_gfge =1;
};case LocSelectIfBoth :if (_bdeba ==SizeSelectIfLT &&(_gfeg < _faae &&_acff < _ddace ))||(_bdeba ==SizeSelectIfGT &&(_gfeg > _faae &&_acff > _ddace ))||(_bdeba ==SizeSelectIfLTE &&(_gfeg <=_faae &&_acff <=_ddace ))||(_bdeba ==SizeSelectIfGTE &&(_gfeg >=_faae &&_acff >=_ddace ))||(_bdeba ==SizeSelectIfEQ &&(_gfeg ==_faae &&_acff ==_ddace )){_gfge =1;
};};_aagf .AddInt (_gfge );};return _aagf ,nil ;};func TstCSymbol (t *_c .T )*Bitmap {t .Helper ();_eeefg :=New (6,6);_ea .NoError (t ,_eeefg .SetPixel (1,0,1));_ea .NoError (t ,_eeefg .SetPixel (2,0,1));_ea .NoError (t ,_eeefg .SetPixel (3,0,1));_ea .NoError (t ,_eeefg .SetPixel (4,0,1));
_ea .NoError (t ,_eeefg .SetPixel (0,1,1));_ea .NoError (t ,_eeefg .SetPixel (5,1,1));_ea .NoError (t ,_eeefg .SetPixel (0,2,1));_ea .NoError (t ,_eeefg .SetPixel (0,3,1));_ea .NoError (t ,_eeefg .SetPixel (0,4,1));_ea .NoError (t ,_eeefg .SetPixel (5,4,1));
_ea .NoError (t ,_eeefg .SetPixel (1,5,1));_ea .NoError (t ,_eeefg .SetPixel (2,5,1));_ea .NoError (t ,_eeefg .SetPixel (3,5,1));_ea .NoError (t ,_eeefg .SetPixel (4,5,1));return _eeefg ;};func TstImageBitmapInverseData ()[]byte {_gbfe :=_cfbf .Copy ();
_gbfe .InverseData ();return _gbfe .Data ;};func (_fada *Bitmaps )SortByHeight (){_beed :=(*byHeight )(_fada );_cc .Sort (_beed )};func _efece (_ccbb *Bitmap ,_gdcg int )(*Bitmap ,error ){const _fagd ="\u0065x\u0070a\u006e\u0064\u0052\u0065\u0070\u006c\u0069\u0063\u0061\u0074\u0065";
if _ccbb ==nil {return nil ,_e .Error (_fagd ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _gdcg <=0{return nil ,_e .Error (_fagd ,"i\u006e\u0076\u0061\u006cid\u0020f\u0061\u0063\u0074\u006f\u0072 \u002d\u0020\u003c\u003d\u0020\u0030");
};if _gdcg ==1{_gdcb ,_gdba :=_ebg (nil ,_ccbb );if _gdba !=nil {return nil ,_e .Wrap (_gdba ,_fagd ,"\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u003d\u0020\u0031");};return _gdcb ,nil ;};_bfgcd ,_dfedd :=_def (_ccbb ,_gdcg ,_gdcg );if _dfedd !=nil {return nil ,_e .Wrap (_dfedd ,_fagd ,"");
};return _bfgcd ,nil ;};func _agdcc (_geaeb *_d .Stack ,_faeg ,_cabbe ,_acad ,_bgge ,_fcdac int ,_aegd *_ca .Rectangle )(_defbb error ){const _cbed ="\u0070\u0075\u0073\u0068\u0046\u0069\u006c\u006c\u0053\u0065\u0067m\u0065\u006e\u0074\u0042\u006f\u0075\u006e\u0064\u0069\u006eg\u0042\u006f\u0078";
if _geaeb ==nil {return _e .Error (_cbed ,"\u006ei\u006c \u0073\u0074\u0061\u0063\u006b \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};if _aegd ==nil {return _e .Error (_cbed ,"\u0070\u0072\u006f\u0076i\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0069\u006da\u0067e\u002e\u0052\u0065\u0063\u0074\u0061\u006eg\u006c\u0065");
};_aegd .Min .X =_d .Min (_aegd .Min .X ,_faeg );_aegd .Max .X =_d .Max (_aegd .Max .X ,_cabbe );_aegd .Min .Y =_d .Min (_aegd .Min .Y ,_acad );_aegd .Max .Y =_d .Max (_aegd .Max .Y ,_acad );if !(_acad +_bgge >=0&&_acad +_bgge <=_fcdac ){return nil ;};
if _geaeb .Aux ==nil {return _e .Error (_cbed ,"a\u0075x\u0053\u0074\u0061\u0063\u006b\u0020\u006e\u006ft\u0020\u0064\u0065\u0066in\u0065\u0064");};var _acfa *fillSegment ;_cabd ,_gcab :=_geaeb .Aux .Pop ();if _gcab {if _acfa ,_gcab =_cabd .(*fillSegment );
!_gcab {return _e .Error (_cbed ,"a\u0075\u0078\u0053\u0074\u0061\u0063k\u0020\u0064\u0061\u0074\u0061\u0020i\u0073\u0020\u006e\u006f\u0074\u0020\u0061 \u002a\u0066\u0069\u006c\u006c\u0053\u0065\u0067\u006d\u0065n\u0074");};}else {_acfa =&fillSegment {};
};_acfa ._fbbe =_faeg ;_acfa ._deef =_cabbe ;_acfa ._cfgb =_acad ;_acfa ._bfbfc =_bgge ;_geaeb .Push (_acfa );return nil ;};func (_fdea *Boxes )Add (box *_ca .Rectangle )error {if _fdea ==nil {return _e .Error ("\u0042o\u0078\u0065\u0073\u002e\u0041\u0064d","\u0027\u0042\u006f\u0078es\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};*_fdea =append (*_fdea ,box );return nil ;};func TstASymbol (t *_c .T )*Bitmap {t .Helper ();_bbfde :=New (6,6);_ea .NoError (t ,_bbfde .SetPixel (1,0,1));_ea .NoError (t ,_bbfde .SetPixel (2,0,1));_ea .NoError (t ,_bbfde .SetPixel (3,0,1));_ea .NoError (t ,_bbfde .SetPixel (4,0,1));
_ea .NoError (t ,_bbfde .SetPixel (5,1,1));_ea .NoError (t ,_bbfde .SetPixel (1,2,1));_ea .NoError (t ,_bbfde .SetPixel (2,2,1));_ea .NoError (t ,_bbfde .SetPixel (3,2,1));_ea .NoError (t ,_bbfde .SetPixel (4,2,1));_ea .NoError (t ,_bbfde .SetPixel (5,2,1));
_ea .NoError (t ,_bbfde .SetPixel (0,3,1));_ea .NoError (t ,_bbfde .SetPixel (5,3,1));_ea .NoError (t ,_bbfde .SetPixel (0,4,1));_ea .NoError (t ,_bbfde .SetPixel (5,4,1));_ea .NoError (t ,_bbfde .SetPixel (1,5,1));_ea .NoError (t ,_bbfde .SetPixel (2,5,1));
_ea .NoError (t ,_bbfde .SetPixel (3,5,1));_ea .NoError (t ,_bbfde .SetPixel (4,5,1));_ea .NoError (t ,_bbfde .SetPixel (5,5,1));return _bbfde ;};type BoundaryCondition int ;func _geea (_gabg ,_geegf *Bitmap ,_deda CombinationOperator )*Bitmap {_faad :=New (_gabg .Width ,_gabg .Height );
for _gac :=0;_gac < len (_faad .Data );_gac ++{_faad .Data [_gac ]=_baga (_gabg .Data [_gac ],_geegf .Data [_gac ],_deda );};return _faad ;};func ClipBoxToRectangle (box *_ca .Rectangle ,wi ,hi int )(_aff *_ca .Rectangle ,_afd error ){const _eacc ="\u0043l\u0069p\u0042\u006f\u0078\u0054\u006fR\u0065\u0063t\u0061\u006e\u0067\u006c\u0065";
if box ==nil {return nil ,_e .Error (_eacc ,"\u0027\u0062\u006f\u0078\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");};if box .Min .X >=wi ||box .Min .Y >=hi ||box .Max .X <=0||box .Max .Y <=0{return nil ,_e .Error (_eacc ,"\u0027\u0062\u006fx'\u0020\u006f\u0075\u0074\u0073\u0069\u0064\u0065\u0020\u0072\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065");
};_gbdf :=*box ;_aff =&_gbdf ;if _aff .Min .X < 0{_aff .Max .X +=_aff .Min .X ;_aff .Min .X =0;};if _aff .Min .Y < 0{_aff .Max .Y +=_aff .Min .Y ;_aff .Min .Y =0;};if _aff .Max .X > wi {_aff .Max .X =wi ;};if _aff .Max .Y > hi {_aff .Max .Y =hi ;};return _aff ,nil ;
};func _def (_abe *Bitmap ,_agd ,_gd int )(*Bitmap ,error ){const _dad ="e\u0078\u0070\u0061\u006edB\u0069n\u0061\u0072\u0079\u0052\u0065p\u006c\u0069\u0063\u0061\u0074\u0065";if _abe ==nil {return nil ,_e .Error (_dad ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _agd <=0||_gd <=0{return nil ,_e .Error (_dad ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0073\u0063\u0061l\u0065\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020<\u003d\u0020\u0030");};if _agd ==_gd {if _agd ==1{_dd ,_ae :=_ebg (nil ,_abe );
if _ae !=nil {return nil ,_e .Wrap (_ae ,_dad ,"\u0078\u0046\u0061\u0063\u0074\u0020\u003d\u003d\u0020y\u0046\u0061\u0063\u0074");};return _dd ,nil ;};if _agd ==2||_agd ==4||_agd ==8{_aaf ,_ce :=_bb (_abe ,_agd );if _ce !=nil {return nil ,_e .Wrap (_ce ,_dad ,"\u0078\u0046a\u0063\u0074\u0020i\u006e\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d");
};return _aaf ,nil ;};};_ef :=_agd *_abe .Width ;_geb :=_gd *_abe .Height ;_bf :=New (_ef ,_geb );_edc :=_bf .RowStride ;var (_cfd ,_bg ,_cae ,_aec ,_fea int ;_dae byte ;_ccb error ;);for _bg =0;_bg < _abe .Height ;_bg ++{_cfd =_gd *_bg *_edc ;for _cae =0;
_cae < _abe .Width ;_cae ++{if _bfg :=_abe .GetPixel (_cae ,_bg );_bfg {_fea =_agd *_cae ;for _aec =0;_aec < _agd ;_aec ++{_bf .setBit (_cfd *8+_fea +_aec );};};};for _aec =1;_aec < _gd ;_aec ++{_fce :=_cfd +_aec *_edc ;for _cce :=0;_cce < _edc ;_cce ++{if _dae ,_ccb =_bf .GetByte (_cfd +_cce );
_ccb !=nil {return nil ,_e .Wrapf (_ccb ,_dad ,"\u0072\u0065\u0070\u006cic\u0061\u0074\u0069\u006e\u0067\u0020\u006c\u0069\u006e\u0065\u003a\u0020\u0027\u0025d\u0027",_aec );};if _ccb =_bf .SetByte (_fce +_cce ,_dae );_ccb !=nil {return nil ,_e .Wrap (_ccb ,_dad ,"\u0053\u0065\u0074\u0074in\u0067\u0020\u0062\u0079\u0074\u0065\u0020\u0066\u0061\u0069\u006c\u0065\u0064");
};};};};return _bf ,nil ;};func _degcb (_dffd ,_degd *Bitmap ,_gcga ,_gbca ,_ffdg uint ,_fdfdb ,_cfeb int ,_ccbc bool ,_ggcg ,_eaccd int )error {for _gdaa :=_fdfdb ;_gdaa < _cfeb ;_gdaa ++{if _ggcg +1< len (_dffd .Data ){_ged :=_gdaa +1==_cfeb ;_aeg ,_gaa :=_dffd .GetByte (_ggcg );
if _gaa !=nil {return _gaa ;};_ggcg ++;_aeg <<=_gcga ;_cab ,_gaa :=_dffd .GetByte (_ggcg );if _gaa !=nil {return _gaa ;};_cab >>=_gbca ;_eggd :=_aeg |_cab ;if _ged &&!_ccbc {_eggd =_dcea (_ffdg ,_eggd );};_gaa =_degd .SetByte (_eaccd ,_eggd );if _gaa !=nil {return _gaa ;
};_eaccd ++;if _ged &&_ccbc {_dddg ,_ddc :=_dffd .GetByte (_ggcg );if _ddc !=nil {return _ddc ;};_dddg <<=_gcga ;_eggd =_dcea (_ffdg ,_dddg );if _ddc =_degd .SetByte (_eaccd ,_eggd );_ddc !=nil {return _ddc ;};};continue ;};_baf ,_adce :=_dffd .GetByte (_ggcg );
if _adce !=nil {_cg .Log .Debug ("G\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0068\u0065\u0020\u0076\u0061l\u0075\u0065\u0020\u0061\u0074\u003a\u0020%\u0064\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020%\u0073",_ggcg ,_adce );return _adce ;};
_baf <<=_gcga ;_ggcg ++;_adce =_degd .SetByte (_eaccd ,_baf );if _adce !=nil {return _adce ;};_eaccd ++;};return nil ;};func (_eeag *Bitmap )thresholdPixelSum (_gabe int )bool {var (_bbfb int ;_fecb uint8 ;_gfgc byte ;_cef int ;);_gdf :=_eeag .RowStride ;
_efea :=uint (_eeag .Width &0x07);if _efea !=0{_fecb =uint8 ((0xff<<(8-_efea ))&0xff);_gdf --;};for _bea :=0;_bea < _eeag .Height ;_bea ++{for _cef =0;_cef < _gdf ;_cef ++{_gfgc =_eeag .Data [_bea *_eeag .RowStride +_cef ];_bbfb +=int (_bff [_gfgc ]);};
if _efea !=0{_gfgc =_eeag .Data [_bea *_eeag .RowStride +_cef ]&_fecb ;_bbfb +=int (_bff [_gfgc ]);};if _bbfb > _gabe {return true ;};};return false ;};func (_beeac *byWidth )Len ()int {return len (_beeac .Values )};func _aceg (_bafb *Bitmap ,_dggad *Bitmap ,_fdef *Selection ,_edcg **Bitmap )(*Bitmap ,error ){const _fccf ="\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u004d\u006f\u0072\u0070\u0068A\u0072\u0067\u0073\u0031";
if _dggad ==nil {return nil ,_e .Error (_fccf ,"\u004d\u006f\u0072\u0070\u0068\u0041\u0072\u0067\u0073\u0031\u0020'\u0073\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066i\u006e\u0065\u0064");};if _fdef ==nil {return nil ,_e .Error (_fccf ,"\u004d\u006f\u0072\u0068p\u0041\u0072\u0067\u0073\u0031\u0020\u0027\u0073\u0065\u006c'\u0020n\u006f\u0074\u0020\u0064\u0065\u0066\u0069n\u0065\u0064");
};_fecf ,_bcca :=_fdef .Height ,_fdef .Width ;if _fecf ==0||_bcca ==0{return nil ,_e .Error (_fccf ,"\u0073\u0065\u006c\u0065ct\u0069\u006f\u006e\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u0020\u0030");};if _bafb ==nil {_bafb =_dggad .createTemplate ();
*_edcg =_dggad ;return _bafb ,nil ;};_bafb .Width =_dggad .Width ;_bafb .Height =_dggad .Height ;_bafb .RowStride =_dggad .RowStride ;_bafb .Color =_dggad .Color ;_bafb .Data =make ([]byte ,_dggad .RowStride *_dggad .Height );if _bafb ==_dggad {*_edcg =_dggad .Copy ();
}else {*_edcg =_dggad ;};return _bafb ,nil ;};func (_fcfg *Bitmaps )SelectByIndexes (idx []int )(*Bitmaps ,error ){const _cgace ="B\u0069\u0074\u006d\u0061\u0070\u0073.\u0053\u006f\u0072\u0074\u0049\u006e\u0064\u0065\u0078e\u0073\u0042\u0079H\u0065i\u0067\u0068\u0074";
_eage ,_edff :=_fcfg .selectByIndexes (idx );if _edff !=nil {return nil ,_e .Wrap (_edff ,_cgace ,"");};return _eage ,nil ;};func NewClassedPoints (points *Points ,classes _d .IntSlice )(*ClassedPoints ,error ){const _gebca ="\u004e\u0065w\u0043\u006c\u0061s\u0073\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073";
if points ==nil {return nil ,_e .Error (_gebca ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0070\u006f\u0069\u006e\u0074\u0073");};if classes ==nil {return nil ,_e .Error (_gebca ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0063\u006c\u0061ss\u0065\u0073");
};_bfcf :=&ClassedPoints {Points :points ,IntSlice :classes };if _ffge :=_bfcf .validateIntSlice ();_ffge !=nil {return nil ,_e .Wrap (_ffge ,_gebca ,"");};return _bfcf ,nil ;};func (_bccgc *Bitmaps )AddBox (box *_ca .Rectangle ){_bccgc .Boxes =append (_bccgc .Boxes ,box )};
func (_gdcd *Bitmaps )GetBitmap (i int )(*Bitmap ,error ){const _afcc ="\u0047e\u0074\u0042\u0069\u0074\u006d\u0061p";if _gdcd ==nil {return nil ,_e .Error (_afcc ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0042\u0069\u0074ma\u0070\u0073");
};if i > len (_gdcd .Values )-1{return nil ,_e .Errorf (_afcc ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _gdcd .Values [i ],nil ;};type Component int ;
func _bad (_bcae ,_efda int )int {if _bcae > _efda {return _bcae ;};return _efda ;};func _dfdd ()[]int {_efeff :=make ([]int ,256);_efeff [0]=0;_efeff [1]=7;var _eedg int ;for _eedg =2;_eedg < 4;_eedg ++{_efeff [_eedg ]=_efeff [_eedg -2]+6;};for _eedg =4;
_eedg < 8;_eedg ++{_efeff [_eedg ]=_efeff [_eedg -4]+5;};for _eedg =8;_eedg < 16;_eedg ++{_efeff [_eedg ]=_efeff [_eedg -8]+4;};for _eedg =16;_eedg < 32;_eedg ++{_efeff [_eedg ]=_efeff [_eedg -16]+3;};for _eedg =32;_eedg < 64;_eedg ++{_efeff [_eedg ]=_efeff [_eedg -32]+2;
};for _eedg =64;_eedg < 128;_eedg ++{_efeff [_eedg ]=_efeff [_eedg -64]+1;};for _eedg =128;_eedg < 256;_eedg ++{_efeff [_eedg ]=_efeff [_eedg -128];};return _efeff ;};func (_dcg *Bitmap )setEightPartlyBytes (_aadc ,_dca int ,_eda uint64 )(_dddc error ){var (_bce byte ;
_faed int ;);const _dbdf ="\u0073\u0065\u0074\u0045ig\u0068\u0074\u0050\u0061\u0072\u0074\u006c\u0079\u0042\u0079\u0074\u0065\u0073";for _egef :=1;_egef <=_dca ;_egef ++{_faed =64-_egef *8;_bce =byte (_eda >>uint (_faed )&0xff);_cg .Log .Trace ("\u0074\u0065\u006d\u0070\u003a\u0020\u0025\u0030\u0038\u0062\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a %\u0064,\u0020\u0069\u0064\u0078\u003a\u0020\u0025\u0064\u002c\u0020\u0066\u0075l\u006c\u0042\u0079\u0074\u0065\u0073\u004e\u0075\u006d\u0062\u0065\u0072\u003a\u0020\u0025\u0064\u002c \u0073\u0068\u0069\u0066\u0074\u003a\u0020\u0025\u0064",_bce ,_aadc ,_aadc +_egef -1,_dca ,_faed );
if _dddc =_dcg .SetByte (_aadc +_egef -1,_bce );_dddc !=nil {return _e .Wrap (_dddc ,_dbdf ,"\u0066\u0075\u006c\u006c\u0042\u0079\u0074\u0065");};};_cdgd :=_dcg .RowStride *8-_dcg .Width ;if _cdgd ==0{return nil ;};_faed -=8;_bce =byte (_eda >>uint (_faed )&0xff)<<uint (_cdgd );
if _dddc =_dcg .SetByte (_aadc +_dca ,_bce );_dddc !=nil {return _e .Wrap (_dddc ,_dbdf ,"\u0070\u0061\u0064\u0064\u0065\u0064");};return nil ;};func _fgg (_dc *Bitmap ,_edg ...int )(_eae *Bitmap ,_ecc error ){const _gba ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0043\u0061\u0073\u0063\u0061\u0064\u0065";
if _dc ==nil {return nil ,_e .Error (_gba ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if len (_edg )==0||len (_edg )> 4{return nil ,_e .Error (_gba ,"t\u0068\u0065\u0072\u0065\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0074\u0020\u006cea\u0073\u0074\u0020\u006fn\u0065\u0020\u0061\u006e\u0064\u0020\u0061\u0074\u0020mo\u0073\u0074 \u0034\u0020\u006c\u0065\u0076\u0065\u006c\u0073");
};if _edg [0]<=0{_cg .Log .Debug ("\u006c\u0065\u0076\u0065\u006c\u0031\u0020\u003c\u003d\u0020\u0030 \u002d\u0020\u006e\u006f\u0020\u0072\u0065\u0064\u0075\u0063t\u0069\u006f\u006e");_eae ,_ecc =_ebg (nil ,_dc );if _ecc !=nil {return nil ,_e .Wrap (_ecc ,_gba ,"l\u0065\u0076\u0065\u006c\u0031\u0020\u003c\u003d\u0020\u0030");
};return _eae ,nil ;};_eg :=_aeb ();_eae =_dc ;for _dge ,_cff :=range _edg {if _cff <=0{break ;};_eae ,_ecc =_ceb (_eae ,_cff ,_eg );if _ecc !=nil {return nil ,_e .Wrapf (_ecc ,_gba ,"\u006c\u0065\u0076\u0065\u006c\u0025\u0064\u0020\u0072\u0065\u0064\u0075c\u0074\u0069\u006f\u006e",_dge );
};};return _eae ,nil ;};func (_ceadg *Boxes )selectWithIndicator (_adgg *_d .NumSlice )(_gdgg *Boxes ,_cgbb error ){const _gec ="\u0042o\u0078\u0065\u0073\u002es\u0065\u006c\u0065\u0063\u0074W\u0069t\u0068I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";if _ceadg ==nil {return nil ,_e .Error (_gec ,"b\u006f\u0078\u0065\u0073 '\u0062'\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064");
};if _adgg ==nil {return nil ,_e .Error (_gec ,"\u0027\u006ea\u0027\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if len (*_adgg )!=len (*_ceadg ){return nil ,_e .Error (_gec ,"\u0062\u006f\u0078\u0065\u0073\u0020\u0027\u0062\u0027\u0020\u0068\u0061\u0073\u0020\u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006e\u0074\u0020s\u0069\u007a\u0065\u0020\u0074h\u0061\u006e \u0027\u006e\u0061\u0027");
};var _dgcc ,_agca int ;for _gfef :=0;_gfef < len (*_adgg );_gfef ++{if _dgcc ,_cgbb =_adgg .GetInt (_gfef );_cgbb !=nil {return nil ,_e .Wrap (_cgbb ,_gec ,"\u0063\u0068\u0065\u0063\u006b\u0069\u006e\u0067\u0020c\u006f\u0075\u006e\u0074");};if _dgcc ==1{_agca ++;
};};if _agca ==len (*_ceadg ){return _ceadg ,nil ;};_ddg :=Boxes {};for _ccdd :=0;_ccdd < len (*_adgg );_ccdd ++{_dgcc =int ((*_adgg )[_ccdd ]);if _dgcc ==0{continue ;};_ddg =append (_ddg ,(*_ceadg )[_ccdd ]);};_gdgg =&_ddg ;return _gdgg ,nil ;};func (_bfb *Bitmap )String ()string {var _adeg ="\u000a";
for _abeef :=0;_abeef < _bfb .Height ;_abeef ++{var _fcb string ;for _bfd :=0;_bfd < _bfb .Width ;_bfd ++{_afg :=_bfb .GetPixel (_bfd ,_abeef );if _afg {_fcb +="\u0031";}else {_fcb +="\u0030";};};_adeg +=_fcb +"\u000a";};return _adeg ;};var _acffg =[]byte {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3E,0x78,0x27,0xC2,0x27,0x91,0x00,0x22,0x48,0x21,0x03,0x24,0x91,0x00,0x22,0x48,0x21,0x02,0xA4,0x95,0x00,0x22,0x48,0x21,0x02,0x64,0x9B,0x00,0x3C,0x78,0x21,0x02,0x27,0x91,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x15,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
func MakePixelSumTab8 ()[]int {return _bdga ()};func (_dfd *Boxes )makeSizeIndicator (_effg ,_fcdf int ,_ffbe LocationFilter ,_fgfcg SizeComparison )*_d .NumSlice {_accbf :=&_d .NumSlice {};var _bef ,_fedcd ,_ebe int ;for _ ,_deb :=range *_dfd {_bef =0;
_fedcd ,_ebe =_deb .Dx (),_deb .Dy ();switch _ffbe {case LocSelectWidth :if (_fgfcg ==SizeSelectIfLT &&_fedcd < _effg )||(_fgfcg ==SizeSelectIfGT &&_fedcd > _effg )||(_fgfcg ==SizeSelectIfLTE &&_fedcd <=_effg )||(_fgfcg ==SizeSelectIfGTE &&_fedcd >=_effg ){_bef =1;
};case LocSelectHeight :if (_fgfcg ==SizeSelectIfLT &&_ebe < _fcdf )||(_fgfcg ==SizeSelectIfGT &&_ebe > _fcdf )||(_fgfcg ==SizeSelectIfLTE &&_ebe <=_fcdf )||(_fgfcg ==SizeSelectIfGTE &&_ebe >=_fcdf ){_bef =1;};case LocSelectIfEither :if (_fgfcg ==SizeSelectIfLT &&(_ebe < _fcdf ||_fedcd < _effg ))||(_fgfcg ==SizeSelectIfGT &&(_ebe > _fcdf ||_fedcd > _effg ))||(_fgfcg ==SizeSelectIfLTE &&(_ebe <=_fcdf ||_fedcd <=_effg ))||(_fgfcg ==SizeSelectIfGTE &&(_ebe >=_fcdf ||_fedcd >=_effg )){_bef =1;
};case LocSelectIfBoth :if (_fgfcg ==SizeSelectIfLT &&(_ebe < _fcdf &&_fedcd < _effg ))||(_fgfcg ==SizeSelectIfGT &&(_ebe > _fcdf &&_fedcd > _effg ))||(_fgfcg ==SizeSelectIfLTE &&(_ebe <=_fcdf &&_fedcd <=_effg ))||(_fgfcg ==SizeSelectIfGTE &&(_ebe >=_fcdf &&_fedcd >=_effg )){_bef =1;
};};_accbf .AddInt (_bef );};return _accbf ;};func TstVSymbol (t *_c .T ,scale ...int )*Bitmap {_dcaaf ,_ecfc :=NewWithData (5,5,[]byte {0x88,0x88,0x88,0x50,0x20});_ea .NoError (t ,_ecfc );return TstGetScaledSymbol (t ,_dcaaf ,scale ...);};func (_aaba *ClassedPoints )GetIntXByClass (i int )(int ,error ){const _dcab ="\u0043\u006c\u0061\u0073s\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047e\u0074I\u006e\u0074\u0059\u0042\u0079\u0043\u006ca\u0073\u0073";
if i >=_aaba .IntSlice .Size (){return 0,_e .Errorf (_dcab ,"\u0069\u003a\u0020\u0027\u0025\u0064\u0027 \u0069\u0073\u0020o\u0075\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065",i );
};return int (_aaba .XAtIndex (i )),nil ;};func (_aead *Bitmap )connComponentsBitmapsBB (_efdg *Bitmaps ,_fabec int )(_cdfa *Boxes ,_cdgb error ){const _eadb ="\u0063\u006f\u006enC\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0042\u0069\u0074\u006d\u0061\u0070\u0073\u0042\u0042";
if _fabec !=4&&_fabec !=8{return nil ,_e .Error (_eadb ,"\u0063\u006f\u006e\u006e\u0065\u0063t\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0027\u0034\u0027\u0020\u006fr\u0020\u0027\u0038\u0027");};if _efdg ==nil {return nil ,_e .Error (_eadb ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0042\u0069\u0074ma\u0070\u0073");
};if len (_efdg .Values )> 0{return nil ,_e .Error (_eadb ,"\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u006fn\u002d\u0065\u006d\u0070\u0074\u0079\u0020\u0042\u0069\u0074m\u0061\u0070\u0073");};if _aead .Zero (){return &Boxes {},nil ;};
var (_gbe ,_gccd ,_edgd ,_cgbfa *Bitmap ;);_aead .setPadBits (0);if _gbe ,_cdgb =_ebg (nil ,_aead );_cdgb !=nil {return nil ,_e .Wrap (_cdgb ,_eadb ,"\u0062\u006d\u0031");};if _gccd ,_cdgb =_ebg (nil ,_aead );_cdgb !=nil {return nil ,_e .Wrap (_cdgb ,_eadb ,"\u0062\u006d\u0032");
};_eedc :=&_d .Stack {};_eedc .Aux =&_d .Stack {};_cdfa =&Boxes {};var (_gebc ,_gdga int ;_dgge _ca .Point ;_ddba bool ;_ecgbc *_ca .Rectangle ;);for {if _dgge ,_ddba ,_cdgb =_gbe .nextOnPixel (_gebc ,_gdga );_cdgb !=nil {return nil ,_e .Wrap (_cdgb ,_eadb ,"");
};if !_ddba {break ;};if _ecgbc ,_cdgb =_gbfcc (_gbe ,_eedc ,_dgge .X ,_dgge .Y ,_fabec );_cdgb !=nil {return nil ,_e .Wrap (_cdgb ,_eadb ,"");};if _cdgb =_cdfa .Add (_ecgbc );_cdgb !=nil {return nil ,_e .Wrap (_cdgb ,_eadb ,"");};if _edgd ,_cdgb =_gbe .clipRectangle (_ecgbc ,nil );
_cdgb !=nil {return nil ,_e .Wrap (_cdgb ,_eadb ,"\u0062\u006d\u0033");};if _cgbfa ,_cdgb =_gccd .clipRectangle (_ecgbc ,nil );_cdgb !=nil {return nil ,_e .Wrap (_cdgb ,_eadb ,"\u0062\u006d\u0034");};if _ ,_cdgb =_bcdb (_edgd ,_edgd ,_cgbfa );_cdgb !=nil {return nil ,_e .Wrap (_cdgb ,_eadb ,"\u0062m\u0033\u0020\u005e\u0020\u0062\u006d4");
};if _cdgb =_gccd .RasterOperation (_ecgbc .Min .X ,_ecgbc .Min .Y ,_ecgbc .Dx (),_ecgbc .Dy (),PixSrcXorDst ,_edgd ,0,0);_cdgb !=nil {return nil ,_e .Wrap (_cdgb ,_eadb ,"\u0062\u006d\u0032\u0020\u002d\u0058\u004f\u0052\u002d>\u0020\u0062\u006d\u0033");
};_efdg .AddBitmap (_edgd );_gebc =_dgge .X ;_gdga =_dgge .Y ;};_efdg .Boxes =*_cdfa ;return _cdfa ,nil ;};func (_agc *Bitmap )Equals (s *Bitmap )bool {if len (_agc .Data )!=len (s .Data )||_agc .Width !=s .Width ||_agc .Height !=s .Height {return false ;
};for _afabe :=0;_afabe < _agc .Height ;_afabe ++{_adb :=_afabe *_agc .RowStride ;for _abd :=0;_abd < _agc .RowStride ;_abd ++{if _agc .Data [_adb +_abd ]!=s .Data [_adb +_abd ]{return false ;};};};return true ;};func _efgd (_agbg ,_agdfa *Bitmap ,_bcea *Selection )(*Bitmap ,error ){const _eaeb ="\u006f\u0070\u0065\u006e";
var _fafb error ;_agbg ,_fafb =_ecad (_agbg ,_agdfa ,_bcea );if _fafb !=nil {return nil ,_e .Wrap (_fafb ,_eaeb ,"");};_aggg ,_fafb :=_efac (nil ,_agdfa ,_bcea );if _fafb !=nil {return nil ,_e .Wrap (_fafb ,_eaeb ,"");};_ ,_fafb =_eebc (_agbg ,_aggg ,_bcea );
if _fafb !=nil {return nil ,_e .Wrap (_fafb ,_eaeb ,"");};return _agbg ,nil ;};func _gcacc (_baa ,_dggd *Bitmap ,_cega ,_deca int )(*Bitmap ,error ){const _eeaee ="\u0063\u006c\u006f\u0073\u0065\u0053\u0061\u0066\u0065B\u0072\u0069\u0063\u006b";if _dggd ==nil {return nil ,_e .Error (_eeaee ,"\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0069\u0073\u0020\u006e\u0069\u006c");
};if _cega < 1||_deca < 1{return nil ,_e .Error (_eeaee ,"\u0068s\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0073\u0069z\u0065\u0020\u006e\u006f\u0074\u0020\u003e\u003d\u0020\u0031");};if _cega ==1&&_deca ==1{return _ebg (_baa ,_dggd );};if MorphBC ==SymmetricMorphBC {_dcdg ,_cadd :=_abaf (_baa ,_dggd ,_cega ,_deca );
if _cadd !=nil {return nil ,_e .Wrap (_cadd ,_eeaee ,"\u0053\u0079m\u006d\u0065\u0074r\u0069\u0063\u004d\u006f\u0072\u0070\u0068\u0042\u0043");};return _dcdg ,nil ;};_cggf :=_bad (_cega /2,_deca /2);_eaed :=8*((_cggf +7)/8);_cdbd ,_bafc :=_dggd .AddBorder (_eaed ,0);
if _bafc !=nil {return nil ,_e .Wrapf (_bafc ,_eeaee ,"\u0042\u006f\u0072\u0064\u0065\u0072\u0053\u0069\u007ae\u003a\u0020\u0025\u0064",_eaed );};var _dffdg ,_efde *Bitmap ;if _cega ==1||_deca ==1{_ggcb :=SelCreateBrick (_deca ,_cega ,_deca /2,_cega /2,SelHit );
_dffdg ,_bafc =_dfdg (nil ,_cdbd ,_ggcb );if _bafc !=nil {return nil ,_e .Wrap (_bafc ,_eeaee ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};}else {_fdcf :=SelCreateBrick (1,_cega ,0,_cega /2,SelHit );
_ced ,_ffbg :=_eebc (nil ,_cdbd ,_fdcf );if _ffbg !=nil {return nil ,_e .Wrap (_ffbg ,_eeaee ,"\u0072\u0065\u0067\u0075la\u0072\u0020\u002d\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0064\u0069\u006c\u0061t\u0065");};_gfcb :=SelCreateBrick (_deca ,1,_deca /2,0,SelHit );
_dffdg ,_ffbg =_eebc (nil ,_ced ,_gfcb );if _ffbg !=nil {return nil ,_e .Wrap (_ffbg ,_eeaee ,"\u0072\u0065\u0067ul\u0061\u0072\u0020\u002d\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};if _ ,_ffbg =_efac (_ced ,_dffdg ,_fdcf );
_ffbg !=nil {return nil ,_e .Wrap (_ffbg ,_eeaee ,"r\u0065\u0067\u0075\u006car\u0020-\u0020\u0066\u0069\u0072\u0073t\u0020\u0065\u0072\u006f\u0064\u0065");};if _ ,_ffbg =_efac (_dffdg ,_ced ,_gfcb );_ffbg !=nil {return nil ,_e .Wrap (_ffbg ,_eeaee ,"\u0072\u0065\u0067\u0075la\u0072\u0020\u002d\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0065\u0072\u006fd\u0065");
};};if _efde ,_bafc =_dffdg .RemoveBorder (_eaed );_bafc !=nil {return nil ,_e .Wrap (_bafc ,_eeaee ,"\u0072e\u0067\u0075\u006c\u0061\u0072");};if _baa ==nil {return _efde ,nil ;};if _ ,_bafc =_ebg (_baa ,_efde );_bafc !=nil {return nil ,_bafc ;};return _baa ,nil ;
};func MakePixelCentroidTab8 ()[]int {return _dfdd ()};func (_fag *Bitmap )GetChocolateData ()[]byte {if _fag .Color ==Vanilla {_fag .inverseData ();};return _fag .Data ;};const (ComponentConn Component =iota ;ComponentCharacters ;ComponentWords ;);func (_afcd Points )Get (i int )(Point ,error ){if i > len (_afcd )-1{return Point {},_e .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _afcd [i ],nil ;};func CombineBytes (oldByte ,newByte byte ,op CombinationOperator )byte {return _baga (oldByte ,newByte ,op );};func Centroids (bms []*Bitmap )(*Points ,error ){_bcc :=make ([]Point ,len (bms ));_ecfa :=_dfdd ();_ebeec :=_bdga ();
var _ffbd error ;for _befe ,_aaa :=range bms {_bcc [_befe ],_ffbd =_aaa .centroid (_ecfa ,_ebeec );if _ffbd !=nil {return nil ,_ffbd ;};};_dfafd :=Points (_bcc );return &_dfafd ,nil ;};func (_bbfdg *ClassedPoints )XAtIndex (i int )float32 {return (*_bbfdg .Points )[_bbfdg .IntSlice [i ]].X };
func (_cca *ClassedPoints )YAtIndex (i int )float32 {return (*_cca .Points )[_cca .IntSlice [i ]].Y };func (_ffba *Bitmaps )selectByIndexes (_cdae []int )(*Bitmaps ,error ){_agcb :=&Bitmaps {};for _ ,_bfgde :=range _cdae {_dgec ,_gceff :=_ffba .GetBitmap (_bfgde );
if _gceff !=nil {return nil ,_e .Wrap (_gceff ,"\u0073e\u006ce\u0063\u0074\u0042\u0079\u0049\u006e\u0064\u0065\u0078\u0065\u0073","");};_agcb .AddBitmap (_dgec );};return _agcb ,nil ;};func _fcdg (_cde int )int {if _cde < 0{return -_cde ;};return _cde ;
};func RankHausTest (p1 ,p2 ,p3 ,p4 *Bitmap ,delX ,delY float32 ,maxDiffW ,maxDiffH ,area1 ,area3 int ,rank float32 ,tab8 []int )(_cfa bool ,_acea error ){const _fdfc ="\u0052\u0061\u006ek\u0048\u0061\u0075\u0073\u0054\u0065\u0073\u0074";_fgfg ,_ceab :=p1 .Width ,p1 .Height ;
_eebf ,_ggaf :=p3 .Width ,p3 .Height ;if _d .Abs (_fgfg -_eebf )> maxDiffW {return false ,nil ;};if _d .Abs (_ceab -_ggaf )> maxDiffH {return false ,nil ;};_agfd :=int (float32 (area1 )*(1.0-rank )+0.5);_eedb :=int (float32 (area3 )*(1.0-rank )+0.5);var _bggcg ,_aecc int ;
if delX >=0{_bggcg =int (delX +0.5);}else {_bggcg =int (delX -0.5);};if delY >=0{_aecc =int (delY +0.5);}else {_aecc =int (delY -0.5);};_eebg :=p1 .CreateTemplate ();if _acea =_eebg .RasterOperation (0,0,_fgfg ,_ceab ,PixSrc ,p1 ,0,0);_acea !=nil {return false ,_e .Wrap (_acea ,_fdfc ,"p\u0031\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");
};if _acea =_eebg .RasterOperation (_bggcg ,_aecc ,_fgfg ,_ceab ,PixNotSrcAndDst ,p4 ,0,0);_acea !=nil {return false ,_e .Wrap (_acea ,_fdfc ,"\u0074 \u0026\u0020\u0021\u0070\u0034");};_cfa ,_acea =_eebg .ThresholdPixelSum (_agfd ,tab8 );if _acea !=nil {return false ,_e .Wrap (_acea ,_fdfc ,"\u0074\u002d\u003e\u0074\u0068\u0072\u0065\u0073\u0068\u0031");
};if _cfa {return false ,nil ;};if _acea =_eebg .RasterOperation (_bggcg ,_aecc ,_eebf ,_ggaf ,PixSrc ,p3 ,0,0);_acea !=nil {return false ,_e .Wrap (_acea ,_fdfc ,"p\u0033\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _acea =_eebg .RasterOperation (0,0,_eebf ,_ggaf ,PixNotSrcAndDst ,p2 ,0,0);
_acea !=nil {return false ,_e .Wrap (_acea ,_fdfc ,"\u0074 \u0026\u0020\u0021\u0070\u0032");};_cfa ,_acea =_eebg .ThresholdPixelSum (_eedb ,tab8 );if _acea !=nil {return false ,_e .Wrap (_acea ,_fdfc ,"\u0074\u002d\u003e\u0074\u0068\u0072\u0065\u0073\u0068\u0033");
};return !_cfa ,nil ;};func (_dfeb *Bitmaps )CountPixels ()*_d .NumSlice {_bedg :=&_d .NumSlice {};for _ ,_afgee :=range _dfeb .Values {_bedg .AddInt (_afgee .CountPixels ());};return _bedg ;};func _bde (_gbd ,_eeg *Bitmap ,_cbd int ,_feb []byte ,_gfe int )(_dff error ){const _eff ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0033";
var (_afaa ,_fgb ,_eeea ,_aede ,_bcd ,_ebc ,_dbe ,_fda int ;_gbda ,_gbaa ,_bba ,_dfed uint32 ;_dgg ,_dgab byte ;_bfgc uint16 ;);_dcd :=make ([]byte ,4);_abba :=make ([]byte ,4);for _eeea =0;_eeea < _gbd .Height -1;_eeea ,_aede =_eeea +2,_aede +1{_afaa =_eeea *_gbd .RowStride ;
_fgb =_aede *_eeg .RowStride ;for _bcd ,_ebc =0,0;_bcd < _gfe ;_bcd ,_ebc =_bcd +4,_ebc +1{for _dbe =0;_dbe < 4;_dbe ++{_fda =_afaa +_bcd +_dbe ;if _fda <=len (_gbd .Data )-1&&_fda < _afaa +_gbd .RowStride {_dcd [_dbe ]=_gbd .Data [_fda ];}else {_dcd [_dbe ]=0x00;
};_fda =_afaa +_gbd .RowStride +_bcd +_dbe ;if _fda <=len (_gbd .Data )-1&&_fda < _afaa +(2*_gbd .RowStride ){_abba [_dbe ]=_gbd .Data [_fda ];}else {_abba [_dbe ]=0x00;};};_gbda =_cf .BigEndian .Uint32 (_dcd );_gbaa =_cf .BigEndian .Uint32 (_abba );_bba =_gbda &_gbaa ;
_bba |=_bba <<1;_dfed =_gbda |_gbaa ;_dfed &=_dfed <<1;_gbaa =_bba &_dfed ;_gbaa &=0xaaaaaaaa;_gbda =_gbaa |(_gbaa <<7);_dgg =byte (_gbda >>24);_dgab =byte ((_gbda >>8)&0xff);_fda =_fgb +_ebc ;if _fda +1==len (_eeg .Data )-1||_fda +1>=_fgb +_eeg .RowStride {if _dff =_eeg .SetByte (_fda ,_feb [_dgg ]);
_dff !=nil {return _e .Wrapf (_dff ,_eff ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_fda );};}else {_bfgc =(uint16 (_feb [_dgg ])<<8)|uint16 (_feb [_dgab ]);if _dff =_eeg .setTwoBytes (_fda ,_bfgc );_dff !=nil {return _e .Wrapf (_dff ,_eff ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_fda );
};_ebc ++;};};};return nil ;};func (_aega *Bitmaps )GroupByHeight ()(*BitmapsArray ,error ){const _aabe ="\u0047\u0072\u006f\u0075\u0070\u0042\u0079\u0048\u0065\u0069\u0067\u0068\u0074";if len (_aega .Values )==0{return nil ,_e .Error (_aabe ,"\u006eo\u0020v\u0061\u006c\u0075\u0065\u0073 \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");
};_adbg :=&BitmapsArray {};_aega .SortByHeight ();_aedbd :=-1;_fcgf :=-1;for _bbed :=0;_bbed < len (_aega .Values );_bbed ++{_ccgd :=_aega .Values [_bbed ].Height ;if _ccgd > _aedbd {_aedbd =_ccgd ;_fcgf ++;_adbg .Values =append (_adbg .Values ,&Bitmaps {});
};_adbg .Values [_fcgf ].AddBitmap (_aega .Values [_bbed ]);};return _adbg ,nil ;};func (_dacd *Bitmap )Zero ()bool {_aece :=_dacd .Width /8;_bcgc :=_dacd .Width &7;var _egeg byte ;if _bcgc !=0{_egeg =byte (0xff<<uint (8-_bcgc ));};var _bdea ,_ccc ,_ede int ;
for _ccc =0;_ccc < _dacd .Height ;_ccc ++{_bdea =_dacd .RowStride *_ccc ;for _ede =0;_ede < _aece ;_ede ,_bdea =_ede +1,_bdea +1{if _dacd .Data [_bdea ]!=0{return false ;};};if _bcgc > 0{if _dacd .Data [_bdea ]&_egeg !=0{return false ;};};};return true ;
};func _cbge (_cgdg ,_fcfbg *Bitmap ,_ebgb ,_fgdf ,_gccb ,_bab ,_cefc int ,_ebgf CombinationOperator )error {var _adbbd int ;_fbde :=func (){_adbbd ++;_gccb +=_fcfbg .RowStride ;_bab +=_cgdg .RowStride ;_cefc +=_cgdg .RowStride };for _adbbd =_ebgb ;_adbbd < _fgdf ;
_fbde (){_abga :=_gccb ;for _ecegd :=_bab ;_ecegd <=_cefc ;_ecegd ++{_ccgg ,_bfcc :=_fcfbg .GetByte (_abga );if _bfcc !=nil {return _bfcc ;};_abdad ,_bfcc :=_cgdg .GetByte (_ecegd );if _bfcc !=nil {return _bfcc ;};if _bfcc =_fcfbg .SetByte (_abga ,_baga (_ccgg ,_abdad ,_ebgf ));
_bfcc !=nil {return _bfcc ;};_abga ++;};};return nil ;};func (_bbfbe *Bitmaps )ClipToBitmap (s *Bitmap )(*Bitmaps ,error ){const _gcfg ="B\u0069t\u006d\u0061\u0070\u0073\u002e\u0043\u006c\u0069p\u0054\u006f\u0042\u0069tm\u0061\u0070";if _bbfbe ==nil {return nil ,_e .Error (_gcfg ,"\u0042\u0069\u0074\u006dap\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if s ==nil {return nil ,_e .Error (_gcfg ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};_adccc :=len (_bbfbe .Values );_bbde :=&Bitmaps {Values :make ([]*Bitmap ,_adccc ),Boxes :make ([]*_ca .Rectangle ,_adccc )};
var (_fagb ,_faada *Bitmap ;_fcgd *_ca .Rectangle ;_dacdc error ;);for _aeeg :=0;_aeeg < _adccc ;_aeeg ++{if _fagb ,_dacdc =_bbfbe .GetBitmap (_aeeg );_dacdc !=nil {return nil ,_e .Wrap (_dacdc ,_gcfg ,"");};if _fcgd ,_dacdc =_bbfbe .GetBox (_aeeg );_dacdc !=nil {return nil ,_e .Wrap (_dacdc ,_gcfg ,"");
};if _faada ,_dacdc =s .clipRectangle (_fcgd ,nil );_dacdc !=nil {return nil ,_e .Wrap (_dacdc ,_gcfg ,"");};if _faada ,_dacdc =_faada .And (_fagb );_dacdc !=nil {return nil ,_e .Wrap (_dacdc ,_gcfg ,"");};_bbde .Values [_aeeg ]=_faada ;_bbde .Boxes [_aeeg ]=_fcgd ;
};return _bbde ,nil ;};func (_cbg *Bitmap )AddBorderGeneral (left ,right ,top ,bot int ,val int )(*Bitmap ,error ){return _cbg .addBorderGeneral (left ,right ,top ,bot ,val );};func (_eceb *Bitmap )setFourBytes (_ffgd int ,_gcae uint32 )error {if _ffgd +3> len (_eceb .Data )-1{return _e .Errorf ("\u0073\u0065\u0074F\u006f\u0075\u0072\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_ffgd );
};_eceb .Data [_ffgd ]=byte ((_gcae &0xff000000)>>24);_eceb .Data [_ffgd +1]=byte ((_gcae &0xff0000)>>16);_eceb .Data [_ffgd +2]=byte ((_gcae &0xff00)>>8);_eceb .Data [_ffgd +3]=byte (_gcae &0xff);return nil ;};func (_dac *Bitmap )GetPixel (x ,y int )bool {_afag :=_dac .GetByteIndex (x ,y );
_cebe :=_dac .GetBitOffset (x );_ebd :=uint (7-_cebe );if _afag > len (_dac .Data )-1{_cg .Log .Debug ("\u0054\u0072\u0079\u0069\u006e\u0067\u0020\u0074\u006f\u0020\u0067\u0065\u0074\u0020\u0070\u0069\u0078\u0065\u006c\u0020o\u0075\u0074\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0064\u0061\u0074\u0061\u0020\u0072\u0061\u006e\u0067\u0065\u002e \u0078\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0079\u003a\u0027\u0025\u0064'\u002c\u0020\u0062m\u003a\u0020\u0027\u0025\u0073\u0027",x ,y ,_dac );
return false ;};if (_dac .Data [_afag ]>>_ebd )&0x01>=1{return true ;};return false ;};func _fb (_df ,_fc *Bitmap )(_eb error ){const _db ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0032";_da :=_fc .RowStride ;
_fcf :=_df .RowStride ;var (_ccf byte ;_ag uint16 ;_ff ,_bc ,_ge ,_fd ,_fe int ;);for _ge =0;_ge < _fc .Height ;_ge ++{_ff =_ge *_da ;_bc =2*_ge *_fcf ;for _fd =0;_fd < _da ;_fd ++{_ccf =_fc .Data [_ff +_fd ];_ag =_bdeb [_ccf ];_fe =_bc +_fd *2;if _df .RowStride !=_fc .RowStride *2&&(_fd +1)*2> _df .RowStride {_eb =_df .SetByte (_fe ,byte (_ag >>8));
}else {_eb =_df .setTwoBytes (_fe ,_ag );};if _eb !=nil {return _e .Wrap (_eb ,_db ,"");};};for _fd =0;_fd < _fcf ;_fd ++{_fe =_bc +_fcf +_fd ;_ccf =_df .Data [_bc +_fd ];if _eb =_df .SetByte (_fe ,_ccf );_eb !=nil {return _e .Wrapf (_eb ,_db ,"c\u006f\u0070\u0079\u0020\u0064\u006fu\u0062\u006c\u0065\u0064\u0020\u006ci\u006e\u0065\u003a\u0020\u0027\u0025\u0064'\u002c\u0020\u0042\u0079\u0074\u0065\u003a\u0020\u0027\u0025d\u0027",_bc +_fd ,_bc +_fcf +_fd );
};};};return nil ;};const (CmbOpOr CombinationOperator =iota ;CmbOpAnd ;CmbOpXor ;CmbOpXNor ;CmbOpReplace ;CmbOpNot ;);type RasterOperator int ;func (_ggad *Bitmaps )SelectBySize (width ,height int ,tp LocationFilter ,relation SizeComparison )(_gafdg *Bitmaps ,_eeef error ){const _caaf ="B\u0069t\u006d\u0061\u0070\u0073\u002e\u0053\u0065\u006ce\u0063\u0074\u0042\u0079Si\u007a\u0065";
if _ggad ==nil {return nil ,_e .Error (_caaf ,"\u0027\u0062\u0027 B\u0069\u0074\u006d\u0061\u0070\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};switch tp {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_e .Errorf (_caaf ,"\u0070\u0072\u006f\u0076\u0069d\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u006fc\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",tp );
};switch relation {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE ,SizeSelectIfEQ :default:return nil ,_e .Errorf (_caaf ,"\u0069\u006e\u0076\u0061li\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025d\u0027",relation );
};_edag ,_eeef :=_ggad .makeSizeIndicator (width ,height ,tp ,relation );if _eeef !=nil {return nil ,_e .Wrap (_eeef ,_caaf ,"");};_gafdg ,_eeef =_ggad .selectByIndicator (_edag );if _eeef !=nil {return nil ,_e .Wrap (_eeef ,_caaf ,"");};return _gafdg ,nil ;
};func _aeb ()(_fgf []byte ){_fgf =make ([]byte ,256);for _afc :=0;_afc < 256;_afc ++{_bfc :=byte (_afc );_fgf [_bfc ]=(_bfc &0x01)|((_bfc &0x04)>>1)|((_bfc &0x10)>>2)|((_bfc &0x40)>>3)|((_bfc &0x02)<<3)|((_bfc &0x08)<<2)|((_bfc &0x20)<<1)|(_bfc &0x80);
};return _fgf ;};func _ccfc (_cfcg ,_ecgb int )int {if _cfcg < _ecgb {return _cfcg ;};return _ecgb ;};func _baga (_ggbcc ,_dba byte ,_gcac CombinationOperator )byte {switch _gcac {case CmbOpOr :return _dba |_ggbcc ;case CmbOpAnd :return _dba &_ggbcc ;case CmbOpXor :return _dba ^_ggbcc ;
case CmbOpXNor :return ^(_dba ^_ggbcc );case CmbOpNot :return ^(_dba );default:return _dba ;};};func (_cge *Bitmap )ThresholdPixelSum (thresh int ,tab8 []int )(_cffec bool ,_cgea error ){const _adg ="\u0042i\u0074\u006d\u0061\u0070\u002e\u0054\u0068\u0072\u0065\u0073\u0068o\u006c\u0064\u0050\u0069\u0078\u0065\u006c\u0053\u0075\u006d";
if tab8 ==nil {tab8 =_bdga ();};_fgcc :=_cge .Width >>3;_bfe :=_cge .Width &7;_gebg :=byte (0xff<<uint (8-_bfe ));var (_cgeb ,_fgcf ,_bdc ,_ega int ;_cddd byte ;);for _cgeb =0;_cgeb < _cge .Height ;_cgeb ++{_bdc =_cge .RowStride *_cgeb ;for _fgcf =0;_fgcf < _fgcc ;
_fgcf ++{_cddd ,_cgea =_cge .GetByte (_bdc +_fgcf );if _cgea !=nil {return false ,_e .Wrap (_cgea ,_adg ,"\u0066\u0075\u006c\u006c\u0042\u0079\u0074\u0065");};_ega +=tab8 [_cddd ];};if _bfe !=0{_cddd ,_cgea =_cge .GetByte (_bdc +_fgcf );if _cgea !=nil {return false ,_e .Wrap (_cgea ,_adg ,"p\u0061\u0072\u0074\u0069\u0061\u006c\u0042\u0079\u0074\u0065");
};_cddd &=_gebg ;_ega +=tab8 [_cddd ];};if _ega > thresh {return true ,nil ;};};return _cffec ,nil ;};func (_fdgf *ClassedPoints )SortByX (){_fdgf ._ddfc =_fdgf .xSortFunction ();_cc .Sort (_fdgf )};var MorphBC BoundaryCondition ;func TstTSymbol (t *_c .T ,scale ...int )*Bitmap {_bcdd ,_cgebc :=NewWithData (5,5,[]byte {0xF8,0x20,0x20,0x20,0x20});
_ea .NoError (t ,_cgebc );return TstGetScaledSymbol (t ,_bcdd ,scale ...);};func (_aad *Bitmap )SetPixel (x ,y int ,pixel byte )error {_cfda :=_aad .GetByteIndex (x ,y );if _cfda > len (_aad .Data )-1{return _e .Errorf ("\u0053\u0065\u0074\u0050\u0069\u0078\u0065\u006c","\u0069\u006e\u0064\u0065x \u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020%\u0064",_cfda );
};_cddc :=_aad .GetBitOffset (x );_bac :=uint (7-_cddc );_dgag :=_aad .Data [_cfda ];var _bcdc byte ;if pixel ==1{_bcdc =_dgag |(pixel &0x01<<_bac );}else {_bcdc =_dgag &^(1<<_bac );};_aad .Data [_cfda ]=_bcdc ;return nil ;};func (_dggf *Bitmap )SizesEqual (s *Bitmap )bool {if _dggf ==s {return true ;
};if _dggf .Width !=s .Width ||_dggf .Height !=s .Height {return false ;};return true ;};func (_ebf *Bitmap )clearAll ()error {return _ebf .RasterOperation (0,0,_ebf .Width ,_ebf .Height ,PixClr ,nil ,0,0);};func TstISymbol (t *_c .T ,scale ...int )*Bitmap {_aegf ,_aggf :=NewWithData (1,5,[]byte {0x80,0x80,0x80,0x80,0x80});
_ea .NoError (t ,_aggf );return TstGetScaledSymbol (t ,_aegf ,scale ...);};func (_cfb *Bitmap )clipRectangle (_ddf ,_cbbf *_ca .Rectangle )(_bee *Bitmap ,_fead error ){const _cdaa ="\u0063\u006c\u0069\u0070\u0052\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065";
if _ddf ==nil {return nil ,_e .Error (_cdaa ,"\u0070r\u006fv\u0069\u0064\u0065\u0064\u0020n\u0069\u006c \u0027\u0062\u006f\u0078\u0027");};_egg ,_egaf :=_cfb .Width ,_cfb .Height ;_bbag ,_fead :=ClipBoxToRectangle (_ddf ,_egg ,_egaf );if _fead !=nil {_cg .Log .Warning ("\u0027\u0062ox\u0027\u0020\u0064o\u0065\u0073\u006e\u0027t o\u0076er\u006c\u0061\u0070\u0020\u0062\u0069\u0074ma\u0070\u0020\u0027\u0062\u0027\u003a\u0020%\u0076",_fead );
return nil ,nil ;};_ddb ,_faec :=_bbag .Min .X ,_bbag .Min .Y ;_bec ,_feef :=_bbag .Max .X -_bbag .Min .X ,_bbag .Max .Y -_bbag .Min .Y ;_bee =New (_bec ,_feef );_bee .Text =_cfb .Text ;if _fead =_bee .RasterOperation (0,0,_bec ,_feef ,PixSrc ,_cfb ,_ddb ,_faec );
_fead !=nil {return nil ,_e .Wrap (_fead ,_cdaa ,"");};if _cbbf !=nil {*_cbbf =*_bbag ;};return _bee ,nil ;};func _cafde (_eade *Bitmap ,_gabeb ,_fdba ,_bcaf ,_becg int ,_gfec RasterOperator ,_bagb *Bitmap ,_afgf ,_gfbd int )error {var (_ggdf bool ;_agfdf bool ;
_dbefe int ;_bffd int ;_gbaag int ;_dacgc bool ;_adabf byte ;_faadg int ;_gcbag int ;_fbgb int ;_deag ,_bgegd int ;);_aecge :=8-(_gabeb &7);_cgbe :=_fgddg [_aecge ];_gccc :=_eade .RowStride *_fdba +(_gabeb >>3);_fbag :=_bagb .RowStride *_gfbd +(_afgf >>3);
if _bcaf < _aecge {_ggdf =true ;_cgbe &=_ggge [8-_aecge +_bcaf ];};if !_ggdf {_dbefe =(_bcaf -_aecge )>>3;if _dbefe > 0{_agfdf =true ;_bffd =_gccc +1;_gbaag =_fbag +1;};};_faadg =(_gabeb +_bcaf )&7;if !(_ggdf ||_faadg ==0){_dacgc =true ;_adabf =_ggge [_faadg ];
_gcbag =_gccc +1+_dbefe ;_fbgb =_fbag +1+_dbefe ;};switch _gfec {case PixSrc :for _deag =0;_deag < _becg ;_deag ++{_eade .Data [_gccc ]=_ffbgf (_eade .Data [_gccc ],_bagb .Data [_fbag ],_cgbe );_gccc +=_eade .RowStride ;_fbag +=_bagb .RowStride ;};if _agfdf {for _deag =0;
_deag < _becg ;_deag ++{for _bgegd =0;_bgegd < _dbefe ;_bgegd ++{_eade .Data [_bffd +_bgegd ]=_bagb .Data [_gbaag +_bgegd ];};_bffd +=_eade .RowStride ;_gbaag +=_bagb .RowStride ;};};if _dacgc {for _deag =0;_deag < _becg ;_deag ++{_eade .Data [_gcbag ]=_ffbgf (_eade .Data [_gcbag ],_bagb .Data [_fbgb ],_adabf );
_gcbag +=_eade .RowStride ;_fbgb +=_bagb .RowStride ;};};case PixNotSrc :for _deag =0;_deag < _becg ;_deag ++{_eade .Data [_gccc ]=_ffbgf (_eade .Data [_gccc ],^_bagb .Data [_fbag ],_cgbe );_gccc +=_eade .RowStride ;_fbag +=_bagb .RowStride ;};if _agfdf {for _deag =0;
_deag < _becg ;_deag ++{for _bgegd =0;_bgegd < _dbefe ;_bgegd ++{_eade .Data [_bffd +_bgegd ]=^_bagb .Data [_gbaag +_bgegd ];};_bffd +=_eade .RowStride ;_gbaag +=_bagb .RowStride ;};};if _dacgc {for _deag =0;_deag < _becg ;_deag ++{_eade .Data [_gcbag ]=_ffbgf (_eade .Data [_gcbag ],^_bagb .Data [_fbgb ],_adabf );
_gcbag +=_eade .RowStride ;_fbgb +=_bagb .RowStride ;};};case PixSrcOrDst :for _deag =0;_deag < _becg ;_deag ++{_eade .Data [_gccc ]=_ffbgf (_eade .Data [_gccc ],_bagb .Data [_fbag ]|_eade .Data [_gccc ],_cgbe );_gccc +=_eade .RowStride ;_fbag +=_bagb .RowStride ;
};if _agfdf {for _deag =0;_deag < _becg ;_deag ++{for _bgegd =0;_bgegd < _dbefe ;_bgegd ++{_eade .Data [_bffd +_bgegd ]|=_bagb .Data [_gbaag +_bgegd ];};_bffd +=_eade .RowStride ;_gbaag +=_bagb .RowStride ;};};if _dacgc {for _deag =0;_deag < _becg ;_deag ++{_eade .Data [_gcbag ]=_ffbgf (_eade .Data [_gcbag ],_bagb .Data [_fbgb ]|_eade .Data [_gcbag ],_adabf );
_gcbag +=_eade .RowStride ;_fbgb +=_bagb .RowStride ;};};case PixSrcAndDst :for _deag =0;_deag < _becg ;_deag ++{_eade .Data [_gccc ]=_ffbgf (_eade .Data [_gccc ],_bagb .Data [_fbag ]&_eade .Data [_gccc ],_cgbe );_gccc +=_eade .RowStride ;_fbag +=_bagb .RowStride ;
};if _agfdf {for _deag =0;_deag < _becg ;_deag ++{for _bgegd =0;_bgegd < _dbefe ;_bgegd ++{_eade .Data [_bffd +_bgegd ]&=_bagb .Data [_gbaag +_bgegd ];};_bffd +=_eade .RowStride ;_gbaag +=_bagb .RowStride ;};};if _dacgc {for _deag =0;_deag < _becg ;_deag ++{_eade .Data [_gcbag ]=_ffbgf (_eade .Data [_gcbag ],_bagb .Data [_fbgb ]&_eade .Data [_gcbag ],_adabf );
_gcbag +=_eade .RowStride ;_fbgb +=_bagb .RowStride ;};};case PixSrcXorDst :for _deag =0;_deag < _becg ;_deag ++{_eade .Data [_gccc ]=_ffbgf (_eade .Data [_gccc ],_bagb .Data [_fbag ]^_eade .Data [_gccc ],_cgbe );_gccc +=_eade .RowStride ;_fbag +=_bagb .RowStride ;
};if _agfdf {for _deag =0;_deag < _becg ;_deag ++{for _bgegd =0;_bgegd < _dbefe ;_bgegd ++{_eade .Data [_bffd +_bgegd ]^=_bagb .Data [_gbaag +_bgegd ];};_bffd +=_eade .RowStride ;_gbaag +=_bagb .RowStride ;};};if _dacgc {for _deag =0;_deag < _becg ;_deag ++{_eade .Data [_gcbag ]=_ffbgf (_eade .Data [_gcbag ],_bagb .Data [_fbgb ]^_eade .Data [_gcbag ],_adabf );
_gcbag +=_eade .RowStride ;_fbgb +=_bagb .RowStride ;};};case PixNotSrcOrDst :for _deag =0;_deag < _becg ;_deag ++{_eade .Data [_gccc ]=_ffbgf (_eade .Data [_gccc ],^(_bagb .Data [_fbag ])|_eade .Data [_gccc ],_cgbe );_gccc +=_eade .RowStride ;_fbag +=_bagb .RowStride ;
};if _agfdf {for _deag =0;_deag < _becg ;_deag ++{for _bgegd =0;_bgegd < _dbefe ;_bgegd ++{_eade .Data [_bffd +_bgegd ]|=^(_bagb .Data [_gbaag +_bgegd ]);};_bffd +=_eade .RowStride ;_gbaag +=_bagb .RowStride ;};};if _dacgc {for _deag =0;_deag < _becg ;
_deag ++{_eade .Data [_gcbag ]=_ffbgf (_eade .Data [_gcbag ],^(_bagb .Data [_fbgb ])|_eade .Data [_gcbag ],_adabf );_gcbag +=_eade .RowStride ;_fbgb +=_bagb .RowStride ;};};case PixNotSrcAndDst :for _deag =0;_deag < _becg ;_deag ++{_eade .Data [_gccc ]=_ffbgf (_eade .Data [_gccc ],^(_bagb .Data [_fbag ])&_eade .Data [_gccc ],_cgbe );
_gccc +=_eade .RowStride ;_fbag +=_bagb .RowStride ;};if _agfdf {for _deag =0;_deag < _becg ;_deag ++{for _bgegd =0;_bgegd < _dbefe ;_bgegd ++{_eade .Data [_bffd +_bgegd ]&=^_bagb .Data [_gbaag +_bgegd ];};_bffd +=_eade .RowStride ;_gbaag +=_bagb .RowStride ;
};};if _dacgc {for _deag =0;_deag < _becg ;_deag ++{_eade .Data [_gcbag ]=_ffbgf (_eade .Data [_gcbag ],^(_bagb .Data [_fbgb ])&_eade .Data [_gcbag ],_adabf );_gcbag +=_eade .RowStride ;_fbgb +=_bagb .RowStride ;};};case PixSrcOrNotDst :for _deag =0;_deag < _becg ;
_deag ++{_eade .Data [_gccc ]=_ffbgf (_eade .Data [_gccc ],_bagb .Data [_fbag ]|^(_eade .Data [_gccc ]),_cgbe );_gccc +=_eade .RowStride ;_fbag +=_bagb .RowStride ;};if _agfdf {for _deag =0;_deag < _becg ;_deag ++{for _bgegd =0;_bgegd < _dbefe ;_bgegd ++{_eade .Data [_bffd +_bgegd ]=_bagb .Data [_gbaag +_bgegd ]|^(_eade .Data [_bffd +_bgegd ]);
};_bffd +=_eade .RowStride ;_gbaag +=_bagb .RowStride ;};};if _dacgc {for _deag =0;_deag < _becg ;_deag ++{_eade .Data [_gcbag ]=_ffbgf (_eade .Data [_gcbag ],_bagb .Data [_fbgb ]|^(_eade .Data [_gcbag ]),_adabf );_gcbag +=_eade .RowStride ;_fbgb +=_bagb .RowStride ;
};};case PixSrcAndNotDst :for _deag =0;_deag < _becg ;_deag ++{_eade .Data [_gccc ]=_ffbgf (_eade .Data [_gccc ],_bagb .Data [_fbag ]&^(_eade .Data [_gccc ]),_cgbe );_gccc +=_eade .RowStride ;_fbag +=_bagb .RowStride ;};if _agfdf {for _deag =0;_deag < _becg ;
_deag ++{for _bgegd =0;_bgegd < _dbefe ;_bgegd ++{_eade .Data [_bffd +_bgegd ]=_bagb .Data [_gbaag +_bgegd ]&^(_eade .Data [_bffd +_bgegd ]);};_bffd +=_eade .RowStride ;_gbaag +=_bagb .RowStride ;};};if _dacgc {for _deag =0;_deag < _becg ;_deag ++{_eade .Data [_gcbag ]=_ffbgf (_eade .Data [_gcbag ],_bagb .Data [_fbgb ]&^(_eade .Data [_gcbag ]),_adabf );
_gcbag +=_eade .RowStride ;_fbgb +=_bagb .RowStride ;};};case PixNotPixSrcOrDst :for _deag =0;_deag < _becg ;_deag ++{_eade .Data [_gccc ]=_ffbgf (_eade .Data [_gccc ],^(_bagb .Data [_fbag ]|_eade .Data [_gccc ]),_cgbe );_gccc +=_eade .RowStride ;_fbag +=_bagb .RowStride ;
};if _agfdf {for _deag =0;_deag < _becg ;_deag ++{for _bgegd =0;_bgegd < _dbefe ;_bgegd ++{_eade .Data [_bffd +_bgegd ]=^(_bagb .Data [_gbaag +_bgegd ]|_eade .Data [_bffd +_bgegd ]);};_bffd +=_eade .RowStride ;_gbaag +=_bagb .RowStride ;};};if _dacgc {for _deag =0;
_deag < _becg ;_deag ++{_eade .Data [_gcbag ]=_ffbgf (_eade .Data [_gcbag ],^(_bagb .Data [_fbgb ]|_eade .Data [_gcbag ]),_adabf );_gcbag +=_eade .RowStride ;_fbgb +=_bagb .RowStride ;};};case PixNotPixSrcAndDst :for _deag =0;_deag < _becg ;_deag ++{_eade .Data [_gccc ]=_ffbgf (_eade .Data [_gccc ],^(_bagb .Data [_fbag ]&_eade .Data [_gccc ]),_cgbe );
_gccc +=_eade .RowStride ;_fbag +=_bagb .RowStride ;};if _agfdf {for _deag =0;_deag < _becg ;_deag ++{for _bgegd =0;_bgegd < _dbefe ;_bgegd ++{_eade .Data [_bffd +_bgegd ]=^(_bagb .Data [_gbaag +_bgegd ]&_eade .Data [_bffd +_bgegd ]);};_bffd +=_eade .RowStride ;
_gbaag +=_bagb .RowStride ;};};if _dacgc {for _deag =0;_deag < _becg ;_deag ++{_eade .Data [_gcbag ]=_ffbgf (_eade .Data [_gcbag ],^(_bagb .Data [_fbgb ]&_eade .Data [_gcbag ]),_adabf );_gcbag +=_eade .RowStride ;_fbgb +=_bagb .RowStride ;};};case PixNotPixSrcXorDst :for _deag =0;
_deag < _becg ;_deag ++{_eade .Data [_gccc ]=_ffbgf (_eade .Data [_gccc ],^(_bagb .Data [_fbag ]^_eade .Data [_gccc ]),_cgbe );_gccc +=_eade .RowStride ;_fbag +=_bagb .RowStride ;};if _agfdf {for _deag =0;_deag < _becg ;_deag ++{for _bgegd =0;_bgegd < _dbefe ;
_bgegd ++{_eade .Data [_bffd +_bgegd ]=^(_bagb .Data [_gbaag +_bgegd ]^_eade .Data [_bffd +_bgegd ]);};_bffd +=_eade .RowStride ;_gbaag +=_bagb .RowStride ;};};if _dacgc {for _deag =0;_deag < _becg ;_deag ++{_eade .Data [_gcbag ]=_ffbgf (_eade .Data [_gcbag ],^(_bagb .Data [_fbgb ]^_eade .Data [_gcbag ]),_adabf );
_gcbag +=_eade .RowStride ;_fbgb +=_bagb .RowStride ;};};default:_cg .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070e\u0072\u0061\u0074o\u0072:\u0020\u0025\u0064",_gfec );return _e .Error ("\u0072\u0061\u0073\u0074er\u004f\u0070\u0056\u0041\u006c\u0069\u0067\u006e\u0065\u0064\u004c\u006f\u0077","\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");
};return nil ;};func _gdgga (_gfea *Bitmap ,_fbbg ...MorphProcess )(_egda *Bitmap ,_feade error ){const _dfdde ="\u006d\u006f\u0072\u0070\u0068\u0053\u0065\u0071\u0075\u0065\u006e\u0063\u0065";if _gfea ==nil {return nil ,_e .Error (_dfdde ,"\u006d\u006f\u0072\u0070\u0068\u0053\u0065\u0071\u0075\u0065\u006e\u0063\u0065 \u0073\u006f\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};if len (_fbbg )==0{return nil ,_e .Error (_dfdde ,"m\u006f\u0072\u0070\u0068\u0053\u0065q\u0075\u0065\u006e\u0063\u0065\u002c \u0073\u0065\u0071\u0075\u0065\u006e\u0063e\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");};if _feade =_bbafa (_fbbg ...);
_feade !=nil {return nil ,_e .Wrap (_feade ,_dfdde ,"");};var _ffcg ,_fca ,_ffeed int ;_egda =_gfea .Copy ();for _ ,_cfab :=range _fbbg {switch _cfab .Operation {case MopDilation :_ffcg ,_fca =_cfab .getWidthHeight ();_egda ,_feade =DilateBrick (nil ,_egda ,_ffcg ,_fca );
if _feade !=nil {return nil ,_e .Wrap (_feade ,_dfdde ,"");};case MopErosion :_ffcg ,_fca =_cfab .getWidthHeight ();_egda ,_feade =_bgbc (nil ,_egda ,_ffcg ,_fca );if _feade !=nil {return nil ,_e .Wrap (_feade ,_dfdde ,"");};case MopOpening :_ffcg ,_fca =_cfab .getWidthHeight ();
_egda ,_feade =_eec (nil ,_egda ,_ffcg ,_fca );if _feade !=nil {return nil ,_e .Wrap (_feade ,_dfdde ,"");};case MopClosing :_ffcg ,_fca =_cfab .getWidthHeight ();_egda ,_feade =_gcacc (nil ,_egda ,_ffcg ,_fca );if _feade !=nil {return nil ,_e .Wrap (_feade ,_dfdde ,"");
};case MopRankBinaryReduction :_egda ,_feade =_fgg (_egda ,_cfab .Arguments ...);if _feade !=nil {return nil ,_e .Wrap (_feade ,_dfdde ,"");};case MopReplicativeBinaryExpansion :_egda ,_feade =_efece (_egda ,_cfab .Arguments [0]);if _feade !=nil {return nil ,_e .Wrap (_feade ,_dfdde ,"");
};case MopAddBorder :_ffeed =_cfab .Arguments [0];_egda ,_feade =_egda .AddBorder (_ffeed ,0);if _feade !=nil {return nil ,_e .Wrap (_feade ,_dfdde ,"");};default:return nil ,_e .Error (_dfdde ,"i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006d\u006fr\u0070\u0068\u004f\u0070\u0065\u0072\u0061ti\u006f\u006e\u0020\u0070r\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0074\u006f t\u0068\u0065 \u0073\u0065\u0071\u0075\u0065\u006e\u0063\u0065");
};};if _ffeed > 0{_egda ,_feade =_egda .RemoveBorder (_ffeed );if _feade !=nil {return nil ,_e .Wrap (_feade ,_dfdde ,"\u0062\u006f\u0072\u0064\u0065\u0072\u0020\u003e\u0020\u0030");};};return _egda ,nil ;};func (_bbd *Bitmap )AddBorder (borderSize ,val int )(*Bitmap ,error ){if borderSize ==0{return _bbd .Copy (),nil ;
};_eabf ,_bae :=_bbd .addBorderGeneral (borderSize ,borderSize ,borderSize ,borderSize ,val );if _bae !=nil {return nil ,_e .Wrap (_bae ,"\u0041d\u0064\u0042\u006f\u0072\u0064\u0065r","");};return _eabf ,nil ;};func _gaeg (_adcca *Bitmap ,_deaec *Bitmap ,_ccaf int )(_aefc error ){const _gcda ="\u0073\u0065\u0065\u0064\u0066\u0069\u006c\u006c\u0042\u0069\u006e\u0061r\u0079\u004c\u006f\u0077";
_gdge :=_ccfc (_adcca .Height ,_deaec .Height );_cdga :=_ccfc (_adcca .RowStride ,_deaec .RowStride );switch _ccaf {case 4:_aefc =_agff (_adcca ,_deaec ,_gdge ,_cdga );case 8:_aefc =_bfadf (_adcca ,_deaec ,_gdge ,_cdga );default:return _e .Errorf (_gcda ,"\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0034\u0020\u006fr\u0020\u0038\u0020\u002d\u0020i\u0073\u003a \u0027\u0025\u0064\u0027",_ccaf );
};if _aefc !=nil {return _e .Wrap (_aefc ,_gcda ,"");};return nil ;};func (_fcab Points )XSorter ()func (_bbea ,_ggag int )bool {return func (_eafb ,_dceed int )bool {return _fcab [_eafb ].X < _fcab [_dceed ].X };};func _bfadf (_debb ,_caec *Bitmap ,_dcbc ,_ggec int )(_eadf error ){const _dgbc ="\u0073e\u0065d\u0066\u0069\u006c\u006c\u0042i\u006e\u0061r\u0079\u004c\u006f\u0077\u0038";
var (_dfadd ,_dddd ,_ddde ,_bade int ;_ffa ,_dfda ,_afcg ,_ccca ,_dcbaa ,_aage ,_eacd ,_cecg byte ;);for _dfadd =0;_dfadd < _dcbc ;_dfadd ++{_ddde =_dfadd *_debb .RowStride ;_bade =_dfadd *_caec .RowStride ;for _dddd =0;_dddd < _ggec ;_dddd ++{if _ffa ,_eadf =_debb .GetByte (_ddde +_dddd );
_eadf !=nil {return _e .Wrap (_eadf ,_dgbc ,"\u0067e\u0074 \u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");};if _dfda ,_eadf =_caec .GetByte (_bade +_dddd );_eadf !=nil {return _e .Wrap (_eadf ,_dgbc ,"\u0067\u0065\u0074\u0020\u006d\u0061\u0073\u006b\u0020\u0062\u0079\u0074\u0065");
};if _dfadd > 0{if _afcg ,_eadf =_debb .GetByte (_ddde -_debb .RowStride +_dddd );_eadf !=nil {return _e .Wrap (_eadf ,_dgbc ,"\u0069\u0020\u003e\u0020\u0030\u0020\u0062\u0079\u0074\u0065");};_ffa |=_afcg |(_afcg <<1)|(_afcg >>1);if _dddd > 0{if _cecg ,_eadf =_debb .GetByte (_ddde -_debb .RowStride +_dddd -1);
_eadf !=nil {return _e .Wrap (_eadf ,_dgbc ,"\u0069\u0020\u003e\u00200 \u0026\u0026\u0020\u006a\u0020\u003e\u0020\u0030\u0020\u0062\u0079\u0074\u0065");};_ffa |=_cecg <<7;};if _dddd < _ggec -1{if _cecg ,_eadf =_debb .GetByte (_ddde -_debb .RowStride +_dddd +1);
_eadf !=nil {return _e .Wrap (_eadf ,_dgbc ,"\u006a\u0020<\u0020\u0077\u0070l\u0020\u002d\u0020\u0031\u0020\u0062\u0079\u0074\u0065");};_ffa |=_cecg >>7;};};if _dddd > 0{if _ccca ,_eadf =_debb .GetByte (_ddde +_dddd -1);_eadf !=nil {return _e .Wrap (_eadf ,_dgbc ,"\u006a\u0020\u003e \u0030");
};_ffa |=_ccca <<7;};_ffa &=_dfda ;if _ffa ==0||^_ffa ==0{if _eadf =_debb .SetByte (_ddde +_dddd ,_ffa );_eadf !=nil {return _e .Wrap (_eadf ,_dgbc ,"\u0073e\u0074t\u0069\u006e\u0067\u0020\u0065m\u0070\u0074y\u0020\u0062\u0079\u0074\u0065");};};for {_eacd =_ffa ;
_ffa =(_ffa |(_ffa >>1)|(_ffa <<1))&_dfda ;if (_ffa ^_eacd )==0{if _eadf =_debb .SetByte (_ddde +_dddd ,_ffa );_eadf !=nil {return _e .Wrap (_eadf ,_dgbc ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0070\u0072\u0065\u0076 \u0062\u0079\u0074\u0065");
};break ;};};};};for _dfadd =_dcbc -1;_dfadd >=0;_dfadd --{_ddde =_dfadd *_debb .RowStride ;_bade =_dfadd *_caec .RowStride ;for _dddd =_ggec -1;_dddd >=0;_dddd --{if _ffa ,_eadf =_debb .GetByte (_ddde +_dddd );_eadf !=nil {return _e .Wrap (_eadf ,_dgbc ,"\u0072\u0065\u0076er\u0073\u0065\u0020\u0067\u0065\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");
};if _dfda ,_eadf =_caec .GetByte (_bade +_dddd );_eadf !=nil {return _e .Wrap (_eadf ,_dgbc ,"r\u0065\u0076\u0065\u0072se\u0020g\u0065\u0074\u0020\u006d\u0061s\u006b\u0020\u0062\u0079\u0074\u0065");};if _dfadd < _dcbc -1{if _dcbaa ,_eadf =_debb .GetByte (_ddde +_debb .RowStride +_dddd );
_eadf !=nil {return _e .Wrap (_eadf ,_dgbc ,"\u0069\u0020\u003c\u0020h\u0020\u002d\u0020\u0031\u0020\u002d\u003e\u0020\u0067\u0065t\u0020s\u006f\u0075\u0072\u0063\u0065\u0020\u0062y\u0074\u0065");};_ffa |=_dcbaa |(_dcbaa <<1)|_dcbaa >>1;if _dddd > 0{if _cecg ,_eadf =_debb .GetByte (_ddde +_debb .RowStride +_dddd -1);
_eadf !=nil {return _e .Wrap (_eadf ,_dgbc ,"\u0069\u0020\u003c h\u002d\u0031\u0020\u0026\u0020\u006a\u0020\u003e\u00200\u0020-\u003e \u0067e\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");};_ffa |=_cecg <<7;};if _dddd < _ggec -1{if _cecg ,_eadf =_debb .GetByte (_ddde +_debb .RowStride +_dddd +1);
_eadf !=nil {return _e .Wrap (_eadf ,_dgbc ,"\u0069\u0020\u003c\u0020\u0068\u002d\u0031\u0020\u0026\u0026\u0020\u006a\u0020\u003c\u0077\u0070\u006c\u002d\u0031\u0020\u002d\u003e\u0020\u0067e\u0074\u0020\u0073\u006f\u0075r\u0063\u0065 \u0062\u0079\u0074\u0065");
};_ffa |=_cecg >>7;};};if _dddd < _ggec -1{if _aage ,_eadf =_debb .GetByte (_ddde +_dddd +1);_eadf !=nil {return _e .Wrap (_eadf ,_dgbc ,"\u006a\u0020<\u0020\u0077\u0070\u006c\u0020\u002d\u0031\u0020\u002d\u003e\u0020\u0067\u0065\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020by\u0074\u0065");
};_ffa |=_aage >>7;};_ffa &=_dfda ;if _ffa ==0||(^_ffa )==0{if _eadf =_debb .SetByte (_ddde +_dddd ,_ffa );_eadf !=nil {return _e .Wrap (_eadf ,_dgbc ,"\u0073e\u0074 \u006d\u0061\u0073\u006b\u0065\u0064\u0020\u0062\u0079\u0074\u0065");};};for {_eacd =_ffa ;
_ffa =(_ffa |(_ffa >>1)|(_ffa <<1))&_dfda ;if (_ffa ^_eacd )==0{if _eadf =_debb .SetByte (_ddde +_dddd ,_ffa );_eadf !=nil {return _e .Wrap (_eadf ,_dgbc ,"r\u0065\u0076\u0065\u0072se\u0020s\u0065\u0074\u0020\u0070\u0072e\u0076\u0020\u0062\u0079\u0074\u0065");
};break ;};};};};return nil ;};func (_aafd *Bitmap )setPadBits (_dbef int ){_dagd :=8-_aafd .Width %8;if _dagd ==8{return ;};_bbb :=_aafd .Width /8;_adaa :=_fgddg [_dagd ];if _dbef ==0{_adaa ^=_adaa ;};var _bgd int ;for _gddf :=0;_gddf < _aafd .Height ;
_gddf ++{_bgd =_gddf *_aafd .RowStride +_bbb ;if _dbef ==0{_aafd .Data [_bgd ]&=_adaa ;}else {_aafd .Data [_bgd ]|=_adaa ;};};};func _fccb (_bcb ,_edf *Bitmap ,_fgfc ,_eadca ,_bbbg ,_gcdb ,_eaba ,_bfcb ,_gfafa ,_fcffc int ,_ffdef CombinationOperator )error {var _cafg int ;
_cgg :=func (){_cafg ++;_bbbg +=_edf .RowStride ;_gcdb +=_bcb .RowStride ;_eaba +=_bcb .RowStride };for _cafg =_fgfc ;_cafg < _eadca ;_cgg (){var _cbfa uint16 ;_eag :=_bbbg ;for _egga :=_gcdb ;_egga <=_eaba ;_egga ++{_ecfe ,_abfe :=_edf .GetByte (_eag );
if _abfe !=nil {return _abfe ;};_ggbc ,_abfe :=_bcb .GetByte (_egga );if _abfe !=nil {return _abfe ;};_cbfa =(_cbfa |uint16 (_ggbc ))<<uint (_fcffc );_ggbc =byte (_cbfa >>8);if _egga ==_eaba {_ggbc =_dcea (uint (_bfcb ),_ggbc );};if _abfe =_edf .SetByte (_eag ,_baga (_ecfe ,_ggbc ,_ffdef ));
_abfe !=nil {return _abfe ;};_eag ++;_cbfa <<=uint (_gfafa );};};return nil ;};func (_gebce *Points )AddPoint (x ,y float32 ){*_gebce =append (*_gebce ,Point {x ,y })};func (_dbf *Bitmap )setBit (_aded int ){_dbf .Data [(_aded >>3)]|=0x80>>uint (_aded &7)};
func CorrelationScoreThresholded (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab ,downcount []int ,scoreThreshold float32 )(bool ,error ){const _gef ="C\u006f\u0072\u0072\u0065\u006c\u0061t\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054h\u0072\u0065\u0073h\u006fl\u0064\u0065\u0064";
if bm1 ==nil {return false ,_e .Error (_gef ,"\u0063\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u0062\u006d1\u0020\u0069s\u0020\u006e\u0069\u006c");
};if bm2 ==nil {return false ,_e .Error (_gef ,"\u0063\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u0062\u006d2\u0020\u0069s\u0020\u006e\u0069\u006c");
};if area1 <=0||area2 <=0{return false ,_e .Error (_gef ,"c\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006fn\u0053\u0063\u006f\u0072\u0065\u0054\u0068re\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u002d\u0020\u0061\u0072\u0065\u0061s \u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u003e\u0020\u0030");
};if downcount ==nil {return false ,_e .Error (_gef ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u006f\u0020\u0027\u0064\u006f\u0077\u006e\u0063\u006f\u0075\u006e\u0074\u0027");};if tab ==nil {return false ,_e .Error (_gef ,"p\u0072\u006f\u0076\u0069de\u0064 \u006e\u0069\u006c\u0020\u0027s\u0075\u006d\u0074\u0061\u0062\u0027");
};_gecag ,_fefa :=bm1 .Width ,bm1 .Height ;_aagg ,_dfc :=bm2 .Width ,bm2 .Height ;if _d .Abs (_gecag -_aagg )> maxDiffW {return false ,nil ;};if _d .Abs (_fefa -_dfc )> maxDiffH {return false ,nil ;};_cacgd :=int (delX +_d .Sign (delX )*0.5);_cgac :=int (delY +_d .Sign (delY )*0.5);
_fdbb :=int (_cd .Ceil (_cd .Sqrt (float64 (scoreThreshold )*float64 (area1 )*float64 (area2 ))));_ebfa :=bm2 .RowStride ;_gfcc :=_bad (_cgac ,0);_egdb :=_ccfc (_dfc +_cgac ,_fefa );_efgg :=bm1 .RowStride *_gfcc ;_bffe :=bm2 .RowStride *(_gfcc -_cgac );
var _dfcf int ;if _egdb <=_fefa {_dfcf =downcount [_egdb -1];};_ceac :=_bad (_cacgd ,0);_eggdb :=_ccfc (_aagg +_cacgd ,_gecag );var _fad ,_ddbd int ;if _cacgd >=8{_fad =_cacgd >>3;_efgg +=_fad ;_ceac -=_fad <<3;_eggdb -=_fad <<3;_cacgd &=7;}else if _cacgd <=-8{_ddbd =-((_cacgd +7)>>3);
_bffe +=_ddbd ;_ebfa -=_ddbd ;_cacgd +=_ddbd <<3;};var (_bcbf ,_acf ,_afed int ;_ebff ,_gfca ,_abfc byte ;);if _ceac >=_eggdb ||_gfcc >=_egdb {return false ,nil ;};_bdce :=(_eggdb +7)>>3;switch {case _cacgd ==0:for _acf =_gfcc ;_acf < _egdb ;_acf ,_efgg ,_bffe =_acf +1,_efgg +bm1 .RowStride ,_bffe +bm2 .RowStride {for _afed =0;
_afed < _bdce ;_afed ++{_ebff =bm1 .Data [_efgg +_afed ]&bm2 .Data [_bffe +_afed ];_bcbf +=tab [_ebff ];};if _bcbf >=_fdbb {return true ,nil ;};if _bfdcc :=_bcbf +downcount [_acf ]-_dfcf ;_bfdcc < _fdbb {return false ,nil ;};};case _cacgd > 0&&_ebfa < _bdce :for _acf =_gfcc ;
_acf < _egdb ;_acf ,_efgg ,_bffe =_acf +1,_efgg +bm1 .RowStride ,_bffe +bm2 .RowStride {_gfca =bm1 .Data [_efgg ];_abfc =bm2 .Data [_bffe ]>>uint (_cacgd );_ebff =_gfca &_abfc ;_bcbf +=tab [_ebff ];for _afed =1;_afed < _ebfa ;_afed ++{_gfca =bm1 .Data [_efgg +_afed ];
_abfc =bm2 .Data [_bffe +_afed ]>>uint (_cacgd )|bm2 .Data [_bffe +_afed -1]<<uint (8-_cacgd );_ebff =_gfca &_abfc ;_bcbf +=tab [_ebff ];};_gfca =bm1 .Data [_efgg +_afed ];_abfc =bm2 .Data [_bffe +_afed -1]<<uint (8-_cacgd );_ebff =_gfca &_abfc ;_bcbf +=tab [_ebff ];
if _bcbf >=_fdbb {return true ,nil ;}else if _bcbf +downcount [_acf ]-_dfcf < _fdbb {return false ,nil ;};};case _cacgd > 0&&_ebfa >=_bdce :for _acf =_gfcc ;_acf < _egdb ;_acf ,_efgg ,_bffe =_acf +1,_efgg +bm1 .RowStride ,_bffe +bm2 .RowStride {_gfca =bm1 .Data [_efgg ];
_abfc =bm2 .Data [_bffe ]>>uint (_cacgd );_ebff =_gfca &_abfc ;_bcbf +=tab [_ebff ];for _afed =1;_afed < _bdce ;_afed ++{_gfca =bm1 .Data [_efgg +_afed ];_abfc =bm2 .Data [_bffe +_afed ]>>uint (_cacgd );_abfc |=bm2 .Data [_bffe +_afed -1]<<uint (8-_cacgd );
_ebff =_gfca &_abfc ;_bcbf +=tab [_ebff ];};if _bcbf >=_fdbb {return true ,nil ;}else if _bcbf +downcount [_acf ]-_dfcf < _fdbb {return false ,nil ;};};case _bdce < _ebfa :for _acf =_gfcc ;_acf < _egdb ;_acf ,_efgg ,_bffe =_acf +1,_efgg +bm1 .RowStride ,_bffe +bm2 .RowStride {for _afed =0;
_afed < _bdce ;_afed ++{_gfca =bm1 .Data [_efgg +_afed ];_abfc =bm2 .Data [_bffe +_afed ]<<uint (-_cacgd );_abfc |=bm2 .Data [_bffe +_afed +1]>>uint (8+_cacgd );_ebff =_gfca &_abfc ;_bcbf +=tab [_ebff ];};if _bcbf >=_fdbb {return true ,nil ;}else if _effc :=_bcbf +downcount [_acf ]-_dfcf ;
_effc < _fdbb {return false ,nil ;};};case _ebfa >=_bdce :for _acf =_gfcc ;_acf < _egdb ;_acf ,_efgg ,_bffe =_acf +1,_efgg +bm1 .RowStride ,_bffe +bm2 .RowStride {for _afed =0;_afed < _bdce ;_afed ++{_gfca =bm1 .Data [_efgg +_afed ];_abfc =bm2 .Data [_bffe +_afed ]<<uint (-_cacgd );
_abfc |=bm2 .Data [_bffe +_afed +1]>>uint (8+_cacgd );_ebff =_gfca &_abfc ;_bcbf +=tab [_ebff ];};_gfca =bm1 .Data [_efgg +_afed ];_abfc =bm2 .Data [_bffe +_afed ]<<uint (-_cacgd );_ebff =_gfca &_abfc ;_bcbf +=tab [_ebff ];if _bcbf >=_fdbb {return true ,nil ;
}else if _bcbf +downcount [_acf ]-_dfcf < _fdbb {return false ,nil ;};};};_fdgb :=float32 (_bcbf )*float32 (_bcbf )/(float32 (area1 )*float32 (area2 ));if _fdgb >=scoreThreshold {_cg .Log .Trace ("\u0063\u006f\u0075\u006e\u0074\u003a\u0020\u0025\u0064\u0020\u003c\u0020\u0074\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0020\u0025\u0064\u0020\u0062\u0075\u0074\u0020\u0073c\u006f\u0072\u0065\u0020\u0025\u0066\u0020\u003e\u003d\u0020\u0073\u0063\u006fr\u0065\u0054\u0068\u0072\u0065\u0073h\u006f\u006c\u0064 \u0025\u0066",_bcbf ,_fdbb ,_fdgb ,scoreThreshold );
};return false ,nil ;};func MorphSequence (src *Bitmap ,sequence ...MorphProcess )(*Bitmap ,error ){return _gdgga (src ,sequence ...);};func (_bbab *Boxes )SelectBySize (width ,height int ,tp LocationFilter ,relation SizeComparison )(_ffb *Boxes ,_babb error ){const _egb ="\u0042o\u0078e\u0073\u002e\u0053\u0065\u006ce\u0063\u0074B\u0079\u0053\u0069\u007a\u0065";
if _bbab ==nil {return nil ,_e .Error (_egb ,"b\u006f\u0078\u0065\u0073 '\u0062'\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064");};if len (*_bbab )==0{return _bbab ,nil ;};switch tp {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_e .Errorf (_egb ,"\u0069\u006e\u0076al\u0069\u0064\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",tp );
};switch relation {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE :default:return nil ,_e .Errorf (_egb ,"i\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0020t\u0079\u0070\u0065:\u0020'\u0025\u0064\u0027",tp );
};_dgfb :=_bbab .makeSizeIndicator (width ,height ,tp ,relation );_cdbg ,_babb :=_bbab .selectWithIndicator (_dgfb );if _babb !=nil {return nil ,_e .Wrap (_babb ,_egb ,"");};return _cdbg ,nil ;};func (_gbdg *Bitmap )RemoveBorderGeneral (left ,right ,top ,bot int )(*Bitmap ,error ){return _gbdg .removeBorderGeneral (left ,right ,top ,bot );
};func (_bedge *Bitmaps )Size ()int {return len (_bedge .Values )};const _cecf =5000;func HausTest (p1 ,p2 ,p3 ,p4 *Bitmap ,delX ,delY float32 ,maxDiffW ,maxDiffH int )(bool ,error ){const _abdg ="\u0048\u0061\u0075\u0073\u0054\u0065\u0073\u0074";_acba ,_caad :=p1 .Width ,p1 .Height ;
_fage ,_dabg :=p3 .Width ,p3 .Height ;if _d .Abs (_acba -_fage )> maxDiffW {return false ,nil ;};if _d .Abs (_caad -_dabg )> maxDiffH {return false ,nil ;};_egcc :=int (delX +_d .Sign (delX )*0.5);_cee :=int (delY +_d .Sign (delY )*0.5);var _baea error ;
_afee :=p1 .CreateTemplate ();if _baea =_afee .RasterOperation (0,0,_acba ,_caad ,PixSrc ,p1 ,0,0);_baea !=nil {return false ,_e .Wrap (_baea ,_abdg ,"p\u0031\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _baea =_afee .RasterOperation (_egcc ,_cee ,_acba ,_caad ,PixNotSrcAndDst ,p4 ,0,0);
_baea !=nil {return false ,_e .Wrap (_baea ,_abdg ,"\u0021p\u0034\u0020\u0026\u0020\u0074");};if _afee .Zero (){return false ,nil ;};if _baea =_afee .RasterOperation (_egcc ,_cee ,_fage ,_dabg ,PixSrc ,p3 ,0,0);_baea !=nil {return false ,_e .Wrap (_baea ,_abdg ,"p\u0033\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");
};if _baea =_afee .RasterOperation (0,0,_fage ,_dabg ,PixNotSrcAndDst ,p2 ,0,0);_baea !=nil {return false ,_e .Wrap (_baea ,_abdg ,"\u0021p\u0032\u0020\u0026\u0020\u0074");};return _afee .Zero (),nil ;};type BitmapsArray struct{Values []*Bitmaps ;Boxes []*_ca .Rectangle ;
};func TstWordBitmap (t *_c .T ,scale ...int )*Bitmap {_gbdab :=1;if len (scale )> 0{_gbdab =scale [0];};_cdeg :=3;_eeed :=9+7+15+2*_cdeg ;_gaec :=5+_cdeg +5;_egdbf :=New (_eeed *_gbdab ,_gaec *_gbdab );_ebcec :=&Bitmaps {};var _fdffc *int ;_cdeg *=_gbdab ;
_ddfa :=0;_fdffc =&_ddfa ;_eceab :=0;_gega :=TstDSymbol (t ,scale ...);TstAddSymbol (t ,_ebcec ,_gega ,_fdffc ,_eceab ,1*_gbdab );_gega =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_ebcec ,_gega ,_fdffc ,_eceab ,_cdeg );_gega =TstISymbol (t ,scale ...);
TstAddSymbol (t ,_ebcec ,_gega ,_fdffc ,_eceab ,1*_gbdab );_gega =TstTSymbol (t ,scale ...);TstAddSymbol (t ,_ebcec ,_gega ,_fdffc ,_eceab ,_cdeg );_gega =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_ebcec ,_gega ,_fdffc ,_eceab ,1*_gbdab );_gega =TstOSymbol (t ,scale ...);
TstAddSymbol (t ,_ebcec ,_gega ,_fdffc ,_eceab ,1*_gbdab );_gega =TstWSymbol (t ,scale ...);TstAddSymbol (t ,_ebcec ,_gega ,_fdffc ,_eceab ,0);*_fdffc =0;_eceab =5*_gbdab +_cdeg ;_gega =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_ebcec ,_gega ,_fdffc ,_eceab ,1*_gbdab );
_gega =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_ebcec ,_gega ,_fdffc ,_eceab ,_cdeg );_gega =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_ebcec ,_gega ,_fdffc ,_eceab ,1*_gbdab );_gega =TstESymbol (t ,scale ...);TstAddSymbol (t ,_ebcec ,_gega ,_fdffc ,_eceab ,1*_gbdab );
_gega =TstVSymbol (t ,scale ...);TstAddSymbol (t ,_ebcec ,_gega ,_fdffc ,_eceab ,1*_gbdab );_gega =TstESymbol (t ,scale ...);TstAddSymbol (t ,_ebcec ,_gega ,_fdffc ,_eceab ,1*_gbdab );_gega =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_ebcec ,_gega ,_fdffc ,_eceab ,0);
TstWriteSymbols (t ,_ebcec ,_egdbf );return _egdbf ;};const (Vanilla Color =iota ;Chocolate ;);func _agef (_geed *Bitmap ,_fadd ,_aeec ,_aedb ,_eccba int ,_aaab RasterOperator ){if _fadd < 0{_aedb +=_fadd ;_fadd =0;};_eged :=_fadd +_aedb -_geed .Width ;
if _eged > 0{_aedb -=_eged ;};if _aeec < 0{_eccba +=_aeec ;_aeec =0;};_cebga :=_aeec +_eccba -_geed .Height ;if _cebga > 0{_eccba -=_cebga ;};if _aedb <=0||_eccba <=0{return ;};if (_fadd &7)==0{_dcff (_geed ,_fadd ,_aeec ,_aedb ,_eccba ,_aaab );}else {_gfdd (_geed ,_fadd ,_aeec ,_aedb ,_eccba ,_aaab );
};};func TstWriteSymbols (t *_c .T ,bms *Bitmaps ,src *Bitmap ){for _dbaab :=0;_dbaab < bms .Size ();_dbaab ++{_faef :=bms .Values [_dbaab ];_cfeaa :=bms .Boxes [_dbaab ];_cgcdd :=src .RasterOperation (_cfeaa .Min .X ,_cfeaa .Min .Y ,_faef .Width ,_faef .Height ,PixSrc ,_faef ,0,0);
_ea .NoError (t ,_cgcdd );};};func (_baed *ClassedPoints )GroupByY ()([]*ClassedPoints ,error ){const _bgcc ="\u0043\u006c\u0061\u0073se\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0072\u006f\u0075\u0070\u0042y\u0059";if _aabad :=_baed .validateIntSlice ();
_aabad !=nil {return nil ,_e .Wrap (_aabad ,_bgcc ,"");};if _baed .IntSlice .Size ()==0{return nil ,_e .Error (_bgcc ,"\u004e\u006f\u0020\u0063la\u0073\u0073\u0065\u0073\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064");};_baed .SortByY ();var (_acgbc []*ClassedPoints ;
_fefc int ;);_dfedde :=-1;var _egad *ClassedPoints ;for _ddacg :=0;_ddacg < len (_baed .IntSlice );_ddacg ++{_fefc =int (_baed .YAtIndex (_ddacg ));if _fefc !=_dfedde {_egad =&ClassedPoints {Points :_baed .Points };_dfedde =_fefc ;_acgbc =append (_acgbc ,_egad );
};_egad .IntSlice =append (_egad .IntSlice ,_baed .IntSlice [_ddacg ]);};for _ ,_bdef :=range _acgbc {_bdef .SortByX ();};return _acgbc ,nil ;};type Getter interface{GetBitmap ()*Bitmap ;};func (_bdebe *Bitmap )RasterOperation (dx ,dy ,dw ,dh int ,op RasterOperator ,src *Bitmap ,sx ,sy int )error {return _agdc (_bdebe ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );
};func _ggfd (_cbeae ,_dcafc int ,_ecea string )*Selection {_aeae :=&Selection {Height :_cbeae ,Width :_dcafc ,Name :_ecea };_aeae .Data =make ([][]SelectionValue ,_cbeae );for _bace :=0;_bace < _cbeae ;_bace ++{_aeae .Data [_bace ]=make ([]SelectionValue ,_dcafc );
};return _aeae ;};func (_cdcee *ClassedPoints )Len ()int {return _cdcee .IntSlice .Size ()};func (_cdcc *Bitmap )removeBorderGeneral (_bbafc ,_caff ,_adbb ,_fabe int )(*Bitmap ,error ){const _dgea ="\u0072\u0065\u006d\u006fve\u0042\u006f\u0072\u0064\u0065\u0072\u0047\u0065\u006e\u0065\u0072\u0061\u006c";
if _bbafc < 0||_caff < 0||_adbb < 0||_fabe < 0{return nil ,_e .Error (_dgea ,"\u006e\u0065g\u0061\u0074\u0069\u0076\u0065\u0020\u0062\u0072\u006f\u0064\u0065\u0072\u0020\u0072\u0065\u006d\u006f\u0076\u0065\u0020\u0076\u0061lu\u0065\u0073");};_eac ,_afac :=_cdcc .Width ,_cdcc .Height ;
_fbg :=_eac -_bbafc -_caff ;_efg :=_afac -_adbb -_fabe ;if _fbg <=0{return nil ,_e .Errorf (_dgea ,"w\u0069\u0064\u0074\u0068: \u0025d\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u003e\u0020\u0030",_fbg );};if _efg <=0{return nil ,_e .Errorf (_dgea ,"\u0068\u0065\u0069\u0067ht\u003a\u0020\u0025\u0064\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u003e \u0030",_efg );
};_adf :=New (_fbg ,_efg );_adf .Color =_cdcc .Color ;_dfaa :=_adf .RasterOperation (0,0,_fbg ,_efg ,PixSrc ,_cdcc ,_bbafc ,_adbb );if _dfaa !=nil {return nil ,_e .Wrap (_dfaa ,_dgea ,"");};return _adf ,nil ;};func (_aada *Boxes )Get (i int )(*_ca .Rectangle ,error ){const _gfgd ="\u0042o\u0078\u0065\u0073\u002e\u0047\u0065t";
if _aada ==nil {return nil ,_e .Error (_gfgd ,"\u0027\u0042\u006f\u0078es\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if i > len (*_aada )-1{return nil ,_e .Errorf (_gfgd ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return (*_aada )[i ],nil ;};const (_eddd shift =iota ;_dgca ;);func _dcfb (_ffc *Bitmap )(_bebd *Bitmap ,_bafa int ,_babba error ){const _gdag ="\u0042i\u0074\u006d\u0061\u0070.\u0077\u006f\u0072\u0064\u004da\u0073k\u0042y\u0044\u0069\u006c\u0061\u0074\u0069\u006fn";
if _ffc ==nil {return nil ,0,_e .Errorf (_gdag ,"\u0027\u0073\u0027\u0020bi\u0074\u006d\u0061\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");};var _aae ,_eeae *Bitmap ;if _aae ,_babba =_ebg (nil ,_ffc );_babba !=nil {return nil ,0,_e .Wrap (_babba ,_gdag ,"\u0063\u006f\u0070\u0079\u0020\u0027\u0073\u0027");
};var (_ddaa [13]int ;_gbfc ,_ddcd int ;);_cbfb :=12;_gaca :=_d .NewNumSlice (_cbfb +1);_dee :=_d .NewNumSlice (_cbfb +1);var _gbaad *Boxes ;for _bagag :=0;_bagag <=_cbfb ;_bagag ++{if _bagag ==0{if _eeae ,_babba =_ebg (nil ,_aae );_babba !=nil {return nil ,0,_e .Wrap (_babba ,_gdag ,"\u0066i\u0072\u0073\u0074\u0020\u0062\u006d2");
};}else {if _eeae ,_babba =_gdgga (_aae ,MorphProcess {Operation :MopDilation ,Arguments :[]int {2,1}});_babba !=nil {return nil ,0,_e .Wrap (_babba ,_gdag ,"\u0064\u0069\u006ca\u0074\u0069\u006f\u006e\u0020\u0062\u006d\u0032");};};if _gbaad ,_babba =_eeae .connComponentsBB (4);
_babba !=nil {return nil ,0,_e .Wrap (_babba ,_gdag ,"");};_ddaa [_bagag ]=len (*_gbaad );_gaca .AddInt (_ddaa [_bagag ]);switch _bagag {case 0:_gbfc =_ddaa [0];default:_ddcd =_ddaa [_bagag -1]-_ddaa [_bagag ];_dee .AddInt (_ddcd );};_aae =_eeae ;};_ebab :=true ;
_fef :=2;var _cabb ,_bbaba int ;for _aag :=1;_aag < len (*_dee );_aag ++{if _cabb ,_babba =_gaca .GetInt (_aag );_babba !=nil {return nil ,0,_e .Wrap (_babba ,_gdag ,"\u0043\u0068\u0065\u0063ki\u006e\u0067\u0020\u0062\u0065\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0069o\u006e");
};if _ebab &&_cabb < int (0.3*float32 (_gbfc )){_fef =_aag +1;_ebab =false ;};if _ddcd ,_babba =_dee .GetInt (_aag );_babba !=nil {return nil ,0,_e .Wrap (_babba ,_gdag ,"\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006ea\u0044\u0069\u0066\u0066");
};if _ddcd > _bbaba {_bbaba =_ddcd ;};};_defa :=_ffc .XResolution ;if _defa ==0{_defa =150;};if _defa > 110{_fef ++;};if _fef < 2{_cg .Log .Trace ("J\u0042\u0049\u0047\u0032\u0020\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0069\u0042\u0065\u0073\u0074 \u0074\u006f\u0020\u006d\u0069\u006e\u0069\u006d\u0075\u006d a\u006c\u006c\u006fw\u0061b\u006c\u0065");
_fef =2;};_bafa =_fef +1;if _bebd ,_babba =_abaf (nil ,_ffc ,_fef +1,1);_babba !=nil {return nil ,0,_e .Wrap (_babba ,_gdag ,"\u0067\u0065\u0074\u0074in\u0067\u0020\u006d\u0061\u0073\u006b\u0020\u0066\u0061\u0069\u006c\u0065\u0064");};return _bebd ,_bafa ,nil ;
};func _ebg (_geeg ,_bgde *Bitmap )(*Bitmap ,error ){if _bgde ==nil {return nil ,_e .Error ("\u0063\u006f\u0070\u0079\u0042\u0069\u0074\u006d\u0061\u0070","\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _bgde ==_geeg {return _geeg ,nil ;
};if _geeg ==nil {_geeg =_bgde .createTemplate ();copy (_geeg .Data ,_bgde .Data );return _geeg ,nil ;};_dgcf :=_geeg .resizeImageData (_bgde );if _dgcf !=nil {return nil ,_e .Wrap (_dgcf ,"\u0063\u006f\u0070\u0079\u0042\u0069\u0074\u006d\u0061\u0070","");
};_geeg .Text =_bgde .Text ;copy (_geeg .Data ,_bgde .Data );return _geeg ,nil ;};func (_gcef *byHeight )Len ()int {return len (_gcef .Values )};const (AsymmetricMorphBC BoundaryCondition =iota ;SymmetricMorphBC ;);func (_abbb *Bitmap )Equivalent (s *Bitmap )bool {return _abbb .equivalent (s )};
func _gfdd (_bfbdd *Bitmap ,_fcba ,_acfe int ,_eagd ,_acgdbg int ,_ccbbd RasterOperator ){var (_fcbc bool ;_dfec bool ;_bdgd int ;_bdefc int ;_fcgg int ;_dagc int ;_afba bool ;_cedc byte ;);_ceceg :=8-(_fcba &7);_gbfda :=_fgddg [_ceceg ];_bccb :=_bfbdd .RowStride *_acfe +(_fcba >>3);
if _eagd < _ceceg {_fcbc =true ;_gbfda &=_ggge [8-_ceceg +_eagd ];};if !_fcbc {_bdgd =(_eagd -_ceceg )>>3;if _bdgd !=0{_dfec =true ;_bdefc =_bccb +1;};};_fcgg =(_fcba +_eagd )&7;if !(_fcbc ||_fcgg ==0){_afba =true ;_cedc =_ggge [_fcgg ];_dagc =_bccb +1+_bdgd ;
};var _ecab ,_fdbgc int ;switch _ccbbd {case PixClr :for _ecab =0;_ecab < _acgdbg ;_ecab ++{_bfbdd .Data [_bccb ]=_ffbgf (_bfbdd .Data [_bccb ],0x0,_gbfda );_bccb +=_bfbdd .RowStride ;};if _dfec {for _ecab =0;_ecab < _acgdbg ;_ecab ++{for _fdbgc =0;_fdbgc < _bdgd ;
_fdbgc ++{_bfbdd .Data [_bdefc +_fdbgc ]=0x0;};_bdefc +=_bfbdd .RowStride ;};};if _afba {for _ecab =0;_ecab < _acgdbg ;_ecab ++{_bfbdd .Data [_dagc ]=_ffbgf (_bfbdd .Data [_dagc ],0x0,_cedc );_dagc +=_bfbdd .RowStride ;};};case PixSet :for _ecab =0;_ecab < _acgdbg ;
_ecab ++{_bfbdd .Data [_bccb ]=_ffbgf (_bfbdd .Data [_bccb ],0xff,_gbfda );_bccb +=_bfbdd .RowStride ;};if _dfec {for _ecab =0;_ecab < _acgdbg ;_ecab ++{for _fdbgc =0;_fdbgc < _bdgd ;_fdbgc ++{_bfbdd .Data [_bdefc +_fdbgc ]=0xff;};_bdefc +=_bfbdd .RowStride ;
};};if _afba {for _ecab =0;_ecab < _acgdbg ;_ecab ++{_bfbdd .Data [_dagc ]=_ffbgf (_bfbdd .Data [_dagc ],0xff,_cedc );_dagc +=_bfbdd .RowStride ;};};case PixNotDst :for _ecab =0;_ecab < _acgdbg ;_ecab ++{_bfbdd .Data [_bccb ]=_ffbgf (_bfbdd .Data [_bccb ],^_bfbdd .Data [_bccb ],_gbfda );
_bccb +=_bfbdd .RowStride ;};if _dfec {for _ecab =0;_ecab < _acgdbg ;_ecab ++{for _fdbgc =0;_fdbgc < _bdgd ;_fdbgc ++{_bfbdd .Data [_bdefc +_fdbgc ]=^(_bfbdd .Data [_bdefc +_fdbgc ]);};_bdefc +=_bfbdd .RowStride ;};};if _afba {for _ecab =0;_ecab < _acgdbg ;
_ecab ++{_bfbdd .Data [_dagc ]=_ffbgf (_bfbdd .Data [_dagc ],^_bfbdd .Data [_dagc ],_cedc );_dagc +=_bfbdd .RowStride ;};};};};func (_dagg *ClassedPoints )ySortFunction ()func (_gbee int ,_egbc int )bool {return func (_cbfd ,_cabcb int )bool {return _dagg .YAtIndex (_cbfd )< _dagg .YAtIndex (_cabcb )};
};func _dbbf ()(_bcg [256]uint16 ){for _abb :=0;_abb < 256;_abb ++{if _abb &0x01!=0{_bcg [_abb ]|=0x3;};if _abb &0x02!=0{_bcg [_abb ]|=0xc;};if _abb &0x04!=0{_bcg [_abb ]|=0x30;};if _abb &0x08!=0{_bcg [_abb ]|=0xc0;};if _abb &0x10!=0{_bcg [_abb ]|=0x300;
};if _abb &0x20!=0{_bcg [_abb ]|=0xc00;};if _abb &0x40!=0{_bcg [_abb ]|=0x3000;};if _abb &0x80!=0{_bcg [_abb ]|=0xc000;};};return _bcg ;};const (SelDontCare SelectionValue =iota ;SelHit ;SelMiss ;);func (_eeeag *ClassedPoints )xSortFunction ()func (_gebb int ,_fbdg int )bool {return func (_bcgg ,_adee int )bool {return _eeeag .XAtIndex (_bcgg )< _eeeag .XAtIndex (_adee )};
};func New (width ,height int )*Bitmap {_fgdc :=_aafe (width ,height );_fgdc .Data =make ([]byte ,height *_fgdc .RowStride );return _fgdc ;};func (_bbfd *Bitmap )setAll ()error {_fdbe :=_agdc (_bbfd ,0,0,_bbfd .Width ,_bbfd .Height ,PixSet ,nil ,0,0);if _fdbe !=nil {return _e .Wrap (_fdbe ,"\u0073\u0065\u0074\u0041\u006c\u006c","");
};return nil ;};func _gbfcc (_cbda *Bitmap ,_cgdc *_d .Stack ,_fbfg ,_efag ,_begd int )(_gcfd *_ca .Rectangle ,_cfeg error ){const _gbag ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";if _cbda ==nil {return nil ,_e .Error (_gbag ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");
};if _cgdc ==nil {return nil ,_e .Error (_gbag ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");};switch _begd {case 4:if _gcfd ,_cfeg =_acbg (_cbda ,_cgdc ,_fbfg ,_efag );_cfeg !=nil {return nil ,_e .Wrap (_cfeg ,_gbag ,"");
};return _gcfd ,nil ;case 8:if _gcfd ,_cfeg =_bbgg (_cbda ,_cgdc ,_fbfg ,_efag );_cfeg !=nil {return nil ,_e .Wrap (_cfeg ,_gbag ,"");};return _gcfd ,nil ;default:return nil ,_e .Errorf (_gbag ,"\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u0069\u0073 \u006eo\u0074\u0020\u0034\u0020\u006f\u0072\u0020\u0038\u003a\u0020\u0027\u0025\u0064\u0027",_begd );
};};func _eebc (_debf *Bitmap ,_gcdc *Bitmap ,_gfgca *Selection )(*Bitmap ,error ){var (_gcbe *Bitmap ;_egbb error ;);_debf ,_egbb =_aceg (_debf ,_gcdc ,_gfgca ,&_gcbe );if _egbb !=nil {return nil ,_egbb ;};if _egbb =_debf .clearAll ();_egbb !=nil {return nil ,_egbb ;
};var _caag SelectionValue ;for _bccf :=0;_bccf < _gfgca .Height ;_bccf ++{for _daef :=0;_daef < _gfgca .Width ;_daef ++{_caag =_gfgca .Data [_bccf ][_daef ];if _caag ==SelHit {if _egbb =_debf .RasterOperation (_daef -_gfgca .Cx ,_bccf -_gfgca .Cy ,_gcdc .Width ,_gcdc .Height ,PixSrcOrDst ,_gcbe ,0,0);
_egbb !=nil {return nil ,_egbb ;};};};};return _debf ,nil ;};func _aa (_de *Bitmap ,_dbb *Bitmap ,_cdfg int )(_ec error ){const _fab ="e\u0078\u0070\u0061\u006edB\u0069n\u0061\u0072\u0079\u0050\u006fw\u0065\u0072\u0032\u004c\u006f\u0077";switch _cdfg {case 2:_ec =_fb (_de ,_dbb );
case 4:_ec =_geg (_de ,_dbb );case 8:_ec =_fdc (_de ,_dbb );default:return _e .Error (_fab ,"\u0065\u0078p\u0061\u006e\u0073\u0069o\u006e\u0020f\u0061\u0063\u0074\u006f\u0072\u0020\u006e\u006ft\u0020\u0069\u006e\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d\u0020r\u0061\u006e\u0067\u0065");
};if _ec !=nil {_ec =_e .Wrap (_ec ,_fab ,"");};return _ec ;};func (_bgeec *Selection )findMaxTranslations ()(_cbcd ,_bgfc ,_cfdd ,_acagdb int ){for _bbbf :=0;_bbbf < _bgeec .Height ;_bbbf ++{for _fbef :=0;_fbef < _bgeec .Width ;_fbef ++{if _bgeec .Data [_bbbf ][_fbef ]==SelHit {_cbcd =_bad (_cbcd ,_bgeec .Cx -_fbef );
_bgfc =_bad (_bgfc ,_bgeec .Cy -_bbbf );_cfdd =_bad (_cfdd ,_fbef -_bgeec .Cx );_acagdb =_bad (_acagdb ,_bbbf -_bgeec .Cy );};};};return _cbcd ,_bgfc ,_cfdd ,_acagdb ;};func _bbafa (_deeg ...MorphProcess )(_gcacd error ){const _cbgd ="v\u0065r\u0069\u0066\u0079\u004d\u006f\u0072\u0070\u0068P\u0072\u006f\u0063\u0065ss\u0065\u0073";
var _ecaf ,_cafff int ;for _gaed ,_bcf :=range _deeg {if _gcacd =_bcf .verify (_gaed ,&_ecaf ,&_cafff );_gcacd !=nil {return _e .Wrap (_gcacd ,_cbgd ,"");};};if _cafff !=0&&_ecaf !=0{return _e .Error (_cbgd ,"\u004d\u006f\u0072\u0070\u0068\u0020\u0073\u0065\u0071\u0075\u0065n\u0063\u0065\u0020\u002d\u0020\u0062\u006f\u0072d\u0065r\u0020\u0061\u0064\u0064\u0065\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u0065\u0074\u0020\u0072\u0065\u0064u\u0063\u0074\u0069\u006f\u006e\u0020\u006e\u006f\u0074\u0020\u0030");
};return nil ;};func _cdgg (_baac ,_eggaf *Bitmap ,_cgaae ,_bbcda int )(*Bitmap ,error ){const _efcc ="d\u0069\u006c\u0061\u0074\u0065\u0042\u0072\u0069\u0063\u006b";if _eggaf ==nil {_cg .Log .Debug ("\u0064\u0069\u006c\u0061\u0074\u0065\u0042\u0072\u0069\u0063k\u0020\u0073\u006f\u0075\u0072\u0063\u0065 \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
return nil ,_e .Error (_efcc ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _cgaae < 1||_bbcda < 1{return nil ,_e .Error (_efcc ,"\u0068\u0053\u007a\u0069\u0065 \u0061\u006e\u0064\u0020\u0076\u0053\u0069\u007a\u0065\u0020\u0061\u0072\u0065 \u006e\u006f\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0031");
};if _cgaae ==1&&_bbcda ==1{_gffd ,_fddd :=_ebg (_baac ,_eggaf );if _fddd !=nil {return nil ,_e .Wrap (_fddd ,_efcc ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u0026\u0026 \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _gffd ,nil ;};if _cgaae ==1||_bbcda ==1{_gdae :=SelCreateBrick (_bbcda ,_cgaae ,_bbcda /2,_cgaae /2,SelHit );_dgb ,_acaed :=_eebc (_baac ,_eggaf ,_gdae );if _acaed !=nil {return nil ,_e .Wrap (_acaed ,_efcc ,"\u0068s\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _dgb ,nil ;};_aab :=SelCreateBrick (1,_cgaae ,0,_cgaae /2,SelHit );_dcgf :=SelCreateBrick (_bbcda ,1,_bbcda /2,0,SelHit );_cdddd ,_accbg :=_eebc (nil ,_eggaf ,_aab );if _accbg !=nil {return nil ,_e .Wrap (_accbg ,_efcc ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};_baac ,_accbg =_eebc (_baac ,_cdddd ,_dcgf );if _accbg !=nil {return nil ,_e .Wrap (_accbg ,_efcc ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};return _baac ,nil ;};func _agdc (_gabed *Bitmap ,_dccb ,_fecg ,_fcfe ,_gbcc int ,_bfag RasterOperator ,_aabae *Bitmap ,_ggca ,_dcdc int )error {const _cdca ="\u0072a\u0073t\u0065\u0072\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e";
if _gabed ==nil {return _e .Error (_cdca ,"\u006e\u0069\u006c\u0020\u0027\u0064\u0065\u0073\u0074\u0027\u0020\u0042i\u0074\u006d\u0061\u0070");};if _bfag ==PixDst {return nil ;};switch _bfag {case PixClr ,PixSet ,PixNotDst :_agef (_gabed ,_dccb ,_fecg ,_fcfe ,_gbcc ,_bfag );
return nil ;};if _aabae ==nil {_cg .Log .Debug ("\u0052a\u0073\u0074e\u0072\u004f\u0070\u0065r\u0061\u0074\u0069o\u006e\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020bi\u0074\u006d\u0061p\u0020\u0069s\u0020\u006e\u006f\u0074\u0020\u0064e\u0066\u0069n\u0065\u0064");
return _e .Error (_cdca ,"\u006e\u0069l\u0020\u0027\u0073r\u0063\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _fdee :=_cffa (_gabed ,_dccb ,_fecg ,_fcfe ,_gbcc ,_bfag ,_aabae ,_ggca ,_dcdc );_fdee !=nil {return _e .Wrap (_fdee ,_cdca ,"");};return nil ;
};func (_bgcb *Bitmaps )GroupByWidth ()(*BitmapsArray ,error ){const _ggce ="\u0047\u0072\u006fu\u0070\u0042\u0079\u0057\u0069\u0064\u0074\u0068";if len (_bgcb .Values )==0{return nil ,_e .Error (_ggce ,"\u006eo\u0020v\u0061\u006c\u0075\u0065\u0073 \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");
};_aefcf :=&BitmapsArray {};_bgcb .SortByWidth ();_ceca :=-1;_ccgee :=-1;for _fffb :=0;_fffb < len (_bgcb .Values );_fffb ++{_afcgb :=_bgcb .Values [_fffb ].Width ;if _afcgb > _ceca {_ceca =_afcgb ;_ccgee ++;_aefcf .Values =append (_aefcf .Values ,&Bitmaps {});
};_aefcf .Values [_ccgee ].AddBitmap (_bgcb .Values [_fffb ]);};return _aefcf ,nil ;};const (_ LocationFilter =iota ;LocSelectWidth ;LocSelectHeight ;LocSelectXVal ;LocSelectYVal ;LocSelectIfEither ;LocSelectIfBoth ;);func (_ggeb *Bitmap )connComponentsBB (_bdbc int )(_gfdc *Boxes ,_egea error ){const _dbbbg ="\u0042\u0069\u0074ma\u0070\u002e\u0063\u006f\u006e\u006e\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0042\u0042";
if _bdbc !=4&&_bdbc !=8{return nil ,_e .Error (_dbbbg ,"\u0063\u006f\u006e\u006e\u0065\u0063t\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0027\u0034\u0027\u0020\u006fr\u0020\u0027\u0038\u0027");};if _ggeb .Zero (){return &Boxes {},nil ;
};_ggeb .setPadBits (0);_egc ,_egea :=_ebg (nil ,_ggeb );if _egea !=nil {return nil ,_e .Wrap (_egea ,_dbbbg ,"\u0062\u006d\u0031");};_fcbd :=&_d .Stack {};_fcbd .Aux =&_d .Stack {};_gfdc =&Boxes {};var (_cccf ,_cffd int ;_gae _ca .Point ;_bfdc bool ;_faeeb *_ca .Rectangle ;
);for {if _gae ,_bfdc ,_egea =_egc .nextOnPixel (_cffd ,_cccf );_egea !=nil {return nil ,_e .Wrap (_egea ,_dbbbg ,"");};if !_bfdc {break ;};if _faeeb ,_egea =_gbfcc (_egc ,_fcbd ,_gae .X ,_gae .Y ,_bdbc );_egea !=nil {return nil ,_e .Wrap (_egea ,_dbbbg ,"");
};if _egea =_gfdc .Add (_faeeb );_egea !=nil {return nil ,_e .Wrap (_egea ,_dbbbg ,"");};_cffd =_gae .X ;_cccf =_gae .Y ;};return _gfdc ,nil ;};func (_adecc *Bitmap )GetUnpaddedData ()([]byte ,error ){_eba :=uint (_adecc .Width &0x07);if _eba ==0{return _adecc .Data ,nil ;
};_cdda :=_adecc .Width *_adecc .Height ;if _cdda %8!=0{_cdda >>=3;_cdda ++;}else {_cdda >>=3;};_bbg :=make ([]byte ,_cdda );_ded :=_f .NewWriterMSB (_bbg );const _ggc ="\u0047e\u0074U\u006e\u0070\u0061\u0064\u0064\u0065\u0064\u0044\u0061\u0074\u0061";
for _caf :=0;_caf < _adecc .Height ;_caf ++{for _dace :=0;_dace < _adecc .RowStride ;_dace ++{_cfc :=_adecc .Data [_caf *_adecc .RowStride +_dace ];if _dace !=_adecc .RowStride -1{_geba :=_ded .WriteByte (_cfc );if _geba !=nil {return nil ,_e .Wrap (_geba ,_ggc ,"");
};continue ;};for _fbcb :=uint (0);_fbcb < _eba ;_fbcb ++{_ecge :=_ded .WriteBit (int (_cfc >>(7-_fbcb )&0x01));if _ecge !=nil {return nil ,_e .Wrap (_ecge ,_ggc ,"");};};};};return _bbg ,nil ;};func (_cdgc CombinationOperator )String ()string {var _afabb string ;
switch _cdgc {case CmbOpOr :_afabb ="\u004f\u0052";case CmbOpAnd :_afabb ="\u0041\u004e\u0044";case CmbOpXor :_afabb ="\u0058\u004f\u0052";case CmbOpXNor :_afabb ="\u0058\u004e\u004f\u0052";case CmbOpReplace :_afabb ="\u0052E\u0050\u004c\u0041\u0043\u0045";
case CmbOpNot :_afabb ="\u004e\u004f\u0054";};return _afabb ;};func (_gfgb *Bitmap )countPixels ()int {var (_ggg int ;_afge uint8 ;_fdfd byte ;_ggb int ;);_ffe :=_gfgb .RowStride ;_ecd :=uint (_gfgb .Width &0x07);if _ecd !=0{_afge =uint8 ((0xff<<(8-_ecd ))&0xff);
_ffe --;};for _cbdd :=0;_cbdd < _gfgb .Height ;_cbdd ++{for _ggb =0;_ggb < _ffe ;_ggb ++{_fdfd =_gfgb .Data [_cbdd *_gfgb .RowStride +_ggb ];_ggg +=int (_bff [_fdfd ]);};if _ecd !=0{_ggg +=int (_bff [_gfgb .Data [_cbdd *_gfgb .RowStride +_ggb ]&_afge ]);
};};return _ggg ;};func (_adab *Bitmap )GetByte (index int )(byte ,error ){if index > len (_adab .Data )-1||index < 0{return 0,_e .Errorf ("\u0047e\u0074\u0042\u0079\u0074\u0065","\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",index );
};return _adab .Data [index ],nil ;};func _fdc (_fa ,_ee *Bitmap )(_ed error ){const _dga ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0038";_fae :=_ee .RowStride ;_gfd :=_fa .RowStride ;var _cda ,_fg ,_fgc ,_af ,_gee int ;
for _fgc =0;_fgc < _ee .Height ;_fgc ++{_cda =_fgc *_fae ;_fg =8*_fgc *_gfd ;for _af =0;_af < _fae ;_af ++{if _ed =_fa .setEightBytes (_fg +_af *8,_gfdg [_ee .Data [_cda +_af ]]);_ed !=nil {return _e .Wrap (_ed ,_dga ,"");};};for _gee =1;_gee < 8;_gee ++{for _af =0;
_af < _gfd ;_af ++{if _ed =_fa .SetByte (_fg +_gee *_gfd +_af ,_fa .Data [_fg +_af ]);_ed !=nil {return _e .Wrap (_ed ,_dga ,"");};};};};return nil ;};func (_addb *ClassedPoints )Less (i ,j int )bool {return _addb ._ddfc (i ,j )};func (_bcgf Points )GetIntY (i int )(int ,error ){if i >=len (_bcgf ){return 0,_e .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065t\u0049\u006e\u0074\u0059","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return int (_bcgf [i ].Y ),nil ;};func (_cagb *Points )Add (pt *Points )error {const _dgadd ="\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0041\u0064\u0064";if _cagb ==nil {return _e .Error (_dgadd ,"\u0070o\u0069n\u0074\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if pt ==nil {return _e .Error (_dgadd ,"a\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0070\u006f\u0069\u006e\u0074\u0073\u0020\u006eo\u0074\u0020\u0064e\u0066i\u006e\u0065\u0064");};*_cagb =append (*_cagb ,*pt ...);return nil ;};func Extract (roi _ca .Rectangle ,src *Bitmap )(*Bitmap ,error ){_bbcf :=New (roi .Dx (),roi .Dy ());
_cded :=roi .Min .X &0x07;_adbbda :=8-_cded ;_aeaf :=uint (8-_bbcf .Width &0x07);_aadg :=src .GetByteIndex (roi .Min .X ,roi .Min .Y );_ageg :=src .GetByteIndex (roi .Max .X -1,roi .Min .Y );_afcb :=_bbcf .RowStride ==_ageg +1-_aadg ;var _cbc int ;for _gfga :=roi .Min .Y ;
_gfga < roi .Max .Y ;_gfga ++{_eadcb :=_aadg ;_dgae :=_cbc ;switch {case _aadg ==_ageg :_cacd ,_fgea :=src .GetByte (_eadcb );if _fgea !=nil {return nil ,_fgea ;};_cacd <<=uint (_cded );_fgea =_bbcf .SetByte (_dgae ,_dcea (_aeaf ,_cacd ));if _fgea !=nil {return nil ,_fgea ;
};case _cded ==0:for _cece :=_aadg ;_cece <=_ageg ;_cece ++{_cfbb ,_ggd :=src .GetByte (_eadcb );if _ggd !=nil {return nil ,_ggd ;};_eadcb ++;if _cece ==_ageg &&_afcb {_cfbb =_dcea (_aeaf ,_cfbb );};_ggd =_bbcf .SetByte (_dgae ,_cfbb );if _ggd !=nil {return nil ,_ggd ;
};_dgae ++;};default:_ceff :=_degcb (src ,_bbcf ,uint (_cded ),uint (_adbbda ),_aeaf ,_aadg ,_ageg ,_afcb ,_eadcb ,_dgae );if _ceff !=nil {return nil ,_ceff ;};};_aadg +=src .RowStride ;_ageg +=src .RowStride ;_cbc +=_bbcf .RowStride ;};return _bbcf ,nil ;
};func (_ceade *BitmapsArray )GetBitmaps (i int )(*Bitmaps ,error ){const _ggcaa ="\u0042\u0069\u0074ma\u0070\u0073\u0041\u0072\u0072\u0061\u0079\u002e\u0047\u0065\u0074\u0042\u0069\u0074\u006d\u0061\u0070\u0073";if _ceade ==nil {return nil ,_e .Error (_ggcaa ,"p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074m\u0061\u0070\u0073A\u0072r\u0061\u0079\u0027");
};if i > len (_ceade .Values )-1{return nil ,_e .Errorf (_ggcaa ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _ceade .Values [i ],nil ;};func _bbgg (_aadag *Bitmap ,_fedef *_d .Stack ,_ecebb ,_cgbg int )(_cgde *_ca .Rectangle ,_cfee error ){const _bffa ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";
if _aadag ==nil {return nil ,_e .Error (_bffa ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _fedef ==nil {return nil ,_e .Error (_bffa ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");
};_faag ,_gggb :=_aadag .Width ,_aadag .Height ;_fgbb :=_faag -1;_gbed :=_gggb -1;if _ecebb < 0||_ecebb > _fgbb ||_cgbg < 0||_cgbg > _gbed ||!_aadag .GetPixel (_ecebb ,_cgbg ){return nil ,nil ;};_egcce :=_ca .Rect (100000,100000,0,0);if _cfee =_agdcc (_fedef ,_ecebb ,_ecebb ,_cgbg ,1,_gbed ,&_egcce );
_cfee !=nil {return nil ,_e .Wrap (_cfee ,_bffa ,"\u0069\u006e\u0069t\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _cfee =_agdcc (_fedef ,_ecebb ,_ecebb ,_cgbg +1,-1,_gbed ,&_egcce );_cfee !=nil {return nil ,_e .Wrap (_cfee ,_bffa ,"\u0032\u006ed\u0020\u0069\u006ei\u0074\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");
};_egcce .Min .X ,_egcce .Max .X =_ecebb ,_ecebb ;_egcce .Min .Y ,_egcce .Max .Y =_cgbg ,_cgbg ;var (_edae *fillSegment ;_egade int ;);for _fedef .Len ()> 0{if _edae ,_cfee =_dgead (_fedef );_cfee !=nil {return nil ,_e .Wrap (_cfee ,_bffa ,"");};_cgbg =_edae ._cfgb ;
for _ecebb =_edae ._fbbe -1;_ecebb >=0&&_aadag .GetPixel (_ecebb ,_cgbg );_ecebb --{if _cfee =_aadag .SetPixel (_ecebb ,_cgbg ,0);_cfee !=nil {return nil ,_e .Wrap (_cfee ,_bffa ,"\u0031s\u0074\u0020\u0073\u0065\u0074");};};if _ecebb >=_edae ._fbbe -1{for {for _ecebb ++;
_ecebb <=_edae ._deef +1&&_ecebb <=_fgbb &&!_aadag .GetPixel (_ecebb ,_cgbg );_ecebb ++{};_egade =_ecebb ;if !(_ecebb <=_edae ._deef +1&&_ecebb <=_fgbb ){break ;};for ;_ecebb <=_fgbb &&_aadag .GetPixel (_ecebb ,_cgbg );_ecebb ++{if _cfee =_aadag .SetPixel (_ecebb ,_cgbg ,0);
_cfee !=nil {return nil ,_e .Wrap (_cfee ,_bffa ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _cfee =_agdcc (_fedef ,_egade ,_ecebb -1,_edae ._cfgb ,_edae ._bfbfc ,_gbed ,&_egcce );_cfee !=nil {return nil ,_e .Wrap (_cfee ,_bffa ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");
};if _ecebb > _edae ._deef {if _cfee =_agdcc (_fedef ,_edae ._deef +1,_ecebb -1,_edae ._cfgb ,-_edae ._bfbfc ,_gbed ,&_egcce );_cfee !=nil {return nil ,_e .Wrap (_cfee ,_bffa ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};};continue ;};_egade =_ecebb +1;if _egade < _edae ._fbbe {if _cfee =_agdcc (_fedef ,_egade ,_edae ._fbbe -1,_edae ._cfgb ,-_edae ._bfbfc ,_gbed ,&_egcce );_cfee !=nil {return nil ,_e .Wrap (_cfee ,_bffa ,"\u006c\u0065\u0061\u006b\u0020\u006f\u006e\u0020\u006c\u0065\u0066\u0074 \u0073\u0069\u0064\u0065");
};};_ecebb =_edae ._fbbe ;for {for ;_ecebb <=_fgbb &&_aadag .GetPixel (_ecebb ,_cgbg );_ecebb ++{if _cfee =_aadag .SetPixel (_ecebb ,_cgbg ,0);_cfee !=nil {return nil ,_e .Wrap (_cfee ,_bffa ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _cfee =_agdcc (_fedef ,_egade ,_ecebb -1,_edae ._cfgb ,_edae ._bfbfc ,_gbed ,&_egcce );
_cfee !=nil {return nil ,_e .Wrap (_cfee ,_bffa ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _ecebb > _edae ._deef {if _cfee =_agdcc (_fedef ,_edae ._deef +1,_ecebb -1,_edae ._cfgb ,-_edae ._bfbfc ,_gbed ,&_egcce );_cfee !=nil {return nil ,_e .Wrap (_cfee ,_bffa ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};for _ecebb ++;_ecebb <=_edae ._deef +1&&_ecebb <=_fgbb &&!_aadag .GetPixel (_ecebb ,_cgbg );_ecebb ++{};_egade =_ecebb ;if !(_ecebb <=_edae ._deef +1&&_ecebb <=_fgbb ){break ;};};};_egcce .Max .X ++;_egcce .Max .Y ++;return &_egcce ,nil ;};func Copy (d ,s *Bitmap )(*Bitmap ,error ){return _ebg (d ,s )};
func TstDSymbol (t *_c .T ,scale ...int )*Bitmap {_bbbgb ,_edbc :=NewWithData (4,5,[]byte {0xf0,0x90,0x90,0x90,0xE0});_ea .NoError (t ,_edbc );return TstGetScaledSymbol (t ,_bbbgb ,scale ...);};func (_gbcg *BitmapsArray )AddBitmaps (bm *Bitmaps ){_gbcg .Values =append (_gbcg .Values ,bm )};
func (_bagg *BitmapsArray )GetBox (i int )(*_ca .Rectangle ,error ){const _dffb ="\u0042\u0069\u0074\u006dap\u0073\u0041\u0072\u0072\u0061\u0079\u002e\u0047\u0065\u0074\u0042\u006f\u0078";if _bagg ==nil {return nil ,_e .Error (_dffb ,"p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074m\u0061\u0070\u0073A\u0072r\u0061\u0079\u0027");
};if i > len (_bagg .Boxes )-1{return nil ,_e .Errorf (_dffb ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _bagg .Boxes [i ],nil ;};func CorrelationScoreSimple (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab []int )(_bdba float64 ,_efec error ){const _egcd ="\u0043\u006f\u0072\u0072el\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0053\u0069\u006d\u0070l\u0065";
if bm1 ==nil ||bm2 ==nil {return _bdba ,_e .Error (_egcd ,"n\u0069l\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u0073 \u0070\u0072\u006f\u0076id\u0065\u0064");};if tab ==nil {return _bdba ,_e .Error (_egcd ,"\u0074\u0061\u0062\u0020\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if area1 ==0||area2 ==0{return _bdba ,_e .Error (_egcd ,"\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0061\u0072e\u0061\u0073\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u003e\u0020\u0030");};_cacf ,_acceg :=bm1 .Width ,bm1 .Height ;_cdfe ,_egdg :=bm2 .Width ,bm2 .Height ;
if _fcdg (_cacf -_cdfe )> maxDiffW {return 0,nil ;};if _fcdg (_acceg -_egdg )> maxDiffH {return 0,nil ;};var _afagf ,_aba int ;if delX >=0{_afagf =int (delX +0.5);}else {_afagf =int (delX -0.5);};if delY >=0{_aba =int (delY +0.5);}else {_aba =int (delY -0.5);
};_gcbf :=bm1 .createTemplate ();if _efec =_gcbf .RasterOperation (_afagf ,_aba ,_cdfe ,_egdg ,PixSrc ,bm2 ,0,0);_efec !=nil {return _bdba ,_e .Wrap (_efec ,_egcd ,"\u0062m\u0032 \u0074\u006f\u0020\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065");};if _efec =_gcbf .RasterOperation (0,0,_cacf ,_acceg ,PixSrcAndDst ,bm1 ,0,0);
_efec !=nil {return _bdba ,_e .Wrap (_efec ,_egcd ,"b\u006d\u0031\u0020\u0061\u006e\u0064\u0020\u0062\u006d\u0054");};_agb :=_gcbf .countPixels ();_bdba =float64 (_agb )*float64 (_agb )/(float64 (area1 )*float64 (area2 ));return _bdba ,nil ;};func _bdga ()[]int {_aegg :=make ([]int ,256);
for _bccfg :=0;_bccfg <=0xff;_bccfg ++{_gdbb :=byte (_bccfg );_aegg [_gdbb ]=int (_gdbb &0x1)+(int (_gdbb >>1)&0x1)+(int (_gdbb >>2)&0x1)+(int (_gdbb >>3)&0x1)+(int (_gdbb >>4)&0x1)+(int (_gdbb >>5)&0x1)+(int (_gdbb >>6)&0x1)+(int (_gdbb >>7)&0x1);};return _aegg ;
};func (_fgcad *Bitmaps )AddBitmap (bm *Bitmap ){_fgcad .Values =append (_fgcad .Values ,bm )};func (_accb *Bitmap )GetBitOffset (x int )int {return x &0x07};func TstImageBitmap ()*Bitmap {return _cfbf .Copy ()};func (_ecg *Bitmap )ClipRectangle (box *_ca .Rectangle )(_ccd *Bitmap ,_dag *_ca .Rectangle ,_cagf error ){const _efb ="\u0043\u006c\u0069\u0070\u0052\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065";
if box ==nil {return nil ,nil ,_e .Error (_efb ,"\u0062o\u0078 \u0069\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};_ece ,_agdg :=_ecg .Width ,_ecg .Height ;_eaa :=_ca .Rect (0,0,_ece ,_agdg );if !box .Overlaps (_eaa ){return nil ,nil ,_e .Error (_efb ,"b\u006f\u0078\u0020\u0064oe\u0073n\u0027\u0074\u0020\u006f\u0076e\u0072\u006c\u0061\u0070\u0020\u0062");
};_dda :=box .Intersect (_eaa );_dbg ,_faee :=_dda .Min .X ,_dda .Min .Y ;_dffc ,_fgdd :=_dda .Dx (),_dda .Dy ();_ccd =New (_dffc ,_fgdd );_ccd .Text =_ecg .Text ;if _cagf =_ccd .RasterOperation (0,0,_dffc ,_fgdd ,PixSrc ,_ecg ,_dbg ,_faee );_cagf !=nil {return nil ,nil ,_e .Wrap (_cagf ,_efb ,"\u0050\u0069\u0078\u0053\u0072\u0063\u0020\u0074\u006f\u0020\u0063\u006ci\u0070\u0070\u0065\u0064");
};_dag =&_dda ;return _ccd ,_dag ,nil ;};func (_dbc *Bitmap )equivalent (_eed *Bitmap )bool {if _dbc ==_eed {return true ;};if !_dbc .SizesEqual (_eed ){return false ;};_efef :=_geea (_dbc ,_eed ,CmbOpXor );_agad :=_dbc .countPixels ();_eaf :=int (0.25*float32 (_agad ));
if _efef .thresholdPixelSum (_eaf ){return false ;};var (_efed [9][9]int ;_fbbb [18][9]int ;_ccfe [9][18]int ;_cgf int ;_ggfa int ;);_cfg :=9;_ccea :=_dbc .Height /_cfg ;_gbac :=_dbc .Width /_cfg ;_abg ,_bgc :=_ccea /2,_gbac /2;if _ccea < _gbac {_abg =_gbac /2;
_bgc =_ccea /2;};_bdcf :=float64 (_abg )*float64 (_bgc )*_cd .Pi ;_bbaf :=int (float64 (_ccea *_gbac /2)*0.9);_agdb :=int (float64 (_gbac *_ccea /2)*0.9);for _dadd :=0;_dadd < _cfg ;_dadd ++{_bbe :=_gbac *_dadd +_cgf ;var _abdf int ;if _dadd ==_cfg -1{_cgf =0;
_abdf =_dbc .Width ;}else {_abdf =_bbe +_gbac ;if ((_dbc .Width -_cgf )%_cfg )> 0{_cgf ++;_abdf ++;};};for _dgef :=0;_dgef < _cfg ;_dgef ++{_ecfd :=_ccea *_dgef +_ggfa ;var _eaac int ;if _dgef ==_cfg -1{_ggfa =0;_eaac =_dbc .Height ;}else {_eaac =_ecfd +_ccea ;
if (_dbc .Height -_ggfa )%_cfg > 0{_ggfa ++;_eaac ++;};};var _beg ,_dede ,_edee ,_ccg int ;_fdae :=(_bbe +_abdf )/2;_gcd :=(_ecfd +_eaac )/2;for _cadef :=_bbe ;_cadef < _abdf ;_cadef ++{for _eea :=_ecfd ;_eea < _eaac ;_eea ++{if _efef .GetPixel (_cadef ,_eea ){if _cadef < _fdae {_beg ++;
}else {_dede ++;};if _eea < _gcd {_ccg ++;}else {_edee ++;};};};};_efed [_dadd ][_dgef ]=_beg +_dede ;_fbbb [_dadd *2][_dgef ]=_beg ;_fbbb [_dadd *2+1][_dgef ]=_dede ;_ccfe [_dadd ][_dgef *2]=_ccg ;_ccfe [_dadd ][_dgef *2+1]=_edee ;};};for _cccc :=0;_cccc < _cfg *2-1;
_cccc ++{for _ebb :=0;_ebb < (_cfg -1);_ebb ++{var _fbd int ;for _addc :=0;_addc < 2;_addc ++{for _bgfg :=0;_bgfg < 2;_bgfg ++{_fbd +=_fbbb [_cccc +_addc ][_ebb +_bgfg ];};};if _fbd > _agdb {return false ;};};};for _gab :=0;_gab < (_cfg -1);_gab ++{for _gga :=0;
_gga < ((_cfg *2)-1);_gga ++{var _agg int ;for _afe :=0;_afe < 2;_afe ++{for _cfga :=0;_cfga < 2;_cfga ++{_agg +=_ccfe [_gab +_afe ][_gga +_cfga ];};};if _agg > _bbaf {return false ;};};};for _bggb :=0;_bggb < (_cfg -2);_bggb ++{for _gde :=0;_gde < (_cfg -2);
_gde ++{var _cagc ,_dbba int ;for _gdeg :=0;_gdeg < 3;_gdeg ++{for _egac :=0;_egac < 3;_egac ++{if _gdeg ==_egac {_cagc +=_efed [_bggb +_gdeg ][_gde +_egac ];};if (2-_gdeg )==_egac {_dbba +=_efed [_bggb +_gdeg ][_gde +_egac ];};};};if _cagc > _agdb ||_dbba > _agdb {return false ;
};};};for _gfb :=0;_gfb < (_cfg -1);_gfb ++{for _fdfff :=0;_fdfff < (_cfg -1);_fdfff ++{var _agdf int ;for _gdab :=0;_gdab < 2;_gdab ++{for _dedc :=0;_dedc < 2;_dedc ++{_agdf +=_efed [_gfb +_gdab ][_fdfff +_dedc ];};};if float64 (_agdf )> _bdcf {return false ;
};};};return true ;};type Point struct{X ,Y float32 ;};func (_ffebb *ClassedPoints )Swap (i ,j int ){_ffebb .IntSlice [i ],_ffebb .IntSlice [j ]=_ffebb .IntSlice [j ],_ffebb .IntSlice [i ];};func _caga ()(_gb [256]uint64 ){for _bfgd :=0;_bfgd < 256;_bfgd ++{if _bfgd &0x01!=0{_gb [_bfgd ]|=0xff;
};if _bfgd &0x02!=0{_gb [_bfgd ]|=0xff00;};if _bfgd &0x04!=0{_gb [_bfgd ]|=0xff0000;};if _bfgd &0x08!=0{_gb [_bfgd ]|=0xff000000;};if _bfgd &0x10!=0{_gb [_bfgd ]|=0xff00000000;};if _bfgd &0x20!=0{_gb [_bfgd ]|=0xff0000000000;};if _bfgd &0x40!=0{_gb [_bfgd ]|=0xff000000000000;
};if _bfgd &0x80!=0{_gb [_bfgd ]|=0xff00000000000000;};};return _gb ;};func (_bggf MorphProcess )getWidthHeight ()(_accf ,_cbbfd int ){return _bggf .Arguments [0],_bggf .Arguments [1];};const (MopDilation MorphOperation =iota ;MopErosion ;MopOpening ;MopClosing ;
MopRankBinaryReduction ;MopReplicativeBinaryExpansion ;MopAddBorder ;);func (_dgdd *byHeight )Less (i ,j int )bool {return _dgdd .Values [i ].Height < _dgdd .Values [j ].Height };var (_bdeb =_dbbf ();_dcaa =_daf ();_gfdg =_caga (););type SizeComparison int ;
const (_ SizeSelection =iota ;SizeSelectByWidth ;SizeSelectByHeight ;SizeSelectByMaxDimension ;SizeSelectByArea ;SizeSelectByPerimeter ;);func (_cbb *Bitmap )GetByteIndex (x ,y int )int {return y *_cbb .RowStride +(x >>3)};func (_gcg *Bitmap )inverseData (){if _dbd :=_gcg .RasterOperation (0,0,_gcg .Width ,_gcg .Height ,PixNotDst ,nil ,0,0);
_dbd !=nil {_cg .Log .Debug ("\u0049n\u0076\u0065\u0072\u0073e\u0020\u0064\u0061\u0074\u0061 \u0066a\u0069l\u0065\u0064\u003a\u0020\u0027\u0025\u0076'",_dbd );};if _gcg .Color ==Chocolate {_gcg .Color =Vanilla ;}else {_gcg .Color =Chocolate ;};};func _acbg (_fbgg *Bitmap ,_eegf *_d .Stack ,_ggbg ,_bada int )(_bgeea *_ca .Rectangle ,_dedac error ){const _beae ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";
if _fbgg ==nil {return nil ,_e .Error (_beae ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _eegf ==nil {return nil ,_e .Error (_beae ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");
};_aefa ,_abef :=_fbgg .Width ,_fbgg .Height ;_fede :=_aefa -1;_acd :=_abef -1;if _ggbg < 0||_ggbg > _fede ||_bada < 0||_bada > _acd ||!_fbgg .GetPixel (_ggbg ,_bada ){return nil ,nil ;};var _eeec *_ca .Rectangle ;_eeec ,_dedac =Rect (100000,100000,0,0);
if _dedac !=nil {return nil ,_e .Wrap (_dedac ,_beae ,"");};if _dedac =_agdcc (_eegf ,_ggbg ,_ggbg ,_bada ,1,_acd ,_eeec );_dedac !=nil {return nil ,_e .Wrap (_dedac ,_beae ,"\u0069\u006e\u0069t\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _dedac =_agdcc (_eegf ,_ggbg ,_ggbg ,_bada +1,-1,_acd ,_eeec );
_dedac !=nil {return nil ,_e .Wrap (_dedac ,_beae ,"\u0032\u006ed\u0020\u0069\u006ei\u0074\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};_eeec .Min .X ,_eeec .Max .X =_ggbg ,_ggbg ;_eeec .Min .Y ,_eeec .Max .Y =_bada ,_bada ;var (_egge *fillSegment ;
_gfefc int ;);for _eegf .Len ()> 0{if _egge ,_dedac =_dgead (_eegf );_dedac !=nil {return nil ,_e .Wrap (_dedac ,_beae ,"");};_bada =_egge ._cfgb ;for _ggbg =_egge ._fbbe ;_ggbg >=0&&_fbgg .GetPixel (_ggbg ,_bada );_ggbg --{if _dedac =_fbgg .SetPixel (_ggbg ,_bada ,0);
_dedac !=nil {return nil ,_e .Wrap (_dedac ,_beae ,"");};};if _ggbg >=_egge ._fbbe {for _ggbg ++;_ggbg <=_egge ._deef &&_ggbg <=_fede &&!_fbgg .GetPixel (_ggbg ,_bada );_ggbg ++{};_gfefc =_ggbg ;if !(_ggbg <=_egge ._deef &&_ggbg <=_fede ){continue ;};}else {_gfefc =_ggbg +1;
if _gfefc < _egge ._fbbe -1{if _dedac =_agdcc (_eegf ,_gfefc ,_egge ._fbbe -1,_egge ._cfgb ,-_egge ._bfbfc ,_acd ,_eeec );_dedac !=nil {return nil ,_e .Wrap (_dedac ,_beae ,"\u006c\u0065\u0061\u006b\u0020\u006f\u006e\u0020\u006c\u0065\u0066\u0074 \u0073\u0069\u0064\u0065");
};};_ggbg =_egge ._fbbe +1;};for {for ;_ggbg <=_fede &&_fbgg .GetPixel (_ggbg ,_bada );_ggbg ++{if _dedac =_fbgg .SetPixel (_ggbg ,_bada ,0);_dedac !=nil {return nil ,_e .Wrap (_dedac ,_beae ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _dedac =_agdcc (_eegf ,_gfefc ,_ggbg -1,_egge ._cfgb ,_egge ._bfbfc ,_acd ,_eeec );
_dedac !=nil {return nil ,_e .Wrap (_dedac ,_beae ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _ggbg > _egge ._deef +1{if _dedac =_agdcc (_eegf ,_egge ._deef +1,_ggbg -1,_egge ._cfgb ,-_egge ._bfbfc ,_acd ,_eeec );_dedac !=nil {return nil ,_e .Wrap (_dedac ,_beae ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};for _ggbg ++;_ggbg <=_egge ._deef &&_ggbg <=_fede &&!_fbgg .GetPixel (_ggbg ,_bada );_ggbg ++{};_gfefc =_ggbg ;if !(_ggbg <=_egge ._deef &&_ggbg <=_fede ){break ;};};};_eeec .Max .X ++;_eeec .Max .Y ++;return _eeec ,nil ;};func TstImageBitmapData ()[]byte {return _cfbf .Data };
func (_acaa *Selection )setOrigin (_adedg ,_bccfd int ){_acaa .Cy ,_acaa .Cx =_adedg ,_bccfd };type shift int ;func Rect (x ,y ,w ,h int )(*_ca .Rectangle ,error ){const _geca ="b\u0069\u0074\u006d\u0061\u0070\u002e\u0052\u0065\u0063\u0074";if x < 0{w +=x ;
x =0;if w <=0{return nil ,_e .Errorf (_geca ,"x\u003a\u0027\u0025\u0064\u0027\u0020<\u0020\u0030\u0020\u0061\u006e\u0064\u0020\u0077\u003a \u0027\u0025\u0064'\u0020<\u003d\u0020\u0030",x ,w );};};if y < 0{h +=y ;y =0;if h <=0{return nil ,_e .Error (_geca ,"\u0079\u0020\u003c 0\u0020\u0061\u006e\u0064\u0020\u0062\u006f\u0078\u0020\u006f\u0066\u0066\u0020\u002b\u0071\u0075\u0061\u0064");
};};_gddb :=_ca .Rect (x ,y ,x +w ,y +h );return &_gddb ,nil ;};func (_gcgb MorphProcess )verify (_ffbf int ,_aebb ,_eccb *int )error {const _ecfeb ="\u004d\u006f\u0072\u0070hP\u0072\u006f\u0063\u0065\u0073\u0073\u002e\u0076\u0065\u0072\u0069\u0066\u0079";
switch _gcgb .Operation {case MopDilation ,MopErosion ,MopOpening ,MopClosing :if len (_gcgb .Arguments )!=2{return _e .Error (_ecfeb ,"\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0064\u0027\u002c\u0020\u0027\u0065\u0027\u002c \u0027\u006f\u0027\u002c\u0020\u0027\u0063\u0027\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0032\u0020\u0061r\u0067\u0075\u006d\u0065\u006et\u0073");
};_ebee ,_ggbd :=_gcgb .getWidthHeight ();if _ebee <=0||_ggbd <=0{return _e .Error (_ecfeb ,"O\u0070er\u0061t\u0069o\u006e\u003a\u0020\u0027\u0064'\u002c\u0020\u0027e\u0027\u002c\u0020\u0027\u006f'\u002c\u0020\u0027c\u0027\u0020\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0062\u006f\u0074h w\u0069\u0064\u0074\u0068\u0020\u0061n\u0064\u0020\u0068\u0065\u0069\u0067\u0068\u0074\u0020\u0074\u006f\u0020b\u0065 \u003e\u003d\u0020\u0030");
};case MopRankBinaryReduction :_aeac :=len (_gcgb .Arguments );*_aebb +=_aeac ;if _aeac < 1||_aeac > 4{return _e .Error (_ecfeb ,"\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0072\u0027\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u0031\u0020\u0061\u006e\u0064\u0020\u0061\u0074\u0020\u006d\u006fs\u0074\u0020\u0034\u0020\u0061\u0072g\u0075\u006d\u0065n\u0074\u0073");
};for _ffda :=0;_ffda < _aeac ;_ffda ++{if _gcgb .Arguments [_ffda ]< 1||_gcgb .Arguments [_ffda ]> 4{return _e .Error (_ecfeb ,"\u0052\u0061\u006e\u006b\u0042\u0069n\u0061\u0072\u0079\u0052\u0065\u0064\u0075\u0063\u0074\u0069\u006f\u006e\u0020\u006c\u0065\u0076\u0065\u006c\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065 \u00280\u002c\u0020\u0034\u003e");
};};case MopReplicativeBinaryExpansion :if len (_gcgb .Arguments )==0{return _e .Error (_ecfeb ,"\u0052\u0065\u0070\u006c\u0069\u0063\u0061\u0074i\u0076\u0065\u0042in\u0061\u0072\u0079\u0045\u0078\u0070a\u006e\u0073\u0069\u006f\u006e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020o\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_gafg :=_gcgb .Arguments [0];if _gafg !=2&&_gafg !=4&&_gafg !=8{return _e .Error (_ecfeb ,"R\u0065\u0070\u006c\u0069\u0063\u0061\u0074\u0069\u0076\u0065\u0042\u0069\u006e\u0061\u0072\u0079\u0045\u0078\u0070\u0061\u006e\u0073\u0069\u006f\u006e\u0020m\u0075s\u0074\u0020\u0062\u0065 \u006f\u0066 \u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d");
};*_aebb -=_ggfe [_gafg /4];case MopAddBorder :if len (_gcgb .Arguments )==0{return _e .Error (_ecfeb ,"\u0041\u0064\u0064B\u006f\u0072\u0064\u0065r\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fgfa :=_gcgb .Arguments [0];if _ffbf > 0{return _e .Error (_ecfeb ,"\u0041\u0064\u0064\u0042\u006f\u0072\u0064\u0065\u0072\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020f\u0069\u0072\u0073\u0074\u0020\u006d\u006f\u0072\u0070\u0068\u0020\u0070\u0072o\u0063\u0065\u0073\u0073");
};if _fgfa < 1{return _e .Error (_ecfeb ,"\u0041\u0064\u0064\u0042o\u0072\u0064\u0065\u0072\u0020\u0076\u0061\u006c\u0075\u0065 \u006co\u0077\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u0030");};*_eccb =_fgfa ;};return nil ;};func TstESymbol (t *_c .T ,scale ...int )*Bitmap {_ecaa ,_bebe :=NewWithData (4,5,[]byte {0xF0,0x80,0xE0,0x80,0xF0});
_ea .NoError (t ,_bebe );return TstGetScaledSymbol (t ,_ecaa ,scale ...);};func (_edgfe *Bitmaps )HeightSorter ()func (_baacd ,_ggbe int )bool {return func (_beda ,_daeg int )bool {_ecebf :=_edgfe .Values [_beda ].Height < _edgfe .Values [_daeg ].Height ;
_cg .Log .Debug ("H\u0065i\u0067\u0068\u0074\u003a\u0020\u0025\u0076\u0020<\u0020\u0025\u0076\u0020= \u0025\u0076",_edgfe .Values [_beda ].Height ,_edgfe .Values [_daeg ].Height ,_ecebf );return _ecebf ;};};type fillSegment struct{_fbbe int ;_deef int ;
_cfgb int ;_bfbfc int ;};func (_fdff *Bitmap )Copy ()*Bitmap {_dfb :=make ([]byte ,len (_fdff .Data ));copy (_dfb ,_fdff .Data );return &Bitmap {Width :_fdff .Width ,Height :_fdff .Height ,RowStride :_fdff .RowStride ,Data :_dfb ,Color :_fdff .Color ,Text :_fdff .Text ,BitmapNumber :_fdff .BitmapNumber ,Special :_fdff .Special };
};func TstWSymbol (t *_c .T ,scale ...int )*Bitmap {_dcabc ,_gbdaf :=NewWithData (5,5,[]byte {0x88,0x88,0xA8,0xD8,0x88});_ea .NoError (t ,_gbdaf );return TstGetScaledSymbol (t ,_dcabc ,scale ...);};func (_gge *Bitmap )ToImage ()_ca .Image {_bdb ,_gdd :=_a .NewImage (_gge .Width ,_gge .Height ,1,1,_gge .Data ,nil ,nil );
if _gdd !=nil {_cg .Log .Error ("\u0043\u006f\u006e\u0076\u0065\u0072\u0074\u0069\u006e\u0067\u0020j\u0062\u0069\u0067\u0032\u002e\u0042\u0069\u0074m\u0061p\u0020\u0074\u006f\u0020\u0069\u006d\u0061\u0067\u0065\u0075\u0074\u0069\u006c\u002e\u0049\u006d\u0061\u0067e\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_gdd );
};return _bdb ;};func (_abfg *Bitmap )GetVanillaData ()[]byte {if _abfg .Color ==Chocolate {_abfg .inverseData ();};return _abfg .Data ;};func _ffde (_cebg ,_fcff *Bitmap ,_faa ,_acb ,_gfc ,_cagd ,_dcge ,_eadcg ,_fgeb ,_bfbd int ,_fde CombinationOperator ,_cgbf int )error {var _cec int ;
_fdaeg :=func (){_cec ++;_gfc +=_fcff .RowStride ;_cagd +=_cebg .RowStride ;_dcge +=_cebg .RowStride };for _cec =_faa ;_cec < _acb ;_fdaeg (){var _fedc uint16 ;_ebce :=_gfc ;for _ccda :=_cagd ;_ccda <=_dcge ;_ccda ++{_feed ,_acbd :=_fcff .GetByte (_ebce );
if _acbd !=nil {return _acbd ;};_fcg ,_acbd :=_cebg .GetByte (_ccda );if _acbd !=nil {return _acbd ;};_fedc =(_fedc |(uint16 (_fcg )&0xff))<<uint (_bfbd );_fcg =byte (_fedc >>8);if _acbd =_fcff .SetByte (_ebce ,_baga (_feed ,_fcg ,_fde ));_acbd !=nil {return _acbd ;
};_ebce ++;_fedc <<=uint (_fgeb );if _ccda ==_dcge {_fcg =byte (_fedc >>(8-uint8 (_bfbd )));if _cgbf !=0{_fcg =_dcea (uint (8+_eadcg ),_fcg );};_feed ,_acbd =_fcff .GetByte (_ebce );if _acbd !=nil {return _acbd ;};if _acbd =_fcff .SetByte (_ebce ,_baga (_feed ,_fcg ,_fde ));
_acbd !=nil {return _acbd ;};};};};return nil ;};func _agff (_gcaa ,_fgdb *Bitmap ,_bfccb ,_fbce int )(_defb error ){const _bfad ="\u0073e\u0065d\u0066\u0069\u006c\u006c\u0042i\u006e\u0061r\u0079\u004c\u006f\u0077\u0034";var (_fdbea ,_fbff ,_bgfd ,_bdd int ;
_fdgdfa ,_caeeg ,_cegcg ,_ffbgfa ,_geae ,_gdff ,_bccg byte ;);for _fdbea =0;_fdbea < _bfccb ;_fdbea ++{_bgfd =_fdbea *_gcaa .RowStride ;_bdd =_fdbea *_fgdb .RowStride ;for _fbff =0;_fbff < _fbce ;_fbff ++{_fdgdfa ,_defb =_gcaa .GetByte (_bgfd +_fbff );
if _defb !=nil {return _e .Wrap (_defb ,_bfad ,"\u0066i\u0072\u0073\u0074\u0020\u0067\u0065t");};_caeeg ,_defb =_fgdb .GetByte (_bdd +_fbff );if _defb !=nil {return _e .Wrap (_defb ,_bfad ,"\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0067\u0065\u0074");
};if _fdbea > 0{_cegcg ,_defb =_gcaa .GetByte (_bgfd -_gcaa .RowStride +_fbff );if _defb !=nil {return _e .Wrap (_defb ,_bfad ,"\u0069\u0020\u003e \u0030");};_fdgdfa |=_cegcg ;};if _fbff > 0{_ffbgfa ,_defb =_gcaa .GetByte (_bgfd +_fbff -1);if _defb !=nil {return _e .Wrap (_defb ,_bfad ,"\u006a\u0020\u003e \u0030");
};_fdgdfa |=_ffbgfa <<7;};_fdgdfa &=_caeeg ;if _fdgdfa ==0||(^_fdgdfa )==0{if _defb =_gcaa .SetByte (_bgfd +_fbff ,_fdgdfa );_defb !=nil {return _e .Wrap (_defb ,_bfad ,"b\u0074\u0020\u003d\u003d 0\u0020|\u007c\u0020\u0028\u005e\u0062t\u0029\u0020\u003d\u003d\u0020\u0030");
};continue ;};for {_bccg =_fdgdfa ;_fdgdfa =(_fdgdfa |(_fdgdfa >>1)|(_fdgdfa <<1))&_caeeg ;if (_fdgdfa ^_bccg )==0{if _defb =_gcaa .SetByte (_bgfd +_fbff ,_fdgdfa );_defb !=nil {return _e .Wrap (_defb ,_bfad ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0070\u0072\u0065\u0076 \u0062\u0079\u0074\u0065");
};break ;};};};};for _fdbea =_bfccb -1;_fdbea >=0;_fdbea --{_bgfd =_fdbea *_gcaa .RowStride ;_bdd =_fdbea *_fgdb .RowStride ;for _fbff =_fbce -1;_fbff >=0;_fbff --{if _fdgdfa ,_defb =_gcaa .GetByte (_bgfd +_fbff );_defb !=nil {return _e .Wrap (_defb ,_bfad ,"\u0072\u0065\u0076\u0065\u0072\u0073\u0065\u0020\u0066\u0069\u0072\u0073t\u0020\u0067\u0065\u0074");
};if _caeeg ,_defb =_fgdb .GetByte (_bdd +_fbff );_defb !=nil {return _e .Wrap (_defb ,_bfad ,"r\u0065\u0076\u0065\u0072se\u0020g\u0065\u0074\u0020\u006d\u0061s\u006b\u0020\u0062\u0079\u0074\u0065");};if _fdbea < _bfccb -1{if _geae ,_defb =_gcaa .GetByte (_bgfd +_gcaa .RowStride +_fbff );
_defb !=nil {return _e .Wrap (_defb ,_bfad ,"\u0072\u0065v\u0065\u0072\u0073e\u0020\u0069\u0020\u003c\u0020\u0068\u0020\u002d\u0031");};_fdgdfa |=_geae ;};if _fbff < _fbce -1{if _gdff ,_defb =_gcaa .GetByte (_bgfd +_fbff +1);_defb !=nil {return _e .Wrap (_defb ,_bfad ,"\u0072\u0065\u0076\u0065rs\u0065\u0020\u006a\u0020\u003c\u0020\u0077\u0070\u006c\u0020\u002d\u0020\u0031");
};_fdgdfa |=_gdff >>7;};_fdgdfa &=_caeeg ;if _fdgdfa ==0||(^_fdgdfa )==0{if _defb =_gcaa .SetByte (_bgfd +_fbff ,_fdgdfa );_defb !=nil {return _e .Wrap (_defb ,_bfad ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006d\u0061\u0073k\u0065\u0064\u0020\u0062\u0079\u0074\u0065\u0020\u0066\u0061i\u006c\u0065\u0064");
};continue ;};for {_bccg =_fdgdfa ;_fdgdfa =(_fdgdfa |(_fdgdfa >>1)|(_fdgdfa <<1))&_caeeg ;if (_fdgdfa ^_bccg )==0{if _defb =_gcaa .SetByte (_bgfd +_fbff ,_fdgdfa );_defb !=nil {return _e .Wrap (_defb ,_bfad ,"\u0072e\u0076\u0065\u0072\u0073e\u0020\u0073\u0065\u0074\u0074i\u006eg\u0020p\u0072\u0065\u0076\u0020\u0062\u0079\u0074e");
};break ;};};};};return nil ;};func (_abff *byHeight )Swap (i ,j int ){_abff .Values [i ],_abff .Values [j ]=_abff .Values [j ],_abff .Values [i ];if _abff .Boxes !=nil {_abff .Boxes [i ],_abff .Boxes [j ]=_abff .Boxes [j ],_abff .Boxes [i ];};};func _efac (_bgfb ,_acfc *Bitmap ,_aaae *Selection )(*Bitmap ,error ){const _edec ="\u0065\u0072\u006fd\u0065";
var (_fgce error ;_afgd *Bitmap ;);_bgfb ,_fgce =_aceg (_bgfb ,_acfc ,_aaae ,&_afgd );if _fgce !=nil {return nil ,_e .Wrap (_fgce ,_edec ,"");};if _fgce =_bgfb .setAll ();_fgce !=nil {return nil ,_e .Wrap (_fgce ,_edec ,"");};var _bcec SelectionValue ;
for _dgga :=0;_dgga < _aaae .Height ;_dgga ++{for _bdebc :=0;_bdebc < _aaae .Width ;_bdebc ++{_bcec =_aaae .Data [_dgga ][_bdebc ];if _bcec ==SelHit {_fgce =_agdc (_bgfb ,_aaae .Cx -_bdebc ,_aaae .Cy -_dgga ,_acfc .Width ,_acfc .Height ,PixSrcAndDst ,_afgd ,0,0);
if _fgce !=nil {return nil ,_e .Wrap (_fgce ,_edec ,"");};};};};if MorphBC ==SymmetricMorphBC {return _bgfb ,nil ;};_edef ,_bbbe ,_ceba ,_abcdb :=_aaae .findMaxTranslations ();if _edef > 0{if _fgce =_bgfb .RasterOperation (0,0,_edef ,_acfc .Height ,PixClr ,nil ,0,0);
_fgce !=nil {return nil ,_e .Wrap (_fgce ,_edec ,"\u0078\u0070\u0020\u003e\u0020\u0030");};};if _ceba > 0{if _fgce =_bgfb .RasterOperation (_acfc .Width -_ceba ,0,_ceba ,_acfc .Height ,PixClr ,nil ,0,0);_fgce !=nil {return nil ,_e .Wrap (_fgce ,_edec ,"\u0078\u006e\u0020\u003e\u0020\u0030");
};};if _bbbe > 0{if _fgce =_bgfb .RasterOperation (0,0,_acfc .Width ,_bbbe ,PixClr ,nil ,0,0);_fgce !=nil {return nil ,_e .Wrap (_fgce ,_edec ,"\u0079\u0070\u0020\u003e\u0020\u0030");};};if _abcdb > 0{if _fgce =_bgfb .RasterOperation (0,_acfc .Height -_abcdb ,_acfc .Width ,_abcdb ,PixClr ,nil ,0,0);
_fgce !=nil {return nil ,_e .Wrap (_fgce ,_edec ,"\u0079\u006e\u0020\u003e\u0020\u0030");};};return _bgfb ,nil ;};func (_feca *byWidth )Swap (i ,j int ){_feca .Values [i ],_feca .Values [j ]=_feca .Values [j ],_feca .Values [i ];if _feca .Boxes !=nil {_feca .Boxes [i ],_feca .Boxes [j ]=_feca .Boxes [j ],_feca .Boxes [i ];
};};func (_edcge *Bitmaps )String ()string {_cbad :=_b .Builder {};for _ ,_eegd :=range _edcge .Values {_cbad .WriteString (_eegd .String ());_cbad .WriteRune ('\n');};return _cbad .String ();};func (_edcc *BitmapsArray )AddBox (box *_ca .Rectangle ){_edcc .Boxes =append (_edcc .Boxes ,box )};
func (_edbb *Bitmap )centroid (_eccf ,_gdaf []int )(Point ,error ){_faf :=Point {};_edbb .setPadBits (0);if len (_eccf )==0{_eccf =_dfdd ();};if len (_gdaf )==0{_gdaf =_bdga ();};var _efeca ,_bebg ,_daee ,_adae ,_gfgag ,_fdbg int ;var _gbeg byte ;for _gfgag =0;
_gfgag < _edbb .Height ;_gfgag ++{_dcgeb :=_edbb .RowStride *_gfgag ;_adae =0;for _fdbg =0;_fdbg < _edbb .RowStride ;_fdbg ++{_gbeg =_edbb .Data [_dcgeb +_fdbg ];if _gbeg !=0{_adae +=_gdaf [_gbeg ];_efeca +=_eccf [_gbeg ]+_fdbg *8*_gdaf [_gbeg ];};};_daee +=_adae ;
_bebg +=_adae *_gfgag ;};if _daee !=0{_faf .X =float32 (_efeca )/float32 (_daee );_faf .Y =float32 (_bebg )/float32 (_daee );};return _faf ,nil ;};func _cffa (_ceda *Bitmap ,_gbdff ,_defd int ,_efbg ,_ccfg int ,_edd RasterOperator ,_beaa *Bitmap ,_bbae ,_ebfc int )error {var _ddag ,_ecb ,_babg ,_fege int ;
if _gbdff < 0{_bbae -=_gbdff ;_efbg +=_gbdff ;_gbdff =0;};if _bbae < 0{_gbdff -=_bbae ;_efbg +=_bbae ;_bbae =0;};_ddag =_gbdff +_efbg -_ceda .Width ;if _ddag > 0{_efbg -=_ddag ;};_ecb =_bbae +_efbg -_beaa .Width ;if _ecb > 0{_efbg -=_ecb ;};if _defd < 0{_ebfc -=_defd ;
_ccfg +=_defd ;_defd =0;};if _ebfc < 0{_defd -=_ebfc ;_ccfg +=_ebfc ;_ebfc =0;};_babg =_defd +_ccfg -_ceda .Height ;if _babg > 0{_ccfg -=_babg ;};_fege =_ebfc +_ccfg -_beaa .Height ;if _fege > 0{_ccfg -=_fege ;};if _efbg <=0||_ccfg <=0{return nil ;};var _cbec error ;
switch {case _gbdff &7==0&&_bbae &7==0:_cbec =_cbfc (_ceda ,_gbdff ,_defd ,_efbg ,_ccfg ,_edd ,_beaa ,_bbae ,_ebfc );case _gbdff &7==_bbae &7:_cbec =_cafde (_ceda ,_gbdff ,_defd ,_efbg ,_ccfg ,_edd ,_beaa ,_bbae ,_ebfc );default:_cbec =_bceg (_ceda ,_gbdff ,_defd ,_efbg ,_ccfg ,_edd ,_beaa ,_bbae ,_ebfc );
};if _cbec !=nil {return _e .Wrap (_cbec ,"r\u0061\u0073\u0074\u0065\u0072\u004f\u0070\u004c\u006f\u0077","");};return nil ;};func TstNSymbol (t *_c .T ,scale ...int )*Bitmap {_gfgf ,_deaf :=NewWithData (4,5,[]byte {0x90,0xD0,0xB0,0x90,0x90});_ea .NoError (t ,_deaf );
return TstGetScaledSymbol (t ,_gfgf ,scale ...);};func TstRSymbol (t *_c .T ,scale ...int )*Bitmap {_feae ,_dfbe :=NewWithData (4,5,[]byte {0xF0,0x90,0xF0,0xA0,0x90});_ea .NoError (t ,_dfbe );return TstGetScaledSymbol (t ,_feae ,scale ...);};type Bitmap struct{Width ,Height int ;
BitmapNumber int ;RowStride int ;Data []byte ;Color Color ;Special int ;Text string ;XResolution ,YResolution int ;};func (_fdag *Bitmap )nextOnPixel (_eaff ,_fdgc int )(_agec _ca .Point ,_gbbf bool ,_gead error ){const _bffc ="n\u0065\u0078\u0074\u004f\u006e\u0050\u0069\u0078\u0065\u006c";
_agec ,_gbbf ,_gead =_fdag .nextOnPixelLow (_fdag .Width ,_fdag .Height ,_fdag .RowStride ,_eaff ,_fdgc );if _gead !=nil {return _agec ,false ,_e .Wrap (_gead ,_bffc ,"");};return _agec ,_gbbf ,nil ;};func init (){const _eadfc ="\u0062\u0069\u0074\u006dap\u0073\u002e\u0069\u006e\u0069\u0074\u0069\u0061\u006c\u0069\u007a\u0061\u0074\u0069o\u006e";
_caca =New (50,40);var _dgecb error ;_caca ,_dgecb =_caca .AddBorder (2,1);if _dgecb !=nil {panic (_e .Wrap (_dgecb ,_eadfc ,"f\u0072\u0061\u006d\u0065\u0042\u0069\u0074\u006d\u0061\u0070"));};_cfbf ,_dgecb =NewWithData (50,22,_acffg );if _dgecb !=nil {panic (_e .Wrap (_dgecb ,_eadfc ,"i\u006d\u0061\u0067\u0065\u0042\u0069\u0074\u006d\u0061\u0070"));
};};func NewWithData (width ,height int ,data []byte )(*Bitmap ,error ){const _ecf ="N\u0065\u0077\u0057\u0069\u0074\u0068\u0044\u0061\u0074\u0061";_cffe :=_aafe (width ,height );_cffe .Data =data ;if len (data )< height *_cffe .RowStride {return nil ,_e .Errorf (_ecf ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064\u0061\u0074\u0061\u0020l\u0065\u006e\u0067\u0074\u0068\u003a \u0025\u0064\u0020\u002d\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e\u003a\u0020\u0025\u0064",len (data ),height *_cffe .RowStride );
};return _cffe ,nil ;};type Bitmaps struct{Values []*Bitmap ;Boxes []*_ca .Rectangle ;};func (_gcgg *Bitmap )nextOnPixelLow (_gca ,_feg ,_bdbg ,_ddd ,_abc int )(_adge _ca .Point ,_cegc bool ,_abcd error ){const _acg ="B\u0069\u0074\u006d\u0061p.\u006ee\u0078\u0074\u004f\u006e\u0050i\u0078\u0065\u006c\u004c\u006f\u0077";
var (_aeba int ;_cdg byte ;);_afb :=_abc *_bdbg ;_cacg :=_afb +(_ddd /8);if _cdg ,_abcd =_gcgg .GetByte (_cacg );_abcd !=nil {return _adge ,false ,_e .Wrap (_abcd ,_acg ,"\u0078\u0053\u0074\u0061\u0072\u0074\u0020\u0061\u006e\u0064 \u0079\u0053\u0074\u0061\u0072\u0074\u0020o\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065");
};if _cdg !=0{_gdce :=_ddd -(_ddd %8)+7;for _aeba =_ddd ;_aeba <=_gdce &&_aeba < _gca ;_aeba ++{if _gcgg .GetPixel (_aeba ,_abc ){_adge .X =_aeba ;_adge .Y =_abc ;return _adge ,true ,nil ;};};};_adcc :=(_ddd /8)+1;_aeba =8*_adcc ;var _fed int ;for _cacg =_afb +_adcc ;
_aeba < _gca ;_cacg ,_aeba =_cacg +1,_aeba +8{if _cdg ,_abcd =_gcgg .GetByte (_cacg );_abcd !=nil {return _adge ,false ,_e .Wrap (_abcd ,_acg ,"r\u0065\u0073\u0074\u0020of\u0020t\u0068\u0065\u0020\u006c\u0069n\u0065\u0020\u0062\u0079\u0074\u0065");};if _cdg ==0{continue ;
};for _fed =0;_fed < 8&&_aeba < _gca ;_fed ,_aeba =_fed +1,_aeba +1{if _gcgg .GetPixel (_aeba ,_abc ){_adge .X =_aeba ;_adge .Y =_abc ;return _adge ,true ,nil ;};};};for _bbdc :=_abc +1;_bbdc < _feg ;_bbdc ++{_afb =_bbdc *_bdbg ;for _cacg ,_aeba =_afb ,0;
_aeba < _gca ;_cacg ,_aeba =_cacg +1,_aeba +8{if _cdg ,_abcd =_gcgg .GetByte (_cacg );_abcd !=nil {return _adge ,false ,_e .Wrap (_abcd ,_acg ,"\u0066o\u006cl\u006f\u0077\u0069\u006e\u0067\u0020\u006c\u0069\u006e\u0065\u0073");};if _cdg ==0{continue ;};
for _fed =0;_fed < 8&&_aeba < _gca ;_fed ,_aeba =_fed +1,_aeba +1{if _gcgg .GetPixel (_aeba ,_bbdc ){_adge .X =_aeba ;_adge .Y =_bbdc ;return _adge ,true ,nil ;};};};};return _adge ,false ,nil ;};func (_afdf *Bitmaps )SortByWidth (){_agde :=(*byWidth )(_afdf );
_cc .Sort (_agde )};type Selection struct{Height ,Width int ;Cx ,Cy int ;Name string ;Data [][]SelectionValue ;};var (_caca *Bitmap ;_cfbf *Bitmap ;);func TstOSymbol (t *_c .T ,scale ...int )*Bitmap {_dbge ,_fcge :=NewWithData (4,5,[]byte {0xF0,0x90,0x90,0x90,0xF0});
_ea .NoError (t ,_fcge );return TstGetScaledSymbol (t ,_dbge ,scale ...);};func (_bdf *Bitmap )ConnComponents (bms *Bitmaps ,connectivity int )(_cbe *Boxes ,_dbeb error ){const _gcb ="B\u0069\u0074\u006d\u0061p.\u0043o\u006e\u006e\u0043\u006f\u006dp\u006f\u006e\u0065\u006e\u0074\u0073";
if _bdf ==nil {return nil ,_e .Error (_gcb ,"\u0070r\u006f\u0076\u0069\u0064e\u0064\u0020\u0065\u006d\u0070t\u0079 \u0027b\u0027\u0020\u0062\u0069\u0074\u006d\u0061p");};if connectivity !=4&&connectivity !=8{return nil ,_e .Error (_gcb ,"\u0063\u006f\u006ene\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u006e\u006f\u0074\u0020\u0034\u0020\u006f\u0072\u0020\u0038");
};if bms ==nil {if _cbe ,_dbeb =_bdf .connComponentsBB (connectivity );_dbeb !=nil {return nil ,_e .Wrap (_dbeb ,_gcb ,"");};}else {if _cbe ,_dbeb =_bdf .connComponentsBitmapsBB (bms ,connectivity );_dbeb !=nil {return nil ,_e .Wrap (_dbeb ,_gcb ,"");};
};return _cbe ,nil ;};func (_dddec *Bitmaps )WidthSorter ()func (_fegb ,_gebe int )bool {return func (_bbfff ,_debbe int )bool {return _dddec .Values [_bbfff ].Width < _dddec .Values [_debbe ].Width };};func (_eaef Points )GetIntX (i int )(int ,error ){if i >=len (_eaef ){return 0,_e .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065t\u0049\u006e\u0074\u0058","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return int (_eaef [i ].X ),nil ;};func (_dfadb Points )YSorter ()func (_dacg ,_feeg int )bool {return func (_caage ,_cdaf int )bool {return _dfadb [_caage ].Y < _dfadb [_cdaf ].Y };};func (_fgca *ClassedPoints )GetIntYByClass (i int )(int ,error ){const _ecebc ="\u0043\u006c\u0061\u0073s\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047e\u0074I\u006e\u0074\u0059\u0042\u0079\u0043\u006ca\u0073\u0073";
if i >=_fgca .IntSlice .Size (){return 0,_e .Errorf (_ecebc ,"\u0069\u003a\u0020\u0027\u0025\u0064\u0027 \u0069\u0073\u0020o\u0075\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065",i );
};return int (_fgca .YAtIndex (i )),nil ;};func (_bffcc Points )GetGeometry (i int )(_ecec ,_bgcg float32 ,_acgd error ){if i > len (_bffcc )-1{return 0,0,_e .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};_dbce :=_bffcc [i ];return _dbce .X ,_dbce .Y ,nil ;};type SelectionValue int ;func _gfaf (_ade ,_edb *Bitmap ,_eebb int ,_adec []byte ,_bd int )(_gbf error ){const _efa ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0032";
var (_gdb ,_dce ,_fbf ,_be ,_fgd ,_dcc ,_ace ,_ffgb int ;_aed ,_bgf ,_fff ,_ba uint32 ;_gea ,_cffb byte ;_dafg uint16 ;);_fbe :=make ([]byte ,4);_egd :=make ([]byte ,4);for _fbf =0;_fbf < _ade .Height -1;_fbf ,_be =_fbf +2,_be +1{_gdb =_fbf *_ade .RowStride ;
_dce =_be *_edb .RowStride ;for _fgd ,_dcc =0,0;_fgd < _bd ;_fgd ,_dcc =_fgd +4,_dcc +1{for _ace =0;_ace < 4;_ace ++{_ffgb =_gdb +_fgd +_ace ;if _ffgb <=len (_ade .Data )-1&&_ffgb < _gdb +_ade .RowStride {_fbe [_ace ]=_ade .Data [_ffgb ];}else {_fbe [_ace ]=0x00;
};_ffgb =_gdb +_ade .RowStride +_fgd +_ace ;if _ffgb <=len (_ade .Data )-1&&_ffgb < _gdb +(2*_ade .RowStride ){_egd [_ace ]=_ade .Data [_ffgb ];}else {_egd [_ace ]=0x00;};};_aed =_cf .BigEndian .Uint32 (_fbe );_bgf =_cf .BigEndian .Uint32 (_egd );_fff =_aed &_bgf ;
_fff |=_fff <<1;_ba =_aed |_bgf ;_ba &=_ba <<1;_bgf =_fff |_ba ;_bgf &=0xaaaaaaaa;_aed =_bgf |(_bgf <<7);_gea =byte (_aed >>24);_cffb =byte ((_aed >>8)&0xff);_ffgb =_dce +_dcc ;if _ffgb +1==len (_edb .Data )-1||_ffgb +1>=_dce +_edb .RowStride {if _gbf =_edb .SetByte (_ffgb ,_adec [_gea ]);
_gbf !=nil {return _e .Wrapf (_gbf ,_efa ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_ffgb );};}else {_dafg =(uint16 (_adec [_gea ])<<8)|uint16 (_adec [_cffb ]);if _gbf =_edb .setTwoBytes (_ffgb ,_dafg );_gbf !=nil {return _e .Wrapf (_gbf ,_efa ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_ffgb );
};_dcc ++;};};};return nil ;};func RasterOperation (dest *Bitmap ,dx ,dy ,dw ,dh int ,op RasterOperator ,src *Bitmap ,sx ,sy int )error {return _agdc (dest ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );};type SizeSelection int ;type CombinationOperator int ;type MorphProcess struct{Operation MorphOperation ;
Arguments []int ;};func SelCreateBrick (h ,w int ,cy ,cx int ,tp SelectionValue )*Selection {_feafg :=_ggfd (h ,w ,"");_feafg .setOrigin (cy ,cx );var _cadc ,_ebcd int ;for _cadc =0;_cadc < h ;_cadc ++{for _ebcd =0;_ebcd < w ;_ebcd ++{_feafg .Data [_cadc ][_ebcd ]=tp ;
};};return _feafg ;};func _dgead (_gebcd *_d .Stack )(_gdgac *fillSegment ,_bdbe error ){const _fdca ="\u0070\u006f\u0070\u0046\u0069\u006c\u006c\u0053\u0065g\u006d\u0065\u006e\u0074";if _gebcd ==nil {return nil ,_e .Error (_fdca ,"\u006ei\u006c \u0073\u0074\u0061\u0063\u006b \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");
};if _gebcd .Aux ==nil {return nil ,_e .Error (_fdca ,"a\u0075x\u0053\u0074\u0061\u0063\u006b\u0020\u006e\u006ft\u0020\u0064\u0065\u0066in\u0065\u0064");};_acda ,_bfga :=_gebcd .Pop ();if !_bfga {return nil ,nil ;};_agcdg ,_bfga :=_acda .(*fillSegment );
if !_bfga {return nil ,_e .Error (_fdca ,"\u0073\u0074\u0061ck\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020c\u006fn\u0074a\u0069n\u0020\u002a\u0066\u0069\u006c\u006c\u0053\u0065\u0067\u006d\u0065\u006e\u0074");};_gdgac =&fillSegment {_agcdg ._fbbe ,_agcdg ._deef ,_agcdg ._cfgb +_agcdg ._bfbfc ,_agcdg ._bfbfc };
_gebcd .Aux .Push (_agcdg );return _gdgac ,nil ;};func _aafe (_aea ,_bgee int )*Bitmap {return &Bitmap {Width :_aea ,Height :_bgee ,RowStride :(_aea +7)>>3};};