//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package bitmap ;import (_de "encoding/binary";_ba "github.com/stretchr/testify/require";_aa "github.com/unidoc/unipdf/v3/common";_c "github.com/unidoc/unipdf/v3/internal/bitwise";_db "github.com/unidoc/unipdf/v3/internal/imageutil";_d "github.com/unidoc/unipdf/v3/internal/jbig2/basic";
_b "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_ff "image";_fg "math";_bg "sort";_a "strings";_bc "testing";);func (_fggd *byWidth )Less (i ,j int )bool {return _fggd .Values [i ].Width < _fggd .Values [j ].Width };func TstISymbol (t *_bc .T ,scale ...int )*Bitmap {_badd ,_becb :=NewWithData (1,5,[]byte {0x80,0x80,0x80,0x80,0x80});
_ba .NoError (t ,_becb );return TstGetScaledSymbol (t ,_badd ,scale ...);};func _bfb (_agg ,_cff *Bitmap )(_bd error ){const _ffd ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0034";_efc :=_cff .RowStride ;
_ee :=_agg .RowStride ;_dac :=_cff .RowStride *4-_agg .RowStride ;var (_ga ,_ad byte ;_fd uint32 ;_fdf ,_gg ,_gd ,_dgd ,_cd ,_eff ,_fdfc int ;);for _gd =0;_gd < _cff .Height ;_gd ++{_fdf =_gd *_efc ;_gg =4*_gd *_ee ;for _dgd =0;_dgd < _efc ;_dgd ++{_ga =_cff .Data [_fdf +_dgd ];
_fd =_edgg [_ga ];_eff =_gg +_dgd *4;if _dac !=0&&(_dgd +1)*4> _agg .RowStride {for _cd =_dac ;_cd > 0;_cd --{_ad =byte ((_fd >>uint (_cd *8))&0xff);_fdfc =_eff +(_dac -_cd );if _bd =_agg .SetByte (_fdfc ,_ad );_bd !=nil {return _b .Wrapf (_bd ,_ffd ,"D\u0069\u0066\u0066\u0065\u0072\u0065n\u0074\u0020\u0072\u006f\u0077\u0073\u0074\u0072\u0069d\u0065\u0073\u002e \u004b:\u0020\u0025\u0064",_cd );
};};}else if _bd =_agg .setFourBytes (_eff ,_fd );_bd !=nil {return _b .Wrap (_bd ,_ffd ,"");};if _bd =_agg .setFourBytes (_gg +_dgd *4,_edgg [_cff .Data [_fdf +_dgd ]]);_bd !=nil {return _b .Wrap (_bd ,_ffd ,"");};};for _cd =1;_cd < 4;_cd ++{for _dgd =0;
_dgd < _ee ;_dgd ++{if _bd =_agg .SetByte (_gg +_cd *_ee +_dgd ,_agg .Data [_gg +_dgd ]);_bd !=nil {return _b .Wrapf (_bd ,_ffd ,"\u0063\u006f\u0070\u0079\u0020\u0027\u0071\u0075\u0061\u0064\u0072\u0061\u0062l\u0065\u0027\u0020\u006c\u0069\u006ee\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0062\u0079\u0074\u0065\u003a \u0027\u0025\u0064\u0027",_cd ,_dgd );
};};};};return nil ;};func _gaab (_defbb *Bitmap ,_gcae ,_baba ,_bdd ,_acfae int ,_fcfa RasterOperator ){if _gcae < 0{_bdd +=_gcae ;_gcae =0;};_cbc :=_gcae +_bdd -_defbb .Width ;if _cbc > 0{_bdd -=_cbc ;};if _baba < 0{_acfae +=_baba ;_baba =0;};_fddf :=_baba +_acfae -_defbb .Height ;
if _fddf > 0{_acfae -=_fddf ;};if _bdd <=0||_acfae <=0{return ;};if (_gcae &7)==0{_gaef (_defbb ,_gcae ,_baba ,_bdd ,_acfae ,_fcfa );}else {_ceeg (_defbb ,_gcae ,_baba ,_bdd ,_acfae ,_fcfa );};};const _agcb =5000;func _ebegf (_fgdg *Bitmap ,_dcc ,_adfd ,_beae ,_fgcd int ,_gfbc RasterOperator ,_bdbb *Bitmap ,_eegfb ,_bbaec int )error {var (_fdac bool ;
_fbdaf bool ;_abegd byte ;_dbgb int ;_ddfa int ;_adad int ;_defb int ;_gggb bool ;_efggfd int ;_eebg int ;_eecb int ;_abcc bool ;_bbbc byte ;_abfc int ;_ffef int ;_ebefb int ;_gcfe byte ;_dbbg int ;_agdb int ;_adge uint ;_eeca uint ;_egad byte ;_cagcf shift ;
_dabg bool ;_ecag bool ;_aegg ,_faee int ;);if _eegfb &7!=0{_agdb =8-(_eegfb &7);};if _dcc &7!=0{_ddfa =8-(_dcc &7);};if _agdb ==0&&_ddfa ==0{_egad =_gceg [0];}else {if _ddfa > _agdb {_adge =uint (_ddfa -_agdb );}else {_adge =uint (8-(_agdb -_ddfa ));};
_eeca =8-_adge ;_egad =_gceg [_adge ];};if (_dcc &7)!=0{_fdac =true ;_dbgb =8-(_dcc &7);_abegd =_gceg [_dbgb ];_adad =_fgdg .RowStride *_adfd +(_dcc >>3);_defb =_bdbb .RowStride *_bbaec +(_eegfb >>3);_dbbg =8-(_eegfb &7);if _dbgb > _dbbg {_cagcf =_ade ;
if _beae >=_agdb {_dabg =true ;};}else {_cagcf =_eadcc ;};};if _beae < _dbgb {_fbdaf =true ;_abegd &=_bffg [8-_dbgb +_beae ];};if !_fbdaf {_efggfd =(_beae -_dbgb )>>3;if _efggfd !=0{_gggb =true ;_eebg =_fgdg .RowStride *_adfd +((_dcc +_ddfa )>>3);_eecb =_bdbb .RowStride *_bbaec +((_eegfb +_ddfa )>>3);
};};_abfc =(_dcc +_beae )&7;if !(_fbdaf ||_abfc ==0){_abcc =true ;_bbbc =_bffg [_abfc ];_ffef =_fgdg .RowStride *_adfd +((_dcc +_ddfa )>>3)+_efggfd ;_ebefb =_bdbb .RowStride *_bbaec +((_eegfb +_ddfa )>>3)+_efggfd ;if _abfc > int (_eeca ){_ecag =true ;};
};switch _gfbc {case PixSrc :if _fdac {for _aegg =0;_aegg < _fgcd ;_aegg ++{if _cagcf ==_ade {_gcfe =_bdbb .Data [_defb ]<<_adge ;if _dabg {_gcfe =_bbbaf (_gcfe ,_bdbb .Data [_defb +1]>>_eeca ,_egad );};}else {_gcfe =_bdbb .Data [_defb ]>>_eeca ;};_fgdg .Data [_adad ]=_bbbaf (_fgdg .Data [_adad ],_gcfe ,_abegd );
_adad +=_fgdg .RowStride ;_defb +=_bdbb .RowStride ;};};if _gggb {for _aegg =0;_aegg < _fgcd ;_aegg ++{for _faee =0;_faee < _efggfd ;_faee ++{_gcfe =_bbbaf (_bdbb .Data [_eecb +_faee ]<<_adge ,_bdbb .Data [_eecb +_faee +1]>>_eeca ,_egad );_fgdg .Data [_eebg +_faee ]=_gcfe ;
};_eebg +=_fgdg .RowStride ;_eecb +=_bdbb .RowStride ;};};if _abcc {for _aegg =0;_aegg < _fgcd ;_aegg ++{_gcfe =_bdbb .Data [_ebefb ]<<_adge ;if _ecag {_gcfe =_bbbaf (_gcfe ,_bdbb .Data [_ebefb +1]>>_eeca ,_egad );};_fgdg .Data [_ffef ]=_bbbaf (_fgdg .Data [_ffef ],_gcfe ,_bbbc );
_ffef +=_fgdg .RowStride ;_ebefb +=_bdbb .RowStride ;};};case PixNotSrc :if _fdac {for _aegg =0;_aegg < _fgcd ;_aegg ++{if _cagcf ==_ade {_gcfe =_bdbb .Data [_defb ]<<_adge ;if _dabg {_gcfe =_bbbaf (_gcfe ,_bdbb .Data [_defb +1]>>_eeca ,_egad );};}else {_gcfe =_bdbb .Data [_defb ]>>_eeca ;
};_fgdg .Data [_adad ]=_bbbaf (_fgdg .Data [_adad ],^_gcfe ,_abegd );_adad +=_fgdg .RowStride ;_defb +=_bdbb .RowStride ;};};if _gggb {for _aegg =0;_aegg < _fgcd ;_aegg ++{for _faee =0;_faee < _efggfd ;_faee ++{_gcfe =_bbbaf (_bdbb .Data [_eecb +_faee ]<<_adge ,_bdbb .Data [_eecb +_faee +1]>>_eeca ,_egad );
_fgdg .Data [_eebg +_faee ]=^_gcfe ;};_eebg +=_fgdg .RowStride ;_eecb +=_bdbb .RowStride ;};};if _abcc {for _aegg =0;_aegg < _fgcd ;_aegg ++{_gcfe =_bdbb .Data [_ebefb ]<<_adge ;if _ecag {_gcfe =_bbbaf (_gcfe ,_bdbb .Data [_ebefb +1]>>_eeca ,_egad );};
_fgdg .Data [_ffef ]=_bbbaf (_fgdg .Data [_ffef ],^_gcfe ,_bbbc );_ffef +=_fgdg .RowStride ;_ebefb +=_bdbb .RowStride ;};};case PixSrcOrDst :if _fdac {for _aegg =0;_aegg < _fgcd ;_aegg ++{if _cagcf ==_ade {_gcfe =_bdbb .Data [_defb ]<<_adge ;if _dabg {_gcfe =_bbbaf (_gcfe ,_bdbb .Data [_defb +1]>>_eeca ,_egad );
};}else {_gcfe =_bdbb .Data [_defb ]>>_eeca ;};_fgdg .Data [_adad ]=_bbbaf (_fgdg .Data [_adad ],_gcfe |_fgdg .Data [_adad ],_abegd );_adad +=_fgdg .RowStride ;_defb +=_bdbb .RowStride ;};};if _gggb {for _aegg =0;_aegg < _fgcd ;_aegg ++{for _faee =0;_faee < _efggfd ;
_faee ++{_gcfe =_bbbaf (_bdbb .Data [_eecb +_faee ]<<_adge ,_bdbb .Data [_eecb +_faee +1]>>_eeca ,_egad );_fgdg .Data [_eebg +_faee ]|=_gcfe ;};_eebg +=_fgdg .RowStride ;_eecb +=_bdbb .RowStride ;};};if _abcc {for _aegg =0;_aegg < _fgcd ;_aegg ++{_gcfe =_bdbb .Data [_ebefb ]<<_adge ;
if _ecag {_gcfe =_bbbaf (_gcfe ,_bdbb .Data [_ebefb +1]>>_eeca ,_egad );};_fgdg .Data [_ffef ]=_bbbaf (_fgdg .Data [_ffef ],_gcfe |_fgdg .Data [_ffef ],_bbbc );_ffef +=_fgdg .RowStride ;_ebefb +=_bdbb .RowStride ;};};case PixSrcAndDst :if _fdac {for _aegg =0;
_aegg < _fgcd ;_aegg ++{if _cagcf ==_ade {_gcfe =_bdbb .Data [_defb ]<<_adge ;if _dabg {_gcfe =_bbbaf (_gcfe ,_bdbb .Data [_defb +1]>>_eeca ,_egad );};}else {_gcfe =_bdbb .Data [_defb ]>>_eeca ;};_fgdg .Data [_adad ]=_bbbaf (_fgdg .Data [_adad ],_gcfe &_fgdg .Data [_adad ],_abegd );
_adad +=_fgdg .RowStride ;_defb +=_bdbb .RowStride ;};};if _gggb {for _aegg =0;_aegg < _fgcd ;_aegg ++{for _faee =0;_faee < _efggfd ;_faee ++{_gcfe =_bbbaf (_bdbb .Data [_eecb +_faee ]<<_adge ,_bdbb .Data [_eecb +_faee +1]>>_eeca ,_egad );_fgdg .Data [_eebg +_faee ]&=_gcfe ;
};_eebg +=_fgdg .RowStride ;_eecb +=_bdbb .RowStride ;};};if _abcc {for _aegg =0;_aegg < _fgcd ;_aegg ++{_gcfe =_bdbb .Data [_ebefb ]<<_adge ;if _ecag {_gcfe =_bbbaf (_gcfe ,_bdbb .Data [_ebefb +1]>>_eeca ,_egad );};_fgdg .Data [_ffef ]=_bbbaf (_fgdg .Data [_ffef ],_gcfe &_fgdg .Data [_ffef ],_bbbc );
_ffef +=_fgdg .RowStride ;_ebefb +=_bdbb .RowStride ;};};case PixSrcXorDst :if _fdac {for _aegg =0;_aegg < _fgcd ;_aegg ++{if _cagcf ==_ade {_gcfe =_bdbb .Data [_defb ]<<_adge ;if _dabg {_gcfe =_bbbaf (_gcfe ,_bdbb .Data [_defb +1]>>_eeca ,_egad );};}else {_gcfe =_bdbb .Data [_defb ]>>_eeca ;
};_fgdg .Data [_adad ]=_bbbaf (_fgdg .Data [_adad ],_gcfe ^_fgdg .Data [_adad ],_abegd );_adad +=_fgdg .RowStride ;_defb +=_bdbb .RowStride ;};};if _gggb {for _aegg =0;_aegg < _fgcd ;_aegg ++{for _faee =0;_faee < _efggfd ;_faee ++{_gcfe =_bbbaf (_bdbb .Data [_eecb +_faee ]<<_adge ,_bdbb .Data [_eecb +_faee +1]>>_eeca ,_egad );
_fgdg .Data [_eebg +_faee ]^=_gcfe ;};_eebg +=_fgdg .RowStride ;_eecb +=_bdbb .RowStride ;};};if _abcc {for _aegg =0;_aegg < _fgcd ;_aegg ++{_gcfe =_bdbb .Data [_ebefb ]<<_adge ;if _ecag {_gcfe =_bbbaf (_gcfe ,_bdbb .Data [_ebefb +1]>>_eeca ,_egad );};
_fgdg .Data [_ffef ]=_bbbaf (_fgdg .Data [_ffef ],_gcfe ^_fgdg .Data [_ffef ],_bbbc );_ffef +=_fgdg .RowStride ;_ebefb +=_bdbb .RowStride ;};};case PixNotSrcOrDst :if _fdac {for _aegg =0;_aegg < _fgcd ;_aegg ++{if _cagcf ==_ade {_gcfe =_bdbb .Data [_defb ]<<_adge ;
if _dabg {_gcfe =_bbbaf (_gcfe ,_bdbb .Data [_defb +1]>>_eeca ,_egad );};}else {_gcfe =_bdbb .Data [_defb ]>>_eeca ;};_fgdg .Data [_adad ]=_bbbaf (_fgdg .Data [_adad ],^_gcfe |_fgdg .Data [_adad ],_abegd );_adad +=_fgdg .RowStride ;_defb +=_bdbb .RowStride ;
};};if _gggb {for _aegg =0;_aegg < _fgcd ;_aegg ++{for _faee =0;_faee < _efggfd ;_faee ++{_gcfe =_bbbaf (_bdbb .Data [_eecb +_faee ]<<_adge ,_bdbb .Data [_eecb +_faee +1]>>_eeca ,_egad );_fgdg .Data [_eebg +_faee ]|=^_gcfe ;};_eebg +=_fgdg .RowStride ;
_eecb +=_bdbb .RowStride ;};};if _abcc {for _aegg =0;_aegg < _fgcd ;_aegg ++{_gcfe =_bdbb .Data [_ebefb ]<<_adge ;if _ecag {_gcfe =_bbbaf (_gcfe ,_bdbb .Data [_ebefb +1]>>_eeca ,_egad );};_fgdg .Data [_ffef ]=_bbbaf (_fgdg .Data [_ffef ],^_gcfe |_fgdg .Data [_ffef ],_bbbc );
_ffef +=_fgdg .RowStride ;_ebefb +=_bdbb .RowStride ;};};case PixNotSrcAndDst :if _fdac {for _aegg =0;_aegg < _fgcd ;_aegg ++{if _cagcf ==_ade {_gcfe =_bdbb .Data [_defb ]<<_adge ;if _dabg {_gcfe =_bbbaf (_gcfe ,_bdbb .Data [_defb +1]>>_eeca ,_egad );};
}else {_gcfe =_bdbb .Data [_defb ]>>_eeca ;};_fgdg .Data [_adad ]=_bbbaf (_fgdg .Data [_adad ],^_gcfe &_fgdg .Data [_adad ],_abegd );_adad +=_fgdg .RowStride ;_defb +=_bdbb .RowStride ;};};if _gggb {for _aegg =0;_aegg < _fgcd ;_aegg ++{for _faee =0;_faee < _efggfd ;
_faee ++{_gcfe =_bbbaf (_bdbb .Data [_eecb +_faee ]<<_adge ,_bdbb .Data [_eecb +_faee +1]>>_eeca ,_egad );_fgdg .Data [_eebg +_faee ]&=^_gcfe ;};_eebg +=_fgdg .RowStride ;_eecb +=_bdbb .RowStride ;};};if _abcc {for _aegg =0;_aegg < _fgcd ;_aegg ++{_gcfe =_bdbb .Data [_ebefb ]<<_adge ;
if _ecag {_gcfe =_bbbaf (_gcfe ,_bdbb .Data [_ebefb +1]>>_eeca ,_egad );};_fgdg .Data [_ffef ]=_bbbaf (_fgdg .Data [_ffef ],^_gcfe &_fgdg .Data [_ffef ],_bbbc );_ffef +=_fgdg .RowStride ;_ebefb +=_bdbb .RowStride ;};};case PixSrcOrNotDst :if _fdac {for _aegg =0;
_aegg < _fgcd ;_aegg ++{if _cagcf ==_ade {_gcfe =_bdbb .Data [_defb ]<<_adge ;if _dabg {_gcfe =_bbbaf (_gcfe ,_bdbb .Data [_defb +1]>>_eeca ,_egad );};}else {_gcfe =_bdbb .Data [_defb ]>>_eeca ;};_fgdg .Data [_adad ]=_bbbaf (_fgdg .Data [_adad ],_gcfe |^_fgdg .Data [_adad ],_abegd );
_adad +=_fgdg .RowStride ;_defb +=_bdbb .RowStride ;};};if _gggb {for _aegg =0;_aegg < _fgcd ;_aegg ++{for _faee =0;_faee < _efggfd ;_faee ++{_gcfe =_bbbaf (_bdbb .Data [_eecb +_faee ]<<_adge ,_bdbb .Data [_eecb +_faee +1]>>_eeca ,_egad );_fgdg .Data [_eebg +_faee ]=_gcfe |^_fgdg .Data [_eebg +_faee ];
};_eebg +=_fgdg .RowStride ;_eecb +=_bdbb .RowStride ;};};if _abcc {for _aegg =0;_aegg < _fgcd ;_aegg ++{_gcfe =_bdbb .Data [_ebefb ]<<_adge ;if _ecag {_gcfe =_bbbaf (_gcfe ,_bdbb .Data [_ebefb +1]>>_eeca ,_egad );};_fgdg .Data [_ffef ]=_bbbaf (_fgdg .Data [_ffef ],_gcfe |^_fgdg .Data [_ffef ],_bbbc );
_ffef +=_fgdg .RowStride ;_ebefb +=_bdbb .RowStride ;};};case PixSrcAndNotDst :if _fdac {for _aegg =0;_aegg < _fgcd ;_aegg ++{if _cagcf ==_ade {_gcfe =_bdbb .Data [_defb ]<<_adge ;if _dabg {_gcfe =_bbbaf (_gcfe ,_bdbb .Data [_defb +1]>>_eeca ,_egad );};
}else {_gcfe =_bdbb .Data [_defb ]>>_eeca ;};_fgdg .Data [_adad ]=_bbbaf (_fgdg .Data [_adad ],_gcfe &^_fgdg .Data [_adad ],_abegd );_adad +=_fgdg .RowStride ;_defb +=_bdbb .RowStride ;};};if _gggb {for _aegg =0;_aegg < _fgcd ;_aegg ++{for _faee =0;_faee < _efggfd ;
_faee ++{_gcfe =_bbbaf (_bdbb .Data [_eecb +_faee ]<<_adge ,_bdbb .Data [_eecb +_faee +1]>>_eeca ,_egad );_fgdg .Data [_eebg +_faee ]=_gcfe &^_fgdg .Data [_eebg +_faee ];};_eebg +=_fgdg .RowStride ;_eecb +=_bdbb .RowStride ;};};if _abcc {for _aegg =0;_aegg < _fgcd ;
_aegg ++{_gcfe =_bdbb .Data [_ebefb ]<<_adge ;if _ecag {_gcfe =_bbbaf (_gcfe ,_bdbb .Data [_ebefb +1]>>_eeca ,_egad );};_fgdg .Data [_ffef ]=_bbbaf (_fgdg .Data [_ffef ],_gcfe &^_fgdg .Data [_ffef ],_bbbc );_ffef +=_fgdg .RowStride ;_ebefb +=_bdbb .RowStride ;
};};case PixNotPixSrcOrDst :if _fdac {for _aegg =0;_aegg < _fgcd ;_aegg ++{if _cagcf ==_ade {_gcfe =_bdbb .Data [_defb ]<<_adge ;if _dabg {_gcfe =_bbbaf (_gcfe ,_bdbb .Data [_defb +1]>>_eeca ,_egad );};}else {_gcfe =_bdbb .Data [_defb ]>>_eeca ;};_fgdg .Data [_adad ]=_bbbaf (_fgdg .Data [_adad ],^(_gcfe |_fgdg .Data [_adad ]),_abegd );
_adad +=_fgdg .RowStride ;_defb +=_bdbb .RowStride ;};};if _gggb {for _aegg =0;_aegg < _fgcd ;_aegg ++{for _faee =0;_faee < _efggfd ;_faee ++{_gcfe =_bbbaf (_bdbb .Data [_eecb +_faee ]<<_adge ,_bdbb .Data [_eecb +_faee +1]>>_eeca ,_egad );_fgdg .Data [_eebg +_faee ]=^(_gcfe |_fgdg .Data [_eebg +_faee ]);
};_eebg +=_fgdg .RowStride ;_eecb +=_bdbb .RowStride ;};};if _abcc {for _aegg =0;_aegg < _fgcd ;_aegg ++{_gcfe =_bdbb .Data [_ebefb ]<<_adge ;if _ecag {_gcfe =_bbbaf (_gcfe ,_bdbb .Data [_ebefb +1]>>_eeca ,_egad );};_fgdg .Data [_ffef ]=_bbbaf (_fgdg .Data [_ffef ],^(_gcfe |_fgdg .Data [_ffef ]),_bbbc );
_ffef +=_fgdg .RowStride ;_ebefb +=_bdbb .RowStride ;};};case PixNotPixSrcAndDst :if _fdac {for _aegg =0;_aegg < _fgcd ;_aegg ++{if _cagcf ==_ade {_gcfe =_bdbb .Data [_defb ]<<_adge ;if _dabg {_gcfe =_bbbaf (_gcfe ,_bdbb .Data [_defb +1]>>_eeca ,_egad );
};}else {_gcfe =_bdbb .Data [_defb ]>>_eeca ;};_fgdg .Data [_adad ]=_bbbaf (_fgdg .Data [_adad ],^(_gcfe &_fgdg .Data [_adad ]),_abegd );_adad +=_fgdg .RowStride ;_defb +=_bdbb .RowStride ;};};if _gggb {for _aegg =0;_aegg < _fgcd ;_aegg ++{for _faee =0;
_faee < _efggfd ;_faee ++{_gcfe =_bbbaf (_bdbb .Data [_eecb +_faee ]<<_adge ,_bdbb .Data [_eecb +_faee +1]>>_eeca ,_egad );_fgdg .Data [_eebg +_faee ]=^(_gcfe &_fgdg .Data [_eebg +_faee ]);};_eebg +=_fgdg .RowStride ;_eecb +=_bdbb .RowStride ;};};if _abcc {for _aegg =0;
_aegg < _fgcd ;_aegg ++{_gcfe =_bdbb .Data [_ebefb ]<<_adge ;if _ecag {_gcfe =_bbbaf (_gcfe ,_bdbb .Data [_ebefb +1]>>_eeca ,_egad );};_fgdg .Data [_ffef ]=_bbbaf (_fgdg .Data [_ffef ],^(_gcfe &_fgdg .Data [_ffef ]),_bbbc );_ffef +=_fgdg .RowStride ;_ebefb +=_bdbb .RowStride ;
};};case PixNotPixSrcXorDst :if _fdac {for _aegg =0;_aegg < _fgcd ;_aegg ++{if _cagcf ==_ade {_gcfe =_bdbb .Data [_defb ]<<_adge ;if _dabg {_gcfe =_bbbaf (_gcfe ,_bdbb .Data [_defb +1]>>_eeca ,_egad );};}else {_gcfe =_bdbb .Data [_defb ]>>_eeca ;};_fgdg .Data [_adad ]=_bbbaf (_fgdg .Data [_adad ],^(_gcfe ^_fgdg .Data [_adad ]),_abegd );
_adad +=_fgdg .RowStride ;_defb +=_bdbb .RowStride ;};};if _gggb {for _aegg =0;_aegg < _fgcd ;_aegg ++{for _faee =0;_faee < _efggfd ;_faee ++{_gcfe =_bbbaf (_bdbb .Data [_eecb +_faee ]<<_adge ,_bdbb .Data [_eecb +_faee +1]>>_eeca ,_egad );_fgdg .Data [_eebg +_faee ]=^(_gcfe ^_fgdg .Data [_eebg +_faee ]);
};_eebg +=_fgdg .RowStride ;_eecb +=_bdbb .RowStride ;};};if _abcc {for _aegg =0;_aegg < _fgcd ;_aegg ++{_gcfe =_bdbb .Data [_ebefb ]<<_adge ;if _ecag {_gcfe =_bbbaf (_gcfe ,_bdbb .Data [_ebefb +1]>>_eeca ,_egad );};_fgdg .Data [_ffef ]=_bbbaf (_fgdg .Data [_ffef ],^(_gcfe ^_fgdg .Data [_ffef ]),_bbbc );
_ffef +=_fgdg .RowStride ;_ebefb +=_bdbb .RowStride ;};};default:_aa .Log .Debug ("\u004f\u0070e\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0074\u0020\u0070\u0065\u0072\u006d\u0069tt\u0065\u0064",_gfbc );
return _b .Error ("\u0072a\u0073t\u0065\u0072\u004f\u0070\u0047e\u006e\u0065r\u0061\u006c\u004c\u006f\u0077","\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065r\u0061\u0074\u0069\u006f\u006e\u0020\u006eo\u0074\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074\u0065\u0064");
};return nil ;};func (_agca *Bitmap )SetPixel (x ,y int ,pixel byte )error {_cdeb :=_agca .GetByteIndex (x ,y );if _cdeb > len (_agca .Data )-1{return _b .Errorf ("\u0053\u0065\u0074\u0050\u0069\u0078\u0065\u006c","\u0069\u006e\u0064\u0065x \u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020%\u0064",_cdeb );
};_dbcb :=_agca .GetBitOffset (x );_cgf :=uint (7-_dbcb );_bde :=_agca .Data [_cdeb ];var _egg byte ;if pixel ==1{_egg =_bde |(pixel &0x01<<_cgf );}else {_egg =_bde &^(1<<_cgf );};_agca .Data [_cdeb ]=_egg ;return nil ;};func (_gdbf *Bitmap )RemoveBorder (borderSize int )(*Bitmap ,error ){if borderSize ==0{return _gdbf .Copy (),nil ;
};_cdbg ,_bbada :=_gdbf .removeBorderGeneral (borderSize ,borderSize ,borderSize ,borderSize );if _bbada !=nil {return nil ,_b .Wrap (_bbada ,"\u0052\u0065\u006do\u0076\u0065\u0042\u006f\u0072\u0064\u0065\u0072","");};return _cdbg ,nil ;};func TstWordBitmap (t *_bc .T ,scale ...int )*Bitmap {_dgba :=1;
if len (scale )> 0{_dgba =scale [0];};_ebed :=3;_dgbe :=9+7+15+2*_ebed ;_deab :=5+_ebed +5;_bbcb :=New (_dgbe *_dgba ,_deab *_dgba );_dfcf :=&Bitmaps {};var _aacf *int ;_ebed *=_dgba ;_cdedb :=0;_aacf =&_cdedb ;_cfeac :=0;_gebb :=TstDSymbol (t ,scale ...);
TstAddSymbol (t ,_dfcf ,_gebb ,_aacf ,_cfeac ,1*_dgba );_gebb =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_dfcf ,_gebb ,_aacf ,_cfeac ,_ebed );_gebb =TstISymbol (t ,scale ...);TstAddSymbol (t ,_dfcf ,_gebb ,_aacf ,_cfeac ,1*_dgba );_gebb =TstTSymbol (t ,scale ...);
TstAddSymbol (t ,_dfcf ,_gebb ,_aacf ,_cfeac ,_ebed );_gebb =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_dfcf ,_gebb ,_aacf ,_cfeac ,1*_dgba );_gebb =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_dfcf ,_gebb ,_aacf ,_cfeac ,1*_dgba );_gebb =TstWSymbol (t ,scale ...);
TstAddSymbol (t ,_dfcf ,_gebb ,_aacf ,_cfeac ,0);*_aacf =0;_cfeac =5*_dgba +_ebed ;_gebb =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_dfcf ,_gebb ,_aacf ,_cfeac ,1*_dgba );_gebb =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_dfcf ,_gebb ,_aacf ,_cfeac ,_ebed );
_gebb =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_dfcf ,_gebb ,_aacf ,_cfeac ,1*_dgba );_gebb =TstESymbol (t ,scale ...);TstAddSymbol (t ,_dfcf ,_gebb ,_aacf ,_cfeac ,1*_dgba );_gebb =TstVSymbol (t ,scale ...);TstAddSymbol (t ,_dfcf ,_gebb ,_aacf ,_cfeac ,1*_dgba );
_gebb =TstESymbol (t ,scale ...);TstAddSymbol (t ,_dfcf ,_gebb ,_aacf ,_cfeac ,1*_dgba );_gebb =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_dfcf ,_gebb ,_aacf ,_cfeac ,0);TstWriteSymbols (t ,_dfcf ,_bbcb );return _bbcb ;};func Copy (d ,s *Bitmap )(*Bitmap ,error ){return _cagf (d ,s )};
func (_gbaa *byHeight )Swap (i ,j int ){_gbaa .Values [i ],_gbaa .Values [j ]=_gbaa .Values [j ],_gbaa .Values [i ];if _gbaa .Boxes !=nil {_gbaa .Boxes [i ],_gbaa .Boxes [j ]=_gbaa .Boxes [j ],_gbaa .Boxes [i ];};};func (_bdbe *Bitmaps )HeightSorter ()func (_bcaab ,_gfgd int )bool {return func (_gbdfe ,_aegea int )bool {_ecbc :=_bdbe .Values [_gbdfe ].Height < _bdbe .Values [_aegea ].Height ;
_aa .Log .Debug ("H\u0065i\u0067\u0068\u0074\u003a\u0020\u0025\u0076\u0020<\u0020\u0025\u0076\u0020= \u0025\u0076",_bdbe .Values [_gbdfe ].Height ,_bdbe .Values [_aegea ].Height ,_ecbc );return _ecbc ;};};func TstVSymbol (t *_bc .T ,scale ...int )*Bitmap {_fgaf ,_afde :=NewWithData (5,5,[]byte {0x88,0x88,0x88,0x50,0x20});
_ba .NoError (t ,_afde );return TstGetScaledSymbol (t ,_fgaf ,scale ...);};func (_feea *Boxes )Get (i int )(*_ff .Rectangle ,error ){const _acaf ="\u0042o\u0078\u0065\u0073\u002e\u0047\u0065t";if _feea ==nil {return nil ,_b .Error (_acaf ,"\u0027\u0042\u006f\u0078es\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if i > len (*_feea )-1{return nil ,_b .Errorf (_acaf ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return (*_feea )[i ],nil ;};type SelectionValue int ;
func (_beeba *Bitmaps )SelectByIndexes (idx []int )(*Bitmaps ,error ){const _aacg ="B\u0069\u0074\u006d\u0061\u0070\u0073.\u0053\u006f\u0072\u0074\u0049\u006e\u0064\u0065\u0078e\u0073\u0042\u0079H\u0065i\u0067\u0068\u0074";_eceb ,_aabdb :=_beeba .selectByIndexes (idx );
if _aabdb !=nil {return nil ,_b .Wrap (_aabdb ,_aacg ,"");};return _eceb ,nil ;};func (_gbcb *Bitmap )createTemplate ()*Bitmap {return &Bitmap {Width :_gbcb .Width ,Height :_gbcb .Height ,RowStride :_gbcb .RowStride ,Color :_gbcb .Color ,Text :_gbcb .Text ,BitmapNumber :_gbcb .BitmapNumber ,Special :_gbcb .Special ,Data :make ([]byte ,len (_gbcb .Data ))};
};func init (){for _abc :=0;_abc < 256;_abc ++{_babb [_abc ]=uint8 (_abc &0x1)+(uint8 (_abc >>1)&0x1)+(uint8 (_abc >>2)&0x1)+(uint8 (_abc >>3)&0x1)+(uint8 (_abc >>4)&0x1)+(uint8 (_abc >>5)&0x1)+(uint8 (_abc >>6)&0x1)+(uint8 (_abc >>7)&0x1);};};type Bitmap struct{Width ,Height int ;
BitmapNumber int ;RowStride int ;Data []byte ;Color Color ;Special int ;Text string ;XResolution ,YResolution int ;};func TstAddSymbol (t *_bc .T ,bms *Bitmaps ,sym *Bitmap ,x *int ,y int ,space int ){bms .AddBitmap (sym );_bfedg :=_ff .Rect (*x ,y ,*x +sym .Width ,y +sym .Height );
bms .AddBox (&_bfedg );*x +=sym .Width +space ;};func CombineBytes (oldByte ,newByte byte ,op CombinationOperator )byte {return _bbbe (oldByte ,newByte ,op );};func (_gdeb *ClassedPoints )SortByY (){_gdeb ._edffc =_gdeb .ySortFunction ();_bg .Sort (_gdeb )};
func (_dfad *Bitmap )setEightBytes (_acdg int ,_dbd uint64 )error {_cege :=_dfad .RowStride -(_acdg %_dfad .RowStride );if _dfad .RowStride !=_dfad .Width >>3{_cege --;};if _cege >=8{return _dfad .setEightFullBytes (_acdg ,_dbd );};return _dfad .setEightPartlyBytes (_acdg ,_cege ,_dbd );
};func (_febe *Bitmap )addPadBits ()(_fgc error ){const _edc ="\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0061\u0064\u0064\u0050\u0061d\u0042\u0069\u0074\u0073";_fegc :=_febe .Width %8;if _fegc ==0{return nil ;};_adf :=_febe .Width /8;_fff :=_c .NewReader (_febe .Data );
_feac :=make ([]byte ,_febe .Height *_febe .RowStride );_acbe :=_c .NewWriterMSB (_feac );_gcg :=make ([]byte ,_adf );var (_afec int ;_ebeg uint64 ;);for _afec =0;_afec < _febe .Height ;_afec ++{if _ ,_fgc =_fff .Read (_gcg );_fgc !=nil {return _b .Wrap (_fgc ,_edc ,"\u0066u\u006c\u006c\u0020\u0062\u0079\u0074e");
};if _ ,_fgc =_acbe .Write (_gcg );_fgc !=nil {return _b .Wrap (_fgc ,_edc ,"\u0066\u0075\u006c\u006c\u0020\u0062\u0079\u0074\u0065\u0073");};if _ebeg ,_fgc =_fff .ReadBits (byte (_fegc ));_fgc !=nil {return _b .Wrap (_fgc ,_edc ,"\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0062\u0069\u0074\u0073");
};if _fgc =_acbe .WriteByte (byte (_ebeg )<<uint (8-_fegc ));_fgc !=nil {return _b .Wrap (_fgc ,_edc ,"\u006ca\u0073\u0074\u0020\u0062\u0079\u0074e");};};_febe .Data =_acbe .Data ();return nil ;};func (_aggc *Bitmap )InverseData (){_aggc .inverseData ()};
func (_deaed *Bitmap )thresholdPixelSum (_fgce int )bool {var (_acc int ;_gcc uint8 ;_dfag byte ;_gbdd int ;);_eegf :=_deaed .RowStride ;_cgaa :=uint (_deaed .Width &0x07);if _cgaa !=0{_gcc =uint8 ((0xff<<(8-_cgaa ))&0xff);_eegf --;};for _gec :=0;_gec < _deaed .Height ;
_gec ++{for _gbdd =0;_gbdd < _eegf ;_gbdd ++{_dfag =_deaed .Data [_gec *_deaed .RowStride +_gbdd ];_acc +=int (_babb [_dfag ]);};if _cgaa !=0{_dfag =_deaed .Data [_gec *_deaed .RowStride +_gbdd ]&_gcc ;_acc +=int (_babb [_dfag ]);};if _acc > _fgce {return true ;
};};return false ;};func ClipBoxToRectangle (box *_ff .Rectangle ,wi ,hi int )(_ffcg *_ff .Rectangle ,_cdgb error ){const _ddcbb ="\u0043l\u0069p\u0042\u006f\u0078\u0054\u006fR\u0065\u0063t\u0061\u006e\u0067\u006c\u0065";if box ==nil {return nil ,_b .Error (_ddcbb ,"\u0027\u0062\u006f\u0078\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};if box .Min .X >=wi ||box .Min .Y >=hi ||box .Max .X <=0||box .Max .Y <=0{return nil ,_b .Error (_ddcbb ,"\u0027\u0062\u006fx'\u0020\u006f\u0075\u0074\u0073\u0069\u0064\u0065\u0020\u0072\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065");};_cbgd :=*box ;
_ffcg =&_cbgd ;if _ffcg .Min .X < 0{_ffcg .Max .X +=_ffcg .Min .X ;_ffcg .Min .X =0;};if _ffcg .Min .Y < 0{_ffcg .Max .Y +=_ffcg .Min .Y ;_ffcg .Min .Y =0;};if _ffcg .Max .X > wi {_ffcg .Max .X =wi ;};if _ffcg .Max .Y > hi {_ffcg .Max .Y =hi ;};return _ffcg ,nil ;
};func _adcc (_ebfcg *Bitmap ,_gebf ...MorphProcess )(_ebec *Bitmap ,_gcfd error ){const _efa ="\u006d\u006f\u0072\u0070\u0068\u0053\u0065\u0071\u0075\u0065\u006e\u0063\u0065";if _ebfcg ==nil {return nil ,_b .Error (_efa ,"\u006d\u006f\u0072\u0070\u0068\u0053\u0065\u0071\u0075\u0065\u006e\u0063\u0065 \u0073\u006f\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};if len (_gebf )==0{return nil ,_b .Error (_efa ,"m\u006f\u0072\u0070\u0068\u0053\u0065q\u0075\u0065\u006e\u0063\u0065\u002c \u0073\u0065\u0071\u0075\u0065\u006e\u0063e\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");};if _gcfd =_abgb (_gebf ...);
_gcfd !=nil {return nil ,_b .Wrap (_gcfd ,_efa ,"");};var _cdfe ,_dbaf ,_cagd int ;_ebec =_ebfcg .Copy ();for _ ,_febc :=range _gebf {switch _febc .Operation {case MopDilation :_cdfe ,_dbaf =_febc .getWidthHeight ();_ebec ,_gcfd =DilateBrick (nil ,_ebec ,_cdfe ,_dbaf );
if _gcfd !=nil {return nil ,_b .Wrap (_gcfd ,_efa ,"");};case MopErosion :_cdfe ,_dbaf =_febc .getWidthHeight ();_ebec ,_gcfd =_fadbc (nil ,_ebec ,_cdfe ,_dbaf );if _gcfd !=nil {return nil ,_b .Wrap (_gcfd ,_efa ,"");};case MopOpening :_cdfe ,_dbaf =_febc .getWidthHeight ();
_ebec ,_gcfd =_ebfb (nil ,_ebec ,_cdfe ,_dbaf );if _gcfd !=nil {return nil ,_b .Wrap (_gcfd ,_efa ,"");};case MopClosing :_cdfe ,_dbaf =_febc .getWidthHeight ();_ebec ,_gcfd =_bcfc (nil ,_ebec ,_cdfe ,_dbaf );if _gcfd !=nil {return nil ,_b .Wrap (_gcfd ,_efa ,"");
};case MopRankBinaryReduction :_ebec ,_gcfd =_af (_ebec ,_febc .Arguments ...);if _gcfd !=nil {return nil ,_b .Wrap (_gcfd ,_efa ,"");};case MopReplicativeBinaryExpansion :_ebec ,_gcfd =_agbc (_ebec ,_febc .Arguments [0]);if _gcfd !=nil {return nil ,_b .Wrap (_gcfd ,_efa ,"");
};case MopAddBorder :_cagd =_febc .Arguments [0];_ebec ,_gcfd =_ebec .AddBorder (_cagd ,0);if _gcfd !=nil {return nil ,_b .Wrap (_gcfd ,_efa ,"");};default:return nil ,_b .Error (_efa ,"i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006d\u006fr\u0070\u0068\u004f\u0070\u0065\u0072\u0061ti\u006f\u006e\u0020\u0070r\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0074\u006f t\u0068\u0065 \u0073\u0065\u0071\u0075\u0065\u006e\u0063\u0065");
};};if _cagd > 0{_ebec ,_gcfd =_ebec .RemoveBorder (_cagd );if _gcfd !=nil {return nil ,_b .Wrap (_gcfd ,_efa ,"\u0062\u006f\u0072\u0064\u0065\u0072\u0020\u003e\u0020\u0030");};};return _ebec ,nil ;};func _ggeb (_efef ,_ebfc *Bitmap ,_fgfc *Selection )(*Bitmap ,error ){const _gcda ="\u0065\u0072\u006fd\u0065";
var (_gda error ;_eba *Bitmap ;);_efef ,_gda =_dbce (_efef ,_ebfc ,_fgfc ,&_eba );if _gda !=nil {return nil ,_b .Wrap (_gda ,_gcda ,"");};if _gda =_efef .setAll ();_gda !=nil {return nil ,_b .Wrap (_gda ,_gcda ,"");};var _bgag SelectionValue ;for _dgad :=0;
_dgad < _fgfc .Height ;_dgad ++{for _afgc :=0;_afgc < _fgfc .Width ;_afgc ++{_bgag =_fgfc .Data [_dgad ][_afgc ];if _bgag ==SelHit {_gda =_daec (_efef ,_fgfc .Cx -_afgc ,_fgfc .Cy -_dgad ,_ebfc .Width ,_ebfc .Height ,PixSrcAndDst ,_eba ,0,0);if _gda !=nil {return nil ,_b .Wrap (_gda ,_gcda ,"");
};};};};if MorphBC ==SymmetricMorphBC {return _efef ,nil ;};_dfgf ,_aeda ,_dgfg ,_dae :=_fgfc .findMaxTranslations ();if _dfgf > 0{if _gda =_efef .RasterOperation (0,0,_dfgf ,_ebfc .Height ,PixClr ,nil ,0,0);_gda !=nil {return nil ,_b .Wrap (_gda ,_gcda ,"\u0078\u0070\u0020\u003e\u0020\u0030");
};};if _dgfg > 0{if _gda =_efef .RasterOperation (_ebfc .Width -_dgfg ,0,_dgfg ,_ebfc .Height ,PixClr ,nil ,0,0);_gda !=nil {return nil ,_b .Wrap (_gda ,_gcda ,"\u0078\u006e\u0020\u003e\u0020\u0030");};};if _aeda > 0{if _gda =_efef .RasterOperation (0,0,_ebfc .Width ,_aeda ,PixClr ,nil ,0,0);
_gda !=nil {return nil ,_b .Wrap (_gda ,_gcda ,"\u0079\u0070\u0020\u003e\u0020\u0030");};};if _dae > 0{if _gda =_efef .RasterOperation (0,_ebfc .Height -_dae ,_ebfc .Width ,_dae ,PixClr ,nil ,0,0);_gda !=nil {return nil ,_b .Wrap (_gda ,_gcda ,"\u0079\u006e\u0020\u003e\u0020\u0030");
};};return _efef ,nil ;};func (_eab *Bitmap )SetDefaultPixel (){for _efdb :=range _eab .Data {_eab .Data [_efdb ]=byte (0xff);};};func (_bcdd *Bitmaps )Size ()int {return len (_bcdd .Values )};func (_aagf *Bitmap )SetPadBits (value int ){_aagf .setPadBits (value )};
type RasterOperator int ;func (_abcb *Bitmap )AddBorderGeneral (left ,right ,top ,bot int ,val int )(*Bitmap ,error ){return _abcb .addBorderGeneral (left ,right ,top ,bot ,val );};func _efaf (_ecb ,_acdcf *Bitmap ,_fdeg ,_eeac int )(_faaab error ){const _bcag ="\u0073e\u0065d\u0066\u0069\u006c\u006c\u0042i\u006e\u0061r\u0079\u004c\u006f\u0077\u0034";
var (_cded ,_afcba ,_accd ,_fcedc int ;_bcfe ,_ebde ,_fdgfe ,_dcf ,_aaba ,_gega ,_feae byte ;);for _cded =0;_cded < _fdeg ;_cded ++{_accd =_cded *_ecb .RowStride ;_fcedc =_cded *_acdcf .RowStride ;for _afcba =0;_afcba < _eeac ;_afcba ++{_bcfe ,_faaab =_ecb .GetByte (_accd +_afcba );
if _faaab !=nil {return _b .Wrap (_faaab ,_bcag ,"\u0066i\u0072\u0073\u0074\u0020\u0067\u0065t");};_ebde ,_faaab =_acdcf .GetByte (_fcedc +_afcba );if _faaab !=nil {return _b .Wrap (_faaab ,_bcag ,"\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0067\u0065\u0074");
};if _cded > 0{_fdgfe ,_faaab =_ecb .GetByte (_accd -_ecb .RowStride +_afcba );if _faaab !=nil {return _b .Wrap (_faaab ,_bcag ,"\u0069\u0020\u003e \u0030");};_bcfe |=_fdgfe ;};if _afcba > 0{_dcf ,_faaab =_ecb .GetByte (_accd +_afcba -1);if _faaab !=nil {return _b .Wrap (_faaab ,_bcag ,"\u006a\u0020\u003e \u0030");
};_bcfe |=_dcf <<7;};_bcfe &=_ebde ;if _bcfe ==0||(^_bcfe )==0{if _faaab =_ecb .SetByte (_accd +_afcba ,_bcfe );_faaab !=nil {return _b .Wrap (_faaab ,_bcag ,"b\u0074\u0020\u003d\u003d 0\u0020|\u007c\u0020\u0028\u005e\u0062t\u0029\u0020\u003d\u003d\u0020\u0030");
};continue ;};for {_feae =_bcfe ;_bcfe =(_bcfe |(_bcfe >>1)|(_bcfe <<1))&_ebde ;if (_bcfe ^_feae )==0{if _faaab =_ecb .SetByte (_accd +_afcba ,_bcfe );_faaab !=nil {return _b .Wrap (_faaab ,_bcag ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0070\u0072\u0065\u0076 \u0062\u0079\u0074\u0065");
};break ;};};};};for _cded =_fdeg -1;_cded >=0;_cded --{_accd =_cded *_ecb .RowStride ;_fcedc =_cded *_acdcf .RowStride ;for _afcba =_eeac -1;_afcba >=0;_afcba --{if _bcfe ,_faaab =_ecb .GetByte (_accd +_afcba );_faaab !=nil {return _b .Wrap (_faaab ,_bcag ,"\u0072\u0065\u0076\u0065\u0072\u0073\u0065\u0020\u0066\u0069\u0072\u0073t\u0020\u0067\u0065\u0074");
};if _ebde ,_faaab =_acdcf .GetByte (_fcedc +_afcba );_faaab !=nil {return _b .Wrap (_faaab ,_bcag ,"r\u0065\u0076\u0065\u0072se\u0020g\u0065\u0074\u0020\u006d\u0061s\u006b\u0020\u0062\u0079\u0074\u0065");};if _cded < _fdeg -1{if _aaba ,_faaab =_ecb .GetByte (_accd +_ecb .RowStride +_afcba );
_faaab !=nil {return _b .Wrap (_faaab ,_bcag ,"\u0072\u0065v\u0065\u0072\u0073e\u0020\u0069\u0020\u003c\u0020\u0068\u0020\u002d\u0031");};_bcfe |=_aaba ;};if _afcba < _eeac -1{if _gega ,_faaab =_ecb .GetByte (_accd +_afcba +1);_faaab !=nil {return _b .Wrap (_faaab ,_bcag ,"\u0072\u0065\u0076\u0065rs\u0065\u0020\u006a\u0020\u003c\u0020\u0077\u0070\u006c\u0020\u002d\u0020\u0031");
};_bcfe |=_gega >>7;};_bcfe &=_ebde ;if _bcfe ==0||(^_bcfe )==0{if _faaab =_ecb .SetByte (_accd +_afcba ,_bcfe );_faaab !=nil {return _b .Wrap (_faaab ,_bcag ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006d\u0061\u0073k\u0065\u0064\u0020\u0062\u0079\u0074\u0065\u0020\u0066\u0061i\u006c\u0065\u0064");
};continue ;};for {_feae =_bcfe ;_bcfe =(_bcfe |(_bcfe >>1)|(_bcfe <<1))&_ebde ;if (_bcfe ^_feae )==0{if _faaab =_ecb .SetByte (_accd +_afcba ,_bcfe );_faaab !=nil {return _b .Wrap (_faaab ,_bcag ,"\u0072e\u0076\u0065\u0072\u0073e\u0020\u0073\u0065\u0074\u0074i\u006eg\u0020p\u0072\u0065\u0076\u0020\u0062\u0079\u0074e");
};break ;};};};};return nil ;};func (_egfb *Bitmaps )GetBox (i int )(*_ff .Rectangle ,error ){const _gbagd ="\u0047\u0065\u0074\u0042\u006f\u0078";if _egfb ==nil {return nil ,_b .Error (_gbagd ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074\u006d\u0061\u0070s\u0027");
};if i > len (_egfb .Boxes )-1{return nil ,_b .Errorf (_gbagd ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _egfb .Boxes [i ],nil ;};func TstCSymbol (t *_bc .T )*Bitmap {t .Helper ();
_cbage :=New (6,6);_ba .NoError (t ,_cbage .SetPixel (1,0,1));_ba .NoError (t ,_cbage .SetPixel (2,0,1));_ba .NoError (t ,_cbage .SetPixel (3,0,1));_ba .NoError (t ,_cbage .SetPixel (4,0,1));_ba .NoError (t ,_cbage .SetPixel (0,1,1));_ba .NoError (t ,_cbage .SetPixel (5,1,1));
_ba .NoError (t ,_cbage .SetPixel (0,2,1));_ba .NoError (t ,_cbage .SetPixel (0,3,1));_ba .NoError (t ,_cbage .SetPixel (0,4,1));_ba .NoError (t ,_cbage .SetPixel (5,4,1));_ba .NoError (t ,_cbage .SetPixel (1,5,1));_ba .NoError (t ,_cbage .SetPixel (2,5,1));
_ba .NoError (t ,_cbage .SetPixel (3,5,1));_ba .NoError (t ,_cbage .SetPixel (4,5,1));return _cbage ;};func (_bfgbf *ClassedPoints )GroupByY ()([]*ClassedPoints ,error ){const _gcde ="\u0043\u006c\u0061\u0073se\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0072\u006f\u0075\u0070\u0042y\u0059";
if _bdaf :=_bfgbf .validateIntSlice ();_bdaf !=nil {return nil ,_b .Wrap (_bdaf ,_gcde ,"");};if _bfgbf .IntSlice .Size ()==0{return nil ,_b .Error (_gcde ,"\u004e\u006f\u0020\u0063la\u0073\u0073\u0065\u0073\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064");
};_bfgbf .SortByY ();var (_eeff []*ClassedPoints ;_eafe int ;);_fbcd :=-1;var _ece *ClassedPoints ;for _cfgd :=0;_cfgd < len (_bfgbf .IntSlice );_cfgd ++{_eafe =int (_bfgbf .YAtIndex (_cfgd ));if _eafe !=_fbcd {_ece =&ClassedPoints {Points :_bfgbf .Points };
_fbcd =_eafe ;_eeff =append (_eeff ,_ece );};_ece .IntSlice =append (_ece .IntSlice ,_bfgbf .IntSlice [_cfgd ]);};for _ ,_cgb :=range _eeff {_cgb .SortByX ();};return _eeff ,nil ;};func (_eeg *Bitmap )equivalent (_affg *Bitmap )bool {if _eeg ==_affg {return true ;
};if !_eeg .SizesEqual (_affg ){return false ;};_dabf :=_dbcc (_eeg ,_affg ,CmbOpXor );_eeaa :=_eeg .countPixels ();_aaef :=int (0.25*float32 (_eeaa ));if _dabf .thresholdPixelSum (_aaef ){return false ;};var (_gff [9][9]int ;_daa [18][9]int ;_fgg [9][18]int ;
_abg int ;_eec int ;);_ddbe :=9;_fcce :=_eeg .Height /_ddbe ;_gddd :=_eeg .Width /_ddbe ;_bfe ,_cda :=_fcce /2,_gddd /2;if _fcce < _gddd {_bfe =_gddd /2;_cda =_fcce /2;};_eebf :=float64 (_bfe )*float64 (_cda )*_fg .Pi ;_bgf :=int (float64 (_fcce *_gddd /2)*0.9);
_efe :=int (float64 (_gddd *_fcce /2)*0.9);for _ddcb :=0;_ddcb < _ddbe ;_ddcb ++{_beaf :=_gddd *_ddcb +_abg ;var _ccbd int ;if _ddcb ==_ddbe -1{_abg =0;_ccbd =_eeg .Width ;}else {_ccbd =_beaf +_gddd ;if ((_eeg .Width -_abg )%_ddbe )> 0{_abg ++;_ccbd ++;
};};for _dfd :=0;_dfd < _ddbe ;_dfd ++{_fab :=_fcce *_dfd +_eec ;var _gbg int ;if _dfd ==_ddbe -1{_eec =0;_gbg =_eeg .Height ;}else {_gbg =_fab +_fcce ;if (_eeg .Height -_eec )%_ddbe > 0{_eec ++;_gbg ++;};};var _abae ,_fbe ,_fgcc ,_adcb int ;_fade :=(_beaf +_ccbd )/2;
_eaed :=(_fab +_gbg )/2;for _fdbg :=_beaf ;_fdbg < _ccbd ;_fdbg ++{for _gbgb :=_fab ;_gbgb < _gbg ;_gbgb ++{if _dabf .GetPixel (_fdbg ,_gbgb ){if _fdbg < _fade {_abae ++;}else {_fbe ++;};if _gbgb < _eaed {_adcb ++;}else {_fgcc ++;};};};};_gff [_ddcb ][_dfd ]=_abae +_fbe ;
_daa [_ddcb *2][_dfd ]=_abae ;_daa [_ddcb *2+1][_dfd ]=_fbe ;_fgg [_ddcb ][_dfd *2]=_adcb ;_fgg [_ddcb ][_dfd *2+1]=_fgcc ;};};for _aaa :=0;_aaa < _ddbe *2-1;_aaa ++{for _fdbgb :=0;_fdbgb < (_ddbe -1);_fdbgb ++{var _bdcc int ;for _eaee :=0;_eaee < 2;_eaee ++{for _fdfe :=0;
_fdfe < 2;_fdfe ++{_bdcc +=_daa [_aaa +_eaee ][_fdbgb +_fdfe ];};};if _bdcc > _efe {return false ;};};};for _edbd :=0;_edbd < (_ddbe -1);_edbd ++{for _fbf :=0;_fbf < ((_ddbe *2)-1);_fbf ++{var _ebb int ;for _agb :=0;_agb < 2;_agb ++{for _gdec :=0;_gdec < 2;
_gdec ++{_ebb +=_fgg [_edbd +_agb ][_fbf +_gdec ];};};if _ebb > _bgf {return false ;};};};for _efca :=0;_efca < (_ddbe -2);_efca ++{for _ddgc :=0;_ddgc < (_ddbe -2);_ddgc ++{var _dfgg ,_ebcd int ;for _bge :=0;_bge < 3;_bge ++{for _ada :=0;_ada < 3;_ada ++{if _bge ==_ada {_dfgg +=_gff [_efca +_bge ][_ddgc +_ada ];
};if (2-_bge )==_ada {_ebcd +=_gff [_efca +_bge ][_ddgc +_ada ];};};};if _dfgg > _efe ||_ebcd > _efe {return false ;};};};for _babca :=0;_babca < (_ddbe -1);_babca ++{for _aec :=0;_aec < (_ddbe -1);_aec ++{var _dcb int ;for _ggba :=0;_ggba < 2;_ggba ++{for _agba :=0;
_agba < 2;_agba ++{_dcb +=_gff [_babca +_ggba ][_aec +_agba ];};};if float64 (_dcb )> _eebf {return false ;};};};return true ;};func Centroids (bms []*Bitmap )(*Points ,error ){_fadba :=make ([]Point ,len (bms ));_ffcdb :=_ced ();_aafb :=_eadbf ();var _dagc error ;
for _agdf ,_gggg :=range bms {_fadba [_agdf ],_dagc =_gggg .centroid (_ffcdb ,_aafb );if _dagc !=nil {return nil ,_dagc ;};};_cegc :=Points (_fadba );return &_cegc ,nil ;};type Selection struct{Height ,Width int ;Cx ,Cy int ;Name string ;Data [][]SelectionValue ;
};func _agbc (_eeae *Bitmap ,_cffg int )(*Bitmap ,error ){const _bcgb ="\u0065x\u0070a\u006e\u0064\u0052\u0065\u0070\u006c\u0069\u0063\u0061\u0074\u0065";if _eeae ==nil {return nil ,_b .Error (_bcgb ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _cffg <=0{return nil ,_b .Error (_bcgb ,"i\u006e\u0076\u0061\u006cid\u0020f\u0061\u0063\u0074\u006f\u0072 \u002d\u0020\u003c\u003d\u0020\u0030");};if _cffg ==1{_adbd ,_gfbb :=_cagf (nil ,_eeae );if _gfbb !=nil {return nil ,_b .Wrap (_gfbb ,_bcgb ,"\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u003d\u0020\u0031");
};return _adbd ,nil ;};_ecdfe ,_babee :=_cg (_eeae ,_cffg ,_cffg );if _babee !=nil {return nil ,_b .Wrap (_babee ,_bcgb ,"");};return _ecdfe ,nil ;};func TstImageBitmapInverseData ()[]byte {_cggb :=_bfdfb .Copy ();_cggb .InverseData ();return _cggb .Data ;
};func _fgdae (_afbe *Bitmap ,_gfda ,_gadbb ,_aacc ,_eddbd int ,_efdbd RasterOperator ,_acbd *Bitmap ,_aee ,_bged int )error {var (_dgc byte ;_afcf int ;_adccf int ;_gcb ,_ddfg int ;_fdggg ,_cgfg int ;);_bbcd :=_aacc >>3;_gcgd :=_aacc &7;if _gcgd > 0{_dgc =_bffg [_gcgd ];
};_afcf =_acbd .RowStride *_bged +(_aee >>3);_adccf =_afbe .RowStride *_gadbb +(_gfda >>3);switch _efdbd {case PixSrc :for _fdggg =0;_fdggg < _eddbd ;_fdggg ++{_gcb =_afcf +_fdggg *_acbd .RowStride ;_ddfg =_adccf +_fdggg *_afbe .RowStride ;for _cgfg =0;
_cgfg < _bbcd ;_cgfg ++{_afbe .Data [_ddfg ]=_acbd .Data [_gcb ];_ddfg ++;_gcb ++;};if _gcgd > 0{_afbe .Data [_ddfg ]=_bbbaf (_afbe .Data [_ddfg ],_acbd .Data [_gcb ],_dgc );};};case PixNotSrc :for _fdggg =0;_fdggg < _eddbd ;_fdggg ++{_gcb =_afcf +_fdggg *_acbd .RowStride ;
_ddfg =_adccf +_fdggg *_afbe .RowStride ;for _cgfg =0;_cgfg < _bbcd ;_cgfg ++{_afbe .Data [_ddfg ]=^(_acbd .Data [_gcb ]);_ddfg ++;_gcb ++;};if _gcgd > 0{_afbe .Data [_ddfg ]=_bbbaf (_afbe .Data [_ddfg ],^_acbd .Data [_gcb ],_dgc );};};case PixSrcOrDst :for _fdggg =0;
_fdggg < _eddbd ;_fdggg ++{_gcb =_afcf +_fdggg *_acbd .RowStride ;_ddfg =_adccf +_fdggg *_afbe .RowStride ;for _cgfg =0;_cgfg < _bbcd ;_cgfg ++{_afbe .Data [_ddfg ]|=_acbd .Data [_gcb ];_ddfg ++;_gcb ++;};if _gcgd > 0{_afbe .Data [_ddfg ]=_bbbaf (_afbe .Data [_ddfg ],_acbd .Data [_gcb ]|_afbe .Data [_ddfg ],_dgc );
};};case PixSrcAndDst :for _fdggg =0;_fdggg < _eddbd ;_fdggg ++{_gcb =_afcf +_fdggg *_acbd .RowStride ;_ddfg =_adccf +_fdggg *_afbe .RowStride ;for _cgfg =0;_cgfg < _bbcd ;_cgfg ++{_afbe .Data [_ddfg ]&=_acbd .Data [_gcb ];_ddfg ++;_gcb ++;};if _gcgd > 0{_afbe .Data [_ddfg ]=_bbbaf (_afbe .Data [_ddfg ],_acbd .Data [_gcb ]&_afbe .Data [_ddfg ],_dgc );
};};case PixSrcXorDst :for _fdggg =0;_fdggg < _eddbd ;_fdggg ++{_gcb =_afcf +_fdggg *_acbd .RowStride ;_ddfg =_adccf +_fdggg *_afbe .RowStride ;for _cgfg =0;_cgfg < _bbcd ;_cgfg ++{_afbe .Data [_ddfg ]^=_acbd .Data [_gcb ];_ddfg ++;_gcb ++;};if _gcgd > 0{_afbe .Data [_ddfg ]=_bbbaf (_afbe .Data [_ddfg ],_acbd .Data [_gcb ]^_afbe .Data [_ddfg ],_dgc );
};};case PixNotSrcOrDst :for _fdggg =0;_fdggg < _eddbd ;_fdggg ++{_gcb =_afcf +_fdggg *_acbd .RowStride ;_ddfg =_adccf +_fdggg *_afbe .RowStride ;for _cgfg =0;_cgfg < _bbcd ;_cgfg ++{_afbe .Data [_ddfg ]|=^(_acbd .Data [_gcb ]);_ddfg ++;_gcb ++;};if _gcgd > 0{_afbe .Data [_ddfg ]=_bbbaf (_afbe .Data [_ddfg ],^(_acbd .Data [_gcb ])|_afbe .Data [_ddfg ],_dgc );
};};case PixNotSrcAndDst :for _fdggg =0;_fdggg < _eddbd ;_fdggg ++{_gcb =_afcf +_fdggg *_acbd .RowStride ;_ddfg =_adccf +_fdggg *_afbe .RowStride ;for _cgfg =0;_cgfg < _bbcd ;_cgfg ++{_afbe .Data [_ddfg ]&=^(_acbd .Data [_gcb ]);_ddfg ++;_gcb ++;};if _gcgd > 0{_afbe .Data [_ddfg ]=_bbbaf (_afbe .Data [_ddfg ],^(_acbd .Data [_gcb ])&_afbe .Data [_ddfg ],_dgc );
};};case PixSrcOrNotDst :for _fdggg =0;_fdggg < _eddbd ;_fdggg ++{_gcb =_afcf +_fdggg *_acbd .RowStride ;_ddfg =_adccf +_fdggg *_afbe .RowStride ;for _cgfg =0;_cgfg < _bbcd ;_cgfg ++{_afbe .Data [_ddfg ]=_acbd .Data [_gcb ]|^(_afbe .Data [_ddfg ]);_ddfg ++;
_gcb ++;};if _gcgd > 0{_afbe .Data [_ddfg ]=_bbbaf (_afbe .Data [_ddfg ],_acbd .Data [_gcb ]|^(_afbe .Data [_ddfg ]),_dgc );};};case PixSrcAndNotDst :for _fdggg =0;_fdggg < _eddbd ;_fdggg ++{_gcb =_afcf +_fdggg *_acbd .RowStride ;_ddfg =_adccf +_fdggg *_afbe .RowStride ;
for _cgfg =0;_cgfg < _bbcd ;_cgfg ++{_afbe .Data [_ddfg ]=_acbd .Data [_gcb ]&^(_afbe .Data [_ddfg ]);_ddfg ++;_gcb ++;};if _gcgd > 0{_afbe .Data [_ddfg ]=_bbbaf (_afbe .Data [_ddfg ],_acbd .Data [_gcb ]&^(_afbe .Data [_ddfg ]),_dgc );};};case PixNotPixSrcOrDst :for _fdggg =0;
_fdggg < _eddbd ;_fdggg ++{_gcb =_afcf +_fdggg *_acbd .RowStride ;_ddfg =_adccf +_fdggg *_afbe .RowStride ;for _cgfg =0;_cgfg < _bbcd ;_cgfg ++{_afbe .Data [_ddfg ]=^(_acbd .Data [_gcb ]|_afbe .Data [_ddfg ]);_ddfg ++;_gcb ++;};if _gcgd > 0{_afbe .Data [_ddfg ]=_bbbaf (_afbe .Data [_ddfg ],^(_acbd .Data [_gcb ]|_afbe .Data [_ddfg ]),_dgc );
};};case PixNotPixSrcAndDst :for _fdggg =0;_fdggg < _eddbd ;_fdggg ++{_gcb =_afcf +_fdggg *_acbd .RowStride ;_ddfg =_adccf +_fdggg *_afbe .RowStride ;for _cgfg =0;_cgfg < _bbcd ;_cgfg ++{_afbe .Data [_ddfg ]=^(_acbd .Data [_gcb ]&_afbe .Data [_ddfg ]);
_ddfg ++;_gcb ++;};if _gcgd > 0{_afbe .Data [_ddfg ]=_bbbaf (_afbe .Data [_ddfg ],^(_acbd .Data [_gcb ]&_afbe .Data [_ddfg ]),_dgc );};};case PixNotPixSrcXorDst :for _fdggg =0;_fdggg < _eddbd ;_fdggg ++{_gcb =_afcf +_fdggg *_acbd .RowStride ;_ddfg =_adccf +_fdggg *_afbe .RowStride ;
for _cgfg =0;_cgfg < _bbcd ;_cgfg ++{_afbe .Data [_ddfg ]=^(_acbd .Data [_gcb ]^_afbe .Data [_ddfg ]);_ddfg ++;_gcb ++;};if _gcgd > 0{_afbe .Data [_ddfg ]=_bbbaf (_afbe .Data [_ddfg ],^(_acbd .Data [_gcb ]^_afbe .Data [_ddfg ]),_dgc );};};default:_aa .Log .Debug ("\u0050\u0072ov\u0069\u0064\u0065d\u0020\u0069\u006e\u0076ali\u0064 r\u0061\u0073\u0074\u0065\u0072\u0020\u006fpe\u0072\u0061\u0074\u006f\u0072\u003a\u0020%\u0076",_efdbd );
return _b .Error ("\u0072\u0061\u0073\u0074er\u004f\u0070\u0042\u0079\u0074\u0065\u0041\u006c\u0069\u0067\u006e\u0065\u0064\u004co\u0077","\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");
};return nil ;};func (_cfcd *byWidth )Len ()int {return len (_cfcd .Values )};func TstOSymbol (t *_bc .T ,scale ...int )*Bitmap {_ccda ,_cdcc :=NewWithData (4,5,[]byte {0xF0,0x90,0x90,0x90,0xF0});_ba .NoError (t ,_cdcc );return TstGetScaledSymbol (t ,_ccda ,scale ...);
};func (_gfe *Bitmap )inverseData (){if _cbgg :=_gfe .RasterOperation (0,0,_gfe .Width ,_gfe .Height ,PixNotDst ,nil ,0,0);_cbgg !=nil {_aa .Log .Debug ("\u0049n\u0076\u0065\u0072\u0073e\u0020\u0064\u0061\u0074\u0061 \u0066a\u0069l\u0065\u0064\u003a\u0020\u0027\u0025\u0076'",_cbgg );
};if _gfe .Color ==Chocolate {_gfe .Color =Vanilla ;}else {_gfe .Color =Chocolate ;};};func (_abd *Bitmap )clipRectangle (_dadg ,_bac *_ff .Rectangle )(_eaab *Bitmap ,_acff error ){const _aafef ="\u0063\u006c\u0069\u0070\u0052\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065";
if _dadg ==nil {return nil ,_b .Error (_aafef ,"\u0070r\u006fv\u0069\u0064\u0065\u0064\u0020n\u0069\u006c \u0027\u0062\u006f\u0078\u0027");};_gede ,_gdeg :=_abd .Width ,_abd .Height ;_ggaa ,_acff :=ClipBoxToRectangle (_dadg ,_gede ,_gdeg );if _acff !=nil {_aa .Log .Warning ("\u0027\u0062ox\u0027\u0020\u0064o\u0065\u0073\u006e\u0027t o\u0076er\u006c\u0061\u0070\u0020\u0062\u0069\u0074ma\u0070\u0020\u0027\u0062\u0027\u003a\u0020%\u0076",_acff );
return nil ,nil ;};_bec ,_dgag :=_ggaa .Min .X ,_ggaa .Min .Y ;_aea ,_fga :=_ggaa .Max .X -_ggaa .Min .X ,_ggaa .Max .Y -_ggaa .Min .Y ;_eaab =New (_aea ,_fga );_eaab .Text =_abd .Text ;if _acff =_eaab .RasterOperation (0,0,_aea ,_fga ,PixSrc ,_abd ,_bec ,_dgag );
_acff !=nil {return nil ,_b .Wrap (_acff ,_aafef ,"");};if _bac !=nil {*_bac =*_ggaa ;};return _eaab ,nil ;};func _fadbc (_fdfae ,_egef *Bitmap ,_gfaab ,_ggcg int )(*Bitmap ,error ){const _fbb ="\u0065\u0072\u006f\u0064\u0065\u0042\u0072\u0069\u0063\u006b";
if _egef ==nil {return nil ,_b .Error (_fbb ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _gfaab < 1||_ggcg < 1{return nil ,_b .Error (_fbb ,"\u0068\u0073\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0073\u0069\u007a\u0065\u0020\u0061\u0072e\u0020\u006e\u006f\u0074\u0020\u0067\u0072e\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006fr\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0031");
};if _gfaab ==1&&_ggcg ==1{_dbad ,_acac :=_cagf (_fdfae ,_egef );if _acac !=nil {return nil ,_b .Wrap (_acac ,_fbb ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u0026\u0026 \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _dbad ,nil ;};if _gfaab ==1||_ggcg ==1{_fdgdc :=SelCreateBrick (_ggcg ,_gfaab ,_ggcg /2,_gfaab /2,SelHit );_bdfda ,_dbbb :=_ggeb (_fdfae ,_egef ,_fdgdc );if _dbbb !=nil {return nil ,_b .Wrap (_dbbb ,_fbb ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _bdfda ,nil ;};_gdegc :=SelCreateBrick (1,_gfaab ,0,_gfaab /2,SelHit );_ddf :=SelCreateBrick (_ggcg ,1,_ggcg /2,0,SelHit );_ffae ,_gdfe :=_ggeb (nil ,_egef ,_gdegc );if _gdfe !=nil {return nil ,_b .Wrap (_gdfe ,_fbb ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};_fdfae ,_gdfe =_ggeb (_fdfae ,_ffae ,_ddf );if _gdfe !=nil {return nil ,_b .Wrap (_gdfe ,_fbb ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};return _fdfae ,nil ;};const (_ SizeComparison =iota ;SizeSelectIfLT ;SizeSelectIfGT ;SizeSelectIfLTE ;SizeSelectIfGTE ;
SizeSelectIfEQ ;);func TstNSymbol (t *_bc .T ,scale ...int )*Bitmap {_bbbb ,_bed :=NewWithData (4,5,[]byte {0x90,0xD0,0xB0,0x90,0x90});_ba .NoError (t ,_bed );return TstGetScaledSymbol (t ,_bbbb ,scale ...);};const (_ SizeSelection =iota ;SizeSelectByWidth ;
SizeSelectByHeight ;SizeSelectByMaxDimension ;SizeSelectByArea ;SizeSelectByPerimeter ;);func (_adef *BitmapsArray )AddBitmaps (bm *Bitmaps ){_adef .Values =append (_adef .Values ,bm )};func New (width ,height int )*Bitmap {_fef :=_baf (width ,height );
_fef .Data =make ([]byte ,height *_fef .RowStride );return _fef ;};type Getter interface{GetBitmap ()*Bitmap ;};func CorrelationScore (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab []int )(_ffbe float64 ,_feca error ){const _acafb ="\u0063\u006fr\u0072\u0065\u006ca\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065";
if bm1 ==nil ||bm2 ==nil {return 0,_b .Error (_acafb ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0062\u0069\u0074ma\u0070\u0073");};if tab ==nil {return 0,_b .Error (_acafb ,"\u0027\u0074\u0061\u0062\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};if area1 <=0||area2 <=0{return 0,_b .Error (_acafb ,"\u0061\u0072\u0065\u0061s\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0067r\u0065a\u0074\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u0030");};_cgfd ,_ddea :=bm1 .Width ,bm1 .Height ;_fafa ,_eccf :=bm2 .Width ,bm2 .Height ;
_dbdg :=_fega (_cgfd -_fafa );if _dbdg > maxDiffW {return 0,nil ;};_ggc :=_fega (_ddea -_eccf );if _ggc > maxDiffH {return 0,nil ;};var _bdba ,_eccaf int ;if delX >=0{_bdba =int (delX +0.5);}else {_bdba =int (delX -0.5);};if delY >=0{_eccaf =int (delY +0.5);
}else {_eccaf =int (delY -0.5);};_dbdf :=_gfaf (_eccaf ,0);_acafc :=_aac (_eccf +_eccaf ,_ddea );_gfdc :=bm1 .RowStride *_dbdf ;_efggf :=bm2 .RowStride *(_dbdf -_eccaf );_fcbd :=_gfaf (_bdba ,0);_gdf :=_aac (_fafa +_bdba ,_cgfd );_beag :=bm2 .RowStride ;
var _cdea ,_efeb int ;if _bdba >=8{_cdea =_bdba >>3;_gfdc +=_cdea ;_fcbd -=_cdea <<3;_gdf -=_cdea <<3;_bdba &=7;}else if _bdba <=-8{_efeb =-((_bdba +7)>>3);_efggf +=_efeb ;_beag -=_efeb ;_bdba +=_efeb <<3;};if _fcbd >=_gdf ||_dbdf >=_acafc {return 0,nil ;
};_ddge :=(_gdf +7)>>3;var (_bfcf ,_dacf ,_fgbf byte ;_fgeb ,_cfe ,_bbee int ;);switch {case _bdba ==0:for _bbee =_dbdf ;_bbee < _acafc ;_bbee ,_gfdc ,_efggf =_bbee +1,_gfdc +bm1 .RowStride ,_efggf +bm2 .RowStride {for _cfe =0;_cfe < _ddge ;_cfe ++{_fgbf =bm1 .Data [_gfdc +_cfe ]&bm2 .Data [_efggf +_cfe ];
_fgeb +=tab [_fgbf ];};};case _bdba > 0:if _beag < _ddge {for _bbee =_dbdf ;_bbee < _acafc ;_bbee ,_gfdc ,_efggf =_bbee +1,_gfdc +bm1 .RowStride ,_efggf +bm2 .RowStride {_bfcf ,_dacf =bm1 .Data [_gfdc ],bm2 .Data [_efggf ]>>uint (_bdba );_fgbf =_bfcf &_dacf ;
_fgeb +=tab [_fgbf ];for _cfe =1;_cfe < _beag ;_cfe ++{_bfcf ,_dacf =bm1 .Data [_gfdc +_cfe ],(bm2 .Data [_efggf +_cfe ]>>uint (_bdba ))|(bm2 .Data [_efggf +_cfe -1]<<uint (8-_bdba ));_fgbf =_bfcf &_dacf ;_fgeb +=tab [_fgbf ];};_bfcf =bm1 .Data [_gfdc +_cfe ];
_dacf =bm2 .Data [_efggf +_cfe -1]<<uint (8-_bdba );_fgbf =_bfcf &_dacf ;_fgeb +=tab [_fgbf ];};}else {for _bbee =_dbdf ;_bbee < _acafc ;_bbee ,_gfdc ,_efggf =_bbee +1,_gfdc +bm1 .RowStride ,_efggf +bm2 .RowStride {_bfcf ,_dacf =bm1 .Data [_gfdc ],bm2 .Data [_efggf ]>>uint (_bdba );
_fgbf =_bfcf &_dacf ;_fgeb +=tab [_fgbf ];for _cfe =1;_cfe < _ddge ;_cfe ++{_bfcf =bm1 .Data [_gfdc +_cfe ];_dacf =(bm2 .Data [_efggf +_cfe ]>>uint (_bdba ))|(bm2 .Data [_efggf +_cfe -1]<<uint (8-_bdba ));_fgbf =_bfcf &_dacf ;_fgeb +=tab [_fgbf ];};};};
default:if _ddge < _beag {for _bbee =_dbdf ;_bbee < _acafc ;_bbee ,_gfdc ,_efggf =_bbee +1,_gfdc +bm1 .RowStride ,_efggf +bm2 .RowStride {for _cfe =0;_cfe < _ddge ;_cfe ++{_bfcf =bm1 .Data [_gfdc +_cfe ];_dacf =bm2 .Data [_efggf +_cfe ]<<uint (-_bdba );
_dacf |=bm2 .Data [_efggf +_cfe +1]>>uint (8+_bdba );_fgbf =_bfcf &_dacf ;_fgeb +=tab [_fgbf ];};};}else {for _bbee =_dbdf ;_bbee < _acafc ;_bbee ,_gfdc ,_efggf =_bbee +1,_gfdc +bm1 .RowStride ,_efggf +bm2 .RowStride {for _cfe =0;_cfe < _ddge -1;_cfe ++{_bfcf =bm1 .Data [_gfdc +_cfe ];
_dacf =bm2 .Data [_efggf +_cfe ]<<uint (-_bdba );_dacf |=bm2 .Data [_efggf +_cfe +1]>>uint (8+_bdba );_fgbf =_bfcf &_dacf ;_fgeb +=tab [_fgbf ];};_bfcf =bm1 .Data [_gfdc +_cfe ];_dacf =bm2 .Data [_efggf +_cfe ]<<uint (-_bdba );_fgbf =_bfcf &_dacf ;_fgeb +=tab [_fgbf ];
};};};_ffbe =float64 (_fgeb )*float64 (_fgeb )/(float64 (area1 )*float64 (area2 ));return _ffbe ,nil ;};func TstWordBitmapWithSpaces (t *_bc .T ,scale ...int )*Bitmap {_feage :=1;if len (scale )> 0{_feage =scale [0];};_egbb :=3;_gdebc :=9+7+15+2*_egbb +2*_egbb ;
_daaae :=5+_egbb +5+2*_egbb ;_ccdgd :=New (_gdebc *_feage ,_daaae *_feage );_dadbb :=&Bitmaps {};var _dffe *int ;_egbb *=_feage ;_cbga :=_egbb ;_dffe =&_cbga ;_gfae :=_egbb ;_ebbb :=TstDSymbol (t ,scale ...);TstAddSymbol (t ,_dadbb ,_ebbb ,_dffe ,_gfae ,1*_feage );
_ebbb =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_dadbb ,_ebbb ,_dffe ,_gfae ,_egbb );_ebbb =TstISymbol (t ,scale ...);TstAddSymbol (t ,_dadbb ,_ebbb ,_dffe ,_gfae ,1*_feage );_ebbb =TstTSymbol (t ,scale ...);TstAddSymbol (t ,_dadbb ,_ebbb ,_dffe ,_gfae ,_egbb );
_ebbb =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_dadbb ,_ebbb ,_dffe ,_gfae ,1*_feage );_ebbb =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_dadbb ,_ebbb ,_dffe ,_gfae ,1*_feage );_ebbb =TstWSymbol (t ,scale ...);TstAddSymbol (t ,_dadbb ,_ebbb ,_dffe ,_gfae ,0);
*_dffe =_egbb ;_gfae =5*_feage +_egbb ;_ebbb =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_dadbb ,_ebbb ,_dffe ,_gfae ,1*_feage );_ebbb =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_dadbb ,_ebbb ,_dffe ,_gfae ,_egbb );_ebbb =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_dadbb ,_ebbb ,_dffe ,_gfae ,1*_feage );
_ebbb =TstESymbol (t ,scale ...);TstAddSymbol (t ,_dadbb ,_ebbb ,_dffe ,_gfae ,1*_feage );_ebbb =TstVSymbol (t ,scale ...);TstAddSymbol (t ,_dadbb ,_ebbb ,_dffe ,_gfae ,1*_feage );_ebbb =TstESymbol (t ,scale ...);TstAddSymbol (t ,_dadbb ,_ebbb ,_dffe ,_gfae ,1*_feage );
_ebbb =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_dadbb ,_ebbb ,_dffe ,_gfae ,0);TstWriteSymbols (t ,_dadbb ,_ccdgd );return _ccdgd ;};func _gfaf (_beff ,_fead int )int {if _beff > _fead {return _beff ;};return _fead ;};func _dgg ()(_ege [256]uint32 ){for _ecc :=0;
_ecc < 256;_ecc ++{if _ecc &0x01!=0{_ege [_ecc ]|=0xf;};if _ecc &0x02!=0{_ege [_ecc ]|=0xf0;};if _ecc &0x04!=0{_ege [_ecc ]|=0xf00;};if _ecc &0x08!=0{_ege [_ecc ]|=0xf000;};if _ecc &0x10!=0{_ege [_ecc ]|=0xf0000;};if _ecc &0x20!=0{_ege [_ecc ]|=0xf00000;
};if _ecc &0x40!=0{_ege [_ecc ]|=0xf000000;};if _ecc &0x80!=0{_ege [_ecc ]|=0xf0000000;};};return _ege ;};var _ _bg .Interface =&ClassedPoints {};func (_ccde CombinationOperator )String ()string {var _fcgbe string ;switch _ccde {case CmbOpOr :_fcgbe ="\u004f\u0052";
case CmbOpAnd :_fcgbe ="\u0041\u004e\u0044";case CmbOpXor :_fcgbe ="\u0058\u004f\u0052";case CmbOpXNor :_fcgbe ="\u0058\u004e\u004f\u0052";case CmbOpReplace :_fcgbe ="\u0052E\u0050\u004c\u0041\u0043\u0045";case CmbOpNot :_fcgbe ="\u004e\u004f\u0054";};
return _fcgbe ;};func _eadbf ()[]int {_caf :=make ([]int ,256);for _fafd :=0;_fafd <=0xff;_fafd ++{_adbdb :=byte (_fafd );_caf [_adbdb ]=int (_adbdb &0x1)+(int (_adbdb >>1)&0x1)+(int (_adbdb >>2)&0x1)+(int (_adbdb >>3)&0x1)+(int (_adbdb >>4)&0x1)+(int (_adbdb >>5)&0x1)+(int (_adbdb >>6)&0x1)+(int (_adbdb >>7)&0x1);
};return _caf ;};func _dbce (_fdfcg *Bitmap ,_cfda *Bitmap ,_gacc *Selection ,_dcdc **Bitmap )(*Bitmap ,error ){const _ceace ="\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u004d\u006f\u0072\u0070\u0068A\u0072\u0067\u0073\u0031";if _cfda ==nil {return nil ,_b .Error (_ceace ,"\u004d\u006f\u0072\u0070\u0068\u0041\u0072\u0067\u0073\u0031\u0020'\u0073\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066i\u006e\u0065\u0064");
};if _gacc ==nil {return nil ,_b .Error (_ceace ,"\u004d\u006f\u0072\u0068p\u0041\u0072\u0067\u0073\u0031\u0020\u0027\u0073\u0065\u006c'\u0020n\u006f\u0074\u0020\u0064\u0065\u0066\u0069n\u0065\u0064");};_fccc ,_aaae :=_gacc .Height ,_gacc .Width ;if _fccc ==0||_aaae ==0{return nil ,_b .Error (_ceace ,"\u0073\u0065\u006c\u0065ct\u0069\u006f\u006e\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u0020\u0030");
};if _fdfcg ==nil {_fdfcg =_cfda .createTemplate ();*_dcdc =_cfda ;return _fdfcg ,nil ;};_fdfcg .Width =_cfda .Width ;_fdfcg .Height =_cfda .Height ;_fdfcg .RowStride =_cfda .RowStride ;_fdfcg .Color =_cfda .Color ;_fdfcg .Data =make ([]byte ,_cfda .RowStride *_cfda .Height );
if _fdfcg ==_cfda {*_dcdc =_cfda .Copy ();}else {*_dcdc =_cfda ;};return _fdfcg ,nil ;};func MakePixelCentroidTab8 ()[]int {return _ced ()};func _cegac (_aged *_d .Stack ,_efafb ,_cgba ,_cgbab ,_aaffg ,_eggd int ,_egadg *_ff .Rectangle )(_gfgb error ){const _ggag ="\u0070\u0075\u0073\u0068\u0046\u0069\u006c\u006c\u0053\u0065\u0067m\u0065\u006e\u0074\u0042\u006f\u0075\u006e\u0064\u0069\u006eg\u0042\u006f\u0078";
if _aged ==nil {return _b .Error (_ggag ,"\u006ei\u006c \u0073\u0074\u0061\u0063\u006b \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};if _egadg ==nil {return _b .Error (_ggag ,"\u0070\u0072\u006f\u0076i\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0069\u006da\u0067e\u002e\u0052\u0065\u0063\u0074\u0061\u006eg\u006c\u0065");
};_egadg .Min .X =_d .Min (_egadg .Min .X ,_efafb );_egadg .Max .X =_d .Max (_egadg .Max .X ,_cgba );_egadg .Min .Y =_d .Min (_egadg .Min .Y ,_cgbab );_egadg .Max .Y =_d .Max (_egadg .Max .Y ,_cgbab );if !(_cgbab +_aaffg >=0&&_cgbab +_aaffg <=_eggd ){return nil ;
};if _aged .Aux ==nil {return _b .Error (_ggag ,"a\u0075x\u0053\u0074\u0061\u0063\u006b\u0020\u006e\u006ft\u0020\u0064\u0065\u0066in\u0065\u0064");};var _eeccc *fillSegment ;_ggcb ,_ggbc :=_aged .Aux .Pop ();if _ggbc {if _eeccc ,_ggbc =_ggcb .(*fillSegment );
!_ggbc {return _b .Error (_ggag ,"a\u0075\u0078\u0053\u0074\u0061\u0063k\u0020\u0064\u0061\u0074\u0061\u0020i\u0073\u0020\u006e\u006f\u0074\u0020\u0061 \u002a\u0066\u0069\u006c\u006c\u0053\u0065\u0067\u006d\u0065n\u0074");};}else {_eeccc =&fillSegment {};
};_eeccc ._fgfdd =_efafb ;_eeccc ._aegfc =_cgba ;_eeccc ._dfab =_cgbab ;_eeccc ._dffdb =_aaffg ;_aged .Push (_eeccc );return nil ;};func _dggf (_ccdg ,_agbab *Bitmap ,_cecce ,_dfbf int )(*Bitmap ,error ){const _efdfg ="\u0063\u006c\u006f\u0073\u0065\u0042\u0072\u0069\u0063\u006b";
if _agbab ==nil {return nil ,_b .Error (_efdfg ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _cecce < 1||_dfbf < 1{return nil ,_b .Error (_efdfg ,"\u0068S\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0053\u0069z\u0065\u0020\u006e\u006f\u0074\u0020\u003e\u003d\u0020\u0031");
};if _cecce ==1&&_dfbf ==1{return _agbab .Copy (),nil ;};if _cecce ==1||_dfbf ==1{_bcbb :=SelCreateBrick (_dfbf ,_cecce ,_dfbf /2,_cecce /2,SelHit );var _edac error ;_ccdg ,_edac =_aabe (_ccdg ,_agbab ,_bcbb );if _edac !=nil {return nil ,_b .Wrap (_edac ,_efdfg ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _ccdg ,nil ;};_aaad :=SelCreateBrick (1,_cecce ,0,_cecce /2,SelHit );_ccdge :=SelCreateBrick (_dfbf ,1,_dfbf /2,0,SelHit );_bgeb ,_bbgdg :=_fagef (nil ,_agbab ,_aaad );if _bbgdg !=nil {return nil ,_b .Wrap (_bbgdg ,_efdfg ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};if _ccdg ,_bbgdg =_fagef (_ccdg ,_bgeb ,_ccdge );_bbgdg !=nil {return nil ,_b .Wrap (_bbgdg ,_efdfg ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};if _ ,_bbgdg =_ggeb (_bgeb ,_ccdg ,_aaad );_bbgdg !=nil {return nil ,_b .Wrap (_bbgdg ,_efdfg ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};if _ ,_bbgdg =_ggeb (_ccdg ,_bgeb ,_ccdge );_bbgdg !=nil {return nil ,_b .Wrap (_bbgdg ,_efdfg ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};return _ccdg ,nil ;};const (_ LocationFilter =iota ;LocSelectWidth ;LocSelectHeight ;LocSelectXVal ;LocSelectYVal ;
LocSelectIfEither ;LocSelectIfBoth ;);func (_ebbe *Bitmap )setPadBits (_fdaa int ){_ggd :=8-_ebbe .Width %8;if _ggd ==8{return ;};_bca :=_ebbe .Width /8;_decg :=_gceg [_ggd ];if _fdaa ==0{_decg ^=_decg ;};var _gfee int ;for _ceac :=0;_ceac < _ebbe .Height ;
_ceac ++{_gfee =_ceac *_ebbe .RowStride +_bca ;if _fdaa ==0{_ebbe .Data [_gfee ]&=_decg ;}else {_ebbe .Data [_gfee ]|=_decg ;};};};func (_dddab *Bitmap )GetByte (index int )(byte ,error ){if index > len (_dddab .Data )-1||index < 0{return 0,_b .Errorf ("\u0047e\u0074\u0042\u0079\u0074\u0065","\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",index );
};return _dddab .Data [index ],nil ;};func (_fge *Bitmap )CreateTemplate ()*Bitmap {return _fge .createTemplate ()};type CombinationOperator int ;type MorphProcess struct{Operation MorphOperation ;Arguments []int ;};type Color int ;func (_bcgg *Selection )setOrigin (_gdaf ,_bdbaf int ){_bcgg .Cy ,_bcgg .Cx =_gdaf ,_bdbaf };
func (_daed *ClassedPoints )GetIntYByClass (i int )(int ,error ){const _gdfa ="\u0043\u006c\u0061\u0073s\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047e\u0074I\u006e\u0074\u0059\u0042\u0079\u0043\u006ca\u0073\u0073";if i >=_daed .IntSlice .Size (){return 0,_b .Errorf (_gdfa ,"\u0069\u003a\u0020\u0027\u0025\u0064\u0027 \u0069\u0073\u0020o\u0075\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065",i );
};return int (_daed .YAtIndex (i )),nil ;};func _bbbe (_bacb ,_eebc byte ,_fcca CombinationOperator )byte {switch _fcca {case CmbOpOr :return _eebc |_bacb ;case CmbOpAnd :return _eebc &_bacb ;case CmbOpXor :return _eebc ^_bacb ;case CmbOpXNor :return ^(_eebc ^_bacb );
case CmbOpNot :return ^(_eebc );default:return _eebc ;};};func _aegba (_fcdf *Bitmap ,_dfbd *_d .Stack ,_ccae ,_daca ,_cage int )(_dffd *_ff .Rectangle ,_cabb error ){const _cegfa ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";
if _fcdf ==nil {return nil ,_b .Error (_cegfa ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _dfbd ==nil {return nil ,_b .Error (_cegfa ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");
};switch _cage {case 4:if _dffd ,_cabb =_bbcg (_fcdf ,_dfbd ,_ccae ,_daca );_cabb !=nil {return nil ,_b .Wrap (_cabb ,_cegfa ,"");};return _dffd ,nil ;case 8:if _dffd ,_cabb =_bacf (_fcdf ,_dfbd ,_ccae ,_daca );_cabb !=nil {return nil ,_b .Wrap (_cabb ,_cegfa ,"");
};return _dffd ,nil ;default:return nil ,_b .Errorf (_cegfa ,"\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u0069\u0073 \u006eo\u0074\u0020\u0034\u0020\u006f\u0072\u0020\u0038\u003a\u0020\u0027\u0025\u0064\u0027",_cage );
};};func Blit (src *Bitmap ,dst *Bitmap ,x ,y int ,op CombinationOperator )error {var _cee ,_fac int ;_dedcg :=src .RowStride -1;if x < 0{_fac =-x ;x =0;}else if x +src .Width > dst .Width {_dedcg -=src .Width +x -dst .Width ;};if y < 0{_cee =-y ;y =0;
_fac +=src .RowStride ;_dedcg +=src .RowStride ;}else if y +src .Height > dst .Height {_cee =src .Height +y -dst .Height ;};var (_ffcd int ;_aca error ;);_bfgb :=x &0x07;_cfbb :=8-_bfgb ;_defd :=src .Width &0x07;_dgab :=_cfbb -_defd ;_fdae :=_cfbb &0x07!=0;
_dcef :=src .Width <=((_dedcg -_fac )<<3)+_cfbb ;_dcgae :=dst .GetByteIndex (x ,y );_cdcb :=_cee +dst .Height ;if src .Height > _cdcb {_ffcd =_cdcb ;}else {_ffcd =src .Height ;};switch {case !_fdae :_aca =_feee (src ,dst ,_cee ,_ffcd ,_dcgae ,_fac ,_dedcg ,op );
case _dcef :_aca =_acfa (src ,dst ,_cee ,_ffcd ,_dcgae ,_fac ,_dedcg ,_dgab ,_bfgb ,_cfbb ,op );default:_aca =_gfec (src ,dst ,_cee ,_ffcd ,_dcgae ,_fac ,_dedcg ,_dgab ,_bfgb ,_cfbb ,op ,_defd );};return _aca ;};func (_ecgf Points )Size ()int {return len (_ecgf )};
func MakePixelSumTab8 ()[]int {return _eadbf ()};func TstDSymbol (t *_bc .T ,scale ...int )*Bitmap {_cbadd ,_ceda :=NewWithData (4,5,[]byte {0xf0,0x90,0x90,0x90,0xE0});_ba .NoError (t ,_ceda );return TstGetScaledSymbol (t ,_cbadd ,scale ...);};type Bitmaps struct{Values []*Bitmap ;
Boxes []*_ff .Rectangle ;};var (_bffg =[]byte {0x00,0x80,0xC0,0xE0,0xF0,0xF8,0xFC,0xFE,0xFF};_gceg =[]byte {0x00,0x01,0x03,0x07,0x0F,0x1F,0x3F,0x7F,0xFF};);func _daec (_cabd *Bitmap ,_geag ,_abceb ,_gbbfc ,_fcae int ,_debc RasterOperator ,_abdd *Bitmap ,_bade ,_egea int )error {const _gdcc ="\u0072a\u0073t\u0065\u0072\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e";
if _cabd ==nil {return _b .Error (_gdcc ,"\u006e\u0069\u006c\u0020\u0027\u0064\u0065\u0073\u0074\u0027\u0020\u0042i\u0074\u006d\u0061\u0070");};if _debc ==PixDst {return nil ;};switch _debc {case PixClr ,PixSet ,PixNotDst :_gaab (_cabd ,_geag ,_abceb ,_gbbfc ,_fcae ,_debc );
return nil ;};if _abdd ==nil {_aa .Log .Debug ("\u0052a\u0073\u0074e\u0072\u004f\u0070\u0065r\u0061\u0074\u0069o\u006e\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020bi\u0074\u006d\u0061p\u0020\u0069s\u0020\u006e\u006f\u0074\u0020\u0064e\u0066\u0069n\u0065\u0064");
return _b .Error (_gdcc ,"\u006e\u0069l\u0020\u0027\u0073r\u0063\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _ccfc :=_eacf (_cabd ,_geag ,_abceb ,_gbbfc ,_fcae ,_debc ,_abdd ,_bade ,_egea );_ccfc !=nil {return _b .Wrap (_ccfc ,_gdcc ,"");};return nil ;
};const (Vanilla Color =iota ;Chocolate ;);func (_adc *Bitmap )SetByte (index int ,v byte )error {if index > len (_adc .Data )-1||index < 0{return _b .Errorf ("\u0053e\u0074\u0042\u0079\u0074\u0065","\u0069\u006e\u0064\u0065x \u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020%\u0064",index );
};_adc .Data [index ]=v ;return nil ;};func _gaef (_dcagb *Bitmap ,_fdda ,_bdafg int ,_ceca ,_ccec int ,_bfaa RasterOperator ){var (_daeca int ;_ccad byte ;_cac ,_dgaea int ;_babf int ;);_ggdb :=_ceca >>3;_efba :=_ceca &7;if _efba > 0{_ccad =_bffg [_efba ];
};_daeca =_dcagb .RowStride *_bdafg +(_fdda >>3);switch _bfaa {case PixClr :for _cac =0;_cac < _ccec ;_cac ++{_babf =_daeca +_cac *_dcagb .RowStride ;for _dgaea =0;_dgaea < _ggdb ;_dgaea ++{_dcagb .Data [_babf ]=0x0;_babf ++;};if _efba > 0{_dcagb .Data [_babf ]=_bbbaf (_dcagb .Data [_babf ],0x0,_ccad );
};};case PixSet :for _cac =0;_cac < _ccec ;_cac ++{_babf =_daeca +_cac *_dcagb .RowStride ;for _dgaea =0;_dgaea < _ggdb ;_dgaea ++{_dcagb .Data [_babf ]=0xff;_babf ++;};if _efba > 0{_dcagb .Data [_babf ]=_bbbaf (_dcagb .Data [_babf ],0xff,_ccad );};};case PixNotDst :for _cac =0;
_cac < _ccec ;_cac ++{_babf =_daeca +_cac *_dcagb .RowStride ;for _dgaea =0;_dgaea < _ggdb ;_dgaea ++{_dcagb .Data [_babf ]=^_dcagb .Data [_babf ];_babf ++;};if _efba > 0{_dcagb .Data [_babf ]=_bbbaf (_dcagb .Data [_babf ],^_dcagb .Data [_babf ],_ccad );
};};};};func (_aage *Bitmap )Equivalent (s *Bitmap )bool {return _aage .equivalent (s )};func _bacf (_dfedb *Bitmap ,_egac *_d .Stack ,_bcfd ,_caee int )(_facd *_ff .Rectangle ,_ageg error ){const _dcbgb ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";
if _dfedb ==nil {return nil ,_b .Error (_dcbgb ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _egac ==nil {return nil ,_b .Error (_dcbgb ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");
};_caac ,_bcge :=_dfedb .Width ,_dfedb .Height ;_bafb :=_caac -1;_edef :=_bcge -1;if _bcfd < 0||_bcfd > _bafb ||_caee < 0||_caee > _edef ||!_dfedb .GetPixel (_bcfd ,_caee ){return nil ,nil ;};_gfdbd :=_ff .Rect (100000,100000,0,0);if _ageg =_cegac (_egac ,_bcfd ,_bcfd ,_caee ,1,_edef ,&_gfdbd );
_ageg !=nil {return nil ,_b .Wrap (_ageg ,_dcbgb ,"\u0069\u006e\u0069t\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _ageg =_cegac (_egac ,_bcfd ,_bcfd ,_caee +1,-1,_edef ,&_gfdbd );_ageg !=nil {return nil ,_b .Wrap (_ageg ,_dcbgb ,"\u0032\u006ed\u0020\u0069\u006ei\u0074\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");
};_gfdbd .Min .X ,_gfdbd .Max .X =_bcfd ,_bcfd ;_gfdbd .Min .Y ,_gfdbd .Max .Y =_caee ,_caee ;var (_ace *fillSegment ;_deac int ;);for _egac .Len ()> 0{if _ace ,_ageg =_bgdeb (_egac );_ageg !=nil {return nil ,_b .Wrap (_ageg ,_dcbgb ,"");};_caee =_ace ._dfab ;
for _bcfd =_ace ._fgfdd -1;_bcfd >=0&&_dfedb .GetPixel (_bcfd ,_caee );_bcfd --{if _ageg =_dfedb .SetPixel (_bcfd ,_caee ,0);_ageg !=nil {return nil ,_b .Wrap (_ageg ,_dcbgb ,"\u0031s\u0074\u0020\u0073\u0065\u0074");};};if _bcfd >=_ace ._fgfdd -1{for {for _bcfd ++;
_bcfd <=_ace ._aegfc +1&&_bcfd <=_bafb &&!_dfedb .GetPixel (_bcfd ,_caee );_bcfd ++{};_deac =_bcfd ;if !(_bcfd <=_ace ._aegfc +1&&_bcfd <=_bafb ){break ;};for ;_bcfd <=_bafb &&_dfedb .GetPixel (_bcfd ,_caee );_bcfd ++{if _ageg =_dfedb .SetPixel (_bcfd ,_caee ,0);
_ageg !=nil {return nil ,_b .Wrap (_ageg ,_dcbgb ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _ageg =_cegac (_egac ,_deac ,_bcfd -1,_ace ._dfab ,_ace ._dffdb ,_edef ,&_gfdbd );_ageg !=nil {return nil ,_b .Wrap (_ageg ,_dcbgb ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");
};if _bcfd > _ace ._aegfc {if _ageg =_cegac (_egac ,_ace ._aegfc +1,_bcfd -1,_ace ._dfab ,-_ace ._dffdb ,_edef ,&_gfdbd );_ageg !=nil {return nil ,_b .Wrap (_ageg ,_dcbgb ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};};continue ;};_deac =_bcfd +1;if _deac < _ace ._fgfdd {if _ageg =_cegac (_egac ,_deac ,_ace ._fgfdd -1,_ace ._dfab ,-_ace ._dffdb ,_edef ,&_gfdbd );_ageg !=nil {return nil ,_b .Wrap (_ageg ,_dcbgb ,"\u006c\u0065\u0061\u006b\u0020\u006f\u006e\u0020\u006c\u0065\u0066\u0074 \u0073\u0069\u0064\u0065");
};};_bcfd =_ace ._fgfdd ;for {for ;_bcfd <=_bafb &&_dfedb .GetPixel (_bcfd ,_caee );_bcfd ++{if _ageg =_dfedb .SetPixel (_bcfd ,_caee ,0);_ageg !=nil {return nil ,_b .Wrap (_ageg ,_dcbgb ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _ageg =_cegac (_egac ,_deac ,_bcfd -1,_ace ._dfab ,_ace ._dffdb ,_edef ,&_gfdbd );
_ageg !=nil {return nil ,_b .Wrap (_ageg ,_dcbgb ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _bcfd > _ace ._aegfc {if _ageg =_cegac (_egac ,_ace ._aegfc +1,_bcfd -1,_ace ._dfab ,-_ace ._dffdb ,_edef ,&_gfdbd );_ageg !=nil {return nil ,_b .Wrap (_ageg ,_dcbgb ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};for _bcfd ++;_bcfd <=_ace ._aegfc +1&&_bcfd <=_bafb &&!_dfedb .GetPixel (_bcfd ,_caee );_bcfd ++{};_deac =_bcfd ;if !(_bcfd <=_ace ._aegfc +1&&_bcfd <=_bafb ){break ;};};};_gfdbd .Max .X ++;_gfdbd .Max .Y ++;return &_gfdbd ,nil ;};func (_ceeb *Bitmaps )selectByIndexes (_aadfa []int )(*Bitmaps ,error ){_bdec :=&Bitmaps {};
for _ ,_cbgge :=range _aadfa {_cgaef ,_dgbd :=_ceeb .GetBitmap (_cbgge );if _dgbd !=nil {return nil ,_b .Wrap (_dgbd ,"\u0073e\u006ce\u0063\u0074\u0042\u0079\u0049\u006e\u0064\u0065\u0078\u0065\u0073","");};_bdec .AddBitmap (_cgaef );};return _bdec ,nil ;
};func _dbcc (_cfgc ,_fce *Bitmap ,_adfc CombinationOperator )*Bitmap {_gced :=New (_cfgc .Width ,_cfgc .Height );for _eaede :=0;_eaede < len (_gced .Data );_eaede ++{_gced .Data [_eaede ]=_bbbe (_cfgc .Data [_eaede ],_fce .Data [_eaede ],_adfc );};return _gced ;
};func _gaaa (_abdbb ,_cgef ,_dgfe *Bitmap ,_dfac int )(*Bitmap ,error ){const _debga ="\u0073\u0065\u0065\u0064\u0046\u0069\u006c\u006c\u0042i\u006e\u0061\u0072\u0079";if _cgef ==nil {return nil ,_b .Error (_debga ,"s\u006fu\u0072\u0063\u0065\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");
};if _dgfe ==nil {return nil ,_b .Error (_debga ,"'\u006da\u0073\u006b\u0027\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");};if _dfac !=4&&_dfac !=8{return nil ,_b .Error (_debga ,"\u0063\u006f\u006en\u0065\u0063\u0074\u0069v\u0069\u0074\u0079\u0020\u006e\u006f\u0074 \u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0034\u002c\u0038\u007d");
};var _ccdd error ;_abdbb ,_ccdd =_cagf (_abdbb ,_cgef );if _ccdd !=nil {return nil ,_b .Wrap (_ccdd ,_debga ,"\u0063o\u0070y\u0020\u0073\u006f\u0075\u0072c\u0065\u0020t\u006f\u0020\u0027\u0064\u0027");};_ddga :=_cgef .createTemplate ();_dgfe .setPadBits (0);
for _gffg :=0;_gffg < _agcb ;_gffg ++{_ddga ,_ccdd =_cagf (_ddga ,_abdbb );if _ccdd !=nil {return nil ,_b .Wrapf (_ccdd ,_debga ,"\u0069\u0074\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064",_gffg );};if _ccdd =_egae (_abdbb ,_dgfe ,_dfac );
_ccdd !=nil {return nil ,_b .Wrapf (_ccdd ,_debga ,"\u0069\u0074\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064",_gffg );};if _ddga .Equals (_abdbb ){break ;};};return _abdbb ,nil ;};func (_fbdde *Bitmap )connComponentsBB (_daaa int )(_aab *Boxes ,_eaad error ){const _bdbf ="\u0042\u0069\u0074ma\u0070\u002e\u0063\u006f\u006e\u006e\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0042\u0042";
if _daaa !=4&&_daaa !=8{return nil ,_b .Error (_bdbf ,"\u0063\u006f\u006e\u006e\u0065\u0063t\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0027\u0034\u0027\u0020\u006fr\u0020\u0027\u0038\u0027");};if _fbdde .Zero (){return &Boxes {},nil ;
};_fbdde .setPadBits (0);_bfa ,_eaad :=_cagf (nil ,_fbdde );if _eaad !=nil {return nil ,_b .Wrap (_eaad ,_bdbf ,"\u0062\u006d\u0031");};_cecb :=&_d .Stack {};_cecb .Aux =&_d .Stack {};_aab =&Boxes {};var (_ddbc ,_fdcc int ;_faed _ff .Point ;_dgaa bool ;
_dgdab *_ff .Rectangle ;);for {if _faed ,_dgaa ,_eaad =_bfa .nextOnPixel (_fdcc ,_ddbc );_eaad !=nil {return nil ,_b .Wrap (_eaad ,_bdbf ,"");};if !_dgaa {break ;};if _dgdab ,_eaad =_aegba (_bfa ,_cecb ,_faed .X ,_faed .Y ,_daaa );_eaad !=nil {return nil ,_b .Wrap (_eaad ,_bdbf ,"");
};if _eaad =_aab .Add (_dgdab );_eaad !=nil {return nil ,_b .Wrap (_eaad ,_bdbf ,"");};_fdcc =_faed .X ;_ddbc =_faed .Y ;};return _aab ,nil ;};func (_cdeg *Bitmap )setAll ()error {_agdc :=_daec (_cdeg ,0,0,_cdeg .Width ,_cdeg .Height ,PixSet ,nil ,0,0);
if _agdc !=nil {return _b .Wrap (_agdc ,"\u0073\u0065\u0074\u0041\u006c\u006c","");};return nil ;};func _feee (_fcd ,_fddb *Bitmap ,_bggc ,_fec ,_dede ,_ecgg ,_abfb int ,_ccd CombinationOperator )error {var _bbf int ;_bbade :=func (){_bbf ++;_dede +=_fddb .RowStride ;
_ecgg +=_fcd .RowStride ;_abfb +=_fcd .RowStride };for _bbf =_bggc ;_bbf < _fec ;_bbade (){_aaeb :=_dede ;for _acaa :=_ecgg ;_acaa <=_abfb ;_acaa ++{_dacgc ,_ebdd :=_fddb .GetByte (_aaeb );if _ebdd !=nil {return _ebdd ;};_efdfe ,_ebdd :=_fcd .GetByte (_acaa );
if _ebdd !=nil {return _ebdd ;};if _ebdd =_fddb .SetByte (_aaeb ,_bbbe (_dacgc ,_efdfe ,_ccd ));_ebdd !=nil {return _ebdd ;};_aaeb ++;};};return nil ;};func (_dege *ClassedPoints )ySortFunction ()func (_daeb int ,_dfeb int )bool {return func (_cbfg ,_ebab int )bool {return _dege .YAtIndex (_cbfg )< _dege .YAtIndex (_ebab )};
};func (_ecfg *Bitmap )GetComponents (components Component ,maxWidth ,maxHeight int )(_ffdg *Bitmaps ,_bcbc *Boxes ,_fcg error ){const _gbcf ="B\u0069t\u006d\u0061\u0070\u002e\u0047\u0065\u0074\u0043o\u006d\u0070\u006f\u006een\u0074\u0073";if _ecfg ==nil {return nil ,nil ,_b .Error (_gbcf ,"\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0042\u0069\u0074\u006da\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069n\u0065\u0064\u002e");
};switch components {case ComponentConn ,ComponentCharacters ,ComponentWords :default:return nil ,nil ,_b .Error (_gbcf ,"\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065n\u0074s\u0020\u0070\u0061\u0072\u0061\u006d\u0065t\u0065\u0072");
};if _ecfg .Zero (){_bcbc =&Boxes {};_ffdg =&Bitmaps {};return _ffdg ,_bcbc ,nil ;};switch components {case ComponentConn :_ffdg =&Bitmaps {};if _bcbc ,_fcg =_ecfg .ConnComponents (_ffdg ,8);_fcg !=nil {return nil ,nil ,_b .Wrap (_fcg ,_gbcf ,"\u006e\u006f \u0070\u0072\u0065p\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};case ComponentCharacters :_cdbd ,_gad :=MorphSequence (_ecfg ,MorphProcess {Operation :MopClosing ,Arguments :[]int {1,6}});if _gad !=nil {return nil ,nil ,_b .Wrap (_gad ,_gbcf ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};if _aa .Log .IsLogLevel (_aa .LogLevelTrace ){_aa .Log .Trace ("\u0043o\u006d\u0070o\u006e\u0065\u006e\u0074C\u0068\u0061\u0072a\u0063\u0074\u0065\u0072\u0073\u0020\u0062\u0069\u0074ma\u0070\u0020\u0061f\u0074\u0065r\u0020\u0063\u006c\u006f\u0073\u0069n\u0067\u003a \u0025\u0073",_cdbd .String ());
};_bfeb :=&Bitmaps {};_bcbc ,_gad =_cdbd .ConnComponents (_bfeb ,8);if _gad !=nil {return nil ,nil ,_b .Wrap (_gad ,_gbcf ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};if _aa .Log .IsLogLevel (_aa .LogLevelTrace ){_aa .Log .Trace ("\u0043\u006f\u006d\u0070\u006f\u006ee\u006e\u0074\u0043\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u0020a\u0066\u0074\u0065\u0072\u0020\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076i\u0074y\u003a\u0020\u0025\u0073",_bfeb .String ());
};if _ffdg ,_gad =_bfeb .ClipToBitmap (_ecfg );_gad !=nil {return nil ,nil ,_b .Wrap (_gad ,_gbcf ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");};case ComponentWords :_eafc :=1;
var _gagc *Bitmap ;switch {case _ecfg .XResolution <=200:_gagc =_ecfg ;case _ecfg .XResolution <=400:_eafc =2;_gagc ,_fcg =_af (_ecfg ,1,0,0,0);if _fcg !=nil {return nil ,nil ,_b .Wrap (_fcg ,_gbcf ,"w\u006f\u0072\u0064\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0020\u002d \u0078\u0072\u0065s\u003c=\u0034\u0030\u0030");
};default:_eafc =4;_gagc ,_fcg =_af (_ecfg ,1,1,0,0);if _fcg !=nil {return nil ,nil ,_b .Wrap (_fcg ,_gbcf ,"\u0077\u006f\u0072\u0064 \u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073 \u002d \u0078\u0072\u0065\u0073\u0020\u003e\u00204\u0030\u0030");
};};_cdae ,_ ,_acdc :=_ffcb (_gagc );if _acdc !=nil {return nil ,nil ,_b .Wrap (_acdc ,_gbcf ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};_gbef ,_acdc :=_agbc (_cdae ,_eafc );if _acdc !=nil {return nil ,nil ,_b .Wrap (_acdc ,_gbcf ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");
};_gdgd :=&Bitmaps {};if _bcbc ,_acdc =_gbef .ConnComponents (_gdgd ,4);_acdc !=nil {return nil ,nil ,_b .Wrap (_acdc ,_gbcf ,"\u0077\u006f\u0072\u0064\u0020\u0070r\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u002c\u0020\u0063\u006f\u006en\u0065\u0063\u0074\u0020\u0065\u0078\u0070a\u006e\u0064\u0065\u0064");
};if _ffdg ,_acdc =_gdgd .ClipToBitmap (_ecfg );_acdc !=nil {return nil ,nil ,_b .Wrap (_acdc ,_gbcf ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};};_ffdg ,_fcg =_ffdg .SelectBySize (maxWidth ,maxHeight ,LocSelectIfBoth ,SizeSelectIfLTE );
if _fcg !=nil {return nil ,nil ,_b .Wrap (_fcg ,_gbcf ,"");};_bcbc ,_fcg =_bcbc .SelectBySize (maxWidth ,maxHeight ,LocSelectIfBoth ,SizeSelectIfLTE );if _fcg !=nil {return nil ,nil ,_b .Wrap (_fcg ,_gbcf ,"");};return _ffdg ,_bcbc ,nil ;};type BoundaryCondition int ;
func (_befb *Boxes )SelectBySize (width ,height int ,tp LocationFilter ,relation SizeComparison )(_ddbd *Boxes ,_cfge error ){const _bbc ="\u0042o\u0078e\u0073\u002e\u0053\u0065\u006ce\u0063\u0074B\u0079\u0053\u0069\u007a\u0065";if _befb ==nil {return nil ,_b .Error (_bbc ,"b\u006f\u0078\u0065\u0073 '\u0062'\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064");
};if len (*_befb )==0{return _befb ,nil ;};switch tp {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_b .Errorf (_bbc ,"\u0069\u006e\u0076al\u0069\u0064\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",tp );
};switch relation {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE :default:return nil ,_b .Errorf (_bbc ,"i\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0020t\u0079\u0070\u0065:\u0020'\u0025\u0064\u0027",tp );
};_ggec :=_befb .makeSizeIndicator (width ,height ,tp ,relation );_ccgb ,_cfge :=_befb .selectWithIndicator (_ggec );if _cfge !=nil {return nil ,_b .Wrap (_cfge ,_bbc ,"");};return _ccgb ,nil ;};func (_fde *Bitmap )RemoveBorderGeneral (left ,right ,top ,bot int )(*Bitmap ,error ){return _fde .removeBorderGeneral (left ,right ,top ,bot );
};func (_eefb *Bitmap )ThresholdPixelSum (thresh int ,tab8 []int )(_adg bool ,_dcae error ){const _afgg ="\u0042i\u0074\u006d\u0061\u0070\u002e\u0054\u0068\u0072\u0065\u0073\u0068o\u006c\u0064\u0050\u0069\u0078\u0065\u006c\u0053\u0075\u006d";if tab8 ==nil {tab8 =_eadbf ();
};_fda :=_eefb .Width >>3;_ffda :=_eefb .Width &7;_cba :=byte (0xff<<uint (8-_ffda ));var (_gacd ,_fcc ,_dba ,_ddb int ;_bgac byte ;);for _gacd =0;_gacd < _eefb .Height ;_gacd ++{_dba =_eefb .RowStride *_gacd ;for _fcc =0;_fcc < _fda ;_fcc ++{_bgac ,_dcae =_eefb .GetByte (_dba +_fcc );
if _dcae !=nil {return false ,_b .Wrap (_dcae ,_afgg ,"\u0066\u0075\u006c\u006c\u0042\u0079\u0074\u0065");};_ddb +=tab8 [_bgac ];};if _ffda !=0{_bgac ,_dcae =_eefb .GetByte (_dba +_fcc );if _dcae !=nil {return false ,_b .Wrap (_dcae ,_afgg ,"p\u0061\u0072\u0074\u0069\u0061\u006c\u0042\u0079\u0074\u0065");
};_bgac &=_cba ;_ddb +=tab8 [_bgac ];};if _ddb > thresh {return true ,nil ;};};return _adg ,nil ;};func (_dffcb *ClassedPoints )validateIntSlice ()error {const _cebdd ="\u0076\u0061l\u0069\u0064\u0061t\u0065\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065";
for _ ,_egf :=range _dffcb .IntSlice {if _egf >=(_dffcb .Points .Size ()){return _b .Errorf (_cebdd ,"c\u006c\u0061\u0073\u0073\u0020\u0069\u0064\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0076\u0061\u006ci\u0064 \u0069\u006e\u0064\u0065x\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0070\u006f\u0069\u006e\u0074\u0073\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u003a\u0020\u0025\u0064",_egf ,_dffcb .Points .Size ());
};};return nil ;};func TstWriteSymbols (t *_bc .T ,bms *Bitmaps ,src *Bitmap ){for _ecge :=0;_ecge < bms .Size ();_ecge ++{_dbfga :=bms .Values [_ecge ];_dafe :=bms .Boxes [_ecge ];_gefea :=src .RasterOperation (_dafe .Min .X ,_dafe .Min .Y ,_dbfga .Width ,_dbfga .Height ,PixSrc ,_dbfga ,0,0);
_ba .NoError (t ,_gefea );};};func (_egeg *Bitmap )GetVanillaData ()[]byte {if _egeg .Color ==Chocolate {_egeg .inverseData ();};return _egeg .Data ;};const (SelDontCare SelectionValue =iota ;SelHit ;SelMiss ;);type shift int ;func (_gccbc *Bitmaps )GroupByHeight ()(*BitmapsArray ,error ){const _fadg ="\u0047\u0072\u006f\u0075\u0070\u0042\u0079\u0048\u0065\u0069\u0067\u0068\u0074";
if len (_gccbc .Values )==0{return nil ,_b .Error (_fadg ,"\u006eo\u0020v\u0061\u006c\u0075\u0065\u0073 \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};_aabdg :=&BitmapsArray {};_gccbc .SortByHeight ();_cgge :=-1;_fbdda :=-1;for _adada :=0;_adada < len (_gccbc .Values );
_adada ++{_cgca :=_gccbc .Values [_adada ].Height ;if _cgca > _cgge {_cgge =_cgca ;_fbdda ++;_aabdg .Values =append (_aabdg .Values ,&Bitmaps {});};_aabdg .Values [_fbdda ].AddBitmap (_gccbc .Values [_adada ]);};return _aabdg ,nil ;};type MorphOperation int ;
func (_abeg *ClassedPoints )XAtIndex (i int )float32 {return (*_abeg .Points )[_abeg .IntSlice [i ]].X };func (_bcaa *Bitmap )setTwoBytes (_faf int ,_abda uint16 )error {if _faf +1> len (_bcaa .Data )-1{return _b .Errorf ("s\u0065\u0074\u0054\u0077\u006f\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_faf );
};_bcaa .Data [_faf ]=byte ((_abda &0xff00)>>8);_bcaa .Data [_faf +1]=byte (_abda &0xff);return nil ;};func _dbbd (_acb *Bitmap ,_bcf int ,_afe []byte )(_fad *Bitmap ,_dffc error ){const _caa ="\u0072\u0065\u0064\u0075\u0063\u0065\u0052\u0061\u006e\u006b\u0042\u0069n\u0061\u0072\u0079\u0032";
if _acb ==nil {return nil ,_b .Error (_caa ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _bcf < 1||_bcf > 4{return nil ,_b .Error (_caa ,"\u006c\u0065\u0076\u0065\u006c\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0069\u006e\u0020\u0073e\u0074\u0020\u007b\u0031\u002c\u0032\u002c\u0033\u002c\u0034\u007d");
};if _acb .Height <=1{return nil ,_b .Errorf (_caa ,"\u0073o\u0075\u0072c\u0065\u0020\u0068e\u0069\u0067\u0068\u0074\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061t\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0027\u0032\u0027\u0020-\u0020\u0069\u0073\u003a\u0020\u0027\u0025\u0064\u0027",_acb .Height );
};_fad =New (_acb .Width /2,_acb .Height /2);if _afe ==nil {_afe =_bef ();};_deb :=_aac (_acb .RowStride ,2*_fad .RowStride );switch _bcf {case 1:_dffc =_bgdf (_acb ,_fad ,_bcf ,_afe ,_deb );case 2:_dffc =_gde (_acb ,_fad ,_bcf ,_afe ,_deb );case 3:_dffc =_gbb (_acb ,_fad ,_bcf ,_afe ,_deb );
case 4:_dffc =_bfg (_acb ,_fad ,_bcf ,_afe ,_deb );};if _dffc !=nil {return nil ,_dffc ;};return _fad ,nil ;};var (_fcfc *Bitmap ;_bfdfb *Bitmap ;);var MorphBC BoundaryCondition ;func DilateBrick (d ,s *Bitmap ,hSize ,vSize int )(*Bitmap ,error ){return _aaac (d ,s ,hSize ,vSize )};
func _cagf (_befc ,_fcb *Bitmap )(*Bitmap ,error ){if _fcb ==nil {return nil ,_b .Error ("\u0063\u006f\u0070\u0079\u0042\u0069\u0074\u006d\u0061\u0070","\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _fcb ==_befc {return _befc ,nil ;
};if _befc ==nil {_befc =_fcb .createTemplate ();copy (_befc .Data ,_fcb .Data );return _befc ,nil ;};_bcbg :=_befc .resizeImageData (_fcb );if _bcbg !=nil {return nil ,_b .Wrap (_bcbg ,"\u0063\u006f\u0070\u0079\u0042\u0069\u0074\u006d\u0061\u0070","");
};_befc .Text =_fcb .Text ;copy (_befc .Data ,_fcb .Data );return _befc ,nil ;};var _fdgfed =[]byte {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3E,0x78,0x27,0xC2,0x27,0x91,0x00,0x22,0x48,0x21,0x03,0x24,0x91,0x00,0x22,0x48,0x21,0x02,0xA4,0x95,0x00,0x22,0x48,0x21,0x02,0x64,0x9B,0x00,0x3C,0x78,0x21,0x02,0x27,0x91,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x15,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
func (_abgf *Selection )findMaxTranslations ()(_acfg ,_bffb ,_cacg ,_bdbbf int ){for _egff :=0;_egff < _abgf .Height ;_egff ++{for _gdea :=0;_gdea < _abgf .Width ;_gdea ++{if _abgf .Data [_egff ][_gdea ]==SelHit {_acfg =_gfaf (_acfg ,_abgf .Cx -_gdea );
_bffb =_gfaf (_bffb ,_abgf .Cy -_egff );_cacg =_gfaf (_cacg ,_gdea -_abgf .Cx );_bdbbf =_gfaf (_bdbbf ,_egff -_abgf .Cy );};};};return _acfg ,_bffb ,_cacg ,_bdbbf ;};var _babb [256]uint8 ;func _bef ()(_aafc []byte ){_aafc =make ([]byte ,256);for _dce :=0;
_dce < 256;_dce ++{_bba :=byte (_dce );_aafc [_bba ]=(_bba &0x01)|((_bba &0x04)>>1)|((_bba &0x10)>>2)|((_bba &0x40)>>3)|((_bba &0x02)<<3)|((_bba &0x08)<<2)|((_bba &0x20)<<1)|(_bba &0x80);};return _aafc ;};func (_cbg *Bitmap )String ()string {var _add ="\u000a";
for _cbf :=0;_cbf < _cbg .Height ;_cbf ++{var _cffa string ;for _gbed :=0;_gbed < _cbg .Width ;_gbed ++{_dee :=_cbg .GetPixel (_gbed ,_cbf );if _dee {_cffa +="\u0031";}else {_cffa +="\u0030";};};_add +=_cffa +"\u000a";};return _add ;};func (_fdcf *Boxes )makeSizeIndicator (_gdge ,_gbfe int ,_badg LocationFilter ,_ecfd SizeComparison )*_d .NumSlice {_gfg :=&_d .NumSlice {};
var _gfd ,_cdg ,_ccef int ;for _ ,_cgde :=range *_fdcf {_gfd =0;_cdg ,_ccef =_cgde .Dx (),_cgde .Dy ();switch _badg {case LocSelectWidth :if (_ecfd ==SizeSelectIfLT &&_cdg < _gdge )||(_ecfd ==SizeSelectIfGT &&_cdg > _gdge )||(_ecfd ==SizeSelectIfLTE &&_cdg <=_gdge )||(_ecfd ==SizeSelectIfGTE &&_cdg >=_gdge ){_gfd =1;
};case LocSelectHeight :if (_ecfd ==SizeSelectIfLT &&_ccef < _gbfe )||(_ecfd ==SizeSelectIfGT &&_ccef > _gbfe )||(_ecfd ==SizeSelectIfLTE &&_ccef <=_gbfe )||(_ecfd ==SizeSelectIfGTE &&_ccef >=_gbfe ){_gfd =1;};case LocSelectIfEither :if (_ecfd ==SizeSelectIfLT &&(_ccef < _gbfe ||_cdg < _gdge ))||(_ecfd ==SizeSelectIfGT &&(_ccef > _gbfe ||_cdg > _gdge ))||(_ecfd ==SizeSelectIfLTE &&(_ccef <=_gbfe ||_cdg <=_gdge ))||(_ecfd ==SizeSelectIfGTE &&(_ccef >=_gbfe ||_cdg >=_gdge )){_gfd =1;
};case LocSelectIfBoth :if (_ecfd ==SizeSelectIfLT &&(_ccef < _gbfe &&_cdg < _gdge ))||(_ecfd ==SizeSelectIfGT &&(_ccef > _gbfe &&_cdg > _gdge ))||(_ecfd ==SizeSelectIfLTE &&(_ccef <=_gbfe &&_cdg <=_gdge ))||(_ecfd ==SizeSelectIfGTE &&(_ccef >=_gbfe &&_cdg >=_gdge )){_gfd =1;
};};_gfg .AddInt (_gfd );};return _gfg ;};func _bbcg (_ddaf *Bitmap ,_egbe *_d .Stack ,_ddbb ,_gdac int )(_cggc *_ff .Rectangle ,_gddcc error ){const _acbeg ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";if _ddaf ==nil {return nil ,_b .Error (_acbeg ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");
};if _egbe ==nil {return nil ,_b .Error (_acbeg ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");};_fcccga ,_gded :=_ddaf .Width ,_ddaf .Height ;_cebg :=_fcccga -1;_bcbe :=_gded -1;if _ddbb < 0||_ddbb > _cebg ||_gdac < 0||_gdac > _bcbe ||!_ddaf .GetPixel (_ddbb ,_gdac ){return nil ,nil ;
};var _cadeb *_ff .Rectangle ;_cadeb ,_gddcc =Rect (100000,100000,0,0);if _gddcc !=nil {return nil ,_b .Wrap (_gddcc ,_acbeg ,"");};if _gddcc =_cegac (_egbe ,_ddbb ,_ddbb ,_gdac ,1,_bcbe ,_cadeb );_gddcc !=nil {return nil ,_b .Wrap (_gddcc ,_acbeg ,"\u0069\u006e\u0069t\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");
};if _gddcc =_cegac (_egbe ,_ddbb ,_ddbb ,_gdac +1,-1,_bcbe ,_cadeb );_gddcc !=nil {return nil ,_b .Wrap (_gddcc ,_acbeg ,"\u0032\u006ed\u0020\u0069\u006ei\u0074\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};_cadeb .Min .X ,_cadeb .Max .X =_ddbb ,_ddbb ;
_cadeb .Min .Y ,_cadeb .Max .Y =_gdac ,_gdac ;var (_effa *fillSegment ;_ccadb int ;);for _egbe .Len ()> 0{if _effa ,_gddcc =_bgdeb (_egbe );_gddcc !=nil {return nil ,_b .Wrap (_gddcc ,_acbeg ,"");};_gdac =_effa ._dfab ;for _ddbb =_effa ._fgfdd ;_ddbb >=0&&_ddaf .GetPixel (_ddbb ,_gdac );
_ddbb --{if _gddcc =_ddaf .SetPixel (_ddbb ,_gdac ,0);_gddcc !=nil {return nil ,_b .Wrap (_gddcc ,_acbeg ,"");};};if _ddbb >=_effa ._fgfdd {for _ddbb ++;_ddbb <=_effa ._aegfc &&_ddbb <=_cebg &&!_ddaf .GetPixel (_ddbb ,_gdac );_ddbb ++{};_ccadb =_ddbb ;
if !(_ddbb <=_effa ._aegfc &&_ddbb <=_cebg ){continue ;};}else {_ccadb =_ddbb +1;if _ccadb < _effa ._fgfdd -1{if _gddcc =_cegac (_egbe ,_ccadb ,_effa ._fgfdd -1,_effa ._dfab ,-_effa ._dffdb ,_bcbe ,_cadeb );_gddcc !=nil {return nil ,_b .Wrap (_gddcc ,_acbeg ,"\u006c\u0065\u0061\u006b\u0020\u006f\u006e\u0020\u006c\u0065\u0066\u0074 \u0073\u0069\u0064\u0065");
};};_ddbb =_effa ._fgfdd +1;};for {for ;_ddbb <=_cebg &&_ddaf .GetPixel (_ddbb ,_gdac );_ddbb ++{if _gddcc =_ddaf .SetPixel (_ddbb ,_gdac ,0);_gddcc !=nil {return nil ,_b .Wrap (_gddcc ,_acbeg ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _gddcc =_cegac (_egbe ,_ccadb ,_ddbb -1,_effa ._dfab ,_effa ._dffdb ,_bcbe ,_cadeb );
_gddcc !=nil {return nil ,_b .Wrap (_gddcc ,_acbeg ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _ddbb > _effa ._aegfc +1{if _gddcc =_cegac (_egbe ,_effa ._aegfc +1,_ddbb -1,_effa ._dfab ,-_effa ._dffdb ,_bcbe ,_cadeb );_gddcc !=nil {return nil ,_b .Wrap (_gddcc ,_acbeg ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};for _ddbb ++;_ddbb <=_effa ._aegfc &&_ddbb <=_cebg &&!_ddaf .GetPixel (_ddbb ,_gdac );_ddbb ++{};_ccadb =_ddbb ;if !(_ddbb <=_effa ._aegfc &&_ddbb <=_cebg ){break ;};};};_cadeb .Max .X ++;_cadeb .Max .Y ++;return _cadeb ,nil ;};func _fgda (_ebgd ,_eded *Bitmap ,_cgc *Selection )(*Bitmap ,error ){const _ceec ="\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u004d\u006f\u0072\u0070\u0068A\u0072\u0067\u0073\u0032";
var _ddbf ,_agef int ;if _eded ==nil {return nil ,_b .Error (_ceec ,"s\u006fu\u0072\u0063\u0065\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");};if _cgc ==nil {return nil ,_b .Error (_ceec ,"\u0073e\u006c \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};_ddbf =_cgc .Width ;_agef =_cgc .Height ;if _ddbf ==0||_agef ==0{return nil ,_b .Error (_ceec ,"\u0073\u0065\u006c\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u0020\u0030");};if _ebgd ==nil {return _eded .createTemplate (),nil ;};if _deg :=_ebgd .resizeImageData (_eded );
_deg !=nil {return nil ,_deg ;};return _ebgd ,nil ;};const (PixSrc RasterOperator =0xc;PixDst RasterOperator =0xa;PixNotSrc RasterOperator =0x3;PixNotDst RasterOperator =0x5;PixClr RasterOperator =0x0;PixSet RasterOperator =0xf;PixSrcOrDst RasterOperator =0xe;
PixSrcAndDst RasterOperator =0x8;PixSrcXorDst RasterOperator =0x6;PixNotSrcOrDst RasterOperator =0xb;PixNotSrcAndDst RasterOperator =0x2;PixSrcOrNotDst RasterOperator =0xd;PixSrcAndNotDst RasterOperator =0x4;PixNotPixSrcOrDst RasterOperator =0x1;PixNotPixSrcAndDst RasterOperator =0x7;
PixNotPixSrcXorDst RasterOperator =0x9;PixPaint =PixSrcOrDst ;PixSubtract =PixNotSrcAndDst ;PixMask =PixSrcAndDst ;);func (_dacfd *Points )Add (pt *Points )error {const _fbaf ="\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0041\u0064\u0064";if _dacfd ==nil {return _b .Error (_fbaf ,"\u0070o\u0069n\u0074\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if pt ==nil {return _b .Error (_fbaf ,"a\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0070\u006f\u0069\u006e\u0074\u0073\u0020\u006eo\u0074\u0020\u0064e\u0066i\u006e\u0065\u0064");};*_dacfd =append (*_dacfd ,*pt ...);return nil ;};func SelCreateBrick (h ,w int ,cy ,cx int ,tp SelectionValue )*Selection {_badbd :=_bbga (h ,w ,"");
_badbd .setOrigin (cy ,cx );var _bbgg ,_efea int ;for _bbgg =0;_bbgg < h ;_bbgg ++{for _efea =0;_efea < w ;_efea ++{_badbd .Data [_bbgg ][_efea ]=tp ;};};return _badbd ;};func Rect (x ,y ,w ,h int )(*_ff .Rectangle ,error ){const _eaf ="b\u0069\u0074\u006d\u0061\u0070\u002e\u0052\u0065\u0063\u0074";
if x < 0{w +=x ;x =0;if w <=0{return nil ,_b .Errorf (_eaf ,"x\u003a\u0027\u0025\u0064\u0027\u0020<\u0020\u0030\u0020\u0061\u006e\u0064\u0020\u0077\u003a \u0027\u0025\u0064'\u0020<\u003d\u0020\u0030",x ,w );};};if y < 0{h +=y ;y =0;if h <=0{return nil ,_b .Error (_eaf ,"\u0079\u0020\u003c 0\u0020\u0061\u006e\u0064\u0020\u0062\u006f\u0078\u0020\u006f\u0066\u0066\u0020\u002b\u0071\u0075\u0061\u0064");
};};_geda :=_ff .Rect (x ,y ,x +w ,y +h );return &_geda ,nil ;};var _afgd =[5]int {1,2,3,0,4};func _fagef (_dcdb *Bitmap ,_afcb *Bitmap ,_geab *Selection )(*Bitmap ,error ){var (_caec *Bitmap ;_dfea error ;);_dcdb ,_dfea =_dbce (_dcdb ,_afcb ,_geab ,&_caec );
if _dfea !=nil {return nil ,_dfea ;};if _dfea =_dcdb .clearAll ();_dfea !=nil {return nil ,_dfea ;};var _ecgb SelectionValue ;for _edab :=0;_edab < _geab .Height ;_edab ++{for _ddac :=0;_ddac < _geab .Width ;_ddac ++{_ecgb =_geab .Data [_edab ][_ddac ];
if _ecgb ==SelHit {if _dfea =_dcdb .RasterOperation (_ddac -_geab .Cx ,_edab -_geab .Cy ,_afcb .Width ,_afcb .Height ,PixSrcOrDst ,_caec ,0,0);_dfea !=nil {return nil ,_dfea ;};};};};return _dcdb ,nil ;};func (_efed *Points )AddPoint (x ,y float32 ){*_efed =append (*_efed ,Point {x ,y })};
func (_aegc Points )Get (i int )(Point ,error ){if i > len (_aegc )-1{return Point {},_b .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _aegc [i ],nil ;};const (_ade shift =iota ;_eadcc ;);func (_aacgc *BitmapsArray )GetBitmaps (i int )(*Bitmaps ,error ){const _gaeb ="\u0042\u0069\u0074ma\u0070\u0073\u0041\u0072\u0072\u0061\u0079\u002e\u0047\u0065\u0074\u0042\u0069\u0074\u006d\u0061\u0070\u0073";
if _aacgc ==nil {return nil ,_b .Error (_gaeb ,"p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074m\u0061\u0070\u0073A\u0072r\u0061\u0079\u0027");};if i > len (_aacgc .Values )-1{return nil ,_b .Errorf (_gaeb ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _aacgc .Values [i ],nil ;};func _ced ()[]int {_caae :=make ([]int ,256);_caae [0]=0;_caae [1]=7;var _defe int ;for _defe =2;_defe < 4;_defe ++{_caae [_defe ]=_caae [_defe -2]+6;};for _defe =4;_defe < 8;_defe ++{_caae [_defe ]=_caae [_defe -4]+5;
};for _defe =8;_defe < 16;_defe ++{_caae [_defe ]=_caae [_defe -8]+4;};for _defe =16;_defe < 32;_defe ++{_caae [_defe ]=_caae [_defe -16]+3;};for _defe =32;_defe < 64;_defe ++{_caae [_defe ]=_caae [_defe -32]+2;};for _defe =64;_defe < 128;_defe ++{_caae [_defe ]=_caae [_defe -64]+1;
};for _defe =128;_defe < 256;_defe ++{_caae [_defe ]=_caae [_defe -128];};return _caae ;};const (AsymmetricMorphBC BoundaryCondition =iota ;SymmetricMorphBC ;);func _ceeg (_cefe *Bitmap ,_cecf ,_cega int ,_cdcbb ,_gebfe int ,_fdbd RasterOperator ){var (_bdeg bool ;
_edfc bool ;_gbfdg int ;_gfga int ;_ecfgb int ;_bece int ;_aef bool ;_bbbee byte ;);_cfgce :=8-(_cecf &7);_gfdb :=_gceg [_cfgce ];_bdfee :=_cefe .RowStride *_cega +(_cecf >>3);if _cdcbb < _cfgce {_bdeg =true ;_gfdb &=_bffg [8-_cfgce +_cdcbb ];};if !_bdeg {_gbfdg =(_cdcbb -_cfgce )>>3;
if _gbfdg !=0{_edfc =true ;_gfga =_bdfee +1;};};_ecfgb =(_cecf +_cdcbb )&7;if !(_bdeg ||_ecfgb ==0){_aef =true ;_bbbee =_bffg [_ecfgb ];_bece =_bdfee +1+_gbfdg ;};var _ecae ,_ffg int ;switch _fdbd {case PixClr :for _ecae =0;_ecae < _gebfe ;_ecae ++{_cefe .Data [_bdfee ]=_bbbaf (_cefe .Data [_bdfee ],0x0,_gfdb );
_bdfee +=_cefe .RowStride ;};if _edfc {for _ecae =0;_ecae < _gebfe ;_ecae ++{for _ffg =0;_ffg < _gbfdg ;_ffg ++{_cefe .Data [_gfga +_ffg ]=0x0;};_gfga +=_cefe .RowStride ;};};if _aef {for _ecae =0;_ecae < _gebfe ;_ecae ++{_cefe .Data [_bece ]=_bbbaf (_cefe .Data [_bece ],0x0,_bbbee );
_bece +=_cefe .RowStride ;};};case PixSet :for _ecae =0;_ecae < _gebfe ;_ecae ++{_cefe .Data [_bdfee ]=_bbbaf (_cefe .Data [_bdfee ],0xff,_gfdb );_bdfee +=_cefe .RowStride ;};if _edfc {for _ecae =0;_ecae < _gebfe ;_ecae ++{for _ffg =0;_ffg < _gbfdg ;_ffg ++{_cefe .Data [_gfga +_ffg ]=0xff;
};_gfga +=_cefe .RowStride ;};};if _aef {for _ecae =0;_ecae < _gebfe ;_ecae ++{_cefe .Data [_bece ]=_bbbaf (_cefe .Data [_bece ],0xff,_bbbee );_bece +=_cefe .RowStride ;};};case PixNotDst :for _ecae =0;_ecae < _gebfe ;_ecae ++{_cefe .Data [_bdfee ]=_bbbaf (_cefe .Data [_bdfee ],^_cefe .Data [_bdfee ],_gfdb );
_bdfee +=_cefe .RowStride ;};if _edfc {for _ecae =0;_ecae < _gebfe ;_ecae ++{for _ffg =0;_ffg < _gbfdg ;_ffg ++{_cefe .Data [_gfga +_ffg ]=^(_cefe .Data [_gfga +_ffg ]);};_gfga +=_cefe .RowStride ;};};if _aef {for _ecae =0;_ecae < _gebfe ;_ecae ++{_cefe .Data [_bece ]=_bbbaf (_cefe .Data [_bece ],^_cefe .Data [_bece ],_bbbee );
_bece +=_cefe .RowStride ;};};};};func _dbbe (_bccd ,_abbc *Bitmap ,_acba ,_fgfb ,_cdba uint ,_geac ,_gagf int ,_bbeg bool ,_agbf ,_baa int )error {for _cfa :=_geac ;_cfa < _gagf ;_cfa ++{if _agbf +1< len (_bccd .Data ){_gcab :=_cfa +1==_gagf ;_fcf ,_ebef :=_bccd .GetByte (_agbf );
if _ebef !=nil {return _ebef ;};_agbf ++;_fcf <<=_acba ;_fage ,_ebef :=_bccd .GetByte (_agbf );if _ebef !=nil {return _ebef ;};_fage >>=_fgfb ;_edfb :=_fcf |_fage ;if _gcab &&!_bbeg {_edfb =_cge (_cdba ,_edfb );};_ebef =_abbc .SetByte (_baa ,_edfb );if _ebef !=nil {return _ebef ;
};_baa ++;if _gcab &&_bbeg {_eagf ,_gcac :=_bccd .GetByte (_agbf );if _gcac !=nil {return _gcac ;};_eagf <<=_acba ;_edfb =_cge (_cdba ,_eagf );if _gcac =_abbc .SetByte (_baa ,_edfb );_gcac !=nil {return _gcac ;};};continue ;};_ffbc ,_eefbd :=_bccd .GetByte (_agbf );
if _eefbd !=nil {_aa .Log .Debug ("G\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0068\u0065\u0020\u0076\u0061l\u0075\u0065\u0020\u0061\u0074\u003a\u0020%\u0064\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020%\u0073",_agbf ,_eefbd );return _eefbd ;
};_ffbc <<=_acba ;_agbf ++;_eefbd =_abbc .SetByte (_baa ,_ffbc );if _eefbd !=nil {return _eefbd ;};_baa ++;};return nil ;};func (_gdfad *BitmapsArray )GetBox (i int )(*_ff .Rectangle ,error ){const _dcfg ="\u0042\u0069\u0074\u006dap\u0073\u0041\u0072\u0072\u0061\u0079\u002e\u0047\u0065\u0074\u0042\u006f\u0078";
if _gdfad ==nil {return nil ,_b .Error (_dcfg ,"p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074m\u0061\u0070\u0073A\u0072r\u0061\u0079\u0027");};if i > len (_gdfad .Boxes )-1{return nil ,_b .Errorf (_dcfg ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _gdfad .Boxes [i ],nil ;};func CorrelationScoreSimple (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab []int )(_eecc float64 ,_faaa error ){const _cceb ="\u0043\u006f\u0072\u0072el\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0053\u0069\u006d\u0070l\u0065";
if bm1 ==nil ||bm2 ==nil {return _eecc ,_b .Error (_cceb ,"n\u0069l\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u0073 \u0070\u0072\u006f\u0076id\u0065\u0064");};if tab ==nil {return _eecc ,_b .Error (_cceb ,"\u0074\u0061\u0062\u0020\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if area1 ==0||area2 ==0{return _eecc ,_b .Error (_cceb ,"\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0061\u0072e\u0061\u0073\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u003e\u0020\u0030");};_ecad ,_acag :=bm1 .Width ,bm1 .Height ;_bgae ,_bbgd :=bm2 .Width ,bm2 .Height ;
if _fega (_ecad -_bgae )> maxDiffW {return 0,nil ;};if _fega (_acag -_bbgd )> maxDiffH {return 0,nil ;};var _fced ,_fccg int ;if delX >=0{_fced =int (delX +0.5);}else {_fced =int (delX -0.5);};if delY >=0{_fccg =int (delY +0.5);}else {_fccg =int (delY -0.5);
};_gcedf :=bm1 .createTemplate ();if _faaa =_gcedf .RasterOperation (_fced ,_fccg ,_bgae ,_bbgd ,PixSrc ,bm2 ,0,0);_faaa !=nil {return _eecc ,_b .Wrap (_faaa ,_cceb ,"\u0062m\u0032 \u0074\u006f\u0020\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065");};
if _faaa =_gcedf .RasterOperation (0,0,_ecad ,_acag ,PixSrcAndDst ,bm1 ,0,0);_faaa !=nil {return _eecc ,_b .Wrap (_faaa ,_cceb ,"b\u006d\u0031\u0020\u0061\u006e\u0064\u0020\u0062\u006d\u0054");};_gdba :=_gcedf .countPixels ();_eecc =float64 (_gdba )*float64 (_gdba )/(float64 (area1 )*float64 (area2 ));
return _eecc ,nil ;};func (_deae *Bitmap )nextOnPixelLow (_dbcd ,_agaf ,_dfa ,_eadc ,_dacc int )(_gcee _ff .Point ,_efcf bool ,_afag error ){const _cgae ="B\u0069\u0074\u006d\u0061p.\u006ee\u0078\u0074\u004f\u006e\u0050i\u0078\u0065\u006c\u004c\u006f\u0077";
var (_dedcd int ;_fdad byte ;);_bbd :=_dacc *_dfa ;_cbb :=_bbd +(_eadc /8);if _fdad ,_afag =_deae .GetByte (_cbb );_afag !=nil {return _gcee ,false ,_b .Wrap (_afag ,_cgae ,"\u0078\u0053\u0074\u0061\u0072\u0074\u0020\u0061\u006e\u0064 \u0079\u0053\u0074\u0061\u0072\u0074\u0020o\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065");
};if _fdad !=0{_fee :=_eadc -(_eadc %8)+7;for _dedcd =_eadc ;_dedcd <=_fee &&_dedcd < _dbcd ;_dedcd ++{if _deae .GetPixel (_dedcd ,_dacc ){_gcee .X =_dedcd ;_gcee .Y =_dacc ;return _gcee ,true ,nil ;};};};_bggd :=(_eadc /8)+1;_dedcd =8*_bggd ;var _deea int ;
for _cbb =_bbd +_bggd ;_dedcd < _dbcd ;_cbb ,_dedcd =_cbb +1,_dedcd +8{if _fdad ,_afag =_deae .GetByte (_cbb );_afag !=nil {return _gcee ,false ,_b .Wrap (_afag ,_cgae ,"r\u0065\u0073\u0074\u0020of\u0020t\u0068\u0065\u0020\u006c\u0069n\u0065\u0020\u0062\u0079\u0074\u0065");
};if _fdad ==0{continue ;};for _deea =0;_deea < 8&&_dedcd < _dbcd ;_deea ,_dedcd =_deea +1,_dedcd +1{if _deae .GetPixel (_dedcd ,_dacc ){_gcee .X =_dedcd ;_gcee .Y =_dacc ;return _gcee ,true ,nil ;};};};for _fegb :=_dacc +1;_fegb < _agaf ;_fegb ++{_bbd =_fegb *_dfa ;
for _cbb ,_dedcd =_bbd ,0;_dedcd < _dbcd ;_cbb ,_dedcd =_cbb +1,_dedcd +8{if _fdad ,_afag =_deae .GetByte (_cbb );_afag !=nil {return _gcee ,false ,_b .Wrap (_afag ,_cgae ,"\u0066o\u006cl\u006f\u0077\u0069\u006e\u0067\u0020\u006c\u0069\u006e\u0065\u0073");
};if _fdad ==0{continue ;};for _deea =0;_deea < 8&&_dedcd < _dbcd ;_deea ,_dedcd =_deea +1,_dedcd +1{if _deae .GetPixel (_dedcd ,_fegb ){_gcee .X =_dedcd ;_gcee .Y =_fegb ;return _gcee ,true ,nil ;};};};};return _gcee ,false ,nil ;};func (_bda *Bitmap )resizeImageData (_gceb *Bitmap )error {if _gceb ==nil {return _b .Error ("\u0072e\u0073i\u007a\u0065\u0049\u006d\u0061\u0067\u0065\u0044\u0061\u0074\u0061","\u0073r\u0063 \u0069\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _bda .SizesEqual (_gceb ){return nil ;};_bda .Data =make ([]byte ,len (_gceb .Data ));_bda .Width =_gceb .Width ;_bda .Height =_gceb .Height ;_bda .RowStride =_gceb .RowStride ;return nil ;};func (_fgdaa *Bitmaps )SortByWidth (){_gafgg :=(*byWidth )(_fgdaa );
_bg .Sort (_gafgg )};func (_gecf *Bitmaps )SortByHeight (){_fbdc :=(*byHeight )(_gecf );_bg .Sort (_fbdc )};func _abgb (_dbae ...MorphProcess )(_dfgfg error ){const _fabb ="v\u0065r\u0069\u0066\u0079\u004d\u006f\u0072\u0070\u0068P\u0072\u006f\u0063\u0065ss\u0065\u0073";
var _dbceg ,_cbaac int ;for _bbfg ,_gaa :=range _dbae {if _dfgfg =_gaa .verify (_bbfg ,&_dbceg ,&_cbaac );_dfgfg !=nil {return _b .Wrap (_dfgfg ,_fabb ,"");};};if _cbaac !=0&&_dbceg !=0{return _b .Error (_fabb ,"\u004d\u006f\u0072\u0070\u0068\u0020\u0073\u0065\u0071\u0075\u0065n\u0063\u0065\u0020\u002d\u0020\u0062\u006f\u0072d\u0065r\u0020\u0061\u0064\u0064\u0065\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u0065\u0074\u0020\u0072\u0065\u0064u\u0063\u0074\u0069\u006f\u006e\u0020\u006e\u006f\u0074\u0020\u0030");
};return nil ;};func _bcfc (_gecb ,_aafg *Bitmap ,_ecffb ,_bfgea int )(*Bitmap ,error ){const _cdfd ="\u0063\u006c\u006f\u0073\u0065\u0053\u0061\u0066\u0065B\u0072\u0069\u0063\u006b";if _aafg ==nil {return nil ,_b .Error (_cdfd ,"\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0069\u0073\u0020\u006e\u0069\u006c");
};if _ecffb < 1||_bfgea < 1{return nil ,_b .Error (_cdfd ,"\u0068s\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0073\u0069z\u0065\u0020\u006e\u006f\u0074\u0020\u003e\u003d\u0020\u0031");};if _ecffb ==1&&_bfgea ==1{return _cagf (_gecb ,_aafg );
};if MorphBC ==SymmetricMorphBC {_dcaa ,_egbc :=_dggf (_gecb ,_aafg ,_ecffb ,_bfgea );if _egbc !=nil {return nil ,_b .Wrap (_egbc ,_cdfd ,"\u0053\u0079m\u006d\u0065\u0074r\u0069\u0063\u004d\u006f\u0072\u0070\u0068\u0042\u0043");};return _dcaa ,nil ;};_afc :=_gfaf (_ecffb /2,_bfgea /2);
_bfea :=8*((_afc +7)/8);_bdbff ,_ggeg :=_aafg .AddBorder (_bfea ,0);if _ggeg !=nil {return nil ,_b .Wrapf (_ggeg ,_cdfd ,"\u0042\u006f\u0072\u0064\u0065\u0072\u0053\u0069\u007ae\u003a\u0020\u0025\u0064",_bfea );};var _gadd ,_efbf *Bitmap ;if _ecffb ==1||_bfgea ==1{_geff :=SelCreateBrick (_bfgea ,_ecffb ,_bfgea /2,_ecffb /2,SelHit );
_gadd ,_ggeg =_aabe (nil ,_bdbff ,_geff );if _ggeg !=nil {return nil ,_b .Wrap (_ggeg ,_cdfd ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};}else {_egaf :=SelCreateBrick (1,_ecffb ,0,_ecffb /2,SelHit );
_abea ,_fgge :=_fagef (nil ,_bdbff ,_egaf );if _fgge !=nil {return nil ,_b .Wrap (_fgge ,_cdfd ,"\u0072\u0065\u0067\u0075la\u0072\u0020\u002d\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0064\u0069\u006c\u0061t\u0065");};_fdff :=SelCreateBrick (_bfgea ,1,_bfgea /2,0,SelHit );
_gadd ,_fgge =_fagef (nil ,_abea ,_fdff );if _fgge !=nil {return nil ,_b .Wrap (_fgge ,_cdfd ,"\u0072\u0065\u0067ul\u0061\u0072\u0020\u002d\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};if _ ,_fgge =_ggeb (_abea ,_gadd ,_egaf );
_fgge !=nil {return nil ,_b .Wrap (_fgge ,_cdfd ,"r\u0065\u0067\u0075\u006car\u0020-\u0020\u0066\u0069\u0072\u0073t\u0020\u0065\u0072\u006f\u0064\u0065");};if _ ,_fgge =_ggeb (_gadd ,_abea ,_fdff );_fgge !=nil {return nil ,_b .Wrap (_fgge ,_cdfd ,"\u0072\u0065\u0067\u0075la\u0072\u0020\u002d\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0065\u0072\u006fd\u0065");
};};if _efbf ,_ggeg =_gadd .RemoveBorder (_bfea );_ggeg !=nil {return nil ,_b .Wrap (_ggeg ,_cdfd ,"\u0072e\u0067\u0075\u006c\u0061\u0072");};if _gecb ==nil {return _efbf ,nil ;};if _ ,_ggeg =_cagf (_gecb ,_efbf );_ggeg !=nil {return nil ,_ggeg ;};return _gecb ,nil ;
};func (_fgef *Bitmap )clearAll ()error {return _fgef .RasterOperation (0,0,_fgef .Width ,_fgef .Height ,PixClr ,nil ,0,0);};func _ebfb (_daba ,_bebgd *Bitmap ,_cdab ,_cbfd int )(*Bitmap ,error ){const _afcd ="\u006fp\u0065\u006e\u0042\u0072\u0069\u0063k";
if _bebgd ==nil {return nil ,_b .Error (_afcd ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _cdab < 1&&_cbfd < 1{return nil ,_b .Error (_afcd ,"\u0068\u0053\u0069\u007ae \u003c\u0020\u0031\u0020\u0026\u0026\u0020\u0076\u0053\u0069\u007a\u0065\u0020\u003c \u0031");
};if _cdab ==1&&_cbfd ==1{return _bebgd .Copy (),nil ;};if _cdab ==1||_cbfd ==1{var _gaea error ;_fbaa :=SelCreateBrick (_cbfd ,_cdab ,_cbfd /2,_cdab /2,SelHit );_daba ,_gaea =_eeba (_daba ,_bebgd ,_fbaa );if _gaea !=nil {return nil ,_b .Wrap (_gaea ,_afcd ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _daba ,nil ;};_fcfb :=SelCreateBrick (1,_cdab ,0,_cdab /2,SelHit );_fcgb :=SelCreateBrick (_cbfd ,1,_cbfd /2,0,SelHit );_fca ,_cadd :=_ggeb (nil ,_bebgd ,_fcfb );if _cadd !=nil {return nil ,_b .Wrap (_cadd ,_afcd ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};_daba ,_cadd =_ggeb (_daba ,_fca ,_fcgb );if _cadd !=nil {return nil ,_b .Wrap (_cadd ,_afcd ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};_ ,_cadd =_fagef (_fca ,_daba ,_fcfb );if _cadd !=nil {return nil ,_b .Wrap (_cadd ,_afcd ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};_ ,_cadd =_fagef (_daba ,_fca ,_fcgb );if _cadd !=nil {return nil ,_b .Wrap (_cadd ,_afcd ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};return _daba ,nil ;};func RasterOperation (dest *Bitmap ,dx ,dy ,dw ,dh int ,op RasterOperator ,src *Bitmap ,sx ,sy int )error {return _daec (dest ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );
};type LocationFilter int ;func (_bdff *Bitmap )connComponentsBitmapsBB (_abce *Bitmaps ,_aeaf int )(_dggc *Boxes ,_dedcdb error ){const _beef ="\u0063\u006f\u006enC\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0042\u0069\u0074\u006d\u0061\u0070\u0073\u0042\u0042";
if _aeaf !=4&&_aeaf !=8{return nil ,_b .Error (_beef ,"\u0063\u006f\u006e\u006e\u0065\u0063t\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0027\u0034\u0027\u0020\u006fr\u0020\u0027\u0038\u0027");};if _abce ==nil {return nil ,_b .Error (_beef ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0042\u0069\u0074ma\u0070\u0073");
};if len (_abce .Values )> 0{return nil ,_b .Error (_beef ,"\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u006fn\u002d\u0065\u006d\u0070\u0074\u0079\u0020\u0042\u0069\u0074m\u0061\u0070\u0073");};if _bdff .Zero (){return &Boxes {},nil ;};
var (_gbee ,_geea ,_efgg ,_acdca *Bitmap ;);_bdff .setPadBits (0);if _gbee ,_dedcdb =_cagf (nil ,_bdff );_dedcdb !=nil {return nil ,_b .Wrap (_dedcdb ,_beef ,"\u0062\u006d\u0031");};if _geea ,_dedcdb =_cagf (nil ,_bdff );_dedcdb !=nil {return nil ,_b .Wrap (_dedcdb ,_beef ,"\u0062\u006d\u0032");
};_gfeed :=&_d .Stack {};_gfeed .Aux =&_d .Stack {};_dggc =&Boxes {};var (_adcd ,_gadb int ;_gafg _ff .Point ;_gfdf bool ;_gedec *_ff .Rectangle ;);for {if _gafg ,_gfdf ,_dedcdb =_gbee .nextOnPixel (_adcd ,_gadb );_dedcdb !=nil {return nil ,_b .Wrap (_dedcdb ,_beef ,"");
};if !_gfdf {break ;};if _gedec ,_dedcdb =_aegba (_gbee ,_gfeed ,_gafg .X ,_gafg .Y ,_aeaf );_dedcdb !=nil {return nil ,_b .Wrap (_dedcdb ,_beef ,"");};if _dedcdb =_dggc .Add (_gedec );_dedcdb !=nil {return nil ,_b .Wrap (_dedcdb ,_beef ,"");};if _efgg ,_dedcdb =_gbee .clipRectangle (_gedec ,nil );
_dedcdb !=nil {return nil ,_b .Wrap (_dedcdb ,_beef ,"\u0062\u006d\u0033");};if _acdca ,_dedcdb =_geea .clipRectangle (_gedec ,nil );_dedcdb !=nil {return nil ,_b .Wrap (_dedcdb ,_beef ,"\u0062\u006d\u0034");};if _ ,_dedcdb =_efgb (_efgg ,_efgg ,_acdca );
_dedcdb !=nil {return nil ,_b .Wrap (_dedcdb ,_beef ,"\u0062m\u0033\u0020\u005e\u0020\u0062\u006d4");};if _dedcdb =_geea .RasterOperation (_gedec .Min .X ,_gedec .Min .Y ,_gedec .Dx (),_gedec .Dy (),PixSrcXorDst ,_efgg ,0,0);_dedcdb !=nil {return nil ,_b .Wrap (_dedcdb ,_beef ,"\u0062\u006d\u0032\u0020\u002d\u0058\u004f\u0052\u002d>\u0020\u0062\u006d\u0033");
};_abce .AddBitmap (_efgg );_adcd =_gafg .X ;_gadb =_gafg .Y ;};_abce .Boxes =*_dggc ;return _dggc ,nil ;};func Extract (roi _ff .Rectangle ,src *Bitmap )(*Bitmap ,error ){_gaff :=New (roi .Dx (),roi .Dy ());_efbb :=roi .Min .X &0x07;_gdgg :=8-_efbb ;_afdf :=uint (8-_gaff .Width &0x07);
_cdd :=src .GetByteIndex (roi .Min .X ,roi .Min .Y );_abdb :=src .GetByteIndex (roi .Max .X -1,roi .Min .Y );_fbda :=_gaff .RowStride ==_abdb +1-_cdd ;var _facc int ;for _fccd :=roi .Min .Y ;_fccd < roi .Max .Y ;_fccd ++{_cca :=_cdd ;_dda :=_facc ;switch {case _cdd ==_abdb :_beeb ,_ddab :=src .GetByte (_cca );
if _ddab !=nil {return nil ,_ddab ;};_beeb <<=uint (_efbb );_ddab =_gaff .SetByte (_dda ,_cge (_afdf ,_beeb ));if _ddab !=nil {return nil ,_ddab ;};case _efbb ==0:for _acdd :=_cdd ;_acdd <=_abdb ;_acdd ++{_eaae ,_eaeb :=src .GetByte (_cca );if _eaeb !=nil {return nil ,_eaeb ;
};_cca ++;if _acdd ==_abdb &&_fbda {_eaae =_cge (_afdf ,_eaae );};_eaeb =_gaff .SetByte (_dda ,_eaae );if _eaeb !=nil {return nil ,_eaeb ;};_dda ++;};default:_beed :=_dbbe (src ,_gaff ,uint (_efbb ),uint (_gdgg ),_afdf ,_cdd ,_abdb ,_fbda ,_cca ,_dda );
if _beed !=nil {return nil ,_beed ;};};_cdd +=src .RowStride ;_abdb +=src .RowStride ;_facc +=_gaff .RowStride ;};return _gaff ,nil ;};func _bbbaf (_gbfc ,_dagcd ,_fgdgg byte )byte {return (_gbfc &^(_fgdgg ))|(_dagcd &_fgdgg )};func (_aad *Bitmap )GetChocolateData ()[]byte {if _aad .Color ==Vanilla {_aad .inverseData ();
};return _aad .Data ;};type ClassedPoints struct{*Points ;_d .IntSlice ;_edffc func (_cddb ,_bdfe int )bool ;};func _bgdeb (_egeae *_d .Stack )(_defbd *fillSegment ,_bgce error ){const _gdcf ="\u0070\u006f\u0070\u0046\u0069\u006c\u006c\u0053\u0065g\u006d\u0065\u006e\u0074";
if _egeae ==nil {return nil ,_b .Error (_gdcf ,"\u006ei\u006c \u0073\u0074\u0061\u0063\u006b \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};if _egeae .Aux ==nil {return nil ,_b .Error (_gdcf ,"a\u0075x\u0053\u0074\u0061\u0063\u006b\u0020\u006e\u006ft\u0020\u0064\u0065\u0066in\u0065\u0064");
};_fagg ,_efgbe :=_egeae .Pop ();if !_efgbe {return nil ,nil ;};_gdab ,_efgbe :=_fagg .(*fillSegment );if !_efgbe {return nil ,_b .Error (_gdcf ,"\u0073\u0074\u0061ck\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020c\u006fn\u0074a\u0069n\u0020\u002a\u0066\u0069\u006c\u006c\u0053\u0065\u0067\u006d\u0065\u006e\u0074");
};_defbd =&fillSegment {_gdab ._fgfdd ,_gdab ._aegfc ,_gdab ._dfab +_gdab ._dffdb ,_gdab ._dffdb };_egeae .Aux .Push (_gdab );return _defbd ,nil ;};type fillSegment struct{_fgfdd int ;_aegfc int ;_dfab int ;_dffdb int ;};func TstRSymbol (t *_bc .T ,scale ...int )*Bitmap {_dfda ,_acab :=NewWithData (4,5,[]byte {0xF0,0x90,0xF0,0xA0,0x90});
_ba .NoError (t ,_acab );return TstGetScaledSymbol (t ,_dfda ,scale ...);};func (_gedd *Bitmap )Zero ()bool {_cdf :=_gedd .Width /8;_gae :=_gedd .Width &7;var _dfed byte ;if _gae !=0{_dfed =byte (0xff<<uint (8-_gae ));};var _aba ,_dde ,_aae int ;for _dde =0;
_dde < _gedd .Height ;_dde ++{_aba =_gedd .RowStride *_dde ;for _aae =0;_aae < _cdf ;_aae ,_aba =_aae +1,_aba +1{if _gedd .Data [_aba ]!=0{return false ;};};if _gae > 0{if _gedd .Data [_aba ]&_dfed !=0{return false ;};};};return true ;};func (_efbfc *Bitmap )RasterOperation (dx ,dy ,dw ,dh int ,op RasterOperator ,src *Bitmap ,sx ,sy int )error {return _daec (_efbfc ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );
};func (_gaccg *ClassedPoints )Len ()int {return _gaccg .IntSlice .Size ()};func (_cbag MorphProcess )verify (_gfaa int ,_agab ,_ffcbb *int )error {const _aege ="\u004d\u006f\u0072\u0070hP\u0072\u006f\u0063\u0065\u0073\u0073\u002e\u0076\u0065\u0072\u0069\u0066\u0079";
switch _cbag .Operation {case MopDilation ,MopErosion ,MopOpening ,MopClosing :if len (_cbag .Arguments )!=2{return _b .Error (_aege ,"\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0064\u0027\u002c\u0020\u0027\u0065\u0027\u002c \u0027\u006f\u0027\u002c\u0020\u0027\u0063\u0027\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0032\u0020\u0061r\u0067\u0075\u006d\u0065\u006et\u0073");
};_gfff ,_bebgb :=_cbag .getWidthHeight ();if _gfff <=0||_bebgb <=0{return _b .Error (_aege ,"O\u0070er\u0061t\u0069o\u006e\u003a\u0020\u0027\u0064'\u002c\u0020\u0027e\u0027\u002c\u0020\u0027\u006f'\u002c\u0020\u0027c\u0027\u0020\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0062\u006f\u0074h w\u0069\u0064\u0074\u0068\u0020\u0061n\u0064\u0020\u0068\u0065\u0069\u0067\u0068\u0074\u0020\u0074\u006f\u0020b\u0065 \u003e\u003d\u0020\u0030");
};case MopRankBinaryReduction :_ecdb :=len (_cbag .Arguments );*_agab +=_ecdb ;if _ecdb < 1||_ecdb > 4{return _b .Error (_aege ,"\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0072\u0027\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u0031\u0020\u0061\u006e\u0064\u0020\u0061\u0074\u0020\u006d\u006fs\u0074\u0020\u0034\u0020\u0061\u0072g\u0075\u006d\u0065n\u0074\u0073");
};for _gddf :=0;_gddf < _ecdb ;_gddf ++{if _cbag .Arguments [_gddf ]< 1||_cbag .Arguments [_gddf ]> 4{return _b .Error (_aege ,"\u0052\u0061\u006e\u006b\u0042\u0069n\u0061\u0072\u0079\u0052\u0065\u0064\u0075\u0063\u0074\u0069\u006f\u006e\u0020\u006c\u0065\u0076\u0065\u006c\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065 \u00280\u002c\u0020\u0034\u003e");
};};case MopReplicativeBinaryExpansion :if len (_cbag .Arguments )==0{return _b .Error (_aege ,"\u0052\u0065\u0070\u006c\u0069\u0063\u0061\u0074i\u0076\u0065\u0042in\u0061\u0072\u0079\u0045\u0078\u0070a\u006e\u0073\u0069\u006f\u006e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020o\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_ccff :=_cbag .Arguments [0];if _ccff !=2&&_ccff !=4&&_ccff !=8{return _b .Error (_aege ,"R\u0065\u0070\u006c\u0069\u0063\u0061\u0074\u0069\u0076\u0065\u0042\u0069\u006e\u0061\u0072\u0079\u0045\u0078\u0070\u0061\u006e\u0073\u0069\u006f\u006e\u0020m\u0075s\u0074\u0020\u0062\u0065 \u006f\u0066 \u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d");
};*_agab -=_afgd [_ccff /4];case MopAddBorder :if len (_cbag .Arguments )==0{return _b .Error (_aege ,"\u0041\u0064\u0064B\u006f\u0072\u0064\u0065r\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gcdc :=_cbag .Arguments [0];if _gfaa > 0{return _b .Error (_aege ,"\u0041\u0064\u0064\u0042\u006f\u0072\u0064\u0065\u0072\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020f\u0069\u0072\u0073\u0074\u0020\u006d\u006f\u0072\u0070\u0068\u0020\u0070\u0072o\u0063\u0065\u0073\u0073");
};if _gcdc < 1{return _b .Error (_aege ,"\u0041\u0064\u0064\u0042o\u0072\u0064\u0065\u0072\u0020\u0076\u0061\u006c\u0075\u0065 \u006co\u0077\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u0030");};*_ffcbb =_gcdc ;};return nil ;};func (_fedc Points )GetGeometry (i int )(_ceecg ,_fbbg float32 ,_cdad error ){if i > len (_fedc )-1{return 0,0,_b .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};_dcbc :=_fedc [i ];return _dcbc .X ,_dcbc .Y ,nil ;};func CorrelationScoreThresholded (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab ,downcount []int ,scoreThreshold float32 )(bool ,error ){const _ffcf ="C\u006f\u0072\u0072\u0065\u006c\u0061t\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054h\u0072\u0065\u0073h\u006fl\u0064\u0065\u0064";
if bm1 ==nil {return false ,_b .Error (_ffcf ,"\u0063\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u0062\u006d1\u0020\u0069s\u0020\u006e\u0069\u006c");
};if bm2 ==nil {return false ,_b .Error (_ffcf ,"\u0063\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u0062\u006d2\u0020\u0069s\u0020\u006e\u0069\u006c");
};if area1 <=0||area2 <=0{return false ,_b .Error (_ffcf ,"c\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006fn\u0053\u0063\u006f\u0072\u0065\u0054\u0068re\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u002d\u0020\u0061\u0072\u0065\u0061s \u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u003e\u0020\u0030");
};if downcount ==nil {return false ,_b .Error (_ffcf ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u006f\u0020\u0027\u0064\u006f\u0077\u006e\u0063\u006f\u0075\u006e\u0074\u0027");};if tab ==nil {return false ,_b .Error (_ffcf ,"p\u0072\u006f\u0076\u0069de\u0064 \u006e\u0069\u006c\u0020\u0027s\u0075\u006d\u0074\u0061\u0062\u0027");
};_ggecb ,_fdgf :=bm1 .Width ,bm1 .Height ;_ageb ,_dgage :=bm2 .Width ,bm2 .Height ;if _d .Abs (_ggecb -_ageb )> maxDiffW {return false ,nil ;};if _d .Abs (_fdgf -_dgage )> maxDiffH {return false ,nil ;};_egegb :=int (delX +_d .Sign (delX )*0.5);_geed :=int (delY +_d .Sign (delY )*0.5);
_fadb :=int (_fg .Ceil (_fg .Sqrt (float64 (scoreThreshold )*float64 (area1 )*float64 (area2 ))));_fccac :=bm2 .RowStride ;_eadbg :=_gfaf (_geed ,0);_cgdd :=_aac (_dgage +_geed ,_fdgf );_edg :=bm1 .RowStride *_eadbg ;_fcbb :=bm2 .RowStride *(_eadbg -_geed );
var _bega int ;if _cgdd <=_fdgf {_bega =downcount [_cgdd -1];};_ega :=_gfaf (_egegb ,0);_dace :=_aac (_ageb +_egegb ,_ggecb );var _afaf ,_ddgd int ;if _egegb >=8{_afaf =_egegb >>3;_edg +=_afaf ;_ega -=_afaf <<3;_dace -=_afaf <<3;_egegb &=7;}else if _egegb <=-8{_ddgd =-((_egegb +7)>>3);
_fcbb +=_ddgd ;_fccac -=_ddgd ;_egegb +=_ddgd <<3;};var (_bace ,_deag ,_eebfa int ;_dbde ,_aabd ,_geaa byte ;);if _ega >=_dace ||_eadbg >=_cgdd {return false ,nil ;};_fdcg :=(_dace +7)>>3;switch {case _egegb ==0:for _deag =_eadbg ;_deag < _cgdd ;_deag ,_edg ,_fcbb =_deag +1,_edg +bm1 .RowStride ,_fcbb +bm2 .RowStride {for _eebfa =0;
_eebfa < _fdcg ;_eebfa ++{_dbde =bm1 .Data [_edg +_eebfa ]&bm2 .Data [_fcbb +_eebfa ];_bace +=tab [_dbde ];};if _bace >=_fadb {return true ,nil ;};if _eaac :=_bace +downcount [_deag ]-_bega ;_eaac < _fadb {return false ,nil ;};};case _egegb > 0&&_fccac < _fdcg :for _deag =_eadbg ;
_deag < _cgdd ;_deag ,_edg ,_fcbb =_deag +1,_edg +bm1 .RowStride ,_fcbb +bm2 .RowStride {_aabd =bm1 .Data [_edg ];_geaa =bm2 .Data [_fcbb ]>>uint (_egegb );_dbde =_aabd &_geaa ;_bace +=tab [_dbde ];for _eebfa =1;_eebfa < _fccac ;_eebfa ++{_aabd =bm1 .Data [_edg +_eebfa ];
_geaa =bm2 .Data [_fcbb +_eebfa ]>>uint (_egegb )|bm2 .Data [_fcbb +_eebfa -1]<<uint (8-_egegb );_dbde =_aabd &_geaa ;_bace +=tab [_dbde ];};_aabd =bm1 .Data [_edg +_eebfa ];_geaa =bm2 .Data [_fcbb +_eebfa -1]<<uint (8-_egegb );_dbde =_aabd &_geaa ;_bace +=tab [_dbde ];
if _bace >=_fadb {return true ,nil ;}else if _bace +downcount [_deag ]-_bega < _fadb {return false ,nil ;};};case _egegb > 0&&_fccac >=_fdcg :for _deag =_eadbg ;_deag < _cgdd ;_deag ,_edg ,_fcbb =_deag +1,_edg +bm1 .RowStride ,_fcbb +bm2 .RowStride {_aabd =bm1 .Data [_edg ];
_geaa =bm2 .Data [_fcbb ]>>uint (_egegb );_dbde =_aabd &_geaa ;_bace +=tab [_dbde ];for _eebfa =1;_eebfa < _fdcg ;_eebfa ++{_aabd =bm1 .Data [_edg +_eebfa ];_geaa =bm2 .Data [_fcbb +_eebfa ]>>uint (_egegb );_geaa |=bm2 .Data [_fcbb +_eebfa -1]<<uint (8-_egegb );
_dbde =_aabd &_geaa ;_bace +=tab [_dbde ];};if _bace >=_fadb {return true ,nil ;}else if _bace +downcount [_deag ]-_bega < _fadb {return false ,nil ;};};case _fdcg < _fccac :for _deag =_eadbg ;_deag < _cgdd ;_deag ,_edg ,_fcbb =_deag +1,_edg +bm1 .RowStride ,_fcbb +bm2 .RowStride {for _eebfa =0;
_eebfa < _fdcg ;_eebfa ++{_aabd =bm1 .Data [_edg +_eebfa ];_geaa =bm2 .Data [_fcbb +_eebfa ]<<uint (-_egegb );_geaa |=bm2 .Data [_fcbb +_eebfa +1]>>uint (8+_egegb );_dbde =_aabd &_geaa ;_bace +=tab [_dbde ];};if _bace >=_fadb {return true ,nil ;}else if _cdca :=_bace +downcount [_deag ]-_bega ;
_cdca < _fadb {return false ,nil ;};};case _fccac >=_fdcg :for _deag =_eadbg ;_deag < _cgdd ;_deag ,_edg ,_fcbb =_deag +1,_edg +bm1 .RowStride ,_fcbb +bm2 .RowStride {for _eebfa =0;_eebfa < _fdcg ;_eebfa ++{_aabd =bm1 .Data [_edg +_eebfa ];_geaa =bm2 .Data [_fcbb +_eebfa ]<<uint (-_egegb );
_geaa |=bm2 .Data [_fcbb +_eebfa +1]>>uint (8+_egegb );_dbde =_aabd &_geaa ;_bace +=tab [_dbde ];};_aabd =bm1 .Data [_edg +_eebfa ];_geaa =bm2 .Data [_fcbb +_eebfa ]<<uint (-_egegb );_dbde =_aabd &_geaa ;_bace +=tab [_dbde ];if _bace >=_fadb {return true ,nil ;
}else if _bace +downcount [_deag ]-_bega < _fadb {return false ,nil ;};};};_dbbde :=float32 (_bace )*float32 (_bace )/(float32 (area1 )*float32 (area2 ));if _dbbde >=scoreThreshold {_aa .Log .Trace ("\u0063\u006f\u0075\u006e\u0074\u003a\u0020\u0025\u0064\u0020\u003c\u0020\u0074\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0020\u0025\u0064\u0020\u0062\u0075\u0074\u0020\u0073c\u006f\u0072\u0065\u0020\u0025\u0066\u0020\u003e\u003d\u0020\u0073\u0063\u006fr\u0065\u0054\u0068\u0072\u0065\u0073h\u006f\u006c\u0064 \u0025\u0066",_bace ,_fadb ,_dbbde ,scoreThreshold );
};return false ,nil ;};const (CmbOpOr CombinationOperator =iota ;CmbOpAnd ;CmbOpXor ;CmbOpXNor ;CmbOpReplace ;CmbOpNot ;);func TstASymbol (t *_bc .T )*Bitmap {t .Helper ();_cgfb :=New (6,6);_ba .NoError (t ,_cgfb .SetPixel (1,0,1));_ba .NoError (t ,_cgfb .SetPixel (2,0,1));
_ba .NoError (t ,_cgfb .SetPixel (3,0,1));_ba .NoError (t ,_cgfb .SetPixel (4,0,1));_ba .NoError (t ,_cgfb .SetPixel (5,1,1));_ba .NoError (t ,_cgfb .SetPixel (1,2,1));_ba .NoError (t ,_cgfb .SetPixel (2,2,1));_ba .NoError (t ,_cgfb .SetPixel (3,2,1));
_ba .NoError (t ,_cgfb .SetPixel (4,2,1));_ba .NoError (t ,_cgfb .SetPixel (5,2,1));_ba .NoError (t ,_cgfb .SetPixel (0,3,1));_ba .NoError (t ,_cgfb .SetPixel (5,3,1));_ba .NoError (t ,_cgfb .SetPixel (0,4,1));_ba .NoError (t ,_cgfb .SetPixel (5,4,1));
_ba .NoError (t ,_cgfb .SetPixel (1,5,1));_ba .NoError (t ,_cgfb .SetPixel (2,5,1));_ba .NoError (t ,_cgfb .SetPixel (3,5,1));_ba .NoError (t ,_cgfb .SetPixel (4,5,1));_ba .NoError (t ,_cgfb .SetPixel (5,5,1));return _cgfb ;};func (_ffde *Bitmap )setBit (_fgb int ){_ffde .Data [(_fgb >>3)]|=0x80>>uint (_fgb &7)};
func _cbbg (_bbbd ,_ggab *Bitmap ,_cdff ,_cade int )(_ggce error ){const _eccfe ="\u0073e\u0065d\u0066\u0069\u006c\u006c\u0042i\u006e\u0061r\u0079\u004c\u006f\u0077\u0038";var (_afce ,_fafc ,_ffcdd ,_gbfea int ;_cfea ,_acae ,_fdaea ,_ddcbd ,_dfbbg ,_aebb ,_cddg ,_adbg byte ;
);for _afce =0;_afce < _cdff ;_afce ++{_ffcdd =_afce *_bbbd .RowStride ;_gbfea =_afce *_ggab .RowStride ;for _fafc =0;_fafc < _cade ;_fafc ++{if _cfea ,_ggce =_bbbd .GetByte (_ffcdd +_fafc );_ggce !=nil {return _b .Wrap (_ggce ,_eccfe ,"\u0067e\u0074 \u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");
};if _acae ,_ggce =_ggab .GetByte (_gbfea +_fafc );_ggce !=nil {return _b .Wrap (_ggce ,_eccfe ,"\u0067\u0065\u0074\u0020\u006d\u0061\u0073\u006b\u0020\u0062\u0079\u0074\u0065");};if _afce > 0{if _fdaea ,_ggce =_bbbd .GetByte (_ffcdd -_bbbd .RowStride +_fafc );
_ggce !=nil {return _b .Wrap (_ggce ,_eccfe ,"\u0069\u0020\u003e\u0020\u0030\u0020\u0062\u0079\u0074\u0065");};_cfea |=_fdaea |(_fdaea <<1)|(_fdaea >>1);if _fafc > 0{if _adbg ,_ggce =_bbbd .GetByte (_ffcdd -_bbbd .RowStride +_fafc -1);_ggce !=nil {return _b .Wrap (_ggce ,_eccfe ,"\u0069\u0020\u003e\u00200 \u0026\u0026\u0020\u006a\u0020\u003e\u0020\u0030\u0020\u0062\u0079\u0074\u0065");
};_cfea |=_adbg <<7;};if _fafc < _cade -1{if _adbg ,_ggce =_bbbd .GetByte (_ffcdd -_bbbd .RowStride +_fafc +1);_ggce !=nil {return _b .Wrap (_ggce ,_eccfe ,"\u006a\u0020<\u0020\u0077\u0070l\u0020\u002d\u0020\u0031\u0020\u0062\u0079\u0074\u0065");};_cfea |=_adbg >>7;
};};if _fafc > 0{if _ddcbd ,_ggce =_bbbd .GetByte (_ffcdd +_fafc -1);_ggce !=nil {return _b .Wrap (_ggce ,_eccfe ,"\u006a\u0020\u003e \u0030");};_cfea |=_ddcbd <<7;};_cfea &=_acae ;if _cfea ==0||^_cfea ==0{if _ggce =_bbbd .SetByte (_ffcdd +_fafc ,_cfea );
_ggce !=nil {return _b .Wrap (_ggce ,_eccfe ,"\u0073e\u0074t\u0069\u006e\u0067\u0020\u0065m\u0070\u0074y\u0020\u0062\u0079\u0074\u0065");};};for {_cddg =_cfea ;_cfea =(_cfea |(_cfea >>1)|(_cfea <<1))&_acae ;if (_cfea ^_cddg )==0{if _ggce =_bbbd .SetByte (_ffcdd +_fafc ,_cfea );
_ggce !=nil {return _b .Wrap (_ggce ,_eccfe ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0070\u0072\u0065\u0076 \u0062\u0079\u0074\u0065");};break ;};};};};for _afce =_cdff -1;_afce >=0;_afce --{_ffcdd =_afce *_bbbd .RowStride ;_gbfea =_afce *_ggab .RowStride ;
for _fafc =_cade -1;_fafc >=0;_fafc --{if _cfea ,_ggce =_bbbd .GetByte (_ffcdd +_fafc );_ggce !=nil {return _b .Wrap (_ggce ,_eccfe ,"\u0072\u0065\u0076er\u0073\u0065\u0020\u0067\u0065\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");
};if _acae ,_ggce =_ggab .GetByte (_gbfea +_fafc );_ggce !=nil {return _b .Wrap (_ggce ,_eccfe ,"r\u0065\u0076\u0065\u0072se\u0020g\u0065\u0074\u0020\u006d\u0061s\u006b\u0020\u0062\u0079\u0074\u0065");};if _afce < _cdff -1{if _dfbbg ,_ggce =_bbbd .GetByte (_ffcdd +_bbbd .RowStride +_fafc );
_ggce !=nil {return _b .Wrap (_ggce ,_eccfe ,"\u0069\u0020\u003c\u0020h\u0020\u002d\u0020\u0031\u0020\u002d\u003e\u0020\u0067\u0065t\u0020s\u006f\u0075\u0072\u0063\u0065\u0020\u0062y\u0074\u0065");};_cfea |=_dfbbg |(_dfbbg <<1)|_dfbbg >>1;if _fafc > 0{if _adbg ,_ggce =_bbbd .GetByte (_ffcdd +_bbbd .RowStride +_fafc -1);
_ggce !=nil {return _b .Wrap (_ggce ,_eccfe ,"\u0069\u0020\u003c h\u002d\u0031\u0020\u0026\u0020\u006a\u0020\u003e\u00200\u0020-\u003e \u0067e\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");};_cfea |=_adbg <<7;};if _fafc < _cade -1{if _adbg ,_ggce =_bbbd .GetByte (_ffcdd +_bbbd .RowStride +_fafc +1);
_ggce !=nil {return _b .Wrap (_ggce ,_eccfe ,"\u0069\u0020\u003c\u0020\u0068\u002d\u0031\u0020\u0026\u0026\u0020\u006a\u0020\u003c\u0077\u0070\u006c\u002d\u0031\u0020\u002d\u003e\u0020\u0067e\u0074\u0020\u0073\u006f\u0075r\u0063\u0065 \u0062\u0079\u0074\u0065");
};_cfea |=_adbg >>7;};};if _fafc < _cade -1{if _aebb ,_ggce =_bbbd .GetByte (_ffcdd +_fafc +1);_ggce !=nil {return _b .Wrap (_ggce ,_eccfe ,"\u006a\u0020<\u0020\u0077\u0070\u006c\u0020\u002d\u0031\u0020\u002d\u003e\u0020\u0067\u0065\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020by\u0074\u0065");
};_cfea |=_aebb >>7;};_cfea &=_acae ;if _cfea ==0||(^_cfea )==0{if _ggce =_bbbd .SetByte (_ffcdd +_fafc ,_cfea );_ggce !=nil {return _b .Wrap (_ggce ,_eccfe ,"\u0073e\u0074 \u006d\u0061\u0073\u006b\u0065\u0064\u0020\u0062\u0079\u0074\u0065");};};for {_cddg =_cfea ;
_cfea =(_cfea |(_cfea >>1)|(_cfea <<1))&_acae ;if (_cfea ^_cddg )==0{if _ggce =_bbbd .SetByte (_ffcdd +_fafc ,_cfea );_ggce !=nil {return _b .Wrap (_ggce ,_eccfe ,"r\u0065\u0076\u0065\u0072se\u0020s\u0065\u0074\u0020\u0070\u0072e\u0076\u0020\u0062\u0079\u0074\u0065");
};break ;};};};};return nil ;};func _gfec (_daf ,_aacd *Bitmap ,_efda ,_dfdc ,_gedc ,_aadf ,_afd ,_dfdb ,_cgd ,_fdec int ,_eged CombinationOperator ,_ffe int )error {var _begg int ;_ccbb :=func (){_begg ++;_gedc +=_aacd .RowStride ;_aadf +=_daf .RowStride ;
_afd +=_daf .RowStride };for _begg =_efda ;_begg < _dfdc ;_ccbb (){var _cfgg uint16 ;_afeg :=_gedc ;for _gcca :=_aadf ;_gcca <=_afd ;_gcca ++{_babe ,_decd :=_aacd .GetByte (_afeg );if _decd !=nil {return _decd ;};_bbac ,_decd :=_daf .GetByte (_gcca );if _decd !=nil {return _decd ;
};_cfgg =(_cfgg |(uint16 (_bbac )&0xff))<<uint (_fdec );_bbac =byte (_cfgg >>8);if _decd =_aacd .SetByte (_afeg ,_bbbe (_babe ,_bbac ,_eged ));_decd !=nil {return _decd ;};_afeg ++;_cfgg <<=uint (_cgd );if _gcca ==_afd {_bbac =byte (_cfgg >>(8-uint8 (_fdec )));
if _ffe !=0{_bbac =_cge (uint (8+_dfdb ),_bbac );};_babe ,_decd =_aacd .GetByte (_afeg );if _decd !=nil {return _decd ;};if _decd =_aacd .SetByte (_afeg ,_bbbe (_babe ,_bbac ,_eged ));_decd !=nil {return _decd ;};};};};return nil ;};func _egae (_fceg *Bitmap ,_gfed *Bitmap ,_bdfea int )(_bcac error ){const _eabd ="\u0073\u0065\u0065\u0064\u0066\u0069\u006c\u006c\u0042\u0069\u006e\u0061r\u0079\u004c\u006f\u0077";
_beafg :=_aac (_fceg .Height ,_gfed .Height );_ddce :=_aac (_fceg .RowStride ,_gfed .RowStride );switch _bdfea {case 4:_bcac =_efaf (_fceg ,_gfed ,_beafg ,_ddce );case 8:_bcac =_cbbg (_fceg ,_gfed ,_beafg ,_ddce );default:return _b .Errorf (_eabd ,"\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0034\u0020\u006fr\u0020\u0038\u0020\u002d\u0020i\u0073\u003a \u0027\u0025\u0064\u0027",_bdfea );
};if _bcac !=nil {return _b .Wrap (_bcac ,_eabd ,"");};return nil ;};func RankHausTest (p1 ,p2 ,p3 ,p4 *Bitmap ,delX ,delY float32 ,maxDiffW ,maxDiffH ,area1 ,area3 int ,rank float32 ,tab8 []int )(_aaaf bool ,_aaee error ){const _ecdf ="\u0052\u0061\u006ek\u0048\u0061\u0075\u0073\u0054\u0065\u0073\u0074";
_aebe ,_bfbgg :=p1 .Width ,p1 .Height ;_bbde ,_faga :=p3 .Width ,p3 .Height ;if _d .Abs (_aebe -_bbde )> maxDiffW {return false ,nil ;};if _d .Abs (_bfbgg -_faga )> maxDiffH {return false ,nil ;};_cdcad :=int (float32 (area1 )*(1.0-rank )+0.5);_faeda :=int (float32 (area3 )*(1.0-rank )+0.5);
var _baagg ,_feag int ;if delX >=0{_baagg =int (delX +0.5);}else {_baagg =int (delX -0.5);};if delY >=0{_feag =int (delY +0.5);}else {_feag =int (delY -0.5);};_fedf :=p1 .CreateTemplate ();if _aaee =_fedf .RasterOperation (0,0,_aebe ,_bfbgg ,PixSrc ,p1 ,0,0);
_aaee !=nil {return false ,_b .Wrap (_aaee ,_ecdf ,"p\u0031\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _aaee =_fedf .RasterOperation (_baagg ,_feag ,_aebe ,_bfbgg ,PixNotSrcAndDst ,p4 ,0,0);_aaee !=nil {return false ,_b .Wrap (_aaee ,_ecdf ,"\u0074 \u0026\u0020\u0021\u0070\u0034");
};_aaaf ,_aaee =_fedf .ThresholdPixelSum (_cdcad ,tab8 );if _aaee !=nil {return false ,_b .Wrap (_aaee ,_ecdf ,"\u0074\u002d\u003e\u0074\u0068\u0072\u0065\u0073\u0068\u0031");};if _aaaf {return false ,nil ;};if _aaee =_fedf .RasterOperation (_baagg ,_feag ,_bbde ,_faga ,PixSrc ,p3 ,0,0);
_aaee !=nil {return false ,_b .Wrap (_aaee ,_ecdf ,"p\u0033\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _aaee =_fedf .RasterOperation (0,0,_bbde ,_faga ,PixNotSrcAndDst ,p2 ,0,0);_aaee !=nil {return false ,_b .Wrap (_aaee ,_ecdf ,"\u0074 \u0026\u0020\u0021\u0070\u0032");
};_aaaf ,_aaee =_fedf .ThresholdPixelSum (_faeda ,tab8 );if _aaee !=nil {return false ,_b .Wrap (_aaee ,_ecdf ,"\u0074\u002d\u003e\u0074\u0068\u0072\u0065\u0073\u0068\u0033");};return !_aaaf ,nil ;};func (_cfdg *BitmapsArray )AddBox (box *_ff .Rectangle ){_cfdg .Boxes =append (_cfdg .Boxes ,box )};
func (_acdfd *Bitmaps )AddBitmap (bm *Bitmap ){_acdfd .Values =append (_acdfd .Values ,bm )};func NewWithData (width ,height int ,data []byte )(*Bitmap ,error ){const _ddda ="N\u0065\u0077\u0057\u0069\u0074\u0068\u0044\u0061\u0074\u0061";_debg :=_baf (width ,height );
_debg .Data =data ;if len (data )< height *_debg .RowStride {return nil ,_b .Errorf (_ddda ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064\u0061\u0074\u0061\u0020l\u0065\u006e\u0067\u0074\u0068\u003a \u0025\u0064\u0020\u002d\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e\u003a\u0020\u0025\u0064",len (data ),height *_debg .RowStride );
};return _debg ,nil ;};func (_cdbb *ClassedPoints )xSortFunction ()func (_ebge int ,_acge int )bool {return func (_becg ,_aecf int )bool {return _cdbb .XAtIndex (_becg )< _cdbb .XAtIndex (_aecf )};};func (_fagae *Bitmaps )GroupByWidth ()(*BitmapsArray ,error ){const _ccdb ="\u0047\u0072\u006fu\u0070\u0042\u0079\u0057\u0069\u0064\u0074\u0068";
if len (_fagae .Values )==0{return nil ,_b .Error (_ccdb ,"\u006eo\u0020v\u0061\u006c\u0075\u0065\u0073 \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};_cefaf :=&BitmapsArray {};_fagae .SortByWidth ();_fcgg :=-1;_caaa :=-1;for _eddd :=0;_eddd < len (_fagae .Values );
_eddd ++{_ffbad :=_fagae .Values [_eddd ].Width ;if _ffbad > _fcgg {_fcgg =_ffbad ;_caaa ++;_cefaf .Values =append (_cefaf .Values ,&Bitmaps {});};_cefaf .Values [_caaa ].AddBitmap (_fagae .Values [_eddd ]);};return _cefaf ,nil ;};func (_dgac Points )GetIntX (i int )(int ,error ){if i >=len (_dgac ){return 0,_b .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065t\u0049\u006e\u0074\u0058","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return int (_dgac [i ].X ),nil ;};func (_bgbf *Bitmaps )ClipToBitmap (s *Bitmap )(*Bitmaps ,error ){const _cbbe ="B\u0069t\u006d\u0061\u0070\u0073\u002e\u0043\u006c\u0069p\u0054\u006f\u0042\u0069tm\u0061\u0070";if _bgbf ==nil {return nil ,_b .Error (_cbbe ,"\u0042\u0069\u0074\u006dap\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if s ==nil {return nil ,_b .Error (_cbbe ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};_afcee :=len (_bgbf .Values );_eefd :=&Bitmaps {Values :make ([]*Bitmap ,_afcee ),Boxes :make ([]*_ff .Rectangle ,_afcee )};
var (_gcef ,_afeca *Bitmap ;_eaeg *_ff .Rectangle ;_efdg error ;);for _geagg :=0;_geagg < _afcee ;_geagg ++{if _gcef ,_efdg =_bgbf .GetBitmap (_geagg );_efdg !=nil {return nil ,_b .Wrap (_efdg ,_cbbe ,"");};if _eaeg ,_efdg =_bgbf .GetBox (_geagg );_efdg !=nil {return nil ,_b .Wrap (_efdg ,_cbbe ,"");
};if _afeca ,_efdg =s .clipRectangle (_eaeg ,nil );_efdg !=nil {return nil ,_b .Wrap (_efdg ,_cbbe ,"");};if _afeca ,_efdg =_afeca .And (_gcef );_efdg !=nil {return nil ,_b .Wrap (_efdg ,_cbbe ,"");};_eefd .Values [_geagg ]=_afeca ;_eefd .Boxes [_geagg ]=_eaeg ;
};return _eefd ,nil ;};func NewWithUnpaddedData (width ,height int ,data []byte )(*Bitmap ,error ){const _ecf ="\u004e\u0065\u0077\u0057it\u0068\u0055\u006e\u0070\u0061\u0064\u0064\u0065\u0064\u0044\u0061\u0074\u0061";_dabd :=_baf (width ,height );_dabd .Data =data ;
if _bfd :=((width *height )+7)>>3;len (data )< _bfd {return nil ,_b .Errorf (_ecf ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064a\u0074\u0061\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u003a\u0020\u0027\u0025\u0064\u0027\u002e\u0020\u0054\u0068\u0065\u0020\u0064\u0061t\u0061\u0020s\u0068\u006fu\u006c\u0064\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 l\u0065\u0061\u0073\u0074\u003a\u0020\u0027\u0025\u0064'\u0020\u0062\u0079\u0074\u0065\u0073",len (data ),_bfd );
};if _eed :=_dabd .addPadBits ();_eed !=nil {return nil ,_b .Wrap (_eed ,_ecf ,"");};return _dabd ,nil ;};func (_fcfg Points )GetIntY (i int )(int ,error ){if i >=len (_fcfg ){return 0,_b .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065t\u0049\u006e\u0074\u0059","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return int (_fcfg [i ].Y ),nil ;};func (_egec *Bitmap )setEightFullBytes (_gabc int ,_cbba uint64 )error {if _gabc +7> len (_egec .Data )-1{return _b .Error ("\u0073\u0065\u0074\u0045\u0069\u0067\u0068\u0074\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_egec .Data [_gabc ]=byte ((_cbba &0xff00000000000000)>>56);_egec .Data [_gabc +1]=byte ((_cbba &0xff000000000000)>>48);_egec .Data [_gabc +2]=byte ((_cbba &0xff0000000000)>>40);_egec .Data [_gabc +3]=byte ((_cbba &0xff00000000)>>32);_egec .Data [_gabc +4]=byte ((_cbba &0xff000000)>>24);
_egec .Data [_gabc +5]=byte ((_cbba &0xff0000)>>16);_egec .Data [_gabc +6]=byte ((_cbba &0xff00)>>8);_egec .Data [_gabc +7]=byte (_cbba &0xff);return nil ;};func (_bdf *Bitmap )GetByteIndex (x ,y int )int {return y *_bdf .RowStride +(x >>3)};func _cge (_dcab uint ,_cgdc byte )byte {return _cgdc >>_dcab <<_dcab };
func (_dacg *Bitmap )Copy ()*Bitmap {_edf :=make ([]byte ,len (_dacg .Data ));copy (_edf ,_dacg .Data );return &Bitmap {Width :_dacg .Width ,Height :_dacg .Height ,RowStride :_dacg .RowStride ,Data :_edf ,Color :_dacg .Color ,Text :_dacg .Text ,BitmapNumber :_dacg .BitmapNumber ,Special :_dacg .Special };
};func (_dafb *Boxes )Add (box *_ff .Rectangle )error {if _dafb ==nil {return _b .Error ("\u0042o\u0078\u0065\u0073\u002e\u0041\u0064d","\u0027\u0042\u006f\u0078es\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};*_dafb =append (*_dafb ,box );
return nil ;};func _cg (_bea *Bitmap ,_cec ,_fb int )(*Bitmap ,error ){const _dc ="e\u0078\u0070\u0061\u006edB\u0069n\u0061\u0072\u0079\u0052\u0065p\u006c\u0069\u0063\u0061\u0074\u0065";if _bea ==nil {return nil ,_b .Error (_dc ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _cec <=0||_fb <=0{return nil ,_b .Error (_dc ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0073\u0063\u0061l\u0065\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020<\u003d\u0020\u0030");};if _cec ==_fb {if _cec ==1{_cffe ,_ded :=_cagf (nil ,_bea );
if _ded !=nil {return nil ,_b .Wrap (_ded ,_dc ,"\u0078\u0046\u0061\u0063\u0074\u0020\u003d\u003d\u0020y\u0046\u0061\u0063\u0074");};return _cffe ,nil ;};if _cec ==2||_cec ==4||_cec ==8{_bdc ,_efb :=_adb (_bea ,_cec );if _efb !=nil {return nil ,_b .Wrap (_efb ,_dc ,"\u0078\u0046a\u0063\u0074\u0020i\u006e\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d");
};return _bdc ,nil ;};};_eb :=_cec *_bea .Width ;_acg :=_fb *_bea .Height ;_ca :=New (_eb ,_acg );_gbd :=_ca .RowStride ;var (_gac ,_dbb ,_effg ,_ddc ,_ae int ;_cag byte ;_ccg error ;);for _dbb =0;_dbb < _bea .Height ;_dbb ++{_gac =_fb *_dbb *_gbd ;for _effg =0;
_effg < _bea .Width ;_effg ++{if _fbc :=_bea .GetPixel (_effg ,_dbb );_fbc {_ae =_cec *_effg ;for _ddc =0;_ddc < _cec ;_ddc ++{_ca .setBit (_gac *8+_ae +_ddc );};};};for _ddc =1;_ddc < _fb ;_ddc ++{_beg :=_gac +_ddc *_gbd ;for _acf :=0;_acf < _gbd ;_acf ++{if _cag ,_ccg =_ca .GetByte (_gac +_acf );
_ccg !=nil {return nil ,_b .Wrapf (_ccg ,_dc ,"\u0072\u0065\u0070\u006cic\u0061\u0074\u0069\u006e\u0067\u0020\u006c\u0069\u006e\u0065\u003a\u0020\u0027\u0025d\u0027",_ddc );};if _ccg =_ca .SetByte (_beg +_acf ,_cag );_ccg !=nil {return nil ,_b .Wrap (_ccg ,_dc ,"\u0053\u0065\u0074\u0074in\u0067\u0020\u0062\u0079\u0074\u0065\u0020\u0066\u0061\u0069\u006c\u0065\u0064");
};};};};return _ca ,nil ;};func (_aabdd *ClassedPoints )SortByX (){_aabdd ._edffc =_aabdd .xSortFunction ();_bg .Sort (_aabdd )};func (_dcbd *Bitmaps )CountPixels ()*_d .NumSlice {_agggf :=&_d .NumSlice {};for _ ,_ggebc :=range _dcbd .Values {_agggf .AddInt (_ggebc .CountPixels ());
};return _agggf ;};func _eg ()(_efg [256]uint16 ){for _fdc :=0;_fdc < 256;_fdc ++{if _fdc &0x01!=0{_efg [_fdc ]|=0x3;};if _fdc &0x02!=0{_efg [_fdc ]|=0xc;};if _fdc &0x04!=0{_efg [_fdc ]|=0x30;};if _fdc &0x08!=0{_efg [_fdc ]|=0xc0;};if _fdc &0x10!=0{_efg [_fdc ]|=0x300;
};if _fdc &0x20!=0{_efg [_fdc ]|=0xc00;};if _fdc &0x40!=0{_efg [_fdc ]|=0x3000;};if _fdc &0x80!=0{_efg [_fdc ]|=0xc000;};};return _efg ;};func (_abf *Bitmap )removeBorderGeneral (_bbba ,_bee ,_faa ,_edcc int )(*Bitmap ,error ){const _fae ="\u0072\u0065\u006d\u006fve\u0042\u006f\u0072\u0064\u0065\u0072\u0047\u0065\u006e\u0065\u0072\u0061\u006c";
if _bbba < 0||_bee < 0||_faa < 0||_edcc < 0{return nil ,_b .Error (_fae ,"\u006e\u0065g\u0061\u0074\u0069\u0076\u0065\u0020\u0062\u0072\u006f\u0064\u0065\u0072\u0020\u0072\u0065\u006d\u006f\u0076\u0065\u0020\u0076\u0061lu\u0065\u0073");};_bebg ,_ecgd :=_abf .Width ,_abf .Height ;
_ebf :=_bebg -_bbba -_bee ;_fbddf :=_ecgd -_faa -_edcc ;if _ebf <=0{return nil ,_b .Errorf (_fae ,"w\u0069\u0064\u0074\u0068: \u0025d\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u003e\u0020\u0030",_ebf );};if _fbddf <=0{return nil ,_b .Errorf (_fae ,"\u0068\u0065\u0069\u0067ht\u003a\u0020\u0025\u0064\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u003e \u0030",_fbddf );
};_fag :=New (_ebf ,_fbddf );_fag .Color =_abf .Color ;_bbg :=_fag .RasterOperation (0,0,_ebf ,_fbddf ,PixSrc ,_abf ,_bbba ,_faa );if _bbg !=nil {return nil ,_b .Wrap (_bbg ,_fae ,"");};return _fag ,nil ;};func (_ggbe *Bitmap )ClipRectangle (box *_ff .Rectangle )(_fgfa *Bitmap ,_bgdc *_ff .Rectangle ,_bfbd error ){const _dca ="\u0043\u006c\u0069\u0070\u0052\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065";
if box ==nil {return nil ,nil ,_b .Error (_dca ,"\u0062o\u0078 \u0069\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};_ebeb ,_ged :=_ggbe .Width ,_ggbe .Height ;_geb :=_ff .Rect (0,0,_ebeb ,_ged );if !box .Overlaps (_geb ){return nil ,nil ,_b .Error (_dca ,"b\u006f\u0078\u0020\u0064oe\u0073n\u0027\u0074\u0020\u006f\u0076e\u0072\u006c\u0061\u0070\u0020\u0062");
};_gbff :=box .Intersect (_geb );_agc ,_def :=_gbff .Min .X ,_gbff .Min .Y ;_cagb ,_dgf :=_gbff .Dx (),_gbff .Dy ();_fgfa =New (_cagb ,_dgf );_fgfa .Text =_ggbe .Text ;if _bfbd =_fgfa .RasterOperation (0,0,_cagb ,_dgf ,PixSrc ,_ggbe ,_agc ,_def );_bfbd !=nil {return nil ,nil ,_b .Wrap (_bfbd ,_dca ,"\u0050\u0069\u0078\u0053\u0072\u0063\u0020\u0074\u006f\u0020\u0063\u006ci\u0070\u0070\u0065\u0064");
};_bgdc =&_gbff ;return _fgfa ,_bgdc ,nil ;};func HausTest (p1 ,p2 ,p3 ,p4 *Bitmap ,delX ,delY float32 ,maxDiffW ,maxDiffH int )(bool ,error ){const _gcd ="\u0048\u0061\u0075\u0073\u0054\u0065\u0073\u0074";_ebddc ,_cegf :=p1 .Width ,p1 .Height ;_cegfd ,_dcec :=p3 .Width ,p3 .Height ;
if _d .Abs (_ebddc -_cegfd )> maxDiffW {return false ,nil ;};if _d .Abs (_cegf -_dcec )> maxDiffH {return false ,nil ;};_fgfd :=int (delX +_d .Sign (delX )*0.5);_bcga :=int (delY +_d .Sign (delY )*0.5);var _bebga error ;_ccbg :=p1 .CreateTemplate ();if _bebga =_ccbg .RasterOperation (0,0,_ebddc ,_cegf ,PixSrc ,p1 ,0,0);
_bebga !=nil {return false ,_b .Wrap (_bebga ,_gcd ,"p\u0031\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _bebga =_ccbg .RasterOperation (_fgfd ,_bcga ,_ebddc ,_cegf ,PixNotSrcAndDst ,p4 ,0,0);_bebga !=nil {return false ,_b .Wrap (_bebga ,_gcd ,"\u0021p\u0034\u0020\u0026\u0020\u0074");
};if _ccbg .Zero (){return false ,nil ;};if _bebga =_ccbg .RasterOperation (_fgfd ,_bcga ,_cegfd ,_dcec ,PixSrc ,p3 ,0,0);_bebga !=nil {return false ,_b .Wrap (_bebga ,_gcd ,"p\u0033\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _bebga =_ccbg .RasterOperation (0,0,_cegfd ,_dcec ,PixNotSrcAndDst ,p2 ,0,0);
_bebga !=nil {return false ,_b .Wrap (_bebga ,_gcd ,"\u0021p\u0032\u0020\u0026\u0020\u0074");};return _ccbg .Zero (),nil ;};func (_fcede *Bitmaps )selectByIndicator (_bffgd *_d .NumSlice )(_bdfc *Bitmaps ,_bbcgc error ){const _eecce ="\u0042i\u0074\u006d\u0061\u0070s\u002e\u0073\u0065\u006c\u0065c\u0074B\u0079I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";
if _fcede ==nil {return nil ,_b .Error (_eecce ,"\u0027\u0062\u0027 b\u0069\u0074\u006d\u0061\u0070\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if _bffgd ==nil {return nil ,_b .Error (_eecce ,"'\u006e\u0061\u0027\u0020\u0069\u006ed\u0069\u0063\u0061\u0074\u006f\u0072\u0073\u0020\u006eo\u0074\u0020\u0064e\u0066i\u006e\u0065\u0064");
};if len (_fcede .Values )==0{return _fcede ,nil ;};if len (*_bffgd )!=len (_fcede .Values ){return nil ,_b .Errorf (_eecce ,"\u006ea\u0020\u006ce\u006e\u0067\u0074\u0068:\u0020\u0025\u0064,\u0020\u0069\u0073\u0020\u0064\u0069\u0066\u0066\u0065re\u006e\u0074\u0020t\u0068\u0061n\u0020\u0062\u0069\u0074\u006d\u0061p\u0073\u003a \u0025\u0064",len (*_bffgd ),len (_fcede .Values ));
};var _gaec ,_cbgb ,_beafa int ;for _cbgb =0;_cbgb < len (*_bffgd );_cbgb ++{if _gaec ,_bbcgc =_bffgd .GetInt (_cbgb );_bbcgc !=nil {return nil ,_b .Wrap (_bbcgc ,_eecce ,"f\u0069\u0072\u0073\u0074\u0020\u0063\u0068\u0065\u0063\u006b");};if _gaec ==1{_beafa ++;
};};if _beafa ==len (_fcede .Values ){return _fcede ,nil ;};_bdfc =&Bitmaps {};_gbefc :=len (_fcede .Values )==len (_fcede .Boxes );for _cbgb =0;_cbgb < len (*_bffgd );_cbgb ++{if _gaec =int ((*_bffgd )[_cbgb ]);_gaec ==0{continue ;};_bdfc .Values =append (_bdfc .Values ,_fcede .Values [_cbgb ]);
if _gbefc {_bdfc .Boxes =append (_bdfc .Boxes ,_fcede .Boxes [_cbgb ]);};};return _bdfc ,nil ;};func (_beaca *ClassedPoints )Less (i ,j int )bool {return _beaca ._edffc (i ,j )};func (_dad *Bitmap )GetUnpaddedData ()([]byte ,error ){_gdg :=uint (_dad .Width &0x07);
if _gdg ==0{return _dad .Data ,nil ;};_afb :=_dad .Width *_dad .Height ;if _afb %8!=0{_afb >>=3;_afb ++;}else {_afb >>=3;};_babba :=make ([]byte ,_afb );_fgea :=_c .NewWriterMSB (_babba );const _fdgd ="\u0047e\u0074U\u006e\u0070\u0061\u0064\u0064\u0065\u0064\u0044\u0061\u0074\u0061";
for _gddb :=0;_gddb < _dad .Height ;_gddb ++{for _bce :=0;_bce < _dad .RowStride ;_bce ++{_gafd :=_dad .Data [_gddb *_dad .RowStride +_bce ];if _bce !=_dad .RowStride -1{_gea :=_fgea .WriteByte (_gafd );if _gea !=nil {return nil ,_b .Wrap (_gea ,_fdgd ,"");
};continue ;};for _acd :=uint (0);_acd < _gdg ;_acd ++{_eadf :=_fgea .WriteBit (int (_gafd >>(7-_acd )&0x01));if _eadf !=nil {return nil ,_b .Wrap (_eadf ,_fdgd ,"");};};};};return _babba ,nil ;};func _aabe (_cbd ,_cab *Bitmap ,_decgf *Selection )(*Bitmap ,error ){const _bgef ="c\u006c\u006f\u0073\u0065\u0042\u0069\u0074\u006d\u0061\u0070";
var _gcaf error ;if _cbd ,_gcaf =_fgda (_cbd ,_cab ,_decgf );_gcaf !=nil {return nil ,_gcaf ;};_bfdd ,_gcaf :=_fagef (nil ,_cab ,_decgf );if _gcaf !=nil {return nil ,_b .Wrap (_gcaf ,_bgef ,"");};if _ ,_gcaf =_ggeb (_cbd ,_bfdd ,_decgf );_gcaf !=nil {return nil ,_b .Wrap (_gcaf ,_bgef ,"");
};return _cbd ,nil ;};func (_dfc *Bitmaps )AddBox (box *_ff .Rectangle ){_dfc .Boxes =append (_dfc .Boxes ,box )};type byWidth Bitmaps ;func (_gecd *Bitmap )centroid (_aegf ,_accb []int )(Point ,error ){_dbfg :=Point {};_gecd .setPadBits (0);if len (_aegf )==0{_aegf =_ced ();
};if len (_accb )==0{_accb =_eadbf ();};var _gfeg ,_faad ,_cfaa ,_dcag ,_gefe ,_fcbe int ;var _geec byte ;for _gefe =0;_gefe < _gecd .Height ;_gefe ++{_gbfd :=_gecd .RowStride *_gefe ;_dcag =0;for _fcbe =0;_fcbe < _gecd .RowStride ;_fcbe ++{_geec =_gecd .Data [_gbfd +_fcbe ];
if _geec !=0{_dcag +=_accb [_geec ];_gfeg +=_aegf [_geec ]+_fcbe *8*_accb [_geec ];};};_cfaa +=_dcag ;_faad +=_dcag *_gefe ;};if _cfaa !=0{_dbfg .X =float32 (_gfeg )/float32 (_cfaa );_dbfg .Y =float32 (_faad )/float32 (_cfaa );};return _dbfg ,nil ;};func TstFrameBitmapData ()[]byte {return _fcfc .Data };
func (_ggggd *Bitmaps )String ()string {_gdef :=_a .Builder {};for _ ,_dabe :=range _ggggd .Values {_gdef .WriteString (_dabe .String ());_gdef .WriteRune ('\n');};return _gdef .String ();};var (_bfed =_eg ();_edgg =_dgg ();_gbfa =_ffa (););func _bfg (_gga ,_fbdd *Bitmap ,_cagc int ,_ggfg []byte ,_bgc int )(_agd error ){const _agag ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0034";
var (_bcg ,_ebea ,_eae ,_babd ,_aagb ,_fgf ,_feg ,_fc int ;_ceg ,_bff uint32 ;_dagf ,_cebd byte ;_ebc uint16 ;);_dfe :=make ([]byte ,4);_bccc :=make ([]byte ,4);for _eae =0;_eae < _gga .Height -1;_eae ,_babd =_eae +2,_babd +1{_bcg =_eae *_gga .RowStride ;
_ebea =_babd *_fbdd .RowStride ;for _aagb ,_fgf =0,0;_aagb < _bgc ;_aagb ,_fgf =_aagb +4,_fgf +1{for _feg =0;_feg < 4;_feg ++{_fc =_bcg +_aagb +_feg ;if _fc <=len (_gga .Data )-1&&_fc < _bcg +_gga .RowStride {_dfe [_feg ]=_gga .Data [_fc ];}else {_dfe [_feg ]=0x00;
};_fc =_bcg +_gga .RowStride +_aagb +_feg ;if _fc <=len (_gga .Data )-1&&_fc < _bcg +(2*_gga .RowStride ){_bccc [_feg ]=_gga .Data [_fc ];}else {_bccc [_feg ]=0x00;};};_ceg =_de .BigEndian .Uint32 (_dfe );_bff =_de .BigEndian .Uint32 (_bccc );_bff &=_ceg ;
_bff &=_bff <<1;_bff &=0xaaaaaaaa;_ceg =_bff |(_bff <<7);_dagf =byte (_ceg >>24);_cebd =byte ((_ceg >>8)&0xff);_fc =_ebea +_fgf ;if _fc +1==len (_fbdd .Data )-1||_fc +1>=_ebea +_fbdd .RowStride {_fbdd .Data [_fc ]=_ggfg [_dagf ];if _agd =_fbdd .SetByte (_fc ,_ggfg [_dagf ]);
_agd !=nil {return _b .Wrapf (_agd ,_agag ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_fc );};}else {_ebc =(uint16 (_ggfg [_dagf ])<<8)|uint16 (_ggfg [_cebd ]);if _agd =_fbdd .setTwoBytes (_fc ,_ebc );_agd !=nil {return _b .Wrapf (_agd ,_agag ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_fc );
};_fgf ++;};};};return nil ;};type byHeight Bitmaps ;func (_ebd *Bitmap )addBorderGeneral (_efdf ,_eaa ,_eeb ,_affa int ,_agea int )(*Bitmap ,error ){const _adca ="\u0061\u0064d\u0042\u006f\u0072d\u0065\u0072\u0047\u0065\u006e\u0065\u0072\u0061\u006c";
if _efdf < 0||_eaa < 0||_eeb < 0||_affa < 0{return nil ,_b .Error (_adca ,"n\u0065\u0067\u0061\u0074iv\u0065 \u0062\u006f\u0072\u0064\u0065r\u0020\u0061\u0064\u0064\u0065\u0064");};_gfa ,_dgff :=_ebd .Width ,_ebd .Height ;_cecc :=_gfa +_efdf +_eaa ;_dacga :=_dgff +_eeb +_affa ;
_ddg :=New (_cecc ,_dacga );_ddg .Color =_ebd .Color ;_cfc :=PixClr ;if _agea > 0{_cfc =PixSet ;};_dec :=_ddg .RasterOperation (0,0,_efdf ,_dacga ,_cfc ,nil ,0,0);if _dec !=nil {return nil ,_b .Wrap (_dec ,_adca ,"\u006c\u0065\u0066\u0074");};_dec =_ddg .RasterOperation (_cecc -_eaa ,0,_eaa ,_dacga ,_cfc ,nil ,0,0);
if _dec !=nil {return nil ,_b .Wrap (_dec ,_adca ,"\u0072\u0069\u0067h\u0074");};_dec =_ddg .RasterOperation (0,0,_cecc ,_eeb ,_cfc ,nil ,0,0);if _dec !=nil {return nil ,_b .Wrap (_dec ,_adca ,"\u0074\u006f\u0070");};_dec =_ddg .RasterOperation (0,_dacga -_affa ,_cecc ,_affa ,_cfc ,nil ,0,0);
if _dec !=nil {return nil ,_b .Wrap (_dec ,_adca ,"\u0062\u006f\u0074\u0074\u006f\u006d");};_dec =_ddg .RasterOperation (_efdf ,_eeb ,_gfa ,_dgff ,PixSrc ,_ebd ,0,0);if _dec !=nil {return nil ,_b .Wrap (_dec ,_adca ,"\u0063\u006f\u0070\u0079");};return _ddg ,nil ;
};func (_ffbg *Bitmaps )makeSizeIndicator (_gbbe ,_gbcbe int ,_gead LocationFilter ,_bgaf SizeComparison )(_decge *_d .NumSlice ,_deece error ){const _bebf ="\u0042i\u0074\u006d\u0061\u0070s\u002e\u006d\u0061\u006b\u0065S\u0069z\u0065I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";
if _ffbg ==nil {return nil ,_b .Error (_bebf ,"\u0062\u0069\u0074ma\u0070\u0073\u0020\u0027\u0062\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};switch _gead {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_b .Errorf (_bebf ,"\u0070\u0072\u006f\u0076\u0069d\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u006fc\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",_gead );
};switch _bgaf {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE ,SizeSelectIfEQ :default:return nil ,_b .Errorf (_bebf ,"\u0069\u006e\u0076\u0061li\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025d\u0027",_bgaf );
};_decge =&_d .NumSlice {};var (_ededg ,_caea ,_cdffd int ;_gabb *Bitmap ;);for _ ,_gabb =range _ffbg .Values {_ededg =0;_caea ,_cdffd =_gabb .Width ,_gabb .Height ;switch _gead {case LocSelectWidth :if (_bgaf ==SizeSelectIfLT &&_caea < _gbbe )||(_bgaf ==SizeSelectIfGT &&_caea > _gbbe )||(_bgaf ==SizeSelectIfLTE &&_caea <=_gbbe )||(_bgaf ==SizeSelectIfGTE &&_caea >=_gbbe )||(_bgaf ==SizeSelectIfEQ &&_caea ==_gbbe ){_ededg =1;
};case LocSelectHeight :if (_bgaf ==SizeSelectIfLT &&_cdffd < _gbcbe )||(_bgaf ==SizeSelectIfGT &&_cdffd > _gbcbe )||(_bgaf ==SizeSelectIfLTE &&_cdffd <=_gbcbe )||(_bgaf ==SizeSelectIfGTE &&_cdffd >=_gbcbe )||(_bgaf ==SizeSelectIfEQ &&_cdffd ==_gbcbe ){_ededg =1;
};case LocSelectIfEither :if (_bgaf ==SizeSelectIfLT &&(_caea < _gbbe ||_cdffd < _gbcbe ))||(_bgaf ==SizeSelectIfGT &&(_caea > _gbbe ||_cdffd > _gbcbe ))||(_bgaf ==SizeSelectIfLTE &&(_caea <=_gbbe ||_cdffd <=_gbcbe ))||(_bgaf ==SizeSelectIfGTE &&(_caea >=_gbbe ||_cdffd >=_gbcbe ))||(_bgaf ==SizeSelectIfEQ &&(_caea ==_gbbe ||_cdffd ==_gbcbe )){_ededg =1;
};case LocSelectIfBoth :if (_bgaf ==SizeSelectIfLT &&(_caea < _gbbe &&_cdffd < _gbcbe ))||(_bgaf ==SizeSelectIfGT &&(_caea > _gbbe &&_cdffd > _gbcbe ))||(_bgaf ==SizeSelectIfLTE &&(_caea <=_gbbe &&_cdffd <=_gbcbe ))||(_bgaf ==SizeSelectIfGTE &&(_caea >=_gbbe &&_cdffd >=_gbcbe ))||(_bgaf ==SizeSelectIfEQ &&(_caea ==_gbbe &&_cdffd ==_gbcbe )){_ededg =1;
};};_decge .AddInt (_ededg );};return _decge ,nil ;};type SizeSelection int ;func _acfa (_aaab ,_bbge *Bitmap ,_bfge ,_ggdd ,_gee ,_gba ,_abff ,_gdc ,_dbbc ,_cagbb int ,_dcgg CombinationOperator )error {var _abb int ;_abcf :=func (){_abb ++;_gee +=_bbge .RowStride ;
_gba +=_aaab .RowStride ;_abff +=_aaab .RowStride };for _abb =_bfge ;_abb < _ggdd ;_abcf (){var _ggg uint16 ;_acgg :=_gee ;for _cdaf :=_gba ;_cdaf <=_abff ;_cdaf ++{_dffa ,_dadb :=_bbge .GetByte (_acgg );if _dadb !=nil {return _dadb ;};_dfb ,_dadb :=_aaab .GetByte (_cdaf );
if _dadb !=nil {return _dadb ;};_ggg =(_ggg |uint16 (_dfb ))<<uint (_cagbb );_dfb =byte (_ggg >>8);if _cdaf ==_abff {_dfb =_cge (uint (_gdc ),_dfb );};if _dadb =_bbge .SetByte (_acgg ,_bbbe (_dffa ,_dfb ,_dcgg ));_dadb !=nil {return _dadb ;};_acgg ++;_ggg <<=uint (_dbbc );
};};return nil ;};func (_faefd *byWidth )Swap (i ,j int ){_faefd .Values [i ],_faefd .Values [j ]=_faefd .Values [j ],_faefd .Values [i ];if _faefd .Boxes !=nil {_faefd .Boxes [i ],_faefd .Boxes [j ]=_faefd .Boxes [j ],_faefd .Boxes [i ];};};func (_bae *Bitmaps )WidthSorter ()func (_fadeb ,_abcfg int )bool {return func (_ebac ,_cdeab int )bool {return _bae .Values [_ebac ].Width < _bae .Values [_cdeab ].Width };
};type Point struct{X ,Y float32 ;};func TstWSymbol (t *_bc .T ,scale ...int )*Bitmap {_dgabf ,_bedb :=NewWithData (5,5,[]byte {0x88,0x88,0xA8,0xD8,0x88});_ba .NoError (t ,_bedb );return TstGetScaledSymbol (t ,_dgabf ,scale ...);};func (_fdfa *Bitmap )GetBitOffset (x int )int {return x &0x07};
func (_bbdf *Bitmap )setEightPartlyBytes (_bfca ,_agcf int ,_bggbe uint64 )(_bbae error ){var (_fffc byte ;_aeac int ;);const _bfdf ="\u0073\u0065\u0074\u0045ig\u0068\u0074\u0050\u0061\u0072\u0074\u006c\u0079\u0042\u0079\u0074\u0065\u0073";for _eac :=1;
_eac <=_agcf ;_eac ++{_aeac =64-_eac *8;_fffc =byte (_bggbe >>uint (_aeac )&0xff);_aa .Log .Trace ("\u0074\u0065\u006d\u0070\u003a\u0020\u0025\u0030\u0038\u0062\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a %\u0064,\u0020\u0069\u0064\u0078\u003a\u0020\u0025\u0064\u002c\u0020\u0066\u0075l\u006c\u0042\u0079\u0074\u0065\u0073\u004e\u0075\u006d\u0062\u0065\u0072\u003a\u0020\u0025\u0064\u002c \u0073\u0068\u0069\u0066\u0074\u003a\u0020\u0025\u0064",_fffc ,_bfca ,_bfca +_eac -1,_agcf ,_aeac );
if _bbae =_bbdf .SetByte (_bfca +_eac -1,_fffc );_bbae !=nil {return _b .Wrap (_bbae ,_bfdf ,"\u0066\u0075\u006c\u006c\u0042\u0079\u0074\u0065");};};_ccgd :=_bbdf .RowStride *8-_bbdf .Width ;if _ccgd ==0{return nil ;};_aeac -=8;_fffc =byte (_bggbe >>uint (_aeac )&0xff)<<uint (_ccgd );
if _bbae =_bbdf .SetByte (_bfca +_agcf ,_fffc );_bbae !=nil {return _b .Wrap (_bbae ,_bfdf ,"\u0070\u0061\u0064\u0064\u0065\u0064");};return nil ;};func (_cdgd *byHeight )Len ()int {return len (_cdgd .Values )};func (_bacc *Bitmap )nextOnPixel (_afeb ,_bdb int )(_edd _ff .Point ,_dbf bool ,_beba error ){const _dcad ="n\u0065\u0078\u0074\u004f\u006e\u0050\u0069\u0078\u0065\u006c";
_edd ,_dbf ,_beba =_bacc .nextOnPixelLow (_bacc .Width ,_bacc .Height ,_bacc .RowStride ,_afeb ,_bdb );if _beba !=nil {return _edd ,false ,_b .Wrap (_beba ,_dcad ,"");};return _edd ,_dbf ,nil ;};type Points []Point ;func (_adae *Bitmaps )GetBitmap (i int )(*Bitmap ,error ){const _eaade ="\u0047e\u0074\u0042\u0069\u0074\u006d\u0061p";
if _adae ==nil {return nil ,_b .Error (_eaade ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0042\u0069\u0074ma\u0070\u0073");};if i > len (_adae .Values )-1{return nil ,_b .Errorf (_eaade ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _adae .Values [i ],nil ;};func Dilate (d *Bitmap ,s *Bitmap ,sel *Selection )(*Bitmap ,error ){return _fagef (d ,s ,sel )};func (_gabf *Boxes )selectWithIndicator (_gfc *_d .NumSlice )(_bgbg *Boxes ,_gecg error ){const _abec ="\u0042o\u0078\u0065\u0073\u002es\u0065\u006c\u0065\u0063\u0074W\u0069t\u0068I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";
if _gabf ==nil {return nil ,_b .Error (_abec ,"b\u006f\u0078\u0065\u0073 '\u0062'\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064");};if _gfc ==nil {return nil ,_b .Error (_abec ,"\u0027\u006ea\u0027\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if len (*_gfc )!=len (*_gabf ){return nil ,_b .Error (_abec ,"\u0062\u006f\u0078\u0065\u0073\u0020\u0027\u0062\u0027\u0020\u0068\u0061\u0073\u0020\u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006e\u0074\u0020s\u0069\u007a\u0065\u0020\u0074h\u0061\u006e \u0027\u006e\u0061\u0027");
};var _gagd ,_fddc int ;for _bcfb :=0;_bcfb < len (*_gfc );_bcfb ++{if _gagd ,_gecg =_gfc .GetInt (_bcfb );_gecg !=nil {return nil ,_b .Wrap (_gecg ,_abec ,"\u0063\u0068\u0065\u0063\u006b\u0069\u006e\u0067\u0020c\u006f\u0075\u006e\u0074");};if _gagd ==1{_fddc ++;
};};if _fddc ==len (*_gabf ){return _gabf ,nil ;};_ffb :=Boxes {};for _eadg :=0;_eadg < len (*_gfc );_eadg ++{_gagd =int ((*_gfc )[_eadg ]);if _gagd ==0{continue ;};_ffb =append (_ffb ,(*_gabf )[_eadg ]);};_bgbg =&_ffb ;return _bgbg ,nil ;};func _gf (_gc ,_df *Bitmap )(_be error ){const _cde ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0038";
_bgg :=_df .RowStride ;_ea :=_gc .RowStride ;var _ac ,_ec ,_fe ,_edb ,_ce int ;for _fe =0;_fe < _df .Height ;_fe ++{_ac =_fe *_bgg ;_ec =8*_fe *_ea ;for _edb =0;_edb < _bgg ;_edb ++{if _be =_gc .setEightBytes (_ec +_edb *8,_gbfa [_df .Data [_ac +_edb ]]);
_be !=nil {return _b .Wrap (_be ,_cde ,"");};};for _ce =1;_ce < 8;_ce ++{for _edb =0;_edb < _ea ;_edb ++{if _be =_gc .SetByte (_ec +_ce *_ea +_edb ,_gc .Data [_ec +_edb ]);_be !=nil {return _b .Wrap (_be ,_cde ,"");};};};};return nil ;};type Boxes []*_ff .Rectangle ;
func (_afg *Bitmap )GetPixel (x ,y int )bool {_bfbg :=_afg .GetByteIndex (x ,y );_eagg :=_afg .GetBitOffset (x );_ebg :=uint (7-_eagg );if _bfbg > len (_afg .Data )-1{_aa .Log .Debug ("\u0054\u0072\u0079\u0069\u006e\u0067\u0020\u0074\u006f\u0020\u0067\u0065\u0074\u0020\u0070\u0069\u0078\u0065\u006c\u0020o\u0075\u0074\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0064\u0061\u0074\u0061\u0020\u0072\u0061\u006e\u0067\u0065\u002e \u0078\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0079\u003a\u0027\u0025\u0064'\u002c\u0020\u0062m\u003a\u0020\u0027\u0025\u0073\u0027",x ,y ,_afg );
return false ;};if (_afg .Data [_bfbg ]>>_ebg )&0x01>=1{return true ;};return false ;};const (ComponentConn Component =iota ;ComponentCharacters ;ComponentWords ;);func (_cecd *Bitmap )AddBorder (borderSize ,val int )(*Bitmap ,error ){if borderSize ==0{return _cecd .Copy (),nil ;
};_dcd ,_gbdfc :=_cecd .addBorderGeneral (borderSize ,borderSize ,borderSize ,borderSize ,val );if _gbdfc !=nil {return nil ,_b .Wrap (_gbdfc ,"\u0041d\u0064\u0042\u006f\u0072\u0064\u0065r","");};return _dcd ,nil ;};const (MopDilation MorphOperation =iota ;
MopErosion ;MopOpening ;MopClosing ;MopRankBinaryReduction ;MopReplicativeBinaryExpansion ;MopAddBorder ;);func (_age *Bitmap )CountPixels ()int {return _age .countPixels ()};func _aac (_cdc ,_babce int )int {if _cdc < _babce {return _cdc ;};return _babce ;
};func _gbb (_cea ,_fdb *Bitmap ,_dga int ,_ffc []byte ,_gaf int )(_efd error ){const _gfb ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0033";var (_ggf ,_eea ,_dcgc ,_cce ,_dgae ,_egc ,_dedc ,_ge int ;
_feb ,_gca ,_eag ,_cggd uint32 ;_ccbe ,_egce byte ;_aga uint16 ;);_ebe :=make ([]byte ,4);_aag :=make ([]byte ,4);for _dcgc =0;_dcgc < _cea .Height -1;_dcgc ,_cce =_dcgc +2,_cce +1{_ggf =_dcgc *_cea .RowStride ;_eea =_cce *_fdb .RowStride ;for _dgae ,_egc =0,0;
_dgae < _gaf ;_dgae ,_egc =_dgae +4,_egc +1{for _dedc =0;_dedc < 4;_dedc ++{_ge =_ggf +_dgae +_dedc ;if _ge <=len (_cea .Data )-1&&_ge < _ggf +_cea .RowStride {_ebe [_dedc ]=_cea .Data [_ge ];}else {_ebe [_dedc ]=0x00;};_ge =_ggf +_cea .RowStride +_dgae +_dedc ;
if _ge <=len (_cea .Data )-1&&_ge < _ggf +(2*_cea .RowStride ){_aag [_dedc ]=_cea .Data [_ge ];}else {_aag [_dedc ]=0x00;};};_feb =_de .BigEndian .Uint32 (_ebe );_gca =_de .BigEndian .Uint32 (_aag );_eag =_feb &_gca ;_eag |=_eag <<1;_cggd =_feb |_gca ;
_cggd &=_cggd <<1;_gca =_eag &_cggd ;_gca &=0xaaaaaaaa;_feb =_gca |(_gca <<7);_ccbe =byte (_feb >>24);_egce =byte ((_feb >>8)&0xff);_ge =_eea +_egc ;if _ge +1==len (_fdb .Data )-1||_ge +1>=_eea +_fdb .RowStride {if _efd =_fdb .SetByte (_ge ,_ffc [_ccbe ]);
_efd !=nil {return _b .Wrapf (_efd ,_gfb ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_ge );};}else {_aga =(uint16 (_ffc [_ccbe ])<<8)|uint16 (_ffc [_egce ]);if _efd =_fdb .setTwoBytes (_ge ,_aga );_efd !=nil {return _b .Wrapf (_efd ,_gfb ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_ge );
};_egc ++;};};};return nil ;};func (_gbe *Bitmap )And (s *Bitmap )(_dfg *Bitmap ,_gbbf error ){const _ffdb ="\u0042\u0069\u0074\u006d\u0061\u0070\u002e\u0041\u006e\u0064";if _gbe ==nil {return nil ,_b .Error (_ffdb ,"\u0027b\u0069t\u006d\u0061\u0070\u0020\u0027b\u0027\u0020i\u0073\u0020\u006e\u0069\u006c");
};if s ==nil {return nil ,_b .Error (_ffdb ,"\u0062\u0069\u0074\u006d\u0061\u0070\u0020\u0027\u0073\u0027\u0020\u0069s\u0020\u006e\u0069\u006c");};if !_gbe .SizesEqual (s ){_aa .Log .Debug ("\u0025\u0073\u0020-\u0020\u0042\u0069\u0074\u006d\u0061\u0070\u0020\u0027\u0073\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0073\u0069\u007a\u0065 \u0077\u0069\u0074\u0068\u0020\u0027\u0062\u0027",_ffdb );
};if _dfg ,_gbbf =_cagf (_dfg ,_gbe );_gbbf !=nil {return nil ,_b .Wrap (_gbbf ,_ffdb ,"\u0063\u0061\u006e't\u0020\u0063\u0072\u0065\u0061\u0074\u0065\u0020\u0027\u0064\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _gbbf =_dfg .RasterOperation (0,0,_dfg .Width ,_dfg .Height ,PixSrcAndDst ,s ,0,0);
_gbbf !=nil {return nil ,_b .Wrap (_gbbf ,_ffdb ,"");};return _dfg ,nil ;};func _baf (_bbe ,_bbad int )*Bitmap {return &Bitmap {Width :_bbe ,Height :_bbad ,RowStride :(_bbe +7)>>3};};func (_gfgbg *byHeight )Less (i ,j int )bool {return _gfgbg .Values [i ].Height < _gfgbg .Values [j ].Height };
func _cbfgc (_abdf *Bitmap ,_afgb ,_geg ,_fagc ,_afgdc int ,_dfbb RasterOperator ,_cgddb *Bitmap ,_afdb ,_afcg int )error {var (_fbdg bool ;_dagfa bool ;_fbddb int ;_begae int ;_dcbg int ;_dabfc bool ;_dfbg byte ;_cegcf int ;_ecadc int ;_ddfc int ;_addb ,_fadee int ;
);_eee :=8-(_afgb &7);_cgcc :=_gceg [_eee ];_acdf :=_abdf .RowStride *_geg +(_afgb >>3);_gdbad :=_cgddb .RowStride *_afcg +(_afdb >>3);if _fagc < _eee {_fbdg =true ;_cgcc &=_bffg [8-_eee +_fagc ];};if !_fbdg {_fbddb =(_fagc -_eee )>>3;if _fbddb > 0{_dagfa =true ;
_begae =_acdf +1;_dcbg =_gdbad +1;};};_cegcf =(_afgb +_fagc )&7;if !(_fbdg ||_cegcf ==0){_dabfc =true ;_dfbg =_bffg [_cegcf ];_ecadc =_acdf +1+_fbddb ;_ddfc =_gdbad +1+_fbddb ;};switch _dfbb {case PixSrc :for _addb =0;_addb < _afgdc ;_addb ++{_abdf .Data [_acdf ]=_bbbaf (_abdf .Data [_acdf ],_cgddb .Data [_gdbad ],_cgcc );
_acdf +=_abdf .RowStride ;_gdbad +=_cgddb .RowStride ;};if _dagfa {for _addb =0;_addb < _afgdc ;_addb ++{for _fadee =0;_fadee < _fbddb ;_fadee ++{_abdf .Data [_begae +_fadee ]=_cgddb .Data [_dcbg +_fadee ];};_begae +=_abdf .RowStride ;_dcbg +=_cgddb .RowStride ;
};};if _dabfc {for _addb =0;_addb < _afgdc ;_addb ++{_abdf .Data [_ecadc ]=_bbbaf (_abdf .Data [_ecadc ],_cgddb .Data [_ddfc ],_dfbg );_ecadc +=_abdf .RowStride ;_ddfc +=_cgddb .RowStride ;};};case PixNotSrc :for _addb =0;_addb < _afgdc ;_addb ++{_abdf .Data [_acdf ]=_bbbaf (_abdf .Data [_acdf ],^_cgddb .Data [_gdbad ],_cgcc );
_acdf +=_abdf .RowStride ;_gdbad +=_cgddb .RowStride ;};if _dagfa {for _addb =0;_addb < _afgdc ;_addb ++{for _fadee =0;_fadee < _fbddb ;_fadee ++{_abdf .Data [_begae +_fadee ]=^_cgddb .Data [_dcbg +_fadee ];};_begae +=_abdf .RowStride ;_dcbg +=_cgddb .RowStride ;
};};if _dabfc {for _addb =0;_addb < _afgdc ;_addb ++{_abdf .Data [_ecadc ]=_bbbaf (_abdf .Data [_ecadc ],^_cgddb .Data [_ddfc ],_dfbg );_ecadc +=_abdf .RowStride ;_ddfc +=_cgddb .RowStride ;};};case PixSrcOrDst :for _addb =0;_addb < _afgdc ;_addb ++{_abdf .Data [_acdf ]=_bbbaf (_abdf .Data [_acdf ],_cgddb .Data [_gdbad ]|_abdf .Data [_acdf ],_cgcc );
_acdf +=_abdf .RowStride ;_gdbad +=_cgddb .RowStride ;};if _dagfa {for _addb =0;_addb < _afgdc ;_addb ++{for _fadee =0;_fadee < _fbddb ;_fadee ++{_abdf .Data [_begae +_fadee ]|=_cgddb .Data [_dcbg +_fadee ];};_begae +=_abdf .RowStride ;_dcbg +=_cgddb .RowStride ;
};};if _dabfc {for _addb =0;_addb < _afgdc ;_addb ++{_abdf .Data [_ecadc ]=_bbbaf (_abdf .Data [_ecadc ],_cgddb .Data [_ddfc ]|_abdf .Data [_ecadc ],_dfbg );_ecadc +=_abdf .RowStride ;_ddfc +=_cgddb .RowStride ;};};case PixSrcAndDst :for _addb =0;_addb < _afgdc ;
_addb ++{_abdf .Data [_acdf ]=_bbbaf (_abdf .Data [_acdf ],_cgddb .Data [_gdbad ]&_abdf .Data [_acdf ],_cgcc );_acdf +=_abdf .RowStride ;_gdbad +=_cgddb .RowStride ;};if _dagfa {for _addb =0;_addb < _afgdc ;_addb ++{for _fadee =0;_fadee < _fbddb ;_fadee ++{_abdf .Data [_begae +_fadee ]&=_cgddb .Data [_dcbg +_fadee ];
};_begae +=_abdf .RowStride ;_dcbg +=_cgddb .RowStride ;};};if _dabfc {for _addb =0;_addb < _afgdc ;_addb ++{_abdf .Data [_ecadc ]=_bbbaf (_abdf .Data [_ecadc ],_cgddb .Data [_ddfc ]&_abdf .Data [_ecadc ],_dfbg );_ecadc +=_abdf .RowStride ;_ddfc +=_cgddb .RowStride ;
};};case PixSrcXorDst :for _addb =0;_addb < _afgdc ;_addb ++{_abdf .Data [_acdf ]=_bbbaf (_abdf .Data [_acdf ],_cgddb .Data [_gdbad ]^_abdf .Data [_acdf ],_cgcc );_acdf +=_abdf .RowStride ;_gdbad +=_cgddb .RowStride ;};if _dagfa {for _addb =0;_addb < _afgdc ;
_addb ++{for _fadee =0;_fadee < _fbddb ;_fadee ++{_abdf .Data [_begae +_fadee ]^=_cgddb .Data [_dcbg +_fadee ];};_begae +=_abdf .RowStride ;_dcbg +=_cgddb .RowStride ;};};if _dabfc {for _addb =0;_addb < _afgdc ;_addb ++{_abdf .Data [_ecadc ]=_bbbaf (_abdf .Data [_ecadc ],_cgddb .Data [_ddfc ]^_abdf .Data [_ecadc ],_dfbg );
_ecadc +=_abdf .RowStride ;_ddfc +=_cgddb .RowStride ;};};case PixNotSrcOrDst :for _addb =0;_addb < _afgdc ;_addb ++{_abdf .Data [_acdf ]=_bbbaf (_abdf .Data [_acdf ],^(_cgddb .Data [_gdbad ])|_abdf .Data [_acdf ],_cgcc );_acdf +=_abdf .RowStride ;_gdbad +=_cgddb .RowStride ;
};if _dagfa {for _addb =0;_addb < _afgdc ;_addb ++{for _fadee =0;_fadee < _fbddb ;_fadee ++{_abdf .Data [_begae +_fadee ]|=^(_cgddb .Data [_dcbg +_fadee ]);};_begae +=_abdf .RowStride ;_dcbg +=_cgddb .RowStride ;};};if _dabfc {for _addb =0;_addb < _afgdc ;
_addb ++{_abdf .Data [_ecadc ]=_bbbaf (_abdf .Data [_ecadc ],^(_cgddb .Data [_ddfc ])|_abdf .Data [_ecadc ],_dfbg );_ecadc +=_abdf .RowStride ;_ddfc +=_cgddb .RowStride ;};};case PixNotSrcAndDst :for _addb =0;_addb < _afgdc ;_addb ++{_abdf .Data [_acdf ]=_bbbaf (_abdf .Data [_acdf ],^(_cgddb .Data [_gdbad ])&_abdf .Data [_acdf ],_cgcc );
_acdf +=_abdf .RowStride ;_gdbad +=_cgddb .RowStride ;};if _dagfa {for _addb =0;_addb < _afgdc ;_addb ++{for _fadee =0;_fadee < _fbddb ;_fadee ++{_abdf .Data [_begae +_fadee ]&=^_cgddb .Data [_dcbg +_fadee ];};_begae +=_abdf .RowStride ;_dcbg +=_cgddb .RowStride ;
};};if _dabfc {for _addb =0;_addb < _afgdc ;_addb ++{_abdf .Data [_ecadc ]=_bbbaf (_abdf .Data [_ecadc ],^(_cgddb .Data [_ddfc ])&_abdf .Data [_ecadc ],_dfbg );_ecadc +=_abdf .RowStride ;_ddfc +=_cgddb .RowStride ;};};case PixSrcOrNotDst :for _addb =0;
_addb < _afgdc ;_addb ++{_abdf .Data [_acdf ]=_bbbaf (_abdf .Data [_acdf ],_cgddb .Data [_gdbad ]|^(_abdf .Data [_acdf ]),_cgcc );_acdf +=_abdf .RowStride ;_gdbad +=_cgddb .RowStride ;};if _dagfa {for _addb =0;_addb < _afgdc ;_addb ++{for _fadee =0;_fadee < _fbddb ;
_fadee ++{_abdf .Data [_begae +_fadee ]=_cgddb .Data [_dcbg +_fadee ]|^(_abdf .Data [_begae +_fadee ]);};_begae +=_abdf .RowStride ;_dcbg +=_cgddb .RowStride ;};};if _dabfc {for _addb =0;_addb < _afgdc ;_addb ++{_abdf .Data [_ecadc ]=_bbbaf (_abdf .Data [_ecadc ],_cgddb .Data [_ddfc ]|^(_abdf .Data [_ecadc ]),_dfbg );
_ecadc +=_abdf .RowStride ;_ddfc +=_cgddb .RowStride ;};};case PixSrcAndNotDst :for _addb =0;_addb < _afgdc ;_addb ++{_abdf .Data [_acdf ]=_bbbaf (_abdf .Data [_acdf ],_cgddb .Data [_gdbad ]&^(_abdf .Data [_acdf ]),_cgcc );_acdf +=_abdf .RowStride ;_gdbad +=_cgddb .RowStride ;
};if _dagfa {for _addb =0;_addb < _afgdc ;_addb ++{for _fadee =0;_fadee < _fbddb ;_fadee ++{_abdf .Data [_begae +_fadee ]=_cgddb .Data [_dcbg +_fadee ]&^(_abdf .Data [_begae +_fadee ]);};_begae +=_abdf .RowStride ;_dcbg +=_cgddb .RowStride ;};};if _dabfc {for _addb =0;
_addb < _afgdc ;_addb ++{_abdf .Data [_ecadc ]=_bbbaf (_abdf .Data [_ecadc ],_cgddb .Data [_ddfc ]&^(_abdf .Data [_ecadc ]),_dfbg );_ecadc +=_abdf .RowStride ;_ddfc +=_cgddb .RowStride ;};};case PixNotPixSrcOrDst :for _addb =0;_addb < _afgdc ;_addb ++{_abdf .Data [_acdf ]=_bbbaf (_abdf .Data [_acdf ],^(_cgddb .Data [_gdbad ]|_abdf .Data [_acdf ]),_cgcc );
_acdf +=_abdf .RowStride ;_gdbad +=_cgddb .RowStride ;};if _dagfa {for _addb =0;_addb < _afgdc ;_addb ++{for _fadee =0;_fadee < _fbddb ;_fadee ++{_abdf .Data [_begae +_fadee ]=^(_cgddb .Data [_dcbg +_fadee ]|_abdf .Data [_begae +_fadee ]);};_begae +=_abdf .RowStride ;
_dcbg +=_cgddb .RowStride ;};};if _dabfc {for _addb =0;_addb < _afgdc ;_addb ++{_abdf .Data [_ecadc ]=_bbbaf (_abdf .Data [_ecadc ],^(_cgddb .Data [_ddfc ]|_abdf .Data [_ecadc ]),_dfbg );_ecadc +=_abdf .RowStride ;_ddfc +=_cgddb .RowStride ;};};case PixNotPixSrcAndDst :for _addb =0;
_addb < _afgdc ;_addb ++{_abdf .Data [_acdf ]=_bbbaf (_abdf .Data [_acdf ],^(_cgddb .Data [_gdbad ]&_abdf .Data [_acdf ]),_cgcc );_acdf +=_abdf .RowStride ;_gdbad +=_cgddb .RowStride ;};if _dagfa {for _addb =0;_addb < _afgdc ;_addb ++{for _fadee =0;_fadee < _fbddb ;
_fadee ++{_abdf .Data [_begae +_fadee ]=^(_cgddb .Data [_dcbg +_fadee ]&_abdf .Data [_begae +_fadee ]);};_begae +=_abdf .RowStride ;_dcbg +=_cgddb .RowStride ;};};if _dabfc {for _addb =0;_addb < _afgdc ;_addb ++{_abdf .Data [_ecadc ]=_bbbaf (_abdf .Data [_ecadc ],^(_cgddb .Data [_ddfc ]&_abdf .Data [_ecadc ]),_dfbg );
_ecadc +=_abdf .RowStride ;_ddfc +=_cgddb .RowStride ;};};case PixNotPixSrcXorDst :for _addb =0;_addb < _afgdc ;_addb ++{_abdf .Data [_acdf ]=_bbbaf (_abdf .Data [_acdf ],^(_cgddb .Data [_gdbad ]^_abdf .Data [_acdf ]),_cgcc );_acdf +=_abdf .RowStride ;
_gdbad +=_cgddb .RowStride ;};if _dagfa {for _addb =0;_addb < _afgdc ;_addb ++{for _fadee =0;_fadee < _fbddb ;_fadee ++{_abdf .Data [_begae +_fadee ]=^(_cgddb .Data [_dcbg +_fadee ]^_abdf .Data [_begae +_fadee ]);};_begae +=_abdf .RowStride ;_dcbg +=_cgddb .RowStride ;
};};if _dabfc {for _addb =0;_addb < _afgdc ;_addb ++{_abdf .Data [_ecadc ]=_bbbaf (_abdf .Data [_ecadc ],^(_cgddb .Data [_ddfc ]^_abdf .Data [_ecadc ]),_dfbg );_ecadc +=_abdf .RowStride ;_ddfc +=_cgddb .RowStride ;};};default:_aa .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070e\u0072\u0061\u0074o\u0072:\u0020\u0025\u0064",_dfbb );
return _b .Error ("\u0072\u0061\u0073\u0074er\u004f\u0070\u0056\u0041\u006c\u0069\u0067\u006e\u0065\u0064\u004c\u006f\u0077","\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");
};return nil ;};func (_efdaf *Bitmap )ConnComponents (bms *Bitmaps ,connectivity int )(_ffeg *Boxes ,_acca error ){const _dadgg ="B\u0069\u0074\u006d\u0061p.\u0043o\u006e\u006e\u0043\u006f\u006dp\u006f\u006e\u0065\u006e\u0074\u0073";if _efdaf ==nil {return nil ,_b .Error (_dadgg ,"\u0070r\u006f\u0076\u0069\u0064e\u0064\u0020\u0065\u006d\u0070t\u0079 \u0027b\u0027\u0020\u0062\u0069\u0074\u006d\u0061p");
};if connectivity !=4&&connectivity !=8{return nil ,_b .Error (_dadgg ,"\u0063\u006f\u006ene\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u006e\u006f\u0074\u0020\u0034\u0020\u006f\u0072\u0020\u0038");};if bms ==nil {if _ffeg ,_acca =_efdaf .connComponentsBB (connectivity );
_acca !=nil {return nil ,_b .Wrap (_acca ,_dadgg ,"");};}else {if _ffeg ,_acca =_efdaf .connComponentsBitmapsBB (bms ,connectivity );_acca !=nil {return nil ,_b .Wrap (_acca ,_dadgg ,"");};};return _ffeg ,nil ;};func _efgb (_dcga ,_abfa ,_gfba *Bitmap )(*Bitmap ,error ){const _cfb ="\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0078\u006f\u0072";
if _abfa ==nil {return nil ,_b .Error (_cfb ,"'\u0062\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _gfba ==nil {return nil ,_b .Error (_cfb ,"'\u0062\u0032\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _dcga ==_gfba {return nil ,_b .Error (_cfb ,"'\u0064\u0027\u0020\u003d\u003d\u0020\u0027\u0062\u0032\u0027");
};if !_abfa .SizesEqual (_gfba ){_aa .Log .Debug ("\u0025s\u0020\u002d \u0042\u0069\u0074\u006da\u0070\u0020\u0027b\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074 e\u0071\u0075\u0061l\u0020\u0073i\u007a\u0065\u0020\u0077\u0069\u0074h\u0020\u0027b\u0032\u0027",_cfb );
};var _gccb error ;if _dcga ,_gccb =_cagf (_dcga ,_abfa );_gccb !=nil {return nil ,_b .Wrap (_gccb ,_cfb ,"\u0063\u0061n\u0027\u0074\u0020c\u0072\u0065\u0061\u0074\u0065\u0020\u0027\u0064\u0027");};if _gccb =_dcga .RasterOperation (0,0,_dcga .Width ,_dcga .Height ,PixSrcXorDst ,_gfba ,0,0);
_gccb !=nil {return nil ,_b .Wrap (_gccb ,_cfb ,"");};return _dcga ,nil ;};func _gde (_eef ,_aeg *Bitmap ,_gcff int ,_dgda []byte ,_gdd int )(_ecg error ){const _fbd ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0032";
var (_gag ,_bggb ,_fea ,_dab ,_gbdf ,_eda ,_ddd ,_fed int ;_abe ,_debd ,_gge ,_cfd uint32 ;_afa ,_gbc byte ;_babc uint16 ;);_cbe :=make ([]byte ,4);_ecca :=make ([]byte ,4);for _fea =0;_fea < _eef .Height -1;_fea ,_dab =_fea +2,_dab +1{_gag =_fea *_eef .RowStride ;
_bggb =_dab *_aeg .RowStride ;for _gbdf ,_eda =0,0;_gbdf < _gdd ;_gbdf ,_eda =_gbdf +4,_eda +1{for _ddd =0;_ddd < 4;_ddd ++{_fed =_gag +_gbdf +_ddd ;if _fed <=len (_eef .Data )-1&&_fed < _gag +_eef .RowStride {_cbe [_ddd ]=_eef .Data [_fed ];}else {_cbe [_ddd ]=0x00;
};_fed =_gag +_eef .RowStride +_gbdf +_ddd ;if _fed <=len (_eef .Data )-1&&_fed < _gag +(2*_eef .RowStride ){_ecca [_ddd ]=_eef .Data [_fed ];}else {_ecca [_ddd ]=0x00;};};_abe =_de .BigEndian .Uint32 (_cbe );_debd =_de .BigEndian .Uint32 (_ecca );_gge =_abe &_debd ;
_gge |=_gge <<1;_cfd =_abe |_debd ;_cfd &=_cfd <<1;_debd =_gge |_cfd ;_debd &=0xaaaaaaaa;_abe =_debd |(_debd <<7);_afa =byte (_abe >>24);_gbc =byte ((_abe >>8)&0xff);_fed =_bggb +_eda ;if _fed +1==len (_aeg .Data )-1||_fed +1>=_bggb +_aeg .RowStride {if _ecg =_aeg .SetByte (_fed ,_dgda [_afa ]);
_ecg !=nil {return _b .Wrapf (_ecg ,_fbd ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_fed );};}else {_babc =(uint16 (_dgda [_afa ])<<8)|uint16 (_dgda [_gbc ]);if _ecg =_aeg .setTwoBytes (_fed ,_babc );_ecg !=nil {return _b .Wrapf (_ecg ,_fbd ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_fed );
};_eda ++;};};};return nil ;};func TstPSymbol (t *_bc .T )*Bitmap {t .Helper ();_afebf :=New (5,8);_ba .NoError (t ,_afebf .SetPixel (0,0,1));_ba .NoError (t ,_afebf .SetPixel (1,0,1));_ba .NoError (t ,_afebf .SetPixel (2,0,1));_ba .NoError (t ,_afebf .SetPixel (3,0,1));
_ba .NoError (t ,_afebf .SetPixel (4,1,1));_ba .NoError (t ,_afebf .SetPixel (0,1,1));_ba .NoError (t ,_afebf .SetPixel (4,2,1));_ba .NoError (t ,_afebf .SetPixel (0,2,1));_ba .NoError (t ,_afebf .SetPixel (4,3,1));_ba .NoError (t ,_afebf .SetPixel (0,3,1));
_ba .NoError (t ,_afebf .SetPixel (0,4,1));_ba .NoError (t ,_afebf .SetPixel (1,4,1));_ba .NoError (t ,_afebf .SetPixel (2,4,1));_ba .NoError (t ,_afebf .SetPixel (3,4,1));_ba .NoError (t ,_afebf .SetPixel (0,5,1));_ba .NoError (t ,_afebf .SetPixel (0,6,1));
_ba .NoError (t ,_afebf .SetPixel (0,7,1));return _afebf ;};type BitmapsArray struct{Values []*Bitmaps ;Boxes []*_ff .Rectangle ;};func TstFrameBitmap ()*Bitmap {return _fcfc .Copy ()};func _aaac (_gcea ,_afebd *Bitmap ,_ccaf ,_gcedfg int )(*Bitmap ,error ){const _adaf ="d\u0069\u006c\u0061\u0074\u0065\u0042\u0072\u0069\u0063\u006b";
if _afebd ==nil {_aa .Log .Debug ("\u0064\u0069\u006c\u0061\u0074\u0065\u0042\u0072\u0069\u0063k\u0020\u0073\u006f\u0075\u0072\u0063\u0065 \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");return nil ,_b .Error (_adaf ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");
};if _ccaf < 1||_gcedfg < 1{return nil ,_b .Error (_adaf ,"\u0068\u0053\u007a\u0069\u0065 \u0061\u006e\u0064\u0020\u0076\u0053\u0069\u007a\u0065\u0020\u0061\u0072\u0065 \u006e\u006f\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0031");
};if _ccaf ==1&&_gcedfg ==1{_aebc ,_ffba :=_cagf (_gcea ,_afebd );if _ffba !=nil {return nil ,_b .Wrap (_ffba ,_adaf ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u0026\u0026 \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _aebc ,nil ;};if _ccaf ==1||_gcedfg ==1{_geeg :=SelCreateBrick (_gcedfg ,_ccaf ,_gcedfg /2,_ccaf /2,SelHit );_ebdb ,_cfgga :=_fagef (_gcea ,_afebd ,_geeg );if _cfgga !=nil {return nil ,_b .Wrap (_cfgga ,_adaf ,"\u0068s\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _ebdb ,nil ;};_afba :=SelCreateBrick (1,_ccaf ,0,_ccaf /2,SelHit );_fgbfc :=SelCreateBrick (_gcedfg ,1,_gcedfg /2,0,SelHit );_ecfa ,_beacf :=_fagef (nil ,_afebd ,_afba );if _beacf !=nil {return nil ,_b .Wrap (_beacf ,_adaf ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};_gcea ,_beacf =_fagef (_gcea ,_ecfa ,_fgbfc );if _beacf !=nil {return nil ,_b .Wrap (_beacf ,_adaf ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};return _gcea ,nil ;};func _bbga (_cefa ,_gdbac int ,_cdgbe string )*Selection {_afcea :=&Selection {Height :_cefa ,Width :_gdbac ,Name :_cdgbe };
_afcea .Data =make ([][]SelectionValue ,_cefa );for _cged :=0;_cged < _cefa ;_cged ++{_afcea .Data [_cged ]=make ([]SelectionValue ,_gdbac );};return _afcea ;};func _ffcb (_abbg *Bitmap )(_cfdf *Bitmap ,_cef int ,_bded error ){const _fcdc ="\u0042i\u0074\u006d\u0061\u0070.\u0077\u006f\u0072\u0064\u004da\u0073k\u0042y\u0044\u0069\u006c\u0061\u0074\u0069\u006fn";
if _abbg ==nil {return nil ,0,_b .Errorf (_fcdc ,"\u0027\u0073\u0027\u0020bi\u0074\u006d\u0061\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");};var _ggff ,_feead *Bitmap ;if _ggff ,_bded =_cagf (nil ,_abbg );_bded !=nil {return nil ,0,_b .Wrap (_bded ,_fcdc ,"\u0063\u006f\u0070\u0079\u0020\u0027\u0073\u0027");
};var (_aaed [13]int ;_baag ,_accf int ;);_aeb :=12;_ecd :=_d .NewNumSlice (_aeb +1);_edff :=_d .NewNumSlice (_aeb +1);var _eegd *Boxes ;for _cdgg :=0;_cdgg <=_aeb ;_cdgg ++{if _cdgg ==0{if _feead ,_bded =_cagf (nil ,_ggff );_bded !=nil {return nil ,0,_b .Wrap (_bded ,_fcdc ,"\u0066i\u0072\u0073\u0074\u0020\u0062\u006d2");
};}else {if _feead ,_bded =_adcc (_ggff ,MorphProcess {Operation :MopDilation ,Arguments :[]int {2,1}});_bded !=nil {return nil ,0,_b .Wrap (_bded ,_fcdc ,"\u0064\u0069\u006ca\u0074\u0069\u006f\u006e\u0020\u0062\u006d\u0032");};};if _eegd ,_bded =_feead .connComponentsBB (4);
_bded !=nil {return nil ,0,_b .Wrap (_bded ,_fcdc ,"");};_aaed [_cdgg ]=len (*_eegd );_ecd .AddInt (_aaed [_cdgg ]);switch _cdgg {case 0:_baag =_aaed [0];default:_accf =_aaed [_cdgg -1]-_aaed [_cdgg ];_edff .AddInt (_accf );};_ggff =_feead ;};_ccfb :=true ;
_gffa :=2;var _addd ,_fabf int ;for _fccf :=1;_fccf < len (*_edff );_fccf ++{if _addd ,_bded =_ecd .GetInt (_fccf );_bded !=nil {return nil ,0,_b .Wrap (_bded ,_fcdc ,"\u0043\u0068\u0065\u0063ki\u006e\u0067\u0020\u0062\u0065\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0069o\u006e");
};if _ccfb &&_addd < int (0.3*float32 (_baag )){_gffa =_fccf +1;_ccfb =false ;};if _accf ,_bded =_edff .GetInt (_fccf );_bded !=nil {return nil ,0,_b .Wrap (_bded ,_fcdc ,"\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006ea\u0044\u0069\u0066\u0066");
};if _accf > _fabf {_fabf =_accf ;};};_cbad :=_abbg .XResolution ;if _cbad ==0{_cbad =150;};if _cbad > 110{_gffa ++;};if _gffa < 2{_aa .Log .Trace ("J\u0042\u0049\u0047\u0032\u0020\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0069\u0042\u0065\u0073\u0074 \u0074\u006f\u0020\u006d\u0069\u006e\u0069\u006d\u0075\u006d a\u006c\u006c\u006fw\u0061b\u006c\u0065");
_gffa =2;};_cef =_gffa +1;if _cfdf ,_bded =_dggf (nil ,_abbg ,_gffa +1,1);_bded !=nil {return nil ,0,_b .Wrap (_bded ,_fcdc ,"\u0067\u0065\u0074\u0074in\u0067\u0020\u006d\u0061\u0073\u006b\u0020\u0066\u0061\u0069\u006c\u0065\u0064");};return _cfdf ,_cef ,nil ;
};func _ffa ()(_fdd [256]uint64 ){for _bad :=0;_bad < 256;_bad ++{if _bad &0x01!=0{_fdd [_bad ]|=0xff;};if _bad &0x02!=0{_fdd [_bad ]|=0xff00;};if _bad &0x04!=0{_fdd [_bad ]|=0xff0000;};if _bad &0x08!=0{_fdd [_bad ]|=0xff000000;};if _bad &0x10!=0{_fdd [_bad ]|=0xff00000000;
};if _bad &0x20!=0{_fdd [_bad ]|=0xff0000000000;};if _bad &0x40!=0{_fdd [_bad ]|=0xff000000000000;};if _bad &0x80!=0{_fdd [_bad ]|=0xff00000000000000;};};return _fdd ;};func (_egab *ClassedPoints )Swap (i ,j int ){_egab .IntSlice [i ],_egab .IntSlice [j ]=_egab .IntSlice [j ],_egab .IntSlice [i ];
};func _aggb (_gbf *Bitmap ,_bgd *Bitmap ,_bcc int )(_gcf error ){const _ccb ="e\u0078\u0070\u0061\u006edB\u0069n\u0061\u0072\u0079\u0050\u006fw\u0065\u0072\u0032\u004c\u006f\u0077";switch _bcc {case 2:_gcf =_cf (_gbf ,_bgd );case 4:_gcf =_bfb (_gbf ,_bgd );
case 8:_gcf =_gf (_gbf ,_bgd );default:return _b .Error (_ccb ,"\u0065\u0078p\u0061\u006e\u0073\u0069o\u006e\u0020f\u0061\u0063\u0074\u006f\u0072\u0020\u006e\u006ft\u0020\u0069\u006e\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d\u0020r\u0061\u006e\u0067\u0065");
};if _gcf !=nil {_gcf =_b .Wrap (_gcf ,_ccb ,"");};return _gcf ;};func _eeba (_bbaf ,_egbg *Bitmap ,_gddc *Selection )(*Bitmap ,error ){const _eddb ="\u006f\u0070\u0065\u006e";var _defde error ;_bbaf ,_defde =_fgda (_bbaf ,_egbg ,_gddc );if _defde !=nil {return nil ,_b .Wrap (_defde ,_eddb ,"");
};_egcf ,_defde :=_ggeb (nil ,_egbg ,_gddc );if _defde !=nil {return nil ,_b .Wrap (_defde ,_eddb ,"");};_ ,_defde =_fagef (_bbaf ,_egcf ,_gddc );if _defde !=nil {return nil ,_b .Wrap (_defde ,_eddb ,"");};return _bbaf ,nil ;};func TstESymbol (t *_bc .T ,scale ...int )*Bitmap {_gafdc ,_ccbec :=NewWithData (4,5,[]byte {0xF0,0x80,0xE0,0x80,0xF0});
_ba .NoError (t ,_ccbec );return TstGetScaledSymbol (t ,_gafdc ,scale ...);};func TstTSymbol (t *_bc .T ,scale ...int )*Bitmap {_bgdcc ,_gfaag :=NewWithData (5,5,[]byte {0xF8,0x20,0x20,0x20,0x20});_ba .NoError (t ,_gfaag );return TstGetScaledSymbol (t ,_bgdcc ,scale ...);
};func (_baff *Bitmap )SizesEqual (s *Bitmap )bool {if _baff ==s {return true ;};if _baff .Width !=s .Width ||_baff .Height !=s .Height {return false ;};return true ;};func _eacf (_geacb *Bitmap ,_bfeab ,_ebbg int ,_dagcf ,_faae int ,_fcccg RasterOperator ,_fcfd *Bitmap ,_faca ,_fffb int )error {var _fafad ,_dfec ,_cgee ,_fagb int ;
if _bfeab < 0{_faca -=_bfeab ;_dagcf +=_bfeab ;_bfeab =0;};if _faca < 0{_bfeab -=_faca ;_dagcf +=_faca ;_faca =0;};_fafad =_bfeab +_dagcf -_geacb .Width ;if _fafad > 0{_dagcf -=_fafad ;};_dfec =_faca +_dagcf -_fcfd .Width ;if _dfec > 0{_dagcf -=_dfec ;
};if _ebbg < 0{_fffb -=_ebbg ;_faae +=_ebbg ;_ebbg =0;};if _fffb < 0{_ebbg -=_fffb ;_faae +=_fffb ;_fffb =0;};_cgee =_ebbg +_faae -_geacb .Height ;if _cgee > 0{_faae -=_cgee ;};_fagb =_fffb +_faae -_fcfd .Height ;if _fagb > 0{_faae -=_fagb ;};if _dagcf <=0||_faae <=0{return nil ;
};var _caab error ;switch {case _bfeab &7==0&&_faca &7==0:_caab =_fgdae (_geacb ,_bfeab ,_ebbg ,_dagcf ,_faae ,_fcccg ,_fcfd ,_faca ,_fffb );case _bfeab &7==_faca &7:_caab =_cbfgc (_geacb ,_bfeab ,_ebbg ,_dagcf ,_faae ,_fcccg ,_fcfd ,_faca ,_fffb );default:_caab =_ebegf (_geacb ,_bfeab ,_ebbg ,_dagcf ,_faae ,_fcccg ,_fcfd ,_faca ,_fffb );
};if _caab !=nil {return _b .Wrap (_caab ,"r\u0061\u0073\u0074\u0065\u0072\u004f\u0070\u004c\u006f\u0077","");};return nil ;};type Component int ;func _fega (_adcbb int )int {if _adcbb < 0{return -_adcbb ;};return _adcbb ;};func init (){const _eaggf ="\u0062\u0069\u0074\u006dap\u0073\u002e\u0069\u006e\u0069\u0074\u0069\u0061\u006c\u0069\u007a\u0061\u0074\u0069o\u006e";
_fcfc =New (50,40);var _dge error ;_fcfc ,_dge =_fcfc .AddBorder (2,1);if _dge !=nil {panic (_b .Wrap (_dge ,_eaggf ,"f\u0072\u0061\u006d\u0065\u0042\u0069\u0074\u006d\u0061\u0070"));};_bfdfb ,_dge =NewWithData (50,22,_fdgfed );if _dge !=nil {panic (_b .Wrap (_dge ,_eaggf ,"i\u006d\u0061\u0067\u0065\u0042\u0069\u0074\u006d\u0061\u0070"));
};};func _bgdf (_ggb ,_bbb *Bitmap ,_acbc int ,_bdcf []byte ,_fddg int )(_bab error ){const _ceb ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0031";var (_egd ,_ead ,_dbc ,_gdb ,_aafe ,_cae ,_beb ,_bga int ;
_fdg ,_fdca uint32 ;_egb ,_beac byte ;_dcg uint16 ;);_cad :=make ([]byte ,4);_eadb :=make ([]byte ,4);for _dbc =0;_dbc < _ggb .Height -1;_dbc ,_gdb =_dbc +2,_gdb +1{_egd =_dbc *_ggb .RowStride ;_ead =_gdb *_bbb .RowStride ;for _aafe ,_cae =0,0;_aafe < _fddg ;
_aafe ,_cae =_aafe +4,_cae +1{for _beb =0;_beb < 4;_beb ++{_bga =_egd +_aafe +_beb ;if _bga <=len (_ggb .Data )-1&&_bga < _egd +_ggb .RowStride {_cad [_beb ]=_ggb .Data [_bga ];}else {_cad [_beb ]=0x00;};_bga =_egd +_ggb .RowStride +_aafe +_beb ;if _bga <=len (_ggb .Data )-1&&_bga < _egd +(2*_ggb .RowStride ){_eadb [_beb ]=_ggb .Data [_bga ];
}else {_eadb [_beb ]=0x00;};};_fdg =_de .BigEndian .Uint32 (_cad );_fdca =_de .BigEndian .Uint32 (_eadb );_fdca |=_fdg ;_fdca |=_fdca <<1;_fdca &=0xaaaaaaaa;_fdg =_fdca |(_fdca <<7);_egb =byte (_fdg >>24);_beac =byte ((_fdg >>8)&0xff);_bga =_ead +_cae ;
if _bga +1==len (_bbb .Data )-1||_bga +1>=_ead +_bbb .RowStride {_bbb .Data [_bga ]=_bdcf [_egb ];}else {_dcg =(uint16 (_bdcf [_egb ])<<8)|uint16 (_bdcf [_beac ]);if _bab =_bbb .setTwoBytes (_bga ,_dcg );_bab !=nil {return _b .Wrapf (_bab ,_ceb ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_bga );
};_cae ++;};};};return nil ;};func _ede (_febf ,_abcd ,_cfdc *Bitmap )(*Bitmap ,error ){const _dcgaf ="\u0073\u0075\u0062\u0074\u0072\u0061\u0063\u0074";if _abcd ==nil {return nil ,_b .Error (_dcgaf ,"'\u0073\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");
};if _cfdc ==nil {return nil ,_b .Error (_dcgaf ,"'\u0073\u0032\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};var _fbg error ;switch {case _febf ==_abcd :if _fbg =_febf .RasterOperation (0,0,_abcd .Width ,_abcd .Height ,PixNotSrcAndDst ,_cfdc ,0,0);
_fbg !=nil {return nil ,_b .Wrap (_fbg ,_dcgaf ,"\u0064 \u003d\u003d\u0020\u0073\u0031");};case _febf ==_cfdc :if _fbg =_febf .RasterOperation (0,0,_abcd .Width ,_abcd .Height ,PixNotSrcAndDst ,_abcd ,0,0);_fbg !=nil {return nil ,_b .Wrap (_fbg ,_dcgaf ,"\u0064 \u003d\u003d\u0020\u0073\u0032");
};default:_febf ,_fbg =_cagf (_febf ,_abcd );if _fbg !=nil {return nil ,_b .Wrap (_fbg ,_dcgaf ,"");};if _fbg =_febf .RasterOperation (0,0,_abcd .Width ,_abcd .Height ,PixNotSrcAndDst ,_cfdc ,0,0);_fbg !=nil {return nil ,_b .Wrap (_fbg ,_dcgaf ,"\u0064e\u0066\u0061\u0075\u006c\u0074");
};};return _febf ,nil ;};func (_aeaa MorphProcess )getWidthHeight ()(_bdfd ,_cgda int ){return _aeaa .Arguments [0],_aeaa .Arguments [1];};func TstImageBitmapData ()[]byte {return _bfdfb .Data };func Centroid (bm *Bitmap ,centTab ,sumTab []int )(Point ,error ){return bm .centroid (centTab ,sumTab )};
func (_feeb Points )XSorter ()func (_cbef ,_ddde int )bool {return func (_bcd ,_aadg int )bool {return _feeb [_bcd ].X < _feeb [_aadg ].X };};func (_fgab *Bitmap )setFourBytes (_ccf int ,_abaeb uint32 )error {if _ccf +3> len (_fgab .Data )-1{return _b .Errorf ("\u0073\u0065\u0074F\u006f\u0075\u0072\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_ccf );
};_fgab .Data [_ccf ]=byte ((_abaeb &0xff000000)>>24);_fgab .Data [_ccf +1]=byte ((_abaeb &0xff0000)>>16);_fgab .Data [_ccf +2]=byte ((_abaeb &0xff00)>>8);_fgab .Data [_ccf +3]=byte (_abaeb &0xff);return nil ;};func _adb (_bb *Bitmap ,_dff int )(*Bitmap ,error ){const _dea ="\u0065x\u0070a\u006e\u0064\u0042\u0069\u006ea\u0072\u0079P\u006f\u0077\u0065\u0072\u0032";
if _bb ==nil {return nil ,_b .Error (_dea ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _dff ==1{return _cagf (nil ,_bb );};if _dff !=2&&_dff !=4&&_dff !=8{return nil ,_b .Error (_dea ,"\u0066\u0061\u0063t\u006f\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0069n\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d\u0020\u0072\u0061\u006e\u0067\u0065");
};_dag :=_dff *_bb .Width ;_ab :=_dff *_bb .Height ;_bdg :=New (_dag ,_ab );var _cdb error ;switch _dff {case 2:_cdb =_cf (_bdg ,_bb );case 4:_cdb =_bfb (_bdg ,_bb );case 8:_cdb =_gf (_bdg ,_bb );};if _cdb !=nil {return nil ,_b .Wrap (_cdb ,_dea ,"");};
return _bdg ,nil ;};func (_abfg *ClassedPoints )GetIntXByClass (i int )(int ,error ){const _abdbc ="\u0043\u006c\u0061\u0073s\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047e\u0074I\u006e\u0074\u0059\u0042\u0079\u0043\u006ca\u0073\u0073";if i >=_abfg .IntSlice .Size (){return 0,_b .Errorf (_abdbc ,"\u0069\u003a\u0020\u0027\u0025\u0064\u0027 \u0069\u0073\u0020o\u0075\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065",i );
};return int (_abfg .XAtIndex (i )),nil ;};func (_cfaf Points )YSorter ()func (_ccefe ,_gbag int )bool {return func (_bgcd ,_gadf int )bool {return _cfaf [_bgcd ].Y < _cfaf [_gadf ].Y };};func (_bbegg *ClassedPoints )YAtIndex (i int )float32 {return (*_bbegg .Points )[_bbegg .IntSlice [i ]].Y };
func (_dbag *Bitmap )countPixels ()int {var (_dgffd int ;_bcea uint8 ;_badb byte ;_aaff int ;);_gef :=_dbag .RowStride ;_dacgg :=uint (_dbag .Width &0x07);if _dacgg !=0{_bcea =uint8 ((0xff<<(8-_dacgg ))&0xff);_gef --;};for _eaga :=0;_eaga < _dbag .Height ;
_eaga ++{for _aaff =0;_aaff < _gef ;_aaff ++{_badb =_dbag .Data [_eaga *_dbag .RowStride +_aaff ];_dgffd +=int (_babb [_badb ]);};if _dacgg !=0{_dgffd +=int (_babb [_dbag .Data [_eaga *_dbag .RowStride +_aaff ]&_bcea ]);};};return _dgffd ;};func _af (_cb *Bitmap ,_gab ...int )(_cgg *Bitmap ,_cga error ){const _bfc ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0043\u0061\u0073\u0063\u0061\u0064\u0065";
if _cb ==nil {return nil ,_b .Error (_bfc ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if len (_gab )==0||len (_gab )> 4{return nil ,_b .Error (_bfc ,"t\u0068\u0065\u0072\u0065\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0074\u0020\u006cea\u0073\u0074\u0020\u006fn\u0065\u0020\u0061\u006e\u0064\u0020\u0061\u0074\u0020mo\u0073\u0074 \u0034\u0020\u006c\u0065\u0076\u0065\u006c\u0073");
};if _gab [0]<=0{_aa .Log .Debug ("\u006c\u0065\u0076\u0065\u006c\u0031\u0020\u003c\u003d\u0020\u0030 \u002d\u0020\u006e\u006f\u0020\u0072\u0065\u0064\u0075\u0063t\u0069\u006f\u006e");_cgg ,_cga =_cagf (nil ,_cb );if _cga !=nil {return nil ,_b .Wrap (_cga ,_bfc ,"l\u0065\u0076\u0065\u006c\u0031\u0020\u003c\u003d\u0020\u0030");
};return _cgg ,nil ;};_bcb :=_bef ();_cgg =_cb ;for _aed ,_aff :=range _gab {if _aff <=0{break ;};_cgg ,_cga =_dbbd (_cgg ,_aff ,_bcb );if _cga !=nil {return nil ,_b .Wrapf (_cga ,_bfc ,"\u006c\u0065\u0076\u0065\u006c\u0025\u0064\u0020\u0072\u0065\u0064\u0075c\u0074\u0069\u006f\u006e",_aed );
};};return _cgg ,nil ;};func TstGetScaledSymbol (t *_bc .T ,sm *Bitmap ,scale ...int )*Bitmap {if len (scale )==0{return sm ;};if scale [0]==1{return sm ;};_ceea ,_fdcaa :=MorphSequence (sm ,MorphProcess {Operation :MopReplicativeBinaryExpansion ,Arguments :scale });
_ba .NoError (t ,_fdcaa );return _ceea ;};type SizeComparison int ;func MorphSequence (src *Bitmap ,sequence ...MorphProcess )(*Bitmap ,error ){return _adcc (src ,sequence ...);};func TstImageBitmap ()*Bitmap {return _bfdfb .Copy ()};func (_agde *Bitmaps )SelectBySize (width ,height int ,tp LocationFilter ,relation SizeComparison )(_aadgd *Bitmaps ,_defdb error ){const _gaac ="B\u0069t\u006d\u0061\u0070\u0073\u002e\u0053\u0065\u006ce\u0063\u0074\u0042\u0079Si\u007a\u0065";
if _agde ==nil {return nil ,_b .Error (_gaac ,"\u0027\u0062\u0027 B\u0069\u0074\u006d\u0061\u0070\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};switch tp {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_b .Errorf (_gaac ,"\u0070\u0072\u006f\u0076\u0069d\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u006fc\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",tp );
};switch relation {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE ,SizeSelectIfEQ :default:return nil ,_b .Errorf (_gaac ,"\u0069\u006e\u0076\u0061li\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025d\u0027",relation );
};_deec ,_defdb :=_agde .makeSizeIndicator (width ,height ,tp ,relation );if _defdb !=nil {return nil ,_b .Wrap (_defdb ,_gaac ,"");};_aadgd ,_defdb =_agde .selectByIndicator (_deec );if _defdb !=nil {return nil ,_b .Wrap (_defdb ,_gaac ,"");};return _aadgd ,nil ;
};func NewClassedPoints (points *Points ,classes _d .IntSlice )(*ClassedPoints ,error ){const _gafc ="\u004e\u0065w\u0043\u006c\u0061s\u0073\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073";if points ==nil {return nil ,_b .Error (_gafc ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0070\u006f\u0069\u006e\u0074\u0073");
};if classes ==nil {return nil ,_b .Error (_gafc ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0063\u006c\u0061ss\u0065\u0073");};_fcea :=&ClassedPoints {Points :points ,IntSlice :classes };if _bcbbc :=_fcea .validateIntSlice ();_bcbbc !=nil {return nil ,_b .Wrap (_bcbbc ,_gafc ,"");
};return _fcea ,nil ;};func (_eca *Bitmap )ToImage ()_ff .Image {_ecff ,_dbg :=_db .NewImage (_eca .Width ,_eca .Height ,1,1,_eca .Data ,nil ,nil );if _dbg !=nil {_aa .Log .Error ("\u0043\u006f\u006e\u0076\u0065\u0072\u0074\u0069\u006e\u0067\u0020j\u0062\u0069\u0067\u0032\u002e\u0042\u0069\u0074m\u0061p\u0020\u0074\u006f\u0020\u0069\u006d\u0061\u0067\u0065\u0075\u0074\u0069\u006c\u002e\u0049\u006d\u0061\u0067e\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_dbg );
};return _ecff ;};func _cf (_da ,_e *Bitmap )(_dd error ){const _g ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0032";_aaf :=_e .RowStride ;_gb :=_da .RowStride ;var (_ef byte ;_dg uint16 ;_ed ,_bf ,_cc ,_fa ,_ag int ;
);for _cc =0;_cc < _e .Height ;_cc ++{_ed =_cc *_aaf ;_bf =2*_cc *_gb ;for _fa =0;_fa < _aaf ;_fa ++{_ef =_e .Data [_ed +_fa ];_dg =_bfed [_ef ];_ag =_bf +_fa *2;if _da .RowStride !=_e .RowStride *2&&(_fa +1)*2> _da .RowStride {_dd =_da .SetByte (_ag ,byte (_dg >>8));
}else {_dd =_da .setTwoBytes (_ag ,_dg );};if _dd !=nil {return _b .Wrap (_dd ,_g ,"");};};for _fa =0;_fa < _gb ;_fa ++{_ag =_bf +_gb +_fa ;_ef =_da .Data [_bf +_fa ];if _dd =_da .SetByte (_ag ,_ef );_dd !=nil {return _b .Wrapf (_dd ,_g ,"c\u006f\u0070\u0079\u0020\u0064\u006fu\u0062\u006c\u0065\u0064\u0020\u006ci\u006e\u0065\u003a\u0020\u0027\u0025\u0064'\u002c\u0020\u0042\u0079\u0074\u0065\u003a\u0020\u0027\u0025d\u0027",_bf +_fa ,_bf +_gb +_fa );
};};};return nil ;};func (_fgeg *Bitmap )Equals (s *Bitmap )bool {if len (_fgeg .Data )!=len (s .Data )||_fgeg .Width !=s .Width ||_fgeg .Height !=s .Height {return false ;};for _bgb :=0;_bgb < _fgeg .Height ;_bgb ++{_cfg :=_bgb *_fgeg .RowStride ;for _bgde :=0;
_bgde < _fgeg .RowStride ;_bgde ++{if _fgeg .Data [_cfg +_bgde ]!=s .Data [_cfg +_bgde ]{return false ;};};};return true ;};