//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package ps implements various functionalities needed for handling Postscript for PDF uses, in particular
// for PDF function type 4.
//
// Package ps implements various functionalities needed for handling Postscript for PDF uses, in particular
// for PDF function type 4.
package ps ;import (_gcg "bufio";_gc "bytes";_f "errors";_gcb "fmt";_a "github.com/unidoc/unipdf/v3/common";_ag "github.com/unidoc/unipdf/v3/core";_c "io";_fc "math";);

// String returns a string representation of the stack.
func (_aeca *PSStack )String ()string {_aabf :="\u005b\u0020";for _ ,_aaf :=range *_aeca {_aabf +=_aaf .String ();_aabf +="\u0020";};_aabf +="\u005d";return _aabf ;};func (_baa *PSOperand )copy (_aggg *PSStack )error {_af ,_bac :=_aggg .PopInteger ();if _bac !=nil {return _bac ;
};if _af < 0{return ErrRangeCheck ;};if _af > len (*_aggg ){return ErrRangeCheck ;};*_aggg =append (*_aggg ,(*_aggg )[len (*_aggg )-_af :]...);return nil ;};func (_aeff *PSOperand )gt (_gfa *PSStack )error {_cbg ,_dagf :=_gfa .PopNumberAsFloat64 ();if _dagf !=nil {return _dagf ;
};_bgf ,_dagf :=_gfa .PopNumberAsFloat64 ();if _dagf !=nil {return _dagf ;};if _fc .Abs (_bgf -_cbg )< _d {_eggd :=_gfa .Push (MakeBool (false ));return _eggd ;}else if _bgf > _cbg {_adag :=_gfa .Push (MakeBool (true ));return _adag ;}else {_efd :=_gfa .Push (MakeBool (false ));
return _efd ;};};

// PopInteger specificially pops an integer from the top of the stack, returning the value as an int.
func (_ecgb *PSStack )PopInteger ()(int ,error ){_aad ,_aac :=_ecgb .Pop ();if _aac !=nil {return 0,_aac ;};if _acbb ,_aea :=_aad .(*PSInteger );_aea {return _acbb .Val ,nil ;};return 0,ErrTypeCheck ;};func (_ade *PSOperand )not (_bbf *PSStack )error {_agdf ,_aecb :=_bbf .Pop ();
if _aecb !=nil {return _aecb ;};if _aged ,_gfeb :=_agdf .(*PSBoolean );_gfeb {_aecb =_bbf .Push (MakeBool (!_aged .Val ));return _aecb ;}else if _dcaf ,_acac :=_agdf .(*PSInteger );_acac {_aecb =_bbf .Push (MakeInteger (^_dcaf .Val ));return _aecb ;}else {return ErrTypeCheck ;
};};func (_gdg *PSOperand )exch (_gdc *PSStack )error {_aaa ,_dfe :=_gdc .Pop ();if _dfe !=nil {return _dfe ;};_bga ,_dfe :=_gdc .Pop ();if _dfe !=nil {return _dfe ;};_dfe =_gdc .Push (_aaa );if _dfe !=nil {return _dfe ;};_dfe =_gdc .Push (_bga );return _dfe ;
};

// Pop pops an object from the top of the stack.
func (_dbag *PSStack )Pop ()(PSObject ,error ){if len (*_dbag )< 1{return nil ,ErrStackUnderflow ;};_fffb :=(*_dbag )[len (*_dbag )-1];*_dbag =(*_dbag )[0:len (*_dbag )-1];return _fffb ,nil ;};func (_be *PSReal )String ()string {return _gcb .Sprintf ("\u0025\u002e\u0035\u0066",_be .Val )};
func (_fdeb *PSOperand )dup (_acga *PSStack )error {_cef ,_bfc :=_acga .Pop ();if _bfc !=nil {return _bfc ;};_bfc =_acga .Push (_cef );if _bfc !=nil {return _bfc ;};_bfc =_acga .Push (_cef .Duplicate ());return _bfc ;};

// Execute executes the program for an input parameters `objects` and returns a slice of output objects.
func (_agg *PSExecutor )Execute (objects []PSObject )([]PSObject ,error ){for _ ,_ae :=range objects {_db :=_agg .Stack .Push (_ae );if _db !=nil {return nil ,_db ;};};_aec :=_agg ._e .Exec (_agg .Stack );if _aec !=nil {_a .Log .Debug ("\u0045x\u0065c\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_aec );
return nil ,_aec ;};_dfg :=[]PSObject (*_agg .Stack );_agg .Stack .Empty ();return _dfg ,nil ;};func (_baf *PSOperand )atan (_ecc *PSStack )error {_dfc ,_gg :=_ecc .PopNumberAsFloat64 ();if _gg !=nil {return _gg ;};_bad ,_gg :=_ecc .PopNumberAsFloat64 ();
if _gg !=nil {return _gg ;};if _dfc ==0{var _bcf error ;if _bad < 0{_bcf =_ecc .Push (MakeReal (270));}else {_bcf =_ecc .Push (MakeReal (90));};return _bcf ;};_eda :=_bad /_dfc ;_cca :=_fc .Atan (_eda )*180/_fc .Pi ;_gg =_ecc .Push (MakeReal (_cca ));return _gg ;
};

// Append appends an object to the PSProgram.
func (_fda *PSProgram )Append (obj PSObject ){*_fda =append (*_fda ,obj )};

// PSExecutor has its own execution stack and is used to executre a PS routine (program).
type PSExecutor struct{Stack *PSStack ;_e *PSProgram ;};func (_aa *PSProgram )DebugString ()string {_ba :="\u007b\u0020";for _ ,_dc :=range *_aa {_ba +=_dc .DebugString ();_ba +="\u0020";};_ba +="\u007d";return _ba ;};func (_eab *PSBoolean )Duplicate ()PSObject {_eaf :=PSBoolean {};
_eaf .Val =_eab .Val ;return &_eaf };var ErrUnsupportedOperand =_f .New ("\u0075\u006e\u0073\u0075pp\u006f\u0072\u0074\u0065\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");func (_gdb *PSOperand )neg (_bdg *PSStack )error {_efdc ,_bed :=_bdg .Pop ();
if _bed !=nil {return _bed ;};if _fdcc ,_fgfeg :=_efdc .(*PSReal );_fgfeg {_bed =_bdg .Push (MakeReal (-_fdcc .Val ));return _bed ;}else if _ebge ,_eeee :=_efdc .(*PSInteger );_eeee {_bed =_bdg .Push (MakeInteger (-_ebge .Val ));return _bed ;}else {return ErrTypeCheck ;
};};

// Push pushes an object on top of the stack.
func (_gfea *PSStack )Push (obj PSObject )error {if len (*_gfea )> 100{return ErrStackOverflow ;};*_gfea =append (*_gfea ,obj );return nil ;};

// PopNumberAsFloat64 pops and return the numeric value of the top of the stack as a float64.
// Real or integer only.
func (_gcbg *PSStack )PopNumberAsFloat64 ()(float64 ,error ){_gfga ,_aade :=_gcbg .Pop ();if _aade !=nil {return 0,_aade ;};if _ccc ,_fgbd :=_gfga .(*PSReal );_fgbd {return _ccc .Val ,nil ;}else if _cgae ,_dagb :=_gfga .(*PSInteger );_dagb {return float64 (_cgae .Val ),nil ;
}else {return 0,ErrTypeCheck ;};};func (_da *PSOperand )String ()string {return string (*_da )};func (_ad *PSBoolean )DebugString ()string {return _gcb .Sprintf ("\u0062o\u006f\u006c\u003a\u0025\u0076",_ad .Val );};func (_fcb *PSProgram )String ()string {_gcc :="\u007b\u0020";
for _ ,_gcf :=range *_fcb {_gcc +=_gcf .String ();_gcc +="\u0020";};_gcc +="\u007d";return _gcc ;};func (_gea *PSOperand )or (_ddcd *PSStack )error {_gaaf ,_ecg :=_ddcd .Pop ();if _ecg !=nil {return _ecg ;};_fgb ,_ecg :=_ddcd .Pop ();if _ecg !=nil {return _ecg ;
};if _bege ,_edfe :=_gaaf .(*PSBoolean );_edfe {_cgfa ,_aeg :=_fgb .(*PSBoolean );if !_aeg {return ErrTypeCheck ;};_ecg =_ddcd .Push (MakeBool (_bege .Val ||_cgfa .Val ));return _ecg ;};if _fgee ,_deb :=_gaaf .(*PSInteger );_deb {_bge ,_eadf :=_fgb .(*PSInteger );
if !_eadf {return ErrTypeCheck ;};_ecg =_ddcd .Push (MakeInteger (_fgee .Val |_bge .Val ));return _ecg ;};return ErrTypeCheck ;};var ErrStackUnderflow =_f .New ("\u0073t\u0061c\u006b\u0020\u0075\u006e\u0064\u0065\u0072\u0066\u006c\u006f\u0077");func (_ce *PSOperand )abs (_ff *PSStack )error {_gag ,_ac :=_ff .Pop ();
if _ac !=nil {return _ac ;};if _bba ,_ec :=_gag .(*PSReal );_ec {_dbf :=_bba .Val ;if _dbf < 0{_ac =_ff .Push (MakeReal (-_dbf ));}else {_ac =_ff .Push (MakeReal (_dbf ));};}else if _cd ,_eee :=_gag .(*PSInteger );_eee {_bbd :=_cd .Val ;if _bbd < 0{_ac =_ff .Push (MakeInteger (-_bbd ));
}else {_ac =_ff .Push (MakeInteger (_bbd ));};}else {return ErrTypeCheck ;};return _ac ;};func (_eec *PSOperand )exp (_eaa *PSStack )error {_eeag ,_aga :=_eaa .PopNumberAsFloat64 ();if _aga !=nil {return _aga ;};_aee ,_aga :=_eaa .PopNumberAsFloat64 ();
if _aga !=nil {return _aga ;};if _fc .Abs (_eeag )< 1&&_aee < 0{return ErrUndefinedResult ;};_gec :=_fc .Pow (_aee ,_eeag );_aga =_eaa .Push (MakeReal (_gec ));return _aga ;};const _d =0.000001;func (_ageg *PSOperand )cos (_eea *PSStack )error {_ebgf ,_dgb :=_eea .PopNumberAsFloat64 ();
if _dgb !=nil {return _dgb ;};_bcb :=_fc .Cos (_ebgf *_fc .Pi /180.0);_dgb =_eea .Push (MakeReal (_bcb ));return _dgb ;};func (_cce *PSOperand )ln (_ebc *PSStack )error {_gde ,_cgf :=_ebc .PopNumberAsFloat64 ();if _cgf !=nil {return _cgf ;};_ddc :=_fc .Log (_gde );
_cgf =_ebc .Push (MakeReal (_ddc ));return _cgf ;};var ErrStackOverflow =_f .New ("\u0073\u0074\u0061\u0063\u006b\u0020\u006f\u0076\u0065r\u0066\u006c\u006f\u0077");func (_eaef *PSOperand )sqrt (_fad *PSStack )error {_gad ,_edba :=_fad .PopNumberAsFloat64 ();
if _edba !=nil {return _edba ;};if _gad < 0{return ErrRangeCheck ;};_ceb :=_fc .Sqrt (_gad );_edba =_fad .Push (MakeReal (_ceb ));return _edba ;};func (_cga *PSOperand )ifelse (_faa *PSStack )error {_dda ,_bbad :=_faa .Pop ();if _bbad !=nil {return _bbad ;
};_gbf ,_bbad :=_faa .Pop ();if _bbad !=nil {return _bbad ;};_eafa ,_bbad :=_faa .Pop ();if _bbad !=nil {return _bbad ;};_cfb ,_fac :=_dda .(*PSProgram );if !_fac {return ErrTypeCheck ;};_gbg ,_fac :=_gbf .(*PSProgram );if !_fac {return ErrTypeCheck ;};
_bcef ,_fac :=_eafa .(*PSBoolean );if !_fac {return ErrTypeCheck ;};if _bcef .Val {_agaf :=_gbg .Exec (_faa );return _agaf ;};_bbad =_cfb .Exec (_faa );return _bbad ;};func (_eba *PSInteger )String ()string {return _gcb .Sprintf ("\u0025\u0064",_eba .Val )};
func (_egg *PSOperand )DebugString ()string {return _gcb .Sprintf ("\u006fp\u003a\u0027\u0025\u0073\u0027",*_egg );};

// Parse parses the postscript and store as a program that can be executed.
func (_cffc *PSParser )Parse ()(*PSProgram ,error ){_cffc .skipSpaces ();_ebb ,_caf :=_cffc ._ebac .Peek (2);if _caf !=nil {return nil ,_caf ;};if _ebb [0]!='{'{return nil ,_f .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0053\u0020\u0050\u0072\u006f\u0067\u0072\u0061\u006d\u0020\u006e\u006f\u0074\u0020\u0073t\u0061\u0072\u0074\u0069\u006eg\u0020\u0077i\u0074\u0068\u0020\u007b");
};_ece ,_caf :=_cffc .parseFunction ();if _caf !=nil &&_caf !=_c .EOF {return nil ,_caf ;};return _ece ,_caf ;};func (_fgf *PSOperand )add (_ced *PSStack )error {_eeg ,_bfb :=_ced .Pop ();if _bfb !=nil {return _bfb ;};_gfe ,_bfb :=_ced .Pop ();if _bfb !=nil {return _bfb ;
};_agd ,_dba :=_eeg .(*PSReal );_cfa ,_ca :=_eeg .(*PSInteger );if !_dba &&!_ca {return ErrTypeCheck ;};_gfd ,_fgg :=_gfe .(*PSReal );_bbe ,_gbb :=_gfe .(*PSInteger );if !_fgg &&!_gbb {return ErrTypeCheck ;};if _ca &&_gbb {_dbe :=_cfa .Val +_bbe .Val ;
_ege :=_ced .Push (MakeInteger (_dbe ));return _ege ;};var _bgc float64 ;if _dba {_bgc =_agd .Val ;}else {_bgc =float64 (_cfa .Val );};if _fgg {_bgc +=_gfd .Val ;}else {_bgc +=float64 (_bbe .Val );};_bfb =_ced .Push (MakeReal (_bgc ));return _bfb ;};func (_ccg *PSOperand )and (_dca *PSStack )error {_fcf ,_gaa :=_dca .Pop ();
if _gaa !=nil {return _gaa ;};_aef ,_gaa :=_dca .Pop ();if _gaa !=nil {return _gaa ;};if _aed ,_fgge :=_fcf .(*PSBoolean );_fgge {_dgd ,_dce :=_aef .(*PSBoolean );if !_dce {return ErrTypeCheck ;};_gaa =_dca .Push (MakeBool (_aed .Val &&_dgd .Val ));return _gaa ;
};if _egf ,_fca :=_fcf .(*PSInteger );_fca {_eege ,_ef :=_aef .(*PSInteger );if !_ef {return ErrTypeCheck ;};_gaa =_dca .Push (MakeInteger (_egf .Val &_eege .Val ));return _gaa ;};return ErrTypeCheck ;};func (_acb *PSOperand )idiv (_ead *PSStack )error {_ede ,_eca :=_ead .Pop ();
if _eca !=nil {return _eca ;};_cff ,_eca :=_ead .Pop ();if _eca !=nil {return _eca ;};_baaf ,_bbb :=_ede .(*PSInteger );if !_bbb {return ErrTypeCheck ;};if _baaf .Val ==0{return ErrUndefinedResult ;};_gcbc ,_bbb :=_cff .(*PSInteger );if !_bbb {return ErrTypeCheck ;
};_gcaa :=_gcbc .Val /_baaf .Val ;_eca =_ead .Push (MakeInteger (_gcaa ));return _eca ;};func (_bce *PSOperand )div (_dbc *PSStack )error {_cb ,_ada :=_dbc .Pop ();if _ada !=nil {return _ada ;};_dgbb ,_ada :=_dbc .Pop ();if _ada !=nil {return _ada ;};_gfg ,_fb :=_cb .(*PSReal );
_abf ,_ecf :=_cb .(*PSInteger );if !_fb &&!_ecf {return ErrTypeCheck ;};if _fb &&_gfg .Val ==0{return ErrUndefinedResult ;};if _ecf &&_abf .Val ==0{return ErrUndefinedResult ;};_egc ,_ceg :=_dgbb .(*PSReal );_bgg ,_ge :=_dgbb .(*PSInteger );if !_ceg &&!_ge {return ErrTypeCheck ;
};var _efe float64 ;if _ceg {_efe =_egc .Val ;}else {_efe =float64 (_bgg .Val );};if _fb {_efe /=_gfg .Val ;}else {_efe /=float64 (_abf .Val );};_ada =_dbc .Push (MakeReal (_efe ));return _ada ;};func (_afb *PSOperand )eq (_agbe *PSStack )error {_aff ,_acgg :=_agbe .Pop ();
if _acgg !=nil {return _acgg ;};_bfa ,_acgg :=_agbe .Pop ();if _acgg !=nil {return _acgg ;};_bgcf ,_dcbg :=_aff .(*PSBoolean );_cgga ,_bdb :=_bfa .(*PSBoolean );if _dcbg ||_bdb {var _afc error ;if _dcbg &&_bdb {_afc =_agbe .Push (MakeBool (_bgcf .Val ==_cgga .Val ));
}else {_afc =_agbe .Push (MakeBool (false ));};return _afc ;};var _efa float64 ;var _aca float64 ;if _ffg ,_gdd :=_aff .(*PSInteger );_gdd {_efa =float64 (_ffg .Val );}else if _bgb ,_ebe :=_aff .(*PSReal );_ebe {_efa =_bgb .Val ;}else {return ErrTypeCheck ;
};if _agf ,_egd :=_bfa .(*PSInteger );_egd {_aca =float64 (_agf .Val );}else if _dag ,_gfdc :=_bfa .(*PSReal );_gfdc {_aca =_dag .Val ;}else {return ErrTypeCheck ;};if _fc .Abs (_aca -_efa )< _d {_acgg =_agbe .Push (MakeBool (true ));}else {_acgg =_agbe .Push (MakeBool (false ));
};return _acgg ;};

// MakeReal returns a new PSReal object initialized with `val`.
func MakeReal (val float64 )*PSReal {_gbgc :=PSReal {};_gbgc .Val =val ;return &_gbgc };

// PSParser is a basic Postscript parser.
type PSParser struct{_ebac *_gcg .Reader };

// PSOperand represents a Postscript operand (text string).
type PSOperand string ;

// MakeInteger returns a new PSInteger object initialized with `val`.
func MakeInteger (val int )*PSInteger {_agdg :=PSInteger {};_agdg .Val =val ;return &_agdg };func (_bd *PSBoolean )String ()string {return _gcb .Sprintf ("\u0025\u0076",_bd .Val )};

// NewPSParser returns a new instance of the PDF Postscript parser from input data.
func NewPSParser (content []byte )*PSParser {_fbcf :=PSParser {};_dfbd :=_gc .NewBuffer (content );_fbcf ._ebac =_gcg .NewReader (_dfbd );return &_fbcf ;};func (_dgbc *PSOperand )ifCondition (_bbbe *PSStack )error {_aeef ,_gdf :=_bbbe .Pop ();if _gdf !=nil {return _gdf ;
};_edgd ,_gdf :=_bbbe .Pop ();if _gdf !=nil {return _gdf ;};_cegc ,_afa :=_aeef .(*PSProgram );if !_afa {return ErrTypeCheck ;};_gae ,_afa :=_edgd .(*PSBoolean );if !_afa {return ErrTypeCheck ;};if _gae .Val {_bgce :=_cegc .Exec (_bbbe );return _bgce ;
};return nil ;};func (_facc *PSOperand )truncate (_febg *PSStack )error {_eggf ,_cba :=_febg .Pop ();if _cba !=nil {return _cba ;};if _bbed ,_bcd :=_eggf .(*PSReal );_bcd {_ddb :=int (_bbed .Val );_cba =_febg .Push (MakeReal (float64 (_ddb )));}else if _dea ,_dee :=_eggf .(*PSInteger );
_dee {_cba =_febg .Push (MakeInteger (_dea .Val ));}else {return ErrTypeCheck ;};return _cba ;};func (_bebb *PSOperand )floor (_begg *PSStack )error {_agege ,_cfde :=_begg .Pop ();if _cfde !=nil {return _cfde ;};if _dage ,_bfg :=_agege .(*PSReal );_bfg {_cfde =_begg .Push (MakeReal (_fc .Floor (_dage .Val )));
}else if _bbeg ,_dac :=_agege .(*PSInteger );_dac {_cfde =_begg .Push (MakeInteger (_bbeg .Val ));}else {return ErrTypeCheck ;};return _cfde ;};

// PSProgram defines a Postscript program which is a series of PS objects (arguments, commands, programs etc).
type PSProgram []PSObject ;func (_bfbf *PSOperand )sin (_abb *PSStack )error {_efb ,_dgbae :=_abb .PopNumberAsFloat64 ();if _dgbae !=nil {return _dgbae ;};_dcff :=_fc .Sin (_efb *_fc .Pi /180.0);_dgbae =_abb .Push (MakeReal (_dcff ));return _dgbae ;};func (_eg *PSInteger )Duplicate ()PSObject {_cg :=PSInteger {};
_cg .Val =_eg .Val ;return &_cg };func (_bca *PSOperand )le (_gcgb *PSStack )error {_cab ,_fgfg :=_gcgb .PopNumberAsFloat64 ();if _fgfg !=nil {return _fgfg ;};_fdc ,_fgfg :=_gcgb .PopNumberAsFloat64 ();if _fgfg !=nil {return _fgfg ;};if _fc .Abs (_fdc -_cab )< _d {_fdg :=_gcgb .Push (MakeBool (true ));
return _fdg ;}else if _fdc < _cab {_adb :=_gcgb .Push (MakeBool (true ));return _adb ;}else {_ace :=_gcgb .Push (MakeBool (false ));return _ace ;};};

// NewPSExecutor returns an initialized PSExecutor for an input `program`.
func NewPSExecutor (program *PSProgram )*PSExecutor {_b :=&PSExecutor {};_b .Stack =NewPSStack ();_b ._e =program ;return _b ;};

// PSInteger represents an integer.
type PSInteger struct{Val int ;};

// Exec executes the operand `op` in the state specified by `stack`.
func (_bg *PSOperand )Exec (stack *PSStack )error {_dae :=ErrUnsupportedOperand ;switch *_bg {case "\u0061\u0062\u0073":_dae =_bg .abs (stack );case "\u0061\u0064\u0064":_dae =_bg .add (stack );case "\u0061\u006e\u0064":_dae =_bg .and (stack );case "\u0061\u0074\u0061\u006e":_dae =_bg .atan (stack );
case "\u0062\u0069\u0074\u0073\u0068\u0069\u0066\u0074":_dae =_bg .bitshift (stack );case "\u0063e\u0069\u006c\u0069\u006e\u0067":_dae =_bg .ceiling (stack );case "\u0063\u006f\u0070\u0079":_dae =_bg .copy (stack );case "\u0063\u006f\u0073":_dae =_bg .cos (stack );
case "\u0063\u0076\u0069":_dae =_bg .cvi (stack );case "\u0063\u0076\u0072":_dae =_bg .cvr (stack );case "\u0064\u0069\u0076":_dae =_bg .div (stack );case "\u0064\u0075\u0070":_dae =_bg .dup (stack );case "\u0065\u0071":_dae =_bg .eq (stack );case "\u0065\u0078\u0063\u0068":_dae =_bg .exch (stack );
case "\u0065\u0078\u0070":_dae =_bg .exp (stack );case "\u0066\u006c\u006fo\u0072":_dae =_bg .floor (stack );case "\u0067\u0065":_dae =_bg .ge (stack );case "\u0067\u0074":_dae =_bg .gt (stack );case "\u0069\u0064\u0069\u0076":_dae =_bg .idiv (stack );
case "\u0069\u0066":_dae =_bg .ifCondition (stack );case "\u0069\u0066\u0065\u006c\u0073\u0065":_dae =_bg .ifelse (stack );case "\u0069\u006e\u0064e\u0078":_dae =_bg .index (stack );case "\u006c\u0065":_dae =_bg .le (stack );case "\u006c\u006f\u0067":_dae =_bg .log (stack );
case "\u006c\u006e":_dae =_bg .ln (stack );case "\u006c\u0074":_dae =_bg .lt (stack );case "\u006d\u006f\u0064":_dae =_bg .mod (stack );case "\u006d\u0075\u006c":_dae =_bg .mul (stack );case "\u006e\u0065":_dae =_bg .ne (stack );case "\u006e\u0065\u0067":_dae =_bg .neg (stack );
case "\u006e\u006f\u0074":_dae =_bg .not (stack );case "\u006f\u0072":_dae =_bg .or (stack );case "\u0070\u006f\u0070":_dae =_bg .pop (stack );case "\u0072\u006f\u0075n\u0064":_dae =_bg .round (stack );case "\u0072\u006f\u006c\u006c":_dae =_bg .roll (stack );
case "\u0073\u0069\u006e":_dae =_bg .sin (stack );case "\u0073\u0071\u0072\u0074":_dae =_bg .sqrt (stack );case "\u0073\u0075\u0062":_dae =_bg .sub (stack );case "\u0074\u0072\u0075\u006e\u0063\u0061\u0074\u0065":_dae =_bg .truncate (stack );case "\u0078\u006f\u0072":_dae =_bg .xor (stack );
};return _dae ;};func (_dagg *PSOperand )mod (_bdd *PSStack )error {_ddd ,_aaef :=_bdd .Pop ();if _aaef !=nil {return _aaef ;};_feg ,_aaef :=_bdd .Pop ();if _aaef !=nil {return _aaef ;};_bcfg ,_edag :=_ddd .(*PSInteger );if !_edag {return ErrTypeCheck ;
};if _bcfg .Val ==0{return ErrUndefinedResult ;};_bafg ,_edag :=_feg .(*PSInteger );if !_edag {return ErrTypeCheck ;};_ebgc :=_bafg .Val %_bcfg .Val ;_aaef =_bdd .Push (MakeInteger (_ebgc ));return _aaef ;};func (_bfgf *PSOperand )xor (_abg *PSStack )error {_abce ,_gaf :=_abg .Pop ();
if _gaf !=nil {return _gaf ;};_gbfc ,_gaf :=_abg .Pop ();if _gaf !=nil {return _gaf ;};if _beeg ,_eff :=_abce .(*PSBoolean );_eff {_gagb ,_cec :=_gbfc .(*PSBoolean );if !_cec {return ErrTypeCheck ;};_gaf =_abg .Push (MakeBool (_beeg .Val !=_gagb .Val ));
return _gaf ;};if _daaa ,_cfe :=_abce .(*PSInteger );_cfe {_ffcc ,_cggf :=_gbfc .(*PSInteger );if !_cggf {return ErrTypeCheck ;};_gaf =_abg .Push (MakeInteger (_daaa .Val ^_ffcc .Val ));return _gaf ;};return ErrTypeCheck ;};func (_geac *PSOperand )sub (_dga *PSStack )error {_dbcg ,_eccc :=_dga .Pop ();
if _eccc !=nil {return _eccc ;};_ffdc ,_eccc :=_dga .Pop ();if _eccc !=nil {return _eccc ;};_gba ,_geed :=_dbcg .(*PSReal );_baae ,_ddf :=_dbcg .(*PSInteger );if !_geed &&!_ddf {return ErrTypeCheck ;};_gfec ,_bee :=_ffdc .(*PSReal );_fdf ,_fgbb :=_ffdc .(*PSInteger );
if !_bee &&!_fgbb {return ErrTypeCheck ;};if _ddf &&_fgbb {_dbg :=_fdf .Val -_baae .Val ;_cbc :=_dga .Push (MakeInteger (_dbg ));return _cbc ;};var _abfd float64 =0;if _bee {_abfd =_gfec .Val ;}else {_abfd =float64 (_fdf .Val );};if _geed {_abfd -=_gba .Val ;
}else {_abfd -=float64 (_baae .Val );};_eccc =_dga .Push (MakeReal (_abfd ));return _eccc ;};

// NewPSStack returns an initialized PSStack.
func NewPSStack ()*PSStack {return &PSStack {}};func (_fdca *PSOperand )mul (_abc *PSStack )error {_dgba ,_cfg :=_abc .Pop ();if _cfg !=nil {return _cfg ;};_bcg ,_cfg :=_abc .Pop ();if _cfg !=nil {return _cfg ;};_dcg ,_caaa :=_dgba .(*PSReal );_affa ,_faf :=_dgba .(*PSInteger );
if !_caaa &&!_faf {return ErrTypeCheck ;};_eccd ,_acbg :=_bcg .(*PSReal );_bgd ,_affd :=_bcg .(*PSInteger );if !_acbg &&!_affd {return ErrTypeCheck ;};if _faf &&_affd {_fbc :=_affa .Val *_bgd .Val ;_adf :=_abc .Push (MakeInteger (_fbc ));return _adf ;};
var _adg float64 ;if _caaa {_adg =_dcg .Val ;}else {_adg =float64 (_affa .Val );};if _acbg {_adg *=_eccd .Val ;}else {_adg *=float64 (_bgd .Val );};_cfg =_abc .Push (MakeReal (_adg ));return _cfg ;};var ErrUndefinedResult =_f .New ("\u0075\u006e\u0064\u0065fi\u006e\u0065\u0064\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0065\u0072\u0072o\u0072");


// PSObject represents a postscript object.
type PSObject interface{

// Duplicate makes a fresh copy of the PSObject.
Duplicate ()PSObject ;

// DebugString returns a descriptive representation of the PSObject with more information than String()
// for debugging purposes.
DebugString ()string ;

// String returns a string representation of the PSObject.
String ()string ;};func (_cbf *PSParser )parseNumber ()(PSObject ,error ){_fdad ,_ddba :=_ag .ParseNumber (_cbf ._ebac );if _ddba !=nil {return nil ,_ddba ;};switch _aaaf :=_fdad .(type ){case *_ag .PdfObjectFloat :return MakeReal (float64 (*_aaaf )),nil ;
case *_ag .PdfObjectInteger :return MakeInteger (int (*_aaaf )),nil ;};return nil ,_gcb .Errorf ("\u0075n\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_fdad );};

// PSBoolean represents a boolean value.
type PSBoolean struct{Val bool ;};func (_dgbcd *PSOperand )index (_gffc *PSStack )error {_fec ,_cac :=_gffc .Pop ();if _cac !=nil {return _cac ;};_caca ,_bdec :=_fec .(*PSInteger );if !_bdec {return ErrTypeCheck ;};if _caca .Val < 0{return ErrRangeCheck ;
};if _caca .Val > len (*_gffc )-1{return ErrStackUnderflow ;};_fge :=(*_gffc )[len (*_gffc )-1-_caca .Val ];_cac =_gffc .Push (_fge .Duplicate ());return _cac ;};func (_aecf *PSInteger )DebugString ()string {return _gcb .Sprintf ("\u0069\u006e\u0074\u003a\u0025\u0064",_aecf .Val );
};

// MakeOperand returns a new PSOperand object based on string `val`.
func MakeOperand (val string )*PSOperand {_bff :=PSOperand (val );return &_bff };func _fegb (_ddce int )int {if _ddce < 0{return -_ddce ;};return _ddce ;};func (_bfe *PSOperand )Duplicate ()PSObject {_dcb :=*_bfe ;return &_dcb };var ErrTypeCheck =_f .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");
func (_cfd *PSOperand )cvr (_acg *PSStack )error {_edg ,_de :=_acg .Pop ();if _de !=nil {return _de ;};if _beg ,_gd :=_edg .(*PSReal );_gd {_de =_acg .Push (MakeReal (_beg .Val ));}else if _eae ,_cedb :=_edg .(*PSInteger );_cedb {_de =_acg .Push (MakeReal (float64 (_eae .Val )));
}else {return ErrTypeCheck ;};return _de ;};func (_bfbg *PSOperand )cvi (_agb *PSStack )error {_ebaa ,_eed :=_agb .Pop ();if _eed !=nil {return _eed ;};if _dcf ,_aae :=_ebaa .(*PSReal );_aae {_gce :=int (_dcf .Val );_eed =_agb .Push (MakeInteger (_gce ));
}else if _gff ,_fgfe :=_ebaa .(*PSInteger );_fgfe {_beb :=_gff .Val ;_eed =_agb .Push (MakeInteger (_beb ));}else {return ErrTypeCheck ;};return _eed ;};func (_dad *PSOperand )bitshift (_aedg *PSStack )error {_bde ,_fde :=_aedg .PopInteger ();if _fde !=nil {return _fde ;
};_babg ,_fde :=_aedg .PopInteger ();if _fde !=nil {return _fde ;};var _gcd int ;if _bde >=0{_gcd =_babg <<uint (_bde );}else {_gcd =_babg >>uint (-_bde );};_fde =_aedg .Push (MakeInteger (_gcd ));return _fde ;};func (_cbd *PSOperand )roll (_bgad *PSStack )error {_daef ,_dge :=_bgad .Pop ();
if _dge !=nil {return _dge ;};_gebe ,_dge :=_bgad .Pop ();if _dge !=nil {return _dge ;};_bebbc ,_bae :=_daef .(*PSInteger );if !_bae {return ErrTypeCheck ;};_cdd ,_bae :=_gebe .(*PSInteger );if !_bae {return ErrTypeCheck ;};if _cdd .Val < 0{return ErrRangeCheck ;
};if _cdd .Val ==0||_cdd .Val ==1{return nil ;};if _cdd .Val > len (*_bgad ){return ErrStackUnderflow ;};for _ggd :=0;_ggd < _fegb (_bebbc .Val );_ggd ++{var _fbg []PSObject ;_fbg =(*_bgad )[len (*_bgad )-(_cdd .Val ):len (*_bgad )];if _bebbc .Val > 0{_dadeg :=_fbg [len (_fbg )-1];
_fbg =append ([]PSObject {_dadeg },_fbg [0:len (_fbg )-1]...);}else {_edb :=_fbg [len (_fbg )-_cdd .Val ];_fbg =append (_fbg [1:],_edb );};_ccb :=append ((*_bgad )[0:len (*_bgad )-_cdd .Val ],_fbg ...);_bgad =&_ccb ;};return nil ;};func (_fea *PSParser )skipSpaces ()(int ,error ){_fab :=0;
for {_cbb ,_eaae :=_fea ._ebac .Peek (1);if _eaae !=nil {return 0,_eaae ;};if _ag .IsWhiteSpace (_cbb [0]){_fea ._ebac .ReadByte ();_fab ++;}else {break ;};};return _fab ,nil ;};func (_cdf *PSOperand )round (_edga *PSStack )error {_ccgd ,_efad :=_edga .Pop ();
if _efad !=nil {return _efad ;};if _eddc ,_debc :=_ccgd .(*PSReal );_debc {_efad =_edga .Push (MakeReal (_fc .Floor (_eddc .Val +0.5)));}else if _dade ,_gee :=_ccgd .(*PSInteger );_gee {_efad =_edga .Push (MakeInteger (_dade .Val ));}else {return ErrTypeCheck ;
};return _efad ;};

// PSObjectArrayToFloat64Array converts []PSObject into a []float64 array. Each PSObject must represent a number,
// otherwise a ErrTypeCheck error occurs.
func PSObjectArrayToFloat64Array (objects []PSObject )([]float64 ,error ){var _ea []float64 ;for _ ,_df :=range objects {if _cf ,_ed :=_df .(*PSInteger );_ed {_ea =append (_ea ,float64 (_cf .Val ));}else if _gb ,_ee :=_df .(*PSReal );_ee {_ea =append (_ea ,_gb .Val );
}else {return nil ,ErrTypeCheck ;};};return _ea ,nil ;};

// Exec executes the program, typically leaving output values on the stack.
func (_ga *PSProgram )Exec (stack *PSStack )error {for _ ,_bab :=range *_ga {var _fg error ;switch _dgf :=_bab .(type ){case *PSInteger :_fe :=_dgf ;_fg =stack .Push (_fe );case *PSReal :_edd :=_dgf ;_fg =stack .Push (_edd );case *PSBoolean :_fa :=_dgf ;
_fg =stack .Push (_fa );case *PSProgram :_fcc :=_dgf ;_fg =stack .Push (_fcc );case *PSOperand :_dfd :=_dgf ;_fg =_dfd .Exec (stack );default:return ErrTypeCheck ;};if _fg !=nil {return _fg ;};};return nil ;};func (_eafg *PSParser )parseBool ()(*PSBoolean ,error ){_ded ,_fabd :=_eafg ._ebac .Peek (4);
if _fabd !=nil {return MakeBool (false ),_fabd ;};if (len (_ded )>=4)&&(string (_ded [:4])=="\u0074\u0072\u0075\u0065"){_eafg ._ebac .Discard (4);return MakeBool (true ),nil ;};_ded ,_fabd =_eafg ._ebac .Peek (5);if _fabd !=nil {return MakeBool (false ),_fabd ;
};if (len (_ded )>=5)&&(string (_ded [:5])=="\u0066\u0061\u006cs\u0065"){_eafg ._ebac .Discard (5);return MakeBool (false ),nil ;};return MakeBool (false ),_f .New ("\u0075n\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0062o\u006fl\u0065a\u006e\u0020\u0073\u0074\u0072\u0069\u006eg");
};func (_bb *PSReal )Duplicate ()PSObject {_fd :=PSReal {};_fd .Val =_bb .Val ;return &_fd };func (_daa *PSOperand )ge (_edf *PSStack )error {_gecg ,_adc :=_edf .PopNumberAsFloat64 ();if _adc !=nil {return _adc ;};_efc ,_adc :=_edf .PopNumberAsFloat64 ();
if _adc !=nil {return _adc ;};if _fc .Abs (_efc -_gecg )< _d {_fff :=_edf .Push (MakeBool (true ));return _fff ;}else if _efc > _gecg {_cea :=_edf .Push (MakeBool (true ));return _cea ;}else {_geb :=_edf .Push (MakeBool (false ));return _geb ;};};func (_eggb *PSOperand )ne (_ffd *PSStack )error {_gdda :=_eggb .eq (_ffd );
if _gdda !=nil {return _gdda ;};_gdda =_eggb .not (_ffd );return _gdda ;};func (_bec *PSOperand )ceiling (_ebg *PSStack )error {_feb ,_gca :=_ebg .Pop ();if _gca !=nil {return _gca ;};if _egeg ,_ffc :=_feb .(*PSReal );_ffc {_gca =_ebg .Push (MakeReal (_fc .Ceil (_egeg .Val )));
}else if _fggb ,_cgg :=_feb .(*PSInteger );_cgg {_gca =_ebg .Push (MakeInteger (_fggb .Val ));}else {_gca =ErrTypeCheck ;};return _gca ;};func (_bbc *PSOperand )log (_cefg *PSStack )error {_aecd ,_gcga :=_cefg .PopNumberAsFloat64 ();if _gcga !=nil {return _gcga ;
};_acc :=_fc .Log10 (_aecd );_gcga =_cefg .Push (MakeReal (_acc ));return _gcga ;};

// Empty empties the stack.
func (_dbge *PSStack )Empty (){*_dbge =[]PSObject {}};

// DebugString returns a descriptive string representation of the stack - intended for debugging.
func (_egca *PSStack )DebugString ()string {_daag :="\u005b\u0020";for _ ,_abbc :=range *_egca {_daag +=_abbc .DebugString ();_daag +="\u0020";};_daag +="\u005d";return _daag ;};

// MakeBool returns a new PSBoolean object initialized with `val`.
func MakeBool (val bool )*PSBoolean {_ged :=PSBoolean {};_ged .Val =val ;return &_ged };func (_def *PSOperand )pop (_fdccc *PSStack )error {_ ,_dcgc :=_fdccc .Pop ();if _dcgc !=nil {return _dcgc ;};return nil ;};func (_daea *PSOperand )lt (_edde *PSStack )error {_gbfe ,_dfb :=_edde .PopNumberAsFloat64 ();
if _dfb !=nil {return _dfb ;};_bgab ,_dfb :=_edde .PopNumberAsFloat64 ();if _dfb !=nil {return _dfb ;};if _fc .Abs (_bgab -_gbfe )< _d {_aab :=_edde .Push (MakeBool (false ));return _aab ;}else if _bgab < _gbfe {_caa :=_edde .Push (MakeBool (true ));return _caa ;
}else {_fcd :=_edde .Push (MakeBool (false ));return _fcd ;};};var ErrRangeCheck =_f .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");

// NewPSProgram returns an empty, initialized PSProgram.
func NewPSProgram ()*PSProgram {return &PSProgram {}};func (_ab *PSReal )DebugString ()string {return _gcb .Sprintf ("\u0072e\u0061\u006c\u003a\u0025\u002e\u0035f",_ab .Val );};func (_fgbe *PSParser )skipComments ()error {if _ ,_ggf :=_fgbe .skipSpaces ();
_ggf !=nil {return _ggf ;};_cgaf :=true ;for {_gded ,_gddg :=_fgbe ._ebac .Peek (1);if _gddg !=nil {_a .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_gddg .Error ());return _gddg ;};if _cgaf &&_gded [0]!='%'{return nil ;};_cgaf =false ;
if (_gded [0]!='\r')&&(_gded [0]!='\n'){_fgbe ._ebac .ReadByte ();}else {break ;};};return _fgbe .skipComments ();};func (_dg *PSProgram )Duplicate ()PSObject {_bf :=&PSProgram {};for _ ,_aag :=range *_dg {_bf .Append (_aag .Duplicate ());};return _bf ;
};func (_gdbf *PSParser )parseFunction ()(*PSProgram ,error ){_bebf ,_ :=_gdbf ._ebac .ReadByte ();if _bebf !='{'{return nil ,_f .New ("\u0069\u006ev\u0061\u006c\u0069d\u0020\u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e");};_baab :=NewPSProgram ();for {_gdbf .skipSpaces ();
_gdbf .skipComments ();_cebe ,_ecca :=_gdbf ._ebac .Peek (2);if _ecca !=nil {if _ecca ==_c .EOF {break ;};return nil ,_ecca ;};_a .Log .Trace ("\u0050e\u0065k\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u003a\u0020\u0025\u0073",string (_cebe ));if _cebe [0]=='}'{_a .Log .Trace ("\u0045\u004f\u0046 \u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e");
_gdbf ._ebac .ReadByte ();break ;}else if _cebe [0]=='{'{_a .Log .Trace ("\u0046u\u006e\u0063\u0074\u0069\u006f\u006e!");_daf ,_bfd :=_gdbf .parseFunction ();if _bfd !=nil {return nil ,_bfd ;};_baab .Append (_daf );}else if _ag .IsDecimalDigit (_cebe [0])||(_cebe [0]=='-'&&_ag .IsDecimalDigit (_cebe [1])){_a .Log .Trace ("\u002d>\u004e\u0075\u006d\u0062\u0065\u0072!");
_gdcc ,_gab :=_gdbf .parseNumber ();if _gab !=nil {return nil ,_gab ;};_baab .Append (_gdcc );}else {_a .Log .Trace ("\u002d>\u004fp\u0065\u0072\u0061\u006e\u0064 \u006f\u0072 \u0062\u006f\u006f\u006c\u003f");_cebe ,_ =_gdbf ._ebac .Peek (5);_aaba :=string (_cebe );
_a .Log .Trace ("\u0050\u0065\u0065k\u0020\u0073\u0074\u0072\u003a\u0020\u0025\u0073",_aaba );if (len (_aaba )> 4)&&(_aaba [:5]=="\u0066\u0061\u006cs\u0065"){_bea ,_cfdd :=_gdbf .parseBool ();if _cfdd !=nil {return nil ,_cfdd ;};_baab .Append (_bea );}else if (len (_aaba )> 3)&&(_aaba [:4]=="\u0074\u0072\u0075\u0065"){_gdbfc ,_gbgg :=_gdbf .parseBool ();
if _gbgg !=nil {return nil ,_gbgg ;};_baab .Append (_gdbfc );}else {_cbgf ,_bdbe :=_gdbf .parseOperand ();if _bdbe !=nil {return nil ,_bdbe ;};_baab .Append (_cbgf );};};};return _baab ,nil ;};

// PSStack defines a stack of PSObjects. PSObjects can be pushed on or pull from the stack.
type PSStack []PSObject ;func (_cdg *PSParser )parseOperand ()(*PSOperand ,error ){var _ggdf []byte ;for {_cabb ,_edaf :=_cdg ._ebac .Peek (1);if _edaf !=nil {if _edaf ==_c .EOF {break ;};return nil ,_edaf ;};if _ag .IsDelimiter (_cabb [0]){break ;};if _ag .IsWhiteSpace (_cabb [0]){break ;
};_egb ,_ :=_cdg ._ebac .ReadByte ();_ggdf =append (_ggdf ,_egb );};if len (_ggdf )==0{return nil ,_f .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064\u0020\u0028\u0065\u006d\u0070\u0074\u0079\u0029");};return MakeOperand (string (_ggdf )),nil ;
};

// PSReal represents a real number.
type PSReal struct{Val float64 ;};