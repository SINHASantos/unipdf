//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package ps implements various functionalities needed for handling Postscript for PDF uses, in particular
// for PDF function type 4.
//
// Package ps implements various functionalities needed for handling Postscript for PDF uses, in particular
// for PDF function type 4.
package ps ;import (_f "bufio";_c "bytes";_bg "errors";_bc "fmt";_e "github.com/unidoc/unipdf/v3/common";_d "github.com/unidoc/unipdf/v3/core";_g "io";_ff "math";);func (_fedaf *PSOperand )index (_eae *PSStack )error {_eedf ,_cbeb :=_eae .Pop ();if _cbeb !=nil {return _cbeb ;
};_adde ,_abg :=_eedf .(*PSInteger );if !_abg {return ErrTypeCheck ;};if _adde .Val < 0{return ErrRangeCheck ;};if _adde .Val > len (*_eae )-1{return ErrStackUnderflow ;};_dggc :=(*_eae )[len (*_eae )-1-_adde .Val ];_cbeb =_eae .Push (_dggc .Duplicate ());
return _cbeb ;};func (_aedgg *PSOperand )round (_fcdg *PSStack )error {_cbff ,_ffab :=_fcdg .Pop ();if _ffab !=nil {return _ffab ;};if _ffbd ,_gde :=_cbff .(*PSReal );_gde {_ffab =_fcdg .Push (MakeReal (_ff .Floor (_ffbd .Val +0.5)));}else if _eegc ,_bgeg :=_cbff .(*PSInteger );
_bgeg {_ffab =_fcdg .Push (MakeInteger (_eegc .Val ));}else {return ErrTypeCheck ;};return _ffab ;};func (_df *PSInteger )Duplicate ()PSObject {_gg :=PSInteger {};_gg .Val =_df .Val ;return &_gg };func (_fde *PSOperand )idiv (_baa *PSStack )error {_eef ,_aeg :=_baa .Pop ();
if _aeg !=nil {return _aeg ;};_adg ,_aeg :=_baa .Pop ();if _aeg !=nil {return _aeg ;};_ffec ,_eeg :=_eef .(*PSInteger );if !_eeg {return ErrTypeCheck ;};if _ffec .Val ==0{return ErrUndefinedResult ;};_cbgf ,_eeg :=_adg .(*PSInteger );if !_eeg {return ErrTypeCheck ;
};_gff :=_cbgf .Val /_ffec .Val ;_aeg =_baa .Push (MakeInteger (_gff ));return _aeg ;};

// NewPSProgram returns an empty, initialized PSProgram.
func NewPSProgram ()*PSProgram {return &PSProgram {}};func (_abb *PSOperand )atan (_cdc *PSStack )error {_cdb ,_ccf :=_cdc .PopNumberAsFloat64 ();if _ccf !=nil {return _ccf ;};_fadb ,_ccf :=_cdc .PopNumberAsFloat64 ();if _ccf !=nil {return _ccf ;};if _cdb ==0{var _bac error ;
if _fadb < 0{_bac =_cdc .Push (MakeReal (270));}else {_bac =_cdc .Push (MakeReal (90));};return _bac ;};_acbd :=_fadb /_cdb ;_geab :=_ff .Atan (_acbd )*180/_ff .Pi ;_ccf =_cdc .Push (MakeReal (_geab ));return _ccf ;};func (_fedafe *PSOperand )lt (_adgg *PSStack )error {_cab ,_aagf :=_adgg .PopNumberAsFloat64 ();
if _aagf !=nil {return _aagf ;};_eeeb ,_aagf :=_adgg .PopNumberAsFloat64 ();if _aagf !=nil {return _aagf ;};if _ff .Abs (_eeeb -_cab )< _cd {_cba :=_adgg .Push (MakeBool (false ));return _cba ;}else if _eeeb < _cab {_dfd :=_adgg .Push (MakeBool (true ));
return _dfd ;}else {_ece :=_adgg .Push (MakeBool (false ));return _ece ;};};func (_bgb *PSOperand )ceiling (_dg *PSStack )error {_fba ,_ffe :=_dg .Pop ();if _ffe !=nil {return _ffe ;};if _aa ,_bgda :=_fba .(*PSReal );_bgda {_ffe =_dg .Push (MakeReal (_ff .Ceil (_aa .Val )));
}else if _daag ,_fae :=_fba .(*PSInteger );_fae {_ffe =_dg .Push (MakeInteger (_daag .Val ));}else {_ffe =ErrTypeCheck ;};return _ffe ;};func (_dff *PSReal )DebugString ()string {return _bc .Sprintf ("\u0072e\u0061\u006c\u003a\u0025\u002e\u0035f",_dff .Val );
};func (_egd *PSOperand )le (_gfec *PSStack )error {_dcg ,_gafcd :=_gfec .PopNumberAsFloat64 ();if _gafcd !=nil {return _gafcd ;};_cfba ,_gafcd :=_gfec .PopNumberAsFloat64 ();if _gafcd !=nil {return _gafcd ;};if _ff .Abs (_cfba -_dcg )< _cd {_ege :=_gfec .Push (MakeBool (true ));
return _ege ;}else if _cfba < _dcg {_ffb :=_gfec .Push (MakeBool (true ));return _ffb ;}else {_ccb :=_gfec .Push (MakeBool (false ));return _ccb ;};};func (_gcda *PSParser )parseFunction ()(*PSProgram ,error ){_feba ,_ :=_gcda ._feg .ReadByte ();if _feba !='{'{return nil ,_bg .New ("\u0069\u006ev\u0061\u006c\u0069d\u0020\u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e");
};_abcg :=NewPSProgram ();for {_gcda .skipSpaces ();_gcda .skipComments ();_ada ,_bba :=_gcda ._feg .Peek (2);if _bba !=nil {if _bba ==_g .EOF {break ;};return nil ,_bba ;};_e .Log .Trace ("\u0050e\u0065k\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u003a\u0020\u0025\u0073",string (_ada ));
if _ada [0]=='}'{_e .Log .Trace ("\u0045\u004f\u0046 \u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e");_gcda ._feg .ReadByte ();break ;}else if _ada [0]=='{'{_e .Log .Trace ("\u0046u\u006e\u0063\u0074\u0069\u006f\u006e!");_fee ,_dfad :=_gcda .parseFunction ();
if _dfad !=nil {return nil ,_dfad ;};_abcg .Append (_fee );}else if _d .IsDecimalDigit (_ada [0])||(_ada [0]=='-'&&_d .IsDecimalDigit (_ada [1])){_e .Log .Trace ("\u002d>\u004e\u0075\u006d\u0062\u0065\u0072!");_aaae ,_aea :=_gcda .parseNumber ();if _aea !=nil {return nil ,_aea ;
};_abcg .Append (_aaae );}else {_e .Log .Trace ("\u002d>\u004fp\u0065\u0072\u0061\u006e\u0064 \u006f\u0072 \u0062\u006f\u006f\u006c\u003f");_ada ,_ =_gcda ._feg .Peek (5);_edaa :=string (_ada );_e .Log .Trace ("\u0050\u0065\u0065k\u0020\u0073\u0074\u0072\u003a\u0020\u0025\u0073",_edaa );
if (len (_edaa )> 4)&&(_edaa [:5]=="\u0066\u0061\u006cs\u0065"){_cegd ,_dbbeb :=_gcda .parseBool ();if _dbbeb !=nil {return nil ,_dbbeb ;};_abcg .Append (_cegd );}else if (len (_edaa )> 3)&&(_edaa [:4]=="\u0074\u0072\u0075\u0065"){_fdea ,_bdgb :=_gcda .parseBool ();
if _bdgb !=nil {return nil ,_bdgb ;};_abcg .Append (_fdea );}else {_cdef ,_ceee :=_gcda .parseOperand ();if _ceee !=nil {return nil ,_ceee ;};_abcg .Append (_cdef );};};};return _abcg ,nil ;};

// PSBoolean represents a boolean value.
type PSBoolean struct{Val bool ;};

// Exec executes the operand `op` in the state specified by `stack`.
func (_cf *PSOperand )Exec (stack *PSStack )error {_dba :=ErrUnsupportedOperand ;switch *_cf {case "\u0061\u0062\u0073":_dba =_cf .abs (stack );case "\u0061\u0064\u0064":_dba =_cf .add (stack );case "\u0061\u006e\u0064":_dba =_cf .and (stack );case "\u0061\u0074\u0061\u006e":_dba =_cf .atan (stack );
case "\u0062\u0069\u0074\u0073\u0068\u0069\u0066\u0074":_dba =_cf .bitshift (stack );case "\u0063e\u0069\u006c\u0069\u006e\u0067":_dba =_cf .ceiling (stack );case "\u0063\u006f\u0070\u0079":_dba =_cf .copy (stack );case "\u0063\u006f\u0073":_dba =_cf .cos (stack );
case "\u0063\u0076\u0069":_dba =_cf .cvi (stack );case "\u0063\u0076\u0072":_dba =_cf .cvr (stack );case "\u0064\u0069\u0076":_dba =_cf .div (stack );case "\u0064\u0075\u0070":_dba =_cf .dup (stack );case "\u0065\u0071":_dba =_cf .eq (stack );case "\u0065\u0078\u0063\u0068":_dba =_cf .exch (stack );
case "\u0065\u0078\u0070":_dba =_cf .exp (stack );case "\u0066\u006c\u006fo\u0072":_dba =_cf .floor (stack );case "\u0067\u0065":_dba =_cf .ge (stack );case "\u0067\u0074":_dba =_cf .gt (stack );case "\u0069\u0064\u0069\u0076":_dba =_cf .idiv (stack );
case "\u0069\u0066":_dba =_cf .ifCondition (stack );case "\u0069\u0066\u0065\u006c\u0073\u0065":_dba =_cf .ifelse (stack );case "\u0069\u006e\u0064e\u0078":_dba =_cf .index (stack );case "\u006c\u0065":_dba =_cf .le (stack );case "\u006c\u006f\u0067":_dba =_cf .log (stack );
case "\u006c\u006e":_dba =_cf .ln (stack );case "\u006c\u0074":_dba =_cf .lt (stack );case "\u006d\u006f\u0064":_dba =_cf .mod (stack );case "\u006d\u0075\u006c":_dba =_cf .mul (stack );case "\u006e\u0065":_dba =_cf .ne (stack );case "\u006e\u0065\u0067":_dba =_cf .neg (stack );
case "\u006e\u006f\u0074":_dba =_cf .not (stack );case "\u006f\u0072":_dba =_cf .or (stack );case "\u0070\u006f\u0070":_dba =_cf .pop (stack );case "\u0072\u006f\u0075n\u0064":_dba =_cf .round (stack );case "\u0072\u006f\u006c\u006c":_dba =_cf .roll (stack );
case "\u0073\u0069\u006e":_dba =_cf .sin (stack );case "\u0073\u0071\u0072\u0074":_dba =_cf .sqrt (stack );case "\u0073\u0075\u0062":_dba =_cf .sub (stack );case "\u0074\u0072\u0075\u006e\u0063\u0061\u0074\u0065":_dba =_cf .truncate (stack );case "\u0078\u006f\u0072":_dba =_cf .xor (stack );
};return _dba ;};func (_eff *PSReal )Duplicate ()PSObject {_fg :=PSReal {};_fg .Val =_eff .Val ;return &_fg };const _cd =0.000001;func (_dabe *PSOperand )not (_fgda *PSStack )error {_ceeg ,_fffb :=_fgda .Pop ();if _fffb !=nil {return _fffb ;};if _cgf ,_cac :=_ceeg .(*PSBoolean );
_cac {_fffb =_fgda .Push (MakeBool (!_cgf .Val ));return _fffb ;}else if _gfef ,_egdd :=_ceeg .(*PSInteger );_egdd {_fffb =_fgda .Push (MakeInteger (^_gfef .Val ));return _fffb ;}else {return ErrTypeCheck ;};};func (_agc *PSOperand )ln (_bdg *PSStack )error {_eede ,_dbab :=_bdg .PopNumberAsFloat64 ();
if _dbab !=nil {return _dbab ;};_cdd :=_ff .Log (_eede );_dbab =_bdg .Push (MakeReal (_cdd ));return _dbab ;};

// PSProgram defines a Postscript program which is a series of PS objects (arguments, commands, programs etc).
type PSProgram []PSObject ;func (_caeg *PSOperand )sin (_fdc *PSStack )error {_aedgc ,_ccfd :=_fdc .PopNumberAsFloat64 ();if _ccfd !=nil {return _ccfd ;};_abgg :=_ff .Sin (_aedgc *_ff .Pi /180.0);_ccfd =_fdc .Push (MakeReal (_abgg ));return _ccfd ;};func (_ead *PSReal )String ()string {return _bc .Sprintf ("\u0025\u002e\u0035\u0066",_ead .Val )};


// PopNumberAsFloat64 pops and return the numeric value of the top of the stack as a float64.
// Real or integer only.
func (_cgefa *PSStack )PopNumberAsFloat64 ()(float64 ,error ){_ceed ,_ggdd :=_cgefa .Pop ();if _ggdd !=nil {return 0,_ggdd ;};if _ccbd ,_ccfc :=_ceed .(*PSReal );_ccfc {return _ccbd .Val ,nil ;}else if _beea ,_ega :=_ceed .(*PSInteger );_ega {return float64 (_beea .Val ),nil ;
}else {return 0,ErrTypeCheck ;};};func (_bae *PSOperand )bitshift (_eee *PSStack )error {_aga ,_cbc :=_eee .PopInteger ();if _cbc !=nil {return _cbc ;};_bgd ,_cbc :=_eee .PopInteger ();if _cbc !=nil {return _cbc ;};var _fgd int ;if _aga >=0{_fgd =_bgd <<uint (_aga );
}else {_fgd =_bgd >>uint (-_aga );};_cbc =_eee .Push (MakeInteger (_fgd ));return _cbc ;};var ErrUndefinedResult =_bg .New ("\u0075\u006e\u0064\u0065fi\u006e\u0065\u0064\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0065\u0072\u0072o\u0072");func (_fa *PSProgram )Duplicate ()PSObject {_fefd :=&PSProgram {};
for _ ,_bge :=range *_fa {_fefd .Append (_bge .Duplicate ());};return _fefd ;};

// MakeBool returns a new PSBoolean object initialized with `val`.
func MakeBool (val bool )*PSBoolean {_beeb :=PSBoolean {};_beeb .Val =val ;return &_beeb };func (_fef *PSBoolean )DebugString ()string {return _bc .Sprintf ("\u0062o\u006f\u006c\u003a\u0025\u0076",_fef .Val );};

// NewPSExecutor returns an initialized PSExecutor for an input `program`.
func NewPSExecutor (program *PSProgram )*PSExecutor {_fe :=&PSExecutor {};_fe .Stack =NewPSStack ();_fe ._ef =program ;return _fe ;};func (_eac *PSInteger )String ()string {return _bc .Sprintf ("\u0025\u0064",_eac .Val )};func (_gab *PSOperand )and (_daa *PSStack )error {_dd ,_acb :=_daa .Pop ();
if _acb !=nil {return _acb ;};_aff ,_acb :=_daa .Pop ();if _acb !=nil {return _acb ;};if _fff ,_ag :=_dd .(*PSBoolean );_ag {_cdec ,_eea :=_aff .(*PSBoolean );if !_eea {return ErrTypeCheck ;};_acb =_daa .Push (MakeBool (_fff .Val &&_cdec .Val ));return _acb ;
};if _cbg ,_ggd :=_dd .(*PSInteger );_ggd {_beg ,_gea :=_aff .(*PSInteger );if !_gea {return ErrTypeCheck ;};_acb =_daa .Push (MakeInteger (_cbg .Val &_beg .Val ));return _acb ;};return ErrTypeCheck ;};func (_bdbc *PSOperand )add (_ced *PSStack )error {_ggeb ,_eeb :=_ced .Pop ();
if _eeb !=nil {return _eeb ;};_fb ,_eeb :=_ced .Pop ();if _eeb !=nil {return _eeb ;};_fd ,_fgg :=_ggeb .(*PSReal );_dbb ,_fda :=_ggeb .(*PSInteger );if !_fgg &&!_fda {return ErrTypeCheck ;};_cge ,_ba :=_fb .(*PSReal );_bb ,_cgbg :=_fb .(*PSInteger );if !_ba &&!_cgbg {return ErrTypeCheck ;
};if _fda &&_cgbg {_cga :=_dbb .Val +_bb .Val ;_dca :=_ced .Push (MakeInteger (_cga ));return _dca ;};var _dbag float64 ;if _fgg {_dbag =_fd .Val ;}else {_dbag =float64 (_dbb .Val );};if _ba {_dbag +=_cge .Val ;}else {_dbag +=float64 (_bb .Val );};_eeb =_ced .Push (MakeReal (_dbag ));
return _eeb ;};

// Push pushes an object on top of the stack.
func (_abf *PSStack )Push (obj PSObject )error {if len (*_abf )> 100{return ErrStackOverflow ;};*_abf =append (*_abf ,obj );return nil ;};func (_gaf *PSInteger )DebugString ()string {return _bc .Sprintf ("\u0069\u006e\u0074\u003a\u0025\u0064",_gaf .Val );
};func (_ae *PSOperand )cos (_gafa *PSStack )error {_eacb ,_ccfb :=_gafa .PopNumberAsFloat64 ();if _ccfb !=nil {return _ccfb ;};_cgef :=_ff .Cos (_eacb *_ff .Pi /180.0);_ccfb =_gafa .Push (MakeReal (_cgef ));return _ccfb ;};func (_ce *PSBoolean )String ()string {return _bc .Sprintf ("\u0025\u0076",_ce .Val )};


// MakeOperand returns a new PSOperand object based on string `val`.
func MakeOperand (val string )*PSOperand {_eabb :=PSOperand (val );return &_eabb };func (_aecg *PSOperand )sub (_ffge *PSStack )error {_bda ,_eeac :=_ffge .Pop ();if _eeac !=nil {return _eeac ;};_ggg ,_eeac :=_ffge .Pop ();if _eeac !=nil {return _eeac ;
};_ffcb ,_daagb :=_bda .(*PSReal );_fcce ,_dcdg :=_bda .(*PSInteger );if !_daagb &&!_dcdg {return ErrTypeCheck ;};_dagg ,_eaed :=_ggg .(*PSReal );_bbb ,_gffd :=_ggg .(*PSInteger );if !_eaed &&!_gffd {return ErrTypeCheck ;};if _dcdg &&_gffd {_bdd :=_bbb .Val -_fcce .Val ;
_accf :=_ffge .Push (MakeInteger (_bdd ));return _accf ;};var _ffd float64 =0;if _eaed {_ffd =_dagg .Val ;}else {_ffd =float64 (_bbb .Val );};if _daagb {_ffd -=_ffcb .Val ;}else {_ffd -=float64 (_fcce .Val );};_eeac =_ffge .Push (MakeReal (_ffd ));return _eeac ;
};func (_dbad *PSOperand )truncate (_bcdg *PSStack )error {_baac ,_afc :=_bcdg .Pop ();if _afc !=nil {return _afc ;};if _baaf ,_ecd :=_baac .(*PSReal );_ecd {_agfd :=int (_baaf .Val );_afc =_bcdg .Push (MakeReal (float64 (_agfd )));}else if _geb ,_afgc :=_baac .(*PSInteger );
_afgc {_afc =_bcdg .Push (MakeInteger (_geb .Val ));}else {return ErrTypeCheck ;};return _afc ;};func (_gdbe *PSOperand )gt (_feda *PSStack )error {_cegg ,_adb :=_feda .PopNumberAsFloat64 ();if _adb !=nil {return _adb ;};_dbbc ,_adb :=_feda .PopNumberAsFloat64 ();
if _adb !=nil {return _adb ;};if _ff .Abs (_dbbc -_cegg )< _cd {_fgde :=_feda .Push (MakeBool (false ));return _fgde ;}else if _dbbc > _cegg {_aaa :=_feda .Push (MakeBool (true ));return _aaa ;}else {_add :=_feda .Push (MakeBool (false ));return _add ;
};};func (_faf *PSOperand )String ()string {return string (*_faf )};

// PopInteger specificially pops an integer from the top of the stack, returning the value as an int.
func (_bea *PSStack )PopInteger ()(int ,error ){_acf ,_eedd :=_bea .Pop ();if _eedd !=nil {return 0,_eedd ;};if _aagb ,_cbad :=_acf .(*PSInteger );_cbad {return _aagb .Val ,nil ;};return 0,ErrTypeCheck ;};

// PSObject represents a postscript object.
type PSObject interface{

// Duplicate makes a fresh copy of the PSObject.
Duplicate ()PSObject ;

// DebugString returns a descriptive representation of the PSObject with more information than String()
// for debugging purposes.
DebugString ()string ;

// String returns a string representation of the PSObject.
String ()string ;};

// PSObjectArrayToFloat64Array converts []PSObject into a []float64 array. Each PSObject must represent a number,
// otherwise a ErrTypeCheck error occurs.
func PSObjectArrayToFloat64Array (objects []PSObject )([]float64 ,error ){var _db []float64 ;for _ ,_cb :=range objects {if _a ,_fc :=_cb .(*PSInteger );_fc {_db =append (_db ,float64 (_a .Val ));}else if _ac ,_ca :=_cb .(*PSReal );_ca {_db =append (_db ,_ac .Val );
}else {return nil ,ErrTypeCheck ;};};return _db ,nil ;};func (_bfc *PSOperand )eq (_eeaa *PSStack )error {_bbe ,_abbb :=_eeaa .Pop ();if _abbb !=nil {return _abbb ;};_cfb ,_abbb :=_eeaa .Pop ();if _abbb !=nil {return _abbb ;};_abda ,_daaa :=_bbe .(*PSBoolean );
_dcf ,_bcc :=_cfb .(*PSBoolean );if _daaa ||_bcc {var _ad error ;if _daaa &&_bcc {_ad =_eeaa .Push (MakeBool (_abda .Val ==_dcf .Val ));}else {_ad =_eeaa .Push (MakeBool (false ));};return _ad ;};var _ceg float64 ;var _fdac float64 ;if _fea ,_de :=_bbe .(*PSInteger );
_de {_ceg =float64 (_fea .Val );}else if _afb ,_cfbd :=_bbe .(*PSReal );_cfbd {_ceg =_afb .Val ;}else {return ErrTypeCheck ;};if _gec ,_dgf :=_cfb .(*PSInteger );_dgf {_fdac =float64 (_gec .Val );}else if _bfe ,_cbfa :=_cfb .(*PSReal );_cbfa {_fdac =_bfe .Val ;
}else {return ErrTypeCheck ;};if _ff .Abs (_fdac -_ceg )< _cd {_abbb =_eeaa .Push (MakeBool (true ));}else {_abbb =_eeaa .Push (MakeBool (false ));};return _abbb ;};

// Empty empties the stack.
func (_bdaa *PSStack )Empty (){*_bdaa =[]PSObject {}};func (_gfb *PSOperand )ge (_cced *PSStack )error {_eb ,_bbda :=_cced .PopNumberAsFloat64 ();if _bbda !=nil {return _bbda ;};_fbb ,_bbda :=_cced .PopNumberAsFloat64 ();if _bbda !=nil {return _bbda ;};
if _ff .Abs (_fbb -_eb )< _cd {_gfbg :=_cced .Push (MakeBool (true ));return _gfbg ;}else if _fbb > _eb {_bccf :=_cced .Push (MakeBool (true ));return _bccf ;}else {_cbfc :=_cced .Push (MakeBool (false ));return _cbfc ;};};func (_gfea *PSOperand )or (_bgef *PSStack )error {_ecc ,_gcb :=_bgef .Pop ();
if _gcb !=nil {return _gcb ;};_bbee ,_gcb :=_bgef .Pop ();if _gcb !=nil {return _gcb ;};if _cded ,_dbbcd :=_ecc .(*PSBoolean );_dbbcd {_dfa ,_cada :=_bbee .(*PSBoolean );if !_cada {return ErrTypeCheck ;};_gcb =_bgef .Push (MakeBool (_cded .Val ||_dfa .Val ));
return _gcb ;};if _agf ,_febb :=_ecc .(*PSInteger );_febb {_feae ,_edag :=_bbee .(*PSInteger );if !_edag {return ErrTypeCheck ;};_gcb =_bgef .Push (MakeInteger (_agf .Val |_feae .Val ));return _gcb ;};return ErrTypeCheck ;};

// Parse parses the postscript and store as a program that can be executed.
func (_adgf *PSParser )Parse ()(*PSProgram ,error ){_adgf .skipSpaces ();_edcf ,_cfac :=_adgf ._feg .Peek (2);if _cfac !=nil {return nil ,_cfac ;};if _edcf [0]!='{'{return nil ,_bg .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0053\u0020\u0050\u0072\u006f\u0067\u0072\u0061\u006d\u0020\u006e\u006f\u0074\u0020\u0073t\u0061\u0072\u0074\u0069\u006eg\u0020\u0077i\u0074\u0068\u0020\u007b");
};_agbdb ,_cfac :=_adgf .parseFunction ();if _cfac !=nil &&_cfac !=_g .EOF {return nil ,_cfac ;};return _agbdb ,_cfac ;};func (_fdg *PSOperand )floor (_gdb *PSStack )error {_aedg ,_fdgc :=_gdb .Pop ();if _fdgc !=nil {return _fdgc ;};if _def ,_cce :=_aedg .(*PSReal );
_cce {_fdgc =_gdb .Push (MakeReal (_ff .Floor (_def .Val )));}else if _edc ,_cda :=_aedg .(*PSInteger );_cda {_fdgc =_gdb .Push (MakeInteger (_edc .Val ));}else {return ErrTypeCheck ;};return _fdgc ;};func (_cdf *PSOperand )cvr (_efg *PSStack )error {_ecge ,_bbd :=_efg .Pop ();
if _bbd !=nil {return _bbd ;};if _aef ,_gced :=_ecge .(*PSReal );_gced {_bbd =_efg .Push (MakeReal (_aef .Val ));}else if _agb ,_cbf :=_ecge .(*PSInteger );_cbf {_bbd =_efg .Push (MakeReal (float64 (_agb .Val )));}else {return ErrTypeCheck ;};return _bbd ;
};func (_daagg *PSOperand )exch (_cgefd *PSStack )error {_fdd ,_aed :=_cgefd .Pop ();if _aed !=nil {return _aed ;};_gcca ,_aed :=_cgefd .Pop ();if _aed !=nil {return _aed ;};_aed =_cgefd .Push (_fdd );if _aed !=nil {return _aed ;};_aed =_cgefd .Push (_gcca );
return _aed ;};func (_ggdc *PSOperand )neg (_efde *PSStack )error {_gfeef ,_bgdc :=_efde .Pop ();if _bgdc !=nil {return _bgdc ;};if _ffc ,_cdag :=_gfeef .(*PSReal );_cdag {_bgdc =_efde .Push (MakeReal (-_ffc .Val ));return _bgdc ;}else if _adbc ,_ccef :=_gfeef .(*PSInteger );
_ccef {_bgdc =_efde .Push (MakeInteger (-_adbc .Val ));return _bgdc ;}else {return ErrTypeCheck ;};};

// NewPSParser returns a new instance of the PDF Postscript parser from input data.
func NewPSParser (content []byte )*PSParser {_dfdb :=PSParser {};_cfcf :=_c .NewBuffer (content );_dfdb ._feg =_f .NewReader (_cfcf );return &_dfdb ;};var ErrUnsupportedOperand =_bg .New ("\u0075\u006e\u0073\u0075pp\u006f\u0072\u0074\u0065\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");


// PSReal represents a real number.
type PSReal struct{Val float64 ;};func (_ggc *PSOperand )ne (_aae *PSStack )error {_bfed :=_ggc .eq (_aae );if _bfed !=nil {return _bfed ;};_bfed =_ggc .not (_aae );return _bfed ;};func (_cfa *PSOperand )pop (_ffgg *PSStack )error {_ ,_cdad :=_ffgg .Pop ();
if _cdad !=nil {return _cdad ;};return nil ;};func (_fga *PSOperand )DebugString ()string {return _bc .Sprintf ("\u006fp\u003a\u0027\u0025\u0073\u0027",*_fga );};func _faa (_dgc int )int {if _dgc < 0{return -_dgc ;};return _dgc ;};func (_dgg *PSOperand )cvi (_daaga *PSStack )error {_dbbe ,_gabc :=_daaga .Pop ();
if _gabc !=nil {return _gabc ;};if _abc ,_efd :=_dbbe .(*PSReal );_efd {_dac :=int (_abc .Val );_gabc =_daaga .Push (MakeInteger (_dac ));}else if _gcc ,_ecg :=_dbbe .(*PSInteger );_ecg {_bgc :=_gcc .Val ;_gabc =_daaga .Push (MakeInteger (_bgc ));}else {return ErrTypeCheck ;
};return _gabc ;};

// Append appends an object to the PSProgram.
func (_cg *PSProgram )Append (obj PSObject ){*_cg =append (*_cg ,obj )};

// PSExecutor has its own execution stack and is used to executre a PS routine (program).
type PSExecutor struct{Stack *PSStack ;_ef *PSProgram ;};var ErrStackUnderflow =_bg .New ("\u0073t\u0061c\u006b\u0020\u0075\u006e\u0064\u0065\u0072\u0066\u006c\u006f\u0077");var ErrRangeCheck =_bg .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");
func (_fed *PSBoolean )Duplicate ()PSObject {_gf :=PSBoolean {};_gf .Val =_fed .Val ;return &_gf };

// PSInteger represents an integer.
type PSInteger struct{Val int ;};func (_cfae *PSParser )skipComments ()error {if _ ,_bgg :=_cfae .skipSpaces ();_bgg !=nil {return _bgg ;};_cdg :=true ;for {_ceb ,_gcee :=_cfae ._feg .Peek (1);if _gcee !=nil {_e .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_gcee .Error ());
return _gcee ;};if _cdg &&_ceb [0]!='%'{return nil ;};_cdg =false ;if (_ceb [0]!='\r')&&(_ceb [0]!='\n'){_cfae ._feg .ReadByte ();}else {break ;};};return _cfae .skipComments ();};func (_eaac *PSParser )parseBool ()(*PSBoolean ,error ){_afcd ,_aecb :=_eaac ._feg .Peek (4);
if _aecb !=nil {return MakeBool (false ),_aecb ;};if (len (_afcd )>=4)&&(string (_afcd [:4])=="\u0074\u0072\u0075\u0065"){_eaac ._feg .Discard (4);return MakeBool (true ),nil ;};_afcd ,_aecb =_eaac ._feg .Peek (5);if _aecb !=nil {return MakeBool (false ),_aecb ;
};if (len (_afcd )>=5)&&(string (_afcd [:5])=="\u0066\u0061\u006cs\u0065"){_eaac ._feg .Discard (5);return MakeBool (false ),nil ;};return MakeBool (false ),_bg .New ("\u0075n\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0062o\u006fl\u0065a\u006e\u0020\u0073\u0074\u0072\u0069\u006eg");
};

// Exec executes the program, typically leaving output values on the stack.
func (_fad *PSProgram )Exec (stack *PSStack )error {for _ ,_gge :=range *_fad {var _gfc error ;switch _bdb :=_gge .(type ){case *PSInteger :_cef :=_bdb ;_gfc =stack .Push (_cef );case *PSReal :_dad :=_bdb ;_gfc =stack .Push (_dad );case *PSBoolean :_afa :=_bdb ;
_gfc =stack .Push (_afa );case *PSProgram :_dbf :=_bdb ;_gfc =stack .Push (_dbf );case *PSOperand :_dab :=_bdb ;_gfc =_dab .Exec (stack );default:return ErrTypeCheck ;};if _gfc !=nil {return _gfc ;};};return nil ;};func (_caf *PSOperand )sqrt (_bbeef *PSStack )error {_ecaa ,_efb :=_bbeef .PopNumberAsFloat64 ();
if _efb !=nil {return _efb ;};if _ecaa < 0{return ErrRangeCheck ;};_fgdg :=_ff .Sqrt (_ecaa );_efb =_bbeef .Push (MakeReal (_fgdg ));return _efb ;};func (_dae *PSOperand )exp (_agbd *PSStack )error {_ecb ,_eeed :=_agbd .PopNumberAsFloat64 ();if _eeed !=nil {return _eeed ;
};_bed ,_eeed :=_agbd .PopNumberAsFloat64 ();if _eeed !=nil {return _eeed ;};if _ff .Abs (_ecb )< 1&&_bed < 0{return ErrUndefinedResult ;};_dgb :=_ff .Pow (_bed ,_ecb );_eeed =_agbd .Push (MakeReal (_dgb ));return _eeed ;};

// String returns a string representation of the stack.
func (_dbbb *PSStack )String ()string {_gaba :="\u005b\u0020";for _ ,_dfac :=range *_dbbb {_gaba +=_dfac .String ();_gaba +="\u0020";};_gaba +="\u005d";return _gaba ;};func (_ab *PSProgram )DebugString ()string {_gb :="\u007b\u0020";for _ ,_bd :=range *_ab {_gb +=_bd .DebugString ();
_gb +="\u0020";};_gb +="\u007d";return _gb ;};func (_bag *PSOperand )xor (_aefe *PSStack )error {_fdeb ,_gbg :=_aefe .Pop ();if _gbg !=nil {return _gbg ;};_gafd ,_gbg :=_aefe .Pop ();if _gbg !=nil {return _gbg ;};if _gbc ,_agg :=_fdeb .(*PSBoolean );_agg {_aac ,_ddb :=_gafd .(*PSBoolean );
if !_ddb {return ErrTypeCheck ;};_gbg =_aefe .Push (MakeBool (_gbc .Val !=_aac .Val ));return _gbg ;};if _cff ,_egdf :=_fdeb .(*PSInteger );_egdf {_bbfd ,_bbed :=_gafd .(*PSInteger );if !_bbed {return ErrTypeCheck ;};_gbg =_aefe .Push (MakeInteger (_cff .Val ^_bbfd .Val ));
return _gbg ;};return ErrTypeCheck ;};

// PSOperand represents a Postscript operand (text string).
type PSOperand string ;

// PSStack defines a stack of PSObjects. PSObjects can be pushed on or pull from the stack.
type PSStack []PSObject ;func (_acc *PSOperand )ifCondition (_agaa *PSStack )error {_cbe ,_eca :=_agaa .Pop ();if _eca !=nil {return _eca ;};_fdb ,_eca :=_agaa .Pop ();if _eca !=nil {return _eca ;};_ecbc ,_bcag :=_cbe .(*PSProgram );if !_bcag {return ErrTypeCheck ;
};_baaa ,_bcag :=_fdb .(*PSBoolean );if !_bcag {return ErrTypeCheck ;};if _baaa .Val {_ccea :=_ecbc .Exec (_agaa );return _ccea ;};return nil ;};func (_bgbg *PSParser )parseOperand ()(*PSOperand ,error ){var _ecae []byte ;for {_caba ,_cbfb :=_bgbg ._feg .Peek (1);
if _cbfb !=nil {if _cbfb ==_g .EOF {break ;};return nil ,_cbfb ;};if _d .IsDelimiter (_caba [0]){break ;};if _d .IsWhiteSpace (_caba [0]){break ;};_bbfdc ,_ :=_bgbg ._feg .ReadByte ();_ecae =append (_ecae ,_bbfdc );};if len (_ecae )==0{return nil ,_bg .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064\u0020\u0028\u0065\u006d\u0070\u0074\u0079\u0029");
};return MakeOperand (string (_ecae )),nil ;};

// MakeInteger returns a new PSInteger object initialized with `val`.
func MakeInteger (val int )*PSInteger {_bdf :=PSInteger {};_bdf .Val =val ;return &_bdf };func (_fefdc *PSOperand )roll (_ddd *PSStack )error {_aced ,_gba :=_ddd .Pop ();if _gba !=nil {return _gba ;};_gcd ,_gba :=_ddd .Pop ();if _gba !=nil {return _gba ;
};_cfec ,_cfda :=_aced .(*PSInteger );if !_cfda {return ErrTypeCheck ;};_dag ,_cfda :=_gcd .(*PSInteger );if !_cfda {return ErrTypeCheck ;};if _dag .Val < 0{return ErrRangeCheck ;};if _dag .Val ==0||_dag .Val ==1{return nil ;};if _dag .Val > len (*_ddd ){return ErrStackUnderflow ;
};for _fdad :=0;_fdad < _faa (_cfec .Val );_fdad ++{var _bgbf []PSObject ;_bgbf =(*_ddd )[len (*_ddd )-(_dag .Val ):len (*_ddd )];if _cfec .Val > 0{_dbfa :=_bgbf [len (_bgbf )-1];_bgbf =append ([]PSObject {_dbfa },_bgbf [0:len (_bgbf )-1]...);}else {_gfcg :=_bgbf [len (_bgbf )-_dag .Val ];
_bgbf =append (_bgbf [1:],_gfcg );};_cfc :=append ((*_ddd )[0:len (*_ddd )-_dag .Val ],_bgbf ...);_ddd =&_cfc ;};return nil ;};func (_eged *PSOperand )mod (_eda *PSStack )error {_beb ,_eadc :=_eda .Pop ();if _eadc !=nil {return _eadc ;};_cadf ,_eadc :=_eda .Pop ();
if _eadc !=nil {return _eadc ;};_bff ,_bcd :=_beb .(*PSInteger );if !_bcd {return ErrTypeCheck ;};if _bff .Val ==0{return ErrUndefinedResult ;};_bedb ,_bcd :=_cadf .(*PSInteger );if !_bcd {return ErrTypeCheck ;};_ccbc :=_bedb .Val %_bff .Val ;_eadc =_eda .Push (MakeInteger (_ccbc ));
return _eadc ;};func (_cgg *PSOperand )dup (_bfd *PSStack )error {_efgd ,_afe :=_bfd .Pop ();if _afe !=nil {return _afe ;};_afe =_bfd .Push (_efgd );if _afe !=nil {return _afe ;};_afe =_bfd .Push (_efgd .Duplicate ());return _afe ;};

// NewPSStack returns an initialized PSStack.
func NewPSStack ()*PSStack {return &PSStack {}};

// MakeReal returns a new PSReal object initialized with `val`.
func MakeReal (val float64 )*PSReal {_fgb :=PSReal {};_fgb .Val =val ;return &_fgb };func (_eaa *PSOperand )copy (_gd *PSStack )error {_gc ,_gce :=_gd .PopInteger ();if _gce !=nil {return _gce ;};if _gc < 0{return ErrRangeCheck ;};if _gc > len (*_gd ){return ErrRangeCheck ;
};*_gd =append (*_gd ,(*_gd )[len (*_gd )-_gc :]...);return nil ;};

// Execute executes the program for an input parameters `objects` and returns a slice of output objects.
func (_dc *PSExecutor )Execute (objects []PSObject )([]PSObject ,error ){for _ ,_af :=range objects {_ee :=_dc .Stack .Push (_af );if _ee !=nil {return nil ,_ee ;};};_bf :=_dc ._ef .Exec (_dc .Stack );if _bf !=nil {_e .Log .Debug ("\u0045x\u0065c\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_bf );
return nil ,_bf ;};_ga :=[]PSObject (*_dc .Stack );_dc .Stack .Empty ();return _ga ,nil ;};func (_eaf *PSProgram )String ()string {_cde :="\u007b\u0020";for _ ,_da :=range *_eaf {_cde +=_da .String ();_cde +="\u0020";};_cde +="\u007d";return _cde ;};

// Pop pops an object from the top of the stack.
func (_dabf *PSStack )Pop ()(PSObject ,error ){if len (*_dabf )< 1{return nil ,ErrStackUnderflow ;};_ede :=(*_dabf )[len (*_dabf )-1];*_dabf =(*_dabf )[0:len (*_dabf )-1];return _ede ,nil ;};

// PSParser is a basic Postscript parser.
type PSParser struct{_feg *_f .Reader };func (_ceaf *PSOperand )abs (_abd *PSStack )error {_be ,_eacd :=_abd .Pop ();if _eacd !=nil {return _eacd ;};if _fab ,_ec :=_be .(*PSReal );_ec {_eed :=_fab .Val ;if _eed < 0{_eacd =_abd .Push (MakeReal (-_eed ));
}else {_eacd =_abd .Push (MakeReal (_eed ));};}else if _ed ,_cgbc :=_be .(*PSInteger );_cgbc {_ffa :=_ed .Val ;if _ffa < 0{_eacd =_abd .Push (MakeInteger (-_ffa ));}else {_eacd =_abd .Push (MakeInteger (_ffa ));};}else {return ErrTypeCheck ;};return _eacd ;
};func (_bad *PSOperand )div (_dcd *PSStack )error {_ddg ,_ace :=_dcd .Pop ();if _ace !=nil {return _ace ;};_gda ,_ace :=_dcd .Pop ();if _ace !=nil {return _ace ;};_ccg ,_dgd :=_ddg .(*PSReal );_eada ,_afg :=_ddg .(*PSInteger );if !_dgd &&!_afg {return ErrTypeCheck ;
};if _dgd &&_ccg .Val ==0{return ErrUndefinedResult ;};if _afg &&_eada .Val ==0{return ErrUndefinedResult ;};_bca ,_gfe :=_gda .(*PSReal );_cad ,_gee :=_gda .(*PSInteger );if !_gfe &&!_gee {return ErrTypeCheck ;};var _gceb float64 ;if _gfe {_gceb =_bca .Val ;
}else {_gceb =float64 (_cad .Val );};if _dgd {_gceb /=_ccg .Val ;}else {_gceb /=float64 (_eada .Val );};_ace =_dcd .Push (MakeReal (_gceb ));return _ace ;};var ErrTypeCheck =_bg .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");
func (_adbe *PSParser )parseNumber ()(PSObject ,error ){_efbf ,_afce :=_d .ParseNumber (_adbe ._feg );if _afce !=nil {return nil ,_afce ;};switch _dbg :=_efbf .(type ){case *_d .PdfObjectFloat :return MakeReal (float64 (*_dbg )),nil ;case *_d .PdfObjectInteger :return MakeInteger (int (*_dbg )),nil ;
};return nil ,_bc .Errorf ("\u0075n\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_efbf );};func (_abgc *PSOperand )log (_gfeb *PSStack )error {_cfd ,_cee :=_gfeb .PopNumberAsFloat64 ();
if _cee !=nil {return _cee ;};_dcag :=_ff .Log10 (_cfd );_cee =_gfeb .Push (MakeReal (_dcag ));return _cee ;};func (_fce *PSOperand )mul (_eafc *PSStack )error {_adf ,_bfb :=_eafc .Pop ();if _bfb !=nil {return _bfb ;};_aagff ,_bfb :=_eafc .Pop ();if _bfb !=nil {return _bfb ;
};_cbb ,_abe :=_adf .(*PSReal );_cae ,_afbc :=_adf .(*PSInteger );if !_abe &&!_afbc {return ErrTypeCheck ;};_feac ,_feb :=_aagff .(*PSReal );_gcg ,_cca :=_aagff .(*PSInteger );if !_feb &&!_cca {return ErrTypeCheck ;};if _afbc &&_cca {_fcd :=_cae .Val *_gcg .Val ;
_ffbf :=_eafc .Push (MakeInteger (_fcd ));return _ffbf ;};var _bee float64 ;if _abe {_bee =_cbb .Val ;}else {_bee =float64 (_cae .Val );};if _feb {_bee *=_feac .Val ;}else {_bee *=float64 (_gcg .Val );};_bfb =_eafc .Push (MakeReal (_bee ));return _bfb ;
};var ErrStackOverflow =_bg .New ("\u0073\u0074\u0061\u0063\u006b\u0020\u006f\u0076\u0065r\u0066\u006c\u006f\u0077");func (_fdbe *PSParser )skipSpaces ()(int ,error ){_ffcbe :=0;for {_ebb ,_cbcb :=_fdbe ._feg .Peek (1);if _cbcb !=nil {return 0,_cbcb ;};
if _d .IsWhiteSpace (_ebb [0]){_fdbe ._feg .ReadByte ();_ffcbe ++;}else {break ;};};return _ffcbe ,nil ;};func (_cgc *PSOperand )Duplicate ()PSObject {_fcc :=*_cgc ;return &_fcc };func (_eg *PSOperand )ifelse (_ggeg *PSStack )error {_gfee ,_bbg :=_ggeg .Pop ();
if _bbg !=nil {return _bbg ;};_aag ,_bbg :=_ggeg .Pop ();if _bbg !=nil {return _bbg ;};_bfdc ,_bbg :=_ggeg .Pop ();if _bbg !=nil {return _bbg ;};_bbf ,_aec :=_gfee .(*PSProgram );if !_aec {return ErrTypeCheck ;};_cfe ,_aec :=_aag .(*PSProgram );if !_aec {return ErrTypeCheck ;
};_ffg ,_aec :=_bfdc .(*PSBoolean );if !_aec {return ErrTypeCheck ;};if _ffg .Val {_adda :=_cfe .Exec (_ggeg );return _adda ;};_bbg =_bbf .Exec (_ggeg );return _bbg ;};

// DebugString returns a descriptive string representation of the stack - intended for debugging.
func (_efge *PSStack )DebugString ()string {_gca :="\u005b\u0020";for _ ,_bedd :=range *_efge {_gca +=_bedd .DebugString ();_gca +="\u0020";};_gca +="\u005d";return _gca ;};