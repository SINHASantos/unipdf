//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package ps implements various functionalities needed for handling Postscript for PDF uses, in particular
// for PDF function type 4.
//
// Package ps implements various functionalities needed for handling Postscript for PDF uses, in particular
// for PDF function type 4.
package ps ;import (_e "bufio";_c "bytes";_d "errors";_ba "fmt";_ed "github.com/unidoc/unipdf/v4/common";_de "github.com/unidoc/unipdf/v4/core";_a "io";_bc "math";);func (_fecc *PSOperand )not (_gbbg *PSStack )error {_edbca ,_aba :=_gbbg .Pop ();if _aba !=nil {return _aba ;
};if _feg ,_bdg :=_edbca .(*PSBoolean );_bdg {_aba =_gbbg .Push (MakeBool (!_feg .Val ));return _aba ;}else if _cgc ,_baaa :=_edbca .(*PSInteger );_baaa {_aba =_gbbg .Push (MakeInteger (^_cgc .Val ));return _aba ;}else {return ErrTypeCheck ;};};

// PSExecutor has its own execution stack and is used to executre a PS routine (program).
type PSExecutor struct{Stack *PSStack ;_da *PSProgram ;};func (_dgg *PSOperand )index (_aed *PSStack )error {_fef ,_gde :=_aed .Pop ();if _gde !=nil {return _gde ;};_cdd ,_bef :=_fef .(*PSInteger );if !_bef {return ErrTypeCheck ;};if _cdd .Val < 0{return ErrRangeCheck ;
};if _cdd .Val > len (*_aed )-1{return ErrStackUnderflow ;};_bad :=(*_aed )[len (*_aed )-1-_cdd .Val ];_gde =_aed .Push (_bad .Duplicate ());return _gde ;};func (_fged *PSOperand )sin (_fbg *PSStack )error {_dcb ,_ded :=_fbg .PopNumberAsFloat64 ();if _ded !=nil {return _ded ;
};_fecb :=_bc .Sin (_dcb *_bc .Pi /180.0);_ded =_fbg .Push (MakeReal (_fecb ));return _ded ;};

// NewPSParser returns a new instance of the PDF Postscript parser from input data.
func NewPSParser (content []byte )*PSParser {_cbad :=PSParser {};_cdc :=_c .NewBuffer (content );_cbad ._ffaec =_e .NewReader (_cdc );return &_cbad ;};var ErrTypeCheck =_d .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");


// PSProgram defines a Postscript program which is a series of PS objects (arguments, commands, programs etc).
type PSProgram []PSObject ;func (_gac *PSOperand )pop (_cff *PSStack )error {_ ,_dba :=_cff .Pop ();if _dba !=nil {return _dba ;};return nil ;};func (_cad *PSOperand )ge (_fgec *PSStack )error {_gecf ,_acg :=_fgec .PopNumberAsFloat64 ();if _acg !=nil {return _acg ;
};_fgg ,_acg :=_fgec .PopNumberAsFloat64 ();if _acg !=nil {return _acg ;};if _bc .Abs (_fgg -_gecf )< _eg {_aega :=_fgec .Push (MakeBool (true ));return _aega ;}else if _fgg > _gecf {_fdgg :=_fgec .Push (MakeBool (true ));return _fdgg ;}else {_eba :=_fgec .Push (MakeBool (false ));
return _eba ;};};

// Pop pops an object from the top of the stack.
func (_gbfec *PSStack )Pop ()(PSObject ,error ){if len (*_gbfec )< 1{return nil ,ErrStackUnderflow ;};_ceac :=(*_gbfec )[len (*_gbfec )-1];*_gbfec =(*_gbfec )[0:len (*_gbfec )-1];return _ceac ,nil ;};func (_ee *PSBoolean )Duplicate ()PSObject {_dd :=PSBoolean {};
_dd .Val =_ee .Val ;return &_dd };func (_fc *PSInteger )Duplicate ()PSObject {_fa :=PSInteger {};_fa .Val =_fc .Val ;return &_fa };

// PSOperand represents a Postscript operand (text string).
type PSOperand string ;var ErrRangeCheck =_d .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");func (_ae *PSProgram )Duplicate ()PSObject {_abf :=&PSProgram {};for _ ,_fg :=range *_ae {_abf .Append (_fg .Duplicate ());
};return _abf ;};func (_cccc *PSOperand )lt (_bgcg *PSStack )error {_agce ,_gad :=_bgcg .PopNumberAsFloat64 ();if _gad !=nil {return _gad ;};_dge ,_gad :=_bgcg .PopNumberAsFloat64 ();if _gad !=nil {return _gad ;};if _bc .Abs (_dge -_agce )< _eg {_aga :=_bgcg .Push (MakeBool (false ));
return _aga ;}else if _dge < _agce {_dcf :=_bgcg .Push (MakeBool (true ));return _dcf ;}else {_dca :=_bgcg .Push (MakeBool (false ));return _dca ;};};

// PSParser is a basic Postscript parser.
type PSParser struct{_ffaec *_e .Reader };func (_bee *PSOperand )mul (_fcd *PSStack )error {_fadb ,_gef :=_fcd .Pop ();if _gef !=nil {return _gef ;};_afg ,_gef :=_fcd .Pop ();if _gef !=nil {return _gef ;};_agcf ,_fcaa :=_fadb .(*PSReal );_cafe ,_acf :=_fadb .(*PSInteger );
if !_fcaa &&!_acf {return ErrTypeCheck ;};_ffd ,_egff :=_afg .(*PSReal );_bfd ,_gefg :=_afg .(*PSInteger );if !_egff &&!_gefg {return ErrTypeCheck ;};if _acf &&_gefg {_ggb :=_cafe .Val *_bfd .Val ;_edee :=_fcd .Push (MakeInteger (_ggb ));return _edee ;
};var _gade float64 ;if _fcaa {_gade =_agcf .Val ;}else {_gade =float64 (_cafe .Val );};if _egff {_gade *=_ffd .Val ;}else {_gade *=float64 (_bfd .Val );};_gef =_fcd .Push (MakeReal (_gade ));return _gef ;};func (_ef *PSInteger )DebugString ()string {return _ba .Sprintf ("\u0069\u006e\u0074\u003a\u0025\u0064",_ef .Val );
};func (_bbce *PSOperand )xor (_agg *PSStack )error {_dbe ,_efcaa :=_agg .Pop ();if _efcaa !=nil {return _efcaa ;};_ebaa ,_efcaa :=_agg .Pop ();if _efcaa !=nil {return _efcaa ;};if _ggbe ,_cgdb :=_dbe .(*PSBoolean );_cgdb {_gagb ,_fga :=_ebaa .(*PSBoolean );
if !_fga {return ErrTypeCheck ;};_efcaa =_agg .Push (MakeBool (_ggbe .Val !=_gagb .Val ));return _efcaa ;};if _fdb ,_aadg :=_dbe .(*PSInteger );_aadg {_acd ,_aagg :=_ebaa .(*PSInteger );if !_aagg {return ErrTypeCheck ;};_efcaa =_agg .Push (MakeInteger (_fdb .Val ^_acd .Val ));
return _efcaa ;};return ErrTypeCheck ;};

// NewPSStack returns an initialized PSStack.
func NewPSStack ()*PSStack {return &PSStack {}};func (_eb *PSOperand )bitshift (_aec *PSStack )error {_cgf ,_efc :=_aec .PopInteger ();if _efc !=nil {return _efc ;};_ddg ,_efc :=_aec .PopInteger ();if _efc !=nil {return _efc ;};var _egag int ;if _cgf >=0{_egag =_ddg <<uint (_cgf );
}else {_egag =_ddg >>uint (-_cgf );};_efc =_aec .Push (MakeInteger (_egag ));return _efc ;};func (_ccg *PSOperand )copy (_gbd *PSStack )error {_ffc ,_daeg :=_gbd .PopInteger ();if _daeg !=nil {return _daeg ;};if _ffc < 0{return ErrRangeCheck ;};if _ffc > len (*_gbd ){return ErrRangeCheck ;
};*_gbd =append (*_gbd ,(*_gbd )[len (*_gbd )-_ffc :]...);return nil ;};func (_fdgf *PSOperand )sqrt (_baef *PSStack )error {_adf ,_fdcd :=_baef .PopNumberAsFloat64 ();if _fdcd !=nil {return _fdcd ;};if _adf < 0{return ErrRangeCheck ;};_acbb :=_bc .Sqrt (_adf );
_fdcd =_baef .Push (MakeReal (_acbb ));return _fdcd ;};func (_gbc *PSOperand )DebugString ()string {return _ba .Sprintf ("\u006fp\u003a\u0027\u0025\u0073\u0027",*_gbc );};func (_ebc *PSParser )parseNumber ()(PSObject ,error ){_bgg ,_ebad :=_de .ParseNumber (_ebc ._ffaec );
if _ebad !=nil {return nil ,_ebad ;};switch _bdfa :=_bgg .(type ){case *_de .PdfObjectFloat :return MakeReal (float64 (*_bdfa )),nil ;case *_de .PdfObjectInteger :return MakeInteger (int (*_bdfa )),nil ;};return nil ,_ba .Errorf ("\u0075n\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_bgg );
};func (_gfce *PSOperand )eq (_efa *PSStack )error {_aded ,_fbc :=_efa .Pop ();if _fbc !=nil {return _fbc ;};_aae ,_fbc :=_efa .Pop ();if _fbc !=nil {return _fbc ;};_cfc ,_fab :=_aded .(*PSBoolean );_cfac ,_fbb :=_aae .(*PSBoolean );if _fab ||_fbb {var _eeab error ;
if _fab &&_fbb {_eeab =_efa .Push (MakeBool (_cfc .Val ==_cfac .Val ));}else {_eeab =_efa .Push (MakeBool (false ));};return _eeab ;};var _gae float64 ;var _gafc float64 ;if _dacc ,_cgg :=_aded .(*PSInteger );_cgg {_gae =float64 (_dacc .Val );}else if _ggc ,_cdgd :=_aded .(*PSReal );
_cdgd {_gae =_ggc .Val ;}else {return ErrTypeCheck ;};if _cbc ,_ddf :=_aae .(*PSInteger );_ddf {_gafc =float64 (_cbc .Val );}else if _ffe ,_dcd :=_aae .(*PSReal );_dcd {_gafc =_ffe .Val ;}else {return ErrTypeCheck ;};if _bc .Abs (_gafc -_gae )< _eg {_fbc =_efa .Push (MakeBool (true ));
}else {_fbc =_efa .Push (MakeBool (false ));};return _fbc ;};func (_dbb *PSOperand )cvr (_baf *PSStack )error {_fgb ,_fdg :=_baf .Pop ();if _fdg !=nil {return _fdg ;};if _gaf ,_daad :=_fgb .(*PSReal );_daad {_fdg =_baf .Push (MakeReal (_gaf .Val ));}else if _eec ,_dea :=_fgb .(*PSInteger );
_dea {_fdg =_baf .Push (MakeReal (float64 (_eec .Val )));}else {return ErrTypeCheck ;};return _fdg ;};func (_dac *PSReal )String ()string {return _ba .Sprintf ("\u0025\u002e\u0035\u0066",_dac .Val )};

// MakeReal returns a new PSReal object initialized with `val`.
func MakeReal (val float64 )*PSReal {_cede :=PSReal {};_cede .Val =val ;return &_cede };func (_ag *PSProgram )DebugString ()string {_fca :="\u007b\u0020";for _ ,_ab :=range *_ag {_fca +=_ab .DebugString ();_fca +="\u0020";};_fca +="\u007d";return _fca ;
};

// MakeOperand returns a new PSOperand object based on string `val`.
func MakeOperand (val string )*PSOperand {_fdaf :=PSOperand (val );return &_fdaf };func (_eee *PSOperand )cos (_gbbe *PSStack )error {_gfg ,_cdg :=_gbbe .PopNumberAsFloat64 ();if _cdg !=nil {return _cdg ;};_aea :=_bc .Cos (_gfg *_bc .Pi /180.0);_cdg =_gbbe .Push (MakeReal (_aea ));
return _cdg ;};func (_dbac *PSOperand )truncate (_babe *PSStack )error {_efca ,_fba :=_babe .Pop ();if _fba !=nil {return _fba ;};if _fgeda ,_fbaa :=_efca .(*PSReal );_fbaa {_bag :=int (_fgeda .Val );_fba =_babe .Push (MakeReal (float64 (_bag )));}else if _cea ,_ccf :=_efca .(*PSInteger );
_ccf {_fba =_babe .Push (MakeInteger (_cea .Val ));}else {return ErrTypeCheck ;};return _fba ;};

// Push pushes an object on top of the stack.
func (_gbfe *PSStack )Push (obj PSObject )error {if len (*_gbfe )> 100{return ErrStackOverflow ;};*_gbfe =append (*_gbfe ,obj );return nil ;};func (_acb *PSOperand )atan (_gfc *PSStack )error {_dc ,_ced :=_gfc .PopNumberAsFloat64 ();if _ced !=nil {return _ced ;
};_dcg ,_ced :=_gfc .PopNumberAsFloat64 ();if _ced !=nil {return _ced ;};if _dc ==0{var _aab error ;if _dcg < 0{_aab =_gfc .Push (MakeReal (270));}else {_aab =_gfc .Push (MakeReal (90));};return _aab ;};_edb :=_dcg /_dc ;_acbd :=_bc .Atan (_edb )*180/_bc .Pi ;
_ced =_gfc .Push (MakeReal (_acbd ));return _ced ;};func (_aceg *PSOperand )idiv (_abfd *PSStack )error {_bb ,_cbb :=_abfd .Pop ();if _cbb !=nil {return _cbb ;};_cee ,_cbb :=_abfd .Pop ();if _cbb !=nil {return _cbb ;};_bbf ,_fdab :=_bb .(*PSInteger );if !_fdab {return ErrTypeCheck ;
};if _bbf .Val ==0{return ErrUndefinedResult ;};_dbg ,_fdab :=_cee .(*PSInteger );if !_fdab {return ErrTypeCheck ;};_gfgf :=_dbg .Val /_bbf .Val ;_cbb =_abfd .Push (MakeInteger (_gfgf ));return _cbb ;};func (_df *PSInteger )String ()string {return _ba .Sprintf ("\u0025\u0064",_df .Val )};


// PSReal represents a real number.
type PSReal struct{Val float64 ;};func (_bab *PSOperand )exp (_eeeg *PSStack )error {_cdgb ,_fed :=_eeeg .PopNumberAsFloat64 ();if _fed !=nil {return _fed ;};_cga ,_fed :=_eeeg .PopNumberAsFloat64 ();if _fed !=nil {return _fed ;};if _bc .Abs (_cdgb )< 1&&_cga < 0{return ErrUndefinedResult ;
};_gag :=_bc .Pow (_cga ,_cdgb );_fed =_eeeg .Push (MakeReal (_gag ));return _fed ;};

// Empty empties the stack.
func (_gca *PSStack )Empty (){*_gca =[]PSObject {}};

// NewPSExecutor returns an initialized PSExecutor for an input `program`.
func NewPSExecutor (program *PSProgram )*PSExecutor {_dae :=&PSExecutor {};_dae .Stack =NewPSStack ();_dae ._da =program ;return _dae ;};

// MakeInteger returns a new PSInteger object initialized with `val`.
func MakeInteger (val int )*PSInteger {_edcf :=PSInteger {};_edcf .Val =val ;return &_edcf };

// PSInteger represents an integer.
type PSInteger struct{Val int ;};func (_gfcb *PSOperand )dup (_cgd *PSStack )error {_bcef ,_bgbe :=_cgd .Pop ();if _bgbe !=nil {return _bgbe ;};_bgbe =_cgd .Push (_bcef );if _bgbe !=nil {return _bgbe ;};_bgbe =_cgd .Push (_bcef .Duplicate ());return _bgbe ;
};func _ddc (_eeegd int )int {if _eeegd < 0{return -_eeegd ;};return _eeegd ;};func (_eae *PSParser )parseFunction ()(*PSProgram ,error ){_aceb ,_ :=_eae ._ffaec .ReadByte ();if _aceb !='{'{return nil ,_d .New ("\u0069\u006ev\u0061\u006c\u0069d\u0020\u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e");
};_daae :=NewPSProgram ();for {_eae .skipSpaces ();_eae .skipComments ();_ddda ,_ffeac :=_eae ._ffaec .Peek (2);if _ffeac !=nil {if _ffeac ==_a .EOF {break ;};return nil ,_ffeac ;};_ed .Log .Trace ("\u0050e\u0065k\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u003a\u0020\u0025\u0073",string (_ddda ));
if _ddda [0]=='}'{_ed .Log .Trace ("\u0045\u004f\u0046 \u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e");_eae ._ffaec .ReadByte ();break ;}else if _ddda [0]=='{'{_ed .Log .Trace ("\u0046u\u006e\u0063\u0074\u0069\u006f\u006e!");_adeg ,_fcg :=_eae .parseFunction ();
if _fcg !=nil {return nil ,_fcg ;};_daae .Append (_adeg );}else if _de .IsDecimalDigit (_ddda [0])||(_ddda [0]=='-'&&_de .IsDecimalDigit (_ddda [1])){_ed .Log .Trace ("\u002d>\u004e\u0075\u006d\u0062\u0065\u0072!");_dcc ,_fcaf :=_eae .parseNumber ();if _fcaf !=nil {return nil ,_fcaf ;
};_daae .Append (_dcc );}else {_ed .Log .Trace ("\u002d>\u004fp\u0065\u0072\u0061\u006e\u0064 \u006f\u0072 \u0062\u006f\u006f\u006c\u003f");_ddda ,_ =_eae ._ffaec .Peek (5);_cace :=string (_ddda );_ed .Log .Trace ("\u0050\u0065\u0065k\u0020\u0073\u0074\u0072\u003a\u0020\u0025\u0073",_cace );
if (len (_cace )> 4)&&(_cace [:5]=="\u0066\u0061\u006cs\u0065"){_dfe ,_gcff :=_eae .parseBool ();if _gcff !=nil {return nil ,_gcff ;};_daae .Append (_dfe );}else if (len (_cace )> 3)&&(_cace [:4]=="\u0074\u0072\u0075\u0065"){_bagd ,_cgfb :=_eae .parseBool ();
if _cgfb !=nil {return nil ,_cgfb ;};_daae .Append (_bagd );}else {_fcadd ,_cgfg :=_eae .parseOperand ();if _cgfg !=nil {return nil ,_cgfg ;};_daae .Append (_fcadd );};};};return _daae ,nil ;};var ErrStackOverflow =_d .New ("\u0073\u0074\u0061\u0063\u006b\u0020\u006f\u0076\u0065r\u0066\u006c\u006f\u0077");


// Exec executes the program, typically leaving output values on the stack.
func (_aadf *PSProgram )Exec (stack *PSStack )error {for _ ,_edc :=range *_aadf {var _aff error ;switch _bgb :=_edc .(type ){case *PSInteger :_gbeg :=_bgb ;_aff =stack .Push (_gbeg );case *PSReal :_cfa :=_bgb ;_aff =stack .Push (_cfa );case *PSBoolean :_cc :=_bgb ;
_aff =stack .Push (_cc );case *PSProgram :_ad :=_bgb ;_aff =stack .Push (_ad );case *PSOperand :_ce :=_bgb ;_aff =_ce .Exec (stack );default:return ErrTypeCheck ;};if _aff !=nil {return _aff ;};};return nil ;};func (_cecd *PSOperand )mod (_afc *PSStack )error {_bcda ,_cfb :=_afc .Pop ();
if _cfb !=nil {return _cfb ;};_aaef ,_cfb :=_afc .Pop ();if _cfb !=nil {return _cfb ;};_afcd ,_ffeb :=_bcda .(*PSInteger );if !_ffeb {return ErrTypeCheck ;};if _afcd .Val ==0{return ErrUndefinedResult ;};_cdbf ,_ffeb :=_aaef .(*PSInteger );if !_ffeb {return ErrTypeCheck ;
};_baae :=_cdbf .Val %_afcd .Val ;_cfb =_afc .Push (MakeInteger (_baae ));return _cfb ;};func (_abff *PSOperand )ceiling (_fb *PSStack )error {_fe ,_dff :=_fb .Pop ();if _dff !=nil {return _dff ;};if _bcbc ,_gdd :=_fe .(*PSReal );_gdd {_dff =_fb .Push (MakeReal (_bc .Ceil (_bcbc .Val )));
}else if _gff ,_gbb :=_fe .(*PSInteger );_gbb {_dff =_fb .Push (MakeInteger (_gff .Val ));}else {_dff =ErrTypeCheck ;};return _dff ;};func (_ede *PSOperand )and (_ece *PSStack )error {_cg ,_db :=_ece .Pop ();if _db !=nil {return _db ;};_egf ,_db :=_ece .Pop ();
if _db !=nil {return _db ;};if _caa ,_bdf :=_cg .(*PSBoolean );_bdf {_gdf ,_bed :=_egf .(*PSBoolean );if !_bed {return ErrTypeCheck ;};_db =_ece .Push (MakeBool (_caa .Val &&_gdf .Val ));return _db ;};if _ade ,_bf :=_cg .(*PSInteger );_bf {_dbd ,_dbdd :=_egf .(*PSInteger );
if !_dbdd {return ErrTypeCheck ;};_db =_ece .Push (MakeInteger (_ade .Val &_dbd .Val ));return _db ;};return ErrTypeCheck ;};

// PSObject represents a postscript object.
type PSObject interface{

// Duplicate makes a fresh copy of the PSObject.
Duplicate ()PSObject ;

// DebugString returns a descriptive representation of the PSObject with more information than String()
// for debugging purposes.
DebugString ()string ;

// String returns a string representation of the PSObject.
String ()string ;};func (_gf *PSOperand )abs (_ac *PSStack )error {_bceb ,_bae :=_ac .Pop ();if _bae !=nil {return _bae ;};if _eea ,_fge :=_bceb .(*PSReal );_fge {_bcg :=_eea .Val ;if _bcg < 0{_bae =_ac .Push (MakeReal (-_bcg ));}else {_bae =_ac .Push (MakeReal (_bcg ));
};}else if _cd ,_bd :=_bceb .(*PSInteger );_bd {_ga :=_cd .Val ;if _ga < 0{_bae =_ac .Push (MakeInteger (-_ga ));}else {_bae =_ac .Push (MakeInteger (_ga ));};}else {return ErrTypeCheck ;};return _bae ;};

// Execute executes the program for an input parameters `objects` and returns a slice of output objects.
func (_cf *PSExecutor )Execute (objects []PSObject )([]PSObject ,error ){for _ ,_ega :=range objects {_af :=_cf .Stack .Push (_ega );if _af !=nil {return nil ,_af ;};};_aa :=_cf ._da .Exec (_cf .Stack );if _aa !=nil {_ed .Log .Debug ("\u0045x\u0065c\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_aa );
return nil ,_aa ;};_bcb :=[]PSObject (*_cf .Stack );_cf .Stack .Empty ();return _bcb ,nil ;};func (_cggc *PSOperand )floor (_cca *PSStack )error {_deb ,_fec :=_cca .Pop ();if _fec !=nil {return _fec ;};if _fgcc ,_aeaf :=_deb .(*PSReal );_aeaf {_fec =_cca .Push (MakeReal (_bc .Floor (_fgcc .Val )));
}else if _eeg ,_gaa :=_deb .(*PSInteger );_gaa {_fec =_cca .Push (MakeInteger (_eeg .Val ));}else {return ErrTypeCheck ;};return _fec ;};

// PSObjectArrayToFloat64Array converts []PSObject into a []float64 array. Each PSObject must represent a number,
// otherwise a ErrTypeCheck error occurs.
func PSObjectArrayToFloat64Array (objects []PSObject )([]float64 ,error ){var _f []float64 ;for _ ,_ca :=range objects {if _bac ,_bg :=_ca .(*PSInteger );_bg {_f =append (_f ,float64 (_bac .Val ));}else if _g ,_cb :=_ca .(*PSReal );_cb {_f =append (_f ,_g .Val );
}else {return nil ,ErrTypeCheck ;};};return _f ,nil ;};

// MakeBool returns a new PSBoolean object initialized with `val`.
func MakeBool (val bool )*PSBoolean {_gdfg :=PSBoolean {};_gdfg .Val =val ;return &_gdfg };func (_adb *PSParser )parseOperand ()(*PSOperand ,error ){var _dfda []byte ;for {_fbd ,_aeef :=_adb ._ffaec .Peek (1);if _aeef !=nil {if _aeef ==_a .EOF {break ;
};return nil ,_aeef ;};if _de .IsDelimiter (_fbd [0]){break ;};if _de .IsWhiteSpace (_fbd [0]){break ;};_dgf ,_ :=_adb ._ffaec .ReadByte ();_dfda =append (_dfda ,_dgf );};if len (_dfda )==0{return nil ,_d .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064\u0020\u0028\u0065\u006d\u0070\u0074\u0079\u0029");
};return MakeOperand (string (_dfda )),nil ;};func (_fcf *PSOperand )cvi (_bfb *PSStack )error {_fac ,_cec :=_bfb .Pop ();if _cec !=nil {return _cec ;};if _fgc ,_ggdd :=_fac .(*PSReal );_ggdd {_gce :=int (_fgc .Val );_cec =_bfb .Push (MakeInteger (_gce ));
}else if _dee ,_agb :=_fac .(*PSInteger );_agb {_fcc :=_dee .Val ;_cec =_bfb .Push (MakeInteger (_fcc ));}else {return ErrTypeCheck ;};return _cec ;};

// PSStack defines a stack of PSObjects. PSObjects can be pushed on or pull from the stack.
type PSStack []PSObject ;func (_bcfb *PSOperand )gt (_gdfe *PSStack )error {_abgd ,_edce :=_gdfe .PopNumberAsFloat64 ();if _edce !=nil {return _edce ;};_bedg ,_edce :=_gdfe .PopNumberAsFloat64 ();if _edce !=nil {return _edce ;};if _bc .Abs (_bedg -_abgd )< _eg {_abge :=_gdfe .Push (MakeBool (false ));
return _abge ;}else if _bedg > _abgd {_agbc :=_gdfe .Push (MakeBool (true ));return _agbc ;}else {_fee :=_gdfe .Push (MakeBool (false ));return _fee ;};};func (_bce *PSReal )DebugString ()string {return _ba .Sprintf ("\u0072e\u0061\u006c\u003a\u0025\u002e\u0035f",_bce .Val );
};func (_beb *PSOperand )String ()string {return string (*_beb )};

// PSBoolean represents a boolean value.
type PSBoolean struct{Val bool ;};

// PopNumberAsFloat64 pops and return the numeric value of the top of the stack as a float64.
// Real or integer only.
func (_feb *PSStack )PopNumberAsFloat64 ()(float64 ,error ){_ggab ,_ccfd :=_feb .Pop ();if _ccfd !=nil {return 0,_ccfd ;};if _cdda ,_aece :=_ggab .(*PSReal );_aece {return _cdda .Val ,nil ;}else if _fedd ,_dgce :=_ggab .(*PSInteger );_dgce {return float64 (_fedd .Val ),nil ;
}else {return 0,ErrTypeCheck ;};};var ErrStackUnderflow =_d .New ("\u0073t\u0061c\u006b\u0020\u0075\u006e\u0064\u0065\u0072\u0066\u006c\u006f\u0077");

// NewPSProgram returns an empty, initialized PSProgram.
func NewPSProgram ()*PSProgram {return &PSProgram {}};func (_ff *PSBoolean )String ()string {return _ba .Sprintf ("\u0025\u0076",_ff .Val )};var ErrUnsupportedOperand =_d .New ("\u0075\u006e\u0073\u0075pp\u006f\u0072\u0074\u0065\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");


// String returns a string representation of the stack.
func (_gcb *PSStack )String ()string {_ecea :="\u005b\u0020";for _ ,_fccg :=range *_gcb {_ecea +=_fccg .String ();_ecea +="\u0020";};_ecea +="\u005d";return _ecea ;};func (_aad *PSReal )Duplicate ()PSObject {_baa :=PSReal {};_baa .Val =_aad .Val ;return &_baa };
func (_gcea *PSParser )skipComments ()error {if _ ,_efb :=_gcea .skipSpaces ();_efb !=nil {return _efb ;};_dgea :=true ;for {_ddd ,_cccca :=_gcea ._ffaec .Peek (1);if _cccca !=nil {_ed .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_cccca .Error ());
return _cccca ;};if _dgea &&_ddd [0]!='%'{return nil ;};_dgea =false ;if (_ddd [0]!='\r')&&(_ddd [0]!='\n'){_gcea ._ffaec .ReadByte ();}else {break ;};};return _gcea .skipComments ();};func (_fead *PSParser )skipSpaces ()(int ,error ){_aabb :=0;for {_agbg ,_daade :=_fead ._ffaec .Peek (1);
if _daade !=nil {return 0,_daade ;};if _de .IsWhiteSpace (_agbg [0]){_fead ._ffaec .ReadByte ();_aabb ++;}else {break ;};};return _aabb ,nil ;};func (_gcf *PSOperand )ifelse (_affa *PSStack )error {_ccc ,_fea :=_affa .Pop ();if _fea !=nil {return _fea ;
};_efe ,_fea :=_affa .Pop ();if _fea !=nil {return _fea ;};_geg ,_fea :=_affa .Pop ();if _fea !=nil {return _fea ;};_edf ,_gea :=_ccc .(*PSProgram );if !_gea {return ErrTypeCheck ;};_cag ,_gea :=_efe .(*PSProgram );if !_gea {return ErrTypeCheck ;};_aafe ,_gea :=_geg .(*PSBoolean );
if !_gea {return ErrTypeCheck ;};if _aafe .Val {_cac :=_cag .Exec (_affa );return _cac ;};_fea =_edf .Exec (_affa );return _fea ;};func (_dfa *PSOperand )add (_cef *PSStack )error {_abg ,_egb :=_cef .Pop ();if _egb !=nil {return _egb ;};_fda ,_egb :=_cef .Pop ();
if _egb !=nil {return _egb ;};_gec ,_afd :=_abg .(*PSReal );_daa ,_ecb :=_abg .(*PSInteger );if !_afd &&!_ecb {return ErrTypeCheck ;};_ffa ,_cdb :=_fda .(*PSReal );_gd ,_ggd :=_fda .(*PSInteger );if !_cdb &&!_ggd {return ErrTypeCheck ;};if _ecb &&_ggd {_gdg :=_daa .Val +_gd .Val ;
_ddbb :=_cef .Push (MakeInteger (_gdg ));return _ddbb ;};var _egc float64 ;if _afd {_egc =_gec .Val ;}else {_egc =float64 (_daa .Val );};if _cdb {_egc +=_ffa .Val ;}else {_egc +=float64 (_gd .Val );};_egb =_cef .Push (MakeReal (_egc ));return _egb ;};

// Parse parses the postscript and store as a program that can be executed.
func (_affe *PSParser )Parse ()(*PSProgram ,error ){_affe .skipSpaces ();_cbff ,_bafa :=_affe ._ffaec .Peek (2);if _bafa !=nil {return nil ,_bafa ;};if _cbff [0]!='{'{return nil ,_d .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0053\u0020\u0050\u0072\u006f\u0067\u0072\u0061\u006d\u0020\u006e\u006f\u0074\u0020\u0073t\u0061\u0072\u0074\u0069\u006eg\u0020\u0077i\u0074\u0068\u0020\u007b");
};_bgbb ,_bafa :=_affe .parseFunction ();if _bafa !=nil &&_bafa !=_a .EOF {return nil ,_bafa ;};return _bgbb ,_bafa ;};func (_fabb *PSOperand )roll (_cba *PSStack )error {_aegf ,_faa :=_cba .Pop ();if _faa !=nil {return _faa ;};_dbgb ,_faa :=_cba .Pop ();
if _faa !=nil {return _faa ;};_eac ,_ecc :=_aegf .(*PSInteger );if !_ecc {return ErrTypeCheck ;};_ecbd ,_ecc :=_dbgb .(*PSInteger );if !_ecc {return ErrTypeCheck ;};if _ecbd .Val < 0{return ErrRangeCheck ;};if _ecbd .Val ==0||_ecbd .Val ==1{return nil ;
};if _ecbd .Val > len (*_cba ){return ErrStackUnderflow ;};for _abc :=0;_abc < _ddc (_eac .Val );_abc ++{var _gcfd []PSObject ;_gcfd =(*_cba )[len (*_cba )-(_ecbd .Val ):len (*_cba )];if _eac .Val > 0{_ddbf :=_gcfd [len (_gcfd )-1];_gcfd =append ([]PSObject {_ddbf },_gcfd [0:len (_gcfd )-1]...);
}else {_gfdd :=_gcfd [len (_gcfd )-_ecbd .Val ];_gcfd =append (_gcfd [1:],_gfdd );};_efg :=append ((*_cba )[0:len (*_cba )-_ecbd .Val ],_gcfd ...);_cba =&_efg ;};return nil ;};func (_aaga *PSParser )parseBool ()(*PSBoolean ,error ){_fdcc ,_beea :=_aaga ._ffaec .Peek (4);
if _beea !=nil {return MakeBool (false ),_beea ;};if (len (_fdcc )>=4)&&(string (_fdcc [:4])=="\u0074\u0072\u0075\u0065"){_aaga ._ffaec .Discard (4);return MakeBool (true ),nil ;};_fdcc ,_beea =_aaga ._ffaec .Peek (5);if _beea !=nil {return MakeBool (false ),_beea ;
};if (len (_fdcc )>=5)&&(string (_fdcc [:5])=="\u0066\u0061\u006cs\u0065"){_aaga ._ffaec .Discard (5);return MakeBool (false ),nil ;};return MakeBool (false ),_d .New ("\u0075n\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0062o\u006fl\u0065a\u006e\u0020\u0073\u0074\u0072\u0069\u006eg");
};func (_aca *PSOperand )le (_gdc *PSStack )error {_afb ,_bbd :=_gdc .PopNumberAsFloat64 ();if _bbd !=nil {return _bbd ;};_gfd ,_bbd :=_gdc .PopNumberAsFloat64 ();if _bbd !=nil {return _bbd ;};if _bc .Abs (_gfd -_afb )< _eg {_eda :=_gdc .Push (MakeBool (true ));
return _eda ;}else if _gfd < _afb {_bea :=_gdc .Push (MakeBool (true ));return _bea ;}else {_fdf :=_gdc .Push (MakeBool (false ));return _fdf ;};};const _eg =0.000001;func (_bca *PSOperand )ne (_cccd *PSStack )error {_fcad :=_bca .eq (_cccd );if _fcad !=nil {return _fcad ;
};_fcad =_bca .not (_cccd );return _fcad ;};

// DebugString returns a descriptive string representation of the stack - intended for debugging.
func (_fcfe *PSStack )DebugString ()string {_faaa :="\u005b\u0020";for _ ,_baab :=range *_fcfe {_faaa +=_baab .DebugString ();_faaa +="\u0020";};_faaa +="\u005d";return _faaa ;};func (_aee *PSOperand )or (_bfda *PSStack )error {_befg ,_gga :=_bfda .Pop ();
if _gga !=nil {return _gga ;};_afe ,_gga :=_bfda .Pop ();if _gga !=nil {return _gga ;};if _gffb ,_gbf :=_befg .(*PSBoolean );_gbf {_gcce ,_fega :=_afe .(*PSBoolean );if !_fega {return ErrTypeCheck ;};_gga =_bfda .Push (MakeBool (_gffb .Val ||_gcce .Val ));
return _gga ;};if _ea ,_egcc :=_befg .(*PSInteger );_egcc {_dcda ,_aege :=_afe .(*PSInteger );if !_aege {return ErrTypeCheck ;};_gga =_bfda .Push (MakeInteger (_ea .Val |_dcda .Val ));return _gga ;};return ErrTypeCheck ;};func (_gbe *PSProgram )String ()string {_gc :="\u007b\u0020";
for _ ,_aac :=range *_gbe {_gc +=_aac .String ();_gc +="\u0020";};_gc +="\u007d";return _gc ;};func (_gddg *PSOperand )neg (_fbe *PSStack )error {_efea ,_ffae :=_fbe .Pop ();if _ffae !=nil {return _ffae ;};if _aeb ,_ceb :=_efea .(*PSReal );_ceb {_ffae =_fbe .Push (MakeReal (-_aeb .Val ));
return _ffae ;}else if _bec ,_aecf :=_efea .(*PSInteger );_aecf {_ffae =_fbe .Push (MakeInteger (-_bec .Val ));return _ffae ;}else {return ErrTypeCheck ;};};var ErrUndefinedResult =_d .New ("\u0075\u006e\u0064\u0065fi\u006e\u0065\u0064\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0065\u0072\u0072o\u0072");


// PopInteger specificially pops an integer from the top of the stack, returning the value as an int.
func (_cege *PSStack )PopInteger ()(int ,error ){_gab ,_beae :=_cege .Pop ();if _beae !=nil {return 0,_beae ;};if _cafg ,_fdd :=_gab .(*PSInteger );_fdd {return _cafg .Val ,nil ;};return 0,ErrTypeCheck ;};func (_aecb *PSOperand )ifCondition (_ffea *PSStack )error {_dg ,_aead :=_ffea .Pop ();
if _aead !=nil {return _aead ;};_deab ,_aead :=_ffea .Pop ();if _aead !=nil {return _aead ;};_fce ,_ddeg :=_dg .(*PSProgram );if !_ddeg {return ErrTypeCheck ;};_bbc ,_ddeg :=_deab .(*PSBoolean );if !_ddeg {return ErrTypeCheck ;};if _bbc .Val {_cedc :=_fce .Exec (_ffea );
return _cedc ;};return nil ;};func (_efed *PSOperand )round (_baea *PSStack )error {_edg ,_dgga :=_baea .Pop ();if _dgga !=nil {return _dgga ;};if _dfg ,_aecg :=_edg .(*PSReal );_aecg {_dgga =_baea .Push (MakeReal (_bc .Floor (_dfg .Val +0.5)));}else if _dbbd ,_ggda :=_edg .(*PSInteger );
_ggda {_dgga =_baea .Push (MakeInteger (_dbbd .Val ));}else {return ErrTypeCheck ;};return _dgga ;};func (_dgd *PSOperand )log (_gfb *PSStack )error {_gcc ,_deag :=_gfb .PopNumberAsFloat64 ();if _deag !=nil {return _deag ;};_dbdf :=_bc .Log10 (_gcc );_deag =_gfb .Push (MakeReal (_dbdf ));
return _deag ;};func (_facb *PSOperand )div (_gee *PSStack )error {_aag ,_cfg :=_gee .Pop ();if _cfg !=nil {return _cfg ;};_edbc ,_cfg :=_gee .Pop ();if _cfg !=nil {return _cfg ;};_ace ,_aeg :=_aag .(*PSReal );_agc ,_bedc :=_aag .(*PSInteger );if !_aeg &&!_bedc {return ErrTypeCheck ;
};if _aeg &&_ace .Val ==0{return ErrUndefinedResult ;};if _bedc &&_agc .Val ==0{return ErrUndefinedResult ;};_aaf ,_dfb :=_edbc .(*PSReal );_egfd ,_gda :=_edbc .(*PSInteger );if !_dfb &&!_gda {return ErrTypeCheck ;};var _bcf float64 ;if _dfb {_bcf =_aaf .Val ;
}else {_bcf =float64 (_egfd .Val );};if _aeg {_bcf /=_ace .Val ;}else {_bcf /=float64 (_agc .Val );};_cfg =_gee .Push (MakeReal (_bcf ));return _cfg ;};func (_gaeb *PSOperand )exch (_dde *PSStack )error {_caf ,_bfbf :=_dde .Pop ();if _bfbf !=nil {return _bfbf ;
};_gfa ,_bfbf :=_dde .Pop ();if _bfbf !=nil {return _bfbf ;};_bfbf =_dde .Push (_caf );if _bfbf !=nil {return _bfbf ;};_bfbf =_dde .Push (_gfa );return _bfbf ;};func (_abe *PSOperand )Duplicate ()PSObject {_cfd :=*_abe ;return &_cfd };

// Append appends an object to the PSProgram.
func (_ddb *PSProgram )Append (obj PSObject ){*_ddb =append (*_ddb ,obj )};func (_bcd *PSBoolean )DebugString ()string {return _ba .Sprintf ("\u0062o\u006f\u006c\u003a\u0025\u0076",_bcd .Val );};func (_eece *PSOperand )sub (_fcfd *PSStack )error {_cade ,_gagf :=_fcfd .Pop ();
if _gagf !=nil {return _gagf ;};_fabbd ,_gagf :=_fcfd .Pop ();if _gagf !=nil {return _gagf ;};_cde ,_cdee :=_cade .(*PSReal );_ceg ,_dgc :=_cade .(*PSInteger );if !_cdee &&!_dgc {return ErrTypeCheck ;};_ebaf ,_cbf :=_fabbd .(*PSReal );_bfg ,_gbbga :=_fabbd .(*PSInteger );
if !_cbf &&!_gbbga {return ErrTypeCheck ;};if _dgc &&_gbbga {_ffeaa :=_bfg .Val -_ceg .Val ;_efeac :=_fcfd .Push (MakeInteger (_ffeaa ));return _efeac ;};var _cafeg float64 =0;if _cbf {_cafeg =_ebaf .Val ;}else {_cafeg =float64 (_bfg .Val );};if _cdee {_cafeg -=_cde .Val ;
}else {_cafeg -=float64 (_ceg .Val );};_gagf =_fcfd .Push (MakeReal (_cafeg ));return _gagf ;};func (_bgc *PSOperand )ln (_cab *PSStack )error {_dab ,_fdc :=_cab .PopNumberAsFloat64 ();if _fdc !=nil {return _fdc ;};_cacd :=_bc .Log (_dab );_fdc =_cab .Push (MakeReal (_cacd ));
return _fdc ;};

// Exec executes the operand `op` in the state specified by `stack`.
func (_gg *PSOperand )Exec (stack *PSStack )error {_fad :=ErrUnsupportedOperand ;switch *_gg {case "\u0061\u0062\u0073":_fad =_gg .abs (stack );case "\u0061\u0064\u0064":_fad =_gg .add (stack );case "\u0061\u006e\u0064":_fad =_gg .and (stack );case "\u0061\u0074\u0061\u006e":_fad =_gg .atan (stack );
case "\u0062\u0069\u0074\u0073\u0068\u0069\u0066\u0074":_fad =_gg .bitshift (stack );case "\u0063e\u0069\u006c\u0069\u006e\u0067":_fad =_gg .ceiling (stack );case "\u0063\u006f\u0070\u0079":_fad =_gg .copy (stack );case "\u0063\u006f\u0073":_fad =_gg .cos (stack );
case "\u0063\u0076\u0069":_fad =_gg .cvi (stack );case "\u0063\u0076\u0072":_fad =_gg .cvr (stack );case "\u0064\u0069\u0076":_fad =_gg .div (stack );case "\u0064\u0075\u0070":_fad =_gg .dup (stack );case "\u0065\u0071":_fad =_gg .eq (stack );case "\u0065\u0078\u0063\u0068":_fad =_gg .exch (stack );
case "\u0065\u0078\u0070":_fad =_gg .exp (stack );case "\u0066\u006c\u006fo\u0072":_fad =_gg .floor (stack );case "\u0067\u0065":_fad =_gg .ge (stack );case "\u0067\u0074":_fad =_gg .gt (stack );case "\u0069\u0064\u0069\u0076":_fad =_gg .idiv (stack );
case "\u0069\u0066":_fad =_gg .ifCondition (stack );case "\u0069\u0066\u0065\u006c\u0073\u0065":_fad =_gg .ifelse (stack );case "\u0069\u006e\u0064e\u0078":_fad =_gg .index (stack );case "\u006c\u0065":_fad =_gg .le (stack );case "\u006c\u006f\u0067":_fad =_gg .log (stack );
case "\u006c\u006e":_fad =_gg .ln (stack );case "\u006c\u0074":_fad =_gg .lt (stack );case "\u006d\u006f\u0064":_fad =_gg .mod (stack );case "\u006d\u0075\u006c":_fad =_gg .mul (stack );case "\u006e\u0065":_fad =_gg .ne (stack );case "\u006e\u0065\u0067":_fad =_gg .neg (stack );
case "\u006e\u006f\u0074":_fad =_gg .not (stack );case "\u006f\u0072":_fad =_gg .or (stack );case "\u0070\u006f\u0070":_fad =_gg .pop (stack );case "\u0072\u006f\u0075n\u0064":_fad =_gg .round (stack );case "\u0072\u006f\u006c\u006c":_fad =_gg .roll (stack );
case "\u0073\u0069\u006e":_fad =_gg .sin (stack );case "\u0073\u0071\u0072\u0074":_fad =_gg .sqrt (stack );case "\u0073\u0075\u0062":_fad =_gg .sub (stack );case "\u0074\u0072\u0075\u006e\u0063\u0061\u0074\u0065":_fad =_gg .truncate (stack );case "\u0078\u006f\u0072":_fad =_gg .xor (stack );
};return _fad ;};