//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package ps implements various functionalities needed for handling Postscript for PDF uses, in particular
// for PDF function type 4.
//
// Package ps implements various functionalities needed for handling Postscript for PDF uses, in particular
// for PDF function type 4.
package ps ;import (_ea "bufio";_ed "bytes";_c "errors";_ef "fmt";_f "github.com/unidoc/unipdf/v3/common";_b "github.com/unidoc/unipdf/v3/core";_g "io";_ce "math";);func (_gbe *PSInteger )DebugString ()string {return _ef .Sprintf ("\u0069\u006e\u0074\u003a\u0025\u0064",_gbe .Val );
};func (_egbd *PSOperand )xor (_dec *PSStack )error {_fef ,_egd :=_dec .Pop ();if _egd !=nil {return _egd ;};_bgfc ,_egd :=_dec .Pop ();if _egd !=nil {return _egd ;};if _gcea ,_ecg :=_fef .(*PSBoolean );_ecg {_baad ,_feef :=_bgfc .(*PSBoolean );if !_feef {return ErrTypeCheck ;
};_egd =_dec .Push (MakeBool (_gcea .Val !=_baad .Val ));return _egd ;};if _bcb ,_bbbe :=_fef .(*PSInteger );_bbbe {_bdac ,_bcdf :=_bgfc .(*PSInteger );if !_bcdf {return ErrTypeCheck ;};_egd =_dec .Push (MakeInteger (_bcb .Val ^_bdac .Val ));return _egd ;
};return ErrTypeCheck ;};func (_dffg *PSOperand )pop (_dadb *PSStack )error {_ ,_eaab :=_dadb .Pop ();if _eaab !=nil {return _eaab ;};return nil ;};

// Exec executes the program, typically leaving output values on the stack.
func (_ffa *PSProgram )Exec (stack *PSStack )error {for _ ,_fgd :=range *_ffa {var _geb error ;switch _gad :=_fgd .(type ){case *PSInteger :_bdg :=_gad ;_geb =stack .Push (_bdg );case *PSReal :_cac :=_gad ;_geb =stack .Push (_cac );case *PSBoolean :_bba :=_gad ;
_geb =stack .Push (_bba );case *PSProgram :_cdb :=_gad ;_geb =stack .Push (_cdb );case *PSOperand :_bac :=_gad ;_geb =_bac .Exec (stack );default:return ErrTypeCheck ;};if _geb !=nil {return _geb ;};};return nil ;};func (_afa *PSOperand )sqrt (_efaa *PSStack )error {_aad ,_aebd :=_efaa .PopNumberAsFloat64 ();
if _aebd !=nil {return _aebd ;};if _aad < 0{return ErrRangeCheck ;};_dae :=_ce .Sqrt (_aad );_aebd =_efaa .Push (MakeReal (_dae ));return _aebd ;};func (_fg *PSProgram )Duplicate ()PSObject {_bb :=&PSProgram {};for _ ,_fae :=range *_fg {_bb .Append (_fae .Duplicate ());
};return _bb ;};func (_dc *PSOperand )atan (_gfg *PSStack )error {_faa ,_cc :=_gfg .PopNumberAsFloat64 ();if _cc !=nil {return _cc ;};_afb ,_cc :=_gfg .PopNumberAsFloat64 ();if _cc !=nil {return _cc ;};if _faa ==0{var _dda error ;if _afb < 0{_dda =_gfg .Push (MakeReal (270));
}else {_dda =_gfg .Push (MakeReal (90));};return _dda ;};_bef :=_afb /_faa ;_dde :=_ce .Atan (_bef )*180/_ce .Pi ;_cc =_gfg .Push (MakeReal (_dde ));return _cc ;};func (_gde *PSOperand )copy (_dca *PSStack )error {_aggg ,_bdgba :=_dca .PopInteger ();if _bdgba !=nil {return _bdgba ;
};if _aggg < 0{return ErrRangeCheck ;};if _aggg > len (*_dca ){return ErrRangeCheck ;};*_dca =append (*_dca ,(*_dca )[len (*_dca )-_aggg :]...);return nil ;};func (_affba *PSOperand )roll (_gff *PSStack )error {_cgac ,_gacd :=_gff .Pop ();if _gacd !=nil {return _gacd ;
};_fdee ,_gacd :=_gff .Pop ();if _gacd !=nil {return _gacd ;};_cbeb ,_feb :=_cgac .(*PSInteger );if !_feb {return ErrTypeCheck ;};_febf ,_feb :=_fdee .(*PSInteger );if !_feb {return ErrTypeCheck ;};if _febf .Val < 0{return ErrRangeCheck ;};if _febf .Val ==0||_febf .Val ==1{return nil ;
};if _febf .Val > len (*_gff ){return ErrStackUnderflow ;};for _bceb :=0;_bceb < _gdcc (_cbeb .Val );_bceb ++{var _eab []PSObject ;_eab =(*_gff )[len (*_gff )-(_febf .Val ):len (*_gff )];if _cbeb .Val > 0{_ggcg :=_eab [len (_eab )-1];_eab =append ([]PSObject {_ggcg },_eab [0:len (_eab )-1]...);
}else {_cgg :=_eab [len (_eab )-_febf .Val ];_eab =append (_eab [1:],_cgg );};_fege :=append ((*_gff )[0:len (*_gff )-_febf .Val ],_eab ...);_gff =&_fege ;};return nil ;};func (_db *PSOperand )String ()string {return string (*_db )};func (_cd *PSBoolean )DebugString ()string {return _ef .Sprintf ("\u0062o\u006f\u006c\u003a\u0025\u0076",_cd .Val );
};

// Pop pops an object from the top of the stack.
func (_cag *PSStack )Pop ()(PSObject ,error ){if len (*_cag )< 1{return nil ,ErrStackUnderflow ;};_bccg :=(*_cag )[len (*_cag )-1];*_cag =(*_cag )[0:len (*_cag )-1];return _bccg ,nil ;};func (_fba *PSOperand )div (_gfc *PSStack )error {_eed ,_bbb :=_gfc .Pop ();
if _bbb !=nil {return _bbb ;};_bbfg ,_bbb :=_gfc .Pop ();if _bbb !=nil {return _bbb ;};_abc ,_eea :=_eed .(*PSReal );_dbag ,_ace :=_eed .(*PSInteger );if !_eea &&!_ace {return ErrTypeCheck ;};if _eea &&_abc .Val ==0{return ErrUndefinedResult ;};if _ace &&_dbag .Val ==0{return ErrUndefinedResult ;
};_acg ,_ggaf :=_bbfg .(*PSReal );_facd ,_eff :=_bbfg .(*PSInteger );if !_ggaf &&!_eff {return ErrTypeCheck ;};var _aebf float64 ;if _ggaf {_aebf =_acg .Val ;}else {_aebf =float64 (_facd .Val );};if _eea {_aebf /=_abc .Val ;}else {_aebf /=float64 (_dbag .Val );
};_bbb =_gfc .Push (MakeReal (_aebf ));return _bbb ;};

// PSObjectArrayToFloat64Array converts []PSObject into a []float64 array. Each PSObject must represent a number,
// otherwise a ErrTypeCheck error occurs.
func PSObjectArrayToFloat64Array (objects []PSObject )([]float64 ,error ){var _a []float64 ;for _ ,_gg :=range objects {if _gc ,_gf :=_gg .(*PSInteger );_gf {_a =append (_a ,float64 (_gc .Val ));}else if _gcg ,_af :=_gg .(*PSReal );_af {_a =append (_a ,_gcg .Val );
}else {return nil ,ErrTypeCheck ;};};return _a ,nil ;};func (_daee *PSParser )skipSpaces ()(int ,error ){_deg :=0;for {_baac ,_eabd :=_daee ._afba .Peek (1);if _eabd !=nil {return 0,_eabd ;};if _b .IsWhiteSpace (_baac [0]){_daee ._afba .ReadByte ();_deg ++;
}else {break ;};};return _deg ,nil ;};func (_ggc *PSOperand )mod (_caca *PSStack )error {_bgg ,_ceg :=_caca .Pop ();if _ceg !=nil {return _ceg ;};_bagg ,_ceg :=_caca .Pop ();if _ceg !=nil {return _ceg ;};_ffg ,_aeeg :=_bgg .(*PSInteger );if !_aeeg {return ErrTypeCheck ;
};if _ffg .Val ==0{return ErrUndefinedResult ;};_bfd ,_aeeg :=_bagg .(*PSInteger );if !_aeeg {return ErrTypeCheck ;};_adfe :=_bfd .Val %_ffg .Val ;_ceg =_caca .Push (MakeInteger (_adfe ));return _ceg ;};func (_ada *PSOperand )cvr (_aff *PSStack )error {_cgde ,_bbad :=_aff .Pop ();
if _bbad !=nil {return _bbad ;};if _afbf ,_ccf :=_cgde .(*PSReal );_ccf {_bbad =_aff .Push (MakeReal (_afbf .Val ));}else if _bcee ,_cdcf :=_cgde .(*PSInteger );_cdcf {_bbad =_aff .Push (MakeReal (float64 (_bcee .Val )));}else {return ErrTypeCheck ;};return _bbad ;
};func (_gga *PSOperand )add (_cb *PSStack )error {_bf ,_fcb :=_cb .Pop ();if _fcb !=nil {return _fcb ;};_bg ,_fcb :=_cb .Pop ();if _fcb !=nil {return _fcb ;};_gec ,_efa :=_bf .(*PSReal );_dbe ,_cgb :=_bf .(*PSInteger );if !_efa &&!_cgb {return ErrTypeCheck ;
};_ec ,_ad :=_bg .(*PSReal );_da ,_aeb :=_bg .(*PSInteger );if !_ad &&!_aeb {return ErrTypeCheck ;};if _cgb &&_aeb {_ffc :=_dbe .Val +_da .Val ;_fdd :=_cb .Push (MakeInteger (_ffc ));return _fdd ;};var _ecb float64 ;if _efa {_ecb =_gec .Val ;}else {_ecb =float64 (_dbe .Val );
};if _ad {_ecb +=_ec .Val ;}else {_ecb +=float64 (_da .Val );};_fcb =_cb .Push (MakeReal (_ecb ));return _fcb ;};func (_fcc *PSBoolean )Duplicate ()PSObject {_cg :=PSBoolean {};_cg .Val =_fcc .Val ;return &_cg };func (_fge *PSOperand )abs (_bbf *PSStack )error {_faf ,_afg :=_bbf .Pop ();
if _afg !=nil {return _afg ;};if _bdgd ,_agg :=_faf .(*PSReal );_agg {_abb :=_bdgd .Val ;if _abb < 0{_afg =_bbf .Push (MakeReal (-_abb ));}else {_afg =_bbf .Push (MakeReal (_abb ));};}else if _cdc ,_gcf :=_faf .(*PSInteger );_gcf {_gab :=_cdc .Val ;if _gab < 0{_afg =_bbf .Push (MakeInteger (-_gab ));
}else {_afg =_bbf .Push (MakeInteger (_gab ));};}else {return ErrTypeCheck ;};return _afg ;};

// String returns a string representation of the stack.
func (_cdbb *PSStack )String ()string {_gaa :="\u005b\u0020";for _ ,_edda :=range *_cdbb {_gaa +=_edda .String ();_gaa +="\u0020";};_gaa +="\u005d";return _gaa ;};func (_ab *PSInteger )String ()string {return _ef .Sprintf ("\u0025\u0064",_ab .Val )};func (_fdfc *PSOperand )log (_cgf *PSStack )error {_acbd ,_dbge :=_cgf .PopNumberAsFloat64 ();
if _dbge !=nil {return _dbge ;};_cda :=_ce .Log10 (_acbd );_dbge =_cgf .Push (MakeReal (_cda ));return _dbge ;};

// PSReal represents a real number.
type PSReal struct{Val float64 ;};func (_gd *PSReal )String ()string {return _ef .Sprintf ("\u0025\u002e\u0035\u0066",_gd .Val )};func (_cgd *PSOperand )Duplicate ()PSObject {_age :=*_cgd ;return &_age };

// PSInteger represents an integer.
type PSInteger struct{Val int ;};

// NewPSParser returns a new instance of the PDF Postscript parser from input data.
func NewPSParser (content []byte )*PSParser {_cbeg :=PSParser {};_faec :=_ed .NewBuffer (content );_cbeg ._afba =_ea .NewReader (_faec );return &_cbeg ;};func (_ebcg *PSOperand )gt (_cfe *PSStack )error {_fbc ,_bbg :=_cfe .PopNumberAsFloat64 ();if _bbg !=nil {return _bbg ;
};_gbc ,_bbg :=_cfe .PopNumberAsFloat64 ();if _bbg !=nil {return _bbg ;};if _ce .Abs (_gbc -_fbc )< _ge {_afgd :=_cfe .Push (MakeBool (false ));return _afgd ;}else if _gbc > _fbc {_eegf :=_cfe .Push (MakeBool (true ));return _eegf ;}else {_efd :=_cfe .Push (MakeBool (false ));
return _efd ;};};

// NewPSProgram returns an empty, initialized PSProgram.
func NewPSProgram ()*PSProgram {return &PSProgram {}};func (_caa *PSOperand )ceiling (_dag *PSStack )error {_cbc ,_gba :=_dag .Pop ();if _gba !=nil {return _gba ;};if _bdgg ,_dbf :=_cbc .(*PSReal );_dbf {_gba =_dag .Push (MakeReal (_ce .Ceil (_bdgg .Val )));
}else if _cdd ,_dba :=_cbc .(*PSInteger );_dba {_gba =_dag .Push (MakeInteger (_cdd .Val ));}else {_gba =ErrTypeCheck ;};return _gba ;};func (_adf *PSOperand )bitshift (_fb *PSStack )error {_fad ,_fac :=_fb .PopInteger ();if _fac !=nil {return _fac ;};
_ac ,_fac :=_fb .PopInteger ();if _fac !=nil {return _fac ;};var _gdf int ;if _fad >=0{_gdf =_ac <<uint (_fad );}else {_gdf =_ac >>uint (-_fad );};_fac =_fb .Push (MakeInteger (_gdf ));return _fac ;};const _ge =0.000001;func (_aeg *PSOperand )ge (_aeba *PSStack )error {_cdgf ,_eac :=_aeba .PopNumberAsFloat64 ();
if _eac !=nil {return _eac ;};_cab ,_eac :=_aeba .PopNumberAsFloat64 ();if _eac !=nil {return _eac ;};if _ce .Abs (_cab -_cdgf )< _ge {_bfcc :=_aeba .Push (MakeBool (true ));return _bfcc ;}else if _cab > _cdgf {_faad :=_aeba .Push (MakeBool (true ));return _faad ;
}else {_bab :=_aeba .Push (MakeBool (false ));return _bab ;};};func (_efc *PSOperand )lt (_aebg *PSStack )error {_dfac ,_gac :=_aebg .PopNumberAsFloat64 ();if _gac !=nil {return _gac ;};_bbc ,_gac :=_aebg .PopNumberAsFloat64 ();if _gac !=nil {return _gac ;
};if _ce .Abs (_bbc -_dfac )< _ge {_acec :=_aebg .Push (MakeBool (false ));return _acec ;}else if _bbc < _dfac {_add :=_aebg .Push (MakeBool (true ));return _add ;}else {_eag :=_aebg .Push (MakeBool (false ));return _eag ;};};

// PopInteger specificially pops an integer from the top of the stack, returning the value as an int.
func (_ggb *PSStack )PopInteger ()(int ,error ){_ede ,_acbb :=_ggb .Pop ();if _acbb !=nil {return 0,_acbb ;};if _bca ,_ddg :=_ede .(*PSInteger );_ddg {return _bca .Val ,nil ;};return 0,ErrTypeCheck ;};func (_dbd *PSParser )skipComments ()error {if _ ,_dab :=_dbd .skipSpaces ();
_dab !=nil {return _dab ;};_aec :=true ;for {_cgbf ,_begg :=_dbd ._afba .Peek (1);if _begg !=nil {_f .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_begg .Error ());return _begg ;};if _aec &&_cgbf [0]!='%'{return nil ;};_aec =false ;if (_cgbf [0]!='\r')&&(_cgbf [0]!='\n'){_dbd ._afba .ReadByte ();
}else {break ;};};return _dbd .skipComments ();};var ErrStackOverflow =_c .New ("\u0073\u0074\u0061\u0063\u006b\u0020\u006f\u0076\u0065r\u0066\u006c\u006f\u0077");func (_dcab *PSOperand )truncate (_acf *PSStack )error {_eagb ,_cbb :=_acf .Pop ();if _cbb !=nil {return _cbb ;
};if _gbg ,_eba :=_eagb .(*PSReal );_eba {_dbfc :=int (_gbg .Val );_cbb =_acf .Push (MakeReal (float64 (_dbfc )));}else if _ffag ,_gda :=_eagb .(*PSInteger );_gda {_cbb =_acf .Push (MakeInteger (_ffag .Val ));}else {return ErrTypeCheck ;};return _cbb ;
};var ErrUndefinedResult =_c .New ("\u0075\u006e\u0064\u0065fi\u006e\u0065\u0064\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0065\u0072\u0072o\u0072");func (_dcaa *PSOperand )idiv (_daa *PSStack )error {_dgf ,_gebe :=_daa .Pop ();if _gebe !=nil {return _gebe ;
};_acb ,_gebe :=_daa .Pop ();if _gebe !=nil {return _gebe ;};_fec ,_fee :=_dgf .(*PSInteger );if !_fee {return ErrTypeCheck ;};if _fec .Val ==0{return ErrUndefinedResult ;};_aga ,_fee :=_acb .(*PSInteger );if !_fee {return ErrTypeCheck ;};_fafa :=_aga .Val /_fec .Val ;
_gebe =_daa .Push (MakeInteger (_fafa ));return _gebe ;};func (_gag *PSBoolean )String ()string {return _ef .Sprintf ("\u0025\u0076",_gag .Val )};

// NewPSExecutor returns an initialized PSExecutor for an input `program`.
func NewPSExecutor (program *PSProgram )*PSExecutor {_be :=&PSExecutor {};_be .Stack =NewPSStack ();_be ._edd =program ;return _be ;};func (_ffac *PSOperand )mul (_ddee *PSStack )error {_fcg ,_aba :=_ddee .Pop ();if _aba !=nil {return _aba ;};_dbb ,_aba :=_ddee .Pop ();
if _aba !=nil {return _aba ;};_dac ,_ebg :=_fcg .(*PSReal );_dgc ,_dfge :=_fcg .(*PSInteger );if !_ebg &&!_dfge {return ErrTypeCheck ;};_bbce ,_eaa :=_dbb .(*PSReal );_cfd ,_bcd :=_dbb .(*PSInteger );if !_eaa &&!_bcd {return ErrTypeCheck ;};if _dfge &&_bcd {_dbgg :=_dgc .Val *_cfd .Val ;
_bde :=_ddee .Push (MakeInteger (_dbgg ));return _bde ;};var _cbg float64 ;if _ebg {_cbg =_dac .Val ;}else {_cbg =float64 (_dgc .Val );};if _eaa {_cbg *=_bbce .Val ;}else {_cbg *=float64 (_cfd .Val );};_aba =_ddee .Push (MakeReal (_cbg ));return _aba ;
};func (_fbab *PSOperand )ifCondition (_aaf *PSStack )error {_cdcg ,_afda :=_aaf .Pop ();if _afda !=nil {return _afda ;};_egc ,_afda :=_aaf .Pop ();if _afda !=nil {return _afda ;};_affg ,_fada :=_cdcg .(*PSProgram );if !_fada {return ErrTypeCheck ;};_fbd ,_fada :=_egc .(*PSBoolean );
if !_fada {return ErrTypeCheck ;};if _fbd .Val {_fde :=_affg .Exec (_aaf );return _fde ;};return nil ;};

// PSOperand represents a Postscript operand (text string).
type PSOperand string ;var ErrUnsupportedOperand =_c .New ("\u0075\u006e\u0073\u0075pp\u006f\u0072\u0074\u0065\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");

// PSExecutor has its own execution stack and is used to executre a PS routine (program).
type PSExecutor struct{Stack *PSStack ;_edd *PSProgram ;};var ErrStackUnderflow =_c .New ("\u0073t\u0061c\u006b\u0020\u0075\u006e\u0064\u0065\u0072\u0066\u006c\u006f\u0077");

// MakeInteger returns a new PSInteger object initialized with `val`.
func MakeInteger (val int )*PSInteger {_bgfcf :=PSInteger {};_bgfcf .Val =val ;return &_bgfcf };func (_ag *PSOperand )DebugString ()string {return _ef .Sprintf ("\u006fp\u003a\u0027\u0025\u0073\u0027",*_ag );};func (_bfa *PSOperand )exch (_aee *PSStack )error {_caad ,_gae :=_aee .Pop ();
if _gae !=nil {return _gae ;};_gdc ,_gae :=_aee .Pop ();if _gae !=nil {return _gae ;};_gae =_aee .Push (_caad );if _gae !=nil {return _gae ;};_gae =_aee .Push (_gdc );return _gae ;};func (_dacf *PSOperand )sub (_bgf *PSStack )error {_eeab ,_dacg :=_bgf .Pop ();
if _dacg !=nil {return _dacg ;};_aade ,_dacg :=_bgf .Pop ();if _dacg !=nil {return _dacg ;};_efcc ,_aegg :=_eeab .(*PSReal );_acc ,_dffd :=_eeab .(*PSInteger );if !_aegg &&!_dffd {return ErrTypeCheck ;};_ccb ,_cgba :=_aade .(*PSReal );_gcga ,_dfc :=_aade .(*PSInteger );
if !_cgba &&!_dfc {return ErrTypeCheck ;};if _dffd &&_dfc {_adb :=_gcga .Val -_acc .Val ;_ggfe :=_bgf .Push (MakeInteger (_adb ));return _ggfe ;};var _ebd float64 =0;if _cgba {_ebd =_ccb .Val ;}else {_ebd =float64 (_gcga .Val );};if _aegg {_ebd -=_efcc .Val ;
}else {_ebd -=float64 (_acc .Val );};_dacg =_bgf .Push (MakeReal (_ebd ));return _dacg ;};

// PSStack defines a stack of PSObjects. PSObjects can be pushed on or pull from the stack.
type PSStack []PSObject ;func (_beab *PSOperand )eq (_affb *PSStack )error {_cfc ,_caaf :=_affb .Pop ();if _caaf !=nil {return _caaf ;};_baf ,_caaf :=_affb .Pop ();if _caaf !=nil {return _caaf ;};_geg ,_df :=_cfc .(*PSBoolean );_gce ,_dade :=_baf .(*PSBoolean );
if _df ||_dade {var _eeb error ;if _df &&_dade {_eeb =_affb .Push (MakeBool (_geg .Val ==_gce .Val ));}else {_eeb =_affb .Push (MakeBool (false ));};return _eeb ;};var _cce float64 ;var _eeg float64 ;if _fbe ,_gbea :=_cfc .(*PSInteger );_gbea {_cce =float64 (_fbe .Val );
}else if _bga ,_cbe :=_cfc .(*PSReal );_cbe {_cce =_bga .Val ;}else {return ErrTypeCheck ;};if _aa ,_eeaa :=_baf .(*PSInteger );_eeaa {_eeg =float64 (_aa .Val );}else if _de ,_ebb :=_baf .(*PSReal );_ebb {_eeg =_de .Val ;}else {return ErrTypeCheck ;};if _ce .Abs (_eeg -_cce )< _ge {_caaf =_affb .Push (MakeBool (true ));
}else {_caaf =_affb .Push (MakeBool (false ));};return _caaf ;};func (_cgda *PSOperand )floor (_aea *PSStack )error {_cfb ,_dce :=_aea .Pop ();if _dce !=nil {return _dce ;};if _bfg ,_adae :=_cfb .(*PSReal );_adae {_dce =_aea .Push (MakeReal (_ce .Floor (_bfg .Val )));
}else if _fdc ,_bfab :=_cfb .(*PSInteger );_bfab {_dce =_aea .Push (MakeInteger (_fdc .Val ));}else {return ErrTypeCheck ;};return _dce ;};func (_bec *PSParser )parseNumber ()(PSObject ,error ){_adg ,_bee :=_b .ParseNumber (_bec ._afba );if _bee !=nil {return nil ,_bee ;
};switch _gded :=_adg .(type ){case *_b .PdfObjectFloat :return MakeReal (float64 (*_gded )),nil ;case *_b .PdfObjectInteger :return MakeInteger (int (*_gded )),nil ;};return nil ,_ef .Errorf ("\u0075n\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_adg );
};

// DebugString returns a descriptive string representation of the stack - intended for debugging.
func (_ceca *PSStack )DebugString ()string {_agf :="\u005b\u0020";for _ ,_ade :=range *_ceca {_agf +=_ade .DebugString ();_agf +="\u0020";};_agf +="\u005d";return _agf ;};func (_afd *PSOperand )cvi (_gcfc *PSStack )error {_bcea ,_fce :=_gcfc .Pop ();if _fce !=nil {return _fce ;
};if _dcf ,_gcbf :=_bcea .(*PSReal );_gcbf {_ebf :=int (_dcf .Val );_fce =_gcfc .Push (MakeInteger (_ebf ));}else if _efbf ,_ffaf :=_bcea .(*PSInteger );_ffaf {_cdba :=_efbf .Val ;_fce =_gcfc .Push (MakeInteger (_cdba ));}else {return ErrTypeCheck ;};return _fce ;
};func (_fdf *PSOperand )ifelse (_dfa *PSStack )error {_gagc ,_efg :=_dfa .Pop ();if _efg !=nil {return _efg ;};_eace ,_efg :=_dfa .Pop ();if _efg !=nil {return _efg ;};_fff ,_efg :=_dfa .Pop ();if _efg !=nil {return _efg ;};_cff ,_dgd :=_gagc .(*PSProgram );
if !_dgd {return ErrTypeCheck ;};_ecc ,_dgd :=_eace .(*PSProgram );if !_dgd {return ErrTypeCheck ;};_bbge ,_dgd :=_fff .(*PSBoolean );if !_dgd {return ErrTypeCheck ;};if _bbge .Val {_agb :=_ecc .Exec (_dfa );return _agb ;};_efg =_cff .Exec (_dfa );return _efg ;
};

// Parse parses the postscript and store as a program that can be executed.
func (_ffe *PSParser )Parse ()(*PSProgram ,error ){_ffe .skipSpaces ();_ffeg ,_fgcf :=_ffe ._afba .Peek (2);if _fgcf !=nil {return nil ,_fgcf ;};if _ffeg [0]!='{'{return nil ,_c .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0053\u0020\u0050\u0072\u006f\u0067\u0072\u0061\u006d\u0020\u006e\u006f\u0074\u0020\u0073t\u0061\u0072\u0074\u0069\u006eg\u0020\u0077i\u0074\u0068\u0020\u007b");
};_dded ,_fgcf :=_ffe .parseFunction ();if _fgcf !=nil &&_fgcf !=_g .EOF {return nil ,_fgcf ;};return _dded ,_fgcf ;};func _gdcc (_ebfc int )int {if _ebfc < 0{return -_ebfc ;};return _ebfc ;};

// MakeReal returns a new PSReal object initialized with `val`.
func MakeReal (val float64 )*PSReal {_fecc :=PSReal {};_fecc .Val =val ;return &_fecc };

// Append appends an object to the PSProgram.
func (_ff *PSProgram )Append (obj PSObject ){*_ff =append (*_ff ,obj )};

// PSProgram defines a Postscript program which is a series of PS objects (arguments, commands, programs etc).
type PSProgram []PSObject ;func (_ebbd *PSOperand )index (_bag *PSStack )error {_eccb ,_cddd :=_bag .Pop ();if _cddd !=nil {return _cddd ;};_dff ,_eged :=_eccb .(*PSInteger );if !_eged {return ErrTypeCheck ;};if _dff .Val < 0{return ErrRangeCheck ;};if _dff .Val > len (*_bag )-1{return ErrStackUnderflow ;
};_bace :=(*_bag )[len (*_bag )-1-_dff .Val ];_cddd =_bag .Push (_bace .Duplicate ());return _cddd ;};func (_cbcda *PSParser )parseBool ()(*PSBoolean ,error ){_egbde ,_bdbc :=_cbcda ._afba .Peek (4);if _bdbc !=nil {return MakeBool (false ),_bdbc ;};if (len (_egbde )>=4)&&(string (_egbde [:4])=="\u0074\u0072\u0075\u0065"){_cbcda ._afba .Discard (4);
return MakeBool (true ),nil ;};_egbde ,_bdbc =_cbcda ._afba .Peek (5);if _bdbc !=nil {return MakeBool (false ),_bdbc ;};if (len (_egbde )>=5)&&(string (_egbde [:5])=="\u0066\u0061\u006cs\u0065"){_cbcda ._afba .Discard (5);return MakeBool (false ),nil ;
};return MakeBool (false ),_c .New ("\u0075n\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0062o\u006fl\u0065a\u006e\u0020\u0073\u0074\u0072\u0069\u006eg");};func (_dbac *PSOperand )ln (_dfg *PSStack )error {_ddd ,_cdgd :=_dfg .PopNumberAsFloat64 ();
if _cdgd !=nil {return _cdgd ;};_aeee :=_ce .Log (_ddd );_cdgd =_dfg .Push (MakeReal (_aeee ));return _cdgd ;};func (_cbgf *PSOperand )or (_ddf *PSStack )error {_gdcb ,_ddc :=_ddf .Pop ();if _ddc !=nil {return _ddc ;};_ecbe ,_ddc :=_ddf .Pop ();if _ddc !=nil {return _ddc ;
};if _gfae ,_fbda :=_gdcb .(*PSBoolean );_fbda {_baa ,_cad :=_ecbe .(*PSBoolean );if !_cad {return ErrTypeCheck ;};_ddc =_ddf .Push (MakeBool (_gfae .Val ||_baa .Val ));return _ddc ;};if _gbcg ,_bfge :=_gdcb .(*PSInteger );_bfge {_fgc ,_fadg :=_ecbe .(*PSInteger );
if !_fadg {return ErrTypeCheck ;};_ddc =_ddf .Push (MakeInteger (_gbcg .Val |_fgc .Val ));return _ddc ;};return ErrTypeCheck ;};

// PopNumberAsFloat64 pops and return the numeric value of the top of the stack as a float64.
// Real or integer only.
func (_accc *PSStack )PopNumberAsFloat64 ()(float64 ,error ){_ffdb ,_gge :=_accc .Pop ();if _gge !=nil {return 0,_gge ;};if _bbbef ,_babg :=_ffdb .(*PSReal );_babg {return _bbbef .Val ,nil ;}else if _bbcb ,_bbgc :=_ffdb .(*PSInteger );_bbgc {return float64 (_bbcb .Val ),nil ;
}else {return 0,ErrTypeCheck ;};};func (_efb *PSOperand )cos (_cdbg *PSStack )error {_ggf ,_bce :=_cdbg .PopNumberAsFloat64 ();if _bce !=nil {return _bce ;};_acd :=_ce .Cos (_ggf *_ce .Pi /180.0);_bce =_cdbg .Push (MakeReal (_acd ));return _bce ;};

// NewPSStack returns an initialized PSStack.
func NewPSStack ()*PSStack {return &PSStack {}};func (_aed *PSParser )parseFunction ()(*PSProgram ,error ){_eebb ,_ :=_aed ._afba .ReadByte ();if _eebb !='{'{return nil ,_c .New ("\u0069\u006ev\u0061\u006c\u0069d\u0020\u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e");
};_gfd :=NewPSProgram ();for {_aed .skipSpaces ();_aed .skipComments ();_ggfb ,_bgfb :=_aed ._afba .Peek (2);if _bgfb !=nil {if _bgfb ==_g .EOF {break ;};return nil ,_bgfb ;};_f .Log .Trace ("\u0050e\u0065k\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u003a\u0020\u0025\u0073",string (_ggfb ));
if _ggfb [0]=='}'{_f .Log .Trace ("\u0045\u004f\u0046 \u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e");_aed ._afba .ReadByte ();break ;}else if _ggfb [0]=='{'{_f .Log .Trace ("\u0046u\u006e\u0063\u0074\u0069\u006f\u006e!");_fafag ,_faca :=_aed .parseFunction ();
if _faca !=nil {return nil ,_faca ;};_gfd .Append (_fafag );}else if _b .IsDecimalDigit (_ggfb [0])||(_ggfb [0]=='-'&&_b .IsDecimalDigit (_ggfb [1])){_f .Log .Trace ("\u002d>\u004e\u0075\u006d\u0062\u0065\u0072!");_ebef ,_dbdf :=_aed .parseNumber ();if _dbdf !=nil {return nil ,_dbdf ;
};_gfd .Append (_ebef );}else {_f .Log .Trace ("\u002d>\u004fp\u0065\u0072\u0061\u006e\u0064 \u006f\u0072 \u0062\u006f\u006f\u006c\u003f");_ggfb ,_ =_aed ._afba .Peek (5);_dagfe :=string (_ggfb );_f .Log .Trace ("\u0050\u0065\u0065k\u0020\u0073\u0074\u0072\u003a\u0020\u0025\u0073",_dagfe );
if (len (_dagfe )> 4)&&(_dagfe [:5]=="\u0066\u0061\u006cs\u0065"){_fafb ,_eddg :=_aed .parseBool ();if _eddg !=nil {return nil ,_eddg ;};_gfd .Append (_fafb );}else if (len (_dagfe )> 3)&&(_dagfe [:4]=="\u0074\u0072\u0075\u0065"){_bdd ,_gcgd :=_aed .parseBool ();
if _gcgd !=nil {return nil ,_gcgd ;};_gfd .Append (_bdd );}else {_bafc ,_bfaa :=_aed .parseOperand ();if _bfaa !=nil {return nil ,_bfaa ;};_gfd .Append (_bafc );};};};return _gfd ,nil ;};

// PSBoolean represents a boolean value.
type PSBoolean struct{Val bool ;};func (_aafc *PSOperand )not (_eca *PSStack )error {_egb ,_bae :=_eca .Pop ();if _bae !=nil {return _bae ;};if _deb ,_bgcf :=_egb .(*PSBoolean );_bgcf {_bae =_eca .Push (MakeBool (!_deb .Val ));return _bae ;}else if _ggff ,_ebe :=_egb .(*PSInteger );
_ebe {_bae =_eca .Push (MakeInteger (^_ggff .Val ));return _bae ;}else {return ErrTypeCheck ;};};

// PSObject represents a postscript object.
type PSObject interface{

// Duplicate makes a fresh copy of the PSObject.
Duplicate ()PSObject ;

// DebugString returns a descriptive representation of the PSObject with more information than String()
// for debugging purposes.
DebugString ()string ;

// String returns a string representation of the PSObject.
String ()string ;};func (_cf *PSProgram )String ()string {_ba :="\u007b\u0020";for _ ,_eb :=range *_cf {_ba +=_eb .String ();_ba +="\u0020";};_ba +="\u007d";return _ba ;};

// Empty empties the stack.
func (_ded *PSStack )Empty (){*_ded =[]PSObject {}};

// Push pushes an object on top of the stack.
func (_acee *PSStack )Push (obj PSObject )error {if len (*_acee )> 100{return ErrStackOverflow ;};*_acee =append (*_acee ,obj );return nil ;};func (_bge *PSOperand )exp (_bcc *PSStack )error {_dbg ,_bfc :=_bcc .PopNumberAsFloat64 ();if _bfc !=nil {return _bfc ;
};_bbaf ,_bfc :=_bcc .PopNumberAsFloat64 ();if _bfc !=nil {return _bfc ;};if _ce .Abs (_dbg )< 1&&_bbaf < 0{return ErrUndefinedResult ;};_adfg :=_ce .Pow (_bbaf ,_dbg );_bfc =_bcc .Push (MakeReal (_adfg ));return _bfc ;};func (_fcf *PSOperand )neg (_cdddg *PSStack )error {_bcg ,_ebbda :=_cdddg .Pop ();
if _ebbda !=nil {return _ebbda ;};if _cec ,_gbab :=_bcg .(*PSReal );_gbab {_ebbda =_cdddg .Push (MakeReal (-_cec .Val ));return _ebbda ;}else if _ggfg ,_dgca :=_bcg .(*PSInteger );_dgca {_ebbda =_cdddg .Push (MakeInteger (-_ggfg .Val ));return _ebbda ;
}else {return ErrTypeCheck ;};};func (_feg *PSOperand )round (_cdbe *PSStack )error {_cdbaa ,_beae :=_cdbe .Pop ();if _beae !=nil {return _beae ;};if _cbea ,_gaf :=_cdbaa .(*PSReal );_gaf {_beae =_cdbe .Push (MakeReal (_ce .Floor (_cbea .Val +0.5)));}else if _dagf ,_cdag :=_cdbaa .(*PSInteger );
_cdag {_beae =_cdbe .Push (MakeInteger (_dagf .Val ));}else {return ErrTypeCheck ;};return _beae ;};func (_fgeg *PSParser )parseOperand ()(*PSOperand ,error ){var _eda []byte ;for {_gdd ,_aac :=_fgeg ._afba .Peek (1);if _aac !=nil {if _aac ==_g .EOF {break ;
};return nil ,_aac ;};if _b .IsDelimiter (_gdd [0]){break ;};if _b .IsWhiteSpace (_gdd [0]){break ;};_cdcdf ,_ :=_fgeg ._afba .ReadByte ();_eda =append (_eda ,_cdcdf );};if len (_eda )==0{return nil ,_c .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064\u0020\u0028\u0065\u006d\u0070\u0074\u0079\u0029");
};return MakeOperand (string (_eda )),nil ;};func (_gea *PSOperand )le (_dcaf *PSStack )error {_ffb ,_ccg :=_dcaf .PopNumberAsFloat64 ();if _ccg !=nil {return _ccg ;};_ffd ,_ccg :=_dcaf .PopNumberAsFloat64 ();if _ccg !=nil {return _ccg ;};if _ce .Abs (_ffd -_ffb )< _ge {_aeed :=_dcaf .Push (MakeBool (true ));
return _aeed ;}else if _ffd < _ffb {_dcag :=_dcaf .Push (MakeBool (true ));return _dcag ;}else {_gca :=_dcaf .Push (MakeBool (false ));return _gca ;};};var ErrRangeCheck =_c .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");


// Exec executes the operand `op` in the state specified by `stack`.
func (_gfa *PSOperand )Exec (stack *PSStack )error {_cdg :=ErrUnsupportedOperand ;switch *_gfa {case "\u0061\u0062\u0073":_cdg =_gfa .abs (stack );case "\u0061\u0064\u0064":_cdg =_gfa .add (stack );case "\u0061\u006e\u0064":_cdg =_gfa .and (stack );case "\u0061\u0074\u0061\u006e":_cdg =_gfa .atan (stack );
case "\u0062\u0069\u0074\u0073\u0068\u0069\u0066\u0074":_cdg =_gfa .bitshift (stack );case "\u0063e\u0069\u006c\u0069\u006e\u0067":_cdg =_gfa .ceiling (stack );case "\u0063\u006f\u0070\u0079":_cdg =_gfa .copy (stack );case "\u0063\u006f\u0073":_cdg =_gfa .cos (stack );
case "\u0063\u0076\u0069":_cdg =_gfa .cvi (stack );case "\u0063\u0076\u0072":_cdg =_gfa .cvr (stack );case "\u0064\u0069\u0076":_cdg =_gfa .div (stack );case "\u0064\u0075\u0070":_cdg =_gfa .dup (stack );case "\u0065\u0071":_cdg =_gfa .eq (stack );case "\u0065\u0078\u0063\u0068":_cdg =_gfa .exch (stack );
case "\u0065\u0078\u0070":_cdg =_gfa .exp (stack );case "\u0066\u006c\u006fo\u0072":_cdg =_gfa .floor (stack );case "\u0067\u0065":_cdg =_gfa .ge (stack );case "\u0067\u0074":_cdg =_gfa .gt (stack );case "\u0069\u0064\u0069\u0076":_cdg =_gfa .idiv (stack );
case "\u0069\u0066":_cdg =_gfa .ifCondition (stack );case "\u0069\u0066\u0065\u006c\u0073\u0065":_cdg =_gfa .ifelse (stack );case "\u0069\u006e\u0064e\u0078":_cdg =_gfa .index (stack );case "\u006c\u0065":_cdg =_gfa .le (stack );case "\u006c\u006f\u0067":_cdg =_gfa .log (stack );
case "\u006c\u006e":_cdg =_gfa .ln (stack );case "\u006c\u0074":_cdg =_gfa .lt (stack );case "\u006d\u006f\u0064":_cdg =_gfa .mod (stack );case "\u006d\u0075\u006c":_cdg =_gfa .mul (stack );case "\u006e\u0065":_cdg =_gfa .ne (stack );case "\u006e\u0065\u0067":_cdg =_gfa .neg (stack );
case "\u006e\u006f\u0074":_cdg =_gfa .not (stack );case "\u006f\u0072":_cdg =_gfa .or (stack );case "\u0070\u006f\u0070":_cdg =_gfa .pop (stack );case "\u0072\u006f\u0075n\u0064":_cdg =_gfa .round (stack );case "\u0072\u006f\u006c\u006c":_cdg =_gfa .roll (stack );
case "\u0073\u0069\u006e":_cdg =_gfa .sin (stack );case "\u0073\u0071\u0072\u0074":_cdg =_gfa .sqrt (stack );case "\u0073\u0075\u0062":_cdg =_gfa .sub (stack );case "\u0074\u0072\u0075\u006e\u0063\u0061\u0074\u0065":_cdg =_gfa .truncate (stack );case "\u0078\u006f\u0072":_cdg =_gfa .xor (stack );
};return _cdg ;};func (_dgb *PSOperand )ne (_cbcd *PSStack )error {_fdfd :=_dgb .eq (_cbcd );if _fdfd !=nil {return _fdfd ;};_fdfd =_dgb .not (_cbcd );return _fdfd ;};func (_dg *PSReal )Duplicate ()PSObject {_ca :=PSReal {};_ca .Val =_dg .Val ;return &_ca };


// MakeOperand returns a new PSOperand object based on string `val`.
func MakeOperand (val string )*PSOperand {_eae :=PSOperand (val );return &_eae };func (_gb *PSInteger )Duplicate ()PSObject {_dd :=PSInteger {};_dd .Val =_gb .Val ;return &_dd };func (_bc *PSOperand )and (_bgc *PSStack )error {_bdgb ,_abe :=_bgc .Pop ();
if _abe !=nil {return _abe ;};_dad ,_abe :=_bgc .Pop ();if _abe !=nil {return _abe ;};if _gcd ,_bdb :=_bdgb .(*PSBoolean );_bdb {_ecbb ,_fe :=_dad .(*PSBoolean );if !_fe {return ErrTypeCheck ;};_abe =_bgc .Push (MakeBool (_gcd .Val &&_ecbb .Val ));return _abe ;
};if _afc ,_fdb :=_bdgb .(*PSInteger );_fdb {_abea ,_ege :=_dad .(*PSInteger );if !_ege {return ErrTypeCheck ;};_abe =_bgc .Push (MakeInteger (_afc .Val &_abea .Val ));return _abe ;};return ErrTypeCheck ;};var ErrTypeCheck =_c .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");


// PSParser is a basic Postscript parser.
type PSParser struct{_afba *_ea .Reader };func (_aeaa *PSOperand )sin (_abg *PSStack )error {_fffd ,_beaef :=_abg .PopNumberAsFloat64 ();if _beaef !=nil {return _beaef ;};_fgg :=_ce .Sin (_fffd *_ce .Pi /180.0);_beaef =_abg .Push (MakeReal (_fgg ));return _beaef ;
};func (_bega *PSProgram )DebugString ()string {_bd :="\u007b\u0020";for _ ,_gcb :=range *_bega {_bd +=_gcb .DebugString ();_bd +="\u0020";};_bd +="\u007d";return _bd ;};func (_ga *PSReal )DebugString ()string {return _ef .Sprintf ("\u0072e\u0061\u006c\u003a\u0025\u002e\u0035f",_ga .Val );
};

// Execute executes the program for an input parameters `objects` and returns a slice of output objects.
func (_fc *PSExecutor )Execute (objects []PSObject )([]PSObject ,error ){for _ ,_ae :=range objects {_bea :=_fc .Stack .Push (_ae );if _bea !=nil {return nil ,_bea ;};};_d :=_fc ._edd .Exec (_fc .Stack );if _d !=nil {_f .Log .Debug ("\u0045x\u0065c\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_d );
return nil ,_d ;};_ega :=[]PSObject (*_fc .Stack );_fc .Stack .Empty ();return _ega ,nil ;};func (_gbb *PSOperand )dup (_ebc *PSStack )error {_fea ,_cga :=_ebc .Pop ();if _cga !=nil {return _cga ;};_cga =_ebc .Push (_fea );if _cga !=nil {return _cga ;};
_cga =_ebc .Push (_fea .Duplicate ());return _cga ;};

// MakeBool returns a new PSBoolean object initialized with `val`.
func MakeBool (val bool )*PSBoolean {_gdaf :=PSBoolean {};_gdaf .Val =val ;return &_gdaf };