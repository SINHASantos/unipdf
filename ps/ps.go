//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package ps implements various functionalities needed for handling Postscript for PDF uses, in particular
// for PDF function type 4.
//
// Package ps implements various functionalities needed for handling Postscript for PDF uses, in particular
// for PDF function type 4.
package ps ;import (_b "bufio";_a "bytes";_c "errors";_fb "fmt";_ca "github.com/unidoc/unipdf/v3/common";_ac "github.com/unidoc/unipdf/v3/core";_d "io";_f "math";);func (_eddee *PSOperand )gt (_dgb *PSStack )error {_afe ,_aagd :=_dgb .PopNumberAsFloat64 ();
if _aagd !=nil {return _aagd ;};_fbbdg ,_aagd :=_dgb .PopNumberAsFloat64 ();if _aagd !=nil {return _aagd ;};if _f .Abs (_fbbdg -_afe )< _bg {_accg :=_dgb .Push (MakeBool (false ));return _accg ;}else if _fbbdg > _afe {_dfc :=_dgb .Push (MakeBool (true ));
return _dfc ;}else {_cbf :=_dgb .Push (MakeBool (false ));return _cbf ;};};func (_bcc *PSReal )String ()string {return _fb .Sprintf ("\u0025\u002e\u0035\u0066",_bcc .Val )};func (_bcdf *PSOperand )ifCondition (_gef *PSStack )error {_bdag ,_caf :=_gef .Pop ();
if _caf !=nil {return _caf ;};_gcb ,_caf :=_gef .Pop ();if _caf !=nil {return _caf ;};_eba ,_gbcg :=_bdag .(*PSProgram );if !_gbcg {return ErrTypeCheck ;};_caea ,_gbcg :=_gcb .(*PSBoolean );if !_gbcg {return ErrTypeCheck ;};if _caea .Val {_agf :=_eba .Exec (_gef );
return _agf ;};return nil ;};func (_gdcd *PSOperand )sub (_dbbd *PSStack )error {_bfdd ,_agfbd :=_dbbd .Pop ();if _agfbd !=nil {return _agfbd ;};_dadb ,_agfbd :=_dbbd .Pop ();if _agfbd !=nil {return _agfbd ;};_dde ,_aad :=_bfdd .(*PSReal );_gbbd ,_abff :=_bfdd .(*PSInteger );
if !_aad &&!_abff {return ErrTypeCheck ;};_edg ,_caa :=_dadb .(*PSReal );_cecg ,_dcfa :=_dadb .(*PSInteger );if !_caa &&!_dcfa {return ErrTypeCheck ;};if _abff &&_dcfa {_fgd :=_cecg .Val -_gbbd .Val ;_dage :=_dbbd .Push (MakeInteger (_fgd ));return _dage ;
};var _fegg float64 =0;if _caa {_fegg =_edg .Val ;}else {_fegg =float64 (_cecg .Val );};if _aad {_fegg -=_dde .Val ;}else {_fegg -=float64 (_gbbd .Val );};_agfbd =_dbbd .Push (MakeReal (_fegg ));return _agfbd ;};func (_becga *PSOperand )mod (_bcfe *PSStack )error {_fea ,_cbcd :=_bcfe .Pop ();
if _cbcd !=nil {return _cbcd ;};_gad ,_cbcd :=_bcfe .Pop ();if _cbcd !=nil {return _cbcd ;};_cbeg ,_dfcb :=_fea .(*PSInteger );if !_dfcb {return ErrTypeCheck ;};if _cbeg .Val ==0{return ErrUndefinedResult ;};_geea ,_dfcb :=_gad .(*PSInteger );if !_dfcb {return ErrTypeCheck ;
};_ege :=_geea .Val %_cbeg .Val ;_cbcd =_bcfe .Push (MakeInteger (_ege ));return _cbcd ;};func (_cccc *PSInteger )String ()string {return _fb .Sprintf ("\u0025\u0064",_cccc .Val )};func (_dgf *PSOperand )eq (_bgea *PSStack )error {_acb ,_gee :=_bgea .Pop ();
if _gee !=nil {return _gee ;};_cfa ,_gee :=_bgea .Pop ();if _gee !=nil {return _gee ;};_bef ,_dae :=_acb .(*PSBoolean );_aae ,_cdff :=_cfa .(*PSBoolean );if _dae ||_cdff {var _bdee error ;if _dae &&_cdff {_bdee =_bgea .Push (MakeBool (_bef .Val ==_aae .Val ));
}else {_bdee =_bgea .Push (MakeBool (false ));};return _bdee ;};var _fbgb float64 ;var _fde float64 ;if _cae ,_ccb :=_acb .(*PSInteger );_ccb {_fbgb =float64 (_cae .Val );}else if _gbc ,_dbg :=_acb .(*PSReal );_dbg {_fbgb =_gbc .Val ;}else {return ErrTypeCheck ;
};if _cbc ,_egf :=_cfa .(*PSInteger );_egf {_fde =float64 (_cbc .Val );}else if _cage ,_begf :=_cfa .(*PSReal );_begf {_fde =_cage .Val ;}else {return ErrTypeCheck ;};if _f .Abs (_fde -_fbgb )< _bg {_gee =_bgea .Push (MakeBool (true ));}else {_gee =_bgea .Push (MakeBool (false ));
};return _gee ;};func (_ccc *PSInteger )Duplicate ()PSObject {_fd :=PSInteger {};_fd .Val =_ccc .Val ;return &_fd };var ErrStackOverflow =_c .New ("\u0073\u0074\u0061\u0063\u006b\u0020\u006f\u0076\u0065r\u0066\u006c\u006f\u0077");func (_da *PSReal )DebugString ()string {return _fb .Sprintf ("\u0072e\u0061\u006c\u003a\u0025\u002e\u0035f",_da .Val );
};

// DebugString returns a descriptive string representation of the stack - intended for debugging.
func (_ggae *PSStack )DebugString ()string {_gdfa :="\u005b\u0020";for _ ,_cebf :=range *_ggae {_gdfa +=_cebf .DebugString ();_gdfa +="\u0020";};_gdfa +="\u005d";return _gdfa ;};func (_fbc *PSOperand )index (_ecfc *PSStack )error {_ffd ,_fdc :=_ecfc .Pop ();
if _fdc !=nil {return _fdc ;};_gfb ,_ddfb :=_ffd .(*PSInteger );if !_ddfb {return ErrTypeCheck ;};if _gfb .Val < 0{return ErrRangeCheck ;};if _gfb .Val > len (*_ecfc )-1{return ErrStackUnderflow ;};_ebe :=(*_ecfc )[len (*_ecfc )-1-_gfb .Val ];_fdc =_ecfc .Push (_ebe .Duplicate ());
return _fdc ;};func (_fbfa *PSOperand )and (_gaf *PSStack )error {_eg ,_daf :=_gaf .Pop ();if _daf !=nil {return _daf ;};_ddaa ,_daf :=_gaf .Pop ();if _daf !=nil {return _daf ;};if _becg ,_bd :=_eg .(*PSBoolean );_bd {_degb ,_ebg :=_ddaa .(*PSBoolean );
if !_ebg {return ErrTypeCheck ;};_daf =_gaf .Push (MakeBool (_becg .Val &&_degb .Val ));return _daf ;};if _beg ,_gab :=_eg .(*PSInteger );_gab {_abd ,_gae :=_ddaa .(*PSInteger );if !_gae {return ErrTypeCheck ;};_daf =_gaf .Push (MakeInteger (_beg .Val &_abd .Val ));
return _daf ;};return ErrTypeCheck ;};func (_eea *PSOperand )mul (_gbe *PSStack )error {_ecbe ,_adaf :=_gbe .Pop ();if _adaf !=nil {return _adaf ;};_gba ,_adaf :=_gbe .Pop ();if _adaf !=nil {return _adaf ;};_bee ,_fce :=_ecbe .(*PSReal );_fgg ,_fed :=_ecbe .(*PSInteger );
if !_fce &&!_fed {return ErrTypeCheck ;};_gffc ,_egb :=_gba .(*PSReal );_bacd ,_effb :=_gba .(*PSInteger );if !_egb &&!_effb {return ErrTypeCheck ;};if _fed &&_effb {_cccb :=_fgg .Val *_bacd .Val ;_ffa :=_gbe .Push (MakeInteger (_cccb ));return _ffa ;};
var _abbb float64 ;if _fce {_abbb =_bee .Val ;}else {_abbb =float64 (_fgg .Val );};if _egb {_abbb *=_gffc .Val ;}else {_abbb *=float64 (_bacd .Val );};_adaf =_gbe .Push (MakeReal (_abbb ));return _adaf ;};func (_ebeb *PSParser )skipComments ()error {if _ ,_cfc :=_ebeb .skipSpaces ();
_cfc !=nil {return _cfc ;};_eedc :=true ;for {_egg ,_gfgc :=_ebeb ._bdbc .Peek (1);if _gfgc !=nil {_ca .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_gfgc .Error ());return _gfgc ;};if _eedc &&_egg [0]!='%'{return nil ;};_eedc =false ;
if (_egg [0]!='\r')&&(_egg [0]!='\n'){_ebeb ._bdbc .ReadByte ();}else {break ;};};return _ebeb .skipComments ();};

// PSObject represents a postscript object.
type PSObject interface{

// Duplicate makes a fresh copy of the PSObject.
Duplicate ()PSObject ;

// DebugString returns a descriptive representation of the PSObject with more information than String()
// for debugging purposes.
DebugString ()string ;

// String returns a string representation of the PSObject.
String ()string ;};func (_gea *PSOperand )sin (_gbea *PSStack )error {_gdf ,_gfcg :=_gbea .PopNumberAsFloat64 ();if _gfcg !=nil {return _gfcg ;};_ccad :=_f .Sin (_gdf *_f .Pi /180.0);_gfcg =_gbea .Push (MakeReal (_ccad ));return _gfcg ;};func (_gccb *PSOperand )truncate (_fef *PSStack )error {_gabe ,_ebf :=_fef .Pop ();
if _ebf !=nil {return _ebf ;};if _cde ,_acfe :=_gabe .(*PSReal );_acfe {_ebea :=int (_cde .Val );_ebf =_fef .Push (MakeReal (float64 (_ebea )));}else if _ddg ,_gggb :=_gabe .(*PSInteger );_gggb {_ebf =_fef .Push (MakeInteger (_ddg .Val ));}else {return ErrTypeCheck ;
};return _ebf ;};func (_dc *PSInteger )DebugString ()string {return _fb .Sprintf ("\u0069\u006e\u0074\u003a\u0025\u0064",_dc .Val );};func (_bdgc *PSOperand )dup (_edd *PSStack )error {_cbe ,_afcg :=_edd .Pop ();if _afcg !=nil {return _afcg ;};_afcg =_edd .Push (_cbe );
if _afcg !=nil {return _afcg ;};_afcg =_edd .Push (_cbe .Duplicate ());return _afcg ;};func (_cag *PSOperand )DebugString ()string {return _fb .Sprintf ("\u006fp\u003a\u0027\u0025\u0073\u0027",*_cag );};func (_fc *PSOperand )String ()string {return string (*_fc )};


// PSInteger represents an integer.
type PSInteger struct{Val int ;};func (_gbgc *PSOperand )ceiling (_bge *PSStack )error {_dcb ,_db :=_bge .Pop ();if _db !=nil {return _db ;};if _bac ,_aafc :=_dcb .(*PSReal );_aafc {_db =_bge .Push (MakeReal (_f .Ceil (_bac .Val )));}else if _aab ,_dcd :=_dcb .(*PSInteger );
_dcd {_db =_bge .Push (MakeInteger (_aab .Val ));}else {_db =ErrTypeCheck ;};return _db ;};func (_cg *PSOperand )add (_ecd *PSStack )error {_gca ,_ggg :=_ecd .Pop ();if _ggg !=nil {return _ggg ;};_fg ,_ggg :=_ecd .Pop ();if _ggg !=nil {return _ggg ;};_cfb ,_bfa :=_gca .(*PSReal );
_bgd ,_bba :=_gca .(*PSInteger );if !_bfa &&!_bba {return ErrTypeCheck ;};_bff ,_fga :=_fg .(*PSReal );_fa ,_afb :=_fg .(*PSInteger );if !_fga &&!_afb {return ErrTypeCheck ;};if _bba &&_afb {_gga :=_bgd .Val +_fa .Val ;_abb :=_ecd .Push (MakeInteger (_gga ));
return _abb ;};var _adad float64 ;if _bfa {_adad =_cfb .Val ;}else {_adad =float64 (_bgd .Val );};if _fga {_adad +=_bff .Val ;}else {_adad +=float64 (_fa .Val );};_ggg =_ecd .Push (MakeReal (_adad ));return _ggg ;};func (_bcd *PSReal )Duplicate ()PSObject {_fbf :=PSReal {};
_fbf .Val =_bcd .Val ;return &_fbf };

// MakeReal returns a new PSReal object initialized with `val`.
func MakeReal (val float64 )*PSReal {_agea :=PSReal {};_agea .Val =val ;return &_agea };func (_acdef *PSOperand )lt (_aaa *PSStack )error {_edbd ,_gdd :=_aaa .PopNumberAsFloat64 ();if _gdd !=nil {return _gdd ;};_bcf ,_gdd :=_aaa .PopNumberAsFloat64 ();
if _gdd !=nil {return _gdd ;};if _f .Abs (_bcf -_edbd )< _bg {_efa :=_aaa .Push (MakeBool (false ));return _efa ;}else if _bcf < _edbd {_ebbe :=_aaa .Push (MakeBool (true ));return _ebbe ;}else {_edc :=_aaa .Push (MakeBool (false ));return _edc ;};};var ErrRangeCheck =_c .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");
func (_bfd *PSOperand )ne (_ega *PSStack )error {_bce :=_bfd .eq (_ega );if _bce !=nil {return _bce ;};_bce =_bfd .not (_ega );return _bce ;};

// NewPSExecutor returns an initialized PSExecutor for an input `program`.
func NewPSExecutor (program *PSProgram )*PSExecutor {_cc :=&PSExecutor {};_cc .Stack =NewPSStack ();_cc ._fbg =program ;return _cc ;};

// Parse parses the postscript and store as a program that can be executed.
func (_efbg *PSParser )Parse ()(*PSProgram ,error ){_efbg .skipSpaces ();_fbd ,_gfa :=_efbg ._bdbc .Peek (2);if _gfa !=nil {return nil ,_gfa ;};if _fbd [0]!='{'{return nil ,_c .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0053\u0020\u0050\u0072\u006f\u0067\u0072\u0061\u006d\u0020\u006e\u006f\u0074\u0020\u0073t\u0061\u0072\u0074\u0069\u006eg\u0020\u0077i\u0074\u0068\u0020\u007b");
};_ebc ,_gfa :=_efbg .parseFunction ();if _gfa !=nil &&_gfa !=_d .EOF {return nil ,_gfa ;};return _ebc ,_gfa ;};func (_aafe *PSOperand )log (_aabb *PSStack )error {_agfb ,_cece :=_aabb .PopNumberAsFloat64 ();if _cece !=nil {return _cece ;};_agg :=_f .Log10 (_agfb );
_cece =_aabb .Push (MakeReal (_agg ));return _cece ;};func (_egaf *PSOperand )roll (_gfe *PSStack )error {_fcd ,_gffd :=_gfe .Pop ();if _gffd !=nil {return _gffd ;};_feg ,_gffd :=_gfe .Pop ();if _gffd !=nil {return _gffd ;};_aagc ,_cdd :=_fcd .(*PSInteger );
if !_cdd {return ErrTypeCheck ;};_faa ,_cdd :=_feg .(*PSInteger );if !_cdd {return ErrTypeCheck ;};if _faa .Val < 0{return ErrRangeCheck ;};if _faa .Val ==0||_faa .Val ==1{return nil ;};if _faa .Val > len (*_gfe ){return ErrStackUnderflow ;};for _dgba :=0;
_dgba < _faf (_aagc .Val );_dgba ++{var _efgg []PSObject ;_efgg =(*_gfe )[len (*_gfe )-(_faa .Val ):len (*_gfe )];if _aagc .Val > 0{_acg :=_efgg [len (_efgg )-1];_efgg =append ([]PSObject {_acg },_efgg [0:len (_efgg )-1]...);}else {_adc :=_efgg [len (_efgg )-_faa .Val ];
_efgg =append (_efgg [1:],_adc );};_efe :=append ((*_gfe )[0:len (*_gfe )-_faa .Val ],_efgg ...);_gfe =&_efe ;};return nil ;};

// NewPSParser returns a new instance of the PDF Postscript parser from input data.
func NewPSParser (content []byte )*PSParser {_cecc :=PSParser {};_begc :=_a .NewBuffer (content );_cecc ._bdbc =_b .NewReader (_begc );return &_cecc ;};func (_gbag *PSParser )parseBool ()(*PSBoolean ,error ){_gfbd ,_cgeg :=_gbag ._bdbc .Peek (4);if _cgeg !=nil {return MakeBool (false ),_cgeg ;
};if (len (_gfbd )>=4)&&(string (_gfbd [:4])=="\u0074\u0072\u0075\u0065"){_gbag ._bdbc .Discard (4);return MakeBool (true ),nil ;};_gfbd ,_cgeg =_gbag ._bdbc .Peek (5);if _cgeg !=nil {return MakeBool (false ),_cgeg ;};if (len (_gfbd )>=5)&&(string (_gfbd [:5])=="\u0066\u0061\u006cs\u0065"){_gbag ._bdbc .Discard (5);
return MakeBool (false ),nil ;};return MakeBool (false ),_c .New ("\u0075n\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0062o\u006fl\u0065a\u006e\u0020\u0073\u0074\u0072\u0069\u006eg");};func _faf (_dced int )int {if _dced < 0{return -_dced ;};return _dced ;
};func (_ccce *PSProgram )Duplicate ()PSObject {_aff :=&PSProgram {};for _ ,_adg :=range *_ccce {_aff .Append (_adg .Duplicate ());};return _aff ;};func (_gdc *PSOperand )floor (_bbab *PSStack )error {_ebd ,_efb :=_bbab .Pop ();if _efb !=nil {return _efb ;
};if _adab ,_dbd :=_ebd .(*PSReal );_dbd {_efb =_bbab .Push (MakeReal (_f .Floor (_adab .Val )));}else if _cad ,_bfc :=_ebd .(*PSInteger );_bfc {_efb =_bbab .Push (MakeInteger (_cad .Val ));}else {return ErrTypeCheck ;};return _efb ;};func (_bfb *PSOperand )atan (_aa *PSStack )error {_bfg ,_gaef :=_aa .PopNumberAsFloat64 ();
if _gaef !=nil {return _gaef ;};_gff ,_gaef :=_aa .PopNumberAsFloat64 ();if _gaef !=nil {return _gaef ;};if _bfg ==0{var _fbbg error ;if _gff < 0{_fbbg =_aa .Push (MakeReal (270));}else {_fbbg =_aa .Push (MakeReal (90));};return _fbbg ;};_abbc :=_gff /_bfg ;
_cdb :=_f .Atan (_abbc )*180/_f .Pi ;_gaef =_aa .Push (MakeReal (_cdb ));return _gaef ;};var ErrTypeCheck =_c .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");func (_acfb *PSOperand )ge (_befg *PSStack )error {_dad ,_gafb :=_befg .PopNumberAsFloat64 ();
if _gafb !=nil {return _gafb ;};_bga ,_gafb :=_befg .PopNumberAsFloat64 ();if _gafb !=nil {return _gafb ;};if _f .Abs (_bga -_dad )< _bg {_dfba :=_befg .Push (MakeBool (true ));return _dfba ;}else if _bga > _dad {_bdf :=_befg .Push (MakeBool (true ));return _bdf ;
}else {_edde :=_befg .Push (MakeBool (false ));return _edde ;};};

// Append appends an object to the PSProgram.
func (_dab *PSProgram )Append (obj PSObject ){*_dab =append (*_dab ,obj )};func (_ddf *PSOperand )cvr (_cge *PSStack )error {_ffg ,_cec :=_cge .Pop ();if _cec !=nil {return _cec ;};if _bdg ,_bda :=_ffg .(*PSReal );_bda {_cec =_cge .Push (MakeReal (_bdg .Val ));
}else if _gfc ,_ded :=_ffg .(*PSInteger );_ded {_cec =_cge .Push (MakeReal (float64 (_gfc .Val )));}else {return ErrTypeCheck ;};return _cec ;};

// PSStack defines a stack of PSObjects. PSObjects can be pushed on or pull from the stack.
type PSStack []PSObject ;

// MakeBool returns a new PSBoolean object initialized with `val`.
func MakeBool (val bool )*PSBoolean {_ggc :=PSBoolean {};_ggc .Val =val ;return &_ggc };

// MakeOperand returns a new PSOperand object based on string `val`.
func MakeOperand (val string )*PSOperand {_fee :=PSOperand (val );return &_fee };func (_fdbg *PSOperand )exch (_bfab *PSStack )error {_bcce ,_aag :=_bfab .Pop ();if _aag !=nil {return _aag ;};_dfg ,_aag :=_bfab .Pop ();if _aag !=nil {return _aag ;};_aag =_bfab .Push (_bcce );
if _aag !=nil {return _aag ;};_aag =_bfab .Push (_dfg );return _aag ;};func (_agff *PSParser )skipSpaces ()(int ,error ){_efag :=0;for {_gfec ,_gdfe :=_agff ._bdbc .Peek (1);if _gdfe !=nil {return 0,_gdfe ;};if _ac .IsWhiteSpace (_gfec [0]){_agff ._bdbc .ReadByte ();
_efag ++;}else {break ;};};return _efag ,nil ;};

// NewPSStack returns an initialized PSStack.
func NewPSStack ()*PSStack {return &PSStack {}};

// PopNumberAsFloat64 pops and return the numeric value of the top of the stack as a float64.
// Real or integer only.
func (_gec *PSStack )PopNumberAsFloat64 ()(float64 ,error ){_fgcb ,_cga :=_gec .Pop ();if _cga !=nil {return 0,_cga ;};if _ecdad ,_cbca :=_fgcb .(*PSReal );_cbca {return _ecdad .Val ,nil ;}else if _ccd ,_gbad :=_fgcb .(*PSInteger );_gbad {return float64 (_ccd .Val ),nil ;
}else {return 0,ErrTypeCheck ;};};var ErrUndefinedResult =_c .New ("\u0075\u006e\u0064\u0065fi\u006e\u0065\u0064\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0065\u0072\u0072o\u0072");

// PSReal represents a real number.
type PSReal struct{Val float64 ;};func (_aea *PSOperand )le (_aee *PSStack )error {_ebdd ,_dac :=_aee .PopNumberAsFloat64 ();if _dac !=nil {return _dac ;};_gbbg ,_dac :=_aee .PopNumberAsFloat64 ();if _dac !=nil {return _dac ;};if _f .Abs (_gbbg -_ebdd )< _bg {_bgf :=_aee .Push (MakeBool (true ));
return _bgf ;}else if _gbbg < _ebdd {_agb :=_aee .Push (MakeBool (true ));return _agb ;}else {_gbgd :=_aee .Push (MakeBool (false ));return _gbgd ;};};func (_facc *PSOperand )pop (_cdg *PSStack )error {_ ,_cab :=_cdg .Pop ();if _cab !=nil {return _cab ;
};return nil ;};

// PopInteger specificially pops an integer from the top of the stack, returning the value as an int.
func (_egc *PSStack )PopInteger ()(int ,error ){_efea ,_cgg :=_egc .Pop ();if _cgg !=nil {return 0,_cgg ;};if _cfec ,_ecfe :=_efea .(*PSInteger );_ecfe {return _cfec .Val ,nil ;};return 0,ErrTypeCheck ;};func (_efac *PSOperand )xor (_bbac *PSStack )error {_gggg ,_bab :=_bbac .Pop ();
if _bab !=nil {return _bab ;};_abdc ,_bab :=_bbac .Pop ();if _bab !=nil {return _bab ;};if _beb ,_aac :=_gggg .(*PSBoolean );_aac {_abac ,_gdfg :=_abdc .(*PSBoolean );if !_gdfg {return ErrTypeCheck ;};_bab =_bbac .Push (MakeBool (_beb .Val !=_abac .Val ));
return _bab ;};if _eccc ,_dege :=_gggg .(*PSInteger );_dege {_cgbb ,_aaea :=_abdc .(*PSInteger );if !_aaea {return ErrTypeCheck ;};_bab =_bbac .Push (MakeInteger (_eccc .Val ^_cgbb .Val ));return _bab ;};return ErrTypeCheck ;};func (_ff *PSOperand )cvi (_dfd *PSStack )error {_cgf ,_abg :=_dfd .Pop ();
if _abg !=nil {return _abg ;};if _aga ,_fac :=_cgf .(*PSReal );_fac {_cdf :=int (_aga .Val );_abg =_dfd .Push (MakeInteger (_cdf ));}else if _ggd ,_ae :=_cgf .(*PSInteger );_ae {_bdb :=_ggd .Val ;_abg =_dfd .Push (MakeInteger (_bdb ));}else {return ErrTypeCheck ;
};return _abg ;};

// Empty empties the stack.
func (_fcc *PSStack )Empty (){*_fcc =[]PSObject {}};

// PSObjectArrayToFloat64Array converts []PSObject into a []float64 array. Each PSObject must represent a number,
// otherwise a ErrTypeCheck error occurs.
func PSObjectArrayToFloat64Array (objects []PSObject )([]float64 ,error ){var _ag []float64 ;for _ ,_bf :=range objects {if _e ,_bc :=_bf .(*PSInteger );_bc {_ag =append (_ag ,float64 (_e .Val ));}else if _ba ,_ee :=_bf .(*PSReal );_ee {_ag =append (_ag ,_ba .Val );
}else {return nil ,ErrTypeCheck ;};};return _ag ,nil ;};func (_dbc *PSOperand )ln (_dcf *PSStack )error {_dbb ,_gcc :=_dcf .PopNumberAsFloat64 ();if _gcc !=nil {return _gcc ;};_ecg :=_f .Log (_dbb );_gcc =_dcf .Push (MakeReal (_ecg ));return _gcc ;};func (_fcee *PSParser )parseNumber ()(PSObject ,error ){_cfe ,_egbfg :=_ac .ParseNumber (_fcee ._bdbc );
if _egbfg !=nil {return nil ,_egbfg ;};switch _dge :=_cfe .(type ){case *_ac .PdfObjectFloat :return MakeReal (float64 (*_dge )),nil ;case *_ac .PdfObjectInteger :return MakeInteger (int (*_dge )),nil ;};return nil ,_fb .Errorf ("\u0075n\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_cfe );
};

// MakeInteger returns a new PSInteger object initialized with `val`.
func MakeInteger (val int )*PSInteger {_fggc :=PSInteger {};_fggc .Val =val ;return &_fggc };func (_bfgf *PSOperand )cos (_dce *PSStack )error {_ccf ,_ede :=_dce .PopNumberAsFloat64 ();if _ede !=nil {return _ede ;};_fbbd :=_f .Cos (_ccf *_f .Pi /180.0);
_ede =_dce .Push (MakeReal (_fbbd ));return _ede ;};

// PSProgram defines a Postscript program which is a series of PS objects (arguments, commands, programs etc).
type PSProgram []PSObject ;

// Execute executes the program for an input parameters `objects` and returns a slice of output objects.
func (_af *PSExecutor )Execute (objects []PSObject )([]PSObject ,error ){for _ ,_agd :=range objects {_be :=_af .Stack .Push (_agd );if _be !=nil {return nil ,_be ;};};_acc :=_af ._fbg .Exec (_af .Stack );if _acc !=nil {_ca .Log .Debug ("\u0045x\u0065c\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_acc );
return nil ,_acc ;};_ga :=[]PSObject (*_af .Stack );_af .Stack .Empty ();return _ga ,nil ;};

// Push pushes an object on top of the stack.
func (_bfaf *PSStack )Push (obj PSObject )error {if len (*_bfaf )> 100{return ErrStackOverflow ;};*_bfaf =append (*_bfaf ,obj );return nil ;};func (_cade *PSOperand )neg (_fgb *PSStack )error {_baf ,_baa :=_fgb .Pop ();if _baa !=nil {return _baa ;};if _ggf ,_ace :=_baf .(*PSReal );
_ace {_baa =_fgb .Push (MakeReal (-_ggf .Val ));return _baa ;}else if _bfcd ,_dgc :=_baf .(*PSInteger );_dgc {_baa =_fgb .Push (MakeInteger (-_bfcd .Val ));return _baa ;}else {return ErrTypeCheck ;};};func (_aaf *PSOperand )bitshift (_bde *PSStack )error {_acf ,_geb :=_bde .PopInteger ();
if _geb !=nil {return _geb ;};_afbb ,_geb :=_bde .PopInteger ();if _geb !=nil {return _geb ;};var _cb int ;if _acf >=0{_cb =_afbb <<uint (_acf );}else {_cb =_afbb >>uint (-_acf );};_geb =_bde .Push (MakeInteger (_cb ));return _geb ;};func (_bece *PSOperand )abs (_afc *PSStack )error {_acd ,_gbg :=_afc .Pop ();
if _gbg !=nil {return _gbg ;};if _ed ,_abf :=_acd .(*PSReal );_abf {_ec :=_ed .Val ;if _ec < 0{_gbg =_afc .Push (MakeReal (-_ec ));}else {_gbg =_afc .Push (MakeReal (_ec ));};}else if _cf ,_bbb :=_acd .(*PSInteger );_bbb {_ecc :=_cf .Val ;if _ecc < 0{_gbg =_afc .Push (MakeInteger (-_ecc ));
}else {_gbg =_afc .Push (MakeInteger (_ecc ));};}else {return ErrTypeCheck ;};return _gbg ;};func (_dcfc *PSOperand )or (_edcc *PSStack )error {_ceb ,_bea :=_edcc .Pop ();if _bea !=nil {return _bea ;};_gge ,_bea :=_edcc .Pop ();if _bea !=nil {return _bea ;
};if _acbe ,_fbbe :=_ceb .(*PSBoolean );_fbbe {_eed ,_acbf :=_gge .(*PSBoolean );if !_acbf {return ErrTypeCheck ;};_bea =_edcc .Push (MakeBool (_acbe .Val ||_eed .Val ));return _bea ;};if _bbf ,_afcd :=_ceb .(*PSInteger );_afcd {_eac ,_gcbe :=_gge .(*PSInteger );
if !_gcbe {return ErrTypeCheck ;};_bea =_edcc .Push (MakeInteger (_bbf .Val |_eac .Val ));return _bea ;};return ErrTypeCheck ;};

// NewPSProgram returns an empty, initialized PSProgram.
func NewPSProgram ()*PSProgram {return &PSProgram {}};var ErrStackUnderflow =_c .New ("\u0073t\u0061c\u006b\u0020\u0075\u006e\u0064\u0065\u0072\u0066\u006c\u006f\u0077");const _bg =0.000001;var ErrUnsupportedOperand =_c .New ("\u0075\u006e\u0073\u0075pp\u006f\u0072\u0074\u0065\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");
func (_ffgc *PSOperand )idiv (_gcfb *PSStack )error {_gafc ,_dbdf :=_gcfb .Pop ();if _dbdf !=nil {return _dbdf ;};_bacb ,_dbdf :=_gcfb .Pop ();if _dbdf !=nil {return _dbdf ;};_cgb ,_cbcg :=_gafc .(*PSInteger );if !_cbcg {return ErrTypeCheck ;};if _cgb .Val ==0{return ErrUndefinedResult ;
};_fe ,_cbcg :=_bacb .(*PSInteger );if !_cbcg {return ErrTypeCheck ;};_acde :=_fe .Val /_cgb .Val ;_dbdf =_gcfb .Push (MakeInteger (_acde ));return _dbdf ;};func (_de *PSProgram )String ()string {_gb :="\u007b\u0020";for _ ,_gbf :=range *_de {_gb +=_gbf .String ();
_gb +="\u0020";};_gb +="\u007d";return _gb ;};

// Exec executes the program, typically leaving output values on the stack.
func (_eb *PSProgram )Exec (stack *PSStack )error {for _ ,_dg :=range *_eb {var _deg error ;switch _ea :=_dg .(type ){case *PSInteger :_gg :=_ea ;_deg =stack .Push (_gg );case *PSReal :_dd :=_ea ;_deg =stack .Push (_dd );case *PSBoolean :_ef :=_ea ;_deg =stack .Push (_ef );
case *PSProgram :_dda :=_ea ;_deg =stack .Push (_dda );case *PSOperand :_agda :=_ea ;_deg =_agda .Exec (stack );default:return ErrTypeCheck ;};if _deg !=nil {return _deg ;};};return nil ;};func (_gc *PSBoolean )String ()string {return _fb .Sprintf ("\u0025\u0076",_gc .Val )};
func (_gf *PSProgram )DebugString ()string {_gd :="\u007b\u0020";for _ ,_ada :=range *_gf {_gd +=_ada .DebugString ();_gd +="\u0020";};_gd +="\u007d";return _gd ;};func (_ead *PSParser )parseOperand ()(*PSOperand ,error ){var _dagf []byte ;for {_caec ,_cea :=_ead ._bdbc .Peek (1);
if _cea !=nil {if _cea ==_d .EOF {break ;};return nil ,_cea ;};if _ac .IsDelimiter (_caec [0]){break ;};if _ac .IsWhiteSpace (_caec [0]){break ;};_dggg ,_ :=_ead ._bdbc .ReadByte ();_dagf =append (_dagf ,_dggg );};if len (_dagf )==0{return nil ,_c .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064\u0020\u0028\u0065\u006d\u0070\u0074\u0079\u0029");
};return MakeOperand (string (_dagf )),nil ;};func (_gag *PSParser )parseFunction ()(*PSProgram ,error ){_egbf ,_ :=_gag ._bdbc .ReadByte ();if _egbf !='{'{return nil ,_c .New ("\u0069\u006ev\u0061\u006c\u0069d\u0020\u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e");
};_ecda :=NewPSProgram ();for {_gag .skipSpaces ();_gag .skipComments ();_bca ,_ebaf :=_gag ._bdbc .Peek (2);if _ebaf !=nil {if _ebaf ==_d .EOF {break ;};return nil ,_ebaf ;};_ca .Log .Trace ("\u0050e\u0065k\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u003a\u0020\u0025\u0073",string (_bca ));
if _bca [0]=='}'{_ca .Log .Trace ("\u0045\u004f\u0046 \u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e");_gag ._bdbc .ReadByte ();break ;}else if _bca [0]=='{'{_ca .Log .Trace ("\u0046u\u006e\u0063\u0074\u0069\u006f\u006e!");_acfc ,_dgfc :=_gag .parseFunction ();
if _dgfc !=nil {return nil ,_dgfc ;};_ecda .Append (_acfc );}else if _ac .IsDecimalDigit (_bca [0])||(_bca [0]=='-'&&_ac .IsDecimalDigit (_bca [1])){_ca .Log .Trace ("\u002d>\u004e\u0075\u006d\u0062\u0065\u0072!");_abbg ,_caga :=_gag .parseNumber ();if _caga !=nil {return nil ,_caga ;
};_ecda .Append (_abbg );}else {_ca .Log .Trace ("\u002d>\u004fp\u0065\u0072\u0061\u006e\u0064 \u006f\u0072 \u0062\u006f\u006f\u006c\u003f");_bca ,_ =_gag ._bdbc .Peek (5);_eab :=string (_bca );_ca .Log .Trace ("\u0050\u0065\u0065k\u0020\u0073\u0074\u0072\u003a\u0020\u0025\u0073",_eab );
if (len (_eab )> 4)&&(_eab [:5]=="\u0066\u0061\u006cs\u0065"){_adca ,_feda :=_gag .parseBool ();if _feda !=nil {return nil ,_feda ;};_ecda .Append (_adca );}else if (len (_eab )> 3)&&(_eab [:4]=="\u0074\u0072\u0075\u0065"){_aed ,_aec :=_gag .parseBool ();
if _aec !=nil {return nil ,_aec ;};_ecda .Append (_aed );}else {_dded ,_efbd :=_gag .parseOperand ();if _efbd !=nil {return nil ,_efbd ;};_ecda .Append (_dded );};};};return _ecda ,nil ;};

// Pop pops an object from the top of the stack.
func (_dfbe *PSStack )Pop ()(PSObject ,error ){if len (*_dfbe )< 1{return nil ,ErrStackUnderflow ;};_bfafa :=(*_dfbe )[len (*_dfbe )-1];*_dfbe =(*_dfbe )[0:len (*_dfbe )-1];return _bfafa ,nil ;};

// PSOperand represents a Postscript operand (text string).
type PSOperand string ;func (_fbb *PSBoolean )Duplicate ()PSObject {_ce :=PSBoolean {};_ce .Val =_fbb .Val ;return &_ce };

// PSBoolean represents a boolean value.
type PSBoolean struct{Val bool ;};func (_bacdd *PSOperand )sqrt (_aaff *PSStack )error {_cff ,_dafe :=_aaff .PopNumberAsFloat64 ();if _dafe !=nil {return _dafe ;};if _cff < 0{return ErrRangeCheck ;};_eefc :=_f .Sqrt (_cff );_dafe =_aaff .Push (MakeReal (_eefc ));
return _dafe ;};

// PSParser is a basic Postscript parser.
type PSParser struct{_bdbc *_b .Reader };func (_efg *PSOperand )ifelse (_gcg *PSStack )error {_cbee ,_fgc :=_gcg .Pop ();if _fgc !=nil {return _fgc ;};_bfag ,_fgc :=_gcg .Pop ();if _fgc !=nil {return _fgc ;};_ced ,_fgc :=_gcg .Pop ();if _fgc !=nil {return _fgc ;
};_abad ,_gfg :=_cbee .(*PSProgram );if !_gfg {return ErrTypeCheck ;};_eff ,_gfg :=_bfag .(*PSProgram );if !_gfg {return ErrTypeCheck ;};_fbfb ,_gfg :=_ced .(*PSBoolean );if !_gfg {return ErrTypeCheck ;};if _fbfb .Val {_gcff :=_eff .Exec (_gcg );return _gcff ;
};_fgc =_abad .Exec (_gcg );return _fgc ;};func (_aba *PSOperand )exp (_abfc *PSStack )error {_edb ,_cbg :=_abfc .PopNumberAsFloat64 ();if _cbg !=nil {return _cbg ;};_fgaa ,_cbg :=_abfc .PopNumberAsFloat64 ();if _cbg !=nil {return _cbg ;};if _f .Abs (_edb )< 1&&_fgaa < 0{return ErrUndefinedResult ;
};_dff :=_f .Pow (_fgaa ,_edb );_cbg =_abfc .Push (MakeReal (_dff ));return _cbg ;};

// String returns a string representation of the stack.
func (_cbgf *PSStack )String ()string {_abbgf :="\u005b\u0020";for _ ,_bafg :=range *_cbgf {_abbgf +=_bafg .String ();_abbgf +="\u0020";};_abbgf +="\u005d";return _abbgf ;};func (_fcb *PSOperand )div (_cfbe *PSStack )error {_ecf ,_bcg :=_cfbe .Pop ();if _bcg !=nil {return _bcg ;
};_ecde ,_bcg :=_cfbe .Pop ();if _bcg !=nil {return _bcg ;};_ffb ,_dfb :=_ecf .(*PSReal );_aabc ,_cca :=_ecf .(*PSInteger );if !_dfb &&!_cca {return ErrTypeCheck ;};if _dfb &&_ffb .Val ==0{return ErrUndefinedResult ;};if _cca &&_aabc .Val ==0{return ErrUndefinedResult ;
};_ggaa ,_gcf :=_ecde .(*PSReal );_dgg ,_gbb :=_ecde .(*PSInteger );if !_gcf &&!_gbb {return ErrTypeCheck ;};var _bdad float64 ;if _gcf {_bdad =_ggaa .Val ;}else {_bdad =float64 (_dgg .Val );};if _dfb {_bdad /=_ffb .Val ;}else {_bdad /=float64 (_aabc .Val );
};_bcg =_cfbe .Push (MakeReal (_bdad ));return _bcg ;};func (_bec *PSOperand )Duplicate ()PSObject {_df :=*_bec ;return &_df };

// Exec executes the operand `op` in the state specified by `stack`.
func (_ebb *PSOperand )Exec (stack *PSStack )error {_bb :=ErrUnsupportedOperand ;switch *_ebb {case "\u0061\u0062\u0073":_bb =_ebb .abs (stack );case "\u0061\u0064\u0064":_bb =_ebb .add (stack );case "\u0061\u006e\u0064":_bb =_ebb .and (stack );case "\u0061\u0074\u0061\u006e":_bb =_ebb .atan (stack );
case "\u0062\u0069\u0074\u0073\u0068\u0069\u0066\u0074":_bb =_ebb .bitshift (stack );case "\u0063e\u0069\u006c\u0069\u006e\u0067":_bb =_ebb .ceiling (stack );case "\u0063\u006f\u0070\u0079":_bb =_ebb .copy (stack );case "\u0063\u006f\u0073":_bb =_ebb .cos (stack );
case "\u0063\u0076\u0069":_bb =_ebb .cvi (stack );case "\u0063\u0076\u0072":_bb =_ebb .cvr (stack );case "\u0064\u0069\u0076":_bb =_ebb .div (stack );case "\u0064\u0075\u0070":_bb =_ebb .dup (stack );case "\u0065\u0071":_bb =_ebb .eq (stack );case "\u0065\u0078\u0063\u0068":_bb =_ebb .exch (stack );
case "\u0065\u0078\u0070":_bb =_ebb .exp (stack );case "\u0066\u006c\u006fo\u0072":_bb =_ebb .floor (stack );case "\u0067\u0065":_bb =_ebb .ge (stack );case "\u0067\u0074":_bb =_ebb .gt (stack );case "\u0069\u0064\u0069\u0076":_bb =_ebb .idiv (stack );
case "\u0069\u0066":_bb =_ebb .ifCondition (stack );case "\u0069\u0066\u0065\u006c\u0073\u0065":_bb =_ebb .ifelse (stack );case "\u0069\u006e\u0064e\u0078":_bb =_ebb .index (stack );case "\u006c\u0065":_bb =_ebb .le (stack );case "\u006c\u006f\u0067":_bb =_ebb .log (stack );
case "\u006c\u006e":_bb =_ebb .ln (stack );case "\u006c\u0074":_bb =_ebb .lt (stack );case "\u006d\u006f\u0064":_bb =_ebb .mod (stack );case "\u006d\u0075\u006c":_bb =_ebb .mul (stack );case "\u006e\u0065":_bb =_ebb .ne (stack );case "\u006e\u0065\u0067":_bb =_ebb .neg (stack );
case "\u006e\u006f\u0074":_bb =_ebb .not (stack );case "\u006f\u0072":_bb =_ebb .or (stack );case "\u0070\u006f\u0070":_bb =_ebb .pop (stack );case "\u0072\u006f\u0075n\u0064":_bb =_ebb .round (stack );case "\u0072\u006f\u006c\u006c":_bb =_ebb .roll (stack );
case "\u0073\u0069\u006e":_bb =_ebb .sin (stack );case "\u0073\u0071\u0072\u0074":_bb =_ebb .sqrt (stack );case "\u0073\u0075\u0062":_bb =_ebb .sub (stack );case "\u0074\u0072\u0075\u006e\u0063\u0061\u0074\u0065":_bb =_ebb .truncate (stack );case "\u0078\u006f\u0072":_bb =_ebb .xor (stack );
};return _bb ;};func (_ddb *PSOperand )round (_gbbc *PSStack )error {_afd ,_gefe :=_gbbc .Pop ();if _gefe !=nil {return _gefe ;};if _ggff ,_eda :=_afd .(*PSReal );_eda {_gefe =_gbbc .Push (MakeReal (_f .Floor (_ggff .Val +0.5)));}else if _agbd ,_dfa :=_afd .(*PSInteger );
_dfa {_gefe =_gbbc .Push (MakeInteger (_agbd .Val ));}else {return ErrTypeCheck ;};return _gefe ;};

// PSExecutor has its own execution stack and is used to executre a PS routine (program).
type PSExecutor struct{Stack *PSStack ;_fbg *PSProgram ;};func (_ab *PSBoolean )DebugString ()string {return _fb .Sprintf ("\u0062o\u006f\u006c\u003a\u0025\u0076",_ab .Val );};func (_gabc *PSOperand )copy (_fbbf *PSStack )error {_fdb ,_ecb :=_fbbf .PopInteger ();
if _ecb !=nil {return _ecb ;};if _fdb < 0{return ErrRangeCheck ;};if _fdb > len (*_fbbf ){return ErrRangeCheck ;};*_fbbf =append (*_fbbf ,(*_fbbf )[len (*_fbbf )-_fdb :]...);return nil ;};func (_bdfc *PSOperand )not (_age *PSStack )error {_fae ,_ggac :=_age .Pop ();
if _ggac !=nil {return _ggac ;};if _dag ,_aafec :=_fae .(*PSBoolean );_aafec {_ggac =_age .Push (MakeBool (!_dag .Val ));return _ggac ;}else if _dffb ,_aaeg :=_fae .(*PSInteger );_aaeg {_ggac =_age .Push (MakeInteger (^_dffb .Val ));return _ggac ;}else {return ErrTypeCheck ;
};};